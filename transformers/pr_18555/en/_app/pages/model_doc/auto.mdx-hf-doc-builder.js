import{S as mta,i as gta,s as hta,e as a,k as l,w as F,t as o,M as pta,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as _ta,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Uft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function uta($){let g,v,p,m,_,d,h,Ao,Oi,om,ft,Vi,Xi,gy,rm,Ve,Ue,zi,Xn,hy,zn,Wn,py,Wi,Qn,_y,Qi,tm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),om=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),gy=o(")."),rm=l(),Ve=a("p"),Ue=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),hy=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),py=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),_y=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),tm=o("NewModelConfig"),ja=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var sP=s(p);m=r(sP,"NewModelConfig"),sP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var lP=s(Oi);om=r(lP,"model_type"),lP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var iP=s(Vi);Xi=r(iP,'"new-model"'),iP.forEach(t),gy=r(Ae,")."),Ae.forEach(t),rm=i(He),Ve=n(He,"P",{});var Lo=s(Ve);Ue=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),hy=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var dP=s(zn);Wn=r(dP,"PreTrainedModel"),dP.forEach(t),py=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var am=s(Wi);Qn=r(am,"config_class"),am.forEach(t),_y=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var cP=s(Qi);tm=r(cP,"NewModelConfig"),cP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,om),e(g,ft),e(g,Vi),e(Vi,Xi),e(g,gy),b(He,rm,Ae),b(He,Ve,Ae),e(Ve,Ue),e(Ve,zi),e(zi,Xn),e(Ve,hy),e(Ve,zn),e(zn,Wn),e(Ve,py),e(Ve,Wi),e(Wi,Qn),e(Ve,_y),e(Ve,Qi),e(Qi,tm),e(Ve,ja)},d(He){He&&t(g),He&&t(rm),He&&t(Ve)}}}function bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ena($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ona($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ana($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ina($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _na($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function una($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fna($){let g,v,p,m,_,d,h,Ao,Oi,om,ft,Vi,Xi,gy,rm,Ve,Ue,zi,Xn,hy,zn,Wn,py,Wi,Qn,_y,Qi,tm,ja,He,Ae,sP,Ui,lP,iP,Lo,Da,dP,am,cP,MKe,ZQe,Hi,nm,Vse,uy,EKe,Xse,CKe,eUe,Un,wKe,zse,AKe,LKe,Wse,yKe,xKe,oUe,by,rUe,fP,$Ke,tUe,sm,aUe,Ji,lm,Qse,vy,kKe,Use,SKe,nUe,yo,Fy,RKe,Ty,PKe,mP,BKe,IKe,NKe,My,qKe,Hse,jKe,DKe,GKe,kr,Ey,OKe,Jse,VKe,XKe,Yi,zKe,Yse,WKe,QKe,Kse,UKe,HKe,JKe,A,im,Zse,YKe,KKe,gP,ZKe,eZe,oZe,dm,ele,rZe,tZe,hP,aZe,nZe,sZe,cm,ole,lZe,iZe,pP,dZe,cZe,fZe,fm,rle,mZe,gZe,_P,hZe,pZe,_Ze,mm,tle,uZe,bZe,uP,vZe,FZe,TZe,gm,ale,MZe,EZe,bP,CZe,wZe,AZe,hm,nle,LZe,yZe,vP,xZe,$Ze,kZe,pm,sle,SZe,RZe,FP,PZe,BZe,IZe,_m,lle,NZe,qZe,TP,jZe,DZe,GZe,um,ile,OZe,VZe,MP,XZe,zZe,WZe,bm,dle,QZe,UZe,EP,HZe,JZe,YZe,vm,cle,KZe,ZZe,CP,eeo,oeo,reo,Fm,fle,teo,aeo,wP,neo,seo,leo,Tm,mle,ieo,deo,AP,ceo,feo,meo,Mm,gle,geo,heo,LP,peo,_eo,ueo,Em,hle,beo,veo,yP,Feo,Teo,Meo,Cm,ple,Eeo,Ceo,xP,weo,Aeo,Leo,wm,_le,yeo,xeo,$P,$eo,keo,Seo,Am,ule,Reo,Peo,kP,Beo,Ieo,Neo,Lm,ble,qeo,jeo,SP,Deo,Geo,Oeo,ym,vle,Veo,Xeo,RP,zeo,Weo,Qeo,xm,Fle,Ueo,Heo,PP,Jeo,Yeo,Keo,$m,Tle,Zeo,eoo,BP,ooo,roo,too,km,Mle,aoo,noo,IP,soo,loo,ioo,Sm,Ele,doo,coo,NP,foo,moo,goo,Rm,Cle,hoo,poo,qP,_oo,uoo,boo,Pm,wle,voo,Foo,jP,Too,Moo,Eoo,Bm,Ale,Coo,woo,DP,Aoo,Loo,yoo,Im,Lle,xoo,$oo,GP,koo,Soo,Roo,Nm,yle,Poo,Boo,OP,Ioo,Noo,qoo,qm,xle,joo,Doo,VP,Goo,Ooo,Voo,jm,$le,Xoo,zoo,XP,Woo,Qoo,Uoo,Dm,kle,Hoo,Joo,zP,Yoo,Koo,Zoo,Gm,Sle,ero,oro,WP,rro,tro,aro,Om,Rle,nro,sro,QP,lro,iro,dro,Vm,Ple,cro,fro,UP,mro,gro,hro,Xm,Ble,pro,_ro,HP,uro,bro,vro,zm,Ile,Fro,Tro,JP,Mro,Ero,Cro,Wm,Nle,wro,Aro,YP,Lro,yro,xro,Qm,qle,$ro,kro,KP,Sro,Rro,Pro,Um,jle,Bro,Iro,ZP,Nro,qro,jro,Hm,Dle,Dro,Gro,eB,Oro,Vro,Xro,Jm,Gle,zro,Wro,oB,Qro,Uro,Hro,Ym,Ole,Jro,Yro,rB,Kro,Zro,eto,Km,Vle,oto,rto,tB,tto,ato,nto,Zm,Xle,sto,lto,aB,ito,dto,cto,eg,zle,fto,mto,nB,gto,hto,pto,og,Wle,_to,uto,sB,bto,vto,Fto,rg,Qle,Tto,Mto,lB,Eto,Cto,wto,tg,Ule,Ato,Lto,iB,yto,xto,$to,ag,Hle,kto,Sto,dB,Rto,Pto,Bto,ng,Jle,Ito,Nto,cB,qto,jto,Dto,sg,Yle,Gto,Oto,fB,Vto,Xto,zto,lg,Kle,Wto,Qto,mB,Uto,Hto,Jto,ig,Zle,Yto,Kto,gB,Zto,eao,oao,dg,eie,rao,tao,hB,aao,nao,sao,cg,oie,lao,iao,pB,dao,cao,fao,fg,rie,mao,gao,_B,hao,pao,_ao,mg,tie,uao,bao,uB,vao,Fao,Tao,gg,aie,Mao,Eao,bB,Cao,wao,Aao,hg,nie,Lao,yao,vB,xao,$ao,kao,pg,sie,Sao,Rao,FB,Pao,Bao,Iao,_g,lie,Nao,qao,TB,jao,Dao,Gao,ug,iie,Oao,Vao,MB,Xao,zao,Wao,bg,die,Qao,Uao,EB,Hao,Jao,Yao,vg,cie,Kao,Zao,CB,eno,ono,rno,Fg,fie,tno,ano,wB,nno,sno,lno,Tg,mie,ino,dno,AB,cno,fno,mno,Mg,gie,gno,hno,LB,pno,_no,uno,Eg,hie,bno,vno,yB,Fno,Tno,Mno,Cg,pie,Eno,Cno,xB,wno,Ano,Lno,wg,_ie,yno,xno,$B,$no,kno,Sno,Ag,uie,Rno,Pno,kB,Bno,Ino,Nno,Lg,bie,qno,jno,SB,Dno,Gno,Ono,yg,vie,Vno,Xno,RB,zno,Wno,Qno,xg,Fie,Uno,Hno,PB,Jno,Yno,Kno,$g,Tie,Zno,eso,BB,oso,rso,tso,kg,Mie,aso,nso,IB,sso,lso,iso,Sg,Eie,dso,cso,NB,fso,mso,gso,Rg,Cie,hso,pso,qB,_so,uso,bso,Pg,wie,vso,Fso,jB,Tso,Mso,Eso,Bg,Aie,Cso,wso,DB,Aso,Lso,yso,Ig,Lie,xso,$so,GB,kso,Sso,Rso,Ng,yie,Pso,Bso,OB,Iso,Nso,qso,qg,xie,jso,Dso,VB,Gso,Oso,Vso,jg,$ie,Xso,zso,XB,Wso,Qso,Uso,Dg,kie,Hso,Jso,zB,Yso,Kso,Zso,Gg,Sie,elo,olo,WB,rlo,tlo,alo,Og,Rie,nlo,slo,QB,llo,ilo,dlo,Vg,Pie,clo,flo,UB,mlo,glo,hlo,Xg,Bie,plo,_lo,HB,ulo,blo,vlo,zg,Iie,Flo,Tlo,JB,Mlo,Elo,Clo,Wg,Nie,wlo,Alo,YB,Llo,ylo,xlo,Qg,qie,$lo,klo,KB,Slo,Rlo,Plo,Ug,jie,Blo,Ilo,ZB,Nlo,qlo,jlo,Hg,Die,Dlo,Glo,eI,Olo,Vlo,Xlo,Jg,Gie,zlo,Wlo,oI,Qlo,Ulo,Hlo,Yg,Oie,Jlo,Ylo,rI,Klo,Zlo,eio,Kg,Vie,oio,rio,tI,tio,aio,nio,Zg,Xie,sio,lio,aI,iio,dio,cio,eh,zie,fio,mio,nI,gio,hio,pio,oh,Wie,_io,uio,sI,bio,vio,Fio,rh,Qie,Tio,Mio,lI,Eio,Cio,wio,th,Uie,Aio,Lio,iI,yio,xio,$io,ah,Hie,kio,Sio,dI,Rio,Pio,Bio,nh,Jie,Iio,Nio,cI,qio,jio,Dio,sh,Yie,Gio,Oio,fI,Vio,Xio,zio,lh,Kie,Wio,Qio,mI,Uio,Hio,Jio,ih,Zie,Yio,Kio,gI,Zio,edo,odo,dh,ede,rdo,tdo,hI,ado,ndo,sdo,ch,ode,ldo,ido,pI,ddo,cdo,fdo,fh,rde,mdo,gdo,_I,hdo,pdo,_do,mh,tde,udo,bdo,uI,vdo,Fdo,Tdo,gh,ade,Mdo,Edo,bI,Cdo,wdo,Ado,hh,nde,Ldo,ydo,vI,xdo,$do,kdo,ph,sde,Sdo,Rdo,FI,Pdo,Bdo,Ido,_h,lde,Ndo,qdo,TI,jdo,Ddo,Gdo,uh,ide,Odo,Vdo,MI,Xdo,zdo,Wdo,bh,dde,Qdo,Udo,EI,Hdo,Jdo,Ydo,vh,cde,Kdo,Zdo,CI,eco,oco,rco,Fh,fde,tco,aco,wI,nco,sco,lco,Th,mde,ico,dco,AI,cco,fco,mco,Mh,gco,Eh,Cy,hco,gde,pco,sUe,Ki,Ch,hde,wy,_co,pde,uco,lUe,xo,Ay,bco,Ly,vco,LI,Fco,Tco,Mco,yy,Eco,_de,Cco,wco,Aco,Sr,xy,Lco,ude,yco,xco,Ga,$co,bde,kco,Sco,vde,Rco,Pco,Fde,Bco,Ico,Nco,k,Hn,Tde,qco,jco,yI,Dco,Gco,xI,Oco,Vco,Xco,Jn,Mde,zco,Wco,$I,Qco,Uco,kI,Hco,Jco,Yco,Yn,Ede,Kco,Zco,SI,efo,ofo,RI,rfo,tfo,afo,wh,Cde,nfo,sfo,PI,lfo,ifo,dfo,Kn,wde,cfo,ffo,BI,mfo,gfo,II,hfo,pfo,_fo,Ah,Ade,ufo,bfo,NI,vfo,Ffo,Tfo,Lh,Lde,Mfo,Efo,qI,Cfo,wfo,Afo,yh,yde,Lfo,yfo,jI,xfo,$fo,kfo,Zn,xde,Sfo,Rfo,DI,Pfo,Bfo,GI,Ifo,Nfo,qfo,es,$de,jfo,Dfo,OI,Gfo,Ofo,VI,Vfo,Xfo,zfo,os,kde,Wfo,Qfo,XI,Ufo,Hfo,zI,Jfo,Yfo,Kfo,xh,Sde,Zfo,emo,WI,omo,rmo,tmo,$h,Rde,amo,nmo,QI,smo,lmo,imo,kh,Pde,dmo,cmo,UI,fmo,mmo,gmo,rs,Bde,hmo,pmo,HI,_mo,umo,JI,bmo,vmo,Fmo,Sh,Ide,Tmo,Mmo,YI,Emo,Cmo,wmo,ts,Nde,Amo,Lmo,KI,ymo,xmo,ZI,$mo,kmo,Smo,as,qde,Rmo,Pmo,eN,Bmo,Imo,oN,Nmo,qmo,jmo,ns,jde,Dmo,Gmo,rN,Omo,Vmo,tN,Xmo,zmo,Wmo,ss,Dde,Qmo,Umo,aN,Hmo,Jmo,nN,Ymo,Kmo,Zmo,Rh,Gde,ego,ogo,sN,rgo,tgo,ago,ls,Ode,ngo,sgo,lN,lgo,igo,iN,dgo,cgo,fgo,is,Vde,mgo,ggo,dN,hgo,pgo,cN,_go,ugo,bgo,ds,Xde,vgo,Fgo,fN,Tgo,Mgo,mN,Ego,Cgo,wgo,cs,zde,Ago,Lgo,gN,ygo,xgo,hN,$go,kgo,Sgo,fs,Wde,Rgo,Pgo,pN,Bgo,Igo,_N,Ngo,qgo,jgo,ms,Qde,Dgo,Ggo,uN,Ogo,Vgo,bN,Xgo,zgo,Wgo,Ph,Ude,Qgo,Ugo,vN,Hgo,Jgo,Ygo,gs,Hde,Kgo,Zgo,FN,eho,oho,TN,rho,tho,aho,Bh,Jde,nho,sho,MN,lho,iho,dho,hs,Yde,cho,fho,EN,mho,gho,CN,hho,pho,_ho,ps,Kde,uho,bho,wN,vho,Fho,AN,Tho,Mho,Eho,_s,Zde,Cho,who,LN,Aho,Lho,yN,yho,xho,$ho,Ih,ece,kho,Sho,xN,Rho,Pho,Bho,us,oce,Iho,Nho,$N,qho,jho,kN,Dho,Gho,Oho,bs,rce,Vho,Xho,SN,zho,Who,RN,Qho,Uho,Hho,vs,tce,Jho,Yho,PN,Kho,Zho,BN,epo,opo,rpo,Nh,ace,tpo,apo,IN,npo,spo,lpo,Fs,nce,ipo,dpo,NN,cpo,fpo,qN,mpo,gpo,hpo,Ts,sce,ppo,_po,jN,upo,bpo,DN,vpo,Fpo,Tpo,Ms,lce,Mpo,Epo,GN,Cpo,wpo,ON,Apo,Lpo,ypo,Es,ice,xpo,$po,VN,kpo,Spo,XN,Rpo,Ppo,Bpo,Cs,dce,Ipo,Npo,zN,qpo,jpo,WN,Dpo,Gpo,Opo,ws,cce,Vpo,Xpo,QN,zpo,Wpo,UN,Qpo,Upo,Hpo,As,fce,Jpo,Ypo,HN,Kpo,Zpo,JN,e_o,o_o,r_o,Ls,mce,t_o,a_o,YN,n_o,s_o,KN,l_o,i_o,d_o,qh,gce,c_o,f_o,ZN,m_o,g_o,h_o,ys,hce,p_o,__o,eq,u_o,b_o,oq,v_o,F_o,T_o,jh,pce,M_o,E_o,rq,C_o,w_o,A_o,Dh,_ce,L_o,y_o,tq,x_o,$_o,k_o,xs,uce,S_o,R_o,aq,P_o,B_o,nq,I_o,N_o,q_o,$s,bce,j_o,D_o,sq,G_o,O_o,lq,V_o,X_o,z_o,ks,vce,W_o,Q_o,iq,U_o,H_o,dq,J_o,Y_o,K_o,Gh,Fce,Z_o,euo,cq,ouo,ruo,tuo,Ss,Tce,auo,nuo,fq,suo,luo,mq,iuo,duo,cuo,Rs,Mce,fuo,muo,gq,guo,huo,hq,puo,_uo,uuo,Ps,Ece,buo,vuo,pq,Fuo,Tuo,_q,Muo,Euo,Cuo,Bs,Cce,wuo,Auo,uq,Luo,yuo,bq,xuo,$uo,kuo,Is,wce,Suo,Ruo,vq,Puo,Buo,Fq,Iuo,Nuo,quo,Ns,Ace,juo,Duo,Tq,Guo,Ouo,Mq,Vuo,Xuo,zuo,qs,Lce,Wuo,Quo,Eq,Uuo,Huo,Cq,Juo,Yuo,Kuo,js,yce,Zuo,e5o,wq,o5o,r5o,Aq,t5o,a5o,n5o,Oh,xce,s5o,l5o,Lq,i5o,d5o,c5o,Ds,$ce,f5o,m5o,yq,g5o,h5o,xq,p5o,_5o,u5o,Gs,kce,b5o,v5o,$q,F5o,T5o,kq,M5o,E5o,C5o,Vh,Sce,w5o,A5o,Sq,L5o,y5o,x5o,Xh,Rce,$5o,k5o,Rq,S5o,R5o,P5o,zh,Pce,B5o,I5o,Pq,N5o,q5o,j5o,Wh,Bce,D5o,G5o,Bq,O5o,V5o,X5o,Os,Ice,z5o,W5o,Iq,Q5o,U5o,Nq,H5o,J5o,Y5o,Qh,Nce,K5o,Z5o,qq,e1o,o1o,r1o,Vs,qce,t1o,a1o,jq,n1o,s1o,Dq,l1o,i1o,d1o,Xs,jce,c1o,f1o,Gq,m1o,g1o,Oq,h1o,p1o,_1o,zs,Dce,u1o,b1o,Vq,v1o,F1o,Xq,T1o,M1o,E1o,Ws,Gce,C1o,w1o,zq,A1o,L1o,Wq,y1o,x1o,$1o,Qs,Oce,k1o,S1o,Qq,R1o,P1o,Uq,B1o,I1o,N1o,Us,Vce,q1o,j1o,Hq,D1o,G1o,Jq,O1o,V1o,X1o,Uh,Xce,z1o,W1o,Yq,Q1o,U1o,H1o,Hh,zce,J1o,Y1o,Kq,K1o,Z1o,e2o,Hs,Wce,o2o,r2o,Zq,t2o,a2o,ej,n2o,s2o,l2o,Js,Qce,i2o,d2o,oj,c2o,f2o,rj,m2o,g2o,h2o,Ys,Uce,p2o,_2o,tj,u2o,b2o,aj,v2o,F2o,T2o,Jh,Hce,M2o,E2o,nj,C2o,w2o,A2o,Yh,Jce,L2o,y2o,sj,x2o,$2o,k2o,Kh,Yce,S2o,R2o,lj,P2o,B2o,I2o,Ks,Kce,N2o,q2o,ij,j2o,D2o,dj,G2o,O2o,V2o,Zs,Zce,X2o,z2o,cj,W2o,Q2o,fj,U2o,H2o,J2o,Zh,efe,Y2o,K2o,mj,Z2o,ebo,obo,ep,ofe,rbo,tbo,gj,abo,nbo,sbo,op,rfe,lbo,ibo,hj,dbo,cbo,fbo,el,tfe,mbo,gbo,pj,hbo,pbo,_j,_bo,ubo,bbo,rp,afe,vbo,Fbo,uj,Tbo,Mbo,Ebo,tp,nfe,Cbo,wbo,bj,Abo,Lbo,ybo,ol,sfe,xbo,$bo,vj,kbo,Sbo,Fj,Rbo,Pbo,Bbo,rl,lfe,Ibo,Nbo,Tj,qbo,jbo,Mj,Dbo,Gbo,Obo,tl,ife,Vbo,Xbo,Ej,zbo,Wbo,Cj,Qbo,Ubo,Hbo,al,dfe,Jbo,Ybo,wj,Kbo,Zbo,Aj,evo,ovo,rvo,ap,tvo,np,$y,avo,cfe,nvo,iUe,Zi,sp,ffe,ky,svo,mfe,lvo,dUe,$o,Sy,ivo,Ry,dvo,Lj,cvo,fvo,mvo,Py,gvo,gfe,hvo,pvo,_vo,Je,By,uvo,hfe,bvo,vvo,Oa,Fvo,pfe,Tvo,Mvo,_fe,Evo,Cvo,ufe,wvo,Avo,Lvo,Q,lp,bfe,yvo,xvo,yj,$vo,kvo,Svo,ip,vfe,Rvo,Pvo,xj,Bvo,Ivo,Nvo,dp,Ffe,qvo,jvo,$j,Dvo,Gvo,Ovo,cp,Tfe,Vvo,Xvo,kj,zvo,Wvo,Qvo,fp,Mfe,Uvo,Hvo,Sj,Jvo,Yvo,Kvo,mp,Efe,Zvo,eFo,Rj,oFo,rFo,tFo,gp,Cfe,aFo,nFo,Pj,sFo,lFo,iFo,hp,wfe,dFo,cFo,Bj,fFo,mFo,gFo,pp,Afe,hFo,pFo,Ij,_Fo,uFo,bFo,_p,Lfe,vFo,FFo,Nj,TFo,MFo,EFo,up,yfe,CFo,wFo,qj,AFo,LFo,yFo,bp,xfe,xFo,$Fo,jj,kFo,SFo,RFo,vp,$fe,PFo,BFo,Dj,IFo,NFo,qFo,Fp,kfe,jFo,DFo,Gj,GFo,OFo,VFo,Tp,Sfe,XFo,zFo,Oj,WFo,QFo,UFo,Mp,Rfe,HFo,JFo,Vj,YFo,KFo,ZFo,Ep,Pfe,eTo,oTo,Xj,rTo,tTo,aTo,Cp,Bfe,nTo,sTo,zj,lTo,iTo,dTo,wp,Ife,cTo,fTo,Wj,mTo,gTo,hTo,Ap,Nfe,pTo,_To,Qj,uTo,bTo,vTo,Lp,qfe,FTo,TTo,Uj,MTo,ETo,CTo,yp,jfe,wTo,ATo,Hj,LTo,yTo,xTo,xp,Dfe,$To,kTo,Jj,STo,RTo,PTo,$p,Gfe,BTo,ITo,Yj,NTo,qTo,jTo,kp,Ofe,DTo,GTo,Kj,OTo,VTo,XTo,Sp,Vfe,zTo,WTo,Zj,QTo,UTo,HTo,Rp,Xfe,JTo,YTo,eD,KTo,ZTo,e8o,Pp,zfe,o8o,r8o,oD,t8o,a8o,n8o,Bp,Wfe,s8o,l8o,rD,i8o,d8o,c8o,Ip,Qfe,f8o,m8o,tD,g8o,h8o,p8o,Np,Ufe,_8o,u8o,aD,b8o,v8o,F8o,qp,Hfe,T8o,M8o,nD,E8o,C8o,w8o,jp,Jfe,A8o,L8o,sD,y8o,x8o,$8o,Dp,Yfe,k8o,S8o,lD,R8o,P8o,B8o,Gp,Kfe,I8o,N8o,iD,q8o,j8o,D8o,Op,Zfe,G8o,O8o,dD,V8o,X8o,z8o,Vp,eme,W8o,Q8o,cD,U8o,H8o,J8o,Xp,ome,Y8o,K8o,fD,Z8o,eMo,oMo,zp,rMo,Wp,tMo,Qp,Iy,aMo,rme,nMo,cUe,ed,Up,tme,Ny,sMo,ame,lMo,fUe,ko,qy,iMo,jy,dMo,mD,cMo,fMo,mMo,Dy,gMo,nme,hMo,pMo,_Mo,Ye,Gy,uMo,sme,bMo,vMo,od,FMo,lme,TMo,MMo,ime,EMo,CMo,wMo,ie,Hp,dme,AMo,LMo,gD,yMo,xMo,$Mo,Jp,cme,kMo,SMo,hD,RMo,PMo,BMo,Yp,fme,IMo,NMo,pD,qMo,jMo,DMo,Kp,mme,GMo,OMo,_D,VMo,XMo,zMo,Zp,gme,WMo,QMo,uD,UMo,HMo,JMo,e_,hme,YMo,KMo,bD,ZMo,eEo,oEo,o_,pme,rEo,tEo,vD,aEo,nEo,sEo,r_,_me,lEo,iEo,FD,dEo,cEo,fEo,t_,ume,mEo,gEo,TD,hEo,pEo,_Eo,a_,bme,uEo,bEo,MD,vEo,FEo,TEo,n_,vme,MEo,EEo,ED,CEo,wEo,AEo,s_,Fme,LEo,yEo,CD,xEo,$Eo,kEo,l_,Tme,SEo,REo,wD,PEo,BEo,IEo,i_,Mme,NEo,qEo,AD,jEo,DEo,GEo,d_,Eme,OEo,VEo,LD,XEo,zEo,WEo,c_,Cme,QEo,UEo,yD,HEo,JEo,YEo,f_,wme,KEo,ZEo,xD,e4o,o4o,r4o,m_,Ame,t4o,a4o,$D,n4o,s4o,l4o,g_,Lme,i4o,d4o,kD,c4o,f4o,m4o,h_,yme,g4o,h4o,SD,p4o,_4o,u4o,p_,b4o,__,v4o,u_,Oy,F4o,xme,T4o,mUe,rd,b_,$me,Vy,M4o,kme,E4o,gUe,So,Xy,C4o,td,w4o,RD,A4o,L4o,PD,y4o,x4o,$4o,zy,k4o,Sme,S4o,R4o,P4o,mt,Wy,B4o,Rme,I4o,N4o,ad,q4o,Pme,j4o,D4o,BD,G4o,O4o,V4o,v_,X4o,Ke,Qy,z4o,Bme,W4o,Q4o,Va,U4o,Ime,H4o,J4o,Nme,Y4o,K4o,qme,Z4o,eCo,oCo,y,F_,jme,rCo,tCo,ID,aCo,nCo,sCo,T_,Dme,lCo,iCo,ND,dCo,cCo,fCo,M_,Gme,mCo,gCo,qD,hCo,pCo,_Co,E_,Ome,uCo,bCo,jD,vCo,FCo,TCo,C_,Vme,MCo,ECo,DD,CCo,wCo,ACo,w_,Xme,LCo,yCo,GD,xCo,$Co,kCo,A_,zme,SCo,RCo,OD,PCo,BCo,ICo,L_,Wme,NCo,qCo,VD,jCo,DCo,GCo,y_,Qme,OCo,VCo,XD,XCo,zCo,WCo,x_,Ume,QCo,UCo,zD,HCo,JCo,YCo,$_,Hme,KCo,ZCo,WD,e3o,o3o,r3o,k_,Jme,t3o,a3o,QD,n3o,s3o,l3o,S_,Yme,i3o,d3o,UD,c3o,f3o,m3o,R_,Kme,g3o,h3o,HD,p3o,_3o,u3o,P_,Zme,b3o,v3o,JD,F3o,T3o,M3o,B_,ege,E3o,C3o,YD,w3o,A3o,L3o,I_,oge,y3o,x3o,KD,$3o,k3o,S3o,N_,rge,R3o,P3o,ZD,B3o,I3o,N3o,q_,tge,q3o,j3o,eG,D3o,G3o,O3o,j_,age,V3o,X3o,oG,z3o,W3o,Q3o,D_,nge,U3o,H3o,rG,J3o,Y3o,K3o,G_,sge,Z3o,e0o,tG,o0o,r0o,t0o,O_,lge,a0o,n0o,aG,s0o,l0o,i0o,V_,ige,d0o,c0o,nG,f0o,m0o,g0o,X_,dge,h0o,p0o,sG,_0o,u0o,b0o,z_,cge,v0o,F0o,lG,T0o,M0o,E0o,W_,fge,C0o,w0o,iG,A0o,L0o,y0o,Q_,mge,x0o,$0o,dG,k0o,S0o,R0o,U_,gge,P0o,B0o,cG,I0o,N0o,q0o,H_,hge,j0o,D0o,fG,G0o,O0o,V0o,J_,pge,X0o,z0o,mG,W0o,Q0o,U0o,Y_,_ge,H0o,J0o,gG,Y0o,K0o,Z0o,K_,uge,ewo,owo,hG,rwo,two,awo,Z_,bge,nwo,swo,pG,lwo,iwo,dwo,eu,vge,cwo,fwo,_G,mwo,gwo,hwo,nl,Fge,pwo,_wo,uG,uwo,bwo,bG,vwo,Fwo,Two,ou,Tge,Mwo,Ewo,vG,Cwo,wwo,Awo,ru,Mge,Lwo,ywo,FG,xwo,$wo,kwo,tu,Ege,Swo,Rwo,TG,Pwo,Bwo,Iwo,au,Cge,Nwo,qwo,MG,jwo,Dwo,Gwo,nu,wge,Owo,Vwo,EG,Xwo,zwo,Wwo,su,Age,Qwo,Uwo,CG,Hwo,Jwo,Ywo,lu,Lge,Kwo,Zwo,wG,e6o,o6o,r6o,iu,yge,t6o,a6o,AG,n6o,s6o,l6o,du,xge,i6o,d6o,LG,c6o,f6o,m6o,cu,$ge,g6o,h6o,yG,p6o,_6o,u6o,fu,kge,b6o,v6o,xG,F6o,T6o,M6o,mu,Sge,E6o,C6o,$G,w6o,A6o,L6o,gu,Rge,y6o,x6o,kG,$6o,k6o,S6o,hu,Pge,R6o,P6o,SG,B6o,I6o,N6o,pu,Bge,q6o,j6o,RG,D6o,G6o,O6o,_u,Ige,V6o,X6o,PG,z6o,W6o,Q6o,uu,Nge,U6o,H6o,BG,J6o,Y6o,K6o,bu,qge,Z6o,eAo,IG,oAo,rAo,tAo,vu,jge,aAo,nAo,NG,sAo,lAo,iAo,Fu,Dge,dAo,cAo,qG,fAo,mAo,gAo,Tu,Gge,hAo,pAo,jG,_Ao,uAo,bAo,Mu,Oge,vAo,FAo,DG,TAo,MAo,EAo,Eu,Vge,CAo,wAo,GG,AAo,LAo,yAo,Cu,Xge,xAo,$Ao,OG,kAo,SAo,RAo,wu,zge,PAo,BAo,VG,IAo,NAo,qAo,Au,Wge,jAo,DAo,XG,GAo,OAo,VAo,Lu,Qge,XAo,zAo,zG,WAo,QAo,UAo,yu,Uge,HAo,JAo,WG,YAo,KAo,ZAo,xu,Hge,e7o,o7o,QG,r7o,t7o,a7o,$u,Jge,n7o,s7o,UG,l7o,i7o,d7o,ku,Yge,c7o,f7o,HG,m7o,g7o,h7o,Su,Kge,p7o,_7o,JG,u7o,b7o,v7o,Ru,Zge,F7o,T7o,YG,M7o,E7o,C7o,Pu,ehe,w7o,A7o,KG,L7o,y7o,x7o,Bu,ohe,$7o,k7o,ZG,S7o,R7o,P7o,Iu,rhe,B7o,I7o,eO,N7o,q7o,j7o,Nu,the,D7o,G7o,oO,O7o,V7o,X7o,qu,ahe,z7o,W7o,rO,Q7o,U7o,H7o,ju,nhe,J7o,Y7o,tO,K7o,Z7o,eLo,Du,she,oLo,rLo,aO,tLo,aLo,nLo,Gu,lhe,sLo,lLo,nO,iLo,dLo,cLo,Ou,ihe,fLo,mLo,sO,gLo,hLo,pLo,Vu,dhe,_Lo,uLo,lO,bLo,vLo,FLo,Xu,che,TLo,MLo,iO,ELo,CLo,wLo,zu,fhe,ALo,LLo,dO,yLo,xLo,$Lo,Wu,mhe,kLo,SLo,cO,RLo,PLo,BLo,Qu,ghe,ILo,NLo,fO,qLo,jLo,DLo,Uu,hhe,GLo,OLo,mO,VLo,XLo,zLo,Hu,phe,WLo,QLo,gO,ULo,HLo,JLo,Ju,_he,YLo,KLo,hO,ZLo,eyo,oyo,Yu,uhe,ryo,tyo,pO,ayo,nyo,syo,Ku,bhe,lyo,iyo,_O,dyo,cyo,fyo,Zu,vhe,myo,gyo,uO,hyo,pyo,_yo,e5,Fhe,uyo,byo,bO,vyo,Fyo,Tyo,o5,The,Myo,Eyo,vO,Cyo,wyo,Ayo,r5,Mhe,Lyo,yyo,FO,xyo,$yo,kyo,t5,Ehe,Syo,Ryo,TO,Pyo,Byo,Iyo,a5,Che,Nyo,qyo,MO,jyo,Dyo,Gyo,n5,whe,Oyo,Vyo,EO,Xyo,zyo,Wyo,s5,Ahe,Qyo,Uyo,CO,Hyo,Jyo,Yyo,l5,Lhe,Kyo,Zyo,wO,e9o,o9o,r9o,i5,yhe,t9o,a9o,AO,n9o,s9o,l9o,d5,xhe,i9o,d9o,LO,c9o,f9o,m9o,c5,$he,g9o,h9o,yO,p9o,_9o,u9o,f5,khe,b9o,v9o,xO,F9o,T9o,M9o,m5,She,E9o,C9o,$O,w9o,A9o,L9o,g5,Rhe,y9o,x9o,kO,$9o,k9o,S9o,h5,Phe,R9o,P9o,SO,B9o,I9o,N9o,p5,Bhe,q9o,j9o,RO,D9o,G9o,O9o,_5,Ihe,V9o,X9o,PO,z9o,W9o,Q9o,u5,Nhe,U9o,H9o,BO,J9o,Y9o,K9o,b5,qhe,Z9o,exo,IO,oxo,rxo,txo,v5,jhe,axo,nxo,NO,sxo,lxo,ixo,F5,Dhe,dxo,cxo,qO,fxo,mxo,gxo,T5,Ghe,hxo,pxo,jO,_xo,uxo,bxo,M5,Ohe,vxo,Fxo,DO,Txo,Mxo,Exo,E5,Vhe,Cxo,wxo,GO,Axo,Lxo,yxo,C5,Xhe,xxo,$xo,OO,kxo,Sxo,Rxo,w5,zhe,Pxo,Bxo,VO,Ixo,Nxo,qxo,A5,Whe,jxo,Dxo,XO,Gxo,Oxo,Vxo,L5,Xxo,Qhe,zxo,Wxo,Uhe,Qxo,Uxo,y5,hUe,nd,x5,Hhe,Uy,Hxo,Jhe,Jxo,pUe,Ro,Hy,Yxo,sd,Kxo,zO,Zxo,e$o,WO,o$o,r$o,t$o,Jy,a$o,Yhe,n$o,s$o,l$o,gt,Yy,i$o,Khe,d$o,c$o,ld,f$o,Zhe,m$o,g$o,QO,h$o,p$o,_$o,$5,u$o,Ze,Ky,b$o,epe,v$o,F$o,Xa,T$o,ope,M$o,E$o,rpe,C$o,w$o,tpe,A$o,L$o,y$o,G,k5,ape,x$o,$$o,UO,k$o,S$o,R$o,S5,npe,P$o,B$o,HO,I$o,N$o,q$o,R5,spe,j$o,D$o,JO,G$o,O$o,V$o,P5,lpe,X$o,z$o,YO,W$o,Q$o,U$o,B5,ipe,H$o,J$o,KO,Y$o,K$o,Z$o,I5,dpe,eko,oko,ZO,rko,tko,ako,N5,cpe,nko,sko,eV,lko,iko,dko,q5,fpe,cko,fko,oV,mko,gko,hko,j5,mpe,pko,_ko,rV,uko,bko,vko,D5,gpe,Fko,Tko,tV,Mko,Eko,Cko,G5,hpe,wko,Ako,aV,Lko,yko,xko,O5,ppe,$ko,kko,nV,Sko,Rko,Pko,V5,_pe,Bko,Iko,sV,Nko,qko,jko,X5,upe,Dko,Gko,lV,Oko,Vko,Xko,z5,bpe,zko,Wko,iV,Qko,Uko,Hko,W5,vpe,Jko,Yko,dV,Kko,Zko,eSo,Q5,Fpe,oSo,rSo,cV,tSo,aSo,nSo,U5,Tpe,sSo,lSo,fV,iSo,dSo,cSo,H5,Mpe,fSo,mSo,mV,gSo,hSo,pSo,J5,Epe,_So,uSo,gV,bSo,vSo,FSo,Y5,Cpe,TSo,MSo,hV,ESo,CSo,wSo,K5,wpe,ASo,LSo,pV,ySo,xSo,$So,Z5,Ape,kSo,SSo,_V,RSo,PSo,BSo,e1,Lpe,ISo,NSo,uV,qSo,jSo,DSo,o1,ype,GSo,OSo,bV,VSo,XSo,zSo,r1,xpe,WSo,QSo,vV,USo,HSo,JSo,t1,$pe,YSo,KSo,FV,ZSo,eRo,oRo,a1,kpe,rRo,tRo,TV,aRo,nRo,sRo,n1,Spe,lRo,iRo,MV,dRo,cRo,fRo,s1,Rpe,mRo,gRo,EV,hRo,pRo,_Ro,l1,Ppe,uRo,bRo,CV,vRo,FRo,TRo,i1,Bpe,MRo,ERo,wV,CRo,wRo,ARo,d1,Ipe,LRo,yRo,AV,xRo,$Ro,kRo,c1,Npe,SRo,RRo,LV,PRo,BRo,IRo,f1,qpe,NRo,qRo,yV,jRo,DRo,GRo,m1,jpe,ORo,VRo,xV,XRo,zRo,WRo,g1,Dpe,QRo,URo,$V,HRo,JRo,YRo,h1,Gpe,KRo,ZRo,kV,ePo,oPo,rPo,p1,Ope,tPo,aPo,SV,nPo,sPo,lPo,_1,Vpe,iPo,dPo,RV,cPo,fPo,mPo,u1,Xpe,gPo,hPo,PV,pPo,_Po,uPo,b1,zpe,bPo,vPo,BV,FPo,TPo,MPo,v1,Wpe,EPo,CPo,IV,wPo,APo,LPo,F1,Qpe,yPo,xPo,NV,$Po,kPo,SPo,T1,Upe,RPo,PPo,qV,BPo,IPo,NPo,M1,Hpe,qPo,jPo,jV,DPo,GPo,OPo,E1,Jpe,VPo,XPo,DV,zPo,WPo,QPo,C1,UPo,Ype,HPo,JPo,Kpe,YPo,KPo,w1,_Ue,id,A1,Zpe,Zy,ZPo,e_e,eBo,uUe,Po,e9,oBo,dd,rBo,GV,tBo,aBo,OV,nBo,sBo,lBo,o9,iBo,o_e,dBo,cBo,fBo,ht,r9,mBo,r_e,gBo,hBo,cd,pBo,t_e,_Bo,uBo,VV,bBo,vBo,FBo,L1,TBo,eo,t9,MBo,a_e,EBo,CBo,za,wBo,n_e,ABo,LBo,s_e,yBo,xBo,l_e,$Bo,kBo,SBo,z,y1,i_e,RBo,PBo,XV,BBo,IBo,NBo,x1,d_e,qBo,jBo,zV,DBo,GBo,OBo,$1,c_e,VBo,XBo,WV,zBo,WBo,QBo,k1,f_e,UBo,HBo,QV,JBo,YBo,KBo,S1,m_e,ZBo,eIo,UV,oIo,rIo,tIo,R1,g_e,aIo,nIo,HV,sIo,lIo,iIo,P1,h_e,dIo,cIo,JV,fIo,mIo,gIo,B1,p_e,hIo,pIo,YV,_Io,uIo,bIo,I1,__e,vIo,FIo,KV,TIo,MIo,EIo,N1,u_e,CIo,wIo,ZV,AIo,LIo,yIo,q1,b_e,xIo,$Io,eX,kIo,SIo,RIo,j1,v_e,PIo,BIo,oX,IIo,NIo,qIo,D1,F_e,jIo,DIo,rX,GIo,OIo,VIo,G1,T_e,XIo,zIo,tX,WIo,QIo,UIo,O1,M_e,HIo,JIo,aX,YIo,KIo,ZIo,V1,E_e,eNo,oNo,nX,rNo,tNo,aNo,X1,C_e,nNo,sNo,sX,lNo,iNo,dNo,z1,w_e,cNo,fNo,lX,mNo,gNo,hNo,W1,A_e,pNo,_No,iX,uNo,bNo,vNo,Q1,L_e,FNo,TNo,dX,MNo,ENo,CNo,U1,y_e,wNo,ANo,cX,LNo,yNo,xNo,H1,x_e,$No,kNo,fX,SNo,RNo,PNo,J1,$_e,BNo,INo,mX,NNo,qNo,jNo,Y1,k_e,DNo,GNo,gX,ONo,VNo,XNo,K1,S_e,zNo,WNo,hX,QNo,UNo,HNo,Z1,R_e,JNo,YNo,pX,KNo,ZNo,eqo,e2,P_e,oqo,rqo,_X,tqo,aqo,nqo,o2,B_e,sqo,lqo,uX,iqo,dqo,cqo,r2,I_e,fqo,mqo,bX,gqo,hqo,pqo,t2,N_e,_qo,uqo,vX,bqo,vqo,Fqo,a2,q_e,Tqo,Mqo,FX,Eqo,Cqo,wqo,n2,j_e,Aqo,Lqo,TX,yqo,xqo,$qo,s2,D_e,kqo,Sqo,MX,Rqo,Pqo,Bqo,l2,G_e,Iqo,Nqo,EX,qqo,jqo,Dqo,i2,O_e,Gqo,Oqo,CX,Vqo,Xqo,zqo,d2,V_e,Wqo,Qqo,wX,Uqo,Hqo,Jqo,c2,X_e,Yqo,Kqo,AX,Zqo,ejo,ojo,f2,z_e,rjo,tjo,LX,ajo,njo,sjo,m2,W_e,ljo,ijo,yX,djo,cjo,fjo,g2,Q_e,mjo,gjo,xX,hjo,pjo,_jo,h2,ujo,U_e,bjo,vjo,H_e,Fjo,Tjo,p2,bUe,fd,_2,J_e,a9,Mjo,Y_e,Ejo,vUe,Bo,n9,Cjo,md,wjo,$X,Ajo,Ljo,kX,yjo,xjo,$jo,s9,kjo,K_e,Sjo,Rjo,Pjo,pt,l9,Bjo,Z_e,Ijo,Njo,gd,qjo,eue,jjo,Djo,SX,Gjo,Ojo,Vjo,u2,Xjo,oo,i9,zjo,oue,Wjo,Qjo,Wa,Ujo,rue,Hjo,Jjo,tue,Yjo,Kjo,aue,Zjo,eDo,oDo,U,b2,nue,rDo,tDo,RX,aDo,nDo,sDo,v2,sue,lDo,iDo,PX,dDo,cDo,fDo,F2,lue,mDo,gDo,BX,hDo,pDo,_Do,T2,iue,uDo,bDo,IX,vDo,FDo,TDo,M2,due,MDo,EDo,NX,CDo,wDo,ADo,E2,cue,LDo,yDo,qX,xDo,$Do,kDo,C2,fue,SDo,RDo,jX,PDo,BDo,IDo,w2,mue,NDo,qDo,DX,jDo,DDo,GDo,A2,gue,ODo,VDo,GX,XDo,zDo,WDo,L2,hue,QDo,UDo,OX,HDo,JDo,YDo,y2,pue,KDo,ZDo,VX,eGo,oGo,rGo,x2,_ue,tGo,aGo,XX,nGo,sGo,lGo,$2,uue,iGo,dGo,zX,cGo,fGo,mGo,k2,bue,gGo,hGo,WX,pGo,_Go,uGo,S2,vue,bGo,vGo,QX,FGo,TGo,MGo,R2,Fue,EGo,CGo,UX,wGo,AGo,LGo,P2,Tue,yGo,xGo,HX,$Go,kGo,SGo,B2,Mue,RGo,PGo,JX,BGo,IGo,NGo,I2,Eue,qGo,jGo,YX,DGo,GGo,OGo,N2,Cue,VGo,XGo,KX,zGo,WGo,QGo,q2,wue,UGo,HGo,ZX,JGo,YGo,KGo,j2,Aue,ZGo,eOo,ez,oOo,rOo,tOo,D2,Lue,aOo,nOo,oz,sOo,lOo,iOo,G2,yue,dOo,cOo,rz,fOo,mOo,gOo,O2,xue,hOo,pOo,tz,_Oo,uOo,bOo,V2,$ue,vOo,FOo,az,TOo,MOo,EOo,X2,kue,COo,wOo,nz,AOo,LOo,yOo,z2,Sue,xOo,$Oo,sz,kOo,SOo,ROo,W2,Rue,POo,BOo,lz,IOo,NOo,qOo,Q2,Pue,jOo,DOo,iz,GOo,OOo,VOo,U2,Bue,XOo,zOo,dz,WOo,QOo,UOo,H2,Iue,HOo,JOo,cz,YOo,KOo,ZOo,J2,Nue,eVo,oVo,fz,rVo,tVo,aVo,Y2,que,nVo,sVo,jue,lVo,iVo,dVo,K2,Due,cVo,fVo,mz,mVo,gVo,hVo,Z2,Gue,pVo,_Vo,gz,uVo,bVo,vVo,eb,Oue,FVo,TVo,hz,MVo,EVo,CVo,ob,Vue,wVo,AVo,pz,LVo,yVo,xVo,rb,$Vo,Xue,kVo,SVo,zue,RVo,PVo,tb,FUe,hd,ab,Wue,d9,BVo,Que,IVo,TUe,Io,c9,NVo,pd,qVo,_z,jVo,DVo,uz,GVo,OVo,VVo,f9,XVo,Uue,zVo,WVo,QVo,_t,m9,UVo,Hue,HVo,JVo,_d,YVo,Jue,KVo,ZVo,bz,eXo,oXo,rXo,nb,tXo,ro,g9,aXo,Yue,nXo,sXo,Qa,lXo,Kue,iXo,dXo,Zue,cXo,fXo,e5e,mXo,gXo,hXo,me,sb,o5e,pXo,_Xo,vz,uXo,bXo,vXo,lb,r5e,FXo,TXo,Fz,MXo,EXo,CXo,ib,t5e,wXo,AXo,Tz,LXo,yXo,xXo,db,a5e,$Xo,kXo,Mz,SXo,RXo,PXo,cb,n5e,BXo,IXo,Ez,NXo,qXo,jXo,fb,s5e,DXo,GXo,Cz,OXo,VXo,XXo,mb,l5e,zXo,WXo,wz,QXo,UXo,HXo,gb,i5e,JXo,YXo,Az,KXo,ZXo,ezo,hb,d5e,ozo,rzo,Lz,tzo,azo,nzo,pb,c5e,szo,lzo,yz,izo,dzo,czo,_b,f5e,fzo,mzo,xz,gzo,hzo,pzo,ub,m5e,_zo,uzo,$z,bzo,vzo,Fzo,bb,g5e,Tzo,Mzo,kz,Ezo,Czo,wzo,vb,h5e,Azo,Lzo,Sz,yzo,xzo,$zo,Fb,p5e,kzo,Szo,Rz,Rzo,Pzo,Bzo,Tb,_5e,Izo,Nzo,Pz,qzo,jzo,Dzo,Mb,u5e,Gzo,Ozo,Bz,Vzo,Xzo,zzo,Eb,b5e,Wzo,Qzo,Iz,Uzo,Hzo,Jzo,Cb,v5e,Yzo,Kzo,Nz,Zzo,eWo,oWo,wb,rWo,F5e,tWo,aWo,T5e,nWo,sWo,Ab,MUe,ud,Lb,M5e,h9,lWo,E5e,iWo,EUe,No,p9,dWo,bd,cWo,qz,fWo,mWo,jz,gWo,hWo,pWo,_9,_Wo,C5e,uWo,bWo,vWo,ut,u9,FWo,w5e,TWo,MWo,vd,EWo,A5e,CWo,wWo,Dz,AWo,LWo,yWo,yb,xWo,to,b9,$Wo,L5e,kWo,SWo,Ua,RWo,y5e,PWo,BWo,x5e,IWo,NWo,$5e,qWo,jWo,DWo,N,xb,k5e,GWo,OWo,Gz,VWo,XWo,zWo,$b,S5e,WWo,QWo,Oz,UWo,HWo,JWo,kb,R5e,YWo,KWo,Vz,ZWo,eQo,oQo,Sb,P5e,rQo,tQo,Xz,aQo,nQo,sQo,Rb,B5e,lQo,iQo,zz,dQo,cQo,fQo,Pb,I5e,mQo,gQo,Wz,hQo,pQo,_Qo,Bb,N5e,uQo,bQo,Qz,vQo,FQo,TQo,Ib,q5e,MQo,EQo,Uz,CQo,wQo,AQo,Nb,j5e,LQo,yQo,Hz,xQo,$Qo,kQo,qb,D5e,SQo,RQo,Jz,PQo,BQo,IQo,jb,G5e,NQo,qQo,Yz,jQo,DQo,GQo,Db,O5e,OQo,VQo,Kz,XQo,zQo,WQo,Gb,V5e,QQo,UQo,Zz,HQo,JQo,YQo,Ob,X5e,KQo,ZQo,eW,eUo,oUo,rUo,Vb,z5e,tUo,aUo,oW,nUo,sUo,lUo,Xb,W5e,iUo,dUo,rW,cUo,fUo,mUo,zb,Q5e,gUo,hUo,tW,pUo,_Uo,uUo,Wb,U5e,bUo,vUo,aW,FUo,TUo,MUo,Qb,H5e,EUo,CUo,nW,wUo,AUo,LUo,Ub,J5e,yUo,xUo,sW,$Uo,kUo,SUo,Hb,Y5e,RUo,PUo,lW,BUo,IUo,NUo,Jb,K5e,qUo,jUo,iW,DUo,GUo,OUo,Yb,Z5e,VUo,XUo,dW,zUo,WUo,QUo,Kb,e1e,UUo,HUo,cW,JUo,YUo,KUo,Zb,o1e,ZUo,eHo,fW,oHo,rHo,tHo,ev,r1e,aHo,nHo,mW,sHo,lHo,iHo,ov,t1e,dHo,cHo,gW,fHo,mHo,gHo,rv,a1e,hHo,pHo,hW,_Ho,uHo,bHo,tv,n1e,vHo,FHo,pW,THo,MHo,EHo,av,s1e,CHo,wHo,_W,AHo,LHo,yHo,nv,l1e,xHo,$Ho,uW,kHo,SHo,RHo,sv,i1e,PHo,BHo,bW,IHo,NHo,qHo,lv,d1e,jHo,DHo,vW,GHo,OHo,VHo,iv,c1e,XHo,zHo,FW,WHo,QHo,UHo,dv,f1e,HHo,JHo,TW,YHo,KHo,ZHo,cv,m1e,eJo,oJo,MW,rJo,tJo,aJo,fv,g1e,nJo,sJo,EW,lJo,iJo,dJo,mv,h1e,cJo,fJo,CW,mJo,gJo,hJo,gv,p1e,pJo,_Jo,wW,uJo,bJo,vJo,hv,_1e,FJo,TJo,AW,MJo,EJo,CJo,pv,u1e,wJo,AJo,LW,LJo,yJo,xJo,_v,b1e,$Jo,kJo,yW,SJo,RJo,PJo,uv,v1e,BJo,IJo,xW,NJo,qJo,jJo,bv,F1e,DJo,GJo,$W,OJo,VJo,XJo,vv,T1e,zJo,WJo,kW,QJo,UJo,HJo,Fv,M1e,JJo,YJo,SW,KJo,ZJo,eYo,Tv,E1e,oYo,rYo,RW,tYo,aYo,nYo,Mv,C1e,sYo,lYo,PW,iYo,dYo,cYo,Ev,w1e,fYo,mYo,BW,gYo,hYo,pYo,Cv,A1e,_Yo,uYo,IW,bYo,vYo,FYo,wv,L1e,TYo,MYo,NW,EYo,CYo,wYo,Av,y1e,AYo,LYo,qW,yYo,xYo,$Yo,Lv,kYo,x1e,SYo,RYo,$1e,PYo,BYo,yv,CUe,Fd,xv,k1e,v9,IYo,S1e,NYo,wUe,qo,F9,qYo,Td,jYo,jW,DYo,GYo,DW,OYo,VYo,XYo,T9,zYo,R1e,WYo,QYo,UYo,bt,M9,HYo,P1e,JYo,YYo,Md,KYo,B1e,ZYo,eKo,GW,oKo,rKo,tKo,$v,aKo,ao,E9,nKo,I1e,sKo,lKo,Ha,iKo,N1e,dKo,cKo,q1e,fKo,mKo,j1e,gKo,hKo,pKo,Z,kv,D1e,_Ko,uKo,OW,bKo,vKo,FKo,Sv,G1e,TKo,MKo,VW,EKo,CKo,wKo,Rv,O1e,AKo,LKo,XW,yKo,xKo,$Ko,Pv,V1e,kKo,SKo,zW,RKo,PKo,BKo,Bv,X1e,IKo,NKo,WW,qKo,jKo,DKo,Iv,z1e,GKo,OKo,QW,VKo,XKo,zKo,Nv,W1e,WKo,QKo,UW,UKo,HKo,JKo,qv,Q1e,YKo,KKo,HW,ZKo,eZo,oZo,jv,U1e,rZo,tZo,JW,aZo,nZo,sZo,Dv,H1e,lZo,iZo,YW,dZo,cZo,fZo,Gv,J1e,mZo,gZo,KW,hZo,pZo,_Zo,Ov,Y1e,uZo,bZo,ZW,vZo,FZo,TZo,Vv,K1e,MZo,EZo,eQ,CZo,wZo,AZo,Xv,Z1e,LZo,yZo,oQ,xZo,$Zo,kZo,zv,e2e,SZo,RZo,rQ,PZo,BZo,IZo,Wv,o2e,NZo,qZo,tQ,jZo,DZo,GZo,Qv,r2e,OZo,VZo,aQ,XZo,zZo,WZo,Uv,t2e,QZo,UZo,nQ,HZo,JZo,YZo,Hv,a2e,KZo,ZZo,sQ,eer,oer,rer,Jv,n2e,ter,aer,lQ,ner,ser,ler,Yv,s2e,ier,der,iQ,cer,fer,mer,Kv,l2e,ger,her,dQ,per,_er,uer,Zv,i2e,ber,ver,cQ,Fer,Ter,Mer,eF,d2e,Eer,Cer,fQ,wer,Aer,Ler,oF,c2e,yer,xer,mQ,$er,ker,Ser,rF,f2e,Rer,Per,gQ,Ber,Ier,Ner,tF,m2e,qer,jer,hQ,Der,Ger,Oer,aF,g2e,Ver,Xer,pQ,zer,Wer,Qer,nF,h2e,Uer,Her,_Q,Jer,Yer,Ker,sF,p2e,Zer,eor,uQ,oor,ror,tor,lF,_2e,aor,nor,bQ,sor,lor,ior,iF,dor,u2e,cor,mor,b2e,gor,hor,dF,AUe,Ed,cF,v2e,C9,por,F2e,_or,LUe,jo,w9,uor,Cd,bor,vQ,vor,For,FQ,Tor,Mor,Eor,A9,Cor,T2e,wor,Aor,Lor,vt,L9,yor,M2e,xor,$or,wd,kor,E2e,Sor,Ror,TQ,Por,Bor,Ior,fF,Nor,no,y9,qor,C2e,jor,Dor,Ja,Gor,w2e,Oor,Vor,A2e,Xor,zor,L2e,Wor,Qor,Uor,Do,mF,y2e,Hor,Jor,MQ,Yor,Kor,Zor,gF,x2e,err,orr,EQ,rrr,trr,arr,hF,$2e,nrr,srr,CQ,lrr,irr,drr,pF,k2e,crr,frr,wQ,mrr,grr,hrr,_F,S2e,prr,_rr,AQ,urr,brr,vrr,uF,R2e,Frr,Trr,LQ,Mrr,Err,Crr,bF,wrr,P2e,Arr,Lrr,B2e,yrr,xrr,vF,yUe,Ad,FF,I2e,x9,$rr,N2e,krr,xUe,Go,$9,Srr,Ld,Rrr,yQ,Prr,Brr,xQ,Irr,Nrr,qrr,k9,jrr,q2e,Drr,Grr,Orr,Ft,S9,Vrr,j2e,Xrr,zrr,yd,Wrr,D2e,Qrr,Urr,$Q,Hrr,Jrr,Yrr,TF,Krr,so,R9,Zrr,G2e,etr,otr,Ya,rtr,O2e,ttr,atr,V2e,ntr,str,X2e,ltr,itr,dtr,H,MF,z2e,ctr,ftr,kQ,mtr,gtr,htr,EF,W2e,ptr,_tr,SQ,utr,btr,vtr,CF,Q2e,Ftr,Ttr,RQ,Mtr,Etr,Ctr,wF,U2e,wtr,Atr,PQ,Ltr,ytr,xtr,AF,H2e,$tr,ktr,BQ,Str,Rtr,Ptr,LF,J2e,Btr,Itr,IQ,Ntr,qtr,jtr,yF,Y2e,Dtr,Gtr,NQ,Otr,Vtr,Xtr,xF,K2e,ztr,Wtr,qQ,Qtr,Utr,Htr,$F,Z2e,Jtr,Ytr,jQ,Ktr,Ztr,ear,kF,ebe,oar,rar,DQ,tar,aar,nar,SF,obe,sar,lar,GQ,iar,dar,car,RF,rbe,far,mar,OQ,gar,har,par,PF,tbe,_ar,uar,VQ,bar,Far,Tar,BF,abe,Mar,Ear,XQ,Car,war,Aar,IF,nbe,Lar,yar,zQ,xar,$ar,kar,NF,sbe,Sar,Rar,WQ,Par,Bar,Iar,qF,lbe,Nar,qar,QQ,jar,Dar,Gar,jF,ibe,Oar,Var,UQ,Xar,zar,War,DF,dbe,Qar,Uar,HQ,Har,Jar,Yar,GF,cbe,Kar,Zar,JQ,enr,onr,rnr,OF,fbe,tnr,anr,YQ,nnr,snr,lnr,VF,mbe,inr,dnr,KQ,cnr,fnr,mnr,XF,gbe,gnr,hnr,ZQ,pnr,_nr,unr,zF,hbe,bnr,vnr,eU,Fnr,Tnr,Mnr,WF,pbe,Enr,Cnr,oU,wnr,Anr,Lnr,QF,_be,ynr,xnr,rU,$nr,knr,Snr,UF,ube,Rnr,Pnr,tU,Bnr,Inr,Nnr,HF,bbe,qnr,jnr,aU,Dnr,Gnr,Onr,JF,vbe,Vnr,Xnr,nU,znr,Wnr,Qnr,YF,Fbe,Unr,Hnr,sU,Jnr,Ynr,Knr,KF,Tbe,Znr,esr,lU,osr,rsr,tsr,ZF,Mbe,asr,nsr,iU,ssr,lsr,isr,eT,Ebe,dsr,csr,dU,fsr,msr,gsr,oT,Cbe,hsr,psr,cU,_sr,usr,bsr,rT,wbe,vsr,Fsr,fU,Tsr,Msr,Esr,tT,Abe,Csr,wsr,mU,Asr,Lsr,ysr,aT,Lbe,xsr,$sr,gU,ksr,Ssr,Rsr,nT,Psr,ybe,Bsr,Isr,xbe,Nsr,qsr,sT,$Ue,xd,lT,$be,P9,jsr,kbe,Dsr,kUe,Oo,B9,Gsr,$d,Osr,hU,Vsr,Xsr,pU,zsr,Wsr,Qsr,I9,Usr,Sbe,Hsr,Jsr,Ysr,Tt,N9,Ksr,Rbe,Zsr,elr,kd,olr,Pbe,rlr,tlr,_U,alr,nlr,slr,iT,llr,lo,q9,ilr,Bbe,dlr,clr,Ka,flr,Ibe,mlr,glr,Nbe,hlr,plr,qbe,_lr,ulr,blr,V,dT,jbe,vlr,Flr,uU,Tlr,Mlr,Elr,cT,Dbe,Clr,wlr,bU,Alr,Llr,ylr,fT,Gbe,xlr,$lr,vU,klr,Slr,Rlr,mT,Obe,Plr,Blr,FU,Ilr,Nlr,qlr,gT,Vbe,jlr,Dlr,TU,Glr,Olr,Vlr,hT,Xbe,Xlr,zlr,MU,Wlr,Qlr,Ulr,pT,zbe,Hlr,Jlr,EU,Ylr,Klr,Zlr,_T,Wbe,eir,oir,CU,rir,tir,air,uT,Qbe,nir,sir,wU,lir,iir,dir,bT,Ube,cir,fir,AU,mir,gir,hir,vT,Hbe,pir,_ir,LU,uir,bir,vir,FT,Jbe,Fir,Tir,yU,Mir,Eir,Cir,TT,Ybe,wir,Air,xU,Lir,yir,xir,MT,Kbe,$ir,kir,$U,Sir,Rir,Pir,ET,Zbe,Bir,Iir,kU,Nir,qir,jir,CT,eve,Dir,Gir,SU,Oir,Vir,Xir,wT,ove,zir,Wir,RU,Qir,Uir,Hir,AT,rve,Jir,Yir,PU,Kir,Zir,edr,LT,tve,odr,rdr,BU,tdr,adr,ndr,yT,ave,sdr,ldr,IU,idr,ddr,cdr,xT,nve,fdr,mdr,NU,gdr,hdr,pdr,$T,sve,_dr,udr,qU,bdr,vdr,Fdr,kT,lve,Tdr,Mdr,jU,Edr,Cdr,wdr,ST,ive,Adr,Ldr,DU,ydr,xdr,$dr,RT,dve,kdr,Sdr,GU,Rdr,Pdr,Bdr,PT,cve,Idr,Ndr,OU,qdr,jdr,Ddr,BT,fve,Gdr,Odr,VU,Vdr,Xdr,zdr,IT,mve,Wdr,Qdr,XU,Udr,Hdr,Jdr,NT,gve,Ydr,Kdr,zU,Zdr,ecr,ocr,qT,hve,rcr,tcr,WU,acr,ncr,scr,jT,pve,lcr,icr,QU,dcr,ccr,fcr,DT,_ve,mcr,gcr,UU,hcr,pcr,_cr,GT,uve,ucr,bcr,HU,vcr,Fcr,Tcr,OT,bve,Mcr,Ecr,JU,Ccr,wcr,Acr,VT,vve,Lcr,ycr,YU,xcr,$cr,kcr,XT,Fve,Scr,Rcr,KU,Pcr,Bcr,Icr,zT,Tve,Ncr,qcr,ZU,jcr,Dcr,Gcr,WT,Mve,Ocr,Vcr,eH,Xcr,zcr,Wcr,QT,Eve,Qcr,Ucr,oH,Hcr,Jcr,Ycr,UT,Cve,Kcr,Zcr,rH,efr,ofr,rfr,HT,wve,tfr,afr,tH,nfr,sfr,lfr,JT,Ave,ifr,dfr,aH,cfr,ffr,mfr,YT,Lve,gfr,hfr,nH,pfr,_fr,ufr,KT,bfr,yve,vfr,Ffr,xve,Tfr,Mfr,ZT,SUe,Sd,e8,$ve,j9,Efr,kve,Cfr,RUe,Vo,D9,wfr,Rd,Afr,sH,Lfr,yfr,lH,xfr,$fr,kfr,G9,Sfr,Sve,Rfr,Pfr,Bfr,Mt,O9,Ifr,Rve,Nfr,qfr,Pd,jfr,Pve,Dfr,Gfr,iH,Ofr,Vfr,Xfr,o8,zfr,io,V9,Wfr,Bve,Qfr,Ufr,Za,Hfr,Ive,Jfr,Yfr,Nve,Kfr,Zfr,qve,emr,omr,rmr,jve,r8,Dve,tmr,amr,dH,nmr,smr,lmr,t8,imr,Gve,dmr,cmr,Ove,fmr,mmr,a8,PUe,Bd,n8,Vve,X9,gmr,Xve,hmr,BUe,Xo,z9,pmr,Id,_mr,cH,umr,bmr,fH,vmr,Fmr,Tmr,W9,Mmr,zve,Emr,Cmr,wmr,Et,Q9,Amr,Wve,Lmr,ymr,Nd,xmr,Qve,$mr,kmr,mH,Smr,Rmr,Pmr,s8,Bmr,co,U9,Imr,Uve,Nmr,qmr,en,jmr,Hve,Dmr,Gmr,Jve,Omr,Vmr,Yve,Xmr,zmr,Wmr,be,l8,Kve,Qmr,Umr,gH,Hmr,Jmr,Ymr,i8,Zve,Kmr,Zmr,hH,egr,ogr,rgr,d8,eFe,tgr,agr,pH,ngr,sgr,lgr,c8,oFe,igr,dgr,_H,cgr,fgr,mgr,sl,rFe,ggr,hgr,uH,pgr,_gr,bH,ugr,bgr,vgr,f8,tFe,Fgr,Tgr,vH,Mgr,Egr,Cgr,ll,aFe,wgr,Agr,FH,Lgr,ygr,TH,xgr,$gr,kgr,m8,nFe,Sgr,Rgr,MH,Pgr,Bgr,Igr,Ct,sFe,Ngr,qgr,EH,jgr,Dgr,CH,Ggr,Ogr,wH,Vgr,Xgr,zgr,g8,lFe,Wgr,Qgr,AH,Ugr,Hgr,Jgr,h8,iFe,Ygr,Kgr,LH,Zgr,ehr,ohr,p8,dFe,rhr,thr,yH,ahr,nhr,shr,_8,cFe,lhr,ihr,xH,dhr,chr,fhr,u8,fFe,mhr,ghr,$H,hhr,phr,_hr,b8,mFe,uhr,bhr,kH,vhr,Fhr,Thr,v8,gFe,Mhr,Ehr,SH,Chr,whr,Ahr,F8,hFe,Lhr,yhr,RH,xhr,$hr,khr,T8,Shr,pFe,Rhr,Phr,_Fe,Bhr,Ihr,M8,IUe,qd,E8,uFe,H9,Nhr,bFe,qhr,NUe,zo,J9,jhr,jd,Dhr,PH,Ghr,Ohr,BH,Vhr,Xhr,zhr,Y9,Whr,vFe,Qhr,Uhr,Hhr,wt,K9,Jhr,FFe,Yhr,Khr,Dd,Zhr,TFe,epr,opr,IH,rpr,tpr,apr,C8,npr,fo,Z9,spr,MFe,lpr,ipr,on,dpr,EFe,cpr,fpr,CFe,mpr,gpr,wFe,hpr,ppr,_pr,AFe,w8,LFe,upr,bpr,NH,vpr,Fpr,Tpr,A8,Mpr,yFe,Epr,Cpr,xFe,wpr,Apr,L8,qUe,Gd,y8,$Fe,ex,Lpr,kFe,ypr,jUe,Wo,ox,xpr,Od,$pr,qH,kpr,Spr,jH,Rpr,Ppr,Bpr,rx,Ipr,SFe,Npr,qpr,jpr,At,tx,Dpr,RFe,Gpr,Opr,Vd,Vpr,PFe,Xpr,zpr,DH,Wpr,Qpr,Upr,x8,Hpr,mo,ax,Jpr,BFe,Ypr,Kpr,rn,Zpr,IFe,e_r,o_r,NFe,r_r,t_r,qFe,a_r,n_r,s_r,jFe,$8,DFe,l_r,i_r,GH,d_r,c_r,f_r,k8,m_r,GFe,g_r,h_r,OFe,p_r,__r,S8,DUe,Xd,R8,VFe,nx,u_r,XFe,b_r,GUe,Qo,sx,v_r,zd,F_r,OH,T_r,M_r,VH,E_r,C_r,w_r,lx,A_r,zFe,L_r,y_r,x_r,Lt,ix,$_r,WFe,k_r,S_r,Wd,R_r,QFe,P_r,B_r,XH,I_r,N_r,q_r,P8,j_r,go,dx,D_r,UFe,G_r,O_r,tn,V_r,HFe,X_r,z_r,JFe,W_r,Q_r,YFe,U_r,H_r,J_r,KFe,B8,ZFe,Y_r,K_r,zH,Z_r,eur,our,I8,rur,eTe,tur,aur,oTe,nur,sur,N8,OUe,Qd,q8,rTe,cx,lur,tTe,iur,VUe,Uo,fx,dur,Ud,cur,WH,fur,mur,QH,gur,hur,pur,mx,_ur,aTe,uur,bur,vur,yt,gx,Fur,nTe,Tur,Mur,Hd,Eur,sTe,Cur,wur,UH,Aur,Lur,yur,j8,xur,ho,hx,$ur,lTe,kur,Sur,an,Rur,iTe,Pur,Bur,dTe,Iur,Nur,cTe,qur,jur,Dur,Pe,D8,fTe,Gur,Our,HH,Vur,Xur,zur,G8,mTe,Wur,Qur,JH,Uur,Hur,Jur,O8,gTe,Yur,Kur,YH,Zur,e5r,o5r,V8,hTe,r5r,t5r,KH,a5r,n5r,s5r,X8,pTe,l5r,i5r,ZH,d5r,c5r,f5r,z8,_Te,m5r,g5r,eJ,h5r,p5r,_5r,W8,uTe,u5r,b5r,oJ,v5r,F5r,T5r,Q8,bTe,M5r,E5r,rJ,C5r,w5r,A5r,U8,vTe,L5r,y5r,tJ,x5r,$5r,k5r,H8,S5r,FTe,R5r,P5r,TTe,B5r,I5r,J8,XUe,Jd,Y8,MTe,px,N5r,ETe,q5r,zUe,Ho,_x,j5r,Yd,D5r,aJ,G5r,O5r,nJ,V5r,X5r,z5r,ux,W5r,CTe,Q5r,U5r,H5r,xt,bx,J5r,wTe,Y5r,K5r,Kd,Z5r,ATe,e1r,o1r,sJ,r1r,t1r,a1r,K8,n1r,po,vx,s1r,LTe,l1r,i1r,nn,d1r,yTe,c1r,f1r,xTe,m1r,g1r,$Te,h1r,p1r,_1r,st,Z8,kTe,u1r,b1r,lJ,v1r,F1r,T1r,eM,STe,M1r,E1r,iJ,C1r,w1r,A1r,oM,RTe,L1r,y1r,dJ,x1r,$1r,k1r,rM,PTe,S1r,R1r,cJ,P1r,B1r,I1r,tM,BTe,N1r,q1r,fJ,j1r,D1r,G1r,aM,O1r,ITe,V1r,X1r,NTe,z1r,W1r,nM,WUe,Zd,sM,qTe,Fx,Q1r,jTe,U1r,QUe,Jo,Tx,H1r,ec,J1r,mJ,Y1r,K1r,gJ,Z1r,e2r,o2r,Mx,r2r,DTe,t2r,a2r,n2r,$t,Ex,s2r,GTe,l2r,i2r,oc,d2r,OTe,c2r,f2r,hJ,m2r,g2r,h2r,lM,p2r,_o,Cx,_2r,VTe,u2r,b2r,sn,v2r,XTe,F2r,T2r,zTe,M2r,E2r,WTe,C2r,w2r,A2r,Le,iM,QTe,L2r,y2r,pJ,x2r,$2r,k2r,dM,UTe,S2r,R2r,_J,P2r,B2r,I2r,cM,HTe,N2r,q2r,uJ,j2r,D2r,G2r,fM,JTe,O2r,V2r,bJ,X2r,z2r,W2r,mM,YTe,Q2r,U2r,vJ,H2r,J2r,Y2r,gM,KTe,K2r,Z2r,FJ,ebr,obr,rbr,hM,ZTe,tbr,abr,TJ,nbr,sbr,lbr,pM,e8e,ibr,dbr,MJ,cbr,fbr,mbr,_M,o8e,gbr,hbr,EJ,pbr,_br,ubr,uM,r8e,bbr,vbr,CJ,Fbr,Tbr,Mbr,bM,Ebr,t8e,Cbr,wbr,a8e,Abr,Lbr,vM,UUe,rc,FM,n8e,wx,ybr,s8e,xbr,HUe,Yo,Ax,$br,tc,kbr,wJ,Sbr,Rbr,AJ,Pbr,Bbr,Ibr,Lx,Nbr,l8e,qbr,jbr,Dbr,kt,yx,Gbr,i8e,Obr,Vbr,ac,Xbr,d8e,zbr,Wbr,LJ,Qbr,Ubr,Hbr,TM,Jbr,uo,xx,Ybr,c8e,Kbr,Zbr,ln,evr,f8e,ovr,rvr,m8e,tvr,avr,g8e,nvr,svr,lvr,$x,MM,h8e,ivr,dvr,yJ,cvr,fvr,mvr,EM,p8e,gvr,hvr,xJ,pvr,_vr,uvr,CM,bvr,_8e,vvr,Fvr,u8e,Tvr,Mvr,wM,JUe,nc,AM,b8e,kx,Evr,v8e,Cvr,YUe,Ko,Sx,wvr,sc,Avr,$J,Lvr,yvr,kJ,xvr,$vr,kvr,Rx,Svr,F8e,Rvr,Pvr,Bvr,St,Px,Ivr,T8e,Nvr,qvr,lc,jvr,M8e,Dvr,Gvr,SJ,Ovr,Vvr,Xvr,LM,zvr,bo,Bx,Wvr,E8e,Qvr,Uvr,dn,Hvr,C8e,Jvr,Yvr,w8e,Kvr,Zvr,A8e,eFr,oFr,rFr,lt,yM,L8e,tFr,aFr,RJ,nFr,sFr,lFr,xM,y8e,iFr,dFr,PJ,cFr,fFr,mFr,$M,x8e,gFr,hFr,BJ,pFr,_Fr,uFr,kM,$8e,bFr,vFr,IJ,FFr,TFr,MFr,SM,k8e,EFr,CFr,NJ,wFr,AFr,LFr,RM,yFr,S8e,xFr,$Fr,R8e,kFr,SFr,PM,KUe,ic,BM,P8e,Ix,RFr,B8e,PFr,ZUe,Zo,Nx,BFr,dc,IFr,qJ,NFr,qFr,jJ,jFr,DFr,GFr,qx,OFr,I8e,VFr,XFr,zFr,Rt,jx,WFr,N8e,QFr,UFr,cc,HFr,q8e,JFr,YFr,DJ,KFr,ZFr,eTr,IM,oTr,vo,Dx,rTr,j8e,tTr,aTr,cn,nTr,D8e,sTr,lTr,G8e,iTr,dTr,O8e,cTr,fTr,mTr,fn,NM,V8e,gTr,hTr,GJ,pTr,_Tr,uTr,qM,X8e,bTr,vTr,OJ,FTr,TTr,MTr,jM,z8e,ETr,CTr,VJ,wTr,ATr,LTr,DM,W8e,yTr,xTr,XJ,$Tr,kTr,STr,GM,RTr,Q8e,PTr,BTr,U8e,ITr,NTr,OM,eHe,fc,VM,H8e,Gx,qTr,J8e,jTr,oHe,er,Ox,DTr,mc,GTr,zJ,OTr,VTr,WJ,XTr,zTr,WTr,Vx,QTr,Y8e,UTr,HTr,JTr,Pt,Xx,YTr,K8e,KTr,ZTr,gc,e8r,Z8e,o8r,r8r,QJ,t8r,a8r,n8r,XM,s8r,Fo,zx,l8r,eMe,i8r,d8r,mn,c8r,oMe,f8r,m8r,rMe,g8r,h8r,tMe,p8r,_8r,u8r,Wx,zM,aMe,b8r,v8r,UJ,F8r,T8r,M8r,WM,nMe,E8r,C8r,HJ,w8r,A8r,L8r,QM,y8r,sMe,x8r,$8r,lMe,k8r,S8r,UM,rHe,hc,HM,iMe,Qx,R8r,dMe,P8r,tHe,or,Ux,B8r,pc,I8r,JJ,N8r,q8r,YJ,j8r,D8r,G8r,Hx,O8r,cMe,V8r,X8r,z8r,Bt,Jx,W8r,fMe,Q8r,U8r,_c,H8r,mMe,J8r,Y8r,KJ,K8r,Z8r,eMr,JM,oMr,To,Yx,rMr,gMe,tMr,aMr,gn,nMr,hMe,sMr,lMr,pMe,iMr,dMr,_Me,cMr,fMr,mMr,uMe,YM,bMe,gMr,hMr,ZJ,pMr,_Mr,uMr,KM,bMr,vMe,vMr,FMr,FMe,TMr,MMr,ZM,aHe,uc,eE,TMe,Kx,EMr,MMe,CMr,nHe,rr,Zx,wMr,bc,AMr,eY,LMr,yMr,oY,xMr,$Mr,kMr,e$,SMr,EMe,RMr,PMr,BMr,It,o$,IMr,CMe,NMr,qMr,vc,jMr,wMe,DMr,GMr,rY,OMr,VMr,XMr,oE,zMr,Mo,r$,WMr,AMe,QMr,UMr,hn,HMr,LMe,JMr,YMr,yMe,KMr,ZMr,xMe,eEr,oEr,rEr,it,rE,$Me,tEr,aEr,tY,nEr,sEr,lEr,tE,kMe,iEr,dEr,aY,cEr,fEr,mEr,aE,SMe,gEr,hEr,nY,pEr,_Er,uEr,nE,RMe,bEr,vEr,sY,FEr,TEr,MEr,sE,PMe,EEr,CEr,lY,wEr,AEr,LEr,lE,yEr,BMe,xEr,$Er,IMe,kEr,SEr,iE,sHe,Fc,dE,NMe,t$,REr,qMe,PEr,lHe,tr,a$,BEr,Tc,IEr,iY,NEr,qEr,dY,jEr,DEr,GEr,n$,OEr,jMe,VEr,XEr,zEr,Nt,s$,WEr,DMe,QEr,UEr,Mc,HEr,GMe,JEr,YEr,cY,KEr,ZEr,e4r,cE,o4r,Eo,l$,r4r,OMe,t4r,a4r,pn,n4r,VMe,s4r,l4r,XMe,i4r,d4r,zMe,c4r,f4r,m4r,WMe,fE,QMe,g4r,h4r,fY,p4r,_4r,u4r,mE,b4r,UMe,v4r,F4r,HMe,T4r,M4r,gE,iHe,Ec,hE,JMe,i$,E4r,YMe,C4r,dHe,ar,d$,w4r,Cc,A4r,mY,L4r,y4r,gY,x4r,$4r,k4r,c$,S4r,KMe,R4r,P4r,B4r,qt,f$,I4r,ZMe,N4r,q4r,wc,j4r,eEe,D4r,G4r,hY,O4r,V4r,X4r,pE,z4r,Rr,m$,W4r,oEe,Q4r,U4r,_n,H4r,rEe,J4r,Y4r,tEe,K4r,Z4r,aEe,eCr,oCr,rCr,q,_E,nEe,tCr,aCr,pY,nCr,sCr,lCr,uE,sEe,iCr,dCr,_Y,cCr,fCr,mCr,bE,lEe,gCr,hCr,uY,pCr,_Cr,uCr,vE,iEe,bCr,vCr,bY,FCr,TCr,MCr,FE,dEe,ECr,CCr,vY,wCr,ACr,LCr,TE,cEe,yCr,xCr,FY,$Cr,kCr,SCr,ME,fEe,RCr,PCr,TY,BCr,ICr,NCr,EE,mEe,qCr,jCr,MY,DCr,GCr,OCr,CE,gEe,VCr,XCr,EY,zCr,WCr,QCr,wE,hEe,UCr,HCr,CY,JCr,YCr,KCr,AE,pEe,ZCr,e3r,wY,o3r,r3r,t3r,LE,_Ee,a3r,n3r,AY,s3r,l3r,i3r,yE,uEe,d3r,c3r,LY,f3r,m3r,g3r,xE,bEe,h3r,p3r,yY,_3r,u3r,b3r,$E,vEe,v3r,F3r,xY,T3r,M3r,E3r,kE,FEe,C3r,w3r,$Y,A3r,L3r,y3r,SE,TEe,x3r,$3r,kY,k3r,S3r,R3r,RE,MEe,P3r,B3r,SY,I3r,N3r,q3r,il,EEe,j3r,D3r,RY,G3r,O3r,PY,V3r,X3r,z3r,PE,CEe,W3r,Q3r,BY,U3r,H3r,J3r,BE,wEe,Y3r,K3r,IY,Z3r,e0r,o0r,IE,AEe,r0r,t0r,NY,a0r,n0r,s0r,NE,LEe,l0r,i0r,qY,d0r,c0r,f0r,qE,yEe,m0r,g0r,jY,h0r,p0r,_0r,jE,xEe,u0r,b0r,DY,v0r,F0r,T0r,DE,$Ee,M0r,E0r,GY,C0r,w0r,A0r,GE,kEe,L0r,y0r,OY,x0r,$0r,k0r,OE,SEe,S0r,R0r,VY,P0r,B0r,I0r,VE,REe,N0r,q0r,XY,j0r,D0r,G0r,XE,PEe,O0r,V0r,zY,X0r,z0r,W0r,zE,BEe,Q0r,U0r,WY,H0r,J0r,Y0r,WE,IEe,K0r,Z0r,QY,ewr,owr,rwr,QE,NEe,twr,awr,UY,nwr,swr,lwr,UE,qEe,iwr,dwr,HY,cwr,fwr,mwr,HE,jEe,gwr,hwr,JY,pwr,_wr,uwr,JE,DEe,bwr,vwr,YY,Fwr,Twr,Mwr,YE,GEe,Ewr,Cwr,KY,wwr,Awr,Lwr,KE,OEe,ywr,xwr,ZY,$wr,kwr,Swr,ZE,VEe,Rwr,Pwr,eK,Bwr,Iwr,Nwr,e4,XEe,qwr,jwr,oK,Dwr,Gwr,Owr,o4,zEe,Vwr,Xwr,rK,zwr,Wwr,Qwr,r4,WEe,Uwr,Hwr,tK,Jwr,Ywr,Kwr,t4,QEe,Zwr,e6r,aK,o6r,r6r,t6r,a4,UEe,a6r,n6r,nK,s6r,l6r,i6r,n4,HEe,d6r,c6r,sK,f6r,m6r,g6r,s4,JEe,h6r,p6r,lK,_6r,u6r,b6r,l4,YEe,v6r,F6r,iK,T6r,M6r,E6r,i4,KEe,C6r,w6r,dK,A6r,L6r,y6r,d4,ZEe,x6r,$6r,cK,k6r,S6r,R6r,c4,e4e,P6r,B6r,fK,I6r,N6r,q6r,f4,o4e,j6r,D6r,mK,G6r,O6r,V6r,m4,r4e,X6r,z6r,gK,W6r,Q6r,U6r,g4,cHe,Ac,h4,t4e,g$,H6r,a4e,J6r,fHe,nr,h$,Y6r,Lc,K6r,hK,Z6r,eAr,pK,oAr,rAr,tAr,p$,aAr,n4e,nAr,sAr,lAr,jt,_$,iAr,s4e,dAr,cAr,yc,fAr,l4e,mAr,gAr,_K,hAr,pAr,_Ar,p4,uAr,Pr,u$,bAr,i4e,vAr,FAr,un,TAr,d4e,MAr,EAr,c4e,CAr,wAr,f4e,AAr,LAr,yAr,se,_4,m4e,xAr,$Ar,uK,kAr,SAr,RAr,u4,g4e,PAr,BAr,bK,IAr,NAr,qAr,b4,h4e,jAr,DAr,vK,GAr,OAr,VAr,v4,p4e,XAr,zAr,FK,WAr,QAr,UAr,F4,_4e,HAr,JAr,TK,YAr,KAr,ZAr,T4,u4e,e7r,o7r,MK,r7r,t7r,a7r,M4,b4e,n7r,s7r,EK,l7r,i7r,d7r,E4,v4e,c7r,f7r,CK,m7r,g7r,h7r,C4,F4e,p7r,_7r,wK,u7r,b7r,v7r,w4,T4e,F7r,T7r,AK,M7r,E7r,C7r,A4,M4e,w7r,A7r,LK,L7r,y7r,x7r,L4,E4e,$7r,k7r,yK,S7r,R7r,P7r,y4,C4e,B7r,I7r,xK,N7r,q7r,j7r,x4,w4e,D7r,G7r,$K,O7r,V7r,X7r,$4,A4e,z7r,W7r,kK,Q7r,U7r,H7r,k4,L4e,J7r,Y7r,SK,K7r,Z7r,eLr,S4,y4e,oLr,rLr,RK,tLr,aLr,nLr,R4,x4e,sLr,lLr,PK,iLr,dLr,cLr,P4,$4e,fLr,mLr,BK,gLr,hLr,pLr,B4,k4e,_Lr,uLr,IK,bLr,vLr,FLr,I4,S4e,TLr,MLr,NK,ELr,CLr,wLr,N4,R4e,ALr,LLr,qK,yLr,xLr,$Lr,q4,P4e,kLr,SLr,jK,RLr,PLr,BLr,j4,mHe,xc,D4,B4e,b$,ILr,I4e,NLr,gHe,sr,v$,qLr,$c,jLr,DK,DLr,GLr,GK,OLr,VLr,XLr,F$,zLr,N4e,WLr,QLr,ULr,Dt,T$,HLr,q4e,JLr,YLr,kc,KLr,j4e,ZLr,eyr,OK,oyr,ryr,tyr,G4,ayr,Br,M$,nyr,D4e,syr,lyr,bn,iyr,G4e,dyr,cyr,O4e,fyr,myr,V4e,gyr,hyr,pyr,Me,O4,X4e,_yr,uyr,VK,byr,vyr,Fyr,V4,z4e,Tyr,Myr,XK,Eyr,Cyr,wyr,X4,W4e,Ayr,Lyr,zK,yyr,xyr,$yr,z4,Q4e,kyr,Syr,WK,Ryr,Pyr,Byr,W4,U4e,Iyr,Nyr,QK,qyr,jyr,Dyr,Q4,H4e,Gyr,Oyr,UK,Vyr,Xyr,zyr,U4,J4e,Wyr,Qyr,HK,Uyr,Hyr,Jyr,H4,Y4e,Yyr,Kyr,JK,Zyr,e9r,o9r,J4,K4e,r9r,t9r,YK,a9r,n9r,s9r,Y4,Z4e,l9r,i9r,KK,d9r,c9r,f9r,K4,eCe,m9r,g9r,ZK,h9r,p9r,_9r,Z4,oCe,u9r,b9r,eZ,v9r,F9r,T9r,eC,rCe,M9r,E9r,oZ,C9r,w9r,A9r,oC,hHe,Sc,rC,tCe,E$,L9r,aCe,y9r,pHe,lr,C$,x9r,Rc,$9r,rZ,k9r,S9r,tZ,R9r,P9r,B9r,w$,I9r,nCe,N9r,q9r,j9r,Gt,A$,D9r,sCe,G9r,O9r,Pc,V9r,lCe,X9r,z9r,aZ,W9r,Q9r,U9r,tC,H9r,Ir,L$,J9r,iCe,Y9r,K9r,vn,Z9r,dCe,exr,oxr,cCe,rxr,txr,fCe,axr,nxr,sxr,Be,aC,mCe,lxr,ixr,nZ,dxr,cxr,fxr,nC,gCe,mxr,gxr,sZ,hxr,pxr,_xr,dl,hCe,uxr,bxr,lZ,vxr,Fxr,iZ,Txr,Mxr,Exr,sC,pCe,Cxr,wxr,dZ,Axr,Lxr,yxr,lC,_Ce,xxr,$xr,cZ,kxr,Sxr,Rxr,iC,uCe,Pxr,Bxr,fZ,Ixr,Nxr,qxr,dC,bCe,jxr,Dxr,mZ,Gxr,Oxr,Vxr,cC,vCe,Xxr,zxr,gZ,Wxr,Qxr,Uxr,fC,FCe,Hxr,Jxr,hZ,Yxr,Kxr,Zxr,mC,_He,Bc,gC,TCe,y$,e$r,MCe,o$r,uHe,ir,x$,r$r,Ic,t$r,pZ,a$r,n$r,_Z,s$r,l$r,i$r,$$,d$r,ECe,c$r,f$r,m$r,Ot,k$,g$r,CCe,h$r,p$r,Nc,_$r,wCe,u$r,b$r,uZ,v$r,F$r,T$r,hC,M$r,Nr,S$,E$r,ACe,C$r,w$r,Fn,A$r,LCe,L$r,y$r,yCe,x$r,$$r,xCe,k$r,S$r,R$r,qc,pC,$Ce,P$r,B$r,bZ,I$r,N$r,q$r,_C,kCe,j$r,D$r,vZ,G$r,O$r,V$r,uC,SCe,X$r,z$r,FZ,W$r,Q$r,U$r,bC,bHe,jc,vC,RCe,R$,H$r,PCe,J$r,vHe,dr,P$,Y$r,Dc,K$r,TZ,Z$r,ekr,MZ,okr,rkr,tkr,B$,akr,BCe,nkr,skr,lkr,Vt,I$,ikr,ICe,dkr,ckr,Gc,fkr,NCe,mkr,gkr,EZ,hkr,pkr,_kr,FC,ukr,qr,N$,bkr,qCe,vkr,Fkr,Tn,Tkr,jCe,Mkr,Ekr,DCe,Ckr,wkr,GCe,Akr,Lkr,ykr,de,TC,OCe,xkr,$kr,CZ,kkr,Skr,Rkr,MC,VCe,Pkr,Bkr,wZ,Ikr,Nkr,qkr,EC,XCe,jkr,Dkr,AZ,Gkr,Okr,Vkr,CC,zCe,Xkr,zkr,LZ,Wkr,Qkr,Ukr,wC,WCe,Hkr,Jkr,yZ,Ykr,Kkr,Zkr,AC,QCe,eSr,oSr,xZ,rSr,tSr,aSr,LC,UCe,nSr,sSr,$Z,lSr,iSr,dSr,yC,HCe,cSr,fSr,kZ,mSr,gSr,hSr,xC,JCe,pSr,_Sr,SZ,uSr,bSr,vSr,$C,YCe,FSr,TSr,RZ,MSr,ESr,CSr,kC,KCe,wSr,ASr,PZ,LSr,ySr,xSr,SC,ZCe,$Sr,kSr,BZ,SSr,RSr,PSr,RC,e3e,BSr,ISr,IZ,NSr,qSr,jSr,PC,o3e,DSr,GSr,NZ,OSr,VSr,XSr,BC,r3e,zSr,WSr,qZ,QSr,USr,HSr,IC,t3e,JSr,YSr,jZ,KSr,ZSr,eRr,NC,a3e,oRr,rRr,DZ,tRr,aRr,nRr,qC,n3e,sRr,lRr,GZ,iRr,dRr,cRr,jC,s3e,fRr,mRr,OZ,gRr,hRr,pRr,DC,l3e,_Rr,uRr,VZ,bRr,vRr,FRr,GC,FHe,Oc,OC,i3e,q$,TRr,d3e,MRr,THe,cr,j$,ERr,Vc,CRr,XZ,wRr,ARr,zZ,LRr,yRr,xRr,D$,$Rr,c3e,kRr,SRr,RRr,Xt,G$,PRr,f3e,BRr,IRr,Xc,NRr,m3e,qRr,jRr,WZ,DRr,GRr,ORr,VC,VRr,jr,O$,XRr,g3e,zRr,WRr,Mn,QRr,h3e,URr,HRr,p3e,JRr,YRr,_3e,KRr,ZRr,ePr,ye,XC,u3e,oPr,rPr,QZ,tPr,aPr,nPr,zC,b3e,sPr,lPr,UZ,iPr,dPr,cPr,WC,v3e,fPr,mPr,HZ,gPr,hPr,pPr,QC,F3e,_Pr,uPr,JZ,bPr,vPr,FPr,UC,T3e,TPr,MPr,YZ,EPr,CPr,wPr,HC,M3e,APr,LPr,KZ,yPr,xPr,$Pr,JC,E3e,kPr,SPr,ZZ,RPr,PPr,BPr,YC,C3e,IPr,NPr,eee,qPr,jPr,DPr,KC,w3e,GPr,OPr,oee,VPr,XPr,zPr,ZC,A3e,WPr,QPr,ree,UPr,HPr,JPr,e3,MHe,zc,o3,L3e,V$,YPr,y3e,KPr,EHe,fr,X$,ZPr,Wc,eBr,tee,oBr,rBr,aee,tBr,aBr,nBr,z$,sBr,x3e,lBr,iBr,dBr,zt,W$,cBr,$3e,fBr,mBr,Qc,gBr,k3e,hBr,pBr,nee,_Br,uBr,bBr,r3,vBr,Dr,Q$,FBr,S3e,TBr,MBr,En,EBr,R3e,CBr,wBr,P3e,ABr,LBr,B3e,yBr,xBr,$Br,te,t3,I3e,kBr,SBr,see,RBr,PBr,BBr,a3,N3e,IBr,NBr,lee,qBr,jBr,DBr,n3,q3e,GBr,OBr,iee,VBr,XBr,zBr,s3,j3e,WBr,QBr,dee,UBr,HBr,JBr,l3,D3e,YBr,KBr,cee,ZBr,eIr,oIr,i3,G3e,rIr,tIr,fee,aIr,nIr,sIr,d3,O3e,lIr,iIr,mee,dIr,cIr,fIr,c3,V3e,mIr,gIr,gee,hIr,pIr,_Ir,f3,X3e,uIr,bIr,hee,vIr,FIr,TIr,m3,z3e,MIr,EIr,pee,CIr,wIr,AIr,g3,W3e,LIr,yIr,_ee,xIr,$Ir,kIr,h3,Q3e,SIr,RIr,uee,PIr,BIr,IIr,p3,U3e,NIr,qIr,bee,jIr,DIr,GIr,_3,H3e,OIr,VIr,vee,XIr,zIr,WIr,u3,J3e,QIr,UIr,Fee,HIr,JIr,YIr,b3,Y3e,KIr,ZIr,Tee,eNr,oNr,rNr,v3,K3e,tNr,aNr,Mee,nNr,sNr,lNr,F3,Z3e,iNr,dNr,Eee,cNr,fNr,mNr,T3,e0e,gNr,hNr,Cee,pNr,_Nr,uNr,M3,o0e,bNr,vNr,wee,FNr,TNr,MNr,E3,r0e,ENr,CNr,Aee,wNr,ANr,LNr,C3,t0e,yNr,xNr,Lee,$Nr,kNr,SNr,w3,a0e,RNr,PNr,yee,BNr,INr,NNr,A3,n0e,qNr,jNr,xee,DNr,GNr,ONr,L3,s0e,VNr,XNr,$ee,zNr,WNr,QNr,y3,l0e,UNr,HNr,kee,JNr,YNr,KNr,x3,CHe,Uc,$3,i0e,U$,ZNr,d0e,eqr,wHe,mr,H$,oqr,Hc,rqr,See,tqr,aqr,Ree,nqr,sqr,lqr,J$,iqr,c0e,dqr,cqr,fqr,Wt,Y$,mqr,f0e,gqr,hqr,Jc,pqr,m0e,_qr,uqr,Pee,bqr,vqr,Fqr,k3,Tqr,Gr,K$,Mqr,g0e,Eqr,Cqr,Cn,wqr,h0e,Aqr,Lqr,p0e,yqr,xqr,_0e,$qr,kqr,Sqr,ve,S3,u0e,Rqr,Pqr,Bee,Bqr,Iqr,Nqr,R3,b0e,qqr,jqr,Iee,Dqr,Gqr,Oqr,P3,v0e,Vqr,Xqr,Nee,zqr,Wqr,Qqr,B3,F0e,Uqr,Hqr,qee,Jqr,Yqr,Kqr,I3,T0e,Zqr,ejr,jee,ojr,rjr,tjr,N3,M0e,ajr,njr,Dee,sjr,ljr,ijr,q3,E0e,djr,cjr,Gee,fjr,mjr,gjr,j3,C0e,hjr,pjr,Oee,_jr,ujr,bjr,D3,w0e,vjr,Fjr,Vee,Tjr,Mjr,Ejr,G3,A0e,Cjr,wjr,Xee,Ajr,Ljr,yjr,O3,L0e,xjr,$jr,zee,kjr,Sjr,Rjr,V3,y0e,Pjr,Bjr,Wee,Ijr,Njr,qjr,X3,x0e,jjr,Djr,Qee,Gjr,Ojr,Vjr,z3,$0e,Xjr,zjr,Uee,Wjr,Qjr,Ujr,W3,k0e,Hjr,Jjr,Hee,Yjr,Kjr,Zjr,Q3,S0e,eDr,oDr,Jee,rDr,tDr,aDr,U3,R0e,nDr,sDr,Yee,lDr,iDr,dDr,H3,AHe,Yc,J3,P0e,Z$,cDr,B0e,fDr,LHe,gr,ek,mDr,Kc,gDr,Kee,hDr,pDr,Zee,_Dr,uDr,bDr,ok,vDr,I0e,FDr,TDr,MDr,Qt,rk,EDr,N0e,CDr,wDr,Zc,ADr,q0e,LDr,yDr,eoe,xDr,$Dr,kDr,Y3,SDr,Or,tk,RDr,j0e,PDr,BDr,wn,IDr,D0e,NDr,qDr,G0e,jDr,DDr,O0e,GDr,ODr,VDr,ak,K3,V0e,XDr,zDr,ooe,WDr,QDr,UDr,Z3,X0e,HDr,JDr,roe,YDr,KDr,ZDr,e0,yHe,ef,o0,z0e,nk,eGr,W0e,oGr,xHe,hr,sk,rGr,of,tGr,toe,aGr,nGr,aoe,sGr,lGr,iGr,lk,dGr,Q0e,cGr,fGr,mGr,Ut,ik,gGr,U0e,hGr,pGr,rf,_Gr,H0e,uGr,bGr,noe,vGr,FGr,TGr,r0,MGr,Vr,dk,EGr,J0e,CGr,wGr,An,AGr,Y0e,LGr,yGr,K0e,xGr,$Gr,Z0e,kGr,SGr,RGr,ewe,t0,owe,PGr,BGr,soe,IGr,NGr,qGr,a0,$He,tf,n0,rwe,ck,jGr,twe,DGr,kHe,pr,fk,GGr,af,OGr,loe,VGr,XGr,ioe,zGr,WGr,QGr,mk,UGr,awe,HGr,JGr,YGr,Ht,gk,KGr,nwe,ZGr,eOr,nf,oOr,swe,rOr,tOr,doe,aOr,nOr,sOr,s0,lOr,Xr,hk,iOr,lwe,dOr,cOr,Ln,fOr,iwe,mOr,gOr,dwe,hOr,pOr,cwe,_Or,uOr,bOr,ce,l0,fwe,vOr,FOr,coe,TOr,MOr,EOr,i0,mwe,COr,wOr,foe,AOr,LOr,yOr,d0,gwe,xOr,$Or,moe,kOr,SOr,ROr,c0,hwe,POr,BOr,goe,IOr,NOr,qOr,f0,pwe,jOr,DOr,hoe,GOr,OOr,VOr,m0,_we,XOr,zOr,poe,WOr,QOr,UOr,g0,uwe,HOr,JOr,_oe,YOr,KOr,ZOr,h0,bwe,eVr,oVr,uoe,rVr,tVr,aVr,p0,vwe,nVr,sVr,boe,lVr,iVr,dVr,_0,Fwe,cVr,fVr,voe,mVr,gVr,hVr,u0,Twe,pVr,_Vr,Foe,uVr,bVr,vVr,b0,Mwe,FVr,TVr,Toe,MVr,EVr,CVr,v0,Ewe,wVr,AVr,Moe,LVr,yVr,xVr,F0,Cwe,$Vr,kVr,Eoe,SVr,RVr,PVr,T0,wwe,BVr,IVr,Coe,NVr,qVr,jVr,M0,Awe,DVr,GVr,woe,OVr,VVr,XVr,E0,Lwe,zVr,WVr,Aoe,QVr,UVr,HVr,C0,ywe,JVr,YVr,Loe,KVr,ZVr,eXr,w0,xwe,oXr,rXr,yoe,tXr,aXr,nXr,A0,$we,sXr,lXr,xoe,iXr,dXr,cXr,L0,SHe,sf,y0,kwe,pk,fXr,Swe,mXr,RHe,_r,_k,gXr,lf,hXr,$oe,pXr,_Xr,koe,uXr,bXr,vXr,uk,FXr,Rwe,TXr,MXr,EXr,Jt,bk,CXr,Pwe,wXr,AXr,df,LXr,Bwe,yXr,xXr,Soe,$Xr,kXr,SXr,x0,RXr,zr,vk,PXr,Iwe,BXr,IXr,yn,NXr,Nwe,qXr,jXr,qwe,DXr,GXr,jwe,OXr,VXr,XXr,fe,$0,Dwe,zXr,WXr,Roe,QXr,UXr,HXr,k0,Gwe,JXr,YXr,Poe,KXr,ZXr,ezr,S0,Owe,ozr,rzr,Boe,tzr,azr,nzr,R0,Vwe,szr,lzr,Ioe,izr,dzr,czr,P0,Xwe,fzr,mzr,Noe,gzr,hzr,pzr,B0,zwe,_zr,uzr,qoe,bzr,vzr,Fzr,I0,Wwe,Tzr,Mzr,joe,Ezr,Czr,wzr,N0,Qwe,Azr,Lzr,Doe,yzr,xzr,$zr,q0,Uwe,kzr,Szr,Goe,Rzr,Pzr,Bzr,j0,Hwe,Izr,Nzr,Ooe,qzr,jzr,Dzr,D0,Jwe,Gzr,Ozr,Voe,Vzr,Xzr,zzr,G0,Ywe,Wzr,Qzr,Xoe,Uzr,Hzr,Jzr,O0,Kwe,Yzr,Kzr,zoe,Zzr,eWr,oWr,V0,Zwe,rWr,tWr,Woe,aWr,nWr,sWr,X0,e6e,lWr,iWr,Qoe,dWr,cWr,fWr,z0,o6e,mWr,gWr,Uoe,hWr,pWr,_Wr,W0,r6e,uWr,bWr,Hoe,vWr,FWr,TWr,Q0,t6e,MWr,EWr,Joe,CWr,wWr,AWr,U0,a6e,LWr,yWr,Yoe,xWr,$Wr,kWr,H0,n6e,SWr,RWr,Koe,PWr,BWr,IWr,J0,PHe,cf,Y0,s6e,Fk,NWr,l6e,qWr,BHe,ur,Tk,jWr,ff,DWr,Zoe,GWr,OWr,ere,VWr,XWr,zWr,Mk,WWr,i6e,QWr,UWr,HWr,Yt,Ek,JWr,d6e,YWr,KWr,mf,ZWr,c6e,eQr,oQr,ore,rQr,tQr,aQr,K0,nQr,Wr,Ck,sQr,f6e,lQr,iQr,xn,dQr,m6e,cQr,fQr,g6e,mQr,gQr,h6e,hQr,pQr,_Qr,p6e,Z0,_6e,uQr,bQr,rre,vQr,FQr,TQr,ew,IHe,gf,ow,u6e,wk,MQr,b6e,EQr,NHe,br,Ak,CQr,hf,wQr,tre,AQr,LQr,are,yQr,xQr,$Qr,Lk,kQr,v6e,SQr,RQr,PQr,Kt,yk,BQr,F6e,IQr,NQr,pf,qQr,T6e,jQr,DQr,nre,GQr,OQr,VQr,rw,XQr,Qr,xk,zQr,M6e,WQr,QQr,$n,UQr,E6e,HQr,JQr,C6e,YQr,KQr,w6e,ZQr,eUr,oUr,A6e,tw,L6e,rUr,tUr,sre,aUr,nUr,sUr,aw,qHe,_f,nw,y6e,$k,lUr,x6e,iUr,jHe,vr,kk,dUr,uf,cUr,lre,fUr,mUr,ire,gUr,hUr,pUr,Sk,_Ur,$6e,uUr,bUr,vUr,Zt,Rk,FUr,k6e,TUr,MUr,bf,EUr,S6e,CUr,wUr,dre,AUr,LUr,yUr,sw,xUr,Ur,Pk,$Ur,R6e,kUr,SUr,kn,RUr,P6e,PUr,BUr,B6e,IUr,NUr,I6e,qUr,jUr,DUr,re,lw,N6e,GUr,OUr,cre,VUr,XUr,zUr,iw,q6e,WUr,QUr,fre,UUr,HUr,JUr,dw,j6e,YUr,KUr,mre,ZUr,eHr,oHr,cw,D6e,rHr,tHr,gre,aHr,nHr,sHr,fw,G6e,lHr,iHr,hre,dHr,cHr,fHr,mw,O6e,mHr,gHr,pre,hHr,pHr,_Hr,gw,V6e,uHr,bHr,_re,vHr,FHr,THr,hw,X6e,MHr,EHr,ure,CHr,wHr,AHr,pw,z6e,LHr,yHr,bre,xHr,$Hr,kHr,_w,W6e,SHr,RHr,vre,PHr,BHr,IHr,uw,Q6e,NHr,qHr,Fre,jHr,DHr,GHr,bw,U6e,OHr,VHr,Tre,XHr,zHr,WHr,vw,H6e,QHr,UHr,Mre,HHr,JHr,YHr,Fw,J6e,KHr,ZHr,Ere,eJr,oJr,rJr,Tw,Y6e,tJr,aJr,Cre,nJr,sJr,lJr,Mw,K6e,iJr,dJr,wre,cJr,fJr,mJr,Ew,Z6e,gJr,hJr,Are,pJr,_Jr,uJr,Cw,eAe,bJr,vJr,Lre,FJr,TJr,MJr,ww,oAe,EJr,CJr,yre,wJr,AJr,LJr,Aw,rAe,yJr,xJr,xre,$Jr,kJr,SJr,Lw,tAe,RJr,PJr,$re,BJr,IJr,NJr,yw,aAe,qJr,jJr,kre,DJr,GJr,OJr,xw,nAe,VJr,XJr,Sre,zJr,WJr,QJr,$w,sAe,UJr,HJr,Rre,JJr,YJr,KJr,kw,lAe,ZJr,eYr,Pre,oYr,rYr,tYr,Sw,iAe,aYr,nYr,Bre,sYr,lYr,iYr,Rw,dAe,dYr,cYr,Ire,fYr,mYr,gYr,Pw,DHe,vf,Bw,cAe,Bk,hYr,fAe,pYr,GHe,Fr,Ik,_Yr,Ff,uYr,Nre,bYr,vYr,qre,FYr,TYr,MYr,Nk,EYr,mAe,CYr,wYr,AYr,ea,qk,LYr,gAe,yYr,xYr,Tf,$Yr,hAe,kYr,SYr,jre,RYr,PYr,BYr,Iw,IYr,Hr,jk,NYr,pAe,qYr,jYr,Sn,DYr,_Ae,GYr,OYr,uAe,VYr,XYr,bAe,zYr,WYr,QYr,xe,Nw,vAe,UYr,HYr,Dre,JYr,YYr,KYr,qw,FAe,ZYr,eKr,Gre,oKr,rKr,tKr,jw,TAe,aKr,nKr,Ore,sKr,lKr,iKr,Dw,MAe,dKr,cKr,Vre,fKr,mKr,gKr,Gw,EAe,hKr,pKr,Xre,_Kr,uKr,bKr,Ow,CAe,vKr,FKr,zre,TKr,MKr,EKr,Vw,wAe,CKr,wKr,Wre,AKr,LKr,yKr,Xw,AAe,xKr,$Kr,Qre,kKr,SKr,RKr,zw,LAe,PKr,BKr,Ure,IKr,NKr,qKr,Ww,yAe,jKr,DKr,Hre,GKr,OKr,VKr,Qw,OHe,Mf,Uw,xAe,Dk,XKr,$Ae,zKr,VHe,Tr,Gk,WKr,Ef,QKr,Jre,UKr,HKr,Yre,JKr,YKr,KKr,Ok,ZKr,kAe,eZr,oZr,rZr,oa,Vk,tZr,SAe,aZr,nZr,Cf,sZr,RAe,lZr,iZr,Kre,dZr,cZr,fZr,Hw,mZr,Jr,Xk,gZr,PAe,hZr,pZr,Rn,_Zr,BAe,uZr,bZr,IAe,vZr,FZr,NAe,TZr,MZr,EZr,Ee,Jw,qAe,CZr,wZr,Zre,AZr,LZr,yZr,Yw,jAe,xZr,$Zr,ete,kZr,SZr,RZr,Kw,DAe,PZr,BZr,ote,IZr,NZr,qZr,Zw,GAe,jZr,DZr,rte,GZr,OZr,VZr,e6,OAe,XZr,zZr,tte,WZr,QZr,UZr,o6,VAe,HZr,JZr,ate,YZr,KZr,ZZr,r6,XAe,eet,oet,nte,ret,tet,aet,t6,zAe,net,set,ste,iet,det,cet,a6,WAe,fet,met,lte,get,het,pet,n6,QAe,_et,uet,ite,bet,vet,Fet,s6,UAe,Tet,Met,dte,Eet,Cet,wet,l6,HAe,Aet,Let,cte,yet,xet,$et,i6,JAe,ket,Set,fte,Ret,Pet,Bet,d6,XHe,wf,c6,YAe,zk,Iet,KAe,Net,zHe,Mr,Wk,qet,Af,jet,mte,Det,Get,gte,Oet,Vet,Xet,Qk,zet,ZAe,Wet,Qet,Uet,ra,Uk,Het,e7e,Jet,Yet,Lf,Ket,o7e,Zet,eot,hte,oot,rot,tot,f6,aot,Yr,Hk,not,r7e,sot,lot,Pn,iot,t7e,dot,cot,a7e,fot,mot,n7e,got,hot,pot,$e,m6,s7e,_ot,uot,pte,bot,vot,Fot,g6,l7e,Tot,Mot,_te,Eot,Cot,wot,h6,i7e,Aot,Lot,ute,yot,xot,$ot,p6,d7e,kot,Sot,bte,Rot,Pot,Bot,_6,c7e,Iot,Not,vte,qot,jot,Dot,u6,f7e,Got,Oot,Fte,Vot,Xot,zot,b6,m7e,Wot,Qot,Tte,Uot,Hot,Jot,v6,g7e,Yot,Kot,Mte,Zot,ert,ort,F6,h7e,rrt,trt,Ete,art,nrt,srt,T6,p7e,lrt,irt,Cte,drt,crt,frt,M6,WHe,yf,E6,_7e,Jk,mrt,u7e,grt,QHe,Er,Yk,hrt,xf,prt,wte,_rt,urt,Ate,brt,vrt,Frt,Kk,Trt,b7e,Mrt,Ert,Crt,ta,Zk,wrt,v7e,Art,Lrt,$f,yrt,F7e,xrt,$rt,Lte,krt,Srt,Rrt,C6,Prt,Kr,eS,Brt,T7e,Irt,Nrt,Bn,qrt,M7e,jrt,Drt,E7e,Grt,Ort,C7e,Vrt,Xrt,zrt,ke,w6,w7e,Wrt,Qrt,yte,Urt,Hrt,Jrt,A6,A7e,Yrt,Krt,xte,Zrt,ett,ott,L6,L7e,rtt,ttt,$te,att,ntt,stt,y6,y7e,ltt,itt,kte,dtt,ctt,ftt,x6,x7e,mtt,gtt,Ste,htt,ptt,_tt,$6,$7e,utt,btt,Rte,vtt,Ftt,Ttt,k6,k7e,Mtt,Ett,Pte,Ctt,wtt,Att,S6,S7e,Ltt,ytt,Bte,xtt,$tt,ktt,R6,R7e,Stt,Rtt,Ite,Ptt,Btt,Itt,P6,P7e,Ntt,qtt,Nte,jtt,Dtt,Gtt,B6,UHe,kf,I6,B7e,oS,Ott,I7e,Vtt,HHe,Cr,rS,Xtt,Sf,ztt,qte,Wtt,Qtt,jte,Utt,Htt,Jtt,tS,Ytt,N7e,Ktt,Ztt,eat,aa,aS,oat,q7e,rat,tat,Rf,aat,j7e,nat,sat,Dte,lat,iat,dat,N6,cat,Zr,nS,fat,D7e,mat,gat,In,hat,G7e,pat,_at,O7e,uat,bat,V7e,vat,Fat,Tat,Se,q6,X7e,Mat,Eat,Gte,Cat,wat,Aat,j6,z7e,Lat,yat,Ote,xat,$at,kat,D6,W7e,Sat,Rat,Vte,Pat,Bat,Iat,G6,Q7e,Nat,qat,Xte,jat,Dat,Gat,O6,U7e,Oat,Vat,zte,Xat,zat,Wat,V6,H7e,Qat,Uat,Wte,Hat,Jat,Yat,X6,J7e,Kat,Zat,Qte,ent,ont,rnt,z6,Y7e,tnt,ant,Ute,nnt,snt,lnt,W6,K7e,int,dnt,Hte,cnt,fnt,mnt,Q6,Z7e,gnt,hnt,Jte,pnt,_nt,unt,U6,JHe,Pf,H6,eLe,sS,bnt,oLe,vnt,YHe,wr,lS,Fnt,Bf,Tnt,Yte,Mnt,Ent,Kte,Cnt,wnt,Ant,iS,Lnt,rLe,ynt,xnt,$nt,na,dS,knt,tLe,Snt,Rnt,If,Pnt,aLe,Bnt,Int,Zte,Nnt,qnt,jnt,J6,Dnt,et,cS,Gnt,nLe,Ont,Vnt,Nn,Xnt,sLe,znt,Wnt,lLe,Qnt,Unt,iLe,Hnt,Jnt,Ynt,Re,Y6,dLe,Knt,Znt,eae,est,ost,rst,K6,cLe,tst,ast,oae,nst,sst,lst,Z6,fLe,ist,dst,rae,cst,fst,mst,eA,mLe,gst,hst,tae,pst,_st,ust,oA,gLe,bst,vst,aae,Fst,Tst,Mst,rA,hLe,Est,Cst,nae,wst,Ast,Lst,tA,pLe,yst,xst,sae,$st,kst,Sst,aA,_Le,Rst,Pst,lae,Bst,Ist,Nst,nA,uLe,qst,jst,iae,Dst,Gst,Ost,sA,bLe,Vst,Xst,dae,zst,Wst,Qst,lA,KHe,Nf,iA,vLe,fS,Ust,FLe,Hst,ZHe,Ar,mS,Jst,qf,Yst,cae,Kst,Zst,fae,elt,olt,rlt,gS,tlt,TLe,alt,nlt,slt,sa,hS,llt,MLe,ilt,dlt,jf,clt,ELe,flt,mlt,mae,glt,hlt,plt,dA,_lt,ot,pS,ult,CLe,blt,vlt,qn,Flt,wLe,Tlt,Mlt,ALe,Elt,Clt,LLe,wlt,Alt,Llt,Xe,cA,yLe,ylt,xlt,gae,$lt,klt,Slt,fA,xLe,Rlt,Plt,hae,Blt,Ilt,Nlt,mA,$Le,qlt,jlt,pae,Dlt,Glt,Olt,gA,kLe,Vlt,Xlt,_ae,zlt,Wlt,Qlt,hA,SLe,Ult,Hlt,uae,Jlt,Ylt,Klt,pA,RLe,Zlt,eit,bae,oit,rit,tit,_A,PLe,ait,nit,vae,sit,lit,iit,uA,BLe,dit,cit,Fae,fit,mit,git,bA,eJe,Df,vA,ILe,_S,hit,NLe,pit,oJe,Lr,uS,_it,Gf,uit,Tae,bit,vit,Mae,Fit,Tit,Mit,bS,Eit,qLe,Cit,wit,Ait,la,vS,Lit,jLe,yit,xit,Of,$it,DLe,kit,Sit,Eae,Rit,Pit,Bit,FA,Iit,rt,FS,Nit,GLe,qit,jit,jn,Dit,OLe,Git,Oit,VLe,Vit,Xit,XLe,zit,Wit,Qit,ze,TA,zLe,Uit,Hit,Cae,Jit,Yit,Kit,MA,WLe,Zit,edt,wae,odt,rdt,tdt,EA,QLe,adt,ndt,Aae,sdt,ldt,idt,CA,ULe,ddt,cdt,Lae,fdt,mdt,gdt,wA,HLe,hdt,pdt,yae,_dt,udt,bdt,AA,JLe,vdt,Fdt,xae,Tdt,Mdt,Edt,LA,YLe,Cdt,wdt,$ae,Adt,Ldt,ydt,yA,KLe,xdt,$dt,kae,kdt,Sdt,Rdt,xA,rJe,Vf,$A,ZLe,TS,Pdt,eye,Bdt,tJe,yr,MS,Idt,Xf,Ndt,Sae,qdt,jdt,Rae,Ddt,Gdt,Odt,ES,Vdt,oye,Xdt,zdt,Wdt,ia,CS,Qdt,rye,Udt,Hdt,zf,Jdt,tye,Ydt,Kdt,Pae,Zdt,ect,oct,kA,rct,tt,wS,tct,aye,act,nct,Dn,sct,nye,lct,ict,sye,dct,cct,lye,fct,mct,gct,iye,SA,dye,hct,pct,Bae,_ct,uct,bct,RA,aJe,Wf,PA,cye,AS,vct,fye,Fct,nJe,xr,LS,Tct,Qf,Mct,Iae,Ect,Cct,Nae,wct,Act,Lct,yS,yct,mye,xct,$ct,kct,da,xS,Sct,gye,Rct,Pct,Uf,Bct,hye,Ict,Nct,qae,qct,jct,Dct,BA,Gct,at,$S,Oct,pye,Vct,Xct,Gn,zct,_ye,Wct,Qct,uye,Uct,Hct,bye,Jct,Yct,Kct,kS,IA,vye,Zct,eft,jae,oft,rft,tft,NA,Fye,aft,nft,Dae,sft,lft,ift,qA,sJe,Hf,jA,Tye,SS,dft,Mye,cft,lJe,$r,RS,fft,Jf,mft,Gae,gft,hft,Oae,pft,_ft,uft,PS,bft,Eye,vft,Fft,Tft,ca,BS,Mft,Cye,Eft,Cft,Yf,wft,wye,Aft,Lft,Vae,yft,xft,$ft,DA,kft,nt,IS,Sft,Aye,Rft,Pft,On,Bft,Lye,Ift,Nft,yye,qft,jft,xye,Dft,Gft,Oft,$ye,GA,kye,Vft,Xft,Xae,zft,Wft,Qft,OA,iJe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),uy=new oe({}),by=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sm=new Uft({props:{warning:!0,$$slots:{default:[uta]},$$scope:{ctx:$}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/configuration_auto.py#L625"}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/configuration_auto.py#L648"}}),Mh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/configuration_auto.py#L771"}}),wy=new oe({}),Ay=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/tokenization_auto.py#L418"}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18555/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/tokenization_auto.py#L432"}}),ap=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),$y=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/tokenization_auto.py#L633"}}),ky=new oe({}),Sy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18555/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),zp=new Uft({props:{$$slots:{default:[Fta]},$$scope:{ctx:$}}}),Wp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),Ny=new oe({}),qy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/processing_auto.py#L91"}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/processing_auto.py#L105"}}),p_=new Uft({props:{$$slots:{default:[Mta]},$$scope:{ctx:$}}}),__=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/processing_auto.py#L258"}}),Vy=new oe({}),Xy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L808"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),v_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),Uy=new oe({}),Hy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L815"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),w1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),Zy=new oe({}),e9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L830"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),L1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),a9=new oe({}),n9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L837"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),u2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),tb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),d9=new oe({}),c9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L844"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),nb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),h9=new oe({}),p9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L853"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),v9=new oe({}),F9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L898"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),C9=new oe({}),w9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L905"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),x9=new oe({}),$9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L891"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),P9=new oe({}),B9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L862"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),j9=new oe({}),D9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L869"}}),O9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),o8=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),X9=new oe({}),z9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L914"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),M8=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),H9=new oe({}),J9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L953"}}),K9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),C8=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),L8=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L960"}}),tx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),x8=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),S8=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L880"}}),ix=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),P8=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),N8=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Zta]},$$scope:{ctx:$}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L967"}}),gx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),j8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),J8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[oaa]},$$scope:{ctx:$}}}),px=new oe({}),_x=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L990"}}),bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),K8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L974"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L981"}}),yx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),kx=new oe({}),Sx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L999"}}),Px=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),Ix=new oe({}),Nx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L1006"}}),jx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),Gx=new oe({}),Ox=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L946"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),Qx=new oe({}),Ux=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L921"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),Kx=new oe({}),Zx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L928"}}),o$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),t$=new oe({}),a$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_auto.py#L937"}}),s$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),i$=new oe({}),d$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),f$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),g$=new oe({}),h$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),_$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),b$=new oe({}),v$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),T$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),E$=new oe({}),C$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),A$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18555/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),y$=new oe({}),x$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),k$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),R$=new oe({}),P$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),I$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),q$=new oe({}),j$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),G$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),V$=new oe({}),X$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L498"}}),W$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),U$=new oe({}),H$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L534"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),Z$=new oe({}),ek=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L541"}}),rk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),nk=new oe({}),sk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),ik=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Gaa]},$$scope:{ctx:$}}}),ck=new oe({}),fk=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),gk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Oaa]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Vaa]},$$scope:{ctx:$}}}),pk=new oe({}),_k=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),bk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Xaa]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zaa]},$$scope:{ctx:$}}}),Fk=new oe({}),Tk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Waa]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Qaa]},$$scope:{ctx:$}}}),wk=new oe({}),Ak=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_tf_auto.py#L550"}}),yk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Uaa]},$$scope:{ctx:$}}}),xk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Haa]},$$scope:{ctx:$}}}),$k=new oe({}),kk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),Pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),Bk=new oe({}),Ik=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),qk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),jk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Zaa]},$$scope:{ctx:$}}}),Dk=new oe({}),Gk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Vk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[ena]},$$scope:{ctx:$}}}),Xk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ona]},$$scope:{ctx:$}}}),zk=new oe({}),Wk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Uk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[rna]},$$scope:{ctx:$}}}),Hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[tna]},$$scope:{ctx:$}}}),Jk=new oe({}),Yk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Zk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ana]},$$scope:{ctx:$}}}),eS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[nna]},$$scope:{ctx:$}}}),oS=new oe({}),rS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),aS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),N6=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[sna]},$$scope:{ctx:$}}}),nS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),sS=new oe({}),lS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),dS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),cS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[dna]},$$scope:{ctx:$}}}),fS=new oe({}),mS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),hS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),dA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[cna]},$$scope:{ctx:$}}}),pS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[fna]},$$scope:{ctx:$}}}),_S=new oe({}),uS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),vS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[mna]},$$scope:{ctx:$}}}),FS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[gna]},$$scope:{ctx:$}}}),TS=new oe({}),MS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),CS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[hna]},$$scope:{ctx:$}}}),wS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pna]},$$scope:{ctx:$}}}),AS=new oe({}),LS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),xS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[_na]},$$scope:{ctx:$}}}),$S=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),qA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[una]},$$scope:{ctx:$}}}),SS=new oe({}),RS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),BS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L389"}}),DA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[bna]},$$scope:{ctx:$}}}),IS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18555/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18555/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18555/src/transformers/models/auto/auto_factory.py#L417"}}),OA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[vna]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),om=l(),ft=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),gy=o("from_pretrained()"),rm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),Ue=a("p"),zi=o("Instantiating one of "),Xn=a("a"),hy=o("AutoConfig"),zn=o(", "),Wn=a("a"),py=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),_y=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),tm=l(),F(ja.$$.fragment),He=l(),Ae=a("p"),sP=o("will create a model that is an instance of "),Ui=a("a"),lP=o("BertModel"),iP=o("."),Lo=l(),Da=a("p"),dP=o("There is one class of "),am=a("code"),cP=o("AutoModel"),MKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZQe=l(),Hi=a("h2"),nm=a("a"),Vse=a("span"),F(uy.$$.fragment),EKe=l(),Xse=a("span"),CKe=o("Extending the Auto Classes"),eUe=l(),Un=a("p"),wKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zse=a("code"),AKe=o("NewModel"),LKe=o(", make sure you have a "),Wse=a("code"),yKe=o("NewModelConfig"),xKe=o(` then you can add those to the auto
classes like this:`),oUe=l(),F(by.$$.fragment),rUe=l(),fP=a("p"),$Ke=o("You will then be able to use the auto classes like you would usually do!"),tUe=l(),F(sm.$$.fragment),aUe=l(),Ji=a("h2"),lm=a("a"),Qse=a("span"),F(vy.$$.fragment),kKe=l(),Use=a("span"),SKe=o("AutoConfig"),nUe=l(),yo=a("div"),F(Fy.$$.fragment),RKe=l(),Ty=a("p"),PKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mP=a("a"),BKe=o("from_pretrained()"),IKe=o(" class method."),NKe=l(),My=a("p"),qKe=o("This class cannot be instantiated directly using "),Hse=a("code"),jKe=o("__init__()"),DKe=o(" (throws an error)."),GKe=l(),kr=a("div"),F(Ey.$$.fragment),OKe=l(),Jse=a("p"),VKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),XKe=l(),Yi=a("p"),zKe=o("The configuration class to instantiate is selected based on the "),Yse=a("code"),WKe=o("model_type"),QKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Kse=a("code"),UKe=o("pretrained_model_name_or_path"),HKe=o(":"),JKe=l(),A=a("ul"),im=a("li"),Zse=a("strong"),YKe=o("albert"),KKe=o(" \u2014 "),gP=a("a"),ZKe=o("AlbertConfig"),eZe=o(" (ALBERT model)"),oZe=l(),dm=a("li"),ele=a("strong"),rZe=o("bart"),tZe=o(" \u2014 "),hP=a("a"),aZe=o("BartConfig"),nZe=o(" (BART model)"),sZe=l(),cm=a("li"),ole=a("strong"),lZe=o("beit"),iZe=o(" \u2014 "),pP=a("a"),dZe=o("BeitConfig"),cZe=o(" (BEiT model)"),fZe=l(),fm=a("li"),rle=a("strong"),mZe=o("bert"),gZe=o(" \u2014 "),_P=a("a"),hZe=o("BertConfig"),pZe=o(" (BERT model)"),_Ze=l(),mm=a("li"),tle=a("strong"),uZe=o("bert-generation"),bZe=o(" \u2014 "),uP=a("a"),vZe=o("BertGenerationConfig"),FZe=o(" (Bert Generation model)"),TZe=l(),gm=a("li"),ale=a("strong"),MZe=o("big_bird"),EZe=o(" \u2014 "),bP=a("a"),CZe=o("BigBirdConfig"),wZe=o(" (BigBird model)"),AZe=l(),hm=a("li"),nle=a("strong"),LZe=o("bigbird_pegasus"),yZe=o(" \u2014 "),vP=a("a"),xZe=o("BigBirdPegasusConfig"),$Ze=o(" (BigBird-Pegasus model)"),kZe=l(),pm=a("li"),sle=a("strong"),SZe=o("blenderbot"),RZe=o(" \u2014 "),FP=a("a"),PZe=o("BlenderbotConfig"),BZe=o(" (Blenderbot model)"),IZe=l(),_m=a("li"),lle=a("strong"),NZe=o("blenderbot-small"),qZe=o(" \u2014 "),TP=a("a"),jZe=o("BlenderbotSmallConfig"),DZe=o(" (BlenderbotSmall model)"),GZe=l(),um=a("li"),ile=a("strong"),OZe=o("bloom"),VZe=o(" \u2014 "),MP=a("a"),XZe=o("BloomConfig"),zZe=o(" (BLOOM model)"),WZe=l(),bm=a("li"),dle=a("strong"),QZe=o("camembert"),UZe=o(" \u2014 "),EP=a("a"),HZe=o("CamembertConfig"),JZe=o(" (CamemBERT model)"),YZe=l(),vm=a("li"),cle=a("strong"),KZe=o("canine"),ZZe=o(" \u2014 "),CP=a("a"),eeo=o("CanineConfig"),oeo=o(" (CANINE model)"),reo=l(),Fm=a("li"),fle=a("strong"),teo=o("clip"),aeo=o(" \u2014 "),wP=a("a"),neo=o("CLIPConfig"),seo=o(" (CLIP model)"),leo=l(),Tm=a("li"),mle=a("strong"),ieo=o("codegen"),deo=o(" \u2014 "),AP=a("a"),ceo=o("CodeGenConfig"),feo=o(" (CodeGen model)"),meo=l(),Mm=a("li"),gle=a("strong"),geo=o("convbert"),heo=o(" \u2014 "),LP=a("a"),peo=o("ConvBertConfig"),_eo=o(" (ConvBERT model)"),ueo=l(),Em=a("li"),hle=a("strong"),beo=o("convnext"),veo=o(" \u2014 "),yP=a("a"),Feo=o("ConvNextConfig"),Teo=o(" (ConvNeXT model)"),Meo=l(),Cm=a("li"),ple=a("strong"),Eeo=o("ctrl"),Ceo=o(" \u2014 "),xP=a("a"),weo=o("CTRLConfig"),Aeo=o(" (CTRL model)"),Leo=l(),wm=a("li"),_le=a("strong"),yeo=o("cvt"),xeo=o(" \u2014 "),$P=a("a"),$eo=o("CvtConfig"),keo=o(" (CvT model)"),Seo=l(),Am=a("li"),ule=a("strong"),Reo=o("data2vec-audio"),Peo=o(" \u2014 "),kP=a("a"),Beo=o("Data2VecAudioConfig"),Ieo=o(" (Data2VecAudio model)"),Neo=l(),Lm=a("li"),ble=a("strong"),qeo=o("data2vec-text"),jeo=o(" \u2014 "),SP=a("a"),Deo=o("Data2VecTextConfig"),Geo=o(" (Data2VecText model)"),Oeo=l(),ym=a("li"),vle=a("strong"),Veo=o("data2vec-vision"),Xeo=o(" \u2014 "),RP=a("a"),zeo=o("Data2VecVisionConfig"),Weo=o(" (Data2VecVision model)"),Qeo=l(),xm=a("li"),Fle=a("strong"),Ueo=o("deberta"),Heo=o(" \u2014 "),PP=a("a"),Jeo=o("DebertaConfig"),Yeo=o(" (DeBERTa model)"),Keo=l(),$m=a("li"),Tle=a("strong"),Zeo=o("deberta-v2"),eoo=o(" \u2014 "),BP=a("a"),ooo=o("DebertaV2Config"),roo=o(" (DeBERTa-v2 model)"),too=l(),km=a("li"),Mle=a("strong"),aoo=o("decision_transformer"),noo=o(" \u2014 "),IP=a("a"),soo=o("DecisionTransformerConfig"),loo=o(" (Decision Transformer model)"),ioo=l(),Sm=a("li"),Ele=a("strong"),doo=o("deit"),coo=o(" \u2014 "),NP=a("a"),foo=o("DeiTConfig"),moo=o(" (DeiT model)"),goo=l(),Rm=a("li"),Cle=a("strong"),hoo=o("detr"),poo=o(" \u2014 "),qP=a("a"),_oo=o("DetrConfig"),uoo=o(" (DETR model)"),boo=l(),Pm=a("li"),wle=a("strong"),voo=o("distilbert"),Foo=o(" \u2014 "),jP=a("a"),Too=o("DistilBertConfig"),Moo=o(" (DistilBERT model)"),Eoo=l(),Bm=a("li"),Ale=a("strong"),Coo=o("donut-swin"),woo=o(" \u2014 "),DP=a("a"),Aoo=o("DonutSwinConfig"),Loo=o(" (DonutSwin model)"),yoo=l(),Im=a("li"),Lle=a("strong"),xoo=o("dpr"),$oo=o(" \u2014 "),GP=a("a"),koo=o("DPRConfig"),Soo=o(" (DPR model)"),Roo=l(),Nm=a("li"),yle=a("strong"),Poo=o("dpt"),Boo=o(" \u2014 "),OP=a("a"),Ioo=o("DPTConfig"),Noo=o(" (DPT model)"),qoo=l(),qm=a("li"),xle=a("strong"),joo=o("electra"),Doo=o(" \u2014 "),VP=a("a"),Goo=o("ElectraConfig"),Ooo=o(" (ELECTRA model)"),Voo=l(),jm=a("li"),$le=a("strong"),Xoo=o("encoder-decoder"),zoo=o(" \u2014 "),XP=a("a"),Woo=o("EncoderDecoderConfig"),Qoo=o(" (Encoder decoder model)"),Uoo=l(),Dm=a("li"),kle=a("strong"),Hoo=o("flaubert"),Joo=o(" \u2014 "),zP=a("a"),Yoo=o("FlaubertConfig"),Koo=o(" (FlauBERT model)"),Zoo=l(),Gm=a("li"),Sle=a("strong"),ero=o("flava"),oro=o(" \u2014 "),WP=a("a"),rro=o("FlavaConfig"),tro=o(" (FLAVA model)"),aro=l(),Om=a("li"),Rle=a("strong"),nro=o("fnet"),sro=o(" \u2014 "),QP=a("a"),lro=o("FNetConfig"),iro=o(" (FNet model)"),dro=l(),Vm=a("li"),Ple=a("strong"),cro=o("fsmt"),fro=o(" \u2014 "),UP=a("a"),mro=o("FSMTConfig"),gro=o(" (FairSeq Machine-Translation model)"),hro=l(),Xm=a("li"),Ble=a("strong"),pro=o("funnel"),_ro=o(" \u2014 "),HP=a("a"),uro=o("FunnelConfig"),bro=o(" (Funnel Transformer model)"),vro=l(),zm=a("li"),Ile=a("strong"),Fro=o("glpn"),Tro=o(" \u2014 "),JP=a("a"),Mro=o("GLPNConfig"),Ero=o(" (GLPN model)"),Cro=l(),Wm=a("li"),Nle=a("strong"),wro=o("gpt2"),Aro=o(" \u2014 "),YP=a("a"),Lro=o("GPT2Config"),yro=o(" (OpenAI GPT-2 model)"),xro=l(),Qm=a("li"),qle=a("strong"),$ro=o("gpt_neo"),kro=o(" \u2014 "),KP=a("a"),Sro=o("GPTNeoConfig"),Rro=o(" (GPT Neo model)"),Pro=l(),Um=a("li"),jle=a("strong"),Bro=o("gpt_neox"),Iro=o(" \u2014 "),ZP=a("a"),Nro=o("GPTNeoXConfig"),qro=o(" (GPT NeoX model)"),jro=l(),Hm=a("li"),Dle=a("strong"),Dro=o("gptj"),Gro=o(" \u2014 "),eB=a("a"),Oro=o("GPTJConfig"),Vro=o(" (GPT-J model)"),Xro=l(),Jm=a("li"),Gle=a("strong"),zro=o("groupvit"),Wro=o(" \u2014 "),oB=a("a"),Qro=o("GroupViTConfig"),Uro=o(" (GroupViT model)"),Hro=l(),Ym=a("li"),Ole=a("strong"),Jro=o("hubert"),Yro=o(" \u2014 "),rB=a("a"),Kro=o("HubertConfig"),Zro=o(" (Hubert model)"),eto=l(),Km=a("li"),Vle=a("strong"),oto=o("ibert"),rto=o(" \u2014 "),tB=a("a"),tto=o("IBertConfig"),ato=o(" (I-BERT model)"),nto=l(),Zm=a("li"),Xle=a("strong"),sto=o("imagegpt"),lto=o(" \u2014 "),aB=a("a"),ito=o("ImageGPTConfig"),dto=o(" (ImageGPT model)"),cto=l(),eg=a("li"),zle=a("strong"),fto=o("layoutlm"),mto=o(" \u2014 "),nB=a("a"),gto=o("LayoutLMConfig"),hto=o(" (LayoutLM model)"),pto=l(),og=a("li"),Wle=a("strong"),_to=o("layoutlmv2"),uto=o(" \u2014 "),sB=a("a"),bto=o("LayoutLMv2Config"),vto=o(" (LayoutLMv2 model)"),Fto=l(),rg=a("li"),Qle=a("strong"),Tto=o("layoutlmv3"),Mto=o(" \u2014 "),lB=a("a"),Eto=o("LayoutLMv3Config"),Cto=o(" (LayoutLMv3 model)"),wto=l(),tg=a("li"),Ule=a("strong"),Ato=o("led"),Lto=o(" \u2014 "),iB=a("a"),yto=o("LEDConfig"),xto=o(" (LED model)"),$to=l(),ag=a("li"),Hle=a("strong"),kto=o("levit"),Sto=o(" \u2014 "),dB=a("a"),Rto=o("LevitConfig"),Pto=o(" (LeViT model)"),Bto=l(),ng=a("li"),Jle=a("strong"),Ito=o("longformer"),Nto=o(" \u2014 "),cB=a("a"),qto=o("LongformerConfig"),jto=o(" (Longformer model)"),Dto=l(),sg=a("li"),Yle=a("strong"),Gto=o("longt5"),Oto=o(" \u2014 "),fB=a("a"),Vto=o("LongT5Config"),Xto=o(" (LongT5 model)"),zto=l(),lg=a("li"),Kle=a("strong"),Wto=o("luke"),Qto=o(" \u2014 "),mB=a("a"),Uto=o("LukeConfig"),Hto=o(" (LUKE model)"),Jto=l(),ig=a("li"),Zle=a("strong"),Yto=o("lxmert"),Kto=o(" \u2014 "),gB=a("a"),Zto=o("LxmertConfig"),eao=o(" (LXMERT model)"),oao=l(),dg=a("li"),eie=a("strong"),rao=o("m2m_100"),tao=o(" \u2014 "),hB=a("a"),aao=o("M2M100Config"),nao=o(" (M2M100 model)"),sao=l(),cg=a("li"),oie=a("strong"),lao=o("marian"),iao=o(" \u2014 "),pB=a("a"),dao=o("MarianConfig"),cao=o(" (Marian model)"),fao=l(),fg=a("li"),rie=a("strong"),mao=o("maskformer"),gao=o(" \u2014 "),_B=a("a"),hao=o("MaskFormerConfig"),pao=o(" (MaskFormer model)"),_ao=l(),mg=a("li"),tie=a("strong"),uao=o("mbart"),bao=o(" \u2014 "),uB=a("a"),vao=o("MBartConfig"),Fao=o(" (mBART model)"),Tao=l(),gg=a("li"),aie=a("strong"),Mao=o("mctct"),Eao=o(" \u2014 "),bB=a("a"),Cao=o("MCTCTConfig"),wao=o(" (M-CTC-T model)"),Aao=l(),hg=a("li"),nie=a("strong"),Lao=o("megatron-bert"),yao=o(" \u2014 "),vB=a("a"),xao=o("MegatronBertConfig"),$ao=o(" (Megatron-BERT model)"),kao=l(),pg=a("li"),sie=a("strong"),Sao=o("mobilebert"),Rao=o(" \u2014 "),FB=a("a"),Pao=o("MobileBertConfig"),Bao=o(" (MobileBERT model)"),Iao=l(),_g=a("li"),lie=a("strong"),Nao=o("mobilevit"),qao=o(" \u2014 "),TB=a("a"),jao=o("MobileViTConfig"),Dao=o(" (MobileViT model)"),Gao=l(),ug=a("li"),iie=a("strong"),Oao=o("mpnet"),Vao=o(" \u2014 "),MB=a("a"),Xao=o("MPNetConfig"),zao=o(" (MPNet model)"),Wao=l(),bg=a("li"),die=a("strong"),Qao=o("mt5"),Uao=o(" \u2014 "),EB=a("a"),Hao=o("MT5Config"),Jao=o(" (MT5 model)"),Yao=l(),vg=a("li"),cie=a("strong"),Kao=o("mvp"),Zao=o(" \u2014 "),CB=a("a"),eno=o("MvpConfig"),ono=o(" (MVP model)"),rno=l(),Fg=a("li"),fie=a("strong"),tno=o("nezha"),ano=o(" \u2014 "),wB=a("a"),nno=o("NezhaConfig"),sno=o(" (Nezha model)"),lno=l(),Tg=a("li"),mie=a("strong"),ino=o("nystromformer"),dno=o(" \u2014 "),AB=a("a"),cno=o("NystromformerConfig"),fno=o(" (Nystr\xF6mformer model)"),mno=l(),Mg=a("li"),gie=a("strong"),gno=o("openai-gpt"),hno=o(" \u2014 "),LB=a("a"),pno=o("OpenAIGPTConfig"),_no=o(" (OpenAI GPT model)"),uno=l(),Eg=a("li"),hie=a("strong"),bno=o("opt"),vno=o(" \u2014 "),yB=a("a"),Fno=o("OPTConfig"),Tno=o(" (OPT model)"),Mno=l(),Cg=a("li"),pie=a("strong"),Eno=o("owlvit"),Cno=o(" \u2014 "),xB=a("a"),wno=o("OwlViTConfig"),Ano=o(" (OWL-ViT model)"),Lno=l(),wg=a("li"),_ie=a("strong"),yno=o("pegasus"),xno=o(" \u2014 "),$B=a("a"),$no=o("PegasusConfig"),kno=o(" (Pegasus model)"),Sno=l(),Ag=a("li"),uie=a("strong"),Rno=o("perceiver"),Pno=o(" \u2014 "),kB=a("a"),Bno=o("PerceiverConfig"),Ino=o(" (Perceiver model)"),Nno=l(),Lg=a("li"),bie=a("strong"),qno=o("plbart"),jno=o(" \u2014 "),SB=a("a"),Dno=o("PLBartConfig"),Gno=o(" (PLBart model)"),Ono=l(),yg=a("li"),vie=a("strong"),Vno=o("poolformer"),Xno=o(" \u2014 "),RB=a("a"),zno=o("PoolFormerConfig"),Wno=o(" (PoolFormer model)"),Qno=l(),xg=a("li"),Fie=a("strong"),Uno=o("prophetnet"),Hno=o(" \u2014 "),PB=a("a"),Jno=o("ProphetNetConfig"),Yno=o(" (ProphetNet model)"),Kno=l(),$g=a("li"),Tie=a("strong"),Zno=o("qdqbert"),eso=o(" \u2014 "),BB=a("a"),oso=o("QDQBertConfig"),rso=o(" (QDQBert model)"),tso=l(),kg=a("li"),Mie=a("strong"),aso=o("rag"),nso=o(" \u2014 "),IB=a("a"),sso=o("RagConfig"),lso=o(" (RAG model)"),iso=l(),Sg=a("li"),Eie=a("strong"),dso=o("realm"),cso=o(" \u2014 "),NB=a("a"),fso=o("RealmConfig"),mso=o(" (REALM model)"),gso=l(),Rg=a("li"),Cie=a("strong"),hso=o("reformer"),pso=o(" \u2014 "),qB=a("a"),_so=o("ReformerConfig"),uso=o(" (Reformer model)"),bso=l(),Pg=a("li"),wie=a("strong"),vso=o("regnet"),Fso=o(" \u2014 "),jB=a("a"),Tso=o("RegNetConfig"),Mso=o(" (RegNet model)"),Eso=l(),Bg=a("li"),Aie=a("strong"),Cso=o("rembert"),wso=o(" \u2014 "),DB=a("a"),Aso=o("RemBertConfig"),Lso=o(" (RemBERT model)"),yso=l(),Ig=a("li"),Lie=a("strong"),xso=o("resnet"),$so=o(" \u2014 "),GB=a("a"),kso=o("ResNetConfig"),Sso=o(" (ResNet model)"),Rso=l(),Ng=a("li"),yie=a("strong"),Pso=o("retribert"),Bso=o(" \u2014 "),OB=a("a"),Iso=o("RetriBertConfig"),Nso=o(" (RetriBERT model)"),qso=l(),qg=a("li"),xie=a("strong"),jso=o("roberta"),Dso=o(" \u2014 "),VB=a("a"),Gso=o("RobertaConfig"),Oso=o(" (RoBERTa model)"),Vso=l(),jg=a("li"),$ie=a("strong"),Xso=o("roformer"),zso=o(" \u2014 "),XB=a("a"),Wso=o("RoFormerConfig"),Qso=o(" (RoFormer model)"),Uso=l(),Dg=a("li"),kie=a("strong"),Hso=o("segformer"),Jso=o(" \u2014 "),zB=a("a"),Yso=o("SegformerConfig"),Kso=o(" (SegFormer model)"),Zso=l(),Gg=a("li"),Sie=a("strong"),elo=o("sew"),olo=o(" \u2014 "),WB=a("a"),rlo=o("SEWConfig"),tlo=o(" (SEW model)"),alo=l(),Og=a("li"),Rie=a("strong"),nlo=o("sew-d"),slo=o(" \u2014 "),QB=a("a"),llo=o("SEWDConfig"),ilo=o(" (SEW-D model)"),dlo=l(),Vg=a("li"),Pie=a("strong"),clo=o("speech-encoder-decoder"),flo=o(" \u2014 "),UB=a("a"),mlo=o("SpeechEncoderDecoderConfig"),glo=o(" (Speech Encoder decoder model)"),hlo=l(),Xg=a("li"),Bie=a("strong"),plo=o("speech_to_text"),_lo=o(" \u2014 "),HB=a("a"),ulo=o("Speech2TextConfig"),blo=o(" (Speech2Text model)"),vlo=l(),zg=a("li"),Iie=a("strong"),Flo=o("speech_to_text_2"),Tlo=o(" \u2014 "),JB=a("a"),Mlo=o("Speech2Text2Config"),Elo=o(" (Speech2Text2 model)"),Clo=l(),Wg=a("li"),Nie=a("strong"),wlo=o("splinter"),Alo=o(" \u2014 "),YB=a("a"),Llo=o("SplinterConfig"),ylo=o(" (Splinter model)"),xlo=l(),Qg=a("li"),qie=a("strong"),$lo=o("squeezebert"),klo=o(" \u2014 "),KB=a("a"),Slo=o("SqueezeBertConfig"),Rlo=o(" (SqueezeBERT model)"),Plo=l(),Ug=a("li"),jie=a("strong"),Blo=o("swin"),Ilo=o(" \u2014 "),ZB=a("a"),Nlo=o("SwinConfig"),qlo=o(" (Swin Transformer model)"),jlo=l(),Hg=a("li"),Die=a("strong"),Dlo=o("swinv2"),Glo=o(" \u2014 "),eI=a("a"),Olo=o("Swinv2Config"),Vlo=o(" (Swin Transformer V2 model)"),Xlo=l(),Jg=a("li"),Gie=a("strong"),zlo=o("t5"),Wlo=o(" \u2014 "),oI=a("a"),Qlo=o("T5Config"),Ulo=o(" (T5 model)"),Hlo=l(),Yg=a("li"),Oie=a("strong"),Jlo=o("tapas"),Ylo=o(" \u2014 "),rI=a("a"),Klo=o("TapasConfig"),Zlo=o(" (TAPAS model)"),eio=l(),Kg=a("li"),Vie=a("strong"),oio=o("trajectory_transformer"),rio=o(" \u2014 "),tI=a("a"),tio=o("TrajectoryTransformerConfig"),aio=o(" (Trajectory Transformer model)"),nio=l(),Zg=a("li"),Xie=a("strong"),sio=o("transfo-xl"),lio=o(" \u2014 "),aI=a("a"),iio=o("TransfoXLConfig"),dio=o(" (Transformer-XL model)"),cio=l(),eh=a("li"),zie=a("strong"),fio=o("trocr"),mio=o(" \u2014 "),nI=a("a"),gio=o("TrOCRConfig"),hio=o(" (TrOCR model)"),pio=l(),oh=a("li"),Wie=a("strong"),_io=o("unispeech"),uio=o(" \u2014 "),sI=a("a"),bio=o("UniSpeechConfig"),vio=o(" (UniSpeech model)"),Fio=l(),rh=a("li"),Qie=a("strong"),Tio=o("unispeech-sat"),Mio=o(" \u2014 "),lI=a("a"),Eio=o("UniSpeechSatConfig"),Cio=o(" (UniSpeechSat model)"),wio=l(),th=a("li"),Uie=a("strong"),Aio=o("van"),Lio=o(" \u2014 "),iI=a("a"),yio=o("VanConfig"),xio=o(" (VAN model)"),$io=l(),ah=a("li"),Hie=a("strong"),kio=o("videomae"),Sio=o(" \u2014 "),dI=a("a"),Rio=o("VideoMAEConfig"),Pio=o(" (VideoMAE model)"),Bio=l(),nh=a("li"),Jie=a("strong"),Iio=o("vilt"),Nio=o(" \u2014 "),cI=a("a"),qio=o("ViltConfig"),jio=o(" (ViLT model)"),Dio=l(),sh=a("li"),Yie=a("strong"),Gio=o("vision-encoder-decoder"),Oio=o(" \u2014 "),fI=a("a"),Vio=o("VisionEncoderDecoderConfig"),Xio=o(" (Vision Encoder decoder model)"),zio=l(),lh=a("li"),Kie=a("strong"),Wio=o("vision-text-dual-encoder"),Qio=o(" \u2014 "),mI=a("a"),Uio=o("VisionTextDualEncoderConfig"),Hio=o(" (VisionTextDualEncoder model)"),Jio=l(),ih=a("li"),Zie=a("strong"),Yio=o("visual_bert"),Kio=o(" \u2014 "),gI=a("a"),Zio=o("VisualBertConfig"),edo=o(" (VisualBERT model)"),odo=l(),dh=a("li"),ede=a("strong"),rdo=o("vit"),tdo=o(" \u2014 "),hI=a("a"),ado=o("ViTConfig"),ndo=o(" (ViT model)"),sdo=l(),ch=a("li"),ode=a("strong"),ldo=o("vit_mae"),ido=o(" \u2014 "),pI=a("a"),ddo=o("ViTMAEConfig"),cdo=o(" (ViTMAE model)"),fdo=l(),fh=a("li"),rde=a("strong"),mdo=o("wav2vec2"),gdo=o(" \u2014 "),_I=a("a"),hdo=o("Wav2Vec2Config"),pdo=o(" (Wav2Vec2 model)"),_do=l(),mh=a("li"),tde=a("strong"),udo=o("wav2vec2-conformer"),bdo=o(" \u2014 "),uI=a("a"),vdo=o("Wav2Vec2ConformerConfig"),Fdo=o(" (Wav2Vec2-Conformer model)"),Tdo=l(),gh=a("li"),ade=a("strong"),Mdo=o("wavlm"),Edo=o(" \u2014 "),bI=a("a"),Cdo=o("WavLMConfig"),wdo=o(" (WavLM model)"),Ado=l(),hh=a("li"),nde=a("strong"),Ldo=o("xglm"),ydo=o(" \u2014 "),vI=a("a"),xdo=o("XGLMConfig"),$do=o(" (XGLM model)"),kdo=l(),ph=a("li"),sde=a("strong"),Sdo=o("xlm"),Rdo=o(" \u2014 "),FI=a("a"),Pdo=o("XLMConfig"),Bdo=o(" (XLM model)"),Ido=l(),_h=a("li"),lde=a("strong"),Ndo=o("xlm-prophetnet"),qdo=o(" \u2014 "),TI=a("a"),jdo=o("XLMProphetNetConfig"),Ddo=o(" (XLM-ProphetNet model)"),Gdo=l(),uh=a("li"),ide=a("strong"),Odo=o("xlm-roberta"),Vdo=o(" \u2014 "),MI=a("a"),Xdo=o("XLMRobertaConfig"),zdo=o(" (XLM-RoBERTa model)"),Wdo=l(),bh=a("li"),dde=a("strong"),Qdo=o("xlm-roberta-xl"),Udo=o(" \u2014 "),EI=a("a"),Hdo=o("XLMRobertaXLConfig"),Jdo=o(" (XLM-RoBERTa-XL model)"),Ydo=l(),vh=a("li"),cde=a("strong"),Kdo=o("xlnet"),Zdo=o(" \u2014 "),CI=a("a"),eco=o("XLNetConfig"),oco=o(" (XLNet model)"),rco=l(),Fh=a("li"),fde=a("strong"),tco=o("yolos"),aco=o(" \u2014 "),wI=a("a"),nco=o("YolosConfig"),sco=o(" (YOLOS model)"),lco=l(),Th=a("li"),mde=a("strong"),ico=o("yoso"),dco=o(" \u2014 "),AI=a("a"),cco=o("YosoConfig"),fco=o(" (YOSO model)"),mco=l(),F(Mh.$$.fragment),gco=l(),Eh=a("div"),F(Cy.$$.fragment),hco=l(),gde=a("p"),pco=o("Register a new configuration for this class."),sUe=l(),Ki=a("h2"),Ch=a("a"),hde=a("span"),F(wy.$$.fragment),_co=l(),pde=a("span"),uco=o("AutoTokenizer"),lUe=l(),xo=a("div"),F(Ay.$$.fragment),bco=l(),Ly=a("p"),vco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LI=a("a"),Fco=o("AutoTokenizer.from_pretrained()"),Tco=o(" class method."),Mco=l(),yy=a("p"),Eco=o("This class cannot be instantiated directly using "),_de=a("code"),Cco=o("__init__()"),wco=o(" (throws an error)."),Aco=l(),Sr=a("div"),F(xy.$$.fragment),Lco=l(),ude=a("p"),yco=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xco=l(),Ga=a("p"),$co=o("The tokenizer class to instantiate is selected based on the "),bde=a("code"),kco=o("model_type"),Sco=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),Rco=o("pretrained_model_name_or_path"),Pco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),Bco=o("pretrained_model_name_or_path"),Ico=o(":"),Nco=l(),k=a("ul"),Hn=a("li"),Tde=a("strong"),qco=o("albert"),jco=o(" \u2014 "),yI=a("a"),Dco=o("AlbertTokenizer"),Gco=o(" or "),xI=a("a"),Oco=o("AlbertTokenizerFast"),Vco=o(" (ALBERT model)"),Xco=l(),Jn=a("li"),Mde=a("strong"),zco=o("bart"),Wco=o(" \u2014 "),$I=a("a"),Qco=o("BartTokenizer"),Uco=o(" or "),kI=a("a"),Hco=o("BartTokenizerFast"),Jco=o(" (BART model)"),Yco=l(),Yn=a("li"),Ede=a("strong"),Kco=o("barthez"),Zco=o(" \u2014 "),SI=a("a"),efo=o("BarthezTokenizer"),ofo=o(" or "),RI=a("a"),rfo=o("BarthezTokenizerFast"),tfo=o(" (BARThez model)"),afo=l(),wh=a("li"),Cde=a("strong"),nfo=o("bartpho"),sfo=o(" \u2014 "),PI=a("a"),lfo=o("BartphoTokenizer"),ifo=o(" (BARTpho model)"),dfo=l(),Kn=a("li"),wde=a("strong"),cfo=o("bert"),ffo=o(" \u2014 "),BI=a("a"),mfo=o("BertTokenizer"),gfo=o(" or "),II=a("a"),hfo=o("BertTokenizerFast"),pfo=o(" (BERT model)"),_fo=l(),Ah=a("li"),Ade=a("strong"),ufo=o("bert-generation"),bfo=o(" \u2014 "),NI=a("a"),vfo=o("BertGenerationTokenizer"),Ffo=o(" (Bert Generation model)"),Tfo=l(),Lh=a("li"),Lde=a("strong"),Mfo=o("bert-japanese"),Efo=o(" \u2014 "),qI=a("a"),Cfo=o("BertJapaneseTokenizer"),wfo=o(" (BertJapanese model)"),Afo=l(),yh=a("li"),yde=a("strong"),Lfo=o("bertweet"),yfo=o(" \u2014 "),jI=a("a"),xfo=o("BertweetTokenizer"),$fo=o(" (BERTweet model)"),kfo=l(),Zn=a("li"),xde=a("strong"),Sfo=o("big_bird"),Rfo=o(" \u2014 "),DI=a("a"),Pfo=o("BigBirdTokenizer"),Bfo=o(" or "),GI=a("a"),Ifo=o("BigBirdTokenizerFast"),Nfo=o(" (BigBird model)"),qfo=l(),es=a("li"),$de=a("strong"),jfo=o("bigbird_pegasus"),Dfo=o(" \u2014 "),OI=a("a"),Gfo=o("PegasusTokenizer"),Ofo=o(" or "),VI=a("a"),Vfo=o("PegasusTokenizerFast"),Xfo=o(" (BigBird-Pegasus model)"),zfo=l(),os=a("li"),kde=a("strong"),Wfo=o("blenderbot"),Qfo=o(" \u2014 "),XI=a("a"),Ufo=o("BlenderbotTokenizer"),Hfo=o(" or "),zI=a("a"),Jfo=o("BlenderbotTokenizerFast"),Yfo=o(" (Blenderbot model)"),Kfo=l(),xh=a("li"),Sde=a("strong"),Zfo=o("blenderbot-small"),emo=o(" \u2014 "),WI=a("a"),omo=o("BlenderbotSmallTokenizer"),rmo=o(" (BlenderbotSmall model)"),tmo=l(),$h=a("li"),Rde=a("strong"),amo=o("bloom"),nmo=o(" \u2014 "),QI=a("a"),smo=o("BloomTokenizerFast"),lmo=o(" (BLOOM model)"),imo=l(),kh=a("li"),Pde=a("strong"),dmo=o("byt5"),cmo=o(" \u2014 "),UI=a("a"),fmo=o("ByT5Tokenizer"),mmo=o(" (ByT5 model)"),gmo=l(),rs=a("li"),Bde=a("strong"),hmo=o("camembert"),pmo=o(" \u2014 "),HI=a("a"),_mo=o("CamembertTokenizer"),umo=o(" or "),JI=a("a"),bmo=o("CamembertTokenizerFast"),vmo=o(" (CamemBERT model)"),Fmo=l(),Sh=a("li"),Ide=a("strong"),Tmo=o("canine"),Mmo=o(" \u2014 "),YI=a("a"),Emo=o("CanineTokenizer"),Cmo=o(" (CANINE model)"),wmo=l(),ts=a("li"),Nde=a("strong"),Amo=o("clip"),Lmo=o(" \u2014 "),KI=a("a"),ymo=o("CLIPTokenizer"),xmo=o(" or "),ZI=a("a"),$mo=o("CLIPTokenizerFast"),kmo=o(" (CLIP model)"),Smo=l(),as=a("li"),qde=a("strong"),Rmo=o("codegen"),Pmo=o(" \u2014 "),eN=a("a"),Bmo=o("CodeGenTokenizer"),Imo=o(" or "),oN=a("a"),Nmo=o("CodeGenTokenizerFast"),qmo=o(" (CodeGen model)"),jmo=l(),ns=a("li"),jde=a("strong"),Dmo=o("convbert"),Gmo=o(" \u2014 "),rN=a("a"),Omo=o("ConvBertTokenizer"),Vmo=o(" or "),tN=a("a"),Xmo=o("ConvBertTokenizerFast"),zmo=o(" (ConvBERT model)"),Wmo=l(),ss=a("li"),Dde=a("strong"),Qmo=o("cpm"),Umo=o(" \u2014 "),aN=a("a"),Hmo=o("CpmTokenizer"),Jmo=o(" or "),nN=a("a"),Ymo=o("CpmTokenizerFast"),Kmo=o(" (CPM model)"),Zmo=l(),Rh=a("li"),Gde=a("strong"),ego=o("ctrl"),ogo=o(" \u2014 "),sN=a("a"),rgo=o("CTRLTokenizer"),tgo=o(" (CTRL model)"),ago=l(),ls=a("li"),Ode=a("strong"),ngo=o("data2vec-text"),sgo=o(" \u2014 "),lN=a("a"),lgo=o("RobertaTokenizer"),igo=o(" or "),iN=a("a"),dgo=o("RobertaTokenizerFast"),cgo=o(" (Data2VecText model)"),fgo=l(),is=a("li"),Vde=a("strong"),mgo=o("deberta"),ggo=o(" \u2014 "),dN=a("a"),hgo=o("DebertaTokenizer"),pgo=o(" or "),cN=a("a"),_go=o("DebertaTokenizerFast"),ugo=o(" (DeBERTa model)"),bgo=l(),ds=a("li"),Xde=a("strong"),vgo=o("deberta-v2"),Fgo=o(" \u2014 "),fN=a("a"),Tgo=o("DebertaV2Tokenizer"),Mgo=o(" or "),mN=a("a"),Ego=o("DebertaV2TokenizerFast"),Cgo=o(" (DeBERTa-v2 model)"),wgo=l(),cs=a("li"),zde=a("strong"),Ago=o("distilbert"),Lgo=o(" \u2014 "),gN=a("a"),ygo=o("DistilBertTokenizer"),xgo=o(" or "),hN=a("a"),$go=o("DistilBertTokenizerFast"),kgo=o(" (DistilBERT model)"),Sgo=l(),fs=a("li"),Wde=a("strong"),Rgo=o("dpr"),Pgo=o(" \u2014 "),pN=a("a"),Bgo=o("DPRQuestionEncoderTokenizer"),Igo=o(" or "),_N=a("a"),Ngo=o("DPRQuestionEncoderTokenizerFast"),qgo=o(" (DPR model)"),jgo=l(),ms=a("li"),Qde=a("strong"),Dgo=o("electra"),Ggo=o(" \u2014 "),uN=a("a"),Ogo=o("ElectraTokenizer"),Vgo=o(" or "),bN=a("a"),Xgo=o("ElectraTokenizerFast"),zgo=o(" (ELECTRA model)"),Wgo=l(),Ph=a("li"),Ude=a("strong"),Qgo=o("flaubert"),Ugo=o(" \u2014 "),vN=a("a"),Hgo=o("FlaubertTokenizer"),Jgo=o(" (FlauBERT model)"),Ygo=l(),gs=a("li"),Hde=a("strong"),Kgo=o("fnet"),Zgo=o(" \u2014 "),FN=a("a"),eho=o("FNetTokenizer"),oho=o(" or "),TN=a("a"),rho=o("FNetTokenizerFast"),tho=o(" (FNet model)"),aho=l(),Bh=a("li"),Jde=a("strong"),nho=o("fsmt"),sho=o(" \u2014 "),MN=a("a"),lho=o("FSMTTokenizer"),iho=o(" (FairSeq Machine-Translation model)"),dho=l(),hs=a("li"),Yde=a("strong"),cho=o("funnel"),fho=o(" \u2014 "),EN=a("a"),mho=o("FunnelTokenizer"),gho=o(" or "),CN=a("a"),hho=o("FunnelTokenizerFast"),pho=o(" (Funnel Transformer model)"),_ho=l(),ps=a("li"),Kde=a("strong"),uho=o("gpt2"),bho=o(" \u2014 "),wN=a("a"),vho=o("GPT2Tokenizer"),Fho=o(" or "),AN=a("a"),Tho=o("GPT2TokenizerFast"),Mho=o(" (OpenAI GPT-2 model)"),Eho=l(),_s=a("li"),Zde=a("strong"),Cho=o("gpt_neo"),who=o(" \u2014 "),LN=a("a"),Aho=o("GPT2Tokenizer"),Lho=o(" or "),yN=a("a"),yho=o("GPT2TokenizerFast"),xho=o(" (GPT Neo model)"),$ho=l(),Ih=a("li"),ece=a("strong"),kho=o("gpt_neox"),Sho=o(" \u2014 "),xN=a("a"),Rho=o("GPTNeoXTokenizerFast"),Pho=o(" (GPT NeoX model)"),Bho=l(),us=a("li"),oce=a("strong"),Iho=o("gptj"),Nho=o(" \u2014 "),$N=a("a"),qho=o("GPT2Tokenizer"),jho=o(" or "),kN=a("a"),Dho=o("GPT2TokenizerFast"),Gho=o(" (GPT-J model)"),Oho=l(),bs=a("li"),rce=a("strong"),Vho=o("groupvit"),Xho=o(" \u2014 "),SN=a("a"),zho=o("CLIPTokenizer"),Who=o(" or "),RN=a("a"),Qho=o("CLIPTokenizerFast"),Uho=o(" (GroupViT model)"),Hho=l(),vs=a("li"),tce=a("strong"),Jho=o("herbert"),Yho=o(" \u2014 "),PN=a("a"),Kho=o("HerbertTokenizer"),Zho=o(" or "),BN=a("a"),epo=o("HerbertTokenizerFast"),opo=o(" (HerBERT model)"),rpo=l(),Nh=a("li"),ace=a("strong"),tpo=o("hubert"),apo=o(" \u2014 "),IN=a("a"),npo=o("Wav2Vec2CTCTokenizer"),spo=o(" (Hubert model)"),lpo=l(),Fs=a("li"),nce=a("strong"),ipo=o("ibert"),dpo=o(" \u2014 "),NN=a("a"),cpo=o("RobertaTokenizer"),fpo=o(" or "),qN=a("a"),mpo=o("RobertaTokenizerFast"),gpo=o(" (I-BERT model)"),hpo=l(),Ts=a("li"),sce=a("strong"),ppo=o("layoutlm"),_po=o(" \u2014 "),jN=a("a"),upo=o("LayoutLMTokenizer"),bpo=o(" or "),DN=a("a"),vpo=o("LayoutLMTokenizerFast"),Fpo=o(" (LayoutLM model)"),Tpo=l(),Ms=a("li"),lce=a("strong"),Mpo=o("layoutlmv2"),Epo=o(" \u2014 "),GN=a("a"),Cpo=o("LayoutLMv2Tokenizer"),wpo=o(" or "),ON=a("a"),Apo=o("LayoutLMv2TokenizerFast"),Lpo=o(" (LayoutLMv2 model)"),ypo=l(),Es=a("li"),ice=a("strong"),xpo=o("layoutlmv3"),$po=o(" \u2014 "),VN=a("a"),kpo=o("LayoutLMv3Tokenizer"),Spo=o(" or "),XN=a("a"),Rpo=o("LayoutLMv3TokenizerFast"),Ppo=o(" (LayoutLMv3 model)"),Bpo=l(),Cs=a("li"),dce=a("strong"),Ipo=o("layoutxlm"),Npo=o(" \u2014 "),zN=a("a"),qpo=o("LayoutXLMTokenizer"),jpo=o(" or "),WN=a("a"),Dpo=o("LayoutXLMTokenizerFast"),Gpo=o(" (LayoutXLM model)"),Opo=l(),ws=a("li"),cce=a("strong"),Vpo=o("led"),Xpo=o(" \u2014 "),QN=a("a"),zpo=o("LEDTokenizer"),Wpo=o(" or "),UN=a("a"),Qpo=o("LEDTokenizerFast"),Upo=o(" (LED model)"),Hpo=l(),As=a("li"),fce=a("strong"),Jpo=o("longformer"),Ypo=o(" \u2014 "),HN=a("a"),Kpo=o("LongformerTokenizer"),Zpo=o(" or "),JN=a("a"),e_o=o("LongformerTokenizerFast"),o_o=o(" (Longformer model)"),r_o=l(),Ls=a("li"),mce=a("strong"),t_o=o("longt5"),a_o=o(" \u2014 "),YN=a("a"),n_o=o("T5Tokenizer"),s_o=o(" or "),KN=a("a"),l_o=o("T5TokenizerFast"),i_o=o(" (LongT5 model)"),d_o=l(),qh=a("li"),gce=a("strong"),c_o=o("luke"),f_o=o(" \u2014 "),ZN=a("a"),m_o=o("LukeTokenizer"),g_o=o(" (LUKE model)"),h_o=l(),ys=a("li"),hce=a("strong"),p_o=o("lxmert"),__o=o(" \u2014 "),eq=a("a"),u_o=o("LxmertTokenizer"),b_o=o(" or "),oq=a("a"),v_o=o("LxmertTokenizerFast"),F_o=o(" (LXMERT model)"),T_o=l(),jh=a("li"),pce=a("strong"),M_o=o("m2m_100"),E_o=o(" \u2014 "),rq=a("a"),C_o=o("M2M100Tokenizer"),w_o=o(" (M2M100 model)"),A_o=l(),Dh=a("li"),_ce=a("strong"),L_o=o("marian"),y_o=o(" \u2014 "),tq=a("a"),x_o=o("MarianTokenizer"),$_o=o(" (Marian model)"),k_o=l(),xs=a("li"),uce=a("strong"),S_o=o("mbart"),R_o=o(" \u2014 "),aq=a("a"),P_o=o("MBartTokenizer"),B_o=o(" or "),nq=a("a"),I_o=o("MBartTokenizerFast"),N_o=o(" (mBART model)"),q_o=l(),$s=a("li"),bce=a("strong"),j_o=o("mbart50"),D_o=o(" \u2014 "),sq=a("a"),G_o=o("MBart50Tokenizer"),O_o=o(" or "),lq=a("a"),V_o=o("MBart50TokenizerFast"),X_o=o(" (mBART-50 model)"),z_o=l(),ks=a("li"),vce=a("strong"),W_o=o("megatron-bert"),Q_o=o(" \u2014 "),iq=a("a"),U_o=o("BertTokenizer"),H_o=o(" or "),dq=a("a"),J_o=o("BertTokenizerFast"),Y_o=o(" (Megatron-BERT model)"),K_o=l(),Gh=a("li"),Fce=a("strong"),Z_o=o("mluke"),euo=o(" \u2014 "),cq=a("a"),ouo=o("MLukeTokenizer"),ruo=o(" (mLUKE model)"),tuo=l(),Ss=a("li"),Tce=a("strong"),auo=o("mobilebert"),nuo=o(" \u2014 "),fq=a("a"),suo=o("MobileBertTokenizer"),luo=o(" or "),mq=a("a"),iuo=o("MobileBertTokenizerFast"),duo=o(" (MobileBERT model)"),cuo=l(),Rs=a("li"),Mce=a("strong"),fuo=o("mpnet"),muo=o(" \u2014 "),gq=a("a"),guo=o("MPNetTokenizer"),huo=o(" or "),hq=a("a"),puo=o("MPNetTokenizerFast"),_uo=o(" (MPNet model)"),uuo=l(),Ps=a("li"),Ece=a("strong"),buo=o("mt5"),vuo=o(" \u2014 "),pq=a("a"),Fuo=o("MT5Tokenizer"),Tuo=o(" or "),_q=a("a"),Muo=o("MT5TokenizerFast"),Euo=o(" (MT5 model)"),Cuo=l(),Bs=a("li"),Cce=a("strong"),wuo=o("mvp"),Auo=o(" \u2014 "),uq=a("a"),Luo=o("MvpTokenizer"),yuo=o(" or "),bq=a("a"),xuo=o("MvpTokenizerFast"),$uo=o(" (MVP model)"),kuo=l(),Is=a("li"),wce=a("strong"),Suo=o("nezha"),Ruo=o(" \u2014 "),vq=a("a"),Puo=o("BertTokenizer"),Buo=o(" or "),Fq=a("a"),Iuo=o("BertTokenizerFast"),Nuo=o(" (Nezha model)"),quo=l(),Ns=a("li"),Ace=a("strong"),juo=o("nllb"),Duo=o(" \u2014 "),Tq=a("a"),Guo=o("NllbTokenizer"),Ouo=o(" or "),Mq=a("a"),Vuo=o("NllbTokenizerFast"),Xuo=o(" (NLLB model)"),zuo=l(),qs=a("li"),Lce=a("strong"),Wuo=o("nystromformer"),Quo=o(" \u2014 "),Eq=a("a"),Uuo=o("AlbertTokenizer"),Huo=o(" or "),Cq=a("a"),Juo=o("AlbertTokenizerFast"),Yuo=o(" (Nystr\xF6mformer model)"),Kuo=l(),js=a("li"),yce=a("strong"),Zuo=o("openai-gpt"),e5o=o(" \u2014 "),wq=a("a"),o5o=o("OpenAIGPTTokenizer"),r5o=o(" or "),Aq=a("a"),t5o=o("OpenAIGPTTokenizerFast"),a5o=o(" (OpenAI GPT model)"),n5o=l(),Oh=a("li"),xce=a("strong"),s5o=o("opt"),l5o=o(" \u2014 "),Lq=a("a"),i5o=o("GPT2Tokenizer"),d5o=o(" (OPT model)"),c5o=l(),Ds=a("li"),$ce=a("strong"),f5o=o("owlvit"),m5o=o(" \u2014 "),yq=a("a"),g5o=o("CLIPTokenizer"),h5o=o(" or "),xq=a("a"),p5o=o("CLIPTokenizerFast"),_5o=o(" (OWL-ViT model)"),u5o=l(),Gs=a("li"),kce=a("strong"),b5o=o("pegasus"),v5o=o(" \u2014 "),$q=a("a"),F5o=o("PegasusTokenizer"),T5o=o(" or "),kq=a("a"),M5o=o("PegasusTokenizerFast"),E5o=o(" (Pegasus model)"),C5o=l(),Vh=a("li"),Sce=a("strong"),w5o=o("perceiver"),A5o=o(" \u2014 "),Sq=a("a"),L5o=o("PerceiverTokenizer"),y5o=o(" (Perceiver model)"),x5o=l(),Xh=a("li"),Rce=a("strong"),$5o=o("phobert"),k5o=o(" \u2014 "),Rq=a("a"),S5o=o("PhobertTokenizer"),R5o=o(" (PhoBERT model)"),P5o=l(),zh=a("li"),Pce=a("strong"),B5o=o("plbart"),I5o=o(" \u2014 "),Pq=a("a"),N5o=o("PLBartTokenizer"),q5o=o(" (PLBart model)"),j5o=l(),Wh=a("li"),Bce=a("strong"),D5o=o("prophetnet"),G5o=o(" \u2014 "),Bq=a("a"),O5o=o("ProphetNetTokenizer"),V5o=o(" (ProphetNet model)"),X5o=l(),Os=a("li"),Ice=a("strong"),z5o=o("qdqbert"),W5o=o(" \u2014 "),Iq=a("a"),Q5o=o("BertTokenizer"),U5o=o(" or "),Nq=a("a"),H5o=o("BertTokenizerFast"),J5o=o(" (QDQBert model)"),Y5o=l(),Qh=a("li"),Nce=a("strong"),K5o=o("rag"),Z5o=o(" \u2014 "),qq=a("a"),e1o=o("RagTokenizer"),o1o=o(" (RAG model)"),r1o=l(),Vs=a("li"),qce=a("strong"),t1o=o("realm"),a1o=o(" \u2014 "),jq=a("a"),n1o=o("RealmTokenizer"),s1o=o(" or "),Dq=a("a"),l1o=o("RealmTokenizerFast"),i1o=o(" (REALM model)"),d1o=l(),Xs=a("li"),jce=a("strong"),c1o=o("reformer"),f1o=o(" \u2014 "),Gq=a("a"),m1o=o("ReformerTokenizer"),g1o=o(" or "),Oq=a("a"),h1o=o("ReformerTokenizerFast"),p1o=o(" (Reformer model)"),_1o=l(),zs=a("li"),Dce=a("strong"),u1o=o("rembert"),b1o=o(" \u2014 "),Vq=a("a"),v1o=o("RemBertTokenizer"),F1o=o(" or "),Xq=a("a"),T1o=o("RemBertTokenizerFast"),M1o=o(" (RemBERT model)"),E1o=l(),Ws=a("li"),Gce=a("strong"),C1o=o("retribert"),w1o=o(" \u2014 "),zq=a("a"),A1o=o("RetriBertTokenizer"),L1o=o(" or "),Wq=a("a"),y1o=o("RetriBertTokenizerFast"),x1o=o(" (RetriBERT model)"),$1o=l(),Qs=a("li"),Oce=a("strong"),k1o=o("roberta"),S1o=o(" \u2014 "),Qq=a("a"),R1o=o("RobertaTokenizer"),P1o=o(" or "),Uq=a("a"),B1o=o("RobertaTokenizerFast"),I1o=o(" (RoBERTa model)"),N1o=l(),Us=a("li"),Vce=a("strong"),q1o=o("roformer"),j1o=o(" \u2014 "),Hq=a("a"),D1o=o("RoFormerTokenizer"),G1o=o(" or "),Jq=a("a"),O1o=o("RoFormerTokenizerFast"),V1o=o(" (RoFormer model)"),X1o=l(),Uh=a("li"),Xce=a("strong"),z1o=o("speech_to_text"),W1o=o(" \u2014 "),Yq=a("a"),Q1o=o("Speech2TextTokenizer"),U1o=o(" (Speech2Text model)"),H1o=l(),Hh=a("li"),zce=a("strong"),J1o=o("speech_to_text_2"),Y1o=o(" \u2014 "),Kq=a("a"),K1o=o("Speech2Text2Tokenizer"),Z1o=o(" (Speech2Text2 model)"),e2o=l(),Hs=a("li"),Wce=a("strong"),o2o=o("splinter"),r2o=o(" \u2014 "),Zq=a("a"),t2o=o("SplinterTokenizer"),a2o=o(" or "),ej=a("a"),n2o=o("SplinterTokenizerFast"),s2o=o(" (Splinter model)"),l2o=l(),Js=a("li"),Qce=a("strong"),i2o=o("squeezebert"),d2o=o(" \u2014 "),oj=a("a"),c2o=o("SqueezeBertTokenizer"),f2o=o(" or "),rj=a("a"),m2o=o("SqueezeBertTokenizerFast"),g2o=o(" (SqueezeBERT model)"),h2o=l(),Ys=a("li"),Uce=a("strong"),p2o=o("t5"),_2o=o(" \u2014 "),tj=a("a"),u2o=o("T5Tokenizer"),b2o=o(" or "),aj=a("a"),v2o=o("T5TokenizerFast"),F2o=o(" (T5 model)"),T2o=l(),Jh=a("li"),Hce=a("strong"),M2o=o("tapas"),E2o=o(" \u2014 "),nj=a("a"),C2o=o("TapasTokenizer"),w2o=o(" (TAPAS model)"),A2o=l(),Yh=a("li"),Jce=a("strong"),L2o=o("tapex"),y2o=o(" \u2014 "),sj=a("a"),x2o=o("TapexTokenizer"),$2o=o(" (TAPEX model)"),k2o=l(),Kh=a("li"),Yce=a("strong"),S2o=o("transfo-xl"),R2o=o(" \u2014 "),lj=a("a"),P2o=o("TransfoXLTokenizer"),B2o=o(" (Transformer-XL model)"),I2o=l(),Ks=a("li"),Kce=a("strong"),N2o=o("vilt"),q2o=o(" \u2014 "),ij=a("a"),j2o=o("BertTokenizer"),D2o=o(" or "),dj=a("a"),G2o=o("BertTokenizerFast"),O2o=o(" (ViLT model)"),V2o=l(),Zs=a("li"),Zce=a("strong"),X2o=o("visual_bert"),z2o=o(" \u2014 "),cj=a("a"),W2o=o("BertTokenizer"),Q2o=o(" or "),fj=a("a"),U2o=o("BertTokenizerFast"),H2o=o(" (VisualBERT model)"),J2o=l(),Zh=a("li"),efe=a("strong"),Y2o=o("wav2vec2"),K2o=o(" \u2014 "),mj=a("a"),Z2o=o("Wav2Vec2CTCTokenizer"),ebo=o(" (Wav2Vec2 model)"),obo=l(),ep=a("li"),ofe=a("strong"),rbo=o("wav2vec2-conformer"),tbo=o(" \u2014 "),gj=a("a"),abo=o("Wav2Vec2CTCTokenizer"),nbo=o(" (Wav2Vec2-Conformer model)"),sbo=l(),op=a("li"),rfe=a("strong"),lbo=o("wav2vec2_phoneme"),ibo=o(" \u2014 "),hj=a("a"),dbo=o("Wav2Vec2PhonemeCTCTokenizer"),cbo=o(" (Wav2Vec2Phoneme model)"),fbo=l(),el=a("li"),tfe=a("strong"),mbo=o("xglm"),gbo=o(" \u2014 "),pj=a("a"),hbo=o("XGLMTokenizer"),pbo=o(" or "),_j=a("a"),_bo=o("XGLMTokenizerFast"),ubo=o(" (XGLM model)"),bbo=l(),rp=a("li"),afe=a("strong"),vbo=o("xlm"),Fbo=o(" \u2014 "),uj=a("a"),Tbo=o("XLMTokenizer"),Mbo=o(" (XLM model)"),Ebo=l(),tp=a("li"),nfe=a("strong"),Cbo=o("xlm-prophetnet"),wbo=o(" \u2014 "),bj=a("a"),Abo=o("XLMProphetNetTokenizer"),Lbo=o(" (XLM-ProphetNet model)"),ybo=l(),ol=a("li"),sfe=a("strong"),xbo=o("xlm-roberta"),$bo=o(" \u2014 "),vj=a("a"),kbo=o("XLMRobertaTokenizer"),Sbo=o(" or "),Fj=a("a"),Rbo=o("XLMRobertaTokenizerFast"),Pbo=o(" (XLM-RoBERTa model)"),Bbo=l(),rl=a("li"),lfe=a("strong"),Ibo=o("xlm-roberta-xl"),Nbo=o(" \u2014 "),Tj=a("a"),qbo=o("RobertaTokenizer"),jbo=o(" or "),Mj=a("a"),Dbo=o("RobertaTokenizerFast"),Gbo=o(" (XLM-RoBERTa-XL model)"),Obo=l(),tl=a("li"),ife=a("strong"),Vbo=o("xlnet"),Xbo=o(" \u2014 "),Ej=a("a"),zbo=o("XLNetTokenizer"),Wbo=o(" or "),Cj=a("a"),Qbo=o("XLNetTokenizerFast"),Ubo=o(" (XLNet model)"),Hbo=l(),al=a("li"),dfe=a("strong"),Jbo=o("yoso"),Ybo=o(" \u2014 "),wj=a("a"),Kbo=o("AlbertTokenizer"),Zbo=o(" or "),Aj=a("a"),evo=o("AlbertTokenizerFast"),ovo=o(" (YOSO model)"),rvo=l(),F(ap.$$.fragment),tvo=l(),np=a("div"),F($y.$$.fragment),avo=l(),cfe=a("p"),nvo=o("Register a new tokenizer in this mapping."),iUe=l(),Zi=a("h2"),sp=a("a"),ffe=a("span"),F(ky.$$.fragment),svo=l(),mfe=a("span"),lvo=o("AutoFeatureExtractor"),dUe=l(),$o=a("div"),F(Sy.$$.fragment),ivo=l(),Ry=a("p"),dvo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Lj=a("a"),cvo=o("AutoFeatureExtractor.from_pretrained()"),fvo=o(" class method."),mvo=l(),Py=a("p"),gvo=o("This class cannot be instantiated directly using "),gfe=a("code"),hvo=o("__init__()"),pvo=o(" (throws an error)."),_vo=l(),Je=a("div"),F(By.$$.fragment),uvo=l(),hfe=a("p"),bvo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vvo=l(),Oa=a("p"),Fvo=o("The feature extractor class to instantiate is selected based on the "),pfe=a("code"),Tvo=o("model_type"),Mvo=o(` property of the config object
(either passed as an argument or loaded from `),_fe=a("code"),Evo=o("pretrained_model_name_or_path"),Cvo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ufe=a("code"),wvo=o("pretrained_model_name_or_path"),Avo=o(":"),Lvo=l(),Q=a("ul"),lp=a("li"),bfe=a("strong"),yvo=o("beit"),xvo=o(" \u2014 "),yj=a("a"),$vo=o("BeitFeatureExtractor"),kvo=o(" (BEiT model)"),Svo=l(),ip=a("li"),vfe=a("strong"),Rvo=o("clip"),Pvo=o(" \u2014 "),xj=a("a"),Bvo=o("CLIPFeatureExtractor"),Ivo=o(" (CLIP model)"),Nvo=l(),dp=a("li"),Ffe=a("strong"),qvo=o("convnext"),jvo=o(" \u2014 "),$j=a("a"),Dvo=o("ConvNextFeatureExtractor"),Gvo=o(" (ConvNeXT model)"),Ovo=l(),cp=a("li"),Tfe=a("strong"),Vvo=o("cvt"),Xvo=o(" \u2014 "),kj=a("a"),zvo=o("ConvNextFeatureExtractor"),Wvo=o(" (CvT model)"),Qvo=l(),fp=a("li"),Mfe=a("strong"),Uvo=o("data2vec-audio"),Hvo=o(" \u2014 "),Sj=a("a"),Jvo=o("Wav2Vec2FeatureExtractor"),Yvo=o(" (Data2VecAudio model)"),Kvo=l(),mp=a("li"),Efe=a("strong"),Zvo=o("data2vec-vision"),eFo=o(" \u2014 "),Rj=a("a"),oFo=o("BeitFeatureExtractor"),rFo=o(" (Data2VecVision model)"),tFo=l(),gp=a("li"),Cfe=a("strong"),aFo=o("deit"),nFo=o(" \u2014 "),Pj=a("a"),sFo=o("DeiTFeatureExtractor"),lFo=o(" (DeiT model)"),iFo=l(),hp=a("li"),wfe=a("strong"),dFo=o("detr"),cFo=o(" \u2014 "),Bj=a("a"),fFo=o("DetrFeatureExtractor"),mFo=o(" (DETR model)"),gFo=l(),pp=a("li"),Afe=a("strong"),hFo=o("donut"),pFo=o(" \u2014 "),Ij=a("a"),_Fo=o("DonutFeatureExtractor"),uFo=o(" (Donut model)"),bFo=l(),_p=a("li"),Lfe=a("strong"),vFo=o("dpt"),FFo=o(" \u2014 "),Nj=a("a"),TFo=o("DPTFeatureExtractor"),MFo=o(" (DPT model)"),EFo=l(),up=a("li"),yfe=a("strong"),CFo=o("flava"),wFo=o(" \u2014 "),qj=a("a"),AFo=o("FlavaFeatureExtractor"),LFo=o(" (FLAVA model)"),yFo=l(),bp=a("li"),xfe=a("strong"),xFo=o("glpn"),$Fo=o(" \u2014 "),jj=a("a"),kFo=o("GLPNFeatureExtractor"),SFo=o(" (GLPN model)"),RFo=l(),vp=a("li"),$fe=a("strong"),PFo=o("groupvit"),BFo=o(" \u2014 "),Dj=a("a"),IFo=o("CLIPFeatureExtractor"),NFo=o(" (GroupViT model)"),qFo=l(),Fp=a("li"),kfe=a("strong"),jFo=o("hubert"),DFo=o(" \u2014 "),Gj=a("a"),GFo=o("Wav2Vec2FeatureExtractor"),OFo=o(" (Hubert model)"),VFo=l(),Tp=a("li"),Sfe=a("strong"),XFo=o("imagegpt"),zFo=o(" \u2014 "),Oj=a("a"),WFo=o("ImageGPTFeatureExtractor"),QFo=o(" (ImageGPT model)"),UFo=l(),Mp=a("li"),Rfe=a("strong"),HFo=o("layoutlmv2"),JFo=o(" \u2014 "),Vj=a("a"),YFo=o("LayoutLMv2FeatureExtractor"),KFo=o(" (LayoutLMv2 model)"),ZFo=l(),Ep=a("li"),Pfe=a("strong"),eTo=o("layoutlmv3"),oTo=o(" \u2014 "),Xj=a("a"),rTo=o("LayoutLMv3FeatureExtractor"),tTo=o(" (LayoutLMv3 model)"),aTo=l(),Cp=a("li"),Bfe=a("strong"),nTo=o("levit"),sTo=o(" \u2014 "),zj=a("a"),lTo=o("LevitFeatureExtractor"),iTo=o(" (LeViT model)"),dTo=l(),wp=a("li"),Ife=a("strong"),cTo=o("maskformer"),fTo=o(" \u2014 "),Wj=a("a"),mTo=o("MaskFormerFeatureExtractor"),gTo=o(" (MaskFormer model)"),hTo=l(),Ap=a("li"),Nfe=a("strong"),pTo=o("mctct"),_To=o(" \u2014 "),Qj=a("a"),uTo=o("MCTCTFeatureExtractor"),bTo=o(" (M-CTC-T model)"),vTo=l(),Lp=a("li"),qfe=a("strong"),FTo=o("mobilevit"),TTo=o(" \u2014 "),Uj=a("a"),MTo=o("MobileViTFeatureExtractor"),ETo=o(" (MobileViT model)"),CTo=l(),yp=a("li"),jfe=a("strong"),wTo=o("owlvit"),ATo=o(" \u2014 "),Hj=a("a"),LTo=o("OwlViTFeatureExtractor"),yTo=o(" (OWL-ViT model)"),xTo=l(),xp=a("li"),Dfe=a("strong"),$To=o("perceiver"),kTo=o(" \u2014 "),Jj=a("a"),STo=o("PerceiverFeatureExtractor"),RTo=o(" (Perceiver model)"),PTo=l(),$p=a("li"),Gfe=a("strong"),BTo=o("poolformer"),ITo=o(" \u2014 "),Yj=a("a"),NTo=o("PoolFormerFeatureExtractor"),qTo=o(" (PoolFormer model)"),jTo=l(),kp=a("li"),Ofe=a("strong"),DTo=o("regnet"),GTo=o(" \u2014 "),Kj=a("a"),OTo=o("ConvNextFeatureExtractor"),VTo=o(" (RegNet model)"),XTo=l(),Sp=a("li"),Vfe=a("strong"),zTo=o("resnet"),WTo=o(" \u2014 "),Zj=a("a"),QTo=o("ConvNextFeatureExtractor"),UTo=o(" (ResNet model)"),HTo=l(),Rp=a("li"),Xfe=a("strong"),JTo=o("segformer"),YTo=o(" \u2014 "),eD=a("a"),KTo=o("SegformerFeatureExtractor"),ZTo=o(" (SegFormer model)"),e8o=l(),Pp=a("li"),zfe=a("strong"),o8o=o("speech_to_text"),r8o=o(" \u2014 "),oD=a("a"),t8o=o("Speech2TextFeatureExtractor"),a8o=o(" (Speech2Text model)"),n8o=l(),Bp=a("li"),Wfe=a("strong"),s8o=o("swin"),l8o=o(" \u2014 "),rD=a("a"),i8o=o("ViTFeatureExtractor"),d8o=o(" (Swin Transformer model)"),c8o=l(),Ip=a("li"),Qfe=a("strong"),f8o=o("swinv2"),m8o=o(" \u2014 "),tD=a("a"),g8o=o("ViTFeatureExtractor"),h8o=o(" (Swin Transformer V2 model)"),p8o=l(),Np=a("li"),Ufe=a("strong"),_8o=o("van"),u8o=o(" \u2014 "),aD=a("a"),b8o=o("ConvNextFeatureExtractor"),v8o=o(" (VAN model)"),F8o=l(),qp=a("li"),Hfe=a("strong"),T8o=o("videomae"),M8o=o(" \u2014 "),nD=a("a"),E8o=o("ViTFeatureExtractor"),C8o=o(" (VideoMAE model)"),w8o=l(),jp=a("li"),Jfe=a("strong"),A8o=o("vilt"),L8o=o(" \u2014 "),sD=a("a"),y8o=o("ViltFeatureExtractor"),x8o=o(" (ViLT model)"),$8o=l(),Dp=a("li"),Yfe=a("strong"),k8o=o("vit"),S8o=o(" \u2014 "),lD=a("a"),R8o=o("ViTFeatureExtractor"),P8o=o(" (ViT model)"),B8o=l(),Gp=a("li"),Kfe=a("strong"),I8o=o("vit_mae"),N8o=o(" \u2014 "),iD=a("a"),q8o=o("ViTFeatureExtractor"),j8o=o(" (ViTMAE model)"),D8o=l(),Op=a("li"),Zfe=a("strong"),G8o=o("wav2vec2"),O8o=o(" \u2014 "),dD=a("a"),V8o=o("Wav2Vec2FeatureExtractor"),X8o=o(" (Wav2Vec2 model)"),z8o=l(),Vp=a("li"),eme=a("strong"),W8o=o("wav2vec2-conformer"),Q8o=o(" \u2014 "),cD=a("a"),U8o=o("Wav2Vec2FeatureExtractor"),H8o=o(" (Wav2Vec2-Conformer model)"),J8o=l(),Xp=a("li"),ome=a("strong"),Y8o=o("yolos"),K8o=o(" \u2014 "),fD=a("a"),Z8o=o("YolosFeatureExtractor"),eMo=o(" (YOLOS model)"),oMo=l(),F(zp.$$.fragment),rMo=l(),F(Wp.$$.fragment),tMo=l(),Qp=a("div"),F(Iy.$$.fragment),aMo=l(),rme=a("p"),nMo=o("Register a new feature extractor for this class."),cUe=l(),ed=a("h2"),Up=a("a"),tme=a("span"),F(Ny.$$.fragment),sMo=l(),ame=a("span"),lMo=o("AutoProcessor"),fUe=l(),ko=a("div"),F(qy.$$.fragment),iMo=l(),jy=a("p"),dMo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mD=a("a"),cMo=o("AutoProcessor.from_pretrained()"),fMo=o(" class method."),mMo=l(),Dy=a("p"),gMo=o("This class cannot be instantiated directly using "),nme=a("code"),hMo=o("__init__()"),pMo=o(" (throws an error)."),_Mo=l(),Ye=a("div"),F(Gy.$$.fragment),uMo=l(),sme=a("p"),bMo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vMo=l(),od=a("p"),FMo=o("The processor class to instantiate is selected based on the "),lme=a("code"),TMo=o("model_type"),MMo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),EMo=o("pretrained_model_name_or_path"),CMo=o(" if possible):"),wMo=l(),ie=a("ul"),Hp=a("li"),dme=a("strong"),AMo=o("clip"),LMo=o(" \u2014 "),gD=a("a"),yMo=o("CLIPProcessor"),xMo=o(" (CLIP model)"),$Mo=l(),Jp=a("li"),cme=a("strong"),kMo=o("donut"),SMo=o(" \u2014 "),hD=a("a"),RMo=o("DonutProcessor"),PMo=o(" (Donut model)"),BMo=l(),Yp=a("li"),fme=a("strong"),IMo=o("flava"),NMo=o(" \u2014 "),pD=a("a"),qMo=o("FlavaProcessor"),jMo=o(" (FLAVA model)"),DMo=l(),Kp=a("li"),mme=a("strong"),GMo=o("groupvit"),OMo=o(" \u2014 "),_D=a("a"),VMo=o("CLIPProcessor"),XMo=o(" (GroupViT model)"),zMo=l(),Zp=a("li"),gme=a("strong"),WMo=o("layoutlmv2"),QMo=o(" \u2014 "),uD=a("a"),UMo=o("LayoutLMv2Processor"),HMo=o(" (LayoutLMv2 model)"),JMo=l(),e_=a("li"),hme=a("strong"),YMo=o("layoutlmv3"),KMo=o(" \u2014 "),bD=a("a"),ZMo=o("LayoutLMv3Processor"),eEo=o(" (LayoutLMv3 model)"),oEo=l(),o_=a("li"),pme=a("strong"),rEo=o("layoutxlm"),tEo=o(" \u2014 "),vD=a("a"),aEo=o("LayoutXLMProcessor"),nEo=o(" (LayoutXLM model)"),sEo=l(),r_=a("li"),_me=a("strong"),lEo=o("owlvit"),iEo=o(" \u2014 "),FD=a("a"),dEo=o("OwlViTProcessor"),cEo=o(" (OWL-ViT model)"),fEo=l(),t_=a("li"),ume=a("strong"),mEo=o("sew"),gEo=o(" \u2014 "),TD=a("a"),hEo=o("Wav2Vec2Processor"),pEo=o(" (SEW model)"),_Eo=l(),a_=a("li"),bme=a("strong"),uEo=o("sew-d"),bEo=o(" \u2014 "),MD=a("a"),vEo=o("Wav2Vec2Processor"),FEo=o(" (SEW-D model)"),TEo=l(),n_=a("li"),vme=a("strong"),MEo=o("speech_to_text"),EEo=o(" \u2014 "),ED=a("a"),CEo=o("Speech2TextProcessor"),wEo=o(" (Speech2Text model)"),AEo=l(),s_=a("li"),Fme=a("strong"),LEo=o("speech_to_text_2"),yEo=o(" \u2014 "),CD=a("a"),xEo=o("Speech2Text2Processor"),$Eo=o(" (Speech2Text2 model)"),kEo=l(),l_=a("li"),Tme=a("strong"),SEo=o("trocr"),REo=o(" \u2014 "),wD=a("a"),PEo=o("TrOCRProcessor"),BEo=o(" (TrOCR model)"),IEo=l(),i_=a("li"),Mme=a("strong"),NEo=o("unispeech"),qEo=o(" \u2014 "),AD=a("a"),jEo=o("Wav2Vec2Processor"),DEo=o(" (UniSpeech model)"),GEo=l(),d_=a("li"),Eme=a("strong"),OEo=o("unispeech-sat"),VEo=o(" \u2014 "),LD=a("a"),XEo=o("Wav2Vec2Processor"),zEo=o(" (UniSpeechSat model)"),WEo=l(),c_=a("li"),Cme=a("strong"),QEo=o("vilt"),UEo=o(" \u2014 "),yD=a("a"),HEo=o("ViltProcessor"),JEo=o(" (ViLT model)"),YEo=l(),f_=a("li"),wme=a("strong"),KEo=o("vision-text-dual-encoder"),ZEo=o(" \u2014 "),xD=a("a"),e4o=o("VisionTextDualEncoderProcessor"),o4o=o(" (VisionTextDualEncoder model)"),r4o=l(),m_=a("li"),Ame=a("strong"),t4o=o("wav2vec2"),a4o=o(" \u2014 "),$D=a("a"),n4o=o("Wav2Vec2Processor"),s4o=o(" (Wav2Vec2 model)"),l4o=l(),g_=a("li"),Lme=a("strong"),i4o=o("wav2vec2-conformer"),d4o=o(" \u2014 "),kD=a("a"),c4o=o("Wav2Vec2Processor"),f4o=o(" (Wav2Vec2-Conformer model)"),m4o=l(),h_=a("li"),yme=a("strong"),g4o=o("wavlm"),h4o=o(" \u2014 "),SD=a("a"),p4o=o("Wav2Vec2Processor"),_4o=o(" (WavLM model)"),u4o=l(),F(p_.$$.fragment),b4o=l(),F(__.$$.fragment),v4o=l(),u_=a("div"),F(Oy.$$.fragment),F4o=l(),xme=a("p"),T4o=o("Register a new processor for this class."),mUe=l(),rd=a("h2"),b_=a("a"),$me=a("span"),F(Vy.$$.fragment),M4o=l(),kme=a("span"),E4o=o("AutoModel"),gUe=l(),So=a("div"),F(Xy.$$.fragment),C4o=l(),td=a("p"),w4o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RD=a("a"),A4o=o("from_pretrained()"),L4o=o(" class method or the "),PD=a("a"),y4o=o("from_config()"),x4o=o(` class
method.`),$4o=l(),zy=a("p"),k4o=o("This class cannot be instantiated directly using "),Sme=a("code"),S4o=o("__init__()"),R4o=o(" (throws an error)."),P4o=l(),mt=a("div"),F(Wy.$$.fragment),B4o=l(),Rme=a("p"),I4o=o("Instantiates one of the base model classes of the library from a configuration."),N4o=l(),ad=a("p"),q4o=o(`Note:
Loading a model from its configuration file does `),Pme=a("strong"),j4o=o("not"),D4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),G4o=o("from_pretrained()"),O4o=o(" to load the model weights."),V4o=l(),F(v_.$$.fragment),X4o=l(),Ke=a("div"),F(Qy.$$.fragment),z4o=l(),Bme=a("p"),W4o=o("Instantiate one of the base model classes of the library from a pretrained model."),Q4o=l(),Va=a("p"),U4o=o("The model class to instantiate is selected based on the "),Ime=a("code"),H4o=o("model_type"),J4o=o(` property of the config object (either
passed as an argument or loaded from `),Nme=a("code"),Y4o=o("pretrained_model_name_or_path"),K4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),Z4o=o("pretrained_model_name_or_path"),eCo=o(":"),oCo=l(),y=a("ul"),F_=a("li"),jme=a("strong"),rCo=o("albert"),tCo=o(" \u2014 "),ID=a("a"),aCo=o("AlbertModel"),nCo=o(" (ALBERT model)"),sCo=l(),T_=a("li"),Dme=a("strong"),lCo=o("bart"),iCo=o(" \u2014 "),ND=a("a"),dCo=o("BartModel"),cCo=o(" (BART model)"),fCo=l(),M_=a("li"),Gme=a("strong"),mCo=o("beit"),gCo=o(" \u2014 "),qD=a("a"),hCo=o("BeitModel"),pCo=o(" (BEiT model)"),_Co=l(),E_=a("li"),Ome=a("strong"),uCo=o("bert"),bCo=o(" \u2014 "),jD=a("a"),vCo=o("BertModel"),FCo=o(" (BERT model)"),TCo=l(),C_=a("li"),Vme=a("strong"),MCo=o("bert-generation"),ECo=o(" \u2014 "),DD=a("a"),CCo=o("BertGenerationEncoder"),wCo=o(" (Bert Generation model)"),ACo=l(),w_=a("li"),Xme=a("strong"),LCo=o("big_bird"),yCo=o(" \u2014 "),GD=a("a"),xCo=o("BigBirdModel"),$Co=o(" (BigBird model)"),kCo=l(),A_=a("li"),zme=a("strong"),SCo=o("bigbird_pegasus"),RCo=o(" \u2014 "),OD=a("a"),PCo=o("BigBirdPegasusModel"),BCo=o(" (BigBird-Pegasus model)"),ICo=l(),L_=a("li"),Wme=a("strong"),NCo=o("blenderbot"),qCo=o(" \u2014 "),VD=a("a"),jCo=o("BlenderbotModel"),DCo=o(" (Blenderbot model)"),GCo=l(),y_=a("li"),Qme=a("strong"),OCo=o("blenderbot-small"),VCo=o(" \u2014 "),XD=a("a"),XCo=o("BlenderbotSmallModel"),zCo=o(" (BlenderbotSmall model)"),WCo=l(),x_=a("li"),Ume=a("strong"),QCo=o("bloom"),UCo=o(" \u2014 "),zD=a("a"),HCo=o("BloomModel"),JCo=o(" (BLOOM model)"),YCo=l(),$_=a("li"),Hme=a("strong"),KCo=o("camembert"),ZCo=o(" \u2014 "),WD=a("a"),e3o=o("CamembertModel"),o3o=o(" (CamemBERT model)"),r3o=l(),k_=a("li"),Jme=a("strong"),t3o=o("canine"),a3o=o(" \u2014 "),QD=a("a"),n3o=o("CanineModel"),s3o=o(" (CANINE model)"),l3o=l(),S_=a("li"),Yme=a("strong"),i3o=o("clip"),d3o=o(" \u2014 "),UD=a("a"),c3o=o("CLIPModel"),f3o=o(" (CLIP model)"),m3o=l(),R_=a("li"),Kme=a("strong"),g3o=o("codegen"),h3o=o(" \u2014 "),HD=a("a"),p3o=o("CodeGenModel"),_3o=o(" (CodeGen model)"),u3o=l(),P_=a("li"),Zme=a("strong"),b3o=o("convbert"),v3o=o(" \u2014 "),JD=a("a"),F3o=o("ConvBertModel"),T3o=o(" (ConvBERT model)"),M3o=l(),B_=a("li"),ege=a("strong"),E3o=o("convnext"),C3o=o(" \u2014 "),YD=a("a"),w3o=o("ConvNextModel"),A3o=o(" (ConvNeXT model)"),L3o=l(),I_=a("li"),oge=a("strong"),y3o=o("ctrl"),x3o=o(" \u2014 "),KD=a("a"),$3o=o("CTRLModel"),k3o=o(" (CTRL model)"),S3o=l(),N_=a("li"),rge=a("strong"),R3o=o("cvt"),P3o=o(" \u2014 "),ZD=a("a"),B3o=o("CvtModel"),I3o=o(" (CvT model)"),N3o=l(),q_=a("li"),tge=a("strong"),q3o=o("data2vec-audio"),j3o=o(" \u2014 "),eG=a("a"),D3o=o("Data2VecAudioModel"),G3o=o(" (Data2VecAudio model)"),O3o=l(),j_=a("li"),age=a("strong"),V3o=o("data2vec-text"),X3o=o(" \u2014 "),oG=a("a"),z3o=o("Data2VecTextModel"),W3o=o(" (Data2VecText model)"),Q3o=l(),D_=a("li"),nge=a("strong"),U3o=o("data2vec-vision"),H3o=o(" \u2014 "),rG=a("a"),J3o=o("Data2VecVisionModel"),Y3o=o(" (Data2VecVision model)"),K3o=l(),G_=a("li"),sge=a("strong"),Z3o=o("deberta"),e0o=o(" \u2014 "),tG=a("a"),o0o=o("DebertaModel"),r0o=o(" (DeBERTa model)"),t0o=l(),O_=a("li"),lge=a("strong"),a0o=o("deberta-v2"),n0o=o(" \u2014 "),aG=a("a"),s0o=o("DebertaV2Model"),l0o=o(" (DeBERTa-v2 model)"),i0o=l(),V_=a("li"),ige=a("strong"),d0o=o("decision_transformer"),c0o=o(" \u2014 "),nG=a("a"),f0o=o("DecisionTransformerModel"),m0o=o(" (Decision Transformer model)"),g0o=l(),X_=a("li"),dge=a("strong"),h0o=o("deit"),p0o=o(" \u2014 "),sG=a("a"),_0o=o("DeiTModel"),u0o=o(" (DeiT model)"),b0o=l(),z_=a("li"),cge=a("strong"),v0o=o("detr"),F0o=o(" \u2014 "),lG=a("a"),T0o=o("DetrModel"),M0o=o(" (DETR model)"),E0o=l(),W_=a("li"),fge=a("strong"),C0o=o("distilbert"),w0o=o(" \u2014 "),iG=a("a"),A0o=o("DistilBertModel"),L0o=o(" (DistilBERT model)"),y0o=l(),Q_=a("li"),mge=a("strong"),x0o=o("donut-swin"),$0o=o(" \u2014 "),dG=a("a"),k0o=o("DonutSwinModel"),S0o=o(" (DonutSwin model)"),R0o=l(),U_=a("li"),gge=a("strong"),P0o=o("dpr"),B0o=o(" \u2014 "),cG=a("a"),I0o=o("DPRQuestionEncoder"),N0o=o(" (DPR model)"),q0o=l(),H_=a("li"),hge=a("strong"),j0o=o("dpt"),D0o=o(" \u2014 "),fG=a("a"),G0o=o("DPTModel"),O0o=o(" (DPT model)"),V0o=l(),J_=a("li"),pge=a("strong"),X0o=o("electra"),z0o=o(" \u2014 "),mG=a("a"),W0o=o("ElectraModel"),Q0o=o(" (ELECTRA model)"),U0o=l(),Y_=a("li"),_ge=a("strong"),H0o=o("flaubert"),J0o=o(" \u2014 "),gG=a("a"),Y0o=o("FlaubertModel"),K0o=o(" (FlauBERT model)"),Z0o=l(),K_=a("li"),uge=a("strong"),ewo=o("flava"),owo=o(" \u2014 "),hG=a("a"),rwo=o("FlavaModel"),two=o(" (FLAVA model)"),awo=l(),Z_=a("li"),bge=a("strong"),nwo=o("fnet"),swo=o(" \u2014 "),pG=a("a"),lwo=o("FNetModel"),iwo=o(" (FNet model)"),dwo=l(),eu=a("li"),vge=a("strong"),cwo=o("fsmt"),fwo=o(" \u2014 "),_G=a("a"),mwo=o("FSMTModel"),gwo=o(" (FairSeq Machine-Translation model)"),hwo=l(),nl=a("li"),Fge=a("strong"),pwo=o("funnel"),_wo=o(" \u2014 "),uG=a("a"),uwo=o("FunnelModel"),bwo=o(" or "),bG=a("a"),vwo=o("FunnelBaseModel"),Fwo=o(" (Funnel Transformer model)"),Two=l(),ou=a("li"),Tge=a("strong"),Mwo=o("glpn"),Ewo=o(" \u2014 "),vG=a("a"),Cwo=o("GLPNModel"),wwo=o(" (GLPN model)"),Awo=l(),ru=a("li"),Mge=a("strong"),Lwo=o("gpt2"),ywo=o(" \u2014 "),FG=a("a"),xwo=o("GPT2Model"),$wo=o(" (OpenAI GPT-2 model)"),kwo=l(),tu=a("li"),Ege=a("strong"),Swo=o("gpt_neo"),Rwo=o(" \u2014 "),TG=a("a"),Pwo=o("GPTNeoModel"),Bwo=o(" (GPT Neo model)"),Iwo=l(),au=a("li"),Cge=a("strong"),Nwo=o("gpt_neox"),qwo=o(" \u2014 "),MG=a("a"),jwo=o("GPTNeoXModel"),Dwo=o(" (GPT NeoX model)"),Gwo=l(),nu=a("li"),wge=a("strong"),Owo=o("gptj"),Vwo=o(" \u2014 "),EG=a("a"),Xwo=o("GPTJModel"),zwo=o(" (GPT-J model)"),Wwo=l(),su=a("li"),Age=a("strong"),Qwo=o("groupvit"),Uwo=o(" \u2014 "),CG=a("a"),Hwo=o("GroupViTModel"),Jwo=o(" (GroupViT model)"),Ywo=l(),lu=a("li"),Lge=a("strong"),Kwo=o("hubert"),Zwo=o(" \u2014 "),wG=a("a"),e6o=o("HubertModel"),o6o=o(" (Hubert model)"),r6o=l(),iu=a("li"),yge=a("strong"),t6o=o("ibert"),a6o=o(" \u2014 "),AG=a("a"),n6o=o("IBertModel"),s6o=o(" (I-BERT model)"),l6o=l(),du=a("li"),xge=a("strong"),i6o=o("imagegpt"),d6o=o(" \u2014 "),LG=a("a"),c6o=o("ImageGPTModel"),f6o=o(" (ImageGPT model)"),m6o=l(),cu=a("li"),$ge=a("strong"),g6o=o("layoutlm"),h6o=o(" \u2014 "),yG=a("a"),p6o=o("LayoutLMModel"),_6o=o(" (LayoutLM model)"),u6o=l(),fu=a("li"),kge=a("strong"),b6o=o("layoutlmv2"),v6o=o(" \u2014 "),xG=a("a"),F6o=o("LayoutLMv2Model"),T6o=o(" (LayoutLMv2 model)"),M6o=l(),mu=a("li"),Sge=a("strong"),E6o=o("layoutlmv3"),C6o=o(" \u2014 "),$G=a("a"),w6o=o("LayoutLMv3Model"),A6o=o(" (LayoutLMv3 model)"),L6o=l(),gu=a("li"),Rge=a("strong"),y6o=o("led"),x6o=o(" \u2014 "),kG=a("a"),$6o=o("LEDModel"),k6o=o(" (LED model)"),S6o=l(),hu=a("li"),Pge=a("strong"),R6o=o("levit"),P6o=o(" \u2014 "),SG=a("a"),B6o=o("LevitModel"),I6o=o(" (LeViT model)"),N6o=l(),pu=a("li"),Bge=a("strong"),q6o=o("longformer"),j6o=o(" \u2014 "),RG=a("a"),D6o=o("LongformerModel"),G6o=o(" (Longformer model)"),O6o=l(),_u=a("li"),Ige=a("strong"),V6o=o("longt5"),X6o=o(" \u2014 "),PG=a("a"),z6o=o("LongT5Model"),W6o=o(" (LongT5 model)"),Q6o=l(),uu=a("li"),Nge=a("strong"),U6o=o("luke"),H6o=o(" \u2014 "),BG=a("a"),J6o=o("LukeModel"),Y6o=o(" (LUKE model)"),K6o=l(),bu=a("li"),qge=a("strong"),Z6o=o("lxmert"),eAo=o(" \u2014 "),IG=a("a"),oAo=o("LxmertModel"),rAo=o(" (LXMERT model)"),tAo=l(),vu=a("li"),jge=a("strong"),aAo=o("m2m_100"),nAo=o(" \u2014 "),NG=a("a"),sAo=o("M2M100Model"),lAo=o(" (M2M100 model)"),iAo=l(),Fu=a("li"),Dge=a("strong"),dAo=o("marian"),cAo=o(" \u2014 "),qG=a("a"),fAo=o("MarianModel"),mAo=o(" (Marian model)"),gAo=l(),Tu=a("li"),Gge=a("strong"),hAo=o("maskformer"),pAo=o(" \u2014 "),jG=a("a"),_Ao=o("MaskFormerModel"),uAo=o(" (MaskFormer model)"),bAo=l(),Mu=a("li"),Oge=a("strong"),vAo=o("mbart"),FAo=o(" \u2014 "),DG=a("a"),TAo=o("MBartModel"),MAo=o(" (mBART model)"),EAo=l(),Eu=a("li"),Vge=a("strong"),CAo=o("mctct"),wAo=o(" \u2014 "),GG=a("a"),AAo=o("MCTCTModel"),LAo=o(" (M-CTC-T model)"),yAo=l(),Cu=a("li"),Xge=a("strong"),xAo=o("megatron-bert"),$Ao=o(" \u2014 "),OG=a("a"),kAo=o("MegatronBertModel"),SAo=o(" (Megatron-BERT model)"),RAo=l(),wu=a("li"),zge=a("strong"),PAo=o("mobilebert"),BAo=o(" \u2014 "),VG=a("a"),IAo=o("MobileBertModel"),NAo=o(" (MobileBERT model)"),qAo=l(),Au=a("li"),Wge=a("strong"),jAo=o("mobilevit"),DAo=o(" \u2014 "),XG=a("a"),GAo=o("MobileViTModel"),OAo=o(" (MobileViT model)"),VAo=l(),Lu=a("li"),Qge=a("strong"),XAo=o("mpnet"),zAo=o(" \u2014 "),zG=a("a"),WAo=o("MPNetModel"),QAo=o(" (MPNet model)"),UAo=l(),yu=a("li"),Uge=a("strong"),HAo=o("mt5"),JAo=o(" \u2014 "),WG=a("a"),YAo=o("MT5Model"),KAo=o(" (MT5 model)"),ZAo=l(),xu=a("li"),Hge=a("strong"),e7o=o("mvp"),o7o=o(" \u2014 "),QG=a("a"),r7o=o("MvpModel"),t7o=o(" (MVP model)"),a7o=l(),$u=a("li"),Jge=a("strong"),n7o=o("nezha"),s7o=o(" \u2014 "),UG=a("a"),l7o=o("NezhaModel"),i7o=o(" (Nezha model)"),d7o=l(),ku=a("li"),Yge=a("strong"),c7o=o("nllb"),f7o=o(" \u2014 "),HG=a("a"),m7o=o("M2M100Model"),g7o=o(" (NLLB model)"),h7o=l(),Su=a("li"),Kge=a("strong"),p7o=o("nystromformer"),_7o=o(" \u2014 "),JG=a("a"),u7o=o("NystromformerModel"),b7o=o(" (Nystr\xF6mformer model)"),v7o=l(),Ru=a("li"),Zge=a("strong"),F7o=o("openai-gpt"),T7o=o(" \u2014 "),YG=a("a"),M7o=o("OpenAIGPTModel"),E7o=o(" (OpenAI GPT model)"),C7o=l(),Pu=a("li"),ehe=a("strong"),w7o=o("opt"),A7o=o(" \u2014 "),KG=a("a"),L7o=o("OPTModel"),y7o=o(" (OPT model)"),x7o=l(),Bu=a("li"),ohe=a("strong"),$7o=o("owlvit"),k7o=o(" \u2014 "),ZG=a("a"),S7o=o("OwlViTModel"),R7o=o(" (OWL-ViT model)"),P7o=l(),Iu=a("li"),rhe=a("strong"),B7o=o("pegasus"),I7o=o(" \u2014 "),eO=a("a"),N7o=o("PegasusModel"),q7o=o(" (Pegasus model)"),j7o=l(),Nu=a("li"),the=a("strong"),D7o=o("perceiver"),G7o=o(" \u2014 "),oO=a("a"),O7o=o("PerceiverModel"),V7o=o(" (Perceiver model)"),X7o=l(),qu=a("li"),ahe=a("strong"),z7o=o("plbart"),W7o=o(" \u2014 "),rO=a("a"),Q7o=o("PLBartModel"),U7o=o(" (PLBart model)"),H7o=l(),ju=a("li"),nhe=a("strong"),J7o=o("poolformer"),Y7o=o(" \u2014 "),tO=a("a"),K7o=o("PoolFormerModel"),Z7o=o(" (PoolFormer model)"),eLo=l(),Du=a("li"),she=a("strong"),oLo=o("prophetnet"),rLo=o(" \u2014 "),aO=a("a"),tLo=o("ProphetNetModel"),aLo=o(" (ProphetNet model)"),nLo=l(),Gu=a("li"),lhe=a("strong"),sLo=o("qdqbert"),lLo=o(" \u2014 "),nO=a("a"),iLo=o("QDQBertModel"),dLo=o(" (QDQBert model)"),cLo=l(),Ou=a("li"),ihe=a("strong"),fLo=o("reformer"),mLo=o(" \u2014 "),sO=a("a"),gLo=o("ReformerModel"),hLo=o(" (Reformer model)"),pLo=l(),Vu=a("li"),dhe=a("strong"),_Lo=o("regnet"),uLo=o(" \u2014 "),lO=a("a"),bLo=o("RegNetModel"),vLo=o(" (RegNet model)"),FLo=l(),Xu=a("li"),che=a("strong"),TLo=o("rembert"),MLo=o(" \u2014 "),iO=a("a"),ELo=o("RemBertModel"),CLo=o(" (RemBERT model)"),wLo=l(),zu=a("li"),fhe=a("strong"),ALo=o("resnet"),LLo=o(" \u2014 "),dO=a("a"),yLo=o("ResNetModel"),xLo=o(" (ResNet model)"),$Lo=l(),Wu=a("li"),mhe=a("strong"),kLo=o("retribert"),SLo=o(" \u2014 "),cO=a("a"),RLo=o("RetriBertModel"),PLo=o(" (RetriBERT model)"),BLo=l(),Qu=a("li"),ghe=a("strong"),ILo=o("roberta"),NLo=o(" \u2014 "),fO=a("a"),qLo=o("RobertaModel"),jLo=o(" (RoBERTa model)"),DLo=l(),Uu=a("li"),hhe=a("strong"),GLo=o("roformer"),OLo=o(" \u2014 "),mO=a("a"),VLo=o("RoFormerModel"),XLo=o(" (RoFormer model)"),zLo=l(),Hu=a("li"),phe=a("strong"),WLo=o("segformer"),QLo=o(" \u2014 "),gO=a("a"),ULo=o("SegformerModel"),HLo=o(" (SegFormer model)"),JLo=l(),Ju=a("li"),_he=a("strong"),YLo=o("sew"),KLo=o(" \u2014 "),hO=a("a"),ZLo=o("SEWModel"),eyo=o(" (SEW model)"),oyo=l(),Yu=a("li"),uhe=a("strong"),ryo=o("sew-d"),tyo=o(" \u2014 "),pO=a("a"),ayo=o("SEWDModel"),nyo=o(" (SEW-D model)"),syo=l(),Ku=a("li"),bhe=a("strong"),lyo=o("speech_to_text"),iyo=o(" \u2014 "),_O=a("a"),dyo=o("Speech2TextModel"),cyo=o(" (Speech2Text model)"),fyo=l(),Zu=a("li"),vhe=a("strong"),myo=o("splinter"),gyo=o(" \u2014 "),uO=a("a"),hyo=o("SplinterModel"),pyo=o(" (Splinter model)"),_yo=l(),e5=a("li"),Fhe=a("strong"),uyo=o("squeezebert"),byo=o(" \u2014 "),bO=a("a"),vyo=o("SqueezeBertModel"),Fyo=o(" (SqueezeBERT model)"),Tyo=l(),o5=a("li"),The=a("strong"),Myo=o("swin"),Eyo=o(" \u2014 "),vO=a("a"),Cyo=o("SwinModel"),wyo=o(" (Swin Transformer model)"),Ayo=l(),r5=a("li"),Mhe=a("strong"),Lyo=o("swinv2"),yyo=o(" \u2014 "),FO=a("a"),xyo=o("Swinv2Model"),$yo=o(" (Swin Transformer V2 model)"),kyo=l(),t5=a("li"),Ehe=a("strong"),Syo=o("t5"),Ryo=o(" \u2014 "),TO=a("a"),Pyo=o("T5Model"),Byo=o(" (T5 model)"),Iyo=l(),a5=a("li"),Che=a("strong"),Nyo=o("tapas"),qyo=o(" \u2014 "),MO=a("a"),jyo=o("TapasModel"),Dyo=o(" (TAPAS model)"),Gyo=l(),n5=a("li"),whe=a("strong"),Oyo=o("trajectory_transformer"),Vyo=o(" \u2014 "),EO=a("a"),Xyo=o("TrajectoryTransformerModel"),zyo=o(" (Trajectory Transformer model)"),Wyo=l(),s5=a("li"),Ahe=a("strong"),Qyo=o("transfo-xl"),Uyo=o(" \u2014 "),CO=a("a"),Hyo=o("TransfoXLModel"),Jyo=o(" (Transformer-XL model)"),Yyo=l(),l5=a("li"),Lhe=a("strong"),Kyo=o("unispeech"),Zyo=o(" \u2014 "),wO=a("a"),e9o=o("UniSpeechModel"),o9o=o(" (UniSpeech model)"),r9o=l(),i5=a("li"),yhe=a("strong"),t9o=o("unispeech-sat"),a9o=o(" \u2014 "),AO=a("a"),n9o=o("UniSpeechSatModel"),s9o=o(" (UniSpeechSat model)"),l9o=l(),d5=a("li"),xhe=a("strong"),i9o=o("van"),d9o=o(" \u2014 "),LO=a("a"),c9o=o("VanModel"),f9o=o(" (VAN model)"),m9o=l(),c5=a("li"),$he=a("strong"),g9o=o("videomae"),h9o=o(" \u2014 "),yO=a("a"),p9o=o("VideoMAEModel"),_9o=o(" (VideoMAE model)"),u9o=l(),f5=a("li"),khe=a("strong"),b9o=o("vilt"),v9o=o(" \u2014 "),xO=a("a"),F9o=o("ViltModel"),T9o=o(" (ViLT model)"),M9o=l(),m5=a("li"),She=a("strong"),E9o=o("vision-text-dual-encoder"),C9o=o(" \u2014 "),$O=a("a"),w9o=o("VisionTextDualEncoderModel"),A9o=o(" (VisionTextDualEncoder model)"),L9o=l(),g5=a("li"),Rhe=a("strong"),y9o=o("visual_bert"),x9o=o(" \u2014 "),kO=a("a"),$9o=o("VisualBertModel"),k9o=o(" (VisualBERT model)"),S9o=l(),h5=a("li"),Phe=a("strong"),R9o=o("vit"),P9o=o(" \u2014 "),SO=a("a"),B9o=o("ViTModel"),I9o=o(" (ViT model)"),N9o=l(),p5=a("li"),Bhe=a("strong"),q9o=o("vit_mae"),j9o=o(" \u2014 "),RO=a("a"),D9o=o("ViTMAEModel"),G9o=o(" (ViTMAE model)"),O9o=l(),_5=a("li"),Ihe=a("strong"),V9o=o("wav2vec2"),X9o=o(" \u2014 "),PO=a("a"),z9o=o("Wav2Vec2Model"),W9o=o(" (Wav2Vec2 model)"),Q9o=l(),u5=a("li"),Nhe=a("strong"),U9o=o("wav2vec2-conformer"),H9o=o(" \u2014 "),BO=a("a"),J9o=o("Wav2Vec2ConformerModel"),Y9o=o(" (Wav2Vec2-Conformer model)"),K9o=l(),b5=a("li"),qhe=a("strong"),Z9o=o("wavlm"),exo=o(" \u2014 "),IO=a("a"),oxo=o("WavLMModel"),rxo=o(" (WavLM model)"),txo=l(),v5=a("li"),jhe=a("strong"),axo=o("xglm"),nxo=o(" \u2014 "),NO=a("a"),sxo=o("XGLMModel"),lxo=o(" (XGLM model)"),ixo=l(),F5=a("li"),Dhe=a("strong"),dxo=o("xlm"),cxo=o(" \u2014 "),qO=a("a"),fxo=o("XLMModel"),mxo=o(" (XLM model)"),gxo=l(),T5=a("li"),Ghe=a("strong"),hxo=o("xlm-prophetnet"),pxo=o(" \u2014 "),jO=a("a"),_xo=o("XLMProphetNetModel"),uxo=o(" (XLM-ProphetNet model)"),bxo=l(),M5=a("li"),Ohe=a("strong"),vxo=o("xlm-roberta"),Fxo=o(" \u2014 "),DO=a("a"),Txo=o("XLMRobertaModel"),Mxo=o(" (XLM-RoBERTa model)"),Exo=l(),E5=a("li"),Vhe=a("strong"),Cxo=o("xlm-roberta-xl"),wxo=o(" \u2014 "),GO=a("a"),Axo=o("XLMRobertaXLModel"),Lxo=o(" (XLM-RoBERTa-XL model)"),yxo=l(),C5=a("li"),Xhe=a("strong"),xxo=o("xlnet"),$xo=o(" \u2014 "),OO=a("a"),kxo=o("XLNetModel"),Sxo=o(" (XLNet model)"),Rxo=l(),w5=a("li"),zhe=a("strong"),Pxo=o("yolos"),Bxo=o(" \u2014 "),VO=a("a"),Ixo=o("YolosModel"),Nxo=o(" (YOLOS model)"),qxo=l(),A5=a("li"),Whe=a("strong"),jxo=o("yoso"),Dxo=o(" \u2014 "),XO=a("a"),Gxo=o("YosoModel"),Oxo=o(" (YOSO model)"),Vxo=l(),L5=a("p"),Xxo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),zxo=o("model.eval()"),Wxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=a("code"),Qxo=o("model.train()"),Uxo=l(),F(y5.$$.fragment),hUe=l(),nd=a("h2"),x5=a("a"),Hhe=a("span"),F(Uy.$$.fragment),Hxo=l(),Jhe=a("span"),Jxo=o("AutoModelForPreTraining"),pUe=l(),Ro=a("div"),F(Hy.$$.fragment),Yxo=l(),sd=a("p"),Kxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zO=a("a"),Zxo=o("from_pretrained()"),e$o=o(" class method or the "),WO=a("a"),o$o=o("from_config()"),r$o=o(` class
method.`),t$o=l(),Jy=a("p"),a$o=o("This class cannot be instantiated directly using "),Yhe=a("code"),n$o=o("__init__()"),s$o=o(" (throws an error)."),l$o=l(),gt=a("div"),F(Yy.$$.fragment),i$o=l(),Khe=a("p"),d$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c$o=l(),ld=a("p"),f$o=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),m$o=o("not"),g$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),h$o=o("from_pretrained()"),p$o=o(" to load the model weights."),_$o=l(),F($5.$$.fragment),u$o=l(),Ze=a("div"),F(Ky.$$.fragment),b$o=l(),epe=a("p"),v$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F$o=l(),Xa=a("p"),T$o=o("The model class to instantiate is selected based on the "),ope=a("code"),M$o=o("model_type"),E$o=o(` property of the config object (either
passed as an argument or loaded from `),rpe=a("code"),C$o=o("pretrained_model_name_or_path"),w$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=a("code"),A$o=o("pretrained_model_name_or_path"),L$o=o(":"),y$o=l(),G=a("ul"),k5=a("li"),ape=a("strong"),x$o=o("albert"),$$o=o(" \u2014 "),UO=a("a"),k$o=o("AlbertForPreTraining"),S$o=o(" (ALBERT model)"),R$o=l(),S5=a("li"),npe=a("strong"),P$o=o("bart"),B$o=o(" \u2014 "),HO=a("a"),I$o=o("BartForConditionalGeneration"),N$o=o(" (BART model)"),q$o=l(),R5=a("li"),spe=a("strong"),j$o=o("bert"),D$o=o(" \u2014 "),JO=a("a"),G$o=o("BertForPreTraining"),O$o=o(" (BERT model)"),V$o=l(),P5=a("li"),lpe=a("strong"),X$o=o("big_bird"),z$o=o(" \u2014 "),YO=a("a"),W$o=o("BigBirdForPreTraining"),Q$o=o(" (BigBird model)"),U$o=l(),B5=a("li"),ipe=a("strong"),H$o=o("bloom"),J$o=o(" \u2014 "),KO=a("a"),Y$o=o("BloomForCausalLM"),K$o=o(" (BLOOM model)"),Z$o=l(),I5=a("li"),dpe=a("strong"),eko=o("camembert"),oko=o(" \u2014 "),ZO=a("a"),rko=o("CamembertForMaskedLM"),tko=o(" (CamemBERT model)"),ako=l(),N5=a("li"),cpe=a("strong"),nko=o("ctrl"),sko=o(" \u2014 "),eV=a("a"),lko=o("CTRLLMHeadModel"),iko=o(" (CTRL model)"),dko=l(),q5=a("li"),fpe=a("strong"),cko=o("data2vec-text"),fko=o(" \u2014 "),oV=a("a"),mko=o("Data2VecTextForMaskedLM"),gko=o(" (Data2VecText model)"),hko=l(),j5=a("li"),mpe=a("strong"),pko=o("deberta"),_ko=o(" \u2014 "),rV=a("a"),uko=o("DebertaForMaskedLM"),bko=o(" (DeBERTa model)"),vko=l(),D5=a("li"),gpe=a("strong"),Fko=o("deberta-v2"),Tko=o(" \u2014 "),tV=a("a"),Mko=o("DebertaV2ForMaskedLM"),Eko=o(" (DeBERTa-v2 model)"),Cko=l(),G5=a("li"),hpe=a("strong"),wko=o("distilbert"),Ako=o(" \u2014 "),aV=a("a"),Lko=o("DistilBertForMaskedLM"),yko=o(" (DistilBERT model)"),xko=l(),O5=a("li"),ppe=a("strong"),$ko=o("electra"),kko=o(" \u2014 "),nV=a("a"),Sko=o("ElectraForPreTraining"),Rko=o(" (ELECTRA model)"),Pko=l(),V5=a("li"),_pe=a("strong"),Bko=o("flaubert"),Iko=o(" \u2014 "),sV=a("a"),Nko=o("FlaubertWithLMHeadModel"),qko=o(" (FlauBERT model)"),jko=l(),X5=a("li"),upe=a("strong"),Dko=o("flava"),Gko=o(" \u2014 "),lV=a("a"),Oko=o("FlavaForPreTraining"),Vko=o(" (FLAVA model)"),Xko=l(),z5=a("li"),bpe=a("strong"),zko=o("fnet"),Wko=o(" \u2014 "),iV=a("a"),Qko=o("FNetForPreTraining"),Uko=o(" (FNet model)"),Hko=l(),W5=a("li"),vpe=a("strong"),Jko=o("fsmt"),Yko=o(" \u2014 "),dV=a("a"),Kko=o("FSMTForConditionalGeneration"),Zko=o(" (FairSeq Machine-Translation model)"),eSo=l(),Q5=a("li"),Fpe=a("strong"),oSo=o("funnel"),rSo=o(" \u2014 "),cV=a("a"),tSo=o("FunnelForPreTraining"),aSo=o(" (Funnel Transformer model)"),nSo=l(),U5=a("li"),Tpe=a("strong"),sSo=o("gpt2"),lSo=o(" \u2014 "),fV=a("a"),iSo=o("GPT2LMHeadModel"),dSo=o(" (OpenAI GPT-2 model)"),cSo=l(),H5=a("li"),Mpe=a("strong"),fSo=o("ibert"),mSo=o(" \u2014 "),mV=a("a"),gSo=o("IBertForMaskedLM"),hSo=o(" (I-BERT model)"),pSo=l(),J5=a("li"),Epe=a("strong"),_So=o("layoutlm"),uSo=o(" \u2014 "),gV=a("a"),bSo=o("LayoutLMForMaskedLM"),vSo=o(" (LayoutLM model)"),FSo=l(),Y5=a("li"),Cpe=a("strong"),TSo=o("longformer"),MSo=o(" \u2014 "),hV=a("a"),ESo=o("LongformerForMaskedLM"),CSo=o(" (Longformer model)"),wSo=l(),K5=a("li"),wpe=a("strong"),ASo=o("luke"),LSo=o(" \u2014 "),pV=a("a"),ySo=o("LukeForMaskedLM"),xSo=o(" (LUKE model)"),$So=l(),Z5=a("li"),Ape=a("strong"),kSo=o("lxmert"),SSo=o(" \u2014 "),_V=a("a"),RSo=o("LxmertForPreTraining"),PSo=o(" (LXMERT model)"),BSo=l(),e1=a("li"),Lpe=a("strong"),ISo=o("megatron-bert"),NSo=o(" \u2014 "),uV=a("a"),qSo=o("MegatronBertForPreTraining"),jSo=o(" (Megatron-BERT model)"),DSo=l(),o1=a("li"),ype=a("strong"),GSo=o("mobilebert"),OSo=o(" \u2014 "),bV=a("a"),VSo=o("MobileBertForPreTraining"),XSo=o(" (MobileBERT model)"),zSo=l(),r1=a("li"),xpe=a("strong"),WSo=o("mpnet"),QSo=o(" \u2014 "),vV=a("a"),USo=o("MPNetForMaskedLM"),HSo=o(" (MPNet model)"),JSo=l(),t1=a("li"),$pe=a("strong"),YSo=o("mvp"),KSo=o(" \u2014 "),FV=a("a"),ZSo=o("MvpForConditionalGeneration"),eRo=o(" (MVP model)"),oRo=l(),a1=a("li"),kpe=a("strong"),rRo=o("nezha"),tRo=o(" \u2014 "),TV=a("a"),aRo=o("NezhaForPreTraining"),nRo=o(" (Nezha model)"),sRo=l(),n1=a("li"),Spe=a("strong"),lRo=o("openai-gpt"),iRo=o(" \u2014 "),MV=a("a"),dRo=o("OpenAIGPTLMHeadModel"),cRo=o(" (OpenAI GPT model)"),fRo=l(),s1=a("li"),Rpe=a("strong"),mRo=o("retribert"),gRo=o(" \u2014 "),EV=a("a"),hRo=o("RetriBertModel"),pRo=o(" (RetriBERT model)"),_Ro=l(),l1=a("li"),Ppe=a("strong"),uRo=o("roberta"),bRo=o(" \u2014 "),CV=a("a"),vRo=o("RobertaForMaskedLM"),FRo=o(" (RoBERTa model)"),TRo=l(),i1=a("li"),Bpe=a("strong"),MRo=o("splinter"),ERo=o(" \u2014 "),wV=a("a"),CRo=o("SplinterForPreTraining"),wRo=o(" (Splinter model)"),ARo=l(),d1=a("li"),Ipe=a("strong"),LRo=o("squeezebert"),yRo=o(" \u2014 "),AV=a("a"),xRo=o("SqueezeBertForMaskedLM"),$Ro=o(" (SqueezeBERT model)"),kRo=l(),c1=a("li"),Npe=a("strong"),SRo=o("t5"),RRo=o(" \u2014 "),LV=a("a"),PRo=o("T5ForConditionalGeneration"),BRo=o(" (T5 model)"),IRo=l(),f1=a("li"),qpe=a("strong"),NRo=o("tapas"),qRo=o(" \u2014 "),yV=a("a"),jRo=o("TapasForMaskedLM"),DRo=o(" (TAPAS model)"),GRo=l(),m1=a("li"),jpe=a("strong"),ORo=o("transfo-xl"),VRo=o(" \u2014 "),xV=a("a"),XRo=o("TransfoXLLMHeadModel"),zRo=o(" (Transformer-XL model)"),WRo=l(),g1=a("li"),Dpe=a("strong"),QRo=o("unispeech"),URo=o(" \u2014 "),$V=a("a"),HRo=o("UniSpeechForPreTraining"),JRo=o(" (UniSpeech model)"),YRo=l(),h1=a("li"),Gpe=a("strong"),KRo=o("unispeech-sat"),ZRo=o(" \u2014 "),kV=a("a"),ePo=o("UniSpeechSatForPreTraining"),oPo=o(" (UniSpeechSat model)"),rPo=l(),p1=a("li"),Ope=a("strong"),tPo=o("videomae"),aPo=o(" \u2014 "),SV=a("a"),nPo=o("VideoMAEForPreTraining"),sPo=o(" (VideoMAE model)"),lPo=l(),_1=a("li"),Vpe=a("strong"),iPo=o("visual_bert"),dPo=o(" \u2014 "),RV=a("a"),cPo=o("VisualBertForPreTraining"),fPo=o(" (VisualBERT model)"),mPo=l(),u1=a("li"),Xpe=a("strong"),gPo=o("vit_mae"),hPo=o(" \u2014 "),PV=a("a"),pPo=o("ViTMAEForPreTraining"),_Po=o(" (ViTMAE model)"),uPo=l(),b1=a("li"),zpe=a("strong"),bPo=o("wav2vec2"),vPo=o(" \u2014 "),BV=a("a"),FPo=o("Wav2Vec2ForPreTraining"),TPo=o(" (Wav2Vec2 model)"),MPo=l(),v1=a("li"),Wpe=a("strong"),EPo=o("wav2vec2-conformer"),CPo=o(" \u2014 "),IV=a("a"),wPo=o("Wav2Vec2ConformerForPreTraining"),APo=o(" (Wav2Vec2-Conformer model)"),LPo=l(),F1=a("li"),Qpe=a("strong"),yPo=o("xlm"),xPo=o(" \u2014 "),NV=a("a"),$Po=o("XLMWithLMHeadModel"),kPo=o(" (XLM model)"),SPo=l(),T1=a("li"),Upe=a("strong"),RPo=o("xlm-roberta"),PPo=o(" \u2014 "),qV=a("a"),BPo=o("XLMRobertaForMaskedLM"),IPo=o(" (XLM-RoBERTa model)"),NPo=l(),M1=a("li"),Hpe=a("strong"),qPo=o("xlm-roberta-xl"),jPo=o(" \u2014 "),jV=a("a"),DPo=o("XLMRobertaXLForMaskedLM"),GPo=o(" (XLM-RoBERTa-XL model)"),OPo=l(),E1=a("li"),Jpe=a("strong"),VPo=o("xlnet"),XPo=o(" \u2014 "),DV=a("a"),zPo=o("XLNetLMHeadModel"),WPo=o(" (XLNet model)"),QPo=l(),C1=a("p"),UPo=o("The model is set in evaluation mode by default using "),Ype=a("code"),HPo=o("model.eval()"),JPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=a("code"),YPo=o("model.train()"),KPo=l(),F(w1.$$.fragment),_Ue=l(),id=a("h2"),A1=a("a"),Zpe=a("span"),F(Zy.$$.fragment),ZPo=l(),e_e=a("span"),eBo=o("AutoModelForCausalLM"),uUe=l(),Po=a("div"),F(e9.$$.fragment),oBo=l(),dd=a("p"),rBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GV=a("a"),tBo=o("from_pretrained()"),aBo=o(" class method or the "),OV=a("a"),nBo=o("from_config()"),sBo=o(` class
method.`),lBo=l(),o9=a("p"),iBo=o("This class cannot be instantiated directly using "),o_e=a("code"),dBo=o("__init__()"),cBo=o(" (throws an error)."),fBo=l(),ht=a("div"),F(r9.$$.fragment),mBo=l(),r_e=a("p"),gBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hBo=l(),cd=a("p"),pBo=o(`Note:
Loading a model from its configuration file does `),t_e=a("strong"),_Bo=o("not"),uBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),bBo=o("from_pretrained()"),vBo=o(" to load the model weights."),FBo=l(),F(L1.$$.fragment),TBo=l(),eo=a("div"),F(t9.$$.fragment),MBo=l(),a_e=a("p"),EBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CBo=l(),za=a("p"),wBo=o("The model class to instantiate is selected based on the "),n_e=a("code"),ABo=o("model_type"),LBo=o(` property of the config object (either
passed as an argument or loaded from `),s_e=a("code"),yBo=o("pretrained_model_name_or_path"),xBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=a("code"),$Bo=o("pretrained_model_name_or_path"),kBo=o(":"),SBo=l(),z=a("ul"),y1=a("li"),i_e=a("strong"),RBo=o("bart"),PBo=o(" \u2014 "),XV=a("a"),BBo=o("BartForCausalLM"),IBo=o(" (BART model)"),NBo=l(),x1=a("li"),d_e=a("strong"),qBo=o("bert"),jBo=o(" \u2014 "),zV=a("a"),DBo=o("BertLMHeadModel"),GBo=o(" (BERT model)"),OBo=l(),$1=a("li"),c_e=a("strong"),VBo=o("bert-generation"),XBo=o(" \u2014 "),WV=a("a"),zBo=o("BertGenerationDecoder"),WBo=o(" (Bert Generation model)"),QBo=l(),k1=a("li"),f_e=a("strong"),UBo=o("big_bird"),HBo=o(" \u2014 "),QV=a("a"),JBo=o("BigBirdForCausalLM"),YBo=o(" (BigBird model)"),KBo=l(),S1=a("li"),m_e=a("strong"),ZBo=o("bigbird_pegasus"),eIo=o(" \u2014 "),UV=a("a"),oIo=o("BigBirdPegasusForCausalLM"),rIo=o(" (BigBird-Pegasus model)"),tIo=l(),R1=a("li"),g_e=a("strong"),aIo=o("blenderbot"),nIo=o(" \u2014 "),HV=a("a"),sIo=o("BlenderbotForCausalLM"),lIo=o(" (Blenderbot model)"),iIo=l(),P1=a("li"),h_e=a("strong"),dIo=o("blenderbot-small"),cIo=o(" \u2014 "),JV=a("a"),fIo=o("BlenderbotSmallForCausalLM"),mIo=o(" (BlenderbotSmall model)"),gIo=l(),B1=a("li"),p_e=a("strong"),hIo=o("bloom"),pIo=o(" \u2014 "),YV=a("a"),_Io=o("BloomForCausalLM"),uIo=o(" (BLOOM model)"),bIo=l(),I1=a("li"),__e=a("strong"),vIo=o("camembert"),FIo=o(" \u2014 "),KV=a("a"),TIo=o("CamembertForCausalLM"),MIo=o(" (CamemBERT model)"),EIo=l(),N1=a("li"),u_e=a("strong"),CIo=o("codegen"),wIo=o(" \u2014 "),ZV=a("a"),AIo=o("CodeGenForCausalLM"),LIo=o(" (CodeGen model)"),yIo=l(),q1=a("li"),b_e=a("strong"),xIo=o("ctrl"),$Io=o(" \u2014 "),eX=a("a"),kIo=o("CTRLLMHeadModel"),SIo=o(" (CTRL model)"),RIo=l(),j1=a("li"),v_e=a("strong"),PIo=o("data2vec-text"),BIo=o(" \u2014 "),oX=a("a"),IIo=o("Data2VecTextForCausalLM"),NIo=o(" (Data2VecText model)"),qIo=l(),D1=a("li"),F_e=a("strong"),jIo=o("electra"),DIo=o(" \u2014 "),rX=a("a"),GIo=o("ElectraForCausalLM"),OIo=o(" (ELECTRA model)"),VIo=l(),G1=a("li"),T_e=a("strong"),XIo=o("gpt2"),zIo=o(" \u2014 "),tX=a("a"),WIo=o("GPT2LMHeadModel"),QIo=o(" (OpenAI GPT-2 model)"),UIo=l(),O1=a("li"),M_e=a("strong"),HIo=o("gpt_neo"),JIo=o(" \u2014 "),aX=a("a"),YIo=o("GPTNeoForCausalLM"),KIo=o(" (GPT Neo model)"),ZIo=l(),V1=a("li"),E_e=a("strong"),eNo=o("gpt_neox"),oNo=o(" \u2014 "),nX=a("a"),rNo=o("GPTNeoXForCausalLM"),tNo=o(" (GPT NeoX model)"),aNo=l(),X1=a("li"),C_e=a("strong"),nNo=o("gptj"),sNo=o(" \u2014 "),sX=a("a"),lNo=o("GPTJForCausalLM"),iNo=o(" (GPT-J model)"),dNo=l(),z1=a("li"),w_e=a("strong"),cNo=o("marian"),fNo=o(" \u2014 "),lX=a("a"),mNo=o("MarianForCausalLM"),gNo=o(" (Marian model)"),hNo=l(),W1=a("li"),A_e=a("strong"),pNo=o("mbart"),_No=o(" \u2014 "),iX=a("a"),uNo=o("MBartForCausalLM"),bNo=o(" (mBART model)"),vNo=l(),Q1=a("li"),L_e=a("strong"),FNo=o("megatron-bert"),TNo=o(" \u2014 "),dX=a("a"),MNo=o("MegatronBertForCausalLM"),ENo=o(" (Megatron-BERT model)"),CNo=l(),U1=a("li"),y_e=a("strong"),wNo=o("mvp"),ANo=o(" \u2014 "),cX=a("a"),LNo=o("MvpForCausalLM"),yNo=o(" (MVP model)"),xNo=l(),H1=a("li"),x_e=a("strong"),$No=o("openai-gpt"),kNo=o(" \u2014 "),fX=a("a"),SNo=o("OpenAIGPTLMHeadModel"),RNo=o(" (OpenAI GPT model)"),PNo=l(),J1=a("li"),$_e=a("strong"),BNo=o("opt"),INo=o(" \u2014 "),mX=a("a"),NNo=o("OPTForCausalLM"),qNo=o(" (OPT model)"),jNo=l(),Y1=a("li"),k_e=a("strong"),DNo=o("pegasus"),GNo=o(" \u2014 "),gX=a("a"),ONo=o("PegasusForCausalLM"),VNo=o(" (Pegasus model)"),XNo=l(),K1=a("li"),S_e=a("strong"),zNo=o("plbart"),WNo=o(" \u2014 "),hX=a("a"),QNo=o("PLBartForCausalLM"),UNo=o(" (PLBart model)"),HNo=l(),Z1=a("li"),R_e=a("strong"),JNo=o("prophetnet"),YNo=o(" \u2014 "),pX=a("a"),KNo=o("ProphetNetForCausalLM"),ZNo=o(" (ProphetNet model)"),eqo=l(),e2=a("li"),P_e=a("strong"),oqo=o("qdqbert"),rqo=o(" \u2014 "),_X=a("a"),tqo=o("QDQBertLMHeadModel"),aqo=o(" (QDQBert model)"),nqo=l(),o2=a("li"),B_e=a("strong"),sqo=o("reformer"),lqo=o(" \u2014 "),uX=a("a"),iqo=o("ReformerModelWithLMHead"),dqo=o(" (Reformer model)"),cqo=l(),r2=a("li"),I_e=a("strong"),fqo=o("rembert"),mqo=o(" \u2014 "),bX=a("a"),gqo=o("RemBertForCausalLM"),hqo=o(" (RemBERT model)"),pqo=l(),t2=a("li"),N_e=a("strong"),_qo=o("roberta"),uqo=o(" \u2014 "),vX=a("a"),bqo=o("RobertaForCausalLM"),vqo=o(" (RoBERTa model)"),Fqo=l(),a2=a("li"),q_e=a("strong"),Tqo=o("roformer"),Mqo=o(" \u2014 "),FX=a("a"),Eqo=o("RoFormerForCausalLM"),Cqo=o(" (RoFormer model)"),wqo=l(),n2=a("li"),j_e=a("strong"),Aqo=o("speech_to_text_2"),Lqo=o(" \u2014 "),TX=a("a"),yqo=o("Speech2Text2ForCausalLM"),xqo=o(" (Speech2Text2 model)"),$qo=l(),s2=a("li"),D_e=a("strong"),kqo=o("transfo-xl"),Sqo=o(" \u2014 "),MX=a("a"),Rqo=o("TransfoXLLMHeadModel"),Pqo=o(" (Transformer-XL model)"),Bqo=l(),l2=a("li"),G_e=a("strong"),Iqo=o("trocr"),Nqo=o(" \u2014 "),EX=a("a"),qqo=o("TrOCRForCausalLM"),jqo=o(" (TrOCR model)"),Dqo=l(),i2=a("li"),O_e=a("strong"),Gqo=o("xglm"),Oqo=o(" \u2014 "),CX=a("a"),Vqo=o("XGLMForCausalLM"),Xqo=o(" (XGLM model)"),zqo=l(),d2=a("li"),V_e=a("strong"),Wqo=o("xlm"),Qqo=o(" \u2014 "),wX=a("a"),Uqo=o("XLMWithLMHeadModel"),Hqo=o(" (XLM model)"),Jqo=l(),c2=a("li"),X_e=a("strong"),Yqo=o("xlm-prophetnet"),Kqo=o(" \u2014 "),AX=a("a"),Zqo=o("XLMProphetNetForCausalLM"),ejo=o(" (XLM-ProphetNet model)"),ojo=l(),f2=a("li"),z_e=a("strong"),rjo=o("xlm-roberta"),tjo=o(" \u2014 "),LX=a("a"),ajo=o("XLMRobertaForCausalLM"),njo=o(" (XLM-RoBERTa model)"),sjo=l(),m2=a("li"),W_e=a("strong"),ljo=o("xlm-roberta-xl"),ijo=o(" \u2014 "),yX=a("a"),djo=o("XLMRobertaXLForCausalLM"),cjo=o(" (XLM-RoBERTa-XL model)"),fjo=l(),g2=a("li"),Q_e=a("strong"),mjo=o("xlnet"),gjo=o(" \u2014 "),xX=a("a"),hjo=o("XLNetLMHeadModel"),pjo=o(" (XLNet model)"),_jo=l(),h2=a("p"),ujo=o("The model is set in evaluation mode by default using "),U_e=a("code"),bjo=o("model.eval()"),vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),Fjo=o("model.train()"),Tjo=l(),F(p2.$$.fragment),bUe=l(),fd=a("h2"),_2=a("a"),J_e=a("span"),F(a9.$$.fragment),Mjo=l(),Y_e=a("span"),Ejo=o("AutoModelForMaskedLM"),vUe=l(),Bo=a("div"),F(n9.$$.fragment),Cjo=l(),md=a("p"),wjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$X=a("a"),Ajo=o("from_pretrained()"),Ljo=o(" class method or the "),kX=a("a"),yjo=o("from_config()"),xjo=o(` class
method.`),$jo=l(),s9=a("p"),kjo=o("This class cannot be instantiated directly using "),K_e=a("code"),Sjo=o("__init__()"),Rjo=o(" (throws an error)."),Pjo=l(),pt=a("div"),F(l9.$$.fragment),Bjo=l(),Z_e=a("p"),Ijo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Njo=l(),gd=a("p"),qjo=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),jjo=o("not"),Djo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),Gjo=o("from_pretrained()"),Ojo=o(" to load the model weights."),Vjo=l(),F(u2.$$.fragment),Xjo=l(),oo=a("div"),F(i9.$$.fragment),zjo=l(),oue=a("p"),Wjo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qjo=l(),Wa=a("p"),Ujo=o("The model class to instantiate is selected based on the "),rue=a("code"),Hjo=o("model_type"),Jjo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),Zjo=o("pretrained_model_name_or_path"),eDo=o(":"),oDo=l(),U=a("ul"),b2=a("li"),nue=a("strong"),rDo=o("albert"),tDo=o(" \u2014 "),RX=a("a"),aDo=o("AlbertForMaskedLM"),nDo=o(" (ALBERT model)"),sDo=l(),v2=a("li"),sue=a("strong"),lDo=o("bart"),iDo=o(" \u2014 "),PX=a("a"),dDo=o("BartForConditionalGeneration"),cDo=o(" (BART model)"),fDo=l(),F2=a("li"),lue=a("strong"),mDo=o("bert"),gDo=o(" \u2014 "),BX=a("a"),hDo=o("BertForMaskedLM"),pDo=o(" (BERT model)"),_Do=l(),T2=a("li"),iue=a("strong"),uDo=o("big_bird"),bDo=o(" \u2014 "),IX=a("a"),vDo=o("BigBirdForMaskedLM"),FDo=o(" (BigBird model)"),TDo=l(),M2=a("li"),due=a("strong"),MDo=o("camembert"),EDo=o(" \u2014 "),NX=a("a"),CDo=o("CamembertForMaskedLM"),wDo=o(" (CamemBERT model)"),ADo=l(),E2=a("li"),cue=a("strong"),LDo=o("convbert"),yDo=o(" \u2014 "),qX=a("a"),xDo=o("ConvBertForMaskedLM"),$Do=o(" (ConvBERT model)"),kDo=l(),C2=a("li"),fue=a("strong"),SDo=o("data2vec-text"),RDo=o(" \u2014 "),jX=a("a"),PDo=o("Data2VecTextForMaskedLM"),BDo=o(" (Data2VecText model)"),IDo=l(),w2=a("li"),mue=a("strong"),NDo=o("deberta"),qDo=o(" \u2014 "),DX=a("a"),jDo=o("DebertaForMaskedLM"),DDo=o(" (DeBERTa model)"),GDo=l(),A2=a("li"),gue=a("strong"),ODo=o("deberta-v2"),VDo=o(" \u2014 "),GX=a("a"),XDo=o("DebertaV2ForMaskedLM"),zDo=o(" (DeBERTa-v2 model)"),WDo=l(),L2=a("li"),hue=a("strong"),QDo=o("distilbert"),UDo=o(" \u2014 "),OX=a("a"),HDo=o("DistilBertForMaskedLM"),JDo=o(" (DistilBERT model)"),YDo=l(),y2=a("li"),pue=a("strong"),KDo=o("electra"),ZDo=o(" \u2014 "),VX=a("a"),eGo=o("ElectraForMaskedLM"),oGo=o(" (ELECTRA model)"),rGo=l(),x2=a("li"),_ue=a("strong"),tGo=o("flaubert"),aGo=o(" \u2014 "),XX=a("a"),nGo=o("FlaubertWithLMHeadModel"),sGo=o(" (FlauBERT model)"),lGo=l(),$2=a("li"),uue=a("strong"),iGo=o("fnet"),dGo=o(" \u2014 "),zX=a("a"),cGo=o("FNetForMaskedLM"),fGo=o(" (FNet model)"),mGo=l(),k2=a("li"),bue=a("strong"),gGo=o("funnel"),hGo=o(" \u2014 "),WX=a("a"),pGo=o("FunnelForMaskedLM"),_Go=o(" (Funnel Transformer model)"),uGo=l(),S2=a("li"),vue=a("strong"),bGo=o("ibert"),vGo=o(" \u2014 "),QX=a("a"),FGo=o("IBertForMaskedLM"),TGo=o(" (I-BERT model)"),MGo=l(),R2=a("li"),Fue=a("strong"),EGo=o("layoutlm"),CGo=o(" \u2014 "),UX=a("a"),wGo=o("LayoutLMForMaskedLM"),AGo=o(" (LayoutLM model)"),LGo=l(),P2=a("li"),Tue=a("strong"),yGo=o("longformer"),xGo=o(" \u2014 "),HX=a("a"),$Go=o("LongformerForMaskedLM"),kGo=o(" (Longformer model)"),SGo=l(),B2=a("li"),Mue=a("strong"),RGo=o("luke"),PGo=o(" \u2014 "),JX=a("a"),BGo=o("LukeForMaskedLM"),IGo=o(" (LUKE model)"),NGo=l(),I2=a("li"),Eue=a("strong"),qGo=o("mbart"),jGo=o(" \u2014 "),YX=a("a"),DGo=o("MBartForConditionalGeneration"),GGo=o(" (mBART model)"),OGo=l(),N2=a("li"),Cue=a("strong"),VGo=o("megatron-bert"),XGo=o(" \u2014 "),KX=a("a"),zGo=o("MegatronBertForMaskedLM"),WGo=o(" (Megatron-BERT model)"),QGo=l(),q2=a("li"),wue=a("strong"),UGo=o("mobilebert"),HGo=o(" \u2014 "),ZX=a("a"),JGo=o("MobileBertForMaskedLM"),YGo=o(" (MobileBERT model)"),KGo=l(),j2=a("li"),Aue=a("strong"),ZGo=o("mpnet"),eOo=o(" \u2014 "),ez=a("a"),oOo=o("MPNetForMaskedLM"),rOo=o(" (MPNet model)"),tOo=l(),D2=a("li"),Lue=a("strong"),aOo=o("mvp"),nOo=o(" \u2014 "),oz=a("a"),sOo=o("MvpForConditionalGeneration"),lOo=o(" (MVP model)"),iOo=l(),G2=a("li"),yue=a("strong"),dOo=o("nezha"),cOo=o(" \u2014 "),rz=a("a"),fOo=o("NezhaForMaskedLM"),mOo=o(" (Nezha model)"),gOo=l(),O2=a("li"),xue=a("strong"),hOo=o("nystromformer"),pOo=o(" \u2014 "),tz=a("a"),_Oo=o("NystromformerForMaskedLM"),uOo=o(" (Nystr\xF6mformer model)"),bOo=l(),V2=a("li"),$ue=a("strong"),vOo=o("perceiver"),FOo=o(" \u2014 "),az=a("a"),TOo=o("PerceiverForMaskedLM"),MOo=o(" (Perceiver model)"),EOo=l(),X2=a("li"),kue=a("strong"),COo=o("qdqbert"),wOo=o(" \u2014 "),nz=a("a"),AOo=o("QDQBertForMaskedLM"),LOo=o(" (QDQBert model)"),yOo=l(),z2=a("li"),Sue=a("strong"),xOo=o("reformer"),$Oo=o(" \u2014 "),sz=a("a"),kOo=o("ReformerForMaskedLM"),SOo=o(" (Reformer model)"),ROo=l(),W2=a("li"),Rue=a("strong"),POo=o("rembert"),BOo=o(" \u2014 "),lz=a("a"),IOo=o("RemBertForMaskedLM"),NOo=o(" (RemBERT model)"),qOo=l(),Q2=a("li"),Pue=a("strong"),jOo=o("roberta"),DOo=o(" \u2014 "),iz=a("a"),GOo=o("RobertaForMaskedLM"),OOo=o(" (RoBERTa model)"),VOo=l(),U2=a("li"),Bue=a("strong"),XOo=o("roformer"),zOo=o(" \u2014 "),dz=a("a"),WOo=o("RoFormerForMaskedLM"),QOo=o(" (RoFormer model)"),UOo=l(),H2=a("li"),Iue=a("strong"),HOo=o("squeezebert"),JOo=o(" \u2014 "),cz=a("a"),YOo=o("SqueezeBertForMaskedLM"),KOo=o(" (SqueezeBERT model)"),ZOo=l(),J2=a("li"),Nue=a("strong"),eVo=o("tapas"),oVo=o(" \u2014 "),fz=a("a"),rVo=o("TapasForMaskedLM"),tVo=o(" (TAPAS model)"),aVo=l(),Y2=a("li"),que=a("strong"),nVo=o("wav2vec2"),sVo=o(" \u2014 "),jue=a("code"),lVo=o("Wav2Vec2ForMaskedLM"),iVo=o(" (Wav2Vec2 model)"),dVo=l(),K2=a("li"),Due=a("strong"),cVo=o("xlm"),fVo=o(" \u2014 "),mz=a("a"),mVo=o("XLMWithLMHeadModel"),gVo=o(" (XLM model)"),hVo=l(),Z2=a("li"),Gue=a("strong"),pVo=o("xlm-roberta"),_Vo=o(" \u2014 "),gz=a("a"),uVo=o("XLMRobertaForMaskedLM"),bVo=o(" (XLM-RoBERTa model)"),vVo=l(),eb=a("li"),Oue=a("strong"),FVo=o("xlm-roberta-xl"),TVo=o(" \u2014 "),hz=a("a"),MVo=o("XLMRobertaXLForMaskedLM"),EVo=o(" (XLM-RoBERTa-XL model)"),CVo=l(),ob=a("li"),Vue=a("strong"),wVo=o("yoso"),AVo=o(" \u2014 "),pz=a("a"),LVo=o("YosoForMaskedLM"),yVo=o(" (YOSO model)"),xVo=l(),rb=a("p"),$Vo=o("The model is set in evaluation mode by default using "),Xue=a("code"),kVo=o("model.eval()"),SVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),RVo=o("model.train()"),PVo=l(),F(tb.$$.fragment),FUe=l(),hd=a("h2"),ab=a("a"),Wue=a("span"),F(d9.$$.fragment),BVo=l(),Que=a("span"),IVo=o("AutoModelForSeq2SeqLM"),TUe=l(),Io=a("div"),F(c9.$$.fragment),NVo=l(),pd=a("p"),qVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_z=a("a"),jVo=o("from_pretrained()"),DVo=o(" class method or the "),uz=a("a"),GVo=o("from_config()"),OVo=o(` class
method.`),VVo=l(),f9=a("p"),XVo=o("This class cannot be instantiated directly using "),Uue=a("code"),zVo=o("__init__()"),WVo=o(" (throws an error)."),QVo=l(),_t=a("div"),F(m9.$$.fragment),UVo=l(),Hue=a("p"),HVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JVo=l(),_d=a("p"),YVo=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),KVo=o("not"),ZVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),eXo=o("from_pretrained()"),oXo=o(" to load the model weights."),rXo=l(),F(nb.$$.fragment),tXo=l(),ro=a("div"),F(g9.$$.fragment),aXo=l(),Yue=a("p"),nXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sXo=l(),Qa=a("p"),lXo=o("The model class to instantiate is selected based on the "),Kue=a("code"),iXo=o("model_type"),dXo=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),cXo=o("pretrained_model_name_or_path"),fXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=a("code"),mXo=o("pretrained_model_name_or_path"),gXo=o(":"),hXo=l(),me=a("ul"),sb=a("li"),o5e=a("strong"),pXo=o("bart"),_Xo=o(" \u2014 "),vz=a("a"),uXo=o("BartForConditionalGeneration"),bXo=o(" (BART model)"),vXo=l(),lb=a("li"),r5e=a("strong"),FXo=o("bigbird_pegasus"),TXo=o(" \u2014 "),Fz=a("a"),MXo=o("BigBirdPegasusForConditionalGeneration"),EXo=o(" (BigBird-Pegasus model)"),CXo=l(),ib=a("li"),t5e=a("strong"),wXo=o("blenderbot"),AXo=o(" \u2014 "),Tz=a("a"),LXo=o("BlenderbotForConditionalGeneration"),yXo=o(" (Blenderbot model)"),xXo=l(),db=a("li"),a5e=a("strong"),$Xo=o("blenderbot-small"),kXo=o(" \u2014 "),Mz=a("a"),SXo=o("BlenderbotSmallForConditionalGeneration"),RXo=o(" (BlenderbotSmall model)"),PXo=l(),cb=a("li"),n5e=a("strong"),BXo=o("encoder-decoder"),IXo=o(" \u2014 "),Ez=a("a"),NXo=o("EncoderDecoderModel"),qXo=o(" (Encoder decoder model)"),jXo=l(),fb=a("li"),s5e=a("strong"),DXo=o("fsmt"),GXo=o(" \u2014 "),Cz=a("a"),OXo=o("FSMTForConditionalGeneration"),VXo=o(" (FairSeq Machine-Translation model)"),XXo=l(),mb=a("li"),l5e=a("strong"),zXo=o("led"),WXo=o(" \u2014 "),wz=a("a"),QXo=o("LEDForConditionalGeneration"),UXo=o(" (LED model)"),HXo=l(),gb=a("li"),i5e=a("strong"),JXo=o("longt5"),YXo=o(" \u2014 "),Az=a("a"),KXo=o("LongT5ForConditionalGeneration"),ZXo=o(" (LongT5 model)"),ezo=l(),hb=a("li"),d5e=a("strong"),ozo=o("m2m_100"),rzo=o(" \u2014 "),Lz=a("a"),tzo=o("M2M100ForConditionalGeneration"),azo=o(" (M2M100 model)"),nzo=l(),pb=a("li"),c5e=a("strong"),szo=o("marian"),lzo=o(" \u2014 "),yz=a("a"),izo=o("MarianMTModel"),dzo=o(" (Marian model)"),czo=l(),_b=a("li"),f5e=a("strong"),fzo=o("mbart"),mzo=o(" \u2014 "),xz=a("a"),gzo=o("MBartForConditionalGeneration"),hzo=o(" (mBART model)"),pzo=l(),ub=a("li"),m5e=a("strong"),_zo=o("mt5"),uzo=o(" \u2014 "),$z=a("a"),bzo=o("MT5ForConditionalGeneration"),vzo=o(" (MT5 model)"),Fzo=l(),bb=a("li"),g5e=a("strong"),Tzo=o("mvp"),Mzo=o(" \u2014 "),kz=a("a"),Ezo=o("MvpForConditionalGeneration"),Czo=o(" (MVP model)"),wzo=l(),vb=a("li"),h5e=a("strong"),Azo=o("nllb"),Lzo=o(" \u2014 "),Sz=a("a"),yzo=o("M2M100ForConditionalGeneration"),xzo=o(" (NLLB model)"),$zo=l(),Fb=a("li"),p5e=a("strong"),kzo=o("pegasus"),Szo=o(" \u2014 "),Rz=a("a"),Rzo=o("PegasusForConditionalGeneration"),Pzo=o(" (Pegasus model)"),Bzo=l(),Tb=a("li"),_5e=a("strong"),Izo=o("plbart"),Nzo=o(" \u2014 "),Pz=a("a"),qzo=o("PLBartForConditionalGeneration"),jzo=o(" (PLBart model)"),Dzo=l(),Mb=a("li"),u5e=a("strong"),Gzo=o("prophetnet"),Ozo=o(" \u2014 "),Bz=a("a"),Vzo=o("ProphetNetForConditionalGeneration"),Xzo=o(" (ProphetNet model)"),zzo=l(),Eb=a("li"),b5e=a("strong"),Wzo=o("t5"),Qzo=o(" \u2014 "),Iz=a("a"),Uzo=o("T5ForConditionalGeneration"),Hzo=o(" (T5 model)"),Jzo=l(),Cb=a("li"),v5e=a("strong"),Yzo=o("xlm-prophetnet"),Kzo=o(" \u2014 "),Nz=a("a"),Zzo=o("XLMProphetNetForConditionalGeneration"),eWo=o(" (XLM-ProphetNet model)"),oWo=l(),wb=a("p"),rWo=o("The model is set in evaluation mode by default using "),F5e=a("code"),tWo=o("model.eval()"),aWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T5e=a("code"),nWo=o("model.train()"),sWo=l(),F(Ab.$$.fragment),MUe=l(),ud=a("h2"),Lb=a("a"),M5e=a("span"),F(h9.$$.fragment),lWo=l(),E5e=a("span"),iWo=o("AutoModelForSequenceClassification"),EUe=l(),No=a("div"),F(p9.$$.fragment),dWo=l(),bd=a("p"),cWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qz=a("a"),fWo=o("from_pretrained()"),mWo=o(" class method or the "),jz=a("a"),gWo=o("from_config()"),hWo=o(` class
method.`),pWo=l(),_9=a("p"),_Wo=o("This class cannot be instantiated directly using "),C5e=a("code"),uWo=o("__init__()"),bWo=o(" (throws an error)."),vWo=l(),ut=a("div"),F(u9.$$.fragment),FWo=l(),w5e=a("p"),TWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MWo=l(),vd=a("p"),EWo=o(`Note:
Loading a model from its configuration file does `),A5e=a("strong"),CWo=o("not"),wWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),AWo=o("from_pretrained()"),LWo=o(" to load the model weights."),yWo=l(),F(yb.$$.fragment),xWo=l(),to=a("div"),F(b9.$$.fragment),$Wo=l(),L5e=a("p"),kWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SWo=l(),Ua=a("p"),RWo=o("The model class to instantiate is selected based on the "),y5e=a("code"),PWo=o("model_type"),BWo=o(` property of the config object (either
passed as an argument or loaded from `),x5e=a("code"),IWo=o("pretrained_model_name_or_path"),NWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),qWo=o("pretrained_model_name_or_path"),jWo=o(":"),DWo=l(),N=a("ul"),xb=a("li"),k5e=a("strong"),GWo=o("albert"),OWo=o(" \u2014 "),Gz=a("a"),VWo=o("AlbertForSequenceClassification"),XWo=o(" (ALBERT model)"),zWo=l(),$b=a("li"),S5e=a("strong"),WWo=o("bart"),QWo=o(" \u2014 "),Oz=a("a"),UWo=o("BartForSequenceClassification"),HWo=o(" (BART model)"),JWo=l(),kb=a("li"),R5e=a("strong"),YWo=o("bert"),KWo=o(" \u2014 "),Vz=a("a"),ZWo=o("BertForSequenceClassification"),eQo=o(" (BERT model)"),oQo=l(),Sb=a("li"),P5e=a("strong"),rQo=o("big_bird"),tQo=o(" \u2014 "),Xz=a("a"),aQo=o("BigBirdForSequenceClassification"),nQo=o(" (BigBird model)"),sQo=l(),Rb=a("li"),B5e=a("strong"),lQo=o("bigbird_pegasus"),iQo=o(" \u2014 "),zz=a("a"),dQo=o("BigBirdPegasusForSequenceClassification"),cQo=o(" (BigBird-Pegasus model)"),fQo=l(),Pb=a("li"),I5e=a("strong"),mQo=o("bloom"),gQo=o(" \u2014 "),Wz=a("a"),hQo=o("BloomForSequenceClassification"),pQo=o(" (BLOOM model)"),_Qo=l(),Bb=a("li"),N5e=a("strong"),uQo=o("camembert"),bQo=o(" \u2014 "),Qz=a("a"),vQo=o("CamembertForSequenceClassification"),FQo=o(" (CamemBERT model)"),TQo=l(),Ib=a("li"),q5e=a("strong"),MQo=o("canine"),EQo=o(" \u2014 "),Uz=a("a"),CQo=o("CanineForSequenceClassification"),wQo=o(" (CANINE model)"),AQo=l(),Nb=a("li"),j5e=a("strong"),LQo=o("convbert"),yQo=o(" \u2014 "),Hz=a("a"),xQo=o("ConvBertForSequenceClassification"),$Qo=o(" (ConvBERT model)"),kQo=l(),qb=a("li"),D5e=a("strong"),SQo=o("ctrl"),RQo=o(" \u2014 "),Jz=a("a"),PQo=o("CTRLForSequenceClassification"),BQo=o(" (CTRL model)"),IQo=l(),jb=a("li"),G5e=a("strong"),NQo=o("data2vec-text"),qQo=o(" \u2014 "),Yz=a("a"),jQo=o("Data2VecTextForSequenceClassification"),DQo=o(" (Data2VecText model)"),GQo=l(),Db=a("li"),O5e=a("strong"),OQo=o("deberta"),VQo=o(" \u2014 "),Kz=a("a"),XQo=o("DebertaForSequenceClassification"),zQo=o(" (DeBERTa model)"),WQo=l(),Gb=a("li"),V5e=a("strong"),QQo=o("deberta-v2"),UQo=o(" \u2014 "),Zz=a("a"),HQo=o("DebertaV2ForSequenceClassification"),JQo=o(" (DeBERTa-v2 model)"),YQo=l(),Ob=a("li"),X5e=a("strong"),KQo=o("distilbert"),ZQo=o(" \u2014 "),eW=a("a"),eUo=o("DistilBertForSequenceClassification"),oUo=o(" (DistilBERT model)"),rUo=l(),Vb=a("li"),z5e=a("strong"),tUo=o("electra"),aUo=o(" \u2014 "),oW=a("a"),nUo=o("ElectraForSequenceClassification"),sUo=o(" (ELECTRA model)"),lUo=l(),Xb=a("li"),W5e=a("strong"),iUo=o("flaubert"),dUo=o(" \u2014 "),rW=a("a"),cUo=o("FlaubertForSequenceClassification"),fUo=o(" (FlauBERT model)"),mUo=l(),zb=a("li"),Q5e=a("strong"),gUo=o("fnet"),hUo=o(" \u2014 "),tW=a("a"),pUo=o("FNetForSequenceClassification"),_Uo=o(" (FNet model)"),uUo=l(),Wb=a("li"),U5e=a("strong"),bUo=o("funnel"),vUo=o(" \u2014 "),aW=a("a"),FUo=o("FunnelForSequenceClassification"),TUo=o(" (Funnel Transformer model)"),MUo=l(),Qb=a("li"),H5e=a("strong"),EUo=o("gpt2"),CUo=o(" \u2014 "),nW=a("a"),wUo=o("GPT2ForSequenceClassification"),AUo=o(" (OpenAI GPT-2 model)"),LUo=l(),Ub=a("li"),J5e=a("strong"),yUo=o("gpt_neo"),xUo=o(" \u2014 "),sW=a("a"),$Uo=o("GPTNeoForSequenceClassification"),kUo=o(" (GPT Neo model)"),SUo=l(),Hb=a("li"),Y5e=a("strong"),RUo=o("gptj"),PUo=o(" \u2014 "),lW=a("a"),BUo=o("GPTJForSequenceClassification"),IUo=o(" (GPT-J model)"),NUo=l(),Jb=a("li"),K5e=a("strong"),qUo=o("ibert"),jUo=o(" \u2014 "),iW=a("a"),DUo=o("IBertForSequenceClassification"),GUo=o(" (I-BERT model)"),OUo=l(),Yb=a("li"),Z5e=a("strong"),VUo=o("layoutlm"),XUo=o(" \u2014 "),dW=a("a"),zUo=o("LayoutLMForSequenceClassification"),WUo=o(" (LayoutLM model)"),QUo=l(),Kb=a("li"),e1e=a("strong"),UUo=o("layoutlmv2"),HUo=o(" \u2014 "),cW=a("a"),JUo=o("LayoutLMv2ForSequenceClassification"),YUo=o(" (LayoutLMv2 model)"),KUo=l(),Zb=a("li"),o1e=a("strong"),ZUo=o("layoutlmv3"),eHo=o(" \u2014 "),fW=a("a"),oHo=o("LayoutLMv3ForSequenceClassification"),rHo=o(" (LayoutLMv3 model)"),tHo=l(),ev=a("li"),r1e=a("strong"),aHo=o("led"),nHo=o(" \u2014 "),mW=a("a"),sHo=o("LEDForSequenceClassification"),lHo=o(" (LED model)"),iHo=l(),ov=a("li"),t1e=a("strong"),dHo=o("longformer"),cHo=o(" \u2014 "),gW=a("a"),fHo=o("LongformerForSequenceClassification"),mHo=o(" (Longformer model)"),gHo=l(),rv=a("li"),a1e=a("strong"),hHo=o("luke"),pHo=o(" \u2014 "),hW=a("a"),_Ho=o("LukeForSequenceClassification"),uHo=o(" (LUKE model)"),bHo=l(),tv=a("li"),n1e=a("strong"),vHo=o("mbart"),FHo=o(" \u2014 "),pW=a("a"),THo=o("MBartForSequenceClassification"),MHo=o(" (mBART model)"),EHo=l(),av=a("li"),s1e=a("strong"),CHo=o("megatron-bert"),wHo=o(" \u2014 "),_W=a("a"),AHo=o("MegatronBertForSequenceClassification"),LHo=o(" (Megatron-BERT model)"),yHo=l(),nv=a("li"),l1e=a("strong"),xHo=o("mobilebert"),$Ho=o(" \u2014 "),uW=a("a"),kHo=o("MobileBertForSequenceClassification"),SHo=o(" (MobileBERT model)"),RHo=l(),sv=a("li"),i1e=a("strong"),PHo=o("mpnet"),BHo=o(" \u2014 "),bW=a("a"),IHo=o("MPNetForSequenceClassification"),NHo=o(" (MPNet model)"),qHo=l(),lv=a("li"),d1e=a("strong"),jHo=o("mvp"),DHo=o(" \u2014 "),vW=a("a"),GHo=o("MvpForSequenceClassification"),OHo=o(" (MVP model)"),VHo=l(),iv=a("li"),c1e=a("strong"),XHo=o("nezha"),zHo=o(" \u2014 "),FW=a("a"),WHo=o("NezhaForSequenceClassification"),QHo=o(" (Nezha model)"),UHo=l(),dv=a("li"),f1e=a("strong"),HHo=o("nystromformer"),JHo=o(" \u2014 "),TW=a("a"),YHo=o("NystromformerForSequenceClassification"),KHo=o(" (Nystr\xF6mformer model)"),ZHo=l(),cv=a("li"),m1e=a("strong"),eJo=o("openai-gpt"),oJo=o(" \u2014 "),MW=a("a"),rJo=o("OpenAIGPTForSequenceClassification"),tJo=o(" (OpenAI GPT model)"),aJo=l(),fv=a("li"),g1e=a("strong"),nJo=o("opt"),sJo=o(" \u2014 "),EW=a("a"),lJo=o("OPTForSequenceClassification"),iJo=o(" (OPT model)"),dJo=l(),mv=a("li"),h1e=a("strong"),cJo=o("perceiver"),fJo=o(" \u2014 "),CW=a("a"),mJo=o("PerceiverForSequenceClassification"),gJo=o(" (Perceiver model)"),hJo=l(),gv=a("li"),p1e=a("strong"),pJo=o("plbart"),_Jo=o(" \u2014 "),wW=a("a"),uJo=o("PLBartForSequenceClassification"),bJo=o(" (PLBart model)"),vJo=l(),hv=a("li"),_1e=a("strong"),FJo=o("qdqbert"),TJo=o(" \u2014 "),AW=a("a"),MJo=o("QDQBertForSequenceClassification"),EJo=o(" (QDQBert model)"),CJo=l(),pv=a("li"),u1e=a("strong"),wJo=o("reformer"),AJo=o(" \u2014 "),LW=a("a"),LJo=o("ReformerForSequenceClassification"),yJo=o(" (Reformer model)"),xJo=l(),_v=a("li"),b1e=a("strong"),$Jo=o("rembert"),kJo=o(" \u2014 "),yW=a("a"),SJo=o("RemBertForSequenceClassification"),RJo=o(" (RemBERT model)"),PJo=l(),uv=a("li"),v1e=a("strong"),BJo=o("roberta"),IJo=o(" \u2014 "),xW=a("a"),NJo=o("RobertaForSequenceClassification"),qJo=o(" (RoBERTa model)"),jJo=l(),bv=a("li"),F1e=a("strong"),DJo=o("roformer"),GJo=o(" \u2014 "),$W=a("a"),OJo=o("RoFormerForSequenceClassification"),VJo=o(" (RoFormer model)"),XJo=l(),vv=a("li"),T1e=a("strong"),zJo=o("squeezebert"),WJo=o(" \u2014 "),kW=a("a"),QJo=o("SqueezeBertForSequenceClassification"),UJo=o(" (SqueezeBERT model)"),HJo=l(),Fv=a("li"),M1e=a("strong"),JJo=o("tapas"),YJo=o(" \u2014 "),SW=a("a"),KJo=o("TapasForSequenceClassification"),ZJo=o(" (TAPAS model)"),eYo=l(),Tv=a("li"),E1e=a("strong"),oYo=o("transfo-xl"),rYo=o(" \u2014 "),RW=a("a"),tYo=o("TransfoXLForSequenceClassification"),aYo=o(" (Transformer-XL model)"),nYo=l(),Mv=a("li"),C1e=a("strong"),sYo=o("xlm"),lYo=o(" \u2014 "),PW=a("a"),iYo=o("XLMForSequenceClassification"),dYo=o(" (XLM model)"),cYo=l(),Ev=a("li"),w1e=a("strong"),fYo=o("xlm-roberta"),mYo=o(" \u2014 "),BW=a("a"),gYo=o("XLMRobertaForSequenceClassification"),hYo=o(" (XLM-RoBERTa model)"),pYo=l(),Cv=a("li"),A1e=a("strong"),_Yo=o("xlm-roberta-xl"),uYo=o(" \u2014 "),IW=a("a"),bYo=o("XLMRobertaXLForSequenceClassification"),vYo=o(" (XLM-RoBERTa-XL model)"),FYo=l(),wv=a("li"),L1e=a("strong"),TYo=o("xlnet"),MYo=o(" \u2014 "),NW=a("a"),EYo=o("XLNetForSequenceClassification"),CYo=o(" (XLNet model)"),wYo=l(),Av=a("li"),y1e=a("strong"),AYo=o("yoso"),LYo=o(" \u2014 "),qW=a("a"),yYo=o("YosoForSequenceClassification"),xYo=o(" (YOSO model)"),$Yo=l(),Lv=a("p"),kYo=o("The model is set in evaluation mode by default using "),x1e=a("code"),SYo=o("model.eval()"),RYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=a("code"),PYo=o("model.train()"),BYo=l(),F(yv.$$.fragment),CUe=l(),Fd=a("h2"),xv=a("a"),k1e=a("span"),F(v9.$$.fragment),IYo=l(),S1e=a("span"),NYo=o("AutoModelForMultipleChoice"),wUe=l(),qo=a("div"),F(F9.$$.fragment),qYo=l(),Td=a("p"),jYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jW=a("a"),DYo=o("from_pretrained()"),GYo=o(" class method or the "),DW=a("a"),OYo=o("from_config()"),VYo=o(` class
method.`),XYo=l(),T9=a("p"),zYo=o("This class cannot be instantiated directly using "),R1e=a("code"),WYo=o("__init__()"),QYo=o(" (throws an error)."),UYo=l(),bt=a("div"),F(M9.$$.fragment),HYo=l(),P1e=a("p"),JYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YYo=l(),Md=a("p"),KYo=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),ZYo=o("not"),eKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),oKo=o("from_pretrained()"),rKo=o(" to load the model weights."),tKo=l(),F($v.$$.fragment),aKo=l(),ao=a("div"),F(E9.$$.fragment),nKo=l(),I1e=a("p"),sKo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lKo=l(),Ha=a("p"),iKo=o("The model class to instantiate is selected based on the "),N1e=a("code"),dKo=o("model_type"),cKo=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),fKo=o("pretrained_model_name_or_path"),mKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),gKo=o("pretrained_model_name_or_path"),hKo=o(":"),pKo=l(),Z=a("ul"),kv=a("li"),D1e=a("strong"),_Ko=o("albert"),uKo=o(" \u2014 "),OW=a("a"),bKo=o("AlbertForMultipleChoice"),vKo=o(" (ALBERT model)"),FKo=l(),Sv=a("li"),G1e=a("strong"),TKo=o("bert"),MKo=o(" \u2014 "),VW=a("a"),EKo=o("BertForMultipleChoice"),CKo=o(" (BERT model)"),wKo=l(),Rv=a("li"),O1e=a("strong"),AKo=o("big_bird"),LKo=o(" \u2014 "),XW=a("a"),yKo=o("BigBirdForMultipleChoice"),xKo=o(" (BigBird model)"),$Ko=l(),Pv=a("li"),V1e=a("strong"),kKo=o("camembert"),SKo=o(" \u2014 "),zW=a("a"),RKo=o("CamembertForMultipleChoice"),PKo=o(" (CamemBERT model)"),BKo=l(),Bv=a("li"),X1e=a("strong"),IKo=o("canine"),NKo=o(" \u2014 "),WW=a("a"),qKo=o("CanineForMultipleChoice"),jKo=o(" (CANINE model)"),DKo=l(),Iv=a("li"),z1e=a("strong"),GKo=o("convbert"),OKo=o(" \u2014 "),QW=a("a"),VKo=o("ConvBertForMultipleChoice"),XKo=o(" (ConvBERT model)"),zKo=l(),Nv=a("li"),W1e=a("strong"),WKo=o("data2vec-text"),QKo=o(" \u2014 "),UW=a("a"),UKo=o("Data2VecTextForMultipleChoice"),HKo=o(" (Data2VecText model)"),JKo=l(),qv=a("li"),Q1e=a("strong"),YKo=o("deberta-v2"),KKo=o(" \u2014 "),HW=a("a"),ZKo=o("DebertaV2ForMultipleChoice"),eZo=o(" (DeBERTa-v2 model)"),oZo=l(),jv=a("li"),U1e=a("strong"),rZo=o("distilbert"),tZo=o(" \u2014 "),JW=a("a"),aZo=o("DistilBertForMultipleChoice"),nZo=o(" (DistilBERT model)"),sZo=l(),Dv=a("li"),H1e=a("strong"),lZo=o("electra"),iZo=o(" \u2014 "),YW=a("a"),dZo=o("ElectraForMultipleChoice"),cZo=o(" (ELECTRA model)"),fZo=l(),Gv=a("li"),J1e=a("strong"),mZo=o("flaubert"),gZo=o(" \u2014 "),KW=a("a"),hZo=o("FlaubertForMultipleChoice"),pZo=o(" (FlauBERT model)"),_Zo=l(),Ov=a("li"),Y1e=a("strong"),uZo=o("fnet"),bZo=o(" \u2014 "),ZW=a("a"),vZo=o("FNetForMultipleChoice"),FZo=o(" (FNet model)"),TZo=l(),Vv=a("li"),K1e=a("strong"),MZo=o("funnel"),EZo=o(" \u2014 "),eQ=a("a"),CZo=o("FunnelForMultipleChoice"),wZo=o(" (Funnel Transformer model)"),AZo=l(),Xv=a("li"),Z1e=a("strong"),LZo=o("ibert"),yZo=o(" \u2014 "),oQ=a("a"),xZo=o("IBertForMultipleChoice"),$Zo=o(" (I-BERT model)"),kZo=l(),zv=a("li"),e2e=a("strong"),SZo=o("longformer"),RZo=o(" \u2014 "),rQ=a("a"),PZo=o("LongformerForMultipleChoice"),BZo=o(" (Longformer model)"),IZo=l(),Wv=a("li"),o2e=a("strong"),NZo=o("luke"),qZo=o(" \u2014 "),tQ=a("a"),jZo=o("LukeForMultipleChoice"),DZo=o(" (LUKE model)"),GZo=l(),Qv=a("li"),r2e=a("strong"),OZo=o("megatron-bert"),VZo=o(" \u2014 "),aQ=a("a"),XZo=o("MegatronBertForMultipleChoice"),zZo=o(" (Megatron-BERT model)"),WZo=l(),Uv=a("li"),t2e=a("strong"),QZo=o("mobilebert"),UZo=o(" \u2014 "),nQ=a("a"),HZo=o("MobileBertForMultipleChoice"),JZo=o(" (MobileBERT model)"),YZo=l(),Hv=a("li"),a2e=a("strong"),KZo=o("mpnet"),ZZo=o(" \u2014 "),sQ=a("a"),eer=o("MPNetForMultipleChoice"),oer=o(" (MPNet model)"),rer=l(),Jv=a("li"),n2e=a("strong"),ter=o("nezha"),aer=o(" \u2014 "),lQ=a("a"),ner=o("NezhaForMultipleChoice"),ser=o(" (Nezha model)"),ler=l(),Yv=a("li"),s2e=a("strong"),ier=o("nystromformer"),der=o(" \u2014 "),iQ=a("a"),cer=o("NystromformerForMultipleChoice"),fer=o(" (Nystr\xF6mformer model)"),mer=l(),Kv=a("li"),l2e=a("strong"),ger=o("qdqbert"),her=o(" \u2014 "),dQ=a("a"),per=o("QDQBertForMultipleChoice"),_er=o(" (QDQBert model)"),uer=l(),Zv=a("li"),i2e=a("strong"),ber=o("rembert"),ver=o(" \u2014 "),cQ=a("a"),Fer=o("RemBertForMultipleChoice"),Ter=o(" (RemBERT model)"),Mer=l(),eF=a("li"),d2e=a("strong"),Eer=o("roberta"),Cer=o(" \u2014 "),fQ=a("a"),wer=o("RobertaForMultipleChoice"),Aer=o(" (RoBERTa model)"),Ler=l(),oF=a("li"),c2e=a("strong"),yer=o("roformer"),xer=o(" \u2014 "),mQ=a("a"),$er=o("RoFormerForMultipleChoice"),ker=o(" (RoFormer model)"),Ser=l(),rF=a("li"),f2e=a("strong"),Rer=o("squeezebert"),Per=o(" \u2014 "),gQ=a("a"),Ber=o("SqueezeBertForMultipleChoice"),Ier=o(" (SqueezeBERT model)"),Ner=l(),tF=a("li"),m2e=a("strong"),qer=o("xlm"),jer=o(" \u2014 "),hQ=a("a"),Der=o("XLMForMultipleChoice"),Ger=o(" (XLM model)"),Oer=l(),aF=a("li"),g2e=a("strong"),Ver=o("xlm-roberta"),Xer=o(" \u2014 "),pQ=a("a"),zer=o("XLMRobertaForMultipleChoice"),Wer=o(" (XLM-RoBERTa model)"),Qer=l(),nF=a("li"),h2e=a("strong"),Uer=o("xlm-roberta-xl"),Her=o(" \u2014 "),_Q=a("a"),Jer=o("XLMRobertaXLForMultipleChoice"),Yer=o(" (XLM-RoBERTa-XL model)"),Ker=l(),sF=a("li"),p2e=a("strong"),Zer=o("xlnet"),eor=o(" \u2014 "),uQ=a("a"),oor=o("XLNetForMultipleChoice"),ror=o(" (XLNet model)"),tor=l(),lF=a("li"),_2e=a("strong"),aor=o("yoso"),nor=o(" \u2014 "),bQ=a("a"),sor=o("YosoForMultipleChoice"),lor=o(" (YOSO model)"),ior=l(),iF=a("p"),dor=o("The model is set in evaluation mode by default using "),u2e=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=a("code"),gor=o("model.train()"),hor=l(),F(dF.$$.fragment),AUe=l(),Ed=a("h2"),cF=a("a"),v2e=a("span"),F(C9.$$.fragment),por=l(),F2e=a("span"),_or=o("AutoModelForNextSentencePrediction"),LUe=l(),jo=a("div"),F(w9.$$.fragment),uor=l(),Cd=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vQ=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),FQ=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),A9=a("p"),Cor=o("This class cannot be instantiated directly using "),T2e=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),Lor=l(),vt=a("div"),F(L9.$$.fragment),yor=l(),M2e=a("p"),xor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$or=l(),wd=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Por=o("from_pretrained()"),Bor=o(" to load the model weights."),Ior=l(),F(fF.$$.fragment),Nor=l(),no=a("div"),F(y9.$$.fragment),qor=l(),C2e=a("p"),jor=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Dor=l(),Ja=a("p"),Gor=o("The model class to instantiate is selected based on the "),w2e=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(":"),Uor=l(),Do=a("ul"),mF=a("li"),y2e=a("strong"),Hor=o("bert"),Jor=o(" \u2014 "),MQ=a("a"),Yor=o("BertForNextSentencePrediction"),Kor=o(" (BERT model)"),Zor=l(),gF=a("li"),x2e=a("strong"),err=o("fnet"),orr=o(" \u2014 "),EQ=a("a"),rrr=o("FNetForNextSentencePrediction"),trr=o(" (FNet model)"),arr=l(),hF=a("li"),$2e=a("strong"),nrr=o("megatron-bert"),srr=o(" \u2014 "),CQ=a("a"),lrr=o("MegatronBertForNextSentencePrediction"),irr=o(" (Megatron-BERT model)"),drr=l(),pF=a("li"),k2e=a("strong"),crr=o("mobilebert"),frr=o(" \u2014 "),wQ=a("a"),mrr=o("MobileBertForNextSentencePrediction"),grr=o(" (MobileBERT model)"),hrr=l(),_F=a("li"),S2e=a("strong"),prr=o("nezha"),_rr=o(" \u2014 "),AQ=a("a"),urr=o("NezhaForNextSentencePrediction"),brr=o(" (Nezha model)"),vrr=l(),uF=a("li"),R2e=a("strong"),Frr=o("qdqbert"),Trr=o(" \u2014 "),LQ=a("a"),Mrr=o("QDQBertForNextSentencePrediction"),Err=o(" (QDQBert model)"),Crr=l(),bF=a("p"),wrr=o("The model is set in evaluation mode by default using "),P2e=a("code"),Arr=o("model.eval()"),Lrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),yrr=o("model.train()"),xrr=l(),F(vF.$$.fragment),yUe=l(),Ad=a("h2"),FF=a("a"),I2e=a("span"),F(x9.$$.fragment),$rr=l(),N2e=a("span"),krr=o("AutoModelForTokenClassification"),xUe=l(),Go=a("div"),F($9.$$.fragment),Srr=l(),Ld=a("p"),Rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yQ=a("a"),Prr=o("from_pretrained()"),Brr=o(" class method or the "),xQ=a("a"),Irr=o("from_config()"),Nrr=o(` class
method.`),qrr=l(),k9=a("p"),jrr=o("This class cannot be instantiated directly using "),q2e=a("code"),Drr=o("__init__()"),Grr=o(" (throws an error)."),Orr=l(),Ft=a("div"),F(S9.$$.fragment),Vrr=l(),j2e=a("p"),Xrr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zrr=l(),yd=a("p"),Wrr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),Qrr=o("not"),Urr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Hrr=o("from_pretrained()"),Jrr=o(" to load the model weights."),Yrr=l(),F(TF.$$.fragment),Krr=l(),so=a("div"),F(R9.$$.fragment),Zrr=l(),G2e=a("p"),etr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),otr=l(),Ya=a("p"),rtr=o("The model class to instantiate is selected based on the "),O2e=a("code"),ttr=o("model_type"),atr=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),ntr=o("pretrained_model_name_or_path"),str=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(":"),dtr=l(),H=a("ul"),MF=a("li"),z2e=a("strong"),ctr=o("albert"),ftr=o(" \u2014 "),kQ=a("a"),mtr=o("AlbertForTokenClassification"),gtr=o(" (ALBERT model)"),htr=l(),EF=a("li"),W2e=a("strong"),ptr=o("bert"),_tr=o(" \u2014 "),SQ=a("a"),utr=o("BertForTokenClassification"),btr=o(" (BERT model)"),vtr=l(),CF=a("li"),Q2e=a("strong"),Ftr=o("big_bird"),Ttr=o(" \u2014 "),RQ=a("a"),Mtr=o("BigBirdForTokenClassification"),Etr=o(" (BigBird model)"),Ctr=l(),wF=a("li"),U2e=a("strong"),wtr=o("bloom"),Atr=o(" \u2014 "),PQ=a("a"),Ltr=o("BloomForTokenClassification"),ytr=o(" (BLOOM model)"),xtr=l(),AF=a("li"),H2e=a("strong"),$tr=o("camembert"),ktr=o(" \u2014 "),BQ=a("a"),Str=o("CamembertForTokenClassification"),Rtr=o(" (CamemBERT model)"),Ptr=l(),LF=a("li"),J2e=a("strong"),Btr=o("canine"),Itr=o(" \u2014 "),IQ=a("a"),Ntr=o("CanineForTokenClassification"),qtr=o(" (CANINE model)"),jtr=l(),yF=a("li"),Y2e=a("strong"),Dtr=o("convbert"),Gtr=o(" \u2014 "),NQ=a("a"),Otr=o("ConvBertForTokenClassification"),Vtr=o(" (ConvBERT model)"),Xtr=l(),xF=a("li"),K2e=a("strong"),ztr=o("data2vec-text"),Wtr=o(" \u2014 "),qQ=a("a"),Qtr=o("Data2VecTextForTokenClassification"),Utr=o(" (Data2VecText model)"),Htr=l(),$F=a("li"),Z2e=a("strong"),Jtr=o("deberta"),Ytr=o(" \u2014 "),jQ=a("a"),Ktr=o("DebertaForTokenClassification"),Ztr=o(" (DeBERTa model)"),ear=l(),kF=a("li"),ebe=a("strong"),oar=o("deberta-v2"),rar=o(" \u2014 "),DQ=a("a"),tar=o("DebertaV2ForTokenClassification"),aar=o(" (DeBERTa-v2 model)"),nar=l(),SF=a("li"),obe=a("strong"),sar=o("distilbert"),lar=o(" \u2014 "),GQ=a("a"),iar=o("DistilBertForTokenClassification"),dar=o(" (DistilBERT model)"),car=l(),RF=a("li"),rbe=a("strong"),far=o("electra"),mar=o(" \u2014 "),OQ=a("a"),gar=o("ElectraForTokenClassification"),har=o(" (ELECTRA model)"),par=l(),PF=a("li"),tbe=a("strong"),_ar=o("flaubert"),uar=o(" \u2014 "),VQ=a("a"),bar=o("FlaubertForTokenClassification"),Far=o(" (FlauBERT model)"),Tar=l(),BF=a("li"),abe=a("strong"),Mar=o("fnet"),Ear=o(" \u2014 "),XQ=a("a"),Car=o("FNetForTokenClassification"),war=o(" (FNet model)"),Aar=l(),IF=a("li"),nbe=a("strong"),Lar=o("funnel"),yar=o(" \u2014 "),zQ=a("a"),xar=o("FunnelForTokenClassification"),$ar=o(" (Funnel Transformer model)"),kar=l(),NF=a("li"),sbe=a("strong"),Sar=o("gpt2"),Rar=o(" \u2014 "),WQ=a("a"),Par=o("GPT2ForTokenClassification"),Bar=o(" (OpenAI GPT-2 model)"),Iar=l(),qF=a("li"),lbe=a("strong"),Nar=o("ibert"),qar=o(" \u2014 "),QQ=a("a"),jar=o("IBertForTokenClassification"),Dar=o(" (I-BERT model)"),Gar=l(),jF=a("li"),ibe=a("strong"),Oar=o("layoutlm"),Var=o(" \u2014 "),UQ=a("a"),Xar=o("LayoutLMForTokenClassification"),zar=o(" (LayoutLM model)"),War=l(),DF=a("li"),dbe=a("strong"),Qar=o("layoutlmv2"),Uar=o(" \u2014 "),HQ=a("a"),Har=o("LayoutLMv2ForTokenClassification"),Jar=o(" (LayoutLMv2 model)"),Yar=l(),GF=a("li"),cbe=a("strong"),Kar=o("layoutlmv3"),Zar=o(" \u2014 "),JQ=a("a"),enr=o("LayoutLMv3ForTokenClassification"),onr=o(" (LayoutLMv3 model)"),rnr=l(),OF=a("li"),fbe=a("strong"),tnr=o("longformer"),anr=o(" \u2014 "),YQ=a("a"),nnr=o("LongformerForTokenClassification"),snr=o(" (Longformer model)"),lnr=l(),VF=a("li"),mbe=a("strong"),inr=o("luke"),dnr=o(" \u2014 "),KQ=a("a"),cnr=o("LukeForTokenClassification"),fnr=o(" (LUKE model)"),mnr=l(),XF=a("li"),gbe=a("strong"),gnr=o("megatron-bert"),hnr=o(" \u2014 "),ZQ=a("a"),pnr=o("MegatronBertForTokenClassification"),_nr=o(" (Megatron-BERT model)"),unr=l(),zF=a("li"),hbe=a("strong"),bnr=o("mobilebert"),vnr=o(" \u2014 "),eU=a("a"),Fnr=o("MobileBertForTokenClassification"),Tnr=o(" (MobileBERT model)"),Mnr=l(),WF=a("li"),pbe=a("strong"),Enr=o("mpnet"),Cnr=o(" \u2014 "),oU=a("a"),wnr=o("MPNetForTokenClassification"),Anr=o(" (MPNet model)"),Lnr=l(),QF=a("li"),_be=a("strong"),ynr=o("nezha"),xnr=o(" \u2014 "),rU=a("a"),$nr=o("NezhaForTokenClassification"),knr=o(" (Nezha model)"),Snr=l(),UF=a("li"),ube=a("strong"),Rnr=o("nystromformer"),Pnr=o(" \u2014 "),tU=a("a"),Bnr=o("NystromformerForTokenClassification"),Inr=o(" (Nystr\xF6mformer model)"),Nnr=l(),HF=a("li"),bbe=a("strong"),qnr=o("qdqbert"),jnr=o(" \u2014 "),aU=a("a"),Dnr=o("QDQBertForTokenClassification"),Gnr=o(" (QDQBert model)"),Onr=l(),JF=a("li"),vbe=a("strong"),Vnr=o("rembert"),Xnr=o(" \u2014 "),nU=a("a"),znr=o("RemBertForTokenClassification"),Wnr=o(" (RemBERT model)"),Qnr=l(),YF=a("li"),Fbe=a("strong"),Unr=o("roberta"),Hnr=o(" \u2014 "),sU=a("a"),Jnr=o("RobertaForTokenClassification"),Ynr=o(" (RoBERTa model)"),Knr=l(),KF=a("li"),Tbe=a("strong"),Znr=o("roformer"),esr=o(" \u2014 "),lU=a("a"),osr=o("RoFormerForTokenClassification"),rsr=o(" (RoFormer model)"),tsr=l(),ZF=a("li"),Mbe=a("strong"),asr=o("squeezebert"),nsr=o(" \u2014 "),iU=a("a"),ssr=o("SqueezeBertForTokenClassification"),lsr=o(" (SqueezeBERT model)"),isr=l(),eT=a("li"),Ebe=a("strong"),dsr=o("xlm"),csr=o(" \u2014 "),dU=a("a"),fsr=o("XLMForTokenClassification"),msr=o(" (XLM model)"),gsr=l(),oT=a("li"),Cbe=a("strong"),hsr=o("xlm-roberta"),psr=o(" \u2014 "),cU=a("a"),_sr=o("XLMRobertaForTokenClassification"),usr=o(" (XLM-RoBERTa model)"),bsr=l(),rT=a("li"),wbe=a("strong"),vsr=o("xlm-roberta-xl"),Fsr=o(" \u2014 "),fU=a("a"),Tsr=o("XLMRobertaXLForTokenClassification"),Msr=o(" (XLM-RoBERTa-XL model)"),Esr=l(),tT=a("li"),Abe=a("strong"),Csr=o("xlnet"),wsr=o(" \u2014 "),mU=a("a"),Asr=o("XLNetForTokenClassification"),Lsr=o(" (XLNet model)"),ysr=l(),aT=a("li"),Lbe=a("strong"),xsr=o("yoso"),$sr=o(" \u2014 "),gU=a("a"),ksr=o("YosoForTokenClassification"),Ssr=o(" (YOSO model)"),Rsr=l(),nT=a("p"),Psr=o("The model is set in evaluation mode by default using "),ybe=a("code"),Bsr=o("model.eval()"),Isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=a("code"),Nsr=o("model.train()"),qsr=l(),F(sT.$$.fragment),$Ue=l(),xd=a("h2"),lT=a("a"),$be=a("span"),F(P9.$$.fragment),jsr=l(),kbe=a("span"),Dsr=o("AutoModelForQuestionAnswering"),kUe=l(),Oo=a("div"),F(B9.$$.fragment),Gsr=l(),$d=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hU=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" class method or the "),pU=a("a"),zsr=o("from_config()"),Wsr=o(` class
method.`),Qsr=l(),I9=a("p"),Usr=o("This class cannot be instantiated directly using "),Sbe=a("code"),Hsr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),Tt=a("div"),F(N9.$$.fragment),Ksr=l(),Rbe=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),elr=l(),kd=a("p"),olr=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),rlr=o("not"),tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),alr=o("from_pretrained()"),nlr=o(" to load the model weights."),slr=l(),F(iT.$$.fragment),llr=l(),lo=a("div"),F(q9.$$.fragment),ilr=l(),Bbe=a("p"),dlr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),clr=l(),Ka=a("p"),flr=o("The model class to instantiate is selected based on the "),Ibe=a("code"),mlr=o("model_type"),glr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),hlr=o("pretrained_model_name_or_path"),plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),_lr=o("pretrained_model_name_or_path"),ulr=o(":"),blr=l(),V=a("ul"),dT=a("li"),jbe=a("strong"),vlr=o("albert"),Flr=o(" \u2014 "),uU=a("a"),Tlr=o("AlbertForQuestionAnswering"),Mlr=o(" (ALBERT model)"),Elr=l(),cT=a("li"),Dbe=a("strong"),Clr=o("bart"),wlr=o(" \u2014 "),bU=a("a"),Alr=o("BartForQuestionAnswering"),Llr=o(" (BART model)"),ylr=l(),fT=a("li"),Gbe=a("strong"),xlr=o("bert"),$lr=o(" \u2014 "),vU=a("a"),klr=o("BertForQuestionAnswering"),Slr=o(" (BERT model)"),Rlr=l(),mT=a("li"),Obe=a("strong"),Plr=o("big_bird"),Blr=o(" \u2014 "),FU=a("a"),Ilr=o("BigBirdForQuestionAnswering"),Nlr=o(" (BigBird model)"),qlr=l(),gT=a("li"),Vbe=a("strong"),jlr=o("bigbird_pegasus"),Dlr=o(" \u2014 "),TU=a("a"),Glr=o("BigBirdPegasusForQuestionAnswering"),Olr=o(" (BigBird-Pegasus model)"),Vlr=l(),hT=a("li"),Xbe=a("strong"),Xlr=o("camembert"),zlr=o(" \u2014 "),MU=a("a"),Wlr=o("CamembertForQuestionAnswering"),Qlr=o(" (CamemBERT model)"),Ulr=l(),pT=a("li"),zbe=a("strong"),Hlr=o("canine"),Jlr=o(" \u2014 "),EU=a("a"),Ylr=o("CanineForQuestionAnswering"),Klr=o(" (CANINE model)"),Zlr=l(),_T=a("li"),Wbe=a("strong"),eir=o("convbert"),oir=o(" \u2014 "),CU=a("a"),rir=o("ConvBertForQuestionAnswering"),tir=o(" (ConvBERT model)"),air=l(),uT=a("li"),Qbe=a("strong"),nir=o("data2vec-text"),sir=o(" \u2014 "),wU=a("a"),lir=o("Data2VecTextForQuestionAnswering"),iir=o(" (Data2VecText model)"),dir=l(),bT=a("li"),Ube=a("strong"),cir=o("deberta"),fir=o(" \u2014 "),AU=a("a"),mir=o("DebertaForQuestionAnswering"),gir=o(" (DeBERTa model)"),hir=l(),vT=a("li"),Hbe=a("strong"),pir=o("deberta-v2"),_ir=o(" \u2014 "),LU=a("a"),uir=o("DebertaV2ForQuestionAnswering"),bir=o(" (DeBERTa-v2 model)"),vir=l(),FT=a("li"),Jbe=a("strong"),Fir=o("distilbert"),Tir=o(" \u2014 "),yU=a("a"),Mir=o("DistilBertForQuestionAnswering"),Eir=o(" (DistilBERT model)"),Cir=l(),TT=a("li"),Ybe=a("strong"),wir=o("electra"),Air=o(" \u2014 "),xU=a("a"),Lir=o("ElectraForQuestionAnswering"),yir=o(" (ELECTRA model)"),xir=l(),MT=a("li"),Kbe=a("strong"),$ir=o("flaubert"),kir=o(" \u2014 "),$U=a("a"),Sir=o("FlaubertForQuestionAnsweringSimple"),Rir=o(" (FlauBERT model)"),Pir=l(),ET=a("li"),Zbe=a("strong"),Bir=o("fnet"),Iir=o(" \u2014 "),kU=a("a"),Nir=o("FNetForQuestionAnswering"),qir=o(" (FNet model)"),jir=l(),CT=a("li"),eve=a("strong"),Dir=o("funnel"),Gir=o(" \u2014 "),SU=a("a"),Oir=o("FunnelForQuestionAnswering"),Vir=o(" (Funnel Transformer model)"),Xir=l(),wT=a("li"),ove=a("strong"),zir=o("gptj"),Wir=o(" \u2014 "),RU=a("a"),Qir=o("GPTJForQuestionAnswering"),Uir=o(" (GPT-J model)"),Hir=l(),AT=a("li"),rve=a("strong"),Jir=o("ibert"),Yir=o(" \u2014 "),PU=a("a"),Kir=o("IBertForQuestionAnswering"),Zir=o(" (I-BERT model)"),edr=l(),LT=a("li"),tve=a("strong"),odr=o("layoutlmv2"),rdr=o(" \u2014 "),BU=a("a"),tdr=o("LayoutLMv2ForQuestionAnswering"),adr=o(" (LayoutLMv2 model)"),ndr=l(),yT=a("li"),ave=a("strong"),sdr=o("layoutlmv3"),ldr=o(" \u2014 "),IU=a("a"),idr=o("LayoutLMv3ForQuestionAnswering"),ddr=o(" (LayoutLMv3 model)"),cdr=l(),xT=a("li"),nve=a("strong"),fdr=o("led"),mdr=o(" \u2014 "),NU=a("a"),gdr=o("LEDForQuestionAnswering"),hdr=o(" (LED model)"),pdr=l(),$T=a("li"),sve=a("strong"),_dr=o("longformer"),udr=o(" \u2014 "),qU=a("a"),bdr=o("LongformerForQuestionAnswering"),vdr=o(" (Longformer model)"),Fdr=l(),kT=a("li"),lve=a("strong"),Tdr=o("luke"),Mdr=o(" \u2014 "),jU=a("a"),Edr=o("LukeForQuestionAnswering"),Cdr=o(" (LUKE model)"),wdr=l(),ST=a("li"),ive=a("strong"),Adr=o("lxmert"),Ldr=o(" \u2014 "),DU=a("a"),ydr=o("LxmertForQuestionAnswering"),xdr=o(" (LXMERT model)"),$dr=l(),RT=a("li"),dve=a("strong"),kdr=o("mbart"),Sdr=o(" \u2014 "),GU=a("a"),Rdr=o("MBartForQuestionAnswering"),Pdr=o(" (mBART model)"),Bdr=l(),PT=a("li"),cve=a("strong"),Idr=o("megatron-bert"),Ndr=o(" \u2014 "),OU=a("a"),qdr=o("MegatronBertForQuestionAnswering"),jdr=o(" (Megatron-BERT model)"),Ddr=l(),BT=a("li"),fve=a("strong"),Gdr=o("mobilebert"),Odr=o(" \u2014 "),VU=a("a"),Vdr=o("MobileBertForQuestionAnswering"),Xdr=o(" (MobileBERT model)"),zdr=l(),IT=a("li"),mve=a("strong"),Wdr=o("mpnet"),Qdr=o(" \u2014 "),XU=a("a"),Udr=o("MPNetForQuestionAnswering"),Hdr=o(" (MPNet model)"),Jdr=l(),NT=a("li"),gve=a("strong"),Ydr=o("mvp"),Kdr=o(" \u2014 "),zU=a("a"),Zdr=o("MvpForQuestionAnswering"),ecr=o(" (MVP model)"),ocr=l(),qT=a("li"),hve=a("strong"),rcr=o("nezha"),tcr=o(" \u2014 "),WU=a("a"),acr=o("NezhaForQuestionAnswering"),ncr=o(" (Nezha model)"),scr=l(),jT=a("li"),pve=a("strong"),lcr=o("nystromformer"),icr=o(" \u2014 "),QU=a("a"),dcr=o("NystromformerForQuestionAnswering"),ccr=o(" (Nystr\xF6mformer model)"),fcr=l(),DT=a("li"),_ve=a("strong"),mcr=o("qdqbert"),gcr=o(" \u2014 "),UU=a("a"),hcr=o("QDQBertForQuestionAnswering"),pcr=o(" (QDQBert model)"),_cr=l(),GT=a("li"),uve=a("strong"),ucr=o("reformer"),bcr=o(" \u2014 "),HU=a("a"),vcr=o("ReformerForQuestionAnswering"),Fcr=o(" (Reformer model)"),Tcr=l(),OT=a("li"),bve=a("strong"),Mcr=o("rembert"),Ecr=o(" \u2014 "),JU=a("a"),Ccr=o("RemBertForQuestionAnswering"),wcr=o(" (RemBERT model)"),Acr=l(),VT=a("li"),vve=a("strong"),Lcr=o("roberta"),ycr=o(" \u2014 "),YU=a("a"),xcr=o("RobertaForQuestionAnswering"),$cr=o(" (RoBERTa model)"),kcr=l(),XT=a("li"),Fve=a("strong"),Scr=o("roformer"),Rcr=o(" \u2014 "),KU=a("a"),Pcr=o("RoFormerForQuestionAnswering"),Bcr=o(" (RoFormer model)"),Icr=l(),zT=a("li"),Tve=a("strong"),Ncr=o("splinter"),qcr=o(" \u2014 "),ZU=a("a"),jcr=o("SplinterForQuestionAnswering"),Dcr=o(" (Splinter model)"),Gcr=l(),WT=a("li"),Mve=a("strong"),Ocr=o("squeezebert"),Vcr=o(" \u2014 "),eH=a("a"),Xcr=o("SqueezeBertForQuestionAnswering"),zcr=o(" (SqueezeBERT model)"),Wcr=l(),QT=a("li"),Eve=a("strong"),Qcr=o("xlm"),Ucr=o(" \u2014 "),oH=a("a"),Hcr=o("XLMForQuestionAnsweringSimple"),Jcr=o(" (XLM model)"),Ycr=l(),UT=a("li"),Cve=a("strong"),Kcr=o("xlm-roberta"),Zcr=o(" \u2014 "),rH=a("a"),efr=o("XLMRobertaForQuestionAnswering"),ofr=o(" (XLM-RoBERTa model)"),rfr=l(),HT=a("li"),wve=a("strong"),tfr=o("xlm-roberta-xl"),afr=o(" \u2014 "),tH=a("a"),nfr=o("XLMRobertaXLForQuestionAnswering"),sfr=o(" (XLM-RoBERTa-XL model)"),lfr=l(),JT=a("li"),Ave=a("strong"),ifr=o("xlnet"),dfr=o(" \u2014 "),aH=a("a"),cfr=o("XLNetForQuestionAnsweringSimple"),ffr=o(" (XLNet model)"),mfr=l(),YT=a("li"),Lve=a("strong"),gfr=o("yoso"),hfr=o(" \u2014 "),nH=a("a"),pfr=o("YosoForQuestionAnswering"),_fr=o(" (YOSO model)"),ufr=l(),KT=a("p"),bfr=o("The model is set in evaluation mode by default using "),yve=a("code"),vfr=o("model.eval()"),Ffr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=a("code"),Tfr=o("model.train()"),Mfr=l(),F(ZT.$$.fragment),SUe=l(),Sd=a("h2"),e8=a("a"),$ve=a("span"),F(j9.$$.fragment),Efr=l(),kve=a("span"),Cfr=o("AutoModelForTableQuestionAnswering"),RUe=l(),Vo=a("div"),F(D9.$$.fragment),wfr=l(),Rd=a("p"),Afr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sH=a("a"),Lfr=o("from_pretrained()"),yfr=o(" class method or the "),lH=a("a"),xfr=o("from_config()"),$fr=o(` class
method.`),kfr=l(),G9=a("p"),Sfr=o("This class cannot be instantiated directly using "),Sve=a("code"),Rfr=o("__init__()"),Pfr=o(" (throws an error)."),Bfr=l(),Mt=a("div"),F(O9.$$.fragment),Ifr=l(),Rve=a("p"),Nfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qfr=l(),Pd=a("p"),jfr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),Dfr=o("not"),Gfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),Ofr=o("from_pretrained()"),Vfr=o(" to load the model weights."),Xfr=l(),F(o8.$$.fragment),zfr=l(),io=a("div"),F(V9.$$.fragment),Wfr=l(),Bve=a("p"),Qfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ufr=l(),Za=a("p"),Hfr=o("The model class to instantiate is selected based on the "),Ive=a("code"),Jfr=o("model_type"),Yfr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),Kfr=o("pretrained_model_name_or_path"),Zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(":"),rmr=l(),jve=a("ul"),r8=a("li"),Dve=a("strong"),tmr=o("tapas"),amr=o(" \u2014 "),dH=a("a"),nmr=o("TapasForQuestionAnswering"),smr=o(" (TAPAS model)"),lmr=l(),t8=a("p"),imr=o("The model is set in evaluation mode by default using "),Gve=a("code"),dmr=o("model.eval()"),cmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=a("code"),fmr=o("model.train()"),mmr=l(),F(a8.$$.fragment),PUe=l(),Bd=a("h2"),n8=a("a"),Vve=a("span"),F(X9.$$.fragment),gmr=l(),Xve=a("span"),hmr=o("AutoModelForImageClassification"),BUe=l(),Xo=a("div"),F(z9.$$.fragment),pmr=l(),Id=a("p"),_mr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cH=a("a"),umr=o("from_pretrained()"),bmr=o(" class method or the "),fH=a("a"),vmr=o("from_config()"),Fmr=o(` class
method.`),Tmr=l(),W9=a("p"),Mmr=o("This class cannot be instantiated directly using "),zve=a("code"),Emr=o("__init__()"),Cmr=o(" (throws an error)."),wmr=l(),Et=a("div"),F(Q9.$$.fragment),Amr=l(),Wve=a("p"),Lmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ymr=l(),Nd=a("p"),xmr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),$mr=o("not"),kmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),Smr=o("from_pretrained()"),Rmr=o(" to load the model weights."),Pmr=l(),F(s8.$$.fragment),Bmr=l(),co=a("div"),F(U9.$$.fragment),Imr=l(),Uve=a("p"),Nmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qmr=l(),en=a("p"),jmr=o("The model class to instantiate is selected based on the "),Hve=a("code"),Dmr=o("model_type"),Gmr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),Omr=o("pretrained_model_name_or_path"),Vmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),Xmr=o("pretrained_model_name_or_path"),zmr=o(":"),Wmr=l(),be=a("ul"),l8=a("li"),Kve=a("strong"),Qmr=o("beit"),Umr=o(" \u2014 "),gH=a("a"),Hmr=o("BeitForImageClassification"),Jmr=o(" (BEiT model)"),Ymr=l(),i8=a("li"),Zve=a("strong"),Kmr=o("convnext"),Zmr=o(" \u2014 "),hH=a("a"),egr=o("ConvNextForImageClassification"),ogr=o(" (ConvNeXT model)"),rgr=l(),d8=a("li"),eFe=a("strong"),tgr=o("cvt"),agr=o(" \u2014 "),pH=a("a"),ngr=o("CvtForImageClassification"),sgr=o(" (CvT model)"),lgr=l(),c8=a("li"),oFe=a("strong"),igr=o("data2vec-vision"),dgr=o(" \u2014 "),_H=a("a"),cgr=o("Data2VecVisionForImageClassification"),fgr=o(" (Data2VecVision model)"),mgr=l(),sl=a("li"),rFe=a("strong"),ggr=o("deit"),hgr=o(" \u2014 "),uH=a("a"),pgr=o("DeiTForImageClassification"),_gr=o(" or "),bH=a("a"),ugr=o("DeiTForImageClassificationWithTeacher"),bgr=o(" (DeiT model)"),vgr=l(),f8=a("li"),tFe=a("strong"),Fgr=o("imagegpt"),Tgr=o(" \u2014 "),vH=a("a"),Mgr=o("ImageGPTForImageClassification"),Egr=o(" (ImageGPT model)"),Cgr=l(),ll=a("li"),aFe=a("strong"),wgr=o("levit"),Agr=o(" \u2014 "),FH=a("a"),Lgr=o("LevitForImageClassification"),ygr=o(" or "),TH=a("a"),xgr=o("LevitForImageClassificationWithTeacher"),$gr=o(" (LeViT model)"),kgr=l(),m8=a("li"),nFe=a("strong"),Sgr=o("mobilevit"),Rgr=o(" \u2014 "),MH=a("a"),Pgr=o("MobileViTForImageClassification"),Bgr=o(" (MobileViT model)"),Igr=l(),Ct=a("li"),sFe=a("strong"),Ngr=o("perceiver"),qgr=o(" \u2014 "),EH=a("a"),jgr=o("PerceiverForImageClassificationLearned"),Dgr=o(" or "),CH=a("a"),Ggr=o("PerceiverForImageClassificationFourier"),Ogr=o(" or "),wH=a("a"),Vgr=o("PerceiverForImageClassificationConvProcessing"),Xgr=o(" (Perceiver model)"),zgr=l(),g8=a("li"),lFe=a("strong"),Wgr=o("poolformer"),Qgr=o(" \u2014 "),AH=a("a"),Ugr=o("PoolFormerForImageClassification"),Hgr=o(" (PoolFormer model)"),Jgr=l(),h8=a("li"),iFe=a("strong"),Ygr=o("regnet"),Kgr=o(" \u2014 "),LH=a("a"),Zgr=o("RegNetForImageClassification"),ehr=o(" (RegNet model)"),ohr=l(),p8=a("li"),dFe=a("strong"),rhr=o("resnet"),thr=o(" \u2014 "),yH=a("a"),ahr=o("ResNetForImageClassification"),nhr=o(" (ResNet model)"),shr=l(),_8=a("li"),cFe=a("strong"),lhr=o("segformer"),ihr=o(" \u2014 "),xH=a("a"),dhr=o("SegformerForImageClassification"),chr=o(" (SegFormer model)"),fhr=l(),u8=a("li"),fFe=a("strong"),mhr=o("swin"),ghr=o(" \u2014 "),$H=a("a"),hhr=o("SwinForImageClassification"),phr=o(" (Swin Transformer model)"),_hr=l(),b8=a("li"),mFe=a("strong"),uhr=o("swinv2"),bhr=o(" \u2014 "),kH=a("a"),vhr=o("Swinv2ForImageClassification"),Fhr=o(" (Swin Transformer V2 model)"),Thr=l(),v8=a("li"),gFe=a("strong"),Mhr=o("van"),Ehr=o(" \u2014 "),SH=a("a"),Chr=o("VanForImageClassification"),whr=o(" (VAN model)"),Ahr=l(),F8=a("li"),hFe=a("strong"),Lhr=o("vit"),yhr=o(" \u2014 "),RH=a("a"),xhr=o("ViTForImageClassification"),$hr=o(" (ViT model)"),khr=l(),T8=a("p"),Shr=o("The model is set in evaluation mode by default using "),pFe=a("code"),Rhr=o("model.eval()"),Phr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Fe=a("code"),Bhr=o("model.train()"),Ihr=l(),F(M8.$$.fragment),IUe=l(),qd=a("h2"),E8=a("a"),uFe=a("span"),F(H9.$$.fragment),Nhr=l(),bFe=a("span"),qhr=o("AutoModelForVideoClassification"),NUe=l(),zo=a("div"),F(J9.$$.fragment),jhr=l(),jd=a("p"),Dhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),PH=a("a"),Ghr=o("from_pretrained()"),Ohr=o(" class method or the "),BH=a("a"),Vhr=o("from_config()"),Xhr=o(` class
method.`),zhr=l(),Y9=a("p"),Whr=o("This class cannot be instantiated directly using "),vFe=a("code"),Qhr=o("__init__()"),Uhr=o(" (throws an error)."),Hhr=l(),wt=a("div"),F(K9.$$.fragment),Jhr=l(),FFe=a("p"),Yhr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Khr=l(),Dd=a("p"),Zhr=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),epr=o("not"),opr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),rpr=o("from_pretrained()"),tpr=o(" to load the model weights."),apr=l(),F(C8.$$.fragment),npr=l(),fo=a("div"),F(Z9.$$.fragment),spr=l(),MFe=a("p"),lpr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),ipr=l(),on=a("p"),dpr=o("The model class to instantiate is selected based on the "),EFe=a("code"),cpr=o("model_type"),fpr=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),mpr=o("pretrained_model_name_or_path"),gpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),hpr=o("pretrained_model_name_or_path"),ppr=o(":"),_pr=l(),AFe=a("ul"),w8=a("li"),LFe=a("strong"),upr=o("videomae"),bpr=o(" \u2014 "),NH=a("a"),vpr=o("VideoMAEForVideoClassification"),Fpr=o(" (VideoMAE model)"),Tpr=l(),A8=a("p"),Mpr=o("The model is set in evaluation mode by default using "),yFe=a("code"),Epr=o("model.eval()"),Cpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=a("code"),wpr=o("model.train()"),Apr=l(),F(L8.$$.fragment),qUe=l(),Gd=a("h2"),y8=a("a"),$Fe=a("span"),F(ex.$$.fragment),Lpr=l(),kFe=a("span"),ypr=o("AutoModelForVision2Seq"),jUe=l(),Wo=a("div"),F(ox.$$.fragment),xpr=l(),Od=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qH=a("a"),kpr=o("from_pretrained()"),Spr=o(" class method or the "),jH=a("a"),Rpr=o("from_config()"),Ppr=o(` class
method.`),Bpr=l(),rx=a("p"),Ipr=o("This class cannot be instantiated directly using "),SFe=a("code"),Npr=o("__init__()"),qpr=o(" (throws an error)."),jpr=l(),At=a("div"),F(tx.$$.fragment),Dpr=l(),RFe=a("p"),Gpr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Opr=l(),Vd=a("p"),Vpr=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),Xpr=o("not"),zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),Wpr=o("from_pretrained()"),Qpr=o(" to load the model weights."),Upr=l(),F(x8.$$.fragment),Hpr=l(),mo=a("div"),F(ax.$$.fragment),Jpr=l(),BFe=a("p"),Ypr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kpr=l(),rn=a("p"),Zpr=o("The model class to instantiate is selected based on the "),IFe=a("code"),e_r=o("model_type"),o_r=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),r_r=o("pretrained_model_name_or_path"),t_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(":"),s_r=l(),jFe=a("ul"),$8=a("li"),DFe=a("strong"),l_r=o("vision-encoder-decoder"),i_r=o(" \u2014 "),GH=a("a"),d_r=o("VisionEncoderDecoderModel"),c_r=o(" (Vision Encoder decoder model)"),f_r=l(),k8=a("p"),m_r=o("The model is set in evaluation mode by default using "),GFe=a("code"),g_r=o("model.eval()"),h_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OFe=a("code"),p_r=o("model.train()"),__r=l(),F(S8.$$.fragment),DUe=l(),Xd=a("h2"),R8=a("a"),VFe=a("span"),F(nx.$$.fragment),u_r=l(),XFe=a("span"),b_r=o("AutoModelForVisualQuestionAnswering"),GUe=l(),Qo=a("div"),F(sx.$$.fragment),v_r=l(),zd=a("p"),F_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OH=a("a"),T_r=o("from_pretrained()"),M_r=o(" class method or the "),VH=a("a"),E_r=o("from_config()"),C_r=o(` class
method.`),w_r=l(),lx=a("p"),A_r=o("This class cannot be instantiated directly using "),zFe=a("code"),L_r=o("__init__()"),y_r=o(" (throws an error)."),x_r=l(),Lt=a("div"),F(ix.$$.fragment),$_r=l(),WFe=a("p"),k_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),S_r=l(),Wd=a("p"),R_r=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),P_r=o("not"),B_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),I_r=o("from_pretrained()"),N_r=o(" to load the model weights."),q_r=l(),F(P8.$$.fragment),j_r=l(),go=a("div"),F(dx.$$.fragment),D_r=l(),UFe=a("p"),G_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),O_r=l(),tn=a("p"),V_r=o("The model class to instantiate is selected based on the "),HFe=a("code"),X_r=o("model_type"),z_r=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),W_r=o("pretrained_model_name_or_path"),Q_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),U_r=o("pretrained_model_name_or_path"),H_r=o(":"),J_r=l(),KFe=a("ul"),B8=a("li"),ZFe=a("strong"),Y_r=o("vilt"),K_r=o(" \u2014 "),zH=a("a"),Z_r=o("ViltForQuestionAnswering"),eur=o(" (ViLT model)"),our=l(),I8=a("p"),rur=o("The model is set in evaluation mode by default using "),eTe=a("code"),tur=o("model.eval()"),aur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oTe=a("code"),nur=o("model.train()"),sur=l(),F(N8.$$.fragment),OUe=l(),Qd=a("h2"),q8=a("a"),rTe=a("span"),F(cx.$$.fragment),lur=l(),tTe=a("span"),iur=o("AutoModelForAudioClassification"),VUe=l(),Uo=a("div"),F(fx.$$.fragment),dur=l(),Ud=a("p"),cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WH=a("a"),fur=o("from_pretrained()"),mur=o(" class method or the "),QH=a("a"),gur=o("from_config()"),hur=o(` class
method.`),pur=l(),mx=a("p"),_ur=o("This class cannot be instantiated directly using "),aTe=a("code"),uur=o("__init__()"),bur=o(" (throws an error)."),vur=l(),yt=a("div"),F(gx.$$.fragment),Fur=l(),nTe=a("p"),Tur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mur=l(),Hd=a("p"),Eur=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),Cur=o("not"),wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),Aur=o("from_pretrained()"),Lur=o(" to load the model weights."),yur=l(),F(j8.$$.fragment),xur=l(),ho=a("div"),F(hx.$$.fragment),$ur=l(),lTe=a("p"),kur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Sur=l(),an=a("p"),Rur=o("The model class to instantiate is selected based on the "),iTe=a("code"),Pur=o("model_type"),Bur=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),Iur=o("pretrained_model_name_or_path"),Nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),qur=o("pretrained_model_name_or_path"),jur=o(":"),Dur=l(),Pe=a("ul"),D8=a("li"),fTe=a("strong"),Gur=o("data2vec-audio"),Our=o(" \u2014 "),HH=a("a"),Vur=o("Data2VecAudioForSequenceClassification"),Xur=o(" (Data2VecAudio model)"),zur=l(),G8=a("li"),mTe=a("strong"),Wur=o("hubert"),Qur=o(" \u2014 "),JH=a("a"),Uur=o("HubertForSequenceClassification"),Hur=o(" (Hubert model)"),Jur=l(),O8=a("li"),gTe=a("strong"),Yur=o("sew"),Kur=o(" \u2014 "),YH=a("a"),Zur=o("SEWForSequenceClassification"),e5r=o(" (SEW model)"),o5r=l(),V8=a("li"),hTe=a("strong"),r5r=o("sew-d"),t5r=o(" \u2014 "),KH=a("a"),a5r=o("SEWDForSequenceClassification"),n5r=o(" (SEW-D model)"),s5r=l(),X8=a("li"),pTe=a("strong"),l5r=o("unispeech"),i5r=o(" \u2014 "),ZH=a("a"),d5r=o("UniSpeechForSequenceClassification"),c5r=o(" (UniSpeech model)"),f5r=l(),z8=a("li"),_Te=a("strong"),m5r=o("unispeech-sat"),g5r=o(" \u2014 "),eJ=a("a"),h5r=o("UniSpeechSatForSequenceClassification"),p5r=o(" (UniSpeechSat model)"),_5r=l(),W8=a("li"),uTe=a("strong"),u5r=o("wav2vec2"),b5r=o(" \u2014 "),oJ=a("a"),v5r=o("Wav2Vec2ForSequenceClassification"),F5r=o(" (Wav2Vec2 model)"),T5r=l(),Q8=a("li"),bTe=a("strong"),M5r=o("wav2vec2-conformer"),E5r=o(" \u2014 "),rJ=a("a"),C5r=o("Wav2Vec2ConformerForSequenceClassification"),w5r=o(" (Wav2Vec2-Conformer model)"),A5r=l(),U8=a("li"),vTe=a("strong"),L5r=o("wavlm"),y5r=o(" \u2014 "),tJ=a("a"),x5r=o("WavLMForSequenceClassification"),$5r=o(" (WavLM model)"),k5r=l(),H8=a("p"),S5r=o("The model is set in evaluation mode by default using "),FTe=a("code"),R5r=o("model.eval()"),P5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TTe=a("code"),B5r=o("model.train()"),I5r=l(),F(J8.$$.fragment),XUe=l(),Jd=a("h2"),Y8=a("a"),MTe=a("span"),F(px.$$.fragment),N5r=l(),ETe=a("span"),q5r=o("AutoModelForAudioFrameClassification"),zUe=l(),Ho=a("div"),F(_x.$$.fragment),j5r=l(),Yd=a("p"),D5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aJ=a("a"),G5r=o("from_pretrained()"),O5r=o(" class method or the "),nJ=a("a"),V5r=o("from_config()"),X5r=o(` class
method.`),z5r=l(),ux=a("p"),W5r=o("This class cannot be instantiated directly using "),CTe=a("code"),Q5r=o("__init__()"),U5r=o(" (throws an error)."),H5r=l(),xt=a("div"),F(bx.$$.fragment),J5r=l(),wTe=a("p"),Y5r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),K5r=l(),Kd=a("p"),Z5r=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),e1r=o("not"),o1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),r1r=o("from_pretrained()"),t1r=o(" to load the model weights."),a1r=l(),F(K8.$$.fragment),n1r=l(),po=a("div"),F(vx.$$.fragment),s1r=l(),LTe=a("p"),l1r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),i1r=l(),nn=a("p"),d1r=o("The model class to instantiate is selected based on the "),yTe=a("code"),c1r=o("model_type"),f1r=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),m1r=o("pretrained_model_name_or_path"),g1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(":"),_1r=l(),st=a("ul"),Z8=a("li"),kTe=a("strong"),u1r=o("data2vec-audio"),b1r=o(" \u2014 "),lJ=a("a"),v1r=o("Data2VecAudioForAudioFrameClassification"),F1r=o(" (Data2VecAudio model)"),T1r=l(),eM=a("li"),STe=a("strong"),M1r=o("unispeech-sat"),E1r=o(" \u2014 "),iJ=a("a"),C1r=o("UniSpeechSatForAudioFrameClassification"),w1r=o(" (UniSpeechSat model)"),A1r=l(),oM=a("li"),RTe=a("strong"),L1r=o("wav2vec2"),y1r=o(" \u2014 "),dJ=a("a"),x1r=o("Wav2Vec2ForAudioFrameClassification"),$1r=o(" (Wav2Vec2 model)"),k1r=l(),rM=a("li"),PTe=a("strong"),S1r=o("wav2vec2-conformer"),R1r=o(" \u2014 "),cJ=a("a"),P1r=o("Wav2Vec2ConformerForAudioFrameClassification"),B1r=o(" (Wav2Vec2-Conformer model)"),I1r=l(),tM=a("li"),BTe=a("strong"),N1r=o("wavlm"),q1r=o(" \u2014 "),fJ=a("a"),j1r=o("WavLMForAudioFrameClassification"),D1r=o(" (WavLM model)"),G1r=l(),aM=a("p"),O1r=o("The model is set in evaluation mode by default using "),ITe=a("code"),V1r=o("model.eval()"),X1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NTe=a("code"),z1r=o("model.train()"),W1r=l(),F(nM.$$.fragment),WUe=l(),Zd=a("h2"),sM=a("a"),qTe=a("span"),F(Fx.$$.fragment),Q1r=l(),jTe=a("span"),U1r=o("AutoModelForCTC"),QUe=l(),Jo=a("div"),F(Tx.$$.fragment),H1r=l(),ec=a("p"),J1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mJ=a("a"),Y1r=o("from_pretrained()"),K1r=o(" class method or the "),gJ=a("a"),Z1r=o("from_config()"),e2r=o(` class
method.`),o2r=l(),Mx=a("p"),r2r=o("This class cannot be instantiated directly using "),DTe=a("code"),t2r=o("__init__()"),a2r=o(" (throws an error)."),n2r=l(),$t=a("div"),F(Ex.$$.fragment),s2r=l(),GTe=a("p"),l2r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),i2r=l(),oc=a("p"),d2r=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),c2r=o("not"),f2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),m2r=o("from_pretrained()"),g2r=o(" to load the model weights."),h2r=l(),F(lM.$$.fragment),p2r=l(),_o=a("div"),F(Cx.$$.fragment),_2r=l(),VTe=a("p"),u2r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),b2r=l(),sn=a("p"),v2r=o("The model class to instantiate is selected based on the "),XTe=a("code"),F2r=o("model_type"),T2r=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(":"),A2r=l(),Le=a("ul"),iM=a("li"),QTe=a("strong"),L2r=o("data2vec-audio"),y2r=o(" \u2014 "),pJ=a("a"),x2r=o("Data2VecAudioForCTC"),$2r=o(" (Data2VecAudio model)"),k2r=l(),dM=a("li"),UTe=a("strong"),S2r=o("hubert"),R2r=o(" \u2014 "),_J=a("a"),P2r=o("HubertForCTC"),B2r=o(" (Hubert model)"),I2r=l(),cM=a("li"),HTe=a("strong"),N2r=o("mctct"),q2r=o(" \u2014 "),uJ=a("a"),j2r=o("MCTCTForCTC"),D2r=o(" (M-CTC-T model)"),G2r=l(),fM=a("li"),JTe=a("strong"),O2r=o("sew"),V2r=o(" \u2014 "),bJ=a("a"),X2r=o("SEWForCTC"),z2r=o(" (SEW model)"),W2r=l(),mM=a("li"),YTe=a("strong"),Q2r=o("sew-d"),U2r=o(" \u2014 "),vJ=a("a"),H2r=o("SEWDForCTC"),J2r=o(" (SEW-D model)"),Y2r=l(),gM=a("li"),KTe=a("strong"),K2r=o("unispeech"),Z2r=o(" \u2014 "),FJ=a("a"),ebr=o("UniSpeechForCTC"),obr=o(" (UniSpeech model)"),rbr=l(),hM=a("li"),ZTe=a("strong"),tbr=o("unispeech-sat"),abr=o(" \u2014 "),TJ=a("a"),nbr=o("UniSpeechSatForCTC"),sbr=o(" (UniSpeechSat model)"),lbr=l(),pM=a("li"),e8e=a("strong"),ibr=o("wav2vec2"),dbr=o(" \u2014 "),MJ=a("a"),cbr=o("Wav2Vec2ForCTC"),fbr=o(" (Wav2Vec2 model)"),mbr=l(),_M=a("li"),o8e=a("strong"),gbr=o("wav2vec2-conformer"),hbr=o(" \u2014 "),EJ=a("a"),pbr=o("Wav2Vec2ConformerForCTC"),_br=o(" (Wav2Vec2-Conformer model)"),ubr=l(),uM=a("li"),r8e=a("strong"),bbr=o("wavlm"),vbr=o(" \u2014 "),CJ=a("a"),Fbr=o("WavLMForCTC"),Tbr=o(" (WavLM model)"),Mbr=l(),bM=a("p"),Ebr=o("The model is set in evaluation mode by default using "),t8e=a("code"),Cbr=o("model.eval()"),wbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=a("code"),Abr=o("model.train()"),Lbr=l(),F(vM.$$.fragment),UUe=l(),rc=a("h2"),FM=a("a"),n8e=a("span"),F(wx.$$.fragment),ybr=l(),s8e=a("span"),xbr=o("AutoModelForSpeechSeq2Seq"),HUe=l(),Yo=a("div"),F(Ax.$$.fragment),$br=l(),tc=a("p"),kbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wJ=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" class method or the "),AJ=a("a"),Pbr=o("from_config()"),Bbr=o(` class
method.`),Ibr=l(),Lx=a("p"),Nbr=o("This class cannot be instantiated directly using "),l8e=a("code"),qbr=o("__init__()"),jbr=o(" (throws an error)."),Dbr=l(),kt=a("div"),F(yx.$$.fragment),Gbr=l(),i8e=a("p"),Obr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Vbr=l(),ac=a("p"),Xbr=o(`Note:
Loading a model from its configuration file does `),d8e=a("strong"),zbr=o("not"),Wbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=a("a"),Qbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Hbr=l(),F(TM.$$.fragment),Jbr=l(),uo=a("div"),F(xx.$$.fragment),Ybr=l(),c8e=a("p"),Kbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Zbr=l(),ln=a("p"),evr=o("The model class to instantiate is selected based on the "),f8e=a("code"),ovr=o("model_type"),rvr=o(` property of the config object (either
passed as an argument or loaded from `),m8e=a("code"),tvr=o("pretrained_model_name_or_path"),avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=a("code"),nvr=o("pretrained_model_name_or_path"),svr=o(":"),lvr=l(),$x=a("ul"),MM=a("li"),h8e=a("strong"),ivr=o("speech-encoder-decoder"),dvr=o(" \u2014 "),yJ=a("a"),cvr=o("SpeechEncoderDecoderModel"),fvr=o(" (Speech Encoder decoder model)"),mvr=l(),EM=a("li"),p8e=a("strong"),gvr=o("speech_to_text"),hvr=o(" \u2014 "),xJ=a("a"),pvr=o("Speech2TextForConditionalGeneration"),_vr=o(" (Speech2Text model)"),uvr=l(),CM=a("p"),bvr=o("The model is set in evaluation mode by default using "),_8e=a("code"),vvr=o("model.eval()"),Fvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u8e=a("code"),Tvr=o("model.train()"),Mvr=l(),F(wM.$$.fragment),JUe=l(),nc=a("h2"),AM=a("a"),b8e=a("span"),F(kx.$$.fragment),Evr=l(),v8e=a("span"),Cvr=o("AutoModelForAudioXVector"),YUe=l(),Ko=a("div"),F(Sx.$$.fragment),wvr=l(),sc=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$J=a("a"),Lvr=o("from_pretrained()"),yvr=o(" class method or the "),kJ=a("a"),xvr=o("from_config()"),$vr=o(` class
method.`),kvr=l(),Rx=a("p"),Svr=o("This class cannot be instantiated directly using "),F8e=a("code"),Rvr=o("__init__()"),Pvr=o(" (throws an error)."),Bvr=l(),St=a("div"),F(Px.$$.fragment),Ivr=l(),T8e=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qvr=l(),lc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),M8e=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),F(LM.$$.fragment),zvr=l(),bo=a("div"),F(Bx.$$.fragment),Wvr=l(),E8e=a("p"),Qvr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Uvr=l(),dn=a("p"),Hvr=o("The model class to instantiate is selected based on the "),C8e=a("code"),Jvr=o("model_type"),Yvr=o(` property of the config object (either
passed as an argument or loaded from `),w8e=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(":"),rFr=l(),lt=a("ul"),yM=a("li"),L8e=a("strong"),tFr=o("data2vec-audio"),aFr=o(" \u2014 "),RJ=a("a"),nFr=o("Data2VecAudioForXVector"),sFr=o(" (Data2VecAudio model)"),lFr=l(),xM=a("li"),y8e=a("strong"),iFr=o("unispeech-sat"),dFr=o(" \u2014 "),PJ=a("a"),cFr=o("UniSpeechSatForXVector"),fFr=o(" (UniSpeechSat model)"),mFr=l(),$M=a("li"),x8e=a("strong"),gFr=o("wav2vec2"),hFr=o(" \u2014 "),BJ=a("a"),pFr=o("Wav2Vec2ForXVector"),_Fr=o(" (Wav2Vec2 model)"),uFr=l(),kM=a("li"),$8e=a("strong"),bFr=o("wav2vec2-conformer"),vFr=o(" \u2014 "),IJ=a("a"),FFr=o("Wav2Vec2ConformerForXVector"),TFr=o(" (Wav2Vec2-Conformer model)"),MFr=l(),SM=a("li"),k8e=a("strong"),EFr=o("wavlm"),CFr=o(" \u2014 "),NJ=a("a"),wFr=o("WavLMForXVector"),AFr=o(" (WavLM model)"),LFr=l(),RM=a("p"),yFr=o("The model is set in evaluation mode by default using "),S8e=a("code"),xFr=o("model.eval()"),$Fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R8e=a("code"),kFr=o("model.train()"),SFr=l(),F(PM.$$.fragment),KUe=l(),ic=a("h2"),BM=a("a"),P8e=a("span"),F(Ix.$$.fragment),RFr=l(),B8e=a("span"),PFr=o("AutoModelForMaskedImageModeling"),ZUe=l(),Zo=a("div"),F(Nx.$$.fragment),BFr=l(),dc=a("p"),IFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qJ=a("a"),NFr=o("from_pretrained()"),qFr=o(" class method or the "),jJ=a("a"),jFr=o("from_config()"),DFr=o(` class
method.`),GFr=l(),qx=a("p"),OFr=o("This class cannot be instantiated directly using "),I8e=a("code"),VFr=o("__init__()"),XFr=o(" (throws an error)."),zFr=l(),Rt=a("div"),F(jx.$$.fragment),WFr=l(),N8e=a("p"),QFr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),UFr=l(),cc=a("p"),HFr=o(`Note:
Loading a model from its configuration file does `),q8e=a("strong"),JFr=o("not"),YFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("a"),KFr=o("from_pretrained()"),ZFr=o(" to load the model weights."),eTr=l(),F(IM.$$.fragment),oTr=l(),vo=a("div"),F(Dx.$$.fragment),rTr=l(),j8e=a("p"),tTr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aTr=l(),cn=a("p"),nTr=o("The model class to instantiate is selected based on the "),D8e=a("code"),sTr=o("model_type"),lTr=o(` property of the config object (either
passed as an argument or loaded from `),G8e=a("code"),iTr=o("pretrained_model_name_or_path"),dTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=a("code"),cTr=o("pretrained_model_name_or_path"),fTr=o(":"),mTr=l(),fn=a("ul"),NM=a("li"),V8e=a("strong"),gTr=o("deit"),hTr=o(" \u2014 "),GJ=a("a"),pTr=o("DeiTForMaskedImageModeling"),_Tr=o(" (DeiT model)"),uTr=l(),qM=a("li"),X8e=a("strong"),bTr=o("swin"),vTr=o(" \u2014 "),OJ=a("a"),FTr=o("SwinForMaskedImageModeling"),TTr=o(" (Swin Transformer model)"),MTr=l(),jM=a("li"),z8e=a("strong"),ETr=o("swinv2"),CTr=o(" \u2014 "),VJ=a("a"),wTr=o("Swinv2ForMaskedImageModeling"),ATr=o(" (Swin Transformer V2 model)"),LTr=l(),DM=a("li"),W8e=a("strong"),yTr=o("vit"),xTr=o(" \u2014 "),XJ=a("a"),$Tr=o("ViTForMaskedImageModeling"),kTr=o(" (ViT model)"),STr=l(),GM=a("p"),RTr=o("The model is set in evaluation mode by default using "),Q8e=a("code"),PTr=o("model.eval()"),BTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U8e=a("code"),ITr=o("model.train()"),NTr=l(),F(OM.$$.fragment),eHe=l(),fc=a("h2"),VM=a("a"),H8e=a("span"),F(Gx.$$.fragment),qTr=l(),J8e=a("span"),jTr=o("AutoModelForObjectDetection"),oHe=l(),er=a("div"),F(Ox.$$.fragment),DTr=l(),mc=a("p"),GTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zJ=a("a"),OTr=o("from_pretrained()"),VTr=o(" class method or the "),WJ=a("a"),XTr=o("from_config()"),zTr=o(` class
method.`),WTr=l(),Vx=a("p"),QTr=o("This class cannot be instantiated directly using "),Y8e=a("code"),UTr=o("__init__()"),HTr=o(" (throws an error)."),JTr=l(),Pt=a("div"),F(Xx.$$.fragment),YTr=l(),K8e=a("p"),KTr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ZTr=l(),gc=a("p"),e8r=o(`Note:
Loading a model from its configuration file does `),Z8e=a("strong"),o8r=o("not"),r8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),t8r=o("from_pretrained()"),a8r=o(" to load the model weights."),n8r=l(),F(XM.$$.fragment),s8r=l(),Fo=a("div"),F(zx.$$.fragment),l8r=l(),eMe=a("p"),i8r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),d8r=l(),mn=a("p"),c8r=o("The model class to instantiate is selected based on the "),oMe=a("code"),f8r=o("model_type"),m8r=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),g8r=o("pretrained_model_name_or_path"),h8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),p8r=o("pretrained_model_name_or_path"),_8r=o(":"),u8r=l(),Wx=a("ul"),zM=a("li"),aMe=a("strong"),b8r=o("detr"),v8r=o(" \u2014 "),UJ=a("a"),F8r=o("DetrForObjectDetection"),T8r=o(" (DETR model)"),M8r=l(),WM=a("li"),nMe=a("strong"),E8r=o("yolos"),C8r=o(" \u2014 "),HJ=a("a"),w8r=o("YolosForObjectDetection"),A8r=o(" (YOLOS model)"),L8r=l(),QM=a("p"),y8r=o("The model is set in evaluation mode by default using "),sMe=a("code"),x8r=o("model.eval()"),$8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lMe=a("code"),k8r=o("model.train()"),S8r=l(),F(UM.$$.fragment),rHe=l(),hc=a("h2"),HM=a("a"),iMe=a("span"),F(Qx.$$.fragment),R8r=l(),dMe=a("span"),P8r=o("AutoModelForImageSegmentation"),tHe=l(),or=a("div"),F(Ux.$$.fragment),B8r=l(),pc=a("p"),I8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),JJ=a("a"),N8r=o("from_pretrained()"),q8r=o(" class method or the "),YJ=a("a"),j8r=o("from_config()"),D8r=o(` class
method.`),G8r=l(),Hx=a("p"),O8r=o("This class cannot be instantiated directly using "),cMe=a("code"),V8r=o("__init__()"),X8r=o(" (throws an error)."),z8r=l(),Bt=a("div"),F(Jx.$$.fragment),W8r=l(),fMe=a("p"),Q8r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),U8r=l(),_c=a("p"),H8r=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),J8r=o("not"),Y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),K8r=o("from_pretrained()"),Z8r=o(" to load the model weights."),eMr=l(),F(JM.$$.fragment),oMr=l(),To=a("div"),F(Yx.$$.fragment),rMr=l(),gMe=a("p"),tMr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),aMr=l(),gn=a("p"),nMr=o("The model class to instantiate is selected based on the "),hMe=a("code"),sMr=o("model_type"),lMr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),iMr=o("pretrained_model_name_or_path"),dMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),cMr=o("pretrained_model_name_or_path"),fMr=o(":"),mMr=l(),uMe=a("ul"),YM=a("li"),bMe=a("strong"),gMr=o("detr"),hMr=o(" \u2014 "),ZJ=a("a"),pMr=o("DetrForSegmentation"),_Mr=o(" (DETR model)"),uMr=l(),KM=a("p"),bMr=o("The model is set in evaluation mode by default using "),vMe=a("code"),vMr=o("model.eval()"),FMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FMe=a("code"),TMr=o("model.train()"),MMr=l(),F(ZM.$$.fragment),aHe=l(),uc=a("h2"),eE=a("a"),TMe=a("span"),F(Kx.$$.fragment),EMr=l(),MMe=a("span"),CMr=o("AutoModelForSemanticSegmentation"),nHe=l(),rr=a("div"),F(Zx.$$.fragment),wMr=l(),bc=a("p"),AMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eY=a("a"),LMr=o("from_pretrained()"),yMr=o(" class method or the "),oY=a("a"),xMr=o("from_config()"),$Mr=o(` class
method.`),kMr=l(),e$=a("p"),SMr=o("This class cannot be instantiated directly using "),EMe=a("code"),RMr=o("__init__()"),PMr=o(" (throws an error)."),BMr=l(),It=a("div"),F(o$.$$.fragment),IMr=l(),CMe=a("p"),NMr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qMr=l(),vc=a("p"),jMr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),DMr=o("not"),GMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),OMr=o("from_pretrained()"),VMr=o(" to load the model weights."),XMr=l(),F(oE.$$.fragment),zMr=l(),Mo=a("div"),F(r$.$$.fragment),WMr=l(),AMe=a("p"),QMr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),UMr=l(),hn=a("p"),HMr=o("The model class to instantiate is selected based on the "),LMe=a("code"),JMr=o("model_type"),YMr=o(` property of the config object (either
passed as an argument or loaded from `),yMe=a("code"),KMr=o("pretrained_model_name_or_path"),ZMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),eEr=o("pretrained_model_name_or_path"),oEr=o(":"),rEr=l(),it=a("ul"),rE=a("li"),$Me=a("strong"),tEr=o("beit"),aEr=o(" \u2014 "),tY=a("a"),nEr=o("BeitForSemanticSegmentation"),sEr=o(" (BEiT model)"),lEr=l(),tE=a("li"),kMe=a("strong"),iEr=o("data2vec-vision"),dEr=o(" \u2014 "),aY=a("a"),cEr=o("Data2VecVisionForSemanticSegmentation"),fEr=o(" (Data2VecVision model)"),mEr=l(),aE=a("li"),SMe=a("strong"),gEr=o("dpt"),hEr=o(" \u2014 "),nY=a("a"),pEr=o("DPTForSemanticSegmentation"),_Er=o(" (DPT model)"),uEr=l(),nE=a("li"),RMe=a("strong"),bEr=o("mobilevit"),vEr=o(" \u2014 "),sY=a("a"),FEr=o("MobileViTForSemanticSegmentation"),TEr=o(" (MobileViT model)"),MEr=l(),sE=a("li"),PMe=a("strong"),EEr=o("segformer"),CEr=o(" \u2014 "),lY=a("a"),wEr=o("SegformerForSemanticSegmentation"),AEr=o(" (SegFormer model)"),LEr=l(),lE=a("p"),yEr=o("The model is set in evaluation mode by default using "),BMe=a("code"),xEr=o("model.eval()"),$Er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IMe=a("code"),kEr=o("model.train()"),SEr=l(),F(iE.$$.fragment),sHe=l(),Fc=a("h2"),dE=a("a"),NMe=a("span"),F(t$.$$.fragment),REr=l(),qMe=a("span"),PEr=o("AutoModelForInstanceSegmentation"),lHe=l(),tr=a("div"),F(a$.$$.fragment),BEr=l(),Tc=a("p"),IEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iY=a("a"),NEr=o("from_pretrained()"),qEr=o(" class method or the "),dY=a("a"),jEr=o("from_config()"),DEr=o(` class
method.`),GEr=l(),n$=a("p"),OEr=o("This class cannot be instantiated directly using "),jMe=a("code"),VEr=o("__init__()"),XEr=o(" (throws an error)."),zEr=l(),Nt=a("div"),F(s$.$$.fragment),WEr=l(),DMe=a("p"),QEr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),UEr=l(),Mc=a("p"),HEr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),JEr=o("not"),YEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),KEr=o("from_pretrained()"),ZEr=o(" to load the model weights."),e4r=l(),F(cE.$$.fragment),o4r=l(),Eo=a("div"),F(l$.$$.fragment),r4r=l(),OMe=a("p"),t4r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),a4r=l(),pn=a("p"),n4r=o("The model class to instantiate is selected based on the "),VMe=a("code"),s4r=o("model_type"),l4r=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),i4r=o("pretrained_model_name_or_path"),d4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),c4r=o("pretrained_model_name_or_path"),f4r=o(":"),m4r=l(),WMe=a("ul"),fE=a("li"),QMe=a("strong"),g4r=o("maskformer"),h4r=o(" \u2014 "),fY=a("a"),p4r=o("MaskFormerForInstanceSegmentation"),_4r=o(" (MaskFormer model)"),u4r=l(),mE=a("p"),b4r=o("The model is set in evaluation mode by default using "),UMe=a("code"),v4r=o("model.eval()"),F4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HMe=a("code"),T4r=o("model.train()"),M4r=l(),F(gE.$$.fragment),iHe=l(),Ec=a("h2"),hE=a("a"),JMe=a("span"),F(i$.$$.fragment),E4r=l(),YMe=a("span"),C4r=o("TFAutoModel"),dHe=l(),ar=a("div"),F(d$.$$.fragment),w4r=l(),Cc=a("p"),A4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mY=a("a"),L4r=o("from_pretrained()"),y4r=o(" class method or the "),gY=a("a"),x4r=o("from_config()"),$4r=o(` class
method.`),k4r=l(),c$=a("p"),S4r=o("This class cannot be instantiated directly using "),KMe=a("code"),R4r=o("__init__()"),P4r=o(" (throws an error)."),B4r=l(),qt=a("div"),F(f$.$$.fragment),I4r=l(),ZMe=a("p"),N4r=o("Instantiates one of the base model classes of the library from a configuration."),q4r=l(),wc=a("p"),j4r=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),D4r=o("not"),G4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),O4r=o("from_pretrained()"),V4r=o(" to load the model weights."),X4r=l(),F(pE.$$.fragment),z4r=l(),Rr=a("div"),F(m$.$$.fragment),W4r=l(),oEe=a("p"),Q4r=o("Instantiate one of the base model classes of the library from a pretrained model."),U4r=l(),_n=a("p"),H4r=o("The model class to instantiate is selected based on the "),rEe=a("code"),J4r=o("model_type"),Y4r=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),eCr=o("pretrained_model_name_or_path"),oCr=o(":"),rCr=l(),q=a("ul"),_E=a("li"),nEe=a("strong"),tCr=o("albert"),aCr=o(" \u2014 "),pY=a("a"),nCr=o("TFAlbertModel"),sCr=o(" (ALBERT model)"),lCr=l(),uE=a("li"),sEe=a("strong"),iCr=o("bart"),dCr=o(" \u2014 "),_Y=a("a"),cCr=o("TFBartModel"),fCr=o(" (BART model)"),mCr=l(),bE=a("li"),lEe=a("strong"),gCr=o("bert"),hCr=o(" \u2014 "),uY=a("a"),pCr=o("TFBertModel"),_Cr=o(" (BERT model)"),uCr=l(),vE=a("li"),iEe=a("strong"),bCr=o("blenderbot"),vCr=o(" \u2014 "),bY=a("a"),FCr=o("TFBlenderbotModel"),TCr=o(" (Blenderbot model)"),MCr=l(),FE=a("li"),dEe=a("strong"),ECr=o("blenderbot-small"),CCr=o(" \u2014 "),vY=a("a"),wCr=o("TFBlenderbotSmallModel"),ACr=o(" (BlenderbotSmall model)"),LCr=l(),TE=a("li"),cEe=a("strong"),yCr=o("camembert"),xCr=o(" \u2014 "),FY=a("a"),$Cr=o("TFCamembertModel"),kCr=o(" (CamemBERT model)"),SCr=l(),ME=a("li"),fEe=a("strong"),RCr=o("clip"),PCr=o(" \u2014 "),TY=a("a"),BCr=o("TFCLIPModel"),ICr=o(" (CLIP model)"),NCr=l(),EE=a("li"),mEe=a("strong"),qCr=o("convbert"),jCr=o(" \u2014 "),MY=a("a"),DCr=o("TFConvBertModel"),GCr=o(" (ConvBERT model)"),OCr=l(),CE=a("li"),gEe=a("strong"),VCr=o("convnext"),XCr=o(" \u2014 "),EY=a("a"),zCr=o("TFConvNextModel"),WCr=o(" (ConvNeXT model)"),QCr=l(),wE=a("li"),hEe=a("strong"),UCr=o("ctrl"),HCr=o(" \u2014 "),CY=a("a"),JCr=o("TFCTRLModel"),YCr=o(" (CTRL model)"),KCr=l(),AE=a("li"),pEe=a("strong"),ZCr=o("data2vec-vision"),e3r=o(" \u2014 "),wY=a("a"),o3r=o("TFData2VecVisionModel"),r3r=o(" (Data2VecVision model)"),t3r=l(),LE=a("li"),_Ee=a("strong"),a3r=o("deberta"),n3r=o(" \u2014 "),AY=a("a"),s3r=o("TFDebertaModel"),l3r=o(" (DeBERTa model)"),i3r=l(),yE=a("li"),uEe=a("strong"),d3r=o("deberta-v2"),c3r=o(" \u2014 "),LY=a("a"),f3r=o("TFDebertaV2Model"),m3r=o(" (DeBERTa-v2 model)"),g3r=l(),xE=a("li"),bEe=a("strong"),h3r=o("deit"),p3r=o(" \u2014 "),yY=a("a"),_3r=o("TFDeiTModel"),u3r=o(" (DeiT model)"),b3r=l(),$E=a("li"),vEe=a("strong"),v3r=o("distilbert"),F3r=o(" \u2014 "),xY=a("a"),T3r=o("TFDistilBertModel"),M3r=o(" (DistilBERT model)"),E3r=l(),kE=a("li"),FEe=a("strong"),C3r=o("dpr"),w3r=o(" \u2014 "),$Y=a("a"),A3r=o("TFDPRQuestionEncoder"),L3r=o(" (DPR model)"),y3r=l(),SE=a("li"),TEe=a("strong"),x3r=o("electra"),$3r=o(" \u2014 "),kY=a("a"),k3r=o("TFElectraModel"),S3r=o(" (ELECTRA model)"),R3r=l(),RE=a("li"),MEe=a("strong"),P3r=o("flaubert"),B3r=o(" \u2014 "),SY=a("a"),I3r=o("TFFlaubertModel"),N3r=o(" (FlauBERT model)"),q3r=l(),il=a("li"),EEe=a("strong"),j3r=o("funnel"),D3r=o(" \u2014 "),RY=a("a"),G3r=o("TFFunnelModel"),O3r=o(" or "),PY=a("a"),V3r=o("TFFunnelBaseModel"),X3r=o(" (Funnel Transformer model)"),z3r=l(),PE=a("li"),CEe=a("strong"),W3r=o("gpt2"),Q3r=o(" \u2014 "),BY=a("a"),U3r=o("TFGPT2Model"),H3r=o(" (OpenAI GPT-2 model)"),J3r=l(),BE=a("li"),wEe=a("strong"),Y3r=o("gptj"),K3r=o(" \u2014 "),IY=a("a"),Z3r=o("TFGPTJModel"),e0r=o(" (GPT-J model)"),o0r=l(),IE=a("li"),AEe=a("strong"),r0r=o("hubert"),t0r=o(" \u2014 "),NY=a("a"),a0r=o("TFHubertModel"),n0r=o(" (Hubert model)"),s0r=l(),NE=a("li"),LEe=a("strong"),l0r=o("layoutlm"),i0r=o(" \u2014 "),qY=a("a"),d0r=o("TFLayoutLMModel"),c0r=o(" (LayoutLM model)"),f0r=l(),qE=a("li"),yEe=a("strong"),m0r=o("led"),g0r=o(" \u2014 "),jY=a("a"),h0r=o("TFLEDModel"),p0r=o(" (LED model)"),_0r=l(),jE=a("li"),xEe=a("strong"),u0r=o("longformer"),b0r=o(" \u2014 "),DY=a("a"),v0r=o("TFLongformerModel"),F0r=o(" (Longformer model)"),T0r=l(),DE=a("li"),$Ee=a("strong"),M0r=o("lxmert"),E0r=o(" \u2014 "),GY=a("a"),C0r=o("TFLxmertModel"),w0r=o(" (LXMERT model)"),A0r=l(),GE=a("li"),kEe=a("strong"),L0r=o("marian"),y0r=o(" \u2014 "),OY=a("a"),x0r=o("TFMarianModel"),$0r=o(" (Marian model)"),k0r=l(),OE=a("li"),SEe=a("strong"),S0r=o("mbart"),R0r=o(" \u2014 "),VY=a("a"),P0r=o("TFMBartModel"),B0r=o(" (mBART model)"),I0r=l(),VE=a("li"),REe=a("strong"),N0r=o("mobilebert"),q0r=o(" \u2014 "),XY=a("a"),j0r=o("TFMobileBertModel"),D0r=o(" (MobileBERT model)"),G0r=l(),XE=a("li"),PEe=a("strong"),O0r=o("mobilevit"),V0r=o(" \u2014 "),zY=a("a"),X0r=o("TFMobileViTModel"),z0r=o(" (MobileViT model)"),W0r=l(),zE=a("li"),BEe=a("strong"),Q0r=o("mpnet"),U0r=o(" \u2014 "),WY=a("a"),H0r=o("TFMPNetModel"),J0r=o(" (MPNet model)"),Y0r=l(),WE=a("li"),IEe=a("strong"),K0r=o("mt5"),Z0r=o(" \u2014 "),QY=a("a"),ewr=o("TFMT5Model"),owr=o(" (MT5 model)"),rwr=l(),QE=a("li"),NEe=a("strong"),twr=o("openai-gpt"),awr=o(" \u2014 "),UY=a("a"),nwr=o("TFOpenAIGPTModel"),swr=o(" (OpenAI GPT model)"),lwr=l(),UE=a("li"),qEe=a("strong"),iwr=o("opt"),dwr=o(" \u2014 "),HY=a("a"),cwr=o("TFOPTModel"),fwr=o(" (OPT model)"),mwr=l(),HE=a("li"),jEe=a("strong"),gwr=o("pegasus"),hwr=o(" \u2014 "),JY=a("a"),pwr=o("TFPegasusModel"),_wr=o(" (Pegasus model)"),uwr=l(),JE=a("li"),DEe=a("strong"),bwr=o("regnet"),vwr=o(" \u2014 "),YY=a("a"),Fwr=o("TFRegNetModel"),Twr=o(" (RegNet model)"),Mwr=l(),YE=a("li"),GEe=a("strong"),Ewr=o("rembert"),Cwr=o(" \u2014 "),KY=a("a"),wwr=o("TFRemBertModel"),Awr=o(" (RemBERT model)"),Lwr=l(),KE=a("li"),OEe=a("strong"),ywr=o("resnet"),xwr=o(" \u2014 "),ZY=a("a"),$wr=o("TFResNetModel"),kwr=o(" (ResNet model)"),Swr=l(),ZE=a("li"),VEe=a("strong"),Rwr=o("roberta"),Pwr=o(" \u2014 "),eK=a("a"),Bwr=o("TFRobertaModel"),Iwr=o(" (RoBERTa model)"),Nwr=l(),e4=a("li"),XEe=a("strong"),qwr=o("roformer"),jwr=o(" \u2014 "),oK=a("a"),Dwr=o("TFRoFormerModel"),Gwr=o(" (RoFormer model)"),Owr=l(),o4=a("li"),zEe=a("strong"),Vwr=o("segformer"),Xwr=o(" \u2014 "),rK=a("a"),zwr=o("TFSegformerModel"),Wwr=o(" (SegFormer model)"),Qwr=l(),r4=a("li"),WEe=a("strong"),Uwr=o("speech_to_text"),Hwr=o(" \u2014 "),tK=a("a"),Jwr=o("TFSpeech2TextModel"),Ywr=o(" (Speech2Text model)"),Kwr=l(),t4=a("li"),QEe=a("strong"),Zwr=o("swin"),e6r=o(" \u2014 "),aK=a("a"),o6r=o("TFSwinModel"),r6r=o(" (Swin Transformer model)"),t6r=l(),a4=a("li"),UEe=a("strong"),a6r=o("t5"),n6r=o(" \u2014 "),nK=a("a"),s6r=o("TFT5Model"),l6r=o(" (T5 model)"),i6r=l(),n4=a("li"),HEe=a("strong"),d6r=o("tapas"),c6r=o(" \u2014 "),sK=a("a"),f6r=o("TFTapasModel"),m6r=o(" (TAPAS model)"),g6r=l(),s4=a("li"),JEe=a("strong"),h6r=o("transfo-xl"),p6r=o(" \u2014 "),lK=a("a"),_6r=o("TFTransfoXLModel"),u6r=o(" (Transformer-XL model)"),b6r=l(),l4=a("li"),YEe=a("strong"),v6r=o("vit"),F6r=o(" \u2014 "),iK=a("a"),T6r=o("TFViTModel"),M6r=o(" (ViT model)"),E6r=l(),i4=a("li"),KEe=a("strong"),C6r=o("vit_mae"),w6r=o(" \u2014 "),dK=a("a"),A6r=o("TFViTMAEModel"),L6r=o(" (ViTMAE model)"),y6r=l(),d4=a("li"),ZEe=a("strong"),x6r=o("wav2vec2"),$6r=o(" \u2014 "),cK=a("a"),k6r=o("TFWav2Vec2Model"),S6r=o(" (Wav2Vec2 model)"),R6r=l(),c4=a("li"),e4e=a("strong"),P6r=o("xlm"),B6r=o(" \u2014 "),fK=a("a"),I6r=o("TFXLMModel"),N6r=o(" (XLM model)"),q6r=l(),f4=a("li"),o4e=a("strong"),j6r=o("xlm-roberta"),D6r=o(" \u2014 "),mK=a("a"),G6r=o("TFXLMRobertaModel"),O6r=o(" (XLM-RoBERTa model)"),V6r=l(),m4=a("li"),r4e=a("strong"),X6r=o("xlnet"),z6r=o(" \u2014 "),gK=a("a"),W6r=o("TFXLNetModel"),Q6r=o(" (XLNet model)"),U6r=l(),F(g4.$$.fragment),cHe=l(),Ac=a("h2"),h4=a("a"),t4e=a("span"),F(g$.$$.fragment),H6r=l(),a4e=a("span"),J6r=o("TFAutoModelForPreTraining"),fHe=l(),nr=a("div"),F(h$.$$.fragment),Y6r=l(),Lc=a("p"),K6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hK=a("a"),Z6r=o("from_pretrained()"),eAr=o(" class method or the "),pK=a("a"),oAr=o("from_config()"),rAr=o(` class
method.`),tAr=l(),p$=a("p"),aAr=o("This class cannot be instantiated directly using "),n4e=a("code"),nAr=o("__init__()"),sAr=o(" (throws an error)."),lAr=l(),jt=a("div"),F(_$.$$.fragment),iAr=l(),s4e=a("p"),dAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cAr=l(),yc=a("p"),fAr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),mAr=o("not"),gAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),hAr=o("from_pretrained()"),pAr=o(" to load the model weights."),_Ar=l(),F(p4.$$.fragment),uAr=l(),Pr=a("div"),F(u$.$$.fragment),bAr=l(),i4e=a("p"),vAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FAr=l(),un=a("p"),TAr=o("The model class to instantiate is selected based on the "),d4e=a("code"),MAr=o("model_type"),EAr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),CAr=o("pretrained_model_name_or_path"),wAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),AAr=o("pretrained_model_name_or_path"),LAr=o(":"),yAr=l(),se=a("ul"),_4=a("li"),m4e=a("strong"),xAr=o("albert"),$Ar=o(" \u2014 "),uK=a("a"),kAr=o("TFAlbertForPreTraining"),SAr=o(" (ALBERT model)"),RAr=l(),u4=a("li"),g4e=a("strong"),PAr=o("bart"),BAr=o(" \u2014 "),bK=a("a"),IAr=o("TFBartForConditionalGeneration"),NAr=o(" (BART model)"),qAr=l(),b4=a("li"),h4e=a("strong"),jAr=o("bert"),DAr=o(" \u2014 "),vK=a("a"),GAr=o("TFBertForPreTraining"),OAr=o(" (BERT model)"),VAr=l(),v4=a("li"),p4e=a("strong"),XAr=o("camembert"),zAr=o(" \u2014 "),FK=a("a"),WAr=o("TFCamembertForMaskedLM"),QAr=o(" (CamemBERT model)"),UAr=l(),F4=a("li"),_4e=a("strong"),HAr=o("ctrl"),JAr=o(" \u2014 "),TK=a("a"),YAr=o("TFCTRLLMHeadModel"),KAr=o(" (CTRL model)"),ZAr=l(),T4=a("li"),u4e=a("strong"),e7r=o("distilbert"),o7r=o(" \u2014 "),MK=a("a"),r7r=o("TFDistilBertForMaskedLM"),t7r=o(" (DistilBERT model)"),a7r=l(),M4=a("li"),b4e=a("strong"),n7r=o("electra"),s7r=o(" \u2014 "),EK=a("a"),l7r=o("TFElectraForPreTraining"),i7r=o(" (ELECTRA model)"),d7r=l(),E4=a("li"),v4e=a("strong"),c7r=o("flaubert"),f7r=o(" \u2014 "),CK=a("a"),m7r=o("TFFlaubertWithLMHeadModel"),g7r=o(" (FlauBERT model)"),h7r=l(),C4=a("li"),F4e=a("strong"),p7r=o("funnel"),_7r=o(" \u2014 "),wK=a("a"),u7r=o("TFFunnelForPreTraining"),b7r=o(" (Funnel Transformer model)"),v7r=l(),w4=a("li"),T4e=a("strong"),F7r=o("gpt2"),T7r=o(" \u2014 "),AK=a("a"),M7r=o("TFGPT2LMHeadModel"),E7r=o(" (OpenAI GPT-2 model)"),C7r=l(),A4=a("li"),M4e=a("strong"),w7r=o("layoutlm"),A7r=o(" \u2014 "),LK=a("a"),L7r=o("TFLayoutLMForMaskedLM"),y7r=o(" (LayoutLM model)"),x7r=l(),L4=a("li"),E4e=a("strong"),$7r=o("lxmert"),k7r=o(" \u2014 "),yK=a("a"),S7r=o("TFLxmertForPreTraining"),R7r=o(" (LXMERT model)"),P7r=l(),y4=a("li"),C4e=a("strong"),B7r=o("mobilebert"),I7r=o(" \u2014 "),xK=a("a"),N7r=o("TFMobileBertForPreTraining"),q7r=o(" (MobileBERT model)"),j7r=l(),x4=a("li"),w4e=a("strong"),D7r=o("mpnet"),G7r=o(" \u2014 "),$K=a("a"),O7r=o("TFMPNetForMaskedLM"),V7r=o(" (MPNet model)"),X7r=l(),$4=a("li"),A4e=a("strong"),z7r=o("openai-gpt"),W7r=o(" \u2014 "),kK=a("a"),Q7r=o("TFOpenAIGPTLMHeadModel"),U7r=o(" (OpenAI GPT model)"),H7r=l(),k4=a("li"),L4e=a("strong"),J7r=o("roberta"),Y7r=o(" \u2014 "),SK=a("a"),K7r=o("TFRobertaForMaskedLM"),Z7r=o(" (RoBERTa model)"),eLr=l(),S4=a("li"),y4e=a("strong"),oLr=o("t5"),rLr=o(" \u2014 "),RK=a("a"),tLr=o("TFT5ForConditionalGeneration"),aLr=o(" (T5 model)"),nLr=l(),R4=a("li"),x4e=a("strong"),sLr=o("tapas"),lLr=o(" \u2014 "),PK=a("a"),iLr=o("TFTapasForMaskedLM"),dLr=o(" (TAPAS model)"),cLr=l(),P4=a("li"),$4e=a("strong"),fLr=o("transfo-xl"),mLr=o(" \u2014 "),BK=a("a"),gLr=o("TFTransfoXLLMHeadModel"),hLr=o(" (Transformer-XL model)"),pLr=l(),B4=a("li"),k4e=a("strong"),_Lr=o("vit_mae"),uLr=o(" \u2014 "),IK=a("a"),bLr=o("TFViTMAEForPreTraining"),vLr=o(" (ViTMAE model)"),FLr=l(),I4=a("li"),S4e=a("strong"),TLr=o("xlm"),MLr=o(" \u2014 "),NK=a("a"),ELr=o("TFXLMWithLMHeadModel"),CLr=o(" (XLM model)"),wLr=l(),N4=a("li"),R4e=a("strong"),ALr=o("xlm-roberta"),LLr=o(" \u2014 "),qK=a("a"),yLr=o("TFXLMRobertaForMaskedLM"),xLr=o(" (XLM-RoBERTa model)"),$Lr=l(),q4=a("li"),P4e=a("strong"),kLr=o("xlnet"),SLr=o(" \u2014 "),jK=a("a"),RLr=o("TFXLNetLMHeadModel"),PLr=o(" (XLNet model)"),BLr=l(),F(j4.$$.fragment),mHe=l(),xc=a("h2"),D4=a("a"),B4e=a("span"),F(b$.$$.fragment),ILr=l(),I4e=a("span"),NLr=o("TFAutoModelForCausalLM"),gHe=l(),sr=a("div"),F(v$.$$.fragment),qLr=l(),$c=a("p"),jLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DK=a("a"),DLr=o("from_pretrained()"),GLr=o(" class method or the "),GK=a("a"),OLr=o("from_config()"),VLr=o(` class
method.`),XLr=l(),F$=a("p"),zLr=o("This class cannot be instantiated directly using "),N4e=a("code"),WLr=o("__init__()"),QLr=o(" (throws an error)."),ULr=l(),Dt=a("div"),F(T$.$$.fragment),HLr=l(),q4e=a("p"),JLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YLr=l(),kc=a("p"),KLr=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),ZLr=o("not"),eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),oyr=o("from_pretrained()"),ryr=o(" to load the model weights."),tyr=l(),F(G4.$$.fragment),ayr=l(),Br=a("div"),F(M$.$$.fragment),nyr=l(),D4e=a("p"),syr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lyr=l(),bn=a("p"),iyr=o("The model class to instantiate is selected based on the "),G4e=a("code"),dyr=o("model_type"),cyr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),fyr=o("pretrained_model_name_or_path"),myr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(":"),pyr=l(),Me=a("ul"),O4=a("li"),X4e=a("strong"),_yr=o("bert"),uyr=o(" \u2014 "),VK=a("a"),byr=o("TFBertLMHeadModel"),vyr=o(" (BERT model)"),Fyr=l(),V4=a("li"),z4e=a("strong"),Tyr=o("camembert"),Myr=o(" \u2014 "),XK=a("a"),Eyr=o("TFCamembertForCausalLM"),Cyr=o(" (CamemBERT model)"),wyr=l(),X4=a("li"),W4e=a("strong"),Ayr=o("ctrl"),Lyr=o(" \u2014 "),zK=a("a"),yyr=o("TFCTRLLMHeadModel"),xyr=o(" (CTRL model)"),$yr=l(),z4=a("li"),Q4e=a("strong"),kyr=o("gpt2"),Syr=o(" \u2014 "),WK=a("a"),Ryr=o("TFGPT2LMHeadModel"),Pyr=o(" (OpenAI GPT-2 model)"),Byr=l(),W4=a("li"),U4e=a("strong"),Iyr=o("gptj"),Nyr=o(" \u2014 "),QK=a("a"),qyr=o("TFGPTJForCausalLM"),jyr=o(" (GPT-J model)"),Dyr=l(),Q4=a("li"),H4e=a("strong"),Gyr=o("openai-gpt"),Oyr=o(" \u2014 "),UK=a("a"),Vyr=o("TFOpenAIGPTLMHeadModel"),Xyr=o(" (OpenAI GPT model)"),zyr=l(),U4=a("li"),J4e=a("strong"),Wyr=o("opt"),Qyr=o(" \u2014 "),HK=a("a"),Uyr=o("TFOPTForCausalLM"),Hyr=o(" (OPT model)"),Jyr=l(),H4=a("li"),Y4e=a("strong"),Yyr=o("rembert"),Kyr=o(" \u2014 "),JK=a("a"),Zyr=o("TFRemBertForCausalLM"),e9r=o(" (RemBERT model)"),o9r=l(),J4=a("li"),K4e=a("strong"),r9r=o("roberta"),t9r=o(" \u2014 "),YK=a("a"),a9r=o("TFRobertaForCausalLM"),n9r=o(" (RoBERTa model)"),s9r=l(),Y4=a("li"),Z4e=a("strong"),l9r=o("roformer"),i9r=o(" \u2014 "),KK=a("a"),d9r=o("TFRoFormerForCausalLM"),c9r=o(" (RoFormer model)"),f9r=l(),K4=a("li"),eCe=a("strong"),m9r=o("transfo-xl"),g9r=o(" \u2014 "),ZK=a("a"),h9r=o("TFTransfoXLLMHeadModel"),p9r=o(" (Transformer-XL model)"),_9r=l(),Z4=a("li"),oCe=a("strong"),u9r=o("xlm"),b9r=o(" \u2014 "),eZ=a("a"),v9r=o("TFXLMWithLMHeadModel"),F9r=o(" (XLM model)"),T9r=l(),eC=a("li"),rCe=a("strong"),M9r=o("xlnet"),E9r=o(" \u2014 "),oZ=a("a"),C9r=o("TFXLNetLMHeadModel"),w9r=o(" (XLNet model)"),A9r=l(),F(oC.$$.fragment),hHe=l(),Sc=a("h2"),rC=a("a"),tCe=a("span"),F(E$.$$.fragment),L9r=l(),aCe=a("span"),y9r=o("TFAutoModelForImageClassification"),pHe=l(),lr=a("div"),F(C$.$$.fragment),x9r=l(),Rc=a("p"),$9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rZ=a("a"),k9r=o("from_pretrained()"),S9r=o(" class method or the "),tZ=a("a"),R9r=o("from_config()"),P9r=o(` class
method.`),B9r=l(),w$=a("p"),I9r=o("This class cannot be instantiated directly using "),nCe=a("code"),N9r=o("__init__()"),q9r=o(" (throws an error)."),j9r=l(),Gt=a("div"),F(A$.$$.fragment),D9r=l(),sCe=a("p"),G9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),O9r=l(),Pc=a("p"),V9r=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),X9r=o("not"),z9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),W9r=o("from_pretrained()"),Q9r=o(" to load the model weights."),U9r=l(),F(tC.$$.fragment),H9r=l(),Ir=a("div"),F(L$.$$.fragment),J9r=l(),iCe=a("p"),Y9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),K9r=l(),vn=a("p"),Z9r=o("The model class to instantiate is selected based on the "),dCe=a("code"),exr=o("model_type"),oxr=o(` property of the config object (either
passed as an argument or loaded from `),cCe=a("code"),rxr=o("pretrained_model_name_or_path"),txr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(":"),sxr=l(),Be=a("ul"),aC=a("li"),mCe=a("strong"),lxr=o("convnext"),ixr=o(" \u2014 "),nZ=a("a"),dxr=o("TFConvNextForImageClassification"),cxr=o(" (ConvNeXT model)"),fxr=l(),nC=a("li"),gCe=a("strong"),mxr=o("data2vec-vision"),gxr=o(" \u2014 "),sZ=a("a"),hxr=o("TFData2VecVisionForImageClassification"),pxr=o(" (Data2VecVision model)"),_xr=l(),dl=a("li"),hCe=a("strong"),uxr=o("deit"),bxr=o(" \u2014 "),lZ=a("a"),vxr=o("TFDeiTForImageClassification"),Fxr=o(" or "),iZ=a("a"),Txr=o("TFDeiTForImageClassificationWithTeacher"),Mxr=o(" (DeiT model)"),Exr=l(),sC=a("li"),pCe=a("strong"),Cxr=o("mobilevit"),wxr=o(" \u2014 "),dZ=a("a"),Axr=o("TFMobileViTForImageClassification"),Lxr=o(" (MobileViT model)"),yxr=l(),lC=a("li"),_Ce=a("strong"),xxr=o("regnet"),$xr=o(" \u2014 "),cZ=a("a"),kxr=o("TFRegNetForImageClassification"),Sxr=o(" (RegNet model)"),Rxr=l(),iC=a("li"),uCe=a("strong"),Pxr=o("resnet"),Bxr=o(" \u2014 "),fZ=a("a"),Ixr=o("TFResNetForImageClassification"),Nxr=o(" (ResNet model)"),qxr=l(),dC=a("li"),bCe=a("strong"),jxr=o("segformer"),Dxr=o(" \u2014 "),mZ=a("a"),Gxr=o("TFSegformerForImageClassification"),Oxr=o(" (SegFormer model)"),Vxr=l(),cC=a("li"),vCe=a("strong"),Xxr=o("swin"),zxr=o(" \u2014 "),gZ=a("a"),Wxr=o("TFSwinForImageClassification"),Qxr=o(" (Swin Transformer model)"),Uxr=l(),fC=a("li"),FCe=a("strong"),Hxr=o("vit"),Jxr=o(" \u2014 "),hZ=a("a"),Yxr=o("TFViTForImageClassification"),Kxr=o(" (ViT model)"),Zxr=l(),F(mC.$$.fragment),_He=l(),Bc=a("h2"),gC=a("a"),TCe=a("span"),F(y$.$$.fragment),e$r=l(),MCe=a("span"),o$r=o("TFAutoModelForSemanticSegmentation"),uHe=l(),ir=a("div"),F(x$.$$.fragment),r$r=l(),Ic=a("p"),t$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pZ=a("a"),a$r=o("from_pretrained()"),n$r=o(" class method or the "),_Z=a("a"),s$r=o("from_config()"),l$r=o(` class
method.`),i$r=l(),$$=a("p"),d$r=o("This class cannot be instantiated directly using "),ECe=a("code"),c$r=o("__init__()"),f$r=o(" (throws an error)."),m$r=l(),Ot=a("div"),F(k$.$$.fragment),g$r=l(),CCe=a("p"),h$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),p$r=l(),Nc=a("p"),_$r=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),u$r=o("not"),b$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),v$r=o("from_pretrained()"),F$r=o(" to load the model weights."),T$r=l(),F(hC.$$.fragment),M$r=l(),Nr=a("div"),F(S$.$$.fragment),E$r=l(),ACe=a("p"),C$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),w$r=l(),Fn=a("p"),A$r=o("The model class to instantiate is selected based on the "),LCe=a("code"),L$r=o("model_type"),y$r=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),x$r=o("pretrained_model_name_or_path"),$$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),k$r=o("pretrained_model_name_or_path"),S$r=o(":"),R$r=l(),qc=a("ul"),pC=a("li"),$Ce=a("strong"),P$r=o("data2vec-vision"),B$r=o(" \u2014 "),bZ=a("a"),I$r=o("TFData2VecVisionForSemanticSegmentation"),N$r=o(" (Data2VecVision model)"),q$r=l(),_C=a("li"),kCe=a("strong"),j$r=o("mobilevit"),D$r=o(" \u2014 "),vZ=a("a"),G$r=o("TFMobileViTForSemanticSegmentation"),O$r=o(" (MobileViT model)"),V$r=l(),uC=a("li"),SCe=a("strong"),X$r=o("segformer"),z$r=o(" \u2014 "),FZ=a("a"),W$r=o("TFSegformerForSemanticSegmentation"),Q$r=o(" (SegFormer model)"),U$r=l(),F(bC.$$.fragment),bHe=l(),jc=a("h2"),vC=a("a"),RCe=a("span"),F(R$.$$.fragment),H$r=l(),PCe=a("span"),J$r=o("TFAutoModelForMaskedLM"),vHe=l(),dr=a("div"),F(P$.$$.fragment),Y$r=l(),Dc=a("p"),K$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=a("a"),Z$r=o("from_pretrained()"),ekr=o(" class method or the "),MZ=a("a"),okr=o("from_config()"),rkr=o(` class
method.`),tkr=l(),B$=a("p"),akr=o("This class cannot be instantiated directly using "),BCe=a("code"),nkr=o("__init__()"),skr=o(" (throws an error)."),lkr=l(),Vt=a("div"),F(I$.$$.fragment),ikr=l(),ICe=a("p"),dkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ckr=l(),Gc=a("p"),fkr=o(`Note:
Loading a model from its configuration file does `),NCe=a("strong"),mkr=o("not"),gkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),hkr=o("from_pretrained()"),pkr=o(" to load the model weights."),_kr=l(),F(FC.$$.fragment),ukr=l(),qr=a("div"),F(N$.$$.fragment),bkr=l(),qCe=a("p"),vkr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fkr=l(),Tn=a("p"),Tkr=o("The model class to instantiate is selected based on the "),jCe=a("code"),Mkr=o("model_type"),Ekr=o(` property of the config object (either
passed as an argument or loaded from `),DCe=a("code"),Ckr=o("pretrained_model_name_or_path"),wkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=a("code"),Akr=o("pretrained_model_name_or_path"),Lkr=o(":"),ykr=l(),de=a("ul"),TC=a("li"),OCe=a("strong"),xkr=o("albert"),$kr=o(" \u2014 "),CZ=a("a"),kkr=o("TFAlbertForMaskedLM"),Skr=o(" (ALBERT model)"),Rkr=l(),MC=a("li"),VCe=a("strong"),Pkr=o("bert"),Bkr=o(" \u2014 "),wZ=a("a"),Ikr=o("TFBertForMaskedLM"),Nkr=o(" (BERT model)"),qkr=l(),EC=a("li"),XCe=a("strong"),jkr=o("camembert"),Dkr=o(" \u2014 "),AZ=a("a"),Gkr=o("TFCamembertForMaskedLM"),Okr=o(" (CamemBERT model)"),Vkr=l(),CC=a("li"),zCe=a("strong"),Xkr=o("convbert"),zkr=o(" \u2014 "),LZ=a("a"),Wkr=o("TFConvBertForMaskedLM"),Qkr=o(" (ConvBERT model)"),Ukr=l(),wC=a("li"),WCe=a("strong"),Hkr=o("deberta"),Jkr=o(" \u2014 "),yZ=a("a"),Ykr=o("TFDebertaForMaskedLM"),Kkr=o(" (DeBERTa model)"),Zkr=l(),AC=a("li"),QCe=a("strong"),eSr=o("deberta-v2"),oSr=o(" \u2014 "),xZ=a("a"),rSr=o("TFDebertaV2ForMaskedLM"),tSr=o(" (DeBERTa-v2 model)"),aSr=l(),LC=a("li"),UCe=a("strong"),nSr=o("distilbert"),sSr=o(" \u2014 "),$Z=a("a"),lSr=o("TFDistilBertForMaskedLM"),iSr=o(" (DistilBERT model)"),dSr=l(),yC=a("li"),HCe=a("strong"),cSr=o("electra"),fSr=o(" \u2014 "),kZ=a("a"),mSr=o("TFElectraForMaskedLM"),gSr=o(" (ELECTRA model)"),hSr=l(),xC=a("li"),JCe=a("strong"),pSr=o("flaubert"),_Sr=o(" \u2014 "),SZ=a("a"),uSr=o("TFFlaubertWithLMHeadModel"),bSr=o(" (FlauBERT model)"),vSr=l(),$C=a("li"),YCe=a("strong"),FSr=o("funnel"),TSr=o(" \u2014 "),RZ=a("a"),MSr=o("TFFunnelForMaskedLM"),ESr=o(" (Funnel Transformer model)"),CSr=l(),kC=a("li"),KCe=a("strong"),wSr=o("layoutlm"),ASr=o(" \u2014 "),PZ=a("a"),LSr=o("TFLayoutLMForMaskedLM"),ySr=o(" (LayoutLM model)"),xSr=l(),SC=a("li"),ZCe=a("strong"),$Sr=o("longformer"),kSr=o(" \u2014 "),BZ=a("a"),SSr=o("TFLongformerForMaskedLM"),RSr=o(" (Longformer model)"),PSr=l(),RC=a("li"),e3e=a("strong"),BSr=o("mobilebert"),ISr=o(" \u2014 "),IZ=a("a"),NSr=o("TFMobileBertForMaskedLM"),qSr=o(" (MobileBERT model)"),jSr=l(),PC=a("li"),o3e=a("strong"),DSr=o("mpnet"),GSr=o(" \u2014 "),NZ=a("a"),OSr=o("TFMPNetForMaskedLM"),VSr=o(" (MPNet model)"),XSr=l(),BC=a("li"),r3e=a("strong"),zSr=o("rembert"),WSr=o(" \u2014 "),qZ=a("a"),QSr=o("TFRemBertForMaskedLM"),USr=o(" (RemBERT model)"),HSr=l(),IC=a("li"),t3e=a("strong"),JSr=o("roberta"),YSr=o(" \u2014 "),jZ=a("a"),KSr=o("TFRobertaForMaskedLM"),ZSr=o(" (RoBERTa model)"),eRr=l(),NC=a("li"),a3e=a("strong"),oRr=o("roformer"),rRr=o(" \u2014 "),DZ=a("a"),tRr=o("TFRoFormerForMaskedLM"),aRr=o(" (RoFormer model)"),nRr=l(),qC=a("li"),n3e=a("strong"),sRr=o("tapas"),lRr=o(" \u2014 "),GZ=a("a"),iRr=o("TFTapasForMaskedLM"),dRr=o(" (TAPAS model)"),cRr=l(),jC=a("li"),s3e=a("strong"),fRr=o("xlm"),mRr=o(" \u2014 "),OZ=a("a"),gRr=o("TFXLMWithLMHeadModel"),hRr=o(" (XLM model)"),pRr=l(),DC=a("li"),l3e=a("strong"),_Rr=o("xlm-roberta"),uRr=o(" \u2014 "),VZ=a("a"),bRr=o("TFXLMRobertaForMaskedLM"),vRr=o(" (XLM-RoBERTa model)"),FRr=l(),F(GC.$$.fragment),FHe=l(),Oc=a("h2"),OC=a("a"),i3e=a("span"),F(q$.$$.fragment),TRr=l(),d3e=a("span"),MRr=o("TFAutoModelForSeq2SeqLM"),THe=l(),cr=a("div"),F(j$.$$.fragment),ERr=l(),Vc=a("p"),CRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XZ=a("a"),wRr=o("from_pretrained()"),ARr=o(" class method or the "),zZ=a("a"),LRr=o("from_config()"),yRr=o(` class
method.`),xRr=l(),D$=a("p"),$Rr=o("This class cannot be instantiated directly using "),c3e=a("code"),kRr=o("__init__()"),SRr=o(" (throws an error)."),RRr=l(),Xt=a("div"),F(G$.$$.fragment),PRr=l(),f3e=a("p"),BRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IRr=l(),Xc=a("p"),NRr=o(`Note:
Loading a model from its configuration file does `),m3e=a("strong"),qRr=o("not"),jRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),DRr=o("from_pretrained()"),GRr=o(" to load the model weights."),ORr=l(),F(VC.$$.fragment),VRr=l(),jr=a("div"),F(O$.$$.fragment),XRr=l(),g3e=a("p"),zRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WRr=l(),Mn=a("p"),QRr=o("The model class to instantiate is selected based on the "),h3e=a("code"),URr=o("model_type"),HRr=o(` property of the config object (either
passed as an argument or loaded from `),p3e=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),ePr=l(),ye=a("ul"),XC=a("li"),u3e=a("strong"),oPr=o("bart"),rPr=o(" \u2014 "),QZ=a("a"),tPr=o("TFBartForConditionalGeneration"),aPr=o(" (BART model)"),nPr=l(),zC=a("li"),b3e=a("strong"),sPr=o("blenderbot"),lPr=o(" \u2014 "),UZ=a("a"),iPr=o("TFBlenderbotForConditionalGeneration"),dPr=o(" (Blenderbot model)"),cPr=l(),WC=a("li"),v3e=a("strong"),fPr=o("blenderbot-small"),mPr=o(" \u2014 "),HZ=a("a"),gPr=o("TFBlenderbotSmallForConditionalGeneration"),hPr=o(" (BlenderbotSmall model)"),pPr=l(),QC=a("li"),F3e=a("strong"),_Pr=o("encoder-decoder"),uPr=o(" \u2014 "),JZ=a("a"),bPr=o("TFEncoderDecoderModel"),vPr=o(" (Encoder decoder model)"),FPr=l(),UC=a("li"),T3e=a("strong"),TPr=o("led"),MPr=o(" \u2014 "),YZ=a("a"),EPr=o("TFLEDForConditionalGeneration"),CPr=o(" (LED model)"),wPr=l(),HC=a("li"),M3e=a("strong"),APr=o("marian"),LPr=o(" \u2014 "),KZ=a("a"),yPr=o("TFMarianMTModel"),xPr=o(" (Marian model)"),$Pr=l(),JC=a("li"),E3e=a("strong"),kPr=o("mbart"),SPr=o(" \u2014 "),ZZ=a("a"),RPr=o("TFMBartForConditionalGeneration"),PPr=o(" (mBART model)"),BPr=l(),YC=a("li"),C3e=a("strong"),IPr=o("mt5"),NPr=o(" \u2014 "),eee=a("a"),qPr=o("TFMT5ForConditionalGeneration"),jPr=o(" (MT5 model)"),DPr=l(),KC=a("li"),w3e=a("strong"),GPr=o("pegasus"),OPr=o(" \u2014 "),oee=a("a"),VPr=o("TFPegasusForConditionalGeneration"),XPr=o(" (Pegasus model)"),zPr=l(),ZC=a("li"),A3e=a("strong"),WPr=o("t5"),QPr=o(" \u2014 "),ree=a("a"),UPr=o("TFT5ForConditionalGeneration"),HPr=o(" (T5 model)"),JPr=l(),F(e3.$$.fragment),MHe=l(),zc=a("h2"),o3=a("a"),L3e=a("span"),F(V$.$$.fragment),YPr=l(),y3e=a("span"),KPr=o("TFAutoModelForSequenceClassification"),EHe=l(),fr=a("div"),F(X$.$$.fragment),ZPr=l(),Wc=a("p"),eBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tee=a("a"),oBr=o("from_pretrained()"),rBr=o(" class method or the "),aee=a("a"),tBr=o("from_config()"),aBr=o(` class
method.`),nBr=l(),z$=a("p"),sBr=o("This class cannot be instantiated directly using "),x3e=a("code"),lBr=o("__init__()"),iBr=o(" (throws an error)."),dBr=l(),zt=a("div"),F(W$.$$.fragment),cBr=l(),$3e=a("p"),fBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mBr=l(),Qc=a("p"),gBr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),hBr=o("not"),pBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=a("a"),_Br=o("from_pretrained()"),uBr=o(" to load the model weights."),bBr=l(),F(r3.$$.fragment),vBr=l(),Dr=a("div"),F(Q$.$$.fragment),FBr=l(),S3e=a("p"),TBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MBr=l(),En=a("p"),EBr=o("The model class to instantiate is selected based on the "),R3e=a("code"),CBr=o("model_type"),wBr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),ABr=o("pretrained_model_name_or_path"),LBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),yBr=o("pretrained_model_name_or_path"),xBr=o(":"),$Br=l(),te=a("ul"),t3=a("li"),I3e=a("strong"),kBr=o("albert"),SBr=o(" \u2014 "),see=a("a"),RBr=o("TFAlbertForSequenceClassification"),PBr=o(" (ALBERT model)"),BBr=l(),a3=a("li"),N3e=a("strong"),IBr=o("bert"),NBr=o(" \u2014 "),lee=a("a"),qBr=o("TFBertForSequenceClassification"),jBr=o(" (BERT model)"),DBr=l(),n3=a("li"),q3e=a("strong"),GBr=o("camembert"),OBr=o(" \u2014 "),iee=a("a"),VBr=o("TFCamembertForSequenceClassification"),XBr=o(" (CamemBERT model)"),zBr=l(),s3=a("li"),j3e=a("strong"),WBr=o("convbert"),QBr=o(" \u2014 "),dee=a("a"),UBr=o("TFConvBertForSequenceClassification"),HBr=o(" (ConvBERT model)"),JBr=l(),l3=a("li"),D3e=a("strong"),YBr=o("ctrl"),KBr=o(" \u2014 "),cee=a("a"),ZBr=o("TFCTRLForSequenceClassification"),eIr=o(" (CTRL model)"),oIr=l(),i3=a("li"),G3e=a("strong"),rIr=o("deberta"),tIr=o(" \u2014 "),fee=a("a"),aIr=o("TFDebertaForSequenceClassification"),nIr=o(" (DeBERTa model)"),sIr=l(),d3=a("li"),O3e=a("strong"),lIr=o("deberta-v2"),iIr=o(" \u2014 "),mee=a("a"),dIr=o("TFDebertaV2ForSequenceClassification"),cIr=o(" (DeBERTa-v2 model)"),fIr=l(),c3=a("li"),V3e=a("strong"),mIr=o("distilbert"),gIr=o(" \u2014 "),gee=a("a"),hIr=o("TFDistilBertForSequenceClassification"),pIr=o(" (DistilBERT model)"),_Ir=l(),f3=a("li"),X3e=a("strong"),uIr=o("electra"),bIr=o(" \u2014 "),hee=a("a"),vIr=o("TFElectraForSequenceClassification"),FIr=o(" (ELECTRA model)"),TIr=l(),m3=a("li"),z3e=a("strong"),MIr=o("flaubert"),EIr=o(" \u2014 "),pee=a("a"),CIr=o("TFFlaubertForSequenceClassification"),wIr=o(" (FlauBERT model)"),AIr=l(),g3=a("li"),W3e=a("strong"),LIr=o("funnel"),yIr=o(" \u2014 "),_ee=a("a"),xIr=o("TFFunnelForSequenceClassification"),$Ir=o(" (Funnel Transformer model)"),kIr=l(),h3=a("li"),Q3e=a("strong"),SIr=o("gpt2"),RIr=o(" \u2014 "),uee=a("a"),PIr=o("TFGPT2ForSequenceClassification"),BIr=o(" (OpenAI GPT-2 model)"),IIr=l(),p3=a("li"),U3e=a("strong"),NIr=o("gptj"),qIr=o(" \u2014 "),bee=a("a"),jIr=o("TFGPTJForSequenceClassification"),DIr=o(" (GPT-J model)"),GIr=l(),_3=a("li"),H3e=a("strong"),OIr=o("layoutlm"),VIr=o(" \u2014 "),vee=a("a"),XIr=o("TFLayoutLMForSequenceClassification"),zIr=o(" (LayoutLM model)"),WIr=l(),u3=a("li"),J3e=a("strong"),QIr=o("longformer"),UIr=o(" \u2014 "),Fee=a("a"),HIr=o("TFLongformerForSequenceClassification"),JIr=o(" (Longformer model)"),YIr=l(),b3=a("li"),Y3e=a("strong"),KIr=o("mobilebert"),ZIr=o(" \u2014 "),Tee=a("a"),eNr=o("TFMobileBertForSequenceClassification"),oNr=o(" (MobileBERT model)"),rNr=l(),v3=a("li"),K3e=a("strong"),tNr=o("mpnet"),aNr=o(" \u2014 "),Mee=a("a"),nNr=o("TFMPNetForSequenceClassification"),sNr=o(" (MPNet model)"),lNr=l(),F3=a("li"),Z3e=a("strong"),iNr=o("openai-gpt"),dNr=o(" \u2014 "),Eee=a("a"),cNr=o("TFOpenAIGPTForSequenceClassification"),fNr=o(" (OpenAI GPT model)"),mNr=l(),T3=a("li"),e0e=a("strong"),gNr=o("rembert"),hNr=o(" \u2014 "),Cee=a("a"),pNr=o("TFRemBertForSequenceClassification"),_Nr=o(" (RemBERT model)"),uNr=l(),M3=a("li"),o0e=a("strong"),bNr=o("roberta"),vNr=o(" \u2014 "),wee=a("a"),FNr=o("TFRobertaForSequenceClassification"),TNr=o(" (RoBERTa model)"),MNr=l(),E3=a("li"),r0e=a("strong"),ENr=o("roformer"),CNr=o(" \u2014 "),Aee=a("a"),wNr=o("TFRoFormerForSequenceClassification"),ANr=o(" (RoFormer model)"),LNr=l(),C3=a("li"),t0e=a("strong"),yNr=o("tapas"),xNr=o(" \u2014 "),Lee=a("a"),$Nr=o("TFTapasForSequenceClassification"),kNr=o(" (TAPAS model)"),SNr=l(),w3=a("li"),a0e=a("strong"),RNr=o("transfo-xl"),PNr=o(" \u2014 "),yee=a("a"),BNr=o("TFTransfoXLForSequenceClassification"),INr=o(" (Transformer-XL model)"),NNr=l(),A3=a("li"),n0e=a("strong"),qNr=o("xlm"),jNr=o(" \u2014 "),xee=a("a"),DNr=o("TFXLMForSequenceClassification"),GNr=o(" (XLM model)"),ONr=l(),L3=a("li"),s0e=a("strong"),VNr=o("xlm-roberta"),XNr=o(" \u2014 "),$ee=a("a"),zNr=o("TFXLMRobertaForSequenceClassification"),WNr=o(" (XLM-RoBERTa model)"),QNr=l(),y3=a("li"),l0e=a("strong"),UNr=o("xlnet"),HNr=o(" \u2014 "),kee=a("a"),JNr=o("TFXLNetForSequenceClassification"),YNr=o(" (XLNet model)"),KNr=l(),F(x3.$$.fragment),CHe=l(),Uc=a("h2"),$3=a("a"),i0e=a("span"),F(U$.$$.fragment),ZNr=l(),d0e=a("span"),eqr=o("TFAutoModelForMultipleChoice"),wHe=l(),mr=a("div"),F(H$.$$.fragment),oqr=l(),Hc=a("p"),rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=a("a"),tqr=o("from_pretrained()"),aqr=o(" class method or the "),Ree=a("a"),nqr=o("from_config()"),sqr=o(` class
method.`),lqr=l(),J$=a("p"),iqr=o("This class cannot be instantiated directly using "),c0e=a("code"),dqr=o("__init__()"),cqr=o(" (throws an error)."),fqr=l(),Wt=a("div"),F(Y$.$$.fragment),mqr=l(),f0e=a("p"),gqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hqr=l(),Jc=a("p"),pqr=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),_qr=o("not"),uqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),bqr=o("from_pretrained()"),vqr=o(" to load the model weights."),Fqr=l(),F(k3.$$.fragment),Tqr=l(),Gr=a("div"),F(K$.$$.fragment),Mqr=l(),g0e=a("p"),Eqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cqr=l(),Cn=a("p"),wqr=o("The model class to instantiate is selected based on the "),h0e=a("code"),Aqr=o("model_type"),Lqr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),yqr=o("pretrained_model_name_or_path"),xqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),$qr=o("pretrained_model_name_or_path"),kqr=o(":"),Sqr=l(),ve=a("ul"),S3=a("li"),u0e=a("strong"),Rqr=o("albert"),Pqr=o(" \u2014 "),Bee=a("a"),Bqr=o("TFAlbertForMultipleChoice"),Iqr=o(" (ALBERT model)"),Nqr=l(),R3=a("li"),b0e=a("strong"),qqr=o("bert"),jqr=o(" \u2014 "),Iee=a("a"),Dqr=o("TFBertForMultipleChoice"),Gqr=o(" (BERT model)"),Oqr=l(),P3=a("li"),v0e=a("strong"),Vqr=o("camembert"),Xqr=o(" \u2014 "),Nee=a("a"),zqr=o("TFCamembertForMultipleChoice"),Wqr=o(" (CamemBERT model)"),Qqr=l(),B3=a("li"),F0e=a("strong"),Uqr=o("convbert"),Hqr=o(" \u2014 "),qee=a("a"),Jqr=o("TFConvBertForMultipleChoice"),Yqr=o(" (ConvBERT model)"),Kqr=l(),I3=a("li"),T0e=a("strong"),Zqr=o("distilbert"),ejr=o(" \u2014 "),jee=a("a"),ojr=o("TFDistilBertForMultipleChoice"),rjr=o(" (DistilBERT model)"),tjr=l(),N3=a("li"),M0e=a("strong"),ajr=o("electra"),njr=o(" \u2014 "),Dee=a("a"),sjr=o("TFElectraForMultipleChoice"),ljr=o(" (ELECTRA model)"),ijr=l(),q3=a("li"),E0e=a("strong"),djr=o("flaubert"),cjr=o(" \u2014 "),Gee=a("a"),fjr=o("TFFlaubertForMultipleChoice"),mjr=o(" (FlauBERT model)"),gjr=l(),j3=a("li"),C0e=a("strong"),hjr=o("funnel"),pjr=o(" \u2014 "),Oee=a("a"),_jr=o("TFFunnelForMultipleChoice"),ujr=o(" (Funnel Transformer model)"),bjr=l(),D3=a("li"),w0e=a("strong"),vjr=o("longformer"),Fjr=o(" \u2014 "),Vee=a("a"),Tjr=o("TFLongformerForMultipleChoice"),Mjr=o(" (Longformer model)"),Ejr=l(),G3=a("li"),A0e=a("strong"),Cjr=o("mobilebert"),wjr=o(" \u2014 "),Xee=a("a"),Ajr=o("TFMobileBertForMultipleChoice"),Ljr=o(" (MobileBERT model)"),yjr=l(),O3=a("li"),L0e=a("strong"),xjr=o("mpnet"),$jr=o(" \u2014 "),zee=a("a"),kjr=o("TFMPNetForMultipleChoice"),Sjr=o(" (MPNet model)"),Rjr=l(),V3=a("li"),y0e=a("strong"),Pjr=o("rembert"),Bjr=o(" \u2014 "),Wee=a("a"),Ijr=o("TFRemBertForMultipleChoice"),Njr=o(" (RemBERT model)"),qjr=l(),X3=a("li"),x0e=a("strong"),jjr=o("roberta"),Djr=o(" \u2014 "),Qee=a("a"),Gjr=o("TFRobertaForMultipleChoice"),Ojr=o(" (RoBERTa model)"),Vjr=l(),z3=a("li"),$0e=a("strong"),Xjr=o("roformer"),zjr=o(" \u2014 "),Uee=a("a"),Wjr=o("TFRoFormerForMultipleChoice"),Qjr=o(" (RoFormer model)"),Ujr=l(),W3=a("li"),k0e=a("strong"),Hjr=o("xlm"),Jjr=o(" \u2014 "),Hee=a("a"),Yjr=o("TFXLMForMultipleChoice"),Kjr=o(" (XLM model)"),Zjr=l(),Q3=a("li"),S0e=a("strong"),eDr=o("xlm-roberta"),oDr=o(" \u2014 "),Jee=a("a"),rDr=o("TFXLMRobertaForMultipleChoice"),tDr=o(" (XLM-RoBERTa model)"),aDr=l(),U3=a("li"),R0e=a("strong"),nDr=o("xlnet"),sDr=o(" \u2014 "),Yee=a("a"),lDr=o("TFXLNetForMultipleChoice"),iDr=o(" (XLNet model)"),dDr=l(),F(H3.$$.fragment),AHe=l(),Yc=a("h2"),J3=a("a"),P0e=a("span"),F(Z$.$$.fragment),cDr=l(),B0e=a("span"),fDr=o("TFAutoModelForNextSentencePrediction"),LHe=l(),gr=a("div"),F(ek.$$.fragment),mDr=l(),Kc=a("p"),gDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=a("a"),hDr=o("from_pretrained()"),pDr=o(" class method or the "),Zee=a("a"),_Dr=o("from_config()"),uDr=o(` class
method.`),bDr=l(),ok=a("p"),vDr=o("This class cannot be instantiated directly using "),I0e=a("code"),FDr=o("__init__()"),TDr=o(" (throws an error)."),MDr=l(),Qt=a("div"),F(rk.$$.fragment),EDr=l(),N0e=a("p"),CDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wDr=l(),Zc=a("p"),ADr=o(`Note:
Loading a model from its configuration file does `),q0e=a("strong"),LDr=o("not"),yDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("a"),xDr=o("from_pretrained()"),$Dr=o(" to load the model weights."),kDr=l(),F(Y3.$$.fragment),SDr=l(),Or=a("div"),F(tk.$$.fragment),RDr=l(),j0e=a("p"),PDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BDr=l(),wn=a("p"),IDr=o("The model class to instantiate is selected based on the "),D0e=a("code"),NDr=o("model_type"),qDr=o(` property of the config object (either
passed as an argument or loaded from `),G0e=a("code"),jDr=o("pretrained_model_name_or_path"),DDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=a("code"),GDr=o("pretrained_model_name_or_path"),ODr=o(":"),VDr=l(),ak=a("ul"),K3=a("li"),V0e=a("strong"),XDr=o("bert"),zDr=o(" \u2014 "),ooe=a("a"),WDr=o("TFBertForNextSentencePrediction"),QDr=o(" (BERT model)"),UDr=l(),Z3=a("li"),X0e=a("strong"),HDr=o("mobilebert"),JDr=o(" \u2014 "),roe=a("a"),YDr=o("TFMobileBertForNextSentencePrediction"),KDr=o(" (MobileBERT model)"),ZDr=l(),F(e0.$$.fragment),yHe=l(),ef=a("h2"),o0=a("a"),z0e=a("span"),F(nk.$$.fragment),eGr=l(),W0e=a("span"),oGr=o("TFAutoModelForTableQuestionAnswering"),xHe=l(),hr=a("div"),F(sk.$$.fragment),rGr=l(),of=a("p"),tGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),toe=a("a"),aGr=o("from_pretrained()"),nGr=o(" class method or the "),aoe=a("a"),sGr=o("from_config()"),lGr=o(` class
method.`),iGr=l(),lk=a("p"),dGr=o("This class cannot be instantiated directly using "),Q0e=a("code"),cGr=o("__init__()"),fGr=o(" (throws an error)."),mGr=l(),Ut=a("div"),F(ik.$$.fragment),gGr=l(),U0e=a("p"),hGr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pGr=l(),rf=a("p"),_Gr=o(`Note:
Loading a model from its configuration file does `),H0e=a("strong"),uGr=o("not"),bGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),vGr=o("from_pretrained()"),FGr=o(" to load the model weights."),TGr=l(),F(r0.$$.fragment),MGr=l(),Vr=a("div"),F(dk.$$.fragment),EGr=l(),J0e=a("p"),CGr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wGr=l(),An=a("p"),AGr=o("The model class to instantiate is selected based on the "),Y0e=a("code"),LGr=o("model_type"),yGr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),xGr=o("pretrained_model_name_or_path"),$Gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),kGr=o("pretrained_model_name_or_path"),SGr=o(":"),RGr=l(),ewe=a("ul"),t0=a("li"),owe=a("strong"),PGr=o("tapas"),BGr=o(" \u2014 "),soe=a("a"),IGr=o("TFTapasForQuestionAnswering"),NGr=o(" (TAPAS model)"),qGr=l(),F(a0.$$.fragment),$He=l(),tf=a("h2"),n0=a("a"),rwe=a("span"),F(ck.$$.fragment),jGr=l(),twe=a("span"),DGr=o("TFAutoModelForTokenClassification"),kHe=l(),pr=a("div"),F(fk.$$.fragment),GGr=l(),af=a("p"),OGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),loe=a("a"),VGr=o("from_pretrained()"),XGr=o(" class method or the "),ioe=a("a"),zGr=o("from_config()"),WGr=o(` class
method.`),QGr=l(),mk=a("p"),UGr=o("This class cannot be instantiated directly using "),awe=a("code"),HGr=o("__init__()"),JGr=o(" (throws an error)."),YGr=l(),Ht=a("div"),F(gk.$$.fragment),KGr=l(),nwe=a("p"),ZGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eOr=l(),nf=a("p"),oOr=o(`Note:
Loading a model from its configuration file does `),swe=a("strong"),rOr=o("not"),tOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=a("a"),aOr=o("from_pretrained()"),nOr=o(" to load the model weights."),sOr=l(),F(s0.$$.fragment),lOr=l(),Xr=a("div"),F(hk.$$.fragment),iOr=l(),lwe=a("p"),dOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cOr=l(),Ln=a("p"),fOr=o("The model class to instantiate is selected based on the "),iwe=a("code"),mOr=o("model_type"),gOr=o(` property of the config object (either
passed as an argument or loaded from `),dwe=a("code"),hOr=o("pretrained_model_name_or_path"),pOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cwe=a("code"),_Or=o("pretrained_model_name_or_path"),uOr=o(":"),bOr=l(),ce=a("ul"),l0=a("li"),fwe=a("strong"),vOr=o("albert"),FOr=o(" \u2014 "),coe=a("a"),TOr=o("TFAlbertForTokenClassification"),MOr=o(" (ALBERT model)"),EOr=l(),i0=a("li"),mwe=a("strong"),COr=o("bert"),wOr=o(" \u2014 "),foe=a("a"),AOr=o("TFBertForTokenClassification"),LOr=o(" (BERT model)"),yOr=l(),d0=a("li"),gwe=a("strong"),xOr=o("camembert"),$Or=o(" \u2014 "),moe=a("a"),kOr=o("TFCamembertForTokenClassification"),SOr=o(" (CamemBERT model)"),ROr=l(),c0=a("li"),hwe=a("strong"),POr=o("convbert"),BOr=o(" \u2014 "),goe=a("a"),IOr=o("TFConvBertForTokenClassification"),NOr=o(" (ConvBERT model)"),qOr=l(),f0=a("li"),pwe=a("strong"),jOr=o("deberta"),DOr=o(" \u2014 "),hoe=a("a"),GOr=o("TFDebertaForTokenClassification"),OOr=o(" (DeBERTa model)"),VOr=l(),m0=a("li"),_we=a("strong"),XOr=o("deberta-v2"),zOr=o(" \u2014 "),poe=a("a"),WOr=o("TFDebertaV2ForTokenClassification"),QOr=o(" (DeBERTa-v2 model)"),UOr=l(),g0=a("li"),uwe=a("strong"),HOr=o("distilbert"),JOr=o(" \u2014 "),_oe=a("a"),YOr=o("TFDistilBertForTokenClassification"),KOr=o(" (DistilBERT model)"),ZOr=l(),h0=a("li"),bwe=a("strong"),eVr=o("electra"),oVr=o(" \u2014 "),uoe=a("a"),rVr=o("TFElectraForTokenClassification"),tVr=o(" (ELECTRA model)"),aVr=l(),p0=a("li"),vwe=a("strong"),nVr=o("flaubert"),sVr=o(" \u2014 "),boe=a("a"),lVr=o("TFFlaubertForTokenClassification"),iVr=o(" (FlauBERT model)"),dVr=l(),_0=a("li"),Fwe=a("strong"),cVr=o("funnel"),fVr=o(" \u2014 "),voe=a("a"),mVr=o("TFFunnelForTokenClassification"),gVr=o(" (Funnel Transformer model)"),hVr=l(),u0=a("li"),Twe=a("strong"),pVr=o("layoutlm"),_Vr=o(" \u2014 "),Foe=a("a"),uVr=o("TFLayoutLMForTokenClassification"),bVr=o(" (LayoutLM model)"),vVr=l(),b0=a("li"),Mwe=a("strong"),FVr=o("longformer"),TVr=o(" \u2014 "),Toe=a("a"),MVr=o("TFLongformerForTokenClassification"),EVr=o(" (Longformer model)"),CVr=l(),v0=a("li"),Ewe=a("strong"),wVr=o("mobilebert"),AVr=o(" \u2014 "),Moe=a("a"),LVr=o("TFMobileBertForTokenClassification"),yVr=o(" (MobileBERT model)"),xVr=l(),F0=a("li"),Cwe=a("strong"),$Vr=o("mpnet"),kVr=o(" \u2014 "),Eoe=a("a"),SVr=o("TFMPNetForTokenClassification"),RVr=o(" (MPNet model)"),PVr=l(),T0=a("li"),wwe=a("strong"),BVr=o("rembert"),IVr=o(" \u2014 "),Coe=a("a"),NVr=o("TFRemBertForTokenClassification"),qVr=o(" (RemBERT model)"),jVr=l(),M0=a("li"),Awe=a("strong"),DVr=o("roberta"),GVr=o(" \u2014 "),woe=a("a"),OVr=o("TFRobertaForTokenClassification"),VVr=o(" (RoBERTa model)"),XVr=l(),E0=a("li"),Lwe=a("strong"),zVr=o("roformer"),WVr=o(" \u2014 "),Aoe=a("a"),QVr=o("TFRoFormerForTokenClassification"),UVr=o(" (RoFormer model)"),HVr=l(),C0=a("li"),ywe=a("strong"),JVr=o("xlm"),YVr=o(" \u2014 "),Loe=a("a"),KVr=o("TFXLMForTokenClassification"),ZVr=o(" (XLM model)"),eXr=l(),w0=a("li"),xwe=a("strong"),oXr=o("xlm-roberta"),rXr=o(" \u2014 "),yoe=a("a"),tXr=o("TFXLMRobertaForTokenClassification"),aXr=o(" (XLM-RoBERTa model)"),nXr=l(),A0=a("li"),$we=a("strong"),sXr=o("xlnet"),lXr=o(" \u2014 "),xoe=a("a"),iXr=o("TFXLNetForTokenClassification"),dXr=o(" (XLNet model)"),cXr=l(),F(L0.$$.fragment),SHe=l(),sf=a("h2"),y0=a("a"),kwe=a("span"),F(pk.$$.fragment),fXr=l(),Swe=a("span"),mXr=o("TFAutoModelForQuestionAnswering"),RHe=l(),_r=a("div"),F(_k.$$.fragment),gXr=l(),lf=a("p"),hXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=a("a"),pXr=o("from_pretrained()"),_Xr=o(" class method or the "),koe=a("a"),uXr=o("from_config()"),bXr=o(` class
method.`),vXr=l(),uk=a("p"),FXr=o("This class cannot be instantiated directly using "),Rwe=a("code"),TXr=o("__init__()"),MXr=o(" (throws an error)."),EXr=l(),Jt=a("div"),F(bk.$$.fragment),CXr=l(),Pwe=a("p"),wXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),AXr=l(),df=a("p"),LXr=o(`Note:
Loading a model from its configuration file does `),Bwe=a("strong"),yXr=o("not"),xXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),$Xr=o("from_pretrained()"),kXr=o(" to load the model weights."),SXr=l(),F(x0.$$.fragment),RXr=l(),zr=a("div"),F(vk.$$.fragment),PXr=l(),Iwe=a("p"),BXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),IXr=l(),yn=a("p"),NXr=o("The model class to instantiate is selected based on the "),Nwe=a("code"),qXr=o("model_type"),jXr=o(` property of the config object (either
passed as an argument or loaded from `),qwe=a("code"),DXr=o("pretrained_model_name_or_path"),GXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jwe=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(":"),XXr=l(),fe=a("ul"),$0=a("li"),Dwe=a("strong"),zXr=o("albert"),WXr=o(" \u2014 "),Roe=a("a"),QXr=o("TFAlbertForQuestionAnswering"),UXr=o(" (ALBERT model)"),HXr=l(),k0=a("li"),Gwe=a("strong"),JXr=o("bert"),YXr=o(" \u2014 "),Poe=a("a"),KXr=o("TFBertForQuestionAnswering"),ZXr=o(" (BERT model)"),ezr=l(),S0=a("li"),Owe=a("strong"),ozr=o("camembert"),rzr=o(" \u2014 "),Boe=a("a"),tzr=o("TFCamembertForQuestionAnswering"),azr=o(" (CamemBERT model)"),nzr=l(),R0=a("li"),Vwe=a("strong"),szr=o("convbert"),lzr=o(" \u2014 "),Ioe=a("a"),izr=o("TFConvBertForQuestionAnswering"),dzr=o(" (ConvBERT model)"),czr=l(),P0=a("li"),Xwe=a("strong"),fzr=o("deberta"),mzr=o(" \u2014 "),Noe=a("a"),gzr=o("TFDebertaForQuestionAnswering"),hzr=o(" (DeBERTa model)"),pzr=l(),B0=a("li"),zwe=a("strong"),_zr=o("deberta-v2"),uzr=o(" \u2014 "),qoe=a("a"),bzr=o("TFDebertaV2ForQuestionAnswering"),vzr=o(" (DeBERTa-v2 model)"),Fzr=l(),I0=a("li"),Wwe=a("strong"),Tzr=o("distilbert"),Mzr=o(" \u2014 "),joe=a("a"),Ezr=o("TFDistilBertForQuestionAnswering"),Czr=o(" (DistilBERT model)"),wzr=l(),N0=a("li"),Qwe=a("strong"),Azr=o("electra"),Lzr=o(" \u2014 "),Doe=a("a"),yzr=o("TFElectraForQuestionAnswering"),xzr=o(" (ELECTRA model)"),$zr=l(),q0=a("li"),Uwe=a("strong"),kzr=o("flaubert"),Szr=o(" \u2014 "),Goe=a("a"),Rzr=o("TFFlaubertForQuestionAnsweringSimple"),Pzr=o(" (FlauBERT model)"),Bzr=l(),j0=a("li"),Hwe=a("strong"),Izr=o("funnel"),Nzr=o(" \u2014 "),Ooe=a("a"),qzr=o("TFFunnelForQuestionAnswering"),jzr=o(" (Funnel Transformer model)"),Dzr=l(),D0=a("li"),Jwe=a("strong"),Gzr=o("gptj"),Ozr=o(" \u2014 "),Voe=a("a"),Vzr=o("TFGPTJForQuestionAnswering"),Xzr=o(" (GPT-J model)"),zzr=l(),G0=a("li"),Ywe=a("strong"),Wzr=o("longformer"),Qzr=o(" \u2014 "),Xoe=a("a"),Uzr=o("TFLongformerForQuestionAnswering"),Hzr=o(" (Longformer model)"),Jzr=l(),O0=a("li"),Kwe=a("strong"),Yzr=o("mobilebert"),Kzr=o(" \u2014 "),zoe=a("a"),Zzr=o("TFMobileBertForQuestionAnswering"),eWr=o(" (MobileBERT model)"),oWr=l(),V0=a("li"),Zwe=a("strong"),rWr=o("mpnet"),tWr=o(" \u2014 "),Woe=a("a"),aWr=o("TFMPNetForQuestionAnswering"),nWr=o(" (MPNet model)"),sWr=l(),X0=a("li"),e6e=a("strong"),lWr=o("rembert"),iWr=o(" \u2014 "),Qoe=a("a"),dWr=o("TFRemBertForQuestionAnswering"),cWr=o(" (RemBERT model)"),fWr=l(),z0=a("li"),o6e=a("strong"),mWr=o("roberta"),gWr=o(" \u2014 "),Uoe=a("a"),hWr=o("TFRobertaForQuestionAnswering"),pWr=o(" (RoBERTa model)"),_Wr=l(),W0=a("li"),r6e=a("strong"),uWr=o("roformer"),bWr=o(" \u2014 "),Hoe=a("a"),vWr=o("TFRoFormerForQuestionAnswering"),FWr=o(" (RoFormer model)"),TWr=l(),Q0=a("li"),t6e=a("strong"),MWr=o("xlm"),EWr=o(" \u2014 "),Joe=a("a"),CWr=o("TFXLMForQuestionAnsweringSimple"),wWr=o(" (XLM model)"),AWr=l(),U0=a("li"),a6e=a("strong"),LWr=o("xlm-roberta"),yWr=o(" \u2014 "),Yoe=a("a"),xWr=o("TFXLMRobertaForQuestionAnswering"),$Wr=o(" (XLM-RoBERTa model)"),kWr=l(),H0=a("li"),n6e=a("strong"),SWr=o("xlnet"),RWr=o(" \u2014 "),Koe=a("a"),PWr=o("TFXLNetForQuestionAnsweringSimple"),BWr=o(" (XLNet model)"),IWr=l(),F(J0.$$.fragment),PHe=l(),cf=a("h2"),Y0=a("a"),s6e=a("span"),F(Fk.$$.fragment),NWr=l(),l6e=a("span"),qWr=o("TFAutoModelForVision2Seq"),BHe=l(),ur=a("div"),F(Tk.$$.fragment),jWr=l(),ff=a("p"),DWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zoe=a("a"),GWr=o("from_pretrained()"),OWr=o(" class method or the "),ere=a("a"),VWr=o("from_config()"),XWr=o(` class
method.`),zWr=l(),Mk=a("p"),WWr=o("This class cannot be instantiated directly using "),i6e=a("code"),QWr=o("__init__()"),UWr=o(" (throws an error)."),HWr=l(),Yt=a("div"),F(Ek.$$.fragment),JWr=l(),d6e=a("p"),YWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KWr=l(),mf=a("p"),ZWr=o(`Note:
Loading a model from its configuration file does `),c6e=a("strong"),eQr=o("not"),oQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=a("a"),rQr=o("from_pretrained()"),tQr=o(" to load the model weights."),aQr=l(),F(K0.$$.fragment),nQr=l(),Wr=a("div"),F(Ck.$$.fragment),sQr=l(),f6e=a("p"),lQr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iQr=l(),xn=a("p"),dQr=o("The model class to instantiate is selected based on the "),m6e=a("code"),cQr=o("model_type"),fQr=o(` property of the config object (either
passed as an argument or loaded from `),g6e=a("code"),mQr=o("pretrained_model_name_or_path"),gQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=a("code"),hQr=o("pretrained_model_name_or_path"),pQr=o(":"),_Qr=l(),p6e=a("ul"),Z0=a("li"),_6e=a("strong"),uQr=o("vision-encoder-decoder"),bQr=o(" \u2014 "),rre=a("a"),vQr=o("TFVisionEncoderDecoderModel"),FQr=o(" (Vision Encoder decoder model)"),TQr=l(),F(ew.$$.fragment),IHe=l(),gf=a("h2"),ow=a("a"),u6e=a("span"),F(wk.$$.fragment),MQr=l(),b6e=a("span"),EQr=o("TFAutoModelForSpeechSeq2Seq"),NHe=l(),br=a("div"),F(Ak.$$.fragment),CQr=l(),hf=a("p"),wQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tre=a("a"),AQr=o("from_pretrained()"),LQr=o(" class method or the "),are=a("a"),yQr=o("from_config()"),xQr=o(` class
method.`),$Qr=l(),Lk=a("p"),kQr=o("This class cannot be instantiated directly using "),v6e=a("code"),SQr=o("__init__()"),RQr=o(" (throws an error)."),PQr=l(),Kt=a("div"),F(yk.$$.fragment),BQr=l(),F6e=a("p"),IQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NQr=l(),pf=a("p"),qQr=o(`Note:
Loading a model from its configuration file does `),T6e=a("strong"),jQr=o("not"),DQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("a"),GQr=o("from_pretrained()"),OQr=o(" to load the model weights."),VQr=l(),F(rw.$$.fragment),XQr=l(),Qr=a("div"),F(xk.$$.fragment),zQr=l(),M6e=a("p"),WQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),QQr=l(),$n=a("p"),UQr=o("The model class to instantiate is selected based on the "),E6e=a("code"),HQr=o("model_type"),JQr=o(` property of the config object (either
passed as an argument or loaded from `),C6e=a("code"),YQr=o("pretrained_model_name_or_path"),KQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=a("code"),ZQr=o("pretrained_model_name_or_path"),eUr=o(":"),oUr=l(),A6e=a("ul"),tw=a("li"),L6e=a("strong"),rUr=o("speech_to_text"),tUr=o(" \u2014 "),sre=a("a"),aUr=o("TFSpeech2TextForConditionalGeneration"),nUr=o(" (Speech2Text model)"),sUr=l(),F(aw.$$.fragment),qHe=l(),_f=a("h2"),nw=a("a"),y6e=a("span"),F($k.$$.fragment),lUr=l(),x6e=a("span"),iUr=o("FlaxAutoModel"),jHe=l(),vr=a("div"),F(kk.$$.fragment),dUr=l(),uf=a("p"),cUr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lre=a("a"),fUr=o("from_pretrained()"),mUr=o(" class method or the "),ire=a("a"),gUr=o("from_config()"),hUr=o(` class
method.`),pUr=l(),Sk=a("p"),_Ur=o("This class cannot be instantiated directly using "),$6e=a("code"),uUr=o("__init__()"),bUr=o(" (throws an error)."),vUr=l(),Zt=a("div"),F(Rk.$$.fragment),FUr=l(),k6e=a("p"),TUr=o("Instantiates one of the base model classes of the library from a configuration."),MUr=l(),bf=a("p"),EUr=o(`Note:
Loading a model from its configuration file does `),S6e=a("strong"),CUr=o("not"),wUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("a"),AUr=o("from_pretrained()"),LUr=o(" to load the model weights."),yUr=l(),F(sw.$$.fragment),xUr=l(),Ur=a("div"),F(Pk.$$.fragment),$Ur=l(),R6e=a("p"),kUr=o("Instantiate one of the base model classes of the library from a pretrained model."),SUr=l(),kn=a("p"),RUr=o("The model class to instantiate is selected based on the "),P6e=a("code"),PUr=o("model_type"),BUr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),IUr=o("pretrained_model_name_or_path"),NUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=a("code"),qUr=o("pretrained_model_name_or_path"),jUr=o(":"),DUr=l(),re=a("ul"),lw=a("li"),N6e=a("strong"),GUr=o("albert"),OUr=o(" \u2014 "),cre=a("a"),VUr=o("FlaxAlbertModel"),XUr=o(" (ALBERT model)"),zUr=l(),iw=a("li"),q6e=a("strong"),WUr=o("bart"),QUr=o(" \u2014 "),fre=a("a"),UUr=o("FlaxBartModel"),HUr=o(" (BART model)"),JUr=l(),dw=a("li"),j6e=a("strong"),YUr=o("beit"),KUr=o(" \u2014 "),mre=a("a"),ZUr=o("FlaxBeitModel"),eHr=o(" (BEiT model)"),oHr=l(),cw=a("li"),D6e=a("strong"),rHr=o("bert"),tHr=o(" \u2014 "),gre=a("a"),aHr=o("FlaxBertModel"),nHr=o(" (BERT model)"),sHr=l(),fw=a("li"),G6e=a("strong"),lHr=o("big_bird"),iHr=o(" \u2014 "),hre=a("a"),dHr=o("FlaxBigBirdModel"),cHr=o(" (BigBird model)"),fHr=l(),mw=a("li"),O6e=a("strong"),mHr=o("blenderbot"),gHr=o(" \u2014 "),pre=a("a"),hHr=o("FlaxBlenderbotModel"),pHr=o(" (Blenderbot model)"),_Hr=l(),gw=a("li"),V6e=a("strong"),uHr=o("blenderbot-small"),bHr=o(" \u2014 "),_re=a("a"),vHr=o("FlaxBlenderbotSmallModel"),FHr=o(" (BlenderbotSmall model)"),THr=l(),hw=a("li"),X6e=a("strong"),MHr=o("clip"),EHr=o(" \u2014 "),ure=a("a"),CHr=o("FlaxCLIPModel"),wHr=o(" (CLIP model)"),AHr=l(),pw=a("li"),z6e=a("strong"),LHr=o("distilbert"),yHr=o(" \u2014 "),bre=a("a"),xHr=o("FlaxDistilBertModel"),$Hr=o(" (DistilBERT model)"),kHr=l(),_w=a("li"),W6e=a("strong"),SHr=o("electra"),RHr=o(" \u2014 "),vre=a("a"),PHr=o("FlaxElectraModel"),BHr=o(" (ELECTRA model)"),IHr=l(),uw=a("li"),Q6e=a("strong"),NHr=o("gpt2"),qHr=o(" \u2014 "),Fre=a("a"),jHr=o("FlaxGPT2Model"),DHr=o(" (OpenAI GPT-2 model)"),GHr=l(),bw=a("li"),U6e=a("strong"),OHr=o("gpt_neo"),VHr=o(" \u2014 "),Tre=a("a"),XHr=o("FlaxGPTNeoModel"),zHr=o(" (GPT Neo model)"),WHr=l(),vw=a("li"),H6e=a("strong"),QHr=o("gptj"),UHr=o(" \u2014 "),Mre=a("a"),HHr=o("FlaxGPTJModel"),JHr=o(" (GPT-J model)"),YHr=l(),Fw=a("li"),J6e=a("strong"),KHr=o("longt5"),ZHr=o(" \u2014 "),Ere=a("a"),eJr=o("FlaxLongT5Model"),oJr=o(" (LongT5 model)"),rJr=l(),Tw=a("li"),Y6e=a("strong"),tJr=o("marian"),aJr=o(" \u2014 "),Cre=a("a"),nJr=o("FlaxMarianModel"),sJr=o(" (Marian model)"),lJr=l(),Mw=a("li"),K6e=a("strong"),iJr=o("mbart"),dJr=o(" \u2014 "),wre=a("a"),cJr=o("FlaxMBartModel"),fJr=o(" (mBART model)"),mJr=l(),Ew=a("li"),Z6e=a("strong"),gJr=o("mt5"),hJr=o(" \u2014 "),Are=a("a"),pJr=o("FlaxMT5Model"),_Jr=o(" (MT5 model)"),uJr=l(),Cw=a("li"),eAe=a("strong"),bJr=o("opt"),vJr=o(" \u2014 "),Lre=a("a"),FJr=o("FlaxOPTModel"),TJr=o(" (OPT model)"),MJr=l(),ww=a("li"),oAe=a("strong"),EJr=o("pegasus"),CJr=o(" \u2014 "),yre=a("a"),wJr=o("FlaxPegasusModel"),AJr=o(" (Pegasus model)"),LJr=l(),Aw=a("li"),rAe=a("strong"),yJr=o("roberta"),xJr=o(" \u2014 "),xre=a("a"),$Jr=o("FlaxRobertaModel"),kJr=o(" (RoBERTa model)"),SJr=l(),Lw=a("li"),tAe=a("strong"),RJr=o("roformer"),PJr=o(" \u2014 "),$re=a("a"),BJr=o("FlaxRoFormerModel"),IJr=o(" (RoFormer model)"),NJr=l(),yw=a("li"),aAe=a("strong"),qJr=o("t5"),jJr=o(" \u2014 "),kre=a("a"),DJr=o("FlaxT5Model"),GJr=o(" (T5 model)"),OJr=l(),xw=a("li"),nAe=a("strong"),VJr=o("vision-text-dual-encoder"),XJr=o(" \u2014 "),Sre=a("a"),zJr=o("FlaxVisionTextDualEncoderModel"),WJr=o(" (VisionTextDualEncoder model)"),QJr=l(),$w=a("li"),sAe=a("strong"),UJr=o("vit"),HJr=o(" \u2014 "),Rre=a("a"),JJr=o("FlaxViTModel"),YJr=o(" (ViT model)"),KJr=l(),kw=a("li"),lAe=a("strong"),ZJr=o("wav2vec2"),eYr=o(" \u2014 "),Pre=a("a"),oYr=o("FlaxWav2Vec2Model"),rYr=o(" (Wav2Vec2 model)"),tYr=l(),Sw=a("li"),iAe=a("strong"),aYr=o("xglm"),nYr=o(" \u2014 "),Bre=a("a"),sYr=o("FlaxXGLMModel"),lYr=o(" (XGLM model)"),iYr=l(),Rw=a("li"),dAe=a("strong"),dYr=o("xlm-roberta"),cYr=o(" \u2014 "),Ire=a("a"),fYr=o("FlaxXLMRobertaModel"),mYr=o(" (XLM-RoBERTa model)"),gYr=l(),F(Pw.$$.fragment),DHe=l(),vf=a("h2"),Bw=a("a"),cAe=a("span"),F(Bk.$$.fragment),hYr=l(),fAe=a("span"),pYr=o("FlaxAutoModelForCausalLM"),GHe=l(),Fr=a("div"),F(Ik.$$.fragment),_Yr=l(),Ff=a("p"),uYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nre=a("a"),bYr=o("from_pretrained()"),vYr=o(" class method or the "),qre=a("a"),FYr=o("from_config()"),TYr=o(` class
method.`),MYr=l(),Nk=a("p"),EYr=o("This class cannot be instantiated directly using "),mAe=a("code"),CYr=o("__init__()"),wYr=o(" (throws an error)."),AYr=l(),ea=a("div"),F(qk.$$.fragment),LYr=l(),gAe=a("p"),yYr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xYr=l(),Tf=a("p"),$Yr=o(`Note:
Loading a model from its configuration file does `),hAe=a("strong"),kYr=o("not"),SYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=a("a"),RYr=o("from_pretrained()"),PYr=o(" to load the model weights."),BYr=l(),F(Iw.$$.fragment),IYr=l(),Hr=a("div"),F(jk.$$.fragment),NYr=l(),pAe=a("p"),qYr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jYr=l(),Sn=a("p"),DYr=o("The model class to instantiate is selected based on the "),_Ae=a("code"),GYr=o("model_type"),OYr=o(` property of the config object (either
passed as an argument or loaded from `),uAe=a("code"),VYr=o("pretrained_model_name_or_path"),XYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bAe=a("code"),zYr=o("pretrained_model_name_or_path"),WYr=o(":"),QYr=l(),xe=a("ul"),Nw=a("li"),vAe=a("strong"),UYr=o("bart"),HYr=o(" \u2014 "),Dre=a("a"),JYr=o("FlaxBartForCausalLM"),YYr=o(" (BART model)"),KYr=l(),qw=a("li"),FAe=a("strong"),ZYr=o("bert"),eKr=o(" \u2014 "),Gre=a("a"),oKr=o("FlaxBertForCausalLM"),rKr=o(" (BERT model)"),tKr=l(),jw=a("li"),TAe=a("strong"),aKr=o("big_bird"),nKr=o(" \u2014 "),Ore=a("a"),sKr=o("FlaxBigBirdForCausalLM"),lKr=o(" (BigBird model)"),iKr=l(),Dw=a("li"),MAe=a("strong"),dKr=o("electra"),cKr=o(" \u2014 "),Vre=a("a"),fKr=o("FlaxElectraForCausalLM"),mKr=o(" (ELECTRA model)"),gKr=l(),Gw=a("li"),EAe=a("strong"),hKr=o("gpt2"),pKr=o(" \u2014 "),Xre=a("a"),_Kr=o("FlaxGPT2LMHeadModel"),uKr=o(" (OpenAI GPT-2 model)"),bKr=l(),Ow=a("li"),CAe=a("strong"),vKr=o("gpt_neo"),FKr=o(" \u2014 "),zre=a("a"),TKr=o("FlaxGPTNeoForCausalLM"),MKr=o(" (GPT Neo model)"),EKr=l(),Vw=a("li"),wAe=a("strong"),CKr=o("gptj"),wKr=o(" \u2014 "),Wre=a("a"),AKr=o("FlaxGPTJForCausalLM"),LKr=o(" (GPT-J model)"),yKr=l(),Xw=a("li"),AAe=a("strong"),xKr=o("opt"),$Kr=o(" \u2014 "),Qre=a("a"),kKr=o("FlaxOPTForCausalLM"),SKr=o(" (OPT model)"),RKr=l(),zw=a("li"),LAe=a("strong"),PKr=o("roberta"),BKr=o(" \u2014 "),Ure=a("a"),IKr=o("FlaxRobertaForCausalLM"),NKr=o(" (RoBERTa model)"),qKr=l(),Ww=a("li"),yAe=a("strong"),jKr=o("xglm"),DKr=o(" \u2014 "),Hre=a("a"),GKr=o("FlaxXGLMForCausalLM"),OKr=o(" (XGLM model)"),VKr=l(),F(Qw.$$.fragment),OHe=l(),Mf=a("h2"),Uw=a("a"),xAe=a("span"),F(Dk.$$.fragment),XKr=l(),$Ae=a("span"),zKr=o("FlaxAutoModelForPreTraining"),VHe=l(),Tr=a("div"),F(Gk.$$.fragment),WKr=l(),Ef=a("p"),QKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jre=a("a"),UKr=o("from_pretrained()"),HKr=o(" class method or the "),Yre=a("a"),JKr=o("from_config()"),YKr=o(` class
method.`),KKr=l(),Ok=a("p"),ZKr=o("This class cannot be instantiated directly using "),kAe=a("code"),eZr=o("__init__()"),oZr=o(" (throws an error)."),rZr=l(),oa=a("div"),F(Vk.$$.fragment),tZr=l(),SAe=a("p"),aZr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nZr=l(),Cf=a("p"),sZr=o(`Note:
Loading a model from its configuration file does `),RAe=a("strong"),lZr=o("not"),iZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=a("a"),dZr=o("from_pretrained()"),cZr=o(" to load the model weights."),fZr=l(),F(Hw.$$.fragment),mZr=l(),Jr=a("div"),F(Xk.$$.fragment),gZr=l(),PAe=a("p"),hZr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pZr=l(),Rn=a("p"),_Zr=o("The model class to instantiate is selected based on the "),BAe=a("code"),uZr=o("model_type"),bZr=o(` property of the config object (either
passed as an argument or loaded from `),IAe=a("code"),vZr=o("pretrained_model_name_or_path"),FZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=a("code"),TZr=o("pretrained_model_name_or_path"),MZr=o(":"),EZr=l(),Ee=a("ul"),Jw=a("li"),qAe=a("strong"),CZr=o("albert"),wZr=o(" \u2014 "),Zre=a("a"),AZr=o("FlaxAlbertForPreTraining"),LZr=o(" (ALBERT model)"),yZr=l(),Yw=a("li"),jAe=a("strong"),xZr=o("bart"),$Zr=o(" \u2014 "),ete=a("a"),kZr=o("FlaxBartForConditionalGeneration"),SZr=o(" (BART model)"),RZr=l(),Kw=a("li"),DAe=a("strong"),PZr=o("bert"),BZr=o(" \u2014 "),ote=a("a"),IZr=o("FlaxBertForPreTraining"),NZr=o(" (BERT model)"),qZr=l(),Zw=a("li"),GAe=a("strong"),jZr=o("big_bird"),DZr=o(" \u2014 "),rte=a("a"),GZr=o("FlaxBigBirdForPreTraining"),OZr=o(" (BigBird model)"),VZr=l(),e6=a("li"),OAe=a("strong"),XZr=o("electra"),zZr=o(" \u2014 "),tte=a("a"),WZr=o("FlaxElectraForPreTraining"),QZr=o(" (ELECTRA model)"),UZr=l(),o6=a("li"),VAe=a("strong"),HZr=o("longt5"),JZr=o(" \u2014 "),ate=a("a"),YZr=o("FlaxLongT5ForConditionalGeneration"),KZr=o(" (LongT5 model)"),ZZr=l(),r6=a("li"),XAe=a("strong"),eet=o("mbart"),oet=o(" \u2014 "),nte=a("a"),ret=o("FlaxMBartForConditionalGeneration"),tet=o(" (mBART model)"),aet=l(),t6=a("li"),zAe=a("strong"),net=o("mt5"),set=o(" \u2014 "),ste=a("a"),iet=o("FlaxMT5ForConditionalGeneration"),det=o(" (MT5 model)"),cet=l(),a6=a("li"),WAe=a("strong"),fet=o("roberta"),met=o(" \u2014 "),lte=a("a"),get=o("FlaxRobertaForMaskedLM"),het=o(" (RoBERTa model)"),pet=l(),n6=a("li"),QAe=a("strong"),_et=o("roformer"),uet=o(" \u2014 "),ite=a("a"),bet=o("FlaxRoFormerForMaskedLM"),vet=o(" (RoFormer model)"),Fet=l(),s6=a("li"),UAe=a("strong"),Tet=o("t5"),Met=o(" \u2014 "),dte=a("a"),Eet=o("FlaxT5ForConditionalGeneration"),Cet=o(" (T5 model)"),wet=l(),l6=a("li"),HAe=a("strong"),Aet=o("wav2vec2"),Let=o(" \u2014 "),cte=a("a"),yet=o("FlaxWav2Vec2ForPreTraining"),xet=o(" (Wav2Vec2 model)"),$et=l(),i6=a("li"),JAe=a("strong"),ket=o("xlm-roberta"),Set=o(" \u2014 "),fte=a("a"),Ret=o("FlaxXLMRobertaForMaskedLM"),Pet=o(" (XLM-RoBERTa model)"),Bet=l(),F(d6.$$.fragment),XHe=l(),wf=a("h2"),c6=a("a"),YAe=a("span"),F(zk.$$.fragment),Iet=l(),KAe=a("span"),Net=o("FlaxAutoModelForMaskedLM"),zHe=l(),Mr=a("div"),F(Wk.$$.fragment),qet=l(),Af=a("p"),jet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mte=a("a"),Det=o("from_pretrained()"),Get=o(" class method or the "),gte=a("a"),Oet=o("from_config()"),Vet=o(` class
method.`),Xet=l(),Qk=a("p"),zet=o("This class cannot be instantiated directly using "),ZAe=a("code"),Wet=o("__init__()"),Qet=o(" (throws an error)."),Uet=l(),ra=a("div"),F(Uk.$$.fragment),Het=l(),e7e=a("p"),Jet=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yet=l(),Lf=a("p"),Ket=o(`Note:
Loading a model from its configuration file does `),o7e=a("strong"),Zet=o("not"),eot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=a("a"),oot=o("from_pretrained()"),rot=o(" to load the model weights."),tot=l(),F(f6.$$.fragment),aot=l(),Yr=a("div"),F(Hk.$$.fragment),not=l(),r7e=a("p"),sot=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lot=l(),Pn=a("p"),iot=o("The model class to instantiate is selected based on the "),t7e=a("code"),dot=o("model_type"),cot=o(` property of the config object (either
passed as an argument or loaded from `),a7e=a("code"),fot=o("pretrained_model_name_or_path"),mot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=a("code"),got=o("pretrained_model_name_or_path"),hot=o(":"),pot=l(),$e=a("ul"),m6=a("li"),s7e=a("strong"),_ot=o("albert"),uot=o(" \u2014 "),pte=a("a"),bot=o("FlaxAlbertForMaskedLM"),vot=o(" (ALBERT model)"),Fot=l(),g6=a("li"),l7e=a("strong"),Tot=o("bart"),Mot=o(" \u2014 "),_te=a("a"),Eot=o("FlaxBartForConditionalGeneration"),Cot=o(" (BART model)"),wot=l(),h6=a("li"),i7e=a("strong"),Aot=o("bert"),Lot=o(" \u2014 "),ute=a("a"),yot=o("FlaxBertForMaskedLM"),xot=o(" (BERT model)"),$ot=l(),p6=a("li"),d7e=a("strong"),kot=o("big_bird"),Sot=o(" \u2014 "),bte=a("a"),Rot=o("FlaxBigBirdForMaskedLM"),Pot=o(" (BigBird model)"),Bot=l(),_6=a("li"),c7e=a("strong"),Iot=o("distilbert"),Not=o(" \u2014 "),vte=a("a"),qot=o("FlaxDistilBertForMaskedLM"),jot=o(" (DistilBERT model)"),Dot=l(),u6=a("li"),f7e=a("strong"),Got=o("electra"),Oot=o(" \u2014 "),Fte=a("a"),Vot=o("FlaxElectraForMaskedLM"),Xot=o(" (ELECTRA model)"),zot=l(),b6=a("li"),m7e=a("strong"),Wot=o("mbart"),Qot=o(" \u2014 "),Tte=a("a"),Uot=o("FlaxMBartForConditionalGeneration"),Hot=o(" (mBART model)"),Jot=l(),v6=a("li"),g7e=a("strong"),Yot=o("roberta"),Kot=o(" \u2014 "),Mte=a("a"),Zot=o("FlaxRobertaForMaskedLM"),ert=o(" (RoBERTa model)"),ort=l(),F6=a("li"),h7e=a("strong"),rrt=o("roformer"),trt=o(" \u2014 "),Ete=a("a"),art=o("FlaxRoFormerForMaskedLM"),nrt=o(" (RoFormer model)"),srt=l(),T6=a("li"),p7e=a("strong"),lrt=o("xlm-roberta"),irt=o(" \u2014 "),Cte=a("a"),drt=o("FlaxXLMRobertaForMaskedLM"),crt=o(" (XLM-RoBERTa model)"),frt=l(),F(M6.$$.fragment),WHe=l(),yf=a("h2"),E6=a("a"),_7e=a("span"),F(Jk.$$.fragment),mrt=l(),u7e=a("span"),grt=o("FlaxAutoModelForSeq2SeqLM"),QHe=l(),Er=a("div"),F(Yk.$$.fragment),hrt=l(),xf=a("p"),prt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wte=a("a"),_rt=o("from_pretrained()"),urt=o(" class method or the "),Ate=a("a"),brt=o("from_config()"),vrt=o(` class
method.`),Frt=l(),Kk=a("p"),Trt=o("This class cannot be instantiated directly using "),b7e=a("code"),Mrt=o("__init__()"),Ert=o(" (throws an error)."),Crt=l(),ta=a("div"),F(Zk.$$.fragment),wrt=l(),v7e=a("p"),Art=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lrt=l(),$f=a("p"),yrt=o(`Note:
Loading a model from its configuration file does `),F7e=a("strong"),xrt=o("not"),$rt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=a("a"),krt=o("from_pretrained()"),Srt=o(" to load the model weights."),Rrt=l(),F(C6.$$.fragment),Prt=l(),Kr=a("div"),F(eS.$$.fragment),Brt=l(),T7e=a("p"),Irt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nrt=l(),Bn=a("p"),qrt=o("The model class to instantiate is selected based on the "),M7e=a("code"),jrt=o("model_type"),Drt=o(` property of the config object (either
passed as an argument or loaded from `),E7e=a("code"),Grt=o("pretrained_model_name_or_path"),Ort=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=a("code"),Vrt=o("pretrained_model_name_or_path"),Xrt=o(":"),zrt=l(),ke=a("ul"),w6=a("li"),w7e=a("strong"),Wrt=o("bart"),Qrt=o(" \u2014 "),yte=a("a"),Urt=o("FlaxBartForConditionalGeneration"),Hrt=o(" (BART model)"),Jrt=l(),A6=a("li"),A7e=a("strong"),Yrt=o("blenderbot"),Krt=o(" \u2014 "),xte=a("a"),Zrt=o("FlaxBlenderbotForConditionalGeneration"),ett=o(" (Blenderbot model)"),ott=l(),L6=a("li"),L7e=a("strong"),rtt=o("blenderbot-small"),ttt=o(" \u2014 "),$te=a("a"),att=o("FlaxBlenderbotSmallForConditionalGeneration"),ntt=o(" (BlenderbotSmall model)"),stt=l(),y6=a("li"),y7e=a("strong"),ltt=o("encoder-decoder"),itt=o(" \u2014 "),kte=a("a"),dtt=o("FlaxEncoderDecoderModel"),ctt=o(" (Encoder decoder model)"),ftt=l(),x6=a("li"),x7e=a("strong"),mtt=o("longt5"),gtt=o(" \u2014 "),Ste=a("a"),htt=o("FlaxLongT5ForConditionalGeneration"),ptt=o(" (LongT5 model)"),_tt=l(),$6=a("li"),$7e=a("strong"),utt=o("marian"),btt=o(" \u2014 "),Rte=a("a"),vtt=o("FlaxMarianMTModel"),Ftt=o(" (Marian model)"),Ttt=l(),k6=a("li"),k7e=a("strong"),Mtt=o("mbart"),Ett=o(" \u2014 "),Pte=a("a"),Ctt=o("FlaxMBartForConditionalGeneration"),wtt=o(" (mBART model)"),Att=l(),S6=a("li"),S7e=a("strong"),Ltt=o("mt5"),ytt=o(" \u2014 "),Bte=a("a"),xtt=o("FlaxMT5ForConditionalGeneration"),$tt=o(" (MT5 model)"),ktt=l(),R6=a("li"),R7e=a("strong"),Stt=o("pegasus"),Rtt=o(" \u2014 "),Ite=a("a"),Ptt=o("FlaxPegasusForConditionalGeneration"),Btt=o(" (Pegasus model)"),Itt=l(),P6=a("li"),P7e=a("strong"),Ntt=o("t5"),qtt=o(" \u2014 "),Nte=a("a"),jtt=o("FlaxT5ForConditionalGeneration"),Dtt=o(" (T5 model)"),Gtt=l(),F(B6.$$.fragment),UHe=l(),kf=a("h2"),I6=a("a"),B7e=a("span"),F(oS.$$.fragment),Ott=l(),I7e=a("span"),Vtt=o("FlaxAutoModelForSequenceClassification"),HHe=l(),Cr=a("div"),F(rS.$$.fragment),Xtt=l(),Sf=a("p"),ztt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qte=a("a"),Wtt=o("from_pretrained()"),Qtt=o(" class method or the "),jte=a("a"),Utt=o("from_config()"),Htt=o(` class
method.`),Jtt=l(),tS=a("p"),Ytt=o("This class cannot be instantiated directly using "),N7e=a("code"),Ktt=o("__init__()"),Ztt=o(" (throws an error)."),eat=l(),aa=a("div"),F(aS.$$.fragment),oat=l(),q7e=a("p"),rat=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tat=l(),Rf=a("p"),aat=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),nat=o("not"),sat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=a("a"),lat=o("from_pretrained()"),iat=o(" to load the model weights."),dat=l(),F(N6.$$.fragment),cat=l(),Zr=a("div"),F(nS.$$.fragment),fat=l(),D7e=a("p"),mat=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gat=l(),In=a("p"),hat=o("The model class to instantiate is selected based on the "),G7e=a("code"),pat=o("model_type"),_at=o(` property of the config object (either
passed as an argument or loaded from `),O7e=a("code"),uat=o("pretrained_model_name_or_path"),bat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=a("code"),vat=o("pretrained_model_name_or_path"),Fat=o(":"),Tat=l(),Se=a("ul"),q6=a("li"),X7e=a("strong"),Mat=o("albert"),Eat=o(" \u2014 "),Gte=a("a"),Cat=o("FlaxAlbertForSequenceClassification"),wat=o(" (ALBERT model)"),Aat=l(),j6=a("li"),z7e=a("strong"),Lat=o("bart"),yat=o(" \u2014 "),Ote=a("a"),xat=o("FlaxBartForSequenceClassification"),$at=o(" (BART model)"),kat=l(),D6=a("li"),W7e=a("strong"),Sat=o("bert"),Rat=o(" \u2014 "),Vte=a("a"),Pat=o("FlaxBertForSequenceClassification"),Bat=o(" (BERT model)"),Iat=l(),G6=a("li"),Q7e=a("strong"),Nat=o("big_bird"),qat=o(" \u2014 "),Xte=a("a"),jat=o("FlaxBigBirdForSequenceClassification"),Dat=o(" (BigBird model)"),Gat=l(),O6=a("li"),U7e=a("strong"),Oat=o("distilbert"),Vat=o(" \u2014 "),zte=a("a"),Xat=o("FlaxDistilBertForSequenceClassification"),zat=o(" (DistilBERT model)"),Wat=l(),V6=a("li"),H7e=a("strong"),Qat=o("electra"),Uat=o(" \u2014 "),Wte=a("a"),Hat=o("FlaxElectraForSequenceClassification"),Jat=o(" (ELECTRA model)"),Yat=l(),X6=a("li"),J7e=a("strong"),Kat=o("mbart"),Zat=o(" \u2014 "),Qte=a("a"),ent=o("FlaxMBartForSequenceClassification"),ont=o(" (mBART model)"),rnt=l(),z6=a("li"),Y7e=a("strong"),tnt=o("roberta"),ant=o(" \u2014 "),Ute=a("a"),nnt=o("FlaxRobertaForSequenceClassification"),snt=o(" (RoBERTa model)"),lnt=l(),W6=a("li"),K7e=a("strong"),int=o("roformer"),dnt=o(" \u2014 "),Hte=a("a"),cnt=o("FlaxRoFormerForSequenceClassification"),fnt=o(" (RoFormer model)"),mnt=l(),Q6=a("li"),Z7e=a("strong"),gnt=o("xlm-roberta"),hnt=o(" \u2014 "),Jte=a("a"),pnt=o("FlaxXLMRobertaForSequenceClassification"),_nt=o(" (XLM-RoBERTa model)"),unt=l(),F(U6.$$.fragment),JHe=l(),Pf=a("h2"),H6=a("a"),eLe=a("span"),F(sS.$$.fragment),bnt=l(),oLe=a("span"),vnt=o("FlaxAutoModelForQuestionAnswering"),YHe=l(),wr=a("div"),F(lS.$$.fragment),Fnt=l(),Bf=a("p"),Tnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yte=a("a"),Mnt=o("from_pretrained()"),Ent=o(" class method or the "),Kte=a("a"),Cnt=o("from_config()"),wnt=o(` class
method.`),Ant=l(),iS=a("p"),Lnt=o("This class cannot be instantiated directly using "),rLe=a("code"),ynt=o("__init__()"),xnt=o(" (throws an error)."),$nt=l(),na=a("div"),F(dS.$$.fragment),knt=l(),tLe=a("p"),Snt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rnt=l(),If=a("p"),Pnt=o(`Note:
Loading a model from its configuration file does `),aLe=a("strong"),Bnt=o("not"),Int=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zte=a("a"),Nnt=o("from_pretrained()"),qnt=o(" to load the model weights."),jnt=l(),F(J6.$$.fragment),Dnt=l(),et=a("div"),F(cS.$$.fragment),Gnt=l(),nLe=a("p"),Ont=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vnt=l(),Nn=a("p"),Xnt=o("The model class to instantiate is selected based on the "),sLe=a("code"),znt=o("model_type"),Wnt=o(` property of the config object (either
passed as an argument or loaded from `),lLe=a("code"),Qnt=o("pretrained_model_name_or_path"),Unt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iLe=a("code"),Hnt=o("pretrained_model_name_or_path"),Jnt=o(":"),Ynt=l(),Re=a("ul"),Y6=a("li"),dLe=a("strong"),Knt=o("albert"),Znt=o(" \u2014 "),eae=a("a"),est=o("FlaxAlbertForQuestionAnswering"),ost=o(" (ALBERT model)"),rst=l(),K6=a("li"),cLe=a("strong"),tst=o("bart"),ast=o(" \u2014 "),oae=a("a"),nst=o("FlaxBartForQuestionAnswering"),sst=o(" (BART model)"),lst=l(),Z6=a("li"),fLe=a("strong"),ist=o("bert"),dst=o(" \u2014 "),rae=a("a"),cst=o("FlaxBertForQuestionAnswering"),fst=o(" (BERT model)"),mst=l(),eA=a("li"),mLe=a("strong"),gst=o("big_bird"),hst=o(" \u2014 "),tae=a("a"),pst=o("FlaxBigBirdForQuestionAnswering"),_st=o(" (BigBird model)"),ust=l(),oA=a("li"),gLe=a("strong"),bst=o("distilbert"),vst=o(" \u2014 "),aae=a("a"),Fst=o("FlaxDistilBertForQuestionAnswering"),Tst=o(" (DistilBERT model)"),Mst=l(),rA=a("li"),hLe=a("strong"),Est=o("electra"),Cst=o(" \u2014 "),nae=a("a"),wst=o("FlaxElectraForQuestionAnswering"),Ast=o(" (ELECTRA model)"),Lst=l(),tA=a("li"),pLe=a("strong"),yst=o("mbart"),xst=o(" \u2014 "),sae=a("a"),$st=o("FlaxMBartForQuestionAnswering"),kst=o(" (mBART model)"),Sst=l(),aA=a("li"),_Le=a("strong"),Rst=o("roberta"),Pst=o(" \u2014 "),lae=a("a"),Bst=o("FlaxRobertaForQuestionAnswering"),Ist=o(" (RoBERTa model)"),Nst=l(),nA=a("li"),uLe=a("strong"),qst=o("roformer"),jst=o(" \u2014 "),iae=a("a"),Dst=o("FlaxRoFormerForQuestionAnswering"),Gst=o(" (RoFormer model)"),Ost=l(),sA=a("li"),bLe=a("strong"),Vst=o("xlm-roberta"),Xst=o(" \u2014 "),dae=a("a"),zst=o("FlaxXLMRobertaForQuestionAnswering"),Wst=o(" (XLM-RoBERTa model)"),Qst=l(),F(lA.$$.fragment),KHe=l(),Nf=a("h2"),iA=a("a"),vLe=a("span"),F(fS.$$.fragment),Ust=l(),FLe=a("span"),Hst=o("FlaxAutoModelForTokenClassification"),ZHe=l(),Ar=a("div"),F(mS.$$.fragment),Jst=l(),qf=a("p"),Yst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cae=a("a"),Kst=o("from_pretrained()"),Zst=o(" class method or the "),fae=a("a"),elt=o("from_config()"),olt=o(` class
method.`),rlt=l(),gS=a("p"),tlt=o("This class cannot be instantiated directly using "),TLe=a("code"),alt=o("__init__()"),nlt=o(" (throws an error)."),slt=l(),sa=a("div"),F(hS.$$.fragment),llt=l(),MLe=a("p"),ilt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dlt=l(),jf=a("p"),clt=o(`Note:
Loading a model from its configuration file does `),ELe=a("strong"),flt=o("not"),mlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=a("a"),glt=o("from_pretrained()"),hlt=o(" to load the model weights."),plt=l(),F(dA.$$.fragment),_lt=l(),ot=a("div"),F(pS.$$.fragment),ult=l(),CLe=a("p"),blt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vlt=l(),qn=a("p"),Flt=o("The model class to instantiate is selected based on the "),wLe=a("code"),Tlt=o("model_type"),Mlt=o(` property of the config object (either
passed as an argument or loaded from `),ALe=a("code"),Elt=o("pretrained_model_name_or_path"),Clt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LLe=a("code"),wlt=o("pretrained_model_name_or_path"),Alt=o(":"),Llt=l(),Xe=a("ul"),cA=a("li"),yLe=a("strong"),ylt=o("albert"),xlt=o(" \u2014 "),gae=a("a"),$lt=o("FlaxAlbertForTokenClassification"),klt=o(" (ALBERT model)"),Slt=l(),fA=a("li"),xLe=a("strong"),Rlt=o("bert"),Plt=o(" \u2014 "),hae=a("a"),Blt=o("FlaxBertForTokenClassification"),Ilt=o(" (BERT model)"),Nlt=l(),mA=a("li"),$Le=a("strong"),qlt=o("big_bird"),jlt=o(" \u2014 "),pae=a("a"),Dlt=o("FlaxBigBirdForTokenClassification"),Glt=o(" (BigBird model)"),Olt=l(),gA=a("li"),kLe=a("strong"),Vlt=o("distilbert"),Xlt=o(" \u2014 "),_ae=a("a"),zlt=o("FlaxDistilBertForTokenClassification"),Wlt=o(" (DistilBERT model)"),Qlt=l(),hA=a("li"),SLe=a("strong"),Ult=o("electra"),Hlt=o(" \u2014 "),uae=a("a"),Jlt=o("FlaxElectraForTokenClassification"),Ylt=o(" (ELECTRA model)"),Klt=l(),pA=a("li"),RLe=a("strong"),Zlt=o("roberta"),eit=o(" \u2014 "),bae=a("a"),oit=o("FlaxRobertaForTokenClassification"),rit=o(" (RoBERTa model)"),tit=l(),_A=a("li"),PLe=a("strong"),ait=o("roformer"),nit=o(" \u2014 "),vae=a("a"),sit=o("FlaxRoFormerForTokenClassification"),lit=o(" (RoFormer model)"),iit=l(),uA=a("li"),BLe=a("strong"),dit=o("xlm-roberta"),cit=o(" \u2014 "),Fae=a("a"),fit=o("FlaxXLMRobertaForTokenClassification"),mit=o(" (XLM-RoBERTa model)"),git=l(),F(bA.$$.fragment),eJe=l(),Df=a("h2"),vA=a("a"),ILe=a("span"),F(_S.$$.fragment),hit=l(),NLe=a("span"),pit=o("FlaxAutoModelForMultipleChoice"),oJe=l(),Lr=a("div"),F(uS.$$.fragment),_it=l(),Gf=a("p"),uit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tae=a("a"),bit=o("from_pretrained()"),vit=o(" class method or the "),Mae=a("a"),Fit=o("from_config()"),Tit=o(` class
method.`),Mit=l(),bS=a("p"),Eit=o("This class cannot be instantiated directly using "),qLe=a("code"),Cit=o("__init__()"),wit=o(" (throws an error)."),Ait=l(),la=a("div"),F(vS.$$.fragment),Lit=l(),jLe=a("p"),yit=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xit=l(),Of=a("p"),$it=o(`Note:
Loading a model from its configuration file does `),DLe=a("strong"),kit=o("not"),Sit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=a("a"),Rit=o("from_pretrained()"),Pit=o(" to load the model weights."),Bit=l(),F(FA.$$.fragment),Iit=l(),rt=a("div"),F(FS.$$.fragment),Nit=l(),GLe=a("p"),qit=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jit=l(),jn=a("p"),Dit=o("The model class to instantiate is selected based on the "),OLe=a("code"),Git=o("model_type"),Oit=o(` property of the config object (either
passed as an argument or loaded from `),VLe=a("code"),Vit=o("pretrained_model_name_or_path"),Xit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XLe=a("code"),zit=o("pretrained_model_name_or_path"),Wit=o(":"),Qit=l(),ze=a("ul"),TA=a("li"),zLe=a("strong"),Uit=o("albert"),Hit=o(" \u2014 "),Cae=a("a"),Jit=o("FlaxAlbertForMultipleChoice"),Yit=o(" (ALBERT model)"),Kit=l(),MA=a("li"),WLe=a("strong"),Zit=o("bert"),edt=o(" \u2014 "),wae=a("a"),odt=o("FlaxBertForMultipleChoice"),rdt=o(" (BERT model)"),tdt=l(),EA=a("li"),QLe=a("strong"),adt=o("big_bird"),ndt=o(" \u2014 "),Aae=a("a"),sdt=o("FlaxBigBirdForMultipleChoice"),ldt=o(" (BigBird model)"),idt=l(),CA=a("li"),ULe=a("strong"),ddt=o("distilbert"),cdt=o(" \u2014 "),Lae=a("a"),fdt=o("FlaxDistilBertForMultipleChoice"),mdt=o(" (DistilBERT model)"),gdt=l(),wA=a("li"),HLe=a("strong"),hdt=o("electra"),pdt=o(" \u2014 "),yae=a("a"),_dt=o("FlaxElectraForMultipleChoice"),udt=o(" (ELECTRA model)"),bdt=l(),AA=a("li"),JLe=a("strong"),vdt=o("roberta"),Fdt=o(" \u2014 "),xae=a("a"),Tdt=o("FlaxRobertaForMultipleChoice"),Mdt=o(" (RoBERTa model)"),Edt=l(),LA=a("li"),YLe=a("strong"),Cdt=o("roformer"),wdt=o(" \u2014 "),$ae=a("a"),Adt=o("FlaxRoFormerForMultipleChoice"),Ldt=o(" (RoFormer model)"),ydt=l(),yA=a("li"),KLe=a("strong"),xdt=o("xlm-roberta"),$dt=o(" \u2014 "),kae=a("a"),kdt=o("FlaxXLMRobertaForMultipleChoice"),Sdt=o(" (XLM-RoBERTa model)"),Rdt=l(),F(xA.$$.fragment),rJe=l(),Vf=a("h2"),$A=a("a"),ZLe=a("span"),F(TS.$$.fragment),Pdt=l(),eye=a("span"),Bdt=o("FlaxAutoModelForNextSentencePrediction"),tJe=l(),yr=a("div"),F(MS.$$.fragment),Idt=l(),Xf=a("p"),Ndt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sae=a("a"),qdt=o("from_pretrained()"),jdt=o(" class method or the "),Rae=a("a"),Ddt=o("from_config()"),Gdt=o(` class
method.`),Odt=l(),ES=a("p"),Vdt=o("This class cannot be instantiated directly using "),oye=a("code"),Xdt=o("__init__()"),zdt=o(" (throws an error)."),Wdt=l(),ia=a("div"),F(CS.$$.fragment),Qdt=l(),rye=a("p"),Udt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hdt=l(),zf=a("p"),Jdt=o(`Note:
Loading a model from its configuration file does `),tye=a("strong"),Ydt=o("not"),Kdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pae=a("a"),Zdt=o("from_pretrained()"),ect=o(" to load the model weights."),oct=l(),F(kA.$$.fragment),rct=l(),tt=a("div"),F(wS.$$.fragment),tct=l(),aye=a("p"),act=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nct=l(),Dn=a("p"),sct=o("The model class to instantiate is selected based on the "),nye=a("code"),lct=o("model_type"),ict=o(` property of the config object (either
passed as an argument or loaded from `),sye=a("code"),dct=o("pretrained_model_name_or_path"),cct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lye=a("code"),fct=o("pretrained_model_name_or_path"),mct=o(":"),gct=l(),iye=a("ul"),SA=a("li"),dye=a("strong"),hct=o("bert"),pct=o(" \u2014 "),Bae=a("a"),_ct=o("FlaxBertForNextSentencePrediction"),uct=o(" (BERT model)"),bct=l(),F(RA.$$.fragment),aJe=l(),Wf=a("h2"),PA=a("a"),cye=a("span"),F(AS.$$.fragment),vct=l(),fye=a("span"),Fct=o("FlaxAutoModelForImageClassification"),nJe=l(),xr=a("div"),F(LS.$$.fragment),Tct=l(),Qf=a("p"),Mct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iae=a("a"),Ect=o("from_pretrained()"),Cct=o(" class method or the "),Nae=a("a"),wct=o("from_config()"),Act=o(` class
method.`),Lct=l(),yS=a("p"),yct=o("This class cannot be instantiated directly using "),mye=a("code"),xct=o("__init__()"),$ct=o(" (throws an error)."),kct=l(),da=a("div"),F(xS.$$.fragment),Sct=l(),gye=a("p"),Rct=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pct=l(),Uf=a("p"),Bct=o(`Note:
Loading a model from its configuration file does `),hye=a("strong"),Ict=o("not"),Nct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qae=a("a"),qct=o("from_pretrained()"),jct=o(" to load the model weights."),Dct=l(),F(BA.$$.fragment),Gct=l(),at=a("div"),F($S.$$.fragment),Oct=l(),pye=a("p"),Vct=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xct=l(),Gn=a("p"),zct=o("The model class to instantiate is selected based on the "),_ye=a("code"),Wct=o("model_type"),Qct=o(` property of the config object (either
passed as an argument or loaded from `),uye=a("code"),Uct=o("pretrained_model_name_or_path"),Hct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bye=a("code"),Jct=o("pretrained_model_name_or_path"),Yct=o(":"),Kct=l(),kS=a("ul"),IA=a("li"),vye=a("strong"),Zct=o("beit"),eft=o(" \u2014 "),jae=a("a"),oft=o("FlaxBeitForImageClassification"),rft=o(" (BEiT model)"),tft=l(),NA=a("li"),Fye=a("strong"),aft=o("vit"),nft=o(" \u2014 "),Dae=a("a"),sft=o("FlaxViTForImageClassification"),lft=o(" (ViT model)"),ift=l(),F(qA.$$.fragment),sJe=l(),Hf=a("h2"),jA=a("a"),Tye=a("span"),F(SS.$$.fragment),dft=l(),Mye=a("span"),cft=o("FlaxAutoModelForVision2Seq"),lJe=l(),$r=a("div"),F(RS.$$.fragment),fft=l(),Jf=a("p"),mft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gae=a("a"),gft=o("from_pretrained()"),hft=o(" class method or the "),Oae=a("a"),pft=o("from_config()"),_ft=o(` class
method.`),uft=l(),PS=a("p"),bft=o("This class cannot be instantiated directly using "),Eye=a("code"),vft=o("__init__()"),Fft=o(" (throws an error)."),Tft=l(),ca=a("div"),F(BS.$$.fragment),Mft=l(),Cye=a("p"),Eft=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cft=l(),Yf=a("p"),wft=o(`Note:
Loading a model from its configuration file does `),wye=a("strong"),Aft=o("not"),Lft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vae=a("a"),yft=o("from_pretrained()"),xft=o(" to load the model weights."),$ft=l(),F(DA.$$.fragment),kft=l(),nt=a("div"),F(IS.$$.fragment),Sft=l(),Aye=a("p"),Rft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pft=l(),On=a("p"),Bft=o("The model class to instantiate is selected based on the "),Lye=a("code"),Ift=o("model_type"),Nft=o(` property of the config object (either
passed as an argument or loaded from `),yye=a("code"),qft=o("pretrained_model_name_or_path"),jft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=a("code"),Dft=o("pretrained_model_name_or_path"),Gft=o(":"),Oft=l(),$ye=a("ul"),GA=a("li"),kye=a("strong"),Vft=o("vision-encoder-decoder"),Xft=o(" \u2014 "),Xae=a("a"),zft=o("FlaxVisionEncoderDecoderModel"),Wft=o(" (Vision Encoder decoder model)"),Qft=l(),F(OA.$$.fragment),this.h()},l(f){const u=pta('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var NS=s(p);m=n(NS,"A",{id:!0,class:!0,href:!0});var Sye=s(m);_=n(Sye,"SPAN",{});var Rye=s(_);T(d.$$.fragment,Rye),Rye.forEach(t),Sye.forEach(t),h=i(NS),Ao=n(NS,"SPAN",{});var Pye=s(Ao);Oi=r(Pye,"Auto Classes"),Pye.forEach(t),NS.forEach(t),om=i(f),ft=n(f,"P",{});var qS=s(ft);Vi=r(qS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(qS,"CODE",{});var Bye=s(Xi);gy=r(Bye,"from_pretrained()"),Bye.forEach(t),rm=r(qS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qS.forEach(t),Ve=i(f),Ue=n(f,"P",{});var Vn=s(Ue);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var Iye=s(Xn);hy=r(Iye,"AutoConfig"),Iye.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var Nye=s(Wn);py=r(Nye,"AutoModel"),Nye.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var qye=s(Qn);_y=r(qye,"AutoTokenizer"),qye.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),tm=i(f),T(ja.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var jS=s(Ae);sP=r(jS,"will create a model that is an instance of "),Ui=n(jS,"A",{href:!0});var jye=s(Ui);lP=r(jye,"BertModel"),jye.forEach(t),iP=r(jS,"."),jS.forEach(t),Lo=i(f),Da=n(f,"P",{});var DS=s(Da);dP=r(DS,"There is one class of "),am=n(DS,"CODE",{});var Dye=s(am);cP=r(Dye,"AutoModel"),Dye.forEach(t),MKe=r(DS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),DS.forEach(t),ZQe=i(f),Hi=n(f,"H2",{class:!0});var GS=s(Hi);nm=n(GS,"A",{id:!0,class:!0,href:!0});var Gye=s(nm);Vse=n(Gye,"SPAN",{});var Oye=s(Vse);T(uy.$$.fragment,Oye),Oye.forEach(t),Gye.forEach(t),EKe=i(GS),Xse=n(GS,"SPAN",{});var Vye=s(Xse);CKe=r(Vye,"Extending the Auto Classes"),Vye.forEach(t),GS.forEach(t),eUe=i(f),Un=n(f,"P",{});var Kf=s(Un);wKe=r(Kf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zse=n(Kf,"CODE",{});var Xye=s(zse);AKe=r(Xye,"NewModel"),Xye.forEach(t),LKe=r(Kf,", make sure you have a "),Wse=n(Kf,"CODE",{});var zye=s(Wse);yKe=r(zye,"NewModelConfig"),zye.forEach(t),xKe=r(Kf,` then you can add those to the auto
classes like this:`),Kf.forEach(t),oUe=i(f),T(by.$$.fragment,f),rUe=i(f),fP=n(f,"P",{});var Wye=s(fP);$Ke=r(Wye,"You will then be able to use the auto classes like you would usually do!"),Wye.forEach(t),tUe=i(f),T(sm.$$.fragment,f),aUe=i(f),Ji=n(f,"H2",{class:!0});var OS=s(Ji);lm=n(OS,"A",{id:!0,class:!0,href:!0});var Qye=s(lm);Qse=n(Qye,"SPAN",{});var Uye=s(Qse);T(vy.$$.fragment,Uye),Uye.forEach(t),Qye.forEach(t),kKe=i(OS),Use=n(OS,"SPAN",{});var Hye=s(Use);SKe=r(Hye,"AutoConfig"),Hye.forEach(t),OS.forEach(t),nUe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(Fy.$$.fragment,dt),RKe=i(dt),Ty=n(dt,"P",{});var VS=s(Ty);PKe=r(VS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mP=n(VS,"A",{href:!0});var Jye=s(mP);BKe=r(Jye,"from_pretrained()"),Jye.forEach(t),IKe=r(VS," class method."),VS.forEach(t),NKe=i(dt),My=n(dt,"P",{});var XS=s(My);qKe=r(XS,"This class cannot be instantiated directly using "),Hse=n(XS,"CODE",{});var Yye=s(Hse);jKe=r(Yye,"__init__()"),Yye.forEach(t),DKe=r(XS," (throws an error)."),XS.forEach(t),GKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(Ey.$$.fragment,ct),OKe=i(ct),Jse=n(ct,"P",{});var Kye=s(Jse);VKe=r(Kye,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Kye.forEach(t),XKe=i(ct),Yi=n(ct,"P",{});var Zf=s(Yi);zKe=r(Zf,"The configuration class to instantiate is selected based on the "),Yse=n(Zf,"CODE",{});var Zye=s(Yse);WKe=r(Zye,"model_type"),Zye.forEach(t),QKe=r(Zf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Kse=n(Zf,"CODE",{});var e9e=s(Kse);UKe=r(e9e,"pretrained_model_name_or_path"),e9e.forEach(t),HKe=r(Zf,":"),Zf.forEach(t),JKe=i(ct),A=n(ct,"UL",{});var L=s(A);im=n(L,"LI",{});var VA=s(im);Zse=n(VA,"STRONG",{});var o9e=s(Zse);YKe=r(o9e,"albert"),o9e.forEach(t),KKe=r(VA," \u2014 "),gP=n(VA,"A",{href:!0});var r9e=s(gP);ZKe=r(r9e,"AlbertConfig"),r9e.forEach(t),eZe=r(VA," (ALBERT model)"),VA.forEach(t),oZe=i(L),dm=n(L,"LI",{});var XA=s(dm);ele=n(XA,"STRONG",{});var t9e=s(ele);rZe=r(t9e,"bart"),t9e.forEach(t),tZe=r(XA," \u2014 "),hP=n(XA,"A",{href:!0});var a9e=s(hP);aZe=r(a9e,"BartConfig"),a9e.forEach(t),nZe=r(XA," (BART model)"),XA.forEach(t),sZe=i(L),cm=n(L,"LI",{});var zA=s(cm);ole=n(zA,"STRONG",{});var n9e=s(ole);lZe=r(n9e,"beit"),n9e.forEach(t),iZe=r(zA," \u2014 "),pP=n(zA,"A",{href:!0});var s9e=s(pP);dZe=r(s9e,"BeitConfig"),s9e.forEach(t),cZe=r(zA," (BEiT model)"),zA.forEach(t),fZe=i(L),fm=n(L,"LI",{});var WA=s(fm);rle=n(WA,"STRONG",{});var l9e=s(rle);mZe=r(l9e,"bert"),l9e.forEach(t),gZe=r(WA," \u2014 "),_P=n(WA,"A",{href:!0});var i9e=s(_P);hZe=r(i9e,"BertConfig"),i9e.forEach(t),pZe=r(WA," (BERT model)"),WA.forEach(t),_Ze=i(L),mm=n(L,"LI",{});var QA=s(mm);tle=n(QA,"STRONG",{});var d9e=s(tle);uZe=r(d9e,"bert-generation"),d9e.forEach(t),bZe=r(QA," \u2014 "),uP=n(QA,"A",{href:!0});var c9e=s(uP);vZe=r(c9e,"BertGenerationConfig"),c9e.forEach(t),FZe=r(QA," (Bert Generation model)"),QA.forEach(t),TZe=i(L),gm=n(L,"LI",{});var UA=s(gm);ale=n(UA,"STRONG",{});var f9e=s(ale);MZe=r(f9e,"big_bird"),f9e.forEach(t),EZe=r(UA," \u2014 "),bP=n(UA,"A",{href:!0});var m9e=s(bP);CZe=r(m9e,"BigBirdConfig"),m9e.forEach(t),wZe=r(UA," (BigBird model)"),UA.forEach(t),AZe=i(L),hm=n(L,"LI",{});var HA=s(hm);nle=n(HA,"STRONG",{});var g9e=s(nle);LZe=r(g9e,"bigbird_pegasus"),g9e.forEach(t),yZe=r(HA," \u2014 "),vP=n(HA,"A",{href:!0});var h9e=s(vP);xZe=r(h9e,"BigBirdPegasusConfig"),h9e.forEach(t),$Ze=r(HA," (BigBird-Pegasus model)"),HA.forEach(t),kZe=i(L),pm=n(L,"LI",{});var JA=s(pm);sle=n(JA,"STRONG",{});var p9e=s(sle);SZe=r(p9e,"blenderbot"),p9e.forEach(t),RZe=r(JA," \u2014 "),FP=n(JA,"A",{href:!0});var _9e=s(FP);PZe=r(_9e,"BlenderbotConfig"),_9e.forEach(t),BZe=r(JA," (Blenderbot model)"),JA.forEach(t),IZe=i(L),_m=n(L,"LI",{});var YA=s(_m);lle=n(YA,"STRONG",{});var u9e=s(lle);NZe=r(u9e,"blenderbot-small"),u9e.forEach(t),qZe=r(YA," \u2014 "),TP=n(YA,"A",{href:!0});var b9e=s(TP);jZe=r(b9e,"BlenderbotSmallConfig"),b9e.forEach(t),DZe=r(YA," (BlenderbotSmall model)"),YA.forEach(t),GZe=i(L),um=n(L,"LI",{});var KA=s(um);ile=n(KA,"STRONG",{});var v9e=s(ile);OZe=r(v9e,"bloom"),v9e.forEach(t),VZe=r(KA," \u2014 "),MP=n(KA,"A",{href:!0});var F9e=s(MP);XZe=r(F9e,"BloomConfig"),F9e.forEach(t),zZe=r(KA," (BLOOM model)"),KA.forEach(t),WZe=i(L),bm=n(L,"LI",{});var ZA=s(bm);dle=n(ZA,"STRONG",{});var T9e=s(dle);QZe=r(T9e,"camembert"),T9e.forEach(t),UZe=r(ZA," \u2014 "),EP=n(ZA,"A",{href:!0});var M9e=s(EP);HZe=r(M9e,"CamembertConfig"),M9e.forEach(t),JZe=r(ZA," (CamemBERT model)"),ZA.forEach(t),YZe=i(L),vm=n(L,"LI",{});var e7=s(vm);cle=n(e7,"STRONG",{});var E9e=s(cle);KZe=r(E9e,"canine"),E9e.forEach(t),ZZe=r(e7," \u2014 "),CP=n(e7,"A",{href:!0});var C9e=s(CP);eeo=r(C9e,"CanineConfig"),C9e.forEach(t),oeo=r(e7," (CANINE model)"),e7.forEach(t),reo=i(L),Fm=n(L,"LI",{});var o7=s(Fm);fle=n(o7,"STRONG",{});var w9e=s(fle);teo=r(w9e,"clip"),w9e.forEach(t),aeo=r(o7," \u2014 "),wP=n(o7,"A",{href:!0});var A9e=s(wP);neo=r(A9e,"CLIPConfig"),A9e.forEach(t),seo=r(o7," (CLIP model)"),o7.forEach(t),leo=i(L),Tm=n(L,"LI",{});var r7=s(Tm);mle=n(r7,"STRONG",{});var L9e=s(mle);ieo=r(L9e,"codegen"),L9e.forEach(t),deo=r(r7," \u2014 "),AP=n(r7,"A",{href:!0});var y9e=s(AP);ceo=r(y9e,"CodeGenConfig"),y9e.forEach(t),feo=r(r7," (CodeGen model)"),r7.forEach(t),meo=i(L),Mm=n(L,"LI",{});var t7=s(Mm);gle=n(t7,"STRONG",{});var x9e=s(gle);geo=r(x9e,"convbert"),x9e.forEach(t),heo=r(t7," \u2014 "),LP=n(t7,"A",{href:!0});var $9e=s(LP);peo=r($9e,"ConvBertConfig"),$9e.forEach(t),_eo=r(t7," (ConvBERT model)"),t7.forEach(t),ueo=i(L),Em=n(L,"LI",{});var a7=s(Em);hle=n(a7,"STRONG",{});var k9e=s(hle);beo=r(k9e,"convnext"),k9e.forEach(t),veo=r(a7," \u2014 "),yP=n(a7,"A",{href:!0});var S9e=s(yP);Feo=r(S9e,"ConvNextConfig"),S9e.forEach(t),Teo=r(a7," (ConvNeXT model)"),a7.forEach(t),Meo=i(L),Cm=n(L,"LI",{});var n7=s(Cm);ple=n(n7,"STRONG",{});var R9e=s(ple);Eeo=r(R9e,"ctrl"),R9e.forEach(t),Ceo=r(n7," \u2014 "),xP=n(n7,"A",{href:!0});var P9e=s(xP);weo=r(P9e,"CTRLConfig"),P9e.forEach(t),Aeo=r(n7," (CTRL model)"),n7.forEach(t),Leo=i(L),wm=n(L,"LI",{});var s7=s(wm);_le=n(s7,"STRONG",{});var B9e=s(_le);yeo=r(B9e,"cvt"),B9e.forEach(t),xeo=r(s7," \u2014 "),$P=n(s7,"A",{href:!0});var I9e=s($P);$eo=r(I9e,"CvtConfig"),I9e.forEach(t),keo=r(s7," (CvT model)"),s7.forEach(t),Seo=i(L),Am=n(L,"LI",{});var l7=s(Am);ule=n(l7,"STRONG",{});var N9e=s(ule);Reo=r(N9e,"data2vec-audio"),N9e.forEach(t),Peo=r(l7," \u2014 "),kP=n(l7,"A",{href:!0});var q9e=s(kP);Beo=r(q9e,"Data2VecAudioConfig"),q9e.forEach(t),Ieo=r(l7," (Data2VecAudio model)"),l7.forEach(t),Neo=i(L),Lm=n(L,"LI",{});var i7=s(Lm);ble=n(i7,"STRONG",{});var j9e=s(ble);qeo=r(j9e,"data2vec-text"),j9e.forEach(t),jeo=r(i7," \u2014 "),SP=n(i7,"A",{href:!0});var D9e=s(SP);Deo=r(D9e,"Data2VecTextConfig"),D9e.forEach(t),Geo=r(i7," (Data2VecText model)"),i7.forEach(t),Oeo=i(L),ym=n(L,"LI",{});var d7=s(ym);vle=n(d7,"STRONG",{});var G9e=s(vle);Veo=r(G9e,"data2vec-vision"),G9e.forEach(t),Xeo=r(d7," \u2014 "),RP=n(d7,"A",{href:!0});var O9e=s(RP);zeo=r(O9e,"Data2VecVisionConfig"),O9e.forEach(t),Weo=r(d7," (Data2VecVision model)"),d7.forEach(t),Qeo=i(L),xm=n(L,"LI",{});var c7=s(xm);Fle=n(c7,"STRONG",{});var V9e=s(Fle);Ueo=r(V9e,"deberta"),V9e.forEach(t),Heo=r(c7," \u2014 "),PP=n(c7,"A",{href:!0});var X9e=s(PP);Jeo=r(X9e,"DebertaConfig"),X9e.forEach(t),Yeo=r(c7," (DeBERTa model)"),c7.forEach(t),Keo=i(L),$m=n(L,"LI",{});var f7=s($m);Tle=n(f7,"STRONG",{});var z9e=s(Tle);Zeo=r(z9e,"deberta-v2"),z9e.forEach(t),eoo=r(f7," \u2014 "),BP=n(f7,"A",{href:!0});var W9e=s(BP);ooo=r(W9e,"DebertaV2Config"),W9e.forEach(t),roo=r(f7," (DeBERTa-v2 model)"),f7.forEach(t),too=i(L),km=n(L,"LI",{});var m7=s(km);Mle=n(m7,"STRONG",{});var Q9e=s(Mle);aoo=r(Q9e,"decision_transformer"),Q9e.forEach(t),noo=r(m7," \u2014 "),IP=n(m7,"A",{href:!0});var U9e=s(IP);soo=r(U9e,"DecisionTransformerConfig"),U9e.forEach(t),loo=r(m7," (Decision Transformer model)"),m7.forEach(t),ioo=i(L),Sm=n(L,"LI",{});var g7=s(Sm);Ele=n(g7,"STRONG",{});var H9e=s(Ele);doo=r(H9e,"deit"),H9e.forEach(t),coo=r(g7," \u2014 "),NP=n(g7,"A",{href:!0});var Hft=s(NP);foo=r(Hft,"DeiTConfig"),Hft.forEach(t),moo=r(g7," (DeiT model)"),g7.forEach(t),goo=i(L),Rm=n(L,"LI",{});var J9e=s(Rm);Cle=n(J9e,"STRONG",{});var Jft=s(Cle);hoo=r(Jft,"detr"),Jft.forEach(t),poo=r(J9e," \u2014 "),qP=n(J9e,"A",{href:!0});var Yft=s(qP);_oo=r(Yft,"DetrConfig"),Yft.forEach(t),uoo=r(J9e," (DETR model)"),J9e.forEach(t),boo=i(L),Pm=n(L,"LI",{});var Y9e=s(Pm);wle=n(Y9e,"STRONG",{});var Kft=s(wle);voo=r(Kft,"distilbert"),Kft.forEach(t),Foo=r(Y9e," \u2014 "),jP=n(Y9e,"A",{href:!0});var Zft=s(jP);Too=r(Zft,"DistilBertConfig"),Zft.forEach(t),Moo=r(Y9e," (DistilBERT model)"),Y9e.forEach(t),Eoo=i(L),Bm=n(L,"LI",{});var K9e=s(Bm);Ale=n(K9e,"STRONG",{});var emt=s(Ale);Coo=r(emt,"donut-swin"),emt.forEach(t),woo=r(K9e," \u2014 "),DP=n(K9e,"A",{href:!0});var omt=s(DP);Aoo=r(omt,"DonutSwinConfig"),omt.forEach(t),Loo=r(K9e," (DonutSwin model)"),K9e.forEach(t),yoo=i(L),Im=n(L,"LI",{});var Z9e=s(Im);Lle=n(Z9e,"STRONG",{});var rmt=s(Lle);xoo=r(rmt,"dpr"),rmt.forEach(t),$oo=r(Z9e," \u2014 "),GP=n(Z9e,"A",{href:!0});var tmt=s(GP);koo=r(tmt,"DPRConfig"),tmt.forEach(t),Soo=r(Z9e," (DPR model)"),Z9e.forEach(t),Roo=i(L),Nm=n(L,"LI",{});var exe=s(Nm);yle=n(exe,"STRONG",{});var amt=s(yle);Poo=r(amt,"dpt"),amt.forEach(t),Boo=r(exe," \u2014 "),OP=n(exe,"A",{href:!0});var nmt=s(OP);Ioo=r(nmt,"DPTConfig"),nmt.forEach(t),Noo=r(exe," (DPT model)"),exe.forEach(t),qoo=i(L),qm=n(L,"LI",{});var oxe=s(qm);xle=n(oxe,"STRONG",{});var smt=s(xle);joo=r(smt,"electra"),smt.forEach(t),Doo=r(oxe," \u2014 "),VP=n(oxe,"A",{href:!0});var lmt=s(VP);Goo=r(lmt,"ElectraConfig"),lmt.forEach(t),Ooo=r(oxe," (ELECTRA model)"),oxe.forEach(t),Voo=i(L),jm=n(L,"LI",{});var rxe=s(jm);$le=n(rxe,"STRONG",{});var imt=s($le);Xoo=r(imt,"encoder-decoder"),imt.forEach(t),zoo=r(rxe," \u2014 "),XP=n(rxe,"A",{href:!0});var dmt=s(XP);Woo=r(dmt,"EncoderDecoderConfig"),dmt.forEach(t),Qoo=r(rxe," (Encoder decoder model)"),rxe.forEach(t),Uoo=i(L),Dm=n(L,"LI",{});var txe=s(Dm);kle=n(txe,"STRONG",{});var cmt=s(kle);Hoo=r(cmt,"flaubert"),cmt.forEach(t),Joo=r(txe," \u2014 "),zP=n(txe,"A",{href:!0});var fmt=s(zP);Yoo=r(fmt,"FlaubertConfig"),fmt.forEach(t),Koo=r(txe," (FlauBERT model)"),txe.forEach(t),Zoo=i(L),Gm=n(L,"LI",{});var axe=s(Gm);Sle=n(axe,"STRONG",{});var mmt=s(Sle);ero=r(mmt,"flava"),mmt.forEach(t),oro=r(axe," \u2014 "),WP=n(axe,"A",{href:!0});var gmt=s(WP);rro=r(gmt,"FlavaConfig"),gmt.forEach(t),tro=r(axe," (FLAVA model)"),axe.forEach(t),aro=i(L),Om=n(L,"LI",{});var nxe=s(Om);Rle=n(nxe,"STRONG",{});var hmt=s(Rle);nro=r(hmt,"fnet"),hmt.forEach(t),sro=r(nxe," \u2014 "),QP=n(nxe,"A",{href:!0});var pmt=s(QP);lro=r(pmt,"FNetConfig"),pmt.forEach(t),iro=r(nxe," (FNet model)"),nxe.forEach(t),dro=i(L),Vm=n(L,"LI",{});var sxe=s(Vm);Ple=n(sxe,"STRONG",{});var _mt=s(Ple);cro=r(_mt,"fsmt"),_mt.forEach(t),fro=r(sxe," \u2014 "),UP=n(sxe,"A",{href:!0});var umt=s(UP);mro=r(umt,"FSMTConfig"),umt.forEach(t),gro=r(sxe," (FairSeq Machine-Translation model)"),sxe.forEach(t),hro=i(L),Xm=n(L,"LI",{});var lxe=s(Xm);Ble=n(lxe,"STRONG",{});var bmt=s(Ble);pro=r(bmt,"funnel"),bmt.forEach(t),_ro=r(lxe," \u2014 "),HP=n(lxe,"A",{href:!0});var vmt=s(HP);uro=r(vmt,"FunnelConfig"),vmt.forEach(t),bro=r(lxe," (Funnel Transformer model)"),lxe.forEach(t),vro=i(L),zm=n(L,"LI",{});var ixe=s(zm);Ile=n(ixe,"STRONG",{});var Fmt=s(Ile);Fro=r(Fmt,"glpn"),Fmt.forEach(t),Tro=r(ixe," \u2014 "),JP=n(ixe,"A",{href:!0});var Tmt=s(JP);Mro=r(Tmt,"GLPNConfig"),Tmt.forEach(t),Ero=r(ixe," (GLPN model)"),ixe.forEach(t),Cro=i(L),Wm=n(L,"LI",{});var dxe=s(Wm);Nle=n(dxe,"STRONG",{});var Mmt=s(Nle);wro=r(Mmt,"gpt2"),Mmt.forEach(t),Aro=r(dxe," \u2014 "),YP=n(dxe,"A",{href:!0});var Emt=s(YP);Lro=r(Emt,"GPT2Config"),Emt.forEach(t),yro=r(dxe," (OpenAI GPT-2 model)"),dxe.forEach(t),xro=i(L),Qm=n(L,"LI",{});var cxe=s(Qm);qle=n(cxe,"STRONG",{});var Cmt=s(qle);$ro=r(Cmt,"gpt_neo"),Cmt.forEach(t),kro=r(cxe," \u2014 "),KP=n(cxe,"A",{href:!0});var wmt=s(KP);Sro=r(wmt,"GPTNeoConfig"),wmt.forEach(t),Rro=r(cxe," (GPT Neo model)"),cxe.forEach(t),Pro=i(L),Um=n(L,"LI",{});var fxe=s(Um);jle=n(fxe,"STRONG",{});var Amt=s(jle);Bro=r(Amt,"gpt_neox"),Amt.forEach(t),Iro=r(fxe," \u2014 "),ZP=n(fxe,"A",{href:!0});var Lmt=s(ZP);Nro=r(Lmt,"GPTNeoXConfig"),Lmt.forEach(t),qro=r(fxe," (GPT NeoX model)"),fxe.forEach(t),jro=i(L),Hm=n(L,"LI",{});var mxe=s(Hm);Dle=n(mxe,"STRONG",{});var ymt=s(Dle);Dro=r(ymt,"gptj"),ymt.forEach(t),Gro=r(mxe," \u2014 "),eB=n(mxe,"A",{href:!0});var xmt=s(eB);Oro=r(xmt,"GPTJConfig"),xmt.forEach(t),Vro=r(mxe," (GPT-J model)"),mxe.forEach(t),Xro=i(L),Jm=n(L,"LI",{});var gxe=s(Jm);Gle=n(gxe,"STRONG",{});var $mt=s(Gle);zro=r($mt,"groupvit"),$mt.forEach(t),Wro=r(gxe," \u2014 "),oB=n(gxe,"A",{href:!0});var kmt=s(oB);Qro=r(kmt,"GroupViTConfig"),kmt.forEach(t),Uro=r(gxe," (GroupViT model)"),gxe.forEach(t),Hro=i(L),Ym=n(L,"LI",{});var hxe=s(Ym);Ole=n(hxe,"STRONG",{});var Smt=s(Ole);Jro=r(Smt,"hubert"),Smt.forEach(t),Yro=r(hxe," \u2014 "),rB=n(hxe,"A",{href:!0});var Rmt=s(rB);Kro=r(Rmt,"HubertConfig"),Rmt.forEach(t),Zro=r(hxe," (Hubert model)"),hxe.forEach(t),eto=i(L),Km=n(L,"LI",{});var pxe=s(Km);Vle=n(pxe,"STRONG",{});var Pmt=s(Vle);oto=r(Pmt,"ibert"),Pmt.forEach(t),rto=r(pxe," \u2014 "),tB=n(pxe,"A",{href:!0});var Bmt=s(tB);tto=r(Bmt,"IBertConfig"),Bmt.forEach(t),ato=r(pxe," (I-BERT model)"),pxe.forEach(t),nto=i(L),Zm=n(L,"LI",{});var _xe=s(Zm);Xle=n(_xe,"STRONG",{});var Imt=s(Xle);sto=r(Imt,"imagegpt"),Imt.forEach(t),lto=r(_xe," \u2014 "),aB=n(_xe,"A",{href:!0});var Nmt=s(aB);ito=r(Nmt,"ImageGPTConfig"),Nmt.forEach(t),dto=r(_xe," (ImageGPT model)"),_xe.forEach(t),cto=i(L),eg=n(L,"LI",{});var uxe=s(eg);zle=n(uxe,"STRONG",{});var qmt=s(zle);fto=r(qmt,"layoutlm"),qmt.forEach(t),mto=r(uxe," \u2014 "),nB=n(uxe,"A",{href:!0});var jmt=s(nB);gto=r(jmt,"LayoutLMConfig"),jmt.forEach(t),hto=r(uxe," (LayoutLM model)"),uxe.forEach(t),pto=i(L),og=n(L,"LI",{});var bxe=s(og);Wle=n(bxe,"STRONG",{});var Dmt=s(Wle);_to=r(Dmt,"layoutlmv2"),Dmt.forEach(t),uto=r(bxe," \u2014 "),sB=n(bxe,"A",{href:!0});var Gmt=s(sB);bto=r(Gmt,"LayoutLMv2Config"),Gmt.forEach(t),vto=r(bxe," (LayoutLMv2 model)"),bxe.forEach(t),Fto=i(L),rg=n(L,"LI",{});var vxe=s(rg);Qle=n(vxe,"STRONG",{});var Omt=s(Qle);Tto=r(Omt,"layoutlmv3"),Omt.forEach(t),Mto=r(vxe," \u2014 "),lB=n(vxe,"A",{href:!0});var Vmt=s(lB);Eto=r(Vmt,"LayoutLMv3Config"),Vmt.forEach(t),Cto=r(vxe," (LayoutLMv3 model)"),vxe.forEach(t),wto=i(L),tg=n(L,"LI",{});var Fxe=s(tg);Ule=n(Fxe,"STRONG",{});var Xmt=s(Ule);Ato=r(Xmt,"led"),Xmt.forEach(t),Lto=r(Fxe," \u2014 "),iB=n(Fxe,"A",{href:!0});var zmt=s(iB);yto=r(zmt,"LEDConfig"),zmt.forEach(t),xto=r(Fxe," (LED model)"),Fxe.forEach(t),$to=i(L),ag=n(L,"LI",{});var Txe=s(ag);Hle=n(Txe,"STRONG",{});var Wmt=s(Hle);kto=r(Wmt,"levit"),Wmt.forEach(t),Sto=r(Txe," \u2014 "),dB=n(Txe,"A",{href:!0});var Qmt=s(dB);Rto=r(Qmt,"LevitConfig"),Qmt.forEach(t),Pto=r(Txe," (LeViT model)"),Txe.forEach(t),Bto=i(L),ng=n(L,"LI",{});var Mxe=s(ng);Jle=n(Mxe,"STRONG",{});var Umt=s(Jle);Ito=r(Umt,"longformer"),Umt.forEach(t),Nto=r(Mxe," \u2014 "),cB=n(Mxe,"A",{href:!0});var Hmt=s(cB);qto=r(Hmt,"LongformerConfig"),Hmt.forEach(t),jto=r(Mxe," (Longformer model)"),Mxe.forEach(t),Dto=i(L),sg=n(L,"LI",{});var Exe=s(sg);Yle=n(Exe,"STRONG",{});var Jmt=s(Yle);Gto=r(Jmt,"longt5"),Jmt.forEach(t),Oto=r(Exe," \u2014 "),fB=n(Exe,"A",{href:!0});var Ymt=s(fB);Vto=r(Ymt,"LongT5Config"),Ymt.forEach(t),Xto=r(Exe," (LongT5 model)"),Exe.forEach(t),zto=i(L),lg=n(L,"LI",{});var Cxe=s(lg);Kle=n(Cxe,"STRONG",{});var Kmt=s(Kle);Wto=r(Kmt,"luke"),Kmt.forEach(t),Qto=r(Cxe," \u2014 "),mB=n(Cxe,"A",{href:!0});var Zmt=s(mB);Uto=r(Zmt,"LukeConfig"),Zmt.forEach(t),Hto=r(Cxe," (LUKE model)"),Cxe.forEach(t),Jto=i(L),ig=n(L,"LI",{});var wxe=s(ig);Zle=n(wxe,"STRONG",{});var egt=s(Zle);Yto=r(egt,"lxmert"),egt.forEach(t),Kto=r(wxe," \u2014 "),gB=n(wxe,"A",{href:!0});var ogt=s(gB);Zto=r(ogt,"LxmertConfig"),ogt.forEach(t),eao=r(wxe," (LXMERT model)"),wxe.forEach(t),oao=i(L),dg=n(L,"LI",{});var Axe=s(dg);eie=n(Axe,"STRONG",{});var rgt=s(eie);rao=r(rgt,"m2m_100"),rgt.forEach(t),tao=r(Axe," \u2014 "),hB=n(Axe,"A",{href:!0});var tgt=s(hB);aao=r(tgt,"M2M100Config"),tgt.forEach(t),nao=r(Axe," (M2M100 model)"),Axe.forEach(t),sao=i(L),cg=n(L,"LI",{});var Lxe=s(cg);oie=n(Lxe,"STRONG",{});var agt=s(oie);lao=r(agt,"marian"),agt.forEach(t),iao=r(Lxe," \u2014 "),pB=n(Lxe,"A",{href:!0});var ngt=s(pB);dao=r(ngt,"MarianConfig"),ngt.forEach(t),cao=r(Lxe," (Marian model)"),Lxe.forEach(t),fao=i(L),fg=n(L,"LI",{});var yxe=s(fg);rie=n(yxe,"STRONG",{});var sgt=s(rie);mao=r(sgt,"maskformer"),sgt.forEach(t),gao=r(yxe," \u2014 "),_B=n(yxe,"A",{href:!0});var lgt=s(_B);hao=r(lgt,"MaskFormerConfig"),lgt.forEach(t),pao=r(yxe," (MaskFormer model)"),yxe.forEach(t),_ao=i(L),mg=n(L,"LI",{});var xxe=s(mg);tie=n(xxe,"STRONG",{});var igt=s(tie);uao=r(igt,"mbart"),igt.forEach(t),bao=r(xxe," \u2014 "),uB=n(xxe,"A",{href:!0});var dgt=s(uB);vao=r(dgt,"MBartConfig"),dgt.forEach(t),Fao=r(xxe," (mBART model)"),xxe.forEach(t),Tao=i(L),gg=n(L,"LI",{});var $xe=s(gg);aie=n($xe,"STRONG",{});var cgt=s(aie);Mao=r(cgt,"mctct"),cgt.forEach(t),Eao=r($xe," \u2014 "),bB=n($xe,"A",{href:!0});var fgt=s(bB);Cao=r(fgt,"MCTCTConfig"),fgt.forEach(t),wao=r($xe," (M-CTC-T model)"),$xe.forEach(t),Aao=i(L),hg=n(L,"LI",{});var kxe=s(hg);nie=n(kxe,"STRONG",{});var mgt=s(nie);Lao=r(mgt,"megatron-bert"),mgt.forEach(t),yao=r(kxe," \u2014 "),vB=n(kxe,"A",{href:!0});var ggt=s(vB);xao=r(ggt,"MegatronBertConfig"),ggt.forEach(t),$ao=r(kxe," (Megatron-BERT model)"),kxe.forEach(t),kao=i(L),pg=n(L,"LI",{});var Sxe=s(pg);sie=n(Sxe,"STRONG",{});var hgt=s(sie);Sao=r(hgt,"mobilebert"),hgt.forEach(t),Rao=r(Sxe," \u2014 "),FB=n(Sxe,"A",{href:!0});var pgt=s(FB);Pao=r(pgt,"MobileBertConfig"),pgt.forEach(t),Bao=r(Sxe," (MobileBERT model)"),Sxe.forEach(t),Iao=i(L),_g=n(L,"LI",{});var Rxe=s(_g);lie=n(Rxe,"STRONG",{});var _gt=s(lie);Nao=r(_gt,"mobilevit"),_gt.forEach(t),qao=r(Rxe," \u2014 "),TB=n(Rxe,"A",{href:!0});var ugt=s(TB);jao=r(ugt,"MobileViTConfig"),ugt.forEach(t),Dao=r(Rxe," (MobileViT model)"),Rxe.forEach(t),Gao=i(L),ug=n(L,"LI",{});var Pxe=s(ug);iie=n(Pxe,"STRONG",{});var bgt=s(iie);Oao=r(bgt,"mpnet"),bgt.forEach(t),Vao=r(Pxe," \u2014 "),MB=n(Pxe,"A",{href:!0});var vgt=s(MB);Xao=r(vgt,"MPNetConfig"),vgt.forEach(t),zao=r(Pxe," (MPNet model)"),Pxe.forEach(t),Wao=i(L),bg=n(L,"LI",{});var Bxe=s(bg);die=n(Bxe,"STRONG",{});var Fgt=s(die);Qao=r(Fgt,"mt5"),Fgt.forEach(t),Uao=r(Bxe," \u2014 "),EB=n(Bxe,"A",{href:!0});var Tgt=s(EB);Hao=r(Tgt,"MT5Config"),Tgt.forEach(t),Jao=r(Bxe," (MT5 model)"),Bxe.forEach(t),Yao=i(L),vg=n(L,"LI",{});var Ixe=s(vg);cie=n(Ixe,"STRONG",{});var Mgt=s(cie);Kao=r(Mgt,"mvp"),Mgt.forEach(t),Zao=r(Ixe," \u2014 "),CB=n(Ixe,"A",{href:!0});var Egt=s(CB);eno=r(Egt,"MvpConfig"),Egt.forEach(t),ono=r(Ixe," (MVP model)"),Ixe.forEach(t),rno=i(L),Fg=n(L,"LI",{});var Nxe=s(Fg);fie=n(Nxe,"STRONG",{});var Cgt=s(fie);tno=r(Cgt,"nezha"),Cgt.forEach(t),ano=r(Nxe," \u2014 "),wB=n(Nxe,"A",{href:!0});var wgt=s(wB);nno=r(wgt,"NezhaConfig"),wgt.forEach(t),sno=r(Nxe," (Nezha model)"),Nxe.forEach(t),lno=i(L),Tg=n(L,"LI",{});var qxe=s(Tg);mie=n(qxe,"STRONG",{});var Agt=s(mie);ino=r(Agt,"nystromformer"),Agt.forEach(t),dno=r(qxe," \u2014 "),AB=n(qxe,"A",{href:!0});var Lgt=s(AB);cno=r(Lgt,"NystromformerConfig"),Lgt.forEach(t),fno=r(qxe," (Nystr\xF6mformer model)"),qxe.forEach(t),mno=i(L),Mg=n(L,"LI",{});var jxe=s(Mg);gie=n(jxe,"STRONG",{});var ygt=s(gie);gno=r(ygt,"openai-gpt"),ygt.forEach(t),hno=r(jxe," \u2014 "),LB=n(jxe,"A",{href:!0});var xgt=s(LB);pno=r(xgt,"OpenAIGPTConfig"),xgt.forEach(t),_no=r(jxe," (OpenAI GPT model)"),jxe.forEach(t),uno=i(L),Eg=n(L,"LI",{});var Dxe=s(Eg);hie=n(Dxe,"STRONG",{});var $gt=s(hie);bno=r($gt,"opt"),$gt.forEach(t),vno=r(Dxe," \u2014 "),yB=n(Dxe,"A",{href:!0});var kgt=s(yB);Fno=r(kgt,"OPTConfig"),kgt.forEach(t),Tno=r(Dxe," (OPT model)"),Dxe.forEach(t),Mno=i(L),Cg=n(L,"LI",{});var Gxe=s(Cg);pie=n(Gxe,"STRONG",{});var Sgt=s(pie);Eno=r(Sgt,"owlvit"),Sgt.forEach(t),Cno=r(Gxe," \u2014 "),xB=n(Gxe,"A",{href:!0});var Rgt=s(xB);wno=r(Rgt,"OwlViTConfig"),Rgt.forEach(t),Ano=r(Gxe," (OWL-ViT model)"),Gxe.forEach(t),Lno=i(L),wg=n(L,"LI",{});var Oxe=s(wg);_ie=n(Oxe,"STRONG",{});var Pgt=s(_ie);yno=r(Pgt,"pegasus"),Pgt.forEach(t),xno=r(Oxe," \u2014 "),$B=n(Oxe,"A",{href:!0});var Bgt=s($B);$no=r(Bgt,"PegasusConfig"),Bgt.forEach(t),kno=r(Oxe," (Pegasus model)"),Oxe.forEach(t),Sno=i(L),Ag=n(L,"LI",{});var Vxe=s(Ag);uie=n(Vxe,"STRONG",{});var Igt=s(uie);Rno=r(Igt,"perceiver"),Igt.forEach(t),Pno=r(Vxe," \u2014 "),kB=n(Vxe,"A",{href:!0});var Ngt=s(kB);Bno=r(Ngt,"PerceiverConfig"),Ngt.forEach(t),Ino=r(Vxe," (Perceiver model)"),Vxe.forEach(t),Nno=i(L),Lg=n(L,"LI",{});var Xxe=s(Lg);bie=n(Xxe,"STRONG",{});var qgt=s(bie);qno=r(qgt,"plbart"),qgt.forEach(t),jno=r(Xxe," \u2014 "),SB=n(Xxe,"A",{href:!0});var jgt=s(SB);Dno=r(jgt,"PLBartConfig"),jgt.forEach(t),Gno=r(Xxe," (PLBart model)"),Xxe.forEach(t),Ono=i(L),yg=n(L,"LI",{});var zxe=s(yg);vie=n(zxe,"STRONG",{});var Dgt=s(vie);Vno=r(Dgt,"poolformer"),Dgt.forEach(t),Xno=r(zxe," \u2014 "),RB=n(zxe,"A",{href:!0});var Ggt=s(RB);zno=r(Ggt,"PoolFormerConfig"),Ggt.forEach(t),Wno=r(zxe," (PoolFormer model)"),zxe.forEach(t),Qno=i(L),xg=n(L,"LI",{});var Wxe=s(xg);Fie=n(Wxe,"STRONG",{});var Ogt=s(Fie);Uno=r(Ogt,"prophetnet"),Ogt.forEach(t),Hno=r(Wxe," \u2014 "),PB=n(Wxe,"A",{href:!0});var Vgt=s(PB);Jno=r(Vgt,"ProphetNetConfig"),Vgt.forEach(t),Yno=r(Wxe," (ProphetNet model)"),Wxe.forEach(t),Kno=i(L),$g=n(L,"LI",{});var Qxe=s($g);Tie=n(Qxe,"STRONG",{});var Xgt=s(Tie);Zno=r(Xgt,"qdqbert"),Xgt.forEach(t),eso=r(Qxe," \u2014 "),BB=n(Qxe,"A",{href:!0});var zgt=s(BB);oso=r(zgt,"QDQBertConfig"),zgt.forEach(t),rso=r(Qxe," (QDQBert model)"),Qxe.forEach(t),tso=i(L),kg=n(L,"LI",{});var Uxe=s(kg);Mie=n(Uxe,"STRONG",{});var Wgt=s(Mie);aso=r(Wgt,"rag"),Wgt.forEach(t),nso=r(Uxe," \u2014 "),IB=n(Uxe,"A",{href:!0});var Qgt=s(IB);sso=r(Qgt,"RagConfig"),Qgt.forEach(t),lso=r(Uxe," (RAG model)"),Uxe.forEach(t),iso=i(L),Sg=n(L,"LI",{});var Hxe=s(Sg);Eie=n(Hxe,"STRONG",{});var Ugt=s(Eie);dso=r(Ugt,"realm"),Ugt.forEach(t),cso=r(Hxe," \u2014 "),NB=n(Hxe,"A",{href:!0});var Hgt=s(NB);fso=r(Hgt,"RealmConfig"),Hgt.forEach(t),mso=r(Hxe," (REALM model)"),Hxe.forEach(t),gso=i(L),Rg=n(L,"LI",{});var Jxe=s(Rg);Cie=n(Jxe,"STRONG",{});var Jgt=s(Cie);hso=r(Jgt,"reformer"),Jgt.forEach(t),pso=r(Jxe," \u2014 "),qB=n(Jxe,"A",{href:!0});var Ygt=s(qB);_so=r(Ygt,"ReformerConfig"),Ygt.forEach(t),uso=r(Jxe," (Reformer model)"),Jxe.forEach(t),bso=i(L),Pg=n(L,"LI",{});var Yxe=s(Pg);wie=n(Yxe,"STRONG",{});var Kgt=s(wie);vso=r(Kgt,"regnet"),Kgt.forEach(t),Fso=r(Yxe," \u2014 "),jB=n(Yxe,"A",{href:!0});var Zgt=s(jB);Tso=r(Zgt,"RegNetConfig"),Zgt.forEach(t),Mso=r(Yxe," (RegNet model)"),Yxe.forEach(t),Eso=i(L),Bg=n(L,"LI",{});var Kxe=s(Bg);Aie=n(Kxe,"STRONG",{});var eht=s(Aie);Cso=r(eht,"rembert"),eht.forEach(t),wso=r(Kxe," \u2014 "),DB=n(Kxe,"A",{href:!0});var oht=s(DB);Aso=r(oht,"RemBertConfig"),oht.forEach(t),Lso=r(Kxe," (RemBERT model)"),Kxe.forEach(t),yso=i(L),Ig=n(L,"LI",{});var Zxe=s(Ig);Lie=n(Zxe,"STRONG",{});var rht=s(Lie);xso=r(rht,"resnet"),rht.forEach(t),$so=r(Zxe," \u2014 "),GB=n(Zxe,"A",{href:!0});var tht=s(GB);kso=r(tht,"ResNetConfig"),tht.forEach(t),Sso=r(Zxe," (ResNet model)"),Zxe.forEach(t),Rso=i(L),Ng=n(L,"LI",{});var e$e=s(Ng);yie=n(e$e,"STRONG",{});var aht=s(yie);Pso=r(aht,"retribert"),aht.forEach(t),Bso=r(e$e," \u2014 "),OB=n(e$e,"A",{href:!0});var nht=s(OB);Iso=r(nht,"RetriBertConfig"),nht.forEach(t),Nso=r(e$e," (RetriBERT model)"),e$e.forEach(t),qso=i(L),qg=n(L,"LI",{});var o$e=s(qg);xie=n(o$e,"STRONG",{});var sht=s(xie);jso=r(sht,"roberta"),sht.forEach(t),Dso=r(o$e," \u2014 "),VB=n(o$e,"A",{href:!0});var lht=s(VB);Gso=r(lht,"RobertaConfig"),lht.forEach(t),Oso=r(o$e," (RoBERTa model)"),o$e.forEach(t),Vso=i(L),jg=n(L,"LI",{});var r$e=s(jg);$ie=n(r$e,"STRONG",{});var iht=s($ie);Xso=r(iht,"roformer"),iht.forEach(t),zso=r(r$e," \u2014 "),XB=n(r$e,"A",{href:!0});var dht=s(XB);Wso=r(dht,"RoFormerConfig"),dht.forEach(t),Qso=r(r$e," (RoFormer model)"),r$e.forEach(t),Uso=i(L),Dg=n(L,"LI",{});var t$e=s(Dg);kie=n(t$e,"STRONG",{});var cht=s(kie);Hso=r(cht,"segformer"),cht.forEach(t),Jso=r(t$e," \u2014 "),zB=n(t$e,"A",{href:!0});var fht=s(zB);Yso=r(fht,"SegformerConfig"),fht.forEach(t),Kso=r(t$e," (SegFormer model)"),t$e.forEach(t),Zso=i(L),Gg=n(L,"LI",{});var a$e=s(Gg);Sie=n(a$e,"STRONG",{});var mht=s(Sie);elo=r(mht,"sew"),mht.forEach(t),olo=r(a$e," \u2014 "),WB=n(a$e,"A",{href:!0});var ght=s(WB);rlo=r(ght,"SEWConfig"),ght.forEach(t),tlo=r(a$e," (SEW model)"),a$e.forEach(t),alo=i(L),Og=n(L,"LI",{});var n$e=s(Og);Rie=n(n$e,"STRONG",{});var hht=s(Rie);nlo=r(hht,"sew-d"),hht.forEach(t),slo=r(n$e," \u2014 "),QB=n(n$e,"A",{href:!0});var pht=s(QB);llo=r(pht,"SEWDConfig"),pht.forEach(t),ilo=r(n$e," (SEW-D model)"),n$e.forEach(t),dlo=i(L),Vg=n(L,"LI",{});var s$e=s(Vg);Pie=n(s$e,"STRONG",{});var _ht=s(Pie);clo=r(_ht,"speech-encoder-decoder"),_ht.forEach(t),flo=r(s$e," \u2014 "),UB=n(s$e,"A",{href:!0});var uht=s(UB);mlo=r(uht,"SpeechEncoderDecoderConfig"),uht.forEach(t),glo=r(s$e," (Speech Encoder decoder model)"),s$e.forEach(t),hlo=i(L),Xg=n(L,"LI",{});var l$e=s(Xg);Bie=n(l$e,"STRONG",{});var bht=s(Bie);plo=r(bht,"speech_to_text"),bht.forEach(t),_lo=r(l$e," \u2014 "),HB=n(l$e,"A",{href:!0});var vht=s(HB);ulo=r(vht,"Speech2TextConfig"),vht.forEach(t),blo=r(l$e," (Speech2Text model)"),l$e.forEach(t),vlo=i(L),zg=n(L,"LI",{});var i$e=s(zg);Iie=n(i$e,"STRONG",{});var Fht=s(Iie);Flo=r(Fht,"speech_to_text_2"),Fht.forEach(t),Tlo=r(i$e," \u2014 "),JB=n(i$e,"A",{href:!0});var Tht=s(JB);Mlo=r(Tht,"Speech2Text2Config"),Tht.forEach(t),Elo=r(i$e," (Speech2Text2 model)"),i$e.forEach(t),Clo=i(L),Wg=n(L,"LI",{});var d$e=s(Wg);Nie=n(d$e,"STRONG",{});var Mht=s(Nie);wlo=r(Mht,"splinter"),Mht.forEach(t),Alo=r(d$e," \u2014 "),YB=n(d$e,"A",{href:!0});var Eht=s(YB);Llo=r(Eht,"SplinterConfig"),Eht.forEach(t),ylo=r(d$e," (Splinter model)"),d$e.forEach(t),xlo=i(L),Qg=n(L,"LI",{});var c$e=s(Qg);qie=n(c$e,"STRONG",{});var Cht=s(qie);$lo=r(Cht,"squeezebert"),Cht.forEach(t),klo=r(c$e," \u2014 "),KB=n(c$e,"A",{href:!0});var wht=s(KB);Slo=r(wht,"SqueezeBertConfig"),wht.forEach(t),Rlo=r(c$e," (SqueezeBERT model)"),c$e.forEach(t),Plo=i(L),Ug=n(L,"LI",{});var f$e=s(Ug);jie=n(f$e,"STRONG",{});var Aht=s(jie);Blo=r(Aht,"swin"),Aht.forEach(t),Ilo=r(f$e," \u2014 "),ZB=n(f$e,"A",{href:!0});var Lht=s(ZB);Nlo=r(Lht,"SwinConfig"),Lht.forEach(t),qlo=r(f$e," (Swin Transformer model)"),f$e.forEach(t),jlo=i(L),Hg=n(L,"LI",{});var m$e=s(Hg);Die=n(m$e,"STRONG",{});var yht=s(Die);Dlo=r(yht,"swinv2"),yht.forEach(t),Glo=r(m$e," \u2014 "),eI=n(m$e,"A",{href:!0});var xht=s(eI);Olo=r(xht,"Swinv2Config"),xht.forEach(t),Vlo=r(m$e," (Swin Transformer V2 model)"),m$e.forEach(t),Xlo=i(L),Jg=n(L,"LI",{});var g$e=s(Jg);Gie=n(g$e,"STRONG",{});var $ht=s(Gie);zlo=r($ht,"t5"),$ht.forEach(t),Wlo=r(g$e," \u2014 "),oI=n(g$e,"A",{href:!0});var kht=s(oI);Qlo=r(kht,"T5Config"),kht.forEach(t),Ulo=r(g$e," (T5 model)"),g$e.forEach(t),Hlo=i(L),Yg=n(L,"LI",{});var h$e=s(Yg);Oie=n(h$e,"STRONG",{});var Sht=s(Oie);Jlo=r(Sht,"tapas"),Sht.forEach(t),Ylo=r(h$e," \u2014 "),rI=n(h$e,"A",{href:!0});var Rht=s(rI);Klo=r(Rht,"TapasConfig"),Rht.forEach(t),Zlo=r(h$e," (TAPAS model)"),h$e.forEach(t),eio=i(L),Kg=n(L,"LI",{});var p$e=s(Kg);Vie=n(p$e,"STRONG",{});var Pht=s(Vie);oio=r(Pht,"trajectory_transformer"),Pht.forEach(t),rio=r(p$e," \u2014 "),tI=n(p$e,"A",{href:!0});var Bht=s(tI);tio=r(Bht,"TrajectoryTransformerConfig"),Bht.forEach(t),aio=r(p$e," (Trajectory Transformer model)"),p$e.forEach(t),nio=i(L),Zg=n(L,"LI",{});var _$e=s(Zg);Xie=n(_$e,"STRONG",{});var Iht=s(Xie);sio=r(Iht,"transfo-xl"),Iht.forEach(t),lio=r(_$e," \u2014 "),aI=n(_$e,"A",{href:!0});var Nht=s(aI);iio=r(Nht,"TransfoXLConfig"),Nht.forEach(t),dio=r(_$e," (Transformer-XL model)"),_$e.forEach(t),cio=i(L),eh=n(L,"LI",{});var u$e=s(eh);zie=n(u$e,"STRONG",{});var qht=s(zie);fio=r(qht,"trocr"),qht.forEach(t),mio=r(u$e," \u2014 "),nI=n(u$e,"A",{href:!0});var jht=s(nI);gio=r(jht,"TrOCRConfig"),jht.forEach(t),hio=r(u$e," (TrOCR model)"),u$e.forEach(t),pio=i(L),oh=n(L,"LI",{});var b$e=s(oh);Wie=n(b$e,"STRONG",{});var Dht=s(Wie);_io=r(Dht,"unispeech"),Dht.forEach(t),uio=r(b$e," \u2014 "),sI=n(b$e,"A",{href:!0});var Ght=s(sI);bio=r(Ght,"UniSpeechConfig"),Ght.forEach(t),vio=r(b$e," (UniSpeech model)"),b$e.forEach(t),Fio=i(L),rh=n(L,"LI",{});var v$e=s(rh);Qie=n(v$e,"STRONG",{});var Oht=s(Qie);Tio=r(Oht,"unispeech-sat"),Oht.forEach(t),Mio=r(v$e," \u2014 "),lI=n(v$e,"A",{href:!0});var Vht=s(lI);Eio=r(Vht,"UniSpeechSatConfig"),Vht.forEach(t),Cio=r(v$e," (UniSpeechSat model)"),v$e.forEach(t),wio=i(L),th=n(L,"LI",{});var F$e=s(th);Uie=n(F$e,"STRONG",{});var Xht=s(Uie);Aio=r(Xht,"van"),Xht.forEach(t),Lio=r(F$e," \u2014 "),iI=n(F$e,"A",{href:!0});var zht=s(iI);yio=r(zht,"VanConfig"),zht.forEach(t),xio=r(F$e," (VAN model)"),F$e.forEach(t),$io=i(L),ah=n(L,"LI",{});var T$e=s(ah);Hie=n(T$e,"STRONG",{});var Wht=s(Hie);kio=r(Wht,"videomae"),Wht.forEach(t),Sio=r(T$e," \u2014 "),dI=n(T$e,"A",{href:!0});var Qht=s(dI);Rio=r(Qht,"VideoMAEConfig"),Qht.forEach(t),Pio=r(T$e," (VideoMAE model)"),T$e.forEach(t),Bio=i(L),nh=n(L,"LI",{});var M$e=s(nh);Jie=n(M$e,"STRONG",{});var Uht=s(Jie);Iio=r(Uht,"vilt"),Uht.forEach(t),Nio=r(M$e," \u2014 "),cI=n(M$e,"A",{href:!0});var Hht=s(cI);qio=r(Hht,"ViltConfig"),Hht.forEach(t),jio=r(M$e," (ViLT model)"),M$e.forEach(t),Dio=i(L),sh=n(L,"LI",{});var E$e=s(sh);Yie=n(E$e,"STRONG",{});var Jht=s(Yie);Gio=r(Jht,"vision-encoder-decoder"),Jht.forEach(t),Oio=r(E$e," \u2014 "),fI=n(E$e,"A",{href:!0});var Yht=s(fI);Vio=r(Yht,"VisionEncoderDecoderConfig"),Yht.forEach(t),Xio=r(E$e," (Vision Encoder decoder model)"),E$e.forEach(t),zio=i(L),lh=n(L,"LI",{});var C$e=s(lh);Kie=n(C$e,"STRONG",{});var Kht=s(Kie);Wio=r(Kht,"vision-text-dual-encoder"),Kht.forEach(t),Qio=r(C$e," \u2014 "),mI=n(C$e,"A",{href:!0});var Zht=s(mI);Uio=r(Zht,"VisionTextDualEncoderConfig"),Zht.forEach(t),Hio=r(C$e," (VisionTextDualEncoder model)"),C$e.forEach(t),Jio=i(L),ih=n(L,"LI",{});var w$e=s(ih);Zie=n(w$e,"STRONG",{});var ept=s(Zie);Yio=r(ept,"visual_bert"),ept.forEach(t),Kio=r(w$e," \u2014 "),gI=n(w$e,"A",{href:!0});var opt=s(gI);Zio=r(opt,"VisualBertConfig"),opt.forEach(t),edo=r(w$e," (VisualBERT model)"),w$e.forEach(t),odo=i(L),dh=n(L,"LI",{});var A$e=s(dh);ede=n(A$e,"STRONG",{});var rpt=s(ede);rdo=r(rpt,"vit"),rpt.forEach(t),tdo=r(A$e," \u2014 "),hI=n(A$e,"A",{href:!0});var tpt=s(hI);ado=r(tpt,"ViTConfig"),tpt.forEach(t),ndo=r(A$e," (ViT model)"),A$e.forEach(t),sdo=i(L),ch=n(L,"LI",{});var L$e=s(ch);ode=n(L$e,"STRONG",{});var apt=s(ode);ldo=r(apt,"vit_mae"),apt.forEach(t),ido=r(L$e," \u2014 "),pI=n(L$e,"A",{href:!0});var npt=s(pI);ddo=r(npt,"ViTMAEConfig"),npt.forEach(t),cdo=r(L$e," (ViTMAE model)"),L$e.forEach(t),fdo=i(L),fh=n(L,"LI",{});var y$e=s(fh);rde=n(y$e,"STRONG",{});var spt=s(rde);mdo=r(spt,"wav2vec2"),spt.forEach(t),gdo=r(y$e," \u2014 "),_I=n(y$e,"A",{href:!0});var lpt=s(_I);hdo=r(lpt,"Wav2Vec2Config"),lpt.forEach(t),pdo=r(y$e," (Wav2Vec2 model)"),y$e.forEach(t),_do=i(L),mh=n(L,"LI",{});var x$e=s(mh);tde=n(x$e,"STRONG",{});var ipt=s(tde);udo=r(ipt,"wav2vec2-conformer"),ipt.forEach(t),bdo=r(x$e," \u2014 "),uI=n(x$e,"A",{href:!0});var dpt=s(uI);vdo=r(dpt,"Wav2Vec2ConformerConfig"),dpt.forEach(t),Fdo=r(x$e," (Wav2Vec2-Conformer model)"),x$e.forEach(t),Tdo=i(L),gh=n(L,"LI",{});var $$e=s(gh);ade=n($$e,"STRONG",{});var cpt=s(ade);Mdo=r(cpt,"wavlm"),cpt.forEach(t),Edo=r($$e," \u2014 "),bI=n($$e,"A",{href:!0});var fpt=s(bI);Cdo=r(fpt,"WavLMConfig"),fpt.forEach(t),wdo=r($$e," (WavLM model)"),$$e.forEach(t),Ado=i(L),hh=n(L,"LI",{});var k$e=s(hh);nde=n(k$e,"STRONG",{});var mpt=s(nde);Ldo=r(mpt,"xglm"),mpt.forEach(t),ydo=r(k$e," \u2014 "),vI=n(k$e,"A",{href:!0});var gpt=s(vI);xdo=r(gpt,"XGLMConfig"),gpt.forEach(t),$do=r(k$e," (XGLM model)"),k$e.forEach(t),kdo=i(L),ph=n(L,"LI",{});var S$e=s(ph);sde=n(S$e,"STRONG",{});var hpt=s(sde);Sdo=r(hpt,"xlm"),hpt.forEach(t),Rdo=r(S$e," \u2014 "),FI=n(S$e,"A",{href:!0});var ppt=s(FI);Pdo=r(ppt,"XLMConfig"),ppt.forEach(t),Bdo=r(S$e," (XLM model)"),S$e.forEach(t),Ido=i(L),_h=n(L,"LI",{});var R$e=s(_h);lde=n(R$e,"STRONG",{});var _pt=s(lde);Ndo=r(_pt,"xlm-prophetnet"),_pt.forEach(t),qdo=r(R$e," \u2014 "),TI=n(R$e,"A",{href:!0});var upt=s(TI);jdo=r(upt,"XLMProphetNetConfig"),upt.forEach(t),Ddo=r(R$e," (XLM-ProphetNet model)"),R$e.forEach(t),Gdo=i(L),uh=n(L,"LI",{});var P$e=s(uh);ide=n(P$e,"STRONG",{});var bpt=s(ide);Odo=r(bpt,"xlm-roberta"),bpt.forEach(t),Vdo=r(P$e," \u2014 "),MI=n(P$e,"A",{href:!0});var vpt=s(MI);Xdo=r(vpt,"XLMRobertaConfig"),vpt.forEach(t),zdo=r(P$e," (XLM-RoBERTa model)"),P$e.forEach(t),Wdo=i(L),bh=n(L,"LI",{});var B$e=s(bh);dde=n(B$e,"STRONG",{});var Fpt=s(dde);Qdo=r(Fpt,"xlm-roberta-xl"),Fpt.forEach(t),Udo=r(B$e," \u2014 "),EI=n(B$e,"A",{href:!0});var Tpt=s(EI);Hdo=r(Tpt,"XLMRobertaXLConfig"),Tpt.forEach(t),Jdo=r(B$e," (XLM-RoBERTa-XL model)"),B$e.forEach(t),Ydo=i(L),vh=n(L,"LI",{});var I$e=s(vh);cde=n(I$e,"STRONG",{});var Mpt=s(cde);Kdo=r(Mpt,"xlnet"),Mpt.forEach(t),Zdo=r(I$e," \u2014 "),CI=n(I$e,"A",{href:!0});var Ept=s(CI);eco=r(Ept,"XLNetConfig"),Ept.forEach(t),oco=r(I$e," (XLNet model)"),I$e.forEach(t),rco=i(L),Fh=n(L,"LI",{});var N$e=s(Fh);fde=n(N$e,"STRONG",{});var Cpt=s(fde);tco=r(Cpt,"yolos"),Cpt.forEach(t),aco=r(N$e," \u2014 "),wI=n(N$e,"A",{href:!0});var wpt=s(wI);nco=r(wpt,"YolosConfig"),wpt.forEach(t),sco=r(N$e," (YOLOS model)"),N$e.forEach(t),lco=i(L),Th=n(L,"LI",{});var q$e=s(Th);mde=n(q$e,"STRONG",{});var Apt=s(mde);ico=r(Apt,"yoso"),Apt.forEach(t),dco=r(q$e," \u2014 "),AI=n(q$e,"A",{href:!0});var Lpt=s(AI);cco=r(Lpt,"YosoConfig"),Lpt.forEach(t),fco=r(q$e," (YOSO model)"),q$e.forEach(t),L.forEach(t),mco=i(ct),T(Mh.$$.fragment,ct),ct.forEach(t),gco=i(dt),Eh=n(dt,"DIV",{class:!0});var dJe=s(Eh);T(Cy.$$.fragment,dJe),hco=i(dJe),gde=n(dJe,"P",{});var ypt=s(gde);pco=r(ypt,"Register a new configuration for this class."),ypt.forEach(t),dJe.forEach(t),dt.forEach(t),sUe=i(f),Ki=n(f,"H2",{class:!0});var cJe=s(Ki);Ch=n(cJe,"A",{id:!0,class:!0,href:!0});var xpt=s(Ch);hde=n(xpt,"SPAN",{});var $pt=s(hde);T(wy.$$.fragment,$pt),$pt.forEach(t),xpt.forEach(t),_co=i(cJe),pde=n(cJe,"SPAN",{});var kpt=s(pde);uco=r(kpt,"AutoTokenizer"),kpt.forEach(t),cJe.forEach(t),lUe=i(f),xo=n(f,"DIV",{class:!0});var cl=s(xo);T(Ay.$$.fragment,cl),bco=i(cl),Ly=n(cl,"P",{});var fJe=s(Ly);vco=r(fJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LI=n(fJe,"A",{href:!0});var Spt=s(LI);Fco=r(Spt,"AutoTokenizer.from_pretrained()"),Spt.forEach(t),Tco=r(fJe," class method."),fJe.forEach(t),Mco=i(cl),yy=n(cl,"P",{});var mJe=s(yy);Eco=r(mJe,"This class cannot be instantiated directly using "),_de=n(mJe,"CODE",{});var Rpt=s(_de);Cco=r(Rpt,"__init__()"),Rpt.forEach(t),wco=r(mJe," (throws an error)."),mJe.forEach(t),Aco=i(cl),Sr=n(cl,"DIV",{class:!0});var fl=s(Sr);T(xy.$$.fragment,fl),Lco=i(fl),ude=n(fl,"P",{});var Ppt=s(ude);yco=r(Ppt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ppt.forEach(t),xco=i(fl),Ga=n(fl,"P",{});var h7=s(Ga);$co=r(h7,"The tokenizer class to instantiate is selected based on the "),bde=n(h7,"CODE",{});var Bpt=s(bde);kco=r(Bpt,"model_type"),Bpt.forEach(t),Sco=r(h7,` property of the config object (either
passed as an argument or loaded from `),vde=n(h7,"CODE",{});var Ipt=s(vde);Rco=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),Pco=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(h7,"CODE",{});var Npt=s(Fde);Bco=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),Ico=r(h7,":"),h7.forEach(t),Nco=i(fl),k=n(fl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var zS=s(Hn);Tde=n(zS,"STRONG",{});var qpt=s(Tde);qco=r(qpt,"albert"),qpt.forEach(t),jco=r(zS," \u2014 "),yI=n(zS,"A",{href:!0});var jpt=s(yI);Dco=r(jpt,"AlbertTokenizer"),jpt.forEach(t),Gco=r(zS," or "),xI=n(zS,"A",{href:!0});var Dpt=s(xI);Oco=r(Dpt,"AlbertTokenizerFast"),Dpt.forEach(t),Vco=r(zS," (ALBERT model)"),zS.forEach(t),Xco=i(S),Jn=n(S,"LI",{});var WS=s(Jn);Mde=n(WS,"STRONG",{});var Gpt=s(Mde);zco=r(Gpt,"bart"),Gpt.forEach(t),Wco=r(WS," \u2014 "),$I=n(WS,"A",{href:!0});var Opt=s($I);Qco=r(Opt,"BartTokenizer"),Opt.forEach(t),Uco=r(WS," or "),kI=n(WS,"A",{href:!0});var Vpt=s(kI);Hco=r(Vpt,"BartTokenizerFast"),Vpt.forEach(t),Jco=r(WS," (BART model)"),WS.forEach(t),Yco=i(S),Yn=n(S,"LI",{});var QS=s(Yn);Ede=n(QS,"STRONG",{});var Xpt=s(Ede);Kco=r(Xpt,"barthez"),Xpt.forEach(t),Zco=r(QS," \u2014 "),SI=n(QS,"A",{href:!0});var zpt=s(SI);efo=r(zpt,"BarthezTokenizer"),zpt.forEach(t),ofo=r(QS," or "),RI=n(QS,"A",{href:!0});var Wpt=s(RI);rfo=r(Wpt,"BarthezTokenizerFast"),Wpt.forEach(t),tfo=r(QS," (BARThez model)"),QS.forEach(t),afo=i(S),wh=n(S,"LI",{});var j$e=s(wh);Cde=n(j$e,"STRONG",{});var Qpt=s(Cde);nfo=r(Qpt,"bartpho"),Qpt.forEach(t),sfo=r(j$e," \u2014 "),PI=n(j$e,"A",{href:!0});var Upt=s(PI);lfo=r(Upt,"BartphoTokenizer"),Upt.forEach(t),ifo=r(j$e," (BARTpho model)"),j$e.forEach(t),dfo=i(S),Kn=n(S,"LI",{});var US=s(Kn);wde=n(US,"STRONG",{});var Hpt=s(wde);cfo=r(Hpt,"bert"),Hpt.forEach(t),ffo=r(US," \u2014 "),BI=n(US,"A",{href:!0});var Jpt=s(BI);mfo=r(Jpt,"BertTokenizer"),Jpt.forEach(t),gfo=r(US," or "),II=n(US,"A",{href:!0});var Ypt=s(II);hfo=r(Ypt,"BertTokenizerFast"),Ypt.forEach(t),pfo=r(US," (BERT model)"),US.forEach(t),_fo=i(S),Ah=n(S,"LI",{});var D$e=s(Ah);Ade=n(D$e,"STRONG",{});var Kpt=s(Ade);ufo=r(Kpt,"bert-generation"),Kpt.forEach(t),bfo=r(D$e," \u2014 "),NI=n(D$e,"A",{href:!0});var Zpt=s(NI);vfo=r(Zpt,"BertGenerationTokenizer"),Zpt.forEach(t),Ffo=r(D$e," (Bert Generation model)"),D$e.forEach(t),Tfo=i(S),Lh=n(S,"LI",{});var G$e=s(Lh);Lde=n(G$e,"STRONG",{});var e_t=s(Lde);Mfo=r(e_t,"bert-japanese"),e_t.forEach(t),Efo=r(G$e," \u2014 "),qI=n(G$e,"A",{href:!0});var o_t=s(qI);Cfo=r(o_t,"BertJapaneseTokenizer"),o_t.forEach(t),wfo=r(G$e," (BertJapanese model)"),G$e.forEach(t),Afo=i(S),yh=n(S,"LI",{});var O$e=s(yh);yde=n(O$e,"STRONG",{});var r_t=s(yde);Lfo=r(r_t,"bertweet"),r_t.forEach(t),yfo=r(O$e," \u2014 "),jI=n(O$e,"A",{href:!0});var t_t=s(jI);xfo=r(t_t,"BertweetTokenizer"),t_t.forEach(t),$fo=r(O$e," (BERTweet model)"),O$e.forEach(t),kfo=i(S),Zn=n(S,"LI",{});var HS=s(Zn);xde=n(HS,"STRONG",{});var a_t=s(xde);Sfo=r(a_t,"big_bird"),a_t.forEach(t),Rfo=r(HS," \u2014 "),DI=n(HS,"A",{href:!0});var n_t=s(DI);Pfo=r(n_t,"BigBirdTokenizer"),n_t.forEach(t),Bfo=r(HS," or "),GI=n(HS,"A",{href:!0});var s_t=s(GI);Ifo=r(s_t,"BigBirdTokenizerFast"),s_t.forEach(t),Nfo=r(HS," (BigBird model)"),HS.forEach(t),qfo=i(S),es=n(S,"LI",{});var JS=s(es);$de=n(JS,"STRONG",{});var l_t=s($de);jfo=r(l_t,"bigbird_pegasus"),l_t.forEach(t),Dfo=r(JS," \u2014 "),OI=n(JS,"A",{href:!0});var i_t=s(OI);Gfo=r(i_t,"PegasusTokenizer"),i_t.forEach(t),Ofo=r(JS," or "),VI=n(JS,"A",{href:!0});var d_t=s(VI);Vfo=r(d_t,"PegasusTokenizerFast"),d_t.forEach(t),Xfo=r(JS," (BigBird-Pegasus model)"),JS.forEach(t),zfo=i(S),os=n(S,"LI",{});var YS=s(os);kde=n(YS,"STRONG",{});var c_t=s(kde);Wfo=r(c_t,"blenderbot"),c_t.forEach(t),Qfo=r(YS," \u2014 "),XI=n(YS,"A",{href:!0});var f_t=s(XI);Ufo=r(f_t,"BlenderbotTokenizer"),f_t.forEach(t),Hfo=r(YS," or "),zI=n(YS,"A",{href:!0});var m_t=s(zI);Jfo=r(m_t,"BlenderbotTokenizerFast"),m_t.forEach(t),Yfo=r(YS," (Blenderbot model)"),YS.forEach(t),Kfo=i(S),xh=n(S,"LI",{});var V$e=s(xh);Sde=n(V$e,"STRONG",{});var g_t=s(Sde);Zfo=r(g_t,"blenderbot-small"),g_t.forEach(t),emo=r(V$e," \u2014 "),WI=n(V$e,"A",{href:!0});var h_t=s(WI);omo=r(h_t,"BlenderbotSmallTokenizer"),h_t.forEach(t),rmo=r(V$e," (BlenderbotSmall model)"),V$e.forEach(t),tmo=i(S),$h=n(S,"LI",{});var X$e=s($h);Rde=n(X$e,"STRONG",{});var p_t=s(Rde);amo=r(p_t,"bloom"),p_t.forEach(t),nmo=r(X$e," \u2014 "),QI=n(X$e,"A",{href:!0});var __t=s(QI);smo=r(__t,"BloomTokenizerFast"),__t.forEach(t),lmo=r(X$e," (BLOOM model)"),X$e.forEach(t),imo=i(S),kh=n(S,"LI",{});var z$e=s(kh);Pde=n(z$e,"STRONG",{});var u_t=s(Pde);dmo=r(u_t,"byt5"),u_t.forEach(t),cmo=r(z$e," \u2014 "),UI=n(z$e,"A",{href:!0});var b_t=s(UI);fmo=r(b_t,"ByT5Tokenizer"),b_t.forEach(t),mmo=r(z$e," (ByT5 model)"),z$e.forEach(t),gmo=i(S),rs=n(S,"LI",{});var KS=s(rs);Bde=n(KS,"STRONG",{});var v_t=s(Bde);hmo=r(v_t,"camembert"),v_t.forEach(t),pmo=r(KS," \u2014 "),HI=n(KS,"A",{href:!0});var F_t=s(HI);_mo=r(F_t,"CamembertTokenizer"),F_t.forEach(t),umo=r(KS," or "),JI=n(KS,"A",{href:!0});var T_t=s(JI);bmo=r(T_t,"CamembertTokenizerFast"),T_t.forEach(t),vmo=r(KS," (CamemBERT model)"),KS.forEach(t),Fmo=i(S),Sh=n(S,"LI",{});var W$e=s(Sh);Ide=n(W$e,"STRONG",{});var M_t=s(Ide);Tmo=r(M_t,"canine"),M_t.forEach(t),Mmo=r(W$e," \u2014 "),YI=n(W$e,"A",{href:!0});var E_t=s(YI);Emo=r(E_t,"CanineTokenizer"),E_t.forEach(t),Cmo=r(W$e," (CANINE model)"),W$e.forEach(t),wmo=i(S),ts=n(S,"LI",{});var ZS=s(ts);Nde=n(ZS,"STRONG",{});var C_t=s(Nde);Amo=r(C_t,"clip"),C_t.forEach(t),Lmo=r(ZS," \u2014 "),KI=n(ZS,"A",{href:!0});var w_t=s(KI);ymo=r(w_t,"CLIPTokenizer"),w_t.forEach(t),xmo=r(ZS," or "),ZI=n(ZS,"A",{href:!0});var A_t=s(ZI);$mo=r(A_t,"CLIPTokenizerFast"),A_t.forEach(t),kmo=r(ZS," (CLIP model)"),ZS.forEach(t),Smo=i(S),as=n(S,"LI",{});var eR=s(as);qde=n(eR,"STRONG",{});var L_t=s(qde);Rmo=r(L_t,"codegen"),L_t.forEach(t),Pmo=r(eR," \u2014 "),eN=n(eR,"A",{href:!0});var y_t=s(eN);Bmo=r(y_t,"CodeGenTokenizer"),y_t.forEach(t),Imo=r(eR," or "),oN=n(eR,"A",{href:!0});var x_t=s(oN);Nmo=r(x_t,"CodeGenTokenizerFast"),x_t.forEach(t),qmo=r(eR," (CodeGen model)"),eR.forEach(t),jmo=i(S),ns=n(S,"LI",{});var oR=s(ns);jde=n(oR,"STRONG",{});var $_t=s(jde);Dmo=r($_t,"convbert"),$_t.forEach(t),Gmo=r(oR," \u2014 "),rN=n(oR,"A",{href:!0});var k_t=s(rN);Omo=r(k_t,"ConvBertTokenizer"),k_t.forEach(t),Vmo=r(oR," or "),tN=n(oR,"A",{href:!0});var S_t=s(tN);Xmo=r(S_t,"ConvBertTokenizerFast"),S_t.forEach(t),zmo=r(oR," (ConvBERT model)"),oR.forEach(t),Wmo=i(S),ss=n(S,"LI",{});var rR=s(ss);Dde=n(rR,"STRONG",{});var R_t=s(Dde);Qmo=r(R_t,"cpm"),R_t.forEach(t),Umo=r(rR," \u2014 "),aN=n(rR,"A",{href:!0});var P_t=s(aN);Hmo=r(P_t,"CpmTokenizer"),P_t.forEach(t),Jmo=r(rR," or "),nN=n(rR,"A",{href:!0});var B_t=s(nN);Ymo=r(B_t,"CpmTokenizerFast"),B_t.forEach(t),Kmo=r(rR," (CPM model)"),rR.forEach(t),Zmo=i(S),Rh=n(S,"LI",{});var Q$e=s(Rh);Gde=n(Q$e,"STRONG",{});var I_t=s(Gde);ego=r(I_t,"ctrl"),I_t.forEach(t),ogo=r(Q$e," \u2014 "),sN=n(Q$e,"A",{href:!0});var N_t=s(sN);rgo=r(N_t,"CTRLTokenizer"),N_t.forEach(t),tgo=r(Q$e," (CTRL model)"),Q$e.forEach(t),ago=i(S),ls=n(S,"LI",{});var tR=s(ls);Ode=n(tR,"STRONG",{});var q_t=s(Ode);ngo=r(q_t,"data2vec-text"),q_t.forEach(t),sgo=r(tR," \u2014 "),lN=n(tR,"A",{href:!0});var j_t=s(lN);lgo=r(j_t,"RobertaTokenizer"),j_t.forEach(t),igo=r(tR," or "),iN=n(tR,"A",{href:!0});var D_t=s(iN);dgo=r(D_t,"RobertaTokenizerFast"),D_t.forEach(t),cgo=r(tR," (Data2VecText model)"),tR.forEach(t),fgo=i(S),is=n(S,"LI",{});var aR=s(is);Vde=n(aR,"STRONG",{});var G_t=s(Vde);mgo=r(G_t,"deberta"),G_t.forEach(t),ggo=r(aR," \u2014 "),dN=n(aR,"A",{href:!0});var O_t=s(dN);hgo=r(O_t,"DebertaTokenizer"),O_t.forEach(t),pgo=r(aR," or "),cN=n(aR,"A",{href:!0});var V_t=s(cN);_go=r(V_t,"DebertaTokenizerFast"),V_t.forEach(t),ugo=r(aR," (DeBERTa model)"),aR.forEach(t),bgo=i(S),ds=n(S,"LI",{});var nR=s(ds);Xde=n(nR,"STRONG",{});var X_t=s(Xde);vgo=r(X_t,"deberta-v2"),X_t.forEach(t),Fgo=r(nR," \u2014 "),fN=n(nR,"A",{href:!0});var z_t=s(fN);Tgo=r(z_t,"DebertaV2Tokenizer"),z_t.forEach(t),Mgo=r(nR," or "),mN=n(nR,"A",{href:!0});var W_t=s(mN);Ego=r(W_t,"DebertaV2TokenizerFast"),W_t.forEach(t),Cgo=r(nR," (DeBERTa-v2 model)"),nR.forEach(t),wgo=i(S),cs=n(S,"LI",{});var sR=s(cs);zde=n(sR,"STRONG",{});var Q_t=s(zde);Ago=r(Q_t,"distilbert"),Q_t.forEach(t),Lgo=r(sR," \u2014 "),gN=n(sR,"A",{href:!0});var U_t=s(gN);ygo=r(U_t,"DistilBertTokenizer"),U_t.forEach(t),xgo=r(sR," or "),hN=n(sR,"A",{href:!0});var H_t=s(hN);$go=r(H_t,"DistilBertTokenizerFast"),H_t.forEach(t),kgo=r(sR," (DistilBERT model)"),sR.forEach(t),Sgo=i(S),fs=n(S,"LI",{});var lR=s(fs);Wde=n(lR,"STRONG",{});var J_t=s(Wde);Rgo=r(J_t,"dpr"),J_t.forEach(t),Pgo=r(lR," \u2014 "),pN=n(lR,"A",{href:!0});var Y_t=s(pN);Bgo=r(Y_t,"DPRQuestionEncoderTokenizer"),Y_t.forEach(t),Igo=r(lR," or "),_N=n(lR,"A",{href:!0});var K_t=s(_N);Ngo=r(K_t,"DPRQuestionEncoderTokenizerFast"),K_t.forEach(t),qgo=r(lR," (DPR model)"),lR.forEach(t),jgo=i(S),ms=n(S,"LI",{});var iR=s(ms);Qde=n(iR,"STRONG",{});var Z_t=s(Qde);Dgo=r(Z_t,"electra"),Z_t.forEach(t),Ggo=r(iR," \u2014 "),uN=n(iR,"A",{href:!0});var eut=s(uN);Ogo=r(eut,"ElectraTokenizer"),eut.forEach(t),Vgo=r(iR," or "),bN=n(iR,"A",{href:!0});var out=s(bN);Xgo=r(out,"ElectraTokenizerFast"),out.forEach(t),zgo=r(iR," (ELECTRA model)"),iR.forEach(t),Wgo=i(S),Ph=n(S,"LI",{});var U$e=s(Ph);Ude=n(U$e,"STRONG",{});var rut=s(Ude);Qgo=r(rut,"flaubert"),rut.forEach(t),Ugo=r(U$e," \u2014 "),vN=n(U$e,"A",{href:!0});var tut=s(vN);Hgo=r(tut,"FlaubertTokenizer"),tut.forEach(t),Jgo=r(U$e," (FlauBERT model)"),U$e.forEach(t),Ygo=i(S),gs=n(S,"LI",{});var dR=s(gs);Hde=n(dR,"STRONG",{});var aut=s(Hde);Kgo=r(aut,"fnet"),aut.forEach(t),Zgo=r(dR," \u2014 "),FN=n(dR,"A",{href:!0});var nut=s(FN);eho=r(nut,"FNetTokenizer"),nut.forEach(t),oho=r(dR," or "),TN=n(dR,"A",{href:!0});var sut=s(TN);rho=r(sut,"FNetTokenizerFast"),sut.forEach(t),tho=r(dR," (FNet model)"),dR.forEach(t),aho=i(S),Bh=n(S,"LI",{});var H$e=s(Bh);Jde=n(H$e,"STRONG",{});var lut=s(Jde);nho=r(lut,"fsmt"),lut.forEach(t),sho=r(H$e," \u2014 "),MN=n(H$e,"A",{href:!0});var iut=s(MN);lho=r(iut,"FSMTTokenizer"),iut.forEach(t),iho=r(H$e," (FairSeq Machine-Translation model)"),H$e.forEach(t),dho=i(S),hs=n(S,"LI",{});var cR=s(hs);Yde=n(cR,"STRONG",{});var dut=s(Yde);cho=r(dut,"funnel"),dut.forEach(t),fho=r(cR," \u2014 "),EN=n(cR,"A",{href:!0});var cut=s(EN);mho=r(cut,"FunnelTokenizer"),cut.forEach(t),gho=r(cR," or "),CN=n(cR,"A",{href:!0});var fut=s(CN);hho=r(fut,"FunnelTokenizerFast"),fut.forEach(t),pho=r(cR," (Funnel Transformer model)"),cR.forEach(t),_ho=i(S),ps=n(S,"LI",{});var fR=s(ps);Kde=n(fR,"STRONG",{});var mut=s(Kde);uho=r(mut,"gpt2"),mut.forEach(t),bho=r(fR," \u2014 "),wN=n(fR,"A",{href:!0});var gut=s(wN);vho=r(gut,"GPT2Tokenizer"),gut.forEach(t),Fho=r(fR," or "),AN=n(fR,"A",{href:!0});var hut=s(AN);Tho=r(hut,"GPT2TokenizerFast"),hut.forEach(t),Mho=r(fR," (OpenAI GPT-2 model)"),fR.forEach(t),Eho=i(S),_s=n(S,"LI",{});var mR=s(_s);Zde=n(mR,"STRONG",{});var put=s(Zde);Cho=r(put,"gpt_neo"),put.forEach(t),who=r(mR," \u2014 "),LN=n(mR,"A",{href:!0});var _ut=s(LN);Aho=r(_ut,"GPT2Tokenizer"),_ut.forEach(t),Lho=r(mR," or "),yN=n(mR,"A",{href:!0});var uut=s(yN);yho=r(uut,"GPT2TokenizerFast"),uut.forEach(t),xho=r(mR," (GPT Neo model)"),mR.forEach(t),$ho=i(S),Ih=n(S,"LI",{});var J$e=s(Ih);ece=n(J$e,"STRONG",{});var but=s(ece);kho=r(but,"gpt_neox"),but.forEach(t),Sho=r(J$e," \u2014 "),xN=n(J$e,"A",{href:!0});var vut=s(xN);Rho=r(vut,"GPTNeoXTokenizerFast"),vut.forEach(t),Pho=r(J$e," (GPT NeoX model)"),J$e.forEach(t),Bho=i(S),us=n(S,"LI",{});var gR=s(us);oce=n(gR,"STRONG",{});var Fut=s(oce);Iho=r(Fut,"gptj"),Fut.forEach(t),Nho=r(gR," \u2014 "),$N=n(gR,"A",{href:!0});var Tut=s($N);qho=r(Tut,"GPT2Tokenizer"),Tut.forEach(t),jho=r(gR," or "),kN=n(gR,"A",{href:!0});var Mut=s(kN);Dho=r(Mut,"GPT2TokenizerFast"),Mut.forEach(t),Gho=r(gR," (GPT-J model)"),gR.forEach(t),Oho=i(S),bs=n(S,"LI",{});var hR=s(bs);rce=n(hR,"STRONG",{});var Eut=s(rce);Vho=r(Eut,"groupvit"),Eut.forEach(t),Xho=r(hR," \u2014 "),SN=n(hR,"A",{href:!0});var Cut=s(SN);zho=r(Cut,"CLIPTokenizer"),Cut.forEach(t),Who=r(hR," or "),RN=n(hR,"A",{href:!0});var wut=s(RN);Qho=r(wut,"CLIPTokenizerFast"),wut.forEach(t),Uho=r(hR," (GroupViT model)"),hR.forEach(t),Hho=i(S),vs=n(S,"LI",{});var pR=s(vs);tce=n(pR,"STRONG",{});var Aut=s(tce);Jho=r(Aut,"herbert"),Aut.forEach(t),Yho=r(pR," \u2014 "),PN=n(pR,"A",{href:!0});var Lut=s(PN);Kho=r(Lut,"HerbertTokenizer"),Lut.forEach(t),Zho=r(pR," or "),BN=n(pR,"A",{href:!0});var yut=s(BN);epo=r(yut,"HerbertTokenizerFast"),yut.forEach(t),opo=r(pR," (HerBERT model)"),pR.forEach(t),rpo=i(S),Nh=n(S,"LI",{});var Y$e=s(Nh);ace=n(Y$e,"STRONG",{});var xut=s(ace);tpo=r(xut,"hubert"),xut.forEach(t),apo=r(Y$e," \u2014 "),IN=n(Y$e,"A",{href:!0});var $ut=s(IN);npo=r($ut,"Wav2Vec2CTCTokenizer"),$ut.forEach(t),spo=r(Y$e," (Hubert model)"),Y$e.forEach(t),lpo=i(S),Fs=n(S,"LI",{});var _R=s(Fs);nce=n(_R,"STRONG",{});var kut=s(nce);ipo=r(kut,"ibert"),kut.forEach(t),dpo=r(_R," \u2014 "),NN=n(_R,"A",{href:!0});var Sut=s(NN);cpo=r(Sut,"RobertaTokenizer"),Sut.forEach(t),fpo=r(_R," or "),qN=n(_R,"A",{href:!0});var Rut=s(qN);mpo=r(Rut,"RobertaTokenizerFast"),Rut.forEach(t),gpo=r(_R," (I-BERT model)"),_R.forEach(t),hpo=i(S),Ts=n(S,"LI",{});var uR=s(Ts);sce=n(uR,"STRONG",{});var Put=s(sce);ppo=r(Put,"layoutlm"),Put.forEach(t),_po=r(uR," \u2014 "),jN=n(uR,"A",{href:!0});var But=s(jN);upo=r(But,"LayoutLMTokenizer"),But.forEach(t),bpo=r(uR," or "),DN=n(uR,"A",{href:!0});var Iut=s(DN);vpo=r(Iut,"LayoutLMTokenizerFast"),Iut.forEach(t),Fpo=r(uR," (LayoutLM model)"),uR.forEach(t),Tpo=i(S),Ms=n(S,"LI",{});var bR=s(Ms);lce=n(bR,"STRONG",{});var Nut=s(lce);Mpo=r(Nut,"layoutlmv2"),Nut.forEach(t),Epo=r(bR," \u2014 "),GN=n(bR,"A",{href:!0});var qut=s(GN);Cpo=r(qut,"LayoutLMv2Tokenizer"),qut.forEach(t),wpo=r(bR," or "),ON=n(bR,"A",{href:!0});var jut=s(ON);Apo=r(jut,"LayoutLMv2TokenizerFast"),jut.forEach(t),Lpo=r(bR," (LayoutLMv2 model)"),bR.forEach(t),ypo=i(S),Es=n(S,"LI",{});var vR=s(Es);ice=n(vR,"STRONG",{});var Dut=s(ice);xpo=r(Dut,"layoutlmv3"),Dut.forEach(t),$po=r(vR," \u2014 "),VN=n(vR,"A",{href:!0});var Gut=s(VN);kpo=r(Gut,"LayoutLMv3Tokenizer"),Gut.forEach(t),Spo=r(vR," or "),XN=n(vR,"A",{href:!0});var Out=s(XN);Rpo=r(Out,"LayoutLMv3TokenizerFast"),Out.forEach(t),Ppo=r(vR," (LayoutLMv3 model)"),vR.forEach(t),Bpo=i(S),Cs=n(S,"LI",{});var FR=s(Cs);dce=n(FR,"STRONG",{});var Vut=s(dce);Ipo=r(Vut,"layoutxlm"),Vut.forEach(t),Npo=r(FR," \u2014 "),zN=n(FR,"A",{href:!0});var Xut=s(zN);qpo=r(Xut,"LayoutXLMTokenizer"),Xut.forEach(t),jpo=r(FR," or "),WN=n(FR,"A",{href:!0});var zut=s(WN);Dpo=r(zut,"LayoutXLMTokenizerFast"),zut.forEach(t),Gpo=r(FR," (LayoutXLM model)"),FR.forEach(t),Opo=i(S),ws=n(S,"LI",{});var TR=s(ws);cce=n(TR,"STRONG",{});var Wut=s(cce);Vpo=r(Wut,"led"),Wut.forEach(t),Xpo=r(TR," \u2014 "),QN=n(TR,"A",{href:!0});var Qut=s(QN);zpo=r(Qut,"LEDTokenizer"),Qut.forEach(t),Wpo=r(TR," or "),UN=n(TR,"A",{href:!0});var Uut=s(UN);Qpo=r(Uut,"LEDTokenizerFast"),Uut.forEach(t),Upo=r(TR," (LED model)"),TR.forEach(t),Hpo=i(S),As=n(S,"LI",{});var MR=s(As);fce=n(MR,"STRONG",{});var Hut=s(fce);Jpo=r(Hut,"longformer"),Hut.forEach(t),Ypo=r(MR," \u2014 "),HN=n(MR,"A",{href:!0});var Jut=s(HN);Kpo=r(Jut,"LongformerTokenizer"),Jut.forEach(t),Zpo=r(MR," or "),JN=n(MR,"A",{href:!0});var Yut=s(JN);e_o=r(Yut,"LongformerTokenizerFast"),Yut.forEach(t),o_o=r(MR," (Longformer model)"),MR.forEach(t),r_o=i(S),Ls=n(S,"LI",{});var ER=s(Ls);mce=n(ER,"STRONG",{});var Kut=s(mce);t_o=r(Kut,"longt5"),Kut.forEach(t),a_o=r(ER," \u2014 "),YN=n(ER,"A",{href:!0});var Zut=s(YN);n_o=r(Zut,"T5Tokenizer"),Zut.forEach(t),s_o=r(ER," or "),KN=n(ER,"A",{href:!0});var e5t=s(KN);l_o=r(e5t,"T5TokenizerFast"),e5t.forEach(t),i_o=r(ER," (LongT5 model)"),ER.forEach(t),d_o=i(S),qh=n(S,"LI",{});var K$e=s(qh);gce=n(K$e,"STRONG",{});var o5t=s(gce);c_o=r(o5t,"luke"),o5t.forEach(t),f_o=r(K$e," \u2014 "),ZN=n(K$e,"A",{href:!0});var r5t=s(ZN);m_o=r(r5t,"LukeTokenizer"),r5t.forEach(t),g_o=r(K$e," (LUKE model)"),K$e.forEach(t),h_o=i(S),ys=n(S,"LI",{});var CR=s(ys);hce=n(CR,"STRONG",{});var t5t=s(hce);p_o=r(t5t,"lxmert"),t5t.forEach(t),__o=r(CR," \u2014 "),eq=n(CR,"A",{href:!0});var a5t=s(eq);u_o=r(a5t,"LxmertTokenizer"),a5t.forEach(t),b_o=r(CR," or "),oq=n(CR,"A",{href:!0});var n5t=s(oq);v_o=r(n5t,"LxmertTokenizerFast"),n5t.forEach(t),F_o=r(CR," (LXMERT model)"),CR.forEach(t),T_o=i(S),jh=n(S,"LI",{});var Z$e=s(jh);pce=n(Z$e,"STRONG",{});var s5t=s(pce);M_o=r(s5t,"m2m_100"),s5t.forEach(t),E_o=r(Z$e," \u2014 "),rq=n(Z$e,"A",{href:!0});var l5t=s(rq);C_o=r(l5t,"M2M100Tokenizer"),l5t.forEach(t),w_o=r(Z$e," (M2M100 model)"),Z$e.forEach(t),A_o=i(S),Dh=n(S,"LI",{});var eke=s(Dh);_ce=n(eke,"STRONG",{});var i5t=s(_ce);L_o=r(i5t,"marian"),i5t.forEach(t),y_o=r(eke," \u2014 "),tq=n(eke,"A",{href:!0});var d5t=s(tq);x_o=r(d5t,"MarianTokenizer"),d5t.forEach(t),$_o=r(eke," (Marian model)"),eke.forEach(t),k_o=i(S),xs=n(S,"LI",{});var wR=s(xs);uce=n(wR,"STRONG",{});var c5t=s(uce);S_o=r(c5t,"mbart"),c5t.forEach(t),R_o=r(wR," \u2014 "),aq=n(wR,"A",{href:!0});var f5t=s(aq);P_o=r(f5t,"MBartTokenizer"),f5t.forEach(t),B_o=r(wR," or "),nq=n(wR,"A",{href:!0});var m5t=s(nq);I_o=r(m5t,"MBartTokenizerFast"),m5t.forEach(t),N_o=r(wR," (mBART model)"),wR.forEach(t),q_o=i(S),$s=n(S,"LI",{});var AR=s($s);bce=n(AR,"STRONG",{});var g5t=s(bce);j_o=r(g5t,"mbart50"),g5t.forEach(t),D_o=r(AR," \u2014 "),sq=n(AR,"A",{href:!0});var h5t=s(sq);G_o=r(h5t,"MBart50Tokenizer"),h5t.forEach(t),O_o=r(AR," or "),lq=n(AR,"A",{href:!0});var p5t=s(lq);V_o=r(p5t,"MBart50TokenizerFast"),p5t.forEach(t),X_o=r(AR," (mBART-50 model)"),AR.forEach(t),z_o=i(S),ks=n(S,"LI",{});var LR=s(ks);vce=n(LR,"STRONG",{});var _5t=s(vce);W_o=r(_5t,"megatron-bert"),_5t.forEach(t),Q_o=r(LR," \u2014 "),iq=n(LR,"A",{href:!0});var u5t=s(iq);U_o=r(u5t,"BertTokenizer"),u5t.forEach(t),H_o=r(LR," or "),dq=n(LR,"A",{href:!0});var b5t=s(dq);J_o=r(b5t,"BertTokenizerFast"),b5t.forEach(t),Y_o=r(LR," (Megatron-BERT model)"),LR.forEach(t),K_o=i(S),Gh=n(S,"LI",{});var oke=s(Gh);Fce=n(oke,"STRONG",{});var v5t=s(Fce);Z_o=r(v5t,"mluke"),v5t.forEach(t),euo=r(oke," \u2014 "),cq=n(oke,"A",{href:!0});var F5t=s(cq);ouo=r(F5t,"MLukeTokenizer"),F5t.forEach(t),ruo=r(oke," (mLUKE model)"),oke.forEach(t),tuo=i(S),Ss=n(S,"LI",{});var yR=s(Ss);Tce=n(yR,"STRONG",{});var T5t=s(Tce);auo=r(T5t,"mobilebert"),T5t.forEach(t),nuo=r(yR," \u2014 "),fq=n(yR,"A",{href:!0});var M5t=s(fq);suo=r(M5t,"MobileBertTokenizer"),M5t.forEach(t),luo=r(yR," or "),mq=n(yR,"A",{href:!0});var E5t=s(mq);iuo=r(E5t,"MobileBertTokenizerFast"),E5t.forEach(t),duo=r(yR," (MobileBERT model)"),yR.forEach(t),cuo=i(S),Rs=n(S,"LI",{});var xR=s(Rs);Mce=n(xR,"STRONG",{});var C5t=s(Mce);fuo=r(C5t,"mpnet"),C5t.forEach(t),muo=r(xR," \u2014 "),gq=n(xR,"A",{href:!0});var w5t=s(gq);guo=r(w5t,"MPNetTokenizer"),w5t.forEach(t),huo=r(xR," or "),hq=n(xR,"A",{href:!0});var A5t=s(hq);puo=r(A5t,"MPNetTokenizerFast"),A5t.forEach(t),_uo=r(xR," (MPNet model)"),xR.forEach(t),uuo=i(S),Ps=n(S,"LI",{});var $R=s(Ps);Ece=n($R,"STRONG",{});var L5t=s(Ece);buo=r(L5t,"mt5"),L5t.forEach(t),vuo=r($R," \u2014 "),pq=n($R,"A",{href:!0});var y5t=s(pq);Fuo=r(y5t,"MT5Tokenizer"),y5t.forEach(t),Tuo=r($R," or "),_q=n($R,"A",{href:!0});var x5t=s(_q);Muo=r(x5t,"MT5TokenizerFast"),x5t.forEach(t),Euo=r($R," (MT5 model)"),$R.forEach(t),Cuo=i(S),Bs=n(S,"LI",{});var kR=s(Bs);Cce=n(kR,"STRONG",{});var $5t=s(Cce);wuo=r($5t,"mvp"),$5t.forEach(t),Auo=r(kR," \u2014 "),uq=n(kR,"A",{href:!0});var k5t=s(uq);Luo=r(k5t,"MvpTokenizer"),k5t.forEach(t),yuo=r(kR," or "),bq=n(kR,"A",{href:!0});var S5t=s(bq);xuo=r(S5t,"MvpTokenizerFast"),S5t.forEach(t),$uo=r(kR," (MVP model)"),kR.forEach(t),kuo=i(S),Is=n(S,"LI",{});var SR=s(Is);wce=n(SR,"STRONG",{});var R5t=s(wce);Suo=r(R5t,"nezha"),R5t.forEach(t),Ruo=r(SR," \u2014 "),vq=n(SR,"A",{href:!0});var P5t=s(vq);Puo=r(P5t,"BertTokenizer"),P5t.forEach(t),Buo=r(SR," or "),Fq=n(SR,"A",{href:!0});var B5t=s(Fq);Iuo=r(B5t,"BertTokenizerFast"),B5t.forEach(t),Nuo=r(SR," (Nezha model)"),SR.forEach(t),quo=i(S),Ns=n(S,"LI",{});var RR=s(Ns);Ace=n(RR,"STRONG",{});var I5t=s(Ace);juo=r(I5t,"nllb"),I5t.forEach(t),Duo=r(RR," \u2014 "),Tq=n(RR,"A",{href:!0});var N5t=s(Tq);Guo=r(N5t,"NllbTokenizer"),N5t.forEach(t),Ouo=r(RR," or "),Mq=n(RR,"A",{href:!0});var q5t=s(Mq);Vuo=r(q5t,"NllbTokenizerFast"),q5t.forEach(t),Xuo=r(RR," (NLLB model)"),RR.forEach(t),zuo=i(S),qs=n(S,"LI",{});var PR=s(qs);Lce=n(PR,"STRONG",{});var j5t=s(Lce);Wuo=r(j5t,"nystromformer"),j5t.forEach(t),Quo=r(PR," \u2014 "),Eq=n(PR,"A",{href:!0});var D5t=s(Eq);Uuo=r(D5t,"AlbertTokenizer"),D5t.forEach(t),Huo=r(PR," or "),Cq=n(PR,"A",{href:!0});var G5t=s(Cq);Juo=r(G5t,"AlbertTokenizerFast"),G5t.forEach(t),Yuo=r(PR," (Nystr\xF6mformer model)"),PR.forEach(t),Kuo=i(S),js=n(S,"LI",{});var BR=s(js);yce=n(BR,"STRONG",{});var O5t=s(yce);Zuo=r(O5t,"openai-gpt"),O5t.forEach(t),e5o=r(BR," \u2014 "),wq=n(BR,"A",{href:!0});var V5t=s(wq);o5o=r(V5t,"OpenAIGPTTokenizer"),V5t.forEach(t),r5o=r(BR," or "),Aq=n(BR,"A",{href:!0});var X5t=s(Aq);t5o=r(X5t,"OpenAIGPTTokenizerFast"),X5t.forEach(t),a5o=r(BR," (OpenAI GPT model)"),BR.forEach(t),n5o=i(S),Oh=n(S,"LI",{});var rke=s(Oh);xce=n(rke,"STRONG",{});var z5t=s(xce);s5o=r(z5t,"opt"),z5t.forEach(t),l5o=r(rke," \u2014 "),Lq=n(rke,"A",{href:!0});var W5t=s(Lq);i5o=r(W5t,"GPT2Tokenizer"),W5t.forEach(t),d5o=r(rke," (OPT model)"),rke.forEach(t),c5o=i(S),Ds=n(S,"LI",{});var IR=s(Ds);$ce=n(IR,"STRONG",{});var Q5t=s($ce);f5o=r(Q5t,"owlvit"),Q5t.forEach(t),m5o=r(IR," \u2014 "),yq=n(IR,"A",{href:!0});var U5t=s(yq);g5o=r(U5t,"CLIPTokenizer"),U5t.forEach(t),h5o=r(IR," or "),xq=n(IR,"A",{href:!0});var H5t=s(xq);p5o=r(H5t,"CLIPTokenizerFast"),H5t.forEach(t),_5o=r(IR," (OWL-ViT model)"),IR.forEach(t),u5o=i(S),Gs=n(S,"LI",{});var NR=s(Gs);kce=n(NR,"STRONG",{});var J5t=s(kce);b5o=r(J5t,"pegasus"),J5t.forEach(t),v5o=r(NR," \u2014 "),$q=n(NR,"A",{href:!0});var Y5t=s($q);F5o=r(Y5t,"PegasusTokenizer"),Y5t.forEach(t),T5o=r(NR," or "),kq=n(NR,"A",{href:!0});var K5t=s(kq);M5o=r(K5t,"PegasusTokenizerFast"),K5t.forEach(t),E5o=r(NR," (Pegasus model)"),NR.forEach(t),C5o=i(S),Vh=n(S,"LI",{});var tke=s(Vh);Sce=n(tke,"STRONG",{});var Z5t=s(Sce);w5o=r(Z5t,"perceiver"),Z5t.forEach(t),A5o=r(tke," \u2014 "),Sq=n(tke,"A",{href:!0});var e1t=s(Sq);L5o=r(e1t,"PerceiverTokenizer"),e1t.forEach(t),y5o=r(tke," (Perceiver model)"),tke.forEach(t),x5o=i(S),Xh=n(S,"LI",{});var ake=s(Xh);Rce=n(ake,"STRONG",{});var o1t=s(Rce);$5o=r(o1t,"phobert"),o1t.forEach(t),k5o=r(ake," \u2014 "),Rq=n(ake,"A",{href:!0});var r1t=s(Rq);S5o=r(r1t,"PhobertTokenizer"),r1t.forEach(t),R5o=r(ake," (PhoBERT model)"),ake.forEach(t),P5o=i(S),zh=n(S,"LI",{});var nke=s(zh);Pce=n(nke,"STRONG",{});var t1t=s(Pce);B5o=r(t1t,"plbart"),t1t.forEach(t),I5o=r(nke," \u2014 "),Pq=n(nke,"A",{href:!0});var a1t=s(Pq);N5o=r(a1t,"PLBartTokenizer"),a1t.forEach(t),q5o=r(nke," (PLBart model)"),nke.forEach(t),j5o=i(S),Wh=n(S,"LI",{});var ske=s(Wh);Bce=n(ske,"STRONG",{});var n1t=s(Bce);D5o=r(n1t,"prophetnet"),n1t.forEach(t),G5o=r(ske," \u2014 "),Bq=n(ske,"A",{href:!0});var s1t=s(Bq);O5o=r(s1t,"ProphetNetTokenizer"),s1t.forEach(t),V5o=r(ske," (ProphetNet model)"),ske.forEach(t),X5o=i(S),Os=n(S,"LI",{});var qR=s(Os);Ice=n(qR,"STRONG",{});var l1t=s(Ice);z5o=r(l1t,"qdqbert"),l1t.forEach(t),W5o=r(qR," \u2014 "),Iq=n(qR,"A",{href:!0});var i1t=s(Iq);Q5o=r(i1t,"BertTokenizer"),i1t.forEach(t),U5o=r(qR," or "),Nq=n(qR,"A",{href:!0});var d1t=s(Nq);H5o=r(d1t,"BertTokenizerFast"),d1t.forEach(t),J5o=r(qR," (QDQBert model)"),qR.forEach(t),Y5o=i(S),Qh=n(S,"LI",{});var lke=s(Qh);Nce=n(lke,"STRONG",{});var c1t=s(Nce);K5o=r(c1t,"rag"),c1t.forEach(t),Z5o=r(lke," \u2014 "),qq=n(lke,"A",{href:!0});var f1t=s(qq);e1o=r(f1t,"RagTokenizer"),f1t.forEach(t),o1o=r(lke," (RAG model)"),lke.forEach(t),r1o=i(S),Vs=n(S,"LI",{});var jR=s(Vs);qce=n(jR,"STRONG",{});var m1t=s(qce);t1o=r(m1t,"realm"),m1t.forEach(t),a1o=r(jR," \u2014 "),jq=n(jR,"A",{href:!0});var g1t=s(jq);n1o=r(g1t,"RealmTokenizer"),g1t.forEach(t),s1o=r(jR," or "),Dq=n(jR,"A",{href:!0});var h1t=s(Dq);l1o=r(h1t,"RealmTokenizerFast"),h1t.forEach(t),i1o=r(jR," (REALM model)"),jR.forEach(t),d1o=i(S),Xs=n(S,"LI",{});var DR=s(Xs);jce=n(DR,"STRONG",{});var p1t=s(jce);c1o=r(p1t,"reformer"),p1t.forEach(t),f1o=r(DR," \u2014 "),Gq=n(DR,"A",{href:!0});var _1t=s(Gq);m1o=r(_1t,"ReformerTokenizer"),_1t.forEach(t),g1o=r(DR," or "),Oq=n(DR,"A",{href:!0});var u1t=s(Oq);h1o=r(u1t,"ReformerTokenizerFast"),u1t.forEach(t),p1o=r(DR," (Reformer model)"),DR.forEach(t),_1o=i(S),zs=n(S,"LI",{});var GR=s(zs);Dce=n(GR,"STRONG",{});var b1t=s(Dce);u1o=r(b1t,"rembert"),b1t.forEach(t),b1o=r(GR," \u2014 "),Vq=n(GR,"A",{href:!0});var v1t=s(Vq);v1o=r(v1t,"RemBertTokenizer"),v1t.forEach(t),F1o=r(GR," or "),Xq=n(GR,"A",{href:!0});var F1t=s(Xq);T1o=r(F1t,"RemBertTokenizerFast"),F1t.forEach(t),M1o=r(GR," (RemBERT model)"),GR.forEach(t),E1o=i(S),Ws=n(S,"LI",{});var OR=s(Ws);Gce=n(OR,"STRONG",{});var T1t=s(Gce);C1o=r(T1t,"retribert"),T1t.forEach(t),w1o=r(OR," \u2014 "),zq=n(OR,"A",{href:!0});var M1t=s(zq);A1o=r(M1t,"RetriBertTokenizer"),M1t.forEach(t),L1o=r(OR," or "),Wq=n(OR,"A",{href:!0});var E1t=s(Wq);y1o=r(E1t,"RetriBertTokenizerFast"),E1t.forEach(t),x1o=r(OR," (RetriBERT model)"),OR.forEach(t),$1o=i(S),Qs=n(S,"LI",{});var VR=s(Qs);Oce=n(VR,"STRONG",{});var C1t=s(Oce);k1o=r(C1t,"roberta"),C1t.forEach(t),S1o=r(VR," \u2014 "),Qq=n(VR,"A",{href:!0});var w1t=s(Qq);R1o=r(w1t,"RobertaTokenizer"),w1t.forEach(t),P1o=r(VR," or "),Uq=n(VR,"A",{href:!0});var A1t=s(Uq);B1o=r(A1t,"RobertaTokenizerFast"),A1t.forEach(t),I1o=r(VR," (RoBERTa model)"),VR.forEach(t),N1o=i(S),Us=n(S,"LI",{});var XR=s(Us);Vce=n(XR,"STRONG",{});var L1t=s(Vce);q1o=r(L1t,"roformer"),L1t.forEach(t),j1o=r(XR," \u2014 "),Hq=n(XR,"A",{href:!0});var y1t=s(Hq);D1o=r(y1t,"RoFormerTokenizer"),y1t.forEach(t),G1o=r(XR," or "),Jq=n(XR,"A",{href:!0});var x1t=s(Jq);O1o=r(x1t,"RoFormerTokenizerFast"),x1t.forEach(t),V1o=r(XR," (RoFormer model)"),XR.forEach(t),X1o=i(S),Uh=n(S,"LI",{});var ike=s(Uh);Xce=n(ike,"STRONG",{});var $1t=s(Xce);z1o=r($1t,"speech_to_text"),$1t.forEach(t),W1o=r(ike," \u2014 "),Yq=n(ike,"A",{href:!0});var k1t=s(Yq);Q1o=r(k1t,"Speech2TextTokenizer"),k1t.forEach(t),U1o=r(ike," (Speech2Text model)"),ike.forEach(t),H1o=i(S),Hh=n(S,"LI",{});var dke=s(Hh);zce=n(dke,"STRONG",{});var S1t=s(zce);J1o=r(S1t,"speech_to_text_2"),S1t.forEach(t),Y1o=r(dke," \u2014 "),Kq=n(dke,"A",{href:!0});var R1t=s(Kq);K1o=r(R1t,"Speech2Text2Tokenizer"),R1t.forEach(t),Z1o=r(dke," (Speech2Text2 model)"),dke.forEach(t),e2o=i(S),Hs=n(S,"LI",{});var zR=s(Hs);Wce=n(zR,"STRONG",{});var P1t=s(Wce);o2o=r(P1t,"splinter"),P1t.forEach(t),r2o=r(zR," \u2014 "),Zq=n(zR,"A",{href:!0});var B1t=s(Zq);t2o=r(B1t,"SplinterTokenizer"),B1t.forEach(t),a2o=r(zR," or "),ej=n(zR,"A",{href:!0});var I1t=s(ej);n2o=r(I1t,"SplinterTokenizerFast"),I1t.forEach(t),s2o=r(zR," (Splinter model)"),zR.forEach(t),l2o=i(S),Js=n(S,"LI",{});var WR=s(Js);Qce=n(WR,"STRONG",{});var N1t=s(Qce);i2o=r(N1t,"squeezebert"),N1t.forEach(t),d2o=r(WR," \u2014 "),oj=n(WR,"A",{href:!0});var q1t=s(oj);c2o=r(q1t,"SqueezeBertTokenizer"),q1t.forEach(t),f2o=r(WR," or "),rj=n(WR,"A",{href:!0});var j1t=s(rj);m2o=r(j1t,"SqueezeBertTokenizerFast"),j1t.forEach(t),g2o=r(WR," (SqueezeBERT model)"),WR.forEach(t),h2o=i(S),Ys=n(S,"LI",{});var QR=s(Ys);Uce=n(QR,"STRONG",{});var D1t=s(Uce);p2o=r(D1t,"t5"),D1t.forEach(t),_2o=r(QR," \u2014 "),tj=n(QR,"A",{href:!0});var G1t=s(tj);u2o=r(G1t,"T5Tokenizer"),G1t.forEach(t),b2o=r(QR," or "),aj=n(QR,"A",{href:!0});var O1t=s(aj);v2o=r(O1t,"T5TokenizerFast"),O1t.forEach(t),F2o=r(QR," (T5 model)"),QR.forEach(t),T2o=i(S),Jh=n(S,"LI",{});var cke=s(Jh);Hce=n(cke,"STRONG",{});var V1t=s(Hce);M2o=r(V1t,"tapas"),V1t.forEach(t),E2o=r(cke," \u2014 "),nj=n(cke,"A",{href:!0});var X1t=s(nj);C2o=r(X1t,"TapasTokenizer"),X1t.forEach(t),w2o=r(cke," (TAPAS model)"),cke.forEach(t),A2o=i(S),Yh=n(S,"LI",{});var fke=s(Yh);Jce=n(fke,"STRONG",{});var z1t=s(Jce);L2o=r(z1t,"tapex"),z1t.forEach(t),y2o=r(fke," \u2014 "),sj=n(fke,"A",{href:!0});var W1t=s(sj);x2o=r(W1t,"TapexTokenizer"),W1t.forEach(t),$2o=r(fke," (TAPEX model)"),fke.forEach(t),k2o=i(S),Kh=n(S,"LI",{});var mke=s(Kh);Yce=n(mke,"STRONG",{});var Q1t=s(Yce);S2o=r(Q1t,"transfo-xl"),Q1t.forEach(t),R2o=r(mke," \u2014 "),lj=n(mke,"A",{href:!0});var U1t=s(lj);P2o=r(U1t,"TransfoXLTokenizer"),U1t.forEach(t),B2o=r(mke," (Transformer-XL model)"),mke.forEach(t),I2o=i(S),Ks=n(S,"LI",{});var UR=s(Ks);Kce=n(UR,"STRONG",{});var H1t=s(Kce);N2o=r(H1t,"vilt"),H1t.forEach(t),q2o=r(UR," \u2014 "),ij=n(UR,"A",{href:!0});var J1t=s(ij);j2o=r(J1t,"BertTokenizer"),J1t.forEach(t),D2o=r(UR," or "),dj=n(UR,"A",{href:!0});var Y1t=s(dj);G2o=r(Y1t,"BertTokenizerFast"),Y1t.forEach(t),O2o=r(UR," (ViLT model)"),UR.forEach(t),V2o=i(S),Zs=n(S,"LI",{});var HR=s(Zs);Zce=n(HR,"STRONG",{});var K1t=s(Zce);X2o=r(K1t,"visual_bert"),K1t.forEach(t),z2o=r(HR," \u2014 "),cj=n(HR,"A",{href:!0});var Z1t=s(cj);W2o=r(Z1t,"BertTokenizer"),Z1t.forEach(t),Q2o=r(HR," or "),fj=n(HR,"A",{href:!0});var e2t=s(fj);U2o=r(e2t,"BertTokenizerFast"),e2t.forEach(t),H2o=r(HR," (VisualBERT model)"),HR.forEach(t),J2o=i(S),Zh=n(S,"LI",{});var gke=s(Zh);efe=n(gke,"STRONG",{});var o2t=s(efe);Y2o=r(o2t,"wav2vec2"),o2t.forEach(t),K2o=r(gke," \u2014 "),mj=n(gke,"A",{href:!0});var r2t=s(mj);Z2o=r(r2t,"Wav2Vec2CTCTokenizer"),r2t.forEach(t),ebo=r(gke," (Wav2Vec2 model)"),gke.forEach(t),obo=i(S),ep=n(S,"LI",{});var hke=s(ep);ofe=n(hke,"STRONG",{});var t2t=s(ofe);rbo=r(t2t,"wav2vec2-conformer"),t2t.forEach(t),tbo=r(hke," \u2014 "),gj=n(hke,"A",{href:!0});var a2t=s(gj);abo=r(a2t,"Wav2Vec2CTCTokenizer"),a2t.forEach(t),nbo=r(hke," (Wav2Vec2-Conformer model)"),hke.forEach(t),sbo=i(S),op=n(S,"LI",{});var pke=s(op);rfe=n(pke,"STRONG",{});var n2t=s(rfe);lbo=r(n2t,"wav2vec2_phoneme"),n2t.forEach(t),ibo=r(pke," \u2014 "),hj=n(pke,"A",{href:!0});var s2t=s(hj);dbo=r(s2t,"Wav2Vec2PhonemeCTCTokenizer"),s2t.forEach(t),cbo=r(pke," (Wav2Vec2Phoneme model)"),pke.forEach(t),fbo=i(S),el=n(S,"LI",{});var JR=s(el);tfe=n(JR,"STRONG",{});var l2t=s(tfe);mbo=r(l2t,"xglm"),l2t.forEach(t),gbo=r(JR," \u2014 "),pj=n(JR,"A",{href:!0});var i2t=s(pj);hbo=r(i2t,"XGLMTokenizer"),i2t.forEach(t),pbo=r(JR," or "),_j=n(JR,"A",{href:!0});var d2t=s(_j);_bo=r(d2t,"XGLMTokenizerFast"),d2t.forEach(t),ubo=r(JR," (XGLM model)"),JR.forEach(t),bbo=i(S),rp=n(S,"LI",{});var _ke=s(rp);afe=n(_ke,"STRONG",{});var c2t=s(afe);vbo=r(c2t,"xlm"),c2t.forEach(t),Fbo=r(_ke," \u2014 "),uj=n(_ke,"A",{href:!0});var f2t=s(uj);Tbo=r(f2t,"XLMTokenizer"),f2t.forEach(t),Mbo=r(_ke," (XLM model)"),_ke.forEach(t),Ebo=i(S),tp=n(S,"LI",{});var uke=s(tp);nfe=n(uke,"STRONG",{});var m2t=s(nfe);Cbo=r(m2t,"xlm-prophetnet"),m2t.forEach(t),wbo=r(uke," \u2014 "),bj=n(uke,"A",{href:!0});var g2t=s(bj);Abo=r(g2t,"XLMProphetNetTokenizer"),g2t.forEach(t),Lbo=r(uke," (XLM-ProphetNet model)"),uke.forEach(t),ybo=i(S),ol=n(S,"LI",{});var YR=s(ol);sfe=n(YR,"STRONG",{});var h2t=s(sfe);xbo=r(h2t,"xlm-roberta"),h2t.forEach(t),$bo=r(YR," \u2014 "),vj=n(YR,"A",{href:!0});var p2t=s(vj);kbo=r(p2t,"XLMRobertaTokenizer"),p2t.forEach(t),Sbo=r(YR," or "),Fj=n(YR,"A",{href:!0});var _2t=s(Fj);Rbo=r(_2t,"XLMRobertaTokenizerFast"),_2t.forEach(t),Pbo=r(YR," (XLM-RoBERTa model)"),YR.forEach(t),Bbo=i(S),rl=n(S,"LI",{});var KR=s(rl);lfe=n(KR,"STRONG",{});var u2t=s(lfe);Ibo=r(u2t,"xlm-roberta-xl"),u2t.forEach(t),Nbo=r(KR," \u2014 "),Tj=n(KR,"A",{href:!0});var b2t=s(Tj);qbo=r(b2t,"RobertaTokenizer"),b2t.forEach(t),jbo=r(KR," or "),Mj=n(KR,"A",{href:!0});var v2t=s(Mj);Dbo=r(v2t,"RobertaTokenizerFast"),v2t.forEach(t),Gbo=r(KR," (XLM-RoBERTa-XL model)"),KR.forEach(t),Obo=i(S),tl=n(S,"LI",{});var ZR=s(tl);ife=n(ZR,"STRONG",{});var F2t=s(ife);Vbo=r(F2t,"xlnet"),F2t.forEach(t),Xbo=r(ZR," \u2014 "),Ej=n(ZR,"A",{href:!0});var T2t=s(Ej);zbo=r(T2t,"XLNetTokenizer"),T2t.forEach(t),Wbo=r(ZR," or "),Cj=n(ZR,"A",{href:!0});var M2t=s(Cj);Qbo=r(M2t,"XLNetTokenizerFast"),M2t.forEach(t),Ubo=r(ZR," (XLNet model)"),ZR.forEach(t),Hbo=i(S),al=n(S,"LI",{});var eP=s(al);dfe=n(eP,"STRONG",{});var E2t=s(dfe);Jbo=r(E2t,"yoso"),E2t.forEach(t),Ybo=r(eP," \u2014 "),wj=n(eP,"A",{href:!0});var C2t=s(wj);Kbo=r(C2t,"AlbertTokenizer"),C2t.forEach(t),Zbo=r(eP," or "),Aj=n(eP,"A",{href:!0});var w2t=s(Aj);evo=r(w2t,"AlbertTokenizerFast"),w2t.forEach(t),ovo=r(eP," (YOSO model)"),eP.forEach(t),S.forEach(t),rvo=i(fl),T(ap.$$.fragment,fl),fl.forEach(t),tvo=i(cl),np=n(cl,"DIV",{class:!0});var gJe=s(np);T($y.$$.fragment,gJe),avo=i(gJe),cfe=n(gJe,"P",{});var A2t=s(cfe);nvo=r(A2t,"Register a new tokenizer in this mapping."),A2t.forEach(t),gJe.forEach(t),cl.forEach(t),iUe=i(f),Zi=n(f,"H2",{class:!0});var hJe=s(Zi);sp=n(hJe,"A",{id:!0,class:!0,href:!0});var L2t=s(sp);ffe=n(L2t,"SPAN",{});var y2t=s(ffe);T(ky.$$.fragment,y2t),y2t.forEach(t),L2t.forEach(t),svo=i(hJe),mfe=n(hJe,"SPAN",{});var x2t=s(mfe);lvo=r(x2t,"AutoFeatureExtractor"),x2t.forEach(t),hJe.forEach(t),dUe=i(f),$o=n(f,"DIV",{class:!0});var ml=s($o);T(Sy.$$.fragment,ml),ivo=i(ml),Ry=n(ml,"P",{});var pJe=s(Ry);dvo=r(pJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Lj=n(pJe,"A",{href:!0});var $2t=s(Lj);cvo=r($2t,"AutoFeatureExtractor.from_pretrained()"),$2t.forEach(t),fvo=r(pJe," class method."),pJe.forEach(t),mvo=i(ml),Py=n(ml,"P",{});var _Je=s(Py);gvo=r(_Je,"This class cannot be instantiated directly using "),gfe=n(_Je,"CODE",{});var k2t=s(gfe);hvo=r(k2t,"__init__()"),k2t.forEach(t),pvo=r(_Je," (throws an error)."),_Je.forEach(t),_vo=i(ml),Je=n(ml,"DIV",{class:!0});var fa=s(Je);T(By.$$.fragment,fa),uvo=i(fa),hfe=n(fa,"P",{});var S2t=s(hfe);bvo=r(S2t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),S2t.forEach(t),vvo=i(fa),Oa=n(fa,"P",{});var p7=s(Oa);Fvo=r(p7,"The feature extractor class to instantiate is selected based on the "),pfe=n(p7,"CODE",{});var R2t=s(pfe);Tvo=r(R2t,"model_type"),R2t.forEach(t),Mvo=r(p7,` property of the config object
(either passed as an argument or loaded from `),_fe=n(p7,"CODE",{});var P2t=s(_fe);Evo=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),Cvo=r(p7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ufe=n(p7,"CODE",{});var B2t=s(ufe);wvo=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),Avo=r(p7,":"),p7.forEach(t),Lvo=i(fa),Q=n(fa,"UL",{});var J=s(Q);lp=n(J,"LI",{});var bke=s(lp);bfe=n(bke,"STRONG",{});var I2t=s(bfe);yvo=r(I2t,"beit"),I2t.forEach(t),xvo=r(bke," \u2014 "),yj=n(bke,"A",{href:!0});var N2t=s(yj);$vo=r(N2t,"BeitFeatureExtractor"),N2t.forEach(t),kvo=r(bke," (BEiT model)"),bke.forEach(t),Svo=i(J),ip=n(J,"LI",{});var vke=s(ip);vfe=n(vke,"STRONG",{});var q2t=s(vfe);Rvo=r(q2t,"clip"),q2t.forEach(t),Pvo=r(vke," \u2014 "),xj=n(vke,"A",{href:!0});var j2t=s(xj);Bvo=r(j2t,"CLIPFeatureExtractor"),j2t.forEach(t),Ivo=r(vke," (CLIP model)"),vke.forEach(t),Nvo=i(J),dp=n(J,"LI",{});var Fke=s(dp);Ffe=n(Fke,"STRONG",{});var D2t=s(Ffe);qvo=r(D2t,"convnext"),D2t.forEach(t),jvo=r(Fke," \u2014 "),$j=n(Fke,"A",{href:!0});var G2t=s($j);Dvo=r(G2t,"ConvNextFeatureExtractor"),G2t.forEach(t),Gvo=r(Fke," (ConvNeXT model)"),Fke.forEach(t),Ovo=i(J),cp=n(J,"LI",{});var Tke=s(cp);Tfe=n(Tke,"STRONG",{});var O2t=s(Tfe);Vvo=r(O2t,"cvt"),O2t.forEach(t),Xvo=r(Tke," \u2014 "),kj=n(Tke,"A",{href:!0});var V2t=s(kj);zvo=r(V2t,"ConvNextFeatureExtractor"),V2t.forEach(t),Wvo=r(Tke," (CvT model)"),Tke.forEach(t),Qvo=i(J),fp=n(J,"LI",{});var Mke=s(fp);Mfe=n(Mke,"STRONG",{});var X2t=s(Mfe);Uvo=r(X2t,"data2vec-audio"),X2t.forEach(t),Hvo=r(Mke," \u2014 "),Sj=n(Mke,"A",{href:!0});var z2t=s(Sj);Jvo=r(z2t,"Wav2Vec2FeatureExtractor"),z2t.forEach(t),Yvo=r(Mke," (Data2VecAudio model)"),Mke.forEach(t),Kvo=i(J),mp=n(J,"LI",{});var Eke=s(mp);Efe=n(Eke,"STRONG",{});var W2t=s(Efe);Zvo=r(W2t,"data2vec-vision"),W2t.forEach(t),eFo=r(Eke," \u2014 "),Rj=n(Eke,"A",{href:!0});var Q2t=s(Rj);oFo=r(Q2t,"BeitFeatureExtractor"),Q2t.forEach(t),rFo=r(Eke," (Data2VecVision model)"),Eke.forEach(t),tFo=i(J),gp=n(J,"LI",{});var Cke=s(gp);Cfe=n(Cke,"STRONG",{});var U2t=s(Cfe);aFo=r(U2t,"deit"),U2t.forEach(t),nFo=r(Cke," \u2014 "),Pj=n(Cke,"A",{href:!0});var H2t=s(Pj);sFo=r(H2t,"DeiTFeatureExtractor"),H2t.forEach(t),lFo=r(Cke," (DeiT model)"),Cke.forEach(t),iFo=i(J),hp=n(J,"LI",{});var wke=s(hp);wfe=n(wke,"STRONG",{});var J2t=s(wfe);dFo=r(J2t,"detr"),J2t.forEach(t),cFo=r(wke," \u2014 "),Bj=n(wke,"A",{href:!0});var Y2t=s(Bj);fFo=r(Y2t,"DetrFeatureExtractor"),Y2t.forEach(t),mFo=r(wke," (DETR model)"),wke.forEach(t),gFo=i(J),pp=n(J,"LI",{});var Ake=s(pp);Afe=n(Ake,"STRONG",{});var K2t=s(Afe);hFo=r(K2t,"donut"),K2t.forEach(t),pFo=r(Ake," \u2014 "),Ij=n(Ake,"A",{href:!0});var Z2t=s(Ij);_Fo=r(Z2t,"DonutFeatureExtractor"),Z2t.forEach(t),uFo=r(Ake," (Donut model)"),Ake.forEach(t),bFo=i(J),_p=n(J,"LI",{});var Lke=s(_p);Lfe=n(Lke,"STRONG",{});var ebt=s(Lfe);vFo=r(ebt,"dpt"),ebt.forEach(t),FFo=r(Lke," \u2014 "),Nj=n(Lke,"A",{href:!0});var obt=s(Nj);TFo=r(obt,"DPTFeatureExtractor"),obt.forEach(t),MFo=r(Lke," (DPT model)"),Lke.forEach(t),EFo=i(J),up=n(J,"LI",{});var yke=s(up);yfe=n(yke,"STRONG",{});var rbt=s(yfe);CFo=r(rbt,"flava"),rbt.forEach(t),wFo=r(yke," \u2014 "),qj=n(yke,"A",{href:!0});var tbt=s(qj);AFo=r(tbt,"FlavaFeatureExtractor"),tbt.forEach(t),LFo=r(yke," (FLAVA model)"),yke.forEach(t),yFo=i(J),bp=n(J,"LI",{});var xke=s(bp);xfe=n(xke,"STRONG",{});var abt=s(xfe);xFo=r(abt,"glpn"),abt.forEach(t),$Fo=r(xke," \u2014 "),jj=n(xke,"A",{href:!0});var nbt=s(jj);kFo=r(nbt,"GLPNFeatureExtractor"),nbt.forEach(t),SFo=r(xke," (GLPN model)"),xke.forEach(t),RFo=i(J),vp=n(J,"LI",{});var $ke=s(vp);$fe=n($ke,"STRONG",{});var sbt=s($fe);PFo=r(sbt,"groupvit"),sbt.forEach(t),BFo=r($ke," \u2014 "),Dj=n($ke,"A",{href:!0});var lbt=s(Dj);IFo=r(lbt,"CLIPFeatureExtractor"),lbt.forEach(t),NFo=r($ke," (GroupViT model)"),$ke.forEach(t),qFo=i(J),Fp=n(J,"LI",{});var kke=s(Fp);kfe=n(kke,"STRONG",{});var ibt=s(kfe);jFo=r(ibt,"hubert"),ibt.forEach(t),DFo=r(kke," \u2014 "),Gj=n(kke,"A",{href:!0});var dbt=s(Gj);GFo=r(dbt,"Wav2Vec2FeatureExtractor"),dbt.forEach(t),OFo=r(kke," (Hubert model)"),kke.forEach(t),VFo=i(J),Tp=n(J,"LI",{});var Ske=s(Tp);Sfe=n(Ske,"STRONG",{});var cbt=s(Sfe);XFo=r(cbt,"imagegpt"),cbt.forEach(t),zFo=r(Ske," \u2014 "),Oj=n(Ske,"A",{href:!0});var fbt=s(Oj);WFo=r(fbt,"ImageGPTFeatureExtractor"),fbt.forEach(t),QFo=r(Ske," (ImageGPT model)"),Ske.forEach(t),UFo=i(J),Mp=n(J,"LI",{});var Rke=s(Mp);Rfe=n(Rke,"STRONG",{});var mbt=s(Rfe);HFo=r(mbt,"layoutlmv2"),mbt.forEach(t),JFo=r(Rke," \u2014 "),Vj=n(Rke,"A",{href:!0});var gbt=s(Vj);YFo=r(gbt,"LayoutLMv2FeatureExtractor"),gbt.forEach(t),KFo=r(Rke," (LayoutLMv2 model)"),Rke.forEach(t),ZFo=i(J),Ep=n(J,"LI",{});var Pke=s(Ep);Pfe=n(Pke,"STRONG",{});var hbt=s(Pfe);eTo=r(hbt,"layoutlmv3"),hbt.forEach(t),oTo=r(Pke," \u2014 "),Xj=n(Pke,"A",{href:!0});var pbt=s(Xj);rTo=r(pbt,"LayoutLMv3FeatureExtractor"),pbt.forEach(t),tTo=r(Pke," (LayoutLMv3 model)"),Pke.forEach(t),aTo=i(J),Cp=n(J,"LI",{});var Bke=s(Cp);Bfe=n(Bke,"STRONG",{});var _bt=s(Bfe);nTo=r(_bt,"levit"),_bt.forEach(t),sTo=r(Bke," \u2014 "),zj=n(Bke,"A",{href:!0});var ubt=s(zj);lTo=r(ubt,"LevitFeatureExtractor"),ubt.forEach(t),iTo=r(Bke," (LeViT model)"),Bke.forEach(t),dTo=i(J),wp=n(J,"LI",{});var Ike=s(wp);Ife=n(Ike,"STRONG",{});var bbt=s(Ife);cTo=r(bbt,"maskformer"),bbt.forEach(t),fTo=r(Ike," \u2014 "),Wj=n(Ike,"A",{href:!0});var vbt=s(Wj);mTo=r(vbt,"MaskFormerFeatureExtractor"),vbt.forEach(t),gTo=r(Ike," (MaskFormer model)"),Ike.forEach(t),hTo=i(J),Ap=n(J,"LI",{});var Nke=s(Ap);Nfe=n(Nke,"STRONG",{});var Fbt=s(Nfe);pTo=r(Fbt,"mctct"),Fbt.forEach(t),_To=r(Nke," \u2014 "),Qj=n(Nke,"A",{href:!0});var Tbt=s(Qj);uTo=r(Tbt,"MCTCTFeatureExtractor"),Tbt.forEach(t),bTo=r(Nke," (M-CTC-T model)"),Nke.forEach(t),vTo=i(J),Lp=n(J,"LI",{});var qke=s(Lp);qfe=n(qke,"STRONG",{});var Mbt=s(qfe);FTo=r(Mbt,"mobilevit"),Mbt.forEach(t),TTo=r(qke," \u2014 "),Uj=n(qke,"A",{href:!0});var Ebt=s(Uj);MTo=r(Ebt,"MobileViTFeatureExtractor"),Ebt.forEach(t),ETo=r(qke," (MobileViT model)"),qke.forEach(t),CTo=i(J),yp=n(J,"LI",{});var jke=s(yp);jfe=n(jke,"STRONG",{});var Cbt=s(jfe);wTo=r(Cbt,"owlvit"),Cbt.forEach(t),ATo=r(jke," \u2014 "),Hj=n(jke,"A",{href:!0});var wbt=s(Hj);LTo=r(wbt,"OwlViTFeatureExtractor"),wbt.forEach(t),yTo=r(jke," (OWL-ViT model)"),jke.forEach(t),xTo=i(J),xp=n(J,"LI",{});var Dke=s(xp);Dfe=n(Dke,"STRONG",{});var Abt=s(Dfe);$To=r(Abt,"perceiver"),Abt.forEach(t),kTo=r(Dke," \u2014 "),Jj=n(Dke,"A",{href:!0});var Lbt=s(Jj);STo=r(Lbt,"PerceiverFeatureExtractor"),Lbt.forEach(t),RTo=r(Dke," (Perceiver model)"),Dke.forEach(t),PTo=i(J),$p=n(J,"LI",{});var Gke=s($p);Gfe=n(Gke,"STRONG",{});var ybt=s(Gfe);BTo=r(ybt,"poolformer"),ybt.forEach(t),ITo=r(Gke," \u2014 "),Yj=n(Gke,"A",{href:!0});var xbt=s(Yj);NTo=r(xbt,"PoolFormerFeatureExtractor"),xbt.forEach(t),qTo=r(Gke," (PoolFormer model)"),Gke.forEach(t),jTo=i(J),kp=n(J,"LI",{});var Oke=s(kp);Ofe=n(Oke,"STRONG",{});var $bt=s(Ofe);DTo=r($bt,"regnet"),$bt.forEach(t),GTo=r(Oke," \u2014 "),Kj=n(Oke,"A",{href:!0});var kbt=s(Kj);OTo=r(kbt,"ConvNextFeatureExtractor"),kbt.forEach(t),VTo=r(Oke," (RegNet model)"),Oke.forEach(t),XTo=i(J),Sp=n(J,"LI",{});var Vke=s(Sp);Vfe=n(Vke,"STRONG",{});var Sbt=s(Vfe);zTo=r(Sbt,"resnet"),Sbt.forEach(t),WTo=r(Vke," \u2014 "),Zj=n(Vke,"A",{href:!0});var Rbt=s(Zj);QTo=r(Rbt,"ConvNextFeatureExtractor"),Rbt.forEach(t),UTo=r(Vke," (ResNet model)"),Vke.forEach(t),HTo=i(J),Rp=n(J,"LI",{});var Xke=s(Rp);Xfe=n(Xke,"STRONG",{});var Pbt=s(Xfe);JTo=r(Pbt,"segformer"),Pbt.forEach(t),YTo=r(Xke," \u2014 "),eD=n(Xke,"A",{href:!0});var Bbt=s(eD);KTo=r(Bbt,"SegformerFeatureExtractor"),Bbt.forEach(t),ZTo=r(Xke," (SegFormer model)"),Xke.forEach(t),e8o=i(J),Pp=n(J,"LI",{});var zke=s(Pp);zfe=n(zke,"STRONG",{});var Ibt=s(zfe);o8o=r(Ibt,"speech_to_text"),Ibt.forEach(t),r8o=r(zke," \u2014 "),oD=n(zke,"A",{href:!0});var Nbt=s(oD);t8o=r(Nbt,"Speech2TextFeatureExtractor"),Nbt.forEach(t),a8o=r(zke," (Speech2Text model)"),zke.forEach(t),n8o=i(J),Bp=n(J,"LI",{});var Wke=s(Bp);Wfe=n(Wke,"STRONG",{});var qbt=s(Wfe);s8o=r(qbt,"swin"),qbt.forEach(t),l8o=r(Wke," \u2014 "),rD=n(Wke,"A",{href:!0});var jbt=s(rD);i8o=r(jbt,"ViTFeatureExtractor"),jbt.forEach(t),d8o=r(Wke," (Swin Transformer model)"),Wke.forEach(t),c8o=i(J),Ip=n(J,"LI",{});var Qke=s(Ip);Qfe=n(Qke,"STRONG",{});var Dbt=s(Qfe);f8o=r(Dbt,"swinv2"),Dbt.forEach(t),m8o=r(Qke," \u2014 "),tD=n(Qke,"A",{href:!0});var Gbt=s(tD);g8o=r(Gbt,"ViTFeatureExtractor"),Gbt.forEach(t),h8o=r(Qke," (Swin Transformer V2 model)"),Qke.forEach(t),p8o=i(J),Np=n(J,"LI",{});var Uke=s(Np);Ufe=n(Uke,"STRONG",{});var Obt=s(Ufe);_8o=r(Obt,"van"),Obt.forEach(t),u8o=r(Uke," \u2014 "),aD=n(Uke,"A",{href:!0});var Vbt=s(aD);b8o=r(Vbt,"ConvNextFeatureExtractor"),Vbt.forEach(t),v8o=r(Uke," (VAN model)"),Uke.forEach(t),F8o=i(J),qp=n(J,"LI",{});var Hke=s(qp);Hfe=n(Hke,"STRONG",{});var Xbt=s(Hfe);T8o=r(Xbt,"videomae"),Xbt.forEach(t),M8o=r(Hke," \u2014 "),nD=n(Hke,"A",{href:!0});var zbt=s(nD);E8o=r(zbt,"ViTFeatureExtractor"),zbt.forEach(t),C8o=r(Hke," (VideoMAE model)"),Hke.forEach(t),w8o=i(J),jp=n(J,"LI",{});var Jke=s(jp);Jfe=n(Jke,"STRONG",{});var Wbt=s(Jfe);A8o=r(Wbt,"vilt"),Wbt.forEach(t),L8o=r(Jke," \u2014 "),sD=n(Jke,"A",{href:!0});var Qbt=s(sD);y8o=r(Qbt,"ViltFeatureExtractor"),Qbt.forEach(t),x8o=r(Jke," (ViLT model)"),Jke.forEach(t),$8o=i(J),Dp=n(J,"LI",{});var Yke=s(Dp);Yfe=n(Yke,"STRONG",{});var Ubt=s(Yfe);k8o=r(Ubt,"vit"),Ubt.forEach(t),S8o=r(Yke," \u2014 "),lD=n(Yke,"A",{href:!0});var Hbt=s(lD);R8o=r(Hbt,"ViTFeatureExtractor"),Hbt.forEach(t),P8o=r(Yke," (ViT model)"),Yke.forEach(t),B8o=i(J),Gp=n(J,"LI",{});var Kke=s(Gp);Kfe=n(Kke,"STRONG",{});var Jbt=s(Kfe);I8o=r(Jbt,"vit_mae"),Jbt.forEach(t),N8o=r(Kke," \u2014 "),iD=n(Kke,"A",{href:!0});var Ybt=s(iD);q8o=r(Ybt,"ViTFeatureExtractor"),Ybt.forEach(t),j8o=r(Kke," (ViTMAE model)"),Kke.forEach(t),D8o=i(J),Op=n(J,"LI",{});var Zke=s(Op);Zfe=n(Zke,"STRONG",{});var Kbt=s(Zfe);G8o=r(Kbt,"wav2vec2"),Kbt.forEach(t),O8o=r(Zke," \u2014 "),dD=n(Zke,"A",{href:!0});var Zbt=s(dD);V8o=r(Zbt,"Wav2Vec2FeatureExtractor"),Zbt.forEach(t),X8o=r(Zke," (Wav2Vec2 model)"),Zke.forEach(t),z8o=i(J),Vp=n(J,"LI",{});var eSe=s(Vp);eme=n(eSe,"STRONG",{});var evt=s(eme);W8o=r(evt,"wav2vec2-conformer"),evt.forEach(t),Q8o=r(eSe," \u2014 "),cD=n(eSe,"A",{href:!0});var ovt=s(cD);U8o=r(ovt,"Wav2Vec2FeatureExtractor"),ovt.forEach(t),H8o=r(eSe," (Wav2Vec2-Conformer model)"),eSe.forEach(t),J8o=i(J),Xp=n(J,"LI",{});var oSe=s(Xp);ome=n(oSe,"STRONG",{});var rvt=s(ome);Y8o=r(rvt,"yolos"),rvt.forEach(t),K8o=r(oSe," \u2014 "),fD=n(oSe,"A",{href:!0});var tvt=s(fD);Z8o=r(tvt,"YolosFeatureExtractor"),tvt.forEach(t),eMo=r(oSe," (YOLOS model)"),oSe.forEach(t),J.forEach(t),oMo=i(fa),T(zp.$$.fragment,fa),rMo=i(fa),T(Wp.$$.fragment,fa),fa.forEach(t),tMo=i(ml),Qp=n(ml,"DIV",{class:!0});var uJe=s(Qp);T(Iy.$$.fragment,uJe),aMo=i(uJe),rme=n(uJe,"P",{});var avt=s(rme);nMo=r(avt,"Register a new feature extractor for this class."),avt.forEach(t),uJe.forEach(t),ml.forEach(t),cUe=i(f),ed=n(f,"H2",{class:!0});var bJe=s(ed);Up=n(bJe,"A",{id:!0,class:!0,href:!0});var nvt=s(Up);tme=n(nvt,"SPAN",{});var svt=s(tme);T(Ny.$$.fragment,svt),svt.forEach(t),nvt.forEach(t),sMo=i(bJe),ame=n(bJe,"SPAN",{});var lvt=s(ame);lMo=r(lvt,"AutoProcessor"),lvt.forEach(t),bJe.forEach(t),fUe=i(f),ko=n(f,"DIV",{class:!0});var gl=s(ko);T(qy.$$.fragment,gl),iMo=i(gl),jy=n(gl,"P",{});var vJe=s(jy);dMo=r(vJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mD=n(vJe,"A",{href:!0});var ivt=s(mD);cMo=r(ivt,"AutoProcessor.from_pretrained()"),ivt.forEach(t),fMo=r(vJe," class method."),vJe.forEach(t),mMo=i(gl),Dy=n(gl,"P",{});var FJe=s(Dy);gMo=r(FJe,"This class cannot be instantiated directly using "),nme=n(FJe,"CODE",{});var dvt=s(nme);hMo=r(dvt,"__init__()"),dvt.forEach(t),pMo=r(FJe," (throws an error)."),FJe.forEach(t),_Mo=i(gl),Ye=n(gl,"DIV",{class:!0});var ma=s(Ye);T(Gy.$$.fragment,ma),uMo=i(ma),sme=n(ma,"P",{});var cvt=s(sme);bMo=r(cvt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cvt.forEach(t),vMo=i(ma),od=n(ma,"P",{});var zae=s(od);FMo=r(zae,"The processor class to instantiate is selected based on the "),lme=n(zae,"CODE",{});var fvt=s(lme);TMo=r(fvt,"model_type"),fvt.forEach(t),MMo=r(zae,` property of the config object (either
passed as an argument or loaded from `),ime=n(zae,"CODE",{});var mvt=s(ime);EMo=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),CMo=r(zae," if possible):"),zae.forEach(t),wMo=i(ma),ie=n(ma,"UL",{});var ge=s(ie);Hp=n(ge,"LI",{});var rSe=s(Hp);dme=n(rSe,"STRONG",{});var gvt=s(dme);AMo=r(gvt,"clip"),gvt.forEach(t),LMo=r(rSe," \u2014 "),gD=n(rSe,"A",{href:!0});var hvt=s(gD);yMo=r(hvt,"CLIPProcessor"),hvt.forEach(t),xMo=r(rSe," (CLIP model)"),rSe.forEach(t),$Mo=i(ge),Jp=n(ge,"LI",{});var tSe=s(Jp);cme=n(tSe,"STRONG",{});var pvt=s(cme);kMo=r(pvt,"donut"),pvt.forEach(t),SMo=r(tSe," \u2014 "),hD=n(tSe,"A",{href:!0});var _vt=s(hD);RMo=r(_vt,"DonutProcessor"),_vt.forEach(t),PMo=r(tSe," (Donut model)"),tSe.forEach(t),BMo=i(ge),Yp=n(ge,"LI",{});var aSe=s(Yp);fme=n(aSe,"STRONG",{});var uvt=s(fme);IMo=r(uvt,"flava"),uvt.forEach(t),NMo=r(aSe," \u2014 "),pD=n(aSe,"A",{href:!0});var bvt=s(pD);qMo=r(bvt,"FlavaProcessor"),bvt.forEach(t),jMo=r(aSe," (FLAVA model)"),aSe.forEach(t),DMo=i(ge),Kp=n(ge,"LI",{});var nSe=s(Kp);mme=n(nSe,"STRONG",{});var vvt=s(mme);GMo=r(vvt,"groupvit"),vvt.forEach(t),OMo=r(nSe," \u2014 "),_D=n(nSe,"A",{href:!0});var Fvt=s(_D);VMo=r(Fvt,"CLIPProcessor"),Fvt.forEach(t),XMo=r(nSe," (GroupViT model)"),nSe.forEach(t),zMo=i(ge),Zp=n(ge,"LI",{});var sSe=s(Zp);gme=n(sSe,"STRONG",{});var Tvt=s(gme);WMo=r(Tvt,"layoutlmv2"),Tvt.forEach(t),QMo=r(sSe," \u2014 "),uD=n(sSe,"A",{href:!0});var Mvt=s(uD);UMo=r(Mvt,"LayoutLMv2Processor"),Mvt.forEach(t),HMo=r(sSe," (LayoutLMv2 model)"),sSe.forEach(t),JMo=i(ge),e_=n(ge,"LI",{});var lSe=s(e_);hme=n(lSe,"STRONG",{});var Evt=s(hme);YMo=r(Evt,"layoutlmv3"),Evt.forEach(t),KMo=r(lSe," \u2014 "),bD=n(lSe,"A",{href:!0});var Cvt=s(bD);ZMo=r(Cvt,"LayoutLMv3Processor"),Cvt.forEach(t),eEo=r(lSe," (LayoutLMv3 model)"),lSe.forEach(t),oEo=i(ge),o_=n(ge,"LI",{});var iSe=s(o_);pme=n(iSe,"STRONG",{});var wvt=s(pme);rEo=r(wvt,"layoutxlm"),wvt.forEach(t),tEo=r(iSe," \u2014 "),vD=n(iSe,"A",{href:!0});var Avt=s(vD);aEo=r(Avt,"LayoutXLMProcessor"),Avt.forEach(t),nEo=r(iSe," (LayoutXLM model)"),iSe.forEach(t),sEo=i(ge),r_=n(ge,"LI",{});var dSe=s(r_);_me=n(dSe,"STRONG",{});var Lvt=s(_me);lEo=r(Lvt,"owlvit"),Lvt.forEach(t),iEo=r(dSe," \u2014 "),FD=n(dSe,"A",{href:!0});var yvt=s(FD);dEo=r(yvt,"OwlViTProcessor"),yvt.forEach(t),cEo=r(dSe," (OWL-ViT model)"),dSe.forEach(t),fEo=i(ge),t_=n(ge,"LI",{});var cSe=s(t_);ume=n(cSe,"STRONG",{});var xvt=s(ume);mEo=r(xvt,"sew"),xvt.forEach(t),gEo=r(cSe," \u2014 "),TD=n(cSe,"A",{href:!0});var $vt=s(TD);hEo=r($vt,"Wav2Vec2Processor"),$vt.forEach(t),pEo=r(cSe," (SEW model)"),cSe.forEach(t),_Eo=i(ge),a_=n(ge,"LI",{});var fSe=s(a_);bme=n(fSe,"STRONG",{});var kvt=s(bme);uEo=r(kvt,"sew-d"),kvt.forEach(t),bEo=r(fSe," \u2014 "),MD=n(fSe,"A",{href:!0});var Svt=s(MD);vEo=r(Svt,"Wav2Vec2Processor"),Svt.forEach(t),FEo=r(fSe," (SEW-D model)"),fSe.forEach(t),TEo=i(ge),n_=n(ge,"LI",{});var mSe=s(n_);vme=n(mSe,"STRONG",{});var Rvt=s(vme);MEo=r(Rvt,"speech_to_text"),Rvt.forEach(t),EEo=r(mSe," \u2014 "),ED=n(mSe,"A",{href:!0});var Pvt=s(ED);CEo=r(Pvt,"Speech2TextProcessor"),Pvt.forEach(t),wEo=r(mSe," (Speech2Text model)"),mSe.forEach(t),AEo=i(ge),s_=n(ge,"LI",{});var gSe=s(s_);Fme=n(gSe,"STRONG",{});var Bvt=s(Fme);LEo=r(Bvt,"speech_to_text_2"),Bvt.forEach(t),yEo=r(gSe," \u2014 "),CD=n(gSe,"A",{href:!0});var Ivt=s(CD);xEo=r(Ivt,"Speech2Text2Processor"),Ivt.forEach(t),$Eo=r(gSe," (Speech2Text2 model)"),gSe.forEach(t),kEo=i(ge),l_=n(ge,"LI",{});var hSe=s(l_);Tme=n(hSe,"STRONG",{});var Nvt=s(Tme);SEo=r(Nvt,"trocr"),Nvt.forEach(t),REo=r(hSe," \u2014 "),wD=n(hSe,"A",{href:!0});var qvt=s(wD);PEo=r(qvt,"TrOCRProcessor"),qvt.forEach(t),BEo=r(hSe," (TrOCR model)"),hSe.forEach(t),IEo=i(ge),i_=n(ge,"LI",{});var pSe=s(i_);Mme=n(pSe,"STRONG",{});var jvt=s(Mme);NEo=r(jvt,"unispeech"),jvt.forEach(t),qEo=r(pSe," \u2014 "),AD=n(pSe,"A",{href:!0});var Dvt=s(AD);jEo=r(Dvt,"Wav2Vec2Processor"),Dvt.forEach(t),DEo=r(pSe," (UniSpeech model)"),pSe.forEach(t),GEo=i(ge),d_=n(ge,"LI",{});var _Se=s(d_);Eme=n(_Se,"STRONG",{});var Gvt=s(Eme);OEo=r(Gvt,"unispeech-sat"),Gvt.forEach(t),VEo=r(_Se," \u2014 "),LD=n(_Se,"A",{href:!0});var Ovt=s(LD);XEo=r(Ovt,"Wav2Vec2Processor"),Ovt.forEach(t),zEo=r(_Se," (UniSpeechSat model)"),_Se.forEach(t),WEo=i(ge),c_=n(ge,"LI",{});var uSe=s(c_);Cme=n(uSe,"STRONG",{});var Vvt=s(Cme);QEo=r(Vvt,"vilt"),Vvt.forEach(t),UEo=r(uSe," \u2014 "),yD=n(uSe,"A",{href:!0});var Xvt=s(yD);HEo=r(Xvt,"ViltProcessor"),Xvt.forEach(t),JEo=r(uSe," (ViLT model)"),uSe.forEach(t),YEo=i(ge),f_=n(ge,"LI",{});var bSe=s(f_);wme=n(bSe,"STRONG",{});var zvt=s(wme);KEo=r(zvt,"vision-text-dual-encoder"),zvt.forEach(t),ZEo=r(bSe," \u2014 "),xD=n(bSe,"A",{href:!0});var Wvt=s(xD);e4o=r(Wvt,"VisionTextDualEncoderProcessor"),Wvt.forEach(t),o4o=r(bSe," (VisionTextDualEncoder model)"),bSe.forEach(t),r4o=i(ge),m_=n(ge,"LI",{});var vSe=s(m_);Ame=n(vSe,"STRONG",{});var Qvt=s(Ame);t4o=r(Qvt,"wav2vec2"),Qvt.forEach(t),a4o=r(vSe," \u2014 "),$D=n(vSe,"A",{href:!0});var Uvt=s($D);n4o=r(Uvt,"Wav2Vec2Processor"),Uvt.forEach(t),s4o=r(vSe," (Wav2Vec2 model)"),vSe.forEach(t),l4o=i(ge),g_=n(ge,"LI",{});var FSe=s(g_);Lme=n(FSe,"STRONG",{});var Hvt=s(Lme);i4o=r(Hvt,"wav2vec2-conformer"),Hvt.forEach(t),d4o=r(FSe," \u2014 "),kD=n(FSe,"A",{href:!0});var Jvt=s(kD);c4o=r(Jvt,"Wav2Vec2Processor"),Jvt.forEach(t),f4o=r(FSe," (Wav2Vec2-Conformer model)"),FSe.forEach(t),m4o=i(ge),h_=n(ge,"LI",{});var TSe=s(h_);yme=n(TSe,"STRONG",{});var Yvt=s(yme);g4o=r(Yvt,"wavlm"),Yvt.forEach(t),h4o=r(TSe," \u2014 "),SD=n(TSe,"A",{href:!0});var Kvt=s(SD);p4o=r(Kvt,"Wav2Vec2Processor"),Kvt.forEach(t),_4o=r(TSe," (WavLM model)"),TSe.forEach(t),ge.forEach(t),u4o=i(ma),T(p_.$$.fragment,ma),b4o=i(ma),T(__.$$.fragment,ma),ma.forEach(t),v4o=i(gl),u_=n(gl,"DIV",{class:!0});var TJe=s(u_);T(Oy.$$.fragment,TJe),F4o=i(TJe),xme=n(TJe,"P",{});var Zvt=s(xme);T4o=r(Zvt,"Register a new processor for this class."),Zvt.forEach(t),TJe.forEach(t),gl.forEach(t),mUe=i(f),rd=n(f,"H2",{class:!0});var MJe=s(rd);b_=n(MJe,"A",{id:!0,class:!0,href:!0});var eFt=s(b_);$me=n(eFt,"SPAN",{});var oFt=s($me);T(Vy.$$.fragment,oFt),oFt.forEach(t),eFt.forEach(t),M4o=i(MJe),kme=n(MJe,"SPAN",{});var rFt=s(kme);E4o=r(rFt,"AutoModel"),rFt.forEach(t),MJe.forEach(t),gUe=i(f),So=n(f,"DIV",{class:!0});var hl=s(So);T(Xy.$$.fragment,hl),C4o=i(hl),td=n(hl,"P",{});var Wae=s(td);w4o=r(Wae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RD=n(Wae,"A",{href:!0});var tFt=s(RD);A4o=r(tFt,"from_pretrained()"),tFt.forEach(t),L4o=r(Wae," class method or the "),PD=n(Wae,"A",{href:!0});var aFt=s(PD);y4o=r(aFt,"from_config()"),aFt.forEach(t),x4o=r(Wae,` class
method.`),Wae.forEach(t),$4o=i(hl),zy=n(hl,"P",{});var EJe=s(zy);k4o=r(EJe,"This class cannot be instantiated directly using "),Sme=n(EJe,"CODE",{});var nFt=s(Sme);S4o=r(nFt,"__init__()"),nFt.forEach(t),R4o=r(EJe," (throws an error)."),EJe.forEach(t),P4o=i(hl),mt=n(hl,"DIV",{class:!0});var _7=s(mt);T(Wy.$$.fragment,_7),B4o=i(_7),Rme=n(_7,"P",{});var sFt=s(Rme);I4o=r(sFt,"Instantiates one of the base model classes of the library from a configuration."),sFt.forEach(t),N4o=i(_7),ad=n(_7,"P",{});var Qae=s(ad);q4o=r(Qae,`Note:
Loading a model from its configuration file does `),Pme=n(Qae,"STRONG",{});var lFt=s(Pme);j4o=r(lFt,"not"),lFt.forEach(t),D4o=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(Qae,"A",{href:!0});var iFt=s(BD);G4o=r(iFt,"from_pretrained()"),iFt.forEach(t),O4o=r(Qae," to load the model weights."),Qae.forEach(t),V4o=i(_7),T(v_.$$.fragment,_7),_7.forEach(t),X4o=i(hl),Ke=n(hl,"DIV",{class:!0});var ga=s(Ke);T(Qy.$$.fragment,ga),z4o=i(ga),Bme=n(ga,"P",{});var dFt=s(Bme);W4o=r(dFt,"Instantiate one of the base model classes of the library from a pretrained model."),dFt.forEach(t),Q4o=i(ga),Va=n(ga,"P",{});var u7=s(Va);U4o=r(u7,"The model class to instantiate is selected based on the "),Ime=n(u7,"CODE",{});var cFt=s(Ime);H4o=r(cFt,"model_type"),cFt.forEach(t),J4o=r(u7,` property of the config object (either
passed as an argument or loaded from `),Nme=n(u7,"CODE",{});var fFt=s(Nme);Y4o=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),K4o=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(u7,"CODE",{});var mFt=s(qme);Z4o=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),eCo=r(u7,":"),u7.forEach(t),oCo=i(ga),y=n(ga,"UL",{});var x=s(y);F_=n(x,"LI",{});var MSe=s(F_);jme=n(MSe,"STRONG",{});var gFt=s(jme);rCo=r(gFt,"albert"),gFt.forEach(t),tCo=r(MSe," \u2014 "),ID=n(MSe,"A",{href:!0});var hFt=s(ID);aCo=r(hFt,"AlbertModel"),hFt.forEach(t),nCo=r(MSe," (ALBERT model)"),MSe.forEach(t),sCo=i(x),T_=n(x,"LI",{});var ESe=s(T_);Dme=n(ESe,"STRONG",{});var pFt=s(Dme);lCo=r(pFt,"bart"),pFt.forEach(t),iCo=r(ESe," \u2014 "),ND=n(ESe,"A",{href:!0});var _Ft=s(ND);dCo=r(_Ft,"BartModel"),_Ft.forEach(t),cCo=r(ESe," (BART model)"),ESe.forEach(t),fCo=i(x),M_=n(x,"LI",{});var CSe=s(M_);Gme=n(CSe,"STRONG",{});var uFt=s(Gme);mCo=r(uFt,"beit"),uFt.forEach(t),gCo=r(CSe," \u2014 "),qD=n(CSe,"A",{href:!0});var bFt=s(qD);hCo=r(bFt,"BeitModel"),bFt.forEach(t),pCo=r(CSe," (BEiT model)"),CSe.forEach(t),_Co=i(x),E_=n(x,"LI",{});var wSe=s(E_);Ome=n(wSe,"STRONG",{});var vFt=s(Ome);uCo=r(vFt,"bert"),vFt.forEach(t),bCo=r(wSe," \u2014 "),jD=n(wSe,"A",{href:!0});var FFt=s(jD);vCo=r(FFt,"BertModel"),FFt.forEach(t),FCo=r(wSe," (BERT model)"),wSe.forEach(t),TCo=i(x),C_=n(x,"LI",{});var ASe=s(C_);Vme=n(ASe,"STRONG",{});var TFt=s(Vme);MCo=r(TFt,"bert-generation"),TFt.forEach(t),ECo=r(ASe," \u2014 "),DD=n(ASe,"A",{href:!0});var MFt=s(DD);CCo=r(MFt,"BertGenerationEncoder"),MFt.forEach(t),wCo=r(ASe," (Bert Generation model)"),ASe.forEach(t),ACo=i(x),w_=n(x,"LI",{});var LSe=s(w_);Xme=n(LSe,"STRONG",{});var EFt=s(Xme);LCo=r(EFt,"big_bird"),EFt.forEach(t),yCo=r(LSe," \u2014 "),GD=n(LSe,"A",{href:!0});var CFt=s(GD);xCo=r(CFt,"BigBirdModel"),CFt.forEach(t),$Co=r(LSe," (BigBird model)"),LSe.forEach(t),kCo=i(x),A_=n(x,"LI",{});var ySe=s(A_);zme=n(ySe,"STRONG",{});var wFt=s(zme);SCo=r(wFt,"bigbird_pegasus"),wFt.forEach(t),RCo=r(ySe," \u2014 "),OD=n(ySe,"A",{href:!0});var AFt=s(OD);PCo=r(AFt,"BigBirdPegasusModel"),AFt.forEach(t),BCo=r(ySe," (BigBird-Pegasus model)"),ySe.forEach(t),ICo=i(x),L_=n(x,"LI",{});var xSe=s(L_);Wme=n(xSe,"STRONG",{});var LFt=s(Wme);NCo=r(LFt,"blenderbot"),LFt.forEach(t),qCo=r(xSe," \u2014 "),VD=n(xSe,"A",{href:!0});var yFt=s(VD);jCo=r(yFt,"BlenderbotModel"),yFt.forEach(t),DCo=r(xSe," (Blenderbot model)"),xSe.forEach(t),GCo=i(x),y_=n(x,"LI",{});var $Se=s(y_);Qme=n($Se,"STRONG",{});var xFt=s(Qme);OCo=r(xFt,"blenderbot-small"),xFt.forEach(t),VCo=r($Se," \u2014 "),XD=n($Se,"A",{href:!0});var $Ft=s(XD);XCo=r($Ft,"BlenderbotSmallModel"),$Ft.forEach(t),zCo=r($Se," (BlenderbotSmall model)"),$Se.forEach(t),WCo=i(x),x_=n(x,"LI",{});var kSe=s(x_);Ume=n(kSe,"STRONG",{});var kFt=s(Ume);QCo=r(kFt,"bloom"),kFt.forEach(t),UCo=r(kSe," \u2014 "),zD=n(kSe,"A",{href:!0});var SFt=s(zD);HCo=r(SFt,"BloomModel"),SFt.forEach(t),JCo=r(kSe," (BLOOM model)"),kSe.forEach(t),YCo=i(x),$_=n(x,"LI",{});var SSe=s($_);Hme=n(SSe,"STRONG",{});var RFt=s(Hme);KCo=r(RFt,"camembert"),RFt.forEach(t),ZCo=r(SSe," \u2014 "),WD=n(SSe,"A",{href:!0});var PFt=s(WD);e3o=r(PFt,"CamembertModel"),PFt.forEach(t),o3o=r(SSe," (CamemBERT model)"),SSe.forEach(t),r3o=i(x),k_=n(x,"LI",{});var RSe=s(k_);Jme=n(RSe,"STRONG",{});var BFt=s(Jme);t3o=r(BFt,"canine"),BFt.forEach(t),a3o=r(RSe," \u2014 "),QD=n(RSe,"A",{href:!0});var IFt=s(QD);n3o=r(IFt,"CanineModel"),IFt.forEach(t),s3o=r(RSe," (CANINE model)"),RSe.forEach(t),l3o=i(x),S_=n(x,"LI",{});var PSe=s(S_);Yme=n(PSe,"STRONG",{});var NFt=s(Yme);i3o=r(NFt,"clip"),NFt.forEach(t),d3o=r(PSe," \u2014 "),UD=n(PSe,"A",{href:!0});var qFt=s(UD);c3o=r(qFt,"CLIPModel"),qFt.forEach(t),f3o=r(PSe," (CLIP model)"),PSe.forEach(t),m3o=i(x),R_=n(x,"LI",{});var BSe=s(R_);Kme=n(BSe,"STRONG",{});var jFt=s(Kme);g3o=r(jFt,"codegen"),jFt.forEach(t),h3o=r(BSe," \u2014 "),HD=n(BSe,"A",{href:!0});var DFt=s(HD);p3o=r(DFt,"CodeGenModel"),DFt.forEach(t),_3o=r(BSe," (CodeGen model)"),BSe.forEach(t),u3o=i(x),P_=n(x,"LI",{});var ISe=s(P_);Zme=n(ISe,"STRONG",{});var GFt=s(Zme);b3o=r(GFt,"convbert"),GFt.forEach(t),v3o=r(ISe," \u2014 "),JD=n(ISe,"A",{href:!0});var OFt=s(JD);F3o=r(OFt,"ConvBertModel"),OFt.forEach(t),T3o=r(ISe," (ConvBERT model)"),ISe.forEach(t),M3o=i(x),B_=n(x,"LI",{});var NSe=s(B_);ege=n(NSe,"STRONG",{});var VFt=s(ege);E3o=r(VFt,"convnext"),VFt.forEach(t),C3o=r(NSe," \u2014 "),YD=n(NSe,"A",{href:!0});var XFt=s(YD);w3o=r(XFt,"ConvNextModel"),XFt.forEach(t),A3o=r(NSe," (ConvNeXT model)"),NSe.forEach(t),L3o=i(x),I_=n(x,"LI",{});var qSe=s(I_);oge=n(qSe,"STRONG",{});var zFt=s(oge);y3o=r(zFt,"ctrl"),zFt.forEach(t),x3o=r(qSe," \u2014 "),KD=n(qSe,"A",{href:!0});var WFt=s(KD);$3o=r(WFt,"CTRLModel"),WFt.forEach(t),k3o=r(qSe," (CTRL model)"),qSe.forEach(t),S3o=i(x),N_=n(x,"LI",{});var jSe=s(N_);rge=n(jSe,"STRONG",{});var QFt=s(rge);R3o=r(QFt,"cvt"),QFt.forEach(t),P3o=r(jSe," \u2014 "),ZD=n(jSe,"A",{href:!0});var UFt=s(ZD);B3o=r(UFt,"CvtModel"),UFt.forEach(t),I3o=r(jSe," (CvT model)"),jSe.forEach(t),N3o=i(x),q_=n(x,"LI",{});var DSe=s(q_);tge=n(DSe,"STRONG",{});var HFt=s(tge);q3o=r(HFt,"data2vec-audio"),HFt.forEach(t),j3o=r(DSe," \u2014 "),eG=n(DSe,"A",{href:!0});var JFt=s(eG);D3o=r(JFt,"Data2VecAudioModel"),JFt.forEach(t),G3o=r(DSe," (Data2VecAudio model)"),DSe.forEach(t),O3o=i(x),j_=n(x,"LI",{});var GSe=s(j_);age=n(GSe,"STRONG",{});var YFt=s(age);V3o=r(YFt,"data2vec-text"),YFt.forEach(t),X3o=r(GSe," \u2014 "),oG=n(GSe,"A",{href:!0});var KFt=s(oG);z3o=r(KFt,"Data2VecTextModel"),KFt.forEach(t),W3o=r(GSe," (Data2VecText model)"),GSe.forEach(t),Q3o=i(x),D_=n(x,"LI",{});var OSe=s(D_);nge=n(OSe,"STRONG",{});var ZFt=s(nge);U3o=r(ZFt,"data2vec-vision"),ZFt.forEach(t),H3o=r(OSe," \u2014 "),rG=n(OSe,"A",{href:!0});var eTt=s(rG);J3o=r(eTt,"Data2VecVisionModel"),eTt.forEach(t),Y3o=r(OSe," (Data2VecVision model)"),OSe.forEach(t),K3o=i(x),G_=n(x,"LI",{});var VSe=s(G_);sge=n(VSe,"STRONG",{});var oTt=s(sge);Z3o=r(oTt,"deberta"),oTt.forEach(t),e0o=r(VSe," \u2014 "),tG=n(VSe,"A",{href:!0});var rTt=s(tG);o0o=r(rTt,"DebertaModel"),rTt.forEach(t),r0o=r(VSe," (DeBERTa model)"),VSe.forEach(t),t0o=i(x),O_=n(x,"LI",{});var XSe=s(O_);lge=n(XSe,"STRONG",{});var tTt=s(lge);a0o=r(tTt,"deberta-v2"),tTt.forEach(t),n0o=r(XSe," \u2014 "),aG=n(XSe,"A",{href:!0});var aTt=s(aG);s0o=r(aTt,"DebertaV2Model"),aTt.forEach(t),l0o=r(XSe," (DeBERTa-v2 model)"),XSe.forEach(t),i0o=i(x),V_=n(x,"LI",{});var zSe=s(V_);ige=n(zSe,"STRONG",{});var nTt=s(ige);d0o=r(nTt,"decision_transformer"),nTt.forEach(t),c0o=r(zSe," \u2014 "),nG=n(zSe,"A",{href:!0});var sTt=s(nG);f0o=r(sTt,"DecisionTransformerModel"),sTt.forEach(t),m0o=r(zSe," (Decision Transformer model)"),zSe.forEach(t),g0o=i(x),X_=n(x,"LI",{});var WSe=s(X_);dge=n(WSe,"STRONG",{});var lTt=s(dge);h0o=r(lTt,"deit"),lTt.forEach(t),p0o=r(WSe," \u2014 "),sG=n(WSe,"A",{href:!0});var iTt=s(sG);_0o=r(iTt,"DeiTModel"),iTt.forEach(t),u0o=r(WSe," (DeiT model)"),WSe.forEach(t),b0o=i(x),z_=n(x,"LI",{});var QSe=s(z_);cge=n(QSe,"STRONG",{});var dTt=s(cge);v0o=r(dTt,"detr"),dTt.forEach(t),F0o=r(QSe," \u2014 "),lG=n(QSe,"A",{href:!0});var cTt=s(lG);T0o=r(cTt,"DetrModel"),cTt.forEach(t),M0o=r(QSe," (DETR model)"),QSe.forEach(t),E0o=i(x),W_=n(x,"LI",{});var USe=s(W_);fge=n(USe,"STRONG",{});var fTt=s(fge);C0o=r(fTt,"distilbert"),fTt.forEach(t),w0o=r(USe," \u2014 "),iG=n(USe,"A",{href:!0});var mTt=s(iG);A0o=r(mTt,"DistilBertModel"),mTt.forEach(t),L0o=r(USe," (DistilBERT model)"),USe.forEach(t),y0o=i(x),Q_=n(x,"LI",{});var HSe=s(Q_);mge=n(HSe,"STRONG",{});var gTt=s(mge);x0o=r(gTt,"donut-swin"),gTt.forEach(t),$0o=r(HSe," \u2014 "),dG=n(HSe,"A",{href:!0});var hTt=s(dG);k0o=r(hTt,"DonutSwinModel"),hTt.forEach(t),S0o=r(HSe," (DonutSwin model)"),HSe.forEach(t),R0o=i(x),U_=n(x,"LI",{});var JSe=s(U_);gge=n(JSe,"STRONG",{});var pTt=s(gge);P0o=r(pTt,"dpr"),pTt.forEach(t),B0o=r(JSe," \u2014 "),cG=n(JSe,"A",{href:!0});var _Tt=s(cG);I0o=r(_Tt,"DPRQuestionEncoder"),_Tt.forEach(t),N0o=r(JSe," (DPR model)"),JSe.forEach(t),q0o=i(x),H_=n(x,"LI",{});var YSe=s(H_);hge=n(YSe,"STRONG",{});var uTt=s(hge);j0o=r(uTt,"dpt"),uTt.forEach(t),D0o=r(YSe," \u2014 "),fG=n(YSe,"A",{href:!0});var bTt=s(fG);G0o=r(bTt,"DPTModel"),bTt.forEach(t),O0o=r(YSe," (DPT model)"),YSe.forEach(t),V0o=i(x),J_=n(x,"LI",{});var KSe=s(J_);pge=n(KSe,"STRONG",{});var vTt=s(pge);X0o=r(vTt,"electra"),vTt.forEach(t),z0o=r(KSe," \u2014 "),mG=n(KSe,"A",{href:!0});var FTt=s(mG);W0o=r(FTt,"ElectraModel"),FTt.forEach(t),Q0o=r(KSe," (ELECTRA model)"),KSe.forEach(t),U0o=i(x),Y_=n(x,"LI",{});var ZSe=s(Y_);_ge=n(ZSe,"STRONG",{});var TTt=s(_ge);H0o=r(TTt,"flaubert"),TTt.forEach(t),J0o=r(ZSe," \u2014 "),gG=n(ZSe,"A",{href:!0});var MTt=s(gG);Y0o=r(MTt,"FlaubertModel"),MTt.forEach(t),K0o=r(ZSe," (FlauBERT model)"),ZSe.forEach(t),Z0o=i(x),K_=n(x,"LI",{});var eRe=s(K_);uge=n(eRe,"STRONG",{});var ETt=s(uge);ewo=r(ETt,"flava"),ETt.forEach(t),owo=r(eRe," \u2014 "),hG=n(eRe,"A",{href:!0});var CTt=s(hG);rwo=r(CTt,"FlavaModel"),CTt.forEach(t),two=r(eRe," (FLAVA model)"),eRe.forEach(t),awo=i(x),Z_=n(x,"LI",{});var oRe=s(Z_);bge=n(oRe,"STRONG",{});var wTt=s(bge);nwo=r(wTt,"fnet"),wTt.forEach(t),swo=r(oRe," \u2014 "),pG=n(oRe,"A",{href:!0});var ATt=s(pG);lwo=r(ATt,"FNetModel"),ATt.forEach(t),iwo=r(oRe," (FNet model)"),oRe.forEach(t),dwo=i(x),eu=n(x,"LI",{});var rRe=s(eu);vge=n(rRe,"STRONG",{});var LTt=s(vge);cwo=r(LTt,"fsmt"),LTt.forEach(t),fwo=r(rRe," \u2014 "),_G=n(rRe,"A",{href:!0});var yTt=s(_G);mwo=r(yTt,"FSMTModel"),yTt.forEach(t),gwo=r(rRe," (FairSeq Machine-Translation model)"),rRe.forEach(t),hwo=i(x),nl=n(x,"LI",{});var oP=s(nl);Fge=n(oP,"STRONG",{});var xTt=s(Fge);pwo=r(xTt,"funnel"),xTt.forEach(t),_wo=r(oP," \u2014 "),uG=n(oP,"A",{href:!0});var $Tt=s(uG);uwo=r($Tt,"FunnelModel"),$Tt.forEach(t),bwo=r(oP," or "),bG=n(oP,"A",{href:!0});var kTt=s(bG);vwo=r(kTt,"FunnelBaseModel"),kTt.forEach(t),Fwo=r(oP," (Funnel Transformer model)"),oP.forEach(t),Two=i(x),ou=n(x,"LI",{});var tRe=s(ou);Tge=n(tRe,"STRONG",{});var STt=s(Tge);Mwo=r(STt,"glpn"),STt.forEach(t),Ewo=r(tRe," \u2014 "),vG=n(tRe,"A",{href:!0});var RTt=s(vG);Cwo=r(RTt,"GLPNModel"),RTt.forEach(t),wwo=r(tRe," (GLPN model)"),tRe.forEach(t),Awo=i(x),ru=n(x,"LI",{});var aRe=s(ru);Mge=n(aRe,"STRONG",{});var PTt=s(Mge);Lwo=r(PTt,"gpt2"),PTt.forEach(t),ywo=r(aRe," \u2014 "),FG=n(aRe,"A",{href:!0});var BTt=s(FG);xwo=r(BTt,"GPT2Model"),BTt.forEach(t),$wo=r(aRe," (OpenAI GPT-2 model)"),aRe.forEach(t),kwo=i(x),tu=n(x,"LI",{});var nRe=s(tu);Ege=n(nRe,"STRONG",{});var ITt=s(Ege);Swo=r(ITt,"gpt_neo"),ITt.forEach(t),Rwo=r(nRe," \u2014 "),TG=n(nRe,"A",{href:!0});var NTt=s(TG);Pwo=r(NTt,"GPTNeoModel"),NTt.forEach(t),Bwo=r(nRe," (GPT Neo model)"),nRe.forEach(t),Iwo=i(x),au=n(x,"LI",{});var sRe=s(au);Cge=n(sRe,"STRONG",{});var qTt=s(Cge);Nwo=r(qTt,"gpt_neox"),qTt.forEach(t),qwo=r(sRe," \u2014 "),MG=n(sRe,"A",{href:!0});var jTt=s(MG);jwo=r(jTt,"GPTNeoXModel"),jTt.forEach(t),Dwo=r(sRe," (GPT NeoX model)"),sRe.forEach(t),Gwo=i(x),nu=n(x,"LI",{});var lRe=s(nu);wge=n(lRe,"STRONG",{});var DTt=s(wge);Owo=r(DTt,"gptj"),DTt.forEach(t),Vwo=r(lRe," \u2014 "),EG=n(lRe,"A",{href:!0});var GTt=s(EG);Xwo=r(GTt,"GPTJModel"),GTt.forEach(t),zwo=r(lRe," (GPT-J model)"),lRe.forEach(t),Wwo=i(x),su=n(x,"LI",{});var iRe=s(su);Age=n(iRe,"STRONG",{});var OTt=s(Age);Qwo=r(OTt,"groupvit"),OTt.forEach(t),Uwo=r(iRe," \u2014 "),CG=n(iRe,"A",{href:!0});var VTt=s(CG);Hwo=r(VTt,"GroupViTModel"),VTt.forEach(t),Jwo=r(iRe," (GroupViT model)"),iRe.forEach(t),Ywo=i(x),lu=n(x,"LI",{});var dRe=s(lu);Lge=n(dRe,"STRONG",{});var XTt=s(Lge);Kwo=r(XTt,"hubert"),XTt.forEach(t),Zwo=r(dRe," \u2014 "),wG=n(dRe,"A",{href:!0});var zTt=s(wG);e6o=r(zTt,"HubertModel"),zTt.forEach(t),o6o=r(dRe," (Hubert model)"),dRe.forEach(t),r6o=i(x),iu=n(x,"LI",{});var cRe=s(iu);yge=n(cRe,"STRONG",{});var WTt=s(yge);t6o=r(WTt,"ibert"),WTt.forEach(t),a6o=r(cRe," \u2014 "),AG=n(cRe,"A",{href:!0});var QTt=s(AG);n6o=r(QTt,"IBertModel"),QTt.forEach(t),s6o=r(cRe," (I-BERT model)"),cRe.forEach(t),l6o=i(x),du=n(x,"LI",{});var fRe=s(du);xge=n(fRe,"STRONG",{});var UTt=s(xge);i6o=r(UTt,"imagegpt"),UTt.forEach(t),d6o=r(fRe," \u2014 "),LG=n(fRe,"A",{href:!0});var HTt=s(LG);c6o=r(HTt,"ImageGPTModel"),HTt.forEach(t),f6o=r(fRe," (ImageGPT model)"),fRe.forEach(t),m6o=i(x),cu=n(x,"LI",{});var mRe=s(cu);$ge=n(mRe,"STRONG",{});var JTt=s($ge);g6o=r(JTt,"layoutlm"),JTt.forEach(t),h6o=r(mRe," \u2014 "),yG=n(mRe,"A",{href:!0});var YTt=s(yG);p6o=r(YTt,"LayoutLMModel"),YTt.forEach(t),_6o=r(mRe," (LayoutLM model)"),mRe.forEach(t),u6o=i(x),fu=n(x,"LI",{});var gRe=s(fu);kge=n(gRe,"STRONG",{});var KTt=s(kge);b6o=r(KTt,"layoutlmv2"),KTt.forEach(t),v6o=r(gRe," \u2014 "),xG=n(gRe,"A",{href:!0});var ZTt=s(xG);F6o=r(ZTt,"LayoutLMv2Model"),ZTt.forEach(t),T6o=r(gRe," (LayoutLMv2 model)"),gRe.forEach(t),M6o=i(x),mu=n(x,"LI",{});var hRe=s(mu);Sge=n(hRe,"STRONG",{});var e8t=s(Sge);E6o=r(e8t,"layoutlmv3"),e8t.forEach(t),C6o=r(hRe," \u2014 "),$G=n(hRe,"A",{href:!0});var o8t=s($G);w6o=r(o8t,"LayoutLMv3Model"),o8t.forEach(t),A6o=r(hRe," (LayoutLMv3 model)"),hRe.forEach(t),L6o=i(x),gu=n(x,"LI",{});var pRe=s(gu);Rge=n(pRe,"STRONG",{});var r8t=s(Rge);y6o=r(r8t,"led"),r8t.forEach(t),x6o=r(pRe," \u2014 "),kG=n(pRe,"A",{href:!0});var t8t=s(kG);$6o=r(t8t,"LEDModel"),t8t.forEach(t),k6o=r(pRe," (LED model)"),pRe.forEach(t),S6o=i(x),hu=n(x,"LI",{});var _Re=s(hu);Pge=n(_Re,"STRONG",{});var a8t=s(Pge);R6o=r(a8t,"levit"),a8t.forEach(t),P6o=r(_Re," \u2014 "),SG=n(_Re,"A",{href:!0});var n8t=s(SG);B6o=r(n8t,"LevitModel"),n8t.forEach(t),I6o=r(_Re," (LeViT model)"),_Re.forEach(t),N6o=i(x),pu=n(x,"LI",{});var uRe=s(pu);Bge=n(uRe,"STRONG",{});var s8t=s(Bge);q6o=r(s8t,"longformer"),s8t.forEach(t),j6o=r(uRe," \u2014 "),RG=n(uRe,"A",{href:!0});var l8t=s(RG);D6o=r(l8t,"LongformerModel"),l8t.forEach(t),G6o=r(uRe," (Longformer model)"),uRe.forEach(t),O6o=i(x),_u=n(x,"LI",{});var bRe=s(_u);Ige=n(bRe,"STRONG",{});var i8t=s(Ige);V6o=r(i8t,"longt5"),i8t.forEach(t),X6o=r(bRe," \u2014 "),PG=n(bRe,"A",{href:!0});var d8t=s(PG);z6o=r(d8t,"LongT5Model"),d8t.forEach(t),W6o=r(bRe," (LongT5 model)"),bRe.forEach(t),Q6o=i(x),uu=n(x,"LI",{});var vRe=s(uu);Nge=n(vRe,"STRONG",{});var c8t=s(Nge);U6o=r(c8t,"luke"),c8t.forEach(t),H6o=r(vRe," \u2014 "),BG=n(vRe,"A",{href:!0});var f8t=s(BG);J6o=r(f8t,"LukeModel"),f8t.forEach(t),Y6o=r(vRe," (LUKE model)"),vRe.forEach(t),K6o=i(x),bu=n(x,"LI",{});var FRe=s(bu);qge=n(FRe,"STRONG",{});var m8t=s(qge);Z6o=r(m8t,"lxmert"),m8t.forEach(t),eAo=r(FRe," \u2014 "),IG=n(FRe,"A",{href:!0});var g8t=s(IG);oAo=r(g8t,"LxmertModel"),g8t.forEach(t),rAo=r(FRe," (LXMERT model)"),FRe.forEach(t),tAo=i(x),vu=n(x,"LI",{});var TRe=s(vu);jge=n(TRe,"STRONG",{});var h8t=s(jge);aAo=r(h8t,"m2m_100"),h8t.forEach(t),nAo=r(TRe," \u2014 "),NG=n(TRe,"A",{href:!0});var p8t=s(NG);sAo=r(p8t,"M2M100Model"),p8t.forEach(t),lAo=r(TRe," (M2M100 model)"),TRe.forEach(t),iAo=i(x),Fu=n(x,"LI",{});var MRe=s(Fu);Dge=n(MRe,"STRONG",{});var _8t=s(Dge);dAo=r(_8t,"marian"),_8t.forEach(t),cAo=r(MRe," \u2014 "),qG=n(MRe,"A",{href:!0});var u8t=s(qG);fAo=r(u8t,"MarianModel"),u8t.forEach(t),mAo=r(MRe," (Marian model)"),MRe.forEach(t),gAo=i(x),Tu=n(x,"LI",{});var ERe=s(Tu);Gge=n(ERe,"STRONG",{});var b8t=s(Gge);hAo=r(b8t,"maskformer"),b8t.forEach(t),pAo=r(ERe," \u2014 "),jG=n(ERe,"A",{href:!0});var v8t=s(jG);_Ao=r(v8t,"MaskFormerModel"),v8t.forEach(t),uAo=r(ERe," (MaskFormer model)"),ERe.forEach(t),bAo=i(x),Mu=n(x,"LI",{});var CRe=s(Mu);Oge=n(CRe,"STRONG",{});var F8t=s(Oge);vAo=r(F8t,"mbart"),F8t.forEach(t),FAo=r(CRe," \u2014 "),DG=n(CRe,"A",{href:!0});var T8t=s(DG);TAo=r(T8t,"MBartModel"),T8t.forEach(t),MAo=r(CRe," (mBART model)"),CRe.forEach(t),EAo=i(x),Eu=n(x,"LI",{});var wRe=s(Eu);Vge=n(wRe,"STRONG",{});var M8t=s(Vge);CAo=r(M8t,"mctct"),M8t.forEach(t),wAo=r(wRe," \u2014 "),GG=n(wRe,"A",{href:!0});var E8t=s(GG);AAo=r(E8t,"MCTCTModel"),E8t.forEach(t),LAo=r(wRe," (M-CTC-T model)"),wRe.forEach(t),yAo=i(x),Cu=n(x,"LI",{});var ARe=s(Cu);Xge=n(ARe,"STRONG",{});var C8t=s(Xge);xAo=r(C8t,"megatron-bert"),C8t.forEach(t),$Ao=r(ARe," \u2014 "),OG=n(ARe,"A",{href:!0});var w8t=s(OG);kAo=r(w8t,"MegatronBertModel"),w8t.forEach(t),SAo=r(ARe," (Megatron-BERT model)"),ARe.forEach(t),RAo=i(x),wu=n(x,"LI",{});var LRe=s(wu);zge=n(LRe,"STRONG",{});var A8t=s(zge);PAo=r(A8t,"mobilebert"),A8t.forEach(t),BAo=r(LRe," \u2014 "),VG=n(LRe,"A",{href:!0});var L8t=s(VG);IAo=r(L8t,"MobileBertModel"),L8t.forEach(t),NAo=r(LRe," (MobileBERT model)"),LRe.forEach(t),qAo=i(x),Au=n(x,"LI",{});var yRe=s(Au);Wge=n(yRe,"STRONG",{});var y8t=s(Wge);jAo=r(y8t,"mobilevit"),y8t.forEach(t),DAo=r(yRe," \u2014 "),XG=n(yRe,"A",{href:!0});var x8t=s(XG);GAo=r(x8t,"MobileViTModel"),x8t.forEach(t),OAo=r(yRe," (MobileViT model)"),yRe.forEach(t),VAo=i(x),Lu=n(x,"LI",{});var xRe=s(Lu);Qge=n(xRe,"STRONG",{});var $8t=s(Qge);XAo=r($8t,"mpnet"),$8t.forEach(t),zAo=r(xRe," \u2014 "),zG=n(xRe,"A",{href:!0});var k8t=s(zG);WAo=r(k8t,"MPNetModel"),k8t.forEach(t),QAo=r(xRe," (MPNet model)"),xRe.forEach(t),UAo=i(x),yu=n(x,"LI",{});var $Re=s(yu);Uge=n($Re,"STRONG",{});var S8t=s(Uge);HAo=r(S8t,"mt5"),S8t.forEach(t),JAo=r($Re," \u2014 "),WG=n($Re,"A",{href:!0});var R8t=s(WG);YAo=r(R8t,"MT5Model"),R8t.forEach(t),KAo=r($Re," (MT5 model)"),$Re.forEach(t),ZAo=i(x),xu=n(x,"LI",{});var kRe=s(xu);Hge=n(kRe,"STRONG",{});var P8t=s(Hge);e7o=r(P8t,"mvp"),P8t.forEach(t),o7o=r(kRe," \u2014 "),QG=n(kRe,"A",{href:!0});var B8t=s(QG);r7o=r(B8t,"MvpModel"),B8t.forEach(t),t7o=r(kRe," (MVP model)"),kRe.forEach(t),a7o=i(x),$u=n(x,"LI",{});var SRe=s($u);Jge=n(SRe,"STRONG",{});var I8t=s(Jge);n7o=r(I8t,"nezha"),I8t.forEach(t),s7o=r(SRe," \u2014 "),UG=n(SRe,"A",{href:!0});var N8t=s(UG);l7o=r(N8t,"NezhaModel"),N8t.forEach(t),i7o=r(SRe," (Nezha model)"),SRe.forEach(t),d7o=i(x),ku=n(x,"LI",{});var RRe=s(ku);Yge=n(RRe,"STRONG",{});var q8t=s(Yge);c7o=r(q8t,"nllb"),q8t.forEach(t),f7o=r(RRe," \u2014 "),HG=n(RRe,"A",{href:!0});var j8t=s(HG);m7o=r(j8t,"M2M100Model"),j8t.forEach(t),g7o=r(RRe," (NLLB model)"),RRe.forEach(t),h7o=i(x),Su=n(x,"LI",{});var PRe=s(Su);Kge=n(PRe,"STRONG",{});var D8t=s(Kge);p7o=r(D8t,"nystromformer"),D8t.forEach(t),_7o=r(PRe," \u2014 "),JG=n(PRe,"A",{href:!0});var G8t=s(JG);u7o=r(G8t,"NystromformerModel"),G8t.forEach(t),b7o=r(PRe," (Nystr\xF6mformer model)"),PRe.forEach(t),v7o=i(x),Ru=n(x,"LI",{});var BRe=s(Ru);Zge=n(BRe,"STRONG",{});var O8t=s(Zge);F7o=r(O8t,"openai-gpt"),O8t.forEach(t),T7o=r(BRe," \u2014 "),YG=n(BRe,"A",{href:!0});var V8t=s(YG);M7o=r(V8t,"OpenAIGPTModel"),V8t.forEach(t),E7o=r(BRe," (OpenAI GPT model)"),BRe.forEach(t),C7o=i(x),Pu=n(x,"LI",{});var IRe=s(Pu);ehe=n(IRe,"STRONG",{});var X8t=s(ehe);w7o=r(X8t,"opt"),X8t.forEach(t),A7o=r(IRe," \u2014 "),KG=n(IRe,"A",{href:!0});var z8t=s(KG);L7o=r(z8t,"OPTModel"),z8t.forEach(t),y7o=r(IRe," (OPT model)"),IRe.forEach(t),x7o=i(x),Bu=n(x,"LI",{});var NRe=s(Bu);ohe=n(NRe,"STRONG",{});var W8t=s(ohe);$7o=r(W8t,"owlvit"),W8t.forEach(t),k7o=r(NRe," \u2014 "),ZG=n(NRe,"A",{href:!0});var Q8t=s(ZG);S7o=r(Q8t,"OwlViTModel"),Q8t.forEach(t),R7o=r(NRe," (OWL-ViT model)"),NRe.forEach(t),P7o=i(x),Iu=n(x,"LI",{});var qRe=s(Iu);rhe=n(qRe,"STRONG",{});var U8t=s(rhe);B7o=r(U8t,"pegasus"),U8t.forEach(t),I7o=r(qRe," \u2014 "),eO=n(qRe,"A",{href:!0});var H8t=s(eO);N7o=r(H8t,"PegasusModel"),H8t.forEach(t),q7o=r(qRe," (Pegasus model)"),qRe.forEach(t),j7o=i(x),Nu=n(x,"LI",{});var jRe=s(Nu);the=n(jRe,"STRONG",{});var J8t=s(the);D7o=r(J8t,"perceiver"),J8t.forEach(t),G7o=r(jRe," \u2014 "),oO=n(jRe,"A",{href:!0});var Y8t=s(oO);O7o=r(Y8t,"PerceiverModel"),Y8t.forEach(t),V7o=r(jRe," (Perceiver model)"),jRe.forEach(t),X7o=i(x),qu=n(x,"LI",{});var DRe=s(qu);ahe=n(DRe,"STRONG",{});var K8t=s(ahe);z7o=r(K8t,"plbart"),K8t.forEach(t),W7o=r(DRe," \u2014 "),rO=n(DRe,"A",{href:!0});var Z8t=s(rO);Q7o=r(Z8t,"PLBartModel"),Z8t.forEach(t),U7o=r(DRe," (PLBart model)"),DRe.forEach(t),H7o=i(x),ju=n(x,"LI",{});var GRe=s(ju);nhe=n(GRe,"STRONG",{});var eMt=s(nhe);J7o=r(eMt,"poolformer"),eMt.forEach(t),Y7o=r(GRe," \u2014 "),tO=n(GRe,"A",{href:!0});var oMt=s(tO);K7o=r(oMt,"PoolFormerModel"),oMt.forEach(t),Z7o=r(GRe," (PoolFormer model)"),GRe.forEach(t),eLo=i(x),Du=n(x,"LI",{});var ORe=s(Du);she=n(ORe,"STRONG",{});var rMt=s(she);oLo=r(rMt,"prophetnet"),rMt.forEach(t),rLo=r(ORe," \u2014 "),aO=n(ORe,"A",{href:!0});var tMt=s(aO);tLo=r(tMt,"ProphetNetModel"),tMt.forEach(t),aLo=r(ORe," (ProphetNet model)"),ORe.forEach(t),nLo=i(x),Gu=n(x,"LI",{});var VRe=s(Gu);lhe=n(VRe,"STRONG",{});var aMt=s(lhe);sLo=r(aMt,"qdqbert"),aMt.forEach(t),lLo=r(VRe," \u2014 "),nO=n(VRe,"A",{href:!0});var nMt=s(nO);iLo=r(nMt,"QDQBertModel"),nMt.forEach(t),dLo=r(VRe," (QDQBert model)"),VRe.forEach(t),cLo=i(x),Ou=n(x,"LI",{});var XRe=s(Ou);ihe=n(XRe,"STRONG",{});var sMt=s(ihe);fLo=r(sMt,"reformer"),sMt.forEach(t),mLo=r(XRe," \u2014 "),sO=n(XRe,"A",{href:!0});var lMt=s(sO);gLo=r(lMt,"ReformerModel"),lMt.forEach(t),hLo=r(XRe," (Reformer model)"),XRe.forEach(t),pLo=i(x),Vu=n(x,"LI",{});var zRe=s(Vu);dhe=n(zRe,"STRONG",{});var iMt=s(dhe);_Lo=r(iMt,"regnet"),iMt.forEach(t),uLo=r(zRe," \u2014 "),lO=n(zRe,"A",{href:!0});var dMt=s(lO);bLo=r(dMt,"RegNetModel"),dMt.forEach(t),vLo=r(zRe," (RegNet model)"),zRe.forEach(t),FLo=i(x),Xu=n(x,"LI",{});var WRe=s(Xu);che=n(WRe,"STRONG",{});var cMt=s(che);TLo=r(cMt,"rembert"),cMt.forEach(t),MLo=r(WRe," \u2014 "),iO=n(WRe,"A",{href:!0});var fMt=s(iO);ELo=r(fMt,"RemBertModel"),fMt.forEach(t),CLo=r(WRe," (RemBERT model)"),WRe.forEach(t),wLo=i(x),zu=n(x,"LI",{});var QRe=s(zu);fhe=n(QRe,"STRONG",{});var mMt=s(fhe);ALo=r(mMt,"resnet"),mMt.forEach(t),LLo=r(QRe," \u2014 "),dO=n(QRe,"A",{href:!0});var gMt=s(dO);yLo=r(gMt,"ResNetModel"),gMt.forEach(t),xLo=r(QRe," (ResNet model)"),QRe.forEach(t),$Lo=i(x),Wu=n(x,"LI",{});var URe=s(Wu);mhe=n(URe,"STRONG",{});var hMt=s(mhe);kLo=r(hMt,"retribert"),hMt.forEach(t),SLo=r(URe," \u2014 "),cO=n(URe,"A",{href:!0});var pMt=s(cO);RLo=r(pMt,"RetriBertModel"),pMt.forEach(t),PLo=r(URe," (RetriBERT model)"),URe.forEach(t),BLo=i(x),Qu=n(x,"LI",{});var HRe=s(Qu);ghe=n(HRe,"STRONG",{});var _Mt=s(ghe);ILo=r(_Mt,"roberta"),_Mt.forEach(t),NLo=r(HRe," \u2014 "),fO=n(HRe,"A",{href:!0});var uMt=s(fO);qLo=r(uMt,"RobertaModel"),uMt.forEach(t),jLo=r(HRe," (RoBERTa model)"),HRe.forEach(t),DLo=i(x),Uu=n(x,"LI",{});var JRe=s(Uu);hhe=n(JRe,"STRONG",{});var bMt=s(hhe);GLo=r(bMt,"roformer"),bMt.forEach(t),OLo=r(JRe," \u2014 "),mO=n(JRe,"A",{href:!0});var vMt=s(mO);VLo=r(vMt,"RoFormerModel"),vMt.forEach(t),XLo=r(JRe," (RoFormer model)"),JRe.forEach(t),zLo=i(x),Hu=n(x,"LI",{});var YRe=s(Hu);phe=n(YRe,"STRONG",{});var FMt=s(phe);WLo=r(FMt,"segformer"),FMt.forEach(t),QLo=r(YRe," \u2014 "),gO=n(YRe,"A",{href:!0});var TMt=s(gO);ULo=r(TMt,"SegformerModel"),TMt.forEach(t),HLo=r(YRe," (SegFormer model)"),YRe.forEach(t),JLo=i(x),Ju=n(x,"LI",{});var KRe=s(Ju);_he=n(KRe,"STRONG",{});var MMt=s(_he);YLo=r(MMt,"sew"),MMt.forEach(t),KLo=r(KRe," \u2014 "),hO=n(KRe,"A",{href:!0});var EMt=s(hO);ZLo=r(EMt,"SEWModel"),EMt.forEach(t),eyo=r(KRe," (SEW model)"),KRe.forEach(t),oyo=i(x),Yu=n(x,"LI",{});var ZRe=s(Yu);uhe=n(ZRe,"STRONG",{});var CMt=s(uhe);ryo=r(CMt,"sew-d"),CMt.forEach(t),tyo=r(ZRe," \u2014 "),pO=n(ZRe,"A",{href:!0});var wMt=s(pO);ayo=r(wMt,"SEWDModel"),wMt.forEach(t),nyo=r(ZRe," (SEW-D model)"),ZRe.forEach(t),syo=i(x),Ku=n(x,"LI",{});var ePe=s(Ku);bhe=n(ePe,"STRONG",{});var AMt=s(bhe);lyo=r(AMt,"speech_to_text"),AMt.forEach(t),iyo=r(ePe," \u2014 "),_O=n(ePe,"A",{href:!0});var LMt=s(_O);dyo=r(LMt,"Speech2TextModel"),LMt.forEach(t),cyo=r(ePe," (Speech2Text model)"),ePe.forEach(t),fyo=i(x),Zu=n(x,"LI",{});var oPe=s(Zu);vhe=n(oPe,"STRONG",{});var yMt=s(vhe);myo=r(yMt,"splinter"),yMt.forEach(t),gyo=r(oPe," \u2014 "),uO=n(oPe,"A",{href:!0});var xMt=s(uO);hyo=r(xMt,"SplinterModel"),xMt.forEach(t),pyo=r(oPe," (Splinter model)"),oPe.forEach(t),_yo=i(x),e5=n(x,"LI",{});var rPe=s(e5);Fhe=n(rPe,"STRONG",{});var $Mt=s(Fhe);uyo=r($Mt,"squeezebert"),$Mt.forEach(t),byo=r(rPe," \u2014 "),bO=n(rPe,"A",{href:!0});var kMt=s(bO);vyo=r(kMt,"SqueezeBertModel"),kMt.forEach(t),Fyo=r(rPe," (SqueezeBERT model)"),rPe.forEach(t),Tyo=i(x),o5=n(x,"LI",{});var tPe=s(o5);The=n(tPe,"STRONG",{});var SMt=s(The);Myo=r(SMt,"swin"),SMt.forEach(t),Eyo=r(tPe," \u2014 "),vO=n(tPe,"A",{href:!0});var RMt=s(vO);Cyo=r(RMt,"SwinModel"),RMt.forEach(t),wyo=r(tPe," (Swin Transformer model)"),tPe.forEach(t),Ayo=i(x),r5=n(x,"LI",{});var aPe=s(r5);Mhe=n(aPe,"STRONG",{});var PMt=s(Mhe);Lyo=r(PMt,"swinv2"),PMt.forEach(t),yyo=r(aPe," \u2014 "),FO=n(aPe,"A",{href:!0});var BMt=s(FO);xyo=r(BMt,"Swinv2Model"),BMt.forEach(t),$yo=r(aPe," (Swin Transformer V2 model)"),aPe.forEach(t),kyo=i(x),t5=n(x,"LI",{});var nPe=s(t5);Ehe=n(nPe,"STRONG",{});var IMt=s(Ehe);Syo=r(IMt,"t5"),IMt.forEach(t),Ryo=r(nPe," \u2014 "),TO=n(nPe,"A",{href:!0});var NMt=s(TO);Pyo=r(NMt,"T5Model"),NMt.forEach(t),Byo=r(nPe," (T5 model)"),nPe.forEach(t),Iyo=i(x),a5=n(x,"LI",{});var sPe=s(a5);Che=n(sPe,"STRONG",{});var qMt=s(Che);Nyo=r(qMt,"tapas"),qMt.forEach(t),qyo=r(sPe," \u2014 "),MO=n(sPe,"A",{href:!0});var jMt=s(MO);jyo=r(jMt,"TapasModel"),jMt.forEach(t),Dyo=r(sPe," (TAPAS model)"),sPe.forEach(t),Gyo=i(x),n5=n(x,"LI",{});var lPe=s(n5);whe=n(lPe,"STRONG",{});var DMt=s(whe);Oyo=r(DMt,"trajectory_transformer"),DMt.forEach(t),Vyo=r(lPe," \u2014 "),EO=n(lPe,"A",{href:!0});var GMt=s(EO);Xyo=r(GMt,"TrajectoryTransformerModel"),GMt.forEach(t),zyo=r(lPe," (Trajectory Transformer model)"),lPe.forEach(t),Wyo=i(x),s5=n(x,"LI",{});var iPe=s(s5);Ahe=n(iPe,"STRONG",{});var OMt=s(Ahe);Qyo=r(OMt,"transfo-xl"),OMt.forEach(t),Uyo=r(iPe," \u2014 "),CO=n(iPe,"A",{href:!0});var VMt=s(CO);Hyo=r(VMt,"TransfoXLModel"),VMt.forEach(t),Jyo=r(iPe," (Transformer-XL model)"),iPe.forEach(t),Yyo=i(x),l5=n(x,"LI",{});var dPe=s(l5);Lhe=n(dPe,"STRONG",{});var XMt=s(Lhe);Kyo=r(XMt,"unispeech"),XMt.forEach(t),Zyo=r(dPe," \u2014 "),wO=n(dPe,"A",{href:!0});var zMt=s(wO);e9o=r(zMt,"UniSpeechModel"),zMt.forEach(t),o9o=r(dPe," (UniSpeech model)"),dPe.forEach(t),r9o=i(x),i5=n(x,"LI",{});var cPe=s(i5);yhe=n(cPe,"STRONG",{});var WMt=s(yhe);t9o=r(WMt,"unispeech-sat"),WMt.forEach(t),a9o=r(cPe," \u2014 "),AO=n(cPe,"A",{href:!0});var QMt=s(AO);n9o=r(QMt,"UniSpeechSatModel"),QMt.forEach(t),s9o=r(cPe," (UniSpeechSat model)"),cPe.forEach(t),l9o=i(x),d5=n(x,"LI",{});var fPe=s(d5);xhe=n(fPe,"STRONG",{});var UMt=s(xhe);i9o=r(UMt,"van"),UMt.forEach(t),d9o=r(fPe," \u2014 "),LO=n(fPe,"A",{href:!0});var HMt=s(LO);c9o=r(HMt,"VanModel"),HMt.forEach(t),f9o=r(fPe," (VAN model)"),fPe.forEach(t),m9o=i(x),c5=n(x,"LI",{});var mPe=s(c5);$he=n(mPe,"STRONG",{});var JMt=s($he);g9o=r(JMt,"videomae"),JMt.forEach(t),h9o=r(mPe," \u2014 "),yO=n(mPe,"A",{href:!0});var YMt=s(yO);p9o=r(YMt,"VideoMAEModel"),YMt.forEach(t),_9o=r(mPe," (VideoMAE model)"),mPe.forEach(t),u9o=i(x),f5=n(x,"LI",{});var gPe=s(f5);khe=n(gPe,"STRONG",{});var KMt=s(khe);b9o=r(KMt,"vilt"),KMt.forEach(t),v9o=r(gPe," \u2014 "),xO=n(gPe,"A",{href:!0});var ZMt=s(xO);F9o=r(ZMt,"ViltModel"),ZMt.forEach(t),T9o=r(gPe," (ViLT model)"),gPe.forEach(t),M9o=i(x),m5=n(x,"LI",{});var hPe=s(m5);She=n(hPe,"STRONG",{});var eEt=s(She);E9o=r(eEt,"vision-text-dual-encoder"),eEt.forEach(t),C9o=r(hPe," \u2014 "),$O=n(hPe,"A",{href:!0});var oEt=s($O);w9o=r(oEt,"VisionTextDualEncoderModel"),oEt.forEach(t),A9o=r(hPe," (VisionTextDualEncoder model)"),hPe.forEach(t),L9o=i(x),g5=n(x,"LI",{});var pPe=s(g5);Rhe=n(pPe,"STRONG",{});var rEt=s(Rhe);y9o=r(rEt,"visual_bert"),rEt.forEach(t),x9o=r(pPe," \u2014 "),kO=n(pPe,"A",{href:!0});var tEt=s(kO);$9o=r(tEt,"VisualBertModel"),tEt.forEach(t),k9o=r(pPe," (VisualBERT model)"),pPe.forEach(t),S9o=i(x),h5=n(x,"LI",{});var _Pe=s(h5);Phe=n(_Pe,"STRONG",{});var aEt=s(Phe);R9o=r(aEt,"vit"),aEt.forEach(t),P9o=r(_Pe," \u2014 "),SO=n(_Pe,"A",{href:!0});var nEt=s(SO);B9o=r(nEt,"ViTModel"),nEt.forEach(t),I9o=r(_Pe," (ViT model)"),_Pe.forEach(t),N9o=i(x),p5=n(x,"LI",{});var uPe=s(p5);Bhe=n(uPe,"STRONG",{});var sEt=s(Bhe);q9o=r(sEt,"vit_mae"),sEt.forEach(t),j9o=r(uPe," \u2014 "),RO=n(uPe,"A",{href:!0});var lEt=s(RO);D9o=r(lEt,"ViTMAEModel"),lEt.forEach(t),G9o=r(uPe," (ViTMAE model)"),uPe.forEach(t),O9o=i(x),_5=n(x,"LI",{});var bPe=s(_5);Ihe=n(bPe,"STRONG",{});var iEt=s(Ihe);V9o=r(iEt,"wav2vec2"),iEt.forEach(t),X9o=r(bPe," \u2014 "),PO=n(bPe,"A",{href:!0});var dEt=s(PO);z9o=r(dEt,"Wav2Vec2Model"),dEt.forEach(t),W9o=r(bPe," (Wav2Vec2 model)"),bPe.forEach(t),Q9o=i(x),u5=n(x,"LI",{});var vPe=s(u5);Nhe=n(vPe,"STRONG",{});var cEt=s(Nhe);U9o=r(cEt,"wav2vec2-conformer"),cEt.forEach(t),H9o=r(vPe," \u2014 "),BO=n(vPe,"A",{href:!0});var fEt=s(BO);J9o=r(fEt,"Wav2Vec2ConformerModel"),fEt.forEach(t),Y9o=r(vPe," (Wav2Vec2-Conformer model)"),vPe.forEach(t),K9o=i(x),b5=n(x,"LI",{});var FPe=s(b5);qhe=n(FPe,"STRONG",{});var mEt=s(qhe);Z9o=r(mEt,"wavlm"),mEt.forEach(t),exo=r(FPe," \u2014 "),IO=n(FPe,"A",{href:!0});var gEt=s(IO);oxo=r(gEt,"WavLMModel"),gEt.forEach(t),rxo=r(FPe," (WavLM model)"),FPe.forEach(t),txo=i(x),v5=n(x,"LI",{});var TPe=s(v5);jhe=n(TPe,"STRONG",{});var hEt=s(jhe);axo=r(hEt,"xglm"),hEt.forEach(t),nxo=r(TPe," \u2014 "),NO=n(TPe,"A",{href:!0});var pEt=s(NO);sxo=r(pEt,"XGLMModel"),pEt.forEach(t),lxo=r(TPe," (XGLM model)"),TPe.forEach(t),ixo=i(x),F5=n(x,"LI",{});var MPe=s(F5);Dhe=n(MPe,"STRONG",{});var _Et=s(Dhe);dxo=r(_Et,"xlm"),_Et.forEach(t),cxo=r(MPe," \u2014 "),qO=n(MPe,"A",{href:!0});var uEt=s(qO);fxo=r(uEt,"XLMModel"),uEt.forEach(t),mxo=r(MPe," (XLM model)"),MPe.forEach(t),gxo=i(x),T5=n(x,"LI",{});var EPe=s(T5);Ghe=n(EPe,"STRONG",{});var bEt=s(Ghe);hxo=r(bEt,"xlm-prophetnet"),bEt.forEach(t),pxo=r(EPe," \u2014 "),jO=n(EPe,"A",{href:!0});var vEt=s(jO);_xo=r(vEt,"XLMProphetNetModel"),vEt.forEach(t),uxo=r(EPe," (XLM-ProphetNet model)"),EPe.forEach(t),bxo=i(x),M5=n(x,"LI",{});var CPe=s(M5);Ohe=n(CPe,"STRONG",{});var FEt=s(Ohe);vxo=r(FEt,"xlm-roberta"),FEt.forEach(t),Fxo=r(CPe," \u2014 "),DO=n(CPe,"A",{href:!0});var TEt=s(DO);Txo=r(TEt,"XLMRobertaModel"),TEt.forEach(t),Mxo=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),Exo=i(x),E5=n(x,"LI",{});var wPe=s(E5);Vhe=n(wPe,"STRONG",{});var MEt=s(Vhe);Cxo=r(MEt,"xlm-roberta-xl"),MEt.forEach(t),wxo=r(wPe," \u2014 "),GO=n(wPe,"A",{href:!0});var EEt=s(GO);Axo=r(EEt,"XLMRobertaXLModel"),EEt.forEach(t),Lxo=r(wPe," (XLM-RoBERTa-XL model)"),wPe.forEach(t),yxo=i(x),C5=n(x,"LI",{});var APe=s(C5);Xhe=n(APe,"STRONG",{});var CEt=s(Xhe);xxo=r(CEt,"xlnet"),CEt.forEach(t),$xo=r(APe," \u2014 "),OO=n(APe,"A",{href:!0});var wEt=s(OO);kxo=r(wEt,"XLNetModel"),wEt.forEach(t),Sxo=r(APe," (XLNet model)"),APe.forEach(t),Rxo=i(x),w5=n(x,"LI",{});var LPe=s(w5);zhe=n(LPe,"STRONG",{});var AEt=s(zhe);Pxo=r(AEt,"yolos"),AEt.forEach(t),Bxo=r(LPe," \u2014 "),VO=n(LPe,"A",{href:!0});var LEt=s(VO);Ixo=r(LEt,"YolosModel"),LEt.forEach(t),Nxo=r(LPe," (YOLOS model)"),LPe.forEach(t),qxo=i(x),A5=n(x,"LI",{});var yPe=s(A5);Whe=n(yPe,"STRONG",{});var yEt=s(Whe);jxo=r(yEt,"yoso"),yEt.forEach(t),Dxo=r(yPe," \u2014 "),XO=n(yPe,"A",{href:!0});var xEt=s(XO);Gxo=r(xEt,"YosoModel"),xEt.forEach(t),Oxo=r(yPe," (YOSO model)"),yPe.forEach(t),x.forEach(t),Vxo=i(ga),L5=n(ga,"P",{});var xPe=s(L5);Xxo=r(xPe,"The model is set in evaluation mode by default using "),Qhe=n(xPe,"CODE",{});var $Et=s(Qhe);zxo=r($Et,"model.eval()"),$Et.forEach(t),Wxo=r(xPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=n(xPe,"CODE",{});var kEt=s(Uhe);Qxo=r(kEt,"model.train()"),kEt.forEach(t),xPe.forEach(t),Uxo=i(ga),T(y5.$$.fragment,ga),ga.forEach(t),hl.forEach(t),hUe=i(f),nd=n(f,"H2",{class:!0});var CJe=s(nd);x5=n(CJe,"A",{id:!0,class:!0,href:!0});var SEt=s(x5);Hhe=n(SEt,"SPAN",{});var REt=s(Hhe);T(Uy.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),Hxo=i(CJe),Jhe=n(CJe,"SPAN",{});var PEt=s(Jhe);Jxo=r(PEt,"AutoModelForPreTraining"),PEt.forEach(t),CJe.forEach(t),pUe=i(f),Ro=n(f,"DIV",{class:!0});var pl=s(Ro);T(Hy.$$.fragment,pl),Yxo=i(pl),sd=n(pl,"P",{});var Uae=s(sd);Kxo=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zO=n(Uae,"A",{href:!0});var BEt=s(zO);Zxo=r(BEt,"from_pretrained()"),BEt.forEach(t),e$o=r(Uae," class method or the "),WO=n(Uae,"A",{href:!0});var IEt=s(WO);o$o=r(IEt,"from_config()"),IEt.forEach(t),r$o=r(Uae,` class
method.`),Uae.forEach(t),t$o=i(pl),Jy=n(pl,"P",{});var wJe=s(Jy);a$o=r(wJe,"This class cannot be instantiated directly using "),Yhe=n(wJe,"CODE",{});var NEt=s(Yhe);n$o=r(NEt,"__init__()"),NEt.forEach(t),s$o=r(wJe," (throws an error)."),wJe.forEach(t),l$o=i(pl),gt=n(pl,"DIV",{class:!0});var b7=s(gt);T(Yy.$$.fragment,b7),i$o=i(b7),Khe=n(b7,"P",{});var qEt=s(Khe);d$o=r(qEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qEt.forEach(t),c$o=i(b7),ld=n(b7,"P",{});var Hae=s(ld);f$o=r(Hae,`Note:
Loading a model from its configuration file does `),Zhe=n(Hae,"STRONG",{});var jEt=s(Zhe);m$o=r(jEt,"not"),jEt.forEach(t),g$o=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(Hae,"A",{href:!0});var DEt=s(QO);h$o=r(DEt,"from_pretrained()"),DEt.forEach(t),p$o=r(Hae," to load the model weights."),Hae.forEach(t),_$o=i(b7),T($5.$$.fragment,b7),b7.forEach(t),u$o=i(pl),Ze=n(pl,"DIV",{class:!0});var ha=s(Ze);T(Ky.$$.fragment,ha),b$o=i(ha),epe=n(ha,"P",{});var GEt=s(epe);v$o=r(GEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GEt.forEach(t),F$o=i(ha),Xa=n(ha,"P",{});var v7=s(Xa);T$o=r(v7,"The model class to instantiate is selected based on the "),ope=n(v7,"CODE",{});var OEt=s(ope);M$o=r(OEt,"model_type"),OEt.forEach(t),E$o=r(v7,` property of the config object (either
passed as an argument or loaded from `),rpe=n(v7,"CODE",{});var VEt=s(rpe);C$o=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),w$o=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=n(v7,"CODE",{});var XEt=s(tpe);A$o=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),L$o=r(v7,":"),v7.forEach(t),y$o=i(ha),G=n(ha,"UL",{});var O=s(G);k5=n(O,"LI",{});var $Pe=s(k5);ape=n($Pe,"STRONG",{});var zEt=s(ape);x$o=r(zEt,"albert"),zEt.forEach(t),$$o=r($Pe," \u2014 "),UO=n($Pe,"A",{href:!0});var WEt=s(UO);k$o=r(WEt,"AlbertForPreTraining"),WEt.forEach(t),S$o=r($Pe," (ALBERT model)"),$Pe.forEach(t),R$o=i(O),S5=n(O,"LI",{});var kPe=s(S5);npe=n(kPe,"STRONG",{});var QEt=s(npe);P$o=r(QEt,"bart"),QEt.forEach(t),B$o=r(kPe," \u2014 "),HO=n(kPe,"A",{href:!0});var UEt=s(HO);I$o=r(UEt,"BartForConditionalGeneration"),UEt.forEach(t),N$o=r(kPe," (BART model)"),kPe.forEach(t),q$o=i(O),R5=n(O,"LI",{});var SPe=s(R5);spe=n(SPe,"STRONG",{});var HEt=s(spe);j$o=r(HEt,"bert"),HEt.forEach(t),D$o=r(SPe," \u2014 "),JO=n(SPe,"A",{href:!0});var JEt=s(JO);G$o=r(JEt,"BertForPreTraining"),JEt.forEach(t),O$o=r(SPe," (BERT model)"),SPe.forEach(t),V$o=i(O),P5=n(O,"LI",{});var RPe=s(P5);lpe=n(RPe,"STRONG",{});var YEt=s(lpe);X$o=r(YEt,"big_bird"),YEt.forEach(t),z$o=r(RPe," \u2014 "),YO=n(RPe,"A",{href:!0});var KEt=s(YO);W$o=r(KEt,"BigBirdForPreTraining"),KEt.forEach(t),Q$o=r(RPe," (BigBird model)"),RPe.forEach(t),U$o=i(O),B5=n(O,"LI",{});var PPe=s(B5);ipe=n(PPe,"STRONG",{});var ZEt=s(ipe);H$o=r(ZEt,"bloom"),ZEt.forEach(t),J$o=r(PPe," \u2014 "),KO=n(PPe,"A",{href:!0});var e4t=s(KO);Y$o=r(e4t,"BloomForCausalLM"),e4t.forEach(t),K$o=r(PPe," (BLOOM model)"),PPe.forEach(t),Z$o=i(O),I5=n(O,"LI",{});var BPe=s(I5);dpe=n(BPe,"STRONG",{});var o4t=s(dpe);eko=r(o4t,"camembert"),o4t.forEach(t),oko=r(BPe," \u2014 "),ZO=n(BPe,"A",{href:!0});var r4t=s(ZO);rko=r(r4t,"CamembertForMaskedLM"),r4t.forEach(t),tko=r(BPe," (CamemBERT model)"),BPe.forEach(t),ako=i(O),N5=n(O,"LI",{});var IPe=s(N5);cpe=n(IPe,"STRONG",{});var t4t=s(cpe);nko=r(t4t,"ctrl"),t4t.forEach(t),sko=r(IPe," \u2014 "),eV=n(IPe,"A",{href:!0});var a4t=s(eV);lko=r(a4t,"CTRLLMHeadModel"),a4t.forEach(t),iko=r(IPe," (CTRL model)"),IPe.forEach(t),dko=i(O),q5=n(O,"LI",{});var NPe=s(q5);fpe=n(NPe,"STRONG",{});var n4t=s(fpe);cko=r(n4t,"data2vec-text"),n4t.forEach(t),fko=r(NPe," \u2014 "),oV=n(NPe,"A",{href:!0});var s4t=s(oV);mko=r(s4t,"Data2VecTextForMaskedLM"),s4t.forEach(t),gko=r(NPe," (Data2VecText model)"),NPe.forEach(t),hko=i(O),j5=n(O,"LI",{});var qPe=s(j5);mpe=n(qPe,"STRONG",{});var l4t=s(mpe);pko=r(l4t,"deberta"),l4t.forEach(t),_ko=r(qPe," \u2014 "),rV=n(qPe,"A",{href:!0});var i4t=s(rV);uko=r(i4t,"DebertaForMaskedLM"),i4t.forEach(t),bko=r(qPe," (DeBERTa model)"),qPe.forEach(t),vko=i(O),D5=n(O,"LI",{});var jPe=s(D5);gpe=n(jPe,"STRONG",{});var d4t=s(gpe);Fko=r(d4t,"deberta-v2"),d4t.forEach(t),Tko=r(jPe," \u2014 "),tV=n(jPe,"A",{href:!0});var c4t=s(tV);Mko=r(c4t,"DebertaV2ForMaskedLM"),c4t.forEach(t),Eko=r(jPe," (DeBERTa-v2 model)"),jPe.forEach(t),Cko=i(O),G5=n(O,"LI",{});var DPe=s(G5);hpe=n(DPe,"STRONG",{});var f4t=s(hpe);wko=r(f4t,"distilbert"),f4t.forEach(t),Ako=r(DPe," \u2014 "),aV=n(DPe,"A",{href:!0});var m4t=s(aV);Lko=r(m4t,"DistilBertForMaskedLM"),m4t.forEach(t),yko=r(DPe," (DistilBERT model)"),DPe.forEach(t),xko=i(O),O5=n(O,"LI",{});var GPe=s(O5);ppe=n(GPe,"STRONG",{});var g4t=s(ppe);$ko=r(g4t,"electra"),g4t.forEach(t),kko=r(GPe," \u2014 "),nV=n(GPe,"A",{href:!0});var h4t=s(nV);Sko=r(h4t,"ElectraForPreTraining"),h4t.forEach(t),Rko=r(GPe," (ELECTRA model)"),GPe.forEach(t),Pko=i(O),V5=n(O,"LI",{});var OPe=s(V5);_pe=n(OPe,"STRONG",{});var p4t=s(_pe);Bko=r(p4t,"flaubert"),p4t.forEach(t),Iko=r(OPe," \u2014 "),sV=n(OPe,"A",{href:!0});var _4t=s(sV);Nko=r(_4t,"FlaubertWithLMHeadModel"),_4t.forEach(t),qko=r(OPe," (FlauBERT model)"),OPe.forEach(t),jko=i(O),X5=n(O,"LI",{});var VPe=s(X5);upe=n(VPe,"STRONG",{});var u4t=s(upe);Dko=r(u4t,"flava"),u4t.forEach(t),Gko=r(VPe," \u2014 "),lV=n(VPe,"A",{href:!0});var b4t=s(lV);Oko=r(b4t,"FlavaForPreTraining"),b4t.forEach(t),Vko=r(VPe," (FLAVA model)"),VPe.forEach(t),Xko=i(O),z5=n(O,"LI",{});var XPe=s(z5);bpe=n(XPe,"STRONG",{});var v4t=s(bpe);zko=r(v4t,"fnet"),v4t.forEach(t),Wko=r(XPe," \u2014 "),iV=n(XPe,"A",{href:!0});var F4t=s(iV);Qko=r(F4t,"FNetForPreTraining"),F4t.forEach(t),Uko=r(XPe," (FNet model)"),XPe.forEach(t),Hko=i(O),W5=n(O,"LI",{});var zPe=s(W5);vpe=n(zPe,"STRONG",{});var T4t=s(vpe);Jko=r(T4t,"fsmt"),T4t.forEach(t),Yko=r(zPe," \u2014 "),dV=n(zPe,"A",{href:!0});var M4t=s(dV);Kko=r(M4t,"FSMTForConditionalGeneration"),M4t.forEach(t),Zko=r(zPe," (FairSeq Machine-Translation model)"),zPe.forEach(t),eSo=i(O),Q5=n(O,"LI",{});var WPe=s(Q5);Fpe=n(WPe,"STRONG",{});var E4t=s(Fpe);oSo=r(E4t,"funnel"),E4t.forEach(t),rSo=r(WPe," \u2014 "),cV=n(WPe,"A",{href:!0});var C4t=s(cV);tSo=r(C4t,"FunnelForPreTraining"),C4t.forEach(t),aSo=r(WPe," (Funnel Transformer model)"),WPe.forEach(t),nSo=i(O),U5=n(O,"LI",{});var QPe=s(U5);Tpe=n(QPe,"STRONG",{});var w4t=s(Tpe);sSo=r(w4t,"gpt2"),w4t.forEach(t),lSo=r(QPe," \u2014 "),fV=n(QPe,"A",{href:!0});var A4t=s(fV);iSo=r(A4t,"GPT2LMHeadModel"),A4t.forEach(t),dSo=r(QPe," (OpenAI GPT-2 model)"),QPe.forEach(t),cSo=i(O),H5=n(O,"LI",{});var UPe=s(H5);Mpe=n(UPe,"STRONG",{});var L4t=s(Mpe);fSo=r(L4t,"ibert"),L4t.forEach(t),mSo=r(UPe," \u2014 "),mV=n(UPe,"A",{href:!0});var y4t=s(mV);gSo=r(y4t,"IBertForMaskedLM"),y4t.forEach(t),hSo=r(UPe," (I-BERT model)"),UPe.forEach(t),pSo=i(O),J5=n(O,"LI",{});var HPe=s(J5);Epe=n(HPe,"STRONG",{});var x4t=s(Epe);_So=r(x4t,"layoutlm"),x4t.forEach(t),uSo=r(HPe," \u2014 "),gV=n(HPe,"A",{href:!0});var $4t=s(gV);bSo=r($4t,"LayoutLMForMaskedLM"),$4t.forEach(t),vSo=r(HPe," (LayoutLM model)"),HPe.forEach(t),FSo=i(O),Y5=n(O,"LI",{});var JPe=s(Y5);Cpe=n(JPe,"STRONG",{});var k4t=s(Cpe);TSo=r(k4t,"longformer"),k4t.forEach(t),MSo=r(JPe," \u2014 "),hV=n(JPe,"A",{href:!0});var S4t=s(hV);ESo=r(S4t,"LongformerForMaskedLM"),S4t.forEach(t),CSo=r(JPe," (Longformer model)"),JPe.forEach(t),wSo=i(O),K5=n(O,"LI",{});var YPe=s(K5);wpe=n(YPe,"STRONG",{});var R4t=s(wpe);ASo=r(R4t,"luke"),R4t.forEach(t),LSo=r(YPe," \u2014 "),pV=n(YPe,"A",{href:!0});var P4t=s(pV);ySo=r(P4t,"LukeForMaskedLM"),P4t.forEach(t),xSo=r(YPe," (LUKE model)"),YPe.forEach(t),$So=i(O),Z5=n(O,"LI",{});var KPe=s(Z5);Ape=n(KPe,"STRONG",{});var B4t=s(Ape);kSo=r(B4t,"lxmert"),B4t.forEach(t),SSo=r(KPe," \u2014 "),_V=n(KPe,"A",{href:!0});var I4t=s(_V);RSo=r(I4t,"LxmertForPreTraining"),I4t.forEach(t),PSo=r(KPe," (LXMERT model)"),KPe.forEach(t),BSo=i(O),e1=n(O,"LI",{});var ZPe=s(e1);Lpe=n(ZPe,"STRONG",{});var N4t=s(Lpe);ISo=r(N4t,"megatron-bert"),N4t.forEach(t),NSo=r(ZPe," \u2014 "),uV=n(ZPe,"A",{href:!0});var q4t=s(uV);qSo=r(q4t,"MegatronBertForPreTraining"),q4t.forEach(t),jSo=r(ZPe," (Megatron-BERT model)"),ZPe.forEach(t),DSo=i(O),o1=n(O,"LI",{});var eBe=s(o1);ype=n(eBe,"STRONG",{});var j4t=s(ype);GSo=r(j4t,"mobilebert"),j4t.forEach(t),OSo=r(eBe," \u2014 "),bV=n(eBe,"A",{href:!0});var D4t=s(bV);VSo=r(D4t,"MobileBertForPreTraining"),D4t.forEach(t),XSo=r(eBe," (MobileBERT model)"),eBe.forEach(t),zSo=i(O),r1=n(O,"LI",{});var oBe=s(r1);xpe=n(oBe,"STRONG",{});var G4t=s(xpe);WSo=r(G4t,"mpnet"),G4t.forEach(t),QSo=r(oBe," \u2014 "),vV=n(oBe,"A",{href:!0});var O4t=s(vV);USo=r(O4t,"MPNetForMaskedLM"),O4t.forEach(t),HSo=r(oBe," (MPNet model)"),oBe.forEach(t),JSo=i(O),t1=n(O,"LI",{});var rBe=s(t1);$pe=n(rBe,"STRONG",{});var V4t=s($pe);YSo=r(V4t,"mvp"),V4t.forEach(t),KSo=r(rBe," \u2014 "),FV=n(rBe,"A",{href:!0});var X4t=s(FV);ZSo=r(X4t,"MvpForConditionalGeneration"),X4t.forEach(t),eRo=r(rBe," (MVP model)"),rBe.forEach(t),oRo=i(O),a1=n(O,"LI",{});var tBe=s(a1);kpe=n(tBe,"STRONG",{});var z4t=s(kpe);rRo=r(z4t,"nezha"),z4t.forEach(t),tRo=r(tBe," \u2014 "),TV=n(tBe,"A",{href:!0});var W4t=s(TV);aRo=r(W4t,"NezhaForPreTraining"),W4t.forEach(t),nRo=r(tBe," (Nezha model)"),tBe.forEach(t),sRo=i(O),n1=n(O,"LI",{});var aBe=s(n1);Spe=n(aBe,"STRONG",{});var Q4t=s(Spe);lRo=r(Q4t,"openai-gpt"),Q4t.forEach(t),iRo=r(aBe," \u2014 "),MV=n(aBe,"A",{href:!0});var U4t=s(MV);dRo=r(U4t,"OpenAIGPTLMHeadModel"),U4t.forEach(t),cRo=r(aBe," (OpenAI GPT model)"),aBe.forEach(t),fRo=i(O),s1=n(O,"LI",{});var nBe=s(s1);Rpe=n(nBe,"STRONG",{});var H4t=s(Rpe);mRo=r(H4t,"retribert"),H4t.forEach(t),gRo=r(nBe," \u2014 "),EV=n(nBe,"A",{href:!0});var J4t=s(EV);hRo=r(J4t,"RetriBertModel"),J4t.forEach(t),pRo=r(nBe," (RetriBERT model)"),nBe.forEach(t),_Ro=i(O),l1=n(O,"LI",{});var sBe=s(l1);Ppe=n(sBe,"STRONG",{});var Y4t=s(Ppe);uRo=r(Y4t,"roberta"),Y4t.forEach(t),bRo=r(sBe," \u2014 "),CV=n(sBe,"A",{href:!0});var K4t=s(CV);vRo=r(K4t,"RobertaForMaskedLM"),K4t.forEach(t),FRo=r(sBe," (RoBERTa model)"),sBe.forEach(t),TRo=i(O),i1=n(O,"LI",{});var lBe=s(i1);Bpe=n(lBe,"STRONG",{});var Z4t=s(Bpe);MRo=r(Z4t,"splinter"),Z4t.forEach(t),ERo=r(lBe," \u2014 "),wV=n(lBe,"A",{href:!0});var eCt=s(wV);CRo=r(eCt,"SplinterForPreTraining"),eCt.forEach(t),wRo=r(lBe," (Splinter model)"),lBe.forEach(t),ARo=i(O),d1=n(O,"LI",{});var iBe=s(d1);Ipe=n(iBe,"STRONG",{});var oCt=s(Ipe);LRo=r(oCt,"squeezebert"),oCt.forEach(t),yRo=r(iBe," \u2014 "),AV=n(iBe,"A",{href:!0});var rCt=s(AV);xRo=r(rCt,"SqueezeBertForMaskedLM"),rCt.forEach(t),$Ro=r(iBe," (SqueezeBERT model)"),iBe.forEach(t),kRo=i(O),c1=n(O,"LI",{});var dBe=s(c1);Npe=n(dBe,"STRONG",{});var tCt=s(Npe);SRo=r(tCt,"t5"),tCt.forEach(t),RRo=r(dBe," \u2014 "),LV=n(dBe,"A",{href:!0});var aCt=s(LV);PRo=r(aCt,"T5ForConditionalGeneration"),aCt.forEach(t),BRo=r(dBe," (T5 model)"),dBe.forEach(t),IRo=i(O),f1=n(O,"LI",{});var cBe=s(f1);qpe=n(cBe,"STRONG",{});var nCt=s(qpe);NRo=r(nCt,"tapas"),nCt.forEach(t),qRo=r(cBe," \u2014 "),yV=n(cBe,"A",{href:!0});var sCt=s(yV);jRo=r(sCt,"TapasForMaskedLM"),sCt.forEach(t),DRo=r(cBe," (TAPAS model)"),cBe.forEach(t),GRo=i(O),m1=n(O,"LI",{});var fBe=s(m1);jpe=n(fBe,"STRONG",{});var lCt=s(jpe);ORo=r(lCt,"transfo-xl"),lCt.forEach(t),VRo=r(fBe," \u2014 "),xV=n(fBe,"A",{href:!0});var iCt=s(xV);XRo=r(iCt,"TransfoXLLMHeadModel"),iCt.forEach(t),zRo=r(fBe," (Transformer-XL model)"),fBe.forEach(t),WRo=i(O),g1=n(O,"LI",{});var mBe=s(g1);Dpe=n(mBe,"STRONG",{});var dCt=s(Dpe);QRo=r(dCt,"unispeech"),dCt.forEach(t),URo=r(mBe," \u2014 "),$V=n(mBe,"A",{href:!0});var cCt=s($V);HRo=r(cCt,"UniSpeechForPreTraining"),cCt.forEach(t),JRo=r(mBe," (UniSpeech model)"),mBe.forEach(t),YRo=i(O),h1=n(O,"LI",{});var gBe=s(h1);Gpe=n(gBe,"STRONG",{});var fCt=s(Gpe);KRo=r(fCt,"unispeech-sat"),fCt.forEach(t),ZRo=r(gBe," \u2014 "),kV=n(gBe,"A",{href:!0});var mCt=s(kV);ePo=r(mCt,"UniSpeechSatForPreTraining"),mCt.forEach(t),oPo=r(gBe," (UniSpeechSat model)"),gBe.forEach(t),rPo=i(O),p1=n(O,"LI",{});var hBe=s(p1);Ope=n(hBe,"STRONG",{});var gCt=s(Ope);tPo=r(gCt,"videomae"),gCt.forEach(t),aPo=r(hBe," \u2014 "),SV=n(hBe,"A",{href:!0});var hCt=s(SV);nPo=r(hCt,"VideoMAEForPreTraining"),hCt.forEach(t),sPo=r(hBe," (VideoMAE model)"),hBe.forEach(t),lPo=i(O),_1=n(O,"LI",{});var pBe=s(_1);Vpe=n(pBe,"STRONG",{});var pCt=s(Vpe);iPo=r(pCt,"visual_bert"),pCt.forEach(t),dPo=r(pBe," \u2014 "),RV=n(pBe,"A",{href:!0});var _Ct=s(RV);cPo=r(_Ct,"VisualBertForPreTraining"),_Ct.forEach(t),fPo=r(pBe," (VisualBERT model)"),pBe.forEach(t),mPo=i(O),u1=n(O,"LI",{});var _Be=s(u1);Xpe=n(_Be,"STRONG",{});var uCt=s(Xpe);gPo=r(uCt,"vit_mae"),uCt.forEach(t),hPo=r(_Be," \u2014 "),PV=n(_Be,"A",{href:!0});var bCt=s(PV);pPo=r(bCt,"ViTMAEForPreTraining"),bCt.forEach(t),_Po=r(_Be," (ViTMAE model)"),_Be.forEach(t),uPo=i(O),b1=n(O,"LI",{});var uBe=s(b1);zpe=n(uBe,"STRONG",{});var vCt=s(zpe);bPo=r(vCt,"wav2vec2"),vCt.forEach(t),vPo=r(uBe," \u2014 "),BV=n(uBe,"A",{href:!0});var FCt=s(BV);FPo=r(FCt,"Wav2Vec2ForPreTraining"),FCt.forEach(t),TPo=r(uBe," (Wav2Vec2 model)"),uBe.forEach(t),MPo=i(O),v1=n(O,"LI",{});var bBe=s(v1);Wpe=n(bBe,"STRONG",{});var TCt=s(Wpe);EPo=r(TCt,"wav2vec2-conformer"),TCt.forEach(t),CPo=r(bBe," \u2014 "),IV=n(bBe,"A",{href:!0});var MCt=s(IV);wPo=r(MCt,"Wav2Vec2ConformerForPreTraining"),MCt.forEach(t),APo=r(bBe," (Wav2Vec2-Conformer model)"),bBe.forEach(t),LPo=i(O),F1=n(O,"LI",{});var vBe=s(F1);Qpe=n(vBe,"STRONG",{});var ECt=s(Qpe);yPo=r(ECt,"xlm"),ECt.forEach(t),xPo=r(vBe," \u2014 "),NV=n(vBe,"A",{href:!0});var CCt=s(NV);$Po=r(CCt,"XLMWithLMHeadModel"),CCt.forEach(t),kPo=r(vBe," (XLM model)"),vBe.forEach(t),SPo=i(O),T1=n(O,"LI",{});var FBe=s(T1);Upe=n(FBe,"STRONG",{});var wCt=s(Upe);RPo=r(wCt,"xlm-roberta"),wCt.forEach(t),PPo=r(FBe," \u2014 "),qV=n(FBe,"A",{href:!0});var ACt=s(qV);BPo=r(ACt,"XLMRobertaForMaskedLM"),ACt.forEach(t),IPo=r(FBe," (XLM-RoBERTa model)"),FBe.forEach(t),NPo=i(O),M1=n(O,"LI",{});var TBe=s(M1);Hpe=n(TBe,"STRONG",{});var LCt=s(Hpe);qPo=r(LCt,"xlm-roberta-xl"),LCt.forEach(t),jPo=r(TBe," \u2014 "),jV=n(TBe,"A",{href:!0});var yCt=s(jV);DPo=r(yCt,"XLMRobertaXLForMaskedLM"),yCt.forEach(t),GPo=r(TBe," (XLM-RoBERTa-XL model)"),TBe.forEach(t),OPo=i(O),E1=n(O,"LI",{});var MBe=s(E1);Jpe=n(MBe,"STRONG",{});var xCt=s(Jpe);VPo=r(xCt,"xlnet"),xCt.forEach(t),XPo=r(MBe," \u2014 "),DV=n(MBe,"A",{href:!0});var $Ct=s(DV);zPo=r($Ct,"XLNetLMHeadModel"),$Ct.forEach(t),WPo=r(MBe," (XLNet model)"),MBe.forEach(t),O.forEach(t),QPo=i(ha),C1=n(ha,"P",{});var EBe=s(C1);UPo=r(EBe,"The model is set in evaluation mode by default using "),Ype=n(EBe,"CODE",{});var kCt=s(Ype);HPo=r(kCt,"model.eval()"),kCt.forEach(t),JPo=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=n(EBe,"CODE",{});var SCt=s(Kpe);YPo=r(SCt,"model.train()"),SCt.forEach(t),EBe.forEach(t),KPo=i(ha),T(w1.$$.fragment,ha),ha.forEach(t),pl.forEach(t),_Ue=i(f),id=n(f,"H2",{class:!0});var AJe=s(id);A1=n(AJe,"A",{id:!0,class:!0,href:!0});var RCt=s(A1);Zpe=n(RCt,"SPAN",{});var PCt=s(Zpe);T(Zy.$$.fragment,PCt),PCt.forEach(t),RCt.forEach(t),ZPo=i(AJe),e_e=n(AJe,"SPAN",{});var BCt=s(e_e);eBo=r(BCt,"AutoModelForCausalLM"),BCt.forEach(t),AJe.forEach(t),uUe=i(f),Po=n(f,"DIV",{class:!0});var _l=s(Po);T(e9.$$.fragment,_l),oBo=i(_l),dd=n(_l,"P",{});var Jae=s(dd);rBo=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GV=n(Jae,"A",{href:!0});var ICt=s(GV);tBo=r(ICt,"from_pretrained()"),ICt.forEach(t),aBo=r(Jae," class method or the "),OV=n(Jae,"A",{href:!0});var NCt=s(OV);nBo=r(NCt,"from_config()"),NCt.forEach(t),sBo=r(Jae,` class
method.`),Jae.forEach(t),lBo=i(_l),o9=n(_l,"P",{});var LJe=s(o9);iBo=r(LJe,"This class cannot be instantiated directly using "),o_e=n(LJe,"CODE",{});var qCt=s(o_e);dBo=r(qCt,"__init__()"),qCt.forEach(t),cBo=r(LJe," (throws an error)."),LJe.forEach(t),fBo=i(_l),ht=n(_l,"DIV",{class:!0});var F7=s(ht);T(r9.$$.fragment,F7),mBo=i(F7),r_e=n(F7,"P",{});var jCt=s(r_e);gBo=r(jCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jCt.forEach(t),hBo=i(F7),cd=n(F7,"P",{});var Yae=s(cd);pBo=r(Yae,`Note:
Loading a model from its configuration file does `),t_e=n(Yae,"STRONG",{});var DCt=s(t_e);_Bo=r(DCt,"not"),DCt.forEach(t),uBo=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(Yae,"A",{href:!0});var GCt=s(VV);bBo=r(GCt,"from_pretrained()"),GCt.forEach(t),vBo=r(Yae," to load the model weights."),Yae.forEach(t),FBo=i(F7),T(L1.$$.fragment,F7),F7.forEach(t),TBo=i(_l),eo=n(_l,"DIV",{class:!0});var pa=s(eo);T(t9.$$.fragment,pa),MBo=i(pa),a_e=n(pa,"P",{});var OCt=s(a_e);EBo=r(OCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),OCt.forEach(t),CBo=i(pa),za=n(pa,"P",{});var T7=s(za);wBo=r(T7,"The model class to instantiate is selected based on the "),n_e=n(T7,"CODE",{});var VCt=s(n_e);ABo=r(VCt,"model_type"),VCt.forEach(t),LBo=r(T7,` property of the config object (either
passed as an argument or loaded from `),s_e=n(T7,"CODE",{});var XCt=s(s_e);yBo=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),xBo=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=n(T7,"CODE",{});var zCt=s(l_e);$Bo=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),kBo=r(T7,":"),T7.forEach(t),SBo=i(pa),z=n(pa,"UL",{});var W=s(z);y1=n(W,"LI",{});var CBe=s(y1);i_e=n(CBe,"STRONG",{});var WCt=s(i_e);RBo=r(WCt,"bart"),WCt.forEach(t),PBo=r(CBe," \u2014 "),XV=n(CBe,"A",{href:!0});var QCt=s(XV);BBo=r(QCt,"BartForCausalLM"),QCt.forEach(t),IBo=r(CBe," (BART model)"),CBe.forEach(t),NBo=i(W),x1=n(W,"LI",{});var wBe=s(x1);d_e=n(wBe,"STRONG",{});var UCt=s(d_e);qBo=r(UCt,"bert"),UCt.forEach(t),jBo=r(wBe," \u2014 "),zV=n(wBe,"A",{href:!0});var HCt=s(zV);DBo=r(HCt,"BertLMHeadModel"),HCt.forEach(t),GBo=r(wBe," (BERT model)"),wBe.forEach(t),OBo=i(W),$1=n(W,"LI",{});var ABe=s($1);c_e=n(ABe,"STRONG",{});var JCt=s(c_e);VBo=r(JCt,"bert-generation"),JCt.forEach(t),XBo=r(ABe," \u2014 "),WV=n(ABe,"A",{href:!0});var YCt=s(WV);zBo=r(YCt,"BertGenerationDecoder"),YCt.forEach(t),WBo=r(ABe," (Bert Generation model)"),ABe.forEach(t),QBo=i(W),k1=n(W,"LI",{});var LBe=s(k1);f_e=n(LBe,"STRONG",{});var KCt=s(f_e);UBo=r(KCt,"big_bird"),KCt.forEach(t),HBo=r(LBe," \u2014 "),QV=n(LBe,"A",{href:!0});var ZCt=s(QV);JBo=r(ZCt,"BigBirdForCausalLM"),ZCt.forEach(t),YBo=r(LBe," (BigBird model)"),LBe.forEach(t),KBo=i(W),S1=n(W,"LI",{});var yBe=s(S1);m_e=n(yBe,"STRONG",{});var e3t=s(m_e);ZBo=r(e3t,"bigbird_pegasus"),e3t.forEach(t),eIo=r(yBe," \u2014 "),UV=n(yBe,"A",{href:!0});var o3t=s(UV);oIo=r(o3t,"BigBirdPegasusForCausalLM"),o3t.forEach(t),rIo=r(yBe," (BigBird-Pegasus model)"),yBe.forEach(t),tIo=i(W),R1=n(W,"LI",{});var xBe=s(R1);g_e=n(xBe,"STRONG",{});var r3t=s(g_e);aIo=r(r3t,"blenderbot"),r3t.forEach(t),nIo=r(xBe," \u2014 "),HV=n(xBe,"A",{href:!0});var t3t=s(HV);sIo=r(t3t,"BlenderbotForCausalLM"),t3t.forEach(t),lIo=r(xBe," (Blenderbot model)"),xBe.forEach(t),iIo=i(W),P1=n(W,"LI",{});var $Be=s(P1);h_e=n($Be,"STRONG",{});var a3t=s(h_e);dIo=r(a3t,"blenderbot-small"),a3t.forEach(t),cIo=r($Be," \u2014 "),JV=n($Be,"A",{href:!0});var n3t=s(JV);fIo=r(n3t,"BlenderbotSmallForCausalLM"),n3t.forEach(t),mIo=r($Be," (BlenderbotSmall model)"),$Be.forEach(t),gIo=i(W),B1=n(W,"LI",{});var kBe=s(B1);p_e=n(kBe,"STRONG",{});var s3t=s(p_e);hIo=r(s3t,"bloom"),s3t.forEach(t),pIo=r(kBe," \u2014 "),YV=n(kBe,"A",{href:!0});var l3t=s(YV);_Io=r(l3t,"BloomForCausalLM"),l3t.forEach(t),uIo=r(kBe," (BLOOM model)"),kBe.forEach(t),bIo=i(W),I1=n(W,"LI",{});var SBe=s(I1);__e=n(SBe,"STRONG",{});var i3t=s(__e);vIo=r(i3t,"camembert"),i3t.forEach(t),FIo=r(SBe," \u2014 "),KV=n(SBe,"A",{href:!0});var d3t=s(KV);TIo=r(d3t,"CamembertForCausalLM"),d3t.forEach(t),MIo=r(SBe," (CamemBERT model)"),SBe.forEach(t),EIo=i(W),N1=n(W,"LI",{});var RBe=s(N1);u_e=n(RBe,"STRONG",{});var c3t=s(u_e);CIo=r(c3t,"codegen"),c3t.forEach(t),wIo=r(RBe," \u2014 "),ZV=n(RBe,"A",{href:!0});var f3t=s(ZV);AIo=r(f3t,"CodeGenForCausalLM"),f3t.forEach(t),LIo=r(RBe," (CodeGen model)"),RBe.forEach(t),yIo=i(W),q1=n(W,"LI",{});var PBe=s(q1);b_e=n(PBe,"STRONG",{});var m3t=s(b_e);xIo=r(m3t,"ctrl"),m3t.forEach(t),$Io=r(PBe," \u2014 "),eX=n(PBe,"A",{href:!0});var g3t=s(eX);kIo=r(g3t,"CTRLLMHeadModel"),g3t.forEach(t),SIo=r(PBe," (CTRL model)"),PBe.forEach(t),RIo=i(W),j1=n(W,"LI",{});var BBe=s(j1);v_e=n(BBe,"STRONG",{});var h3t=s(v_e);PIo=r(h3t,"data2vec-text"),h3t.forEach(t),BIo=r(BBe," \u2014 "),oX=n(BBe,"A",{href:!0});var p3t=s(oX);IIo=r(p3t,"Data2VecTextForCausalLM"),p3t.forEach(t),NIo=r(BBe," (Data2VecText model)"),BBe.forEach(t),qIo=i(W),D1=n(W,"LI",{});var IBe=s(D1);F_e=n(IBe,"STRONG",{});var _3t=s(F_e);jIo=r(_3t,"electra"),_3t.forEach(t),DIo=r(IBe," \u2014 "),rX=n(IBe,"A",{href:!0});var u3t=s(rX);GIo=r(u3t,"ElectraForCausalLM"),u3t.forEach(t),OIo=r(IBe," (ELECTRA model)"),IBe.forEach(t),VIo=i(W),G1=n(W,"LI",{});var NBe=s(G1);T_e=n(NBe,"STRONG",{});var b3t=s(T_e);XIo=r(b3t,"gpt2"),b3t.forEach(t),zIo=r(NBe," \u2014 "),tX=n(NBe,"A",{href:!0});var v3t=s(tX);WIo=r(v3t,"GPT2LMHeadModel"),v3t.forEach(t),QIo=r(NBe," (OpenAI GPT-2 model)"),NBe.forEach(t),UIo=i(W),O1=n(W,"LI",{});var qBe=s(O1);M_e=n(qBe,"STRONG",{});var F3t=s(M_e);HIo=r(F3t,"gpt_neo"),F3t.forEach(t),JIo=r(qBe," \u2014 "),aX=n(qBe,"A",{href:!0});var T3t=s(aX);YIo=r(T3t,"GPTNeoForCausalLM"),T3t.forEach(t),KIo=r(qBe," (GPT Neo model)"),qBe.forEach(t),ZIo=i(W),V1=n(W,"LI",{});var jBe=s(V1);E_e=n(jBe,"STRONG",{});var M3t=s(E_e);eNo=r(M3t,"gpt_neox"),M3t.forEach(t),oNo=r(jBe," \u2014 "),nX=n(jBe,"A",{href:!0});var E3t=s(nX);rNo=r(E3t,"GPTNeoXForCausalLM"),E3t.forEach(t),tNo=r(jBe," (GPT NeoX model)"),jBe.forEach(t),aNo=i(W),X1=n(W,"LI",{});var DBe=s(X1);C_e=n(DBe,"STRONG",{});var C3t=s(C_e);nNo=r(C3t,"gptj"),C3t.forEach(t),sNo=r(DBe," \u2014 "),sX=n(DBe,"A",{href:!0});var w3t=s(sX);lNo=r(w3t,"GPTJForCausalLM"),w3t.forEach(t),iNo=r(DBe," (GPT-J model)"),DBe.forEach(t),dNo=i(W),z1=n(W,"LI",{});var GBe=s(z1);w_e=n(GBe,"STRONG",{});var A3t=s(w_e);cNo=r(A3t,"marian"),A3t.forEach(t),fNo=r(GBe," \u2014 "),lX=n(GBe,"A",{href:!0});var L3t=s(lX);mNo=r(L3t,"MarianForCausalLM"),L3t.forEach(t),gNo=r(GBe," (Marian model)"),GBe.forEach(t),hNo=i(W),W1=n(W,"LI",{});var OBe=s(W1);A_e=n(OBe,"STRONG",{});var y3t=s(A_e);pNo=r(y3t,"mbart"),y3t.forEach(t),_No=r(OBe," \u2014 "),iX=n(OBe,"A",{href:!0});var x3t=s(iX);uNo=r(x3t,"MBartForCausalLM"),x3t.forEach(t),bNo=r(OBe," (mBART model)"),OBe.forEach(t),vNo=i(W),Q1=n(W,"LI",{});var VBe=s(Q1);L_e=n(VBe,"STRONG",{});var $3t=s(L_e);FNo=r($3t,"megatron-bert"),$3t.forEach(t),TNo=r(VBe," \u2014 "),dX=n(VBe,"A",{href:!0});var k3t=s(dX);MNo=r(k3t,"MegatronBertForCausalLM"),k3t.forEach(t),ENo=r(VBe," (Megatron-BERT model)"),VBe.forEach(t),CNo=i(W),U1=n(W,"LI",{});var XBe=s(U1);y_e=n(XBe,"STRONG",{});var S3t=s(y_e);wNo=r(S3t,"mvp"),S3t.forEach(t),ANo=r(XBe," \u2014 "),cX=n(XBe,"A",{href:!0});var R3t=s(cX);LNo=r(R3t,"MvpForCausalLM"),R3t.forEach(t),yNo=r(XBe," (MVP model)"),XBe.forEach(t),xNo=i(W),H1=n(W,"LI",{});var zBe=s(H1);x_e=n(zBe,"STRONG",{});var P3t=s(x_e);$No=r(P3t,"openai-gpt"),P3t.forEach(t),kNo=r(zBe," \u2014 "),fX=n(zBe,"A",{href:!0});var B3t=s(fX);SNo=r(B3t,"OpenAIGPTLMHeadModel"),B3t.forEach(t),RNo=r(zBe," (OpenAI GPT model)"),zBe.forEach(t),PNo=i(W),J1=n(W,"LI",{});var WBe=s(J1);$_e=n(WBe,"STRONG",{});var I3t=s($_e);BNo=r(I3t,"opt"),I3t.forEach(t),INo=r(WBe," \u2014 "),mX=n(WBe,"A",{href:!0});var N3t=s(mX);NNo=r(N3t,"OPTForCausalLM"),N3t.forEach(t),qNo=r(WBe," (OPT model)"),WBe.forEach(t),jNo=i(W),Y1=n(W,"LI",{});var QBe=s(Y1);k_e=n(QBe,"STRONG",{});var q3t=s(k_e);DNo=r(q3t,"pegasus"),q3t.forEach(t),GNo=r(QBe," \u2014 "),gX=n(QBe,"A",{href:!0});var j3t=s(gX);ONo=r(j3t,"PegasusForCausalLM"),j3t.forEach(t),VNo=r(QBe," (Pegasus model)"),QBe.forEach(t),XNo=i(W),K1=n(W,"LI",{});var UBe=s(K1);S_e=n(UBe,"STRONG",{});var D3t=s(S_e);zNo=r(D3t,"plbart"),D3t.forEach(t),WNo=r(UBe," \u2014 "),hX=n(UBe,"A",{href:!0});var G3t=s(hX);QNo=r(G3t,"PLBartForCausalLM"),G3t.forEach(t),UNo=r(UBe," (PLBart model)"),UBe.forEach(t),HNo=i(W),Z1=n(W,"LI",{});var HBe=s(Z1);R_e=n(HBe,"STRONG",{});var O3t=s(R_e);JNo=r(O3t,"prophetnet"),O3t.forEach(t),YNo=r(HBe," \u2014 "),pX=n(HBe,"A",{href:!0});var V3t=s(pX);KNo=r(V3t,"ProphetNetForCausalLM"),V3t.forEach(t),ZNo=r(HBe," (ProphetNet model)"),HBe.forEach(t),eqo=i(W),e2=n(W,"LI",{});var JBe=s(e2);P_e=n(JBe,"STRONG",{});var X3t=s(P_e);oqo=r(X3t,"qdqbert"),X3t.forEach(t),rqo=r(JBe," \u2014 "),_X=n(JBe,"A",{href:!0});var z3t=s(_X);tqo=r(z3t,"QDQBertLMHeadModel"),z3t.forEach(t),aqo=r(JBe," (QDQBert model)"),JBe.forEach(t),nqo=i(W),o2=n(W,"LI",{});var YBe=s(o2);B_e=n(YBe,"STRONG",{});var W3t=s(B_e);sqo=r(W3t,"reformer"),W3t.forEach(t),lqo=r(YBe," \u2014 "),uX=n(YBe,"A",{href:!0});var Q3t=s(uX);iqo=r(Q3t,"ReformerModelWithLMHead"),Q3t.forEach(t),dqo=r(YBe," (Reformer model)"),YBe.forEach(t),cqo=i(W),r2=n(W,"LI",{});var KBe=s(r2);I_e=n(KBe,"STRONG",{});var U3t=s(I_e);fqo=r(U3t,"rembert"),U3t.forEach(t),mqo=r(KBe," \u2014 "),bX=n(KBe,"A",{href:!0});var H3t=s(bX);gqo=r(H3t,"RemBertForCausalLM"),H3t.forEach(t),hqo=r(KBe," (RemBERT model)"),KBe.forEach(t),pqo=i(W),t2=n(W,"LI",{});var ZBe=s(t2);N_e=n(ZBe,"STRONG",{});var J3t=s(N_e);_qo=r(J3t,"roberta"),J3t.forEach(t),uqo=r(ZBe," \u2014 "),vX=n(ZBe,"A",{href:!0});var Y3t=s(vX);bqo=r(Y3t,"RobertaForCausalLM"),Y3t.forEach(t),vqo=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),Fqo=i(W),a2=n(W,"LI",{});var eIe=s(a2);q_e=n(eIe,"STRONG",{});var K3t=s(q_e);Tqo=r(K3t,"roformer"),K3t.forEach(t),Mqo=r(eIe," \u2014 "),FX=n(eIe,"A",{href:!0});var Z3t=s(FX);Eqo=r(Z3t,"RoFormerForCausalLM"),Z3t.forEach(t),Cqo=r(eIe," (RoFormer model)"),eIe.forEach(t),wqo=i(W),n2=n(W,"LI",{});var oIe=s(n2);j_e=n(oIe,"STRONG",{});var e0t=s(j_e);Aqo=r(e0t,"speech_to_text_2"),e0t.forEach(t),Lqo=r(oIe," \u2014 "),TX=n(oIe,"A",{href:!0});var o0t=s(TX);yqo=r(o0t,"Speech2Text2ForCausalLM"),o0t.forEach(t),xqo=r(oIe," (Speech2Text2 model)"),oIe.forEach(t),$qo=i(W),s2=n(W,"LI",{});var rIe=s(s2);D_e=n(rIe,"STRONG",{});var r0t=s(D_e);kqo=r(r0t,"transfo-xl"),r0t.forEach(t),Sqo=r(rIe," \u2014 "),MX=n(rIe,"A",{href:!0});var t0t=s(MX);Rqo=r(t0t,"TransfoXLLMHeadModel"),t0t.forEach(t),Pqo=r(rIe," (Transformer-XL model)"),rIe.forEach(t),Bqo=i(W),l2=n(W,"LI",{});var tIe=s(l2);G_e=n(tIe,"STRONG",{});var a0t=s(G_e);Iqo=r(a0t,"trocr"),a0t.forEach(t),Nqo=r(tIe," \u2014 "),EX=n(tIe,"A",{href:!0});var n0t=s(EX);qqo=r(n0t,"TrOCRForCausalLM"),n0t.forEach(t),jqo=r(tIe," (TrOCR model)"),tIe.forEach(t),Dqo=i(W),i2=n(W,"LI",{});var aIe=s(i2);O_e=n(aIe,"STRONG",{});var s0t=s(O_e);Gqo=r(s0t,"xglm"),s0t.forEach(t),Oqo=r(aIe," \u2014 "),CX=n(aIe,"A",{href:!0});var l0t=s(CX);Vqo=r(l0t,"XGLMForCausalLM"),l0t.forEach(t),Xqo=r(aIe," (XGLM model)"),aIe.forEach(t),zqo=i(W),d2=n(W,"LI",{});var nIe=s(d2);V_e=n(nIe,"STRONG",{});var i0t=s(V_e);Wqo=r(i0t,"xlm"),i0t.forEach(t),Qqo=r(nIe," \u2014 "),wX=n(nIe,"A",{href:!0});var d0t=s(wX);Uqo=r(d0t,"XLMWithLMHeadModel"),d0t.forEach(t),Hqo=r(nIe," (XLM model)"),nIe.forEach(t),Jqo=i(W),c2=n(W,"LI",{});var sIe=s(c2);X_e=n(sIe,"STRONG",{});var c0t=s(X_e);Yqo=r(c0t,"xlm-prophetnet"),c0t.forEach(t),Kqo=r(sIe," \u2014 "),AX=n(sIe,"A",{href:!0});var f0t=s(AX);Zqo=r(f0t,"XLMProphetNetForCausalLM"),f0t.forEach(t),ejo=r(sIe," (XLM-ProphetNet model)"),sIe.forEach(t),ojo=i(W),f2=n(W,"LI",{});var lIe=s(f2);z_e=n(lIe,"STRONG",{});var m0t=s(z_e);rjo=r(m0t,"xlm-roberta"),m0t.forEach(t),tjo=r(lIe," \u2014 "),LX=n(lIe,"A",{href:!0});var g0t=s(LX);ajo=r(g0t,"XLMRobertaForCausalLM"),g0t.forEach(t),njo=r(lIe," (XLM-RoBERTa model)"),lIe.forEach(t),sjo=i(W),m2=n(W,"LI",{});var iIe=s(m2);W_e=n(iIe,"STRONG",{});var h0t=s(W_e);ljo=r(h0t,"xlm-roberta-xl"),h0t.forEach(t),ijo=r(iIe," \u2014 "),yX=n(iIe,"A",{href:!0});var p0t=s(yX);djo=r(p0t,"XLMRobertaXLForCausalLM"),p0t.forEach(t),cjo=r(iIe," (XLM-RoBERTa-XL model)"),iIe.forEach(t),fjo=i(W),g2=n(W,"LI",{});var dIe=s(g2);Q_e=n(dIe,"STRONG",{});var _0t=s(Q_e);mjo=r(_0t,"xlnet"),_0t.forEach(t),gjo=r(dIe," \u2014 "),xX=n(dIe,"A",{href:!0});var u0t=s(xX);hjo=r(u0t,"XLNetLMHeadModel"),u0t.forEach(t),pjo=r(dIe," (XLNet model)"),dIe.forEach(t),W.forEach(t),_jo=i(pa),h2=n(pa,"P",{});var cIe=s(h2);ujo=r(cIe,"The model is set in evaluation mode by default using "),U_e=n(cIe,"CODE",{});var b0t=s(U_e);bjo=r(b0t,"model.eval()"),b0t.forEach(t),vjo=r(cIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(cIe,"CODE",{});var v0t=s(H_e);Fjo=r(v0t,"model.train()"),v0t.forEach(t),cIe.forEach(t),Tjo=i(pa),T(p2.$$.fragment,pa),pa.forEach(t),_l.forEach(t),bUe=i(f),fd=n(f,"H2",{class:!0});var yJe=s(fd);_2=n(yJe,"A",{id:!0,class:!0,href:!0});var F0t=s(_2);J_e=n(F0t,"SPAN",{});var T0t=s(J_e);T(a9.$$.fragment,T0t),T0t.forEach(t),F0t.forEach(t),Mjo=i(yJe),Y_e=n(yJe,"SPAN",{});var M0t=s(Y_e);Ejo=r(M0t,"AutoModelForMaskedLM"),M0t.forEach(t),yJe.forEach(t),vUe=i(f),Bo=n(f,"DIV",{class:!0});var ul=s(Bo);T(n9.$$.fragment,ul),Cjo=i(ul),md=n(ul,"P",{});var Kae=s(md);wjo=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$X=n(Kae,"A",{href:!0});var E0t=s($X);Ajo=r(E0t,"from_pretrained()"),E0t.forEach(t),Ljo=r(Kae," class method or the "),kX=n(Kae,"A",{href:!0});var C0t=s(kX);yjo=r(C0t,"from_config()"),C0t.forEach(t),xjo=r(Kae,` class
method.`),Kae.forEach(t),$jo=i(ul),s9=n(ul,"P",{});var xJe=s(s9);kjo=r(xJe,"This class cannot be instantiated directly using "),K_e=n(xJe,"CODE",{});var w0t=s(K_e);Sjo=r(w0t,"__init__()"),w0t.forEach(t),Rjo=r(xJe," (throws an error)."),xJe.forEach(t),Pjo=i(ul),pt=n(ul,"DIV",{class:!0});var M7=s(pt);T(l9.$$.fragment,M7),Bjo=i(M7),Z_e=n(M7,"P",{});var A0t=s(Z_e);Ijo=r(A0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A0t.forEach(t),Njo=i(M7),gd=n(M7,"P",{});var Zae=s(gd);qjo=r(Zae,`Note:
Loading a model from its configuration file does `),eue=n(Zae,"STRONG",{});var L0t=s(eue);jjo=r(L0t,"not"),L0t.forEach(t),Djo=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(Zae,"A",{href:!0});var y0t=s(SX);Gjo=r(y0t,"from_pretrained()"),y0t.forEach(t),Ojo=r(Zae," to load the model weights."),Zae.forEach(t),Vjo=i(M7),T(u2.$$.fragment,M7),M7.forEach(t),Xjo=i(ul),oo=n(ul,"DIV",{class:!0});var _a=s(oo);T(i9.$$.fragment,_a),zjo=i(_a),oue=n(_a,"P",{});var x0t=s(oue);Wjo=r(x0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),x0t.forEach(t),Qjo=i(_a),Wa=n(_a,"P",{});var E7=s(Wa);Ujo=r(E7,"The model class to instantiate is selected based on the "),rue=n(E7,"CODE",{});var $0t=s(rue);Hjo=r($0t,"model_type"),$0t.forEach(t),Jjo=r(E7,` property of the config object (either
passed as an argument or loaded from `),tue=n(E7,"CODE",{});var k0t=s(tue);Yjo=r(k0t,"pretrained_model_name_or_path"),k0t.forEach(t),Kjo=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(E7,"CODE",{});var S0t=s(aue);Zjo=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),eDo=r(E7,":"),E7.forEach(t),oDo=i(_a),U=n(_a,"UL",{});var Y=s(U);b2=n(Y,"LI",{});var fIe=s(b2);nue=n(fIe,"STRONG",{});var R0t=s(nue);rDo=r(R0t,"albert"),R0t.forEach(t),tDo=r(fIe," \u2014 "),RX=n(fIe,"A",{href:!0});var P0t=s(RX);aDo=r(P0t,"AlbertForMaskedLM"),P0t.forEach(t),nDo=r(fIe," (ALBERT model)"),fIe.forEach(t),sDo=i(Y),v2=n(Y,"LI",{});var mIe=s(v2);sue=n(mIe,"STRONG",{});var B0t=s(sue);lDo=r(B0t,"bart"),B0t.forEach(t),iDo=r(mIe," \u2014 "),PX=n(mIe,"A",{href:!0});var I0t=s(PX);dDo=r(I0t,"BartForConditionalGeneration"),I0t.forEach(t),cDo=r(mIe," (BART model)"),mIe.forEach(t),fDo=i(Y),F2=n(Y,"LI",{});var gIe=s(F2);lue=n(gIe,"STRONG",{});var N0t=s(lue);mDo=r(N0t,"bert"),N0t.forEach(t),gDo=r(gIe," \u2014 "),BX=n(gIe,"A",{href:!0});var q0t=s(BX);hDo=r(q0t,"BertForMaskedLM"),q0t.forEach(t),pDo=r(gIe," (BERT model)"),gIe.forEach(t),_Do=i(Y),T2=n(Y,"LI",{});var hIe=s(T2);iue=n(hIe,"STRONG",{});var j0t=s(iue);uDo=r(j0t,"big_bird"),j0t.forEach(t),bDo=r(hIe," \u2014 "),IX=n(hIe,"A",{href:!0});var D0t=s(IX);vDo=r(D0t,"BigBirdForMaskedLM"),D0t.forEach(t),FDo=r(hIe," (BigBird model)"),hIe.forEach(t),TDo=i(Y),M2=n(Y,"LI",{});var pIe=s(M2);due=n(pIe,"STRONG",{});var G0t=s(due);MDo=r(G0t,"camembert"),G0t.forEach(t),EDo=r(pIe," \u2014 "),NX=n(pIe,"A",{href:!0});var O0t=s(NX);CDo=r(O0t,"CamembertForMaskedLM"),O0t.forEach(t),wDo=r(pIe," (CamemBERT model)"),pIe.forEach(t),ADo=i(Y),E2=n(Y,"LI",{});var _Ie=s(E2);cue=n(_Ie,"STRONG",{});var V0t=s(cue);LDo=r(V0t,"convbert"),V0t.forEach(t),yDo=r(_Ie," \u2014 "),qX=n(_Ie,"A",{href:!0});var X0t=s(qX);xDo=r(X0t,"ConvBertForMaskedLM"),X0t.forEach(t),$Do=r(_Ie," (ConvBERT model)"),_Ie.forEach(t),kDo=i(Y),C2=n(Y,"LI",{});var uIe=s(C2);fue=n(uIe,"STRONG",{});var z0t=s(fue);SDo=r(z0t,"data2vec-text"),z0t.forEach(t),RDo=r(uIe," \u2014 "),jX=n(uIe,"A",{href:!0});var W0t=s(jX);PDo=r(W0t,"Data2VecTextForMaskedLM"),W0t.forEach(t),BDo=r(uIe," (Data2VecText model)"),uIe.forEach(t),IDo=i(Y),w2=n(Y,"LI",{});var bIe=s(w2);mue=n(bIe,"STRONG",{});var Q0t=s(mue);NDo=r(Q0t,"deberta"),Q0t.forEach(t),qDo=r(bIe," \u2014 "),DX=n(bIe,"A",{href:!0});var U0t=s(DX);jDo=r(U0t,"DebertaForMaskedLM"),U0t.forEach(t),DDo=r(bIe," (DeBERTa model)"),bIe.forEach(t),GDo=i(Y),A2=n(Y,"LI",{});var vIe=s(A2);gue=n(vIe,"STRONG",{});var H0t=s(gue);ODo=r(H0t,"deberta-v2"),H0t.forEach(t),VDo=r(vIe," \u2014 "),GX=n(vIe,"A",{href:!0});var J0t=s(GX);XDo=r(J0t,"DebertaV2ForMaskedLM"),J0t.forEach(t),zDo=r(vIe," (DeBERTa-v2 model)"),vIe.forEach(t),WDo=i(Y),L2=n(Y,"LI",{});var FIe=s(L2);hue=n(FIe,"STRONG",{});var Y0t=s(hue);QDo=r(Y0t,"distilbert"),Y0t.forEach(t),UDo=r(FIe," \u2014 "),OX=n(FIe,"A",{href:!0});var K0t=s(OX);HDo=r(K0t,"DistilBertForMaskedLM"),K0t.forEach(t),JDo=r(FIe," (DistilBERT model)"),FIe.forEach(t),YDo=i(Y),y2=n(Y,"LI",{});var TIe=s(y2);pue=n(TIe,"STRONG",{});var Z0t=s(pue);KDo=r(Z0t,"electra"),Z0t.forEach(t),ZDo=r(TIe," \u2014 "),VX=n(TIe,"A",{href:!0});var ewt=s(VX);eGo=r(ewt,"ElectraForMaskedLM"),ewt.forEach(t),oGo=r(TIe," (ELECTRA model)"),TIe.forEach(t),rGo=i(Y),x2=n(Y,"LI",{});var MIe=s(x2);_ue=n(MIe,"STRONG",{});var owt=s(_ue);tGo=r(owt,"flaubert"),owt.forEach(t),aGo=r(MIe," \u2014 "),XX=n(MIe,"A",{href:!0});var rwt=s(XX);nGo=r(rwt,"FlaubertWithLMHeadModel"),rwt.forEach(t),sGo=r(MIe," (FlauBERT model)"),MIe.forEach(t),lGo=i(Y),$2=n(Y,"LI",{});var EIe=s($2);uue=n(EIe,"STRONG",{});var twt=s(uue);iGo=r(twt,"fnet"),twt.forEach(t),dGo=r(EIe," \u2014 "),zX=n(EIe,"A",{href:!0});var awt=s(zX);cGo=r(awt,"FNetForMaskedLM"),awt.forEach(t),fGo=r(EIe," (FNet model)"),EIe.forEach(t),mGo=i(Y),k2=n(Y,"LI",{});var CIe=s(k2);bue=n(CIe,"STRONG",{});var nwt=s(bue);gGo=r(nwt,"funnel"),nwt.forEach(t),hGo=r(CIe," \u2014 "),WX=n(CIe,"A",{href:!0});var swt=s(WX);pGo=r(swt,"FunnelForMaskedLM"),swt.forEach(t),_Go=r(CIe," (Funnel Transformer model)"),CIe.forEach(t),uGo=i(Y),S2=n(Y,"LI",{});var wIe=s(S2);vue=n(wIe,"STRONG",{});var lwt=s(vue);bGo=r(lwt,"ibert"),lwt.forEach(t),vGo=r(wIe," \u2014 "),QX=n(wIe,"A",{href:!0});var iwt=s(QX);FGo=r(iwt,"IBertForMaskedLM"),iwt.forEach(t),TGo=r(wIe," (I-BERT model)"),wIe.forEach(t),MGo=i(Y),R2=n(Y,"LI",{});var AIe=s(R2);Fue=n(AIe,"STRONG",{});var dwt=s(Fue);EGo=r(dwt,"layoutlm"),dwt.forEach(t),CGo=r(AIe," \u2014 "),UX=n(AIe,"A",{href:!0});var cwt=s(UX);wGo=r(cwt,"LayoutLMForMaskedLM"),cwt.forEach(t),AGo=r(AIe," (LayoutLM model)"),AIe.forEach(t),LGo=i(Y),P2=n(Y,"LI",{});var LIe=s(P2);Tue=n(LIe,"STRONG",{});var fwt=s(Tue);yGo=r(fwt,"longformer"),fwt.forEach(t),xGo=r(LIe," \u2014 "),HX=n(LIe,"A",{href:!0});var mwt=s(HX);$Go=r(mwt,"LongformerForMaskedLM"),mwt.forEach(t),kGo=r(LIe," (Longformer model)"),LIe.forEach(t),SGo=i(Y),B2=n(Y,"LI",{});var yIe=s(B2);Mue=n(yIe,"STRONG",{});var gwt=s(Mue);RGo=r(gwt,"luke"),gwt.forEach(t),PGo=r(yIe," \u2014 "),JX=n(yIe,"A",{href:!0});var hwt=s(JX);BGo=r(hwt,"LukeForMaskedLM"),hwt.forEach(t),IGo=r(yIe," (LUKE model)"),yIe.forEach(t),NGo=i(Y),I2=n(Y,"LI",{});var xIe=s(I2);Eue=n(xIe,"STRONG",{});var pwt=s(Eue);qGo=r(pwt,"mbart"),pwt.forEach(t),jGo=r(xIe," \u2014 "),YX=n(xIe,"A",{href:!0});var _wt=s(YX);DGo=r(_wt,"MBartForConditionalGeneration"),_wt.forEach(t),GGo=r(xIe," (mBART model)"),xIe.forEach(t),OGo=i(Y),N2=n(Y,"LI",{});var $Ie=s(N2);Cue=n($Ie,"STRONG",{});var uwt=s(Cue);VGo=r(uwt,"megatron-bert"),uwt.forEach(t),XGo=r($Ie," \u2014 "),KX=n($Ie,"A",{href:!0});var bwt=s(KX);zGo=r(bwt,"MegatronBertForMaskedLM"),bwt.forEach(t),WGo=r($Ie," (Megatron-BERT model)"),$Ie.forEach(t),QGo=i(Y),q2=n(Y,"LI",{});var kIe=s(q2);wue=n(kIe,"STRONG",{});var vwt=s(wue);UGo=r(vwt,"mobilebert"),vwt.forEach(t),HGo=r(kIe," \u2014 "),ZX=n(kIe,"A",{href:!0});var Fwt=s(ZX);JGo=r(Fwt,"MobileBertForMaskedLM"),Fwt.forEach(t),YGo=r(kIe," (MobileBERT model)"),kIe.forEach(t),KGo=i(Y),j2=n(Y,"LI",{});var SIe=s(j2);Aue=n(SIe,"STRONG",{});var Twt=s(Aue);ZGo=r(Twt,"mpnet"),Twt.forEach(t),eOo=r(SIe," \u2014 "),ez=n(SIe,"A",{href:!0});var Mwt=s(ez);oOo=r(Mwt,"MPNetForMaskedLM"),Mwt.forEach(t),rOo=r(SIe," (MPNet model)"),SIe.forEach(t),tOo=i(Y),D2=n(Y,"LI",{});var RIe=s(D2);Lue=n(RIe,"STRONG",{});var Ewt=s(Lue);aOo=r(Ewt,"mvp"),Ewt.forEach(t),nOo=r(RIe," \u2014 "),oz=n(RIe,"A",{href:!0});var Cwt=s(oz);sOo=r(Cwt,"MvpForConditionalGeneration"),Cwt.forEach(t),lOo=r(RIe," (MVP model)"),RIe.forEach(t),iOo=i(Y),G2=n(Y,"LI",{});var PIe=s(G2);yue=n(PIe,"STRONG",{});var wwt=s(yue);dOo=r(wwt,"nezha"),wwt.forEach(t),cOo=r(PIe," \u2014 "),rz=n(PIe,"A",{href:!0});var Awt=s(rz);fOo=r(Awt,"NezhaForMaskedLM"),Awt.forEach(t),mOo=r(PIe," (Nezha model)"),PIe.forEach(t),gOo=i(Y),O2=n(Y,"LI",{});var BIe=s(O2);xue=n(BIe,"STRONG",{});var Lwt=s(xue);hOo=r(Lwt,"nystromformer"),Lwt.forEach(t),pOo=r(BIe," \u2014 "),tz=n(BIe,"A",{href:!0});var ywt=s(tz);_Oo=r(ywt,"NystromformerForMaskedLM"),ywt.forEach(t),uOo=r(BIe," (Nystr\xF6mformer model)"),BIe.forEach(t),bOo=i(Y),V2=n(Y,"LI",{});var IIe=s(V2);$ue=n(IIe,"STRONG",{});var xwt=s($ue);vOo=r(xwt,"perceiver"),xwt.forEach(t),FOo=r(IIe," \u2014 "),az=n(IIe,"A",{href:!0});var $wt=s(az);TOo=r($wt,"PerceiverForMaskedLM"),$wt.forEach(t),MOo=r(IIe," (Perceiver model)"),IIe.forEach(t),EOo=i(Y),X2=n(Y,"LI",{});var NIe=s(X2);kue=n(NIe,"STRONG",{});var kwt=s(kue);COo=r(kwt,"qdqbert"),kwt.forEach(t),wOo=r(NIe," \u2014 "),nz=n(NIe,"A",{href:!0});var Swt=s(nz);AOo=r(Swt,"QDQBertForMaskedLM"),Swt.forEach(t),LOo=r(NIe," (QDQBert model)"),NIe.forEach(t),yOo=i(Y),z2=n(Y,"LI",{});var qIe=s(z2);Sue=n(qIe,"STRONG",{});var Rwt=s(Sue);xOo=r(Rwt,"reformer"),Rwt.forEach(t),$Oo=r(qIe," \u2014 "),sz=n(qIe,"A",{href:!0});var Pwt=s(sz);kOo=r(Pwt,"ReformerForMaskedLM"),Pwt.forEach(t),SOo=r(qIe," (Reformer model)"),qIe.forEach(t),ROo=i(Y),W2=n(Y,"LI",{});var jIe=s(W2);Rue=n(jIe,"STRONG",{});var Bwt=s(Rue);POo=r(Bwt,"rembert"),Bwt.forEach(t),BOo=r(jIe," \u2014 "),lz=n(jIe,"A",{href:!0});var Iwt=s(lz);IOo=r(Iwt,"RemBertForMaskedLM"),Iwt.forEach(t),NOo=r(jIe," (RemBERT model)"),jIe.forEach(t),qOo=i(Y),Q2=n(Y,"LI",{});var DIe=s(Q2);Pue=n(DIe,"STRONG",{});var Nwt=s(Pue);jOo=r(Nwt,"roberta"),Nwt.forEach(t),DOo=r(DIe," \u2014 "),iz=n(DIe,"A",{href:!0});var qwt=s(iz);GOo=r(qwt,"RobertaForMaskedLM"),qwt.forEach(t),OOo=r(DIe," (RoBERTa model)"),DIe.forEach(t),VOo=i(Y),U2=n(Y,"LI",{});var GIe=s(U2);Bue=n(GIe,"STRONG",{});var jwt=s(Bue);XOo=r(jwt,"roformer"),jwt.forEach(t),zOo=r(GIe," \u2014 "),dz=n(GIe,"A",{href:!0});var Dwt=s(dz);WOo=r(Dwt,"RoFormerForMaskedLM"),Dwt.forEach(t),QOo=r(GIe," (RoFormer model)"),GIe.forEach(t),UOo=i(Y),H2=n(Y,"LI",{});var OIe=s(H2);Iue=n(OIe,"STRONG",{});var Gwt=s(Iue);HOo=r(Gwt,"squeezebert"),Gwt.forEach(t),JOo=r(OIe," \u2014 "),cz=n(OIe,"A",{href:!0});var Owt=s(cz);YOo=r(Owt,"SqueezeBertForMaskedLM"),Owt.forEach(t),KOo=r(OIe," (SqueezeBERT model)"),OIe.forEach(t),ZOo=i(Y),J2=n(Y,"LI",{});var VIe=s(J2);Nue=n(VIe,"STRONG",{});var Vwt=s(Nue);eVo=r(Vwt,"tapas"),Vwt.forEach(t),oVo=r(VIe," \u2014 "),fz=n(VIe,"A",{href:!0});var Xwt=s(fz);rVo=r(Xwt,"TapasForMaskedLM"),Xwt.forEach(t),tVo=r(VIe," (TAPAS model)"),VIe.forEach(t),aVo=i(Y),Y2=n(Y,"LI",{});var XIe=s(Y2);que=n(XIe,"STRONG",{});var zwt=s(que);nVo=r(zwt,"wav2vec2"),zwt.forEach(t),sVo=r(XIe," \u2014 "),jue=n(XIe,"CODE",{});var Wwt=s(jue);lVo=r(Wwt,"Wav2Vec2ForMaskedLM"),Wwt.forEach(t),iVo=r(XIe," (Wav2Vec2 model)"),XIe.forEach(t),dVo=i(Y),K2=n(Y,"LI",{});var zIe=s(K2);Due=n(zIe,"STRONG",{});var Qwt=s(Due);cVo=r(Qwt,"xlm"),Qwt.forEach(t),fVo=r(zIe," \u2014 "),mz=n(zIe,"A",{href:!0});var Uwt=s(mz);mVo=r(Uwt,"XLMWithLMHeadModel"),Uwt.forEach(t),gVo=r(zIe," (XLM model)"),zIe.forEach(t),hVo=i(Y),Z2=n(Y,"LI",{});var WIe=s(Z2);Gue=n(WIe,"STRONG",{});var Hwt=s(Gue);pVo=r(Hwt,"xlm-roberta"),Hwt.forEach(t),_Vo=r(WIe," \u2014 "),gz=n(WIe,"A",{href:!0});var Jwt=s(gz);uVo=r(Jwt,"XLMRobertaForMaskedLM"),Jwt.forEach(t),bVo=r(WIe," (XLM-RoBERTa model)"),WIe.forEach(t),vVo=i(Y),eb=n(Y,"LI",{});var QIe=s(eb);Oue=n(QIe,"STRONG",{});var Ywt=s(Oue);FVo=r(Ywt,"xlm-roberta-xl"),Ywt.forEach(t),TVo=r(QIe," \u2014 "),hz=n(QIe,"A",{href:!0});var Kwt=s(hz);MVo=r(Kwt,"XLMRobertaXLForMaskedLM"),Kwt.forEach(t),EVo=r(QIe," (XLM-RoBERTa-XL model)"),QIe.forEach(t),CVo=i(Y),ob=n(Y,"LI",{});var UIe=s(ob);Vue=n(UIe,"STRONG",{});var Zwt=s(Vue);wVo=r(Zwt,"yoso"),Zwt.forEach(t),AVo=r(UIe," \u2014 "),pz=n(UIe,"A",{href:!0});var e6t=s(pz);LVo=r(e6t,"YosoForMaskedLM"),e6t.forEach(t),yVo=r(UIe," (YOSO model)"),UIe.forEach(t),Y.forEach(t),xVo=i(_a),rb=n(_a,"P",{});var HIe=s(rb);$Vo=r(HIe,"The model is set in evaluation mode by default using "),Xue=n(HIe,"CODE",{});var o6t=s(Xue);kVo=r(o6t,"model.eval()"),o6t.forEach(t),SVo=r(HIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(HIe,"CODE",{});var r6t=s(zue);RVo=r(r6t,"model.train()"),r6t.forEach(t),HIe.forEach(t),PVo=i(_a),T(tb.$$.fragment,_a),_a.forEach(t),ul.forEach(t),FUe=i(f),hd=n(f,"H2",{class:!0});var $Je=s(hd);ab=n($Je,"A",{id:!0,class:!0,href:!0});var t6t=s(ab);Wue=n(t6t,"SPAN",{});var a6t=s(Wue);T(d9.$$.fragment,a6t),a6t.forEach(t),t6t.forEach(t),BVo=i($Je),Que=n($Je,"SPAN",{});var n6t=s(Que);IVo=r(n6t,"AutoModelForSeq2SeqLM"),n6t.forEach(t),$Je.forEach(t),TUe=i(f),Io=n(f,"DIV",{class:!0});var bl=s(Io);T(c9.$$.fragment,bl),NVo=i(bl),pd=n(bl,"P",{});var ene=s(pd);qVo=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_z=n(ene,"A",{href:!0});var s6t=s(_z);jVo=r(s6t,"from_pretrained()"),s6t.forEach(t),DVo=r(ene," class method or the "),uz=n(ene,"A",{href:!0});var l6t=s(uz);GVo=r(l6t,"from_config()"),l6t.forEach(t),OVo=r(ene,` class
method.`),ene.forEach(t),VVo=i(bl),f9=n(bl,"P",{});var kJe=s(f9);XVo=r(kJe,"This class cannot be instantiated directly using "),Uue=n(kJe,"CODE",{});var i6t=s(Uue);zVo=r(i6t,"__init__()"),i6t.forEach(t),WVo=r(kJe," (throws an error)."),kJe.forEach(t),QVo=i(bl),_t=n(bl,"DIV",{class:!0});var C7=s(_t);T(m9.$$.fragment,C7),UVo=i(C7),Hue=n(C7,"P",{});var d6t=s(Hue);HVo=r(d6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),d6t.forEach(t),JVo=i(C7),_d=n(C7,"P",{});var one=s(_d);YVo=r(one,`Note:
Loading a model from its configuration file does `),Jue=n(one,"STRONG",{});var c6t=s(Jue);KVo=r(c6t,"not"),c6t.forEach(t),ZVo=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(one,"A",{href:!0});var f6t=s(bz);eXo=r(f6t,"from_pretrained()"),f6t.forEach(t),oXo=r(one," to load the model weights."),one.forEach(t),rXo=i(C7),T(nb.$$.fragment,C7),C7.forEach(t),tXo=i(bl),ro=n(bl,"DIV",{class:!0});var ua=s(ro);T(g9.$$.fragment,ua),aXo=i(ua),Yue=n(ua,"P",{});var m6t=s(Yue);nXo=r(m6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m6t.forEach(t),sXo=i(ua),Qa=n(ua,"P",{});var w7=s(Qa);lXo=r(w7,"The model class to instantiate is selected based on the "),Kue=n(w7,"CODE",{});var g6t=s(Kue);iXo=r(g6t,"model_type"),g6t.forEach(t),dXo=r(w7,` property of the config object (either
passed as an argument or loaded from `),Zue=n(w7,"CODE",{});var h6t=s(Zue);cXo=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),fXo=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=n(w7,"CODE",{});var p6t=s(e5e);mXo=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),gXo=r(w7,":"),w7.forEach(t),hXo=i(ua),me=n(ua,"UL",{});var ue=s(me);sb=n(ue,"LI",{});var JIe=s(sb);o5e=n(JIe,"STRONG",{});var _6t=s(o5e);pXo=r(_6t,"bart"),_6t.forEach(t),_Xo=r(JIe," \u2014 "),vz=n(JIe,"A",{href:!0});var u6t=s(vz);uXo=r(u6t,"BartForConditionalGeneration"),u6t.forEach(t),bXo=r(JIe," (BART model)"),JIe.forEach(t),vXo=i(ue),lb=n(ue,"LI",{});var YIe=s(lb);r5e=n(YIe,"STRONG",{});var b6t=s(r5e);FXo=r(b6t,"bigbird_pegasus"),b6t.forEach(t),TXo=r(YIe," \u2014 "),Fz=n(YIe,"A",{href:!0});var v6t=s(Fz);MXo=r(v6t,"BigBirdPegasusForConditionalGeneration"),v6t.forEach(t),EXo=r(YIe," (BigBird-Pegasus model)"),YIe.forEach(t),CXo=i(ue),ib=n(ue,"LI",{});var KIe=s(ib);t5e=n(KIe,"STRONG",{});var F6t=s(t5e);wXo=r(F6t,"blenderbot"),F6t.forEach(t),AXo=r(KIe," \u2014 "),Tz=n(KIe,"A",{href:!0});var T6t=s(Tz);LXo=r(T6t,"BlenderbotForConditionalGeneration"),T6t.forEach(t),yXo=r(KIe," (Blenderbot model)"),KIe.forEach(t),xXo=i(ue),db=n(ue,"LI",{});var ZIe=s(db);a5e=n(ZIe,"STRONG",{});var M6t=s(a5e);$Xo=r(M6t,"blenderbot-small"),M6t.forEach(t),kXo=r(ZIe," \u2014 "),Mz=n(ZIe,"A",{href:!0});var E6t=s(Mz);SXo=r(E6t,"BlenderbotSmallForConditionalGeneration"),E6t.forEach(t),RXo=r(ZIe," (BlenderbotSmall model)"),ZIe.forEach(t),PXo=i(ue),cb=n(ue,"LI",{});var eNe=s(cb);n5e=n(eNe,"STRONG",{});var C6t=s(n5e);BXo=r(C6t,"encoder-decoder"),C6t.forEach(t),IXo=r(eNe," \u2014 "),Ez=n(eNe,"A",{href:!0});var w6t=s(Ez);NXo=r(w6t,"EncoderDecoderModel"),w6t.forEach(t),qXo=r(eNe," (Encoder decoder model)"),eNe.forEach(t),jXo=i(ue),fb=n(ue,"LI",{});var oNe=s(fb);s5e=n(oNe,"STRONG",{});var A6t=s(s5e);DXo=r(A6t,"fsmt"),A6t.forEach(t),GXo=r(oNe," \u2014 "),Cz=n(oNe,"A",{href:!0});var L6t=s(Cz);OXo=r(L6t,"FSMTForConditionalGeneration"),L6t.forEach(t),VXo=r(oNe," (FairSeq Machine-Translation model)"),oNe.forEach(t),XXo=i(ue),mb=n(ue,"LI",{});var rNe=s(mb);l5e=n(rNe,"STRONG",{});var y6t=s(l5e);zXo=r(y6t,"led"),y6t.forEach(t),WXo=r(rNe," \u2014 "),wz=n(rNe,"A",{href:!0});var x6t=s(wz);QXo=r(x6t,"LEDForConditionalGeneration"),x6t.forEach(t),UXo=r(rNe," (LED model)"),rNe.forEach(t),HXo=i(ue),gb=n(ue,"LI",{});var tNe=s(gb);i5e=n(tNe,"STRONG",{});var $6t=s(i5e);JXo=r($6t,"longt5"),$6t.forEach(t),YXo=r(tNe," \u2014 "),Az=n(tNe,"A",{href:!0});var k6t=s(Az);KXo=r(k6t,"LongT5ForConditionalGeneration"),k6t.forEach(t),ZXo=r(tNe," (LongT5 model)"),tNe.forEach(t),ezo=i(ue),hb=n(ue,"LI",{});var aNe=s(hb);d5e=n(aNe,"STRONG",{});var S6t=s(d5e);ozo=r(S6t,"m2m_100"),S6t.forEach(t),rzo=r(aNe," \u2014 "),Lz=n(aNe,"A",{href:!0});var R6t=s(Lz);tzo=r(R6t,"M2M100ForConditionalGeneration"),R6t.forEach(t),azo=r(aNe," (M2M100 model)"),aNe.forEach(t),nzo=i(ue),pb=n(ue,"LI",{});var nNe=s(pb);c5e=n(nNe,"STRONG",{});var P6t=s(c5e);szo=r(P6t,"marian"),P6t.forEach(t),lzo=r(nNe," \u2014 "),yz=n(nNe,"A",{href:!0});var B6t=s(yz);izo=r(B6t,"MarianMTModel"),B6t.forEach(t),dzo=r(nNe," (Marian model)"),nNe.forEach(t),czo=i(ue),_b=n(ue,"LI",{});var sNe=s(_b);f5e=n(sNe,"STRONG",{});var I6t=s(f5e);fzo=r(I6t,"mbart"),I6t.forEach(t),mzo=r(sNe," \u2014 "),xz=n(sNe,"A",{href:!0});var N6t=s(xz);gzo=r(N6t,"MBartForConditionalGeneration"),N6t.forEach(t),hzo=r(sNe," (mBART model)"),sNe.forEach(t),pzo=i(ue),ub=n(ue,"LI",{});var lNe=s(ub);m5e=n(lNe,"STRONG",{});var q6t=s(m5e);_zo=r(q6t,"mt5"),q6t.forEach(t),uzo=r(lNe," \u2014 "),$z=n(lNe,"A",{href:!0});var j6t=s($z);bzo=r(j6t,"MT5ForConditionalGeneration"),j6t.forEach(t),vzo=r(lNe," (MT5 model)"),lNe.forEach(t),Fzo=i(ue),bb=n(ue,"LI",{});var iNe=s(bb);g5e=n(iNe,"STRONG",{});var D6t=s(g5e);Tzo=r(D6t,"mvp"),D6t.forEach(t),Mzo=r(iNe," \u2014 "),kz=n(iNe,"A",{href:!0});var G6t=s(kz);Ezo=r(G6t,"MvpForConditionalGeneration"),G6t.forEach(t),Czo=r(iNe," (MVP model)"),iNe.forEach(t),wzo=i(ue),vb=n(ue,"LI",{});var dNe=s(vb);h5e=n(dNe,"STRONG",{});var O6t=s(h5e);Azo=r(O6t,"nllb"),O6t.forEach(t),Lzo=r(dNe," \u2014 "),Sz=n(dNe,"A",{href:!0});var V6t=s(Sz);yzo=r(V6t,"M2M100ForConditionalGeneration"),V6t.forEach(t),xzo=r(dNe," (NLLB model)"),dNe.forEach(t),$zo=i(ue),Fb=n(ue,"LI",{});var cNe=s(Fb);p5e=n(cNe,"STRONG",{});var X6t=s(p5e);kzo=r(X6t,"pegasus"),X6t.forEach(t),Szo=r(cNe," \u2014 "),Rz=n(cNe,"A",{href:!0});var z6t=s(Rz);Rzo=r(z6t,"PegasusForConditionalGeneration"),z6t.forEach(t),Pzo=r(cNe," (Pegasus model)"),cNe.forEach(t),Bzo=i(ue),Tb=n(ue,"LI",{});var fNe=s(Tb);_5e=n(fNe,"STRONG",{});var W6t=s(_5e);Izo=r(W6t,"plbart"),W6t.forEach(t),Nzo=r(fNe," \u2014 "),Pz=n(fNe,"A",{href:!0});var Q6t=s(Pz);qzo=r(Q6t,"PLBartForConditionalGeneration"),Q6t.forEach(t),jzo=r(fNe," (PLBart model)"),fNe.forEach(t),Dzo=i(ue),Mb=n(ue,"LI",{});var mNe=s(Mb);u5e=n(mNe,"STRONG",{});var U6t=s(u5e);Gzo=r(U6t,"prophetnet"),U6t.forEach(t),Ozo=r(mNe," \u2014 "),Bz=n(mNe,"A",{href:!0});var H6t=s(Bz);Vzo=r(H6t,"ProphetNetForConditionalGeneration"),H6t.forEach(t),Xzo=r(mNe," (ProphetNet model)"),mNe.forEach(t),zzo=i(ue),Eb=n(ue,"LI",{});var gNe=s(Eb);b5e=n(gNe,"STRONG",{});var J6t=s(b5e);Wzo=r(J6t,"t5"),J6t.forEach(t),Qzo=r(gNe," \u2014 "),Iz=n(gNe,"A",{href:!0});var Y6t=s(Iz);Uzo=r(Y6t,"T5ForConditionalGeneration"),Y6t.forEach(t),Hzo=r(gNe," (T5 model)"),gNe.forEach(t),Jzo=i(ue),Cb=n(ue,"LI",{});var hNe=s(Cb);v5e=n(hNe,"STRONG",{});var K6t=s(v5e);Yzo=r(K6t,"xlm-prophetnet"),K6t.forEach(t),Kzo=r(hNe," \u2014 "),Nz=n(hNe,"A",{href:!0});var Z6t=s(Nz);Zzo=r(Z6t,"XLMProphetNetForConditionalGeneration"),Z6t.forEach(t),eWo=r(hNe," (XLM-ProphetNet model)"),hNe.forEach(t),ue.forEach(t),oWo=i(ua),wb=n(ua,"P",{});var pNe=s(wb);rWo=r(pNe,"The model is set in evaluation mode by default using "),F5e=n(pNe,"CODE",{});var eAt=s(F5e);tWo=r(eAt,"model.eval()"),eAt.forEach(t),aWo=r(pNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T5e=n(pNe,"CODE",{});var oAt=s(T5e);nWo=r(oAt,"model.train()"),oAt.forEach(t),pNe.forEach(t),sWo=i(ua),T(Ab.$$.fragment,ua),ua.forEach(t),bl.forEach(t),MUe=i(f),ud=n(f,"H2",{class:!0});var SJe=s(ud);Lb=n(SJe,"A",{id:!0,class:!0,href:!0});var rAt=s(Lb);M5e=n(rAt,"SPAN",{});var tAt=s(M5e);T(h9.$$.fragment,tAt),tAt.forEach(t),rAt.forEach(t),lWo=i(SJe),E5e=n(SJe,"SPAN",{});var aAt=s(E5e);iWo=r(aAt,"AutoModelForSequenceClassification"),aAt.forEach(t),SJe.forEach(t),EUe=i(f),No=n(f,"DIV",{class:!0});var vl=s(No);T(p9.$$.fragment,vl),dWo=i(vl),bd=n(vl,"P",{});var rne=s(bd);cWo=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qz=n(rne,"A",{href:!0});var nAt=s(qz);fWo=r(nAt,"from_pretrained()"),nAt.forEach(t),mWo=r(rne," class method or the "),jz=n(rne,"A",{href:!0});var sAt=s(jz);gWo=r(sAt,"from_config()"),sAt.forEach(t),hWo=r(rne,` class
method.`),rne.forEach(t),pWo=i(vl),_9=n(vl,"P",{});var RJe=s(_9);_Wo=r(RJe,"This class cannot be instantiated directly using "),C5e=n(RJe,"CODE",{});var lAt=s(C5e);uWo=r(lAt,"__init__()"),lAt.forEach(t),bWo=r(RJe," (throws an error)."),RJe.forEach(t),vWo=i(vl),ut=n(vl,"DIV",{class:!0});var A7=s(ut);T(u9.$$.fragment,A7),FWo=i(A7),w5e=n(A7,"P",{});var iAt=s(w5e);TWo=r(iAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iAt.forEach(t),MWo=i(A7),vd=n(A7,"P",{});var tne=s(vd);EWo=r(tne,`Note:
Loading a model from its configuration file does `),A5e=n(tne,"STRONG",{});var dAt=s(A5e);CWo=r(dAt,"not"),dAt.forEach(t),wWo=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(tne,"A",{href:!0});var cAt=s(Dz);AWo=r(cAt,"from_pretrained()"),cAt.forEach(t),LWo=r(tne," to load the model weights."),tne.forEach(t),yWo=i(A7),T(yb.$$.fragment,A7),A7.forEach(t),xWo=i(vl),to=n(vl,"DIV",{class:!0});var ba=s(to);T(b9.$$.fragment,ba),$Wo=i(ba),L5e=n(ba,"P",{});var fAt=s(L5e);kWo=r(fAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fAt.forEach(t),SWo=i(ba),Ua=n(ba,"P",{});var L7=s(Ua);RWo=r(L7,"The model class to instantiate is selected based on the "),y5e=n(L7,"CODE",{});var mAt=s(y5e);PWo=r(mAt,"model_type"),mAt.forEach(t),BWo=r(L7,` property of the config object (either
passed as an argument or loaded from `),x5e=n(L7,"CODE",{});var gAt=s(x5e);IWo=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),NWo=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(L7,"CODE",{});var hAt=s($5e);qWo=r(hAt,"pretrained_model_name_or_path"),hAt.forEach(t),jWo=r(L7,":"),L7.forEach(t),DWo=i(ba),N=n(ba,"UL",{});var j=s(N);xb=n(j,"LI",{});var _Ne=s(xb);k5e=n(_Ne,"STRONG",{});var pAt=s(k5e);GWo=r(pAt,"albert"),pAt.forEach(t),OWo=r(_Ne," \u2014 "),Gz=n(_Ne,"A",{href:!0});var _At=s(Gz);VWo=r(_At,"AlbertForSequenceClassification"),_At.forEach(t),XWo=r(_Ne," (ALBERT model)"),_Ne.forEach(t),zWo=i(j),$b=n(j,"LI",{});var uNe=s($b);S5e=n(uNe,"STRONG",{});var uAt=s(S5e);WWo=r(uAt,"bart"),uAt.forEach(t),QWo=r(uNe," \u2014 "),Oz=n(uNe,"A",{href:!0});var bAt=s(Oz);UWo=r(bAt,"BartForSequenceClassification"),bAt.forEach(t),HWo=r(uNe," (BART model)"),uNe.forEach(t),JWo=i(j),kb=n(j,"LI",{});var bNe=s(kb);R5e=n(bNe,"STRONG",{});var vAt=s(R5e);YWo=r(vAt,"bert"),vAt.forEach(t),KWo=r(bNe," \u2014 "),Vz=n(bNe,"A",{href:!0});var FAt=s(Vz);ZWo=r(FAt,"BertForSequenceClassification"),FAt.forEach(t),eQo=r(bNe," (BERT model)"),bNe.forEach(t),oQo=i(j),Sb=n(j,"LI",{});var vNe=s(Sb);P5e=n(vNe,"STRONG",{});var TAt=s(P5e);rQo=r(TAt,"big_bird"),TAt.forEach(t),tQo=r(vNe," \u2014 "),Xz=n(vNe,"A",{href:!0});var MAt=s(Xz);aQo=r(MAt,"BigBirdForSequenceClassification"),MAt.forEach(t),nQo=r(vNe," (BigBird model)"),vNe.forEach(t),sQo=i(j),Rb=n(j,"LI",{});var FNe=s(Rb);B5e=n(FNe,"STRONG",{});var EAt=s(B5e);lQo=r(EAt,"bigbird_pegasus"),EAt.forEach(t),iQo=r(FNe," \u2014 "),zz=n(FNe,"A",{href:!0});var CAt=s(zz);dQo=r(CAt,"BigBirdPegasusForSequenceClassification"),CAt.forEach(t),cQo=r(FNe," (BigBird-Pegasus model)"),FNe.forEach(t),fQo=i(j),Pb=n(j,"LI",{});var TNe=s(Pb);I5e=n(TNe,"STRONG",{});var wAt=s(I5e);mQo=r(wAt,"bloom"),wAt.forEach(t),gQo=r(TNe," \u2014 "),Wz=n(TNe,"A",{href:!0});var AAt=s(Wz);hQo=r(AAt,"BloomForSequenceClassification"),AAt.forEach(t),pQo=r(TNe," (BLOOM model)"),TNe.forEach(t),_Qo=i(j),Bb=n(j,"LI",{});var MNe=s(Bb);N5e=n(MNe,"STRONG",{});var LAt=s(N5e);uQo=r(LAt,"camembert"),LAt.forEach(t),bQo=r(MNe," \u2014 "),Qz=n(MNe,"A",{href:!0});var yAt=s(Qz);vQo=r(yAt,"CamembertForSequenceClassification"),yAt.forEach(t),FQo=r(MNe," (CamemBERT model)"),MNe.forEach(t),TQo=i(j),Ib=n(j,"LI",{});var ENe=s(Ib);q5e=n(ENe,"STRONG",{});var xAt=s(q5e);MQo=r(xAt,"canine"),xAt.forEach(t),EQo=r(ENe," \u2014 "),Uz=n(ENe,"A",{href:!0});var $At=s(Uz);CQo=r($At,"CanineForSequenceClassification"),$At.forEach(t),wQo=r(ENe," (CANINE model)"),ENe.forEach(t),AQo=i(j),Nb=n(j,"LI",{});var CNe=s(Nb);j5e=n(CNe,"STRONG",{});var kAt=s(j5e);LQo=r(kAt,"convbert"),kAt.forEach(t),yQo=r(CNe," \u2014 "),Hz=n(CNe,"A",{href:!0});var SAt=s(Hz);xQo=r(SAt,"ConvBertForSequenceClassification"),SAt.forEach(t),$Qo=r(CNe," (ConvBERT model)"),CNe.forEach(t),kQo=i(j),qb=n(j,"LI",{});var wNe=s(qb);D5e=n(wNe,"STRONG",{});var RAt=s(D5e);SQo=r(RAt,"ctrl"),RAt.forEach(t),RQo=r(wNe," \u2014 "),Jz=n(wNe,"A",{href:!0});var PAt=s(Jz);PQo=r(PAt,"CTRLForSequenceClassification"),PAt.forEach(t),BQo=r(wNe," (CTRL model)"),wNe.forEach(t),IQo=i(j),jb=n(j,"LI",{});var ANe=s(jb);G5e=n(ANe,"STRONG",{});var BAt=s(G5e);NQo=r(BAt,"data2vec-text"),BAt.forEach(t),qQo=r(ANe," \u2014 "),Yz=n(ANe,"A",{href:!0});var IAt=s(Yz);jQo=r(IAt,"Data2VecTextForSequenceClassification"),IAt.forEach(t),DQo=r(ANe," (Data2VecText model)"),ANe.forEach(t),GQo=i(j),Db=n(j,"LI",{});var LNe=s(Db);O5e=n(LNe,"STRONG",{});var NAt=s(O5e);OQo=r(NAt,"deberta"),NAt.forEach(t),VQo=r(LNe," \u2014 "),Kz=n(LNe,"A",{href:!0});var qAt=s(Kz);XQo=r(qAt,"DebertaForSequenceClassification"),qAt.forEach(t),zQo=r(LNe," (DeBERTa model)"),LNe.forEach(t),WQo=i(j),Gb=n(j,"LI",{});var yNe=s(Gb);V5e=n(yNe,"STRONG",{});var jAt=s(V5e);QQo=r(jAt,"deberta-v2"),jAt.forEach(t),UQo=r(yNe," \u2014 "),Zz=n(yNe,"A",{href:!0});var DAt=s(Zz);HQo=r(DAt,"DebertaV2ForSequenceClassification"),DAt.forEach(t),JQo=r(yNe," (DeBERTa-v2 model)"),yNe.forEach(t),YQo=i(j),Ob=n(j,"LI",{});var xNe=s(Ob);X5e=n(xNe,"STRONG",{});var GAt=s(X5e);KQo=r(GAt,"distilbert"),GAt.forEach(t),ZQo=r(xNe," \u2014 "),eW=n(xNe,"A",{href:!0});var OAt=s(eW);eUo=r(OAt,"DistilBertForSequenceClassification"),OAt.forEach(t),oUo=r(xNe," (DistilBERT model)"),xNe.forEach(t),rUo=i(j),Vb=n(j,"LI",{});var $Ne=s(Vb);z5e=n($Ne,"STRONG",{});var VAt=s(z5e);tUo=r(VAt,"electra"),VAt.forEach(t),aUo=r($Ne," \u2014 "),oW=n($Ne,"A",{href:!0});var XAt=s(oW);nUo=r(XAt,"ElectraForSequenceClassification"),XAt.forEach(t),sUo=r($Ne," (ELECTRA model)"),$Ne.forEach(t),lUo=i(j),Xb=n(j,"LI",{});var kNe=s(Xb);W5e=n(kNe,"STRONG",{});var zAt=s(W5e);iUo=r(zAt,"flaubert"),zAt.forEach(t),dUo=r(kNe," \u2014 "),rW=n(kNe,"A",{href:!0});var WAt=s(rW);cUo=r(WAt,"FlaubertForSequenceClassification"),WAt.forEach(t),fUo=r(kNe," (FlauBERT model)"),kNe.forEach(t),mUo=i(j),zb=n(j,"LI",{});var SNe=s(zb);Q5e=n(SNe,"STRONG",{});var QAt=s(Q5e);gUo=r(QAt,"fnet"),QAt.forEach(t),hUo=r(SNe," \u2014 "),tW=n(SNe,"A",{href:!0});var UAt=s(tW);pUo=r(UAt,"FNetForSequenceClassification"),UAt.forEach(t),_Uo=r(SNe," (FNet model)"),SNe.forEach(t),uUo=i(j),Wb=n(j,"LI",{});var RNe=s(Wb);U5e=n(RNe,"STRONG",{});var HAt=s(U5e);bUo=r(HAt,"funnel"),HAt.forEach(t),vUo=r(RNe," \u2014 "),aW=n(RNe,"A",{href:!0});var JAt=s(aW);FUo=r(JAt,"FunnelForSequenceClassification"),JAt.forEach(t),TUo=r(RNe," (Funnel Transformer model)"),RNe.forEach(t),MUo=i(j),Qb=n(j,"LI",{});var PNe=s(Qb);H5e=n(PNe,"STRONG",{});var YAt=s(H5e);EUo=r(YAt,"gpt2"),YAt.forEach(t),CUo=r(PNe," \u2014 "),nW=n(PNe,"A",{href:!0});var KAt=s(nW);wUo=r(KAt,"GPT2ForSequenceClassification"),KAt.forEach(t),AUo=r(PNe," (OpenAI GPT-2 model)"),PNe.forEach(t),LUo=i(j),Ub=n(j,"LI",{});var BNe=s(Ub);J5e=n(BNe,"STRONG",{});var ZAt=s(J5e);yUo=r(ZAt,"gpt_neo"),ZAt.forEach(t),xUo=r(BNe," \u2014 "),sW=n(BNe,"A",{href:!0});var e7t=s(sW);$Uo=r(e7t,"GPTNeoForSequenceClassification"),e7t.forEach(t),kUo=r(BNe," (GPT Neo model)"),BNe.forEach(t),SUo=i(j),Hb=n(j,"LI",{});var INe=s(Hb);Y5e=n(INe,"STRONG",{});var o7t=s(Y5e);RUo=r(o7t,"gptj"),o7t.forEach(t),PUo=r(INe," \u2014 "),lW=n(INe,"A",{href:!0});var r7t=s(lW);BUo=r(r7t,"GPTJForSequenceClassification"),r7t.forEach(t),IUo=r(INe," (GPT-J model)"),INe.forEach(t),NUo=i(j),Jb=n(j,"LI",{});var NNe=s(Jb);K5e=n(NNe,"STRONG",{});var t7t=s(K5e);qUo=r(t7t,"ibert"),t7t.forEach(t),jUo=r(NNe," \u2014 "),iW=n(NNe,"A",{href:!0});var a7t=s(iW);DUo=r(a7t,"IBertForSequenceClassification"),a7t.forEach(t),GUo=r(NNe," (I-BERT model)"),NNe.forEach(t),OUo=i(j),Yb=n(j,"LI",{});var qNe=s(Yb);Z5e=n(qNe,"STRONG",{});var n7t=s(Z5e);VUo=r(n7t,"layoutlm"),n7t.forEach(t),XUo=r(qNe," \u2014 "),dW=n(qNe,"A",{href:!0});var s7t=s(dW);zUo=r(s7t,"LayoutLMForSequenceClassification"),s7t.forEach(t),WUo=r(qNe," (LayoutLM model)"),qNe.forEach(t),QUo=i(j),Kb=n(j,"LI",{});var jNe=s(Kb);e1e=n(jNe,"STRONG",{});var l7t=s(e1e);UUo=r(l7t,"layoutlmv2"),l7t.forEach(t),HUo=r(jNe," \u2014 "),cW=n(jNe,"A",{href:!0});var i7t=s(cW);JUo=r(i7t,"LayoutLMv2ForSequenceClassification"),i7t.forEach(t),YUo=r(jNe," (LayoutLMv2 model)"),jNe.forEach(t),KUo=i(j),Zb=n(j,"LI",{});var DNe=s(Zb);o1e=n(DNe,"STRONG",{});var d7t=s(o1e);ZUo=r(d7t,"layoutlmv3"),d7t.forEach(t),eHo=r(DNe," \u2014 "),fW=n(DNe,"A",{href:!0});var c7t=s(fW);oHo=r(c7t,"LayoutLMv3ForSequenceClassification"),c7t.forEach(t),rHo=r(DNe," (LayoutLMv3 model)"),DNe.forEach(t),tHo=i(j),ev=n(j,"LI",{});var GNe=s(ev);r1e=n(GNe,"STRONG",{});var f7t=s(r1e);aHo=r(f7t,"led"),f7t.forEach(t),nHo=r(GNe," \u2014 "),mW=n(GNe,"A",{href:!0});var m7t=s(mW);sHo=r(m7t,"LEDForSequenceClassification"),m7t.forEach(t),lHo=r(GNe," (LED model)"),GNe.forEach(t),iHo=i(j),ov=n(j,"LI",{});var ONe=s(ov);t1e=n(ONe,"STRONG",{});var g7t=s(t1e);dHo=r(g7t,"longformer"),g7t.forEach(t),cHo=r(ONe," \u2014 "),gW=n(ONe,"A",{href:!0});var h7t=s(gW);fHo=r(h7t,"LongformerForSequenceClassification"),h7t.forEach(t),mHo=r(ONe," (Longformer model)"),ONe.forEach(t),gHo=i(j),rv=n(j,"LI",{});var VNe=s(rv);a1e=n(VNe,"STRONG",{});var p7t=s(a1e);hHo=r(p7t,"luke"),p7t.forEach(t),pHo=r(VNe," \u2014 "),hW=n(VNe,"A",{href:!0});var _7t=s(hW);_Ho=r(_7t,"LukeForSequenceClassification"),_7t.forEach(t),uHo=r(VNe," (LUKE model)"),VNe.forEach(t),bHo=i(j),tv=n(j,"LI",{});var XNe=s(tv);n1e=n(XNe,"STRONG",{});var u7t=s(n1e);vHo=r(u7t,"mbart"),u7t.forEach(t),FHo=r(XNe," \u2014 "),pW=n(XNe,"A",{href:!0});var b7t=s(pW);THo=r(b7t,"MBartForSequenceClassification"),b7t.forEach(t),MHo=r(XNe," (mBART model)"),XNe.forEach(t),EHo=i(j),av=n(j,"LI",{});var zNe=s(av);s1e=n(zNe,"STRONG",{});var v7t=s(s1e);CHo=r(v7t,"megatron-bert"),v7t.forEach(t),wHo=r(zNe," \u2014 "),_W=n(zNe,"A",{href:!0});var F7t=s(_W);AHo=r(F7t,"MegatronBertForSequenceClassification"),F7t.forEach(t),LHo=r(zNe," (Megatron-BERT model)"),zNe.forEach(t),yHo=i(j),nv=n(j,"LI",{});var WNe=s(nv);l1e=n(WNe,"STRONG",{});var T7t=s(l1e);xHo=r(T7t,"mobilebert"),T7t.forEach(t),$Ho=r(WNe," \u2014 "),uW=n(WNe,"A",{href:!0});var M7t=s(uW);kHo=r(M7t,"MobileBertForSequenceClassification"),M7t.forEach(t),SHo=r(WNe," (MobileBERT model)"),WNe.forEach(t),RHo=i(j),sv=n(j,"LI",{});var QNe=s(sv);i1e=n(QNe,"STRONG",{});var E7t=s(i1e);PHo=r(E7t,"mpnet"),E7t.forEach(t),BHo=r(QNe," \u2014 "),bW=n(QNe,"A",{href:!0});var C7t=s(bW);IHo=r(C7t,"MPNetForSequenceClassification"),C7t.forEach(t),NHo=r(QNe," (MPNet model)"),QNe.forEach(t),qHo=i(j),lv=n(j,"LI",{});var UNe=s(lv);d1e=n(UNe,"STRONG",{});var w7t=s(d1e);jHo=r(w7t,"mvp"),w7t.forEach(t),DHo=r(UNe," \u2014 "),vW=n(UNe,"A",{href:!0});var A7t=s(vW);GHo=r(A7t,"MvpForSequenceClassification"),A7t.forEach(t),OHo=r(UNe," (MVP model)"),UNe.forEach(t),VHo=i(j),iv=n(j,"LI",{});var HNe=s(iv);c1e=n(HNe,"STRONG",{});var L7t=s(c1e);XHo=r(L7t,"nezha"),L7t.forEach(t),zHo=r(HNe," \u2014 "),FW=n(HNe,"A",{href:!0});var y7t=s(FW);WHo=r(y7t,"NezhaForSequenceClassification"),y7t.forEach(t),QHo=r(HNe," (Nezha model)"),HNe.forEach(t),UHo=i(j),dv=n(j,"LI",{});var JNe=s(dv);f1e=n(JNe,"STRONG",{});var x7t=s(f1e);HHo=r(x7t,"nystromformer"),x7t.forEach(t),JHo=r(JNe," \u2014 "),TW=n(JNe,"A",{href:!0});var $7t=s(TW);YHo=r($7t,"NystromformerForSequenceClassification"),$7t.forEach(t),KHo=r(JNe," (Nystr\xF6mformer model)"),JNe.forEach(t),ZHo=i(j),cv=n(j,"LI",{});var YNe=s(cv);m1e=n(YNe,"STRONG",{});var k7t=s(m1e);eJo=r(k7t,"openai-gpt"),k7t.forEach(t),oJo=r(YNe," \u2014 "),MW=n(YNe,"A",{href:!0});var S7t=s(MW);rJo=r(S7t,"OpenAIGPTForSequenceClassification"),S7t.forEach(t),tJo=r(YNe," (OpenAI GPT model)"),YNe.forEach(t),aJo=i(j),fv=n(j,"LI",{});var KNe=s(fv);g1e=n(KNe,"STRONG",{});var R7t=s(g1e);nJo=r(R7t,"opt"),R7t.forEach(t),sJo=r(KNe," \u2014 "),EW=n(KNe,"A",{href:!0});var P7t=s(EW);lJo=r(P7t,"OPTForSequenceClassification"),P7t.forEach(t),iJo=r(KNe," (OPT model)"),KNe.forEach(t),dJo=i(j),mv=n(j,"LI",{});var ZNe=s(mv);h1e=n(ZNe,"STRONG",{});var B7t=s(h1e);cJo=r(B7t,"perceiver"),B7t.forEach(t),fJo=r(ZNe," \u2014 "),CW=n(ZNe,"A",{href:!0});var I7t=s(CW);mJo=r(I7t,"PerceiverForSequenceClassification"),I7t.forEach(t),gJo=r(ZNe," (Perceiver model)"),ZNe.forEach(t),hJo=i(j),gv=n(j,"LI",{});var eqe=s(gv);p1e=n(eqe,"STRONG",{});var N7t=s(p1e);pJo=r(N7t,"plbart"),N7t.forEach(t),_Jo=r(eqe," \u2014 "),wW=n(eqe,"A",{href:!0});var q7t=s(wW);uJo=r(q7t,"PLBartForSequenceClassification"),q7t.forEach(t),bJo=r(eqe," (PLBart model)"),eqe.forEach(t),vJo=i(j),hv=n(j,"LI",{});var oqe=s(hv);_1e=n(oqe,"STRONG",{});var j7t=s(_1e);FJo=r(j7t,"qdqbert"),j7t.forEach(t),TJo=r(oqe," \u2014 "),AW=n(oqe,"A",{href:!0});var D7t=s(AW);MJo=r(D7t,"QDQBertForSequenceClassification"),D7t.forEach(t),EJo=r(oqe," (QDQBert model)"),oqe.forEach(t),CJo=i(j),pv=n(j,"LI",{});var rqe=s(pv);u1e=n(rqe,"STRONG",{});var G7t=s(u1e);wJo=r(G7t,"reformer"),G7t.forEach(t),AJo=r(rqe," \u2014 "),LW=n(rqe,"A",{href:!0});var O7t=s(LW);LJo=r(O7t,"ReformerForSequenceClassification"),O7t.forEach(t),yJo=r(rqe," (Reformer model)"),rqe.forEach(t),xJo=i(j),_v=n(j,"LI",{});var tqe=s(_v);b1e=n(tqe,"STRONG",{});var V7t=s(b1e);$Jo=r(V7t,"rembert"),V7t.forEach(t),kJo=r(tqe," \u2014 "),yW=n(tqe,"A",{href:!0});var X7t=s(yW);SJo=r(X7t,"RemBertForSequenceClassification"),X7t.forEach(t),RJo=r(tqe," (RemBERT model)"),tqe.forEach(t),PJo=i(j),uv=n(j,"LI",{});var aqe=s(uv);v1e=n(aqe,"STRONG",{});var z7t=s(v1e);BJo=r(z7t,"roberta"),z7t.forEach(t),IJo=r(aqe," \u2014 "),xW=n(aqe,"A",{href:!0});var W7t=s(xW);NJo=r(W7t,"RobertaForSequenceClassification"),W7t.forEach(t),qJo=r(aqe," (RoBERTa model)"),aqe.forEach(t),jJo=i(j),bv=n(j,"LI",{});var nqe=s(bv);F1e=n(nqe,"STRONG",{});var Q7t=s(F1e);DJo=r(Q7t,"roformer"),Q7t.forEach(t),GJo=r(nqe," \u2014 "),$W=n(nqe,"A",{href:!0});var U7t=s($W);OJo=r(U7t,"RoFormerForSequenceClassification"),U7t.forEach(t),VJo=r(nqe," (RoFormer model)"),nqe.forEach(t),XJo=i(j),vv=n(j,"LI",{});var sqe=s(vv);T1e=n(sqe,"STRONG",{});var H7t=s(T1e);zJo=r(H7t,"squeezebert"),H7t.forEach(t),WJo=r(sqe," \u2014 "),kW=n(sqe,"A",{href:!0});var J7t=s(kW);QJo=r(J7t,"SqueezeBertForSequenceClassification"),J7t.forEach(t),UJo=r(sqe," (SqueezeBERT model)"),sqe.forEach(t),HJo=i(j),Fv=n(j,"LI",{});var lqe=s(Fv);M1e=n(lqe,"STRONG",{});var Y7t=s(M1e);JJo=r(Y7t,"tapas"),Y7t.forEach(t),YJo=r(lqe," \u2014 "),SW=n(lqe,"A",{href:!0});var K7t=s(SW);KJo=r(K7t,"TapasForSequenceClassification"),K7t.forEach(t),ZJo=r(lqe," (TAPAS model)"),lqe.forEach(t),eYo=i(j),Tv=n(j,"LI",{});var iqe=s(Tv);E1e=n(iqe,"STRONG",{});var Z7t=s(E1e);oYo=r(Z7t,"transfo-xl"),Z7t.forEach(t),rYo=r(iqe," \u2014 "),RW=n(iqe,"A",{href:!0});var eLt=s(RW);tYo=r(eLt,"TransfoXLForSequenceClassification"),eLt.forEach(t),aYo=r(iqe," (Transformer-XL model)"),iqe.forEach(t),nYo=i(j),Mv=n(j,"LI",{});var dqe=s(Mv);C1e=n(dqe,"STRONG",{});var oLt=s(C1e);sYo=r(oLt,"xlm"),oLt.forEach(t),lYo=r(dqe," \u2014 "),PW=n(dqe,"A",{href:!0});var rLt=s(PW);iYo=r(rLt,"XLMForSequenceClassification"),rLt.forEach(t),dYo=r(dqe," (XLM model)"),dqe.forEach(t),cYo=i(j),Ev=n(j,"LI",{});var cqe=s(Ev);w1e=n(cqe,"STRONG",{});var tLt=s(w1e);fYo=r(tLt,"xlm-roberta"),tLt.forEach(t),mYo=r(cqe," \u2014 "),BW=n(cqe,"A",{href:!0});var aLt=s(BW);gYo=r(aLt,"XLMRobertaForSequenceClassification"),aLt.forEach(t),hYo=r(cqe," (XLM-RoBERTa model)"),cqe.forEach(t),pYo=i(j),Cv=n(j,"LI",{});var fqe=s(Cv);A1e=n(fqe,"STRONG",{});var nLt=s(A1e);_Yo=r(nLt,"xlm-roberta-xl"),nLt.forEach(t),uYo=r(fqe," \u2014 "),IW=n(fqe,"A",{href:!0});var sLt=s(IW);bYo=r(sLt,"XLMRobertaXLForSequenceClassification"),sLt.forEach(t),vYo=r(fqe," (XLM-RoBERTa-XL model)"),fqe.forEach(t),FYo=i(j),wv=n(j,"LI",{});var mqe=s(wv);L1e=n(mqe,"STRONG",{});var lLt=s(L1e);TYo=r(lLt,"xlnet"),lLt.forEach(t),MYo=r(mqe," \u2014 "),NW=n(mqe,"A",{href:!0});var iLt=s(NW);EYo=r(iLt,"XLNetForSequenceClassification"),iLt.forEach(t),CYo=r(mqe," (XLNet model)"),mqe.forEach(t),wYo=i(j),Av=n(j,"LI",{});var gqe=s(Av);y1e=n(gqe,"STRONG",{});var dLt=s(y1e);AYo=r(dLt,"yoso"),dLt.forEach(t),LYo=r(gqe," \u2014 "),qW=n(gqe,"A",{href:!0});var cLt=s(qW);yYo=r(cLt,"YosoForSequenceClassification"),cLt.forEach(t),xYo=r(gqe," (YOSO model)"),gqe.forEach(t),j.forEach(t),$Yo=i(ba),Lv=n(ba,"P",{});var hqe=s(Lv);kYo=r(hqe,"The model is set in evaluation mode by default using "),x1e=n(hqe,"CODE",{});var fLt=s(x1e);SYo=r(fLt,"model.eval()"),fLt.forEach(t),RYo=r(hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=n(hqe,"CODE",{});var mLt=s($1e);PYo=r(mLt,"model.train()"),mLt.forEach(t),hqe.forEach(t),BYo=i(ba),T(yv.$$.fragment,ba),ba.forEach(t),vl.forEach(t),CUe=i(f),Fd=n(f,"H2",{class:!0});var PJe=s(Fd);xv=n(PJe,"A",{id:!0,class:!0,href:!0});var gLt=s(xv);k1e=n(gLt,"SPAN",{});var hLt=s(k1e);T(v9.$$.fragment,hLt),hLt.forEach(t),gLt.forEach(t),IYo=i(PJe),S1e=n(PJe,"SPAN",{});var pLt=s(S1e);NYo=r(pLt,"AutoModelForMultipleChoice"),pLt.forEach(t),PJe.forEach(t),wUe=i(f),qo=n(f,"DIV",{class:!0});var Fl=s(qo);T(F9.$$.fragment,Fl),qYo=i(Fl),Td=n(Fl,"P",{});var ane=s(Td);jYo=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jW=n(ane,"A",{href:!0});var _Lt=s(jW);DYo=r(_Lt,"from_pretrained()"),_Lt.forEach(t),GYo=r(ane," class method or the "),DW=n(ane,"A",{href:!0});var uLt=s(DW);OYo=r(uLt,"from_config()"),uLt.forEach(t),VYo=r(ane,` class
method.`),ane.forEach(t),XYo=i(Fl),T9=n(Fl,"P",{});var BJe=s(T9);zYo=r(BJe,"This class cannot be instantiated directly using "),R1e=n(BJe,"CODE",{});var bLt=s(R1e);WYo=r(bLt,"__init__()"),bLt.forEach(t),QYo=r(BJe," (throws an error)."),BJe.forEach(t),UYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var y7=s(bt);T(M9.$$.fragment,y7),HYo=i(y7),P1e=n(y7,"P",{});var vLt=s(P1e);JYo=r(vLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vLt.forEach(t),YYo=i(y7),Md=n(y7,"P",{});var nne=s(Md);KYo=r(nne,`Note:
Loading a model from its configuration file does `),B1e=n(nne,"STRONG",{});var FLt=s(B1e);ZYo=r(FLt,"not"),FLt.forEach(t),eKo=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(nne,"A",{href:!0});var TLt=s(GW);oKo=r(TLt,"from_pretrained()"),TLt.forEach(t),rKo=r(nne," to load the model weights."),nne.forEach(t),tKo=i(y7),T($v.$$.fragment,y7),y7.forEach(t),aKo=i(Fl),ao=n(Fl,"DIV",{class:!0});var va=s(ao);T(E9.$$.fragment,va),nKo=i(va),I1e=n(va,"P",{});var MLt=s(I1e);sKo=r(MLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MLt.forEach(t),lKo=i(va),Ha=n(va,"P",{});var x7=s(Ha);iKo=r(x7,"The model class to instantiate is selected based on the "),N1e=n(x7,"CODE",{});var ELt=s(N1e);dKo=r(ELt,"model_type"),ELt.forEach(t),cKo=r(x7,` property of the config object (either
passed as an argument or loaded from `),q1e=n(x7,"CODE",{});var CLt=s(q1e);fKo=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),mKo=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(x7,"CODE",{});var wLt=s(j1e);gKo=r(wLt,"pretrained_model_name_or_path"),wLt.forEach(t),hKo=r(x7,":"),x7.forEach(t),pKo=i(va),Z=n(va,"UL",{});var ee=s(Z);kv=n(ee,"LI",{});var pqe=s(kv);D1e=n(pqe,"STRONG",{});var ALt=s(D1e);_Ko=r(ALt,"albert"),ALt.forEach(t),uKo=r(pqe," \u2014 "),OW=n(pqe,"A",{href:!0});var LLt=s(OW);bKo=r(LLt,"AlbertForMultipleChoice"),LLt.forEach(t),vKo=r(pqe," (ALBERT model)"),pqe.forEach(t),FKo=i(ee),Sv=n(ee,"LI",{});var _qe=s(Sv);G1e=n(_qe,"STRONG",{});var yLt=s(G1e);TKo=r(yLt,"bert"),yLt.forEach(t),MKo=r(_qe," \u2014 "),VW=n(_qe,"A",{href:!0});var xLt=s(VW);EKo=r(xLt,"BertForMultipleChoice"),xLt.forEach(t),CKo=r(_qe," (BERT model)"),_qe.forEach(t),wKo=i(ee),Rv=n(ee,"LI",{});var uqe=s(Rv);O1e=n(uqe,"STRONG",{});var $Lt=s(O1e);AKo=r($Lt,"big_bird"),$Lt.forEach(t),LKo=r(uqe," \u2014 "),XW=n(uqe,"A",{href:!0});var kLt=s(XW);yKo=r(kLt,"BigBirdForMultipleChoice"),kLt.forEach(t),xKo=r(uqe," (BigBird model)"),uqe.forEach(t),$Ko=i(ee),Pv=n(ee,"LI",{});var bqe=s(Pv);V1e=n(bqe,"STRONG",{});var SLt=s(V1e);kKo=r(SLt,"camembert"),SLt.forEach(t),SKo=r(bqe," \u2014 "),zW=n(bqe,"A",{href:!0});var RLt=s(zW);RKo=r(RLt,"CamembertForMultipleChoice"),RLt.forEach(t),PKo=r(bqe," (CamemBERT model)"),bqe.forEach(t),BKo=i(ee),Bv=n(ee,"LI",{});var vqe=s(Bv);X1e=n(vqe,"STRONG",{});var PLt=s(X1e);IKo=r(PLt,"canine"),PLt.forEach(t),NKo=r(vqe," \u2014 "),WW=n(vqe,"A",{href:!0});var BLt=s(WW);qKo=r(BLt,"CanineForMultipleChoice"),BLt.forEach(t),jKo=r(vqe," (CANINE model)"),vqe.forEach(t),DKo=i(ee),Iv=n(ee,"LI",{});var Fqe=s(Iv);z1e=n(Fqe,"STRONG",{});var ILt=s(z1e);GKo=r(ILt,"convbert"),ILt.forEach(t),OKo=r(Fqe," \u2014 "),QW=n(Fqe,"A",{href:!0});var NLt=s(QW);VKo=r(NLt,"ConvBertForMultipleChoice"),NLt.forEach(t),XKo=r(Fqe," (ConvBERT model)"),Fqe.forEach(t),zKo=i(ee),Nv=n(ee,"LI",{});var Tqe=s(Nv);W1e=n(Tqe,"STRONG",{});var qLt=s(W1e);WKo=r(qLt,"data2vec-text"),qLt.forEach(t),QKo=r(Tqe," \u2014 "),UW=n(Tqe,"A",{href:!0});var jLt=s(UW);UKo=r(jLt,"Data2VecTextForMultipleChoice"),jLt.forEach(t),HKo=r(Tqe," (Data2VecText model)"),Tqe.forEach(t),JKo=i(ee),qv=n(ee,"LI",{});var Mqe=s(qv);Q1e=n(Mqe,"STRONG",{});var DLt=s(Q1e);YKo=r(DLt,"deberta-v2"),DLt.forEach(t),KKo=r(Mqe," \u2014 "),HW=n(Mqe,"A",{href:!0});var GLt=s(HW);ZKo=r(GLt,"DebertaV2ForMultipleChoice"),GLt.forEach(t),eZo=r(Mqe," (DeBERTa-v2 model)"),Mqe.forEach(t),oZo=i(ee),jv=n(ee,"LI",{});var Eqe=s(jv);U1e=n(Eqe,"STRONG",{});var OLt=s(U1e);rZo=r(OLt,"distilbert"),OLt.forEach(t),tZo=r(Eqe," \u2014 "),JW=n(Eqe,"A",{href:!0});var VLt=s(JW);aZo=r(VLt,"DistilBertForMultipleChoice"),VLt.forEach(t),nZo=r(Eqe," (DistilBERT model)"),Eqe.forEach(t),sZo=i(ee),Dv=n(ee,"LI",{});var Cqe=s(Dv);H1e=n(Cqe,"STRONG",{});var XLt=s(H1e);lZo=r(XLt,"electra"),XLt.forEach(t),iZo=r(Cqe," \u2014 "),YW=n(Cqe,"A",{href:!0});var zLt=s(YW);dZo=r(zLt,"ElectraForMultipleChoice"),zLt.forEach(t),cZo=r(Cqe," (ELECTRA model)"),Cqe.forEach(t),fZo=i(ee),Gv=n(ee,"LI",{});var wqe=s(Gv);J1e=n(wqe,"STRONG",{});var WLt=s(J1e);mZo=r(WLt,"flaubert"),WLt.forEach(t),gZo=r(wqe," \u2014 "),KW=n(wqe,"A",{href:!0});var QLt=s(KW);hZo=r(QLt,"FlaubertForMultipleChoice"),QLt.forEach(t),pZo=r(wqe," (FlauBERT model)"),wqe.forEach(t),_Zo=i(ee),Ov=n(ee,"LI",{});var Aqe=s(Ov);Y1e=n(Aqe,"STRONG",{});var ULt=s(Y1e);uZo=r(ULt,"fnet"),ULt.forEach(t),bZo=r(Aqe," \u2014 "),ZW=n(Aqe,"A",{href:!0});var HLt=s(ZW);vZo=r(HLt,"FNetForMultipleChoice"),HLt.forEach(t),FZo=r(Aqe," (FNet model)"),Aqe.forEach(t),TZo=i(ee),Vv=n(ee,"LI",{});var Lqe=s(Vv);K1e=n(Lqe,"STRONG",{});var JLt=s(K1e);MZo=r(JLt,"funnel"),JLt.forEach(t),EZo=r(Lqe," \u2014 "),eQ=n(Lqe,"A",{href:!0});var YLt=s(eQ);CZo=r(YLt,"FunnelForMultipleChoice"),YLt.forEach(t),wZo=r(Lqe," (Funnel Transformer model)"),Lqe.forEach(t),AZo=i(ee),Xv=n(ee,"LI",{});var yqe=s(Xv);Z1e=n(yqe,"STRONG",{});var KLt=s(Z1e);LZo=r(KLt,"ibert"),KLt.forEach(t),yZo=r(yqe," \u2014 "),oQ=n(yqe,"A",{href:!0});var ZLt=s(oQ);xZo=r(ZLt,"IBertForMultipleChoice"),ZLt.forEach(t),$Zo=r(yqe," (I-BERT model)"),yqe.forEach(t),kZo=i(ee),zv=n(ee,"LI",{});var xqe=s(zv);e2e=n(xqe,"STRONG",{});var eyt=s(e2e);SZo=r(eyt,"longformer"),eyt.forEach(t),RZo=r(xqe," \u2014 "),rQ=n(xqe,"A",{href:!0});var oyt=s(rQ);PZo=r(oyt,"LongformerForMultipleChoice"),oyt.forEach(t),BZo=r(xqe," (Longformer model)"),xqe.forEach(t),IZo=i(ee),Wv=n(ee,"LI",{});var $qe=s(Wv);o2e=n($qe,"STRONG",{});var ryt=s(o2e);NZo=r(ryt,"luke"),ryt.forEach(t),qZo=r($qe," \u2014 "),tQ=n($qe,"A",{href:!0});var tyt=s(tQ);jZo=r(tyt,"LukeForMultipleChoice"),tyt.forEach(t),DZo=r($qe," (LUKE model)"),$qe.forEach(t),GZo=i(ee),Qv=n(ee,"LI",{});var kqe=s(Qv);r2e=n(kqe,"STRONG",{});var ayt=s(r2e);OZo=r(ayt,"megatron-bert"),ayt.forEach(t),VZo=r(kqe," \u2014 "),aQ=n(kqe,"A",{href:!0});var nyt=s(aQ);XZo=r(nyt,"MegatronBertForMultipleChoice"),nyt.forEach(t),zZo=r(kqe," (Megatron-BERT model)"),kqe.forEach(t),WZo=i(ee),Uv=n(ee,"LI",{});var Sqe=s(Uv);t2e=n(Sqe,"STRONG",{});var syt=s(t2e);QZo=r(syt,"mobilebert"),syt.forEach(t),UZo=r(Sqe," \u2014 "),nQ=n(Sqe,"A",{href:!0});var lyt=s(nQ);HZo=r(lyt,"MobileBertForMultipleChoice"),lyt.forEach(t),JZo=r(Sqe," (MobileBERT model)"),Sqe.forEach(t),YZo=i(ee),Hv=n(ee,"LI",{});var Rqe=s(Hv);a2e=n(Rqe,"STRONG",{});var iyt=s(a2e);KZo=r(iyt,"mpnet"),iyt.forEach(t),ZZo=r(Rqe," \u2014 "),sQ=n(Rqe,"A",{href:!0});var dyt=s(sQ);eer=r(dyt,"MPNetForMultipleChoice"),dyt.forEach(t),oer=r(Rqe," (MPNet model)"),Rqe.forEach(t),rer=i(ee),Jv=n(ee,"LI",{});var Pqe=s(Jv);n2e=n(Pqe,"STRONG",{});var cyt=s(n2e);ter=r(cyt,"nezha"),cyt.forEach(t),aer=r(Pqe," \u2014 "),lQ=n(Pqe,"A",{href:!0});var fyt=s(lQ);ner=r(fyt,"NezhaForMultipleChoice"),fyt.forEach(t),ser=r(Pqe," (Nezha model)"),Pqe.forEach(t),ler=i(ee),Yv=n(ee,"LI",{});var Bqe=s(Yv);s2e=n(Bqe,"STRONG",{});var myt=s(s2e);ier=r(myt,"nystromformer"),myt.forEach(t),der=r(Bqe," \u2014 "),iQ=n(Bqe,"A",{href:!0});var gyt=s(iQ);cer=r(gyt,"NystromformerForMultipleChoice"),gyt.forEach(t),fer=r(Bqe," (Nystr\xF6mformer model)"),Bqe.forEach(t),mer=i(ee),Kv=n(ee,"LI",{});var Iqe=s(Kv);l2e=n(Iqe,"STRONG",{});var hyt=s(l2e);ger=r(hyt,"qdqbert"),hyt.forEach(t),her=r(Iqe," \u2014 "),dQ=n(Iqe,"A",{href:!0});var pyt=s(dQ);per=r(pyt,"QDQBertForMultipleChoice"),pyt.forEach(t),_er=r(Iqe," (QDQBert model)"),Iqe.forEach(t),uer=i(ee),Zv=n(ee,"LI",{});var Nqe=s(Zv);i2e=n(Nqe,"STRONG",{});var _yt=s(i2e);ber=r(_yt,"rembert"),_yt.forEach(t),ver=r(Nqe," \u2014 "),cQ=n(Nqe,"A",{href:!0});var uyt=s(cQ);Fer=r(uyt,"RemBertForMultipleChoice"),uyt.forEach(t),Ter=r(Nqe," (RemBERT model)"),Nqe.forEach(t),Mer=i(ee),eF=n(ee,"LI",{});var qqe=s(eF);d2e=n(qqe,"STRONG",{});var byt=s(d2e);Eer=r(byt,"roberta"),byt.forEach(t),Cer=r(qqe," \u2014 "),fQ=n(qqe,"A",{href:!0});var vyt=s(fQ);wer=r(vyt,"RobertaForMultipleChoice"),vyt.forEach(t),Aer=r(qqe," (RoBERTa model)"),qqe.forEach(t),Ler=i(ee),oF=n(ee,"LI",{});var jqe=s(oF);c2e=n(jqe,"STRONG",{});var Fyt=s(c2e);yer=r(Fyt,"roformer"),Fyt.forEach(t),xer=r(jqe," \u2014 "),mQ=n(jqe,"A",{href:!0});var Tyt=s(mQ);$er=r(Tyt,"RoFormerForMultipleChoice"),Tyt.forEach(t),ker=r(jqe," (RoFormer model)"),jqe.forEach(t),Ser=i(ee),rF=n(ee,"LI",{});var Dqe=s(rF);f2e=n(Dqe,"STRONG",{});var Myt=s(f2e);Rer=r(Myt,"squeezebert"),Myt.forEach(t),Per=r(Dqe," \u2014 "),gQ=n(Dqe,"A",{href:!0});var Eyt=s(gQ);Ber=r(Eyt,"SqueezeBertForMultipleChoice"),Eyt.forEach(t),Ier=r(Dqe," (SqueezeBERT model)"),Dqe.forEach(t),Ner=i(ee),tF=n(ee,"LI",{});var Gqe=s(tF);m2e=n(Gqe,"STRONG",{});var Cyt=s(m2e);qer=r(Cyt,"xlm"),Cyt.forEach(t),jer=r(Gqe," \u2014 "),hQ=n(Gqe,"A",{href:!0});var wyt=s(hQ);Der=r(wyt,"XLMForMultipleChoice"),wyt.forEach(t),Ger=r(Gqe," (XLM model)"),Gqe.forEach(t),Oer=i(ee),aF=n(ee,"LI",{});var Oqe=s(aF);g2e=n(Oqe,"STRONG",{});var Ayt=s(g2e);Ver=r(Ayt,"xlm-roberta"),Ayt.forEach(t),Xer=r(Oqe," \u2014 "),pQ=n(Oqe,"A",{href:!0});var Lyt=s(pQ);zer=r(Lyt,"XLMRobertaForMultipleChoice"),Lyt.forEach(t),Wer=r(Oqe," (XLM-RoBERTa model)"),Oqe.forEach(t),Qer=i(ee),nF=n(ee,"LI",{});var Vqe=s(nF);h2e=n(Vqe,"STRONG",{});var yyt=s(h2e);Uer=r(yyt,"xlm-roberta-xl"),yyt.forEach(t),Her=r(Vqe," \u2014 "),_Q=n(Vqe,"A",{href:!0});var xyt=s(_Q);Jer=r(xyt,"XLMRobertaXLForMultipleChoice"),xyt.forEach(t),Yer=r(Vqe," (XLM-RoBERTa-XL model)"),Vqe.forEach(t),Ker=i(ee),sF=n(ee,"LI",{});var Xqe=s(sF);p2e=n(Xqe,"STRONG",{});var $yt=s(p2e);Zer=r($yt,"xlnet"),$yt.forEach(t),eor=r(Xqe," \u2014 "),uQ=n(Xqe,"A",{href:!0});var kyt=s(uQ);oor=r(kyt,"XLNetForMultipleChoice"),kyt.forEach(t),ror=r(Xqe," (XLNet model)"),Xqe.forEach(t),tor=i(ee),lF=n(ee,"LI",{});var zqe=s(lF);_2e=n(zqe,"STRONG",{});var Syt=s(_2e);aor=r(Syt,"yoso"),Syt.forEach(t),nor=r(zqe," \u2014 "),bQ=n(zqe,"A",{href:!0});var Ryt=s(bQ);sor=r(Ryt,"YosoForMultipleChoice"),Ryt.forEach(t),lor=r(zqe," (YOSO model)"),zqe.forEach(t),ee.forEach(t),ior=i(va),iF=n(va,"P",{});var Wqe=s(iF);dor=r(Wqe,"The model is set in evaluation mode by default using "),u2e=n(Wqe,"CODE",{});var Pyt=s(u2e);cor=r(Pyt,"model.eval()"),Pyt.forEach(t),mor=r(Wqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=n(Wqe,"CODE",{});var Byt=s(b2e);gor=r(Byt,"model.train()"),Byt.forEach(t),Wqe.forEach(t),hor=i(va),T(dF.$$.fragment,va),va.forEach(t),Fl.forEach(t),AUe=i(f),Ed=n(f,"H2",{class:!0});var IJe=s(Ed);cF=n(IJe,"A",{id:!0,class:!0,href:!0});var Iyt=s(cF);v2e=n(Iyt,"SPAN",{});var Nyt=s(v2e);T(C9.$$.fragment,Nyt),Nyt.forEach(t),Iyt.forEach(t),por=i(IJe),F2e=n(IJe,"SPAN",{});var qyt=s(F2e);_or=r(qyt,"AutoModelForNextSentencePrediction"),qyt.forEach(t),IJe.forEach(t),LUe=i(f),jo=n(f,"DIV",{class:!0});var Tl=s(jo);T(w9.$$.fragment,Tl),uor=i(Tl),Cd=n(Tl,"P",{});var sne=s(Cd);bor=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vQ=n(sne,"A",{href:!0});var jyt=s(vQ);vor=r(jyt,"from_pretrained()"),jyt.forEach(t),For=r(sne," class method or the "),FQ=n(sne,"A",{href:!0});var Dyt=s(FQ);Tor=r(Dyt,"from_config()"),Dyt.forEach(t),Mor=r(sne,` class
method.`),sne.forEach(t),Eor=i(Tl),A9=n(Tl,"P",{});var NJe=s(A9);Cor=r(NJe,"This class cannot be instantiated directly using "),T2e=n(NJe,"CODE",{});var Gyt=s(T2e);wor=r(Gyt,"__init__()"),Gyt.forEach(t),Aor=r(NJe," (throws an error)."),NJe.forEach(t),Lor=i(Tl),vt=n(Tl,"DIV",{class:!0});var $7=s(vt);T(L9.$$.fragment,$7),yor=i($7),M2e=n($7,"P",{});var Oyt=s(M2e);xor=r(Oyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oyt.forEach(t),$or=i($7),wd=n($7,"P",{});var lne=s(wd);kor=r(lne,`Note:
Loading a model from its configuration file does `),E2e=n(lne,"STRONG",{});var Vyt=s(E2e);Sor=r(Vyt,"not"),Vyt.forEach(t),Ror=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(lne,"A",{href:!0});var Xyt=s(TQ);Por=r(Xyt,"from_pretrained()"),Xyt.forEach(t),Bor=r(lne," to load the model weights."),lne.forEach(t),Ior=i($7),T(fF.$$.fragment,$7),$7.forEach(t),Nor=i(Tl),no=n(Tl,"DIV",{class:!0});var Fa=s(no);T(y9.$$.fragment,Fa),qor=i(Fa),C2e=n(Fa,"P",{});var zyt=s(C2e);jor=r(zyt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zyt.forEach(t),Dor=i(Fa),Ja=n(Fa,"P",{});var k7=s(Ja);Gor=r(k7,"The model class to instantiate is selected based on the "),w2e=n(k7,"CODE",{});var Wyt=s(w2e);Oor=r(Wyt,"model_type"),Wyt.forEach(t),Vor=r(k7,` property of the config object (either
passed as an argument or loaded from `),A2e=n(k7,"CODE",{});var Qyt=s(A2e);Xor=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),zor=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(k7,"CODE",{});var Uyt=s(L2e);Wor=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),Qor=r(k7,":"),k7.forEach(t),Uor=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);mF=n(Ta,"LI",{});var Qqe=s(mF);y2e=n(Qqe,"STRONG",{});var Hyt=s(y2e);Hor=r(Hyt,"bert"),Hyt.forEach(t),Jor=r(Qqe," \u2014 "),MQ=n(Qqe,"A",{href:!0});var Jyt=s(MQ);Yor=r(Jyt,"BertForNextSentencePrediction"),Jyt.forEach(t),Kor=r(Qqe," (BERT model)"),Qqe.forEach(t),Zor=i(Ta),gF=n(Ta,"LI",{});var Uqe=s(gF);x2e=n(Uqe,"STRONG",{});var Yyt=s(x2e);err=r(Yyt,"fnet"),Yyt.forEach(t),orr=r(Uqe," \u2014 "),EQ=n(Uqe,"A",{href:!0});var Kyt=s(EQ);rrr=r(Kyt,"FNetForNextSentencePrediction"),Kyt.forEach(t),trr=r(Uqe," (FNet model)"),Uqe.forEach(t),arr=i(Ta),hF=n(Ta,"LI",{});var Hqe=s(hF);$2e=n(Hqe,"STRONG",{});var Zyt=s($2e);nrr=r(Zyt,"megatron-bert"),Zyt.forEach(t),srr=r(Hqe," \u2014 "),CQ=n(Hqe,"A",{href:!0});var e9t=s(CQ);lrr=r(e9t,"MegatronBertForNextSentencePrediction"),e9t.forEach(t),irr=r(Hqe," (Megatron-BERT model)"),Hqe.forEach(t),drr=i(Ta),pF=n(Ta,"LI",{});var Jqe=s(pF);k2e=n(Jqe,"STRONG",{});var o9t=s(k2e);crr=r(o9t,"mobilebert"),o9t.forEach(t),frr=r(Jqe," \u2014 "),wQ=n(Jqe,"A",{href:!0});var r9t=s(wQ);mrr=r(r9t,"MobileBertForNextSentencePrediction"),r9t.forEach(t),grr=r(Jqe," (MobileBERT model)"),Jqe.forEach(t),hrr=i(Ta),_F=n(Ta,"LI",{});var Yqe=s(_F);S2e=n(Yqe,"STRONG",{});var t9t=s(S2e);prr=r(t9t,"nezha"),t9t.forEach(t),_rr=r(Yqe," \u2014 "),AQ=n(Yqe,"A",{href:!0});var a9t=s(AQ);urr=r(a9t,"NezhaForNextSentencePrediction"),a9t.forEach(t),brr=r(Yqe," (Nezha model)"),Yqe.forEach(t),vrr=i(Ta),uF=n(Ta,"LI",{});var Kqe=s(uF);R2e=n(Kqe,"STRONG",{});var n9t=s(R2e);Frr=r(n9t,"qdqbert"),n9t.forEach(t),Trr=r(Kqe," \u2014 "),LQ=n(Kqe,"A",{href:!0});var s9t=s(LQ);Mrr=r(s9t,"QDQBertForNextSentencePrediction"),s9t.forEach(t),Err=r(Kqe," (QDQBert model)"),Kqe.forEach(t),Ta.forEach(t),Crr=i(Fa),bF=n(Fa,"P",{});var Zqe=s(bF);wrr=r(Zqe,"The model is set in evaluation mode by default using "),P2e=n(Zqe,"CODE",{});var l9t=s(P2e);Arr=r(l9t,"model.eval()"),l9t.forEach(t),Lrr=r(Zqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(Zqe,"CODE",{});var i9t=s(B2e);yrr=r(i9t,"model.train()"),i9t.forEach(t),Zqe.forEach(t),xrr=i(Fa),T(vF.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),yUe=i(f),Ad=n(f,"H2",{class:!0});var qJe=s(Ad);FF=n(qJe,"A",{id:!0,class:!0,href:!0});var d9t=s(FF);I2e=n(d9t,"SPAN",{});var c9t=s(I2e);T(x9.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),$rr=i(qJe),N2e=n(qJe,"SPAN",{});var f9t=s(N2e);krr=r(f9t,"AutoModelForTokenClassification"),f9t.forEach(t),qJe.forEach(t),xUe=i(f),Go=n(f,"DIV",{class:!0});var Ml=s(Go);T($9.$$.fragment,Ml),Srr=i(Ml),Ld=n(Ml,"P",{});var ine=s(Ld);Rrr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yQ=n(ine,"A",{href:!0});var m9t=s(yQ);Prr=r(m9t,"from_pretrained()"),m9t.forEach(t),Brr=r(ine," class method or the "),xQ=n(ine,"A",{href:!0});var g9t=s(xQ);Irr=r(g9t,"from_config()"),g9t.forEach(t),Nrr=r(ine,` class
method.`),ine.forEach(t),qrr=i(Ml),k9=n(Ml,"P",{});var jJe=s(k9);jrr=r(jJe,"This class cannot be instantiated directly using "),q2e=n(jJe,"CODE",{});var h9t=s(q2e);Drr=r(h9t,"__init__()"),h9t.forEach(t),Grr=r(jJe," (throws an error)."),jJe.forEach(t),Orr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var S7=s(Ft);T(S9.$$.fragment,S7),Vrr=i(S7),j2e=n(S7,"P",{});var p9t=s(j2e);Xrr=r(p9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),p9t.forEach(t),zrr=i(S7),yd=n(S7,"P",{});var dne=s(yd);Wrr=r(dne,`Note:
Loading a model from its configuration file does `),D2e=n(dne,"STRONG",{});var _9t=s(D2e);Qrr=r(_9t,"not"),_9t.forEach(t),Urr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(dne,"A",{href:!0});var u9t=s($Q);Hrr=r(u9t,"from_pretrained()"),u9t.forEach(t),Jrr=r(dne," to load the model weights."),dne.forEach(t),Yrr=i(S7),T(TF.$$.fragment,S7),S7.forEach(t),Krr=i(Ml),so=n(Ml,"DIV",{class:!0});var Ma=s(so);T(R9.$$.fragment,Ma),Zrr=i(Ma),G2e=n(Ma,"P",{});var b9t=s(G2e);etr=r(b9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b9t.forEach(t),otr=i(Ma),Ya=n(Ma,"P",{});var R7=s(Ya);rtr=r(R7,"The model class to instantiate is selected based on the "),O2e=n(R7,"CODE",{});var v9t=s(O2e);ttr=r(v9t,"model_type"),v9t.forEach(t),atr=r(R7,` property of the config object (either
passed as an argument or loaded from `),V2e=n(R7,"CODE",{});var F9t=s(V2e);ntr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),str=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(R7,"CODE",{});var T9t=s(X2e);ltr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),itr=r(R7,":"),R7.forEach(t),dtr=i(Ma),H=n(Ma,"UL",{});var K=s(H);MF=n(K,"LI",{});var eje=s(MF);z2e=n(eje,"STRONG",{});var M9t=s(z2e);ctr=r(M9t,"albert"),M9t.forEach(t),ftr=r(eje," \u2014 "),kQ=n(eje,"A",{href:!0});var E9t=s(kQ);mtr=r(E9t,"AlbertForTokenClassification"),E9t.forEach(t),gtr=r(eje," (ALBERT model)"),eje.forEach(t),htr=i(K),EF=n(K,"LI",{});var oje=s(EF);W2e=n(oje,"STRONG",{});var C9t=s(W2e);ptr=r(C9t,"bert"),C9t.forEach(t),_tr=r(oje," \u2014 "),SQ=n(oje,"A",{href:!0});var w9t=s(SQ);utr=r(w9t,"BertForTokenClassification"),w9t.forEach(t),btr=r(oje," (BERT model)"),oje.forEach(t),vtr=i(K),CF=n(K,"LI",{});var rje=s(CF);Q2e=n(rje,"STRONG",{});var A9t=s(Q2e);Ftr=r(A9t,"big_bird"),A9t.forEach(t),Ttr=r(rje," \u2014 "),RQ=n(rje,"A",{href:!0});var L9t=s(RQ);Mtr=r(L9t,"BigBirdForTokenClassification"),L9t.forEach(t),Etr=r(rje," (BigBird model)"),rje.forEach(t),Ctr=i(K),wF=n(K,"LI",{});var tje=s(wF);U2e=n(tje,"STRONG",{});var y9t=s(U2e);wtr=r(y9t,"bloom"),y9t.forEach(t),Atr=r(tje," \u2014 "),PQ=n(tje,"A",{href:!0});var x9t=s(PQ);Ltr=r(x9t,"BloomForTokenClassification"),x9t.forEach(t),ytr=r(tje," (BLOOM model)"),tje.forEach(t),xtr=i(K),AF=n(K,"LI",{});var aje=s(AF);H2e=n(aje,"STRONG",{});var $9t=s(H2e);$tr=r($9t,"camembert"),$9t.forEach(t),ktr=r(aje," \u2014 "),BQ=n(aje,"A",{href:!0});var k9t=s(BQ);Str=r(k9t,"CamembertForTokenClassification"),k9t.forEach(t),Rtr=r(aje," (CamemBERT model)"),aje.forEach(t),Ptr=i(K),LF=n(K,"LI",{});var nje=s(LF);J2e=n(nje,"STRONG",{});var S9t=s(J2e);Btr=r(S9t,"canine"),S9t.forEach(t),Itr=r(nje," \u2014 "),IQ=n(nje,"A",{href:!0});var R9t=s(IQ);Ntr=r(R9t,"CanineForTokenClassification"),R9t.forEach(t),qtr=r(nje," (CANINE model)"),nje.forEach(t),jtr=i(K),yF=n(K,"LI",{});var sje=s(yF);Y2e=n(sje,"STRONG",{});var P9t=s(Y2e);Dtr=r(P9t,"convbert"),P9t.forEach(t),Gtr=r(sje," \u2014 "),NQ=n(sje,"A",{href:!0});var B9t=s(NQ);Otr=r(B9t,"ConvBertForTokenClassification"),B9t.forEach(t),Vtr=r(sje," (ConvBERT model)"),sje.forEach(t),Xtr=i(K),xF=n(K,"LI",{});var lje=s(xF);K2e=n(lje,"STRONG",{});var I9t=s(K2e);ztr=r(I9t,"data2vec-text"),I9t.forEach(t),Wtr=r(lje," \u2014 "),qQ=n(lje,"A",{href:!0});var N9t=s(qQ);Qtr=r(N9t,"Data2VecTextForTokenClassification"),N9t.forEach(t),Utr=r(lje," (Data2VecText model)"),lje.forEach(t),Htr=i(K),$F=n(K,"LI",{});var ije=s($F);Z2e=n(ije,"STRONG",{});var q9t=s(Z2e);Jtr=r(q9t,"deberta"),q9t.forEach(t),Ytr=r(ije," \u2014 "),jQ=n(ije,"A",{href:!0});var j9t=s(jQ);Ktr=r(j9t,"DebertaForTokenClassification"),j9t.forEach(t),Ztr=r(ije," (DeBERTa model)"),ije.forEach(t),ear=i(K),kF=n(K,"LI",{});var dje=s(kF);ebe=n(dje,"STRONG",{});var D9t=s(ebe);oar=r(D9t,"deberta-v2"),D9t.forEach(t),rar=r(dje," \u2014 "),DQ=n(dje,"A",{href:!0});var G9t=s(DQ);tar=r(G9t,"DebertaV2ForTokenClassification"),G9t.forEach(t),aar=r(dje," (DeBERTa-v2 model)"),dje.forEach(t),nar=i(K),SF=n(K,"LI",{});var cje=s(SF);obe=n(cje,"STRONG",{});var O9t=s(obe);sar=r(O9t,"distilbert"),O9t.forEach(t),lar=r(cje," \u2014 "),GQ=n(cje,"A",{href:!0});var V9t=s(GQ);iar=r(V9t,"DistilBertForTokenClassification"),V9t.forEach(t),dar=r(cje," (DistilBERT model)"),cje.forEach(t),car=i(K),RF=n(K,"LI",{});var fje=s(RF);rbe=n(fje,"STRONG",{});var X9t=s(rbe);far=r(X9t,"electra"),X9t.forEach(t),mar=r(fje," \u2014 "),OQ=n(fje,"A",{href:!0});var z9t=s(OQ);gar=r(z9t,"ElectraForTokenClassification"),z9t.forEach(t),har=r(fje," (ELECTRA model)"),fje.forEach(t),par=i(K),PF=n(K,"LI",{});var mje=s(PF);tbe=n(mje,"STRONG",{});var W9t=s(tbe);_ar=r(W9t,"flaubert"),W9t.forEach(t),uar=r(mje," \u2014 "),VQ=n(mje,"A",{href:!0});var Q9t=s(VQ);bar=r(Q9t,"FlaubertForTokenClassification"),Q9t.forEach(t),Far=r(mje," (FlauBERT model)"),mje.forEach(t),Tar=i(K),BF=n(K,"LI",{});var gje=s(BF);abe=n(gje,"STRONG",{});var U9t=s(abe);Mar=r(U9t,"fnet"),U9t.forEach(t),Ear=r(gje," \u2014 "),XQ=n(gje,"A",{href:!0});var H9t=s(XQ);Car=r(H9t,"FNetForTokenClassification"),H9t.forEach(t),war=r(gje," (FNet model)"),gje.forEach(t),Aar=i(K),IF=n(K,"LI",{});var hje=s(IF);nbe=n(hje,"STRONG",{});var J9t=s(nbe);Lar=r(J9t,"funnel"),J9t.forEach(t),yar=r(hje," \u2014 "),zQ=n(hje,"A",{href:!0});var Y9t=s(zQ);xar=r(Y9t,"FunnelForTokenClassification"),Y9t.forEach(t),$ar=r(hje," (Funnel Transformer model)"),hje.forEach(t),kar=i(K),NF=n(K,"LI",{});var pje=s(NF);sbe=n(pje,"STRONG",{});var K9t=s(sbe);Sar=r(K9t,"gpt2"),K9t.forEach(t),Rar=r(pje," \u2014 "),WQ=n(pje,"A",{href:!0});var Z9t=s(WQ);Par=r(Z9t,"GPT2ForTokenClassification"),Z9t.forEach(t),Bar=r(pje," (OpenAI GPT-2 model)"),pje.forEach(t),Iar=i(K),qF=n(K,"LI",{});var _je=s(qF);lbe=n(_je,"STRONG",{});var ext=s(lbe);Nar=r(ext,"ibert"),ext.forEach(t),qar=r(_je," \u2014 "),QQ=n(_je,"A",{href:!0});var oxt=s(QQ);jar=r(oxt,"IBertForTokenClassification"),oxt.forEach(t),Dar=r(_je," (I-BERT model)"),_je.forEach(t),Gar=i(K),jF=n(K,"LI",{});var uje=s(jF);ibe=n(uje,"STRONG",{});var rxt=s(ibe);Oar=r(rxt,"layoutlm"),rxt.forEach(t),Var=r(uje," \u2014 "),UQ=n(uje,"A",{href:!0});var txt=s(UQ);Xar=r(txt,"LayoutLMForTokenClassification"),txt.forEach(t),zar=r(uje," (LayoutLM model)"),uje.forEach(t),War=i(K),DF=n(K,"LI",{});var bje=s(DF);dbe=n(bje,"STRONG",{});var axt=s(dbe);Qar=r(axt,"layoutlmv2"),axt.forEach(t),Uar=r(bje," \u2014 "),HQ=n(bje,"A",{href:!0});var nxt=s(HQ);Har=r(nxt,"LayoutLMv2ForTokenClassification"),nxt.forEach(t),Jar=r(bje," (LayoutLMv2 model)"),bje.forEach(t),Yar=i(K),GF=n(K,"LI",{});var vje=s(GF);cbe=n(vje,"STRONG",{});var sxt=s(cbe);Kar=r(sxt,"layoutlmv3"),sxt.forEach(t),Zar=r(vje," \u2014 "),JQ=n(vje,"A",{href:!0});var lxt=s(JQ);enr=r(lxt,"LayoutLMv3ForTokenClassification"),lxt.forEach(t),onr=r(vje," (LayoutLMv3 model)"),vje.forEach(t),rnr=i(K),OF=n(K,"LI",{});var Fje=s(OF);fbe=n(Fje,"STRONG",{});var ixt=s(fbe);tnr=r(ixt,"longformer"),ixt.forEach(t),anr=r(Fje," \u2014 "),YQ=n(Fje,"A",{href:!0});var dxt=s(YQ);nnr=r(dxt,"LongformerForTokenClassification"),dxt.forEach(t),snr=r(Fje," (Longformer model)"),Fje.forEach(t),lnr=i(K),VF=n(K,"LI",{});var Tje=s(VF);mbe=n(Tje,"STRONG",{});var cxt=s(mbe);inr=r(cxt,"luke"),cxt.forEach(t),dnr=r(Tje," \u2014 "),KQ=n(Tje,"A",{href:!0});var fxt=s(KQ);cnr=r(fxt,"LukeForTokenClassification"),fxt.forEach(t),fnr=r(Tje," (LUKE model)"),Tje.forEach(t),mnr=i(K),XF=n(K,"LI",{});var Mje=s(XF);gbe=n(Mje,"STRONG",{});var mxt=s(gbe);gnr=r(mxt,"megatron-bert"),mxt.forEach(t),hnr=r(Mje," \u2014 "),ZQ=n(Mje,"A",{href:!0});var gxt=s(ZQ);pnr=r(gxt,"MegatronBertForTokenClassification"),gxt.forEach(t),_nr=r(Mje," (Megatron-BERT model)"),Mje.forEach(t),unr=i(K),zF=n(K,"LI",{});var Eje=s(zF);hbe=n(Eje,"STRONG",{});var hxt=s(hbe);bnr=r(hxt,"mobilebert"),hxt.forEach(t),vnr=r(Eje," \u2014 "),eU=n(Eje,"A",{href:!0});var pxt=s(eU);Fnr=r(pxt,"MobileBertForTokenClassification"),pxt.forEach(t),Tnr=r(Eje," (MobileBERT model)"),Eje.forEach(t),Mnr=i(K),WF=n(K,"LI",{});var Cje=s(WF);pbe=n(Cje,"STRONG",{});var _xt=s(pbe);Enr=r(_xt,"mpnet"),_xt.forEach(t),Cnr=r(Cje," \u2014 "),oU=n(Cje,"A",{href:!0});var uxt=s(oU);wnr=r(uxt,"MPNetForTokenClassification"),uxt.forEach(t),Anr=r(Cje," (MPNet model)"),Cje.forEach(t),Lnr=i(K),QF=n(K,"LI",{});var wje=s(QF);_be=n(wje,"STRONG",{});var bxt=s(_be);ynr=r(bxt,"nezha"),bxt.forEach(t),xnr=r(wje," \u2014 "),rU=n(wje,"A",{href:!0});var vxt=s(rU);$nr=r(vxt,"NezhaForTokenClassification"),vxt.forEach(t),knr=r(wje," (Nezha model)"),wje.forEach(t),Snr=i(K),UF=n(K,"LI",{});var Aje=s(UF);ube=n(Aje,"STRONG",{});var Fxt=s(ube);Rnr=r(Fxt,"nystromformer"),Fxt.forEach(t),Pnr=r(Aje," \u2014 "),tU=n(Aje,"A",{href:!0});var Txt=s(tU);Bnr=r(Txt,"NystromformerForTokenClassification"),Txt.forEach(t),Inr=r(Aje," (Nystr\xF6mformer model)"),Aje.forEach(t),Nnr=i(K),HF=n(K,"LI",{});var Lje=s(HF);bbe=n(Lje,"STRONG",{});var Mxt=s(bbe);qnr=r(Mxt,"qdqbert"),Mxt.forEach(t),jnr=r(Lje," \u2014 "),aU=n(Lje,"A",{href:!0});var Ext=s(aU);Dnr=r(Ext,"QDQBertForTokenClassification"),Ext.forEach(t),Gnr=r(Lje," (QDQBert model)"),Lje.forEach(t),Onr=i(K),JF=n(K,"LI",{});var yje=s(JF);vbe=n(yje,"STRONG",{});var Cxt=s(vbe);Vnr=r(Cxt,"rembert"),Cxt.forEach(t),Xnr=r(yje," \u2014 "),nU=n(yje,"A",{href:!0});var wxt=s(nU);znr=r(wxt,"RemBertForTokenClassification"),wxt.forEach(t),Wnr=r(yje," (RemBERT model)"),yje.forEach(t),Qnr=i(K),YF=n(K,"LI",{});var xje=s(YF);Fbe=n(xje,"STRONG",{});var Axt=s(Fbe);Unr=r(Axt,"roberta"),Axt.forEach(t),Hnr=r(xje," \u2014 "),sU=n(xje,"A",{href:!0});var Lxt=s(sU);Jnr=r(Lxt,"RobertaForTokenClassification"),Lxt.forEach(t),Ynr=r(xje," (RoBERTa model)"),xje.forEach(t),Knr=i(K),KF=n(K,"LI",{});var $je=s(KF);Tbe=n($je,"STRONG",{});var yxt=s(Tbe);Znr=r(yxt,"roformer"),yxt.forEach(t),esr=r($je," \u2014 "),lU=n($je,"A",{href:!0});var xxt=s(lU);osr=r(xxt,"RoFormerForTokenClassification"),xxt.forEach(t),rsr=r($je," (RoFormer model)"),$je.forEach(t),tsr=i(K),ZF=n(K,"LI",{});var kje=s(ZF);Mbe=n(kje,"STRONG",{});var $xt=s(Mbe);asr=r($xt,"squeezebert"),$xt.forEach(t),nsr=r(kje," \u2014 "),iU=n(kje,"A",{href:!0});var kxt=s(iU);ssr=r(kxt,"SqueezeBertForTokenClassification"),kxt.forEach(t),lsr=r(kje," (SqueezeBERT model)"),kje.forEach(t),isr=i(K),eT=n(K,"LI",{});var Sje=s(eT);Ebe=n(Sje,"STRONG",{});var Sxt=s(Ebe);dsr=r(Sxt,"xlm"),Sxt.forEach(t),csr=r(Sje," \u2014 "),dU=n(Sje,"A",{href:!0});var Rxt=s(dU);fsr=r(Rxt,"XLMForTokenClassification"),Rxt.forEach(t),msr=r(Sje," (XLM model)"),Sje.forEach(t),gsr=i(K),oT=n(K,"LI",{});var Rje=s(oT);Cbe=n(Rje,"STRONG",{});var Pxt=s(Cbe);hsr=r(Pxt,"xlm-roberta"),Pxt.forEach(t),psr=r(Rje," \u2014 "),cU=n(Rje,"A",{href:!0});var Bxt=s(cU);_sr=r(Bxt,"XLMRobertaForTokenClassification"),Bxt.forEach(t),usr=r(Rje," (XLM-RoBERTa model)"),Rje.forEach(t),bsr=i(K),rT=n(K,"LI",{});var Pje=s(rT);wbe=n(Pje,"STRONG",{});var Ixt=s(wbe);vsr=r(Ixt,"xlm-roberta-xl"),Ixt.forEach(t),Fsr=r(Pje," \u2014 "),fU=n(Pje,"A",{href:!0});var Nxt=s(fU);Tsr=r(Nxt,"XLMRobertaXLForTokenClassification"),Nxt.forEach(t),Msr=r(Pje," (XLM-RoBERTa-XL model)"),Pje.forEach(t),Esr=i(K),tT=n(K,"LI",{});var Bje=s(tT);Abe=n(Bje,"STRONG",{});var qxt=s(Abe);Csr=r(qxt,"xlnet"),qxt.forEach(t),wsr=r(Bje," \u2014 "),mU=n(Bje,"A",{href:!0});var jxt=s(mU);Asr=r(jxt,"XLNetForTokenClassification"),jxt.forEach(t),Lsr=r(Bje," (XLNet model)"),Bje.forEach(t),ysr=i(K),aT=n(K,"LI",{});var Ije=s(aT);Lbe=n(Ije,"STRONG",{});var Dxt=s(Lbe);xsr=r(Dxt,"yoso"),Dxt.forEach(t),$sr=r(Ije," \u2014 "),gU=n(Ije,"A",{href:!0});var Gxt=s(gU);ksr=r(Gxt,"YosoForTokenClassification"),Gxt.forEach(t),Ssr=r(Ije," (YOSO model)"),Ije.forEach(t),K.forEach(t),Rsr=i(Ma),nT=n(Ma,"P",{});var Nje=s(nT);Psr=r(Nje,"The model is set in evaluation mode by default using "),ybe=n(Nje,"CODE",{});var Oxt=s(ybe);Bsr=r(Oxt,"model.eval()"),Oxt.forEach(t),Isr=r(Nje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=n(Nje,"CODE",{});var Vxt=s(xbe);Nsr=r(Vxt,"model.train()"),Vxt.forEach(t),Nje.forEach(t),qsr=i(Ma),T(sT.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),$Ue=i(f),xd=n(f,"H2",{class:!0});var DJe=s(xd);lT=n(DJe,"A",{id:!0,class:!0,href:!0});var Xxt=s(lT);$be=n(Xxt,"SPAN",{});var zxt=s($be);T(P9.$$.fragment,zxt),zxt.forEach(t),Xxt.forEach(t),jsr=i(DJe),kbe=n(DJe,"SPAN",{});var Wxt=s(kbe);Dsr=r(Wxt,"AutoModelForQuestionAnswering"),Wxt.forEach(t),DJe.forEach(t),kUe=i(f),Oo=n(f,"DIV",{class:!0});var El=s(Oo);T(B9.$$.fragment,El),Gsr=i(El),$d=n(El,"P",{});var cne=s($d);Osr=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hU=n(cne,"A",{href:!0});var Qxt=s(hU);Vsr=r(Qxt,"from_pretrained()"),Qxt.forEach(t),Xsr=r(cne," class method or the "),pU=n(cne,"A",{href:!0});var Uxt=s(pU);zsr=r(Uxt,"from_config()"),Uxt.forEach(t),Wsr=r(cne,` class
method.`),cne.forEach(t),Qsr=i(El),I9=n(El,"P",{});var GJe=s(I9);Usr=r(GJe,"This class cannot be instantiated directly using "),Sbe=n(GJe,"CODE",{});var Hxt=s(Sbe);Hsr=r(Hxt,"__init__()"),Hxt.forEach(t),Jsr=r(GJe," (throws an error)."),GJe.forEach(t),Ysr=i(El),Tt=n(El,"DIV",{class:!0});var P7=s(Tt);T(N9.$$.fragment,P7),Ksr=i(P7),Rbe=n(P7,"P",{});var Jxt=s(Rbe);Zsr=r(Jxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jxt.forEach(t),elr=i(P7),kd=n(P7,"P",{});var fne=s(kd);olr=r(fne,`Note:
Loading a model from its configuration file does `),Pbe=n(fne,"STRONG",{});var Yxt=s(Pbe);rlr=r(Yxt,"not"),Yxt.forEach(t),tlr=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(fne,"A",{href:!0});var Kxt=s(_U);alr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),nlr=r(fne," to load the model weights."),fne.forEach(t),slr=i(P7),T(iT.$$.fragment,P7),P7.forEach(t),llr=i(El),lo=n(El,"DIV",{class:!0});var Ea=s(lo);T(q9.$$.fragment,Ea),ilr=i(Ea),Bbe=n(Ea,"P",{});var Zxt=s(Bbe);dlr=r(Zxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zxt.forEach(t),clr=i(Ea),Ka=n(Ea,"P",{});var B7=s(Ka);flr=r(B7,"The model class to instantiate is selected based on the "),Ibe=n(B7,"CODE",{});var e$t=s(Ibe);mlr=r(e$t,"model_type"),e$t.forEach(t),glr=r(B7,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(B7,"CODE",{});var o$t=s(Nbe);hlr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),plr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(B7,"CODE",{});var r$t=s(qbe);_lr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),ulr=r(B7,":"),B7.forEach(t),blr=i(Ea),V=n(Ea,"UL",{});var X=s(V);dT=n(X,"LI",{});var qje=s(dT);jbe=n(qje,"STRONG",{});var t$t=s(jbe);vlr=r(t$t,"albert"),t$t.forEach(t),Flr=r(qje," \u2014 "),uU=n(qje,"A",{href:!0});var a$t=s(uU);Tlr=r(a$t,"AlbertForQuestionAnswering"),a$t.forEach(t),Mlr=r(qje," (ALBERT model)"),qje.forEach(t),Elr=i(X),cT=n(X,"LI",{});var jje=s(cT);Dbe=n(jje,"STRONG",{});var n$t=s(Dbe);Clr=r(n$t,"bart"),n$t.forEach(t),wlr=r(jje," \u2014 "),bU=n(jje,"A",{href:!0});var s$t=s(bU);Alr=r(s$t,"BartForQuestionAnswering"),s$t.forEach(t),Llr=r(jje," (BART model)"),jje.forEach(t),ylr=i(X),fT=n(X,"LI",{});var Dje=s(fT);Gbe=n(Dje,"STRONG",{});var l$t=s(Gbe);xlr=r(l$t,"bert"),l$t.forEach(t),$lr=r(Dje," \u2014 "),vU=n(Dje,"A",{href:!0});var i$t=s(vU);klr=r(i$t,"BertForQuestionAnswering"),i$t.forEach(t),Slr=r(Dje," (BERT model)"),Dje.forEach(t),Rlr=i(X),mT=n(X,"LI",{});var Gje=s(mT);Obe=n(Gje,"STRONG",{});var d$t=s(Obe);Plr=r(d$t,"big_bird"),d$t.forEach(t),Blr=r(Gje," \u2014 "),FU=n(Gje,"A",{href:!0});var c$t=s(FU);Ilr=r(c$t,"BigBirdForQuestionAnswering"),c$t.forEach(t),Nlr=r(Gje," (BigBird model)"),Gje.forEach(t),qlr=i(X),gT=n(X,"LI",{});var Oje=s(gT);Vbe=n(Oje,"STRONG",{});var f$t=s(Vbe);jlr=r(f$t,"bigbird_pegasus"),f$t.forEach(t),Dlr=r(Oje," \u2014 "),TU=n(Oje,"A",{href:!0});var m$t=s(TU);Glr=r(m$t,"BigBirdPegasusForQuestionAnswering"),m$t.forEach(t),Olr=r(Oje," (BigBird-Pegasus model)"),Oje.forEach(t),Vlr=i(X),hT=n(X,"LI",{});var Vje=s(hT);Xbe=n(Vje,"STRONG",{});var g$t=s(Xbe);Xlr=r(g$t,"camembert"),g$t.forEach(t),zlr=r(Vje," \u2014 "),MU=n(Vje,"A",{href:!0});var h$t=s(MU);Wlr=r(h$t,"CamembertForQuestionAnswering"),h$t.forEach(t),Qlr=r(Vje," (CamemBERT model)"),Vje.forEach(t),Ulr=i(X),pT=n(X,"LI",{});var Xje=s(pT);zbe=n(Xje,"STRONG",{});var p$t=s(zbe);Hlr=r(p$t,"canine"),p$t.forEach(t),Jlr=r(Xje," \u2014 "),EU=n(Xje,"A",{href:!0});var _$t=s(EU);Ylr=r(_$t,"CanineForQuestionAnswering"),_$t.forEach(t),Klr=r(Xje," (CANINE model)"),Xje.forEach(t),Zlr=i(X),_T=n(X,"LI",{});var zje=s(_T);Wbe=n(zje,"STRONG",{});var u$t=s(Wbe);eir=r(u$t,"convbert"),u$t.forEach(t),oir=r(zje," \u2014 "),CU=n(zje,"A",{href:!0});var b$t=s(CU);rir=r(b$t,"ConvBertForQuestionAnswering"),b$t.forEach(t),tir=r(zje," (ConvBERT model)"),zje.forEach(t),air=i(X),uT=n(X,"LI",{});var Wje=s(uT);Qbe=n(Wje,"STRONG",{});var v$t=s(Qbe);nir=r(v$t,"data2vec-text"),v$t.forEach(t),sir=r(Wje," \u2014 "),wU=n(Wje,"A",{href:!0});var F$t=s(wU);lir=r(F$t,"Data2VecTextForQuestionAnswering"),F$t.forEach(t),iir=r(Wje," (Data2VecText model)"),Wje.forEach(t),dir=i(X),bT=n(X,"LI",{});var Qje=s(bT);Ube=n(Qje,"STRONG",{});var T$t=s(Ube);cir=r(T$t,"deberta"),T$t.forEach(t),fir=r(Qje," \u2014 "),AU=n(Qje,"A",{href:!0});var M$t=s(AU);mir=r(M$t,"DebertaForQuestionAnswering"),M$t.forEach(t),gir=r(Qje," (DeBERTa model)"),Qje.forEach(t),hir=i(X),vT=n(X,"LI",{});var Uje=s(vT);Hbe=n(Uje,"STRONG",{});var E$t=s(Hbe);pir=r(E$t,"deberta-v2"),E$t.forEach(t),_ir=r(Uje," \u2014 "),LU=n(Uje,"A",{href:!0});var C$t=s(LU);uir=r(C$t,"DebertaV2ForQuestionAnswering"),C$t.forEach(t),bir=r(Uje," (DeBERTa-v2 model)"),Uje.forEach(t),vir=i(X),FT=n(X,"LI",{});var Hje=s(FT);Jbe=n(Hje,"STRONG",{});var w$t=s(Jbe);Fir=r(w$t,"distilbert"),w$t.forEach(t),Tir=r(Hje," \u2014 "),yU=n(Hje,"A",{href:!0});var A$t=s(yU);Mir=r(A$t,"DistilBertForQuestionAnswering"),A$t.forEach(t),Eir=r(Hje," (DistilBERT model)"),Hje.forEach(t),Cir=i(X),TT=n(X,"LI",{});var Jje=s(TT);Ybe=n(Jje,"STRONG",{});var L$t=s(Ybe);wir=r(L$t,"electra"),L$t.forEach(t),Air=r(Jje," \u2014 "),xU=n(Jje,"A",{href:!0});var y$t=s(xU);Lir=r(y$t,"ElectraForQuestionAnswering"),y$t.forEach(t),yir=r(Jje," (ELECTRA model)"),Jje.forEach(t),xir=i(X),MT=n(X,"LI",{});var Yje=s(MT);Kbe=n(Yje,"STRONG",{});var x$t=s(Kbe);$ir=r(x$t,"flaubert"),x$t.forEach(t),kir=r(Yje," \u2014 "),$U=n(Yje,"A",{href:!0});var $$t=s($U);Sir=r($$t,"FlaubertForQuestionAnsweringSimple"),$$t.forEach(t),Rir=r(Yje," (FlauBERT model)"),Yje.forEach(t),Pir=i(X),ET=n(X,"LI",{});var Kje=s(ET);Zbe=n(Kje,"STRONG",{});var k$t=s(Zbe);Bir=r(k$t,"fnet"),k$t.forEach(t),Iir=r(Kje," \u2014 "),kU=n(Kje,"A",{href:!0});var S$t=s(kU);Nir=r(S$t,"FNetForQuestionAnswering"),S$t.forEach(t),qir=r(Kje," (FNet model)"),Kje.forEach(t),jir=i(X),CT=n(X,"LI",{});var Zje=s(CT);eve=n(Zje,"STRONG",{});var R$t=s(eve);Dir=r(R$t,"funnel"),R$t.forEach(t),Gir=r(Zje," \u2014 "),SU=n(Zje,"A",{href:!0});var P$t=s(SU);Oir=r(P$t,"FunnelForQuestionAnswering"),P$t.forEach(t),Vir=r(Zje," (Funnel Transformer model)"),Zje.forEach(t),Xir=i(X),wT=n(X,"LI",{});var eDe=s(wT);ove=n(eDe,"STRONG",{});var B$t=s(ove);zir=r(B$t,"gptj"),B$t.forEach(t),Wir=r(eDe," \u2014 "),RU=n(eDe,"A",{href:!0});var I$t=s(RU);Qir=r(I$t,"GPTJForQuestionAnswering"),I$t.forEach(t),Uir=r(eDe," (GPT-J model)"),eDe.forEach(t),Hir=i(X),AT=n(X,"LI",{});var oDe=s(AT);rve=n(oDe,"STRONG",{});var N$t=s(rve);Jir=r(N$t,"ibert"),N$t.forEach(t),Yir=r(oDe," \u2014 "),PU=n(oDe,"A",{href:!0});var q$t=s(PU);Kir=r(q$t,"IBertForQuestionAnswering"),q$t.forEach(t),Zir=r(oDe," (I-BERT model)"),oDe.forEach(t),edr=i(X),LT=n(X,"LI",{});var rDe=s(LT);tve=n(rDe,"STRONG",{});var j$t=s(tve);odr=r(j$t,"layoutlmv2"),j$t.forEach(t),rdr=r(rDe," \u2014 "),BU=n(rDe,"A",{href:!0});var D$t=s(BU);tdr=r(D$t,"LayoutLMv2ForQuestionAnswering"),D$t.forEach(t),adr=r(rDe," (LayoutLMv2 model)"),rDe.forEach(t),ndr=i(X),yT=n(X,"LI",{});var tDe=s(yT);ave=n(tDe,"STRONG",{});var G$t=s(ave);sdr=r(G$t,"layoutlmv3"),G$t.forEach(t),ldr=r(tDe," \u2014 "),IU=n(tDe,"A",{href:!0});var O$t=s(IU);idr=r(O$t,"LayoutLMv3ForQuestionAnswering"),O$t.forEach(t),ddr=r(tDe," (LayoutLMv3 model)"),tDe.forEach(t),cdr=i(X),xT=n(X,"LI",{});var aDe=s(xT);nve=n(aDe,"STRONG",{});var V$t=s(nve);fdr=r(V$t,"led"),V$t.forEach(t),mdr=r(aDe," \u2014 "),NU=n(aDe,"A",{href:!0});var X$t=s(NU);gdr=r(X$t,"LEDForQuestionAnswering"),X$t.forEach(t),hdr=r(aDe," (LED model)"),aDe.forEach(t),pdr=i(X),$T=n(X,"LI",{});var nDe=s($T);sve=n(nDe,"STRONG",{});var z$t=s(sve);_dr=r(z$t,"longformer"),z$t.forEach(t),udr=r(nDe," \u2014 "),qU=n(nDe,"A",{href:!0});var W$t=s(qU);bdr=r(W$t,"LongformerForQuestionAnswering"),W$t.forEach(t),vdr=r(nDe," (Longformer model)"),nDe.forEach(t),Fdr=i(X),kT=n(X,"LI",{});var sDe=s(kT);lve=n(sDe,"STRONG",{});var Q$t=s(lve);Tdr=r(Q$t,"luke"),Q$t.forEach(t),Mdr=r(sDe," \u2014 "),jU=n(sDe,"A",{href:!0});var U$t=s(jU);Edr=r(U$t,"LukeForQuestionAnswering"),U$t.forEach(t),Cdr=r(sDe," (LUKE model)"),sDe.forEach(t),wdr=i(X),ST=n(X,"LI",{});var lDe=s(ST);ive=n(lDe,"STRONG",{});var H$t=s(ive);Adr=r(H$t,"lxmert"),H$t.forEach(t),Ldr=r(lDe," \u2014 "),DU=n(lDe,"A",{href:!0});var J$t=s(DU);ydr=r(J$t,"LxmertForQuestionAnswering"),J$t.forEach(t),xdr=r(lDe," (LXMERT model)"),lDe.forEach(t),$dr=i(X),RT=n(X,"LI",{});var iDe=s(RT);dve=n(iDe,"STRONG",{});var Y$t=s(dve);kdr=r(Y$t,"mbart"),Y$t.forEach(t),Sdr=r(iDe," \u2014 "),GU=n(iDe,"A",{href:!0});var K$t=s(GU);Rdr=r(K$t,"MBartForQuestionAnswering"),K$t.forEach(t),Pdr=r(iDe," (mBART model)"),iDe.forEach(t),Bdr=i(X),PT=n(X,"LI",{});var dDe=s(PT);cve=n(dDe,"STRONG",{});var Z$t=s(cve);Idr=r(Z$t,"megatron-bert"),Z$t.forEach(t),Ndr=r(dDe," \u2014 "),OU=n(dDe,"A",{href:!0});var ekt=s(OU);qdr=r(ekt,"MegatronBertForQuestionAnswering"),ekt.forEach(t),jdr=r(dDe," (Megatron-BERT model)"),dDe.forEach(t),Ddr=i(X),BT=n(X,"LI",{});var cDe=s(BT);fve=n(cDe,"STRONG",{});var okt=s(fve);Gdr=r(okt,"mobilebert"),okt.forEach(t),Odr=r(cDe," \u2014 "),VU=n(cDe,"A",{href:!0});var rkt=s(VU);Vdr=r(rkt,"MobileBertForQuestionAnswering"),rkt.forEach(t),Xdr=r(cDe," (MobileBERT model)"),cDe.forEach(t),zdr=i(X),IT=n(X,"LI",{});var fDe=s(IT);mve=n(fDe,"STRONG",{});var tkt=s(mve);Wdr=r(tkt,"mpnet"),tkt.forEach(t),Qdr=r(fDe," \u2014 "),XU=n(fDe,"A",{href:!0});var akt=s(XU);Udr=r(akt,"MPNetForQuestionAnswering"),akt.forEach(t),Hdr=r(fDe," (MPNet model)"),fDe.forEach(t),Jdr=i(X),NT=n(X,"LI",{});var mDe=s(NT);gve=n(mDe,"STRONG",{});var nkt=s(gve);Ydr=r(nkt,"mvp"),nkt.forEach(t),Kdr=r(mDe," \u2014 "),zU=n(mDe,"A",{href:!0});var skt=s(zU);Zdr=r(skt,"MvpForQuestionAnswering"),skt.forEach(t),ecr=r(mDe," (MVP model)"),mDe.forEach(t),ocr=i(X),qT=n(X,"LI",{});var gDe=s(qT);hve=n(gDe,"STRONG",{});var lkt=s(hve);rcr=r(lkt,"nezha"),lkt.forEach(t),tcr=r(gDe," \u2014 "),WU=n(gDe,"A",{href:!0});var ikt=s(WU);acr=r(ikt,"NezhaForQuestionAnswering"),ikt.forEach(t),ncr=r(gDe," (Nezha model)"),gDe.forEach(t),scr=i(X),jT=n(X,"LI",{});var hDe=s(jT);pve=n(hDe,"STRONG",{});var dkt=s(pve);lcr=r(dkt,"nystromformer"),dkt.forEach(t),icr=r(hDe," \u2014 "),QU=n(hDe,"A",{href:!0});var ckt=s(QU);dcr=r(ckt,"NystromformerForQuestionAnswering"),ckt.forEach(t),ccr=r(hDe," (Nystr\xF6mformer model)"),hDe.forEach(t),fcr=i(X),DT=n(X,"LI",{});var pDe=s(DT);_ve=n(pDe,"STRONG",{});var fkt=s(_ve);mcr=r(fkt,"qdqbert"),fkt.forEach(t),gcr=r(pDe," \u2014 "),UU=n(pDe,"A",{href:!0});var mkt=s(UU);hcr=r(mkt,"QDQBertForQuestionAnswering"),mkt.forEach(t),pcr=r(pDe," (QDQBert model)"),pDe.forEach(t),_cr=i(X),GT=n(X,"LI",{});var _De=s(GT);uve=n(_De,"STRONG",{});var gkt=s(uve);ucr=r(gkt,"reformer"),gkt.forEach(t),bcr=r(_De," \u2014 "),HU=n(_De,"A",{href:!0});var hkt=s(HU);vcr=r(hkt,"ReformerForQuestionAnswering"),hkt.forEach(t),Fcr=r(_De," (Reformer model)"),_De.forEach(t),Tcr=i(X),OT=n(X,"LI",{});var uDe=s(OT);bve=n(uDe,"STRONG",{});var pkt=s(bve);Mcr=r(pkt,"rembert"),pkt.forEach(t),Ecr=r(uDe," \u2014 "),JU=n(uDe,"A",{href:!0});var _kt=s(JU);Ccr=r(_kt,"RemBertForQuestionAnswering"),_kt.forEach(t),wcr=r(uDe," (RemBERT model)"),uDe.forEach(t),Acr=i(X),VT=n(X,"LI",{});var bDe=s(VT);vve=n(bDe,"STRONG",{});var ukt=s(vve);Lcr=r(ukt,"roberta"),ukt.forEach(t),ycr=r(bDe," \u2014 "),YU=n(bDe,"A",{href:!0});var bkt=s(YU);xcr=r(bkt,"RobertaForQuestionAnswering"),bkt.forEach(t),$cr=r(bDe," (RoBERTa model)"),bDe.forEach(t),kcr=i(X),XT=n(X,"LI",{});var vDe=s(XT);Fve=n(vDe,"STRONG",{});var vkt=s(Fve);Scr=r(vkt,"roformer"),vkt.forEach(t),Rcr=r(vDe," \u2014 "),KU=n(vDe,"A",{href:!0});var Fkt=s(KU);Pcr=r(Fkt,"RoFormerForQuestionAnswering"),Fkt.forEach(t),Bcr=r(vDe," (RoFormer model)"),vDe.forEach(t),Icr=i(X),zT=n(X,"LI",{});var FDe=s(zT);Tve=n(FDe,"STRONG",{});var Tkt=s(Tve);Ncr=r(Tkt,"splinter"),Tkt.forEach(t),qcr=r(FDe," \u2014 "),ZU=n(FDe,"A",{href:!0});var Mkt=s(ZU);jcr=r(Mkt,"SplinterForQuestionAnswering"),Mkt.forEach(t),Dcr=r(FDe," (Splinter model)"),FDe.forEach(t),Gcr=i(X),WT=n(X,"LI",{});var TDe=s(WT);Mve=n(TDe,"STRONG",{});var Ekt=s(Mve);Ocr=r(Ekt,"squeezebert"),Ekt.forEach(t),Vcr=r(TDe," \u2014 "),eH=n(TDe,"A",{href:!0});var Ckt=s(eH);Xcr=r(Ckt,"SqueezeBertForQuestionAnswering"),Ckt.forEach(t),zcr=r(TDe," (SqueezeBERT model)"),TDe.forEach(t),Wcr=i(X),QT=n(X,"LI",{});var MDe=s(QT);Eve=n(MDe,"STRONG",{});var wkt=s(Eve);Qcr=r(wkt,"xlm"),wkt.forEach(t),Ucr=r(MDe," \u2014 "),oH=n(MDe,"A",{href:!0});var Akt=s(oH);Hcr=r(Akt,"XLMForQuestionAnsweringSimple"),Akt.forEach(t),Jcr=r(MDe," (XLM model)"),MDe.forEach(t),Ycr=i(X),UT=n(X,"LI",{});var EDe=s(UT);Cve=n(EDe,"STRONG",{});var Lkt=s(Cve);Kcr=r(Lkt,"xlm-roberta"),Lkt.forEach(t),Zcr=r(EDe," \u2014 "),rH=n(EDe,"A",{href:!0});var ykt=s(rH);efr=r(ykt,"XLMRobertaForQuestionAnswering"),ykt.forEach(t),ofr=r(EDe," (XLM-RoBERTa model)"),EDe.forEach(t),rfr=i(X),HT=n(X,"LI",{});var CDe=s(HT);wve=n(CDe,"STRONG",{});var xkt=s(wve);tfr=r(xkt,"xlm-roberta-xl"),xkt.forEach(t),afr=r(CDe," \u2014 "),tH=n(CDe,"A",{href:!0});var $kt=s(tH);nfr=r($kt,"XLMRobertaXLForQuestionAnswering"),$kt.forEach(t),sfr=r(CDe," (XLM-RoBERTa-XL model)"),CDe.forEach(t),lfr=i(X),JT=n(X,"LI",{});var wDe=s(JT);Ave=n(wDe,"STRONG",{});var kkt=s(Ave);ifr=r(kkt,"xlnet"),kkt.forEach(t),dfr=r(wDe," \u2014 "),aH=n(wDe,"A",{href:!0});var Skt=s(aH);cfr=r(Skt,"XLNetForQuestionAnsweringSimple"),Skt.forEach(t),ffr=r(wDe," (XLNet model)"),wDe.forEach(t),mfr=i(X),YT=n(X,"LI",{});var ADe=s(YT);Lve=n(ADe,"STRONG",{});var Rkt=s(Lve);gfr=r(Rkt,"yoso"),Rkt.forEach(t),hfr=r(ADe," \u2014 "),nH=n(ADe,"A",{href:!0});var Pkt=s(nH);pfr=r(Pkt,"YosoForQuestionAnswering"),Pkt.forEach(t),_fr=r(ADe," (YOSO model)"),ADe.forEach(t),X.forEach(t),ufr=i(Ea),KT=n(Ea,"P",{});var LDe=s(KT);bfr=r(LDe,"The model is set in evaluation mode by default using "),yve=n(LDe,"CODE",{});var Bkt=s(yve);vfr=r(Bkt,"model.eval()"),Bkt.forEach(t),Ffr=r(LDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=n(LDe,"CODE",{});var Ikt=s(xve);Tfr=r(Ikt,"model.train()"),Ikt.forEach(t),LDe.forEach(t),Mfr=i(Ea),T(ZT.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),SUe=i(f),Sd=n(f,"H2",{class:!0});var OJe=s(Sd);e8=n(OJe,"A",{id:!0,class:!0,href:!0});var Nkt=s(e8);$ve=n(Nkt,"SPAN",{});var qkt=s($ve);T(j9.$$.fragment,qkt),qkt.forEach(t),Nkt.forEach(t),Efr=i(OJe),kve=n(OJe,"SPAN",{});var jkt=s(kve);Cfr=r(jkt,"AutoModelForTableQuestionAnswering"),jkt.forEach(t),OJe.forEach(t),RUe=i(f),Vo=n(f,"DIV",{class:!0});var Cl=s(Vo);T(D9.$$.fragment,Cl),wfr=i(Cl),Rd=n(Cl,"P",{});var mne=s(Rd);Afr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sH=n(mne,"A",{href:!0});var Dkt=s(sH);Lfr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),yfr=r(mne," class method or the "),lH=n(mne,"A",{href:!0});var Gkt=s(lH);xfr=r(Gkt,"from_config()"),Gkt.forEach(t),$fr=r(mne,` class
method.`),mne.forEach(t),kfr=i(Cl),G9=n(Cl,"P",{});var VJe=s(G9);Sfr=r(VJe,"This class cannot be instantiated directly using "),Sve=n(VJe,"CODE",{});var Okt=s(Sve);Rfr=r(Okt,"__init__()"),Okt.forEach(t),Pfr=r(VJe," (throws an error)."),VJe.forEach(t),Bfr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var I7=s(Mt);T(O9.$$.fragment,I7),Ifr=i(I7),Rve=n(I7,"P",{});var Vkt=s(Rve);Nfr=r(Vkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vkt.forEach(t),qfr=i(I7),Pd=n(I7,"P",{});var gne=s(Pd);jfr=r(gne,`Note:
Loading a model from its configuration file does `),Pve=n(gne,"STRONG",{});var Xkt=s(Pve);Dfr=r(Xkt,"not"),Xkt.forEach(t),Gfr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(gne,"A",{href:!0});var zkt=s(iH);Ofr=r(zkt,"from_pretrained()"),zkt.forEach(t),Vfr=r(gne," to load the model weights."),gne.forEach(t),Xfr=i(I7),T(o8.$$.fragment,I7),I7.forEach(t),zfr=i(Cl),io=n(Cl,"DIV",{class:!0});var Ca=s(io);T(V9.$$.fragment,Ca),Wfr=i(Ca),Bve=n(Ca,"P",{});var Wkt=s(Bve);Qfr=r(Wkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wkt.forEach(t),Ufr=i(Ca),Za=n(Ca,"P",{});var N7=s(Za);Hfr=r(N7,"The model class to instantiate is selected based on the "),Ive=n(N7,"CODE",{});var Qkt=s(Ive);Jfr=r(Qkt,"model_type"),Qkt.forEach(t),Yfr=r(N7,` property of the config object (either
passed as an argument or loaded from `),Nve=n(N7,"CODE",{});var Ukt=s(Nve);Kfr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),Zfr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(N7,"CODE",{});var Hkt=s(qve);emr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),omr=r(N7,":"),N7.forEach(t),rmr=i(Ca),jve=n(Ca,"UL",{});var Jkt=s(jve);r8=n(Jkt,"LI",{});var yDe=s(r8);Dve=n(yDe,"STRONG",{});var Ykt=s(Dve);tmr=r(Ykt,"tapas"),Ykt.forEach(t),amr=r(yDe," \u2014 "),dH=n(yDe,"A",{href:!0});var Kkt=s(dH);nmr=r(Kkt,"TapasForQuestionAnswering"),Kkt.forEach(t),smr=r(yDe," (TAPAS model)"),yDe.forEach(t),Jkt.forEach(t),lmr=i(Ca),t8=n(Ca,"P",{});var xDe=s(t8);imr=r(xDe,"The model is set in evaluation mode by default using "),Gve=n(xDe,"CODE",{});var Zkt=s(Gve);dmr=r(Zkt,"model.eval()"),Zkt.forEach(t),cmr=r(xDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=n(xDe,"CODE",{});var eSt=s(Ove);fmr=r(eSt,"model.train()"),eSt.forEach(t),xDe.forEach(t),mmr=i(Ca),T(a8.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),PUe=i(f),Bd=n(f,"H2",{class:!0});var XJe=s(Bd);n8=n(XJe,"A",{id:!0,class:!0,href:!0});var oSt=s(n8);Vve=n(oSt,"SPAN",{});var rSt=s(Vve);T(X9.$$.fragment,rSt),rSt.forEach(t),oSt.forEach(t),gmr=i(XJe),Xve=n(XJe,"SPAN",{});var tSt=s(Xve);hmr=r(tSt,"AutoModelForImageClassification"),tSt.forEach(t),XJe.forEach(t),BUe=i(f),Xo=n(f,"DIV",{class:!0});var wl=s(Xo);T(z9.$$.fragment,wl),pmr=i(wl),Id=n(wl,"P",{});var hne=s(Id);_mr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cH=n(hne,"A",{href:!0});var aSt=s(cH);umr=r(aSt,"from_pretrained()"),aSt.forEach(t),bmr=r(hne," class method or the "),fH=n(hne,"A",{href:!0});var nSt=s(fH);vmr=r(nSt,"from_config()"),nSt.forEach(t),Fmr=r(hne,` class
method.`),hne.forEach(t),Tmr=i(wl),W9=n(wl,"P",{});var zJe=s(W9);Mmr=r(zJe,"This class cannot be instantiated directly using "),zve=n(zJe,"CODE",{});var sSt=s(zve);Emr=r(sSt,"__init__()"),sSt.forEach(t),Cmr=r(zJe," (throws an error)."),zJe.forEach(t),wmr=i(wl),Et=n(wl,"DIV",{class:!0});var q7=s(Et);T(Q9.$$.fragment,q7),Amr=i(q7),Wve=n(q7,"P",{});var lSt=s(Wve);Lmr=r(lSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lSt.forEach(t),ymr=i(q7),Nd=n(q7,"P",{});var pne=s(Nd);xmr=r(pne,`Note:
Loading a model from its configuration file does `),Qve=n(pne,"STRONG",{});var iSt=s(Qve);$mr=r(iSt,"not"),iSt.forEach(t),kmr=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(pne,"A",{href:!0});var dSt=s(mH);Smr=r(dSt,"from_pretrained()"),dSt.forEach(t),Rmr=r(pne," to load the model weights."),pne.forEach(t),Pmr=i(q7),T(s8.$$.fragment,q7),q7.forEach(t),Bmr=i(wl),co=n(wl,"DIV",{class:!0});var wa=s(co);T(U9.$$.fragment,wa),Imr=i(wa),Uve=n(wa,"P",{});var cSt=s(Uve);Nmr=r(cSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cSt.forEach(t),qmr=i(wa),en=n(wa,"P",{});var j7=s(en);jmr=r(j7,"The model class to instantiate is selected based on the "),Hve=n(j7,"CODE",{});var fSt=s(Hve);Dmr=r(fSt,"model_type"),fSt.forEach(t),Gmr=r(j7,` property of the config object (either
passed as an argument or loaded from `),Jve=n(j7,"CODE",{});var mSt=s(Jve);Omr=r(mSt,"pretrained_model_name_or_path"),mSt.forEach(t),Vmr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(j7,"CODE",{});var gSt=s(Yve);Xmr=r(gSt,"pretrained_model_name_or_path"),gSt.forEach(t),zmr=r(j7,":"),j7.forEach(t),Wmr=i(wa),be=n(wa,"UL",{});var Fe=s(be);l8=n(Fe,"LI",{});var $De=s(l8);Kve=n($De,"STRONG",{});var hSt=s(Kve);Qmr=r(hSt,"beit"),hSt.forEach(t),Umr=r($De," \u2014 "),gH=n($De,"A",{href:!0});var pSt=s(gH);Hmr=r(pSt,"BeitForImageClassification"),pSt.forEach(t),Jmr=r($De," (BEiT model)"),$De.forEach(t),Ymr=i(Fe),i8=n(Fe,"LI",{});var kDe=s(i8);Zve=n(kDe,"STRONG",{});var _St=s(Zve);Kmr=r(_St,"convnext"),_St.forEach(t),Zmr=r(kDe," \u2014 "),hH=n(kDe,"A",{href:!0});var uSt=s(hH);egr=r(uSt,"ConvNextForImageClassification"),uSt.forEach(t),ogr=r(kDe," (ConvNeXT model)"),kDe.forEach(t),rgr=i(Fe),d8=n(Fe,"LI",{});var SDe=s(d8);eFe=n(SDe,"STRONG",{});var bSt=s(eFe);tgr=r(bSt,"cvt"),bSt.forEach(t),agr=r(SDe," \u2014 "),pH=n(SDe,"A",{href:!0});var vSt=s(pH);ngr=r(vSt,"CvtForImageClassification"),vSt.forEach(t),sgr=r(SDe," (CvT model)"),SDe.forEach(t),lgr=i(Fe),c8=n(Fe,"LI",{});var RDe=s(c8);oFe=n(RDe,"STRONG",{});var FSt=s(oFe);igr=r(FSt,"data2vec-vision"),FSt.forEach(t),dgr=r(RDe," \u2014 "),_H=n(RDe,"A",{href:!0});var TSt=s(_H);cgr=r(TSt,"Data2VecVisionForImageClassification"),TSt.forEach(t),fgr=r(RDe," (Data2VecVision model)"),RDe.forEach(t),mgr=i(Fe),sl=n(Fe,"LI",{});var rP=s(sl);rFe=n(rP,"STRONG",{});var MSt=s(rFe);ggr=r(MSt,"deit"),MSt.forEach(t),hgr=r(rP," \u2014 "),uH=n(rP,"A",{href:!0});var ESt=s(uH);pgr=r(ESt,"DeiTForImageClassification"),ESt.forEach(t),_gr=r(rP," or "),bH=n(rP,"A",{href:!0});var CSt=s(bH);ugr=r(CSt,"DeiTForImageClassificationWithTeacher"),CSt.forEach(t),bgr=r(rP," (DeiT model)"),rP.forEach(t),vgr=i(Fe),f8=n(Fe,"LI",{});var PDe=s(f8);tFe=n(PDe,"STRONG",{});var wSt=s(tFe);Fgr=r(wSt,"imagegpt"),wSt.forEach(t),Tgr=r(PDe," \u2014 "),vH=n(PDe,"A",{href:!0});var ASt=s(vH);Mgr=r(ASt,"ImageGPTForImageClassification"),ASt.forEach(t),Egr=r(PDe," (ImageGPT model)"),PDe.forEach(t),Cgr=i(Fe),ll=n(Fe,"LI",{});var tP=s(ll);aFe=n(tP,"STRONG",{});var LSt=s(aFe);wgr=r(LSt,"levit"),LSt.forEach(t),Agr=r(tP," \u2014 "),FH=n(tP,"A",{href:!0});var ySt=s(FH);Lgr=r(ySt,"LevitForImageClassification"),ySt.forEach(t),ygr=r(tP," or "),TH=n(tP,"A",{href:!0});var xSt=s(TH);xgr=r(xSt,"LevitForImageClassificationWithTeacher"),xSt.forEach(t),$gr=r(tP," (LeViT model)"),tP.forEach(t),kgr=i(Fe),m8=n(Fe,"LI",{});var BDe=s(m8);nFe=n(BDe,"STRONG",{});var $St=s(nFe);Sgr=r($St,"mobilevit"),$St.forEach(t),Rgr=r(BDe," \u2014 "),MH=n(BDe,"A",{href:!0});var kSt=s(MH);Pgr=r(kSt,"MobileViTForImageClassification"),kSt.forEach(t),Bgr=r(BDe," (MobileViT model)"),BDe.forEach(t),Igr=i(Fe),Ct=n(Fe,"LI",{});var em=s(Ct);sFe=n(em,"STRONG",{});var SSt=s(sFe);Ngr=r(SSt,"perceiver"),SSt.forEach(t),qgr=r(em," \u2014 "),EH=n(em,"A",{href:!0});var RSt=s(EH);jgr=r(RSt,"PerceiverForImageClassificationLearned"),RSt.forEach(t),Dgr=r(em," or "),CH=n(em,"A",{href:!0});var PSt=s(CH);Ggr=r(PSt,"PerceiverForImageClassificationFourier"),PSt.forEach(t),Ogr=r(em," or "),wH=n(em,"A",{href:!0});var BSt=s(wH);Vgr=r(BSt,"PerceiverForImageClassificationConvProcessing"),BSt.forEach(t),Xgr=r(em," (Perceiver model)"),em.forEach(t),zgr=i(Fe),g8=n(Fe,"LI",{});var IDe=s(g8);lFe=n(IDe,"STRONG",{});var ISt=s(lFe);Wgr=r(ISt,"poolformer"),ISt.forEach(t),Qgr=r(IDe," \u2014 "),AH=n(IDe,"A",{href:!0});var NSt=s(AH);Ugr=r(NSt,"PoolFormerForImageClassification"),NSt.forEach(t),Hgr=r(IDe," (PoolFormer model)"),IDe.forEach(t),Jgr=i(Fe),h8=n(Fe,"LI",{});var NDe=s(h8);iFe=n(NDe,"STRONG",{});var qSt=s(iFe);Ygr=r(qSt,"regnet"),qSt.forEach(t),Kgr=r(NDe," \u2014 "),LH=n(NDe,"A",{href:!0});var jSt=s(LH);Zgr=r(jSt,"RegNetForImageClassification"),jSt.forEach(t),ehr=r(NDe," (RegNet model)"),NDe.forEach(t),ohr=i(Fe),p8=n(Fe,"LI",{});var qDe=s(p8);dFe=n(qDe,"STRONG",{});var DSt=s(dFe);rhr=r(DSt,"resnet"),DSt.forEach(t),thr=r(qDe," \u2014 "),yH=n(qDe,"A",{href:!0});var GSt=s(yH);ahr=r(GSt,"ResNetForImageClassification"),GSt.forEach(t),nhr=r(qDe," (ResNet model)"),qDe.forEach(t),shr=i(Fe),_8=n(Fe,"LI",{});var jDe=s(_8);cFe=n(jDe,"STRONG",{});var OSt=s(cFe);lhr=r(OSt,"segformer"),OSt.forEach(t),ihr=r(jDe," \u2014 "),xH=n(jDe,"A",{href:!0});var VSt=s(xH);dhr=r(VSt,"SegformerForImageClassification"),VSt.forEach(t),chr=r(jDe," (SegFormer model)"),jDe.forEach(t),fhr=i(Fe),u8=n(Fe,"LI",{});var DDe=s(u8);fFe=n(DDe,"STRONG",{});var XSt=s(fFe);mhr=r(XSt,"swin"),XSt.forEach(t),ghr=r(DDe," \u2014 "),$H=n(DDe,"A",{href:!0});var zSt=s($H);hhr=r(zSt,"SwinForImageClassification"),zSt.forEach(t),phr=r(DDe," (Swin Transformer model)"),DDe.forEach(t),_hr=i(Fe),b8=n(Fe,"LI",{});var GDe=s(b8);mFe=n(GDe,"STRONG",{});var WSt=s(mFe);uhr=r(WSt,"swinv2"),WSt.forEach(t),bhr=r(GDe," \u2014 "),kH=n(GDe,"A",{href:!0});var QSt=s(kH);vhr=r(QSt,"Swinv2ForImageClassification"),QSt.forEach(t),Fhr=r(GDe," (Swin Transformer V2 model)"),GDe.forEach(t),Thr=i(Fe),v8=n(Fe,"LI",{});var ODe=s(v8);gFe=n(ODe,"STRONG",{});var USt=s(gFe);Mhr=r(USt,"van"),USt.forEach(t),Ehr=r(ODe," \u2014 "),SH=n(ODe,"A",{href:!0});var HSt=s(SH);Chr=r(HSt,"VanForImageClassification"),HSt.forEach(t),whr=r(ODe," (VAN model)"),ODe.forEach(t),Ahr=i(Fe),F8=n(Fe,"LI",{});var VDe=s(F8);hFe=n(VDe,"STRONG",{});var JSt=s(hFe);Lhr=r(JSt,"vit"),JSt.forEach(t),yhr=r(VDe," \u2014 "),RH=n(VDe,"A",{href:!0});var YSt=s(RH);xhr=r(YSt,"ViTForImageClassification"),YSt.forEach(t),$hr=r(VDe," (ViT model)"),VDe.forEach(t),Fe.forEach(t),khr=i(wa),T8=n(wa,"P",{});var XDe=s(T8);Shr=r(XDe,"The model is set in evaluation mode by default using "),pFe=n(XDe,"CODE",{});var KSt=s(pFe);Rhr=r(KSt,"model.eval()"),KSt.forEach(t),Phr=r(XDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Fe=n(XDe,"CODE",{});var ZSt=s(_Fe);Bhr=r(ZSt,"model.train()"),ZSt.forEach(t),XDe.forEach(t),Ihr=i(wa),T(M8.$$.fragment,wa),wa.forEach(t),wl.forEach(t),IUe=i(f),qd=n(f,"H2",{class:!0});var WJe=s(qd);E8=n(WJe,"A",{id:!0,class:!0,href:!0});var eRt=s(E8);uFe=n(eRt,"SPAN",{});var oRt=s(uFe);T(H9.$$.fragment,oRt),oRt.forEach(t),eRt.forEach(t),Nhr=i(WJe),bFe=n(WJe,"SPAN",{});var rRt=s(bFe);qhr=r(rRt,"AutoModelForVideoClassification"),rRt.forEach(t),WJe.forEach(t),NUe=i(f),zo=n(f,"DIV",{class:!0});var Al=s(zo);T(J9.$$.fragment,Al),jhr=i(Al),jd=n(Al,"P",{});var _ne=s(jd);Dhr=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),PH=n(_ne,"A",{href:!0});var tRt=s(PH);Ghr=r(tRt,"from_pretrained()"),tRt.forEach(t),Ohr=r(_ne," class method or the "),BH=n(_ne,"A",{href:!0});var aRt=s(BH);Vhr=r(aRt,"from_config()"),aRt.forEach(t),Xhr=r(_ne,` class
method.`),_ne.forEach(t),zhr=i(Al),Y9=n(Al,"P",{});var QJe=s(Y9);Whr=r(QJe,"This class cannot be instantiated directly using "),vFe=n(QJe,"CODE",{});var nRt=s(vFe);Qhr=r(nRt,"__init__()"),nRt.forEach(t),Uhr=r(QJe," (throws an error)."),QJe.forEach(t),Hhr=i(Al),wt=n(Al,"DIV",{class:!0});var D7=s(wt);T(K9.$$.fragment,D7),Jhr=i(D7),FFe=n(D7,"P",{});var sRt=s(FFe);Yhr=r(sRt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),sRt.forEach(t),Khr=i(D7),Dd=n(D7,"P",{});var une=s(Dd);Zhr=r(une,`Note:
Loading a model from its configuration file does `),TFe=n(une,"STRONG",{});var lRt=s(TFe);epr=r(lRt,"not"),lRt.forEach(t),opr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(une,"A",{href:!0});var iRt=s(IH);rpr=r(iRt,"from_pretrained()"),iRt.forEach(t),tpr=r(une," to load the model weights."),une.forEach(t),apr=i(D7),T(C8.$$.fragment,D7),D7.forEach(t),npr=i(Al),fo=n(Al,"DIV",{class:!0});var Aa=s(fo);T(Z9.$$.fragment,Aa),spr=i(Aa),MFe=n(Aa,"P",{});var dRt=s(MFe);lpr=r(dRt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),dRt.forEach(t),ipr=i(Aa),on=n(Aa,"P",{});var G7=s(on);dpr=r(G7,"The model class to instantiate is selected based on the "),EFe=n(G7,"CODE",{});var cRt=s(EFe);cpr=r(cRt,"model_type"),cRt.forEach(t),fpr=r(G7,` property of the config object (either
passed as an argument or loaded from `),CFe=n(G7,"CODE",{});var fRt=s(CFe);mpr=r(fRt,"pretrained_model_name_or_path"),fRt.forEach(t),gpr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(G7,"CODE",{});var mRt=s(wFe);hpr=r(mRt,"pretrained_model_name_or_path"),mRt.forEach(t),ppr=r(G7,":"),G7.forEach(t),_pr=i(Aa),AFe=n(Aa,"UL",{});var gRt=s(AFe);w8=n(gRt,"LI",{});var zDe=s(w8);LFe=n(zDe,"STRONG",{});var hRt=s(LFe);upr=r(hRt,"videomae"),hRt.forEach(t),bpr=r(zDe," \u2014 "),NH=n(zDe,"A",{href:!0});var pRt=s(NH);vpr=r(pRt,"VideoMAEForVideoClassification"),pRt.forEach(t),Fpr=r(zDe," (VideoMAE model)"),zDe.forEach(t),gRt.forEach(t),Tpr=i(Aa),A8=n(Aa,"P",{});var WDe=s(A8);Mpr=r(WDe,"The model is set in evaluation mode by default using "),yFe=n(WDe,"CODE",{});var _Rt=s(yFe);Epr=r(_Rt,"model.eval()"),_Rt.forEach(t),Cpr=r(WDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=n(WDe,"CODE",{});var uRt=s(xFe);wpr=r(uRt,"model.train()"),uRt.forEach(t),WDe.forEach(t),Apr=i(Aa),T(L8.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),qUe=i(f),Gd=n(f,"H2",{class:!0});var UJe=s(Gd);y8=n(UJe,"A",{id:!0,class:!0,href:!0});var bRt=s(y8);$Fe=n(bRt,"SPAN",{});var vRt=s($Fe);T(ex.$$.fragment,vRt),vRt.forEach(t),bRt.forEach(t),Lpr=i(UJe),kFe=n(UJe,"SPAN",{});var FRt=s(kFe);ypr=r(FRt,"AutoModelForVision2Seq"),FRt.forEach(t),UJe.forEach(t),jUe=i(f),Wo=n(f,"DIV",{class:!0});var Ll=s(Wo);T(ox.$$.fragment,Ll),xpr=i(Ll),Od=n(Ll,"P",{});var bne=s(Od);$pr=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qH=n(bne,"A",{href:!0});var TRt=s(qH);kpr=r(TRt,"from_pretrained()"),TRt.forEach(t),Spr=r(bne," class method or the "),jH=n(bne,"A",{href:!0});var MRt=s(jH);Rpr=r(MRt,"from_config()"),MRt.forEach(t),Ppr=r(bne,` class
method.`),bne.forEach(t),Bpr=i(Ll),rx=n(Ll,"P",{});var HJe=s(rx);Ipr=r(HJe,"This class cannot be instantiated directly using "),SFe=n(HJe,"CODE",{});var ERt=s(SFe);Npr=r(ERt,"__init__()"),ERt.forEach(t),qpr=r(HJe," (throws an error)."),HJe.forEach(t),jpr=i(Ll),At=n(Ll,"DIV",{class:!0});var O7=s(At);T(tx.$$.fragment,O7),Dpr=i(O7),RFe=n(O7,"P",{});var CRt=s(RFe);Gpr=r(CRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CRt.forEach(t),Opr=i(O7),Vd=n(O7,"P",{});var vne=s(Vd);Vpr=r(vne,`Note:
Loading a model from its configuration file does `),PFe=n(vne,"STRONG",{});var wRt=s(PFe);Xpr=r(wRt,"not"),wRt.forEach(t),zpr=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(vne,"A",{href:!0});var ARt=s(DH);Wpr=r(ARt,"from_pretrained()"),ARt.forEach(t),Qpr=r(vne," to load the model weights."),vne.forEach(t),Upr=i(O7),T(x8.$$.fragment,O7),O7.forEach(t),Hpr=i(Ll),mo=n(Ll,"DIV",{class:!0});var La=s(mo);T(ax.$$.fragment,La),Jpr=i(La),BFe=n(La,"P",{});var LRt=s(BFe);Ypr=r(LRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LRt.forEach(t),Kpr=i(La),rn=n(La,"P",{});var V7=s(rn);Zpr=r(V7,"The model class to instantiate is selected based on the "),IFe=n(V7,"CODE",{});var yRt=s(IFe);e_r=r(yRt,"model_type"),yRt.forEach(t),o_r=r(V7,` property of the config object (either
passed as an argument or loaded from `),NFe=n(V7,"CODE",{});var xRt=s(NFe);r_r=r(xRt,"pretrained_model_name_or_path"),xRt.forEach(t),t_r=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(V7,"CODE",{});var $Rt=s(qFe);a_r=r($Rt,"pretrained_model_name_or_path"),$Rt.forEach(t),n_r=r(V7,":"),V7.forEach(t),s_r=i(La),jFe=n(La,"UL",{});var kRt=s(jFe);$8=n(kRt,"LI",{});var QDe=s($8);DFe=n(QDe,"STRONG",{});var SRt=s(DFe);l_r=r(SRt,"vision-encoder-decoder"),SRt.forEach(t),i_r=r(QDe," \u2014 "),GH=n(QDe,"A",{href:!0});var RRt=s(GH);d_r=r(RRt,"VisionEncoderDecoderModel"),RRt.forEach(t),c_r=r(QDe," (Vision Encoder decoder model)"),QDe.forEach(t),kRt.forEach(t),f_r=i(La),k8=n(La,"P",{});var UDe=s(k8);m_r=r(UDe,"The model is set in evaluation mode by default using "),GFe=n(UDe,"CODE",{});var PRt=s(GFe);g_r=r(PRt,"model.eval()"),PRt.forEach(t),h_r=r(UDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OFe=n(UDe,"CODE",{});var BRt=s(OFe);p_r=r(BRt,"model.train()"),BRt.forEach(t),UDe.forEach(t),__r=i(La),T(S8.$$.fragment,La),La.forEach(t),Ll.forEach(t),DUe=i(f),Xd=n(f,"H2",{class:!0});var JJe=s(Xd);R8=n(JJe,"A",{id:!0,class:!0,href:!0});var IRt=s(R8);VFe=n(IRt,"SPAN",{});var NRt=s(VFe);T(nx.$$.fragment,NRt),NRt.forEach(t),IRt.forEach(t),u_r=i(JJe),XFe=n(JJe,"SPAN",{});var qRt=s(XFe);b_r=r(qRt,"AutoModelForVisualQuestionAnswering"),qRt.forEach(t),JJe.forEach(t),GUe=i(f),Qo=n(f,"DIV",{class:!0});var yl=s(Qo);T(sx.$$.fragment,yl),v_r=i(yl),zd=n(yl,"P",{});var Fne=s(zd);F_r=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OH=n(Fne,"A",{href:!0});var jRt=s(OH);T_r=r(jRt,"from_pretrained()"),jRt.forEach(t),M_r=r(Fne," class method or the "),VH=n(Fne,"A",{href:!0});var DRt=s(VH);E_r=r(DRt,"from_config()"),DRt.forEach(t),C_r=r(Fne,` class
method.`),Fne.forEach(t),w_r=i(yl),lx=n(yl,"P",{});var YJe=s(lx);A_r=r(YJe,"This class cannot be instantiated directly using "),zFe=n(YJe,"CODE",{});var GRt=s(zFe);L_r=r(GRt,"__init__()"),GRt.forEach(t),y_r=r(YJe," (throws an error)."),YJe.forEach(t),x_r=i(yl),Lt=n(yl,"DIV",{class:!0});var X7=s(Lt);T(ix.$$.fragment,X7),$_r=i(X7),WFe=n(X7,"P",{});var ORt=s(WFe);k_r=r(ORt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ORt.forEach(t),S_r=i(X7),Wd=n(X7,"P",{});var Tne=s(Wd);R_r=r(Tne,`Note:
Loading a model from its configuration file does `),QFe=n(Tne,"STRONG",{});var VRt=s(QFe);P_r=r(VRt,"not"),VRt.forEach(t),B_r=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(Tne,"A",{href:!0});var XRt=s(XH);I_r=r(XRt,"from_pretrained()"),XRt.forEach(t),N_r=r(Tne," to load the model weights."),Tne.forEach(t),q_r=i(X7),T(P8.$$.fragment,X7),X7.forEach(t),j_r=i(yl),go=n(yl,"DIV",{class:!0});var ya=s(go);T(dx.$$.fragment,ya),D_r=i(ya),UFe=n(ya,"P",{});var zRt=s(UFe);G_r=r(zRt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),zRt.forEach(t),O_r=i(ya),tn=n(ya,"P",{});var z7=s(tn);V_r=r(z7,"The model class to instantiate is selected based on the "),HFe=n(z7,"CODE",{});var WRt=s(HFe);X_r=r(WRt,"model_type"),WRt.forEach(t),z_r=r(z7,` property of the config object (either
passed as an argument or loaded from `),JFe=n(z7,"CODE",{});var QRt=s(JFe);W_r=r(QRt,"pretrained_model_name_or_path"),QRt.forEach(t),Q_r=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(z7,"CODE",{});var URt=s(YFe);U_r=r(URt,"pretrained_model_name_or_path"),URt.forEach(t),H_r=r(z7,":"),z7.forEach(t),J_r=i(ya),KFe=n(ya,"UL",{});var HRt=s(KFe);B8=n(HRt,"LI",{});var HDe=s(B8);ZFe=n(HDe,"STRONG",{});var JRt=s(ZFe);Y_r=r(JRt,"vilt"),JRt.forEach(t),K_r=r(HDe," \u2014 "),zH=n(HDe,"A",{href:!0});var YRt=s(zH);Z_r=r(YRt,"ViltForQuestionAnswering"),YRt.forEach(t),eur=r(HDe," (ViLT model)"),HDe.forEach(t),HRt.forEach(t),our=i(ya),I8=n(ya,"P",{});var JDe=s(I8);rur=r(JDe,"The model is set in evaluation mode by default using "),eTe=n(JDe,"CODE",{});var KRt=s(eTe);tur=r(KRt,"model.eval()"),KRt.forEach(t),aur=r(JDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oTe=n(JDe,"CODE",{});var ZRt=s(oTe);nur=r(ZRt,"model.train()"),ZRt.forEach(t),JDe.forEach(t),sur=i(ya),T(N8.$$.fragment,ya),ya.forEach(t),yl.forEach(t),OUe=i(f),Qd=n(f,"H2",{class:!0});var KJe=s(Qd);q8=n(KJe,"A",{id:!0,class:!0,href:!0});var ePt=s(q8);rTe=n(ePt,"SPAN",{});var oPt=s(rTe);T(cx.$$.fragment,oPt),oPt.forEach(t),ePt.forEach(t),lur=i(KJe),tTe=n(KJe,"SPAN",{});var rPt=s(tTe);iur=r(rPt,"AutoModelForAudioClassification"),rPt.forEach(t),KJe.forEach(t),VUe=i(f),Uo=n(f,"DIV",{class:!0});var xl=s(Uo);T(fx.$$.fragment,xl),dur=i(xl),Ud=n(xl,"P",{});var Mne=s(Ud);cur=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WH=n(Mne,"A",{href:!0});var tPt=s(WH);fur=r(tPt,"from_pretrained()"),tPt.forEach(t),mur=r(Mne," class method or the "),QH=n(Mne,"A",{href:!0});var aPt=s(QH);gur=r(aPt,"from_config()"),aPt.forEach(t),hur=r(Mne,` class
method.`),Mne.forEach(t),pur=i(xl),mx=n(xl,"P",{});var ZJe=s(mx);_ur=r(ZJe,"This class cannot be instantiated directly using "),aTe=n(ZJe,"CODE",{});var nPt=s(aTe);uur=r(nPt,"__init__()"),nPt.forEach(t),bur=r(ZJe," (throws an error)."),ZJe.forEach(t),vur=i(xl),yt=n(xl,"DIV",{class:!0});var W7=s(yt);T(gx.$$.fragment,W7),Fur=i(W7),nTe=n(W7,"P",{});var sPt=s(nTe);Tur=r(sPt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sPt.forEach(t),Mur=i(W7),Hd=n(W7,"P",{});var Ene=s(Hd);Eur=r(Ene,`Note:
Loading a model from its configuration file does `),sTe=n(Ene,"STRONG",{});var lPt=s(sTe);Cur=r(lPt,"not"),lPt.forEach(t),wur=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(Ene,"A",{href:!0});var iPt=s(UH);Aur=r(iPt,"from_pretrained()"),iPt.forEach(t),Lur=r(Ene," to load the model weights."),Ene.forEach(t),yur=i(W7),T(j8.$$.fragment,W7),W7.forEach(t),xur=i(xl),ho=n(xl,"DIV",{class:!0});var xa=s(ho);T(hx.$$.fragment,xa),$ur=i(xa),lTe=n(xa,"P",{});var dPt=s(lTe);kur=r(dPt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dPt.forEach(t),Sur=i(xa),an=n(xa,"P",{});var Q7=s(an);Rur=r(Q7,"The model class to instantiate is selected based on the "),iTe=n(Q7,"CODE",{});var cPt=s(iTe);Pur=r(cPt,"model_type"),cPt.forEach(t),Bur=r(Q7,` property of the config object (either
passed as an argument or loaded from `),dTe=n(Q7,"CODE",{});var fPt=s(dTe);Iur=r(fPt,"pretrained_model_name_or_path"),fPt.forEach(t),Nur=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(Q7,"CODE",{});var mPt=s(cTe);qur=r(mPt,"pretrained_model_name_or_path"),mPt.forEach(t),jur=r(Q7,":"),Q7.forEach(t),Dur=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);D8=n(We,"LI",{});var YDe=s(D8);fTe=n(YDe,"STRONG",{});var gPt=s(fTe);Gur=r(gPt,"data2vec-audio"),gPt.forEach(t),Our=r(YDe," \u2014 "),HH=n(YDe,"A",{href:!0});var hPt=s(HH);Vur=r(hPt,"Data2VecAudioForSequenceClassification"),hPt.forEach(t),Xur=r(YDe," (Data2VecAudio model)"),YDe.forEach(t),zur=i(We),G8=n(We,"LI",{});var KDe=s(G8);mTe=n(KDe,"STRONG",{});var pPt=s(mTe);Wur=r(pPt,"hubert"),pPt.forEach(t),Qur=r(KDe," \u2014 "),JH=n(KDe,"A",{href:!0});var _Pt=s(JH);Uur=r(_Pt,"HubertForSequenceClassification"),_Pt.forEach(t),Hur=r(KDe," (Hubert model)"),KDe.forEach(t),Jur=i(We),O8=n(We,"LI",{});var ZDe=s(O8);gTe=n(ZDe,"STRONG",{});var uPt=s(gTe);Yur=r(uPt,"sew"),uPt.forEach(t),Kur=r(ZDe," \u2014 "),YH=n(ZDe,"A",{href:!0});var bPt=s(YH);Zur=r(bPt,"SEWForSequenceClassification"),bPt.forEach(t),e5r=r(ZDe," (SEW model)"),ZDe.forEach(t),o5r=i(We),V8=n(We,"LI",{});var eGe=s(V8);hTe=n(eGe,"STRONG",{});var vPt=s(hTe);r5r=r(vPt,"sew-d"),vPt.forEach(t),t5r=r(eGe," \u2014 "),KH=n(eGe,"A",{href:!0});var FPt=s(KH);a5r=r(FPt,"SEWDForSequenceClassification"),FPt.forEach(t),n5r=r(eGe," (SEW-D model)"),eGe.forEach(t),s5r=i(We),X8=n(We,"LI",{});var oGe=s(X8);pTe=n(oGe,"STRONG",{});var TPt=s(pTe);l5r=r(TPt,"unispeech"),TPt.forEach(t),i5r=r(oGe," \u2014 "),ZH=n(oGe,"A",{href:!0});var MPt=s(ZH);d5r=r(MPt,"UniSpeechForSequenceClassification"),MPt.forEach(t),c5r=r(oGe," (UniSpeech model)"),oGe.forEach(t),f5r=i(We),z8=n(We,"LI",{});var rGe=s(z8);_Te=n(rGe,"STRONG",{});var EPt=s(_Te);m5r=r(EPt,"unispeech-sat"),EPt.forEach(t),g5r=r(rGe," \u2014 "),eJ=n(rGe,"A",{href:!0});var CPt=s(eJ);h5r=r(CPt,"UniSpeechSatForSequenceClassification"),CPt.forEach(t),p5r=r(rGe," (UniSpeechSat model)"),rGe.forEach(t),_5r=i(We),W8=n(We,"LI",{});var tGe=s(W8);uTe=n(tGe,"STRONG",{});var wPt=s(uTe);u5r=r(wPt,"wav2vec2"),wPt.forEach(t),b5r=r(tGe," \u2014 "),oJ=n(tGe,"A",{href:!0});var APt=s(oJ);v5r=r(APt,"Wav2Vec2ForSequenceClassification"),APt.forEach(t),F5r=r(tGe," (Wav2Vec2 model)"),tGe.forEach(t),T5r=i(We),Q8=n(We,"LI",{});var aGe=s(Q8);bTe=n(aGe,"STRONG",{});var LPt=s(bTe);M5r=r(LPt,"wav2vec2-conformer"),LPt.forEach(t),E5r=r(aGe," \u2014 "),rJ=n(aGe,"A",{href:!0});var yPt=s(rJ);C5r=r(yPt,"Wav2Vec2ConformerForSequenceClassification"),yPt.forEach(t),w5r=r(aGe," (Wav2Vec2-Conformer model)"),aGe.forEach(t),A5r=i(We),U8=n(We,"LI",{});var nGe=s(U8);vTe=n(nGe,"STRONG",{});var xPt=s(vTe);L5r=r(xPt,"wavlm"),xPt.forEach(t),y5r=r(nGe," \u2014 "),tJ=n(nGe,"A",{href:!0});var $Pt=s(tJ);x5r=r($Pt,"WavLMForSequenceClassification"),$Pt.forEach(t),$5r=r(nGe," (WavLM model)"),nGe.forEach(t),We.forEach(t),k5r=i(xa),H8=n(xa,"P",{});var sGe=s(H8);S5r=r(sGe,"The model is set in evaluation mode by default using "),FTe=n(sGe,"CODE",{});var kPt=s(FTe);R5r=r(kPt,"model.eval()"),kPt.forEach(t),P5r=r(sGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TTe=n(sGe,"CODE",{});var SPt=s(TTe);B5r=r(SPt,"model.train()"),SPt.forEach(t),sGe.forEach(t),I5r=i(xa),T(J8.$$.fragment,xa),xa.forEach(t),xl.forEach(t),XUe=i(f),Jd=n(f,"H2",{class:!0});var eYe=s(Jd);Y8=n(eYe,"A",{id:!0,class:!0,href:!0});var RPt=s(Y8);MTe=n(RPt,"SPAN",{});var PPt=s(MTe);T(px.$$.fragment,PPt),PPt.forEach(t),RPt.forEach(t),N5r=i(eYe),ETe=n(eYe,"SPAN",{});var BPt=s(ETe);q5r=r(BPt,"AutoModelForAudioFrameClassification"),BPt.forEach(t),eYe.forEach(t),zUe=i(f),Ho=n(f,"DIV",{class:!0});var $l=s(Ho);T(_x.$$.fragment,$l),j5r=i($l),Yd=n($l,"P",{});var Cne=s(Yd);D5r=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aJ=n(Cne,"A",{href:!0});var IPt=s(aJ);G5r=r(IPt,"from_pretrained()"),IPt.forEach(t),O5r=r(Cne," class method or the "),nJ=n(Cne,"A",{href:!0});var NPt=s(nJ);V5r=r(NPt,"from_config()"),NPt.forEach(t),X5r=r(Cne,` class
method.`),Cne.forEach(t),z5r=i($l),ux=n($l,"P",{});var oYe=s(ux);W5r=r(oYe,"This class cannot be instantiated directly using "),CTe=n(oYe,"CODE",{});var qPt=s(CTe);Q5r=r(qPt,"__init__()"),qPt.forEach(t),U5r=r(oYe," (throws an error)."),oYe.forEach(t),H5r=i($l),xt=n($l,"DIV",{class:!0});var U7=s(xt);T(bx.$$.fragment,U7),J5r=i(U7),wTe=n(U7,"P",{});var jPt=s(wTe);Y5r=r(jPt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jPt.forEach(t),K5r=i(U7),Kd=n(U7,"P",{});var wne=s(Kd);Z5r=r(wne,`Note:
Loading a model from its configuration file does `),ATe=n(wne,"STRONG",{});var DPt=s(ATe);e1r=r(DPt,"not"),DPt.forEach(t),o1r=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(wne,"A",{href:!0});var GPt=s(sJ);r1r=r(GPt,"from_pretrained()"),GPt.forEach(t),t1r=r(wne," to load the model weights."),wne.forEach(t),a1r=i(U7),T(K8.$$.fragment,U7),U7.forEach(t),n1r=i($l),po=n($l,"DIV",{class:!0});var $a=s(po);T(vx.$$.fragment,$a),s1r=i($a),LTe=n($a,"P",{});var OPt=s(LTe);l1r=r(OPt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),OPt.forEach(t),i1r=i($a),nn=n($a,"P",{});var H7=s(nn);d1r=r(H7,"The model class to instantiate is selected based on the "),yTe=n(H7,"CODE",{});var VPt=s(yTe);c1r=r(VPt,"model_type"),VPt.forEach(t),f1r=r(H7,` property of the config object (either
passed as an argument or loaded from `),xTe=n(H7,"CODE",{});var XPt=s(xTe);m1r=r(XPt,"pretrained_model_name_or_path"),XPt.forEach(t),g1r=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(H7,"CODE",{});var zPt=s($Te);h1r=r(zPt,"pretrained_model_name_or_path"),zPt.forEach(t),p1r=r(H7,":"),H7.forEach(t),_1r=i($a),st=n($a,"UL",{});var kl=s(st);Z8=n(kl,"LI",{});var lGe=s(Z8);kTe=n(lGe,"STRONG",{});var WPt=s(kTe);u1r=r(WPt,"data2vec-audio"),WPt.forEach(t),b1r=r(lGe," \u2014 "),lJ=n(lGe,"A",{href:!0});var QPt=s(lJ);v1r=r(QPt,"Data2VecAudioForAudioFrameClassification"),QPt.forEach(t),F1r=r(lGe," (Data2VecAudio model)"),lGe.forEach(t),T1r=i(kl),eM=n(kl,"LI",{});var iGe=s(eM);STe=n(iGe,"STRONG",{});var UPt=s(STe);M1r=r(UPt,"unispeech-sat"),UPt.forEach(t),E1r=r(iGe," \u2014 "),iJ=n(iGe,"A",{href:!0});var HPt=s(iJ);C1r=r(HPt,"UniSpeechSatForAudioFrameClassification"),HPt.forEach(t),w1r=r(iGe," (UniSpeechSat model)"),iGe.forEach(t),A1r=i(kl),oM=n(kl,"LI",{});var dGe=s(oM);RTe=n(dGe,"STRONG",{});var JPt=s(RTe);L1r=r(JPt,"wav2vec2"),JPt.forEach(t),y1r=r(dGe," \u2014 "),dJ=n(dGe,"A",{href:!0});var YPt=s(dJ);x1r=r(YPt,"Wav2Vec2ForAudioFrameClassification"),YPt.forEach(t),$1r=r(dGe," (Wav2Vec2 model)"),dGe.forEach(t),k1r=i(kl),rM=n(kl,"LI",{});var cGe=s(rM);PTe=n(cGe,"STRONG",{});var KPt=s(PTe);S1r=r(KPt,"wav2vec2-conformer"),KPt.forEach(t),R1r=r(cGe," \u2014 "),cJ=n(cGe,"A",{href:!0});var ZPt=s(cJ);P1r=r(ZPt,"Wav2Vec2ConformerForAudioFrameClassification"),ZPt.forEach(t),B1r=r(cGe," (Wav2Vec2-Conformer model)"),cGe.forEach(t),I1r=i(kl),tM=n(kl,"LI",{});var fGe=s(tM);BTe=n(fGe,"STRONG",{});var eBt=s(BTe);N1r=r(eBt,"wavlm"),eBt.forEach(t),q1r=r(fGe," \u2014 "),fJ=n(fGe,"A",{href:!0});var oBt=s(fJ);j1r=r(oBt,"WavLMForAudioFrameClassification"),oBt.forEach(t),D1r=r(fGe," (WavLM model)"),fGe.forEach(t),kl.forEach(t),G1r=i($a),aM=n($a,"P",{});var mGe=s(aM);O1r=r(mGe,"The model is set in evaluation mode by default using "),ITe=n(mGe,"CODE",{});var rBt=s(ITe);V1r=r(rBt,"model.eval()"),rBt.forEach(t),X1r=r(mGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NTe=n(mGe,"CODE",{});var tBt=s(NTe);z1r=r(tBt,"model.train()"),tBt.forEach(t),mGe.forEach(t),W1r=i($a),T(nM.$$.fragment,$a),$a.forEach(t),$l.forEach(t),WUe=i(f),Zd=n(f,"H2",{class:!0});var rYe=s(Zd);sM=n(rYe,"A",{id:!0,class:!0,href:!0});var aBt=s(sM);qTe=n(aBt,"SPAN",{});var nBt=s(qTe);T(Fx.$$.fragment,nBt),nBt.forEach(t),aBt.forEach(t),Q1r=i(rYe),jTe=n(rYe,"SPAN",{});var sBt=s(jTe);U1r=r(sBt,"AutoModelForCTC"),sBt.forEach(t),rYe.forEach(t),QUe=i(f),Jo=n(f,"DIV",{class:!0});var Sl=s(Jo);T(Tx.$$.fragment,Sl),H1r=i(Sl),ec=n(Sl,"P",{});var Ane=s(ec);J1r=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mJ=n(Ane,"A",{href:!0});var lBt=s(mJ);Y1r=r(lBt,"from_pretrained()"),lBt.forEach(t),K1r=r(Ane," class method or the "),gJ=n(Ane,"A",{href:!0});var iBt=s(gJ);Z1r=r(iBt,"from_config()"),iBt.forEach(t),e2r=r(Ane,` class
method.`),Ane.forEach(t),o2r=i(Sl),Mx=n(Sl,"P",{});var tYe=s(Mx);r2r=r(tYe,"This class cannot be instantiated directly using "),DTe=n(tYe,"CODE",{});var dBt=s(DTe);t2r=r(dBt,"__init__()"),dBt.forEach(t),a2r=r(tYe," (throws an error)."),tYe.forEach(t),n2r=i(Sl),$t=n(Sl,"DIV",{class:!0});var J7=s($t);T(Ex.$$.fragment,J7),s2r=i(J7),GTe=n(J7,"P",{});var cBt=s(GTe);l2r=r(cBt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cBt.forEach(t),i2r=i(J7),oc=n(J7,"P",{});var Lne=s(oc);d2r=r(Lne,`Note:
Loading a model from its configuration file does `),OTe=n(Lne,"STRONG",{});var fBt=s(OTe);c2r=r(fBt,"not"),fBt.forEach(t),f2r=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(Lne,"A",{href:!0});var mBt=s(hJ);m2r=r(mBt,"from_pretrained()"),mBt.forEach(t),g2r=r(Lne," to load the model weights."),Lne.forEach(t),h2r=i(J7),T(lM.$$.fragment,J7),J7.forEach(t),p2r=i(Sl),_o=n(Sl,"DIV",{class:!0});var ka=s(_o);T(Cx.$$.fragment,ka),_2r=i(ka),VTe=n(ka,"P",{});var gBt=s(VTe);u2r=r(gBt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gBt.forEach(t),b2r=i(ka),sn=n(ka,"P",{});var Y7=s(sn);v2r=r(Y7,"The model class to instantiate is selected based on the "),XTe=n(Y7,"CODE",{});var hBt=s(XTe);F2r=r(hBt,"model_type"),hBt.forEach(t),T2r=r(Y7,` property of the config object (either
passed as an argument or loaded from `),zTe=n(Y7,"CODE",{});var pBt=s(zTe);M2r=r(pBt,"pretrained_model_name_or_path"),pBt.forEach(t),E2r=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(Y7,"CODE",{});var _Bt=s(WTe);C2r=r(_Bt,"pretrained_model_name_or_path"),_Bt.forEach(t),w2r=r(Y7,":"),Y7.forEach(t),A2r=i(ka),Le=n(ka,"UL",{});var Ie=s(Le);iM=n(Ie,"LI",{});var gGe=s(iM);QTe=n(gGe,"STRONG",{});var uBt=s(QTe);L2r=r(uBt,"data2vec-audio"),uBt.forEach(t),y2r=r(gGe," \u2014 "),pJ=n(gGe,"A",{href:!0});var bBt=s(pJ);x2r=r(bBt,"Data2VecAudioForCTC"),bBt.forEach(t),$2r=r(gGe," (Data2VecAudio model)"),gGe.forEach(t),k2r=i(Ie),dM=n(Ie,"LI",{});var hGe=s(dM);UTe=n(hGe,"STRONG",{});var vBt=s(UTe);S2r=r(vBt,"hubert"),vBt.forEach(t),R2r=r(hGe," \u2014 "),_J=n(hGe,"A",{href:!0});var FBt=s(_J);P2r=r(FBt,"HubertForCTC"),FBt.forEach(t),B2r=r(hGe," (Hubert model)"),hGe.forEach(t),I2r=i(Ie),cM=n(Ie,"LI",{});var pGe=s(cM);HTe=n(pGe,"STRONG",{});var TBt=s(HTe);N2r=r(TBt,"mctct"),TBt.forEach(t),q2r=r(pGe," \u2014 "),uJ=n(pGe,"A",{href:!0});var MBt=s(uJ);j2r=r(MBt,"MCTCTForCTC"),MBt.forEach(t),D2r=r(pGe," (M-CTC-T model)"),pGe.forEach(t),G2r=i(Ie),fM=n(Ie,"LI",{});var _Ge=s(fM);JTe=n(_Ge,"STRONG",{});var EBt=s(JTe);O2r=r(EBt,"sew"),EBt.forEach(t),V2r=r(_Ge," \u2014 "),bJ=n(_Ge,"A",{href:!0});var CBt=s(bJ);X2r=r(CBt,"SEWForCTC"),CBt.forEach(t),z2r=r(_Ge," (SEW model)"),_Ge.forEach(t),W2r=i(Ie),mM=n(Ie,"LI",{});var uGe=s(mM);YTe=n(uGe,"STRONG",{});var wBt=s(YTe);Q2r=r(wBt,"sew-d"),wBt.forEach(t),U2r=r(uGe," \u2014 "),vJ=n(uGe,"A",{href:!0});var ABt=s(vJ);H2r=r(ABt,"SEWDForCTC"),ABt.forEach(t),J2r=r(uGe," (SEW-D model)"),uGe.forEach(t),Y2r=i(Ie),gM=n(Ie,"LI",{});var bGe=s(gM);KTe=n(bGe,"STRONG",{});var LBt=s(KTe);K2r=r(LBt,"unispeech"),LBt.forEach(t),Z2r=r(bGe," \u2014 "),FJ=n(bGe,"A",{href:!0});var yBt=s(FJ);ebr=r(yBt,"UniSpeechForCTC"),yBt.forEach(t),obr=r(bGe," (UniSpeech model)"),bGe.forEach(t),rbr=i(Ie),hM=n(Ie,"LI",{});var vGe=s(hM);ZTe=n(vGe,"STRONG",{});var xBt=s(ZTe);tbr=r(xBt,"unispeech-sat"),xBt.forEach(t),abr=r(vGe," \u2014 "),TJ=n(vGe,"A",{href:!0});var $Bt=s(TJ);nbr=r($Bt,"UniSpeechSatForCTC"),$Bt.forEach(t),sbr=r(vGe," (UniSpeechSat model)"),vGe.forEach(t),lbr=i(Ie),pM=n(Ie,"LI",{});var FGe=s(pM);e8e=n(FGe,"STRONG",{});var kBt=s(e8e);ibr=r(kBt,"wav2vec2"),kBt.forEach(t),dbr=r(FGe," \u2014 "),MJ=n(FGe,"A",{href:!0});var SBt=s(MJ);cbr=r(SBt,"Wav2Vec2ForCTC"),SBt.forEach(t),fbr=r(FGe," (Wav2Vec2 model)"),FGe.forEach(t),mbr=i(Ie),_M=n(Ie,"LI",{});var TGe=s(_M);o8e=n(TGe,"STRONG",{});var RBt=s(o8e);gbr=r(RBt,"wav2vec2-conformer"),RBt.forEach(t),hbr=r(TGe," \u2014 "),EJ=n(TGe,"A",{href:!0});var PBt=s(EJ);pbr=r(PBt,"Wav2Vec2ConformerForCTC"),PBt.forEach(t),_br=r(TGe," (Wav2Vec2-Conformer model)"),TGe.forEach(t),ubr=i(Ie),uM=n(Ie,"LI",{});var MGe=s(uM);r8e=n(MGe,"STRONG",{});var BBt=s(r8e);bbr=r(BBt,"wavlm"),BBt.forEach(t),vbr=r(MGe," \u2014 "),CJ=n(MGe,"A",{href:!0});var IBt=s(CJ);Fbr=r(IBt,"WavLMForCTC"),IBt.forEach(t),Tbr=r(MGe," (WavLM model)"),MGe.forEach(t),Ie.forEach(t),Mbr=i(ka),bM=n(ka,"P",{});var EGe=s(bM);Ebr=r(EGe,"The model is set in evaluation mode by default using "),t8e=n(EGe,"CODE",{});var NBt=s(t8e);Cbr=r(NBt,"model.eval()"),NBt.forEach(t),wbr=r(EGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=n(EGe,"CODE",{});var qBt=s(a8e);Abr=r(qBt,"model.train()"),qBt.forEach(t),EGe.forEach(t),Lbr=i(ka),T(vM.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),UUe=i(f),rc=n(f,"H2",{class:!0});var aYe=s(rc);FM=n(aYe,"A",{id:!0,class:!0,href:!0});var jBt=s(FM);n8e=n(jBt,"SPAN",{});var DBt=s(n8e);T(wx.$$.fragment,DBt),DBt.forEach(t),jBt.forEach(t),ybr=i(aYe),s8e=n(aYe,"SPAN",{});var GBt=s(s8e);xbr=r(GBt,"AutoModelForSpeechSeq2Seq"),GBt.forEach(t),aYe.forEach(t),HUe=i(f),Yo=n(f,"DIV",{class:!0});var Rl=s(Yo);T(Ax.$$.fragment,Rl),$br=i(Rl),tc=n(Rl,"P",{});var yne=s(tc);kbr=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wJ=n(yne,"A",{href:!0});var OBt=s(wJ);Sbr=r(OBt,"from_pretrained()"),OBt.forEach(t),Rbr=r(yne," class method or the "),AJ=n(yne,"A",{href:!0});var VBt=s(AJ);Pbr=r(VBt,"from_config()"),VBt.forEach(t),Bbr=r(yne,` class
method.`),yne.forEach(t),Ibr=i(Rl),Lx=n(Rl,"P",{});var nYe=s(Lx);Nbr=r(nYe,"This class cannot be instantiated directly using "),l8e=n(nYe,"CODE",{});var XBt=s(l8e);qbr=r(XBt,"__init__()"),XBt.forEach(t),jbr=r(nYe," (throws an error)."),nYe.forEach(t),Dbr=i(Rl),kt=n(Rl,"DIV",{class:!0});var K7=s(kt);T(yx.$$.fragment,K7),Gbr=i(K7),i8e=n(K7,"P",{});var zBt=s(i8e);Obr=r(zBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zBt.forEach(t),Vbr=i(K7),ac=n(K7,"P",{});var xne=s(ac);Xbr=r(xne,`Note:
Loading a model from its configuration file does `),d8e=n(xne,"STRONG",{});var WBt=s(d8e);zbr=r(WBt,"not"),WBt.forEach(t),Wbr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=n(xne,"A",{href:!0});var QBt=s(LJ);Qbr=r(QBt,"from_pretrained()"),QBt.forEach(t),Ubr=r(xne," to load the model weights."),xne.forEach(t),Hbr=i(K7),T(TM.$$.fragment,K7),K7.forEach(t),Jbr=i(Rl),uo=n(Rl,"DIV",{class:!0});var Sa=s(uo);T(xx.$$.fragment,Sa),Ybr=i(Sa),c8e=n(Sa,"P",{});var UBt=s(c8e);Kbr=r(UBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UBt.forEach(t),Zbr=i(Sa),ln=n(Sa,"P",{});var Z7=s(ln);evr=r(Z7,"The model class to instantiate is selected based on the "),f8e=n(Z7,"CODE",{});var HBt=s(f8e);ovr=r(HBt,"model_type"),HBt.forEach(t),rvr=r(Z7,` property of the config object (either
passed as an argument or loaded from `),m8e=n(Z7,"CODE",{});var JBt=s(m8e);tvr=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),avr=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=n(Z7,"CODE",{});var YBt=s(g8e);nvr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),svr=r(Z7,":"),Z7.forEach(t),lvr=i(Sa),$x=n(Sa,"UL",{});var sYe=s($x);MM=n(sYe,"LI",{});var CGe=s(MM);h8e=n(CGe,"STRONG",{});var KBt=s(h8e);ivr=r(KBt,"speech-encoder-decoder"),KBt.forEach(t),dvr=r(CGe," \u2014 "),yJ=n(CGe,"A",{href:!0});var ZBt=s(yJ);cvr=r(ZBt,"SpeechEncoderDecoderModel"),ZBt.forEach(t),fvr=r(CGe," (Speech Encoder decoder model)"),CGe.forEach(t),mvr=i(sYe),EM=n(sYe,"LI",{});var wGe=s(EM);p8e=n(wGe,"STRONG",{});var eIt=s(p8e);gvr=r(eIt,"speech_to_text"),eIt.forEach(t),hvr=r(wGe," \u2014 "),xJ=n(wGe,"A",{href:!0});var oIt=s(xJ);pvr=r(oIt,"Speech2TextForConditionalGeneration"),oIt.forEach(t),_vr=r(wGe," (Speech2Text model)"),wGe.forEach(t),sYe.forEach(t),uvr=i(Sa),CM=n(Sa,"P",{});var AGe=s(CM);bvr=r(AGe,"The model is set in evaluation mode by default using "),_8e=n(AGe,"CODE",{});var rIt=s(_8e);vvr=r(rIt,"model.eval()"),rIt.forEach(t),Fvr=r(AGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u8e=n(AGe,"CODE",{});var tIt=s(u8e);Tvr=r(tIt,"model.train()"),tIt.forEach(t),AGe.forEach(t),Mvr=i(Sa),T(wM.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),JUe=i(f),nc=n(f,"H2",{class:!0});var lYe=s(nc);AM=n(lYe,"A",{id:!0,class:!0,href:!0});var aIt=s(AM);b8e=n(aIt,"SPAN",{});var nIt=s(b8e);T(kx.$$.fragment,nIt),nIt.forEach(t),aIt.forEach(t),Evr=i(lYe),v8e=n(lYe,"SPAN",{});var sIt=s(v8e);Cvr=r(sIt,"AutoModelForAudioXVector"),sIt.forEach(t),lYe.forEach(t),YUe=i(f),Ko=n(f,"DIV",{class:!0});var Pl=s(Ko);T(Sx.$$.fragment,Pl),wvr=i(Pl),sc=n(Pl,"P",{});var $ne=s(sc);Avr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$J=n($ne,"A",{href:!0});var lIt=s($J);Lvr=r(lIt,"from_pretrained()"),lIt.forEach(t),yvr=r($ne," class method or the "),kJ=n($ne,"A",{href:!0});var iIt=s(kJ);xvr=r(iIt,"from_config()"),iIt.forEach(t),$vr=r($ne,` class
method.`),$ne.forEach(t),kvr=i(Pl),Rx=n(Pl,"P",{});var iYe=s(Rx);Svr=r(iYe,"This class cannot be instantiated directly using "),F8e=n(iYe,"CODE",{});var dIt=s(F8e);Rvr=r(dIt,"__init__()"),dIt.forEach(t),Pvr=r(iYe," (throws an error)."),iYe.forEach(t),Bvr=i(Pl),St=n(Pl,"DIV",{class:!0});var eL=s(St);T(Px.$$.fragment,eL),Ivr=i(eL),T8e=n(eL,"P",{});var cIt=s(T8e);Nvr=r(cIt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cIt.forEach(t),qvr=i(eL),lc=n(eL,"P",{});var kne=s(lc);jvr=r(kne,`Note:
Loading a model from its configuration file does `),M8e=n(kne,"STRONG",{});var fIt=s(M8e);Dvr=r(fIt,"not"),fIt.forEach(t),Gvr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(kne,"A",{href:!0});var mIt=s(SJ);Ovr=r(mIt,"from_pretrained()"),mIt.forEach(t),Vvr=r(kne," to load the model weights."),kne.forEach(t),Xvr=i(eL),T(LM.$$.fragment,eL),eL.forEach(t),zvr=i(Pl),bo=n(Pl,"DIV",{class:!0});var Ra=s(bo);T(Bx.$$.fragment,Ra),Wvr=i(Ra),E8e=n(Ra,"P",{});var gIt=s(E8e);Qvr=r(gIt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gIt.forEach(t),Uvr=i(Ra),dn=n(Ra,"P",{});var oL=s(dn);Hvr=r(oL,"The model class to instantiate is selected based on the "),C8e=n(oL,"CODE",{});var hIt=s(C8e);Jvr=r(hIt,"model_type"),hIt.forEach(t),Yvr=r(oL,` property of the config object (either
passed as an argument or loaded from `),w8e=n(oL,"CODE",{});var pIt=s(w8e);Kvr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),Zvr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=n(oL,"CODE",{});var _It=s(A8e);eFr=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),oFr=r(oL,":"),oL.forEach(t),rFr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);yM=n(Bl,"LI",{});var LGe=s(yM);L8e=n(LGe,"STRONG",{});var uIt=s(L8e);tFr=r(uIt,"data2vec-audio"),uIt.forEach(t),aFr=r(LGe," \u2014 "),RJ=n(LGe,"A",{href:!0});var bIt=s(RJ);nFr=r(bIt,"Data2VecAudioForXVector"),bIt.forEach(t),sFr=r(LGe," (Data2VecAudio model)"),LGe.forEach(t),lFr=i(Bl),xM=n(Bl,"LI",{});var yGe=s(xM);y8e=n(yGe,"STRONG",{});var vIt=s(y8e);iFr=r(vIt,"unispeech-sat"),vIt.forEach(t),dFr=r(yGe," \u2014 "),PJ=n(yGe,"A",{href:!0});var FIt=s(PJ);cFr=r(FIt,"UniSpeechSatForXVector"),FIt.forEach(t),fFr=r(yGe," (UniSpeechSat model)"),yGe.forEach(t),mFr=i(Bl),$M=n(Bl,"LI",{});var xGe=s($M);x8e=n(xGe,"STRONG",{});var TIt=s(x8e);gFr=r(TIt,"wav2vec2"),TIt.forEach(t),hFr=r(xGe," \u2014 "),BJ=n(xGe,"A",{href:!0});var MIt=s(BJ);pFr=r(MIt,"Wav2Vec2ForXVector"),MIt.forEach(t),_Fr=r(xGe," (Wav2Vec2 model)"),xGe.forEach(t),uFr=i(Bl),kM=n(Bl,"LI",{});var $Ge=s(kM);$8e=n($Ge,"STRONG",{});var EIt=s($8e);bFr=r(EIt,"wav2vec2-conformer"),EIt.forEach(t),vFr=r($Ge," \u2014 "),IJ=n($Ge,"A",{href:!0});var CIt=s(IJ);FFr=r(CIt,"Wav2Vec2ConformerForXVector"),CIt.forEach(t),TFr=r($Ge," (Wav2Vec2-Conformer model)"),$Ge.forEach(t),MFr=i(Bl),SM=n(Bl,"LI",{});var kGe=s(SM);k8e=n(kGe,"STRONG",{});var wIt=s(k8e);EFr=r(wIt,"wavlm"),wIt.forEach(t),CFr=r(kGe," \u2014 "),NJ=n(kGe,"A",{href:!0});var AIt=s(NJ);wFr=r(AIt,"WavLMForXVector"),AIt.forEach(t),AFr=r(kGe," (WavLM model)"),kGe.forEach(t),Bl.forEach(t),LFr=i(Ra),RM=n(Ra,"P",{});var SGe=s(RM);yFr=r(SGe,"The model is set in evaluation mode by default using "),S8e=n(SGe,"CODE",{});var LIt=s(S8e);xFr=r(LIt,"model.eval()"),LIt.forEach(t),$Fr=r(SGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R8e=n(SGe,"CODE",{});var yIt=s(R8e);kFr=r(yIt,"model.train()"),yIt.forEach(t),SGe.forEach(t),SFr=i(Ra),T(PM.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),KUe=i(f),ic=n(f,"H2",{class:!0});var dYe=s(ic);BM=n(dYe,"A",{id:!0,class:!0,href:!0});var xIt=s(BM);P8e=n(xIt,"SPAN",{});var $It=s(P8e);T(Ix.$$.fragment,$It),$It.forEach(t),xIt.forEach(t),RFr=i(dYe),B8e=n(dYe,"SPAN",{});var kIt=s(B8e);PFr=r(kIt,"AutoModelForMaskedImageModeling"),kIt.forEach(t),dYe.forEach(t),ZUe=i(f),Zo=n(f,"DIV",{class:!0});var Il=s(Zo);T(Nx.$$.fragment,Il),BFr=i(Il),dc=n(Il,"P",{});var Sne=s(dc);IFr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qJ=n(Sne,"A",{href:!0});var SIt=s(qJ);NFr=r(SIt,"from_pretrained()"),SIt.forEach(t),qFr=r(Sne," class method or the "),jJ=n(Sne,"A",{href:!0});var RIt=s(jJ);jFr=r(RIt,"from_config()"),RIt.forEach(t),DFr=r(Sne,` class
method.`),Sne.forEach(t),GFr=i(Il),qx=n(Il,"P",{});var cYe=s(qx);OFr=r(cYe,"This class cannot be instantiated directly using "),I8e=n(cYe,"CODE",{});var PIt=s(I8e);VFr=r(PIt,"__init__()"),PIt.forEach(t),XFr=r(cYe," (throws an error)."),cYe.forEach(t),zFr=i(Il),Rt=n(Il,"DIV",{class:!0});var rL=s(Rt);T(jx.$$.fragment,rL),WFr=i(rL),N8e=n(rL,"P",{});var BIt=s(N8e);QFr=r(BIt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),BIt.forEach(t),UFr=i(rL),cc=n(rL,"P",{});var Rne=s(cc);HFr=r(Rne,`Note:
Loading a model from its configuration file does `),q8e=n(Rne,"STRONG",{});var IIt=s(q8e);JFr=r(IIt,"not"),IIt.forEach(t),YFr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(Rne,"A",{href:!0});var NIt=s(DJ);KFr=r(NIt,"from_pretrained()"),NIt.forEach(t),ZFr=r(Rne," to load the model weights."),Rne.forEach(t),eTr=i(rL),T(IM.$$.fragment,rL),rL.forEach(t),oTr=i(Il),vo=n(Il,"DIV",{class:!0});var Pa=s(vo);T(Dx.$$.fragment,Pa),rTr=i(Pa),j8e=n(Pa,"P",{});var qIt=s(j8e);tTr=r(qIt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qIt.forEach(t),aTr=i(Pa),cn=n(Pa,"P",{});var tL=s(cn);nTr=r(tL,"The model class to instantiate is selected based on the "),D8e=n(tL,"CODE",{});var jIt=s(D8e);sTr=r(jIt,"model_type"),jIt.forEach(t),lTr=r(tL,` property of the config object (either
passed as an argument or loaded from `),G8e=n(tL,"CODE",{});var DIt=s(G8e);iTr=r(DIt,"pretrained_model_name_or_path"),DIt.forEach(t),dTr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=n(tL,"CODE",{});var GIt=s(O8e);cTr=r(GIt,"pretrained_model_name_or_path"),GIt.forEach(t),fTr=r(tL,":"),tL.forEach(t),mTr=i(Pa),fn=n(Pa,"UL",{});var aL=s(fn);NM=n(aL,"LI",{});var RGe=s(NM);V8e=n(RGe,"STRONG",{});var OIt=s(V8e);gTr=r(OIt,"deit"),OIt.forEach(t),hTr=r(RGe," \u2014 "),GJ=n(RGe,"A",{href:!0});var VIt=s(GJ);pTr=r(VIt,"DeiTForMaskedImageModeling"),VIt.forEach(t),_Tr=r(RGe," (DeiT model)"),RGe.forEach(t),uTr=i(aL),qM=n(aL,"LI",{});var PGe=s(qM);X8e=n(PGe,"STRONG",{});var XIt=s(X8e);bTr=r(XIt,"swin"),XIt.forEach(t),vTr=r(PGe," \u2014 "),OJ=n(PGe,"A",{href:!0});var zIt=s(OJ);FTr=r(zIt,"SwinForMaskedImageModeling"),zIt.forEach(t),TTr=r(PGe," (Swin Transformer model)"),PGe.forEach(t),MTr=i(aL),jM=n(aL,"LI",{});var BGe=s(jM);z8e=n(BGe,"STRONG",{});var WIt=s(z8e);ETr=r(WIt,"swinv2"),WIt.forEach(t),CTr=r(BGe," \u2014 "),VJ=n(BGe,"A",{href:!0});var QIt=s(VJ);wTr=r(QIt,"Swinv2ForMaskedImageModeling"),QIt.forEach(t),ATr=r(BGe," (Swin Transformer V2 model)"),BGe.forEach(t),LTr=i(aL),DM=n(aL,"LI",{});var IGe=s(DM);W8e=n(IGe,"STRONG",{});var UIt=s(W8e);yTr=r(UIt,"vit"),UIt.forEach(t),xTr=r(IGe," \u2014 "),XJ=n(IGe,"A",{href:!0});var HIt=s(XJ);$Tr=r(HIt,"ViTForMaskedImageModeling"),HIt.forEach(t),kTr=r(IGe," (ViT model)"),IGe.forEach(t),aL.forEach(t),STr=i(Pa),GM=n(Pa,"P",{});var NGe=s(GM);RTr=r(NGe,"The model is set in evaluation mode by default using "),Q8e=n(NGe,"CODE",{});var JIt=s(Q8e);PTr=r(JIt,"model.eval()"),JIt.forEach(t),BTr=r(NGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U8e=n(NGe,"CODE",{});var YIt=s(U8e);ITr=r(YIt,"model.train()"),YIt.forEach(t),NGe.forEach(t),NTr=i(Pa),T(OM.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),eHe=i(f),fc=n(f,"H2",{class:!0});var fYe=s(fc);VM=n(fYe,"A",{id:!0,class:!0,href:!0});var KIt=s(VM);H8e=n(KIt,"SPAN",{});var ZIt=s(H8e);T(Gx.$$.fragment,ZIt),ZIt.forEach(t),KIt.forEach(t),qTr=i(fYe),J8e=n(fYe,"SPAN",{});var eNt=s(J8e);jTr=r(eNt,"AutoModelForObjectDetection"),eNt.forEach(t),fYe.forEach(t),oHe=i(f),er=n(f,"DIV",{class:!0});var Nl=s(er);T(Ox.$$.fragment,Nl),DTr=i(Nl),mc=n(Nl,"P",{});var Pne=s(mc);GTr=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zJ=n(Pne,"A",{href:!0});var oNt=s(zJ);OTr=r(oNt,"from_pretrained()"),oNt.forEach(t),VTr=r(Pne," class method or the "),WJ=n(Pne,"A",{href:!0});var rNt=s(WJ);XTr=r(rNt,"from_config()"),rNt.forEach(t),zTr=r(Pne,` class
method.`),Pne.forEach(t),WTr=i(Nl),Vx=n(Nl,"P",{});var mYe=s(Vx);QTr=r(mYe,"This class cannot be instantiated directly using "),Y8e=n(mYe,"CODE",{});var tNt=s(Y8e);UTr=r(tNt,"__init__()"),tNt.forEach(t),HTr=r(mYe," (throws an error)."),mYe.forEach(t),JTr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var nL=s(Pt);T(Xx.$$.fragment,nL),YTr=i(nL),K8e=n(nL,"P",{});var aNt=s(K8e);KTr=r(aNt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aNt.forEach(t),ZTr=i(nL),gc=n(nL,"P",{});var Bne=s(gc);e8r=r(Bne,`Note:
Loading a model from its configuration file does `),Z8e=n(Bne,"STRONG",{});var nNt=s(Z8e);o8r=r(nNt,"not"),nNt.forEach(t),r8r=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Bne,"A",{href:!0});var sNt=s(QJ);t8r=r(sNt,"from_pretrained()"),sNt.forEach(t),a8r=r(Bne," to load the model weights."),Bne.forEach(t),n8r=i(nL),T(XM.$$.fragment,nL),nL.forEach(t),s8r=i(Nl),Fo=n(Nl,"DIV",{class:!0});var Ba=s(Fo);T(zx.$$.fragment,Ba),l8r=i(Ba),eMe=n(Ba,"P",{});var lNt=s(eMe);i8r=r(lNt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lNt.forEach(t),d8r=i(Ba),mn=n(Ba,"P",{});var sL=s(mn);c8r=r(sL,"The model class to instantiate is selected based on the "),oMe=n(sL,"CODE",{});var iNt=s(oMe);f8r=r(iNt,"model_type"),iNt.forEach(t),m8r=r(sL,` property of the config object (either
passed as an argument or loaded from `),rMe=n(sL,"CODE",{});var dNt=s(rMe);g8r=r(dNt,"pretrained_model_name_or_path"),dNt.forEach(t),h8r=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(sL,"CODE",{});var cNt=s(tMe);p8r=r(cNt,"pretrained_model_name_or_path"),cNt.forEach(t),_8r=r(sL,":"),sL.forEach(t),u8r=i(Ba),Wx=n(Ba,"UL",{});var gYe=s(Wx);zM=n(gYe,"LI",{});var qGe=s(zM);aMe=n(qGe,"STRONG",{});var fNt=s(aMe);b8r=r(fNt,"detr"),fNt.forEach(t),v8r=r(qGe," \u2014 "),UJ=n(qGe,"A",{href:!0});var mNt=s(UJ);F8r=r(mNt,"DetrForObjectDetection"),mNt.forEach(t),T8r=r(qGe," (DETR model)"),qGe.forEach(t),M8r=i(gYe),WM=n(gYe,"LI",{});var jGe=s(WM);nMe=n(jGe,"STRONG",{});var gNt=s(nMe);E8r=r(gNt,"yolos"),gNt.forEach(t),C8r=r(jGe," \u2014 "),HJ=n(jGe,"A",{href:!0});var hNt=s(HJ);w8r=r(hNt,"YolosForObjectDetection"),hNt.forEach(t),A8r=r(jGe," (YOLOS model)"),jGe.forEach(t),gYe.forEach(t),L8r=i(Ba),QM=n(Ba,"P",{});var DGe=s(QM);y8r=r(DGe,"The model is set in evaluation mode by default using "),sMe=n(DGe,"CODE",{});var pNt=s(sMe);x8r=r(pNt,"model.eval()"),pNt.forEach(t),$8r=r(DGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lMe=n(DGe,"CODE",{});var _Nt=s(lMe);k8r=r(_Nt,"model.train()"),_Nt.forEach(t),DGe.forEach(t),S8r=i(Ba),T(UM.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),rHe=i(f),hc=n(f,"H2",{class:!0});var hYe=s(hc);HM=n(hYe,"A",{id:!0,class:!0,href:!0});var uNt=s(HM);iMe=n(uNt,"SPAN",{});var bNt=s(iMe);T(Qx.$$.fragment,bNt),bNt.forEach(t),uNt.forEach(t),R8r=i(hYe),dMe=n(hYe,"SPAN",{});var vNt=s(dMe);P8r=r(vNt,"AutoModelForImageSegmentation"),vNt.forEach(t),hYe.forEach(t),tHe=i(f),or=n(f,"DIV",{class:!0});var ql=s(or);T(Ux.$$.fragment,ql),B8r=i(ql),pc=n(ql,"P",{});var Ine=s(pc);I8r=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),JJ=n(Ine,"A",{href:!0});var FNt=s(JJ);N8r=r(FNt,"from_pretrained()"),FNt.forEach(t),q8r=r(Ine," class method or the "),YJ=n(Ine,"A",{href:!0});var TNt=s(YJ);j8r=r(TNt,"from_config()"),TNt.forEach(t),D8r=r(Ine,` class
method.`),Ine.forEach(t),G8r=i(ql),Hx=n(ql,"P",{});var pYe=s(Hx);O8r=r(pYe,"This class cannot be instantiated directly using "),cMe=n(pYe,"CODE",{});var MNt=s(cMe);V8r=r(MNt,"__init__()"),MNt.forEach(t),X8r=r(pYe," (throws an error)."),pYe.forEach(t),z8r=i(ql),Bt=n(ql,"DIV",{class:!0});var lL=s(Bt);T(Jx.$$.fragment,lL),W8r=i(lL),fMe=n(lL,"P",{});var ENt=s(fMe);Q8r=r(ENt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ENt.forEach(t),U8r=i(lL),_c=n(lL,"P",{});var Nne=s(_c);H8r=r(Nne,`Note:
Loading a model from its configuration file does `),mMe=n(Nne,"STRONG",{});var CNt=s(mMe);J8r=r(CNt,"not"),CNt.forEach(t),Y8r=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(Nne,"A",{href:!0});var wNt=s(KJ);K8r=r(wNt,"from_pretrained()"),wNt.forEach(t),Z8r=r(Nne," to load the model weights."),Nne.forEach(t),eMr=i(lL),T(JM.$$.fragment,lL),lL.forEach(t),oMr=i(ql),To=n(ql,"DIV",{class:!0});var Ia=s(To);T(Yx.$$.fragment,Ia),rMr=i(Ia),gMe=n(Ia,"P",{});var ANt=s(gMe);tMr=r(ANt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ANt.forEach(t),aMr=i(Ia),gn=n(Ia,"P",{});var iL=s(gn);nMr=r(iL,"The model class to instantiate is selected based on the "),hMe=n(iL,"CODE",{});var LNt=s(hMe);sMr=r(LNt,"model_type"),LNt.forEach(t),lMr=r(iL,` property of the config object (either
passed as an argument or loaded from `),pMe=n(iL,"CODE",{});var yNt=s(pMe);iMr=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),dMr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(iL,"CODE",{});var xNt=s(_Me);cMr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),fMr=r(iL,":"),iL.forEach(t),mMr=i(Ia),uMe=n(Ia,"UL",{});var $Nt=s(uMe);YM=n($Nt,"LI",{});var GGe=s(YM);bMe=n(GGe,"STRONG",{});var kNt=s(bMe);gMr=r(kNt,"detr"),kNt.forEach(t),hMr=r(GGe," \u2014 "),ZJ=n(GGe,"A",{href:!0});var SNt=s(ZJ);pMr=r(SNt,"DetrForSegmentation"),SNt.forEach(t),_Mr=r(GGe," (DETR model)"),GGe.forEach(t),$Nt.forEach(t),uMr=i(Ia),KM=n(Ia,"P",{});var OGe=s(KM);bMr=r(OGe,"The model is set in evaluation mode by default using "),vMe=n(OGe,"CODE",{});var RNt=s(vMe);vMr=r(RNt,"model.eval()"),RNt.forEach(t),FMr=r(OGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FMe=n(OGe,"CODE",{});var PNt=s(FMe);TMr=r(PNt,"model.train()"),PNt.forEach(t),OGe.forEach(t),MMr=i(Ia),T(ZM.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),aHe=i(f),uc=n(f,"H2",{class:!0});var _Ye=s(uc);eE=n(_Ye,"A",{id:!0,class:!0,href:!0});var BNt=s(eE);TMe=n(BNt,"SPAN",{});var INt=s(TMe);T(Kx.$$.fragment,INt),INt.forEach(t),BNt.forEach(t),EMr=i(_Ye),MMe=n(_Ye,"SPAN",{});var NNt=s(MMe);CMr=r(NNt,"AutoModelForSemanticSegmentation"),NNt.forEach(t),_Ye.forEach(t),nHe=i(f),rr=n(f,"DIV",{class:!0});var jl=s(rr);T(Zx.$$.fragment,jl),wMr=i(jl),bc=n(jl,"P",{});var qne=s(bc);AMr=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eY=n(qne,"A",{href:!0});var qNt=s(eY);LMr=r(qNt,"from_pretrained()"),qNt.forEach(t),yMr=r(qne," class method or the "),oY=n(qne,"A",{href:!0});var jNt=s(oY);xMr=r(jNt,"from_config()"),jNt.forEach(t),$Mr=r(qne,` class
method.`),qne.forEach(t),kMr=i(jl),e$=n(jl,"P",{});var uYe=s(e$);SMr=r(uYe,"This class cannot be instantiated directly using "),EMe=n(uYe,"CODE",{});var DNt=s(EMe);RMr=r(DNt,"__init__()"),DNt.forEach(t),PMr=r(uYe," (throws an error)."),uYe.forEach(t),BMr=i(jl),It=n(jl,"DIV",{class:!0});var dL=s(It);T(o$.$$.fragment,dL),IMr=i(dL),CMe=n(dL,"P",{});var GNt=s(CMe);NMr=r(GNt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GNt.forEach(t),qMr=i(dL),vc=n(dL,"P",{});var jne=s(vc);jMr=r(jne,`Note:
Loading a model from its configuration file does `),wMe=n(jne,"STRONG",{});var ONt=s(wMe);DMr=r(ONt,"not"),ONt.forEach(t),GMr=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(jne,"A",{href:!0});var VNt=s(rY);OMr=r(VNt,"from_pretrained()"),VNt.forEach(t),VMr=r(jne," to load the model weights."),jne.forEach(t),XMr=i(dL),T(oE.$$.fragment,dL),dL.forEach(t),zMr=i(jl),Mo=n(jl,"DIV",{class:!0});var Na=s(Mo);T(r$.$$.fragment,Na),WMr=i(Na),AMe=n(Na,"P",{});var XNt=s(AMe);QMr=r(XNt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XNt.forEach(t),UMr=i(Na),hn=n(Na,"P",{});var cL=s(hn);HMr=r(cL,"The model class to instantiate is selected based on the "),LMe=n(cL,"CODE",{});var zNt=s(LMe);JMr=r(zNt,"model_type"),zNt.forEach(t),YMr=r(cL,` property of the config object (either
passed as an argument or loaded from `),yMe=n(cL,"CODE",{});var WNt=s(yMe);KMr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),ZMr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(cL,"CODE",{});var QNt=s(xMe);eEr=r(QNt,"pretrained_model_name_or_path"),QNt.forEach(t),oEr=r(cL,":"),cL.forEach(t),rEr=i(Na),it=n(Na,"UL",{});var Dl=s(it);rE=n(Dl,"LI",{});var VGe=s(rE);$Me=n(VGe,"STRONG",{});var UNt=s($Me);tEr=r(UNt,"beit"),UNt.forEach(t),aEr=r(VGe," \u2014 "),tY=n(VGe,"A",{href:!0});var HNt=s(tY);nEr=r(HNt,"BeitForSemanticSegmentation"),HNt.forEach(t),sEr=r(VGe," (BEiT model)"),VGe.forEach(t),lEr=i(Dl),tE=n(Dl,"LI",{});var XGe=s(tE);kMe=n(XGe,"STRONG",{});var JNt=s(kMe);iEr=r(JNt,"data2vec-vision"),JNt.forEach(t),dEr=r(XGe," \u2014 "),aY=n(XGe,"A",{href:!0});var YNt=s(aY);cEr=r(YNt,"Data2VecVisionForSemanticSegmentation"),YNt.forEach(t),fEr=r(XGe," (Data2VecVision model)"),XGe.forEach(t),mEr=i(Dl),aE=n(Dl,"LI",{});var zGe=s(aE);SMe=n(zGe,"STRONG",{});var KNt=s(SMe);gEr=r(KNt,"dpt"),KNt.forEach(t),hEr=r(zGe," \u2014 "),nY=n(zGe,"A",{href:!0});var ZNt=s(nY);pEr=r(ZNt,"DPTForSemanticSegmentation"),ZNt.forEach(t),_Er=r(zGe," (DPT model)"),zGe.forEach(t),uEr=i(Dl),nE=n(Dl,"LI",{});var WGe=s(nE);RMe=n(WGe,"STRONG",{});var eqt=s(RMe);bEr=r(eqt,"mobilevit"),eqt.forEach(t),vEr=r(WGe," \u2014 "),sY=n(WGe,"A",{href:!0});var oqt=s(sY);FEr=r(oqt,"MobileViTForSemanticSegmentation"),oqt.forEach(t),TEr=r(WGe," (MobileViT model)"),WGe.forEach(t),MEr=i(Dl),sE=n(Dl,"LI",{});var QGe=s(sE);PMe=n(QGe,"STRONG",{});var rqt=s(PMe);EEr=r(rqt,"segformer"),rqt.forEach(t),CEr=r(QGe," \u2014 "),lY=n(QGe,"A",{href:!0});var tqt=s(lY);wEr=r(tqt,"SegformerForSemanticSegmentation"),tqt.forEach(t),AEr=r(QGe," (SegFormer model)"),QGe.forEach(t),Dl.forEach(t),LEr=i(Na),lE=n(Na,"P",{});var UGe=s(lE);yEr=r(UGe,"The model is set in evaluation mode by default using "),BMe=n(UGe,"CODE",{});var aqt=s(BMe);xEr=r(aqt,"model.eval()"),aqt.forEach(t),$Er=r(UGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IMe=n(UGe,"CODE",{});var nqt=s(IMe);kEr=r(nqt,"model.train()"),nqt.forEach(t),UGe.forEach(t),SEr=i(Na),T(iE.$$.fragment,Na),Na.forEach(t),jl.forEach(t),sHe=i(f),Fc=n(f,"H2",{class:!0});var bYe=s(Fc);dE=n(bYe,"A",{id:!0,class:!0,href:!0});var sqt=s(dE);NMe=n(sqt,"SPAN",{});var lqt=s(NMe);T(t$.$$.fragment,lqt),lqt.forEach(t),sqt.forEach(t),REr=i(bYe),qMe=n(bYe,"SPAN",{});var iqt=s(qMe);PEr=r(iqt,"AutoModelForInstanceSegmentation"),iqt.forEach(t),bYe.forEach(t),lHe=i(f),tr=n(f,"DIV",{class:!0});var Gl=s(tr);T(a$.$$.fragment,Gl),BEr=i(Gl),Tc=n(Gl,"P",{});var Dne=s(Tc);IEr=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iY=n(Dne,"A",{href:!0});var dqt=s(iY);NEr=r(dqt,"from_pretrained()"),dqt.forEach(t),qEr=r(Dne," class method or the "),dY=n(Dne,"A",{href:!0});var cqt=s(dY);jEr=r(cqt,"from_config()"),cqt.forEach(t),DEr=r(Dne,` class
method.`),Dne.forEach(t),GEr=i(Gl),n$=n(Gl,"P",{});var vYe=s(n$);OEr=r(vYe,"This class cannot be instantiated directly using "),jMe=n(vYe,"CODE",{});var fqt=s(jMe);VEr=r(fqt,"__init__()"),fqt.forEach(t),XEr=r(vYe," (throws an error)."),vYe.forEach(t),zEr=i(Gl),Nt=n(Gl,"DIV",{class:!0});var fL=s(Nt);T(s$.$$.fragment,fL),WEr=i(fL),DMe=n(fL,"P",{});var mqt=s(DMe);QEr=r(mqt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mqt.forEach(t),UEr=i(fL),Mc=n(fL,"P",{});var Gne=s(Mc);HEr=r(Gne,`Note:
Loading a model from its configuration file does `),GMe=n(Gne,"STRONG",{});var gqt=s(GMe);JEr=r(gqt,"not"),gqt.forEach(t),YEr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(Gne,"A",{href:!0});var hqt=s(cY);KEr=r(hqt,"from_pretrained()"),hqt.forEach(t),ZEr=r(Gne," to load the model weights."),Gne.forEach(t),e4r=i(fL),T(cE.$$.fragment,fL),fL.forEach(t),o4r=i(Gl),Eo=n(Gl,"DIV",{class:!0});var qa=s(Eo);T(l$.$$.fragment,qa),r4r=i(qa),OMe=n(qa,"P",{});var pqt=s(OMe);t4r=r(pqt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pqt.forEach(t),a4r=i(qa),pn=n(qa,"P",{});var mL=s(pn);n4r=r(mL,"The model class to instantiate is selected based on the "),VMe=n(mL,"CODE",{});var _qt=s(VMe);s4r=r(_qt,"model_type"),_qt.forEach(t),l4r=r(mL,` property of the config object (either
passed as an argument or loaded from `),XMe=n(mL,"CODE",{});var uqt=s(XMe);i4r=r(uqt,"pretrained_model_name_or_path"),uqt.forEach(t),d4r=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(mL,"CODE",{});var bqt=s(zMe);c4r=r(bqt,"pretrained_model_name_or_path"),bqt.forEach(t),f4r=r(mL,":"),mL.forEach(t),m4r=i(qa),WMe=n(qa,"UL",{});var vqt=s(WMe);fE=n(vqt,"LI",{});var HGe=s(fE);QMe=n(HGe,"STRONG",{});var Fqt=s(QMe);g4r=r(Fqt,"maskformer"),Fqt.forEach(t),h4r=r(HGe," \u2014 "),fY=n(HGe,"A",{href:!0});var Tqt=s(fY);p4r=r(Tqt,"MaskFormerForInstanceSegmentation"),Tqt.forEach(t),_4r=r(HGe," (MaskFormer model)"),HGe.forEach(t),vqt.forEach(t),u4r=i(qa),mE=n(qa,"P",{});var JGe=s(mE);b4r=r(JGe,"The model is set in evaluation mode by default using "),UMe=n(JGe,"CODE",{});var Mqt=s(UMe);v4r=r(Mqt,"model.eval()"),Mqt.forEach(t),F4r=r(JGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HMe=n(JGe,"CODE",{});var Eqt=s(HMe);T4r=r(Eqt,"model.train()"),Eqt.forEach(t),JGe.forEach(t),M4r=i(qa),T(gE.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),iHe=i(f),Ec=n(f,"H2",{class:!0});var FYe=s(Ec);hE=n(FYe,"A",{id:!0,class:!0,href:!0});var Cqt=s(hE);JMe=n(Cqt,"SPAN",{});var wqt=s(JMe);T(i$.$$.fragment,wqt),wqt.forEach(t),Cqt.forEach(t),E4r=i(FYe),YMe=n(FYe,"SPAN",{});var Aqt=s(YMe);C4r=r(Aqt,"TFAutoModel"),Aqt.forEach(t),FYe.forEach(t),dHe=i(f),ar=n(f,"DIV",{class:!0});var Ol=s(ar);T(d$.$$.fragment,Ol),w4r=i(Ol),Cc=n(Ol,"P",{});var One=s(Cc);A4r=r(One,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mY=n(One,"A",{href:!0});var Lqt=s(mY);L4r=r(Lqt,"from_pretrained()"),Lqt.forEach(t),y4r=r(One," class method or the "),gY=n(One,"A",{href:!0});var yqt=s(gY);x4r=r(yqt,"from_config()"),yqt.forEach(t),$4r=r(One,` class
method.`),One.forEach(t),k4r=i(Ol),c$=n(Ol,"P",{});var TYe=s(c$);S4r=r(TYe,"This class cannot be instantiated directly using "),KMe=n(TYe,"CODE",{});var xqt=s(KMe);R4r=r(xqt,"__init__()"),xqt.forEach(t),P4r=r(TYe," (throws an error)."),TYe.forEach(t),B4r=i(Ol),qt=n(Ol,"DIV",{class:!0});var gL=s(qt);T(f$.$$.fragment,gL),I4r=i(gL),ZMe=n(gL,"P",{});var $qt=s(ZMe);N4r=r($qt,"Instantiates one of the base model classes of the library from a configuration."),$qt.forEach(t),q4r=i(gL),wc=n(gL,"P",{});var Vne=s(wc);j4r=r(Vne,`Note:
Loading a model from its configuration file does `),eEe=n(Vne,"STRONG",{});var kqt=s(eEe);D4r=r(kqt,"not"),kqt.forEach(t),G4r=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(Vne,"A",{href:!0});var Sqt=s(hY);O4r=r(Sqt,"from_pretrained()"),Sqt.forEach(t),V4r=r(Vne," to load the model weights."),Vne.forEach(t),X4r=i(gL),T(pE.$$.fragment,gL),gL.forEach(t),z4r=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(m$.$$.fragment,Vl),W4r=i(Vl),oEe=n(Vl,"P",{});var Rqt=s(oEe);Q4r=r(Rqt,"Instantiate one of the base model classes of the library from a pretrained model."),Rqt.forEach(t),U4r=i(Vl),_n=n(Vl,"P",{});var hL=s(_n);H4r=r(hL,"The model class to instantiate is selected based on the "),rEe=n(hL,"CODE",{});var Pqt=s(rEe);J4r=r(Pqt,"model_type"),Pqt.forEach(t),Y4r=r(hL,` property of the config object (either
passed as an argument or loaded from `),tEe=n(hL,"CODE",{});var Bqt=s(tEe);K4r=r(Bqt,"pretrained_model_name_or_path"),Bqt.forEach(t),Z4r=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(hL,"CODE",{});var Iqt=s(aEe);eCr=r(Iqt,"pretrained_model_name_or_path"),Iqt.forEach(t),oCr=r(hL,":"),hL.forEach(t),rCr=i(Vl),q=n(Vl,"UL",{});var D=s(q);_E=n(D,"LI",{});var YGe=s(_E);nEe=n(YGe,"STRONG",{});var Nqt=s(nEe);tCr=r(Nqt,"albert"),Nqt.forEach(t),aCr=r(YGe," \u2014 "),pY=n(YGe,"A",{href:!0});var qqt=s(pY);nCr=r(qqt,"TFAlbertModel"),qqt.forEach(t),sCr=r(YGe," (ALBERT model)"),YGe.forEach(t),lCr=i(D),uE=n(D,"LI",{});var KGe=s(uE);sEe=n(KGe,"STRONG",{});var jqt=s(sEe);iCr=r(jqt,"bart"),jqt.forEach(t),dCr=r(KGe," \u2014 "),_Y=n(KGe,"A",{href:!0});var Dqt=s(_Y);cCr=r(Dqt,"TFBartModel"),Dqt.forEach(t),fCr=r(KGe," (BART model)"),KGe.forEach(t),mCr=i(D),bE=n(D,"LI",{});var ZGe=s(bE);lEe=n(ZGe,"STRONG",{});var Gqt=s(lEe);gCr=r(Gqt,"bert"),Gqt.forEach(t),hCr=r(ZGe," \u2014 "),uY=n(ZGe,"A",{href:!0});var Oqt=s(uY);pCr=r(Oqt,"TFBertModel"),Oqt.forEach(t),_Cr=r(ZGe," (BERT model)"),ZGe.forEach(t),uCr=i(D),vE=n(D,"LI",{});var eOe=s(vE);iEe=n(eOe,"STRONG",{});var Vqt=s(iEe);bCr=r(Vqt,"blenderbot"),Vqt.forEach(t),vCr=r(eOe," \u2014 "),bY=n(eOe,"A",{href:!0});var Xqt=s(bY);FCr=r(Xqt,"TFBlenderbotModel"),Xqt.forEach(t),TCr=r(eOe," (Blenderbot model)"),eOe.forEach(t),MCr=i(D),FE=n(D,"LI",{});var oOe=s(FE);dEe=n(oOe,"STRONG",{});var zqt=s(dEe);ECr=r(zqt,"blenderbot-small"),zqt.forEach(t),CCr=r(oOe," \u2014 "),vY=n(oOe,"A",{href:!0});var Wqt=s(vY);wCr=r(Wqt,"TFBlenderbotSmallModel"),Wqt.forEach(t),ACr=r(oOe," (BlenderbotSmall model)"),oOe.forEach(t),LCr=i(D),TE=n(D,"LI",{});var rOe=s(TE);cEe=n(rOe,"STRONG",{});var Qqt=s(cEe);yCr=r(Qqt,"camembert"),Qqt.forEach(t),xCr=r(rOe," \u2014 "),FY=n(rOe,"A",{href:!0});var Uqt=s(FY);$Cr=r(Uqt,"TFCamembertModel"),Uqt.forEach(t),kCr=r(rOe," (CamemBERT model)"),rOe.forEach(t),SCr=i(D),ME=n(D,"LI",{});var tOe=s(ME);fEe=n(tOe,"STRONG",{});var Hqt=s(fEe);RCr=r(Hqt,"clip"),Hqt.forEach(t),PCr=r(tOe," \u2014 "),TY=n(tOe,"A",{href:!0});var Jqt=s(TY);BCr=r(Jqt,"TFCLIPModel"),Jqt.forEach(t),ICr=r(tOe," (CLIP model)"),tOe.forEach(t),NCr=i(D),EE=n(D,"LI",{});var aOe=s(EE);mEe=n(aOe,"STRONG",{});var Yqt=s(mEe);qCr=r(Yqt,"convbert"),Yqt.forEach(t),jCr=r(aOe," \u2014 "),MY=n(aOe,"A",{href:!0});var Kqt=s(MY);DCr=r(Kqt,"TFConvBertModel"),Kqt.forEach(t),GCr=r(aOe," (ConvBERT model)"),aOe.forEach(t),OCr=i(D),CE=n(D,"LI",{});var nOe=s(CE);gEe=n(nOe,"STRONG",{});var Zqt=s(gEe);VCr=r(Zqt,"convnext"),Zqt.forEach(t),XCr=r(nOe," \u2014 "),EY=n(nOe,"A",{href:!0});var ejt=s(EY);zCr=r(ejt,"TFConvNextModel"),ejt.forEach(t),WCr=r(nOe," (ConvNeXT model)"),nOe.forEach(t),QCr=i(D),wE=n(D,"LI",{});var sOe=s(wE);hEe=n(sOe,"STRONG",{});var ojt=s(hEe);UCr=r(ojt,"ctrl"),ojt.forEach(t),HCr=r(sOe," \u2014 "),CY=n(sOe,"A",{href:!0});var rjt=s(CY);JCr=r(rjt,"TFCTRLModel"),rjt.forEach(t),YCr=r(sOe," (CTRL model)"),sOe.forEach(t),KCr=i(D),AE=n(D,"LI",{});var lOe=s(AE);pEe=n(lOe,"STRONG",{});var tjt=s(pEe);ZCr=r(tjt,"data2vec-vision"),tjt.forEach(t),e3r=r(lOe," \u2014 "),wY=n(lOe,"A",{href:!0});var ajt=s(wY);o3r=r(ajt,"TFData2VecVisionModel"),ajt.forEach(t),r3r=r(lOe," (Data2VecVision model)"),lOe.forEach(t),t3r=i(D),LE=n(D,"LI",{});var iOe=s(LE);_Ee=n(iOe,"STRONG",{});var njt=s(_Ee);a3r=r(njt,"deberta"),njt.forEach(t),n3r=r(iOe," \u2014 "),AY=n(iOe,"A",{href:!0});var sjt=s(AY);s3r=r(sjt,"TFDebertaModel"),sjt.forEach(t),l3r=r(iOe," (DeBERTa model)"),iOe.forEach(t),i3r=i(D),yE=n(D,"LI",{});var dOe=s(yE);uEe=n(dOe,"STRONG",{});var ljt=s(uEe);d3r=r(ljt,"deberta-v2"),ljt.forEach(t),c3r=r(dOe," \u2014 "),LY=n(dOe,"A",{href:!0});var ijt=s(LY);f3r=r(ijt,"TFDebertaV2Model"),ijt.forEach(t),m3r=r(dOe," (DeBERTa-v2 model)"),dOe.forEach(t),g3r=i(D),xE=n(D,"LI",{});var cOe=s(xE);bEe=n(cOe,"STRONG",{});var djt=s(bEe);h3r=r(djt,"deit"),djt.forEach(t),p3r=r(cOe," \u2014 "),yY=n(cOe,"A",{href:!0});var cjt=s(yY);_3r=r(cjt,"TFDeiTModel"),cjt.forEach(t),u3r=r(cOe," (DeiT model)"),cOe.forEach(t),b3r=i(D),$E=n(D,"LI",{});var fOe=s($E);vEe=n(fOe,"STRONG",{});var fjt=s(vEe);v3r=r(fjt,"distilbert"),fjt.forEach(t),F3r=r(fOe," \u2014 "),xY=n(fOe,"A",{href:!0});var mjt=s(xY);T3r=r(mjt,"TFDistilBertModel"),mjt.forEach(t),M3r=r(fOe," (DistilBERT model)"),fOe.forEach(t),E3r=i(D),kE=n(D,"LI",{});var mOe=s(kE);FEe=n(mOe,"STRONG",{});var gjt=s(FEe);C3r=r(gjt,"dpr"),gjt.forEach(t),w3r=r(mOe," \u2014 "),$Y=n(mOe,"A",{href:!0});var hjt=s($Y);A3r=r(hjt,"TFDPRQuestionEncoder"),hjt.forEach(t),L3r=r(mOe," (DPR model)"),mOe.forEach(t),y3r=i(D),SE=n(D,"LI",{});var gOe=s(SE);TEe=n(gOe,"STRONG",{});var pjt=s(TEe);x3r=r(pjt,"electra"),pjt.forEach(t),$3r=r(gOe," \u2014 "),kY=n(gOe,"A",{href:!0});var _jt=s(kY);k3r=r(_jt,"TFElectraModel"),_jt.forEach(t),S3r=r(gOe," (ELECTRA model)"),gOe.forEach(t),R3r=i(D),RE=n(D,"LI",{});var hOe=s(RE);MEe=n(hOe,"STRONG",{});var ujt=s(MEe);P3r=r(ujt,"flaubert"),ujt.forEach(t),B3r=r(hOe," \u2014 "),SY=n(hOe,"A",{href:!0});var bjt=s(SY);I3r=r(bjt,"TFFlaubertModel"),bjt.forEach(t),N3r=r(hOe," (FlauBERT model)"),hOe.forEach(t),q3r=i(D),il=n(D,"LI",{});var aP=s(il);EEe=n(aP,"STRONG",{});var vjt=s(EEe);j3r=r(vjt,"funnel"),vjt.forEach(t),D3r=r(aP," \u2014 "),RY=n(aP,"A",{href:!0});var Fjt=s(RY);G3r=r(Fjt,"TFFunnelModel"),Fjt.forEach(t),O3r=r(aP," or "),PY=n(aP,"A",{href:!0});var Tjt=s(PY);V3r=r(Tjt,"TFFunnelBaseModel"),Tjt.forEach(t),X3r=r(aP," (Funnel Transformer model)"),aP.forEach(t),z3r=i(D),PE=n(D,"LI",{});var pOe=s(PE);CEe=n(pOe,"STRONG",{});var Mjt=s(CEe);W3r=r(Mjt,"gpt2"),Mjt.forEach(t),Q3r=r(pOe," \u2014 "),BY=n(pOe,"A",{href:!0});var Ejt=s(BY);U3r=r(Ejt,"TFGPT2Model"),Ejt.forEach(t),H3r=r(pOe," (OpenAI GPT-2 model)"),pOe.forEach(t),J3r=i(D),BE=n(D,"LI",{});var _Oe=s(BE);wEe=n(_Oe,"STRONG",{});var Cjt=s(wEe);Y3r=r(Cjt,"gptj"),Cjt.forEach(t),K3r=r(_Oe," \u2014 "),IY=n(_Oe,"A",{href:!0});var wjt=s(IY);Z3r=r(wjt,"TFGPTJModel"),wjt.forEach(t),e0r=r(_Oe," (GPT-J model)"),_Oe.forEach(t),o0r=i(D),IE=n(D,"LI",{});var uOe=s(IE);AEe=n(uOe,"STRONG",{});var Ajt=s(AEe);r0r=r(Ajt,"hubert"),Ajt.forEach(t),t0r=r(uOe," \u2014 "),NY=n(uOe,"A",{href:!0});var Ljt=s(NY);a0r=r(Ljt,"TFHubertModel"),Ljt.forEach(t),n0r=r(uOe," (Hubert model)"),uOe.forEach(t),s0r=i(D),NE=n(D,"LI",{});var bOe=s(NE);LEe=n(bOe,"STRONG",{});var yjt=s(LEe);l0r=r(yjt,"layoutlm"),yjt.forEach(t),i0r=r(bOe," \u2014 "),qY=n(bOe,"A",{href:!0});var xjt=s(qY);d0r=r(xjt,"TFLayoutLMModel"),xjt.forEach(t),c0r=r(bOe," (LayoutLM model)"),bOe.forEach(t),f0r=i(D),qE=n(D,"LI",{});var vOe=s(qE);yEe=n(vOe,"STRONG",{});var $jt=s(yEe);m0r=r($jt,"led"),$jt.forEach(t),g0r=r(vOe," \u2014 "),jY=n(vOe,"A",{href:!0});var kjt=s(jY);h0r=r(kjt,"TFLEDModel"),kjt.forEach(t),p0r=r(vOe," (LED model)"),vOe.forEach(t),_0r=i(D),jE=n(D,"LI",{});var FOe=s(jE);xEe=n(FOe,"STRONG",{});var Sjt=s(xEe);u0r=r(Sjt,"longformer"),Sjt.forEach(t),b0r=r(FOe," \u2014 "),DY=n(FOe,"A",{href:!0});var Rjt=s(DY);v0r=r(Rjt,"TFLongformerModel"),Rjt.forEach(t),F0r=r(FOe," (Longformer model)"),FOe.forEach(t),T0r=i(D),DE=n(D,"LI",{});var TOe=s(DE);$Ee=n(TOe,"STRONG",{});var Pjt=s($Ee);M0r=r(Pjt,"lxmert"),Pjt.forEach(t),E0r=r(TOe," \u2014 "),GY=n(TOe,"A",{href:!0});var Bjt=s(GY);C0r=r(Bjt,"TFLxmertModel"),Bjt.forEach(t),w0r=r(TOe," (LXMERT model)"),TOe.forEach(t),A0r=i(D),GE=n(D,"LI",{});var MOe=s(GE);kEe=n(MOe,"STRONG",{});var Ijt=s(kEe);L0r=r(Ijt,"marian"),Ijt.forEach(t),y0r=r(MOe," \u2014 "),OY=n(MOe,"A",{href:!0});var Njt=s(OY);x0r=r(Njt,"TFMarianModel"),Njt.forEach(t),$0r=r(MOe," (Marian model)"),MOe.forEach(t),k0r=i(D),OE=n(D,"LI",{});var EOe=s(OE);SEe=n(EOe,"STRONG",{});var qjt=s(SEe);S0r=r(qjt,"mbart"),qjt.forEach(t),R0r=r(EOe," \u2014 "),VY=n(EOe,"A",{href:!0});var jjt=s(VY);P0r=r(jjt,"TFMBartModel"),jjt.forEach(t),B0r=r(EOe," (mBART model)"),EOe.forEach(t),I0r=i(D),VE=n(D,"LI",{});var COe=s(VE);REe=n(COe,"STRONG",{});var Djt=s(REe);N0r=r(Djt,"mobilebert"),Djt.forEach(t),q0r=r(COe," \u2014 "),XY=n(COe,"A",{href:!0});var Gjt=s(XY);j0r=r(Gjt,"TFMobileBertModel"),Gjt.forEach(t),D0r=r(COe," (MobileBERT model)"),COe.forEach(t),G0r=i(D),XE=n(D,"LI",{});var wOe=s(XE);PEe=n(wOe,"STRONG",{});var Ojt=s(PEe);O0r=r(Ojt,"mobilevit"),Ojt.forEach(t),V0r=r(wOe," \u2014 "),zY=n(wOe,"A",{href:!0});var Vjt=s(zY);X0r=r(Vjt,"TFMobileViTModel"),Vjt.forEach(t),z0r=r(wOe," (MobileViT model)"),wOe.forEach(t),W0r=i(D),zE=n(D,"LI",{});var AOe=s(zE);BEe=n(AOe,"STRONG",{});var Xjt=s(BEe);Q0r=r(Xjt,"mpnet"),Xjt.forEach(t),U0r=r(AOe," \u2014 "),WY=n(AOe,"A",{href:!0});var zjt=s(WY);H0r=r(zjt,"TFMPNetModel"),zjt.forEach(t),J0r=r(AOe," (MPNet model)"),AOe.forEach(t),Y0r=i(D),WE=n(D,"LI",{});var LOe=s(WE);IEe=n(LOe,"STRONG",{});var Wjt=s(IEe);K0r=r(Wjt,"mt5"),Wjt.forEach(t),Z0r=r(LOe," \u2014 "),QY=n(LOe,"A",{href:!0});var Qjt=s(QY);ewr=r(Qjt,"TFMT5Model"),Qjt.forEach(t),owr=r(LOe," (MT5 model)"),LOe.forEach(t),rwr=i(D),QE=n(D,"LI",{});var yOe=s(QE);NEe=n(yOe,"STRONG",{});var Ujt=s(NEe);twr=r(Ujt,"openai-gpt"),Ujt.forEach(t),awr=r(yOe," \u2014 "),UY=n(yOe,"A",{href:!0});var Hjt=s(UY);nwr=r(Hjt,"TFOpenAIGPTModel"),Hjt.forEach(t),swr=r(yOe," (OpenAI GPT model)"),yOe.forEach(t),lwr=i(D),UE=n(D,"LI",{});var xOe=s(UE);qEe=n(xOe,"STRONG",{});var Jjt=s(qEe);iwr=r(Jjt,"opt"),Jjt.forEach(t),dwr=r(xOe," \u2014 "),HY=n(xOe,"A",{href:!0});var Yjt=s(HY);cwr=r(Yjt,"TFOPTModel"),Yjt.forEach(t),fwr=r(xOe," (OPT model)"),xOe.forEach(t),mwr=i(D),HE=n(D,"LI",{});var $Oe=s(HE);jEe=n($Oe,"STRONG",{});var Kjt=s(jEe);gwr=r(Kjt,"pegasus"),Kjt.forEach(t),hwr=r($Oe," \u2014 "),JY=n($Oe,"A",{href:!0});var Zjt=s(JY);pwr=r(Zjt,"TFPegasusModel"),Zjt.forEach(t),_wr=r($Oe," (Pegasus model)"),$Oe.forEach(t),uwr=i(D),JE=n(D,"LI",{});var kOe=s(JE);DEe=n(kOe,"STRONG",{});var eDt=s(DEe);bwr=r(eDt,"regnet"),eDt.forEach(t),vwr=r(kOe," \u2014 "),YY=n(kOe,"A",{href:!0});var oDt=s(YY);Fwr=r(oDt,"TFRegNetModel"),oDt.forEach(t),Twr=r(kOe," (RegNet model)"),kOe.forEach(t),Mwr=i(D),YE=n(D,"LI",{});var SOe=s(YE);GEe=n(SOe,"STRONG",{});var rDt=s(GEe);Ewr=r(rDt,"rembert"),rDt.forEach(t),Cwr=r(SOe," \u2014 "),KY=n(SOe,"A",{href:!0});var tDt=s(KY);wwr=r(tDt,"TFRemBertModel"),tDt.forEach(t),Awr=r(SOe," (RemBERT model)"),SOe.forEach(t),Lwr=i(D),KE=n(D,"LI",{});var ROe=s(KE);OEe=n(ROe,"STRONG",{});var aDt=s(OEe);ywr=r(aDt,"resnet"),aDt.forEach(t),xwr=r(ROe," \u2014 "),ZY=n(ROe,"A",{href:!0});var nDt=s(ZY);$wr=r(nDt,"TFResNetModel"),nDt.forEach(t),kwr=r(ROe," (ResNet model)"),ROe.forEach(t),Swr=i(D),ZE=n(D,"LI",{});var POe=s(ZE);VEe=n(POe,"STRONG",{});var sDt=s(VEe);Rwr=r(sDt,"roberta"),sDt.forEach(t),Pwr=r(POe," \u2014 "),eK=n(POe,"A",{href:!0});var lDt=s(eK);Bwr=r(lDt,"TFRobertaModel"),lDt.forEach(t),Iwr=r(POe," (RoBERTa model)"),POe.forEach(t),Nwr=i(D),e4=n(D,"LI",{});var BOe=s(e4);XEe=n(BOe,"STRONG",{});var iDt=s(XEe);qwr=r(iDt,"roformer"),iDt.forEach(t),jwr=r(BOe," \u2014 "),oK=n(BOe,"A",{href:!0});var dDt=s(oK);Dwr=r(dDt,"TFRoFormerModel"),dDt.forEach(t),Gwr=r(BOe," (RoFormer model)"),BOe.forEach(t),Owr=i(D),o4=n(D,"LI",{});var IOe=s(o4);zEe=n(IOe,"STRONG",{});var cDt=s(zEe);Vwr=r(cDt,"segformer"),cDt.forEach(t),Xwr=r(IOe," \u2014 "),rK=n(IOe,"A",{href:!0});var fDt=s(rK);zwr=r(fDt,"TFSegformerModel"),fDt.forEach(t),Wwr=r(IOe," (SegFormer model)"),IOe.forEach(t),Qwr=i(D),r4=n(D,"LI",{});var NOe=s(r4);WEe=n(NOe,"STRONG",{});var mDt=s(WEe);Uwr=r(mDt,"speech_to_text"),mDt.forEach(t),Hwr=r(NOe," \u2014 "),tK=n(NOe,"A",{href:!0});var gDt=s(tK);Jwr=r(gDt,"TFSpeech2TextModel"),gDt.forEach(t),Ywr=r(NOe," (Speech2Text model)"),NOe.forEach(t),Kwr=i(D),t4=n(D,"LI",{});var qOe=s(t4);QEe=n(qOe,"STRONG",{});var hDt=s(QEe);Zwr=r(hDt,"swin"),hDt.forEach(t),e6r=r(qOe," \u2014 "),aK=n(qOe,"A",{href:!0});var pDt=s(aK);o6r=r(pDt,"TFSwinModel"),pDt.forEach(t),r6r=r(qOe," (Swin Transformer model)"),qOe.forEach(t),t6r=i(D),a4=n(D,"LI",{});var jOe=s(a4);UEe=n(jOe,"STRONG",{});var _Dt=s(UEe);a6r=r(_Dt,"t5"),_Dt.forEach(t),n6r=r(jOe," \u2014 "),nK=n(jOe,"A",{href:!0});var uDt=s(nK);s6r=r(uDt,"TFT5Model"),uDt.forEach(t),l6r=r(jOe," (T5 model)"),jOe.forEach(t),i6r=i(D),n4=n(D,"LI",{});var DOe=s(n4);HEe=n(DOe,"STRONG",{});var bDt=s(HEe);d6r=r(bDt,"tapas"),bDt.forEach(t),c6r=r(DOe," \u2014 "),sK=n(DOe,"A",{href:!0});var vDt=s(sK);f6r=r(vDt,"TFTapasModel"),vDt.forEach(t),m6r=r(DOe," (TAPAS model)"),DOe.forEach(t),g6r=i(D),s4=n(D,"LI",{});var GOe=s(s4);JEe=n(GOe,"STRONG",{});var FDt=s(JEe);h6r=r(FDt,"transfo-xl"),FDt.forEach(t),p6r=r(GOe," \u2014 "),lK=n(GOe,"A",{href:!0});var TDt=s(lK);_6r=r(TDt,"TFTransfoXLModel"),TDt.forEach(t),u6r=r(GOe," (Transformer-XL model)"),GOe.forEach(t),b6r=i(D),l4=n(D,"LI",{});var OOe=s(l4);YEe=n(OOe,"STRONG",{});var MDt=s(YEe);v6r=r(MDt,"vit"),MDt.forEach(t),F6r=r(OOe," \u2014 "),iK=n(OOe,"A",{href:!0});var EDt=s(iK);T6r=r(EDt,"TFViTModel"),EDt.forEach(t),M6r=r(OOe," (ViT model)"),OOe.forEach(t),E6r=i(D),i4=n(D,"LI",{});var VOe=s(i4);KEe=n(VOe,"STRONG",{});var CDt=s(KEe);C6r=r(CDt,"vit_mae"),CDt.forEach(t),w6r=r(VOe," \u2014 "),dK=n(VOe,"A",{href:!0});var wDt=s(dK);A6r=r(wDt,"TFViTMAEModel"),wDt.forEach(t),L6r=r(VOe," (ViTMAE model)"),VOe.forEach(t),y6r=i(D),d4=n(D,"LI",{});var XOe=s(d4);ZEe=n(XOe,"STRONG",{});var ADt=s(ZEe);x6r=r(ADt,"wav2vec2"),ADt.forEach(t),$6r=r(XOe," \u2014 "),cK=n(XOe,"A",{href:!0});var LDt=s(cK);k6r=r(LDt,"TFWav2Vec2Model"),LDt.forEach(t),S6r=r(XOe," (Wav2Vec2 model)"),XOe.forEach(t),R6r=i(D),c4=n(D,"LI",{});var zOe=s(c4);e4e=n(zOe,"STRONG",{});var yDt=s(e4e);P6r=r(yDt,"xlm"),yDt.forEach(t),B6r=r(zOe," \u2014 "),fK=n(zOe,"A",{href:!0});var xDt=s(fK);I6r=r(xDt,"TFXLMModel"),xDt.forEach(t),N6r=r(zOe," (XLM model)"),zOe.forEach(t),q6r=i(D),f4=n(D,"LI",{});var WOe=s(f4);o4e=n(WOe,"STRONG",{});var $Dt=s(o4e);j6r=r($Dt,"xlm-roberta"),$Dt.forEach(t),D6r=r(WOe," \u2014 "),mK=n(WOe,"A",{href:!0});var kDt=s(mK);G6r=r(kDt,"TFXLMRobertaModel"),kDt.forEach(t),O6r=r(WOe," (XLM-RoBERTa model)"),WOe.forEach(t),V6r=i(D),m4=n(D,"LI",{});var QOe=s(m4);r4e=n(QOe,"STRONG",{});var SDt=s(r4e);X6r=r(SDt,"xlnet"),SDt.forEach(t),z6r=r(QOe," \u2014 "),gK=n(QOe,"A",{href:!0});var RDt=s(gK);W6r=r(RDt,"TFXLNetModel"),RDt.forEach(t),Q6r=r(QOe," (XLNet model)"),QOe.forEach(t),D.forEach(t),U6r=i(Vl),T(g4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),cHe=i(f),Ac=n(f,"H2",{class:!0});var MYe=s(Ac);h4=n(MYe,"A",{id:!0,class:!0,href:!0});var PDt=s(h4);t4e=n(PDt,"SPAN",{});var BDt=s(t4e);T(g$.$$.fragment,BDt),BDt.forEach(t),PDt.forEach(t),H6r=i(MYe),a4e=n(MYe,"SPAN",{});var IDt=s(a4e);J6r=r(IDt,"TFAutoModelForPreTraining"),IDt.forEach(t),MYe.forEach(t),fHe=i(f),nr=n(f,"DIV",{class:!0});var Xl=s(nr);T(h$.$$.fragment,Xl),Y6r=i(Xl),Lc=n(Xl,"P",{});var Xne=s(Lc);K6r=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hK=n(Xne,"A",{href:!0});var NDt=s(hK);Z6r=r(NDt,"from_pretrained()"),NDt.forEach(t),eAr=r(Xne," class method or the "),pK=n(Xne,"A",{href:!0});var qDt=s(pK);oAr=r(qDt,"from_config()"),qDt.forEach(t),rAr=r(Xne,` class
method.`),Xne.forEach(t),tAr=i(Xl),p$=n(Xl,"P",{});var EYe=s(p$);aAr=r(EYe,"This class cannot be instantiated directly using "),n4e=n(EYe,"CODE",{});var jDt=s(n4e);nAr=r(jDt,"__init__()"),jDt.forEach(t),sAr=r(EYe," (throws an error)."),EYe.forEach(t),lAr=i(Xl),jt=n(Xl,"DIV",{class:!0});var pL=s(jt);T(_$.$$.fragment,pL),iAr=i(pL),s4e=n(pL,"P",{});var DDt=s(s4e);dAr=r(DDt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DDt.forEach(t),cAr=i(pL),yc=n(pL,"P",{});var zne=s(yc);fAr=r(zne,`Note:
Loading a model from its configuration file does `),l4e=n(zne,"STRONG",{});var GDt=s(l4e);mAr=r(GDt,"not"),GDt.forEach(t),gAr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(zne,"A",{href:!0});var ODt=s(_K);hAr=r(ODt,"from_pretrained()"),ODt.forEach(t),pAr=r(zne," to load the model weights."),zne.forEach(t),_Ar=i(pL),T(p4.$$.fragment,pL),pL.forEach(t),uAr=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(u$.$$.fragment,zl),bAr=i(zl),i4e=n(zl,"P",{});var VDt=s(i4e);vAr=r(VDt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VDt.forEach(t),FAr=i(zl),un=n(zl,"P",{});var _L=s(un);TAr=r(_L,"The model class to instantiate is selected based on the "),d4e=n(_L,"CODE",{});var XDt=s(d4e);MAr=r(XDt,"model_type"),XDt.forEach(t),EAr=r(_L,` property of the config object (either
passed as an argument or loaded from `),c4e=n(_L,"CODE",{});var zDt=s(c4e);CAr=r(zDt,"pretrained_model_name_or_path"),zDt.forEach(t),wAr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(_L,"CODE",{});var WDt=s(f4e);AAr=r(WDt,"pretrained_model_name_or_path"),WDt.forEach(t),LAr=r(_L,":"),_L.forEach(t),yAr=i(zl),se=n(zl,"UL",{});var le=s(se);_4=n(le,"LI",{});var UOe=s(_4);m4e=n(UOe,"STRONG",{});var QDt=s(m4e);xAr=r(QDt,"albert"),QDt.forEach(t),$Ar=r(UOe," \u2014 "),uK=n(UOe,"A",{href:!0});var UDt=s(uK);kAr=r(UDt,"TFAlbertForPreTraining"),UDt.forEach(t),SAr=r(UOe," (ALBERT model)"),UOe.forEach(t),RAr=i(le),u4=n(le,"LI",{});var HOe=s(u4);g4e=n(HOe,"STRONG",{});var HDt=s(g4e);PAr=r(HDt,"bart"),HDt.forEach(t),BAr=r(HOe," \u2014 "),bK=n(HOe,"A",{href:!0});var JDt=s(bK);IAr=r(JDt,"TFBartForConditionalGeneration"),JDt.forEach(t),NAr=r(HOe," (BART model)"),HOe.forEach(t),qAr=i(le),b4=n(le,"LI",{});var JOe=s(b4);h4e=n(JOe,"STRONG",{});var YDt=s(h4e);jAr=r(YDt,"bert"),YDt.forEach(t),DAr=r(JOe," \u2014 "),vK=n(JOe,"A",{href:!0});var KDt=s(vK);GAr=r(KDt,"TFBertForPreTraining"),KDt.forEach(t),OAr=r(JOe," (BERT model)"),JOe.forEach(t),VAr=i(le),v4=n(le,"LI",{});var YOe=s(v4);p4e=n(YOe,"STRONG",{});var ZDt=s(p4e);XAr=r(ZDt,"camembert"),ZDt.forEach(t),zAr=r(YOe," \u2014 "),FK=n(YOe,"A",{href:!0});var eGt=s(FK);WAr=r(eGt,"TFCamembertForMaskedLM"),eGt.forEach(t),QAr=r(YOe," (CamemBERT model)"),YOe.forEach(t),UAr=i(le),F4=n(le,"LI",{});var KOe=s(F4);_4e=n(KOe,"STRONG",{});var oGt=s(_4e);HAr=r(oGt,"ctrl"),oGt.forEach(t),JAr=r(KOe," \u2014 "),TK=n(KOe,"A",{href:!0});var rGt=s(TK);YAr=r(rGt,"TFCTRLLMHeadModel"),rGt.forEach(t),KAr=r(KOe," (CTRL model)"),KOe.forEach(t),ZAr=i(le),T4=n(le,"LI",{});var ZOe=s(T4);u4e=n(ZOe,"STRONG",{});var tGt=s(u4e);e7r=r(tGt,"distilbert"),tGt.forEach(t),o7r=r(ZOe," \u2014 "),MK=n(ZOe,"A",{href:!0});var aGt=s(MK);r7r=r(aGt,"TFDistilBertForMaskedLM"),aGt.forEach(t),t7r=r(ZOe," (DistilBERT model)"),ZOe.forEach(t),a7r=i(le),M4=n(le,"LI",{});var eVe=s(M4);b4e=n(eVe,"STRONG",{});var nGt=s(b4e);n7r=r(nGt,"electra"),nGt.forEach(t),s7r=r(eVe," \u2014 "),EK=n(eVe,"A",{href:!0});var sGt=s(EK);l7r=r(sGt,"TFElectraForPreTraining"),sGt.forEach(t),i7r=r(eVe," (ELECTRA model)"),eVe.forEach(t),d7r=i(le),E4=n(le,"LI",{});var oVe=s(E4);v4e=n(oVe,"STRONG",{});var lGt=s(v4e);c7r=r(lGt,"flaubert"),lGt.forEach(t),f7r=r(oVe," \u2014 "),CK=n(oVe,"A",{href:!0});var iGt=s(CK);m7r=r(iGt,"TFFlaubertWithLMHeadModel"),iGt.forEach(t),g7r=r(oVe," (FlauBERT model)"),oVe.forEach(t),h7r=i(le),C4=n(le,"LI",{});var rVe=s(C4);F4e=n(rVe,"STRONG",{});var dGt=s(F4e);p7r=r(dGt,"funnel"),dGt.forEach(t),_7r=r(rVe," \u2014 "),wK=n(rVe,"A",{href:!0});var cGt=s(wK);u7r=r(cGt,"TFFunnelForPreTraining"),cGt.forEach(t),b7r=r(rVe," (Funnel Transformer model)"),rVe.forEach(t),v7r=i(le),w4=n(le,"LI",{});var tVe=s(w4);T4e=n(tVe,"STRONG",{});var fGt=s(T4e);F7r=r(fGt,"gpt2"),fGt.forEach(t),T7r=r(tVe," \u2014 "),AK=n(tVe,"A",{href:!0});var mGt=s(AK);M7r=r(mGt,"TFGPT2LMHeadModel"),mGt.forEach(t),E7r=r(tVe," (OpenAI GPT-2 model)"),tVe.forEach(t),C7r=i(le),A4=n(le,"LI",{});var aVe=s(A4);M4e=n(aVe,"STRONG",{});var gGt=s(M4e);w7r=r(gGt,"layoutlm"),gGt.forEach(t),A7r=r(aVe," \u2014 "),LK=n(aVe,"A",{href:!0});var hGt=s(LK);L7r=r(hGt,"TFLayoutLMForMaskedLM"),hGt.forEach(t),y7r=r(aVe," (LayoutLM model)"),aVe.forEach(t),x7r=i(le),L4=n(le,"LI",{});var nVe=s(L4);E4e=n(nVe,"STRONG",{});var pGt=s(E4e);$7r=r(pGt,"lxmert"),pGt.forEach(t),k7r=r(nVe," \u2014 "),yK=n(nVe,"A",{href:!0});var _Gt=s(yK);S7r=r(_Gt,"TFLxmertForPreTraining"),_Gt.forEach(t),R7r=r(nVe," (LXMERT model)"),nVe.forEach(t),P7r=i(le),y4=n(le,"LI",{});var sVe=s(y4);C4e=n(sVe,"STRONG",{});var uGt=s(C4e);B7r=r(uGt,"mobilebert"),uGt.forEach(t),I7r=r(sVe," \u2014 "),xK=n(sVe,"A",{href:!0});var bGt=s(xK);N7r=r(bGt,"TFMobileBertForPreTraining"),bGt.forEach(t),q7r=r(sVe," (MobileBERT model)"),sVe.forEach(t),j7r=i(le),x4=n(le,"LI",{});var lVe=s(x4);w4e=n(lVe,"STRONG",{});var vGt=s(w4e);D7r=r(vGt,"mpnet"),vGt.forEach(t),G7r=r(lVe," \u2014 "),$K=n(lVe,"A",{href:!0});var FGt=s($K);O7r=r(FGt,"TFMPNetForMaskedLM"),FGt.forEach(t),V7r=r(lVe," (MPNet model)"),lVe.forEach(t),X7r=i(le),$4=n(le,"LI",{});var iVe=s($4);A4e=n(iVe,"STRONG",{});var TGt=s(A4e);z7r=r(TGt,"openai-gpt"),TGt.forEach(t),W7r=r(iVe," \u2014 "),kK=n(iVe,"A",{href:!0});var MGt=s(kK);Q7r=r(MGt,"TFOpenAIGPTLMHeadModel"),MGt.forEach(t),U7r=r(iVe," (OpenAI GPT model)"),iVe.forEach(t),H7r=i(le),k4=n(le,"LI",{});var dVe=s(k4);L4e=n(dVe,"STRONG",{});var EGt=s(L4e);J7r=r(EGt,"roberta"),EGt.forEach(t),Y7r=r(dVe," \u2014 "),SK=n(dVe,"A",{href:!0});var CGt=s(SK);K7r=r(CGt,"TFRobertaForMaskedLM"),CGt.forEach(t),Z7r=r(dVe," (RoBERTa model)"),dVe.forEach(t),eLr=i(le),S4=n(le,"LI",{});var cVe=s(S4);y4e=n(cVe,"STRONG",{});var wGt=s(y4e);oLr=r(wGt,"t5"),wGt.forEach(t),rLr=r(cVe," \u2014 "),RK=n(cVe,"A",{href:!0});var AGt=s(RK);tLr=r(AGt,"TFT5ForConditionalGeneration"),AGt.forEach(t),aLr=r(cVe," (T5 model)"),cVe.forEach(t),nLr=i(le),R4=n(le,"LI",{});var fVe=s(R4);x4e=n(fVe,"STRONG",{});var LGt=s(x4e);sLr=r(LGt,"tapas"),LGt.forEach(t),lLr=r(fVe," \u2014 "),PK=n(fVe,"A",{href:!0});var yGt=s(PK);iLr=r(yGt,"TFTapasForMaskedLM"),yGt.forEach(t),dLr=r(fVe," (TAPAS model)"),fVe.forEach(t),cLr=i(le),P4=n(le,"LI",{});var mVe=s(P4);$4e=n(mVe,"STRONG",{});var xGt=s($4e);fLr=r(xGt,"transfo-xl"),xGt.forEach(t),mLr=r(mVe," \u2014 "),BK=n(mVe,"A",{href:!0});var $Gt=s(BK);gLr=r($Gt,"TFTransfoXLLMHeadModel"),$Gt.forEach(t),hLr=r(mVe," (Transformer-XL model)"),mVe.forEach(t),pLr=i(le),B4=n(le,"LI",{});var gVe=s(B4);k4e=n(gVe,"STRONG",{});var kGt=s(k4e);_Lr=r(kGt,"vit_mae"),kGt.forEach(t),uLr=r(gVe," \u2014 "),IK=n(gVe,"A",{href:!0});var SGt=s(IK);bLr=r(SGt,"TFViTMAEForPreTraining"),SGt.forEach(t),vLr=r(gVe," (ViTMAE model)"),gVe.forEach(t),FLr=i(le),I4=n(le,"LI",{});var hVe=s(I4);S4e=n(hVe,"STRONG",{});var RGt=s(S4e);TLr=r(RGt,"xlm"),RGt.forEach(t),MLr=r(hVe," \u2014 "),NK=n(hVe,"A",{href:!0});var PGt=s(NK);ELr=r(PGt,"TFXLMWithLMHeadModel"),PGt.forEach(t),CLr=r(hVe," (XLM model)"),hVe.forEach(t),wLr=i(le),N4=n(le,"LI",{});var pVe=s(N4);R4e=n(pVe,"STRONG",{});var BGt=s(R4e);ALr=r(BGt,"xlm-roberta"),BGt.forEach(t),LLr=r(pVe," \u2014 "),qK=n(pVe,"A",{href:!0});var IGt=s(qK);yLr=r(IGt,"TFXLMRobertaForMaskedLM"),IGt.forEach(t),xLr=r(pVe," (XLM-RoBERTa model)"),pVe.forEach(t),$Lr=i(le),q4=n(le,"LI",{});var _Ve=s(q4);P4e=n(_Ve,"STRONG",{});var NGt=s(P4e);kLr=r(NGt,"xlnet"),NGt.forEach(t),SLr=r(_Ve," \u2014 "),jK=n(_Ve,"A",{href:!0});var qGt=s(jK);RLr=r(qGt,"TFXLNetLMHeadModel"),qGt.forEach(t),PLr=r(_Ve," (XLNet model)"),_Ve.forEach(t),le.forEach(t),BLr=i(zl),T(j4.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),mHe=i(f),xc=n(f,"H2",{class:!0});var CYe=s(xc);D4=n(CYe,"A",{id:!0,class:!0,href:!0});var jGt=s(D4);B4e=n(jGt,"SPAN",{});var DGt=s(B4e);T(b$.$$.fragment,DGt),DGt.forEach(t),jGt.forEach(t),ILr=i(CYe),I4e=n(CYe,"SPAN",{});var GGt=s(I4e);NLr=r(GGt,"TFAutoModelForCausalLM"),GGt.forEach(t),CYe.forEach(t),gHe=i(f),sr=n(f,"DIV",{class:!0});var Wl=s(sr);T(v$.$$.fragment,Wl),qLr=i(Wl),$c=n(Wl,"P",{});var Wne=s($c);jLr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DK=n(Wne,"A",{href:!0});var OGt=s(DK);DLr=r(OGt,"from_pretrained()"),OGt.forEach(t),GLr=r(Wne," class method or the "),GK=n(Wne,"A",{href:!0});var VGt=s(GK);OLr=r(VGt,"from_config()"),VGt.forEach(t),VLr=r(Wne,` class
method.`),Wne.forEach(t),XLr=i(Wl),F$=n(Wl,"P",{});var wYe=s(F$);zLr=r(wYe,"This class cannot be instantiated directly using "),N4e=n(wYe,"CODE",{});var XGt=s(N4e);WLr=r(XGt,"__init__()"),XGt.forEach(t),QLr=r(wYe," (throws an error)."),wYe.forEach(t),ULr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var uL=s(Dt);T(T$.$$.fragment,uL),HLr=i(uL),q4e=n(uL,"P",{});var zGt=s(q4e);JLr=r(zGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zGt.forEach(t),YLr=i(uL),kc=n(uL,"P",{});var Qne=s(kc);KLr=r(Qne,`Note:
Loading a model from its configuration file does `),j4e=n(Qne,"STRONG",{});var WGt=s(j4e);ZLr=r(WGt,"not"),WGt.forEach(t),eyr=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Qne,"A",{href:!0});var QGt=s(OK);oyr=r(QGt,"from_pretrained()"),QGt.forEach(t),ryr=r(Qne," to load the model weights."),Qne.forEach(t),tyr=i(uL),T(G4.$$.fragment,uL),uL.forEach(t),ayr=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(M$.$$.fragment,Ql),nyr=i(Ql),D4e=n(Ql,"P",{});var UGt=s(D4e);syr=r(UGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),UGt.forEach(t),lyr=i(Ql),bn=n(Ql,"P",{});var bL=s(bn);iyr=r(bL,"The model class to instantiate is selected based on the "),G4e=n(bL,"CODE",{});var HGt=s(G4e);dyr=r(HGt,"model_type"),HGt.forEach(t),cyr=r(bL,` property of the config object (either
passed as an argument or loaded from `),O4e=n(bL,"CODE",{});var JGt=s(O4e);fyr=r(JGt,"pretrained_model_name_or_path"),JGt.forEach(t),myr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(bL,"CODE",{});var YGt=s(V4e);gyr=r(YGt,"pretrained_model_name_or_path"),YGt.forEach(t),hyr=r(bL,":"),bL.forEach(t),pyr=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);O4=n(Ce,"LI",{});var uVe=s(O4);X4e=n(uVe,"STRONG",{});var KGt=s(X4e);_yr=r(KGt,"bert"),KGt.forEach(t),uyr=r(uVe," \u2014 "),VK=n(uVe,"A",{href:!0});var ZGt=s(VK);byr=r(ZGt,"TFBertLMHeadModel"),ZGt.forEach(t),vyr=r(uVe," (BERT model)"),uVe.forEach(t),Fyr=i(Ce),V4=n(Ce,"LI",{});var bVe=s(V4);z4e=n(bVe,"STRONG",{});var eOt=s(z4e);Tyr=r(eOt,"camembert"),eOt.forEach(t),Myr=r(bVe," \u2014 "),XK=n(bVe,"A",{href:!0});var oOt=s(XK);Eyr=r(oOt,"TFCamembertForCausalLM"),oOt.forEach(t),Cyr=r(bVe," (CamemBERT model)"),bVe.forEach(t),wyr=i(Ce),X4=n(Ce,"LI",{});var vVe=s(X4);W4e=n(vVe,"STRONG",{});var rOt=s(W4e);Ayr=r(rOt,"ctrl"),rOt.forEach(t),Lyr=r(vVe," \u2014 "),zK=n(vVe,"A",{href:!0});var tOt=s(zK);yyr=r(tOt,"TFCTRLLMHeadModel"),tOt.forEach(t),xyr=r(vVe," (CTRL model)"),vVe.forEach(t),$yr=i(Ce),z4=n(Ce,"LI",{});var FVe=s(z4);Q4e=n(FVe,"STRONG",{});var aOt=s(Q4e);kyr=r(aOt,"gpt2"),aOt.forEach(t),Syr=r(FVe," \u2014 "),WK=n(FVe,"A",{href:!0});var nOt=s(WK);Ryr=r(nOt,"TFGPT2LMHeadModel"),nOt.forEach(t),Pyr=r(FVe," (OpenAI GPT-2 model)"),FVe.forEach(t),Byr=i(Ce),W4=n(Ce,"LI",{});var TVe=s(W4);U4e=n(TVe,"STRONG",{});var sOt=s(U4e);Iyr=r(sOt,"gptj"),sOt.forEach(t),Nyr=r(TVe," \u2014 "),QK=n(TVe,"A",{href:!0});var lOt=s(QK);qyr=r(lOt,"TFGPTJForCausalLM"),lOt.forEach(t),jyr=r(TVe," (GPT-J model)"),TVe.forEach(t),Dyr=i(Ce),Q4=n(Ce,"LI",{});var MVe=s(Q4);H4e=n(MVe,"STRONG",{});var iOt=s(H4e);Gyr=r(iOt,"openai-gpt"),iOt.forEach(t),Oyr=r(MVe," \u2014 "),UK=n(MVe,"A",{href:!0});var dOt=s(UK);Vyr=r(dOt,"TFOpenAIGPTLMHeadModel"),dOt.forEach(t),Xyr=r(MVe," (OpenAI GPT model)"),MVe.forEach(t),zyr=i(Ce),U4=n(Ce,"LI",{});var EVe=s(U4);J4e=n(EVe,"STRONG",{});var cOt=s(J4e);Wyr=r(cOt,"opt"),cOt.forEach(t),Qyr=r(EVe," \u2014 "),HK=n(EVe,"A",{href:!0});var fOt=s(HK);Uyr=r(fOt,"TFOPTForCausalLM"),fOt.forEach(t),Hyr=r(EVe," (OPT model)"),EVe.forEach(t),Jyr=i(Ce),H4=n(Ce,"LI",{});var CVe=s(H4);Y4e=n(CVe,"STRONG",{});var mOt=s(Y4e);Yyr=r(mOt,"rembert"),mOt.forEach(t),Kyr=r(CVe," \u2014 "),JK=n(CVe,"A",{href:!0});var gOt=s(JK);Zyr=r(gOt,"TFRemBertForCausalLM"),gOt.forEach(t),e9r=r(CVe," (RemBERT model)"),CVe.forEach(t),o9r=i(Ce),J4=n(Ce,"LI",{});var wVe=s(J4);K4e=n(wVe,"STRONG",{});var hOt=s(K4e);r9r=r(hOt,"roberta"),hOt.forEach(t),t9r=r(wVe," \u2014 "),YK=n(wVe,"A",{href:!0});var pOt=s(YK);a9r=r(pOt,"TFRobertaForCausalLM"),pOt.forEach(t),n9r=r(wVe," (RoBERTa model)"),wVe.forEach(t),s9r=i(Ce),Y4=n(Ce,"LI",{});var AVe=s(Y4);Z4e=n(AVe,"STRONG",{});var _Ot=s(Z4e);l9r=r(_Ot,"roformer"),_Ot.forEach(t),i9r=r(AVe," \u2014 "),KK=n(AVe,"A",{href:!0});var uOt=s(KK);d9r=r(uOt,"TFRoFormerForCausalLM"),uOt.forEach(t),c9r=r(AVe," (RoFormer model)"),AVe.forEach(t),f9r=i(Ce),K4=n(Ce,"LI",{});var LVe=s(K4);eCe=n(LVe,"STRONG",{});var bOt=s(eCe);m9r=r(bOt,"transfo-xl"),bOt.forEach(t),g9r=r(LVe," \u2014 "),ZK=n(LVe,"A",{href:!0});var vOt=s(ZK);h9r=r(vOt,"TFTransfoXLLMHeadModel"),vOt.forEach(t),p9r=r(LVe," (Transformer-XL model)"),LVe.forEach(t),_9r=i(Ce),Z4=n(Ce,"LI",{});var yVe=s(Z4);oCe=n(yVe,"STRONG",{});var FOt=s(oCe);u9r=r(FOt,"xlm"),FOt.forEach(t),b9r=r(yVe," \u2014 "),eZ=n(yVe,"A",{href:!0});var TOt=s(eZ);v9r=r(TOt,"TFXLMWithLMHeadModel"),TOt.forEach(t),F9r=r(yVe," (XLM model)"),yVe.forEach(t),T9r=i(Ce),eC=n(Ce,"LI",{});var xVe=s(eC);rCe=n(xVe,"STRONG",{});var MOt=s(rCe);M9r=r(MOt,"xlnet"),MOt.forEach(t),E9r=r(xVe," \u2014 "),oZ=n(xVe,"A",{href:!0});var EOt=s(oZ);C9r=r(EOt,"TFXLNetLMHeadModel"),EOt.forEach(t),w9r=r(xVe," (XLNet model)"),xVe.forEach(t),Ce.forEach(t),A9r=i(Ql),T(oC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),hHe=i(f),Sc=n(f,"H2",{class:!0});var AYe=s(Sc);rC=n(AYe,"A",{id:!0,class:!0,href:!0});var COt=s(rC);tCe=n(COt,"SPAN",{});var wOt=s(tCe);T(E$.$$.fragment,wOt),wOt.forEach(t),COt.forEach(t),L9r=i(AYe),aCe=n(AYe,"SPAN",{});var AOt=s(aCe);y9r=r(AOt,"TFAutoModelForImageClassification"),AOt.forEach(t),AYe.forEach(t),pHe=i(f),lr=n(f,"DIV",{class:!0});var Ul=s(lr);T(C$.$$.fragment,Ul),x9r=i(Ul),Rc=n(Ul,"P",{});var Une=s(Rc);$9r=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rZ=n(Une,"A",{href:!0});var LOt=s(rZ);k9r=r(LOt,"from_pretrained()"),LOt.forEach(t),S9r=r(Une," class method or the "),tZ=n(Une,"A",{href:!0});var yOt=s(tZ);R9r=r(yOt,"from_config()"),yOt.forEach(t),P9r=r(Une,` class
method.`),Une.forEach(t),B9r=i(Ul),w$=n(Ul,"P",{});var LYe=s(w$);I9r=r(LYe,"This class cannot be instantiated directly using "),nCe=n(LYe,"CODE",{});var xOt=s(nCe);N9r=r(xOt,"__init__()"),xOt.forEach(t),q9r=r(LYe," (throws an error)."),LYe.forEach(t),j9r=i(Ul),Gt=n(Ul,"DIV",{class:!0});var vL=s(Gt);T(A$.$$.fragment,vL),D9r=i(vL),sCe=n(vL,"P",{});var $Ot=s(sCe);G9r=r($Ot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Ot.forEach(t),O9r=i(vL),Pc=n(vL,"P",{});var Hne=s(Pc);V9r=r(Hne,`Note:
Loading a model from its configuration file does `),lCe=n(Hne,"STRONG",{});var kOt=s(lCe);X9r=r(kOt,"not"),kOt.forEach(t),z9r=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(Hne,"A",{href:!0});var SOt=s(aZ);W9r=r(SOt,"from_pretrained()"),SOt.forEach(t),Q9r=r(Hne," to load the model weights."),Hne.forEach(t),U9r=i(vL),T(tC.$$.fragment,vL),vL.forEach(t),H9r=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(L$.$$.fragment,Hl),J9r=i(Hl),iCe=n(Hl,"P",{});var ROt=s(iCe);Y9r=r(ROt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ROt.forEach(t),K9r=i(Hl),vn=n(Hl,"P",{});var FL=s(vn);Z9r=r(FL,"The model class to instantiate is selected based on the "),dCe=n(FL,"CODE",{});var POt=s(dCe);exr=r(POt,"model_type"),POt.forEach(t),oxr=r(FL,` property of the config object (either
passed as an argument or loaded from `),cCe=n(FL,"CODE",{});var BOt=s(cCe);rxr=r(BOt,"pretrained_model_name_or_path"),BOt.forEach(t),txr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n(FL,"CODE",{});var IOt=s(fCe);axr=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),nxr=r(FL,":"),FL.forEach(t),sxr=i(Hl),Be=n(Hl,"UL",{});var Qe=s(Be);aC=n(Qe,"LI",{});var $Ve=s(aC);mCe=n($Ve,"STRONG",{});var NOt=s(mCe);lxr=r(NOt,"convnext"),NOt.forEach(t),ixr=r($Ve," \u2014 "),nZ=n($Ve,"A",{href:!0});var qOt=s(nZ);dxr=r(qOt,"TFConvNextForImageClassification"),qOt.forEach(t),cxr=r($Ve," (ConvNeXT model)"),$Ve.forEach(t),fxr=i(Qe),nC=n(Qe,"LI",{});var kVe=s(nC);gCe=n(kVe,"STRONG",{});var jOt=s(gCe);mxr=r(jOt,"data2vec-vision"),jOt.forEach(t),gxr=r(kVe," \u2014 "),sZ=n(kVe,"A",{href:!0});var DOt=s(sZ);hxr=r(DOt,"TFData2VecVisionForImageClassification"),DOt.forEach(t),pxr=r(kVe," (Data2VecVision model)"),kVe.forEach(t),_xr=i(Qe),dl=n(Qe,"LI",{});var nP=s(dl);hCe=n(nP,"STRONG",{});var GOt=s(hCe);uxr=r(GOt,"deit"),GOt.forEach(t),bxr=r(nP," \u2014 "),lZ=n(nP,"A",{href:!0});var OOt=s(lZ);vxr=r(OOt,"TFDeiTForImageClassification"),OOt.forEach(t),Fxr=r(nP," or "),iZ=n(nP,"A",{href:!0});var VOt=s(iZ);Txr=r(VOt,"TFDeiTForImageClassificationWithTeacher"),VOt.forEach(t),Mxr=r(nP," (DeiT model)"),nP.forEach(t),Exr=i(Qe),sC=n(Qe,"LI",{});var SVe=s(sC);pCe=n(SVe,"STRONG",{});var XOt=s(pCe);Cxr=r(XOt,"mobilevit"),XOt.forEach(t),wxr=r(SVe," \u2014 "),dZ=n(SVe,"A",{href:!0});var zOt=s(dZ);Axr=r(zOt,"TFMobileViTForImageClassification"),zOt.forEach(t),Lxr=r(SVe," (MobileViT model)"),SVe.forEach(t),yxr=i(Qe),lC=n(Qe,"LI",{});var RVe=s(lC);_Ce=n(RVe,"STRONG",{});var WOt=s(_Ce);xxr=r(WOt,"regnet"),WOt.forEach(t),$xr=r(RVe," \u2014 "),cZ=n(RVe,"A",{href:!0});var QOt=s(cZ);kxr=r(QOt,"TFRegNetForImageClassification"),QOt.forEach(t),Sxr=r(RVe," (RegNet model)"),RVe.forEach(t),Rxr=i(Qe),iC=n(Qe,"LI",{});var PVe=s(iC);uCe=n(PVe,"STRONG",{});var UOt=s(uCe);Pxr=r(UOt,"resnet"),UOt.forEach(t),Bxr=r(PVe," \u2014 "),fZ=n(PVe,"A",{href:!0});var HOt=s(fZ);Ixr=r(HOt,"TFResNetForImageClassification"),HOt.forEach(t),Nxr=r(PVe," (ResNet model)"),PVe.forEach(t),qxr=i(Qe),dC=n(Qe,"LI",{});var BVe=s(dC);bCe=n(BVe,"STRONG",{});var JOt=s(bCe);jxr=r(JOt,"segformer"),JOt.forEach(t),Dxr=r(BVe," \u2014 "),mZ=n(BVe,"A",{href:!0});var YOt=s(mZ);Gxr=r(YOt,"TFSegformerForImageClassification"),YOt.forEach(t),Oxr=r(BVe," (SegFormer model)"),BVe.forEach(t),Vxr=i(Qe),cC=n(Qe,"LI",{});var IVe=s(cC);vCe=n(IVe,"STRONG",{});var KOt=s(vCe);Xxr=r(KOt,"swin"),KOt.forEach(t),zxr=r(IVe," \u2014 "),gZ=n(IVe,"A",{href:!0});var ZOt=s(gZ);Wxr=r(ZOt,"TFSwinForImageClassification"),ZOt.forEach(t),Qxr=r(IVe," (Swin Transformer model)"),IVe.forEach(t),Uxr=i(Qe),fC=n(Qe,"LI",{});var NVe=s(fC);FCe=n(NVe,"STRONG",{});var eVt=s(FCe);Hxr=r(eVt,"vit"),eVt.forEach(t),Jxr=r(NVe," \u2014 "),hZ=n(NVe,"A",{href:!0});var oVt=s(hZ);Yxr=r(oVt,"TFViTForImageClassification"),oVt.forEach(t),Kxr=r(NVe," (ViT model)"),NVe.forEach(t),Qe.forEach(t),Zxr=i(Hl),T(mC.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),_He=i(f),Bc=n(f,"H2",{class:!0});var yYe=s(Bc);gC=n(yYe,"A",{id:!0,class:!0,href:!0});var rVt=s(gC);TCe=n(rVt,"SPAN",{});var tVt=s(TCe);T(y$.$$.fragment,tVt),tVt.forEach(t),rVt.forEach(t),e$r=i(yYe),MCe=n(yYe,"SPAN",{});var aVt=s(MCe);o$r=r(aVt,"TFAutoModelForSemanticSegmentation"),aVt.forEach(t),yYe.forEach(t),uHe=i(f),ir=n(f,"DIV",{class:!0});var Jl=s(ir);T(x$.$$.fragment,Jl),r$r=i(Jl),Ic=n(Jl,"P",{});var Jne=s(Ic);t$r=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pZ=n(Jne,"A",{href:!0});var nVt=s(pZ);a$r=r(nVt,"from_pretrained()"),nVt.forEach(t),n$r=r(Jne," class method or the "),_Z=n(Jne,"A",{href:!0});var sVt=s(_Z);s$r=r(sVt,"from_config()"),sVt.forEach(t),l$r=r(Jne,` class
method.`),Jne.forEach(t),i$r=i(Jl),$$=n(Jl,"P",{});var xYe=s($$);d$r=r(xYe,"This class cannot be instantiated directly using "),ECe=n(xYe,"CODE",{});var lVt=s(ECe);c$r=r(lVt,"__init__()"),lVt.forEach(t),f$r=r(xYe," (throws an error)."),xYe.forEach(t),m$r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var TL=s(Ot);T(k$.$$.fragment,TL),g$r=i(TL),CCe=n(TL,"P",{});var iVt=s(CCe);h$r=r(iVt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),iVt.forEach(t),p$r=i(TL),Nc=n(TL,"P",{});var Yne=s(Nc);_$r=r(Yne,`Note:
Loading a model from its configuration file does `),wCe=n(Yne,"STRONG",{});var dVt=s(wCe);u$r=r(dVt,"not"),dVt.forEach(t),b$r=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(Yne,"A",{href:!0});var cVt=s(uZ);v$r=r(cVt,"from_pretrained()"),cVt.forEach(t),F$r=r(Yne," to load the model weights."),Yne.forEach(t),T$r=i(TL),T(hC.$$.fragment,TL),TL.forEach(t),M$r=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(S$.$$.fragment,Yl),E$r=i(Yl),ACe=n(Yl,"P",{});var fVt=s(ACe);C$r=r(fVt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fVt.forEach(t),w$r=i(Yl),Fn=n(Yl,"P",{});var ML=s(Fn);A$r=r(ML,"The model class to instantiate is selected based on the "),LCe=n(ML,"CODE",{});var mVt=s(LCe);L$r=r(mVt,"model_type"),mVt.forEach(t),y$r=r(ML,` property of the config object (either
passed as an argument or loaded from `),yCe=n(ML,"CODE",{});var gVt=s(yCe);x$r=r(gVt,"pretrained_model_name_or_path"),gVt.forEach(t),$$r=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(ML,"CODE",{});var hVt=s(xCe);k$r=r(hVt,"pretrained_model_name_or_path"),hVt.forEach(t),S$r=r(ML,":"),ML.forEach(t),R$r=i(Yl),qc=n(Yl,"UL",{});var Kne=s(qc);pC=n(Kne,"LI",{});var qVe=s(pC);$Ce=n(qVe,"STRONG",{});var pVt=s($Ce);P$r=r(pVt,"data2vec-vision"),pVt.forEach(t),B$r=r(qVe," \u2014 "),bZ=n(qVe,"A",{href:!0});var _Vt=s(bZ);I$r=r(_Vt,"TFData2VecVisionForSemanticSegmentation"),_Vt.forEach(t),N$r=r(qVe," (Data2VecVision model)"),qVe.forEach(t),q$r=i(Kne),_C=n(Kne,"LI",{});var jVe=s(_C);kCe=n(jVe,"STRONG",{});var uVt=s(kCe);j$r=r(uVt,"mobilevit"),uVt.forEach(t),D$r=r(jVe," \u2014 "),vZ=n(jVe,"A",{href:!0});var bVt=s(vZ);G$r=r(bVt,"TFMobileViTForSemanticSegmentation"),bVt.forEach(t),O$r=r(jVe," (MobileViT model)"),jVe.forEach(t),V$r=i(Kne),uC=n(Kne,"LI",{});var DVe=s(uC);SCe=n(DVe,"STRONG",{});var vVt=s(SCe);X$r=r(vVt,"segformer"),vVt.forEach(t),z$r=r(DVe," \u2014 "),FZ=n(DVe,"A",{href:!0});var FVt=s(FZ);W$r=r(FVt,"TFSegformerForSemanticSegmentation"),FVt.forEach(t),Q$r=r(DVe," (SegFormer model)"),DVe.forEach(t),Kne.forEach(t),U$r=i(Yl),T(bC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),bHe=i(f),jc=n(f,"H2",{class:!0});var $Ye=s(jc);vC=n($Ye,"A",{id:!0,class:!0,href:!0});var TVt=s(vC);RCe=n(TVt,"SPAN",{});var MVt=s(RCe);T(R$.$$.fragment,MVt),MVt.forEach(t),TVt.forEach(t),H$r=i($Ye),PCe=n($Ye,"SPAN",{});var EVt=s(PCe);J$r=r(EVt,"TFAutoModelForMaskedLM"),EVt.forEach(t),$Ye.forEach(t),vHe=i(f),dr=n(f,"DIV",{class:!0});var Kl=s(dr);T(P$.$$.fragment,Kl),Y$r=i(Kl),Dc=n(Kl,"P",{});var Zne=s(Dc);K$r=r(Zne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=n(Zne,"A",{href:!0});var CVt=s(TZ);Z$r=r(CVt,"from_pretrained()"),CVt.forEach(t),ekr=r(Zne," class method or the "),MZ=n(Zne,"A",{href:!0});var wVt=s(MZ);okr=r(wVt,"from_config()"),wVt.forEach(t),rkr=r(Zne,` class
method.`),Zne.forEach(t),tkr=i(Kl),B$=n(Kl,"P",{});var kYe=s(B$);akr=r(kYe,"This class cannot be instantiated directly using "),BCe=n(kYe,"CODE",{});var AVt=s(BCe);nkr=r(AVt,"__init__()"),AVt.forEach(t),skr=r(kYe," (throws an error)."),kYe.forEach(t),lkr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var EL=s(Vt);T(I$.$$.fragment,EL),ikr=i(EL),ICe=n(EL,"P",{});var LVt=s(ICe);dkr=r(LVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LVt.forEach(t),ckr=i(EL),Gc=n(EL,"P",{});var ese=s(Gc);fkr=r(ese,`Note:
Loading a model from its configuration file does `),NCe=n(ese,"STRONG",{});var yVt=s(NCe);mkr=r(yVt,"not"),yVt.forEach(t),gkr=r(ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(ese,"A",{href:!0});var xVt=s(EZ);hkr=r(xVt,"from_pretrained()"),xVt.forEach(t),pkr=r(ese," to load the model weights."),ese.forEach(t),_kr=i(EL),T(FC.$$.fragment,EL),EL.forEach(t),ukr=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(N$.$$.fragment,Zl),bkr=i(Zl),qCe=n(Zl,"P",{});var $Vt=s(qCe);vkr=r($Vt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Vt.forEach(t),Fkr=i(Zl),Tn=n(Zl,"P",{});var CL=s(Tn);Tkr=r(CL,"The model class to instantiate is selected based on the "),jCe=n(CL,"CODE",{});var kVt=s(jCe);Mkr=r(kVt,"model_type"),kVt.forEach(t),Ekr=r(CL,` property of the config object (either
passed as an argument or loaded from `),DCe=n(CL,"CODE",{});var SVt=s(DCe);Ckr=r(SVt,"pretrained_model_name_or_path"),SVt.forEach(t),wkr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=n(CL,"CODE",{});var RVt=s(GCe);Akr=r(RVt,"pretrained_model_name_or_path"),RVt.forEach(t),Lkr=r(CL,":"),CL.forEach(t),ykr=i(Zl),de=n(Zl,"UL",{});var he=s(de);TC=n(he,"LI",{});var GVe=s(TC);OCe=n(GVe,"STRONG",{});var PVt=s(OCe);xkr=r(PVt,"albert"),PVt.forEach(t),$kr=r(GVe," \u2014 "),CZ=n(GVe,"A",{href:!0});var BVt=s(CZ);kkr=r(BVt,"TFAlbertForMaskedLM"),BVt.forEach(t),Skr=r(GVe," (ALBERT model)"),GVe.forEach(t),Rkr=i(he),MC=n(he,"LI",{});var OVe=s(MC);VCe=n(OVe,"STRONG",{});var IVt=s(VCe);Pkr=r(IVt,"bert"),IVt.forEach(t),Bkr=r(OVe," \u2014 "),wZ=n(OVe,"A",{href:!0});var NVt=s(wZ);Ikr=r(NVt,"TFBertForMaskedLM"),NVt.forEach(t),Nkr=r(OVe," (BERT model)"),OVe.forEach(t),qkr=i(he),EC=n(he,"LI",{});var VVe=s(EC);XCe=n(VVe,"STRONG",{});var qVt=s(XCe);jkr=r(qVt,"camembert"),qVt.forEach(t),Dkr=r(VVe," \u2014 "),AZ=n(VVe,"A",{href:!0});var jVt=s(AZ);Gkr=r(jVt,"TFCamembertForMaskedLM"),jVt.forEach(t),Okr=r(VVe," (CamemBERT model)"),VVe.forEach(t),Vkr=i(he),CC=n(he,"LI",{});var XVe=s(CC);zCe=n(XVe,"STRONG",{});var DVt=s(zCe);Xkr=r(DVt,"convbert"),DVt.forEach(t),zkr=r(XVe," \u2014 "),LZ=n(XVe,"A",{href:!0});var GVt=s(LZ);Wkr=r(GVt,"TFConvBertForMaskedLM"),GVt.forEach(t),Qkr=r(XVe," (ConvBERT model)"),XVe.forEach(t),Ukr=i(he),wC=n(he,"LI",{});var zVe=s(wC);WCe=n(zVe,"STRONG",{});var OVt=s(WCe);Hkr=r(OVt,"deberta"),OVt.forEach(t),Jkr=r(zVe," \u2014 "),yZ=n(zVe,"A",{href:!0});var VVt=s(yZ);Ykr=r(VVt,"TFDebertaForMaskedLM"),VVt.forEach(t),Kkr=r(zVe," (DeBERTa model)"),zVe.forEach(t),Zkr=i(he),AC=n(he,"LI",{});var WVe=s(AC);QCe=n(WVe,"STRONG",{});var XVt=s(QCe);eSr=r(XVt,"deberta-v2"),XVt.forEach(t),oSr=r(WVe," \u2014 "),xZ=n(WVe,"A",{href:!0});var zVt=s(xZ);rSr=r(zVt,"TFDebertaV2ForMaskedLM"),zVt.forEach(t),tSr=r(WVe," (DeBERTa-v2 model)"),WVe.forEach(t),aSr=i(he),LC=n(he,"LI",{});var QVe=s(LC);UCe=n(QVe,"STRONG",{});var WVt=s(UCe);nSr=r(WVt,"distilbert"),WVt.forEach(t),sSr=r(QVe," \u2014 "),$Z=n(QVe,"A",{href:!0});var QVt=s($Z);lSr=r(QVt,"TFDistilBertForMaskedLM"),QVt.forEach(t),iSr=r(QVe," (DistilBERT model)"),QVe.forEach(t),dSr=i(he),yC=n(he,"LI",{});var UVe=s(yC);HCe=n(UVe,"STRONG",{});var UVt=s(HCe);cSr=r(UVt,"electra"),UVt.forEach(t),fSr=r(UVe," \u2014 "),kZ=n(UVe,"A",{href:!0});var HVt=s(kZ);mSr=r(HVt,"TFElectraForMaskedLM"),HVt.forEach(t),gSr=r(UVe," (ELECTRA model)"),UVe.forEach(t),hSr=i(he),xC=n(he,"LI",{});var HVe=s(xC);JCe=n(HVe,"STRONG",{});var JVt=s(JCe);pSr=r(JVt,"flaubert"),JVt.forEach(t),_Sr=r(HVe," \u2014 "),SZ=n(HVe,"A",{href:!0});var YVt=s(SZ);uSr=r(YVt,"TFFlaubertWithLMHeadModel"),YVt.forEach(t),bSr=r(HVe," (FlauBERT model)"),HVe.forEach(t),vSr=i(he),$C=n(he,"LI",{});var JVe=s($C);YCe=n(JVe,"STRONG",{});var KVt=s(YCe);FSr=r(KVt,"funnel"),KVt.forEach(t),TSr=r(JVe," \u2014 "),RZ=n(JVe,"A",{href:!0});var ZVt=s(RZ);MSr=r(ZVt,"TFFunnelForMaskedLM"),ZVt.forEach(t),ESr=r(JVe," (Funnel Transformer model)"),JVe.forEach(t),CSr=i(he),kC=n(he,"LI",{});var YVe=s(kC);KCe=n(YVe,"STRONG",{});var eXt=s(KCe);wSr=r(eXt,"layoutlm"),eXt.forEach(t),ASr=r(YVe," \u2014 "),PZ=n(YVe,"A",{href:!0});var oXt=s(PZ);LSr=r(oXt,"TFLayoutLMForMaskedLM"),oXt.forEach(t),ySr=r(YVe," (LayoutLM model)"),YVe.forEach(t),xSr=i(he),SC=n(he,"LI",{});var KVe=s(SC);ZCe=n(KVe,"STRONG",{});var rXt=s(ZCe);$Sr=r(rXt,"longformer"),rXt.forEach(t),kSr=r(KVe," \u2014 "),BZ=n(KVe,"A",{href:!0});var tXt=s(BZ);SSr=r(tXt,"TFLongformerForMaskedLM"),tXt.forEach(t),RSr=r(KVe," (Longformer model)"),KVe.forEach(t),PSr=i(he),RC=n(he,"LI",{});var ZVe=s(RC);e3e=n(ZVe,"STRONG",{});var aXt=s(e3e);BSr=r(aXt,"mobilebert"),aXt.forEach(t),ISr=r(ZVe," \u2014 "),IZ=n(ZVe,"A",{href:!0});var nXt=s(IZ);NSr=r(nXt,"TFMobileBertForMaskedLM"),nXt.forEach(t),qSr=r(ZVe," (MobileBERT model)"),ZVe.forEach(t),jSr=i(he),PC=n(he,"LI",{});var eXe=s(PC);o3e=n(eXe,"STRONG",{});var sXt=s(o3e);DSr=r(sXt,"mpnet"),sXt.forEach(t),GSr=r(eXe," \u2014 "),NZ=n(eXe,"A",{href:!0});var lXt=s(NZ);OSr=r(lXt,"TFMPNetForMaskedLM"),lXt.forEach(t),VSr=r(eXe," (MPNet model)"),eXe.forEach(t),XSr=i(he),BC=n(he,"LI",{});var oXe=s(BC);r3e=n(oXe,"STRONG",{});var iXt=s(r3e);zSr=r(iXt,"rembert"),iXt.forEach(t),WSr=r(oXe," \u2014 "),qZ=n(oXe,"A",{href:!0});var dXt=s(qZ);QSr=r(dXt,"TFRemBertForMaskedLM"),dXt.forEach(t),USr=r(oXe," (RemBERT model)"),oXe.forEach(t),HSr=i(he),IC=n(he,"LI",{});var rXe=s(IC);t3e=n(rXe,"STRONG",{});var cXt=s(t3e);JSr=r(cXt,"roberta"),cXt.forEach(t),YSr=r(rXe," \u2014 "),jZ=n(rXe,"A",{href:!0});var fXt=s(jZ);KSr=r(fXt,"TFRobertaForMaskedLM"),fXt.forEach(t),ZSr=r(rXe," (RoBERTa model)"),rXe.forEach(t),eRr=i(he),NC=n(he,"LI",{});var tXe=s(NC);a3e=n(tXe,"STRONG",{});var mXt=s(a3e);oRr=r(mXt,"roformer"),mXt.forEach(t),rRr=r(tXe," \u2014 "),DZ=n(tXe,"A",{href:!0});var gXt=s(DZ);tRr=r(gXt,"TFRoFormerForMaskedLM"),gXt.forEach(t),aRr=r(tXe," (RoFormer model)"),tXe.forEach(t),nRr=i(he),qC=n(he,"LI",{});var aXe=s(qC);n3e=n(aXe,"STRONG",{});var hXt=s(n3e);sRr=r(hXt,"tapas"),hXt.forEach(t),lRr=r(aXe," \u2014 "),GZ=n(aXe,"A",{href:!0});var pXt=s(GZ);iRr=r(pXt,"TFTapasForMaskedLM"),pXt.forEach(t),dRr=r(aXe," (TAPAS model)"),aXe.forEach(t),cRr=i(he),jC=n(he,"LI",{});var nXe=s(jC);s3e=n(nXe,"STRONG",{});var _Xt=s(s3e);fRr=r(_Xt,"xlm"),_Xt.forEach(t),mRr=r(nXe," \u2014 "),OZ=n(nXe,"A",{href:!0});var uXt=s(OZ);gRr=r(uXt,"TFXLMWithLMHeadModel"),uXt.forEach(t),hRr=r(nXe," (XLM model)"),nXe.forEach(t),pRr=i(he),DC=n(he,"LI",{});var sXe=s(DC);l3e=n(sXe,"STRONG",{});var bXt=s(l3e);_Rr=r(bXt,"xlm-roberta"),bXt.forEach(t),uRr=r(sXe," \u2014 "),VZ=n(sXe,"A",{href:!0});var vXt=s(VZ);bRr=r(vXt,"TFXLMRobertaForMaskedLM"),vXt.forEach(t),vRr=r(sXe," (XLM-RoBERTa model)"),sXe.forEach(t),he.forEach(t),FRr=i(Zl),T(GC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),FHe=i(f),Oc=n(f,"H2",{class:!0});var SYe=s(Oc);OC=n(SYe,"A",{id:!0,class:!0,href:!0});var FXt=s(OC);i3e=n(FXt,"SPAN",{});var TXt=s(i3e);T(q$.$$.fragment,TXt),TXt.forEach(t),FXt.forEach(t),TRr=i(SYe),d3e=n(SYe,"SPAN",{});var MXt=s(d3e);MRr=r(MXt,"TFAutoModelForSeq2SeqLM"),MXt.forEach(t),SYe.forEach(t),THe=i(f),cr=n(f,"DIV",{class:!0});var ei=s(cr);T(j$.$$.fragment,ei),ERr=i(ei),Vc=n(ei,"P",{});var ose=s(Vc);CRr=r(ose,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XZ=n(ose,"A",{href:!0});var EXt=s(XZ);wRr=r(EXt,"from_pretrained()"),EXt.forEach(t),ARr=r(ose," class method or the "),zZ=n(ose,"A",{href:!0});var CXt=s(zZ);LRr=r(CXt,"from_config()"),CXt.forEach(t),yRr=r(ose,` class
method.`),ose.forEach(t),xRr=i(ei),D$=n(ei,"P",{});var RYe=s(D$);$Rr=r(RYe,"This class cannot be instantiated directly using "),c3e=n(RYe,"CODE",{});var wXt=s(c3e);kRr=r(wXt,"__init__()"),wXt.forEach(t),SRr=r(RYe," (throws an error)."),RYe.forEach(t),RRr=i(ei),Xt=n(ei,"DIV",{class:!0});var wL=s(Xt);T(G$.$$.fragment,wL),PRr=i(wL),f3e=n(wL,"P",{});var AXt=s(f3e);BRr=r(AXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),AXt.forEach(t),IRr=i(wL),Xc=n(wL,"P",{});var rse=s(Xc);NRr=r(rse,`Note:
Loading a model from its configuration file does `),m3e=n(rse,"STRONG",{});var LXt=s(m3e);qRr=r(LXt,"not"),LXt.forEach(t),jRr=r(rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(rse,"A",{href:!0});var yXt=s(WZ);DRr=r(yXt,"from_pretrained()"),yXt.forEach(t),GRr=r(rse," to load the model weights."),rse.forEach(t),ORr=i(wL),T(VC.$$.fragment,wL),wL.forEach(t),VRr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(O$.$$.fragment,oi),XRr=i(oi),g3e=n(oi,"P",{});var xXt=s(g3e);zRr=r(xXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xXt.forEach(t),WRr=i(oi),Mn=n(oi,"P",{});var AL=s(Mn);QRr=r(AL,"The model class to instantiate is selected based on the "),h3e=n(AL,"CODE",{});var $Xt=s(h3e);URr=r($Xt,"model_type"),$Xt.forEach(t),HRr=r(AL,` property of the config object (either
passed as an argument or loaded from `),p3e=n(AL,"CODE",{});var kXt=s(p3e);JRr=r(kXt,"pretrained_model_name_or_path"),kXt.forEach(t),YRr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=n(AL,"CODE",{});var SXt=s(_3e);KRr=r(SXt,"pretrained_model_name_or_path"),SXt.forEach(t),ZRr=r(AL,":"),AL.forEach(t),ePr=i(oi),ye=n(oi,"UL",{});var Ne=s(ye);XC=n(Ne,"LI",{});var lXe=s(XC);u3e=n(lXe,"STRONG",{});var RXt=s(u3e);oPr=r(RXt,"bart"),RXt.forEach(t),rPr=r(lXe," \u2014 "),QZ=n(lXe,"A",{href:!0});var PXt=s(QZ);tPr=r(PXt,"TFBartForConditionalGeneration"),PXt.forEach(t),aPr=r(lXe," (BART model)"),lXe.forEach(t),nPr=i(Ne),zC=n(Ne,"LI",{});var iXe=s(zC);b3e=n(iXe,"STRONG",{});var BXt=s(b3e);sPr=r(BXt,"blenderbot"),BXt.forEach(t),lPr=r(iXe," \u2014 "),UZ=n(iXe,"A",{href:!0});var IXt=s(UZ);iPr=r(IXt,"TFBlenderbotForConditionalGeneration"),IXt.forEach(t),dPr=r(iXe," (Blenderbot model)"),iXe.forEach(t),cPr=i(Ne),WC=n(Ne,"LI",{});var dXe=s(WC);v3e=n(dXe,"STRONG",{});var NXt=s(v3e);fPr=r(NXt,"blenderbot-small"),NXt.forEach(t),mPr=r(dXe," \u2014 "),HZ=n(dXe,"A",{href:!0});var qXt=s(HZ);gPr=r(qXt,"TFBlenderbotSmallForConditionalGeneration"),qXt.forEach(t),hPr=r(dXe," (BlenderbotSmall model)"),dXe.forEach(t),pPr=i(Ne),QC=n(Ne,"LI",{});var cXe=s(QC);F3e=n(cXe,"STRONG",{});var jXt=s(F3e);_Pr=r(jXt,"encoder-decoder"),jXt.forEach(t),uPr=r(cXe," \u2014 "),JZ=n(cXe,"A",{href:!0});var DXt=s(JZ);bPr=r(DXt,"TFEncoderDecoderModel"),DXt.forEach(t),vPr=r(cXe," (Encoder decoder model)"),cXe.forEach(t),FPr=i(Ne),UC=n(Ne,"LI",{});var fXe=s(UC);T3e=n(fXe,"STRONG",{});var GXt=s(T3e);TPr=r(GXt,"led"),GXt.forEach(t),MPr=r(fXe," \u2014 "),YZ=n(fXe,"A",{href:!0});var OXt=s(YZ);EPr=r(OXt,"TFLEDForConditionalGeneration"),OXt.forEach(t),CPr=r(fXe," (LED model)"),fXe.forEach(t),wPr=i(Ne),HC=n(Ne,"LI",{});var mXe=s(HC);M3e=n(mXe,"STRONG",{});var VXt=s(M3e);APr=r(VXt,"marian"),VXt.forEach(t),LPr=r(mXe," \u2014 "),KZ=n(mXe,"A",{href:!0});var XXt=s(KZ);yPr=r(XXt,"TFMarianMTModel"),XXt.forEach(t),xPr=r(mXe," (Marian model)"),mXe.forEach(t),$Pr=i(Ne),JC=n(Ne,"LI",{});var gXe=s(JC);E3e=n(gXe,"STRONG",{});var zXt=s(E3e);kPr=r(zXt,"mbart"),zXt.forEach(t),SPr=r(gXe," \u2014 "),ZZ=n(gXe,"A",{href:!0});var WXt=s(ZZ);RPr=r(WXt,"TFMBartForConditionalGeneration"),WXt.forEach(t),PPr=r(gXe," (mBART model)"),gXe.forEach(t),BPr=i(Ne),YC=n(Ne,"LI",{});var hXe=s(YC);C3e=n(hXe,"STRONG",{});var QXt=s(C3e);IPr=r(QXt,"mt5"),QXt.forEach(t),NPr=r(hXe," \u2014 "),eee=n(hXe,"A",{href:!0});var UXt=s(eee);qPr=r(UXt,"TFMT5ForConditionalGeneration"),UXt.forEach(t),jPr=r(hXe," (MT5 model)"),hXe.forEach(t),DPr=i(Ne),KC=n(Ne,"LI",{});var pXe=s(KC);w3e=n(pXe,"STRONG",{});var HXt=s(w3e);GPr=r(HXt,"pegasus"),HXt.forEach(t),OPr=r(pXe," \u2014 "),oee=n(pXe,"A",{href:!0});var JXt=s(oee);VPr=r(JXt,"TFPegasusForConditionalGeneration"),JXt.forEach(t),XPr=r(pXe," (Pegasus model)"),pXe.forEach(t),zPr=i(Ne),ZC=n(Ne,"LI",{});var _Xe=s(ZC);A3e=n(_Xe,"STRONG",{});var YXt=s(A3e);WPr=r(YXt,"t5"),YXt.forEach(t),QPr=r(_Xe," \u2014 "),ree=n(_Xe,"A",{href:!0});var KXt=s(ree);UPr=r(KXt,"TFT5ForConditionalGeneration"),KXt.forEach(t),HPr=r(_Xe," (T5 model)"),_Xe.forEach(t),Ne.forEach(t),JPr=i(oi),T(e3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),MHe=i(f),zc=n(f,"H2",{class:!0});var PYe=s(zc);o3=n(PYe,"A",{id:!0,class:!0,href:!0});var ZXt=s(o3);L3e=n(ZXt,"SPAN",{});var ezt=s(L3e);T(V$.$$.fragment,ezt),ezt.forEach(t),ZXt.forEach(t),YPr=i(PYe),y3e=n(PYe,"SPAN",{});var ozt=s(y3e);KPr=r(ozt,"TFAutoModelForSequenceClassification"),ozt.forEach(t),PYe.forEach(t),EHe=i(f),fr=n(f,"DIV",{class:!0});var ri=s(fr);T(X$.$$.fragment,ri),ZPr=i(ri),Wc=n(ri,"P",{});var tse=s(Wc);eBr=r(tse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tee=n(tse,"A",{href:!0});var rzt=s(tee);oBr=r(rzt,"from_pretrained()"),rzt.forEach(t),rBr=r(tse," class method or the "),aee=n(tse,"A",{href:!0});var tzt=s(aee);tBr=r(tzt,"from_config()"),tzt.forEach(t),aBr=r(tse,` class
method.`),tse.forEach(t),nBr=i(ri),z$=n(ri,"P",{});var BYe=s(z$);sBr=r(BYe,"This class cannot be instantiated directly using "),x3e=n(BYe,"CODE",{});var azt=s(x3e);lBr=r(azt,"__init__()"),azt.forEach(t),iBr=r(BYe," (throws an error)."),BYe.forEach(t),dBr=i(ri),zt=n(ri,"DIV",{class:!0});var LL=s(zt);T(W$.$$.fragment,LL),cBr=i(LL),$3e=n(LL,"P",{});var nzt=s($3e);fBr=r(nzt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nzt.forEach(t),mBr=i(LL),Qc=n(LL,"P",{});var ase=s(Qc);gBr=r(ase,`Note:
Loading a model from its configuration file does `),k3e=n(ase,"STRONG",{});var szt=s(k3e);hBr=r(szt,"not"),szt.forEach(t),pBr=r(ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=n(ase,"A",{href:!0});var lzt=s(nee);_Br=r(lzt,"from_pretrained()"),lzt.forEach(t),uBr=r(ase," to load the model weights."),ase.forEach(t),bBr=i(LL),T(r3.$$.fragment,LL),LL.forEach(t),vBr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(Q$.$$.fragment,ti),FBr=i(ti),S3e=n(ti,"P",{});var izt=s(S3e);TBr=r(izt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),izt.forEach(t),MBr=i(ti),En=n(ti,"P",{});var yL=s(En);EBr=r(yL,"The model class to instantiate is selected based on the "),R3e=n(yL,"CODE",{});var dzt=s(R3e);CBr=r(dzt,"model_type"),dzt.forEach(t),wBr=r(yL,` property of the config object (either
passed as an argument or loaded from `),P3e=n(yL,"CODE",{});var czt=s(P3e);ABr=r(czt,"pretrained_model_name_or_path"),czt.forEach(t),LBr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(yL,"CODE",{});var fzt=s(B3e);yBr=r(fzt,"pretrained_model_name_or_path"),fzt.forEach(t),xBr=r(yL,":"),yL.forEach(t),$Br=i(ti),te=n(ti,"UL",{});var ne=s(te);t3=n(ne,"LI",{});var uXe=s(t3);I3e=n(uXe,"STRONG",{});var mzt=s(I3e);kBr=r(mzt,"albert"),mzt.forEach(t),SBr=r(uXe," \u2014 "),see=n(uXe,"A",{href:!0});var gzt=s(see);RBr=r(gzt,"TFAlbertForSequenceClassification"),gzt.forEach(t),PBr=r(uXe," (ALBERT model)"),uXe.forEach(t),BBr=i(ne),a3=n(ne,"LI",{});var bXe=s(a3);N3e=n(bXe,"STRONG",{});var hzt=s(N3e);IBr=r(hzt,"bert"),hzt.forEach(t),NBr=r(bXe," \u2014 "),lee=n(bXe,"A",{href:!0});var pzt=s(lee);qBr=r(pzt,"TFBertForSequenceClassification"),pzt.forEach(t),jBr=r(bXe," (BERT model)"),bXe.forEach(t),DBr=i(ne),n3=n(ne,"LI",{});var vXe=s(n3);q3e=n(vXe,"STRONG",{});var _zt=s(q3e);GBr=r(_zt,"camembert"),_zt.forEach(t),OBr=r(vXe," \u2014 "),iee=n(vXe,"A",{href:!0});var uzt=s(iee);VBr=r(uzt,"TFCamembertForSequenceClassification"),uzt.forEach(t),XBr=r(vXe," (CamemBERT model)"),vXe.forEach(t),zBr=i(ne),s3=n(ne,"LI",{});var FXe=s(s3);j3e=n(FXe,"STRONG",{});var bzt=s(j3e);WBr=r(bzt,"convbert"),bzt.forEach(t),QBr=r(FXe," \u2014 "),dee=n(FXe,"A",{href:!0});var vzt=s(dee);UBr=r(vzt,"TFConvBertForSequenceClassification"),vzt.forEach(t),HBr=r(FXe," (ConvBERT model)"),FXe.forEach(t),JBr=i(ne),l3=n(ne,"LI",{});var TXe=s(l3);D3e=n(TXe,"STRONG",{});var Fzt=s(D3e);YBr=r(Fzt,"ctrl"),Fzt.forEach(t),KBr=r(TXe," \u2014 "),cee=n(TXe,"A",{href:!0});var Tzt=s(cee);ZBr=r(Tzt,"TFCTRLForSequenceClassification"),Tzt.forEach(t),eIr=r(TXe," (CTRL model)"),TXe.forEach(t),oIr=i(ne),i3=n(ne,"LI",{});var MXe=s(i3);G3e=n(MXe,"STRONG",{});var Mzt=s(G3e);rIr=r(Mzt,"deberta"),Mzt.forEach(t),tIr=r(MXe," \u2014 "),fee=n(MXe,"A",{href:!0});var Ezt=s(fee);aIr=r(Ezt,"TFDebertaForSequenceClassification"),Ezt.forEach(t),nIr=r(MXe," (DeBERTa model)"),MXe.forEach(t),sIr=i(ne),d3=n(ne,"LI",{});var EXe=s(d3);O3e=n(EXe,"STRONG",{});var Czt=s(O3e);lIr=r(Czt,"deberta-v2"),Czt.forEach(t),iIr=r(EXe," \u2014 "),mee=n(EXe,"A",{href:!0});var wzt=s(mee);dIr=r(wzt,"TFDebertaV2ForSequenceClassification"),wzt.forEach(t),cIr=r(EXe," (DeBERTa-v2 model)"),EXe.forEach(t),fIr=i(ne),c3=n(ne,"LI",{});var CXe=s(c3);V3e=n(CXe,"STRONG",{});var Azt=s(V3e);mIr=r(Azt,"distilbert"),Azt.forEach(t),gIr=r(CXe," \u2014 "),gee=n(CXe,"A",{href:!0});var Lzt=s(gee);hIr=r(Lzt,"TFDistilBertForSequenceClassification"),Lzt.forEach(t),pIr=r(CXe," (DistilBERT model)"),CXe.forEach(t),_Ir=i(ne),f3=n(ne,"LI",{});var wXe=s(f3);X3e=n(wXe,"STRONG",{});var yzt=s(X3e);uIr=r(yzt,"electra"),yzt.forEach(t),bIr=r(wXe," \u2014 "),hee=n(wXe,"A",{href:!0});var xzt=s(hee);vIr=r(xzt,"TFElectraForSequenceClassification"),xzt.forEach(t),FIr=r(wXe," (ELECTRA model)"),wXe.forEach(t),TIr=i(ne),m3=n(ne,"LI",{});var AXe=s(m3);z3e=n(AXe,"STRONG",{});var $zt=s(z3e);MIr=r($zt,"flaubert"),$zt.forEach(t),EIr=r(AXe," \u2014 "),pee=n(AXe,"A",{href:!0});var kzt=s(pee);CIr=r(kzt,"TFFlaubertForSequenceClassification"),kzt.forEach(t),wIr=r(AXe," (FlauBERT model)"),AXe.forEach(t),AIr=i(ne),g3=n(ne,"LI",{});var LXe=s(g3);W3e=n(LXe,"STRONG",{});var Szt=s(W3e);LIr=r(Szt,"funnel"),Szt.forEach(t),yIr=r(LXe," \u2014 "),_ee=n(LXe,"A",{href:!0});var Rzt=s(_ee);xIr=r(Rzt,"TFFunnelForSequenceClassification"),Rzt.forEach(t),$Ir=r(LXe," (Funnel Transformer model)"),LXe.forEach(t),kIr=i(ne),h3=n(ne,"LI",{});var yXe=s(h3);Q3e=n(yXe,"STRONG",{});var Pzt=s(Q3e);SIr=r(Pzt,"gpt2"),Pzt.forEach(t),RIr=r(yXe," \u2014 "),uee=n(yXe,"A",{href:!0});var Bzt=s(uee);PIr=r(Bzt,"TFGPT2ForSequenceClassification"),Bzt.forEach(t),BIr=r(yXe," (OpenAI GPT-2 model)"),yXe.forEach(t),IIr=i(ne),p3=n(ne,"LI",{});var xXe=s(p3);U3e=n(xXe,"STRONG",{});var Izt=s(U3e);NIr=r(Izt,"gptj"),Izt.forEach(t),qIr=r(xXe," \u2014 "),bee=n(xXe,"A",{href:!0});var Nzt=s(bee);jIr=r(Nzt,"TFGPTJForSequenceClassification"),Nzt.forEach(t),DIr=r(xXe," (GPT-J model)"),xXe.forEach(t),GIr=i(ne),_3=n(ne,"LI",{});var $Xe=s(_3);H3e=n($Xe,"STRONG",{});var qzt=s(H3e);OIr=r(qzt,"layoutlm"),qzt.forEach(t),VIr=r($Xe," \u2014 "),vee=n($Xe,"A",{href:!0});var jzt=s(vee);XIr=r(jzt,"TFLayoutLMForSequenceClassification"),jzt.forEach(t),zIr=r($Xe," (LayoutLM model)"),$Xe.forEach(t),WIr=i(ne),u3=n(ne,"LI",{});var kXe=s(u3);J3e=n(kXe,"STRONG",{});var Dzt=s(J3e);QIr=r(Dzt,"longformer"),Dzt.forEach(t),UIr=r(kXe," \u2014 "),Fee=n(kXe,"A",{href:!0});var Gzt=s(Fee);HIr=r(Gzt,"TFLongformerForSequenceClassification"),Gzt.forEach(t),JIr=r(kXe," (Longformer model)"),kXe.forEach(t),YIr=i(ne),b3=n(ne,"LI",{});var SXe=s(b3);Y3e=n(SXe,"STRONG",{});var Ozt=s(Y3e);KIr=r(Ozt,"mobilebert"),Ozt.forEach(t),ZIr=r(SXe," \u2014 "),Tee=n(SXe,"A",{href:!0});var Vzt=s(Tee);eNr=r(Vzt,"TFMobileBertForSequenceClassification"),Vzt.forEach(t),oNr=r(SXe," (MobileBERT model)"),SXe.forEach(t),rNr=i(ne),v3=n(ne,"LI",{});var RXe=s(v3);K3e=n(RXe,"STRONG",{});var Xzt=s(K3e);tNr=r(Xzt,"mpnet"),Xzt.forEach(t),aNr=r(RXe," \u2014 "),Mee=n(RXe,"A",{href:!0});var zzt=s(Mee);nNr=r(zzt,"TFMPNetForSequenceClassification"),zzt.forEach(t),sNr=r(RXe," (MPNet model)"),RXe.forEach(t),lNr=i(ne),F3=n(ne,"LI",{});var PXe=s(F3);Z3e=n(PXe,"STRONG",{});var Wzt=s(Z3e);iNr=r(Wzt,"openai-gpt"),Wzt.forEach(t),dNr=r(PXe," \u2014 "),Eee=n(PXe,"A",{href:!0});var Qzt=s(Eee);cNr=r(Qzt,"TFOpenAIGPTForSequenceClassification"),Qzt.forEach(t),fNr=r(PXe," (OpenAI GPT model)"),PXe.forEach(t),mNr=i(ne),T3=n(ne,"LI",{});var BXe=s(T3);e0e=n(BXe,"STRONG",{});var Uzt=s(e0e);gNr=r(Uzt,"rembert"),Uzt.forEach(t),hNr=r(BXe," \u2014 "),Cee=n(BXe,"A",{href:!0});var Hzt=s(Cee);pNr=r(Hzt,"TFRemBertForSequenceClassification"),Hzt.forEach(t),_Nr=r(BXe," (RemBERT model)"),BXe.forEach(t),uNr=i(ne),M3=n(ne,"LI",{});var IXe=s(M3);o0e=n(IXe,"STRONG",{});var Jzt=s(o0e);bNr=r(Jzt,"roberta"),Jzt.forEach(t),vNr=r(IXe," \u2014 "),wee=n(IXe,"A",{href:!0});var Yzt=s(wee);FNr=r(Yzt,"TFRobertaForSequenceClassification"),Yzt.forEach(t),TNr=r(IXe," (RoBERTa model)"),IXe.forEach(t),MNr=i(ne),E3=n(ne,"LI",{});var NXe=s(E3);r0e=n(NXe,"STRONG",{});var Kzt=s(r0e);ENr=r(Kzt,"roformer"),Kzt.forEach(t),CNr=r(NXe," \u2014 "),Aee=n(NXe,"A",{href:!0});var Zzt=s(Aee);wNr=r(Zzt,"TFRoFormerForSequenceClassification"),Zzt.forEach(t),ANr=r(NXe," (RoFormer model)"),NXe.forEach(t),LNr=i(ne),C3=n(ne,"LI",{});var qXe=s(C3);t0e=n(qXe,"STRONG",{});var eWt=s(t0e);yNr=r(eWt,"tapas"),eWt.forEach(t),xNr=r(qXe," \u2014 "),Lee=n(qXe,"A",{href:!0});var oWt=s(Lee);$Nr=r(oWt,"TFTapasForSequenceClassification"),oWt.forEach(t),kNr=r(qXe," (TAPAS model)"),qXe.forEach(t),SNr=i(ne),w3=n(ne,"LI",{});var jXe=s(w3);a0e=n(jXe,"STRONG",{});var rWt=s(a0e);RNr=r(rWt,"transfo-xl"),rWt.forEach(t),PNr=r(jXe," \u2014 "),yee=n(jXe,"A",{href:!0});var tWt=s(yee);BNr=r(tWt,"TFTransfoXLForSequenceClassification"),tWt.forEach(t),INr=r(jXe," (Transformer-XL model)"),jXe.forEach(t),NNr=i(ne),A3=n(ne,"LI",{});var DXe=s(A3);n0e=n(DXe,"STRONG",{});var aWt=s(n0e);qNr=r(aWt,"xlm"),aWt.forEach(t),jNr=r(DXe," \u2014 "),xee=n(DXe,"A",{href:!0});var nWt=s(xee);DNr=r(nWt,"TFXLMForSequenceClassification"),nWt.forEach(t),GNr=r(DXe," (XLM model)"),DXe.forEach(t),ONr=i(ne),L3=n(ne,"LI",{});var GXe=s(L3);s0e=n(GXe,"STRONG",{});var sWt=s(s0e);VNr=r(sWt,"xlm-roberta"),sWt.forEach(t),XNr=r(GXe," \u2014 "),$ee=n(GXe,"A",{href:!0});var lWt=s($ee);zNr=r(lWt,"TFXLMRobertaForSequenceClassification"),lWt.forEach(t),WNr=r(GXe," (XLM-RoBERTa model)"),GXe.forEach(t),QNr=i(ne),y3=n(ne,"LI",{});var OXe=s(y3);l0e=n(OXe,"STRONG",{});var iWt=s(l0e);UNr=r(iWt,"xlnet"),iWt.forEach(t),HNr=r(OXe," \u2014 "),kee=n(OXe,"A",{href:!0});var dWt=s(kee);JNr=r(dWt,"TFXLNetForSequenceClassification"),dWt.forEach(t),YNr=r(OXe," (XLNet model)"),OXe.forEach(t),ne.forEach(t),KNr=i(ti),T(x3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),CHe=i(f),Uc=n(f,"H2",{class:!0});var IYe=s(Uc);$3=n(IYe,"A",{id:!0,class:!0,href:!0});var cWt=s($3);i0e=n(cWt,"SPAN",{});var fWt=s(i0e);T(U$.$$.fragment,fWt),fWt.forEach(t),cWt.forEach(t),ZNr=i(IYe),d0e=n(IYe,"SPAN",{});var mWt=s(d0e);eqr=r(mWt,"TFAutoModelForMultipleChoice"),mWt.forEach(t),IYe.forEach(t),wHe=i(f),mr=n(f,"DIV",{class:!0});var ai=s(mr);T(H$.$$.fragment,ai),oqr=i(ai),Hc=n(ai,"P",{});var nse=s(Hc);rqr=r(nse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=n(nse,"A",{href:!0});var gWt=s(See);tqr=r(gWt,"from_pretrained()"),gWt.forEach(t),aqr=r(nse," class method or the "),Ree=n(nse,"A",{href:!0});var hWt=s(Ree);nqr=r(hWt,"from_config()"),hWt.forEach(t),sqr=r(nse,` class
method.`),nse.forEach(t),lqr=i(ai),J$=n(ai,"P",{});var NYe=s(J$);iqr=r(NYe,"This class cannot be instantiated directly using "),c0e=n(NYe,"CODE",{});var pWt=s(c0e);dqr=r(pWt,"__init__()"),pWt.forEach(t),cqr=r(NYe," (throws an error)."),NYe.forEach(t),fqr=i(ai),Wt=n(ai,"DIV",{class:!0});var xL=s(Wt);T(Y$.$$.fragment,xL),mqr=i(xL),f0e=n(xL,"P",{});var _Wt=s(f0e);gqr=r(_Wt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Wt.forEach(t),hqr=i(xL),Jc=n(xL,"P",{});var sse=s(Jc);pqr=r(sse,`Note:
Loading a model from its configuration file does `),m0e=n(sse,"STRONG",{});var uWt=s(m0e);_qr=r(uWt,"not"),uWt.forEach(t),uqr=r(sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(sse,"A",{href:!0});var bWt=s(Pee);bqr=r(bWt,"from_pretrained()"),bWt.forEach(t),vqr=r(sse," to load the model weights."),sse.forEach(t),Fqr=i(xL),T(k3.$$.fragment,xL),xL.forEach(t),Tqr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(K$.$$.fragment,ni),Mqr=i(ni),g0e=n(ni,"P",{});var vWt=s(g0e);Eqr=r(vWt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vWt.forEach(t),Cqr=i(ni),Cn=n(ni,"P",{});var $L=s(Cn);wqr=r($L,"The model class to instantiate is selected based on the "),h0e=n($L,"CODE",{});var FWt=s(h0e);Aqr=r(FWt,"model_type"),FWt.forEach(t),Lqr=r($L,` property of the config object (either
passed as an argument or loaded from `),p0e=n($L,"CODE",{});var TWt=s(p0e);yqr=r(TWt,"pretrained_model_name_or_path"),TWt.forEach(t),xqr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n($L,"CODE",{});var MWt=s(_0e);$qr=r(MWt,"pretrained_model_name_or_path"),MWt.forEach(t),kqr=r($L,":"),$L.forEach(t),Sqr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);S3=n(Te,"LI",{});var VXe=s(S3);u0e=n(VXe,"STRONG",{});var EWt=s(u0e);Rqr=r(EWt,"albert"),EWt.forEach(t),Pqr=r(VXe," \u2014 "),Bee=n(VXe,"A",{href:!0});var CWt=s(Bee);Bqr=r(CWt,"TFAlbertForMultipleChoice"),CWt.forEach(t),Iqr=r(VXe," (ALBERT model)"),VXe.forEach(t),Nqr=i(Te),R3=n(Te,"LI",{});var XXe=s(R3);b0e=n(XXe,"STRONG",{});var wWt=s(b0e);qqr=r(wWt,"bert"),wWt.forEach(t),jqr=r(XXe," \u2014 "),Iee=n(XXe,"A",{href:!0});var AWt=s(Iee);Dqr=r(AWt,"TFBertForMultipleChoice"),AWt.forEach(t),Gqr=r(XXe," (BERT model)"),XXe.forEach(t),Oqr=i(Te),P3=n(Te,"LI",{});var zXe=s(P3);v0e=n(zXe,"STRONG",{});var LWt=s(v0e);Vqr=r(LWt,"camembert"),LWt.forEach(t),Xqr=r(zXe," \u2014 "),Nee=n(zXe,"A",{href:!0});var yWt=s(Nee);zqr=r(yWt,"TFCamembertForMultipleChoice"),yWt.forEach(t),Wqr=r(zXe," (CamemBERT model)"),zXe.forEach(t),Qqr=i(Te),B3=n(Te,"LI",{});var WXe=s(B3);F0e=n(WXe,"STRONG",{});var xWt=s(F0e);Uqr=r(xWt,"convbert"),xWt.forEach(t),Hqr=r(WXe," \u2014 "),qee=n(WXe,"A",{href:!0});var $Wt=s(qee);Jqr=r($Wt,"TFConvBertForMultipleChoice"),$Wt.forEach(t),Yqr=r(WXe," (ConvBERT model)"),WXe.forEach(t),Kqr=i(Te),I3=n(Te,"LI",{});var QXe=s(I3);T0e=n(QXe,"STRONG",{});var kWt=s(T0e);Zqr=r(kWt,"distilbert"),kWt.forEach(t),ejr=r(QXe," \u2014 "),jee=n(QXe,"A",{href:!0});var SWt=s(jee);ojr=r(SWt,"TFDistilBertForMultipleChoice"),SWt.forEach(t),rjr=r(QXe," (DistilBERT model)"),QXe.forEach(t),tjr=i(Te),N3=n(Te,"LI",{});var UXe=s(N3);M0e=n(UXe,"STRONG",{});var RWt=s(M0e);ajr=r(RWt,"electra"),RWt.forEach(t),njr=r(UXe," \u2014 "),Dee=n(UXe,"A",{href:!0});var PWt=s(Dee);sjr=r(PWt,"TFElectraForMultipleChoice"),PWt.forEach(t),ljr=r(UXe," (ELECTRA model)"),UXe.forEach(t),ijr=i(Te),q3=n(Te,"LI",{});var HXe=s(q3);E0e=n(HXe,"STRONG",{});var BWt=s(E0e);djr=r(BWt,"flaubert"),BWt.forEach(t),cjr=r(HXe," \u2014 "),Gee=n(HXe,"A",{href:!0});var IWt=s(Gee);fjr=r(IWt,"TFFlaubertForMultipleChoice"),IWt.forEach(t),mjr=r(HXe," (FlauBERT model)"),HXe.forEach(t),gjr=i(Te),j3=n(Te,"LI",{});var JXe=s(j3);C0e=n(JXe,"STRONG",{});var NWt=s(C0e);hjr=r(NWt,"funnel"),NWt.forEach(t),pjr=r(JXe," \u2014 "),Oee=n(JXe,"A",{href:!0});var qWt=s(Oee);_jr=r(qWt,"TFFunnelForMultipleChoice"),qWt.forEach(t),ujr=r(JXe," (Funnel Transformer model)"),JXe.forEach(t),bjr=i(Te),D3=n(Te,"LI",{});var YXe=s(D3);w0e=n(YXe,"STRONG",{});var jWt=s(w0e);vjr=r(jWt,"longformer"),jWt.forEach(t),Fjr=r(YXe," \u2014 "),Vee=n(YXe,"A",{href:!0});var DWt=s(Vee);Tjr=r(DWt,"TFLongformerForMultipleChoice"),DWt.forEach(t),Mjr=r(YXe," (Longformer model)"),YXe.forEach(t),Ejr=i(Te),G3=n(Te,"LI",{});var KXe=s(G3);A0e=n(KXe,"STRONG",{});var GWt=s(A0e);Cjr=r(GWt,"mobilebert"),GWt.forEach(t),wjr=r(KXe," \u2014 "),Xee=n(KXe,"A",{href:!0});var OWt=s(Xee);Ajr=r(OWt,"TFMobileBertForMultipleChoice"),OWt.forEach(t),Ljr=r(KXe," (MobileBERT model)"),KXe.forEach(t),yjr=i(Te),O3=n(Te,"LI",{});var ZXe=s(O3);L0e=n(ZXe,"STRONG",{});var VWt=s(L0e);xjr=r(VWt,"mpnet"),VWt.forEach(t),$jr=r(ZXe," \u2014 "),zee=n(ZXe,"A",{href:!0});var XWt=s(zee);kjr=r(XWt,"TFMPNetForMultipleChoice"),XWt.forEach(t),Sjr=r(ZXe," (MPNet model)"),ZXe.forEach(t),Rjr=i(Te),V3=n(Te,"LI",{});var eze=s(V3);y0e=n(eze,"STRONG",{});var zWt=s(y0e);Pjr=r(zWt,"rembert"),zWt.forEach(t),Bjr=r(eze," \u2014 "),Wee=n(eze,"A",{href:!0});var WWt=s(Wee);Ijr=r(WWt,"TFRemBertForMultipleChoice"),WWt.forEach(t),Njr=r(eze," (RemBERT model)"),eze.forEach(t),qjr=i(Te),X3=n(Te,"LI",{});var oze=s(X3);x0e=n(oze,"STRONG",{});var QWt=s(x0e);jjr=r(QWt,"roberta"),QWt.forEach(t),Djr=r(oze," \u2014 "),Qee=n(oze,"A",{href:!0});var UWt=s(Qee);Gjr=r(UWt,"TFRobertaForMultipleChoice"),UWt.forEach(t),Ojr=r(oze," (RoBERTa model)"),oze.forEach(t),Vjr=i(Te),z3=n(Te,"LI",{});var rze=s(z3);$0e=n(rze,"STRONG",{});var HWt=s($0e);Xjr=r(HWt,"roformer"),HWt.forEach(t),zjr=r(rze," \u2014 "),Uee=n(rze,"A",{href:!0});var JWt=s(Uee);Wjr=r(JWt,"TFRoFormerForMultipleChoice"),JWt.forEach(t),Qjr=r(rze," (RoFormer model)"),rze.forEach(t),Ujr=i(Te),W3=n(Te,"LI",{});var tze=s(W3);k0e=n(tze,"STRONG",{});var YWt=s(k0e);Hjr=r(YWt,"xlm"),YWt.forEach(t),Jjr=r(tze," \u2014 "),Hee=n(tze,"A",{href:!0});var KWt=s(Hee);Yjr=r(KWt,"TFXLMForMultipleChoice"),KWt.forEach(t),Kjr=r(tze," (XLM model)"),tze.forEach(t),Zjr=i(Te),Q3=n(Te,"LI",{});var aze=s(Q3);S0e=n(aze,"STRONG",{});var ZWt=s(S0e);eDr=r(ZWt,"xlm-roberta"),ZWt.forEach(t),oDr=r(aze," \u2014 "),Jee=n(aze,"A",{href:!0});var eQt=s(Jee);rDr=r(eQt,"TFXLMRobertaForMultipleChoice"),eQt.forEach(t),tDr=r(aze," (XLM-RoBERTa model)"),aze.forEach(t),aDr=i(Te),U3=n(Te,"LI",{});var nze=s(U3);R0e=n(nze,"STRONG",{});var oQt=s(R0e);nDr=r(oQt,"xlnet"),oQt.forEach(t),sDr=r(nze," \u2014 "),Yee=n(nze,"A",{href:!0});var rQt=s(Yee);lDr=r(rQt,"TFXLNetForMultipleChoice"),rQt.forEach(t),iDr=r(nze," (XLNet model)"),nze.forEach(t),Te.forEach(t),dDr=i(ni),T(H3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),AHe=i(f),Yc=n(f,"H2",{class:!0});var qYe=s(Yc);J3=n(qYe,"A",{id:!0,class:!0,href:!0});var tQt=s(J3);P0e=n(tQt,"SPAN",{});var aQt=s(P0e);T(Z$.$$.fragment,aQt),aQt.forEach(t),tQt.forEach(t),cDr=i(qYe),B0e=n(qYe,"SPAN",{});var nQt=s(B0e);fDr=r(nQt,"TFAutoModelForNextSentencePrediction"),nQt.forEach(t),qYe.forEach(t),LHe=i(f),gr=n(f,"DIV",{class:!0});var si=s(gr);T(ek.$$.fragment,si),mDr=i(si),Kc=n(si,"P",{});var lse=s(Kc);gDr=r(lse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=n(lse,"A",{href:!0});var sQt=s(Kee);hDr=r(sQt,"from_pretrained()"),sQt.forEach(t),pDr=r(lse," class method or the "),Zee=n(lse,"A",{href:!0});var lQt=s(Zee);_Dr=r(lQt,"from_config()"),lQt.forEach(t),uDr=r(lse,` class
method.`),lse.forEach(t),bDr=i(si),ok=n(si,"P",{});var jYe=s(ok);vDr=r(jYe,"This class cannot be instantiated directly using "),I0e=n(jYe,"CODE",{});var iQt=s(I0e);FDr=r(iQt,"__init__()"),iQt.forEach(t),TDr=r(jYe," (throws an error)."),jYe.forEach(t),MDr=i(si),Qt=n(si,"DIV",{class:!0});var kL=s(Qt);T(rk.$$.fragment,kL),EDr=i(kL),N0e=n(kL,"P",{});var dQt=s(N0e);CDr=r(dQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dQt.forEach(t),wDr=i(kL),Zc=n(kL,"P",{});var ise=s(Zc);ADr=r(ise,`Note:
Loading a model from its configuration file does `),q0e=n(ise,"STRONG",{});var cQt=s(q0e);LDr=r(cQt,"not"),cQt.forEach(t),yDr=r(ise,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(ise,"A",{href:!0});var fQt=s(eoe);xDr=r(fQt,"from_pretrained()"),fQt.forEach(t),$Dr=r(ise," to load the model weights."),ise.forEach(t),kDr=i(kL),T(Y3.$$.fragment,kL),kL.forEach(t),SDr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(tk.$$.fragment,li),RDr=i(li),j0e=n(li,"P",{});var mQt=s(j0e);PDr=r(mQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mQt.forEach(t),BDr=i(li),wn=n(li,"P",{});var SL=s(wn);IDr=r(SL,"The model class to instantiate is selected based on the "),D0e=n(SL,"CODE",{});var gQt=s(D0e);NDr=r(gQt,"model_type"),gQt.forEach(t),qDr=r(SL,` property of the config object (either
passed as an argument or loaded from `),G0e=n(SL,"CODE",{});var hQt=s(G0e);jDr=r(hQt,"pretrained_model_name_or_path"),hQt.forEach(t),DDr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=n(SL,"CODE",{});var pQt=s(O0e);GDr=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),ODr=r(SL,":"),SL.forEach(t),VDr=i(li),ak=n(li,"UL",{});var DYe=s(ak);K3=n(DYe,"LI",{});var sze=s(K3);V0e=n(sze,"STRONG",{});var _Qt=s(V0e);XDr=r(_Qt,"bert"),_Qt.forEach(t),zDr=r(sze," \u2014 "),ooe=n(sze,"A",{href:!0});var uQt=s(ooe);WDr=r(uQt,"TFBertForNextSentencePrediction"),uQt.forEach(t),QDr=r(sze," (BERT model)"),sze.forEach(t),UDr=i(DYe),Z3=n(DYe,"LI",{});var lze=s(Z3);X0e=n(lze,"STRONG",{});var bQt=s(X0e);HDr=r(bQt,"mobilebert"),bQt.forEach(t),JDr=r(lze," \u2014 "),roe=n(lze,"A",{href:!0});var vQt=s(roe);YDr=r(vQt,"TFMobileBertForNextSentencePrediction"),vQt.forEach(t),KDr=r(lze," (MobileBERT model)"),lze.forEach(t),DYe.forEach(t),ZDr=i(li),T(e0.$$.fragment,li),li.forEach(t),si.forEach(t),yHe=i(f),ef=n(f,"H2",{class:!0});var GYe=s(ef);o0=n(GYe,"A",{id:!0,class:!0,href:!0});var FQt=s(o0);z0e=n(FQt,"SPAN",{});var TQt=s(z0e);T(nk.$$.fragment,TQt),TQt.forEach(t),FQt.forEach(t),eGr=i(GYe),W0e=n(GYe,"SPAN",{});var MQt=s(W0e);oGr=r(MQt,"TFAutoModelForTableQuestionAnswering"),MQt.forEach(t),GYe.forEach(t),xHe=i(f),hr=n(f,"DIV",{class:!0});var ii=s(hr);T(sk.$$.fragment,ii),rGr=i(ii),of=n(ii,"P",{});var dse=s(of);tGr=r(dse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),toe=n(dse,"A",{href:!0});var EQt=s(toe);aGr=r(EQt,"from_pretrained()"),EQt.forEach(t),nGr=r(dse," class method or the "),aoe=n(dse,"A",{href:!0});var CQt=s(aoe);sGr=r(CQt,"from_config()"),CQt.forEach(t),lGr=r(dse,` class
method.`),dse.forEach(t),iGr=i(ii),lk=n(ii,"P",{});var OYe=s(lk);dGr=r(OYe,"This class cannot be instantiated directly using "),Q0e=n(OYe,"CODE",{});var wQt=s(Q0e);cGr=r(wQt,"__init__()"),wQt.forEach(t),fGr=r(OYe," (throws an error)."),OYe.forEach(t),mGr=i(ii),Ut=n(ii,"DIV",{class:!0});var RL=s(Ut);T(ik.$$.fragment,RL),gGr=i(RL),U0e=n(RL,"P",{});var AQt=s(U0e);hGr=r(AQt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),AQt.forEach(t),pGr=i(RL),rf=n(RL,"P",{});var cse=s(rf);_Gr=r(cse,`Note:
Loading a model from its configuration file does `),H0e=n(cse,"STRONG",{});var LQt=s(H0e);uGr=r(LQt,"not"),LQt.forEach(t),bGr=r(cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(cse,"A",{href:!0});var yQt=s(noe);vGr=r(yQt,"from_pretrained()"),yQt.forEach(t),FGr=r(cse," to load the model weights."),cse.forEach(t),TGr=i(RL),T(r0.$$.fragment,RL),RL.forEach(t),MGr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(dk.$$.fragment,di),EGr=i(di),J0e=n(di,"P",{});var xQt=s(J0e);CGr=r(xQt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xQt.forEach(t),wGr=i(di),An=n(di,"P",{});var PL=s(An);AGr=r(PL,"The model class to instantiate is selected based on the "),Y0e=n(PL,"CODE",{});var $Qt=s(Y0e);LGr=r($Qt,"model_type"),$Qt.forEach(t),yGr=r(PL,` property of the config object (either
passed as an argument or loaded from `),K0e=n(PL,"CODE",{});var kQt=s(K0e);xGr=r(kQt,"pretrained_model_name_or_path"),kQt.forEach(t),$Gr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(PL,"CODE",{});var SQt=s(Z0e);kGr=r(SQt,"pretrained_model_name_or_path"),SQt.forEach(t),SGr=r(PL,":"),PL.forEach(t),RGr=i(di),ewe=n(di,"UL",{});var RQt=s(ewe);t0=n(RQt,"LI",{});var ize=s(t0);owe=n(ize,"STRONG",{});var PQt=s(owe);PGr=r(PQt,"tapas"),PQt.forEach(t),BGr=r(ize," \u2014 "),soe=n(ize,"A",{href:!0});var BQt=s(soe);IGr=r(BQt,"TFTapasForQuestionAnswering"),BQt.forEach(t),NGr=r(ize," (TAPAS model)"),ize.forEach(t),RQt.forEach(t),qGr=i(di),T(a0.$$.fragment,di),di.forEach(t),ii.forEach(t),$He=i(f),tf=n(f,"H2",{class:!0});var VYe=s(tf);n0=n(VYe,"A",{id:!0,class:!0,href:!0});var IQt=s(n0);rwe=n(IQt,"SPAN",{});var NQt=s(rwe);T(ck.$$.fragment,NQt),NQt.forEach(t),IQt.forEach(t),jGr=i(VYe),twe=n(VYe,"SPAN",{});var qQt=s(twe);DGr=r(qQt,"TFAutoModelForTokenClassification"),qQt.forEach(t),VYe.forEach(t),kHe=i(f),pr=n(f,"DIV",{class:!0});var ci=s(pr);T(fk.$$.fragment,ci),GGr=i(ci),af=n(ci,"P",{});var fse=s(af);OGr=r(fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),loe=n(fse,"A",{href:!0});var jQt=s(loe);VGr=r(jQt,"from_pretrained()"),jQt.forEach(t),XGr=r(fse," class method or the "),ioe=n(fse,"A",{href:!0});var DQt=s(ioe);zGr=r(DQt,"from_config()"),DQt.forEach(t),WGr=r(fse,` class
method.`),fse.forEach(t),QGr=i(ci),mk=n(ci,"P",{});var XYe=s(mk);UGr=r(XYe,"This class cannot be instantiated directly using "),awe=n(XYe,"CODE",{});var GQt=s(awe);HGr=r(GQt,"__init__()"),GQt.forEach(t),JGr=r(XYe," (throws an error)."),XYe.forEach(t),YGr=i(ci),Ht=n(ci,"DIV",{class:!0});var BL=s(Ht);T(gk.$$.fragment,BL),KGr=i(BL),nwe=n(BL,"P",{});var OQt=s(nwe);ZGr=r(OQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OQt.forEach(t),eOr=i(BL),nf=n(BL,"P",{});var mse=s(nf);oOr=r(mse,`Note:
Loading a model from its configuration file does `),swe=n(mse,"STRONG",{});var VQt=s(swe);rOr=r(VQt,"not"),VQt.forEach(t),tOr=r(mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=n(mse,"A",{href:!0});var XQt=s(doe);aOr=r(XQt,"from_pretrained()"),XQt.forEach(t),nOr=r(mse," to load the model weights."),mse.forEach(t),sOr=i(BL),T(s0.$$.fragment,BL),BL.forEach(t),lOr=i(ci),Xr=n(ci,"DIV",{class:!0});var fi=s(Xr);T(hk.$$.fragment,fi),iOr=i(fi),lwe=n(fi,"P",{});var zQt=s(lwe);dOr=r(zQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zQt.forEach(t),cOr=i(fi),Ln=n(fi,"P",{});var IL=s(Ln);fOr=r(IL,"The model class to instantiate is selected based on the "),iwe=n(IL,"CODE",{});var WQt=s(iwe);mOr=r(WQt,"model_type"),WQt.forEach(t),gOr=r(IL,` property of the config object (either
passed as an argument or loaded from `),dwe=n(IL,"CODE",{});var QQt=s(dwe);hOr=r(QQt,"pretrained_model_name_or_path"),QQt.forEach(t),pOr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cwe=n(IL,"CODE",{});var UQt=s(cwe);_Or=r(UQt,"pretrained_model_name_or_path"),UQt.forEach(t),uOr=r(IL,":"),IL.forEach(t),bOr=i(fi),ce=n(fi,"UL",{});var pe=s(ce);l0=n(pe,"LI",{});var dze=s(l0);fwe=n(dze,"STRONG",{});var HQt=s(fwe);vOr=r(HQt,"albert"),HQt.forEach(t),FOr=r(dze," \u2014 "),coe=n(dze,"A",{href:!0});var JQt=s(coe);TOr=r(JQt,"TFAlbertForTokenClassification"),JQt.forEach(t),MOr=r(dze," (ALBERT model)"),dze.forEach(t),EOr=i(pe),i0=n(pe,"LI",{});var cze=s(i0);mwe=n(cze,"STRONG",{});var YQt=s(mwe);COr=r(YQt,"bert"),YQt.forEach(t),wOr=r(cze," \u2014 "),foe=n(cze,"A",{href:!0});var KQt=s(foe);AOr=r(KQt,"TFBertForTokenClassification"),KQt.forEach(t),LOr=r(cze," (BERT model)"),cze.forEach(t),yOr=i(pe),d0=n(pe,"LI",{});var fze=s(d0);gwe=n(fze,"STRONG",{});var ZQt=s(gwe);xOr=r(ZQt,"camembert"),ZQt.forEach(t),$Or=r(fze," \u2014 "),moe=n(fze,"A",{href:!0});var eUt=s(moe);kOr=r(eUt,"TFCamembertForTokenClassification"),eUt.forEach(t),SOr=r(fze," (CamemBERT model)"),fze.forEach(t),ROr=i(pe),c0=n(pe,"LI",{});var mze=s(c0);hwe=n(mze,"STRONG",{});var oUt=s(hwe);POr=r(oUt,"convbert"),oUt.forEach(t),BOr=r(mze," \u2014 "),goe=n(mze,"A",{href:!0});var rUt=s(goe);IOr=r(rUt,"TFConvBertForTokenClassification"),rUt.forEach(t),NOr=r(mze," (ConvBERT model)"),mze.forEach(t),qOr=i(pe),f0=n(pe,"LI",{});var gze=s(f0);pwe=n(gze,"STRONG",{});var tUt=s(pwe);jOr=r(tUt,"deberta"),tUt.forEach(t),DOr=r(gze," \u2014 "),hoe=n(gze,"A",{href:!0});var aUt=s(hoe);GOr=r(aUt,"TFDebertaForTokenClassification"),aUt.forEach(t),OOr=r(gze," (DeBERTa model)"),gze.forEach(t),VOr=i(pe),m0=n(pe,"LI",{});var hze=s(m0);_we=n(hze,"STRONG",{});var nUt=s(_we);XOr=r(nUt,"deberta-v2"),nUt.forEach(t),zOr=r(hze," \u2014 "),poe=n(hze,"A",{href:!0});var sUt=s(poe);WOr=r(sUt,"TFDebertaV2ForTokenClassification"),sUt.forEach(t),QOr=r(hze," (DeBERTa-v2 model)"),hze.forEach(t),UOr=i(pe),g0=n(pe,"LI",{});var pze=s(g0);uwe=n(pze,"STRONG",{});var lUt=s(uwe);HOr=r(lUt,"distilbert"),lUt.forEach(t),JOr=r(pze," \u2014 "),_oe=n(pze,"A",{href:!0});var iUt=s(_oe);YOr=r(iUt,"TFDistilBertForTokenClassification"),iUt.forEach(t),KOr=r(pze," (DistilBERT model)"),pze.forEach(t),ZOr=i(pe),h0=n(pe,"LI",{});var _ze=s(h0);bwe=n(_ze,"STRONG",{});var dUt=s(bwe);eVr=r(dUt,"electra"),dUt.forEach(t),oVr=r(_ze," \u2014 "),uoe=n(_ze,"A",{href:!0});var cUt=s(uoe);rVr=r(cUt,"TFElectraForTokenClassification"),cUt.forEach(t),tVr=r(_ze," (ELECTRA model)"),_ze.forEach(t),aVr=i(pe),p0=n(pe,"LI",{});var uze=s(p0);vwe=n(uze,"STRONG",{});var fUt=s(vwe);nVr=r(fUt,"flaubert"),fUt.forEach(t),sVr=r(uze," \u2014 "),boe=n(uze,"A",{href:!0});var mUt=s(boe);lVr=r(mUt,"TFFlaubertForTokenClassification"),mUt.forEach(t),iVr=r(uze," (FlauBERT model)"),uze.forEach(t),dVr=i(pe),_0=n(pe,"LI",{});var bze=s(_0);Fwe=n(bze,"STRONG",{});var gUt=s(Fwe);cVr=r(gUt,"funnel"),gUt.forEach(t),fVr=r(bze," \u2014 "),voe=n(bze,"A",{href:!0});var hUt=s(voe);mVr=r(hUt,"TFFunnelForTokenClassification"),hUt.forEach(t),gVr=r(bze," (Funnel Transformer model)"),bze.forEach(t),hVr=i(pe),u0=n(pe,"LI",{});var vze=s(u0);Twe=n(vze,"STRONG",{});var pUt=s(Twe);pVr=r(pUt,"layoutlm"),pUt.forEach(t),_Vr=r(vze," \u2014 "),Foe=n(vze,"A",{href:!0});var _Ut=s(Foe);uVr=r(_Ut,"TFLayoutLMForTokenClassification"),_Ut.forEach(t),bVr=r(vze," (LayoutLM model)"),vze.forEach(t),vVr=i(pe),b0=n(pe,"LI",{});var Fze=s(b0);Mwe=n(Fze,"STRONG",{});var uUt=s(Mwe);FVr=r(uUt,"longformer"),uUt.forEach(t),TVr=r(Fze," \u2014 "),Toe=n(Fze,"A",{href:!0});var bUt=s(Toe);MVr=r(bUt,"TFLongformerForTokenClassification"),bUt.forEach(t),EVr=r(Fze," (Longformer model)"),Fze.forEach(t),CVr=i(pe),v0=n(pe,"LI",{});var Tze=s(v0);Ewe=n(Tze,"STRONG",{});var vUt=s(Ewe);wVr=r(vUt,"mobilebert"),vUt.forEach(t),AVr=r(Tze," \u2014 "),Moe=n(Tze,"A",{href:!0});var FUt=s(Moe);LVr=r(FUt,"TFMobileBertForTokenClassification"),FUt.forEach(t),yVr=r(Tze," (MobileBERT model)"),Tze.forEach(t),xVr=i(pe),F0=n(pe,"LI",{});var Mze=s(F0);Cwe=n(Mze,"STRONG",{});var TUt=s(Cwe);$Vr=r(TUt,"mpnet"),TUt.forEach(t),kVr=r(Mze," \u2014 "),Eoe=n(Mze,"A",{href:!0});var MUt=s(Eoe);SVr=r(MUt,"TFMPNetForTokenClassification"),MUt.forEach(t),RVr=r(Mze," (MPNet model)"),Mze.forEach(t),PVr=i(pe),T0=n(pe,"LI",{});var Eze=s(T0);wwe=n(Eze,"STRONG",{});var EUt=s(wwe);BVr=r(EUt,"rembert"),EUt.forEach(t),IVr=r(Eze," \u2014 "),Coe=n(Eze,"A",{href:!0});var CUt=s(Coe);NVr=r(CUt,"TFRemBertForTokenClassification"),CUt.forEach(t),qVr=r(Eze," (RemBERT model)"),Eze.forEach(t),jVr=i(pe),M0=n(pe,"LI",{});var Cze=s(M0);Awe=n(Cze,"STRONG",{});var wUt=s(Awe);DVr=r(wUt,"roberta"),wUt.forEach(t),GVr=r(Cze," \u2014 "),woe=n(Cze,"A",{href:!0});var AUt=s(woe);OVr=r(AUt,"TFRobertaForTokenClassification"),AUt.forEach(t),VVr=r(Cze," (RoBERTa model)"),Cze.forEach(t),XVr=i(pe),E0=n(pe,"LI",{});var wze=s(E0);Lwe=n(wze,"STRONG",{});var LUt=s(Lwe);zVr=r(LUt,"roformer"),LUt.forEach(t),WVr=r(wze," \u2014 "),Aoe=n(wze,"A",{href:!0});var yUt=s(Aoe);QVr=r(yUt,"TFRoFormerForTokenClassification"),yUt.forEach(t),UVr=r(wze," (RoFormer model)"),wze.forEach(t),HVr=i(pe),C0=n(pe,"LI",{});var Aze=s(C0);ywe=n(Aze,"STRONG",{});var xUt=s(ywe);JVr=r(xUt,"xlm"),xUt.forEach(t),YVr=r(Aze," \u2014 "),Loe=n(Aze,"A",{href:!0});var $Ut=s(Loe);KVr=r($Ut,"TFXLMForTokenClassification"),$Ut.forEach(t),ZVr=r(Aze," (XLM model)"),Aze.forEach(t),eXr=i(pe),w0=n(pe,"LI",{});var Lze=s(w0);xwe=n(Lze,"STRONG",{});var kUt=s(xwe);oXr=r(kUt,"xlm-roberta"),kUt.forEach(t),rXr=r(Lze," \u2014 "),yoe=n(Lze,"A",{href:!0});var SUt=s(yoe);tXr=r(SUt,"TFXLMRobertaForTokenClassification"),SUt.forEach(t),aXr=r(Lze," (XLM-RoBERTa model)"),Lze.forEach(t),nXr=i(pe),A0=n(pe,"LI",{});var yze=s(A0);$we=n(yze,"STRONG",{});var RUt=s($we);sXr=r(RUt,"xlnet"),RUt.forEach(t),lXr=r(yze," \u2014 "),xoe=n(yze,"A",{href:!0});var PUt=s(xoe);iXr=r(PUt,"TFXLNetForTokenClassification"),PUt.forEach(t),dXr=r(yze," (XLNet model)"),yze.forEach(t),pe.forEach(t),cXr=i(fi),T(L0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),SHe=i(f),sf=n(f,"H2",{class:!0});var zYe=s(sf);y0=n(zYe,"A",{id:!0,class:!0,href:!0});var BUt=s(y0);kwe=n(BUt,"SPAN",{});var IUt=s(kwe);T(pk.$$.fragment,IUt),IUt.forEach(t),BUt.forEach(t),fXr=i(zYe),Swe=n(zYe,"SPAN",{});var NUt=s(Swe);mXr=r(NUt,"TFAutoModelForQuestionAnswering"),NUt.forEach(t),zYe.forEach(t),RHe=i(f),_r=n(f,"DIV",{class:!0});var mi=s(_r);T(_k.$$.fragment,mi),gXr=i(mi),lf=n(mi,"P",{});var gse=s(lf);hXr=r(gse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=n(gse,"A",{href:!0});var qUt=s($oe);pXr=r(qUt,"from_pretrained()"),qUt.forEach(t),_Xr=r(gse," class method or the "),koe=n(gse,"A",{href:!0});var jUt=s(koe);uXr=r(jUt,"from_config()"),jUt.forEach(t),bXr=r(gse,` class
method.`),gse.forEach(t),vXr=i(mi),uk=n(mi,"P",{});var WYe=s(uk);FXr=r(WYe,"This class cannot be instantiated directly using "),Rwe=n(WYe,"CODE",{});var DUt=s(Rwe);TXr=r(DUt,"__init__()"),DUt.forEach(t),MXr=r(WYe," (throws an error)."),WYe.forEach(t),EXr=i(mi),Jt=n(mi,"DIV",{class:!0});var NL=s(Jt);T(bk.$$.fragment,NL),CXr=i(NL),Pwe=n(NL,"P",{});var GUt=s(Pwe);wXr=r(GUt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GUt.forEach(t),AXr=i(NL),df=n(NL,"P",{});var hse=s(df);LXr=r(hse,`Note:
Loading a model from its configuration file does `),Bwe=n(hse,"STRONG",{});var OUt=s(Bwe);yXr=r(OUt,"not"),OUt.forEach(t),xXr=r(hse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(hse,"A",{href:!0});var VUt=s(Soe);$Xr=r(VUt,"from_pretrained()"),VUt.forEach(t),kXr=r(hse," to load the model weights."),hse.forEach(t),SXr=i(NL),T(x0.$$.fragment,NL),NL.forEach(t),RXr=i(mi),zr=n(mi,"DIV",{class:!0});var gi=s(zr);T(vk.$$.fragment,gi),PXr=i(gi),Iwe=n(gi,"P",{});var XUt=s(Iwe);BXr=r(XUt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XUt.forEach(t),IXr=i(gi),yn=n(gi,"P",{});var qL=s(yn);NXr=r(qL,"The model class to instantiate is selected based on the "),Nwe=n(qL,"CODE",{});var zUt=s(Nwe);qXr=r(zUt,"model_type"),zUt.forEach(t),jXr=r(qL,` property of the config object (either
passed as an argument or loaded from `),qwe=n(qL,"CODE",{});var WUt=s(qwe);DXr=r(WUt,"pretrained_model_name_or_path"),WUt.forEach(t),GXr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jwe=n(qL,"CODE",{});var QUt=s(jwe);OXr=r(QUt,"pretrained_model_name_or_path"),QUt.forEach(t),VXr=r(qL,":"),qL.forEach(t),XXr=i(gi),fe=n(gi,"UL",{});var _e=s(fe);$0=n(_e,"LI",{});var xze=s($0);Dwe=n(xze,"STRONG",{});var UUt=s(Dwe);zXr=r(UUt,"albert"),UUt.forEach(t),WXr=r(xze," \u2014 "),Roe=n(xze,"A",{href:!0});var HUt=s(Roe);QXr=r(HUt,"TFAlbertForQuestionAnswering"),HUt.forEach(t),UXr=r(xze," (ALBERT model)"),xze.forEach(t),HXr=i(_e),k0=n(_e,"LI",{});var $ze=s(k0);Gwe=n($ze,"STRONG",{});var JUt=s(Gwe);JXr=r(JUt,"bert"),JUt.forEach(t),YXr=r($ze," \u2014 "),Poe=n($ze,"A",{href:!0});var YUt=s(Poe);KXr=r(YUt,"TFBertForQuestionAnswering"),YUt.forEach(t),ZXr=r($ze," (BERT model)"),$ze.forEach(t),ezr=i(_e),S0=n(_e,"LI",{});var kze=s(S0);Owe=n(kze,"STRONG",{});var KUt=s(Owe);ozr=r(KUt,"camembert"),KUt.forEach(t),rzr=r(kze," \u2014 "),Boe=n(kze,"A",{href:!0});var ZUt=s(Boe);tzr=r(ZUt,"TFCamembertForQuestionAnswering"),ZUt.forEach(t),azr=r(kze," (CamemBERT model)"),kze.forEach(t),nzr=i(_e),R0=n(_e,"LI",{});var Sze=s(R0);Vwe=n(Sze,"STRONG",{});var eHt=s(Vwe);szr=r(eHt,"convbert"),eHt.forEach(t),lzr=r(Sze," \u2014 "),Ioe=n(Sze,"A",{href:!0});var oHt=s(Ioe);izr=r(oHt,"TFConvBertForQuestionAnswering"),oHt.forEach(t),dzr=r(Sze," (ConvBERT model)"),Sze.forEach(t),czr=i(_e),P0=n(_e,"LI",{});var Rze=s(P0);Xwe=n(Rze,"STRONG",{});var rHt=s(Xwe);fzr=r(rHt,"deberta"),rHt.forEach(t),mzr=r(Rze," \u2014 "),Noe=n(Rze,"A",{href:!0});var tHt=s(Noe);gzr=r(tHt,"TFDebertaForQuestionAnswering"),tHt.forEach(t),hzr=r(Rze," (DeBERTa model)"),Rze.forEach(t),pzr=i(_e),B0=n(_e,"LI",{});var Pze=s(B0);zwe=n(Pze,"STRONG",{});var aHt=s(zwe);_zr=r(aHt,"deberta-v2"),aHt.forEach(t),uzr=r(Pze," \u2014 "),qoe=n(Pze,"A",{href:!0});var nHt=s(qoe);bzr=r(nHt,"TFDebertaV2ForQuestionAnswering"),nHt.forEach(t),vzr=r(Pze," (DeBERTa-v2 model)"),Pze.forEach(t),Fzr=i(_e),I0=n(_e,"LI",{});var Bze=s(I0);Wwe=n(Bze,"STRONG",{});var sHt=s(Wwe);Tzr=r(sHt,"distilbert"),sHt.forEach(t),Mzr=r(Bze," \u2014 "),joe=n(Bze,"A",{href:!0});var lHt=s(joe);Ezr=r(lHt,"TFDistilBertForQuestionAnswering"),lHt.forEach(t),Czr=r(Bze," (DistilBERT model)"),Bze.forEach(t),wzr=i(_e),N0=n(_e,"LI",{});var Ize=s(N0);Qwe=n(Ize,"STRONG",{});var iHt=s(Qwe);Azr=r(iHt,"electra"),iHt.forEach(t),Lzr=r(Ize," \u2014 "),Doe=n(Ize,"A",{href:!0});var dHt=s(Doe);yzr=r(dHt,"TFElectraForQuestionAnswering"),dHt.forEach(t),xzr=r(Ize," (ELECTRA model)"),Ize.forEach(t),$zr=i(_e),q0=n(_e,"LI",{});var Nze=s(q0);Uwe=n(Nze,"STRONG",{});var cHt=s(Uwe);kzr=r(cHt,"flaubert"),cHt.forEach(t),Szr=r(Nze," \u2014 "),Goe=n(Nze,"A",{href:!0});var fHt=s(Goe);Rzr=r(fHt,"TFFlaubertForQuestionAnsweringSimple"),fHt.forEach(t),Pzr=r(Nze," (FlauBERT model)"),Nze.forEach(t),Bzr=i(_e),j0=n(_e,"LI",{});var qze=s(j0);Hwe=n(qze,"STRONG",{});var mHt=s(Hwe);Izr=r(mHt,"funnel"),mHt.forEach(t),Nzr=r(qze," \u2014 "),Ooe=n(qze,"A",{href:!0});var gHt=s(Ooe);qzr=r(gHt,"TFFunnelForQuestionAnswering"),gHt.forEach(t),jzr=r(qze," (Funnel Transformer model)"),qze.forEach(t),Dzr=i(_e),D0=n(_e,"LI",{});var jze=s(D0);Jwe=n(jze,"STRONG",{});var hHt=s(Jwe);Gzr=r(hHt,"gptj"),hHt.forEach(t),Ozr=r(jze," \u2014 "),Voe=n(jze,"A",{href:!0});var pHt=s(Voe);Vzr=r(pHt,"TFGPTJForQuestionAnswering"),pHt.forEach(t),Xzr=r(jze," (GPT-J model)"),jze.forEach(t),zzr=i(_e),G0=n(_e,"LI",{});var Dze=s(G0);Ywe=n(Dze,"STRONG",{});var _Ht=s(Ywe);Wzr=r(_Ht,"longformer"),_Ht.forEach(t),Qzr=r(Dze," \u2014 "),Xoe=n(Dze,"A",{href:!0});var uHt=s(Xoe);Uzr=r(uHt,"TFLongformerForQuestionAnswering"),uHt.forEach(t),Hzr=r(Dze," (Longformer model)"),Dze.forEach(t),Jzr=i(_e),O0=n(_e,"LI",{});var Gze=s(O0);Kwe=n(Gze,"STRONG",{});var bHt=s(Kwe);Yzr=r(bHt,"mobilebert"),bHt.forEach(t),Kzr=r(Gze," \u2014 "),zoe=n(Gze,"A",{href:!0});var vHt=s(zoe);Zzr=r(vHt,"TFMobileBertForQuestionAnswering"),vHt.forEach(t),eWr=r(Gze," (MobileBERT model)"),Gze.forEach(t),oWr=i(_e),V0=n(_e,"LI",{});var Oze=s(V0);Zwe=n(Oze,"STRONG",{});var FHt=s(Zwe);rWr=r(FHt,"mpnet"),FHt.forEach(t),tWr=r(Oze," \u2014 "),Woe=n(Oze,"A",{href:!0});var THt=s(Woe);aWr=r(THt,"TFMPNetForQuestionAnswering"),THt.forEach(t),nWr=r(Oze," (MPNet model)"),Oze.forEach(t),sWr=i(_e),X0=n(_e,"LI",{});var Vze=s(X0);e6e=n(Vze,"STRONG",{});var MHt=s(e6e);lWr=r(MHt,"rembert"),MHt.forEach(t),iWr=r(Vze," \u2014 "),Qoe=n(Vze,"A",{href:!0});var EHt=s(Qoe);dWr=r(EHt,"TFRemBertForQuestionAnswering"),EHt.forEach(t),cWr=r(Vze," (RemBERT model)"),Vze.forEach(t),fWr=i(_e),z0=n(_e,"LI",{});var Xze=s(z0);o6e=n(Xze,"STRONG",{});var CHt=s(o6e);mWr=r(CHt,"roberta"),CHt.forEach(t),gWr=r(Xze," \u2014 "),Uoe=n(Xze,"A",{href:!0});var wHt=s(Uoe);hWr=r(wHt,"TFRobertaForQuestionAnswering"),wHt.forEach(t),pWr=r(Xze," (RoBERTa model)"),Xze.forEach(t),_Wr=i(_e),W0=n(_e,"LI",{});var zze=s(W0);r6e=n(zze,"STRONG",{});var AHt=s(r6e);uWr=r(AHt,"roformer"),AHt.forEach(t),bWr=r(zze," \u2014 "),Hoe=n(zze,"A",{href:!0});var LHt=s(Hoe);vWr=r(LHt,"TFRoFormerForQuestionAnswering"),LHt.forEach(t),FWr=r(zze," (RoFormer model)"),zze.forEach(t),TWr=i(_e),Q0=n(_e,"LI",{});var Wze=s(Q0);t6e=n(Wze,"STRONG",{});var yHt=s(t6e);MWr=r(yHt,"xlm"),yHt.forEach(t),EWr=r(Wze," \u2014 "),Joe=n(Wze,"A",{href:!0});var xHt=s(Joe);CWr=r(xHt,"TFXLMForQuestionAnsweringSimple"),xHt.forEach(t),wWr=r(Wze," (XLM model)"),Wze.forEach(t),AWr=i(_e),U0=n(_e,"LI",{});var Qze=s(U0);a6e=n(Qze,"STRONG",{});var $Ht=s(a6e);LWr=r($Ht,"xlm-roberta"),$Ht.forEach(t),yWr=r(Qze," \u2014 "),Yoe=n(Qze,"A",{href:!0});var kHt=s(Yoe);xWr=r(kHt,"TFXLMRobertaForQuestionAnswering"),kHt.forEach(t),$Wr=r(Qze," (XLM-RoBERTa model)"),Qze.forEach(t),kWr=i(_e),H0=n(_e,"LI",{});var Uze=s(H0);n6e=n(Uze,"STRONG",{});var SHt=s(n6e);SWr=r(SHt,"xlnet"),SHt.forEach(t),RWr=r(Uze," \u2014 "),Koe=n(Uze,"A",{href:!0});var RHt=s(Koe);PWr=r(RHt,"TFXLNetForQuestionAnsweringSimple"),RHt.forEach(t),BWr=r(Uze," (XLNet model)"),Uze.forEach(t),_e.forEach(t),IWr=i(gi),T(J0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),PHe=i(f),cf=n(f,"H2",{class:!0});var QYe=s(cf);Y0=n(QYe,"A",{id:!0,class:!0,href:!0});var PHt=s(Y0);s6e=n(PHt,"SPAN",{});var BHt=s(s6e);T(Fk.$$.fragment,BHt),BHt.forEach(t),PHt.forEach(t),NWr=i(QYe),l6e=n(QYe,"SPAN",{});var IHt=s(l6e);qWr=r(IHt,"TFAutoModelForVision2Seq"),IHt.forEach(t),QYe.forEach(t),BHe=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(Tk.$$.fragment,hi),jWr=i(hi),ff=n(hi,"P",{});var pse=s(ff);DWr=r(pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zoe=n(pse,"A",{href:!0});var NHt=s(Zoe);GWr=r(NHt,"from_pretrained()"),NHt.forEach(t),OWr=r(pse," class method or the "),ere=n(pse,"A",{href:!0});var qHt=s(ere);VWr=r(qHt,"from_config()"),qHt.forEach(t),XWr=r(pse,` class
method.`),pse.forEach(t),zWr=i(hi),Mk=n(hi,"P",{});var UYe=s(Mk);WWr=r(UYe,"This class cannot be instantiated directly using "),i6e=n(UYe,"CODE",{});var jHt=s(i6e);QWr=r(jHt,"__init__()"),jHt.forEach(t),UWr=r(UYe," (throws an error)."),UYe.forEach(t),HWr=i(hi),Yt=n(hi,"DIV",{class:!0});var jL=s(Yt);T(Ek.$$.fragment,jL),JWr=i(jL),d6e=n(jL,"P",{});var DHt=s(d6e);YWr=r(DHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DHt.forEach(t),KWr=i(jL),mf=n(jL,"P",{});var _se=s(mf);ZWr=r(_se,`Note:
Loading a model from its configuration file does `),c6e=n(_se,"STRONG",{});var GHt=s(c6e);eQr=r(GHt,"not"),GHt.forEach(t),oQr=r(_se,` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=n(_se,"A",{href:!0});var OHt=s(ore);rQr=r(OHt,"from_pretrained()"),OHt.forEach(t),tQr=r(_se," to load the model weights."),_se.forEach(t),aQr=i(jL),T(K0.$$.fragment,jL),jL.forEach(t),nQr=i(hi),Wr=n(hi,"DIV",{class:!0});var pi=s(Wr);T(Ck.$$.fragment,pi),sQr=i(pi),f6e=n(pi,"P",{});var VHt=s(f6e);lQr=r(VHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VHt.forEach(t),iQr=i(pi),xn=n(pi,"P",{});var DL=s(xn);dQr=r(DL,"The model class to instantiate is selected based on the "),m6e=n(DL,"CODE",{});var XHt=s(m6e);cQr=r(XHt,"model_type"),XHt.forEach(t),fQr=r(DL,` property of the config object (either
passed as an argument or loaded from `),g6e=n(DL,"CODE",{});var zHt=s(g6e);mQr=r(zHt,"pretrained_model_name_or_path"),zHt.forEach(t),gQr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=n(DL,"CODE",{});var WHt=s(h6e);hQr=r(WHt,"pretrained_model_name_or_path"),WHt.forEach(t),pQr=r(DL,":"),DL.forEach(t),_Qr=i(pi),p6e=n(pi,"UL",{});var QHt=s(p6e);Z0=n(QHt,"LI",{});var Hze=s(Z0);_6e=n(Hze,"STRONG",{});var UHt=s(_6e);uQr=r(UHt,"vision-encoder-decoder"),UHt.forEach(t),bQr=r(Hze," \u2014 "),rre=n(Hze,"A",{href:!0});var HHt=s(rre);vQr=r(HHt,"TFVisionEncoderDecoderModel"),HHt.forEach(t),FQr=r(Hze," (Vision Encoder decoder model)"),Hze.forEach(t),QHt.forEach(t),TQr=i(pi),T(ew.$$.fragment,pi),pi.forEach(t),hi.forEach(t),IHe=i(f),gf=n(f,"H2",{class:!0});var HYe=s(gf);ow=n(HYe,"A",{id:!0,class:!0,href:!0});var JHt=s(ow);u6e=n(JHt,"SPAN",{});var YHt=s(u6e);T(wk.$$.fragment,YHt),YHt.forEach(t),JHt.forEach(t),MQr=i(HYe),b6e=n(HYe,"SPAN",{});var KHt=s(b6e);EQr=r(KHt,"TFAutoModelForSpeechSeq2Seq"),KHt.forEach(t),HYe.forEach(t),NHe=i(f),br=n(f,"DIV",{class:!0});var _i=s(br);T(Ak.$$.fragment,_i),CQr=i(_i),hf=n(_i,"P",{});var use=s(hf);wQr=r(use,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tre=n(use,"A",{href:!0});var ZHt=s(tre);AQr=r(ZHt,"from_pretrained()"),ZHt.forEach(t),LQr=r(use," class method or the "),are=n(use,"A",{href:!0});var eJt=s(are);yQr=r(eJt,"from_config()"),eJt.forEach(t),xQr=r(use,` class
method.`),use.forEach(t),$Qr=i(_i),Lk=n(_i,"P",{});var JYe=s(Lk);kQr=r(JYe,"This class cannot be instantiated directly using "),v6e=n(JYe,"CODE",{});var oJt=s(v6e);SQr=r(oJt,"__init__()"),oJt.forEach(t),RQr=r(JYe," (throws an error)."),JYe.forEach(t),PQr=i(_i),Kt=n(_i,"DIV",{class:!0});var GL=s(Kt);T(yk.$$.fragment,GL),BQr=i(GL),F6e=n(GL,"P",{});var rJt=s(F6e);IQr=r(rJt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rJt.forEach(t),NQr=i(GL),pf=n(GL,"P",{});var bse=s(pf);qQr=r(bse,`Note:
Loading a model from its configuration file does `),T6e=n(bse,"STRONG",{});var tJt=s(T6e);jQr=r(tJt,"not"),tJt.forEach(t),DQr=r(bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(bse,"A",{href:!0});var aJt=s(nre);GQr=r(aJt,"from_pretrained()"),aJt.forEach(t),OQr=r(bse," to load the model weights."),bse.forEach(t),VQr=i(GL),T(rw.$$.fragment,GL),GL.forEach(t),XQr=i(_i),Qr=n(_i,"DIV",{class:!0});var ui=s(Qr);T(xk.$$.fragment,ui),zQr=i(ui),M6e=n(ui,"P",{});var nJt=s(M6e);WQr=r(nJt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nJt.forEach(t),QQr=i(ui),$n=n(ui,"P",{});var OL=s($n);UQr=r(OL,"The model class to instantiate is selected based on the "),E6e=n(OL,"CODE",{});var sJt=s(E6e);HQr=r(sJt,"model_type"),sJt.forEach(t),JQr=r(OL,` property of the config object (either
passed as an argument or loaded from `),C6e=n(OL,"CODE",{});var lJt=s(C6e);YQr=r(lJt,"pretrained_model_name_or_path"),lJt.forEach(t),KQr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=n(OL,"CODE",{});var iJt=s(w6e);ZQr=r(iJt,"pretrained_model_name_or_path"),iJt.forEach(t),eUr=r(OL,":"),OL.forEach(t),oUr=i(ui),A6e=n(ui,"UL",{});var dJt=s(A6e);tw=n(dJt,"LI",{});var Jze=s(tw);L6e=n(Jze,"STRONG",{});var cJt=s(L6e);rUr=r(cJt,"speech_to_text"),cJt.forEach(t),tUr=r(Jze," \u2014 "),sre=n(Jze,"A",{href:!0});var fJt=s(sre);aUr=r(fJt,"TFSpeech2TextForConditionalGeneration"),fJt.forEach(t),nUr=r(Jze," (Speech2Text model)"),Jze.forEach(t),dJt.forEach(t),sUr=i(ui),T(aw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),qHe=i(f),_f=n(f,"H2",{class:!0});var YYe=s(_f);nw=n(YYe,"A",{id:!0,class:!0,href:!0});var mJt=s(nw);y6e=n(mJt,"SPAN",{});var gJt=s(y6e);T($k.$$.fragment,gJt),gJt.forEach(t),mJt.forEach(t),lUr=i(YYe),x6e=n(YYe,"SPAN",{});var hJt=s(x6e);iUr=r(hJt,"FlaxAutoModel"),hJt.forEach(t),YYe.forEach(t),jHe=i(f),vr=n(f,"DIV",{class:!0});var bi=s(vr);T(kk.$$.fragment,bi),dUr=i(bi),uf=n(bi,"P",{});var vse=s(uf);cUr=r(vse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lre=n(vse,"A",{href:!0});var pJt=s(lre);fUr=r(pJt,"from_pretrained()"),pJt.forEach(t),mUr=r(vse," class method or the "),ire=n(vse,"A",{href:!0});var _Jt=s(ire);gUr=r(_Jt,"from_config()"),_Jt.forEach(t),hUr=r(vse,` class
method.`),vse.forEach(t),pUr=i(bi),Sk=n(bi,"P",{});var KYe=s(Sk);_Ur=r(KYe,"This class cannot be instantiated directly using "),$6e=n(KYe,"CODE",{});var uJt=s($6e);uUr=r(uJt,"__init__()"),uJt.forEach(t),bUr=r(KYe," (throws an error)."),KYe.forEach(t),vUr=i(bi),Zt=n(bi,"DIV",{class:!0});var VL=s(Zt);T(Rk.$$.fragment,VL),FUr=i(VL),k6e=n(VL,"P",{});var bJt=s(k6e);TUr=r(bJt,"Instantiates one of the base model classes of the library from a configuration."),bJt.forEach(t),MUr=i(VL),bf=n(VL,"P",{});var Fse=s(bf);EUr=r(Fse,`Note:
Loading a model from its configuration file does `),S6e=n(Fse,"STRONG",{});var vJt=s(S6e);CUr=r(vJt,"not"),vJt.forEach(t),wUr=r(Fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(Fse,"A",{href:!0});var FJt=s(dre);AUr=r(FJt,"from_pretrained()"),FJt.forEach(t),LUr=r(Fse," to load the model weights."),Fse.forEach(t),yUr=i(VL),T(sw.$$.fragment,VL),VL.forEach(t),xUr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Pk.$$.fragment,vi),$Ur=i(vi),R6e=n(vi,"P",{});var TJt=s(R6e);kUr=r(TJt,"Instantiate one of the base model classes of the library from a pretrained model."),TJt.forEach(t),SUr=i(vi),kn=n(vi,"P",{});var XL=s(kn);RUr=r(XL,"The model class to instantiate is selected based on the "),P6e=n(XL,"CODE",{});var MJt=s(P6e);PUr=r(MJt,"model_type"),MJt.forEach(t),BUr=r(XL,` property of the config object (either
passed as an argument or loaded from `),B6e=n(XL,"CODE",{});var EJt=s(B6e);IUr=r(EJt,"pretrained_model_name_or_path"),EJt.forEach(t),NUr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=n(XL,"CODE",{});var CJt=s(I6e);qUr=r(CJt,"pretrained_model_name_or_path"),CJt.forEach(t),jUr=r(XL,":"),XL.forEach(t),DUr=i(vi),re=n(vi,"UL",{});var ae=s(re);lw=n(ae,"LI",{});var Yze=s(lw);N6e=n(Yze,"STRONG",{});var wJt=s(N6e);GUr=r(wJt,"albert"),wJt.forEach(t),OUr=r(Yze," \u2014 "),cre=n(Yze,"A",{href:!0});var AJt=s(cre);VUr=r(AJt,"FlaxAlbertModel"),AJt.forEach(t),XUr=r(Yze," (ALBERT model)"),Yze.forEach(t),zUr=i(ae),iw=n(ae,"LI",{});var Kze=s(iw);q6e=n(Kze,"STRONG",{});var LJt=s(q6e);WUr=r(LJt,"bart"),LJt.forEach(t),QUr=r(Kze," \u2014 "),fre=n(Kze,"A",{href:!0});var yJt=s(fre);UUr=r(yJt,"FlaxBartModel"),yJt.forEach(t),HUr=r(Kze," (BART model)"),Kze.forEach(t),JUr=i(ae),dw=n(ae,"LI",{});var Zze=s(dw);j6e=n(Zze,"STRONG",{});var xJt=s(j6e);YUr=r(xJt,"beit"),xJt.forEach(t),KUr=r(Zze," \u2014 "),mre=n(Zze,"A",{href:!0});var $Jt=s(mre);ZUr=r($Jt,"FlaxBeitModel"),$Jt.forEach(t),eHr=r(Zze," (BEiT model)"),Zze.forEach(t),oHr=i(ae),cw=n(ae,"LI",{});var eWe=s(cw);D6e=n(eWe,"STRONG",{});var kJt=s(D6e);rHr=r(kJt,"bert"),kJt.forEach(t),tHr=r(eWe," \u2014 "),gre=n(eWe,"A",{href:!0});var SJt=s(gre);aHr=r(SJt,"FlaxBertModel"),SJt.forEach(t),nHr=r(eWe," (BERT model)"),eWe.forEach(t),sHr=i(ae),fw=n(ae,"LI",{});var oWe=s(fw);G6e=n(oWe,"STRONG",{});var RJt=s(G6e);lHr=r(RJt,"big_bird"),RJt.forEach(t),iHr=r(oWe," \u2014 "),hre=n(oWe,"A",{href:!0});var PJt=s(hre);dHr=r(PJt,"FlaxBigBirdModel"),PJt.forEach(t),cHr=r(oWe," (BigBird model)"),oWe.forEach(t),fHr=i(ae),mw=n(ae,"LI",{});var rWe=s(mw);O6e=n(rWe,"STRONG",{});var BJt=s(O6e);mHr=r(BJt,"blenderbot"),BJt.forEach(t),gHr=r(rWe," \u2014 "),pre=n(rWe,"A",{href:!0});var IJt=s(pre);hHr=r(IJt,"FlaxBlenderbotModel"),IJt.forEach(t),pHr=r(rWe," (Blenderbot model)"),rWe.forEach(t),_Hr=i(ae),gw=n(ae,"LI",{});var tWe=s(gw);V6e=n(tWe,"STRONG",{});var NJt=s(V6e);uHr=r(NJt,"blenderbot-small"),NJt.forEach(t),bHr=r(tWe," \u2014 "),_re=n(tWe,"A",{href:!0});var qJt=s(_re);vHr=r(qJt,"FlaxBlenderbotSmallModel"),qJt.forEach(t),FHr=r(tWe," (BlenderbotSmall model)"),tWe.forEach(t),THr=i(ae),hw=n(ae,"LI",{});var aWe=s(hw);X6e=n(aWe,"STRONG",{});var jJt=s(X6e);MHr=r(jJt,"clip"),jJt.forEach(t),EHr=r(aWe," \u2014 "),ure=n(aWe,"A",{href:!0});var DJt=s(ure);CHr=r(DJt,"FlaxCLIPModel"),DJt.forEach(t),wHr=r(aWe," (CLIP model)"),aWe.forEach(t),AHr=i(ae),pw=n(ae,"LI",{});var nWe=s(pw);z6e=n(nWe,"STRONG",{});var GJt=s(z6e);LHr=r(GJt,"distilbert"),GJt.forEach(t),yHr=r(nWe," \u2014 "),bre=n(nWe,"A",{href:!0});var OJt=s(bre);xHr=r(OJt,"FlaxDistilBertModel"),OJt.forEach(t),$Hr=r(nWe," (DistilBERT model)"),nWe.forEach(t),kHr=i(ae),_w=n(ae,"LI",{});var sWe=s(_w);W6e=n(sWe,"STRONG",{});var VJt=s(W6e);SHr=r(VJt,"electra"),VJt.forEach(t),RHr=r(sWe," \u2014 "),vre=n(sWe,"A",{href:!0});var XJt=s(vre);PHr=r(XJt,"FlaxElectraModel"),XJt.forEach(t),BHr=r(sWe," (ELECTRA model)"),sWe.forEach(t),IHr=i(ae),uw=n(ae,"LI",{});var lWe=s(uw);Q6e=n(lWe,"STRONG",{});var zJt=s(Q6e);NHr=r(zJt,"gpt2"),zJt.forEach(t),qHr=r(lWe," \u2014 "),Fre=n(lWe,"A",{href:!0});var WJt=s(Fre);jHr=r(WJt,"FlaxGPT2Model"),WJt.forEach(t),DHr=r(lWe," (OpenAI GPT-2 model)"),lWe.forEach(t),GHr=i(ae),bw=n(ae,"LI",{});var iWe=s(bw);U6e=n(iWe,"STRONG",{});var QJt=s(U6e);OHr=r(QJt,"gpt_neo"),QJt.forEach(t),VHr=r(iWe," \u2014 "),Tre=n(iWe,"A",{href:!0});var UJt=s(Tre);XHr=r(UJt,"FlaxGPTNeoModel"),UJt.forEach(t),zHr=r(iWe," (GPT Neo model)"),iWe.forEach(t),WHr=i(ae),vw=n(ae,"LI",{});var dWe=s(vw);H6e=n(dWe,"STRONG",{});var HJt=s(H6e);QHr=r(HJt,"gptj"),HJt.forEach(t),UHr=r(dWe," \u2014 "),Mre=n(dWe,"A",{href:!0});var JJt=s(Mre);HHr=r(JJt,"FlaxGPTJModel"),JJt.forEach(t),JHr=r(dWe," (GPT-J model)"),dWe.forEach(t),YHr=i(ae),Fw=n(ae,"LI",{});var cWe=s(Fw);J6e=n(cWe,"STRONG",{});var YJt=s(J6e);KHr=r(YJt,"longt5"),YJt.forEach(t),ZHr=r(cWe," \u2014 "),Ere=n(cWe,"A",{href:!0});var KJt=s(Ere);eJr=r(KJt,"FlaxLongT5Model"),KJt.forEach(t),oJr=r(cWe," (LongT5 model)"),cWe.forEach(t),rJr=i(ae),Tw=n(ae,"LI",{});var fWe=s(Tw);Y6e=n(fWe,"STRONG",{});var ZJt=s(Y6e);tJr=r(ZJt,"marian"),ZJt.forEach(t),aJr=r(fWe," \u2014 "),Cre=n(fWe,"A",{href:!0});var eYt=s(Cre);nJr=r(eYt,"FlaxMarianModel"),eYt.forEach(t),sJr=r(fWe," (Marian model)"),fWe.forEach(t),lJr=i(ae),Mw=n(ae,"LI",{});var mWe=s(Mw);K6e=n(mWe,"STRONG",{});var oYt=s(K6e);iJr=r(oYt,"mbart"),oYt.forEach(t),dJr=r(mWe," \u2014 "),wre=n(mWe,"A",{href:!0});var rYt=s(wre);cJr=r(rYt,"FlaxMBartModel"),rYt.forEach(t),fJr=r(mWe," (mBART model)"),mWe.forEach(t),mJr=i(ae),Ew=n(ae,"LI",{});var gWe=s(Ew);Z6e=n(gWe,"STRONG",{});var tYt=s(Z6e);gJr=r(tYt,"mt5"),tYt.forEach(t),hJr=r(gWe," \u2014 "),Are=n(gWe,"A",{href:!0});var aYt=s(Are);pJr=r(aYt,"FlaxMT5Model"),aYt.forEach(t),_Jr=r(gWe," (MT5 model)"),gWe.forEach(t),uJr=i(ae),Cw=n(ae,"LI",{});var hWe=s(Cw);eAe=n(hWe,"STRONG",{});var nYt=s(eAe);bJr=r(nYt,"opt"),nYt.forEach(t),vJr=r(hWe," \u2014 "),Lre=n(hWe,"A",{href:!0});var sYt=s(Lre);FJr=r(sYt,"FlaxOPTModel"),sYt.forEach(t),TJr=r(hWe," (OPT model)"),hWe.forEach(t),MJr=i(ae),ww=n(ae,"LI",{});var pWe=s(ww);oAe=n(pWe,"STRONG",{});var lYt=s(oAe);EJr=r(lYt,"pegasus"),lYt.forEach(t),CJr=r(pWe," \u2014 "),yre=n(pWe,"A",{href:!0});var iYt=s(yre);wJr=r(iYt,"FlaxPegasusModel"),iYt.forEach(t),AJr=r(pWe," (Pegasus model)"),pWe.forEach(t),LJr=i(ae),Aw=n(ae,"LI",{});var _We=s(Aw);rAe=n(_We,"STRONG",{});var dYt=s(rAe);yJr=r(dYt,"roberta"),dYt.forEach(t),xJr=r(_We," \u2014 "),xre=n(_We,"A",{href:!0});var cYt=s(xre);$Jr=r(cYt,"FlaxRobertaModel"),cYt.forEach(t),kJr=r(_We," (RoBERTa model)"),_We.forEach(t),SJr=i(ae),Lw=n(ae,"LI",{});var uWe=s(Lw);tAe=n(uWe,"STRONG",{});var fYt=s(tAe);RJr=r(fYt,"roformer"),fYt.forEach(t),PJr=r(uWe," \u2014 "),$re=n(uWe,"A",{href:!0});var mYt=s($re);BJr=r(mYt,"FlaxRoFormerModel"),mYt.forEach(t),IJr=r(uWe," (RoFormer model)"),uWe.forEach(t),NJr=i(ae),yw=n(ae,"LI",{});var bWe=s(yw);aAe=n(bWe,"STRONG",{});var gYt=s(aAe);qJr=r(gYt,"t5"),gYt.forEach(t),jJr=r(bWe," \u2014 "),kre=n(bWe,"A",{href:!0});var hYt=s(kre);DJr=r(hYt,"FlaxT5Model"),hYt.forEach(t),GJr=r(bWe," (T5 model)"),bWe.forEach(t),OJr=i(ae),xw=n(ae,"LI",{});var vWe=s(xw);nAe=n(vWe,"STRONG",{});var pYt=s(nAe);VJr=r(pYt,"vision-text-dual-encoder"),pYt.forEach(t),XJr=r(vWe," \u2014 "),Sre=n(vWe,"A",{href:!0});var _Yt=s(Sre);zJr=r(_Yt,"FlaxVisionTextDualEncoderModel"),_Yt.forEach(t),WJr=r(vWe," (VisionTextDualEncoder model)"),vWe.forEach(t),QJr=i(ae),$w=n(ae,"LI",{});var FWe=s($w);sAe=n(FWe,"STRONG",{});var uYt=s(sAe);UJr=r(uYt,"vit"),uYt.forEach(t),HJr=r(FWe," \u2014 "),Rre=n(FWe,"A",{href:!0});var bYt=s(Rre);JJr=r(bYt,"FlaxViTModel"),bYt.forEach(t),YJr=r(FWe," (ViT model)"),FWe.forEach(t),KJr=i(ae),kw=n(ae,"LI",{});var TWe=s(kw);lAe=n(TWe,"STRONG",{});var vYt=s(lAe);ZJr=r(vYt,"wav2vec2"),vYt.forEach(t),eYr=r(TWe," \u2014 "),Pre=n(TWe,"A",{href:!0});var FYt=s(Pre);oYr=r(FYt,"FlaxWav2Vec2Model"),FYt.forEach(t),rYr=r(TWe," (Wav2Vec2 model)"),TWe.forEach(t),tYr=i(ae),Sw=n(ae,"LI",{});var MWe=s(Sw);iAe=n(MWe,"STRONG",{});var TYt=s(iAe);aYr=r(TYt,"xglm"),TYt.forEach(t),nYr=r(MWe," \u2014 "),Bre=n(MWe,"A",{href:!0});var MYt=s(Bre);sYr=r(MYt,"FlaxXGLMModel"),MYt.forEach(t),lYr=r(MWe," (XGLM model)"),MWe.forEach(t),iYr=i(ae),Rw=n(ae,"LI",{});var EWe=s(Rw);dAe=n(EWe,"STRONG",{});var EYt=s(dAe);dYr=r(EYt,"xlm-roberta"),EYt.forEach(t),cYr=r(EWe," \u2014 "),Ire=n(EWe,"A",{href:!0});var CYt=s(Ire);fYr=r(CYt,"FlaxXLMRobertaModel"),CYt.forEach(t),mYr=r(EWe," (XLM-RoBERTa model)"),EWe.forEach(t),ae.forEach(t),gYr=i(vi),T(Pw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),DHe=i(f),vf=n(f,"H2",{class:!0});var ZYe=s(vf);Bw=n(ZYe,"A",{id:!0,class:!0,href:!0});var wYt=s(Bw);cAe=n(wYt,"SPAN",{});var AYt=s(cAe);T(Bk.$$.fragment,AYt),AYt.forEach(t),wYt.forEach(t),hYr=i(ZYe),fAe=n(ZYe,"SPAN",{});var LYt=s(fAe);pYr=r(LYt,"FlaxAutoModelForCausalLM"),LYt.forEach(t),ZYe.forEach(t),GHe=i(f),Fr=n(f,"DIV",{class:!0});var Fi=s(Fr);T(Ik.$$.fragment,Fi),_Yr=i(Fi),Ff=n(Fi,"P",{});var Tse=s(Ff);uYr=r(Tse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nre=n(Tse,"A",{href:!0});var yYt=s(Nre);bYr=r(yYt,"from_pretrained()"),yYt.forEach(t),vYr=r(Tse," class method or the "),qre=n(Tse,"A",{href:!0});var xYt=s(qre);FYr=r(xYt,"from_config()"),xYt.forEach(t),TYr=r(Tse,` class
method.`),Tse.forEach(t),MYr=i(Fi),Nk=n(Fi,"P",{});var eKe=s(Nk);EYr=r(eKe,"This class cannot be instantiated directly using "),mAe=n(eKe,"CODE",{});var $Yt=s(mAe);CYr=r($Yt,"__init__()"),$Yt.forEach(t),wYr=r(eKe," (throws an error)."),eKe.forEach(t),AYr=i(Fi),ea=n(Fi,"DIV",{class:!0});var zL=s(ea);T(qk.$$.fragment,zL),LYr=i(zL),gAe=n(zL,"P",{});var kYt=s(gAe);yYr=r(kYt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kYt.forEach(t),xYr=i(zL),Tf=n(zL,"P",{});var Mse=s(Tf);$Yr=r(Mse,`Note:
Loading a model from its configuration file does `),hAe=n(Mse,"STRONG",{});var SYt=s(hAe);kYr=r(SYt,"not"),SYt.forEach(t),SYr=r(Mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=n(Mse,"A",{href:!0});var RYt=s(jre);RYr=r(RYt,"from_pretrained()"),RYt.forEach(t),PYr=r(Mse," to load the model weights."),Mse.forEach(t),BYr=i(zL),T(Iw.$$.fragment,zL),zL.forEach(t),IYr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(jk.$$.fragment,Ti),NYr=i(Ti),pAe=n(Ti,"P",{});var PYt=s(pAe);qYr=r(PYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PYt.forEach(t),jYr=i(Ti),Sn=n(Ti,"P",{});var WL=s(Sn);DYr=r(WL,"The model class to instantiate is selected based on the "),_Ae=n(WL,"CODE",{});var BYt=s(_Ae);GYr=r(BYt,"model_type"),BYt.forEach(t),OYr=r(WL,` property of the config object (either
passed as an argument or loaded from `),uAe=n(WL,"CODE",{});var IYt=s(uAe);VYr=r(IYt,"pretrained_model_name_or_path"),IYt.forEach(t),XYr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bAe=n(WL,"CODE",{});var NYt=s(bAe);zYr=r(NYt,"pretrained_model_name_or_path"),NYt.forEach(t),WYr=r(WL,":"),WL.forEach(t),QYr=i(Ti),xe=n(Ti,"UL",{});var qe=s(xe);Nw=n(qe,"LI",{});var CWe=s(Nw);vAe=n(CWe,"STRONG",{});var qYt=s(vAe);UYr=r(qYt,"bart"),qYt.forEach(t),HYr=r(CWe," \u2014 "),Dre=n(CWe,"A",{href:!0});var jYt=s(Dre);JYr=r(jYt,"FlaxBartForCausalLM"),jYt.forEach(t),YYr=r(CWe," (BART model)"),CWe.forEach(t),KYr=i(qe),qw=n(qe,"LI",{});var wWe=s(qw);FAe=n(wWe,"STRONG",{});var DYt=s(FAe);ZYr=r(DYt,"bert"),DYt.forEach(t),eKr=r(wWe," \u2014 "),Gre=n(wWe,"A",{href:!0});var GYt=s(Gre);oKr=r(GYt,"FlaxBertForCausalLM"),GYt.forEach(t),rKr=r(wWe," (BERT model)"),wWe.forEach(t),tKr=i(qe),jw=n(qe,"LI",{});var AWe=s(jw);TAe=n(AWe,"STRONG",{});var OYt=s(TAe);aKr=r(OYt,"big_bird"),OYt.forEach(t),nKr=r(AWe," \u2014 "),Ore=n(AWe,"A",{href:!0});var VYt=s(Ore);sKr=r(VYt,"FlaxBigBirdForCausalLM"),VYt.forEach(t),lKr=r(AWe," (BigBird model)"),AWe.forEach(t),iKr=i(qe),Dw=n(qe,"LI",{});var LWe=s(Dw);MAe=n(LWe,"STRONG",{});var XYt=s(MAe);dKr=r(XYt,"electra"),XYt.forEach(t),cKr=r(LWe," \u2014 "),Vre=n(LWe,"A",{href:!0});var zYt=s(Vre);fKr=r(zYt,"FlaxElectraForCausalLM"),zYt.forEach(t),mKr=r(LWe," (ELECTRA model)"),LWe.forEach(t),gKr=i(qe),Gw=n(qe,"LI",{});var yWe=s(Gw);EAe=n(yWe,"STRONG",{});var WYt=s(EAe);hKr=r(WYt,"gpt2"),WYt.forEach(t),pKr=r(yWe," \u2014 "),Xre=n(yWe,"A",{href:!0});var QYt=s(Xre);_Kr=r(QYt,"FlaxGPT2LMHeadModel"),QYt.forEach(t),uKr=r(yWe," (OpenAI GPT-2 model)"),yWe.forEach(t),bKr=i(qe),Ow=n(qe,"LI",{});var xWe=s(Ow);CAe=n(xWe,"STRONG",{});var UYt=s(CAe);vKr=r(UYt,"gpt_neo"),UYt.forEach(t),FKr=r(xWe," \u2014 "),zre=n(xWe,"A",{href:!0});var HYt=s(zre);TKr=r(HYt,"FlaxGPTNeoForCausalLM"),HYt.forEach(t),MKr=r(xWe," (GPT Neo model)"),xWe.forEach(t),EKr=i(qe),Vw=n(qe,"LI",{});var $We=s(Vw);wAe=n($We,"STRONG",{});var JYt=s(wAe);CKr=r(JYt,"gptj"),JYt.forEach(t),wKr=r($We," \u2014 "),Wre=n($We,"A",{href:!0});var YYt=s(Wre);AKr=r(YYt,"FlaxGPTJForCausalLM"),YYt.forEach(t),LKr=r($We," (GPT-J model)"),$We.forEach(t),yKr=i(qe),Xw=n(qe,"LI",{});var kWe=s(Xw);AAe=n(kWe,"STRONG",{});var KYt=s(AAe);xKr=r(KYt,"opt"),KYt.forEach(t),$Kr=r(kWe," \u2014 "),Qre=n(kWe,"A",{href:!0});var ZYt=s(Qre);kKr=r(ZYt,"FlaxOPTForCausalLM"),ZYt.forEach(t),SKr=r(kWe," (OPT model)"),kWe.forEach(t),RKr=i(qe),zw=n(qe,"LI",{});var SWe=s(zw);LAe=n(SWe,"STRONG",{});var eKt=s(LAe);PKr=r(eKt,"roberta"),eKt.forEach(t),BKr=r(SWe," \u2014 "),Ure=n(SWe,"A",{href:!0});var oKt=s(Ure);IKr=r(oKt,"FlaxRobertaForCausalLM"),oKt.forEach(t),NKr=r(SWe," (RoBERTa model)"),SWe.forEach(t),qKr=i(qe),Ww=n(qe,"LI",{});var RWe=s(Ww);yAe=n(RWe,"STRONG",{});var rKt=s(yAe);jKr=r(rKt,"xglm"),rKt.forEach(t),DKr=r(RWe," \u2014 "),Hre=n(RWe,"A",{href:!0});var tKt=s(Hre);GKr=r(tKt,"FlaxXGLMForCausalLM"),tKt.forEach(t),OKr=r(RWe," (XGLM model)"),RWe.forEach(t),qe.forEach(t),VKr=i(Ti),T(Qw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),OHe=i(f),Mf=n(f,"H2",{class:!0});var oKe=s(Mf);Uw=n(oKe,"A",{id:!0,class:!0,href:!0});var aKt=s(Uw);xAe=n(aKt,"SPAN",{});var nKt=s(xAe);T(Dk.$$.fragment,nKt),nKt.forEach(t),aKt.forEach(t),XKr=i(oKe),$Ae=n(oKe,"SPAN",{});var sKt=s($Ae);zKr=r(sKt,"FlaxAutoModelForPreTraining"),sKt.forEach(t),oKe.forEach(t),VHe=i(f),Tr=n(f,"DIV",{class:!0});var Mi=s(Tr);T(Gk.$$.fragment,Mi),WKr=i(Mi),Ef=n(Mi,"P",{});var Ese=s(Ef);QKr=r(Ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jre=n(Ese,"A",{href:!0});var lKt=s(Jre);UKr=r(lKt,"from_pretrained()"),lKt.forEach(t),HKr=r(Ese," class method or the "),Yre=n(Ese,"A",{href:!0});var iKt=s(Yre);JKr=r(iKt,"from_config()"),iKt.forEach(t),YKr=r(Ese,` class
method.`),Ese.forEach(t),KKr=i(Mi),Ok=n(Mi,"P",{});var rKe=s(Ok);ZKr=r(rKe,"This class cannot be instantiated directly using "),kAe=n(rKe,"CODE",{});var dKt=s(kAe);eZr=r(dKt,"__init__()"),dKt.forEach(t),oZr=r(rKe," (throws an error)."),rKe.forEach(t),rZr=i(Mi),oa=n(Mi,"DIV",{class:!0});var QL=s(oa);T(Vk.$$.fragment,QL),tZr=i(QL),SAe=n(QL,"P",{});var cKt=s(SAe);aZr=r(cKt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cKt.forEach(t),nZr=i(QL),Cf=n(QL,"P",{});var Cse=s(Cf);sZr=r(Cse,`Note:
Loading a model from its configuration file does `),RAe=n(Cse,"STRONG",{});var fKt=s(RAe);lZr=r(fKt,"not"),fKt.forEach(t),iZr=r(Cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=n(Cse,"A",{href:!0});var mKt=s(Kre);dZr=r(mKt,"from_pretrained()"),mKt.forEach(t),cZr=r(Cse," to load the model weights."),Cse.forEach(t),fZr=i(QL),T(Hw.$$.fragment,QL),QL.forEach(t),mZr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Xk.$$.fragment,Ei),gZr=i(Ei),PAe=n(Ei,"P",{});var gKt=s(PAe);hZr=r(gKt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gKt.forEach(t),pZr=i(Ei),Rn=n(Ei,"P",{});var UL=s(Rn);_Zr=r(UL,"The model class to instantiate is selected based on the "),BAe=n(UL,"CODE",{});var hKt=s(BAe);uZr=r(hKt,"model_type"),hKt.forEach(t),bZr=r(UL,` property of the config object (either
passed as an argument or loaded from `),IAe=n(UL,"CODE",{});var pKt=s(IAe);vZr=r(pKt,"pretrained_model_name_or_path"),pKt.forEach(t),FZr=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=n(UL,"CODE",{});var _Kt=s(NAe);TZr=r(_Kt,"pretrained_model_name_or_path"),_Kt.forEach(t),MZr=r(UL,":"),UL.forEach(t),EZr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);Jw=n(we,"LI",{});var PWe=s(Jw);qAe=n(PWe,"STRONG",{});var uKt=s(qAe);CZr=r(uKt,"albert"),uKt.forEach(t),wZr=r(PWe," \u2014 "),Zre=n(PWe,"A",{href:!0});var bKt=s(Zre);AZr=r(bKt,"FlaxAlbertForPreTraining"),bKt.forEach(t),LZr=r(PWe," (ALBERT model)"),PWe.forEach(t),yZr=i(we),Yw=n(we,"LI",{});var BWe=s(Yw);jAe=n(BWe,"STRONG",{});var vKt=s(jAe);xZr=r(vKt,"bart"),vKt.forEach(t),$Zr=r(BWe," \u2014 "),ete=n(BWe,"A",{href:!0});var FKt=s(ete);kZr=r(FKt,"FlaxBartForConditionalGeneration"),FKt.forEach(t),SZr=r(BWe," (BART model)"),BWe.forEach(t),RZr=i(we),Kw=n(we,"LI",{});var IWe=s(Kw);DAe=n(IWe,"STRONG",{});var TKt=s(DAe);PZr=r(TKt,"bert"),TKt.forEach(t),BZr=r(IWe," \u2014 "),ote=n(IWe,"A",{href:!0});var MKt=s(ote);IZr=r(MKt,"FlaxBertForPreTraining"),MKt.forEach(t),NZr=r(IWe," (BERT model)"),IWe.forEach(t),qZr=i(we),Zw=n(we,"LI",{});var NWe=s(Zw);GAe=n(NWe,"STRONG",{});var EKt=s(GAe);jZr=r(EKt,"big_bird"),EKt.forEach(t),DZr=r(NWe," \u2014 "),rte=n(NWe,"A",{href:!0});var CKt=s(rte);GZr=r(CKt,"FlaxBigBirdForPreTraining"),CKt.forEach(t),OZr=r(NWe," (BigBird model)"),NWe.forEach(t),VZr=i(we),e6=n(we,"LI",{});var qWe=s(e6);OAe=n(qWe,"STRONG",{});var wKt=s(OAe);XZr=r(wKt,"electra"),wKt.forEach(t),zZr=r(qWe," \u2014 "),tte=n(qWe,"A",{href:!0});var AKt=s(tte);WZr=r(AKt,"FlaxElectraForPreTraining"),AKt.forEach(t),QZr=r(qWe," (ELECTRA model)"),qWe.forEach(t),UZr=i(we),o6=n(we,"LI",{});var jWe=s(o6);VAe=n(jWe,"STRONG",{});var LKt=s(VAe);HZr=r(LKt,"longt5"),LKt.forEach(t),JZr=r(jWe," \u2014 "),ate=n(jWe,"A",{href:!0});var yKt=s(ate);YZr=r(yKt,"FlaxLongT5ForConditionalGeneration"),yKt.forEach(t),KZr=r(jWe," (LongT5 model)"),jWe.forEach(t),ZZr=i(we),r6=n(we,"LI",{});var DWe=s(r6);XAe=n(DWe,"STRONG",{});var xKt=s(XAe);eet=r(xKt,"mbart"),xKt.forEach(t),oet=r(DWe," \u2014 "),nte=n(DWe,"A",{href:!0});var $Kt=s(nte);ret=r($Kt,"FlaxMBartForConditionalGeneration"),$Kt.forEach(t),tet=r(DWe," (mBART model)"),DWe.forEach(t),aet=i(we),t6=n(we,"LI",{});var GWe=s(t6);zAe=n(GWe,"STRONG",{});var kKt=s(zAe);net=r(kKt,"mt5"),kKt.forEach(t),set=r(GWe," \u2014 "),ste=n(GWe,"A",{href:!0});var SKt=s(ste);iet=r(SKt,"FlaxMT5ForConditionalGeneration"),SKt.forEach(t),det=r(GWe," (MT5 model)"),GWe.forEach(t),cet=i(we),a6=n(we,"LI",{});var OWe=s(a6);WAe=n(OWe,"STRONG",{});var RKt=s(WAe);fet=r(RKt,"roberta"),RKt.forEach(t),met=r(OWe," \u2014 "),lte=n(OWe,"A",{href:!0});var PKt=s(lte);get=r(PKt,"FlaxRobertaForMaskedLM"),PKt.forEach(t),het=r(OWe," (RoBERTa model)"),OWe.forEach(t),pet=i(we),n6=n(we,"LI",{});var VWe=s(n6);QAe=n(VWe,"STRONG",{});var BKt=s(QAe);_et=r(BKt,"roformer"),BKt.forEach(t),uet=r(VWe," \u2014 "),ite=n(VWe,"A",{href:!0});var IKt=s(ite);bet=r(IKt,"FlaxRoFormerForMaskedLM"),IKt.forEach(t),vet=r(VWe," (RoFormer model)"),VWe.forEach(t),Fet=i(we),s6=n(we,"LI",{});var XWe=s(s6);UAe=n(XWe,"STRONG",{});var NKt=s(UAe);Tet=r(NKt,"t5"),NKt.forEach(t),Met=r(XWe," \u2014 "),dte=n(XWe,"A",{href:!0});var qKt=s(dte);Eet=r(qKt,"FlaxT5ForConditionalGeneration"),qKt.forEach(t),Cet=r(XWe," (T5 model)"),XWe.forEach(t),wet=i(we),l6=n(we,"LI",{});var zWe=s(l6);HAe=n(zWe,"STRONG",{});var jKt=s(HAe);Aet=r(jKt,"wav2vec2"),jKt.forEach(t),Let=r(zWe," \u2014 "),cte=n(zWe,"A",{href:!0});var DKt=s(cte);yet=r(DKt,"FlaxWav2Vec2ForPreTraining"),DKt.forEach(t),xet=r(zWe," (Wav2Vec2 model)"),zWe.forEach(t),$et=i(we),i6=n(we,"LI",{});var WWe=s(i6);JAe=n(WWe,"STRONG",{});var GKt=s(JAe);ket=r(GKt,"xlm-roberta"),GKt.forEach(t),Set=r(WWe," \u2014 "),fte=n(WWe,"A",{href:!0});var OKt=s(fte);Ret=r(OKt,"FlaxXLMRobertaForMaskedLM"),OKt.forEach(t),Pet=r(WWe," (XLM-RoBERTa model)"),WWe.forEach(t),we.forEach(t),Bet=i(Ei),T(d6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),XHe=i(f),wf=n(f,"H2",{class:!0});var tKe=s(wf);c6=n(tKe,"A",{id:!0,class:!0,href:!0});var VKt=s(c6);YAe=n(VKt,"SPAN",{});var XKt=s(YAe);T(zk.$$.fragment,XKt),XKt.forEach(t),VKt.forEach(t),Iet=i(tKe),KAe=n(tKe,"SPAN",{});var zKt=s(KAe);Net=r(zKt,"FlaxAutoModelForMaskedLM"),zKt.forEach(t),tKe.forEach(t),zHe=i(f),Mr=n(f,"DIV",{class:!0});var Ci=s(Mr);T(Wk.$$.fragment,Ci),qet=i(Ci),Af=n(Ci,"P",{});var wse=s(Af);jet=r(wse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mte=n(wse,"A",{href:!0});var WKt=s(mte);Det=r(WKt,"from_pretrained()"),WKt.forEach(t),Get=r(wse," class method or the "),gte=n(wse,"A",{href:!0});var QKt=s(gte);Oet=r(QKt,"from_config()"),QKt.forEach(t),Vet=r(wse,` class
method.`),wse.forEach(t),Xet=i(Ci),Qk=n(Ci,"P",{});var aKe=s(Qk);zet=r(aKe,"This class cannot be instantiated directly using "),ZAe=n(aKe,"CODE",{});var UKt=s(ZAe);Wet=r(UKt,"__init__()"),UKt.forEach(t),Qet=r(aKe," (throws an error)."),aKe.forEach(t),Uet=i(Ci),ra=n(Ci,"DIV",{class:!0});var HL=s(ra);T(Uk.$$.fragment,HL),Het=i(HL),e7e=n(HL,"P",{});var HKt=s(e7e);Jet=r(HKt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HKt.forEach(t),Yet=i(HL),Lf=n(HL,"P",{});var Ase=s(Lf);Ket=r(Ase,`Note:
Loading a model from its configuration file does `),o7e=n(Ase,"STRONG",{});var JKt=s(o7e);Zet=r(JKt,"not"),JKt.forEach(t),eot=r(Ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=n(Ase,"A",{href:!0});var YKt=s(hte);oot=r(YKt,"from_pretrained()"),YKt.forEach(t),rot=r(Ase," to load the model weights."),Ase.forEach(t),tot=i(HL),T(f6.$$.fragment,HL),HL.forEach(t),aot=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Hk.$$.fragment,wi),not=i(wi),r7e=n(wi,"P",{});var KKt=s(r7e);sot=r(KKt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KKt.forEach(t),lot=i(wi),Pn=n(wi,"P",{});var JL=s(Pn);iot=r(JL,"The model class to instantiate is selected based on the "),t7e=n(JL,"CODE",{});var ZKt=s(t7e);dot=r(ZKt,"model_type"),ZKt.forEach(t),cot=r(JL,` property of the config object (either
passed as an argument or loaded from `),a7e=n(JL,"CODE",{});var eZt=s(a7e);fot=r(eZt,"pretrained_model_name_or_path"),eZt.forEach(t),mot=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=n(JL,"CODE",{});var oZt=s(n7e);got=r(oZt,"pretrained_model_name_or_path"),oZt.forEach(t),hot=r(JL,":"),JL.forEach(t),pot=i(wi),$e=n(wi,"UL",{});var je=s($e);m6=n(je,"LI",{});var QWe=s(m6);s7e=n(QWe,"STRONG",{});var rZt=s(s7e);_ot=r(rZt,"albert"),rZt.forEach(t),uot=r(QWe," \u2014 "),pte=n(QWe,"A",{href:!0});var tZt=s(pte);bot=r(tZt,"FlaxAlbertForMaskedLM"),tZt.forEach(t),vot=r(QWe," (ALBERT model)"),QWe.forEach(t),Fot=i(je),g6=n(je,"LI",{});var UWe=s(g6);l7e=n(UWe,"STRONG",{});var aZt=s(l7e);Tot=r(aZt,"bart"),aZt.forEach(t),Mot=r(UWe," \u2014 "),_te=n(UWe,"A",{href:!0});var nZt=s(_te);Eot=r(nZt,"FlaxBartForConditionalGeneration"),nZt.forEach(t),Cot=r(UWe," (BART model)"),UWe.forEach(t),wot=i(je),h6=n(je,"LI",{});var HWe=s(h6);i7e=n(HWe,"STRONG",{});var sZt=s(i7e);Aot=r(sZt,"bert"),sZt.forEach(t),Lot=r(HWe," \u2014 "),ute=n(HWe,"A",{href:!0});var lZt=s(ute);yot=r(lZt,"FlaxBertForMaskedLM"),lZt.forEach(t),xot=r(HWe," (BERT model)"),HWe.forEach(t),$ot=i(je),p6=n(je,"LI",{});var JWe=s(p6);d7e=n(JWe,"STRONG",{});var iZt=s(d7e);kot=r(iZt,"big_bird"),iZt.forEach(t),Sot=r(JWe," \u2014 "),bte=n(JWe,"A",{href:!0});var dZt=s(bte);Rot=r(dZt,"FlaxBigBirdForMaskedLM"),dZt.forEach(t),Pot=r(JWe," (BigBird model)"),JWe.forEach(t),Bot=i(je),_6=n(je,"LI",{});var YWe=s(_6);c7e=n(YWe,"STRONG",{});var cZt=s(c7e);Iot=r(cZt,"distilbert"),cZt.forEach(t),Not=r(YWe," \u2014 "),vte=n(YWe,"A",{href:!0});var fZt=s(vte);qot=r(fZt,"FlaxDistilBertForMaskedLM"),fZt.forEach(t),jot=r(YWe," (DistilBERT model)"),YWe.forEach(t),Dot=i(je),u6=n(je,"LI",{});var KWe=s(u6);f7e=n(KWe,"STRONG",{});var mZt=s(f7e);Got=r(mZt,"electra"),mZt.forEach(t),Oot=r(KWe," \u2014 "),Fte=n(KWe,"A",{href:!0});var gZt=s(Fte);Vot=r(gZt,"FlaxElectraForMaskedLM"),gZt.forEach(t),Xot=r(KWe," (ELECTRA model)"),KWe.forEach(t),zot=i(je),b6=n(je,"LI",{});var ZWe=s(b6);m7e=n(ZWe,"STRONG",{});var hZt=s(m7e);Wot=r(hZt,"mbart"),hZt.forEach(t),Qot=r(ZWe," \u2014 "),Tte=n(ZWe,"A",{href:!0});var pZt=s(Tte);Uot=r(pZt,"FlaxMBartForConditionalGeneration"),pZt.forEach(t),Hot=r(ZWe," (mBART model)"),ZWe.forEach(t),Jot=i(je),v6=n(je,"LI",{});var eQe=s(v6);g7e=n(eQe,"STRONG",{});var _Zt=s(g7e);Yot=r(_Zt,"roberta"),_Zt.forEach(t),Kot=r(eQe," \u2014 "),Mte=n(eQe,"A",{href:!0});var uZt=s(Mte);Zot=r(uZt,"FlaxRobertaForMaskedLM"),uZt.forEach(t),ert=r(eQe," (RoBERTa model)"),eQe.forEach(t),ort=i(je),F6=n(je,"LI",{});var oQe=s(F6);h7e=n(oQe,"STRONG",{});var bZt=s(h7e);rrt=r(bZt,"roformer"),bZt.forEach(t),trt=r(oQe," \u2014 "),Ete=n(oQe,"A",{href:!0});var vZt=s(Ete);art=r(vZt,"FlaxRoFormerForMaskedLM"),vZt.forEach(t),nrt=r(oQe," (RoFormer model)"),oQe.forEach(t),srt=i(je),T6=n(je,"LI",{});var rQe=s(T6);p7e=n(rQe,"STRONG",{});var FZt=s(p7e);lrt=r(FZt,"xlm-roberta"),FZt.forEach(t),irt=r(rQe," \u2014 "),Cte=n(rQe,"A",{href:!0});var TZt=s(Cte);drt=r(TZt,"FlaxXLMRobertaForMaskedLM"),TZt.forEach(t),crt=r(rQe," (XLM-RoBERTa model)"),rQe.forEach(t),je.forEach(t),frt=i(wi),T(M6.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),WHe=i(f),yf=n(f,"H2",{class:!0});var nKe=s(yf);E6=n(nKe,"A",{id:!0,class:!0,href:!0});var MZt=s(E6);_7e=n(MZt,"SPAN",{});var EZt=s(_7e);T(Jk.$$.fragment,EZt),EZt.forEach(t),MZt.forEach(t),mrt=i(nKe),u7e=n(nKe,"SPAN",{});var CZt=s(u7e);grt=r(CZt,"FlaxAutoModelForSeq2SeqLM"),CZt.forEach(t),nKe.forEach(t),QHe=i(f),Er=n(f,"DIV",{class:!0});var Ai=s(Er);T(Yk.$$.fragment,Ai),hrt=i(Ai),xf=n(Ai,"P",{});var Lse=s(xf);prt=r(Lse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wte=n(Lse,"A",{href:!0});var wZt=s(wte);_rt=r(wZt,"from_pretrained()"),wZt.forEach(t),urt=r(Lse," class method or the "),Ate=n(Lse,"A",{href:!0});var AZt=s(Ate);brt=r(AZt,"from_config()"),AZt.forEach(t),vrt=r(Lse,` class
method.`),Lse.forEach(t),Frt=i(Ai),Kk=n(Ai,"P",{});var sKe=s(Kk);Trt=r(sKe,"This class cannot be instantiated directly using "),b7e=n(sKe,"CODE",{});var LZt=s(b7e);Mrt=r(LZt,"__init__()"),LZt.forEach(t),Ert=r(sKe," (throws an error)."),sKe.forEach(t),Crt=i(Ai),ta=n(Ai,"DIV",{class:!0});var YL=s(ta);T(Zk.$$.fragment,YL),wrt=i(YL),v7e=n(YL,"P",{});var yZt=s(v7e);Art=r(yZt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yZt.forEach(t),Lrt=i(YL),$f=n(YL,"P",{});var yse=s($f);yrt=r(yse,`Note:
Loading a model from its configuration file does `),F7e=n(yse,"STRONG",{});var xZt=s(F7e);xrt=r(xZt,"not"),xZt.forEach(t),$rt=r(yse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=n(yse,"A",{href:!0});var $Zt=s(Lte);krt=r($Zt,"from_pretrained()"),$Zt.forEach(t),Srt=r(yse," to load the model weights."),yse.forEach(t),Rrt=i(YL),T(C6.$$.fragment,YL),YL.forEach(t),Prt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(eS.$$.fragment,Li),Brt=i(Li),T7e=n(Li,"P",{});var kZt=s(T7e);Irt=r(kZt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kZt.forEach(t),Nrt=i(Li),Bn=n(Li,"P",{});var KL=s(Bn);qrt=r(KL,"The model class to instantiate is selected based on the "),M7e=n(KL,"CODE",{});var SZt=s(M7e);jrt=r(SZt,"model_type"),SZt.forEach(t),Drt=r(KL,` property of the config object (either
passed as an argument or loaded from `),E7e=n(KL,"CODE",{});var RZt=s(E7e);Grt=r(RZt,"pretrained_model_name_or_path"),RZt.forEach(t),Ort=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=n(KL,"CODE",{});var PZt=s(C7e);Vrt=r(PZt,"pretrained_model_name_or_path"),PZt.forEach(t),Xrt=r(KL,":"),KL.forEach(t),zrt=i(Li),ke=n(Li,"UL",{});var De=s(ke);w6=n(De,"LI",{});var tQe=s(w6);w7e=n(tQe,"STRONG",{});var BZt=s(w7e);Wrt=r(BZt,"bart"),BZt.forEach(t),Qrt=r(tQe," \u2014 "),yte=n(tQe,"A",{href:!0});var IZt=s(yte);Urt=r(IZt,"FlaxBartForConditionalGeneration"),IZt.forEach(t),Hrt=r(tQe," (BART model)"),tQe.forEach(t),Jrt=i(De),A6=n(De,"LI",{});var aQe=s(A6);A7e=n(aQe,"STRONG",{});var NZt=s(A7e);Yrt=r(NZt,"blenderbot"),NZt.forEach(t),Krt=r(aQe," \u2014 "),xte=n(aQe,"A",{href:!0});var qZt=s(xte);Zrt=r(qZt,"FlaxBlenderbotForConditionalGeneration"),qZt.forEach(t),ett=r(aQe," (Blenderbot model)"),aQe.forEach(t),ott=i(De),L6=n(De,"LI",{});var nQe=s(L6);L7e=n(nQe,"STRONG",{});var jZt=s(L7e);rtt=r(jZt,"blenderbot-small"),jZt.forEach(t),ttt=r(nQe," \u2014 "),$te=n(nQe,"A",{href:!0});var DZt=s($te);att=r(DZt,"FlaxBlenderbotSmallForConditionalGeneration"),DZt.forEach(t),ntt=r(nQe," (BlenderbotSmall model)"),nQe.forEach(t),stt=i(De),y6=n(De,"LI",{});var sQe=s(y6);y7e=n(sQe,"STRONG",{});var GZt=s(y7e);ltt=r(GZt,"encoder-decoder"),GZt.forEach(t),itt=r(sQe," \u2014 "),kte=n(sQe,"A",{href:!0});var OZt=s(kte);dtt=r(OZt,"FlaxEncoderDecoderModel"),OZt.forEach(t),ctt=r(sQe," (Encoder decoder model)"),sQe.forEach(t),ftt=i(De),x6=n(De,"LI",{});var lQe=s(x6);x7e=n(lQe,"STRONG",{});var VZt=s(x7e);mtt=r(VZt,"longt5"),VZt.forEach(t),gtt=r(lQe," \u2014 "),Ste=n(lQe,"A",{href:!0});var XZt=s(Ste);htt=r(XZt,"FlaxLongT5ForConditionalGeneration"),XZt.forEach(t),ptt=r(lQe," (LongT5 model)"),lQe.forEach(t),_tt=i(De),$6=n(De,"LI",{});var iQe=s($6);$7e=n(iQe,"STRONG",{});var zZt=s($7e);utt=r(zZt,"marian"),zZt.forEach(t),btt=r(iQe," \u2014 "),Rte=n(iQe,"A",{href:!0});var WZt=s(Rte);vtt=r(WZt,"FlaxMarianMTModel"),WZt.forEach(t),Ftt=r(iQe," (Marian model)"),iQe.forEach(t),Ttt=i(De),k6=n(De,"LI",{});var dQe=s(k6);k7e=n(dQe,"STRONG",{});var QZt=s(k7e);Mtt=r(QZt,"mbart"),QZt.forEach(t),Ett=r(dQe," \u2014 "),Pte=n(dQe,"A",{href:!0});var UZt=s(Pte);Ctt=r(UZt,"FlaxMBartForConditionalGeneration"),UZt.forEach(t),wtt=r(dQe," (mBART model)"),dQe.forEach(t),Att=i(De),S6=n(De,"LI",{});var cQe=s(S6);S7e=n(cQe,"STRONG",{});var HZt=s(S7e);Ltt=r(HZt,"mt5"),HZt.forEach(t),ytt=r(cQe," \u2014 "),Bte=n(cQe,"A",{href:!0});var JZt=s(Bte);xtt=r(JZt,"FlaxMT5ForConditionalGeneration"),JZt.forEach(t),$tt=r(cQe," (MT5 model)"),cQe.forEach(t),ktt=i(De),R6=n(De,"LI",{});var fQe=s(R6);R7e=n(fQe,"STRONG",{});var YZt=s(R7e);Stt=r(YZt,"pegasus"),YZt.forEach(t),Rtt=r(fQe," \u2014 "),Ite=n(fQe,"A",{href:!0});var KZt=s(Ite);Ptt=r(KZt,"FlaxPegasusForConditionalGeneration"),KZt.forEach(t),Btt=r(fQe," (Pegasus model)"),fQe.forEach(t),Itt=i(De),P6=n(De,"LI",{});var mQe=s(P6);P7e=n(mQe,"STRONG",{});var ZZt=s(P7e);Ntt=r(ZZt,"t5"),ZZt.forEach(t),qtt=r(mQe," \u2014 "),Nte=n(mQe,"A",{href:!0});var eea=s(Nte);jtt=r(eea,"FlaxT5ForConditionalGeneration"),eea.forEach(t),Dtt=r(mQe," (T5 model)"),mQe.forEach(t),De.forEach(t),Gtt=i(Li),T(B6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),UHe=i(f),kf=n(f,"H2",{class:!0});var lKe=s(kf);I6=n(lKe,"A",{id:!0,class:!0,href:!0});var oea=s(I6);B7e=n(oea,"SPAN",{});var rea=s(B7e);T(oS.$$.fragment,rea),rea.forEach(t),oea.forEach(t),Ott=i(lKe),I7e=n(lKe,"SPAN",{});var tea=s(I7e);Vtt=r(tea,"FlaxAutoModelForSequenceClassification"),tea.forEach(t),lKe.forEach(t),HHe=i(f),Cr=n(f,"DIV",{class:!0});var yi=s(Cr);T(rS.$$.fragment,yi),Xtt=i(yi),Sf=n(yi,"P",{});var xse=s(Sf);ztt=r(xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qte=n(xse,"A",{href:!0});var aea=s(qte);Wtt=r(aea,"from_pretrained()"),aea.forEach(t),Qtt=r(xse," class method or the "),jte=n(xse,"A",{href:!0});var nea=s(jte);Utt=r(nea,"from_config()"),nea.forEach(t),Htt=r(xse,` class
method.`),xse.forEach(t),Jtt=i(yi),tS=n(yi,"P",{});var iKe=s(tS);Ytt=r(iKe,"This class cannot be instantiated directly using "),N7e=n(iKe,"CODE",{});var sea=s(N7e);Ktt=r(sea,"__init__()"),sea.forEach(t),Ztt=r(iKe," (throws an error)."),iKe.forEach(t),eat=i(yi),aa=n(yi,"DIV",{class:!0});var ZL=s(aa);T(aS.$$.fragment,ZL),oat=i(ZL),q7e=n(ZL,"P",{});var lea=s(q7e);rat=r(lea,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lea.forEach(t),tat=i(ZL),Rf=n(ZL,"P",{});var $se=s(Rf);aat=r($se,`Note:
Loading a model from its configuration file does `),j7e=n($se,"STRONG",{});var iea=s(j7e);nat=r(iea,"not"),iea.forEach(t),sat=r($se,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=n($se,"A",{href:!0});var dea=s(Dte);lat=r(dea,"from_pretrained()"),dea.forEach(t),iat=r($se," to load the model weights."),$se.forEach(t),dat=i(ZL),T(N6.$$.fragment,ZL),ZL.forEach(t),cat=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(nS.$$.fragment,xi),fat=i(xi),D7e=n(xi,"P",{});var cea=s(D7e);mat=r(cea,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cea.forEach(t),gat=i(xi),In=n(xi,"P",{});var ey=s(In);hat=r(ey,"The model class to instantiate is selected based on the "),G7e=n(ey,"CODE",{});var fea=s(G7e);pat=r(fea,"model_type"),fea.forEach(t),_at=r(ey,` property of the config object (either
passed as an argument or loaded from `),O7e=n(ey,"CODE",{});var mea=s(O7e);uat=r(mea,"pretrained_model_name_or_path"),mea.forEach(t),bat=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=n(ey,"CODE",{});var gea=s(V7e);vat=r(gea,"pretrained_model_name_or_path"),gea.forEach(t),Fat=r(ey,":"),ey.forEach(t),Tat=i(xi),Se=n(xi,"UL",{});var Ge=s(Se);q6=n(Ge,"LI",{});var gQe=s(q6);X7e=n(gQe,"STRONG",{});var hea=s(X7e);Mat=r(hea,"albert"),hea.forEach(t),Eat=r(gQe," \u2014 "),Gte=n(gQe,"A",{href:!0});var pea=s(Gte);Cat=r(pea,"FlaxAlbertForSequenceClassification"),pea.forEach(t),wat=r(gQe," (ALBERT model)"),gQe.forEach(t),Aat=i(Ge),j6=n(Ge,"LI",{});var hQe=s(j6);z7e=n(hQe,"STRONG",{});var _ea=s(z7e);Lat=r(_ea,"bart"),_ea.forEach(t),yat=r(hQe," \u2014 "),Ote=n(hQe,"A",{href:!0});var uea=s(Ote);xat=r(uea,"FlaxBartForSequenceClassification"),uea.forEach(t),$at=r(hQe," (BART model)"),hQe.forEach(t),kat=i(Ge),D6=n(Ge,"LI",{});var pQe=s(D6);W7e=n(pQe,"STRONG",{});var bea=s(W7e);Sat=r(bea,"bert"),bea.forEach(t),Rat=r(pQe," \u2014 "),Vte=n(pQe,"A",{href:!0});var vea=s(Vte);Pat=r(vea,"FlaxBertForSequenceClassification"),vea.forEach(t),Bat=r(pQe," (BERT model)"),pQe.forEach(t),Iat=i(Ge),G6=n(Ge,"LI",{});var _Qe=s(G6);Q7e=n(_Qe,"STRONG",{});var Fea=s(Q7e);Nat=r(Fea,"big_bird"),Fea.forEach(t),qat=r(_Qe," \u2014 "),Xte=n(_Qe,"A",{href:!0});var Tea=s(Xte);jat=r(Tea,"FlaxBigBirdForSequenceClassification"),Tea.forEach(t),Dat=r(_Qe," (BigBird model)"),_Qe.forEach(t),Gat=i(Ge),O6=n(Ge,"LI",{});var uQe=s(O6);U7e=n(uQe,"STRONG",{});var Mea=s(U7e);Oat=r(Mea,"distilbert"),Mea.forEach(t),Vat=r(uQe," \u2014 "),zte=n(uQe,"A",{href:!0});var Eea=s(zte);Xat=r(Eea,"FlaxDistilBertForSequenceClassification"),Eea.forEach(t),zat=r(uQe," (DistilBERT model)"),uQe.forEach(t),Wat=i(Ge),V6=n(Ge,"LI",{});var bQe=s(V6);H7e=n(bQe,"STRONG",{});var Cea=s(H7e);Qat=r(Cea,"electra"),Cea.forEach(t),Uat=r(bQe," \u2014 "),Wte=n(bQe,"A",{href:!0});var wea=s(Wte);Hat=r(wea,"FlaxElectraForSequenceClassification"),wea.forEach(t),Jat=r(bQe," (ELECTRA model)"),bQe.forEach(t),Yat=i(Ge),X6=n(Ge,"LI",{});var vQe=s(X6);J7e=n(vQe,"STRONG",{});var Aea=s(J7e);Kat=r(Aea,"mbart"),Aea.forEach(t),Zat=r(vQe," \u2014 "),Qte=n(vQe,"A",{href:!0});var Lea=s(Qte);ent=r(Lea,"FlaxMBartForSequenceClassification"),Lea.forEach(t),ont=r(vQe," (mBART model)"),vQe.forEach(t),rnt=i(Ge),z6=n(Ge,"LI",{});var FQe=s(z6);Y7e=n(FQe,"STRONG",{});var yea=s(Y7e);tnt=r(yea,"roberta"),yea.forEach(t),ant=r(FQe," \u2014 "),Ute=n(FQe,"A",{href:!0});var xea=s(Ute);nnt=r(xea,"FlaxRobertaForSequenceClassification"),xea.forEach(t),snt=r(FQe," (RoBERTa model)"),FQe.forEach(t),lnt=i(Ge),W6=n(Ge,"LI",{});var TQe=s(W6);K7e=n(TQe,"STRONG",{});var $ea=s(K7e);int=r($ea,"roformer"),$ea.forEach(t),dnt=r(TQe," \u2014 "),Hte=n(TQe,"A",{href:!0});var kea=s(Hte);cnt=r(kea,"FlaxRoFormerForSequenceClassification"),kea.forEach(t),fnt=r(TQe," (RoFormer model)"),TQe.forEach(t),mnt=i(Ge),Q6=n(Ge,"LI",{});var MQe=s(Q6);Z7e=n(MQe,"STRONG",{});var Sea=s(Z7e);gnt=r(Sea,"xlm-roberta"),Sea.forEach(t),hnt=r(MQe," \u2014 "),Jte=n(MQe,"A",{href:!0});var Rea=s(Jte);pnt=r(Rea,"FlaxXLMRobertaForSequenceClassification"),Rea.forEach(t),_nt=r(MQe," (XLM-RoBERTa model)"),MQe.forEach(t),Ge.forEach(t),unt=i(xi),T(U6.$$.fragment,xi),xi.forEach(t),yi.forEach(t),JHe=i(f),Pf=n(f,"H2",{class:!0});var dKe=s(Pf);H6=n(dKe,"A",{id:!0,class:!0,href:!0});var Pea=s(H6);eLe=n(Pea,"SPAN",{});var Bea=s(eLe);T(sS.$$.fragment,Bea),Bea.forEach(t),Pea.forEach(t),bnt=i(dKe),oLe=n(dKe,"SPAN",{});var Iea=s(oLe);vnt=r(Iea,"FlaxAutoModelForQuestionAnswering"),Iea.forEach(t),dKe.forEach(t),YHe=i(f),wr=n(f,"DIV",{class:!0});var $i=s(wr);T(lS.$$.fragment,$i),Fnt=i($i),Bf=n($i,"P",{});var kse=s(Bf);Tnt=r(kse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yte=n(kse,"A",{href:!0});var Nea=s(Yte);Mnt=r(Nea,"from_pretrained()"),Nea.forEach(t),Ent=r(kse," class method or the "),Kte=n(kse,"A",{href:!0});var qea=s(Kte);Cnt=r(qea,"from_config()"),qea.forEach(t),wnt=r(kse,` class
method.`),kse.forEach(t),Ant=i($i),iS=n($i,"P",{});var cKe=s(iS);Lnt=r(cKe,"This class cannot be instantiated directly using "),rLe=n(cKe,"CODE",{});var jea=s(rLe);ynt=r(jea,"__init__()"),jea.forEach(t),xnt=r(cKe," (throws an error)."),cKe.forEach(t),$nt=i($i),na=n($i,"DIV",{class:!0});var oy=s(na);T(dS.$$.fragment,oy),knt=i(oy),tLe=n(oy,"P",{});var Dea=s(tLe);Snt=r(Dea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dea.forEach(t),Rnt=i(oy),If=n(oy,"P",{});var Sse=s(If);Pnt=r(Sse,`Note:
Loading a model from its configuration file does `),aLe=n(Sse,"STRONG",{});var Gea=s(aLe);Bnt=r(Gea,"not"),Gea.forEach(t),Int=r(Sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zte=n(Sse,"A",{href:!0});var Oea=s(Zte);Nnt=r(Oea,"from_pretrained()"),Oea.forEach(t),qnt=r(Sse," to load the model weights."),Sse.forEach(t),jnt=i(oy),T(J6.$$.fragment,oy),oy.forEach(t),Dnt=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(cS.$$.fragment,ki),Gnt=i(ki),nLe=n(ki,"P",{});var Vea=s(nLe);Ont=r(Vea,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vea.forEach(t),Vnt=i(ki),Nn=n(ki,"P",{});var ry=s(Nn);Xnt=r(ry,"The model class to instantiate is selected based on the "),sLe=n(ry,"CODE",{});var Xea=s(sLe);znt=r(Xea,"model_type"),Xea.forEach(t),Wnt=r(ry,` property of the config object (either
passed as an argument or loaded from `),lLe=n(ry,"CODE",{});var zea=s(lLe);Qnt=r(zea,"pretrained_model_name_or_path"),zea.forEach(t),Unt=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iLe=n(ry,"CODE",{});var Wea=s(iLe);Hnt=r(Wea,"pretrained_model_name_or_path"),Wea.forEach(t),Jnt=r(ry,":"),ry.forEach(t),Ynt=i(ki),Re=n(ki,"UL",{});var Oe=s(Re);Y6=n(Oe,"LI",{});var EQe=s(Y6);dLe=n(EQe,"STRONG",{});var Qea=s(dLe);Knt=r(Qea,"albert"),Qea.forEach(t),Znt=r(EQe," \u2014 "),eae=n(EQe,"A",{href:!0});var Uea=s(eae);est=r(Uea,"FlaxAlbertForQuestionAnswering"),Uea.forEach(t),ost=r(EQe," (ALBERT model)"),EQe.forEach(t),rst=i(Oe),K6=n(Oe,"LI",{});var CQe=s(K6);cLe=n(CQe,"STRONG",{});var Hea=s(cLe);tst=r(Hea,"bart"),Hea.forEach(t),ast=r(CQe," \u2014 "),oae=n(CQe,"A",{href:!0});var Jea=s(oae);nst=r(Jea,"FlaxBartForQuestionAnswering"),Jea.forEach(t),sst=r(CQe," (BART model)"),CQe.forEach(t),lst=i(Oe),Z6=n(Oe,"LI",{});var wQe=s(Z6);fLe=n(wQe,"STRONG",{});var Yea=s(fLe);ist=r(Yea,"bert"),Yea.forEach(t),dst=r(wQe," \u2014 "),rae=n(wQe,"A",{href:!0});var Kea=s(rae);cst=r(Kea,"FlaxBertForQuestionAnswering"),Kea.forEach(t),fst=r(wQe," (BERT model)"),wQe.forEach(t),mst=i(Oe),eA=n(Oe,"LI",{});var AQe=s(eA);mLe=n(AQe,"STRONG",{});var Zea=s(mLe);gst=r(Zea,"big_bird"),Zea.forEach(t),hst=r(AQe," \u2014 "),tae=n(AQe,"A",{href:!0});var eoa=s(tae);pst=r(eoa,"FlaxBigBirdForQuestionAnswering"),eoa.forEach(t),_st=r(AQe," (BigBird model)"),AQe.forEach(t),ust=i(Oe),oA=n(Oe,"LI",{});var LQe=s(oA);gLe=n(LQe,"STRONG",{});var ooa=s(gLe);bst=r(ooa,"distilbert"),ooa.forEach(t),vst=r(LQe," \u2014 "),aae=n(LQe,"A",{href:!0});var roa=s(aae);Fst=r(roa,"FlaxDistilBertForQuestionAnswering"),roa.forEach(t),Tst=r(LQe," (DistilBERT model)"),LQe.forEach(t),Mst=i(Oe),rA=n(Oe,"LI",{});var yQe=s(rA);hLe=n(yQe,"STRONG",{});var toa=s(hLe);Est=r(toa,"electra"),toa.forEach(t),Cst=r(yQe," \u2014 "),nae=n(yQe,"A",{href:!0});var aoa=s(nae);wst=r(aoa,"FlaxElectraForQuestionAnswering"),aoa.forEach(t),Ast=r(yQe," (ELECTRA model)"),yQe.forEach(t),Lst=i(Oe),tA=n(Oe,"LI",{});var xQe=s(tA);pLe=n(xQe,"STRONG",{});var noa=s(pLe);yst=r(noa,"mbart"),noa.forEach(t),xst=r(xQe," \u2014 "),sae=n(xQe,"A",{href:!0});var soa=s(sae);$st=r(soa,"FlaxMBartForQuestionAnswering"),soa.forEach(t),kst=r(xQe," (mBART model)"),xQe.forEach(t),Sst=i(Oe),aA=n(Oe,"LI",{});var $Qe=s(aA);_Le=n($Qe,"STRONG",{});var loa=s(_Le);Rst=r(loa,"roberta"),loa.forEach(t),Pst=r($Qe," \u2014 "),lae=n($Qe,"A",{href:!0});var ioa=s(lae);Bst=r(ioa,"FlaxRobertaForQuestionAnswering"),ioa.forEach(t),Ist=r($Qe," (RoBERTa model)"),$Qe.forEach(t),Nst=i(Oe),nA=n(Oe,"LI",{});var kQe=s(nA);uLe=n(kQe,"STRONG",{});var doa=s(uLe);qst=r(doa,"roformer"),doa.forEach(t),jst=r(kQe," \u2014 "),iae=n(kQe,"A",{href:!0});var coa=s(iae);Dst=r(coa,"FlaxRoFormerForQuestionAnswering"),coa.forEach(t),Gst=r(kQe," (RoFormer model)"),kQe.forEach(t),Ost=i(Oe),sA=n(Oe,"LI",{});var SQe=s(sA);bLe=n(SQe,"STRONG",{});var foa=s(bLe);Vst=r(foa,"xlm-roberta"),foa.forEach(t),Xst=r(SQe," \u2014 "),dae=n(SQe,"A",{href:!0});var moa=s(dae);zst=r(moa,"FlaxXLMRobertaForQuestionAnswering"),moa.forEach(t),Wst=r(SQe," (XLM-RoBERTa model)"),SQe.forEach(t),Oe.forEach(t),Qst=i(ki),T(lA.$$.fragment,ki),ki.forEach(t),$i.forEach(t),KHe=i(f),Nf=n(f,"H2",{class:!0});var fKe=s(Nf);iA=n(fKe,"A",{id:!0,class:!0,href:!0});var goa=s(iA);vLe=n(goa,"SPAN",{});var hoa=s(vLe);T(fS.$$.fragment,hoa),hoa.forEach(t),goa.forEach(t),Ust=i(fKe),FLe=n(fKe,"SPAN",{});var poa=s(FLe);Hst=r(poa,"FlaxAutoModelForTokenClassification"),poa.forEach(t),fKe.forEach(t),ZHe=i(f),Ar=n(f,"DIV",{class:!0});var Si=s(Ar);T(mS.$$.fragment,Si),Jst=i(Si),qf=n(Si,"P",{});var Rse=s(qf);Yst=r(Rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cae=n(Rse,"A",{href:!0});var _oa=s(cae);Kst=r(_oa,"from_pretrained()"),_oa.forEach(t),Zst=r(Rse," class method or the "),fae=n(Rse,"A",{href:!0});var uoa=s(fae);elt=r(uoa,"from_config()"),uoa.forEach(t),olt=r(Rse,` class
method.`),Rse.forEach(t),rlt=i(Si),gS=n(Si,"P",{});var mKe=s(gS);tlt=r(mKe,"This class cannot be instantiated directly using "),TLe=n(mKe,"CODE",{});var boa=s(TLe);alt=r(boa,"__init__()"),boa.forEach(t),nlt=r(mKe," (throws an error)."),mKe.forEach(t),slt=i(Si),sa=n(Si,"DIV",{class:!0});var ty=s(sa);T(hS.$$.fragment,ty),llt=i(ty),MLe=n(ty,"P",{});var voa=s(MLe);ilt=r(voa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),voa.forEach(t),dlt=i(ty),jf=n(ty,"P",{});var Pse=s(jf);clt=r(Pse,`Note:
Loading a model from its configuration file does `),ELe=n(Pse,"STRONG",{});var Foa=s(ELe);flt=r(Foa,"not"),Foa.forEach(t),mlt=r(Pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=n(Pse,"A",{href:!0});var Toa=s(mae);glt=r(Toa,"from_pretrained()"),Toa.forEach(t),hlt=r(Pse," to load the model weights."),Pse.forEach(t),plt=i(ty),T(dA.$$.fragment,ty),ty.forEach(t),_lt=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(pS.$$.fragment,Ri),ult=i(Ri),CLe=n(Ri,"P",{});var Moa=s(CLe);blt=r(Moa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Moa.forEach(t),vlt=i(Ri),qn=n(Ri,"P",{});var ay=s(qn);Flt=r(ay,"The model class to instantiate is selected based on the "),wLe=n(ay,"CODE",{});var Eoa=s(wLe);Tlt=r(Eoa,"model_type"),Eoa.forEach(t),Mlt=r(ay,` property of the config object (either
passed as an argument or loaded from `),ALe=n(ay,"CODE",{});var Coa=s(ALe);Elt=r(Coa,"pretrained_model_name_or_path"),Coa.forEach(t),Clt=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LLe=n(ay,"CODE",{});var woa=s(LLe);wlt=r(woa,"pretrained_model_name_or_path"),woa.forEach(t),Alt=r(ay,":"),ay.forEach(t),Llt=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);cA=n(Co,"LI",{});var RQe=s(cA);yLe=n(RQe,"STRONG",{});var Aoa=s(yLe);ylt=r(Aoa,"albert"),Aoa.forEach(t),xlt=r(RQe," \u2014 "),gae=n(RQe,"A",{href:!0});var Loa=s(gae);$lt=r(Loa,"FlaxAlbertForTokenClassification"),Loa.forEach(t),klt=r(RQe," (ALBERT model)"),RQe.forEach(t),Slt=i(Co),fA=n(Co,"LI",{});var PQe=s(fA);xLe=n(PQe,"STRONG",{});var yoa=s(xLe);Rlt=r(yoa,"bert"),yoa.forEach(t),Plt=r(PQe," \u2014 "),hae=n(PQe,"A",{href:!0});var xoa=s(hae);Blt=r(xoa,"FlaxBertForTokenClassification"),xoa.forEach(t),Ilt=r(PQe," (BERT model)"),PQe.forEach(t),Nlt=i(Co),mA=n(Co,"LI",{});var BQe=s(mA);$Le=n(BQe,"STRONG",{});var $oa=s($Le);qlt=r($oa,"big_bird"),$oa.forEach(t),jlt=r(BQe," \u2014 "),pae=n(BQe,"A",{href:!0});var koa=s(pae);Dlt=r(koa,"FlaxBigBirdForTokenClassification"),koa.forEach(t),Glt=r(BQe," (BigBird model)"),BQe.forEach(t),Olt=i(Co),gA=n(Co,"LI",{});var IQe=s(gA);kLe=n(IQe,"STRONG",{});var Soa=s(kLe);Vlt=r(Soa,"distilbert"),Soa.forEach(t),Xlt=r(IQe," \u2014 "),_ae=n(IQe,"A",{href:!0});var Roa=s(_ae);zlt=r(Roa,"FlaxDistilBertForTokenClassification"),Roa.forEach(t),Wlt=r(IQe," (DistilBERT model)"),IQe.forEach(t),Qlt=i(Co),hA=n(Co,"LI",{});var NQe=s(hA);SLe=n(NQe,"STRONG",{});var Poa=s(SLe);Ult=r(Poa,"electra"),Poa.forEach(t),Hlt=r(NQe," \u2014 "),uae=n(NQe,"A",{href:!0});var Boa=s(uae);Jlt=r(Boa,"FlaxElectraForTokenClassification"),Boa.forEach(t),Ylt=r(NQe," (ELECTRA model)"),NQe.forEach(t),Klt=i(Co),pA=n(Co,"LI",{});var qQe=s(pA);RLe=n(qQe,"STRONG",{});var Ioa=s(RLe);Zlt=r(Ioa,"roberta"),Ioa.forEach(t),eit=r(qQe," \u2014 "),bae=n(qQe,"A",{href:!0});var Noa=s(bae);oit=r(Noa,"FlaxRobertaForTokenClassification"),Noa.forEach(t),rit=r(qQe," (RoBERTa model)"),qQe.forEach(t),tit=i(Co),_A=n(Co,"LI",{});var jQe=s(_A);PLe=n(jQe,"STRONG",{});var qoa=s(PLe);ait=r(qoa,"roformer"),qoa.forEach(t),nit=r(jQe," \u2014 "),vae=n(jQe,"A",{href:!0});var joa=s(vae);sit=r(joa,"FlaxRoFormerForTokenClassification"),joa.forEach(t),lit=r(jQe," (RoFormer model)"),jQe.forEach(t),iit=i(Co),uA=n(Co,"LI",{});var DQe=s(uA);BLe=n(DQe,"STRONG",{});var Doa=s(BLe);dit=r(Doa,"xlm-roberta"),Doa.forEach(t),cit=r(DQe," \u2014 "),Fae=n(DQe,"A",{href:!0});var Goa=s(Fae);fit=r(Goa,"FlaxXLMRobertaForTokenClassification"),Goa.forEach(t),mit=r(DQe," (XLM-RoBERTa model)"),DQe.forEach(t),Co.forEach(t),git=i(Ri),T(bA.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),eJe=i(f),Df=n(f,"H2",{class:!0});var gKe=s(Df);vA=n(gKe,"A",{id:!0,class:!0,href:!0});var Ooa=s(vA);ILe=n(Ooa,"SPAN",{});var Voa=s(ILe);T(_S.$$.fragment,Voa),Voa.forEach(t),Ooa.forEach(t),hit=i(gKe),NLe=n(gKe,"SPAN",{});var Xoa=s(NLe);pit=r(Xoa,"FlaxAutoModelForMultipleChoice"),Xoa.forEach(t),gKe.forEach(t),oJe=i(f),Lr=n(f,"DIV",{class:!0});var Pi=s(Lr);T(uS.$$.fragment,Pi),_it=i(Pi),Gf=n(Pi,"P",{});var Bse=s(Gf);uit=r(Bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tae=n(Bse,"A",{href:!0});var zoa=s(Tae);bit=r(zoa,"from_pretrained()"),zoa.forEach(t),vit=r(Bse," class method or the "),Mae=n(Bse,"A",{href:!0});var Woa=s(Mae);Fit=r(Woa,"from_config()"),Woa.forEach(t),Tit=r(Bse,` class
method.`),Bse.forEach(t),Mit=i(Pi),bS=n(Pi,"P",{});var hKe=s(bS);Eit=r(hKe,"This class cannot be instantiated directly using "),qLe=n(hKe,"CODE",{});var Qoa=s(qLe);Cit=r(Qoa,"__init__()"),Qoa.forEach(t),wit=r(hKe," (throws an error)."),hKe.forEach(t),Ait=i(Pi),la=n(Pi,"DIV",{class:!0});var ny=s(la);T(vS.$$.fragment,ny),Lit=i(ny),jLe=n(ny,"P",{});var Uoa=s(jLe);yit=r(Uoa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uoa.forEach(t),xit=i(ny),Of=n(ny,"P",{});var Ise=s(Of);$it=r(Ise,`Note:
Loading a model from its configuration file does `),DLe=n(Ise,"STRONG",{});var Hoa=s(DLe);kit=r(Hoa,"not"),Hoa.forEach(t),Sit=r(Ise,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=n(Ise,"A",{href:!0});var Joa=s(Eae);Rit=r(Joa,"from_pretrained()"),Joa.forEach(t),Pit=r(Ise," to load the model weights."),Ise.forEach(t),Bit=i(ny),T(FA.$$.fragment,ny),ny.forEach(t),Iit=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(FS.$$.fragment,Bi),Nit=i(Bi),GLe=n(Bi,"P",{});var Yoa=s(GLe);qit=r(Yoa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Yoa.forEach(t),jit=i(Bi),jn=n(Bi,"P",{});var sy=s(jn);Dit=r(sy,"The model class to instantiate is selected based on the "),OLe=n(sy,"CODE",{});var Koa=s(OLe);Git=r(Koa,"model_type"),Koa.forEach(t),Oit=r(sy,` property of the config object (either
passed as an argument or loaded from `),VLe=n(sy,"CODE",{});var Zoa=s(VLe);Vit=r(Zoa,"pretrained_model_name_or_path"),Zoa.forEach(t),Xit=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XLe=n(sy,"CODE",{});var era=s(XLe);zit=r(era,"pretrained_model_name_or_path"),era.forEach(t),Wit=r(sy,":"),sy.forEach(t),Qit=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);TA=n(wo,"LI",{});var GQe=s(TA);zLe=n(GQe,"STRONG",{});var ora=s(zLe);Uit=r(ora,"albert"),ora.forEach(t),Hit=r(GQe," \u2014 "),Cae=n(GQe,"A",{href:!0});var rra=s(Cae);Jit=r(rra,"FlaxAlbertForMultipleChoice"),rra.forEach(t),Yit=r(GQe," (ALBERT model)"),GQe.forEach(t),Kit=i(wo),MA=n(wo,"LI",{});var OQe=s(MA);WLe=n(OQe,"STRONG",{});var tra=s(WLe);Zit=r(tra,"bert"),tra.forEach(t),edt=r(OQe," \u2014 "),wae=n(OQe,"A",{href:!0});var ara=s(wae);odt=r(ara,"FlaxBertForMultipleChoice"),ara.forEach(t),rdt=r(OQe," (BERT model)"),OQe.forEach(t),tdt=i(wo),EA=n(wo,"LI",{});var VQe=s(EA);QLe=n(VQe,"STRONG",{});var nra=s(QLe);adt=r(nra,"big_bird"),nra.forEach(t),ndt=r(VQe," \u2014 "),Aae=n(VQe,"A",{href:!0});var sra=s(Aae);sdt=r(sra,"FlaxBigBirdForMultipleChoice"),sra.forEach(t),ldt=r(VQe," (BigBird model)"),VQe.forEach(t),idt=i(wo),CA=n(wo,"LI",{});var XQe=s(CA);ULe=n(XQe,"STRONG",{});var lra=s(ULe);ddt=r(lra,"distilbert"),lra.forEach(t),cdt=r(XQe," \u2014 "),Lae=n(XQe,"A",{href:!0});var ira=s(Lae);fdt=r(ira,"FlaxDistilBertForMultipleChoice"),ira.forEach(t),mdt=r(XQe," (DistilBERT model)"),XQe.forEach(t),gdt=i(wo),wA=n(wo,"LI",{});var zQe=s(wA);HLe=n(zQe,"STRONG",{});var dra=s(HLe);hdt=r(dra,"electra"),dra.forEach(t),pdt=r(zQe," \u2014 "),yae=n(zQe,"A",{href:!0});var cra=s(yae);_dt=r(cra,"FlaxElectraForMultipleChoice"),cra.forEach(t),udt=r(zQe," (ELECTRA model)"),zQe.forEach(t),bdt=i(wo),AA=n(wo,"LI",{});var WQe=s(AA);JLe=n(WQe,"STRONG",{});var fra=s(JLe);vdt=r(fra,"roberta"),fra.forEach(t),Fdt=r(WQe," \u2014 "),xae=n(WQe,"A",{href:!0});var mra=s(xae);Tdt=r(mra,"FlaxRobertaForMultipleChoice"),mra.forEach(t),Mdt=r(WQe," (RoBERTa model)"),WQe.forEach(t),Edt=i(wo),LA=n(wo,"LI",{});var QQe=s(LA);YLe=n(QQe,"STRONG",{});var gra=s(YLe);Cdt=r(gra,"roformer"),gra.forEach(t),wdt=r(QQe," \u2014 "),$ae=n(QQe,"A",{href:!0});var hra=s($ae);Adt=r(hra,"FlaxRoFormerForMultipleChoice"),hra.forEach(t),Ldt=r(QQe," (RoFormer model)"),QQe.forEach(t),ydt=i(wo),yA=n(wo,"LI",{});var UQe=s(yA);KLe=n(UQe,"STRONG",{});var pra=s(KLe);xdt=r(pra,"xlm-roberta"),pra.forEach(t),$dt=r(UQe," \u2014 "),kae=n(UQe,"A",{href:!0});var _ra=s(kae);kdt=r(_ra,"FlaxXLMRobertaForMultipleChoice"),_ra.forEach(t),Sdt=r(UQe," (XLM-RoBERTa model)"),UQe.forEach(t),wo.forEach(t),Rdt=i(Bi),T(xA.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),rJe=i(f),Vf=n(f,"H2",{class:!0});var pKe=s(Vf);$A=n(pKe,"A",{id:!0,class:!0,href:!0});var ura=s($A);ZLe=n(ura,"SPAN",{});var bra=s(ZLe);T(TS.$$.fragment,bra),bra.forEach(t),ura.forEach(t),Pdt=i(pKe),eye=n(pKe,"SPAN",{});var vra=s(eye);Bdt=r(vra,"FlaxAutoModelForNextSentencePrediction"),vra.forEach(t),pKe.forEach(t),tJe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(MS.$$.fragment,Ii),Idt=i(Ii),Xf=n(Ii,"P",{});var Nse=s(Xf);Ndt=r(Nse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sae=n(Nse,"A",{href:!0});var Fra=s(Sae);qdt=r(Fra,"from_pretrained()"),Fra.forEach(t),jdt=r(Nse," class method or the "),Rae=n(Nse,"A",{href:!0});var Tra=s(Rae);Ddt=r(Tra,"from_config()"),Tra.forEach(t),Gdt=r(Nse,` class
method.`),Nse.forEach(t),Odt=i(Ii),ES=n(Ii,"P",{});var _Ke=s(ES);Vdt=r(_Ke,"This class cannot be instantiated directly using "),oye=n(_Ke,"CODE",{});var Mra=s(oye);Xdt=r(Mra,"__init__()"),Mra.forEach(t),zdt=r(_Ke," (throws an error)."),_Ke.forEach(t),Wdt=i(Ii),ia=n(Ii,"DIV",{class:!0});var ly=s(ia);T(CS.$$.fragment,ly),Qdt=i(ly),rye=n(ly,"P",{});var Era=s(rye);Udt=r(Era,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Era.forEach(t),Hdt=i(ly),zf=n(ly,"P",{});var qse=s(zf);Jdt=r(qse,`Note:
Loading a model from its configuration file does `),tye=n(qse,"STRONG",{});var Cra=s(tye);Ydt=r(Cra,"not"),Cra.forEach(t),Kdt=r(qse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pae=n(qse,"A",{href:!0});var wra=s(Pae);Zdt=r(wra,"from_pretrained()"),wra.forEach(t),ect=r(qse," to load the model weights."),qse.forEach(t),oct=i(ly),T(kA.$$.fragment,ly),ly.forEach(t),rct=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(wS.$$.fragment,Ni),tct=i(Ni),aye=n(Ni,"P",{});var Ara=s(aye);act=r(Ara,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ara.forEach(t),nct=i(Ni),Dn=n(Ni,"P",{});var iy=s(Dn);sct=r(iy,"The model class to instantiate is selected based on the "),nye=n(iy,"CODE",{});var Lra=s(nye);lct=r(Lra,"model_type"),Lra.forEach(t),ict=r(iy,` property of the config object (either
passed as an argument or loaded from `),sye=n(iy,"CODE",{});var yra=s(sye);dct=r(yra,"pretrained_model_name_or_path"),yra.forEach(t),cct=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lye=n(iy,"CODE",{});var xra=s(lye);fct=r(xra,"pretrained_model_name_or_path"),xra.forEach(t),mct=r(iy,":"),iy.forEach(t),gct=i(Ni),iye=n(Ni,"UL",{});var $ra=s(iye);SA=n($ra,"LI",{});var HQe=s(SA);dye=n(HQe,"STRONG",{});var kra=s(dye);hct=r(kra,"bert"),kra.forEach(t),pct=r(HQe," \u2014 "),Bae=n(HQe,"A",{href:!0});var Sra=s(Bae);_ct=r(Sra,"FlaxBertForNextSentencePrediction"),Sra.forEach(t),uct=r(HQe," (BERT model)"),HQe.forEach(t),$ra.forEach(t),bct=i(Ni),T(RA.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),aJe=i(f),Wf=n(f,"H2",{class:!0});var uKe=s(Wf);PA=n(uKe,"A",{id:!0,class:!0,href:!0});var Rra=s(PA);cye=n(Rra,"SPAN",{});var Pra=s(cye);T(AS.$$.fragment,Pra),Pra.forEach(t),Rra.forEach(t),vct=i(uKe),fye=n(uKe,"SPAN",{});var Bra=s(fye);Fct=r(Bra,"FlaxAutoModelForImageClassification"),Bra.forEach(t),uKe.forEach(t),nJe=i(f),xr=n(f,"DIV",{class:!0});var qi=s(xr);T(LS.$$.fragment,qi),Tct=i(qi),Qf=n(qi,"P",{});var jse=s(Qf);Mct=r(jse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iae=n(jse,"A",{href:!0});var Ira=s(Iae);Ect=r(Ira,"from_pretrained()"),Ira.forEach(t),Cct=r(jse," class method or the "),Nae=n(jse,"A",{href:!0});var Nra=s(Nae);wct=r(Nra,"from_config()"),Nra.forEach(t),Act=r(jse,` class
method.`),jse.forEach(t),Lct=i(qi),yS=n(qi,"P",{});var bKe=s(yS);yct=r(bKe,"This class cannot be instantiated directly using "),mye=n(bKe,"CODE",{});var qra=s(mye);xct=r(qra,"__init__()"),qra.forEach(t),$ct=r(bKe," (throws an error)."),bKe.forEach(t),kct=i(qi),da=n(qi,"DIV",{class:!0});var dy=s(da);T(xS.$$.fragment,dy),Sct=i(dy),gye=n(dy,"P",{});var jra=s(gye);Rct=r(jra,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jra.forEach(t),Pct=i(dy),Uf=n(dy,"P",{});var Dse=s(Uf);Bct=r(Dse,`Note:
Loading a model from its configuration file does `),hye=n(Dse,"STRONG",{});var Dra=s(hye);Ict=r(Dra,"not"),Dra.forEach(t),Nct=r(Dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qae=n(Dse,"A",{href:!0});var Gra=s(qae);qct=r(Gra,"from_pretrained()"),Gra.forEach(t),jct=r(Dse," to load the model weights."),Dse.forEach(t),Dct=i(dy),T(BA.$$.fragment,dy),dy.forEach(t),Gct=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T($S.$$.fragment,ji),Oct=i(ji),pye=n(ji,"P",{});var Ora=s(pye);Vct=r(Ora,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ora.forEach(t),Xct=i(ji),Gn=n(ji,"P",{});var cy=s(Gn);zct=r(cy,"The model class to instantiate is selected based on the "),_ye=n(cy,"CODE",{});var Vra=s(_ye);Wct=r(Vra,"model_type"),Vra.forEach(t),Qct=r(cy,` property of the config object (either
passed as an argument or loaded from `),uye=n(cy,"CODE",{});var Xra=s(uye);Uct=r(Xra,"pretrained_model_name_or_path"),Xra.forEach(t),Hct=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bye=n(cy,"CODE",{});var zra=s(bye);Jct=r(zra,"pretrained_model_name_or_path"),zra.forEach(t),Yct=r(cy,":"),cy.forEach(t),Kct=i(ji),kS=n(ji,"UL",{});var vKe=s(kS);IA=n(vKe,"LI",{});var JQe=s(IA);vye=n(JQe,"STRONG",{});var Wra=s(vye);Zct=r(Wra,"beit"),Wra.forEach(t),eft=r(JQe," \u2014 "),jae=n(JQe,"A",{href:!0});var Qra=s(jae);oft=r(Qra,"FlaxBeitForImageClassification"),Qra.forEach(t),rft=r(JQe," (BEiT model)"),JQe.forEach(t),tft=i(vKe),NA=n(vKe,"LI",{});var YQe=s(NA);Fye=n(YQe,"STRONG",{});var Ura=s(Fye);aft=r(Ura,"vit"),Ura.forEach(t),nft=r(YQe," \u2014 "),Dae=n(YQe,"A",{href:!0});var Hra=s(Dae);sft=r(Hra,"FlaxViTForImageClassification"),Hra.forEach(t),lft=r(YQe," (ViT model)"),YQe.forEach(t),vKe.forEach(t),ift=i(ji),T(qA.$$.fragment,ji),ji.forEach(t),qi.forEach(t),sJe=i(f),Hf=n(f,"H2",{class:!0});var FKe=s(Hf);jA=n(FKe,"A",{id:!0,class:!0,href:!0});var Jra=s(jA);Tye=n(Jra,"SPAN",{});var Yra=s(Tye);T(SS.$$.fragment,Yra),Yra.forEach(t),Jra.forEach(t),dft=i(FKe),Mye=n(FKe,"SPAN",{});var Kra=s(Mye);cft=r(Kra,"FlaxAutoModelForVision2Seq"),Kra.forEach(t),FKe.forEach(t),lJe=i(f),$r=n(f,"DIV",{class:!0});var Di=s($r);T(RS.$$.fragment,Di),fft=i(Di),Jf=n(Di,"P",{});var Gse=s(Jf);mft=r(Gse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gae=n(Gse,"A",{href:!0});var Zra=s(Gae);gft=r(Zra,"from_pretrained()"),Zra.forEach(t),hft=r(Gse," class method or the "),Oae=n(Gse,"A",{href:!0});var eta=s(Oae);pft=r(eta,"from_config()"),eta.forEach(t),_ft=r(Gse,` class
method.`),Gse.forEach(t),uft=i(Di),PS=n(Di,"P",{});var TKe=s(PS);bft=r(TKe,"This class cannot be instantiated directly using "),Eye=n(TKe,"CODE",{});var ota=s(Eye);vft=r(ota,"__init__()"),ota.forEach(t),Fft=r(TKe," (throws an error)."),TKe.forEach(t),Tft=i(Di),ca=n(Di,"DIV",{class:!0});var fy=s(ca);T(BS.$$.fragment,fy),Mft=i(fy),Cye=n(fy,"P",{});var rta=s(Cye);Eft=r(rta,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rta.forEach(t),Cft=i(fy),Yf=n(fy,"P",{});var Ose=s(Yf);wft=r(Ose,`Note:
Loading a model from its configuration file does `),wye=n(Ose,"STRONG",{});var tta=s(wye);Aft=r(tta,"not"),tta.forEach(t),Lft=r(Ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vae=n(Ose,"A",{href:!0});var ata=s(Vae);yft=r(ata,"from_pretrained()"),ata.forEach(t),xft=r(Ose," to load the model weights."),Ose.forEach(t),$ft=i(fy),T(DA.$$.fragment,fy),fy.forEach(t),kft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(IS.$$.fragment,Gi),Sft=i(Gi),Aye=n(Gi,"P",{});var nta=s(Aye);Rft=r(nta,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nta.forEach(t),Pft=i(Gi),On=n(Gi,"P",{});var my=s(On);Bft=r(my,"The model class to instantiate is selected based on the "),Lye=n(my,"CODE",{});var sta=s(Lye);Ift=r(sta,"model_type"),sta.forEach(t),Nft=r(my,` property of the config object (either
passed as an argument or loaded from `),yye=n(my,"CODE",{});var lta=s(yye);qft=r(lta,"pretrained_model_name_or_path"),lta.forEach(t),jft=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=n(my,"CODE",{});var ita=s(xye);Dft=r(ita,"pretrained_model_name_or_path"),ita.forEach(t),Gft=r(my,":"),my.forEach(t),Oft=i(Gi),$ye=n(Gi,"UL",{});var dta=s($ye);GA=n(dta,"LI",{});var KQe=s(GA);kye=n(KQe,"STRONG",{});var cta=s(kye);Vft=r(cta,"vision-encoder-decoder"),cta.forEach(t),Xft=r(KQe," \u2014 "),Xae=n(KQe,"A",{href:!0});var fta=s(Xae);zft=r(fta,"FlaxVisionEncoderDecoderModel"),fta.forEach(t),Wft=r(KQe," (Vision Encoder decoder model)"),KQe.forEach(t),dta.forEach(t),Qft=i(Gi),T(OA.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Tna)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertModel"),c(nm,"id","extending-the-auto-classes"),c(nm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nm,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(lm,"id","transformers.AutoConfig"),c(lm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lm,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(mP,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(gP,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertConfig"),c(hP,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartConfig"),c(pP,"href","/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitConfig"),c(_P,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertConfig"),c(uP,"href","/docs/transformers/pr_18555/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(bP,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdConfig"),c(vP,"href","/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(FP,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(TP,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(MP,"href","/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomConfig"),c(EP,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertConfig"),c(CP,"href","/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineConfig"),c(wP,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPConfig"),c(AP,"href","/docs/transformers/pr_18555/en/model_doc/codegen#transformers.CodeGenConfig"),c(LP,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertConfig"),c(yP,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextConfig"),c(xP,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLConfig"),c($P,"href","/docs/transformers/pr_18555/en/model_doc/cvt#transformers.CvtConfig"),c(kP,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(SP,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(RP,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(PP,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaConfig"),c(BP,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(IP,"href","/docs/transformers/pr_18555/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(NP,"href","/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTConfig"),c(qP,"href","/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrConfig"),c(jP,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertConfig"),c(DP,"href","/docs/transformers/pr_18555/en/model_doc/donut#transformers.DonutSwinConfig"),c(GP,"href","/docs/transformers/pr_18555/en/model_doc/dpr#transformers.DPRConfig"),c(OP,"href","/docs/transformers/pr_18555/en/model_doc/dpt#transformers.DPTConfig"),c(VP,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraConfig"),c(XP,"href","/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(zP,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertConfig"),c(WP,"href","/docs/transformers/pr_18555/en/model_doc/flava#transformers.FlavaConfig"),c(QP,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetConfig"),c(UP,"href","/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTConfig"),c(HP,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelConfig"),c(JP,"href","/docs/transformers/pr_18555/en/model_doc/glpn#transformers.GLPNConfig"),c(YP,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Config"),c(KP,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ZP,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(eB,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJConfig"),c(oB,"href","/docs/transformers/pr_18555/en/model_doc/groupvit#transformers.GroupViTConfig"),c(rB,"href","/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertConfig"),c(tB,"href","/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertConfig"),c(aB,"href","/docs/transformers/pr_18555/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(nB,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(sB,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(lB,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(iB,"href","/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDConfig"),c(dB,"href","/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitConfig"),c(cB,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerConfig"),c(fB,"href","/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5Config"),c(mB,"href","/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeConfig"),c(gB,"href","/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertConfig"),c(hB,"href","/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100Config"),c(pB,"href","/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianConfig"),c(_B,"href","/docs/transformers/pr_18555/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uB,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartConfig"),c(bB,"href","/docs/transformers/pr_18555/en/model_doc/mctct#transformers.MCTCTConfig"),c(vB,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(FB,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(TB,"href","/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(MB,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetConfig"),c(EB,"href","/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Config"),c(CB,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpConfig"),c(wB,"href","/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaConfig"),c(AB,"href","/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(LB,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(yB,"href","/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTConfig"),c(xB,"href","/docs/transformers/pr_18555/en/model_doc/owlvit#transformers.OwlViTConfig"),c($B,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusConfig"),c(kB,"href","/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverConfig"),c(SB,"href","/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartConfig"),c(RB,"href","/docs/transformers/pr_18555/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(PB,"href","/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(BB,"href","/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(IB,"href","/docs/transformers/pr_18555/en/model_doc/rag#transformers.RagConfig"),c(NB,"href","/docs/transformers/pr_18555/en/model_doc/realm#transformers.RealmConfig"),c(qB,"href","/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerConfig"),c(jB,"href","/docs/transformers/pr_18555/en/model_doc/regnet#transformers.RegNetConfig"),c(DB,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertConfig"),c(GB,"href","/docs/transformers/pr_18555/en/model_doc/resnet#transformers.ResNetConfig"),c(OB,"href","/docs/transformers/pr_18555/en/model_doc/retribert#transformers.RetriBertConfig"),c(VB,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaConfig"),c(XB,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerConfig"),c(zB,"href","/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerConfig"),c(WB,"href","/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWConfig"),c(QB,"href","/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDConfig"),c(UB,"href","/docs/transformers/pr_18555/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(HB,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(JB,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(YB,"href","/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterConfig"),c(KB,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(ZB,"href","/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinConfig"),c(eI,"href","/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2Config"),c(oI,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Config"),c(rI,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasConfig"),c(tI,"href","/docs/transformers/pr_18555/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(aI,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(nI,"href","/docs/transformers/pr_18555/en/model_doc/trocr#transformers.TrOCRConfig"),c(sI,"href","/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(lI,"href","/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(iI,"href","/docs/transformers/pr_18555/en/model_doc/van#transformers.VanConfig"),c(dI,"href","/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEConfig"),c(cI,"href","/docs/transformers/pr_18555/en/model_doc/vilt#transformers.ViltConfig"),c(fI,"href","/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(mI,"href","/docs/transformers/pr_18555/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(gI,"href","/docs/transformers/pr_18555/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(hI,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTConfig"),c(pI,"href","/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_I,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(uI,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(bI,"href","/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMConfig"),c(vI,"href","/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMConfig"),c(FI,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMConfig"),c(TI,"href","/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(MI,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(EI,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(CI,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetConfig"),c(wI,"href","/docs/transformers/pr_18555/en/model_doc/yolos#transformers.YolosConfig"),c(AI,"href","/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoTokenizer"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(LI,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(yI,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertTokenizer"),c(xI,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($I,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartTokenizer"),c(kI,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartTokenizerFast"),c(SI,"href","/docs/transformers/pr_18555/en/model_doc/barthez#transformers.BarthezTokenizer"),c(RI,"href","/docs/transformers/pr_18555/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(PI,"href","/docs/transformers/pr_18555/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(BI,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizerFast"),c(NI,"href","/docs/transformers/pr_18555/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(qI,"href","/docs/transformers/pr_18555/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(jI,"href","/docs/transformers/pr_18555/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(DI,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(GI,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(OI,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(VI,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(XI,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(zI,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(WI,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(QI,"href","/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(UI,"href","/docs/transformers/pr_18555/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(HI,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertTokenizer"),c(JI,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(YI,"href","/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineTokenizer"),c(KI,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPTokenizer"),c(ZI,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(eN,"href","/docs/transformers/pr_18555/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(oN,"href","/docs/transformers/pr_18555/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(rN,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(tN,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(aN,"href","/docs/transformers/pr_18555/en/model_doc/cpm#transformers.CpmTokenizer"),c(nN,"href","/docs/transformers/pr_18555/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(sN,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(lN,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iN,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dN,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaTokenizer"),c(cN,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fN,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mN,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(gN,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(hN,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pN,"href","/docs/transformers/pr_18555/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_N,"href","/docs/transformers/pr_18555/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uN,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraTokenizer"),c(bN,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(vN,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(FN,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetTokenizer"),c(TN,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(MN,"href","/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(EN,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelTokenizer"),c(CN,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(wN,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AN,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LN,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yN,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xN,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c($N,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kN,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SN,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPTokenizer"),c(RN,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(PN,"href","/docs/transformers/pr_18555/en/model_doc/herbert#transformers.HerbertTokenizer"),c(BN,"href","/docs/transformers/pr_18555/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(IN,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NN,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qN,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jN,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(DN,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(GN,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(ON,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(VN,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(XN,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(zN,"href","/docs/transformers/pr_18555/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(WN,"href","/docs/transformers/pr_18555/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(QN,"href","/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDTokenizer"),c(UN,"href","/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDTokenizerFast"),c(HN,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerTokenizer"),c(JN,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(YN,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Tokenizer"),c(KN,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5TokenizerFast"),c(ZN,"href","/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeTokenizer"),c(eq,"href","/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(oq,"href","/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(rq,"href","/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(tq,"href","/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianTokenizer"),c(aq,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartTokenizer"),c(nq,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(sq,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(lq,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(iq,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizer"),c(dq,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizerFast"),c(cq,"href","/docs/transformers/pr_18555/en/model_doc/mluke#transformers.MLukeTokenizer"),c(fq,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(mq,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(gq,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(hq,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(pq,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Tokenizer"),c(_q,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5TokenizerFast"),c(uq,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpTokenizer"),c(bq,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(vq,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizer"),c(Fq,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizerFast"),c(Tq,"href","/docs/transformers/pr_18555/en/model_doc/nllb#transformers.NllbTokenizer"),c(Mq,"href","/docs/transformers/pr_18555/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Eq,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertTokenizer"),c(Cq,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(wq,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Aq,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Lq,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yq,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPTokenizer"),c(xq,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($q,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(kq,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Sq,"href","/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Rq,"href","/docs/transformers/pr_18555/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Pq,"href","/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Bq,"href","/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Iq,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizer"),c(Nq,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizerFast"),c(qq,"href","/docs/transformers/pr_18555/en/model_doc/rag#transformers.RagTokenizer"),c(jq,"href","/docs/transformers/pr_18555/en/model_doc/realm#transformers.RealmTokenizer"),c(Dq,"href","/docs/transformers/pr_18555/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Gq,"href","/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Oq,"href","/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Vq,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Xq,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(zq,"href","/docs/transformers/pr_18555/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Wq,"href","/docs/transformers/pr_18555/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Qq,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Uq,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Hq,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Jq,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Yq,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Kq,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Zq,"href","/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterTokenizer"),c(ej,"href","/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(oj,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(rj,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(tj,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Tokenizer"),c(aj,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5TokenizerFast"),c(nj,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasTokenizer"),c(sj,"href","/docs/transformers/pr_18555/en/model_doc/tapex#transformers.TapexTokenizer"),c(lj,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(ij,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizer"),c(dj,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizerFast"),c(cj,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizer"),c(fj,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertTokenizerFast"),c(mj,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gj,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hj,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(pj,"href","/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMTokenizer"),c(_j,"href","/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(uj,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMTokenizer"),c(bj,"href","/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(vj,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Fj,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Tj,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Mj,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Ej,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Cj,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(wj,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertTokenizer"),c(Aj,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoFeatureExtractor"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(Lj,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(yj,"href","/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(xj,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c($j,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kj,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Sj,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Rj,"href","/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Pj,"href","/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Bj,"href","/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Ij,"href","/docs/transformers/pr_18555/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_18555/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(qj,"href","/docs/transformers/pr_18555/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(jj,"href","/docs/transformers/pr_18555/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Dj,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Gj,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Oj,"href","/docs/transformers/pr_18555/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Vj,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Xj,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(zj,"href","/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Wj,"href","/docs/transformers/pr_18555/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Qj,"href","/docs/transformers/pr_18555/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Uj,"href","/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_18555/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18555/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eD,"href","/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(oD,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18555/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(lD,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iD,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dD,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cD,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fD,"href","/docs/transformers/pr_18555/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Up,"id","transformers.AutoProcessor"),c(Up,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Up,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(mD,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(gD,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPProcessor"),c(hD,"href","/docs/transformers/pr_18555/en/model_doc/donut#transformers.DonutProcessor"),c(pD,"href","/docs/transformers/pr_18555/en/model_doc/flava#transformers.FlavaProcessor"),c(_D,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPProcessor"),c(uD,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(bD,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(vD,"href","/docs/transformers/pr_18555/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(FD,"href","/docs/transformers/pr_18555/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(TD,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MD,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ED,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(CD,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(wD,"href","/docs/transformers/pr_18555/en/model_doc/trocr#transformers.TrOCRProcessor"),c(AD,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LD,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yD,"href","/docs/transformers/pr_18555/en/model_doc/vilt#transformers.ViltProcessor"),c(xD,"href","/docs/transformers/pr_18555/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c($D,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kD,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SD,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b_,"id","transformers.AutoModel"),c(b_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b_,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(RD,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PD,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BD,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ID,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertModel"),c(ND,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartModel"),c(qD,"href","/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitModel"),c(jD,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertModel"),c(DD,"href","/docs/transformers/pr_18555/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(GD,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdModel"),c(OD,"href","/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(VD,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(XD,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(zD,"href","/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomModel"),c(WD,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertModel"),c(QD,"href","/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineModel"),c(UD,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.CLIPModel"),c(HD,"href","/docs/transformers/pr_18555/en/model_doc/codegen#transformers.CodeGenModel"),c(JD,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertModel"),c(YD,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextModel"),c(KD,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLModel"),c(ZD,"href","/docs/transformers/pr_18555/en/model_doc/cvt#transformers.CvtModel"),c(eG,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(oG,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(rG,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(tG,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaModel"),c(aG,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(nG,"href","/docs/transformers/pr_18555/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(sG,"href","/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTModel"),c(lG,"href","/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrModel"),c(iG,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertModel"),c(dG,"href","/docs/transformers/pr_18555/en/model_doc/donut#transformers.DonutSwinModel"),c(cG,"href","/docs/transformers/pr_18555/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(fG,"href","/docs/transformers/pr_18555/en/model_doc/dpt#transformers.DPTModel"),c(mG,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraModel"),c(gG,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertModel"),c(hG,"href","/docs/transformers/pr_18555/en/model_doc/flava#transformers.FlavaModel"),c(pG,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetModel"),c(_G,"href","/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTModel"),c(uG,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelModel"),c(bG,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelBaseModel"),c(vG,"href","/docs/transformers/pr_18555/en/model_doc/glpn#transformers.GLPNModel"),c(FG,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2Model"),c(TG,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(MG,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(EG,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJModel"),c(CG,"href","/docs/transformers/pr_18555/en/model_doc/groupvit#transformers.GroupViTModel"),c(wG,"href","/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertModel"),c(AG,"href","/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertModel"),c(LG,"href","/docs/transformers/pr_18555/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(yG,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(xG,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c($G,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(kG,"href","/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDModel"),c(SG,"href","/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitModel"),c(RG,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerModel"),c(PG,"href","/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5Model"),c(BG,"href","/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeModel"),c(IG,"href","/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertModel"),c(NG,"href","/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100Model"),c(qG,"href","/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianModel"),c(jG,"href","/docs/transformers/pr_18555/en/model_doc/maskformer#transformers.MaskFormerModel"),c(DG,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartModel"),c(GG,"href","/docs/transformers/pr_18555/en/model_doc/mctct#transformers.MCTCTModel"),c(OG,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(VG,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertModel"),c(XG,"href","/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTModel"),c(zG,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetModel"),c(WG,"href","/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5Model"),c(QG,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpModel"),c(UG,"href","/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaModel"),c(HG,"href","/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100Model"),c(JG,"href","/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerModel"),c(YG,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(KG,"href","/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTModel"),c(ZG,"href","/docs/transformers/pr_18555/en/model_doc/owlvit#transformers.OwlViTModel"),c(eO,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusModel"),c(oO,"href","/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverModel"),c(rO,"href","/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartModel"),c(tO,"href","/docs/transformers/pr_18555/en/model_doc/poolformer#transformers.PoolFormerModel"),c(aO,"href","/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(nO,"href","/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertModel"),c(sO,"href","/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerModel"),c(lO,"href","/docs/transformers/pr_18555/en/model_doc/regnet#transformers.RegNetModel"),c(iO,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertModel"),c(dO,"href","/docs/transformers/pr_18555/en/model_doc/resnet#transformers.ResNetModel"),c(cO,"href","/docs/transformers/pr_18555/en/model_doc/retribert#transformers.RetriBertModel"),c(fO,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaModel"),c(mO,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerModel"),c(gO,"href","/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerModel"),c(hO,"href","/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWModel"),c(pO,"href","/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDModel"),c(_O,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(uO,"href","/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterModel"),c(bO,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(vO,"href","/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinModel"),c(FO,"href","/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2Model"),c(TO,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5Model"),c(MO,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasModel"),c(EO,"href","/docs/transformers/pr_18555/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(CO,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(wO,"href","/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechModel"),c(AO,"href","/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(LO,"href","/docs/transformers/pr_18555/en/model_doc/van#transformers.VanModel"),c(yO,"href","/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEModel"),c(xO,"href","/docs/transformers/pr_18555/en/model_doc/vilt#transformers.ViltModel"),c($O,"href","/docs/transformers/pr_18555/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(kO,"href","/docs/transformers/pr_18555/en/model_doc/visual_bert#transformers.VisualBertModel"),c(SO,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTModel"),c(RO,"href","/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(PO,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(BO,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(IO,"href","/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMModel"),c(NO,"href","/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMModel"),c(qO,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMModel"),c(jO,"href","/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(DO,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(GO,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(OO,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetModel"),c(VO,"href","/docs/transformers/pr_18555/en/model_doc/yolos#transformers.YolosModel"),c(XO,"href","/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.AutoModelForPreTraining"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(zO,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WO,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QO,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForPreTraining"),c(HO,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForPreTraining"),c(YO,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(KO,"href","/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomForCausalLM"),c(ZO,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eV,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oV,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rV,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tV,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aV,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForPreTraining"),c(sV,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lV,"href","/docs/transformers/pr_18555/en/model_doc/flava#transformers.FlavaForPreTraining"),c(iV,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForPreTraining"),c(dV,"href","/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(fV,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mV,"href","/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(gV,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(hV,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pV,"href","/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForMaskedLM"),c(_V,"href","/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(uV,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(bV,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(vV,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FV,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(TV,"href","/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(MV,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(EV,"href","/docs/transformers/pr_18555/en/model_doc/retribert#transformers.RetriBertModel"),c(CV,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(wV,"href","/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(AV,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LV,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xV,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c($V,"href","/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(kV,"href","/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(SV,"href","/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(RV,"href","/docs/transformers/pr_18555/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(PV,"href","/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(BV,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(IV,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(NV,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qV,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jV,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DV,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A1,"id","transformers.AutoModelForCausalLM"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(GV,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForCausalLM"),c(zV,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertLMHeadModel"),c(WV,"href","/docs/transformers/pr_18555/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(QV,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(UV,"href","/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(HV,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(JV,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(YV,"href","/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomForCausalLM"),c(KV,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(ZV,"href","/docs/transformers/pr_18555/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(eX,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oX,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(rX,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForCausalLM"),c(tX,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(aX,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(nX,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(sX,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(lX,"href","/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianForCausalLM"),c(iX,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForCausalLM"),c(dX,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(cX,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForCausalLM"),c(fX,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(mX,"href","/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTForCausalLM"),c(gX,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(hX,"href","/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(pX,"href","/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(_X,"href","/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(uX,"href","/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(bX,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(vX,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(FX,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(TX,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(MX,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(EX,"href","/docs/transformers/pr_18555/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(CX,"href","/docs/transformers/pr_18555/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(wX,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AX,"href","/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(LX,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(yX,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(xX,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForMaskedLM"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForMaskedLM"),c(fd,"class","relative group"),c($X,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(PX,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BX,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForMaskedLM"),c(IX,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(NX,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(qX,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(jX,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(DX,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(GX,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(OX,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(VX,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(XX,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zX,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(WX,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(QX,"href","/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(UX,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(HX,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(JX,"href","/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForMaskedLM"),c(YX,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(KX,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ZX,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ez,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oz,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(rz,"href","/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(tz,"href","/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(az,"href","/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(nz,"href","/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(sz,"href","/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(lz,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(iz,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(dz,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(cz,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(fz,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mz,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gz,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(hz,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(pz,"href","/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ab,"id","transformers.AutoModelForSeq2SeqLM"),c(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ab,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(_z,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Tz,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Cz,"href","/docs/transformers/pr_18555/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(wz,"href","/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_18555/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Lz,"href","/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_18555/en/model_doc/marian#transformers.MarianMTModel"),c(xz,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c($z,"href","/docs/transformers/pr_18555/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Sz,"href","/docs/transformers/pr_18555/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Rz,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Bz,"href","/docs/transformers/pr_18555/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Iz,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Nz,"href","/docs/transformers/pr_18555/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lb,"id","transformers.AutoModelForSequenceClassification"),c(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lb,"href","#transformers.AutoModelForSequenceClassification"),c(ud,"class","relative group"),c(qz,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(zz,"href","/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(sW,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(lW,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(iW,"href","/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(dW,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(cW,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(fW,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(mW,"href","/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDForSequenceClassification"),c(gW,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(hW,"href","/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(pW,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(_W,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(uW,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(vW,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(FW,"href","/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(TW,"href","/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(MW,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(EW,"href","/docs/transformers/pr_18555/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(CW,"href","/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(wW,"href","/docs/transformers/pr_18555/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(AW,"href","/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(yW,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c($W,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(kW,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(RW,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(PW,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(BW,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(IW,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(NW,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(qW,"href","/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForMultipleChoice"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(jW,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForMultipleChoice"),c(XW,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(zW,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(WW,"href","/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(QW,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(HW,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(JW,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(KW,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(iQ,"href","/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(dQ,"href","/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(cQ,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(fQ,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(mQ,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(_Q,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(uQ,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(bQ,"href","/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForNextSentencePrediction"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(vQ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(EQ,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(CQ,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(wQ,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(AQ,"href","/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(LQ,"href","/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForTokenClassification"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(yQ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(SQ,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForTokenClassification"),c(RQ,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(PQ,"href","/docs/transformers/pr_18555/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(BQ,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(IQ,"href","/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineForTokenClassification"),c(NQ,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(qQ,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(jQ,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(DQ,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(GQ,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(OQ,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(VQ,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(XQ,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(zQ,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(WQ,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(QQ,"href","/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(UQ,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(HQ,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(JQ,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(YQ,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(KQ,"href","/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(oU,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(rU,"href","/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(tU,"href","/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(aU,"href","/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(nU,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(lU,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(iU,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(dU,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(cU,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(fU,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(mU,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(gU,"href","/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.AutoModelForQuestionAnswering"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(hU,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_18555/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_18555/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c($U,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(kU,"href","/docs/transformers/pr_18555/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_18555/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_18555/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_18555/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_18555/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18555/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18555/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18555/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18555/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18555/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18555/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_18555/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18555/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(rH,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(nH,"href","/docs/transformers/pr_18555/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e8,"id","transformers.AutoModelForTableQuestionAnswering"),c(e8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e8,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(sH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.AutoModelForImageClassification"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(cH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitForImageClassification"),c(hH,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(pH,"href","/docs/transformers/pr_18555/en/model_doc/cvt#transformers.CvtForImageClassification"),c(_H,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(uH,"href","/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTForImageClassification"),c(bH,"href","/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(vH,"href","/docs/transformers/pr_18555/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(FH,"href","/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitForImageClassification"),c(TH,"href","/docs/transformers/pr_18555/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(MH,"href","/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(EH,"href","/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(CH,"href","/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(wH,"href","/docs/transformers/pr_18555/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(AH,"href","/docs/transformers/pr_18555/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LH,"href","/docs/transformers/pr_18555/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(yH,"href","/docs/transformers/pr_18555/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(xH,"href","/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerForImageClassification"),c($H,"href","/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinForImageClassification"),c(kH,"href","/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(SH,"href","/docs/transformers/pr_18555/en/model_doc/van#transformers.VanForImageClassification"),c(RH,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTForImageClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E8,"id","transformers.AutoModelForVideoClassification"),c(E8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E8,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(PH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_18555/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y8,"id","transformers.AutoModelForVision2Seq"),c(y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y8,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(qH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R8,"id","transformers.AutoModelForVisualQuestionAnswering"),c(R8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R8,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(OH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_18555/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q8,"id","transformers.AutoModelForAudioClassification"),c(q8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q8,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(WH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JH,"href","/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YH,"href","/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KH,"href","/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y8,"id","transformers.AutoModelForAudioFrameClassification"),c(Y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(aJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iJ,"href","/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dJ,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cJ,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(fJ,"href","/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.AutoModelForCTC"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(mJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(_J,"href","/docs/transformers/pr_18555/en/model_doc/hubert#transformers.HubertForCTC"),c(uJ,"href","/docs/transformers/pr_18555/en/model_doc/mctct#transformers.MCTCTForCTC"),c(bJ,"href","/docs/transformers/pr_18555/en/model_doc/sew#transformers.SEWForCTC"),c(vJ,"href","/docs/transformers/pr_18555/en/model_doc/sew-d#transformers.SEWDForCTC"),c(FJ,"href","/docs/transformers/pr_18555/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(TJ,"href","/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(MJ,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(EJ,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(CJ,"href","/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMForCTC"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yJ,"href","/docs/transformers/pr_18555/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(xJ,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.AutoModelForAudioXVector"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c($J,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(PJ,"href","/docs/transformers/pr_18555/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(BJ,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(IJ,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(NJ,"href","/docs/transformers/pr_18555/en/model_doc/wavlm#transformers.WavLMForXVector"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.AutoModelForMaskedImageModeling"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(qJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GJ,"href","/docs/transformers/pr_18555/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(OJ,"href","/docs/transformers/pr_18555/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(VJ,"href","/docs/transformers/pr_18555/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(XJ,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.AutoModelForObjectDetection"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.AutoModelForObjectDetection"),c(fc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UJ,"href","/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrForObjectDetection"),c(HJ,"href","/docs/transformers/pr_18555/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.AutoModelForImageSegmentation"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_18555/en/model_doc/detr#transformers.DetrForSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.AutoModelForSemanticSegmentation"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.AutoModelForSemanticSegmentation"),c(uc,"class","relative group"),c(eY,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_18555/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(aY,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(nY,"href","/docs/transformers/pr_18555/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(sY,"href","/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(lY,"href","/docs/transformers/pr_18555/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.AutoModelForInstanceSegmentation"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(iY,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_18555/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModel"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(mY,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertModel"),c(_Y,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.TFBartModel"),c(uY,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertModel"),c(bY,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(vY,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(FY,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertModel"),c(TY,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.TFCLIPModel"),c(MY,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertModel"),c(EY,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.TFConvNextModel"),c(CY,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.TFCTRLModel"),c(wY,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(AY,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaModel"),c(LY,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(yY,"href","/docs/transformers/pr_18555/en/model_doc/deit#transformers.TFDeiTModel"),c(xY,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertModel"),c($Y,"href","/docs/transformers/pr_18555/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(kY,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraModel"),c(SY,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(RY,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelModel"),c(PY,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(BY,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.TFGPT2Model"),c(IY,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.TFGPTJModel"),c(NY,"href","/docs/transformers/pr_18555/en/model_doc/hubert#transformers.TFHubertModel"),c(qY,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(jY,"href","/docs/transformers/pr_18555/en/model_doc/led#transformers.TFLEDModel"),c(DY,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerModel"),c(GY,"href","/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.TFLxmertModel"),c(OY,"href","/docs/transformers/pr_18555/en/model_doc/marian#transformers.TFMarianModel"),c(VY,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.TFMBartModel"),c(XY,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(zY,"href","/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(WY,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetModel"),c(QY,"href","/docs/transformers/pr_18555/en/model_doc/mt5#transformers.TFMT5Model"),c(UY,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(HY,"href","/docs/transformers/pr_18555/en/model_doc/opt#transformers.TFOPTModel"),c(JY,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.TFPegasusModel"),c(YY,"href","/docs/transformers/pr_18555/en/model_doc/regnet#transformers.TFRegNetModel"),c(KY,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertModel"),c(ZY,"href","/docs/transformers/pr_18555/en/model_doc/resnet#transformers.TFResNetModel"),c(eK,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaModel"),c(oK,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerModel"),c(rK,"href","/docs/transformers/pr_18555/en/model_doc/segformer#transformers.TFSegformerModel"),c(tK,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(aK,"href","/docs/transformers/pr_18555/en/model_doc/swin#transformers.TFSwinModel"),c(nK,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.TFT5Model"),c(sK,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasModel"),c(lK,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(iK,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.TFViTModel"),c(dK,"href","/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(cK,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(fK,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMModel"),c(mK,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(gK,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForPreTraining"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(hK,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(bK,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForPreTraining"),c(FK,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TK,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(MK,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EK,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(CK,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wK,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(AK,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(LK,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yK,"href","/docs/transformers/pr_18555/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(xK,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c($K,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kK,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(SK,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RK,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(PK,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(BK,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IK,"href","/docs/transformers/pr_18555/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(NK,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qK,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(jK,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.TFAutoModelForCausalLM"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(DK,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(XK,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(zK,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(WK,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(QK,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(UK,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(HK,"href","/docs/transformers/pr_18555/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(JK,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YK,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KK,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZK,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eZ,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oZ,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.TFAutoModelForImageClassification"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_18555/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sZ,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lZ,"href","/docs/transformers/pr_18555/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(iZ,"href","/docs/transformers/pr_18555/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(dZ,"href","/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(cZ,"href","/docs/transformers/pr_18555/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(fZ,"href","/docs/transformers/pr_18555/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(mZ,"href","/docs/transformers/pr_18555/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(gZ,"href","/docs/transformers/pr_18555/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(hZ,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.TFAutoModelForSemanticSegmentation"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(pZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_18555/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(vZ,"href","/docs/transformers/pr_18555/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(FZ,"href","/docs/transformers/pr_18555/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.TFAutoModelForMaskedLM"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.TFAutoModelForMaskedLM"),c(jc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(AZ,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(yZ,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(xZ,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c($Z,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(SZ,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RZ,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(PZ,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BZ,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(IZ,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(NZ,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qZ,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(jZ,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DZ,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(GZ,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OZ,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VZ,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QZ,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(YZ,"href","/docs/transformers/pr_18555/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_18555/en/model_doc/marian#transformers.TFMarianMTModel"),c(ZZ,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_18555/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(oee,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(ree,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.TFAutoModelForSequenceClassification"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.TFAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(tee,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aee,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nee,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(see,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(lee,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(dee,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(cee,"href","/docs/transformers/pr_18555/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(fee,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(mee,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(gee,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(hee,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(pee,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(uee,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(bee,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(vee,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_18555/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(wee,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Aee,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(yee,"href","/docs/transformers/pr_18555/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(xee,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c($ee,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(kee,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.TFAutoModelForMultipleChoice"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.TFAutoModelForMultipleChoice"),c(Uc,"class","relative group"),c(See,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(qee,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(jee,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(zee,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Qee,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Uee,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Hee,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Jee,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Yee,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.TFAutoModelForNextSentencePrediction"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Yc,"class","relative group"),c(Kee,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zee,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eoe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ooe,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(roe,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(ef,"class","relative group"),c(toe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_18555/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.TFAutoModelForTokenClassification"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.TFAutoModelForTokenClassification"),c(tf,"class","relative group"),c(loe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ioe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(doe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(coe,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(foe,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(moe,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(goe,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hoe,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(poe,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(_oe,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(uoe,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(boe,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(voe,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Foe,"href","/docs/transformers/pr_18555/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Toe,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Moe,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Coe,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(woe,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Aoe,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Loe,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(yoe,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(xoe,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y0,"id","transformers.TFAutoModelForQuestionAnswering"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(sf,"class","relative group"),c($oe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_18555/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_18555/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_18555/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_18555/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18555/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Ooe,"href","/docs/transformers/pr_18555/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18555/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_18555/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18555/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_18555/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_18555/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Yoe,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_18555/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.TFAutoModelForVision2Seq"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.TFAutoModelForVision2Seq"),c(cf,"class","relative group"),c(Zoe,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ere,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ore,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rre,"href","/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gf,"class","relative group"),c(tre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(are,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sre,"href","/docs/transformers/pr_18555/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModel"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModel"),c(_f,"class","relative group"),c(lre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ire,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cre,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertModel"),c(fre,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartModel"),c(mre,"href","/docs/transformers/pr_18555/en/model_doc/beit#transformers.FlaxBeitModel"),c(gre,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertModel"),c(hre,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(pre,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(_re,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ure,"href","/docs/transformers/pr_18555/en/model_doc/clip#transformers.FlaxCLIPModel"),c(bre,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(vre,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraModel"),c(Fre,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Tre,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Mre,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Ere,"href","/docs/transformers/pr_18555/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Cre,"href","/docs/transformers/pr_18555/en/model_doc/marian#transformers.FlaxMarianModel"),c(wre,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Are,"href","/docs/transformers/pr_18555/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Lre,"href","/docs/transformers/pr_18555/en/model_doc/opt#transformers.FlaxOPTModel"),c(yre,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xre,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($re,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kre,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.FlaxT5Model"),c(Sre,"href","/docs/transformers/pr_18555/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Rre,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.FlaxViTModel"),c(Pre,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Bre,"href","/docs/transformers/pr_18555/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Ire,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bw,"id","transformers.FlaxAutoModelForCausalLM"),c(Bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bw,"href","#transformers.FlaxAutoModelForCausalLM"),c(vf,"class","relative group"),c(Nre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dre,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Gre,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Ore,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Vre,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Xre,"href","/docs/transformers/pr_18555/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zre,"href","/docs/transformers/pr_18555/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Wre,"href","/docs/transformers/pr_18555/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Qre,"href","/docs/transformers/pr_18555/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Ure,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Hre,"href","/docs/transformers/pr_18555/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uw,"id","transformers.FlaxAutoModelForPreTraining"),c(Uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mf,"class","relative group"),c(Jre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kre,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zre,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ete,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ote,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(rte,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(tte,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ate,"href","/docs/transformers/pr_18555/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(nte,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ste,"href","/docs/transformers/pr_18555/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lte,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ite,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dte,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cte,"href","/docs/transformers/pr_18555/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fte,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c6,"id","transformers.FlaxAutoModelForMaskedLM"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wf,"class","relative group"),c(mte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pte,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_te,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ute,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bte,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vte,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Fte,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Tte,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Mte,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Ete,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Cte,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(yf,"class","relative group"),c(wte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ate,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yte,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xte,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($te,"href","/docs/transformers/pr_18555/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_18555/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Ste,"href","/docs/transformers/pr_18555/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Rte,"href","/docs/transformers/pr_18555/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Pte,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Bte,"href","/docs/transformers/pr_18555/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ite,"href","/docs/transformers/pr_18555/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Nte,"href","/docs/transformers/pr_18555/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.FlaxAutoModelForSequenceClassification"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kf,"class","relative group"),c(qte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gte,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ote,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Vte,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Xte,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(zte,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Wte,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Qte,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Ute,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Hte,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Jte,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H6,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H6,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Pf,"class","relative group"),c(Yte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zte,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eae,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(oae,"href","/docs/transformers/pr_18555/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(rae,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(tae,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(aae,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(nae,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(sae,"href","/docs/transformers/pr_18555/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(lae,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(iae,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(dae,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iA,"id","transformers.FlaxAutoModelForTokenClassification"),c(iA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Nf,"class","relative group"),c(cae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gae,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(hae,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(pae,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(_ae,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(uae,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(bae,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(vae,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Fae,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(vA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Df,"class","relative group"),c(Tae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cae,"href","/docs/transformers/pr_18555/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(wae,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Aae,"href","/docs/transformers/pr_18555/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Lae,"href","/docs/transformers/pr_18555/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yae,"href","/docs/transformers/pr_18555/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(xae,"href","/docs/transformers/pr_18555/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c($ae,"href","/docs/transformers/pr_18555/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(kae,"href","/docs/transformers/pr_18555/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($A,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c($A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($A,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vf,"class","relative group"),c(Sae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bae,"href","/docs/transformers/pr_18555/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PA,"id","transformers.FlaxAutoModelForImageClassification"),c(PA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Wf,"class","relative group"),c(Iae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jae,"href","/docs/transformers/pr_18555/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Dae,"href","/docs/transformers/pr_18555/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jA,"id","transformers.FlaxAutoModelForVision2Seq"),c(jA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Hf,"class","relative group"),c(Gae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vae,"href","/docs/transformers/pr_18555/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xae,"href","/docs/transformers/pr_18555/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Oi),b(f,om,u),b(f,ft,u),e(ft,Vi),e(ft,Xi),e(Xi,gy),e(ft,rm),b(f,Ve,u),b(f,Ue,u),e(Ue,zi),e(Ue,Xn),e(Xn,hy),e(Ue,zn),e(Ue,Wn),e(Wn,py),e(Ue,Wi),e(Ue,Qn),e(Qn,_y),e(Ue,Qi),b(f,tm,u),M(ja,f,u),b(f,He,u),b(f,Ae,u),e(Ae,sP),e(Ae,Ui),e(Ui,lP),e(Ae,iP),b(f,Lo,u),b(f,Da,u),e(Da,dP),e(Da,am),e(am,cP),e(Da,MKe),b(f,ZQe,u),b(f,Hi,u),e(Hi,nm),e(nm,Vse),M(uy,Vse,null),e(Hi,EKe),e(Hi,Xse),e(Xse,CKe),b(f,eUe,u),b(f,Un,u),e(Un,wKe),e(Un,zse),e(zse,AKe),e(Un,LKe),e(Un,Wse),e(Wse,yKe),e(Un,xKe),b(f,oUe,u),M(by,f,u),b(f,rUe,u),b(f,fP,u),e(fP,$Ke),b(f,tUe,u),M(sm,f,u),b(f,aUe,u),b(f,Ji,u),e(Ji,lm),e(lm,Qse),M(vy,Qse,null),e(Ji,kKe),e(Ji,Use),e(Use,SKe),b(f,nUe,u),b(f,yo,u),M(Fy,yo,null),e(yo,RKe),e(yo,Ty),e(Ty,PKe),e(Ty,mP),e(mP,BKe),e(Ty,IKe),e(yo,NKe),e(yo,My),e(My,qKe),e(My,Hse),e(Hse,jKe),e(My,DKe),e(yo,GKe),e(yo,kr),M(Ey,kr,null),e(kr,OKe),e(kr,Jse),e(Jse,VKe),e(kr,XKe),e(kr,Yi),e(Yi,zKe),e(Yi,Yse),e(Yse,WKe),e(Yi,QKe),e(Yi,Kse),e(Kse,UKe),e(Yi,HKe),e(kr,JKe),e(kr,A),e(A,im),e(im,Zse),e(Zse,YKe),e(im,KKe),e(im,gP),e(gP,ZKe),e(im,eZe),e(A,oZe),e(A,dm),e(dm,ele),e(ele,rZe),e(dm,tZe),e(dm,hP),e(hP,aZe),e(dm,nZe),e(A,sZe),e(A,cm),e(cm,ole),e(ole,lZe),e(cm,iZe),e(cm,pP),e(pP,dZe),e(cm,cZe),e(A,fZe),e(A,fm),e(fm,rle),e(rle,mZe),e(fm,gZe),e(fm,_P),e(_P,hZe),e(fm,pZe),e(A,_Ze),e(A,mm),e(mm,tle),e(tle,uZe),e(mm,bZe),e(mm,uP),e(uP,vZe),e(mm,FZe),e(A,TZe),e(A,gm),e(gm,ale),e(ale,MZe),e(gm,EZe),e(gm,bP),e(bP,CZe),e(gm,wZe),e(A,AZe),e(A,hm),e(hm,nle),e(nle,LZe),e(hm,yZe),e(hm,vP),e(vP,xZe),e(hm,$Ze),e(A,kZe),e(A,pm),e(pm,sle),e(sle,SZe),e(pm,RZe),e(pm,FP),e(FP,PZe),e(pm,BZe),e(A,IZe),e(A,_m),e(_m,lle),e(lle,NZe),e(_m,qZe),e(_m,TP),e(TP,jZe),e(_m,DZe),e(A,GZe),e(A,um),e(um,ile),e(ile,OZe),e(um,VZe),e(um,MP),e(MP,XZe),e(um,zZe),e(A,WZe),e(A,bm),e(bm,dle),e(dle,QZe),e(bm,UZe),e(bm,EP),e(EP,HZe),e(bm,JZe),e(A,YZe),e(A,vm),e(vm,cle),e(cle,KZe),e(vm,ZZe),e(vm,CP),e(CP,eeo),e(vm,oeo),e(A,reo),e(A,Fm),e(Fm,fle),e(fle,teo),e(Fm,aeo),e(Fm,wP),e(wP,neo),e(Fm,seo),e(A,leo),e(A,Tm),e(Tm,mle),e(mle,ieo),e(Tm,deo),e(Tm,AP),e(AP,ceo),e(Tm,feo),e(A,meo),e(A,Mm),e(Mm,gle),e(gle,geo),e(Mm,heo),e(Mm,LP),e(LP,peo),e(Mm,_eo),e(A,ueo),e(A,Em),e(Em,hle),e(hle,beo),e(Em,veo),e(Em,yP),e(yP,Feo),e(Em,Teo),e(A,Meo),e(A,Cm),e(Cm,ple),e(ple,Eeo),e(Cm,Ceo),e(Cm,xP),e(xP,weo),e(Cm,Aeo),e(A,Leo),e(A,wm),e(wm,_le),e(_le,yeo),e(wm,xeo),e(wm,$P),e($P,$eo),e(wm,keo),e(A,Seo),e(A,Am),e(Am,ule),e(ule,Reo),e(Am,Peo),e(Am,kP),e(kP,Beo),e(Am,Ieo),e(A,Neo),e(A,Lm),e(Lm,ble),e(ble,qeo),e(Lm,jeo),e(Lm,SP),e(SP,Deo),e(Lm,Geo),e(A,Oeo),e(A,ym),e(ym,vle),e(vle,Veo),e(ym,Xeo),e(ym,RP),e(RP,zeo),e(ym,Weo),e(A,Qeo),e(A,xm),e(xm,Fle),e(Fle,Ueo),e(xm,Heo),e(xm,PP),e(PP,Jeo),e(xm,Yeo),e(A,Keo),e(A,$m),e($m,Tle),e(Tle,Zeo),e($m,eoo),e($m,BP),e(BP,ooo),e($m,roo),e(A,too),e(A,km),e(km,Mle),e(Mle,aoo),e(km,noo),e(km,IP),e(IP,soo),e(km,loo),e(A,ioo),e(A,Sm),e(Sm,Ele),e(Ele,doo),e(Sm,coo),e(Sm,NP),e(NP,foo),e(Sm,moo),e(A,goo),e(A,Rm),e(Rm,Cle),e(Cle,hoo),e(Rm,poo),e(Rm,qP),e(qP,_oo),e(Rm,uoo),e(A,boo),e(A,Pm),e(Pm,wle),e(wle,voo),e(Pm,Foo),e(Pm,jP),e(jP,Too),e(Pm,Moo),e(A,Eoo),e(A,Bm),e(Bm,Ale),e(Ale,Coo),e(Bm,woo),e(Bm,DP),e(DP,Aoo),e(Bm,Loo),e(A,yoo),e(A,Im),e(Im,Lle),e(Lle,xoo),e(Im,$oo),e(Im,GP),e(GP,koo),e(Im,Soo),e(A,Roo),e(A,Nm),e(Nm,yle),e(yle,Poo),e(Nm,Boo),e(Nm,OP),e(OP,Ioo),e(Nm,Noo),e(A,qoo),e(A,qm),e(qm,xle),e(xle,joo),e(qm,Doo),e(qm,VP),e(VP,Goo),e(qm,Ooo),e(A,Voo),e(A,jm),e(jm,$le),e($le,Xoo),e(jm,zoo),e(jm,XP),e(XP,Woo),e(jm,Qoo),e(A,Uoo),e(A,Dm),e(Dm,kle),e(kle,Hoo),e(Dm,Joo),e(Dm,zP),e(zP,Yoo),e(Dm,Koo),e(A,Zoo),e(A,Gm),e(Gm,Sle),e(Sle,ero),e(Gm,oro),e(Gm,WP),e(WP,rro),e(Gm,tro),e(A,aro),e(A,Om),e(Om,Rle),e(Rle,nro),e(Om,sro),e(Om,QP),e(QP,lro),e(Om,iro),e(A,dro),e(A,Vm),e(Vm,Ple),e(Ple,cro),e(Vm,fro),e(Vm,UP),e(UP,mro),e(Vm,gro),e(A,hro),e(A,Xm),e(Xm,Ble),e(Ble,pro),e(Xm,_ro),e(Xm,HP),e(HP,uro),e(Xm,bro),e(A,vro),e(A,zm),e(zm,Ile),e(Ile,Fro),e(zm,Tro),e(zm,JP),e(JP,Mro),e(zm,Ero),e(A,Cro),e(A,Wm),e(Wm,Nle),e(Nle,wro),e(Wm,Aro),e(Wm,YP),e(YP,Lro),e(Wm,yro),e(A,xro),e(A,Qm),e(Qm,qle),e(qle,$ro),e(Qm,kro),e(Qm,KP),e(KP,Sro),e(Qm,Rro),e(A,Pro),e(A,Um),e(Um,jle),e(jle,Bro),e(Um,Iro),e(Um,ZP),e(ZP,Nro),e(Um,qro),e(A,jro),e(A,Hm),e(Hm,Dle),e(Dle,Dro),e(Hm,Gro),e(Hm,eB),e(eB,Oro),e(Hm,Vro),e(A,Xro),e(A,Jm),e(Jm,Gle),e(Gle,zro),e(Jm,Wro),e(Jm,oB),e(oB,Qro),e(Jm,Uro),e(A,Hro),e(A,Ym),e(Ym,Ole),e(Ole,Jro),e(Ym,Yro),e(Ym,rB),e(rB,Kro),e(Ym,Zro),e(A,eto),e(A,Km),e(Km,Vle),e(Vle,oto),e(Km,rto),e(Km,tB),e(tB,tto),e(Km,ato),e(A,nto),e(A,Zm),e(Zm,Xle),e(Xle,sto),e(Zm,lto),e(Zm,aB),e(aB,ito),e(Zm,dto),e(A,cto),e(A,eg),e(eg,zle),e(zle,fto),e(eg,mto),e(eg,nB),e(nB,gto),e(eg,hto),e(A,pto),e(A,og),e(og,Wle),e(Wle,_to),e(og,uto),e(og,sB),e(sB,bto),e(og,vto),e(A,Fto),e(A,rg),e(rg,Qle),e(Qle,Tto),e(rg,Mto),e(rg,lB),e(lB,Eto),e(rg,Cto),e(A,wto),e(A,tg),e(tg,Ule),e(Ule,Ato),e(tg,Lto),e(tg,iB),e(iB,yto),e(tg,xto),e(A,$to),e(A,ag),e(ag,Hle),e(Hle,kto),e(ag,Sto),e(ag,dB),e(dB,Rto),e(ag,Pto),e(A,Bto),e(A,ng),e(ng,Jle),e(Jle,Ito),e(ng,Nto),e(ng,cB),e(cB,qto),e(ng,jto),e(A,Dto),e(A,sg),e(sg,Yle),e(Yle,Gto),e(sg,Oto),e(sg,fB),e(fB,Vto),e(sg,Xto),e(A,zto),e(A,lg),e(lg,Kle),e(Kle,Wto),e(lg,Qto),e(lg,mB),e(mB,Uto),e(lg,Hto),e(A,Jto),e(A,ig),e(ig,Zle),e(Zle,Yto),e(ig,Kto),e(ig,gB),e(gB,Zto),e(ig,eao),e(A,oao),e(A,dg),e(dg,eie),e(eie,rao),e(dg,tao),e(dg,hB),e(hB,aao),e(dg,nao),e(A,sao),e(A,cg),e(cg,oie),e(oie,lao),e(cg,iao),e(cg,pB),e(pB,dao),e(cg,cao),e(A,fao),e(A,fg),e(fg,rie),e(rie,mao),e(fg,gao),e(fg,_B),e(_B,hao),e(fg,pao),e(A,_ao),e(A,mg),e(mg,tie),e(tie,uao),e(mg,bao),e(mg,uB),e(uB,vao),e(mg,Fao),e(A,Tao),e(A,gg),e(gg,aie),e(aie,Mao),e(gg,Eao),e(gg,bB),e(bB,Cao),e(gg,wao),e(A,Aao),e(A,hg),e(hg,nie),e(nie,Lao),e(hg,yao),e(hg,vB),e(vB,xao),e(hg,$ao),e(A,kao),e(A,pg),e(pg,sie),e(sie,Sao),e(pg,Rao),e(pg,FB),e(FB,Pao),e(pg,Bao),e(A,Iao),e(A,_g),e(_g,lie),e(lie,Nao),e(_g,qao),e(_g,TB),e(TB,jao),e(_g,Dao),e(A,Gao),e(A,ug),e(ug,iie),e(iie,Oao),e(ug,Vao),e(ug,MB),e(MB,Xao),e(ug,zao),e(A,Wao),e(A,bg),e(bg,die),e(die,Qao),e(bg,Uao),e(bg,EB),e(EB,Hao),e(bg,Jao),e(A,Yao),e(A,vg),e(vg,cie),e(cie,Kao),e(vg,Zao),e(vg,CB),e(CB,eno),e(vg,ono),e(A,rno),e(A,Fg),e(Fg,fie),e(fie,tno),e(Fg,ano),e(Fg,wB),e(wB,nno),e(Fg,sno),e(A,lno),e(A,Tg),e(Tg,mie),e(mie,ino),e(Tg,dno),e(Tg,AB),e(AB,cno),e(Tg,fno),e(A,mno),e(A,Mg),e(Mg,gie),e(gie,gno),e(Mg,hno),e(Mg,LB),e(LB,pno),e(Mg,_no),e(A,uno),e(A,Eg),e(Eg,hie),e(hie,bno),e(Eg,vno),e(Eg,yB),e(yB,Fno),e(Eg,Tno),e(A,Mno),e(A,Cg),e(Cg,pie),e(pie,Eno),e(Cg,Cno),e(Cg,xB),e(xB,wno),e(Cg,Ano),e(A,Lno),e(A,wg),e(wg,_ie),e(_ie,yno),e(wg,xno),e(wg,$B),e($B,$no),e(wg,kno),e(A,Sno),e(A,Ag),e(Ag,uie),e(uie,Rno),e(Ag,Pno),e(Ag,kB),e(kB,Bno),e(Ag,Ino),e(A,Nno),e(A,Lg),e(Lg,bie),e(bie,qno),e(Lg,jno),e(Lg,SB),e(SB,Dno),e(Lg,Gno),e(A,Ono),e(A,yg),e(yg,vie),e(vie,Vno),e(yg,Xno),e(yg,RB),e(RB,zno),e(yg,Wno),e(A,Qno),e(A,xg),e(xg,Fie),e(Fie,Uno),e(xg,Hno),e(xg,PB),e(PB,Jno),e(xg,Yno),e(A,Kno),e(A,$g),e($g,Tie),e(Tie,Zno),e($g,eso),e($g,BB),e(BB,oso),e($g,rso),e(A,tso),e(A,kg),e(kg,Mie),e(Mie,aso),e(kg,nso),e(kg,IB),e(IB,sso),e(kg,lso),e(A,iso),e(A,Sg),e(Sg,Eie),e(Eie,dso),e(Sg,cso),e(Sg,NB),e(NB,fso),e(Sg,mso),e(A,gso),e(A,Rg),e(Rg,Cie),e(Cie,hso),e(Rg,pso),e(Rg,qB),e(qB,_so),e(Rg,uso),e(A,bso),e(A,Pg),e(Pg,wie),e(wie,vso),e(Pg,Fso),e(Pg,jB),e(jB,Tso),e(Pg,Mso),e(A,Eso),e(A,Bg),e(Bg,Aie),e(Aie,Cso),e(Bg,wso),e(Bg,DB),e(DB,Aso),e(Bg,Lso),e(A,yso),e(A,Ig),e(Ig,Lie),e(Lie,xso),e(Ig,$so),e(Ig,GB),e(GB,kso),e(Ig,Sso),e(A,Rso),e(A,Ng),e(Ng,yie),e(yie,Pso),e(Ng,Bso),e(Ng,OB),e(OB,Iso),e(Ng,Nso),e(A,qso),e(A,qg),e(qg,xie),e(xie,jso),e(qg,Dso),e(qg,VB),e(VB,Gso),e(qg,Oso),e(A,Vso),e(A,jg),e(jg,$ie),e($ie,Xso),e(jg,zso),e(jg,XB),e(XB,Wso),e(jg,Qso),e(A,Uso),e(A,Dg),e(Dg,kie),e(kie,Hso),e(Dg,Jso),e(Dg,zB),e(zB,Yso),e(Dg,Kso),e(A,Zso),e(A,Gg),e(Gg,Sie),e(Sie,elo),e(Gg,olo),e(Gg,WB),e(WB,rlo),e(Gg,tlo),e(A,alo),e(A,Og),e(Og,Rie),e(Rie,nlo),e(Og,slo),e(Og,QB),e(QB,llo),e(Og,ilo),e(A,dlo),e(A,Vg),e(Vg,Pie),e(Pie,clo),e(Vg,flo),e(Vg,UB),e(UB,mlo),e(Vg,glo),e(A,hlo),e(A,Xg),e(Xg,Bie),e(Bie,plo),e(Xg,_lo),e(Xg,HB),e(HB,ulo),e(Xg,blo),e(A,vlo),e(A,zg),e(zg,Iie),e(Iie,Flo),e(zg,Tlo),e(zg,JB),e(JB,Mlo),e(zg,Elo),e(A,Clo),e(A,Wg),e(Wg,Nie),e(Nie,wlo),e(Wg,Alo),e(Wg,YB),e(YB,Llo),e(Wg,ylo),e(A,xlo),e(A,Qg),e(Qg,qie),e(qie,$lo),e(Qg,klo),e(Qg,KB),e(KB,Slo),e(Qg,Rlo),e(A,Plo),e(A,Ug),e(Ug,jie),e(jie,Blo),e(Ug,Ilo),e(Ug,ZB),e(ZB,Nlo),e(Ug,qlo),e(A,jlo),e(A,Hg),e(Hg,Die),e(Die,Dlo),e(Hg,Glo),e(Hg,eI),e(eI,Olo),e(Hg,Vlo),e(A,Xlo),e(A,Jg),e(Jg,Gie),e(Gie,zlo),e(Jg,Wlo),e(Jg,oI),e(oI,Qlo),e(Jg,Ulo),e(A,Hlo),e(A,Yg),e(Yg,Oie),e(Oie,Jlo),e(Yg,Ylo),e(Yg,rI),e(rI,Klo),e(Yg,Zlo),e(A,eio),e(A,Kg),e(Kg,Vie),e(Vie,oio),e(Kg,rio),e(Kg,tI),e(tI,tio),e(Kg,aio),e(A,nio),e(A,Zg),e(Zg,Xie),e(Xie,sio),e(Zg,lio),e(Zg,aI),e(aI,iio),e(Zg,dio),e(A,cio),e(A,eh),e(eh,zie),e(zie,fio),e(eh,mio),e(eh,nI),e(nI,gio),e(eh,hio),e(A,pio),e(A,oh),e(oh,Wie),e(Wie,_io),e(oh,uio),e(oh,sI),e(sI,bio),e(oh,vio),e(A,Fio),e(A,rh),e(rh,Qie),e(Qie,Tio),e(rh,Mio),e(rh,lI),e(lI,Eio),e(rh,Cio),e(A,wio),e(A,th),e(th,Uie),e(Uie,Aio),e(th,Lio),e(th,iI),e(iI,yio),e(th,xio),e(A,$io),e(A,ah),e(ah,Hie),e(Hie,kio),e(ah,Sio),e(ah,dI),e(dI,Rio),e(ah,Pio),e(A,Bio),e(A,nh),e(nh,Jie),e(Jie,Iio),e(nh,Nio),e(nh,cI),e(cI,qio),e(nh,jio),e(A,Dio),e(A,sh),e(sh,Yie),e(Yie,Gio),e(sh,Oio),e(sh,fI),e(fI,Vio),e(sh,Xio),e(A,zio),e(A,lh),e(lh,Kie),e(Kie,Wio),e(lh,Qio),e(lh,mI),e(mI,Uio),e(lh,Hio),e(A,Jio),e(A,ih),e(ih,Zie),e(Zie,Yio),e(ih,Kio),e(ih,gI),e(gI,Zio),e(ih,edo),e(A,odo),e(A,dh),e(dh,ede),e(ede,rdo),e(dh,tdo),e(dh,hI),e(hI,ado),e(dh,ndo),e(A,sdo),e(A,ch),e(ch,ode),e(ode,ldo),e(ch,ido),e(ch,pI),e(pI,ddo),e(ch,cdo),e(A,fdo),e(A,fh),e(fh,rde),e(rde,mdo),e(fh,gdo),e(fh,_I),e(_I,hdo),e(fh,pdo),e(A,_do),e(A,mh),e(mh,tde),e(tde,udo),e(mh,bdo),e(mh,uI),e(uI,vdo),e(mh,Fdo),e(A,Tdo),e(A,gh),e(gh,ade),e(ade,Mdo),e(gh,Edo),e(gh,bI),e(bI,Cdo),e(gh,wdo),e(A,Ado),e(A,hh),e(hh,nde),e(nde,Ldo),e(hh,ydo),e(hh,vI),e(vI,xdo),e(hh,$do),e(A,kdo),e(A,ph),e(ph,sde),e(sde,Sdo),e(ph,Rdo),e(ph,FI),e(FI,Pdo),e(ph,Bdo),e(A,Ido),e(A,_h),e(_h,lde),e(lde,Ndo),e(_h,qdo),e(_h,TI),e(TI,jdo),e(_h,Ddo),e(A,Gdo),e(A,uh),e(uh,ide),e(ide,Odo),e(uh,Vdo),e(uh,MI),e(MI,Xdo),e(uh,zdo),e(A,Wdo),e(A,bh),e(bh,dde),e(dde,Qdo),e(bh,Udo),e(bh,EI),e(EI,Hdo),e(bh,Jdo),e(A,Ydo),e(A,vh),e(vh,cde),e(cde,Kdo),e(vh,Zdo),e(vh,CI),e(CI,eco),e(vh,oco),e(A,rco),e(A,Fh),e(Fh,fde),e(fde,tco),e(Fh,aco),e(Fh,wI),e(wI,nco),e(Fh,sco),e(A,lco),e(A,Th),e(Th,mde),e(mde,ico),e(Th,dco),e(Th,AI),e(AI,cco),e(Th,fco),e(kr,mco),M(Mh,kr,null),e(yo,gco),e(yo,Eh),M(Cy,Eh,null),e(Eh,hco),e(Eh,gde),e(gde,pco),b(f,sUe,u),b(f,Ki,u),e(Ki,Ch),e(Ch,hde),M(wy,hde,null),e(Ki,_co),e(Ki,pde),e(pde,uco),b(f,lUe,u),b(f,xo,u),M(Ay,xo,null),e(xo,bco),e(xo,Ly),e(Ly,vco),e(Ly,LI),e(LI,Fco),e(Ly,Tco),e(xo,Mco),e(xo,yy),e(yy,Eco),e(yy,_de),e(_de,Cco),e(yy,wco),e(xo,Aco),e(xo,Sr),M(xy,Sr,null),e(Sr,Lco),e(Sr,ude),e(ude,yco),e(Sr,xco),e(Sr,Ga),e(Ga,$co),e(Ga,bde),e(bde,kco),e(Ga,Sco),e(Ga,vde),e(vde,Rco),e(Ga,Pco),e(Ga,Fde),e(Fde,Bco),e(Ga,Ico),e(Sr,Nco),e(Sr,k),e(k,Hn),e(Hn,Tde),e(Tde,qco),e(Hn,jco),e(Hn,yI),e(yI,Dco),e(Hn,Gco),e(Hn,xI),e(xI,Oco),e(Hn,Vco),e(k,Xco),e(k,Jn),e(Jn,Mde),e(Mde,zco),e(Jn,Wco),e(Jn,$I),e($I,Qco),e(Jn,Uco),e(Jn,kI),e(kI,Hco),e(Jn,Jco),e(k,Yco),e(k,Yn),e(Yn,Ede),e(Ede,Kco),e(Yn,Zco),e(Yn,SI),e(SI,efo),e(Yn,ofo),e(Yn,RI),e(RI,rfo),e(Yn,tfo),e(k,afo),e(k,wh),e(wh,Cde),e(Cde,nfo),e(wh,sfo),e(wh,PI),e(PI,lfo),e(wh,ifo),e(k,dfo),e(k,Kn),e(Kn,wde),e(wde,cfo),e(Kn,ffo),e(Kn,BI),e(BI,mfo),e(Kn,gfo),e(Kn,II),e(II,hfo),e(Kn,pfo),e(k,_fo),e(k,Ah),e(Ah,Ade),e(Ade,ufo),e(Ah,bfo),e(Ah,NI),e(NI,vfo),e(Ah,Ffo),e(k,Tfo),e(k,Lh),e(Lh,Lde),e(Lde,Mfo),e(Lh,Efo),e(Lh,qI),e(qI,Cfo),e(Lh,wfo),e(k,Afo),e(k,yh),e(yh,yde),e(yde,Lfo),e(yh,yfo),e(yh,jI),e(jI,xfo),e(yh,$fo),e(k,kfo),e(k,Zn),e(Zn,xde),e(xde,Sfo),e(Zn,Rfo),e(Zn,DI),e(DI,Pfo),e(Zn,Bfo),e(Zn,GI),e(GI,Ifo),e(Zn,Nfo),e(k,qfo),e(k,es),e(es,$de),e($de,jfo),e(es,Dfo),e(es,OI),e(OI,Gfo),e(es,Ofo),e(es,VI),e(VI,Vfo),e(es,Xfo),e(k,zfo),e(k,os),e(os,kde),e(kde,Wfo),e(os,Qfo),e(os,XI),e(XI,Ufo),e(os,Hfo),e(os,zI),e(zI,Jfo),e(os,Yfo),e(k,Kfo),e(k,xh),e(xh,Sde),e(Sde,Zfo),e(xh,emo),e(xh,WI),e(WI,omo),e(xh,rmo),e(k,tmo),e(k,$h),e($h,Rde),e(Rde,amo),e($h,nmo),e($h,QI),e(QI,smo),e($h,lmo),e(k,imo),e(k,kh),e(kh,Pde),e(Pde,dmo),e(kh,cmo),e(kh,UI),e(UI,fmo),e(kh,mmo),e(k,gmo),e(k,rs),e(rs,Bde),e(Bde,hmo),e(rs,pmo),e(rs,HI),e(HI,_mo),e(rs,umo),e(rs,JI),e(JI,bmo),e(rs,vmo),e(k,Fmo),e(k,Sh),e(Sh,Ide),e(Ide,Tmo),e(Sh,Mmo),e(Sh,YI),e(YI,Emo),e(Sh,Cmo),e(k,wmo),e(k,ts),e(ts,Nde),e(Nde,Amo),e(ts,Lmo),e(ts,KI),e(KI,ymo),e(ts,xmo),e(ts,ZI),e(ZI,$mo),e(ts,kmo),e(k,Smo),e(k,as),e(as,qde),e(qde,Rmo),e(as,Pmo),e(as,eN),e(eN,Bmo),e(as,Imo),e(as,oN),e(oN,Nmo),e(as,qmo),e(k,jmo),e(k,ns),e(ns,jde),e(jde,Dmo),e(ns,Gmo),e(ns,rN),e(rN,Omo),e(ns,Vmo),e(ns,tN),e(tN,Xmo),e(ns,zmo),e(k,Wmo),e(k,ss),e(ss,Dde),e(Dde,Qmo),e(ss,Umo),e(ss,aN),e(aN,Hmo),e(ss,Jmo),e(ss,nN),e(nN,Ymo),e(ss,Kmo),e(k,Zmo),e(k,Rh),e(Rh,Gde),e(Gde,ego),e(Rh,ogo),e(Rh,sN),e(sN,rgo),e(Rh,tgo),e(k,ago),e(k,ls),e(ls,Ode),e(Ode,ngo),e(ls,sgo),e(ls,lN),e(lN,lgo),e(ls,igo),e(ls,iN),e(iN,dgo),e(ls,cgo),e(k,fgo),e(k,is),e(is,Vde),e(Vde,mgo),e(is,ggo),e(is,dN),e(dN,hgo),e(is,pgo),e(is,cN),e(cN,_go),e(is,ugo),e(k,bgo),e(k,ds),e(ds,Xde),e(Xde,vgo),e(ds,Fgo),e(ds,fN),e(fN,Tgo),e(ds,Mgo),e(ds,mN),e(mN,Ego),e(ds,Cgo),e(k,wgo),e(k,cs),e(cs,zde),e(zde,Ago),e(cs,Lgo),e(cs,gN),e(gN,ygo),e(cs,xgo),e(cs,hN),e(hN,$go),e(cs,kgo),e(k,Sgo),e(k,fs),e(fs,Wde),e(Wde,Rgo),e(fs,Pgo),e(fs,pN),e(pN,Bgo),e(fs,Igo),e(fs,_N),e(_N,Ngo),e(fs,qgo),e(k,jgo),e(k,ms),e(ms,Qde),e(Qde,Dgo),e(ms,Ggo),e(ms,uN),e(uN,Ogo),e(ms,Vgo),e(ms,bN),e(bN,Xgo),e(ms,zgo),e(k,Wgo),e(k,Ph),e(Ph,Ude),e(Ude,Qgo),e(Ph,Ugo),e(Ph,vN),e(vN,Hgo),e(Ph,Jgo),e(k,Ygo),e(k,gs),e(gs,Hde),e(Hde,Kgo),e(gs,Zgo),e(gs,FN),e(FN,eho),e(gs,oho),e(gs,TN),e(TN,rho),e(gs,tho),e(k,aho),e(k,Bh),e(Bh,Jde),e(Jde,nho),e(Bh,sho),e(Bh,MN),e(MN,lho),e(Bh,iho),e(k,dho),e(k,hs),e(hs,Yde),e(Yde,cho),e(hs,fho),e(hs,EN),e(EN,mho),e(hs,gho),e(hs,CN),e(CN,hho),e(hs,pho),e(k,_ho),e(k,ps),e(ps,Kde),e(Kde,uho),e(ps,bho),e(ps,wN),e(wN,vho),e(ps,Fho),e(ps,AN),e(AN,Tho),e(ps,Mho),e(k,Eho),e(k,_s),e(_s,Zde),e(Zde,Cho),e(_s,who),e(_s,LN),e(LN,Aho),e(_s,Lho),e(_s,yN),e(yN,yho),e(_s,xho),e(k,$ho),e(k,Ih),e(Ih,ece),e(ece,kho),e(Ih,Sho),e(Ih,xN),e(xN,Rho),e(Ih,Pho),e(k,Bho),e(k,us),e(us,oce),e(oce,Iho),e(us,Nho),e(us,$N),e($N,qho),e(us,jho),e(us,kN),e(kN,Dho),e(us,Gho),e(k,Oho),e(k,bs),e(bs,rce),e(rce,Vho),e(bs,Xho),e(bs,SN),e(SN,zho),e(bs,Who),e(bs,RN),e(RN,Qho),e(bs,Uho),e(k,Hho),e(k,vs),e(vs,tce),e(tce,Jho),e(vs,Yho),e(vs,PN),e(PN,Kho),e(vs,Zho),e(vs,BN),e(BN,epo),e(vs,opo),e(k,rpo),e(k,Nh),e(Nh,ace),e(ace,tpo),e(Nh,apo),e(Nh,IN),e(IN,npo),e(Nh,spo),e(k,lpo),e(k,Fs),e(Fs,nce),e(nce,ipo),e(Fs,dpo),e(Fs,NN),e(NN,cpo),e(Fs,fpo),e(Fs,qN),e(qN,mpo),e(Fs,gpo),e(k,hpo),e(k,Ts),e(Ts,sce),e(sce,ppo),e(Ts,_po),e(Ts,jN),e(jN,upo),e(Ts,bpo),e(Ts,DN),e(DN,vpo),e(Ts,Fpo),e(k,Tpo),e(k,Ms),e(Ms,lce),e(lce,Mpo),e(Ms,Epo),e(Ms,GN),e(GN,Cpo),e(Ms,wpo),e(Ms,ON),e(ON,Apo),e(Ms,Lpo),e(k,ypo),e(k,Es),e(Es,ice),e(ice,xpo),e(Es,$po),e(Es,VN),e(VN,kpo),e(Es,Spo),e(Es,XN),e(XN,Rpo),e(Es,Ppo),e(k,Bpo),e(k,Cs),e(Cs,dce),e(dce,Ipo),e(Cs,Npo),e(Cs,zN),e(zN,qpo),e(Cs,jpo),e(Cs,WN),e(WN,Dpo),e(Cs,Gpo),e(k,Opo),e(k,ws),e(ws,cce),e(cce,Vpo),e(ws,Xpo),e(ws,QN),e(QN,zpo),e(ws,Wpo),e(ws,UN),e(UN,Qpo),e(ws,Upo),e(k,Hpo),e(k,As),e(As,fce),e(fce,Jpo),e(As,Ypo),e(As,HN),e(HN,Kpo),e(As,Zpo),e(As,JN),e(JN,e_o),e(As,o_o),e(k,r_o),e(k,Ls),e(Ls,mce),e(mce,t_o),e(Ls,a_o),e(Ls,YN),e(YN,n_o),e(Ls,s_o),e(Ls,KN),e(KN,l_o),e(Ls,i_o),e(k,d_o),e(k,qh),e(qh,gce),e(gce,c_o),e(qh,f_o),e(qh,ZN),e(ZN,m_o),e(qh,g_o),e(k,h_o),e(k,ys),e(ys,hce),e(hce,p_o),e(ys,__o),e(ys,eq),e(eq,u_o),e(ys,b_o),e(ys,oq),e(oq,v_o),e(ys,F_o),e(k,T_o),e(k,jh),e(jh,pce),e(pce,M_o),e(jh,E_o),e(jh,rq),e(rq,C_o),e(jh,w_o),e(k,A_o),e(k,Dh),e(Dh,_ce),e(_ce,L_o),e(Dh,y_o),e(Dh,tq),e(tq,x_o),e(Dh,$_o),e(k,k_o),e(k,xs),e(xs,uce),e(uce,S_o),e(xs,R_o),e(xs,aq),e(aq,P_o),e(xs,B_o),e(xs,nq),e(nq,I_o),e(xs,N_o),e(k,q_o),e(k,$s),e($s,bce),e(bce,j_o),e($s,D_o),e($s,sq),e(sq,G_o),e($s,O_o),e($s,lq),e(lq,V_o),e($s,X_o),e(k,z_o),e(k,ks),e(ks,vce),e(vce,W_o),e(ks,Q_o),e(ks,iq),e(iq,U_o),e(ks,H_o),e(ks,dq),e(dq,J_o),e(ks,Y_o),e(k,K_o),e(k,Gh),e(Gh,Fce),e(Fce,Z_o),e(Gh,euo),e(Gh,cq),e(cq,ouo),e(Gh,ruo),e(k,tuo),e(k,Ss),e(Ss,Tce),e(Tce,auo),e(Ss,nuo),e(Ss,fq),e(fq,suo),e(Ss,luo),e(Ss,mq),e(mq,iuo),e(Ss,duo),e(k,cuo),e(k,Rs),e(Rs,Mce),e(Mce,fuo),e(Rs,muo),e(Rs,gq),e(gq,guo),e(Rs,huo),e(Rs,hq),e(hq,puo),e(Rs,_uo),e(k,uuo),e(k,Ps),e(Ps,Ece),e(Ece,buo),e(Ps,vuo),e(Ps,pq),e(pq,Fuo),e(Ps,Tuo),e(Ps,_q),e(_q,Muo),e(Ps,Euo),e(k,Cuo),e(k,Bs),e(Bs,Cce),e(Cce,wuo),e(Bs,Auo),e(Bs,uq),e(uq,Luo),e(Bs,yuo),e(Bs,bq),e(bq,xuo),e(Bs,$uo),e(k,kuo),e(k,Is),e(Is,wce),e(wce,Suo),e(Is,Ruo),e(Is,vq),e(vq,Puo),e(Is,Buo),e(Is,Fq),e(Fq,Iuo),e(Is,Nuo),e(k,quo),e(k,Ns),e(Ns,Ace),e(Ace,juo),e(Ns,Duo),e(Ns,Tq),e(Tq,Guo),e(Ns,Ouo),e(Ns,Mq),e(Mq,Vuo),e(Ns,Xuo),e(k,zuo),e(k,qs),e(qs,Lce),e(Lce,Wuo),e(qs,Quo),e(qs,Eq),e(Eq,Uuo),e(qs,Huo),e(qs,Cq),e(Cq,Juo),e(qs,Yuo),e(k,Kuo),e(k,js),e(js,yce),e(yce,Zuo),e(js,e5o),e(js,wq),e(wq,o5o),e(js,r5o),e(js,Aq),e(Aq,t5o),e(js,a5o),e(k,n5o),e(k,Oh),e(Oh,xce),e(xce,s5o),e(Oh,l5o),e(Oh,Lq),e(Lq,i5o),e(Oh,d5o),e(k,c5o),e(k,Ds),e(Ds,$ce),e($ce,f5o),e(Ds,m5o),e(Ds,yq),e(yq,g5o),e(Ds,h5o),e(Ds,xq),e(xq,p5o),e(Ds,_5o),e(k,u5o),e(k,Gs),e(Gs,kce),e(kce,b5o),e(Gs,v5o),e(Gs,$q),e($q,F5o),e(Gs,T5o),e(Gs,kq),e(kq,M5o),e(Gs,E5o),e(k,C5o),e(k,Vh),e(Vh,Sce),e(Sce,w5o),e(Vh,A5o),e(Vh,Sq),e(Sq,L5o),e(Vh,y5o),e(k,x5o),e(k,Xh),e(Xh,Rce),e(Rce,$5o),e(Xh,k5o),e(Xh,Rq),e(Rq,S5o),e(Xh,R5o),e(k,P5o),e(k,zh),e(zh,Pce),e(Pce,B5o),e(zh,I5o),e(zh,Pq),e(Pq,N5o),e(zh,q5o),e(k,j5o),e(k,Wh),e(Wh,Bce),e(Bce,D5o),e(Wh,G5o),e(Wh,Bq),e(Bq,O5o),e(Wh,V5o),e(k,X5o),e(k,Os),e(Os,Ice),e(Ice,z5o),e(Os,W5o),e(Os,Iq),e(Iq,Q5o),e(Os,U5o),e(Os,Nq),e(Nq,H5o),e(Os,J5o),e(k,Y5o),e(k,Qh),e(Qh,Nce),e(Nce,K5o),e(Qh,Z5o),e(Qh,qq),e(qq,e1o),e(Qh,o1o),e(k,r1o),e(k,Vs),e(Vs,qce),e(qce,t1o),e(Vs,a1o),e(Vs,jq),e(jq,n1o),e(Vs,s1o),e(Vs,Dq),e(Dq,l1o),e(Vs,i1o),e(k,d1o),e(k,Xs),e(Xs,jce),e(jce,c1o),e(Xs,f1o),e(Xs,Gq),e(Gq,m1o),e(Xs,g1o),e(Xs,Oq),e(Oq,h1o),e(Xs,p1o),e(k,_1o),e(k,zs),e(zs,Dce),e(Dce,u1o),e(zs,b1o),e(zs,Vq),e(Vq,v1o),e(zs,F1o),e(zs,Xq),e(Xq,T1o),e(zs,M1o),e(k,E1o),e(k,Ws),e(Ws,Gce),e(Gce,C1o),e(Ws,w1o),e(Ws,zq),e(zq,A1o),e(Ws,L1o),e(Ws,Wq),e(Wq,y1o),e(Ws,x1o),e(k,$1o),e(k,Qs),e(Qs,Oce),e(Oce,k1o),e(Qs,S1o),e(Qs,Qq),e(Qq,R1o),e(Qs,P1o),e(Qs,Uq),e(Uq,B1o),e(Qs,I1o),e(k,N1o),e(k,Us),e(Us,Vce),e(Vce,q1o),e(Us,j1o),e(Us,Hq),e(Hq,D1o),e(Us,G1o),e(Us,Jq),e(Jq,O1o),e(Us,V1o),e(k,X1o),e(k,Uh),e(Uh,Xce),e(Xce,z1o),e(Uh,W1o),e(Uh,Yq),e(Yq,Q1o),e(Uh,U1o),e(k,H1o),e(k,Hh),e(Hh,zce),e(zce,J1o),e(Hh,Y1o),e(Hh,Kq),e(Kq,K1o),e(Hh,Z1o),e(k,e2o),e(k,Hs),e(Hs,Wce),e(Wce,o2o),e(Hs,r2o),e(Hs,Zq),e(Zq,t2o),e(Hs,a2o),e(Hs,ej),e(ej,n2o),e(Hs,s2o),e(k,l2o),e(k,Js),e(Js,Qce),e(Qce,i2o),e(Js,d2o),e(Js,oj),e(oj,c2o),e(Js,f2o),e(Js,rj),e(rj,m2o),e(Js,g2o),e(k,h2o),e(k,Ys),e(Ys,Uce),e(Uce,p2o),e(Ys,_2o),e(Ys,tj),e(tj,u2o),e(Ys,b2o),e(Ys,aj),e(aj,v2o),e(Ys,F2o),e(k,T2o),e(k,Jh),e(Jh,Hce),e(Hce,M2o),e(Jh,E2o),e(Jh,nj),e(nj,C2o),e(Jh,w2o),e(k,A2o),e(k,Yh),e(Yh,Jce),e(Jce,L2o),e(Yh,y2o),e(Yh,sj),e(sj,x2o),e(Yh,$2o),e(k,k2o),e(k,Kh),e(Kh,Yce),e(Yce,S2o),e(Kh,R2o),e(Kh,lj),e(lj,P2o),e(Kh,B2o),e(k,I2o),e(k,Ks),e(Ks,Kce),e(Kce,N2o),e(Ks,q2o),e(Ks,ij),e(ij,j2o),e(Ks,D2o),e(Ks,dj),e(dj,G2o),e(Ks,O2o),e(k,V2o),e(k,Zs),e(Zs,Zce),e(Zce,X2o),e(Zs,z2o),e(Zs,cj),e(cj,W2o),e(Zs,Q2o),e(Zs,fj),e(fj,U2o),e(Zs,H2o),e(k,J2o),e(k,Zh),e(Zh,efe),e(efe,Y2o),e(Zh,K2o),e(Zh,mj),e(mj,Z2o),e(Zh,ebo),e(k,obo),e(k,ep),e(ep,ofe),e(ofe,rbo),e(ep,tbo),e(ep,gj),e(gj,abo),e(ep,nbo),e(k,sbo),e(k,op),e(op,rfe),e(rfe,lbo),e(op,ibo),e(op,hj),e(hj,dbo),e(op,cbo),e(k,fbo),e(k,el),e(el,tfe),e(tfe,mbo),e(el,gbo),e(el,pj),e(pj,hbo),e(el,pbo),e(el,_j),e(_j,_bo),e(el,ubo),e(k,bbo),e(k,rp),e(rp,afe),e(afe,vbo),e(rp,Fbo),e(rp,uj),e(uj,Tbo),e(rp,Mbo),e(k,Ebo),e(k,tp),e(tp,nfe),e(nfe,Cbo),e(tp,wbo),e(tp,bj),e(bj,Abo),e(tp,Lbo),e(k,ybo),e(k,ol),e(ol,sfe),e(sfe,xbo),e(ol,$bo),e(ol,vj),e(vj,kbo),e(ol,Sbo),e(ol,Fj),e(Fj,Rbo),e(ol,Pbo),e(k,Bbo),e(k,rl),e(rl,lfe),e(lfe,Ibo),e(rl,Nbo),e(rl,Tj),e(Tj,qbo),e(rl,jbo),e(rl,Mj),e(Mj,Dbo),e(rl,Gbo),e(k,Obo),e(k,tl),e(tl,ife),e(ife,Vbo),e(tl,Xbo),e(tl,Ej),e(Ej,zbo),e(tl,Wbo),e(tl,Cj),e(Cj,Qbo),e(tl,Ubo),e(k,Hbo),e(k,al),e(al,dfe),e(dfe,Jbo),e(al,Ybo),e(al,wj),e(wj,Kbo),e(al,Zbo),e(al,Aj),e(Aj,evo),e(al,ovo),e(Sr,rvo),M(ap,Sr,null),e(xo,tvo),e(xo,np),M($y,np,null),e(np,avo),e(np,cfe),e(cfe,nvo),b(f,iUe,u),b(f,Zi,u),e(Zi,sp),e(sp,ffe),M(ky,ffe,null),e(Zi,svo),e(Zi,mfe),e(mfe,lvo),b(f,dUe,u),b(f,$o,u),M(Sy,$o,null),e($o,ivo),e($o,Ry),e(Ry,dvo),e(Ry,Lj),e(Lj,cvo),e(Ry,fvo),e($o,mvo),e($o,Py),e(Py,gvo),e(Py,gfe),e(gfe,hvo),e(Py,pvo),e($o,_vo),e($o,Je),M(By,Je,null),e(Je,uvo),e(Je,hfe),e(hfe,bvo),e(Je,vvo),e(Je,Oa),e(Oa,Fvo),e(Oa,pfe),e(pfe,Tvo),e(Oa,Mvo),e(Oa,_fe),e(_fe,Evo),e(Oa,Cvo),e(Oa,ufe),e(ufe,wvo),e(Oa,Avo),e(Je,Lvo),e(Je,Q),e(Q,lp),e(lp,bfe),e(bfe,yvo),e(lp,xvo),e(lp,yj),e(yj,$vo),e(lp,kvo),e(Q,Svo),e(Q,ip),e(ip,vfe),e(vfe,Rvo),e(ip,Pvo),e(ip,xj),e(xj,Bvo),e(ip,Ivo),e(Q,Nvo),e(Q,dp),e(dp,Ffe),e(Ffe,qvo),e(dp,jvo),e(dp,$j),e($j,Dvo),e(dp,Gvo),e(Q,Ovo),e(Q,cp),e(cp,Tfe),e(Tfe,Vvo),e(cp,Xvo),e(cp,kj),e(kj,zvo),e(cp,Wvo),e(Q,Qvo),e(Q,fp),e(fp,Mfe),e(Mfe,Uvo),e(fp,Hvo),e(fp,Sj),e(Sj,Jvo),e(fp,Yvo),e(Q,Kvo),e(Q,mp),e(mp,Efe),e(Efe,Zvo),e(mp,eFo),e(mp,Rj),e(Rj,oFo),e(mp,rFo),e(Q,tFo),e(Q,gp),e(gp,Cfe),e(Cfe,aFo),e(gp,nFo),e(gp,Pj),e(Pj,sFo),e(gp,lFo),e(Q,iFo),e(Q,hp),e(hp,wfe),e(wfe,dFo),e(hp,cFo),e(hp,Bj),e(Bj,fFo),e(hp,mFo),e(Q,gFo),e(Q,pp),e(pp,Afe),e(Afe,hFo),e(pp,pFo),e(pp,Ij),e(Ij,_Fo),e(pp,uFo),e(Q,bFo),e(Q,_p),e(_p,Lfe),e(Lfe,vFo),e(_p,FFo),e(_p,Nj),e(Nj,TFo),e(_p,MFo),e(Q,EFo),e(Q,up),e(up,yfe),e(yfe,CFo),e(up,wFo),e(up,qj),e(qj,AFo),e(up,LFo),e(Q,yFo),e(Q,bp),e(bp,xfe),e(xfe,xFo),e(bp,$Fo),e(bp,jj),e(jj,kFo),e(bp,SFo),e(Q,RFo),e(Q,vp),e(vp,$fe),e($fe,PFo),e(vp,BFo),e(vp,Dj),e(Dj,IFo),e(vp,NFo),e(Q,qFo),e(Q,Fp),e(Fp,kfe),e(kfe,jFo),e(Fp,DFo),e(Fp,Gj),e(Gj,GFo),e(Fp,OFo),e(Q,VFo),e(Q,Tp),e(Tp,Sfe),e(Sfe,XFo),e(Tp,zFo),e(Tp,Oj),e(Oj,WFo),e(Tp,QFo),e(Q,UFo),e(Q,Mp),e(Mp,Rfe),e(Rfe,HFo),e(Mp,JFo),e(Mp,Vj),e(Vj,YFo),e(Mp,KFo),e(Q,ZFo),e(Q,Ep),e(Ep,Pfe),e(Pfe,eTo),e(Ep,oTo),e(Ep,Xj),e(Xj,rTo),e(Ep,tTo),e(Q,aTo),e(Q,Cp),e(Cp,Bfe),e(Bfe,nTo),e(Cp,sTo),e(Cp,zj),e(zj,lTo),e(Cp,iTo),e(Q,dTo),e(Q,wp),e(wp,Ife),e(Ife,cTo),e(wp,fTo),e(wp,Wj),e(Wj,mTo),e(wp,gTo),e(Q,hTo),e(Q,Ap),e(Ap,Nfe),e(Nfe,pTo),e(Ap,_To),e(Ap,Qj),e(Qj,uTo),e(Ap,bTo),e(Q,vTo),e(Q,Lp),e(Lp,qfe),e(qfe,FTo),e(Lp,TTo),e(Lp,Uj),e(Uj,MTo),e(Lp,ETo),e(Q,CTo),e(Q,yp),e(yp,jfe),e(jfe,wTo),e(yp,ATo),e(yp,Hj),e(Hj,LTo),e(yp,yTo),e(Q,xTo),e(Q,xp),e(xp,Dfe),e(Dfe,$To),e(xp,kTo),e(xp,Jj),e(Jj,STo),e(xp,RTo),e(Q,PTo),e(Q,$p),e($p,Gfe),e(Gfe,BTo),e($p,ITo),e($p,Yj),e(Yj,NTo),e($p,qTo),e(Q,jTo),e(Q,kp),e(kp,Ofe),e(Ofe,DTo),e(kp,GTo),e(kp,Kj),e(Kj,OTo),e(kp,VTo),e(Q,XTo),e(Q,Sp),e(Sp,Vfe),e(Vfe,zTo),e(Sp,WTo),e(Sp,Zj),e(Zj,QTo),e(Sp,UTo),e(Q,HTo),e(Q,Rp),e(Rp,Xfe),e(Xfe,JTo),e(Rp,YTo),e(Rp,eD),e(eD,KTo),e(Rp,ZTo),e(Q,e8o),e(Q,Pp),e(Pp,zfe),e(zfe,o8o),e(Pp,r8o),e(Pp,oD),e(oD,t8o),e(Pp,a8o),e(Q,n8o),e(Q,Bp),e(Bp,Wfe),e(Wfe,s8o),e(Bp,l8o),e(Bp,rD),e(rD,i8o),e(Bp,d8o),e(Q,c8o),e(Q,Ip),e(Ip,Qfe),e(Qfe,f8o),e(Ip,m8o),e(Ip,tD),e(tD,g8o),e(Ip,h8o),e(Q,p8o),e(Q,Np),e(Np,Ufe),e(Ufe,_8o),e(Np,u8o),e(Np,aD),e(aD,b8o),e(Np,v8o),e(Q,F8o),e(Q,qp),e(qp,Hfe),e(Hfe,T8o),e(qp,M8o),e(qp,nD),e(nD,E8o),e(qp,C8o),e(Q,w8o),e(Q,jp),e(jp,Jfe),e(Jfe,A8o),e(jp,L8o),e(jp,sD),e(sD,y8o),e(jp,x8o),e(Q,$8o),e(Q,Dp),e(Dp,Yfe),e(Yfe,k8o),e(Dp,S8o),e(Dp,lD),e(lD,R8o),e(Dp,P8o),e(Q,B8o),e(Q,Gp),e(Gp,Kfe),e(Kfe,I8o),e(Gp,N8o),e(Gp,iD),e(iD,q8o),e(Gp,j8o),e(Q,D8o),e(Q,Op),e(Op,Zfe),e(Zfe,G8o),e(Op,O8o),e(Op,dD),e(dD,V8o),e(Op,X8o),e(Q,z8o),e(Q,Vp),e(Vp,eme),e(eme,W8o),e(Vp,Q8o),e(Vp,cD),e(cD,U8o),e(Vp,H8o),e(Q,J8o),e(Q,Xp),e(Xp,ome),e(ome,Y8o),e(Xp,K8o),e(Xp,fD),e(fD,Z8o),e(Xp,eMo),e(Je,oMo),M(zp,Je,null),e(Je,rMo),M(Wp,Je,null),e($o,tMo),e($o,Qp),M(Iy,Qp,null),e(Qp,aMo),e(Qp,rme),e(rme,nMo),b(f,cUe,u),b(f,ed,u),e(ed,Up),e(Up,tme),M(Ny,tme,null),e(ed,sMo),e(ed,ame),e(ame,lMo),b(f,fUe,u),b(f,ko,u),M(qy,ko,null),e(ko,iMo),e(ko,jy),e(jy,dMo),e(jy,mD),e(mD,cMo),e(jy,fMo),e(ko,mMo),e(ko,Dy),e(Dy,gMo),e(Dy,nme),e(nme,hMo),e(Dy,pMo),e(ko,_Mo),e(ko,Ye),M(Gy,Ye,null),e(Ye,uMo),e(Ye,sme),e(sme,bMo),e(Ye,vMo),e(Ye,od),e(od,FMo),e(od,lme),e(lme,TMo),e(od,MMo),e(od,ime),e(ime,EMo),e(od,CMo),e(Ye,wMo),e(Ye,ie),e(ie,Hp),e(Hp,dme),e(dme,AMo),e(Hp,LMo),e(Hp,gD),e(gD,yMo),e(Hp,xMo),e(ie,$Mo),e(ie,Jp),e(Jp,cme),e(cme,kMo),e(Jp,SMo),e(Jp,hD),e(hD,RMo),e(Jp,PMo),e(ie,BMo),e(ie,Yp),e(Yp,fme),e(fme,IMo),e(Yp,NMo),e(Yp,pD),e(pD,qMo),e(Yp,jMo),e(ie,DMo),e(ie,Kp),e(Kp,mme),e(mme,GMo),e(Kp,OMo),e(Kp,_D),e(_D,VMo),e(Kp,XMo),e(ie,zMo),e(ie,Zp),e(Zp,gme),e(gme,WMo),e(Zp,QMo),e(Zp,uD),e(uD,UMo),e(Zp,HMo),e(ie,JMo),e(ie,e_),e(e_,hme),e(hme,YMo),e(e_,KMo),e(e_,bD),e(bD,ZMo),e(e_,eEo),e(ie,oEo),e(ie,o_),e(o_,pme),e(pme,rEo),e(o_,tEo),e(o_,vD),e(vD,aEo),e(o_,nEo),e(ie,sEo),e(ie,r_),e(r_,_me),e(_me,lEo),e(r_,iEo),e(r_,FD),e(FD,dEo),e(r_,cEo),e(ie,fEo),e(ie,t_),e(t_,ume),e(ume,mEo),e(t_,gEo),e(t_,TD),e(TD,hEo),e(t_,pEo),e(ie,_Eo),e(ie,a_),e(a_,bme),e(bme,uEo),e(a_,bEo),e(a_,MD),e(MD,vEo),e(a_,FEo),e(ie,TEo),e(ie,n_),e(n_,vme),e(vme,MEo),e(n_,EEo),e(n_,ED),e(ED,CEo),e(n_,wEo),e(ie,AEo),e(ie,s_),e(s_,Fme),e(Fme,LEo),e(s_,yEo),e(s_,CD),e(CD,xEo),e(s_,$Eo),e(ie,kEo),e(ie,l_),e(l_,Tme),e(Tme,SEo),e(l_,REo),e(l_,wD),e(wD,PEo),e(l_,BEo),e(ie,IEo),e(ie,i_),e(i_,Mme),e(Mme,NEo),e(i_,qEo),e(i_,AD),e(AD,jEo),e(i_,DEo),e(ie,GEo),e(ie,d_),e(d_,Eme),e(Eme,OEo),e(d_,VEo),e(d_,LD),e(LD,XEo),e(d_,zEo),e(ie,WEo),e(ie,c_),e(c_,Cme),e(Cme,QEo),e(c_,UEo),e(c_,yD),e(yD,HEo),e(c_,JEo),e(ie,YEo),e(ie,f_),e(f_,wme),e(wme,KEo),e(f_,ZEo),e(f_,xD),e(xD,e4o),e(f_,o4o),e(ie,r4o),e(ie,m_),e(m_,Ame),e(Ame,t4o),e(m_,a4o),e(m_,$D),e($D,n4o),e(m_,s4o),e(ie,l4o),e(ie,g_),e(g_,Lme),e(Lme,i4o),e(g_,d4o),e(g_,kD),e(kD,c4o),e(g_,f4o),e(ie,m4o),e(ie,h_),e(h_,yme),e(yme,g4o),e(h_,h4o),e(h_,SD),e(SD,p4o),e(h_,_4o),e(Ye,u4o),M(p_,Ye,null),e(Ye,b4o),M(__,Ye,null),e(ko,v4o),e(ko,u_),M(Oy,u_,null),e(u_,F4o),e(u_,xme),e(xme,T4o),b(f,mUe,u),b(f,rd,u),e(rd,b_),e(b_,$me),M(Vy,$me,null),e(rd,M4o),e(rd,kme),e(kme,E4o),b(f,gUe,u),b(f,So,u),M(Xy,So,null),e(So,C4o),e(So,td),e(td,w4o),e(td,RD),e(RD,A4o),e(td,L4o),e(td,PD),e(PD,y4o),e(td,x4o),e(So,$4o),e(So,zy),e(zy,k4o),e(zy,Sme),e(Sme,S4o),e(zy,R4o),e(So,P4o),e(So,mt),M(Wy,mt,null),e(mt,B4o),e(mt,Rme),e(Rme,I4o),e(mt,N4o),e(mt,ad),e(ad,q4o),e(ad,Pme),e(Pme,j4o),e(ad,D4o),e(ad,BD),e(BD,G4o),e(ad,O4o),e(mt,V4o),M(v_,mt,null),e(So,X4o),e(So,Ke),M(Qy,Ke,null),e(Ke,z4o),e(Ke,Bme),e(Bme,W4o),e(Ke,Q4o),e(Ke,Va),e(Va,U4o),e(Va,Ime),e(Ime,H4o),e(Va,J4o),e(Va,Nme),e(Nme,Y4o),e(Va,K4o),e(Va,qme),e(qme,Z4o),e(Va,eCo),e(Ke,oCo),e(Ke,y),e(y,F_),e(F_,jme),e(jme,rCo),e(F_,tCo),e(F_,ID),e(ID,aCo),e(F_,nCo),e(y,sCo),e(y,T_),e(T_,Dme),e(Dme,lCo),e(T_,iCo),e(T_,ND),e(ND,dCo),e(T_,cCo),e(y,fCo),e(y,M_),e(M_,Gme),e(Gme,mCo),e(M_,gCo),e(M_,qD),e(qD,hCo),e(M_,pCo),e(y,_Co),e(y,E_),e(E_,Ome),e(Ome,uCo),e(E_,bCo),e(E_,jD),e(jD,vCo),e(E_,FCo),e(y,TCo),e(y,C_),e(C_,Vme),e(Vme,MCo),e(C_,ECo),e(C_,DD),e(DD,CCo),e(C_,wCo),e(y,ACo),e(y,w_),e(w_,Xme),e(Xme,LCo),e(w_,yCo),e(w_,GD),e(GD,xCo),e(w_,$Co),e(y,kCo),e(y,A_),e(A_,zme),e(zme,SCo),e(A_,RCo),e(A_,OD),e(OD,PCo),e(A_,BCo),e(y,ICo),e(y,L_),e(L_,Wme),e(Wme,NCo),e(L_,qCo),e(L_,VD),e(VD,jCo),e(L_,DCo),e(y,GCo),e(y,y_),e(y_,Qme),e(Qme,OCo),e(y_,VCo),e(y_,XD),e(XD,XCo),e(y_,zCo),e(y,WCo),e(y,x_),e(x_,Ume),e(Ume,QCo),e(x_,UCo),e(x_,zD),e(zD,HCo),e(x_,JCo),e(y,YCo),e(y,$_),e($_,Hme),e(Hme,KCo),e($_,ZCo),e($_,WD),e(WD,e3o),e($_,o3o),e(y,r3o),e(y,k_),e(k_,Jme),e(Jme,t3o),e(k_,a3o),e(k_,QD),e(QD,n3o),e(k_,s3o),e(y,l3o),e(y,S_),e(S_,Yme),e(Yme,i3o),e(S_,d3o),e(S_,UD),e(UD,c3o),e(S_,f3o),e(y,m3o),e(y,R_),e(R_,Kme),e(Kme,g3o),e(R_,h3o),e(R_,HD),e(HD,p3o),e(R_,_3o),e(y,u3o),e(y,P_),e(P_,Zme),e(Zme,b3o),e(P_,v3o),e(P_,JD),e(JD,F3o),e(P_,T3o),e(y,M3o),e(y,B_),e(B_,ege),e(ege,E3o),e(B_,C3o),e(B_,YD),e(YD,w3o),e(B_,A3o),e(y,L3o),e(y,I_),e(I_,oge),e(oge,y3o),e(I_,x3o),e(I_,KD),e(KD,$3o),e(I_,k3o),e(y,S3o),e(y,N_),e(N_,rge),e(rge,R3o),e(N_,P3o),e(N_,ZD),e(ZD,B3o),e(N_,I3o),e(y,N3o),e(y,q_),e(q_,tge),e(tge,q3o),e(q_,j3o),e(q_,eG),e(eG,D3o),e(q_,G3o),e(y,O3o),e(y,j_),e(j_,age),e(age,V3o),e(j_,X3o),e(j_,oG),e(oG,z3o),e(j_,W3o),e(y,Q3o),e(y,D_),e(D_,nge),e(nge,U3o),e(D_,H3o),e(D_,rG),e(rG,J3o),e(D_,Y3o),e(y,K3o),e(y,G_),e(G_,sge),e(sge,Z3o),e(G_,e0o),e(G_,tG),e(tG,o0o),e(G_,r0o),e(y,t0o),e(y,O_),e(O_,lge),e(lge,a0o),e(O_,n0o),e(O_,aG),e(aG,s0o),e(O_,l0o),e(y,i0o),e(y,V_),e(V_,ige),e(ige,d0o),e(V_,c0o),e(V_,nG),e(nG,f0o),e(V_,m0o),e(y,g0o),e(y,X_),e(X_,dge),e(dge,h0o),e(X_,p0o),e(X_,sG),e(sG,_0o),e(X_,u0o),e(y,b0o),e(y,z_),e(z_,cge),e(cge,v0o),e(z_,F0o),e(z_,lG),e(lG,T0o),e(z_,M0o),e(y,E0o),e(y,W_),e(W_,fge),e(fge,C0o),e(W_,w0o),e(W_,iG),e(iG,A0o),e(W_,L0o),e(y,y0o),e(y,Q_),e(Q_,mge),e(mge,x0o),e(Q_,$0o),e(Q_,dG),e(dG,k0o),e(Q_,S0o),e(y,R0o),e(y,U_),e(U_,gge),e(gge,P0o),e(U_,B0o),e(U_,cG),e(cG,I0o),e(U_,N0o),e(y,q0o),e(y,H_),e(H_,hge),e(hge,j0o),e(H_,D0o),e(H_,fG),e(fG,G0o),e(H_,O0o),e(y,V0o),e(y,J_),e(J_,pge),e(pge,X0o),e(J_,z0o),e(J_,mG),e(mG,W0o),e(J_,Q0o),e(y,U0o),e(y,Y_),e(Y_,_ge),e(_ge,H0o),e(Y_,J0o),e(Y_,gG),e(gG,Y0o),e(Y_,K0o),e(y,Z0o),e(y,K_),e(K_,uge),e(uge,ewo),e(K_,owo),e(K_,hG),e(hG,rwo),e(K_,two),e(y,awo),e(y,Z_),e(Z_,bge),e(bge,nwo),e(Z_,swo),e(Z_,pG),e(pG,lwo),e(Z_,iwo),e(y,dwo),e(y,eu),e(eu,vge),e(vge,cwo),e(eu,fwo),e(eu,_G),e(_G,mwo),e(eu,gwo),e(y,hwo),e(y,nl),e(nl,Fge),e(Fge,pwo),e(nl,_wo),e(nl,uG),e(uG,uwo),e(nl,bwo),e(nl,bG),e(bG,vwo),e(nl,Fwo),e(y,Two),e(y,ou),e(ou,Tge),e(Tge,Mwo),e(ou,Ewo),e(ou,vG),e(vG,Cwo),e(ou,wwo),e(y,Awo),e(y,ru),e(ru,Mge),e(Mge,Lwo),e(ru,ywo),e(ru,FG),e(FG,xwo),e(ru,$wo),e(y,kwo),e(y,tu),e(tu,Ege),e(Ege,Swo),e(tu,Rwo),e(tu,TG),e(TG,Pwo),e(tu,Bwo),e(y,Iwo),e(y,au),e(au,Cge),e(Cge,Nwo),e(au,qwo),e(au,MG),e(MG,jwo),e(au,Dwo),e(y,Gwo),e(y,nu),e(nu,wge),e(wge,Owo),e(nu,Vwo),e(nu,EG),e(EG,Xwo),e(nu,zwo),e(y,Wwo),e(y,su),e(su,Age),e(Age,Qwo),e(su,Uwo),e(su,CG),e(CG,Hwo),e(su,Jwo),e(y,Ywo),e(y,lu),e(lu,Lge),e(Lge,Kwo),e(lu,Zwo),e(lu,wG),e(wG,e6o),e(lu,o6o),e(y,r6o),e(y,iu),e(iu,yge),e(yge,t6o),e(iu,a6o),e(iu,AG),e(AG,n6o),e(iu,s6o),e(y,l6o),e(y,du),e(du,xge),e(xge,i6o),e(du,d6o),e(du,LG),e(LG,c6o),e(du,f6o),e(y,m6o),e(y,cu),e(cu,$ge),e($ge,g6o),e(cu,h6o),e(cu,yG),e(yG,p6o),e(cu,_6o),e(y,u6o),e(y,fu),e(fu,kge),e(kge,b6o),e(fu,v6o),e(fu,xG),e(xG,F6o),e(fu,T6o),e(y,M6o),e(y,mu),e(mu,Sge),e(Sge,E6o),e(mu,C6o),e(mu,$G),e($G,w6o),e(mu,A6o),e(y,L6o),e(y,gu),e(gu,Rge),e(Rge,y6o),e(gu,x6o),e(gu,kG),e(kG,$6o),e(gu,k6o),e(y,S6o),e(y,hu),e(hu,Pge),e(Pge,R6o),e(hu,P6o),e(hu,SG),e(SG,B6o),e(hu,I6o),e(y,N6o),e(y,pu),e(pu,Bge),e(Bge,q6o),e(pu,j6o),e(pu,RG),e(RG,D6o),e(pu,G6o),e(y,O6o),e(y,_u),e(_u,Ige),e(Ige,V6o),e(_u,X6o),e(_u,PG),e(PG,z6o),e(_u,W6o),e(y,Q6o),e(y,uu),e(uu,Nge),e(Nge,U6o),e(uu,H6o),e(uu,BG),e(BG,J6o),e(uu,Y6o),e(y,K6o),e(y,bu),e(bu,qge),e(qge,Z6o),e(bu,eAo),e(bu,IG),e(IG,oAo),e(bu,rAo),e(y,tAo),e(y,vu),e(vu,jge),e(jge,aAo),e(vu,nAo),e(vu,NG),e(NG,sAo),e(vu,lAo),e(y,iAo),e(y,Fu),e(Fu,Dge),e(Dge,dAo),e(Fu,cAo),e(Fu,qG),e(qG,fAo),e(Fu,mAo),e(y,gAo),e(y,Tu),e(Tu,Gge),e(Gge,hAo),e(Tu,pAo),e(Tu,jG),e(jG,_Ao),e(Tu,uAo),e(y,bAo),e(y,Mu),e(Mu,Oge),e(Oge,vAo),e(Mu,FAo),e(Mu,DG),e(DG,TAo),e(Mu,MAo),e(y,EAo),e(y,Eu),e(Eu,Vge),e(Vge,CAo),e(Eu,wAo),e(Eu,GG),e(GG,AAo),e(Eu,LAo),e(y,yAo),e(y,Cu),e(Cu,Xge),e(Xge,xAo),e(Cu,$Ao),e(Cu,OG),e(OG,kAo),e(Cu,SAo),e(y,RAo),e(y,wu),e(wu,zge),e(zge,PAo),e(wu,BAo),e(wu,VG),e(VG,IAo),e(wu,NAo),e(y,qAo),e(y,Au),e(Au,Wge),e(Wge,jAo),e(Au,DAo),e(Au,XG),e(XG,GAo),e(Au,OAo),e(y,VAo),e(y,Lu),e(Lu,Qge),e(Qge,XAo),e(Lu,zAo),e(Lu,zG),e(zG,WAo),e(Lu,QAo),e(y,UAo),e(y,yu),e(yu,Uge),e(Uge,HAo),e(yu,JAo),e(yu,WG),e(WG,YAo),e(yu,KAo),e(y,ZAo),e(y,xu),e(xu,Hge),e(Hge,e7o),e(xu,o7o),e(xu,QG),e(QG,r7o),e(xu,t7o),e(y,a7o),e(y,$u),e($u,Jge),e(Jge,n7o),e($u,s7o),e($u,UG),e(UG,l7o),e($u,i7o),e(y,d7o),e(y,ku),e(ku,Yge),e(Yge,c7o),e(ku,f7o),e(ku,HG),e(HG,m7o),e(ku,g7o),e(y,h7o),e(y,Su),e(Su,Kge),e(Kge,p7o),e(Su,_7o),e(Su,JG),e(JG,u7o),e(Su,b7o),e(y,v7o),e(y,Ru),e(Ru,Zge),e(Zge,F7o),e(Ru,T7o),e(Ru,YG),e(YG,M7o),e(Ru,E7o),e(y,C7o),e(y,Pu),e(Pu,ehe),e(ehe,w7o),e(Pu,A7o),e(Pu,KG),e(KG,L7o),e(Pu,y7o),e(y,x7o),e(y,Bu),e(Bu,ohe),e(ohe,$7o),e(Bu,k7o),e(Bu,ZG),e(ZG,S7o),e(Bu,R7o),e(y,P7o),e(y,Iu),e(Iu,rhe),e(rhe,B7o),e(Iu,I7o),e(Iu,eO),e(eO,N7o),e(Iu,q7o),e(y,j7o),e(y,Nu),e(Nu,the),e(the,D7o),e(Nu,G7o),e(Nu,oO),e(oO,O7o),e(Nu,V7o),e(y,X7o),e(y,qu),e(qu,ahe),e(ahe,z7o),e(qu,W7o),e(qu,rO),e(rO,Q7o),e(qu,U7o),e(y,H7o),e(y,ju),e(ju,nhe),e(nhe,J7o),e(ju,Y7o),e(ju,tO),e(tO,K7o),e(ju,Z7o),e(y,eLo),e(y,Du),e(Du,she),e(she,oLo),e(Du,rLo),e(Du,aO),e(aO,tLo),e(Du,aLo),e(y,nLo),e(y,Gu),e(Gu,lhe),e(lhe,sLo),e(Gu,lLo),e(Gu,nO),e(nO,iLo),e(Gu,dLo),e(y,cLo),e(y,Ou),e(Ou,ihe),e(ihe,fLo),e(Ou,mLo),e(Ou,sO),e(sO,gLo),e(Ou,hLo),e(y,pLo),e(y,Vu),e(Vu,dhe),e(dhe,_Lo),e(Vu,uLo),e(Vu,lO),e(lO,bLo),e(Vu,vLo),e(y,FLo),e(y,Xu),e(Xu,che),e(che,TLo),e(Xu,MLo),e(Xu,iO),e(iO,ELo),e(Xu,CLo),e(y,wLo),e(y,zu),e(zu,fhe),e(fhe,ALo),e(zu,LLo),e(zu,dO),e(dO,yLo),e(zu,xLo),e(y,$Lo),e(y,Wu),e(Wu,mhe),e(mhe,kLo),e(Wu,SLo),e(Wu,cO),e(cO,RLo),e(Wu,PLo),e(y,BLo),e(y,Qu),e(Qu,ghe),e(ghe,ILo),e(Qu,NLo),e(Qu,fO),e(fO,qLo),e(Qu,jLo),e(y,DLo),e(y,Uu),e(Uu,hhe),e(hhe,GLo),e(Uu,OLo),e(Uu,mO),e(mO,VLo),e(Uu,XLo),e(y,zLo),e(y,Hu),e(Hu,phe),e(phe,WLo),e(Hu,QLo),e(Hu,gO),e(gO,ULo),e(Hu,HLo),e(y,JLo),e(y,Ju),e(Ju,_he),e(_he,YLo),e(Ju,KLo),e(Ju,hO),e(hO,ZLo),e(Ju,eyo),e(y,oyo),e(y,Yu),e(Yu,uhe),e(uhe,ryo),e(Yu,tyo),e(Yu,pO),e(pO,ayo),e(Yu,nyo),e(y,syo),e(y,Ku),e(Ku,bhe),e(bhe,lyo),e(Ku,iyo),e(Ku,_O),e(_O,dyo),e(Ku,cyo),e(y,fyo),e(y,Zu),e(Zu,vhe),e(vhe,myo),e(Zu,gyo),e(Zu,uO),e(uO,hyo),e(Zu,pyo),e(y,_yo),e(y,e5),e(e5,Fhe),e(Fhe,uyo),e(e5,byo),e(e5,bO),e(bO,vyo),e(e5,Fyo),e(y,Tyo),e(y,o5),e(o5,The),e(The,Myo),e(o5,Eyo),e(o5,vO),e(vO,Cyo),e(o5,wyo),e(y,Ayo),e(y,r5),e(r5,Mhe),e(Mhe,Lyo),e(r5,yyo),e(r5,FO),e(FO,xyo),e(r5,$yo),e(y,kyo),e(y,t5),e(t5,Ehe),e(Ehe,Syo),e(t5,Ryo),e(t5,TO),e(TO,Pyo),e(t5,Byo),e(y,Iyo),e(y,a5),e(a5,Che),e(Che,Nyo),e(a5,qyo),e(a5,MO),e(MO,jyo),e(a5,Dyo),e(y,Gyo),e(y,n5),e(n5,whe),e(whe,Oyo),e(n5,Vyo),e(n5,EO),e(EO,Xyo),e(n5,zyo),e(y,Wyo),e(y,s5),e(s5,Ahe),e(Ahe,Qyo),e(s5,Uyo),e(s5,CO),e(CO,Hyo),e(s5,Jyo),e(y,Yyo),e(y,l5),e(l5,Lhe),e(Lhe,Kyo),e(l5,Zyo),e(l5,wO),e(wO,e9o),e(l5,o9o),e(y,r9o),e(y,i5),e(i5,yhe),e(yhe,t9o),e(i5,a9o),e(i5,AO),e(AO,n9o),e(i5,s9o),e(y,l9o),e(y,d5),e(d5,xhe),e(xhe,i9o),e(d5,d9o),e(d5,LO),e(LO,c9o),e(d5,f9o),e(y,m9o),e(y,c5),e(c5,$he),e($he,g9o),e(c5,h9o),e(c5,yO),e(yO,p9o),e(c5,_9o),e(y,u9o),e(y,f5),e(f5,khe),e(khe,b9o),e(f5,v9o),e(f5,xO),e(xO,F9o),e(f5,T9o),e(y,M9o),e(y,m5),e(m5,She),e(She,E9o),e(m5,C9o),e(m5,$O),e($O,w9o),e(m5,A9o),e(y,L9o),e(y,g5),e(g5,Rhe),e(Rhe,y9o),e(g5,x9o),e(g5,kO),e(kO,$9o),e(g5,k9o),e(y,S9o),e(y,h5),e(h5,Phe),e(Phe,R9o),e(h5,P9o),e(h5,SO),e(SO,B9o),e(h5,I9o),e(y,N9o),e(y,p5),e(p5,Bhe),e(Bhe,q9o),e(p5,j9o),e(p5,RO),e(RO,D9o),e(p5,G9o),e(y,O9o),e(y,_5),e(_5,Ihe),e(Ihe,V9o),e(_5,X9o),e(_5,PO),e(PO,z9o),e(_5,W9o),e(y,Q9o),e(y,u5),e(u5,Nhe),e(Nhe,U9o),e(u5,H9o),e(u5,BO),e(BO,J9o),e(u5,Y9o),e(y,K9o),e(y,b5),e(b5,qhe),e(qhe,Z9o),e(b5,exo),e(b5,IO),e(IO,oxo),e(b5,rxo),e(y,txo),e(y,v5),e(v5,jhe),e(jhe,axo),e(v5,nxo),e(v5,NO),e(NO,sxo),e(v5,lxo),e(y,ixo),e(y,F5),e(F5,Dhe),e(Dhe,dxo),e(F5,cxo),e(F5,qO),e(qO,fxo),e(F5,mxo),e(y,gxo),e(y,T5),e(T5,Ghe),e(Ghe,hxo),e(T5,pxo),e(T5,jO),e(jO,_xo),e(T5,uxo),e(y,bxo),e(y,M5),e(M5,Ohe),e(Ohe,vxo),e(M5,Fxo),e(M5,DO),e(DO,Txo),e(M5,Mxo),e(y,Exo),e(y,E5),e(E5,Vhe),e(Vhe,Cxo),e(E5,wxo),e(E5,GO),e(GO,Axo),e(E5,Lxo),e(y,yxo),e(y,C5),e(C5,Xhe),e(Xhe,xxo),e(C5,$xo),e(C5,OO),e(OO,kxo),e(C5,Sxo),e(y,Rxo),e(y,w5),e(w5,zhe),e(zhe,Pxo),e(w5,Bxo),e(w5,VO),e(VO,Ixo),e(w5,Nxo),e(y,qxo),e(y,A5),e(A5,Whe),e(Whe,jxo),e(A5,Dxo),e(A5,XO),e(XO,Gxo),e(A5,Oxo),e(Ke,Vxo),e(Ke,L5),e(L5,Xxo),e(L5,Qhe),e(Qhe,zxo),e(L5,Wxo),e(L5,Uhe),e(Uhe,Qxo),e(Ke,Uxo),M(y5,Ke,null),b(f,hUe,u),b(f,nd,u),e(nd,x5),e(x5,Hhe),M(Uy,Hhe,null),e(nd,Hxo),e(nd,Jhe),e(Jhe,Jxo),b(f,pUe,u),b(f,Ro,u),M(Hy,Ro,null),e(Ro,Yxo),e(Ro,sd),e(sd,Kxo),e(sd,zO),e(zO,Zxo),e(sd,e$o),e(sd,WO),e(WO,o$o),e(sd,r$o),e(Ro,t$o),e(Ro,Jy),e(Jy,a$o),e(Jy,Yhe),e(Yhe,n$o),e(Jy,s$o),e(Ro,l$o),e(Ro,gt),M(Yy,gt,null),e(gt,i$o),e(gt,Khe),e(Khe,d$o),e(gt,c$o),e(gt,ld),e(ld,f$o),e(ld,Zhe),e(Zhe,m$o),e(ld,g$o),e(ld,QO),e(QO,h$o),e(ld,p$o),e(gt,_$o),M($5,gt,null),e(Ro,u$o),e(Ro,Ze),M(Ky,Ze,null),e(Ze,b$o),e(Ze,epe),e(epe,v$o),e(Ze,F$o),e(Ze,Xa),e(Xa,T$o),e(Xa,ope),e(ope,M$o),e(Xa,E$o),e(Xa,rpe),e(rpe,C$o),e(Xa,w$o),e(Xa,tpe),e(tpe,A$o),e(Xa,L$o),e(Ze,y$o),e(Ze,G),e(G,k5),e(k5,ape),e(ape,x$o),e(k5,$$o),e(k5,UO),e(UO,k$o),e(k5,S$o),e(G,R$o),e(G,S5),e(S5,npe),e(npe,P$o),e(S5,B$o),e(S5,HO),e(HO,I$o),e(S5,N$o),e(G,q$o),e(G,R5),e(R5,spe),e(spe,j$o),e(R5,D$o),e(R5,JO),e(JO,G$o),e(R5,O$o),e(G,V$o),e(G,P5),e(P5,lpe),e(lpe,X$o),e(P5,z$o),e(P5,YO),e(YO,W$o),e(P5,Q$o),e(G,U$o),e(G,B5),e(B5,ipe),e(ipe,H$o),e(B5,J$o),e(B5,KO),e(KO,Y$o),e(B5,K$o),e(G,Z$o),e(G,I5),e(I5,dpe),e(dpe,eko),e(I5,oko),e(I5,ZO),e(ZO,rko),e(I5,tko),e(G,ako),e(G,N5),e(N5,cpe),e(cpe,nko),e(N5,sko),e(N5,eV),e(eV,lko),e(N5,iko),e(G,dko),e(G,q5),e(q5,fpe),e(fpe,cko),e(q5,fko),e(q5,oV),e(oV,mko),e(q5,gko),e(G,hko),e(G,j5),e(j5,mpe),e(mpe,pko),e(j5,_ko),e(j5,rV),e(rV,uko),e(j5,bko),e(G,vko),e(G,D5),e(D5,gpe),e(gpe,Fko),e(D5,Tko),e(D5,tV),e(tV,Mko),e(D5,Eko),e(G,Cko),e(G,G5),e(G5,hpe),e(hpe,wko),e(G5,Ako),e(G5,aV),e(aV,Lko),e(G5,yko),e(G,xko),e(G,O5),e(O5,ppe),e(ppe,$ko),e(O5,kko),e(O5,nV),e(nV,Sko),e(O5,Rko),e(G,Pko),e(G,V5),e(V5,_pe),e(_pe,Bko),e(V5,Iko),e(V5,sV),e(sV,Nko),e(V5,qko),e(G,jko),e(G,X5),e(X5,upe),e(upe,Dko),e(X5,Gko),e(X5,lV),e(lV,Oko),e(X5,Vko),e(G,Xko),e(G,z5),e(z5,bpe),e(bpe,zko),e(z5,Wko),e(z5,iV),e(iV,Qko),e(z5,Uko),e(G,Hko),e(G,W5),e(W5,vpe),e(vpe,Jko),e(W5,Yko),e(W5,dV),e(dV,Kko),e(W5,Zko),e(G,eSo),e(G,Q5),e(Q5,Fpe),e(Fpe,oSo),e(Q5,rSo),e(Q5,cV),e(cV,tSo),e(Q5,aSo),e(G,nSo),e(G,U5),e(U5,Tpe),e(Tpe,sSo),e(U5,lSo),e(U5,fV),e(fV,iSo),e(U5,dSo),e(G,cSo),e(G,H5),e(H5,Mpe),e(Mpe,fSo),e(H5,mSo),e(H5,mV),e(mV,gSo),e(H5,hSo),e(G,pSo),e(G,J5),e(J5,Epe),e(Epe,_So),e(J5,uSo),e(J5,gV),e(gV,bSo),e(J5,vSo),e(G,FSo),e(G,Y5),e(Y5,Cpe),e(Cpe,TSo),e(Y5,MSo),e(Y5,hV),e(hV,ESo),e(Y5,CSo),e(G,wSo),e(G,K5),e(K5,wpe),e(wpe,ASo),e(K5,LSo),e(K5,pV),e(pV,ySo),e(K5,xSo),e(G,$So),e(G,Z5),e(Z5,Ape),e(Ape,kSo),e(Z5,SSo),e(Z5,_V),e(_V,RSo),e(Z5,PSo),e(G,BSo),e(G,e1),e(e1,Lpe),e(Lpe,ISo),e(e1,NSo),e(e1,uV),e(uV,qSo),e(e1,jSo),e(G,DSo),e(G,o1),e(o1,ype),e(ype,GSo),e(o1,OSo),e(o1,bV),e(bV,VSo),e(o1,XSo),e(G,zSo),e(G,r1),e(r1,xpe),e(xpe,WSo),e(r1,QSo),e(r1,vV),e(vV,USo),e(r1,HSo),e(G,JSo),e(G,t1),e(t1,$pe),e($pe,YSo),e(t1,KSo),e(t1,FV),e(FV,ZSo),e(t1,eRo),e(G,oRo),e(G,a1),e(a1,kpe),e(kpe,rRo),e(a1,tRo),e(a1,TV),e(TV,aRo),e(a1,nRo),e(G,sRo),e(G,n1),e(n1,Spe),e(Spe,lRo),e(n1,iRo),e(n1,MV),e(MV,dRo),e(n1,cRo),e(G,fRo),e(G,s1),e(s1,Rpe),e(Rpe,mRo),e(s1,gRo),e(s1,EV),e(EV,hRo),e(s1,pRo),e(G,_Ro),e(G,l1),e(l1,Ppe),e(Ppe,uRo),e(l1,bRo),e(l1,CV),e(CV,vRo),e(l1,FRo),e(G,TRo),e(G,i1),e(i1,Bpe),e(Bpe,MRo),e(i1,ERo),e(i1,wV),e(wV,CRo),e(i1,wRo),e(G,ARo),e(G,d1),e(d1,Ipe),e(Ipe,LRo),e(d1,yRo),e(d1,AV),e(AV,xRo),e(d1,$Ro),e(G,kRo),e(G,c1),e(c1,Npe),e(Npe,SRo),e(c1,RRo),e(c1,LV),e(LV,PRo),e(c1,BRo),e(G,IRo),e(G,f1),e(f1,qpe),e(qpe,NRo),e(f1,qRo),e(f1,yV),e(yV,jRo),e(f1,DRo),e(G,GRo),e(G,m1),e(m1,jpe),e(jpe,ORo),e(m1,VRo),e(m1,xV),e(xV,XRo),e(m1,zRo),e(G,WRo),e(G,g1),e(g1,Dpe),e(Dpe,QRo),e(g1,URo),e(g1,$V),e($V,HRo),e(g1,JRo),e(G,YRo),e(G,h1),e(h1,Gpe),e(Gpe,KRo),e(h1,ZRo),e(h1,kV),e(kV,ePo),e(h1,oPo),e(G,rPo),e(G,p1),e(p1,Ope),e(Ope,tPo),e(p1,aPo),e(p1,SV),e(SV,nPo),e(p1,sPo),e(G,lPo),e(G,_1),e(_1,Vpe),e(Vpe,iPo),e(_1,dPo),e(_1,RV),e(RV,cPo),e(_1,fPo),e(G,mPo),e(G,u1),e(u1,Xpe),e(Xpe,gPo),e(u1,hPo),e(u1,PV),e(PV,pPo),e(u1,_Po),e(G,uPo),e(G,b1),e(b1,zpe),e(zpe,bPo),e(b1,vPo),e(b1,BV),e(BV,FPo),e(b1,TPo),e(G,MPo),e(G,v1),e(v1,Wpe),e(Wpe,EPo),e(v1,CPo),e(v1,IV),e(IV,wPo),e(v1,APo),e(G,LPo),e(G,F1),e(F1,Qpe),e(Qpe,yPo),e(F1,xPo),e(F1,NV),e(NV,$Po),e(F1,kPo),e(G,SPo),e(G,T1),e(T1,Upe),e(Upe,RPo),e(T1,PPo),e(T1,qV),e(qV,BPo),e(T1,IPo),e(G,NPo),e(G,M1),e(M1,Hpe),e(Hpe,qPo),e(M1,jPo),e(M1,jV),e(jV,DPo),e(M1,GPo),e(G,OPo),e(G,E1),e(E1,Jpe),e(Jpe,VPo),e(E1,XPo),e(E1,DV),e(DV,zPo),e(E1,WPo),e(Ze,QPo),e(Ze,C1),e(C1,UPo),e(C1,Ype),e(Ype,HPo),e(C1,JPo),e(C1,Kpe),e(Kpe,YPo),e(Ze,KPo),M(w1,Ze,null),b(f,_Ue,u),b(f,id,u),e(id,A1),e(A1,Zpe),M(Zy,Zpe,null),e(id,ZPo),e(id,e_e),e(e_e,eBo),b(f,uUe,u),b(f,Po,u),M(e9,Po,null),e(Po,oBo),e(Po,dd),e(dd,rBo),e(dd,GV),e(GV,tBo),e(dd,aBo),e(dd,OV),e(OV,nBo),e(dd,sBo),e(Po,lBo),e(Po,o9),e(o9,iBo),e(o9,o_e),e(o_e,dBo),e(o9,cBo),e(Po,fBo),e(Po,ht),M(r9,ht,null),e(ht,mBo),e(ht,r_e),e(r_e,gBo),e(ht,hBo),e(ht,cd),e(cd,pBo),e(cd,t_e),e(t_e,_Bo),e(cd,uBo),e(cd,VV),e(VV,bBo),e(cd,vBo),e(ht,FBo),M(L1,ht,null),e(Po,TBo),e(Po,eo),M(t9,eo,null),e(eo,MBo),e(eo,a_e),e(a_e,EBo),e(eo,CBo),e(eo,za),e(za,wBo),e(za,n_e),e(n_e,ABo),e(za,LBo),e(za,s_e),e(s_e,yBo),e(za,xBo),e(za,l_e),e(l_e,$Bo),e(za,kBo),e(eo,SBo),e(eo,z),e(z,y1),e(y1,i_e),e(i_e,RBo),e(y1,PBo),e(y1,XV),e(XV,BBo),e(y1,IBo),e(z,NBo),e(z,x1),e(x1,d_e),e(d_e,qBo),e(x1,jBo),e(x1,zV),e(zV,DBo),e(x1,GBo),e(z,OBo),e(z,$1),e($1,c_e),e(c_e,VBo),e($1,XBo),e($1,WV),e(WV,zBo),e($1,WBo),e(z,QBo),e(z,k1),e(k1,f_e),e(f_e,UBo),e(k1,HBo),e(k1,QV),e(QV,JBo),e(k1,YBo),e(z,KBo),e(z,S1),e(S1,m_e),e(m_e,ZBo),e(S1,eIo),e(S1,UV),e(UV,oIo),e(S1,rIo),e(z,tIo),e(z,R1),e(R1,g_e),e(g_e,aIo),e(R1,nIo),e(R1,HV),e(HV,sIo),e(R1,lIo),e(z,iIo),e(z,P1),e(P1,h_e),e(h_e,dIo),e(P1,cIo),e(P1,JV),e(JV,fIo),e(P1,mIo),e(z,gIo),e(z,B1),e(B1,p_e),e(p_e,hIo),e(B1,pIo),e(B1,YV),e(YV,_Io),e(B1,uIo),e(z,bIo),e(z,I1),e(I1,__e),e(__e,vIo),e(I1,FIo),e(I1,KV),e(KV,TIo),e(I1,MIo),e(z,EIo),e(z,N1),e(N1,u_e),e(u_e,CIo),e(N1,wIo),e(N1,ZV),e(ZV,AIo),e(N1,LIo),e(z,yIo),e(z,q1),e(q1,b_e),e(b_e,xIo),e(q1,$Io),e(q1,eX),e(eX,kIo),e(q1,SIo),e(z,RIo),e(z,j1),e(j1,v_e),e(v_e,PIo),e(j1,BIo),e(j1,oX),e(oX,IIo),e(j1,NIo),e(z,qIo),e(z,D1),e(D1,F_e),e(F_e,jIo),e(D1,DIo),e(D1,rX),e(rX,GIo),e(D1,OIo),e(z,VIo),e(z,G1),e(G1,T_e),e(T_e,XIo),e(G1,zIo),e(G1,tX),e(tX,WIo),e(G1,QIo),e(z,UIo),e(z,O1),e(O1,M_e),e(M_e,HIo),e(O1,JIo),e(O1,aX),e(aX,YIo),e(O1,KIo),e(z,ZIo),e(z,V1),e(V1,E_e),e(E_e,eNo),e(V1,oNo),e(V1,nX),e(nX,rNo),e(V1,tNo),e(z,aNo),e(z,X1),e(X1,C_e),e(C_e,nNo),e(X1,sNo),e(X1,sX),e(sX,lNo),e(X1,iNo),e(z,dNo),e(z,z1),e(z1,w_e),e(w_e,cNo),e(z1,fNo),e(z1,lX),e(lX,mNo),e(z1,gNo),e(z,hNo),e(z,W1),e(W1,A_e),e(A_e,pNo),e(W1,_No),e(W1,iX),e(iX,uNo),e(W1,bNo),e(z,vNo),e(z,Q1),e(Q1,L_e),e(L_e,FNo),e(Q1,TNo),e(Q1,dX),e(dX,MNo),e(Q1,ENo),e(z,CNo),e(z,U1),e(U1,y_e),e(y_e,wNo),e(U1,ANo),e(U1,cX),e(cX,LNo),e(U1,yNo),e(z,xNo),e(z,H1),e(H1,x_e),e(x_e,$No),e(H1,kNo),e(H1,fX),e(fX,SNo),e(H1,RNo),e(z,PNo),e(z,J1),e(J1,$_e),e($_e,BNo),e(J1,INo),e(J1,mX),e(mX,NNo),e(J1,qNo),e(z,jNo),e(z,Y1),e(Y1,k_e),e(k_e,DNo),e(Y1,GNo),e(Y1,gX),e(gX,ONo),e(Y1,VNo),e(z,XNo),e(z,K1),e(K1,S_e),e(S_e,zNo),e(K1,WNo),e(K1,hX),e(hX,QNo),e(K1,UNo),e(z,HNo),e(z,Z1),e(Z1,R_e),e(R_e,JNo),e(Z1,YNo),e(Z1,pX),e(pX,KNo),e(Z1,ZNo),e(z,eqo),e(z,e2),e(e2,P_e),e(P_e,oqo),e(e2,rqo),e(e2,_X),e(_X,tqo),e(e2,aqo),e(z,nqo),e(z,o2),e(o2,B_e),e(B_e,sqo),e(o2,lqo),e(o2,uX),e(uX,iqo),e(o2,dqo),e(z,cqo),e(z,r2),e(r2,I_e),e(I_e,fqo),e(r2,mqo),e(r2,bX),e(bX,gqo),e(r2,hqo),e(z,pqo),e(z,t2),e(t2,N_e),e(N_e,_qo),e(t2,uqo),e(t2,vX),e(vX,bqo),e(t2,vqo),e(z,Fqo),e(z,a2),e(a2,q_e),e(q_e,Tqo),e(a2,Mqo),e(a2,FX),e(FX,Eqo),e(a2,Cqo),e(z,wqo),e(z,n2),e(n2,j_e),e(j_e,Aqo),e(n2,Lqo),e(n2,TX),e(TX,yqo),e(n2,xqo),e(z,$qo),e(z,s2),e(s2,D_e),e(D_e,kqo),e(s2,Sqo),e(s2,MX),e(MX,Rqo),e(s2,Pqo),e(z,Bqo),e(z,l2),e(l2,G_e),e(G_e,Iqo),e(l2,Nqo),e(l2,EX),e(EX,qqo),e(l2,jqo),e(z,Dqo),e(z,i2),e(i2,O_e),e(O_e,Gqo),e(i2,Oqo),e(i2,CX),e(CX,Vqo),e(i2,Xqo),e(z,zqo),e(z,d2),e(d2,V_e),e(V_e,Wqo),e(d2,Qqo),e(d2,wX),e(wX,Uqo),e(d2,Hqo),e(z,Jqo),e(z,c2),e(c2,X_e),e(X_e,Yqo),e(c2,Kqo),e(c2,AX),e(AX,Zqo),e(c2,ejo),e(z,ojo),e(z,f2),e(f2,z_e),e(z_e,rjo),e(f2,tjo),e(f2,LX),e(LX,ajo),e(f2,njo),e(z,sjo),e(z,m2),e(m2,W_e),e(W_e,ljo),e(m2,ijo),e(m2,yX),e(yX,djo),e(m2,cjo),e(z,fjo),e(z,g2),e(g2,Q_e),e(Q_e,mjo),e(g2,gjo),e(g2,xX),e(xX,hjo),e(g2,pjo),e(eo,_jo),e(eo,h2),e(h2,ujo),e(h2,U_e),e(U_e,bjo),e(h2,vjo),e(h2,H_e),e(H_e,Fjo),e(eo,Tjo),M(p2,eo,null),b(f,bUe,u),b(f,fd,u),e(fd,_2),e(_2,J_e),M(a9,J_e,null),e(fd,Mjo),e(fd,Y_e),e(Y_e,Ejo),b(f,vUe,u),b(f,Bo,u),M(n9,Bo,null),e(Bo,Cjo),e(Bo,md),e(md,wjo),e(md,$X),e($X,Ajo),e(md,Ljo),e(md,kX),e(kX,yjo),e(md,xjo),e(Bo,$jo),e(Bo,s9),e(s9,kjo),e(s9,K_e),e(K_e,Sjo),e(s9,Rjo),e(Bo,Pjo),e(Bo,pt),M(l9,pt,null),e(pt,Bjo),e(pt,Z_e),e(Z_e,Ijo),e(pt,Njo),e(pt,gd),e(gd,qjo),e(gd,eue),e(eue,jjo),e(gd,Djo),e(gd,SX),e(SX,Gjo),e(gd,Ojo),e(pt,Vjo),M(u2,pt,null),e(Bo,Xjo),e(Bo,oo),M(i9,oo,null),e(oo,zjo),e(oo,oue),e(oue,Wjo),e(oo,Qjo),e(oo,Wa),e(Wa,Ujo),e(Wa,rue),e(rue,Hjo),e(Wa,Jjo),e(Wa,tue),e(tue,Yjo),e(Wa,Kjo),e(Wa,aue),e(aue,Zjo),e(Wa,eDo),e(oo,oDo),e(oo,U),e(U,b2),e(b2,nue),e(nue,rDo),e(b2,tDo),e(b2,RX),e(RX,aDo),e(b2,nDo),e(U,sDo),e(U,v2),e(v2,sue),e(sue,lDo),e(v2,iDo),e(v2,PX),e(PX,dDo),e(v2,cDo),e(U,fDo),e(U,F2),e(F2,lue),e(lue,mDo),e(F2,gDo),e(F2,BX),e(BX,hDo),e(F2,pDo),e(U,_Do),e(U,T2),e(T2,iue),e(iue,uDo),e(T2,bDo),e(T2,IX),e(IX,vDo),e(T2,FDo),e(U,TDo),e(U,M2),e(M2,due),e(due,MDo),e(M2,EDo),e(M2,NX),e(NX,CDo),e(M2,wDo),e(U,ADo),e(U,E2),e(E2,cue),e(cue,LDo),e(E2,yDo),e(E2,qX),e(qX,xDo),e(E2,$Do),e(U,kDo),e(U,C2),e(C2,fue),e(fue,SDo),e(C2,RDo),e(C2,jX),e(jX,PDo),e(C2,BDo),e(U,IDo),e(U,w2),e(w2,mue),e(mue,NDo),e(w2,qDo),e(w2,DX),e(DX,jDo),e(w2,DDo),e(U,GDo),e(U,A2),e(A2,gue),e(gue,ODo),e(A2,VDo),e(A2,GX),e(GX,XDo),e(A2,zDo),e(U,WDo),e(U,L2),e(L2,hue),e(hue,QDo),e(L2,UDo),e(L2,OX),e(OX,HDo),e(L2,JDo),e(U,YDo),e(U,y2),e(y2,pue),e(pue,KDo),e(y2,ZDo),e(y2,VX),e(VX,eGo),e(y2,oGo),e(U,rGo),e(U,x2),e(x2,_ue),e(_ue,tGo),e(x2,aGo),e(x2,XX),e(XX,nGo),e(x2,sGo),e(U,lGo),e(U,$2),e($2,uue),e(uue,iGo),e($2,dGo),e($2,zX),e(zX,cGo),e($2,fGo),e(U,mGo),e(U,k2),e(k2,bue),e(bue,gGo),e(k2,hGo),e(k2,WX),e(WX,pGo),e(k2,_Go),e(U,uGo),e(U,S2),e(S2,vue),e(vue,bGo),e(S2,vGo),e(S2,QX),e(QX,FGo),e(S2,TGo),e(U,MGo),e(U,R2),e(R2,Fue),e(Fue,EGo),e(R2,CGo),e(R2,UX),e(UX,wGo),e(R2,AGo),e(U,LGo),e(U,P2),e(P2,Tue),e(Tue,yGo),e(P2,xGo),e(P2,HX),e(HX,$Go),e(P2,kGo),e(U,SGo),e(U,B2),e(B2,Mue),e(Mue,RGo),e(B2,PGo),e(B2,JX),e(JX,BGo),e(B2,IGo),e(U,NGo),e(U,I2),e(I2,Eue),e(Eue,qGo),e(I2,jGo),e(I2,YX),e(YX,DGo),e(I2,GGo),e(U,OGo),e(U,N2),e(N2,Cue),e(Cue,VGo),e(N2,XGo),e(N2,KX),e(KX,zGo),e(N2,WGo),e(U,QGo),e(U,q2),e(q2,wue),e(wue,UGo),e(q2,HGo),e(q2,ZX),e(ZX,JGo),e(q2,YGo),e(U,KGo),e(U,j2),e(j2,Aue),e(Aue,ZGo),e(j2,eOo),e(j2,ez),e(ez,oOo),e(j2,rOo),e(U,tOo),e(U,D2),e(D2,Lue),e(Lue,aOo),e(D2,nOo),e(D2,oz),e(oz,sOo),e(D2,lOo),e(U,iOo),e(U,G2),e(G2,yue),e(yue,dOo),e(G2,cOo),e(G2,rz),e(rz,fOo),e(G2,mOo),e(U,gOo),e(U,O2),e(O2,xue),e(xue,hOo),e(O2,pOo),e(O2,tz),e(tz,_Oo),e(O2,uOo),e(U,bOo),e(U,V2),e(V2,$ue),e($ue,vOo),e(V2,FOo),e(V2,az),e(az,TOo),e(V2,MOo),e(U,EOo),e(U,X2),e(X2,kue),e(kue,COo),e(X2,wOo),e(X2,nz),e(nz,AOo),e(X2,LOo),e(U,yOo),e(U,z2),e(z2,Sue),e(Sue,xOo),e(z2,$Oo),e(z2,sz),e(sz,kOo),e(z2,SOo),e(U,ROo),e(U,W2),e(W2,Rue),e(Rue,POo),e(W2,BOo),e(W2,lz),e(lz,IOo),e(W2,NOo),e(U,qOo),e(U,Q2),e(Q2,Pue),e(Pue,jOo),e(Q2,DOo),e(Q2,iz),e(iz,GOo),e(Q2,OOo),e(U,VOo),e(U,U2),e(U2,Bue),e(Bue,XOo),e(U2,zOo),e(U2,dz),e(dz,WOo),e(U2,QOo),e(U,UOo),e(U,H2),e(H2,Iue),e(Iue,HOo),e(H2,JOo),e(H2,cz),e(cz,YOo),e(H2,KOo),e(U,ZOo),e(U,J2),e(J2,Nue),e(Nue,eVo),e(J2,oVo),e(J2,fz),e(fz,rVo),e(J2,tVo),e(U,aVo),e(U,Y2),e(Y2,que),e(que,nVo),e(Y2,sVo),e(Y2,jue),e(jue,lVo),e(Y2,iVo),e(U,dVo),e(U,K2),e(K2,Due),e(Due,cVo),e(K2,fVo),e(K2,mz),e(mz,mVo),e(K2,gVo),e(U,hVo),e(U,Z2),e(Z2,Gue),e(Gue,pVo),e(Z2,_Vo),e(Z2,gz),e(gz,uVo),e(Z2,bVo),e(U,vVo),e(U,eb),e(eb,Oue),e(Oue,FVo),e(eb,TVo),e(eb,hz),e(hz,MVo),e(eb,EVo),e(U,CVo),e(U,ob),e(ob,Vue),e(Vue,wVo),e(ob,AVo),e(ob,pz),e(pz,LVo),e(ob,yVo),e(oo,xVo),e(oo,rb),e(rb,$Vo),e(rb,Xue),e(Xue,kVo),e(rb,SVo),e(rb,zue),e(zue,RVo),e(oo,PVo),M(tb,oo,null),b(f,FUe,u),b(f,hd,u),e(hd,ab),e(ab,Wue),M(d9,Wue,null),e(hd,BVo),e(hd,Que),e(Que,IVo),b(f,TUe,u),b(f,Io,u),M(c9,Io,null),e(Io,NVo),e(Io,pd),e(pd,qVo),e(pd,_z),e(_z,jVo),e(pd,DVo),e(pd,uz),e(uz,GVo),e(pd,OVo),e(Io,VVo),e(Io,f9),e(f9,XVo),e(f9,Uue),e(Uue,zVo),e(f9,WVo),e(Io,QVo),e(Io,_t),M(m9,_t,null),e(_t,UVo),e(_t,Hue),e(Hue,HVo),e(_t,JVo),e(_t,_d),e(_d,YVo),e(_d,Jue),e(Jue,KVo),e(_d,ZVo),e(_d,bz),e(bz,eXo),e(_d,oXo),e(_t,rXo),M(nb,_t,null),e(Io,tXo),e(Io,ro),M(g9,ro,null),e(ro,aXo),e(ro,Yue),e(Yue,nXo),e(ro,sXo),e(ro,Qa),e(Qa,lXo),e(Qa,Kue),e(Kue,iXo),e(Qa,dXo),e(Qa,Zue),e(Zue,cXo),e(Qa,fXo),e(Qa,e5e),e(e5e,mXo),e(Qa,gXo),e(ro,hXo),e(ro,me),e(me,sb),e(sb,o5e),e(o5e,pXo),e(sb,_Xo),e(sb,vz),e(vz,uXo),e(sb,bXo),e(me,vXo),e(me,lb),e(lb,r5e),e(r5e,FXo),e(lb,TXo),e(lb,Fz),e(Fz,MXo),e(lb,EXo),e(me,CXo),e(me,ib),e(ib,t5e),e(t5e,wXo),e(ib,AXo),e(ib,Tz),e(Tz,LXo),e(ib,yXo),e(me,xXo),e(me,db),e(db,a5e),e(a5e,$Xo),e(db,kXo),e(db,Mz),e(Mz,SXo),e(db,RXo),e(me,PXo),e(me,cb),e(cb,n5e),e(n5e,BXo),e(cb,IXo),e(cb,Ez),e(Ez,NXo),e(cb,qXo),e(me,jXo),e(me,fb),e(fb,s5e),e(s5e,DXo),e(fb,GXo),e(fb,Cz),e(Cz,OXo),e(fb,VXo),e(me,XXo),e(me,mb),e(mb,l5e),e(l5e,zXo),e(mb,WXo),e(mb,wz),e(wz,QXo),e(mb,UXo),e(me,HXo),e(me,gb),e(gb,i5e),e(i5e,JXo),e(gb,YXo),e(gb,Az),e(Az,KXo),e(gb,ZXo),e(me,ezo),e(me,hb),e(hb,d5e),e(d5e,ozo),e(hb,rzo),e(hb,Lz),e(Lz,tzo),e(hb,azo),e(me,nzo),e(me,pb),e(pb,c5e),e(c5e,szo),e(pb,lzo),e(pb,yz),e(yz,izo),e(pb,dzo),e(me,czo),e(me,_b),e(_b,f5e),e(f5e,fzo),e(_b,mzo),e(_b,xz),e(xz,gzo),e(_b,hzo),e(me,pzo),e(me,ub),e(ub,m5e),e(m5e,_zo),e(ub,uzo),e(ub,$z),e($z,bzo),e(ub,vzo),e(me,Fzo),e(me,bb),e(bb,g5e),e(g5e,Tzo),e(bb,Mzo),e(bb,kz),e(kz,Ezo),e(bb,Czo),e(me,wzo),e(me,vb),e(vb,h5e),e(h5e,Azo),e(vb,Lzo),e(vb,Sz),e(Sz,yzo),e(vb,xzo),e(me,$zo),e(me,Fb),e(Fb,p5e),e(p5e,kzo),e(Fb,Szo),e(Fb,Rz),e(Rz,Rzo),e(Fb,Pzo),e(me,Bzo),e(me,Tb),e(Tb,_5e),e(_5e,Izo),e(Tb,Nzo),e(Tb,Pz),e(Pz,qzo),e(Tb,jzo),e(me,Dzo),e(me,Mb),e(Mb,u5e),e(u5e,Gzo),e(Mb,Ozo),e(Mb,Bz),e(Bz,Vzo),e(Mb,Xzo),e(me,zzo),e(me,Eb),e(Eb,b5e),e(b5e,Wzo),e(Eb,Qzo),e(Eb,Iz),e(Iz,Uzo),e(Eb,Hzo),e(me,Jzo),e(me,Cb),e(Cb,v5e),e(v5e,Yzo),e(Cb,Kzo),e(Cb,Nz),e(Nz,Zzo),e(Cb,eWo),e(ro,oWo),e(ro,wb),e(wb,rWo),e(wb,F5e),e(F5e,tWo),e(wb,aWo),e(wb,T5e),e(T5e,nWo),e(ro,sWo),M(Ab,ro,null),b(f,MUe,u),b(f,ud,u),e(ud,Lb),e(Lb,M5e),M(h9,M5e,null),e(ud,lWo),e(ud,E5e),e(E5e,iWo),b(f,EUe,u),b(f,No,u),M(p9,No,null),e(No,dWo),e(No,bd),e(bd,cWo),e(bd,qz),e(qz,fWo),e(bd,mWo),e(bd,jz),e(jz,gWo),e(bd,hWo),e(No,pWo),e(No,_9),e(_9,_Wo),e(_9,C5e),e(C5e,uWo),e(_9,bWo),e(No,vWo),e(No,ut),M(u9,ut,null),e(ut,FWo),e(ut,w5e),e(w5e,TWo),e(ut,MWo),e(ut,vd),e(vd,EWo),e(vd,A5e),e(A5e,CWo),e(vd,wWo),e(vd,Dz),e(Dz,AWo),e(vd,LWo),e(ut,yWo),M(yb,ut,null),e(No,xWo),e(No,to),M(b9,to,null),e(to,$Wo),e(to,L5e),e(L5e,kWo),e(to,SWo),e(to,Ua),e(Ua,RWo),e(Ua,y5e),e(y5e,PWo),e(Ua,BWo),e(Ua,x5e),e(x5e,IWo),e(Ua,NWo),e(Ua,$5e),e($5e,qWo),e(Ua,jWo),e(to,DWo),e(to,N),e(N,xb),e(xb,k5e),e(k5e,GWo),e(xb,OWo),e(xb,Gz),e(Gz,VWo),e(xb,XWo),e(N,zWo),e(N,$b),e($b,S5e),e(S5e,WWo),e($b,QWo),e($b,Oz),e(Oz,UWo),e($b,HWo),e(N,JWo),e(N,kb),e(kb,R5e),e(R5e,YWo),e(kb,KWo),e(kb,Vz),e(Vz,ZWo),e(kb,eQo),e(N,oQo),e(N,Sb),e(Sb,P5e),e(P5e,rQo),e(Sb,tQo),e(Sb,Xz),e(Xz,aQo),e(Sb,nQo),e(N,sQo),e(N,Rb),e(Rb,B5e),e(B5e,lQo),e(Rb,iQo),e(Rb,zz),e(zz,dQo),e(Rb,cQo),e(N,fQo),e(N,Pb),e(Pb,I5e),e(I5e,mQo),e(Pb,gQo),e(Pb,Wz),e(Wz,hQo),e(Pb,pQo),e(N,_Qo),e(N,Bb),e(Bb,N5e),e(N5e,uQo),e(Bb,bQo),e(Bb,Qz),e(Qz,vQo),e(Bb,FQo),e(N,TQo),e(N,Ib),e(Ib,q5e),e(q5e,MQo),e(Ib,EQo),e(Ib,Uz),e(Uz,CQo),e(Ib,wQo),e(N,AQo),e(N,Nb),e(Nb,j5e),e(j5e,LQo),e(Nb,yQo),e(Nb,Hz),e(Hz,xQo),e(Nb,$Qo),e(N,kQo),e(N,qb),e(qb,D5e),e(D5e,SQo),e(qb,RQo),e(qb,Jz),e(Jz,PQo),e(qb,BQo),e(N,IQo),e(N,jb),e(jb,G5e),e(G5e,NQo),e(jb,qQo),e(jb,Yz),e(Yz,jQo),e(jb,DQo),e(N,GQo),e(N,Db),e(Db,O5e),e(O5e,OQo),e(Db,VQo),e(Db,Kz),e(Kz,XQo),e(Db,zQo),e(N,WQo),e(N,Gb),e(Gb,V5e),e(V5e,QQo),e(Gb,UQo),e(Gb,Zz),e(Zz,HQo),e(Gb,JQo),e(N,YQo),e(N,Ob),e(Ob,X5e),e(X5e,KQo),e(Ob,ZQo),e(Ob,eW),e(eW,eUo),e(Ob,oUo),e(N,rUo),e(N,Vb),e(Vb,z5e),e(z5e,tUo),e(Vb,aUo),e(Vb,oW),e(oW,nUo),e(Vb,sUo),e(N,lUo),e(N,Xb),e(Xb,W5e),e(W5e,iUo),e(Xb,dUo),e(Xb,rW),e(rW,cUo),e(Xb,fUo),e(N,mUo),e(N,zb),e(zb,Q5e),e(Q5e,gUo),e(zb,hUo),e(zb,tW),e(tW,pUo),e(zb,_Uo),e(N,uUo),e(N,Wb),e(Wb,U5e),e(U5e,bUo),e(Wb,vUo),e(Wb,aW),e(aW,FUo),e(Wb,TUo),e(N,MUo),e(N,Qb),e(Qb,H5e),e(H5e,EUo),e(Qb,CUo),e(Qb,nW),e(nW,wUo),e(Qb,AUo),e(N,LUo),e(N,Ub),e(Ub,J5e),e(J5e,yUo),e(Ub,xUo),e(Ub,sW),e(sW,$Uo),e(Ub,kUo),e(N,SUo),e(N,Hb),e(Hb,Y5e),e(Y5e,RUo),e(Hb,PUo),e(Hb,lW),e(lW,BUo),e(Hb,IUo),e(N,NUo),e(N,Jb),e(Jb,K5e),e(K5e,qUo),e(Jb,jUo),e(Jb,iW),e(iW,DUo),e(Jb,GUo),e(N,OUo),e(N,Yb),e(Yb,Z5e),e(Z5e,VUo),e(Yb,XUo),e(Yb,dW),e(dW,zUo),e(Yb,WUo),e(N,QUo),e(N,Kb),e(Kb,e1e),e(e1e,UUo),e(Kb,HUo),e(Kb,cW),e(cW,JUo),e(Kb,YUo),e(N,KUo),e(N,Zb),e(Zb,o1e),e(o1e,ZUo),e(Zb,eHo),e(Zb,fW),e(fW,oHo),e(Zb,rHo),e(N,tHo),e(N,ev),e(ev,r1e),e(r1e,aHo),e(ev,nHo),e(ev,mW),e(mW,sHo),e(ev,lHo),e(N,iHo),e(N,ov),e(ov,t1e),e(t1e,dHo),e(ov,cHo),e(ov,gW),e(gW,fHo),e(ov,mHo),e(N,gHo),e(N,rv),e(rv,a1e),e(a1e,hHo),e(rv,pHo),e(rv,hW),e(hW,_Ho),e(rv,uHo),e(N,bHo),e(N,tv),e(tv,n1e),e(n1e,vHo),e(tv,FHo),e(tv,pW),e(pW,THo),e(tv,MHo),e(N,EHo),e(N,av),e(av,s1e),e(s1e,CHo),e(av,wHo),e(av,_W),e(_W,AHo),e(av,LHo),e(N,yHo),e(N,nv),e(nv,l1e),e(l1e,xHo),e(nv,$Ho),e(nv,uW),e(uW,kHo),e(nv,SHo),e(N,RHo),e(N,sv),e(sv,i1e),e(i1e,PHo),e(sv,BHo),e(sv,bW),e(bW,IHo),e(sv,NHo),e(N,qHo),e(N,lv),e(lv,d1e),e(d1e,jHo),e(lv,DHo),e(lv,vW),e(vW,GHo),e(lv,OHo),e(N,VHo),e(N,iv),e(iv,c1e),e(c1e,XHo),e(iv,zHo),e(iv,FW),e(FW,WHo),e(iv,QHo),e(N,UHo),e(N,dv),e(dv,f1e),e(f1e,HHo),e(dv,JHo),e(dv,TW),e(TW,YHo),e(dv,KHo),e(N,ZHo),e(N,cv),e(cv,m1e),e(m1e,eJo),e(cv,oJo),e(cv,MW),e(MW,rJo),e(cv,tJo),e(N,aJo),e(N,fv),e(fv,g1e),e(g1e,nJo),e(fv,sJo),e(fv,EW),e(EW,lJo),e(fv,iJo),e(N,dJo),e(N,mv),e(mv,h1e),e(h1e,cJo),e(mv,fJo),e(mv,CW),e(CW,mJo),e(mv,gJo),e(N,hJo),e(N,gv),e(gv,p1e),e(p1e,pJo),e(gv,_Jo),e(gv,wW),e(wW,uJo),e(gv,bJo),e(N,vJo),e(N,hv),e(hv,_1e),e(_1e,FJo),e(hv,TJo),e(hv,AW),e(AW,MJo),e(hv,EJo),e(N,CJo),e(N,pv),e(pv,u1e),e(u1e,wJo),e(pv,AJo),e(pv,LW),e(LW,LJo),e(pv,yJo),e(N,xJo),e(N,_v),e(_v,b1e),e(b1e,$Jo),e(_v,kJo),e(_v,yW),e(yW,SJo),e(_v,RJo),e(N,PJo),e(N,uv),e(uv,v1e),e(v1e,BJo),e(uv,IJo),e(uv,xW),e(xW,NJo),e(uv,qJo),e(N,jJo),e(N,bv),e(bv,F1e),e(F1e,DJo),e(bv,GJo),e(bv,$W),e($W,OJo),e(bv,VJo),e(N,XJo),e(N,vv),e(vv,T1e),e(T1e,zJo),e(vv,WJo),e(vv,kW),e(kW,QJo),e(vv,UJo),e(N,HJo),e(N,Fv),e(Fv,M1e),e(M1e,JJo),e(Fv,YJo),e(Fv,SW),e(SW,KJo),e(Fv,ZJo),e(N,eYo),e(N,Tv),e(Tv,E1e),e(E1e,oYo),e(Tv,rYo),e(Tv,RW),e(RW,tYo),e(Tv,aYo),e(N,nYo),e(N,Mv),e(Mv,C1e),e(C1e,sYo),e(Mv,lYo),e(Mv,PW),e(PW,iYo),e(Mv,dYo),e(N,cYo),e(N,Ev),e(Ev,w1e),e(w1e,fYo),e(Ev,mYo),e(Ev,BW),e(BW,gYo),e(Ev,hYo),e(N,pYo),e(N,Cv),e(Cv,A1e),e(A1e,_Yo),e(Cv,uYo),e(Cv,IW),e(IW,bYo),e(Cv,vYo),e(N,FYo),e(N,wv),e(wv,L1e),e(L1e,TYo),e(wv,MYo),e(wv,NW),e(NW,EYo),e(wv,CYo),e(N,wYo),e(N,Av),e(Av,y1e),e(y1e,AYo),e(Av,LYo),e(Av,qW),e(qW,yYo),e(Av,xYo),e(to,$Yo),e(to,Lv),e(Lv,kYo),e(Lv,x1e),e(x1e,SYo),e(Lv,RYo),e(Lv,$1e),e($1e,PYo),e(to,BYo),M(yv,to,null),b(f,CUe,u),b(f,Fd,u),e(Fd,xv),e(xv,k1e),M(v9,k1e,null),e(Fd,IYo),e(Fd,S1e),e(S1e,NYo),b(f,wUe,u),b(f,qo,u),M(F9,qo,null),e(qo,qYo),e(qo,Td),e(Td,jYo),e(Td,jW),e(jW,DYo),e(Td,GYo),e(Td,DW),e(DW,OYo),e(Td,VYo),e(qo,XYo),e(qo,T9),e(T9,zYo),e(T9,R1e),e(R1e,WYo),e(T9,QYo),e(qo,UYo),e(qo,bt),M(M9,bt,null),e(bt,HYo),e(bt,P1e),e(P1e,JYo),e(bt,YYo),e(bt,Md),e(Md,KYo),e(Md,B1e),e(B1e,ZYo),e(Md,eKo),e(Md,GW),e(GW,oKo),e(Md,rKo),e(bt,tKo),M($v,bt,null),e(qo,aKo),e(qo,ao),M(E9,ao,null),e(ao,nKo),e(ao,I1e),e(I1e,sKo),e(ao,lKo),e(ao,Ha),e(Ha,iKo),e(Ha,N1e),e(N1e,dKo),e(Ha,cKo),e(Ha,q1e),e(q1e,fKo),e(Ha,mKo),e(Ha,j1e),e(j1e,gKo),e(Ha,hKo),e(ao,pKo),e(ao,Z),e(Z,kv),e(kv,D1e),e(D1e,_Ko),e(kv,uKo),e(kv,OW),e(OW,bKo),e(kv,vKo),e(Z,FKo),e(Z,Sv),e(Sv,G1e),e(G1e,TKo),e(Sv,MKo),e(Sv,VW),e(VW,EKo),e(Sv,CKo),e(Z,wKo),e(Z,Rv),e(Rv,O1e),e(O1e,AKo),e(Rv,LKo),e(Rv,XW),e(XW,yKo),e(Rv,xKo),e(Z,$Ko),e(Z,Pv),e(Pv,V1e),e(V1e,kKo),e(Pv,SKo),e(Pv,zW),e(zW,RKo),e(Pv,PKo),e(Z,BKo),e(Z,Bv),e(Bv,X1e),e(X1e,IKo),e(Bv,NKo),e(Bv,WW),e(WW,qKo),e(Bv,jKo),e(Z,DKo),e(Z,Iv),e(Iv,z1e),e(z1e,GKo),e(Iv,OKo),e(Iv,QW),e(QW,VKo),e(Iv,XKo),e(Z,zKo),e(Z,Nv),e(Nv,W1e),e(W1e,WKo),e(Nv,QKo),e(Nv,UW),e(UW,UKo),e(Nv,HKo),e(Z,JKo),e(Z,qv),e(qv,Q1e),e(Q1e,YKo),e(qv,KKo),e(qv,HW),e(HW,ZKo),e(qv,eZo),e(Z,oZo),e(Z,jv),e(jv,U1e),e(U1e,rZo),e(jv,tZo),e(jv,JW),e(JW,aZo),e(jv,nZo),e(Z,sZo),e(Z,Dv),e(Dv,H1e),e(H1e,lZo),e(Dv,iZo),e(Dv,YW),e(YW,dZo),e(Dv,cZo),e(Z,fZo),e(Z,Gv),e(Gv,J1e),e(J1e,mZo),e(Gv,gZo),e(Gv,KW),e(KW,hZo),e(Gv,pZo),e(Z,_Zo),e(Z,Ov),e(Ov,Y1e),e(Y1e,uZo),e(Ov,bZo),e(Ov,ZW),e(ZW,vZo),e(Ov,FZo),e(Z,TZo),e(Z,Vv),e(Vv,K1e),e(K1e,MZo),e(Vv,EZo),e(Vv,eQ),e(eQ,CZo),e(Vv,wZo),e(Z,AZo),e(Z,Xv),e(Xv,Z1e),e(Z1e,LZo),e(Xv,yZo),e(Xv,oQ),e(oQ,xZo),e(Xv,$Zo),e(Z,kZo),e(Z,zv),e(zv,e2e),e(e2e,SZo),e(zv,RZo),e(zv,rQ),e(rQ,PZo),e(zv,BZo),e(Z,IZo),e(Z,Wv),e(Wv,o2e),e(o2e,NZo),e(Wv,qZo),e(Wv,tQ),e(tQ,jZo),e(Wv,DZo),e(Z,GZo),e(Z,Qv),e(Qv,r2e),e(r2e,OZo),e(Qv,VZo),e(Qv,aQ),e(aQ,XZo),e(Qv,zZo),e(Z,WZo),e(Z,Uv),e(Uv,t2e),e(t2e,QZo),e(Uv,UZo),e(Uv,nQ),e(nQ,HZo),e(Uv,JZo),e(Z,YZo),e(Z,Hv),e(Hv,a2e),e(a2e,KZo),e(Hv,ZZo),e(Hv,sQ),e(sQ,eer),e(Hv,oer),e(Z,rer),e(Z,Jv),e(Jv,n2e),e(n2e,ter),e(Jv,aer),e(Jv,lQ),e(lQ,ner),e(Jv,ser),e(Z,ler),e(Z,Yv),e(Yv,s2e),e(s2e,ier),e(Yv,der),e(Yv,iQ),e(iQ,cer),e(Yv,fer),e(Z,mer),e(Z,Kv),e(Kv,l2e),e(l2e,ger),e(Kv,her),e(Kv,dQ),e(dQ,per),e(Kv,_er),e(Z,uer),e(Z,Zv),e(Zv,i2e),e(i2e,ber),e(Zv,ver),e(Zv,cQ),e(cQ,Fer),e(Zv,Ter),e(Z,Mer),e(Z,eF),e(eF,d2e),e(d2e,Eer),e(eF,Cer),e(eF,fQ),e(fQ,wer),e(eF,Aer),e(Z,Ler),e(Z,oF),e(oF,c2e),e(c2e,yer),e(oF,xer),e(oF,mQ),e(mQ,$er),e(oF,ker),e(Z,Ser),e(Z,rF),e(rF,f2e),e(f2e,Rer),e(rF,Per),e(rF,gQ),e(gQ,Ber),e(rF,Ier),e(Z,Ner),e(Z,tF),e(tF,m2e),e(m2e,qer),e(tF,jer),e(tF,hQ),e(hQ,Der),e(tF,Ger),e(Z,Oer),e(Z,aF),e(aF,g2e),e(g2e,Ver),e(aF,Xer),e(aF,pQ),e(pQ,zer),e(aF,Wer),e(Z,Qer),e(Z,nF),e(nF,h2e),e(h2e,Uer),e(nF,Her),e(nF,_Q),e(_Q,Jer),e(nF,Yer),e(Z,Ker),e(Z,sF),e(sF,p2e),e(p2e,Zer),e(sF,eor),e(sF,uQ),e(uQ,oor),e(sF,ror),e(Z,tor),e(Z,lF),e(lF,_2e),e(_2e,aor),e(lF,nor),e(lF,bQ),e(bQ,sor),e(lF,lor),e(ao,ior),e(ao,iF),e(iF,dor),e(iF,u2e),e(u2e,cor),e(iF,mor),e(iF,b2e),e(b2e,gor),e(ao,hor),M(dF,ao,null),b(f,AUe,u),b(f,Ed,u),e(Ed,cF),e(cF,v2e),M(C9,v2e,null),e(Ed,por),e(Ed,F2e),e(F2e,_or),b(f,LUe,u),b(f,jo,u),M(w9,jo,null),e(jo,uor),e(jo,Cd),e(Cd,bor),e(Cd,vQ),e(vQ,vor),e(Cd,For),e(Cd,FQ),e(FQ,Tor),e(Cd,Mor),e(jo,Eor),e(jo,A9),e(A9,Cor),e(A9,T2e),e(T2e,wor),e(A9,Aor),e(jo,Lor),e(jo,vt),M(L9,vt,null),e(vt,yor),e(vt,M2e),e(M2e,xor),e(vt,$or),e(vt,wd),e(wd,kor),e(wd,E2e),e(E2e,Sor),e(wd,Ror),e(wd,TQ),e(TQ,Por),e(wd,Bor),e(vt,Ior),M(fF,vt,null),e(jo,Nor),e(jo,no),M(y9,no,null),e(no,qor),e(no,C2e),e(C2e,jor),e(no,Dor),e(no,Ja),e(Ja,Gor),e(Ja,w2e),e(w2e,Oor),e(Ja,Vor),e(Ja,A2e),e(A2e,Xor),e(Ja,zor),e(Ja,L2e),e(L2e,Wor),e(Ja,Qor),e(no,Uor),e(no,Do),e(Do,mF),e(mF,y2e),e(y2e,Hor),e(mF,Jor),e(mF,MQ),e(MQ,Yor),e(mF,Kor),e(Do,Zor),e(Do,gF),e(gF,x2e),e(x2e,err),e(gF,orr),e(gF,EQ),e(EQ,rrr),e(gF,trr),e(Do,arr),e(Do,hF),e(hF,$2e),e($2e,nrr),e(hF,srr),e(hF,CQ),e(CQ,lrr),e(hF,irr),e(Do,drr),e(Do,pF),e(pF,k2e),e(k2e,crr),e(pF,frr),e(pF,wQ),e(wQ,mrr),e(pF,grr),e(Do,hrr),e(Do,_F),e(_F,S2e),e(S2e,prr),e(_F,_rr),e(_F,AQ),e(AQ,urr),e(_F,brr),e(Do,vrr),e(Do,uF),e(uF,R2e),e(R2e,Frr),e(uF,Trr),e(uF,LQ),e(LQ,Mrr),e(uF,Err),e(no,Crr),e(no,bF),e(bF,wrr),e(bF,P2e),e(P2e,Arr),e(bF,Lrr),e(bF,B2e),e(B2e,yrr),e(no,xrr),M(vF,no,null),b(f,yUe,u),b(f,Ad,u),e(Ad,FF),e(FF,I2e),M(x9,I2e,null),e(Ad,$rr),e(Ad,N2e),e(N2e,krr),b(f,xUe,u),b(f,Go,u),M($9,Go,null),e(Go,Srr),e(Go,Ld),e(Ld,Rrr),e(Ld,yQ),e(yQ,Prr),e(Ld,Brr),e(Ld,xQ),e(xQ,Irr),e(Ld,Nrr),e(Go,qrr),e(Go,k9),e(k9,jrr),e(k9,q2e),e(q2e,Drr),e(k9,Grr),e(Go,Orr),e(Go,Ft),M(S9,Ft,null),e(Ft,Vrr),e(Ft,j2e),e(j2e,Xrr),e(Ft,zrr),e(Ft,yd),e(yd,Wrr),e(yd,D2e),e(D2e,Qrr),e(yd,Urr),e(yd,$Q),e($Q,Hrr),e(yd,Jrr),e(Ft,Yrr),M(TF,Ft,null),e(Go,Krr),e(Go,so),M(R9,so,null),e(so,Zrr),e(so,G2e),e(G2e,etr),e(so,otr),e(so,Ya),e(Ya,rtr),e(Ya,O2e),e(O2e,ttr),e(Ya,atr),e(Ya,V2e),e(V2e,ntr),e(Ya,str),e(Ya,X2e),e(X2e,ltr),e(Ya,itr),e(so,dtr),e(so,H),e(H,MF),e(MF,z2e),e(z2e,ctr),e(MF,ftr),e(MF,kQ),e(kQ,mtr),e(MF,gtr),e(H,htr),e(H,EF),e(EF,W2e),e(W2e,ptr),e(EF,_tr),e(EF,SQ),e(SQ,utr),e(EF,btr),e(H,vtr),e(H,CF),e(CF,Q2e),e(Q2e,Ftr),e(CF,Ttr),e(CF,RQ),e(RQ,Mtr),e(CF,Etr),e(H,Ctr),e(H,wF),e(wF,U2e),e(U2e,wtr),e(wF,Atr),e(wF,PQ),e(PQ,Ltr),e(wF,ytr),e(H,xtr),e(H,AF),e(AF,H2e),e(H2e,$tr),e(AF,ktr),e(AF,BQ),e(BQ,Str),e(AF,Rtr),e(H,Ptr),e(H,LF),e(LF,J2e),e(J2e,Btr),e(LF,Itr),e(LF,IQ),e(IQ,Ntr),e(LF,qtr),e(H,jtr),e(H,yF),e(yF,Y2e),e(Y2e,Dtr),e(yF,Gtr),e(yF,NQ),e(NQ,Otr),e(yF,Vtr),e(H,Xtr),e(H,xF),e(xF,K2e),e(K2e,ztr),e(xF,Wtr),e(xF,qQ),e(qQ,Qtr),e(xF,Utr),e(H,Htr),e(H,$F),e($F,Z2e),e(Z2e,Jtr),e($F,Ytr),e($F,jQ),e(jQ,Ktr),e($F,Ztr),e(H,ear),e(H,kF),e(kF,ebe),e(ebe,oar),e(kF,rar),e(kF,DQ),e(DQ,tar),e(kF,aar),e(H,nar),e(H,SF),e(SF,obe),e(obe,sar),e(SF,lar),e(SF,GQ),e(GQ,iar),e(SF,dar),e(H,car),e(H,RF),e(RF,rbe),e(rbe,far),e(RF,mar),e(RF,OQ),e(OQ,gar),e(RF,har),e(H,par),e(H,PF),e(PF,tbe),e(tbe,_ar),e(PF,uar),e(PF,VQ),e(VQ,bar),e(PF,Far),e(H,Tar),e(H,BF),e(BF,abe),e(abe,Mar),e(BF,Ear),e(BF,XQ),e(XQ,Car),e(BF,war),e(H,Aar),e(H,IF),e(IF,nbe),e(nbe,Lar),e(IF,yar),e(IF,zQ),e(zQ,xar),e(IF,$ar),e(H,kar),e(H,NF),e(NF,sbe),e(sbe,Sar),e(NF,Rar),e(NF,WQ),e(WQ,Par),e(NF,Bar),e(H,Iar),e(H,qF),e(qF,lbe),e(lbe,Nar),e(qF,qar),e(qF,QQ),e(QQ,jar),e(qF,Dar),e(H,Gar),e(H,jF),e(jF,ibe),e(ibe,Oar),e(jF,Var),e(jF,UQ),e(UQ,Xar),e(jF,zar),e(H,War),e(H,DF),e(DF,dbe),e(dbe,Qar),e(DF,Uar),e(DF,HQ),e(HQ,Har),e(DF,Jar),e(H,Yar),e(H,GF),e(GF,cbe),e(cbe,Kar),e(GF,Zar),e(GF,JQ),e(JQ,enr),e(GF,onr),e(H,rnr),e(H,OF),e(OF,fbe),e(fbe,tnr),e(OF,anr),e(OF,YQ),e(YQ,nnr),e(OF,snr),e(H,lnr),e(H,VF),e(VF,mbe),e(mbe,inr),e(VF,dnr),e(VF,KQ),e(KQ,cnr),e(VF,fnr),e(H,mnr),e(H,XF),e(XF,gbe),e(gbe,gnr),e(XF,hnr),e(XF,ZQ),e(ZQ,pnr),e(XF,_nr),e(H,unr),e(H,zF),e(zF,hbe),e(hbe,bnr),e(zF,vnr),e(zF,eU),e(eU,Fnr),e(zF,Tnr),e(H,Mnr),e(H,WF),e(WF,pbe),e(pbe,Enr),e(WF,Cnr),e(WF,oU),e(oU,wnr),e(WF,Anr),e(H,Lnr),e(H,QF),e(QF,_be),e(_be,ynr),e(QF,xnr),e(QF,rU),e(rU,$nr),e(QF,knr),e(H,Snr),e(H,UF),e(UF,ube),e(ube,Rnr),e(UF,Pnr),e(UF,tU),e(tU,Bnr),e(UF,Inr),e(H,Nnr),e(H,HF),e(HF,bbe),e(bbe,qnr),e(HF,jnr),e(HF,aU),e(aU,Dnr),e(HF,Gnr),e(H,Onr),e(H,JF),e(JF,vbe),e(vbe,Vnr),e(JF,Xnr),e(JF,nU),e(nU,znr),e(JF,Wnr),e(H,Qnr),e(H,YF),e(YF,Fbe),e(Fbe,Unr),e(YF,Hnr),e(YF,sU),e(sU,Jnr),e(YF,Ynr),e(H,Knr),e(H,KF),e(KF,Tbe),e(Tbe,Znr),e(KF,esr),e(KF,lU),e(lU,osr),e(KF,rsr),e(H,tsr),e(H,ZF),e(ZF,Mbe),e(Mbe,asr),e(ZF,nsr),e(ZF,iU),e(iU,ssr),e(ZF,lsr),e(H,isr),e(H,eT),e(eT,Ebe),e(Ebe,dsr),e(eT,csr),e(eT,dU),e(dU,fsr),e(eT,msr),e(H,gsr),e(H,oT),e(oT,Cbe),e(Cbe,hsr),e(oT,psr),e(oT,cU),e(cU,_sr),e(oT,usr),e(H,bsr),e(H,rT),e(rT,wbe),e(wbe,vsr),e(rT,Fsr),e(rT,fU),e(fU,Tsr),e(rT,Msr),e(H,Esr),e(H,tT),e(tT,Abe),e(Abe,Csr),e(tT,wsr),e(tT,mU),e(mU,Asr),e(tT,Lsr),e(H,ysr),e(H,aT),e(aT,Lbe),e(Lbe,xsr),e(aT,$sr),e(aT,gU),e(gU,ksr),e(aT,Ssr),e(so,Rsr),e(so,nT),e(nT,Psr),e(nT,ybe),e(ybe,Bsr),e(nT,Isr),e(nT,xbe),e(xbe,Nsr),e(so,qsr),M(sT,so,null),b(f,$Ue,u),b(f,xd,u),e(xd,lT),e(lT,$be),M(P9,$be,null),e(xd,jsr),e(xd,kbe),e(kbe,Dsr),b(f,kUe,u),b(f,Oo,u),M(B9,Oo,null),e(Oo,Gsr),e(Oo,$d),e($d,Osr),e($d,hU),e(hU,Vsr),e($d,Xsr),e($d,pU),e(pU,zsr),e($d,Wsr),e(Oo,Qsr),e(Oo,I9),e(I9,Usr),e(I9,Sbe),e(Sbe,Hsr),e(I9,Jsr),e(Oo,Ysr),e(Oo,Tt),M(N9,Tt,null),e(Tt,Ksr),e(Tt,Rbe),e(Rbe,Zsr),e(Tt,elr),e(Tt,kd),e(kd,olr),e(kd,Pbe),e(Pbe,rlr),e(kd,tlr),e(kd,_U),e(_U,alr),e(kd,nlr),e(Tt,slr),M(iT,Tt,null),e(Oo,llr),e(Oo,lo),M(q9,lo,null),e(lo,ilr),e(lo,Bbe),e(Bbe,dlr),e(lo,clr),e(lo,Ka),e(Ka,flr),e(Ka,Ibe),e(Ibe,mlr),e(Ka,glr),e(Ka,Nbe),e(Nbe,hlr),e(Ka,plr),e(Ka,qbe),e(qbe,_lr),e(Ka,ulr),e(lo,blr),e(lo,V),e(V,dT),e(dT,jbe),e(jbe,vlr),e(dT,Flr),e(dT,uU),e(uU,Tlr),e(dT,Mlr),e(V,Elr),e(V,cT),e(cT,Dbe),e(Dbe,Clr),e(cT,wlr),e(cT,bU),e(bU,Alr),e(cT,Llr),e(V,ylr),e(V,fT),e(fT,Gbe),e(Gbe,xlr),e(fT,$lr),e(fT,vU),e(vU,klr),e(fT,Slr),e(V,Rlr),e(V,mT),e(mT,Obe),e(Obe,Plr),e(mT,Blr),e(mT,FU),e(FU,Ilr),e(mT,Nlr),e(V,qlr),e(V,gT),e(gT,Vbe),e(Vbe,jlr),e(gT,Dlr),e(gT,TU),e(TU,Glr),e(gT,Olr),e(V,Vlr),e(V,hT),e(hT,Xbe),e(Xbe,Xlr),e(hT,zlr),e(hT,MU),e(MU,Wlr),e(hT,Qlr),e(V,Ulr),e(V,pT),e(pT,zbe),e(zbe,Hlr),e(pT,Jlr),e(pT,EU),e(EU,Ylr),e(pT,Klr),e(V,Zlr),e(V,_T),e(_T,Wbe),e(Wbe,eir),e(_T,oir),e(_T,CU),e(CU,rir),e(_T,tir),e(V,air),e(V,uT),e(uT,Qbe),e(Qbe,nir),e(uT,sir),e(uT,wU),e(wU,lir),e(uT,iir),e(V,dir),e(V,bT),e(bT,Ube),e(Ube,cir),e(bT,fir),e(bT,AU),e(AU,mir),e(bT,gir),e(V,hir),e(V,vT),e(vT,Hbe),e(Hbe,pir),e(vT,_ir),e(vT,LU),e(LU,uir),e(vT,bir),e(V,vir),e(V,FT),e(FT,Jbe),e(Jbe,Fir),e(FT,Tir),e(FT,yU),e(yU,Mir),e(FT,Eir),e(V,Cir),e(V,TT),e(TT,Ybe),e(Ybe,wir),e(TT,Air),e(TT,xU),e(xU,Lir),e(TT,yir),e(V,xir),e(V,MT),e(MT,Kbe),e(Kbe,$ir),e(MT,kir),e(MT,$U),e($U,Sir),e(MT,Rir),e(V,Pir),e(V,ET),e(ET,Zbe),e(Zbe,Bir),e(ET,Iir),e(ET,kU),e(kU,Nir),e(ET,qir),e(V,jir),e(V,CT),e(CT,eve),e(eve,Dir),e(CT,Gir),e(CT,SU),e(SU,Oir),e(CT,Vir),e(V,Xir),e(V,wT),e(wT,ove),e(ove,zir),e(wT,Wir),e(wT,RU),e(RU,Qir),e(wT,Uir),e(V,Hir),e(V,AT),e(AT,rve),e(rve,Jir),e(AT,Yir),e(AT,PU),e(PU,Kir),e(AT,Zir),e(V,edr),e(V,LT),e(LT,tve),e(tve,odr),e(LT,rdr),e(LT,BU),e(BU,tdr),e(LT,adr),e(V,ndr),e(V,yT),e(yT,ave),e(ave,sdr),e(yT,ldr),e(yT,IU),e(IU,idr),e(yT,ddr),e(V,cdr),e(V,xT),e(xT,nve),e(nve,fdr),e(xT,mdr),e(xT,NU),e(NU,gdr),e(xT,hdr),e(V,pdr),e(V,$T),e($T,sve),e(sve,_dr),e($T,udr),e($T,qU),e(qU,bdr),e($T,vdr),e(V,Fdr),e(V,kT),e(kT,lve),e(lve,Tdr),e(kT,Mdr),e(kT,jU),e(jU,Edr),e(kT,Cdr),e(V,wdr),e(V,ST),e(ST,ive),e(ive,Adr),e(ST,Ldr),e(ST,DU),e(DU,ydr),e(ST,xdr),e(V,$dr),e(V,RT),e(RT,dve),e(dve,kdr),e(RT,Sdr),e(RT,GU),e(GU,Rdr),e(RT,Pdr),e(V,Bdr),e(V,PT),e(PT,cve),e(cve,Idr),e(PT,Ndr),e(PT,OU),e(OU,qdr),e(PT,jdr),e(V,Ddr),e(V,BT),e(BT,fve),e(fve,Gdr),e(BT,Odr),e(BT,VU),e(VU,Vdr),e(BT,Xdr),e(V,zdr),e(V,IT),e(IT,mve),e(mve,Wdr),e(IT,Qdr),e(IT,XU),e(XU,Udr),e(IT,Hdr),e(V,Jdr),e(V,NT),e(NT,gve),e(gve,Ydr),e(NT,Kdr),e(NT,zU),e(zU,Zdr),e(NT,ecr),e(V,ocr),e(V,qT),e(qT,hve),e(hve,rcr),e(qT,tcr),e(qT,WU),e(WU,acr),e(qT,ncr),e(V,scr),e(V,jT),e(jT,pve),e(pve,lcr),e(jT,icr),e(jT,QU),e(QU,dcr),e(jT,ccr),e(V,fcr),e(V,DT),e(DT,_ve),e(_ve,mcr),e(DT,gcr),e(DT,UU),e(UU,hcr),e(DT,pcr),e(V,_cr),e(V,GT),e(GT,uve),e(uve,ucr),e(GT,bcr),e(GT,HU),e(HU,vcr),e(GT,Fcr),e(V,Tcr),e(V,OT),e(OT,bve),e(bve,Mcr),e(OT,Ecr),e(OT,JU),e(JU,Ccr),e(OT,wcr),e(V,Acr),e(V,VT),e(VT,vve),e(vve,Lcr),e(VT,ycr),e(VT,YU),e(YU,xcr),e(VT,$cr),e(V,kcr),e(V,XT),e(XT,Fve),e(Fve,Scr),e(XT,Rcr),e(XT,KU),e(KU,Pcr),e(XT,Bcr),e(V,Icr),e(V,zT),e(zT,Tve),e(Tve,Ncr),e(zT,qcr),e(zT,ZU),e(ZU,jcr),e(zT,Dcr),e(V,Gcr),e(V,WT),e(WT,Mve),e(Mve,Ocr),e(WT,Vcr),e(WT,eH),e(eH,Xcr),e(WT,zcr),e(V,Wcr),e(V,QT),e(QT,Eve),e(Eve,Qcr),e(QT,Ucr),e(QT,oH),e(oH,Hcr),e(QT,Jcr),e(V,Ycr),e(V,UT),e(UT,Cve),e(Cve,Kcr),e(UT,Zcr),e(UT,rH),e(rH,efr),e(UT,ofr),e(V,rfr),e(V,HT),e(HT,wve),e(wve,tfr),e(HT,afr),e(HT,tH),e(tH,nfr),e(HT,sfr),e(V,lfr),e(V,JT),e(JT,Ave),e(Ave,ifr),e(JT,dfr),e(JT,aH),e(aH,cfr),e(JT,ffr),e(V,mfr),e(V,YT),e(YT,Lve),e(Lve,gfr),e(YT,hfr),e(YT,nH),e(nH,pfr),e(YT,_fr),e(lo,ufr),e(lo,KT),e(KT,bfr),e(KT,yve),e(yve,vfr),e(KT,Ffr),e(KT,xve),e(xve,Tfr),e(lo,Mfr),M(ZT,lo,null),b(f,SUe,u),b(f,Sd,u),e(Sd,e8),e(e8,$ve),M(j9,$ve,null),e(Sd,Efr),e(Sd,kve),e(kve,Cfr),b(f,RUe,u),b(f,Vo,u),M(D9,Vo,null),e(Vo,wfr),e(Vo,Rd),e(Rd,Afr),e(Rd,sH),e(sH,Lfr),e(Rd,yfr),e(Rd,lH),e(lH,xfr),e(Rd,$fr),e(Vo,kfr),e(Vo,G9),e(G9,Sfr),e(G9,Sve),e(Sve,Rfr),e(G9,Pfr),e(Vo,Bfr),e(Vo,Mt),M(O9,Mt,null),e(Mt,Ifr),e(Mt,Rve),e(Rve,Nfr),e(Mt,qfr),e(Mt,Pd),e(Pd,jfr),e(Pd,Pve),e(Pve,Dfr),e(Pd,Gfr),e(Pd,iH),e(iH,Ofr),e(Pd,Vfr),e(Mt,Xfr),M(o8,Mt,null),e(Vo,zfr),e(Vo,io),M(V9,io,null),e(io,Wfr),e(io,Bve),e(Bve,Qfr),e(io,Ufr),e(io,Za),e(Za,Hfr),e(Za,Ive),e(Ive,Jfr),e(Za,Yfr),e(Za,Nve),e(Nve,Kfr),e(Za,Zfr),e(Za,qve),e(qve,emr),e(Za,omr),e(io,rmr),e(io,jve),e(jve,r8),e(r8,Dve),e(Dve,tmr),e(r8,amr),e(r8,dH),e(dH,nmr),e(r8,smr),e(io,lmr),e(io,t8),e(t8,imr),e(t8,Gve),e(Gve,dmr),e(t8,cmr),e(t8,Ove),e(Ove,fmr),e(io,mmr),M(a8,io,null),b(f,PUe,u),b(f,Bd,u),e(Bd,n8),e(n8,Vve),M(X9,Vve,null),e(Bd,gmr),e(Bd,Xve),e(Xve,hmr),b(f,BUe,u),b(f,Xo,u),M(z9,Xo,null),e(Xo,pmr),e(Xo,Id),e(Id,_mr),e(Id,cH),e(cH,umr),e(Id,bmr),e(Id,fH),e(fH,vmr),e(Id,Fmr),e(Xo,Tmr),e(Xo,W9),e(W9,Mmr),e(W9,zve),e(zve,Emr),e(W9,Cmr),e(Xo,wmr),e(Xo,Et),M(Q9,Et,null),e(Et,Amr),e(Et,Wve),e(Wve,Lmr),e(Et,ymr),e(Et,Nd),e(Nd,xmr),e(Nd,Qve),e(Qve,$mr),e(Nd,kmr),e(Nd,mH),e(mH,Smr),e(Nd,Rmr),e(Et,Pmr),M(s8,Et,null),e(Xo,Bmr),e(Xo,co),M(U9,co,null),e(co,Imr),e(co,Uve),e(Uve,Nmr),e(co,qmr),e(co,en),e(en,jmr),e(en,Hve),e(Hve,Dmr),e(en,Gmr),e(en,Jve),e(Jve,Omr),e(en,Vmr),e(en,Yve),e(Yve,Xmr),e(en,zmr),e(co,Wmr),e(co,be),e(be,l8),e(l8,Kve),e(Kve,Qmr),e(l8,Umr),e(l8,gH),e(gH,Hmr),e(l8,Jmr),e(be,Ymr),e(be,i8),e(i8,Zve),e(Zve,Kmr),e(i8,Zmr),e(i8,hH),e(hH,egr),e(i8,ogr),e(be,rgr),e(be,d8),e(d8,eFe),e(eFe,tgr),e(d8,agr),e(d8,pH),e(pH,ngr),e(d8,sgr),e(be,lgr),e(be,c8),e(c8,oFe),e(oFe,igr),e(c8,dgr),e(c8,_H),e(_H,cgr),e(c8,fgr),e(be,mgr),e(be,sl),e(sl,rFe),e(rFe,ggr),e(sl,hgr),e(sl,uH),e(uH,pgr),e(sl,_gr),e(sl,bH),e(bH,ugr),e(sl,bgr),e(be,vgr),e(be,f8),e(f8,tFe),e(tFe,Fgr),e(f8,Tgr),e(f8,vH),e(vH,Mgr),e(f8,Egr),e(be,Cgr),e(be,ll),e(ll,aFe),e(aFe,wgr),e(ll,Agr),e(ll,FH),e(FH,Lgr),e(ll,ygr),e(ll,TH),e(TH,xgr),e(ll,$gr),e(be,kgr),e(be,m8),e(m8,nFe),e(nFe,Sgr),e(m8,Rgr),e(m8,MH),e(MH,Pgr),e(m8,Bgr),e(be,Igr),e(be,Ct),e(Ct,sFe),e(sFe,Ngr),e(Ct,qgr),e(Ct,EH),e(EH,jgr),e(Ct,Dgr),e(Ct,CH),e(CH,Ggr),e(Ct,Ogr),e(Ct,wH),e(wH,Vgr),e(Ct,Xgr),e(be,zgr),e(be,g8),e(g8,lFe),e(lFe,Wgr),e(g8,Qgr),e(g8,AH),e(AH,Ugr),e(g8,Hgr),e(be,Jgr),e(be,h8),e(h8,iFe),e(iFe,Ygr),e(h8,Kgr),e(h8,LH),e(LH,Zgr),e(h8,ehr),e(be,ohr),e(be,p8),e(p8,dFe),e(dFe,rhr),e(p8,thr),e(p8,yH),e(yH,ahr),e(p8,nhr),e(be,shr),e(be,_8),e(_8,cFe),e(cFe,lhr),e(_8,ihr),e(_8,xH),e(xH,dhr),e(_8,chr),e(be,fhr),e(be,u8),e(u8,fFe),e(fFe,mhr),e(u8,ghr),e(u8,$H),e($H,hhr),e(u8,phr),e(be,_hr),e(be,b8),e(b8,mFe),e(mFe,uhr),e(b8,bhr),e(b8,kH),e(kH,vhr),e(b8,Fhr),e(be,Thr),e(be,v8),e(v8,gFe),e(gFe,Mhr),e(v8,Ehr),e(v8,SH),e(SH,Chr),e(v8,whr),e(be,Ahr),e(be,F8),e(F8,hFe),e(hFe,Lhr),e(F8,yhr),e(F8,RH),e(RH,xhr),e(F8,$hr),e(co,khr),e(co,T8),e(T8,Shr),e(T8,pFe),e(pFe,Rhr),e(T8,Phr),e(T8,_Fe),e(_Fe,Bhr),e(co,Ihr),M(M8,co,null),b(f,IUe,u),b(f,qd,u),e(qd,E8),e(E8,uFe),M(H9,uFe,null),e(qd,Nhr),e(qd,bFe),e(bFe,qhr),b(f,NUe,u),b(f,zo,u),M(J9,zo,null),e(zo,jhr),e(zo,jd),e(jd,Dhr),e(jd,PH),e(PH,Ghr),e(jd,Ohr),e(jd,BH),e(BH,Vhr),e(jd,Xhr),e(zo,zhr),e(zo,Y9),e(Y9,Whr),e(Y9,vFe),e(vFe,Qhr),e(Y9,Uhr),e(zo,Hhr),e(zo,wt),M(K9,wt,null),e(wt,Jhr),e(wt,FFe),e(FFe,Yhr),e(wt,Khr),e(wt,Dd),e(Dd,Zhr),e(Dd,TFe),e(TFe,epr),e(Dd,opr),e(Dd,IH),e(IH,rpr),e(Dd,tpr),e(wt,apr),M(C8,wt,null),e(zo,npr),e(zo,fo),M(Z9,fo,null),e(fo,spr),e(fo,MFe),e(MFe,lpr),e(fo,ipr),e(fo,on),e(on,dpr),e(on,EFe),e(EFe,cpr),e(on,fpr),e(on,CFe),e(CFe,mpr),e(on,gpr),e(on,wFe),e(wFe,hpr),e(on,ppr),e(fo,_pr),e(fo,AFe),e(AFe,w8),e(w8,LFe),e(LFe,upr),e(w8,bpr),e(w8,NH),e(NH,vpr),e(w8,Fpr),e(fo,Tpr),e(fo,A8),e(A8,Mpr),e(A8,yFe),e(yFe,Epr),e(A8,Cpr),e(A8,xFe),e(xFe,wpr),e(fo,Apr),M(L8,fo,null),b(f,qUe,u),b(f,Gd,u),e(Gd,y8),e(y8,$Fe),M(ex,$Fe,null),e(Gd,Lpr),e(Gd,kFe),e(kFe,ypr),b(f,jUe,u),b(f,Wo,u),M(ox,Wo,null),e(Wo,xpr),e(Wo,Od),e(Od,$pr),e(Od,qH),e(qH,kpr),e(Od,Spr),e(Od,jH),e(jH,Rpr),e(Od,Ppr),e(Wo,Bpr),e(Wo,rx),e(rx,Ipr),e(rx,SFe),e(SFe,Npr),e(rx,qpr),e(Wo,jpr),e(Wo,At),M(tx,At,null),e(At,Dpr),e(At,RFe),e(RFe,Gpr),e(At,Opr),e(At,Vd),e(Vd,Vpr),e(Vd,PFe),e(PFe,Xpr),e(Vd,zpr),e(Vd,DH),e(DH,Wpr),e(Vd,Qpr),e(At,Upr),M(x8,At,null),e(Wo,Hpr),e(Wo,mo),M(ax,mo,null),e(mo,Jpr),e(mo,BFe),e(BFe,Ypr),e(mo,Kpr),e(mo,rn),e(rn,Zpr),e(rn,IFe),e(IFe,e_r),e(rn,o_r),e(rn,NFe),e(NFe,r_r),e(rn,t_r),e(rn,qFe),e(qFe,a_r),e(rn,n_r),e(mo,s_r),e(mo,jFe),e(jFe,$8),e($8,DFe),e(DFe,l_r),e($8,i_r),e($8,GH),e(GH,d_r),e($8,c_r),e(mo,f_r),e(mo,k8),e(k8,m_r),e(k8,GFe),e(GFe,g_r),e(k8,h_r),e(k8,OFe),e(OFe,p_r),e(mo,__r),M(S8,mo,null),b(f,DUe,u),b(f,Xd,u),e(Xd,R8),e(R8,VFe),M(nx,VFe,null),e(Xd,u_r),e(Xd,XFe),e(XFe,b_r),b(f,GUe,u),b(f,Qo,u),M(sx,Qo,null),e(Qo,v_r),e(Qo,zd),e(zd,F_r),e(zd,OH),e(OH,T_r),e(zd,M_r),e(zd,VH),e(VH,E_r),e(zd,C_r),e(Qo,w_r),e(Qo,lx),e(lx,A_r),e(lx,zFe),e(zFe,L_r),e(lx,y_r),e(Qo,x_r),e(Qo,Lt),M(ix,Lt,null),e(Lt,$_r),e(Lt,WFe),e(WFe,k_r),e(Lt,S_r),e(Lt,Wd),e(Wd,R_r),e(Wd,QFe),e(QFe,P_r),e(Wd,B_r),e(Wd,XH),e(XH,I_r),e(Wd,N_r),e(Lt,q_r),M(P8,Lt,null),e(Qo,j_r),e(Qo,go),M(dx,go,null),e(go,D_r),e(go,UFe),e(UFe,G_r),e(go,O_r),e(go,tn),e(tn,V_r),e(tn,HFe),e(HFe,X_r),e(tn,z_r),e(tn,JFe),e(JFe,W_r),e(tn,Q_r),e(tn,YFe),e(YFe,U_r),e(tn,H_r),e(go,J_r),e(go,KFe),e(KFe,B8),e(B8,ZFe),e(ZFe,Y_r),e(B8,K_r),e(B8,zH),e(zH,Z_r),e(B8,eur),e(go,our),e(go,I8),e(I8,rur),e(I8,eTe),e(eTe,tur),e(I8,aur),e(I8,oTe),e(oTe,nur),e(go,sur),M(N8,go,null),b(f,OUe,u),b(f,Qd,u),e(Qd,q8),e(q8,rTe),M(cx,rTe,null),e(Qd,lur),e(Qd,tTe),e(tTe,iur),b(f,VUe,u),b(f,Uo,u),M(fx,Uo,null),e(Uo,dur),e(Uo,Ud),e(Ud,cur),e(Ud,WH),e(WH,fur),e(Ud,mur),e(Ud,QH),e(QH,gur),e(Ud,hur),e(Uo,pur),e(Uo,mx),e(mx,_ur),e(mx,aTe),e(aTe,uur),e(mx,bur),e(Uo,vur),e(Uo,yt),M(gx,yt,null),e(yt,Fur),e(yt,nTe),e(nTe,Tur),e(yt,Mur),e(yt,Hd),e(Hd,Eur),e(Hd,sTe),e(sTe,Cur),e(Hd,wur),e(Hd,UH),e(UH,Aur),e(Hd,Lur),e(yt,yur),M(j8,yt,null),e(Uo,xur),e(Uo,ho),M(hx,ho,null),e(ho,$ur),e(ho,lTe),e(lTe,kur),e(ho,Sur),e(ho,an),e(an,Rur),e(an,iTe),e(iTe,Pur),e(an,Bur),e(an,dTe),e(dTe,Iur),e(an,Nur),e(an,cTe),e(cTe,qur),e(an,jur),e(ho,Dur),e(ho,Pe),e(Pe,D8),e(D8,fTe),e(fTe,Gur),e(D8,Our),e(D8,HH),e(HH,Vur),e(D8,Xur),e(Pe,zur),e(Pe,G8),e(G8,mTe),e(mTe,Wur),e(G8,Qur),e(G8,JH),e(JH,Uur),e(G8,Hur),e(Pe,Jur),e(Pe,O8),e(O8,gTe),e(gTe,Yur),e(O8,Kur),e(O8,YH),e(YH,Zur),e(O8,e5r),e(Pe,o5r),e(Pe,V8),e(V8,hTe),e(hTe,r5r),e(V8,t5r),e(V8,KH),e(KH,a5r),e(V8,n5r),e(Pe,s5r),e(Pe,X8),e(X8,pTe),e(pTe,l5r),e(X8,i5r),e(X8,ZH),e(ZH,d5r),e(X8,c5r),e(Pe,f5r),e(Pe,z8),e(z8,_Te),e(_Te,m5r),e(z8,g5r),e(z8,eJ),e(eJ,h5r),e(z8,p5r),e(Pe,_5r),e(Pe,W8),e(W8,uTe),e(uTe,u5r),e(W8,b5r),e(W8,oJ),e(oJ,v5r),e(W8,F5r),e(Pe,T5r),e(Pe,Q8),e(Q8,bTe),e(bTe,M5r),e(Q8,E5r),e(Q8,rJ),e(rJ,C5r),e(Q8,w5r),e(Pe,A5r),e(Pe,U8),e(U8,vTe),e(vTe,L5r),e(U8,y5r),e(U8,tJ),e(tJ,x5r),e(U8,$5r),e(ho,k5r),e(ho,H8),e(H8,S5r),e(H8,FTe),e(FTe,R5r),e(H8,P5r),e(H8,TTe),e(TTe,B5r),e(ho,I5r),M(J8,ho,null),b(f,XUe,u),b(f,Jd,u),e(Jd,Y8),e(Y8,MTe),M(px,MTe,null),e(Jd,N5r),e(Jd,ETe),e(ETe,q5r),b(f,zUe,u),b(f,Ho,u),M(_x,Ho,null),e(Ho,j5r),e(Ho,Yd),e(Yd,D5r),e(Yd,aJ),e(aJ,G5r),e(Yd,O5r),e(Yd,nJ),e(nJ,V5r),e(Yd,X5r),e(Ho,z5r),e(Ho,ux),e(ux,W5r),e(ux,CTe),e(CTe,Q5r),e(ux,U5r),e(Ho,H5r),e(Ho,xt),M(bx,xt,null),e(xt,J5r),e(xt,wTe),e(wTe,Y5r),e(xt,K5r),e(xt,Kd),e(Kd,Z5r),e(Kd,ATe),e(ATe,e1r),e(Kd,o1r),e(Kd,sJ),e(sJ,r1r),e(Kd,t1r),e(xt,a1r),M(K8,xt,null),e(Ho,n1r),e(Ho,po),M(vx,po,null),e(po,s1r),e(po,LTe),e(LTe,l1r),e(po,i1r),e(po,nn),e(nn,d1r),e(nn,yTe),e(yTe,c1r),e(nn,f1r),e(nn,xTe),e(xTe,m1r),e(nn,g1r),e(nn,$Te),e($Te,h1r),e(nn,p1r),e(po,_1r),e(po,st),e(st,Z8),e(Z8,kTe),e(kTe,u1r),e(Z8,b1r),e(Z8,lJ),e(lJ,v1r),e(Z8,F1r),e(st,T1r),e(st,eM),e(eM,STe),e(STe,M1r),e(eM,E1r),e(eM,iJ),e(iJ,C1r),e(eM,w1r),e(st,A1r),e(st,oM),e(oM,RTe),e(RTe,L1r),e(oM,y1r),e(oM,dJ),e(dJ,x1r),e(oM,$1r),e(st,k1r),e(st,rM),e(rM,PTe),e(PTe,S1r),e(rM,R1r),e(rM,cJ),e(cJ,P1r),e(rM,B1r),e(st,I1r),e(st,tM),e(tM,BTe),e(BTe,N1r),e(tM,q1r),e(tM,fJ),e(fJ,j1r),e(tM,D1r),e(po,G1r),e(po,aM),e(aM,O1r),e(aM,ITe),e(ITe,V1r),e(aM,X1r),e(aM,NTe),e(NTe,z1r),e(po,W1r),M(nM,po,null),b(f,WUe,u),b(f,Zd,u),e(Zd,sM),e(sM,qTe),M(Fx,qTe,null),e(Zd,Q1r),e(Zd,jTe),e(jTe,U1r),b(f,QUe,u),b(f,Jo,u),M(Tx,Jo,null),e(Jo,H1r),e(Jo,ec),e(ec,J1r),e(ec,mJ),e(mJ,Y1r),e(ec,K1r),e(ec,gJ),e(gJ,Z1r),e(ec,e2r),e(Jo,o2r),e(Jo,Mx),e(Mx,r2r),e(Mx,DTe),e(DTe,t2r),e(Mx,a2r),e(Jo,n2r),e(Jo,$t),M(Ex,$t,null),e($t,s2r),e($t,GTe),e(GTe,l2r),e($t,i2r),e($t,oc),e(oc,d2r),e(oc,OTe),e(OTe,c2r),e(oc,f2r),e(oc,hJ),e(hJ,m2r),e(oc,g2r),e($t,h2r),M(lM,$t,null),e(Jo,p2r),e(Jo,_o),M(Cx,_o,null),e(_o,_2r),e(_o,VTe),e(VTe,u2r),e(_o,b2r),e(_o,sn),e(sn,v2r),e(sn,XTe),e(XTe,F2r),e(sn,T2r),e(sn,zTe),e(zTe,M2r),e(sn,E2r),e(sn,WTe),e(WTe,C2r),e(sn,w2r),e(_o,A2r),e(_o,Le),e(Le,iM),e(iM,QTe),e(QTe,L2r),e(iM,y2r),e(iM,pJ),e(pJ,x2r),e(iM,$2r),e(Le,k2r),e(Le,dM),e(dM,UTe),e(UTe,S2r),e(dM,R2r),e(dM,_J),e(_J,P2r),e(dM,B2r),e(Le,I2r),e(Le,cM),e(cM,HTe),e(HTe,N2r),e(cM,q2r),e(cM,uJ),e(uJ,j2r),e(cM,D2r),e(Le,G2r),e(Le,fM),e(fM,JTe),e(JTe,O2r),e(fM,V2r),e(fM,bJ),e(bJ,X2r),e(fM,z2r),e(Le,W2r),e(Le,mM),e(mM,YTe),e(YTe,Q2r),e(mM,U2r),e(mM,vJ),e(vJ,H2r),e(mM,J2r),e(Le,Y2r),e(Le,gM),e(gM,KTe),e(KTe,K2r),e(gM,Z2r),e(gM,FJ),e(FJ,ebr),e(gM,obr),e(Le,rbr),e(Le,hM),e(hM,ZTe),e(ZTe,tbr),e(hM,abr),e(hM,TJ),e(TJ,nbr),e(hM,sbr),e(Le,lbr),e(Le,pM),e(pM,e8e),e(e8e,ibr),e(pM,dbr),e(pM,MJ),e(MJ,cbr),e(pM,fbr),e(Le,mbr),e(Le,_M),e(_M,o8e),e(o8e,gbr),e(_M,hbr),e(_M,EJ),e(EJ,pbr),e(_M,_br),e(Le,ubr),e(Le,uM),e(uM,r8e),e(r8e,bbr),e(uM,vbr),e(uM,CJ),e(CJ,Fbr),e(uM,Tbr),e(_o,Mbr),e(_o,bM),e(bM,Ebr),e(bM,t8e),e(t8e,Cbr),e(bM,wbr),e(bM,a8e),e(a8e,Abr),e(_o,Lbr),M(vM,_o,null),b(f,UUe,u),b(f,rc,u),e(rc,FM),e(FM,n8e),M(wx,n8e,null),e(rc,ybr),e(rc,s8e),e(s8e,xbr),b(f,HUe,u),b(f,Yo,u),M(Ax,Yo,null),e(Yo,$br),e(Yo,tc),e(tc,kbr),e(tc,wJ),e(wJ,Sbr),e(tc,Rbr),e(tc,AJ),e(AJ,Pbr),e(tc,Bbr),e(Yo,Ibr),e(Yo,Lx),e(Lx,Nbr),e(Lx,l8e),e(l8e,qbr),e(Lx,jbr),e(Yo,Dbr),e(Yo,kt),M(yx,kt,null),e(kt,Gbr),e(kt,i8e),e(i8e,Obr),e(kt,Vbr),e(kt,ac),e(ac,Xbr),e(ac,d8e),e(d8e,zbr),e(ac,Wbr),e(ac,LJ),e(LJ,Qbr),e(ac,Ubr),e(kt,Hbr),M(TM,kt,null),e(Yo,Jbr),e(Yo,uo),M(xx,uo,null),e(uo,Ybr),e(uo,c8e),e(c8e,Kbr),e(uo,Zbr),e(uo,ln),e(ln,evr),e(ln,f8e),e(f8e,ovr),e(ln,rvr),e(ln,m8e),e(m8e,tvr),e(ln,avr),e(ln,g8e),e(g8e,nvr),e(ln,svr),e(uo,lvr),e(uo,$x),e($x,MM),e(MM,h8e),e(h8e,ivr),e(MM,dvr),e(MM,yJ),e(yJ,cvr),e(MM,fvr),e($x,mvr),e($x,EM),e(EM,p8e),e(p8e,gvr),e(EM,hvr),e(EM,xJ),e(xJ,pvr),e(EM,_vr),e(uo,uvr),e(uo,CM),e(CM,bvr),e(CM,_8e),e(_8e,vvr),e(CM,Fvr),e(CM,u8e),e(u8e,Tvr),e(uo,Mvr),M(wM,uo,null),b(f,JUe,u),b(f,nc,u),e(nc,AM),e(AM,b8e),M(kx,b8e,null),e(nc,Evr),e(nc,v8e),e(v8e,Cvr),b(f,YUe,u),b(f,Ko,u),M(Sx,Ko,null),e(Ko,wvr),e(Ko,sc),e(sc,Avr),e(sc,$J),e($J,Lvr),e(sc,yvr),e(sc,kJ),e(kJ,xvr),e(sc,$vr),e(Ko,kvr),e(Ko,Rx),e(Rx,Svr),e(Rx,F8e),e(F8e,Rvr),e(Rx,Pvr),e(Ko,Bvr),e(Ko,St),M(Px,St,null),e(St,Ivr),e(St,T8e),e(T8e,Nvr),e(St,qvr),e(St,lc),e(lc,jvr),e(lc,M8e),e(M8e,Dvr),e(lc,Gvr),e(lc,SJ),e(SJ,Ovr),e(lc,Vvr),e(St,Xvr),M(LM,St,null),e(Ko,zvr),e(Ko,bo),M(Bx,bo,null),e(bo,Wvr),e(bo,E8e),e(E8e,Qvr),e(bo,Uvr),e(bo,dn),e(dn,Hvr),e(dn,C8e),e(C8e,Jvr),e(dn,Yvr),e(dn,w8e),e(w8e,Kvr),e(dn,Zvr),e(dn,A8e),e(A8e,eFr),e(dn,oFr),e(bo,rFr),e(bo,lt),e(lt,yM),e(yM,L8e),e(L8e,tFr),e(yM,aFr),e(yM,RJ),e(RJ,nFr),e(yM,sFr),e(lt,lFr),e(lt,xM),e(xM,y8e),e(y8e,iFr),e(xM,dFr),e(xM,PJ),e(PJ,cFr),e(xM,fFr),e(lt,mFr),e(lt,$M),e($M,x8e),e(x8e,gFr),e($M,hFr),e($M,BJ),e(BJ,pFr),e($M,_Fr),e(lt,uFr),e(lt,kM),e(kM,$8e),e($8e,bFr),e(kM,vFr),e(kM,IJ),e(IJ,FFr),e(kM,TFr),e(lt,MFr),e(lt,SM),e(SM,k8e),e(k8e,EFr),e(SM,CFr),e(SM,NJ),e(NJ,wFr),e(SM,AFr),e(bo,LFr),e(bo,RM),e(RM,yFr),e(RM,S8e),e(S8e,xFr),e(RM,$Fr),e(RM,R8e),e(R8e,kFr),e(bo,SFr),M(PM,bo,null),b(f,KUe,u),b(f,ic,u),e(ic,BM),e(BM,P8e),M(Ix,P8e,null),e(ic,RFr),e(ic,B8e),e(B8e,PFr),b(f,ZUe,u),b(f,Zo,u),M(Nx,Zo,null),e(Zo,BFr),e(Zo,dc),e(dc,IFr),e(dc,qJ),e(qJ,NFr),e(dc,qFr),e(dc,jJ),e(jJ,jFr),e(dc,DFr),e(Zo,GFr),e(Zo,qx),e(qx,OFr),e(qx,I8e),e(I8e,VFr),e(qx,XFr),e(Zo,zFr),e(Zo,Rt),M(jx,Rt,null),e(Rt,WFr),e(Rt,N8e),e(N8e,QFr),e(Rt,UFr),e(Rt,cc),e(cc,HFr),e(cc,q8e),e(q8e,JFr),e(cc,YFr),e(cc,DJ),e(DJ,KFr),e(cc,ZFr),e(Rt,eTr),M(IM,Rt,null),e(Zo,oTr),e(Zo,vo),M(Dx,vo,null),e(vo,rTr),e(vo,j8e),e(j8e,tTr),e(vo,aTr),e(vo,cn),e(cn,nTr),e(cn,D8e),e(D8e,sTr),e(cn,lTr),e(cn,G8e),e(G8e,iTr),e(cn,dTr),e(cn,O8e),e(O8e,cTr),e(cn,fTr),e(vo,mTr),e(vo,fn),e(fn,NM),e(NM,V8e),e(V8e,gTr),e(NM,hTr),e(NM,GJ),e(GJ,pTr),e(NM,_Tr),e(fn,uTr),e(fn,qM),e(qM,X8e),e(X8e,bTr),e(qM,vTr),e(qM,OJ),e(OJ,FTr),e(qM,TTr),e(fn,MTr),e(fn,jM),e(jM,z8e),e(z8e,ETr),e(jM,CTr),e(jM,VJ),e(VJ,wTr),e(jM,ATr),e(fn,LTr),e(fn,DM),e(DM,W8e),e(W8e,yTr),e(DM,xTr),e(DM,XJ),e(XJ,$Tr),e(DM,kTr),e(vo,STr),e(vo,GM),e(GM,RTr),e(GM,Q8e),e(Q8e,PTr),e(GM,BTr),e(GM,U8e),e(U8e,ITr),e(vo,NTr),M(OM,vo,null),b(f,eHe,u),b(f,fc,u),e(fc,VM),e(VM,H8e),M(Gx,H8e,null),e(fc,qTr),e(fc,J8e),e(J8e,jTr),b(f,oHe,u),b(f,er,u),M(Ox,er,null),e(er,DTr),e(er,mc),e(mc,GTr),e(mc,zJ),e(zJ,OTr),e(mc,VTr),e(mc,WJ),e(WJ,XTr),e(mc,zTr),e(er,WTr),e(er,Vx),e(Vx,QTr),e(Vx,Y8e),e(Y8e,UTr),e(Vx,HTr),e(er,JTr),e(er,Pt),M(Xx,Pt,null),e(Pt,YTr),e(Pt,K8e),e(K8e,KTr),e(Pt,ZTr),e(Pt,gc),e(gc,e8r),e(gc,Z8e),e(Z8e,o8r),e(gc,r8r),e(gc,QJ),e(QJ,t8r),e(gc,a8r),e(Pt,n8r),M(XM,Pt,null),e(er,s8r),e(er,Fo),M(zx,Fo,null),e(Fo,l8r),e(Fo,eMe),e(eMe,i8r),e(Fo,d8r),e(Fo,mn),e(mn,c8r),e(mn,oMe),e(oMe,f8r),e(mn,m8r),e(mn,rMe),e(rMe,g8r),e(mn,h8r),e(mn,tMe),e(tMe,p8r),e(mn,_8r),e(Fo,u8r),e(Fo,Wx),e(Wx,zM),e(zM,aMe),e(aMe,b8r),e(zM,v8r),e(zM,UJ),e(UJ,F8r),e(zM,T8r),e(Wx,M8r),e(Wx,WM),e(WM,nMe),e(nMe,E8r),e(WM,C8r),e(WM,HJ),e(HJ,w8r),e(WM,A8r),e(Fo,L8r),e(Fo,QM),e(QM,y8r),e(QM,sMe),e(sMe,x8r),e(QM,$8r),e(QM,lMe),e(lMe,k8r),e(Fo,S8r),M(UM,Fo,null),b(f,rHe,u),b(f,hc,u),e(hc,HM),e(HM,iMe),M(Qx,iMe,null),e(hc,R8r),e(hc,dMe),e(dMe,P8r),b(f,tHe,u),b(f,or,u),M(Ux,or,null),e(or,B8r),e(or,pc),e(pc,I8r),e(pc,JJ),e(JJ,N8r),e(pc,q8r),e(pc,YJ),e(YJ,j8r),e(pc,D8r),e(or,G8r),e(or,Hx),e(Hx,O8r),e(Hx,cMe),e(cMe,V8r),e(Hx,X8r),e(or,z8r),e(or,Bt),M(Jx,Bt,null),e(Bt,W8r),e(Bt,fMe),e(fMe,Q8r),e(Bt,U8r),e(Bt,_c),e(_c,H8r),e(_c,mMe),e(mMe,J8r),e(_c,Y8r),e(_c,KJ),e(KJ,K8r),e(_c,Z8r),e(Bt,eMr),M(JM,Bt,null),e(or,oMr),e(or,To),M(Yx,To,null),e(To,rMr),e(To,gMe),e(gMe,tMr),e(To,aMr),e(To,gn),e(gn,nMr),e(gn,hMe),e(hMe,sMr),e(gn,lMr),e(gn,pMe),e(pMe,iMr),e(gn,dMr),e(gn,_Me),e(_Me,cMr),e(gn,fMr),e(To,mMr),e(To,uMe),e(uMe,YM),e(YM,bMe),e(bMe,gMr),e(YM,hMr),e(YM,ZJ),e(ZJ,pMr),e(YM,_Mr),e(To,uMr),e(To,KM),e(KM,bMr),e(KM,vMe),e(vMe,vMr),e(KM,FMr),e(KM,FMe),e(FMe,TMr),e(To,MMr),M(ZM,To,null),b(f,aHe,u),b(f,uc,u),e(uc,eE),e(eE,TMe),M(Kx,TMe,null),e(uc,EMr),e(uc,MMe),e(MMe,CMr),b(f,nHe,u),b(f,rr,u),M(Zx,rr,null),e(rr,wMr),e(rr,bc),e(bc,AMr),e(bc,eY),e(eY,LMr),e(bc,yMr),e(bc,oY),e(oY,xMr),e(bc,$Mr),e(rr,kMr),e(rr,e$),e(e$,SMr),e(e$,EMe),e(EMe,RMr),e(e$,PMr),e(rr,BMr),e(rr,It),M(o$,It,null),e(It,IMr),e(It,CMe),e(CMe,NMr),e(It,qMr),e(It,vc),e(vc,jMr),e(vc,wMe),e(wMe,DMr),e(vc,GMr),e(vc,rY),e(rY,OMr),e(vc,VMr),e(It,XMr),M(oE,It,null),e(rr,zMr),e(rr,Mo),M(r$,Mo,null),e(Mo,WMr),e(Mo,AMe),e(AMe,QMr),e(Mo,UMr),e(Mo,hn),e(hn,HMr),e(hn,LMe),e(LMe,JMr),e(hn,YMr),e(hn,yMe),e(yMe,KMr),e(hn,ZMr),e(hn,xMe),e(xMe,eEr),e(hn,oEr),e(Mo,rEr),e(Mo,it),e(it,rE),e(rE,$Me),e($Me,tEr),e(rE,aEr),e(rE,tY),e(tY,nEr),e(rE,sEr),e(it,lEr),e(it,tE),e(tE,kMe),e(kMe,iEr),e(tE,dEr),e(tE,aY),e(aY,cEr),e(tE,fEr),e(it,mEr),e(it,aE),e(aE,SMe),e(SMe,gEr),e(aE,hEr),e(aE,nY),e(nY,pEr),e(aE,_Er),e(it,uEr),e(it,nE),e(nE,RMe),e(RMe,bEr),e(nE,vEr),e(nE,sY),e(sY,FEr),e(nE,TEr),e(it,MEr),e(it,sE),e(sE,PMe),e(PMe,EEr),e(sE,CEr),e(sE,lY),e(lY,wEr),e(sE,AEr),e(Mo,LEr),e(Mo,lE),e(lE,yEr),e(lE,BMe),e(BMe,xEr),e(lE,$Er),e(lE,IMe),e(IMe,kEr),e(Mo,SEr),M(iE,Mo,null),b(f,sHe,u),b(f,Fc,u),e(Fc,dE),e(dE,NMe),M(t$,NMe,null),e(Fc,REr),e(Fc,qMe),e(qMe,PEr),b(f,lHe,u),b(f,tr,u),M(a$,tr,null),e(tr,BEr),e(tr,Tc),e(Tc,IEr),e(Tc,iY),e(iY,NEr),e(Tc,qEr),e(Tc,dY),e(dY,jEr),e(Tc,DEr),e(tr,GEr),e(tr,n$),e(n$,OEr),e(n$,jMe),e(jMe,VEr),e(n$,XEr),e(tr,zEr),e(tr,Nt),M(s$,Nt,null),e(Nt,WEr),e(Nt,DMe),e(DMe,QEr),e(Nt,UEr),e(Nt,Mc),e(Mc,HEr),e(Mc,GMe),e(GMe,JEr),e(Mc,YEr),e(Mc,cY),e(cY,KEr),e(Mc,ZEr),e(Nt,e4r),M(cE,Nt,null),e(tr,o4r),e(tr,Eo),M(l$,Eo,null),e(Eo,r4r),e(Eo,OMe),e(OMe,t4r),e(Eo,a4r),e(Eo,pn),e(pn,n4r),e(pn,VMe),e(VMe,s4r),e(pn,l4r),e(pn,XMe),e(XMe,i4r),e(pn,d4r),e(pn,zMe),e(zMe,c4r),e(pn,f4r),e(Eo,m4r),e(Eo,WMe),e(WMe,fE),e(fE,QMe),e(QMe,g4r),e(fE,h4r),e(fE,fY),e(fY,p4r),e(fE,_4r),e(Eo,u4r),e(Eo,mE),e(mE,b4r),e(mE,UMe),e(UMe,v4r),e(mE,F4r),e(mE,HMe),e(HMe,T4r),e(Eo,M4r),M(gE,Eo,null),b(f,iHe,u),b(f,Ec,u),e(Ec,hE),e(hE,JMe),M(i$,JMe,null),e(Ec,E4r),e(Ec,YMe),e(YMe,C4r),b(f,dHe,u),b(f,ar,u),M(d$,ar,null),e(ar,w4r),e(ar,Cc),e(Cc,A4r),e(Cc,mY),e(mY,L4r),e(Cc,y4r),e(Cc,gY),e(gY,x4r),e(Cc,$4r),e(ar,k4r),e(ar,c$),e(c$,S4r),e(c$,KMe),e(KMe,R4r),e(c$,P4r),e(ar,B4r),e(ar,qt),M(f$,qt,null),e(qt,I4r),e(qt,ZMe),e(ZMe,N4r),e(qt,q4r),e(qt,wc),e(wc,j4r),e(wc,eEe),e(eEe,D4r),e(wc,G4r),e(wc,hY),e(hY,O4r),e(wc,V4r),e(qt,X4r),M(pE,qt,null),e(ar,z4r),e(ar,Rr),M(m$,Rr,null),e(Rr,W4r),e(Rr,oEe),e(oEe,Q4r),e(Rr,U4r),e(Rr,_n),e(_n,H4r),e(_n,rEe),e(rEe,J4r),e(_n,Y4r),e(_n,tEe),e(tEe,K4r),e(_n,Z4r),e(_n,aEe),e(aEe,eCr),e(_n,oCr),e(Rr,rCr),e(Rr,q),e(q,_E),e(_E,nEe),e(nEe,tCr),e(_E,aCr),e(_E,pY),e(pY,nCr),e(_E,sCr),e(q,lCr),e(q,uE),e(uE,sEe),e(sEe,iCr),e(uE,dCr),e(uE,_Y),e(_Y,cCr),e(uE,fCr),e(q,mCr),e(q,bE),e(bE,lEe),e(lEe,gCr),e(bE,hCr),e(bE,uY),e(uY,pCr),e(bE,_Cr),e(q,uCr),e(q,vE),e(vE,iEe),e(iEe,bCr),e(vE,vCr),e(vE,bY),e(bY,FCr),e(vE,TCr),e(q,MCr),e(q,FE),e(FE,dEe),e(dEe,ECr),e(FE,CCr),e(FE,vY),e(vY,wCr),e(FE,ACr),e(q,LCr),e(q,TE),e(TE,cEe),e(cEe,yCr),e(TE,xCr),e(TE,FY),e(FY,$Cr),e(TE,kCr),e(q,SCr),e(q,ME),e(ME,fEe),e(fEe,RCr),e(ME,PCr),e(ME,TY),e(TY,BCr),e(ME,ICr),e(q,NCr),e(q,EE),e(EE,mEe),e(mEe,qCr),e(EE,jCr),e(EE,MY),e(MY,DCr),e(EE,GCr),e(q,OCr),e(q,CE),e(CE,gEe),e(gEe,VCr),e(CE,XCr),e(CE,EY),e(EY,zCr),e(CE,WCr),e(q,QCr),e(q,wE),e(wE,hEe),e(hEe,UCr),e(wE,HCr),e(wE,CY),e(CY,JCr),e(wE,YCr),e(q,KCr),e(q,AE),e(AE,pEe),e(pEe,ZCr),e(AE,e3r),e(AE,wY),e(wY,o3r),e(AE,r3r),e(q,t3r),e(q,LE),e(LE,_Ee),e(_Ee,a3r),e(LE,n3r),e(LE,AY),e(AY,s3r),e(LE,l3r),e(q,i3r),e(q,yE),e(yE,uEe),e(uEe,d3r),e(yE,c3r),e(yE,LY),e(LY,f3r),e(yE,m3r),e(q,g3r),e(q,xE),e(xE,bEe),e(bEe,h3r),e(xE,p3r),e(xE,yY),e(yY,_3r),e(xE,u3r),e(q,b3r),e(q,$E),e($E,vEe),e(vEe,v3r),e($E,F3r),e($E,xY),e(xY,T3r),e($E,M3r),e(q,E3r),e(q,kE),e(kE,FEe),e(FEe,C3r),e(kE,w3r),e(kE,$Y),e($Y,A3r),e(kE,L3r),e(q,y3r),e(q,SE),e(SE,TEe),e(TEe,x3r),e(SE,$3r),e(SE,kY),e(kY,k3r),e(SE,S3r),e(q,R3r),e(q,RE),e(RE,MEe),e(MEe,P3r),e(RE,B3r),e(RE,SY),e(SY,I3r),e(RE,N3r),e(q,q3r),e(q,il),e(il,EEe),e(EEe,j3r),e(il,D3r),e(il,RY),e(RY,G3r),e(il,O3r),e(il,PY),e(PY,V3r),e(il,X3r),e(q,z3r),e(q,PE),e(PE,CEe),e(CEe,W3r),e(PE,Q3r),e(PE,BY),e(BY,U3r),e(PE,H3r),e(q,J3r),e(q,BE),e(BE,wEe),e(wEe,Y3r),e(BE,K3r),e(BE,IY),e(IY,Z3r),e(BE,e0r),e(q,o0r),e(q,IE),e(IE,AEe),e(AEe,r0r),e(IE,t0r),e(IE,NY),e(NY,a0r),e(IE,n0r),e(q,s0r),e(q,NE),e(NE,LEe),e(LEe,l0r),e(NE,i0r),e(NE,qY),e(qY,d0r),e(NE,c0r),e(q,f0r),e(q,qE),e(qE,yEe),e(yEe,m0r),e(qE,g0r),e(qE,jY),e(jY,h0r),e(qE,p0r),e(q,_0r),e(q,jE),e(jE,xEe),e(xEe,u0r),e(jE,b0r),e(jE,DY),e(DY,v0r),e(jE,F0r),e(q,T0r),e(q,DE),e(DE,$Ee),e($Ee,M0r),e(DE,E0r),e(DE,GY),e(GY,C0r),e(DE,w0r),e(q,A0r),e(q,GE),e(GE,kEe),e(kEe,L0r),e(GE,y0r),e(GE,OY),e(OY,x0r),e(GE,$0r),e(q,k0r),e(q,OE),e(OE,SEe),e(SEe,S0r),e(OE,R0r),e(OE,VY),e(VY,P0r),e(OE,B0r),e(q,I0r),e(q,VE),e(VE,REe),e(REe,N0r),e(VE,q0r),e(VE,XY),e(XY,j0r),e(VE,D0r),e(q,G0r),e(q,XE),e(XE,PEe),e(PEe,O0r),e(XE,V0r),e(XE,zY),e(zY,X0r),e(XE,z0r),e(q,W0r),e(q,zE),e(zE,BEe),e(BEe,Q0r),e(zE,U0r),e(zE,WY),e(WY,H0r),e(zE,J0r),e(q,Y0r),e(q,WE),e(WE,IEe),e(IEe,K0r),e(WE,Z0r),e(WE,QY),e(QY,ewr),e(WE,owr),e(q,rwr),e(q,QE),e(QE,NEe),e(NEe,twr),e(QE,awr),e(QE,UY),e(UY,nwr),e(QE,swr),e(q,lwr),e(q,UE),e(UE,qEe),e(qEe,iwr),e(UE,dwr),e(UE,HY),e(HY,cwr),e(UE,fwr),e(q,mwr),e(q,HE),e(HE,jEe),e(jEe,gwr),e(HE,hwr),e(HE,JY),e(JY,pwr),e(HE,_wr),e(q,uwr),e(q,JE),e(JE,DEe),e(DEe,bwr),e(JE,vwr),e(JE,YY),e(YY,Fwr),e(JE,Twr),e(q,Mwr),e(q,YE),e(YE,GEe),e(GEe,Ewr),e(YE,Cwr),e(YE,KY),e(KY,wwr),e(YE,Awr),e(q,Lwr),e(q,KE),e(KE,OEe),e(OEe,ywr),e(KE,xwr),e(KE,ZY),e(ZY,$wr),e(KE,kwr),e(q,Swr),e(q,ZE),e(ZE,VEe),e(VEe,Rwr),e(ZE,Pwr),e(ZE,eK),e(eK,Bwr),e(ZE,Iwr),e(q,Nwr),e(q,e4),e(e4,XEe),e(XEe,qwr),e(e4,jwr),e(e4,oK),e(oK,Dwr),e(e4,Gwr),e(q,Owr),e(q,o4),e(o4,zEe),e(zEe,Vwr),e(o4,Xwr),e(o4,rK),e(rK,zwr),e(o4,Wwr),e(q,Qwr),e(q,r4),e(r4,WEe),e(WEe,Uwr),e(r4,Hwr),e(r4,tK),e(tK,Jwr),e(r4,Ywr),e(q,Kwr),e(q,t4),e(t4,QEe),e(QEe,Zwr),e(t4,e6r),e(t4,aK),e(aK,o6r),e(t4,r6r),e(q,t6r),e(q,a4),e(a4,UEe),e(UEe,a6r),e(a4,n6r),e(a4,nK),e(nK,s6r),e(a4,l6r),e(q,i6r),e(q,n4),e(n4,HEe),e(HEe,d6r),e(n4,c6r),e(n4,sK),e(sK,f6r),e(n4,m6r),e(q,g6r),e(q,s4),e(s4,JEe),e(JEe,h6r),e(s4,p6r),e(s4,lK),e(lK,_6r),e(s4,u6r),e(q,b6r),e(q,l4),e(l4,YEe),e(YEe,v6r),e(l4,F6r),e(l4,iK),e(iK,T6r),e(l4,M6r),e(q,E6r),e(q,i4),e(i4,KEe),e(KEe,C6r),e(i4,w6r),e(i4,dK),e(dK,A6r),e(i4,L6r),e(q,y6r),e(q,d4),e(d4,ZEe),e(ZEe,x6r),e(d4,$6r),e(d4,cK),e(cK,k6r),e(d4,S6r),e(q,R6r),e(q,c4),e(c4,e4e),e(e4e,P6r),e(c4,B6r),e(c4,fK),e(fK,I6r),e(c4,N6r),e(q,q6r),e(q,f4),e(f4,o4e),e(o4e,j6r),e(f4,D6r),e(f4,mK),e(mK,G6r),e(f4,O6r),e(q,V6r),e(q,m4),e(m4,r4e),e(r4e,X6r),e(m4,z6r),e(m4,gK),e(gK,W6r),e(m4,Q6r),e(Rr,U6r),M(g4,Rr,null),b(f,cHe,u),b(f,Ac,u),e(Ac,h4),e(h4,t4e),M(g$,t4e,null),e(Ac,H6r),e(Ac,a4e),e(a4e,J6r),b(f,fHe,u),b(f,nr,u),M(h$,nr,null),e(nr,Y6r),e(nr,Lc),e(Lc,K6r),e(Lc,hK),e(hK,Z6r),e(Lc,eAr),e(Lc,pK),e(pK,oAr),e(Lc,rAr),e(nr,tAr),e(nr,p$),e(p$,aAr),e(p$,n4e),e(n4e,nAr),e(p$,sAr),e(nr,lAr),e(nr,jt),M(_$,jt,null),e(jt,iAr),e(jt,s4e),e(s4e,dAr),e(jt,cAr),e(jt,yc),e(yc,fAr),e(yc,l4e),e(l4e,mAr),e(yc,gAr),e(yc,_K),e(_K,hAr),e(yc,pAr),e(jt,_Ar),M(p4,jt,null),e(nr,uAr),e(nr,Pr),M(u$,Pr,null),e(Pr,bAr),e(Pr,i4e),e(i4e,vAr),e(Pr,FAr),e(Pr,un),e(un,TAr),e(un,d4e),e(d4e,MAr),e(un,EAr),e(un,c4e),e(c4e,CAr),e(un,wAr),e(un,f4e),e(f4e,AAr),e(un,LAr),e(Pr,yAr),e(Pr,se),e(se,_4),e(_4,m4e),e(m4e,xAr),e(_4,$Ar),e(_4,uK),e(uK,kAr),e(_4,SAr),e(se,RAr),e(se,u4),e(u4,g4e),e(g4e,PAr),e(u4,BAr),e(u4,bK),e(bK,IAr),e(u4,NAr),e(se,qAr),e(se,b4),e(b4,h4e),e(h4e,jAr),e(b4,DAr),e(b4,vK),e(vK,GAr),e(b4,OAr),e(se,VAr),e(se,v4),e(v4,p4e),e(p4e,XAr),e(v4,zAr),e(v4,FK),e(FK,WAr),e(v4,QAr),e(se,UAr),e(se,F4),e(F4,_4e),e(_4e,HAr),e(F4,JAr),e(F4,TK),e(TK,YAr),e(F4,KAr),e(se,ZAr),e(se,T4),e(T4,u4e),e(u4e,e7r),e(T4,o7r),e(T4,MK),e(MK,r7r),e(T4,t7r),e(se,a7r),e(se,M4),e(M4,b4e),e(b4e,n7r),e(M4,s7r),e(M4,EK),e(EK,l7r),e(M4,i7r),e(se,d7r),e(se,E4),e(E4,v4e),e(v4e,c7r),e(E4,f7r),e(E4,CK),e(CK,m7r),e(E4,g7r),e(se,h7r),e(se,C4),e(C4,F4e),e(F4e,p7r),e(C4,_7r),e(C4,wK),e(wK,u7r),e(C4,b7r),e(se,v7r),e(se,w4),e(w4,T4e),e(T4e,F7r),e(w4,T7r),e(w4,AK),e(AK,M7r),e(w4,E7r),e(se,C7r),e(se,A4),e(A4,M4e),e(M4e,w7r),e(A4,A7r),e(A4,LK),e(LK,L7r),e(A4,y7r),e(se,x7r),e(se,L4),e(L4,E4e),e(E4e,$7r),e(L4,k7r),e(L4,yK),e(yK,S7r),e(L4,R7r),e(se,P7r),e(se,y4),e(y4,C4e),e(C4e,B7r),e(y4,I7r),e(y4,xK),e(xK,N7r),e(y4,q7r),e(se,j7r),e(se,x4),e(x4,w4e),e(w4e,D7r),e(x4,G7r),e(x4,$K),e($K,O7r),e(x4,V7r),e(se,X7r),e(se,$4),e($4,A4e),e(A4e,z7r),e($4,W7r),e($4,kK),e(kK,Q7r),e($4,U7r),e(se,H7r),e(se,k4),e(k4,L4e),e(L4e,J7r),e(k4,Y7r),e(k4,SK),e(SK,K7r),e(k4,Z7r),e(se,eLr),e(se,S4),e(S4,y4e),e(y4e,oLr),e(S4,rLr),e(S4,RK),e(RK,tLr),e(S4,aLr),e(se,nLr),e(se,R4),e(R4,x4e),e(x4e,sLr),e(R4,lLr),e(R4,PK),e(PK,iLr),e(R4,dLr),e(se,cLr),e(se,P4),e(P4,$4e),e($4e,fLr),e(P4,mLr),e(P4,BK),e(BK,gLr),e(P4,hLr),e(se,pLr),e(se,B4),e(B4,k4e),e(k4e,_Lr),e(B4,uLr),e(B4,IK),e(IK,bLr),e(B4,vLr),e(se,FLr),e(se,I4),e(I4,S4e),e(S4e,TLr),e(I4,MLr),e(I4,NK),e(NK,ELr),e(I4,CLr),e(se,wLr),e(se,N4),e(N4,R4e),e(R4e,ALr),e(N4,LLr),e(N4,qK),e(qK,yLr),e(N4,xLr),e(se,$Lr),e(se,q4),e(q4,P4e),e(P4e,kLr),e(q4,SLr),e(q4,jK),e(jK,RLr),e(q4,PLr),e(Pr,BLr),M(j4,Pr,null),b(f,mHe,u),b(f,xc,u),e(xc,D4),e(D4,B4e),M(b$,B4e,null),e(xc,ILr),e(xc,I4e),e(I4e,NLr),b(f,gHe,u),b(f,sr,u),M(v$,sr,null),e(sr,qLr),e(sr,$c),e($c,jLr),e($c,DK),e(DK,DLr),e($c,GLr),e($c,GK),e(GK,OLr),e($c,VLr),e(sr,XLr),e(sr,F$),e(F$,zLr),e(F$,N4e),e(N4e,WLr),e(F$,QLr),e(sr,ULr),e(sr,Dt),M(T$,Dt,null),e(Dt,HLr),e(Dt,q4e),e(q4e,JLr),e(Dt,YLr),e(Dt,kc),e(kc,KLr),e(kc,j4e),e(j4e,ZLr),e(kc,eyr),e(kc,OK),e(OK,oyr),e(kc,ryr),e(Dt,tyr),M(G4,Dt,null),e(sr,ayr),e(sr,Br),M(M$,Br,null),e(Br,nyr),e(Br,D4e),e(D4e,syr),e(Br,lyr),e(Br,bn),e(bn,iyr),e(bn,G4e),e(G4e,dyr),e(bn,cyr),e(bn,O4e),e(O4e,fyr),e(bn,myr),e(bn,V4e),e(V4e,gyr),e(bn,hyr),e(Br,pyr),e(Br,Me),e(Me,O4),e(O4,X4e),e(X4e,_yr),e(O4,uyr),e(O4,VK),e(VK,byr),e(O4,vyr),e(Me,Fyr),e(Me,V4),e(V4,z4e),e(z4e,Tyr),e(V4,Myr),e(V4,XK),e(XK,Eyr),e(V4,Cyr),e(Me,wyr),e(Me,X4),e(X4,W4e),e(W4e,Ayr),e(X4,Lyr),e(X4,zK),e(zK,yyr),e(X4,xyr),e(Me,$yr),e(Me,z4),e(z4,Q4e),e(Q4e,kyr),e(z4,Syr),e(z4,WK),e(WK,Ryr),e(z4,Pyr),e(Me,Byr),e(Me,W4),e(W4,U4e),e(U4e,Iyr),e(W4,Nyr),e(W4,QK),e(QK,qyr),e(W4,jyr),e(Me,Dyr),e(Me,Q4),e(Q4,H4e),e(H4e,Gyr),e(Q4,Oyr),e(Q4,UK),e(UK,Vyr),e(Q4,Xyr),e(Me,zyr),e(Me,U4),e(U4,J4e),e(J4e,Wyr),e(U4,Qyr),e(U4,HK),e(HK,Uyr),e(U4,Hyr),e(Me,Jyr),e(Me,H4),e(H4,Y4e),e(Y4e,Yyr),e(H4,Kyr),e(H4,JK),e(JK,Zyr),e(H4,e9r),e(Me,o9r),e(Me,J4),e(J4,K4e),e(K4e,r9r),e(J4,t9r),e(J4,YK),e(YK,a9r),e(J4,n9r),e(Me,s9r),e(Me,Y4),e(Y4,Z4e),e(Z4e,l9r),e(Y4,i9r),e(Y4,KK),e(KK,d9r),e(Y4,c9r),e(Me,f9r),e(Me,K4),e(K4,eCe),e(eCe,m9r),e(K4,g9r),e(K4,ZK),e(ZK,h9r),e(K4,p9r),e(Me,_9r),e(Me,Z4),e(Z4,oCe),e(oCe,u9r),e(Z4,b9r),e(Z4,eZ),e(eZ,v9r),e(Z4,F9r),e(Me,T9r),e(Me,eC),e(eC,rCe),e(rCe,M9r),e(eC,E9r),e(eC,oZ),e(oZ,C9r),e(eC,w9r),e(Br,A9r),M(oC,Br,null),b(f,hHe,u),b(f,Sc,u),e(Sc,rC),e(rC,tCe),M(E$,tCe,null),e(Sc,L9r),e(Sc,aCe),e(aCe,y9r),b(f,pHe,u),b(f,lr,u),M(C$,lr,null),e(lr,x9r),e(lr,Rc),e(Rc,$9r),e(Rc,rZ),e(rZ,k9r),e(Rc,S9r),e(Rc,tZ),e(tZ,R9r),e(Rc,P9r),e(lr,B9r),e(lr,w$),e(w$,I9r),e(w$,nCe),e(nCe,N9r),e(w$,q9r),e(lr,j9r),e(lr,Gt),M(A$,Gt,null),e(Gt,D9r),e(Gt,sCe),e(sCe,G9r),e(Gt,O9r),e(Gt,Pc),e(Pc,V9r),e(Pc,lCe),e(lCe,X9r),e(Pc,z9r),e(Pc,aZ),e(aZ,W9r),e(Pc,Q9r),e(Gt,U9r),M(tC,Gt,null),e(lr,H9r),e(lr,Ir),M(L$,Ir,null),e(Ir,J9r),e(Ir,iCe),e(iCe,Y9r),e(Ir,K9r),e(Ir,vn),e(vn,Z9r),e(vn,dCe),e(dCe,exr),e(vn,oxr),e(vn,cCe),e(cCe,rxr),e(vn,txr),e(vn,fCe),e(fCe,axr),e(vn,nxr),e(Ir,sxr),e(Ir,Be),e(Be,aC),e(aC,mCe),e(mCe,lxr),e(aC,ixr),e(aC,nZ),e(nZ,dxr),e(aC,cxr),e(Be,fxr),e(Be,nC),e(nC,gCe),e(gCe,mxr),e(nC,gxr),e(nC,sZ),e(sZ,hxr),e(nC,pxr),e(Be,_xr),e(Be,dl),e(dl,hCe),e(hCe,uxr),e(dl,bxr),e(dl,lZ),e(lZ,vxr),e(dl,Fxr),e(dl,iZ),e(iZ,Txr),e(dl,Mxr),e(Be,Exr),e(Be,sC),e(sC,pCe),e(pCe,Cxr),e(sC,wxr),e(sC,dZ),e(dZ,Axr),e(sC,Lxr),e(Be,yxr),e(Be,lC),e(lC,_Ce),e(_Ce,xxr),e(lC,$xr),e(lC,cZ),e(cZ,kxr),e(lC,Sxr),e(Be,Rxr),e(Be,iC),e(iC,uCe),e(uCe,Pxr),e(iC,Bxr),e(iC,fZ),e(fZ,Ixr),e(iC,Nxr),e(Be,qxr),e(Be,dC),e(dC,bCe),e(bCe,jxr),e(dC,Dxr),e(dC,mZ),e(mZ,Gxr),e(dC,Oxr),e(Be,Vxr),e(Be,cC),e(cC,vCe),e(vCe,Xxr),e(cC,zxr),e(cC,gZ),e(gZ,Wxr),e(cC,Qxr),e(Be,Uxr),e(Be,fC),e(fC,FCe),e(FCe,Hxr),e(fC,Jxr),e(fC,hZ),e(hZ,Yxr),e(fC,Kxr),e(Ir,Zxr),M(mC,Ir,null),b(f,_He,u),b(f,Bc,u),e(Bc,gC),e(gC,TCe),M(y$,TCe,null),e(Bc,e$r),e(Bc,MCe),e(MCe,o$r),b(f,uHe,u),b(f,ir,u),M(x$,ir,null),e(ir,r$r),e(ir,Ic),e(Ic,t$r),e(Ic,pZ),e(pZ,a$r),e(Ic,n$r),e(Ic,_Z),e(_Z,s$r),e(Ic,l$r),e(ir,i$r),e(ir,$$),e($$,d$r),e($$,ECe),e(ECe,c$r),e($$,f$r),e(ir,m$r),e(ir,Ot),M(k$,Ot,null),e(Ot,g$r),e(Ot,CCe),e(CCe,h$r),e(Ot,p$r),e(Ot,Nc),e(Nc,_$r),e(Nc,wCe),e(wCe,u$r),e(Nc,b$r),e(Nc,uZ),e(uZ,v$r),e(Nc,F$r),e(Ot,T$r),M(hC,Ot,null),e(ir,M$r),e(ir,Nr),M(S$,Nr,null),e(Nr,E$r),e(Nr,ACe),e(ACe,C$r),e(Nr,w$r),e(Nr,Fn),e(Fn,A$r),e(Fn,LCe),e(LCe,L$r),e(Fn,y$r),e(Fn,yCe),e(yCe,x$r),e(Fn,$$r),e(Fn,xCe),e(xCe,k$r),e(Fn,S$r),e(Nr,R$r),e(Nr,qc),e(qc,pC),e(pC,$Ce),e($Ce,P$r),e(pC,B$r),e(pC,bZ),e(bZ,I$r),e(pC,N$r),e(qc,q$r),e(qc,_C),e(_C,kCe),e(kCe,j$r),e(_C,D$r),e(_C,vZ),e(vZ,G$r),e(_C,O$r),e(qc,V$r),e(qc,uC),e(uC,SCe),e(SCe,X$r),e(uC,z$r),e(uC,FZ),e(FZ,W$r),e(uC,Q$r),e(Nr,U$r),M(bC,Nr,null),b(f,bHe,u),b(f,jc,u),e(jc,vC),e(vC,RCe),M(R$,RCe,null),e(jc,H$r),e(jc,PCe),e(PCe,J$r),b(f,vHe,u),b(f,dr,u),M(P$,dr,null),e(dr,Y$r),e(dr,Dc),e(Dc,K$r),e(Dc,TZ),e(TZ,Z$r),e(Dc,ekr),e(Dc,MZ),e(MZ,okr),e(Dc,rkr),e(dr,tkr),e(dr,B$),e(B$,akr),e(B$,BCe),e(BCe,nkr),e(B$,skr),e(dr,lkr),e(dr,Vt),M(I$,Vt,null),e(Vt,ikr),e(Vt,ICe),e(ICe,dkr),e(Vt,ckr),e(Vt,Gc),e(Gc,fkr),e(Gc,NCe),e(NCe,mkr),e(Gc,gkr),e(Gc,EZ),e(EZ,hkr),e(Gc,pkr),e(Vt,_kr),M(FC,Vt,null),e(dr,ukr),e(dr,qr),M(N$,qr,null),e(qr,bkr),e(qr,qCe),e(qCe,vkr),e(qr,Fkr),e(qr,Tn),e(Tn,Tkr),e(Tn,jCe),e(jCe,Mkr),e(Tn,Ekr),e(Tn,DCe),e(DCe,Ckr),e(Tn,wkr),e(Tn,GCe),e(GCe,Akr),e(Tn,Lkr),e(qr,ykr),e(qr,de),e(de,TC),e(TC,OCe),e(OCe,xkr),e(TC,$kr),e(TC,CZ),e(CZ,kkr),e(TC,Skr),e(de,Rkr),e(de,MC),e(MC,VCe),e(VCe,Pkr),e(MC,Bkr),e(MC,wZ),e(wZ,Ikr),e(MC,Nkr),e(de,qkr),e(de,EC),e(EC,XCe),e(XCe,jkr),e(EC,Dkr),e(EC,AZ),e(AZ,Gkr),e(EC,Okr),e(de,Vkr),e(de,CC),e(CC,zCe),e(zCe,Xkr),e(CC,zkr),e(CC,LZ),e(LZ,Wkr),e(CC,Qkr),e(de,Ukr),e(de,wC),e(wC,WCe),e(WCe,Hkr),e(wC,Jkr),e(wC,yZ),e(yZ,Ykr),e(wC,Kkr),e(de,Zkr),e(de,AC),e(AC,QCe),e(QCe,eSr),e(AC,oSr),e(AC,xZ),e(xZ,rSr),e(AC,tSr),e(de,aSr),e(de,LC),e(LC,UCe),e(UCe,nSr),e(LC,sSr),e(LC,$Z),e($Z,lSr),e(LC,iSr),e(de,dSr),e(de,yC),e(yC,HCe),e(HCe,cSr),e(yC,fSr),e(yC,kZ),e(kZ,mSr),e(yC,gSr),e(de,hSr),e(de,xC),e(xC,JCe),e(JCe,pSr),e(xC,_Sr),e(xC,SZ),e(SZ,uSr),e(xC,bSr),e(de,vSr),e(de,$C),e($C,YCe),e(YCe,FSr),e($C,TSr),e($C,RZ),e(RZ,MSr),e($C,ESr),e(de,CSr),e(de,kC),e(kC,KCe),e(KCe,wSr),e(kC,ASr),e(kC,PZ),e(PZ,LSr),e(kC,ySr),e(de,xSr),e(de,SC),e(SC,ZCe),e(ZCe,$Sr),e(SC,kSr),e(SC,BZ),e(BZ,SSr),e(SC,RSr),e(de,PSr),e(de,RC),e(RC,e3e),e(e3e,BSr),e(RC,ISr),e(RC,IZ),e(IZ,NSr),e(RC,qSr),e(de,jSr),e(de,PC),e(PC,o3e),e(o3e,DSr),e(PC,GSr),e(PC,NZ),e(NZ,OSr),e(PC,VSr),e(de,XSr),e(de,BC),e(BC,r3e),e(r3e,zSr),e(BC,WSr),e(BC,qZ),e(qZ,QSr),e(BC,USr),e(de,HSr),e(de,IC),e(IC,t3e),e(t3e,JSr),e(IC,YSr),e(IC,jZ),e(jZ,KSr),e(IC,ZSr),e(de,eRr),e(de,NC),e(NC,a3e),e(a3e,oRr),e(NC,rRr),e(NC,DZ),e(DZ,tRr),e(NC,aRr),e(de,nRr),e(de,qC),e(qC,n3e),e(n3e,sRr),e(qC,lRr),e(qC,GZ),e(GZ,iRr),e(qC,dRr),e(de,cRr),e(de,jC),e(jC,s3e),e(s3e,fRr),e(jC,mRr),e(jC,OZ),e(OZ,gRr),e(jC,hRr),e(de,pRr),e(de,DC),e(DC,l3e),e(l3e,_Rr),e(DC,uRr),e(DC,VZ),e(VZ,bRr),e(DC,vRr),e(qr,FRr),M(GC,qr,null),b(f,FHe,u),b(f,Oc,u),e(Oc,OC),e(OC,i3e),M(q$,i3e,null),e(Oc,TRr),e(Oc,d3e),e(d3e,MRr),b(f,THe,u),b(f,cr,u),M(j$,cr,null),e(cr,ERr),e(cr,Vc),e(Vc,CRr),e(Vc,XZ),e(XZ,wRr),e(Vc,ARr),e(Vc,zZ),e(zZ,LRr),e(Vc,yRr),e(cr,xRr),e(cr,D$),e(D$,$Rr),e(D$,c3e),e(c3e,kRr),e(D$,SRr),e(cr,RRr),e(cr,Xt),M(G$,Xt,null),e(Xt,PRr),e(Xt,f3e),e(f3e,BRr),e(Xt,IRr),e(Xt,Xc),e(Xc,NRr),e(Xc,m3e),e(m3e,qRr),e(Xc,jRr),e(Xc,WZ),e(WZ,DRr),e(Xc,GRr),e(Xt,ORr),M(VC,Xt,null),e(cr,VRr),e(cr,jr),M(O$,jr,null),e(jr,XRr),e(jr,g3e),e(g3e,zRr),e(jr,WRr),e(jr,Mn),e(Mn,QRr),e(Mn,h3e),e(h3e,URr),e(Mn,HRr),e(Mn,p3e),e(p3e,JRr),e(Mn,YRr),e(Mn,_3e),e(_3e,KRr),e(Mn,ZRr),e(jr,ePr),e(jr,ye),e(ye,XC),e(XC,u3e),e(u3e,oPr),e(XC,rPr),e(XC,QZ),e(QZ,tPr),e(XC,aPr),e(ye,nPr),e(ye,zC),e(zC,b3e),e(b3e,sPr),e(zC,lPr),e(zC,UZ),e(UZ,iPr),e(zC,dPr),e(ye,cPr),e(ye,WC),e(WC,v3e),e(v3e,fPr),e(WC,mPr),e(WC,HZ),e(HZ,gPr),e(WC,hPr),e(ye,pPr),e(ye,QC),e(QC,F3e),e(F3e,_Pr),e(QC,uPr),e(QC,JZ),e(JZ,bPr),e(QC,vPr),e(ye,FPr),e(ye,UC),e(UC,T3e),e(T3e,TPr),e(UC,MPr),e(UC,YZ),e(YZ,EPr),e(UC,CPr),e(ye,wPr),e(ye,HC),e(HC,M3e),e(M3e,APr),e(HC,LPr),e(HC,KZ),e(KZ,yPr),e(HC,xPr),e(ye,$Pr),e(ye,JC),e(JC,E3e),e(E3e,kPr),e(JC,SPr),e(JC,ZZ),e(ZZ,RPr),e(JC,PPr),e(ye,BPr),e(ye,YC),e(YC,C3e),e(C3e,IPr),e(YC,NPr),e(YC,eee),e(eee,qPr),e(YC,jPr),e(ye,DPr),e(ye,KC),e(KC,w3e),e(w3e,GPr),e(KC,OPr),e(KC,oee),e(oee,VPr),e(KC,XPr),e(ye,zPr),e(ye,ZC),e(ZC,A3e),e(A3e,WPr),e(ZC,QPr),e(ZC,ree),e(ree,UPr),e(ZC,HPr),e(jr,JPr),M(e3,jr,null),b(f,MHe,u),b(f,zc,u),e(zc,o3),e(o3,L3e),M(V$,L3e,null),e(zc,YPr),e(zc,y3e),e(y3e,KPr),b(f,EHe,u),b(f,fr,u),M(X$,fr,null),e(fr,ZPr),e(fr,Wc),e(Wc,eBr),e(Wc,tee),e(tee,oBr),e(Wc,rBr),e(Wc,aee),e(aee,tBr),e(Wc,aBr),e(fr,nBr),e(fr,z$),e(z$,sBr),e(z$,x3e),e(x3e,lBr),e(z$,iBr),e(fr,dBr),e(fr,zt),M(W$,zt,null),e(zt,cBr),e(zt,$3e),e($3e,fBr),e(zt,mBr),e(zt,Qc),e(Qc,gBr),e(Qc,k3e),e(k3e,hBr),e(Qc,pBr),e(Qc,nee),e(nee,_Br),e(Qc,uBr),e(zt,bBr),M(r3,zt,null),e(fr,vBr),e(fr,Dr),M(Q$,Dr,null),e(Dr,FBr),e(Dr,S3e),e(S3e,TBr),e(Dr,MBr),e(Dr,En),e(En,EBr),e(En,R3e),e(R3e,CBr),e(En,wBr),e(En,P3e),e(P3e,ABr),e(En,LBr),e(En,B3e),e(B3e,yBr),e(En,xBr),e(Dr,$Br),e(Dr,te),e(te,t3),e(t3,I3e),e(I3e,kBr),e(t3,SBr),e(t3,see),e(see,RBr),e(t3,PBr),e(te,BBr),e(te,a3),e(a3,N3e),e(N3e,IBr),e(a3,NBr),e(a3,lee),e(lee,qBr),e(a3,jBr),e(te,DBr),e(te,n3),e(n3,q3e),e(q3e,GBr),e(n3,OBr),e(n3,iee),e(iee,VBr),e(n3,XBr),e(te,zBr),e(te,s3),e(s3,j3e),e(j3e,WBr),e(s3,QBr),e(s3,dee),e(dee,UBr),e(s3,HBr),e(te,JBr),e(te,l3),e(l3,D3e),e(D3e,YBr),e(l3,KBr),e(l3,cee),e(cee,ZBr),e(l3,eIr),e(te,oIr),e(te,i3),e(i3,G3e),e(G3e,rIr),e(i3,tIr),e(i3,fee),e(fee,aIr),e(i3,nIr),e(te,sIr),e(te,d3),e(d3,O3e),e(O3e,lIr),e(d3,iIr),e(d3,mee),e(mee,dIr),e(d3,cIr),e(te,fIr),e(te,c3),e(c3,V3e),e(V3e,mIr),e(c3,gIr),e(c3,gee),e(gee,hIr),e(c3,pIr),e(te,_Ir),e(te,f3),e(f3,X3e),e(X3e,uIr),e(f3,bIr),e(f3,hee),e(hee,vIr),e(f3,FIr),e(te,TIr),e(te,m3),e(m3,z3e),e(z3e,MIr),e(m3,EIr),e(m3,pee),e(pee,CIr),e(m3,wIr),e(te,AIr),e(te,g3),e(g3,W3e),e(W3e,LIr),e(g3,yIr),e(g3,_ee),e(_ee,xIr),e(g3,$Ir),e(te,kIr),e(te,h3),e(h3,Q3e),e(Q3e,SIr),e(h3,RIr),e(h3,uee),e(uee,PIr),e(h3,BIr),e(te,IIr),e(te,p3),e(p3,U3e),e(U3e,NIr),e(p3,qIr),e(p3,bee),e(bee,jIr),e(p3,DIr),e(te,GIr),e(te,_3),e(_3,H3e),e(H3e,OIr),e(_3,VIr),e(_3,vee),e(vee,XIr),e(_3,zIr),e(te,WIr),e(te,u3),e(u3,J3e),e(J3e,QIr),e(u3,UIr),e(u3,Fee),e(Fee,HIr),e(u3,JIr),e(te,YIr),e(te,b3),e(b3,Y3e),e(Y3e,KIr),e(b3,ZIr),e(b3,Tee),e(Tee,eNr),e(b3,oNr),e(te,rNr),e(te,v3),e(v3,K3e),e(K3e,tNr),e(v3,aNr),e(v3,Mee),e(Mee,nNr),e(v3,sNr),e(te,lNr),e(te,F3),e(F3,Z3e),e(Z3e,iNr),e(F3,dNr),e(F3,Eee),e(Eee,cNr),e(F3,fNr),e(te,mNr),e(te,T3),e(T3,e0e),e(e0e,gNr),e(T3,hNr),e(T3,Cee),e(Cee,pNr),e(T3,_Nr),e(te,uNr),e(te,M3),e(M3,o0e),e(o0e,bNr),e(M3,vNr),e(M3,wee),e(wee,FNr),e(M3,TNr),e(te,MNr),e(te,E3),e(E3,r0e),e(r0e,ENr),e(E3,CNr),e(E3,Aee),e(Aee,wNr),e(E3,ANr),e(te,LNr),e(te,C3),e(C3,t0e),e(t0e,yNr),e(C3,xNr),e(C3,Lee),e(Lee,$Nr),e(C3,kNr),e(te,SNr),e(te,w3),e(w3,a0e),e(a0e,RNr),e(w3,PNr),e(w3,yee),e(yee,BNr),e(w3,INr),e(te,NNr),e(te,A3),e(A3,n0e),e(n0e,qNr),e(A3,jNr),e(A3,xee),e(xee,DNr),e(A3,GNr),e(te,ONr),e(te,L3),e(L3,s0e),e(s0e,VNr),e(L3,XNr),e(L3,$ee),e($ee,zNr),e(L3,WNr),e(te,QNr),e(te,y3),e(y3,l0e),e(l0e,UNr),e(y3,HNr),e(y3,kee),e(kee,JNr),e(y3,YNr),e(Dr,KNr),M(x3,Dr,null),b(f,CHe,u),b(f,Uc,u),e(Uc,$3),e($3,i0e),M(U$,i0e,null),e(Uc,ZNr),e(Uc,d0e),e(d0e,eqr),b(f,wHe,u),b(f,mr,u),M(H$,mr,null),e(mr,oqr),e(mr,Hc),e(Hc,rqr),e(Hc,See),e(See,tqr),e(Hc,aqr),e(Hc,Ree),e(Ree,nqr),e(Hc,sqr),e(mr,lqr),e(mr,J$),e(J$,iqr),e(J$,c0e),e(c0e,dqr),e(J$,cqr),e(mr,fqr),e(mr,Wt),M(Y$,Wt,null),e(Wt,mqr),e(Wt,f0e),e(f0e,gqr),e(Wt,hqr),e(Wt,Jc),e(Jc,pqr),e(Jc,m0e),e(m0e,_qr),e(Jc,uqr),e(Jc,Pee),e(Pee,bqr),e(Jc,vqr),e(Wt,Fqr),M(k3,Wt,null),e(mr,Tqr),e(mr,Gr),M(K$,Gr,null),e(Gr,Mqr),e(Gr,g0e),e(g0e,Eqr),e(Gr,Cqr),e(Gr,Cn),e(Cn,wqr),e(Cn,h0e),e(h0e,Aqr),e(Cn,Lqr),e(Cn,p0e),e(p0e,yqr),e(Cn,xqr),e(Cn,_0e),e(_0e,$qr),e(Cn,kqr),e(Gr,Sqr),e(Gr,ve),e(ve,S3),e(S3,u0e),e(u0e,Rqr),e(S3,Pqr),e(S3,Bee),e(Bee,Bqr),e(S3,Iqr),e(ve,Nqr),e(ve,R3),e(R3,b0e),e(b0e,qqr),e(R3,jqr),e(R3,Iee),e(Iee,Dqr),e(R3,Gqr),e(ve,Oqr),e(ve,P3),e(P3,v0e),e(v0e,Vqr),e(P3,Xqr),e(P3,Nee),e(Nee,zqr),e(P3,Wqr),e(ve,Qqr),e(ve,B3),e(B3,F0e),e(F0e,Uqr),e(B3,Hqr),e(B3,qee),e(qee,Jqr),e(B3,Yqr),e(ve,Kqr),e(ve,I3),e(I3,T0e),e(T0e,Zqr),e(I3,ejr),e(I3,jee),e(jee,ojr),e(I3,rjr),e(ve,tjr),e(ve,N3),e(N3,M0e),e(M0e,ajr),e(N3,njr),e(N3,Dee),e(Dee,sjr),e(N3,ljr),e(ve,ijr),e(ve,q3),e(q3,E0e),e(E0e,djr),e(q3,cjr),e(q3,Gee),e(Gee,fjr),e(q3,mjr),e(ve,gjr),e(ve,j3),e(j3,C0e),e(C0e,hjr),e(j3,pjr),e(j3,Oee),e(Oee,_jr),e(j3,ujr),e(ve,bjr),e(ve,D3),e(D3,w0e),e(w0e,vjr),e(D3,Fjr),e(D3,Vee),e(Vee,Tjr),e(D3,Mjr),e(ve,Ejr),e(ve,G3),e(G3,A0e),e(A0e,Cjr),e(G3,wjr),e(G3,Xee),e(Xee,Ajr),e(G3,Ljr),e(ve,yjr),e(ve,O3),e(O3,L0e),e(L0e,xjr),e(O3,$jr),e(O3,zee),e(zee,kjr),e(O3,Sjr),e(ve,Rjr),e(ve,V3),e(V3,y0e),e(y0e,Pjr),e(V3,Bjr),e(V3,Wee),e(Wee,Ijr),e(V3,Njr),e(ve,qjr),e(ve,X3),e(X3,x0e),e(x0e,jjr),e(X3,Djr),e(X3,Qee),e(Qee,Gjr),e(X3,Ojr),e(ve,Vjr),e(ve,z3),e(z3,$0e),e($0e,Xjr),e(z3,zjr),e(z3,Uee),e(Uee,Wjr),e(z3,Qjr),e(ve,Ujr),e(ve,W3),e(W3,k0e),e(k0e,Hjr),e(W3,Jjr),e(W3,Hee),e(Hee,Yjr),e(W3,Kjr),e(ve,Zjr),e(ve,Q3),e(Q3,S0e),e(S0e,eDr),e(Q3,oDr),e(Q3,Jee),e(Jee,rDr),e(Q3,tDr),e(ve,aDr),e(ve,U3),e(U3,R0e),e(R0e,nDr),e(U3,sDr),e(U3,Yee),e(Yee,lDr),e(U3,iDr),e(Gr,dDr),M(H3,Gr,null),b(f,AHe,u),b(f,Yc,u),e(Yc,J3),e(J3,P0e),M(Z$,P0e,null),e(Yc,cDr),e(Yc,B0e),e(B0e,fDr),b(f,LHe,u),b(f,gr,u),M(ek,gr,null),e(gr,mDr),e(gr,Kc),e(Kc,gDr),e(Kc,Kee),e(Kee,hDr),e(Kc,pDr),e(Kc,Zee),e(Zee,_Dr),e(Kc,uDr),e(gr,bDr),e(gr,ok),e(ok,vDr),e(ok,I0e),e(I0e,FDr),e(ok,TDr),e(gr,MDr),e(gr,Qt),M(rk,Qt,null),e(Qt,EDr),e(Qt,N0e),e(N0e,CDr),e(Qt,wDr),e(Qt,Zc),e(Zc,ADr),e(Zc,q0e),e(q0e,LDr),e(Zc,yDr),e(Zc,eoe),e(eoe,xDr),e(Zc,$Dr),e(Qt,kDr),M(Y3,Qt,null),e(gr,SDr),e(gr,Or),M(tk,Or,null),e(Or,RDr),e(Or,j0e),e(j0e,PDr),e(Or,BDr),e(Or,wn),e(wn,IDr),e(wn,D0e),e(D0e,NDr),e(wn,qDr),e(wn,G0e),e(G0e,jDr),e(wn,DDr),e(wn,O0e),e(O0e,GDr),e(wn,ODr),e(Or,VDr),e(Or,ak),e(ak,K3),e(K3,V0e),e(V0e,XDr),e(K3,zDr),e(K3,ooe),e(ooe,WDr),e(K3,QDr),e(ak,UDr),e(ak,Z3),e(Z3,X0e),e(X0e,HDr),e(Z3,JDr),e(Z3,roe),e(roe,YDr),e(Z3,KDr),e(Or,ZDr),M(e0,Or,null),b(f,yHe,u),b(f,ef,u),e(ef,o0),e(o0,z0e),M(nk,z0e,null),e(ef,eGr),e(ef,W0e),e(W0e,oGr),b(f,xHe,u),b(f,hr,u),M(sk,hr,null),e(hr,rGr),e(hr,of),e(of,tGr),e(of,toe),e(toe,aGr),e(of,nGr),e(of,aoe),e(aoe,sGr),e(of,lGr),e(hr,iGr),e(hr,lk),e(lk,dGr),e(lk,Q0e),e(Q0e,cGr),e(lk,fGr),e(hr,mGr),e(hr,Ut),M(ik,Ut,null),e(Ut,gGr),e(Ut,U0e),e(U0e,hGr),e(Ut,pGr),e(Ut,rf),e(rf,_Gr),e(rf,H0e),e(H0e,uGr),e(rf,bGr),e(rf,noe),e(noe,vGr),e(rf,FGr),e(Ut,TGr),M(r0,Ut,null),e(hr,MGr),e(hr,Vr),M(dk,Vr,null),e(Vr,EGr),e(Vr,J0e),e(J0e,CGr),e(Vr,wGr),e(Vr,An),e(An,AGr),e(An,Y0e),e(Y0e,LGr),e(An,yGr),e(An,K0e),e(K0e,xGr),e(An,$Gr),e(An,Z0e),e(Z0e,kGr),e(An,SGr),e(Vr,RGr),e(Vr,ewe),e(ewe,t0),e(t0,owe),e(owe,PGr),e(t0,BGr),e(t0,soe),e(soe,IGr),e(t0,NGr),e(Vr,qGr),M(a0,Vr,null),b(f,$He,u),b(f,tf,u),e(tf,n0),e(n0,rwe),M(ck,rwe,null),e(tf,jGr),e(tf,twe),e(twe,DGr),b(f,kHe,u),b(f,pr,u),M(fk,pr,null),e(pr,GGr),e(pr,af),e(af,OGr),e(af,loe),e(loe,VGr),e(af,XGr),e(af,ioe),e(ioe,zGr),e(af,WGr),e(pr,QGr),e(pr,mk),e(mk,UGr),e(mk,awe),e(awe,HGr),e(mk,JGr),e(pr,YGr),e(pr,Ht),M(gk,Ht,null),e(Ht,KGr),e(Ht,nwe),e(nwe,ZGr),e(Ht,eOr),e(Ht,nf),e(nf,oOr),e(nf,swe),e(swe,rOr),e(nf,tOr),e(nf,doe),e(doe,aOr),e(nf,nOr),e(Ht,sOr),M(s0,Ht,null),e(pr,lOr),e(pr,Xr),M(hk,Xr,null),e(Xr,iOr),e(Xr,lwe),e(lwe,dOr),e(Xr,cOr),e(Xr,Ln),e(Ln,fOr),e(Ln,iwe),e(iwe,mOr),e(Ln,gOr),e(Ln,dwe),e(dwe,hOr),e(Ln,pOr),e(Ln,cwe),e(cwe,_Or),e(Ln,uOr),e(Xr,bOr),e(Xr,ce),e(ce,l0),e(l0,fwe),e(fwe,vOr),e(l0,FOr),e(l0,coe),e(coe,TOr),e(l0,MOr),e(ce,EOr),e(ce,i0),e(i0,mwe),e(mwe,COr),e(i0,wOr),e(i0,foe),e(foe,AOr),e(i0,LOr),e(ce,yOr),e(ce,d0),e(d0,gwe),e(gwe,xOr),e(d0,$Or),e(d0,moe),e(moe,kOr),e(d0,SOr),e(ce,ROr),e(ce,c0),e(c0,hwe),e(hwe,POr),e(c0,BOr),e(c0,goe),e(goe,IOr),e(c0,NOr),e(ce,qOr),e(ce,f0),e(f0,pwe),e(pwe,jOr),e(f0,DOr),e(f0,hoe),e(hoe,GOr),e(f0,OOr),e(ce,VOr),e(ce,m0),e(m0,_we),e(_we,XOr),e(m0,zOr),e(m0,poe),e(poe,WOr),e(m0,QOr),e(ce,UOr),e(ce,g0),e(g0,uwe),e(uwe,HOr),e(g0,JOr),e(g0,_oe),e(_oe,YOr),e(g0,KOr),e(ce,ZOr),e(ce,h0),e(h0,bwe),e(bwe,eVr),e(h0,oVr),e(h0,uoe),e(uoe,rVr),e(h0,tVr),e(ce,aVr),e(ce,p0),e(p0,vwe),e(vwe,nVr),e(p0,sVr),e(p0,boe),e(boe,lVr),e(p0,iVr),e(ce,dVr),e(ce,_0),e(_0,Fwe),e(Fwe,cVr),e(_0,fVr),e(_0,voe),e(voe,mVr),e(_0,gVr),e(ce,hVr),e(ce,u0),e(u0,Twe),e(Twe,pVr),e(u0,_Vr),e(u0,Foe),e(Foe,uVr),e(u0,bVr),e(ce,vVr),e(ce,b0),e(b0,Mwe),e(Mwe,FVr),e(b0,TVr),e(b0,Toe),e(Toe,MVr),e(b0,EVr),e(ce,CVr),e(ce,v0),e(v0,Ewe),e(Ewe,wVr),e(v0,AVr),e(v0,Moe),e(Moe,LVr),e(v0,yVr),e(ce,xVr),e(ce,F0),e(F0,Cwe),e(Cwe,$Vr),e(F0,kVr),e(F0,Eoe),e(Eoe,SVr),e(F0,RVr),e(ce,PVr),e(ce,T0),e(T0,wwe),e(wwe,BVr),e(T0,IVr),e(T0,Coe),e(Coe,NVr),e(T0,qVr),e(ce,jVr),e(ce,M0),e(M0,Awe),e(Awe,DVr),e(M0,GVr),e(M0,woe),e(woe,OVr),e(M0,VVr),e(ce,XVr),e(ce,E0),e(E0,Lwe),e(Lwe,zVr),e(E0,WVr),e(E0,Aoe),e(Aoe,QVr),e(E0,UVr),e(ce,HVr),e(ce,C0),e(C0,ywe),e(ywe,JVr),e(C0,YVr),e(C0,Loe),e(Loe,KVr),e(C0,ZVr),e(ce,eXr),e(ce,w0),e(w0,xwe),e(xwe,oXr),e(w0,rXr),e(w0,yoe),e(yoe,tXr),e(w0,aXr),e(ce,nXr),e(ce,A0),e(A0,$we),e($we,sXr),e(A0,lXr),e(A0,xoe),e(xoe,iXr),e(A0,dXr),e(Xr,cXr),M(L0,Xr,null),b(f,SHe,u),b(f,sf,u),e(sf,y0),e(y0,kwe),M(pk,kwe,null),e(sf,fXr),e(sf,Swe),e(Swe,mXr),b(f,RHe,u),b(f,_r,u),M(_k,_r,null),e(_r,gXr),e(_r,lf),e(lf,hXr),e(lf,$oe),e($oe,pXr),e(lf,_Xr),e(lf,koe),e(koe,uXr),e(lf,bXr),e(_r,vXr),e(_r,uk),e(uk,FXr),e(uk,Rwe),e(Rwe,TXr),e(uk,MXr),e(_r,EXr),e(_r,Jt),M(bk,Jt,null),e(Jt,CXr),e(Jt,Pwe),e(Pwe,wXr),e(Jt,AXr),e(Jt,df),e(df,LXr),e(df,Bwe),e(Bwe,yXr),e(df,xXr),e(df,Soe),e(Soe,$Xr),e(df,kXr),e(Jt,SXr),M(x0,Jt,null),e(_r,RXr),e(_r,zr),M(vk,zr,null),e(zr,PXr),e(zr,Iwe),e(Iwe,BXr),e(zr,IXr),e(zr,yn),e(yn,NXr),e(yn,Nwe),e(Nwe,qXr),e(yn,jXr),e(yn,qwe),e(qwe,DXr),e(yn,GXr),e(yn,jwe),e(jwe,OXr),e(yn,VXr),e(zr,XXr),e(zr,fe),e(fe,$0),e($0,Dwe),e(Dwe,zXr),e($0,WXr),e($0,Roe),e(Roe,QXr),e($0,UXr),e(fe,HXr),e(fe,k0),e(k0,Gwe),e(Gwe,JXr),e(k0,YXr),e(k0,Poe),e(Poe,KXr),e(k0,ZXr),e(fe,ezr),e(fe,S0),e(S0,Owe),e(Owe,ozr),e(S0,rzr),e(S0,Boe),e(Boe,tzr),e(S0,azr),e(fe,nzr),e(fe,R0),e(R0,Vwe),e(Vwe,szr),e(R0,lzr),e(R0,Ioe),e(Ioe,izr),e(R0,dzr),e(fe,czr),e(fe,P0),e(P0,Xwe),e(Xwe,fzr),e(P0,mzr),e(P0,Noe),e(Noe,gzr),e(P0,hzr),e(fe,pzr),e(fe,B0),e(B0,zwe),e(zwe,_zr),e(B0,uzr),e(B0,qoe),e(qoe,bzr),e(B0,vzr),e(fe,Fzr),e(fe,I0),e(I0,Wwe),e(Wwe,Tzr),e(I0,Mzr),e(I0,joe),e(joe,Ezr),e(I0,Czr),e(fe,wzr),e(fe,N0),e(N0,Qwe),e(Qwe,Azr),e(N0,Lzr),e(N0,Doe),e(Doe,yzr),e(N0,xzr),e(fe,$zr),e(fe,q0),e(q0,Uwe),e(Uwe,kzr),e(q0,Szr),e(q0,Goe),e(Goe,Rzr),e(q0,Pzr),e(fe,Bzr),e(fe,j0),e(j0,Hwe),e(Hwe,Izr),e(j0,Nzr),e(j0,Ooe),e(Ooe,qzr),e(j0,jzr),e(fe,Dzr),e(fe,D0),e(D0,Jwe),e(Jwe,Gzr),e(D0,Ozr),e(D0,Voe),e(Voe,Vzr),e(D0,Xzr),e(fe,zzr),e(fe,G0),e(G0,Ywe),e(Ywe,Wzr),e(G0,Qzr),e(G0,Xoe),e(Xoe,Uzr),e(G0,Hzr),e(fe,Jzr),e(fe,O0),e(O0,Kwe),e(Kwe,Yzr),e(O0,Kzr),e(O0,zoe),e(zoe,Zzr),e(O0,eWr),e(fe,oWr),e(fe,V0),e(V0,Zwe),e(Zwe,rWr),e(V0,tWr),e(V0,Woe),e(Woe,aWr),e(V0,nWr),e(fe,sWr),e(fe,X0),e(X0,e6e),e(e6e,lWr),e(X0,iWr),e(X0,Qoe),e(Qoe,dWr),e(X0,cWr),e(fe,fWr),e(fe,z0),e(z0,o6e),e(o6e,mWr),e(z0,gWr),e(z0,Uoe),e(Uoe,hWr),e(z0,pWr),e(fe,_Wr),e(fe,W0),e(W0,r6e),e(r6e,uWr),e(W0,bWr),e(W0,Hoe),e(Hoe,vWr),e(W0,FWr),e(fe,TWr),e(fe,Q0),e(Q0,t6e),e(t6e,MWr),e(Q0,EWr),e(Q0,Joe),e(Joe,CWr),e(Q0,wWr),e(fe,AWr),e(fe,U0),e(U0,a6e),e(a6e,LWr),e(U0,yWr),e(U0,Yoe),e(Yoe,xWr),e(U0,$Wr),e(fe,kWr),e(fe,H0),e(H0,n6e),e(n6e,SWr),e(H0,RWr),e(H0,Koe),e(Koe,PWr),e(H0,BWr),e(zr,IWr),M(J0,zr,null),b(f,PHe,u),b(f,cf,u),e(cf,Y0),e(Y0,s6e),M(Fk,s6e,null),e(cf,NWr),e(cf,l6e),e(l6e,qWr),b(f,BHe,u),b(f,ur,u),M(Tk,ur,null),e(ur,jWr),e(ur,ff),e(ff,DWr),e(ff,Zoe),e(Zoe,GWr),e(ff,OWr),e(ff,ere),e(ere,VWr),e(ff,XWr),e(ur,zWr),e(ur,Mk),e(Mk,WWr),e(Mk,i6e),e(i6e,QWr),e(Mk,UWr),e(ur,HWr),e(ur,Yt),M(Ek,Yt,null),e(Yt,JWr),e(Yt,d6e),e(d6e,YWr),e(Yt,KWr),e(Yt,mf),e(mf,ZWr),e(mf,c6e),e(c6e,eQr),e(mf,oQr),e(mf,ore),e(ore,rQr),e(mf,tQr),e(Yt,aQr),M(K0,Yt,null),e(ur,nQr),e(ur,Wr),M(Ck,Wr,null),e(Wr,sQr),e(Wr,f6e),e(f6e,lQr),e(Wr,iQr),e(Wr,xn),e(xn,dQr),e(xn,m6e),e(m6e,cQr),e(xn,fQr),e(xn,g6e),e(g6e,mQr),e(xn,gQr),e(xn,h6e),e(h6e,hQr),e(xn,pQr),e(Wr,_Qr),e(Wr,p6e),e(p6e,Z0),e(Z0,_6e),e(_6e,uQr),e(Z0,bQr),e(Z0,rre),e(rre,vQr),e(Z0,FQr),e(Wr,TQr),M(ew,Wr,null),b(f,IHe,u),b(f,gf,u),e(gf,ow),e(ow,u6e),M(wk,u6e,null),e(gf,MQr),e(gf,b6e),e(b6e,EQr),b(f,NHe,u),b(f,br,u),M(Ak,br,null),e(br,CQr),e(br,hf),e(hf,wQr),e(hf,tre),e(tre,AQr),e(hf,LQr),e(hf,are),e(are,yQr),e(hf,xQr),e(br,$Qr),e(br,Lk),e(Lk,kQr),e(Lk,v6e),e(v6e,SQr),e(Lk,RQr),e(br,PQr),e(br,Kt),M(yk,Kt,null),e(Kt,BQr),e(Kt,F6e),e(F6e,IQr),e(Kt,NQr),e(Kt,pf),e(pf,qQr),e(pf,T6e),e(T6e,jQr),e(pf,DQr),e(pf,nre),e(nre,GQr),e(pf,OQr),e(Kt,VQr),M(rw,Kt,null),e(br,XQr),e(br,Qr),M(xk,Qr,null),e(Qr,zQr),e(Qr,M6e),e(M6e,WQr),e(Qr,QQr),e(Qr,$n),e($n,UQr),e($n,E6e),e(E6e,HQr),e($n,JQr),e($n,C6e),e(C6e,YQr),e($n,KQr),e($n,w6e),e(w6e,ZQr),e($n,eUr),e(Qr,oUr),e(Qr,A6e),e(A6e,tw),e(tw,L6e),e(L6e,rUr),e(tw,tUr),e(tw,sre),e(sre,aUr),e(tw,nUr),e(Qr,sUr),M(aw,Qr,null),b(f,qHe,u),b(f,_f,u),e(_f,nw),e(nw,y6e),M($k,y6e,null),e(_f,lUr),e(_f,x6e),e(x6e,iUr),b(f,jHe,u),b(f,vr,u),M(kk,vr,null),e(vr,dUr),e(vr,uf),e(uf,cUr),e(uf,lre),e(lre,fUr),e(uf,mUr),e(uf,ire),e(ire,gUr),e(uf,hUr),e(vr,pUr),e(vr,Sk),e(Sk,_Ur),e(Sk,$6e),e($6e,uUr),e(Sk,bUr),e(vr,vUr),e(vr,Zt),M(Rk,Zt,null),e(Zt,FUr),e(Zt,k6e),e(k6e,TUr),e(Zt,MUr),e(Zt,bf),e(bf,EUr),e(bf,S6e),e(S6e,CUr),e(bf,wUr),e(bf,dre),e(dre,AUr),e(bf,LUr),e(Zt,yUr),M(sw,Zt,null),e(vr,xUr),e(vr,Ur),M(Pk,Ur,null),e(Ur,$Ur),e(Ur,R6e),e(R6e,kUr),e(Ur,SUr),e(Ur,kn),e(kn,RUr),e(kn,P6e),e(P6e,PUr),e(kn,BUr),e(kn,B6e),e(B6e,IUr),e(kn,NUr),e(kn,I6e),e(I6e,qUr),e(kn,jUr),e(Ur,DUr),e(Ur,re),e(re,lw),e(lw,N6e),e(N6e,GUr),e(lw,OUr),e(lw,cre),e(cre,VUr),e(lw,XUr),e(re,zUr),e(re,iw),e(iw,q6e),e(q6e,WUr),e(iw,QUr),e(iw,fre),e(fre,UUr),e(iw,HUr),e(re,JUr),e(re,dw),e(dw,j6e),e(j6e,YUr),e(dw,KUr),e(dw,mre),e(mre,ZUr),e(dw,eHr),e(re,oHr),e(re,cw),e(cw,D6e),e(D6e,rHr),e(cw,tHr),e(cw,gre),e(gre,aHr),e(cw,nHr),e(re,sHr),e(re,fw),e(fw,G6e),e(G6e,lHr),e(fw,iHr),e(fw,hre),e(hre,dHr),e(fw,cHr),e(re,fHr),e(re,mw),e(mw,O6e),e(O6e,mHr),e(mw,gHr),e(mw,pre),e(pre,hHr),e(mw,pHr),e(re,_Hr),e(re,gw),e(gw,V6e),e(V6e,uHr),e(gw,bHr),e(gw,_re),e(_re,vHr),e(gw,FHr),e(re,THr),e(re,hw),e(hw,X6e),e(X6e,MHr),e(hw,EHr),e(hw,ure),e(ure,CHr),e(hw,wHr),e(re,AHr),e(re,pw),e(pw,z6e),e(z6e,LHr),e(pw,yHr),e(pw,bre),e(bre,xHr),e(pw,$Hr),e(re,kHr),e(re,_w),e(_w,W6e),e(W6e,SHr),e(_w,RHr),e(_w,vre),e(vre,PHr),e(_w,BHr),e(re,IHr),e(re,uw),e(uw,Q6e),e(Q6e,NHr),e(uw,qHr),e(uw,Fre),e(Fre,jHr),e(uw,DHr),e(re,GHr),e(re,bw),e(bw,U6e),e(U6e,OHr),e(bw,VHr),e(bw,Tre),e(Tre,XHr),e(bw,zHr),e(re,WHr),e(re,vw),e(vw,H6e),e(H6e,QHr),e(vw,UHr),e(vw,Mre),e(Mre,HHr),e(vw,JHr),e(re,YHr),e(re,Fw),e(Fw,J6e),e(J6e,KHr),e(Fw,ZHr),e(Fw,Ere),e(Ere,eJr),e(Fw,oJr),e(re,rJr),e(re,Tw),e(Tw,Y6e),e(Y6e,tJr),e(Tw,aJr),e(Tw,Cre),e(Cre,nJr),e(Tw,sJr),e(re,lJr),e(re,Mw),e(Mw,K6e),e(K6e,iJr),e(Mw,dJr),e(Mw,wre),e(wre,cJr),e(Mw,fJr),e(re,mJr),e(re,Ew),e(Ew,Z6e),e(Z6e,gJr),e(Ew,hJr),e(Ew,Are),e(Are,pJr),e(Ew,_Jr),e(re,uJr),e(re,Cw),e(Cw,eAe),e(eAe,bJr),e(Cw,vJr),e(Cw,Lre),e(Lre,FJr),e(Cw,TJr),e(re,MJr),e(re,ww),e(ww,oAe),e(oAe,EJr),e(ww,CJr),e(ww,yre),e(yre,wJr),e(ww,AJr),e(re,LJr),e(re,Aw),e(Aw,rAe),e(rAe,yJr),e(Aw,xJr),e(Aw,xre),e(xre,$Jr),e(Aw,kJr),e(re,SJr),e(re,Lw),e(Lw,tAe),e(tAe,RJr),e(Lw,PJr),e(Lw,$re),e($re,BJr),e(Lw,IJr),e(re,NJr),e(re,yw),e(yw,aAe),e(aAe,qJr),e(yw,jJr),e(yw,kre),e(kre,DJr),e(yw,GJr),e(re,OJr),e(re,xw),e(xw,nAe),e(nAe,VJr),e(xw,XJr),e(xw,Sre),e(Sre,zJr),e(xw,WJr),e(re,QJr),e(re,$w),e($w,sAe),e(sAe,UJr),e($w,HJr),e($w,Rre),e(Rre,JJr),e($w,YJr),e(re,KJr),e(re,kw),e(kw,lAe),e(lAe,ZJr),e(kw,eYr),e(kw,Pre),e(Pre,oYr),e(kw,rYr),e(re,tYr),e(re,Sw),e(Sw,iAe),e(iAe,aYr),e(Sw,nYr),e(Sw,Bre),e(Bre,sYr),e(Sw,lYr),e(re,iYr),e(re,Rw),e(Rw,dAe),e(dAe,dYr),e(Rw,cYr),e(Rw,Ire),e(Ire,fYr),e(Rw,mYr),e(Ur,gYr),M(Pw,Ur,null),b(f,DHe,u),b(f,vf,u),e(vf,Bw),e(Bw,cAe),M(Bk,cAe,null),e(vf,hYr),e(vf,fAe),e(fAe,pYr),b(f,GHe,u),b(f,Fr,u),M(Ik,Fr,null),e(Fr,_Yr),e(Fr,Ff),e(Ff,uYr),e(Ff,Nre),e(Nre,bYr),e(Ff,vYr),e(Ff,qre),e(qre,FYr),e(Ff,TYr),e(Fr,MYr),e(Fr,Nk),e(Nk,EYr),e(Nk,mAe),e(mAe,CYr),e(Nk,wYr),e(Fr,AYr),e(Fr,ea),M(qk,ea,null),e(ea,LYr),e(ea,gAe),e(gAe,yYr),e(ea,xYr),e(ea,Tf),e(Tf,$Yr),e(Tf,hAe),e(hAe,kYr),e(Tf,SYr),e(Tf,jre),e(jre,RYr),e(Tf,PYr),e(ea,BYr),M(Iw,ea,null),e(Fr,IYr),e(Fr,Hr),M(jk,Hr,null),e(Hr,NYr),e(Hr,pAe),e(pAe,qYr),e(Hr,jYr),e(Hr,Sn),e(Sn,DYr),e(Sn,_Ae),e(_Ae,GYr),e(Sn,OYr),e(Sn,uAe),e(uAe,VYr),e(Sn,XYr),e(Sn,bAe),e(bAe,zYr),e(Sn,WYr),e(Hr,QYr),e(Hr,xe),e(xe,Nw),e(Nw,vAe),e(vAe,UYr),e(Nw,HYr),e(Nw,Dre),e(Dre,JYr),e(Nw,YYr),e(xe,KYr),e(xe,qw),e(qw,FAe),e(FAe,ZYr),e(qw,eKr),e(qw,Gre),e(Gre,oKr),e(qw,rKr),e(xe,tKr),e(xe,jw),e(jw,TAe),e(TAe,aKr),e(jw,nKr),e(jw,Ore),e(Ore,sKr),e(jw,lKr),e(xe,iKr),e(xe,Dw),e(Dw,MAe),e(MAe,dKr),e(Dw,cKr),e(Dw,Vre),e(Vre,fKr),e(Dw,mKr),e(xe,gKr),e(xe,Gw),e(Gw,EAe),e(EAe,hKr),e(Gw,pKr),e(Gw,Xre),e(Xre,_Kr),e(Gw,uKr),e(xe,bKr),e(xe,Ow),e(Ow,CAe),e(CAe,vKr),e(Ow,FKr),e(Ow,zre),e(zre,TKr),e(Ow,MKr),e(xe,EKr),e(xe,Vw),e(Vw,wAe),e(wAe,CKr),e(Vw,wKr),e(Vw,Wre),e(Wre,AKr),e(Vw,LKr),e(xe,yKr),e(xe,Xw),e(Xw,AAe),e(AAe,xKr),e(Xw,$Kr),e(Xw,Qre),e(Qre,kKr),e(Xw,SKr),e(xe,RKr),e(xe,zw),e(zw,LAe),e(LAe,PKr),e(zw,BKr),e(zw,Ure),e(Ure,IKr),e(zw,NKr),e(xe,qKr),e(xe,Ww),e(Ww,yAe),e(yAe,jKr),e(Ww,DKr),e(Ww,Hre),e(Hre,GKr),e(Ww,OKr),e(Hr,VKr),M(Qw,Hr,null),b(f,OHe,u),b(f,Mf,u),e(Mf,Uw),e(Uw,xAe),M(Dk,xAe,null),e(Mf,XKr),e(Mf,$Ae),e($Ae,zKr),b(f,VHe,u),b(f,Tr,u),M(Gk,Tr,null),e(Tr,WKr),e(Tr,Ef),e(Ef,QKr),e(Ef,Jre),e(Jre,UKr),e(Ef,HKr),e(Ef,Yre),e(Yre,JKr),e(Ef,YKr),e(Tr,KKr),e(Tr,Ok),e(Ok,ZKr),e(Ok,kAe),e(kAe,eZr),e(Ok,oZr),e(Tr,rZr),e(Tr,oa),M(Vk,oa,null),e(oa,tZr),e(oa,SAe),e(SAe,aZr),e(oa,nZr),e(oa,Cf),e(Cf,sZr),e(Cf,RAe),e(RAe,lZr),e(Cf,iZr),e(Cf,Kre),e(Kre,dZr),e(Cf,cZr),e(oa,fZr),M(Hw,oa,null),e(Tr,mZr),e(Tr,Jr),M(Xk,Jr,null),e(Jr,gZr),e(Jr,PAe),e(PAe,hZr),e(Jr,pZr),e(Jr,Rn),e(Rn,_Zr),e(Rn,BAe),e(BAe,uZr),e(Rn,bZr),e(Rn,IAe),e(IAe,vZr),e(Rn,FZr),e(Rn,NAe),e(NAe,TZr),e(Rn,MZr),e(Jr,EZr),e(Jr,Ee),e(Ee,Jw),e(Jw,qAe),e(qAe,CZr),e(Jw,wZr),e(Jw,Zre),e(Zre,AZr),e(Jw,LZr),e(Ee,yZr),e(Ee,Yw),e(Yw,jAe),e(jAe,xZr),e(Yw,$Zr),e(Yw,ete),e(ete,kZr),e(Yw,SZr),e(Ee,RZr),e(Ee,Kw),e(Kw,DAe),e(DAe,PZr),e(Kw,BZr),e(Kw,ote),e(ote,IZr),e(Kw,NZr),e(Ee,qZr),e(Ee,Zw),e(Zw,GAe),e(GAe,jZr),e(Zw,DZr),e(Zw,rte),e(rte,GZr),e(Zw,OZr),e(Ee,VZr),e(Ee,e6),e(e6,OAe),e(OAe,XZr),e(e6,zZr),e(e6,tte),e(tte,WZr),e(e6,QZr),e(Ee,UZr),e(Ee,o6),e(o6,VAe),e(VAe,HZr),e(o6,JZr),e(o6,ate),e(ate,YZr),e(o6,KZr),e(Ee,ZZr),e(Ee,r6),e(r6,XAe),e(XAe,eet),e(r6,oet),e(r6,nte),e(nte,ret),e(r6,tet),e(Ee,aet),e(Ee,t6),e(t6,zAe),e(zAe,net),e(t6,set),e(t6,ste),e(ste,iet),e(t6,det),e(Ee,cet),e(Ee,a6),e(a6,WAe),e(WAe,fet),e(a6,met),e(a6,lte),e(lte,get),e(a6,het),e(Ee,pet),e(Ee,n6),e(n6,QAe),e(QAe,_et),e(n6,uet),e(n6,ite),e(ite,bet),e(n6,vet),e(Ee,Fet),e(Ee,s6),e(s6,UAe),e(UAe,Tet),e(s6,Met),e(s6,dte),e(dte,Eet),e(s6,Cet),e(Ee,wet),e(Ee,l6),e(l6,HAe),e(HAe,Aet),e(l6,Let),e(l6,cte),e(cte,yet),e(l6,xet),e(Ee,$et),e(Ee,i6),e(i6,JAe),e(JAe,ket),e(i6,Set),e(i6,fte),e(fte,Ret),e(i6,Pet),e(Jr,Bet),M(d6,Jr,null),b(f,XHe,u),b(f,wf,u),e(wf,c6),e(c6,YAe),M(zk,YAe,null),e(wf,Iet),e(wf,KAe),e(KAe,Net),b(f,zHe,u),b(f,Mr,u),M(Wk,Mr,null),e(Mr,qet),e(Mr,Af),e(Af,jet),e(Af,mte),e(mte,Det),e(Af,Get),e(Af,gte),e(gte,Oet),e(Af,Vet),e(Mr,Xet),e(Mr,Qk),e(Qk,zet),e(Qk,ZAe),e(ZAe,Wet),e(Qk,Qet),e(Mr,Uet),e(Mr,ra),M(Uk,ra,null),e(ra,Het),e(ra,e7e),e(e7e,Jet),e(ra,Yet),e(ra,Lf),e(Lf,Ket),e(Lf,o7e),e(o7e,Zet),e(Lf,eot),e(Lf,hte),e(hte,oot),e(Lf,rot),e(ra,tot),M(f6,ra,null),e(Mr,aot),e(Mr,Yr),M(Hk,Yr,null),e(Yr,not),e(Yr,r7e),e(r7e,sot),e(Yr,lot),e(Yr,Pn),e(Pn,iot),e(Pn,t7e),e(t7e,dot),e(Pn,cot),e(Pn,a7e),e(a7e,fot),e(Pn,mot),e(Pn,n7e),e(n7e,got),e(Pn,hot),e(Yr,pot),e(Yr,$e),e($e,m6),e(m6,s7e),e(s7e,_ot),e(m6,uot),e(m6,pte),e(pte,bot),e(m6,vot),e($e,Fot),e($e,g6),e(g6,l7e),e(l7e,Tot),e(g6,Mot),e(g6,_te),e(_te,Eot),e(g6,Cot),e($e,wot),e($e,h6),e(h6,i7e),e(i7e,Aot),e(h6,Lot),e(h6,ute),e(ute,yot),e(h6,xot),e($e,$ot),e($e,p6),e(p6,d7e),e(d7e,kot),e(p6,Sot),e(p6,bte),e(bte,Rot),e(p6,Pot),e($e,Bot),e($e,_6),e(_6,c7e),e(c7e,Iot),e(_6,Not),e(_6,vte),e(vte,qot),e(_6,jot),e($e,Dot),e($e,u6),e(u6,f7e),e(f7e,Got),e(u6,Oot),e(u6,Fte),e(Fte,Vot),e(u6,Xot),e($e,zot),e($e,b6),e(b6,m7e),e(m7e,Wot),e(b6,Qot),e(b6,Tte),e(Tte,Uot),e(b6,Hot),e($e,Jot),e($e,v6),e(v6,g7e),e(g7e,Yot),e(v6,Kot),e(v6,Mte),e(Mte,Zot),e(v6,ert),e($e,ort),e($e,F6),e(F6,h7e),e(h7e,rrt),e(F6,trt),e(F6,Ete),e(Ete,art),e(F6,nrt),e($e,srt),e($e,T6),e(T6,p7e),e(p7e,lrt),e(T6,irt),e(T6,Cte),e(Cte,drt),e(T6,crt),e(Yr,frt),M(M6,Yr,null),b(f,WHe,u),b(f,yf,u),e(yf,E6),e(E6,_7e),M(Jk,_7e,null),e(yf,mrt),e(yf,u7e),e(u7e,grt),b(f,QHe,u),b(f,Er,u),M(Yk,Er,null),e(Er,hrt),e(Er,xf),e(xf,prt),e(xf,wte),e(wte,_rt),e(xf,urt),e(xf,Ate),e(Ate,brt),e(xf,vrt),e(Er,Frt),e(Er,Kk),e(Kk,Trt),e(Kk,b7e),e(b7e,Mrt),e(Kk,Ert),e(Er,Crt),e(Er,ta),M(Zk,ta,null),e(ta,wrt),e(ta,v7e),e(v7e,Art),e(ta,Lrt),e(ta,$f),e($f,yrt),e($f,F7e),e(F7e,xrt),e($f,$rt),e($f,Lte),e(Lte,krt),e($f,Srt),e(ta,Rrt),M(C6,ta,null),e(Er,Prt),e(Er,Kr),M(eS,Kr,null),e(Kr,Brt),e(Kr,T7e),e(T7e,Irt),e(Kr,Nrt),e(Kr,Bn),e(Bn,qrt),e(Bn,M7e),e(M7e,jrt),e(Bn,Drt),e(Bn,E7e),e(E7e,Grt),e(Bn,Ort),e(Bn,C7e),e(C7e,Vrt),e(Bn,Xrt),e(Kr,zrt),e(Kr,ke),e(ke,w6),e(w6,w7e),e(w7e,Wrt),e(w6,Qrt),e(w6,yte),e(yte,Urt),e(w6,Hrt),e(ke,Jrt),e(ke,A6),e(A6,A7e),e(A7e,Yrt),e(A6,Krt),e(A6,xte),e(xte,Zrt),e(A6,ett),e(ke,ott),e(ke,L6),e(L6,L7e),e(L7e,rtt),e(L6,ttt),e(L6,$te),e($te,att),e(L6,ntt),e(ke,stt),e(ke,y6),e(y6,y7e),e(y7e,ltt),e(y6,itt),e(y6,kte),e(kte,dtt),e(y6,ctt),e(ke,ftt),e(ke,x6),e(x6,x7e),e(x7e,mtt),e(x6,gtt),e(x6,Ste),e(Ste,htt),e(x6,ptt),e(ke,_tt),e(ke,$6),e($6,$7e),e($7e,utt),e($6,btt),e($6,Rte),e(Rte,vtt),e($6,Ftt),e(ke,Ttt),e(ke,k6),e(k6,k7e),e(k7e,Mtt),e(k6,Ett),e(k6,Pte),e(Pte,Ctt),e(k6,wtt),e(ke,Att),e(ke,S6),e(S6,S7e),e(S7e,Ltt),e(S6,ytt),e(S6,Bte),e(Bte,xtt),e(S6,$tt),e(ke,ktt),e(ke,R6),e(R6,R7e),e(R7e,Stt),e(R6,Rtt),e(R6,Ite),e(Ite,Ptt),e(R6,Btt),e(ke,Itt),e(ke,P6),e(P6,P7e),e(P7e,Ntt),e(P6,qtt),e(P6,Nte),e(Nte,jtt),e(P6,Dtt),e(Kr,Gtt),M(B6,Kr,null),b(f,UHe,u),b(f,kf,u),e(kf,I6),e(I6,B7e),M(oS,B7e,null),e(kf,Ott),e(kf,I7e),e(I7e,Vtt),b(f,HHe,u),b(f,Cr,u),M(rS,Cr,null),e(Cr,Xtt),e(Cr,Sf),e(Sf,ztt),e(Sf,qte),e(qte,Wtt),e(Sf,Qtt),e(Sf,jte),e(jte,Utt),e(Sf,Htt),e(Cr,Jtt),e(Cr,tS),e(tS,Ytt),e(tS,N7e),e(N7e,Ktt),e(tS,Ztt),e(Cr,eat),e(Cr,aa),M(aS,aa,null),e(aa,oat),e(aa,q7e),e(q7e,rat),e(aa,tat),e(aa,Rf),e(Rf,aat),e(Rf,j7e),e(j7e,nat),e(Rf,sat),e(Rf,Dte),e(Dte,lat),e(Rf,iat),e(aa,dat),M(N6,aa,null),e(Cr,cat),e(Cr,Zr),M(nS,Zr,null),e(Zr,fat),e(Zr,D7e),e(D7e,mat),e(Zr,gat),e(Zr,In),e(In,hat),e(In,G7e),e(G7e,pat),e(In,_at),e(In,O7e),e(O7e,uat),e(In,bat),e(In,V7e),e(V7e,vat),e(In,Fat),e(Zr,Tat),e(Zr,Se),e(Se,q6),e(q6,X7e),e(X7e,Mat),e(q6,Eat),e(q6,Gte),e(Gte,Cat),e(q6,wat),e(Se,Aat),e(Se,j6),e(j6,z7e),e(z7e,Lat),e(j6,yat),e(j6,Ote),e(Ote,xat),e(j6,$at),e(Se,kat),e(Se,D6),e(D6,W7e),e(W7e,Sat),e(D6,Rat),e(D6,Vte),e(Vte,Pat),e(D6,Bat),e(Se,Iat),e(Se,G6),e(G6,Q7e),e(Q7e,Nat),e(G6,qat),e(G6,Xte),e(Xte,jat),e(G6,Dat),e(Se,Gat),e(Se,O6),e(O6,U7e),e(U7e,Oat),e(O6,Vat),e(O6,zte),e(zte,Xat),e(O6,zat),e(Se,Wat),e(Se,V6),e(V6,H7e),e(H7e,Qat),e(V6,Uat),e(V6,Wte),e(Wte,Hat),e(V6,Jat),e(Se,Yat),e(Se,X6),e(X6,J7e),e(J7e,Kat),e(X6,Zat),e(X6,Qte),e(Qte,ent),e(X6,ont),e(Se,rnt),e(Se,z6),e(z6,Y7e),e(Y7e,tnt),e(z6,ant),e(z6,Ute),e(Ute,nnt),e(z6,snt),e(Se,lnt),e(Se,W6),e(W6,K7e),e(K7e,int),e(W6,dnt),e(W6,Hte),e(Hte,cnt),e(W6,fnt),e(Se,mnt),e(Se,Q6),e(Q6,Z7e),e(Z7e,gnt),e(Q6,hnt),e(Q6,Jte),e(Jte,pnt),e(Q6,_nt),e(Zr,unt),M(U6,Zr,null),b(f,JHe,u),b(f,Pf,u),e(Pf,H6),e(H6,eLe),M(sS,eLe,null),e(Pf,bnt),e(Pf,oLe),e(oLe,vnt),b(f,YHe,u),b(f,wr,u),M(lS,wr,null),e(wr,Fnt),e(wr,Bf),e(Bf,Tnt),e(Bf,Yte),e(Yte,Mnt),e(Bf,Ent),e(Bf,Kte),e(Kte,Cnt),e(Bf,wnt),e(wr,Ant),e(wr,iS),e(iS,Lnt),e(iS,rLe),e(rLe,ynt),e(iS,xnt),e(wr,$nt),e(wr,na),M(dS,na,null),e(na,knt),e(na,tLe),e(tLe,Snt),e(na,Rnt),e(na,If),e(If,Pnt),e(If,aLe),e(aLe,Bnt),e(If,Int),e(If,Zte),e(Zte,Nnt),e(If,qnt),e(na,jnt),M(J6,na,null),e(wr,Dnt),e(wr,et),M(cS,et,null),e(et,Gnt),e(et,nLe),e(nLe,Ont),e(et,Vnt),e(et,Nn),e(Nn,Xnt),e(Nn,sLe),e(sLe,znt),e(Nn,Wnt),e(Nn,lLe),e(lLe,Qnt),e(Nn,Unt),e(Nn,iLe),e(iLe,Hnt),e(Nn,Jnt),e(et,Ynt),e(et,Re),e(Re,Y6),e(Y6,dLe),e(dLe,Knt),e(Y6,Znt),e(Y6,eae),e(eae,est),e(Y6,ost),e(Re,rst),e(Re,K6),e(K6,cLe),e(cLe,tst),e(K6,ast),e(K6,oae),e(oae,nst),e(K6,sst),e(Re,lst),e(Re,Z6),e(Z6,fLe),e(fLe,ist),e(Z6,dst),e(Z6,rae),e(rae,cst),e(Z6,fst),e(Re,mst),e(Re,eA),e(eA,mLe),e(mLe,gst),e(eA,hst),e(eA,tae),e(tae,pst),e(eA,_st),e(Re,ust),e(Re,oA),e(oA,gLe),e(gLe,bst),e(oA,vst),e(oA,aae),e(aae,Fst),e(oA,Tst),e(Re,Mst),e(Re,rA),e(rA,hLe),e(hLe,Est),e(rA,Cst),e(rA,nae),e(nae,wst),e(rA,Ast),e(Re,Lst),e(Re,tA),e(tA,pLe),e(pLe,yst),e(tA,xst),e(tA,sae),e(sae,$st),e(tA,kst),e(Re,Sst),e(Re,aA),e(aA,_Le),e(_Le,Rst),e(aA,Pst),e(aA,lae),e(lae,Bst),e(aA,Ist),e(Re,Nst),e(Re,nA),e(nA,uLe),e(uLe,qst),e(nA,jst),e(nA,iae),e(iae,Dst),e(nA,Gst),e(Re,Ost),e(Re,sA),e(sA,bLe),e(bLe,Vst),e(sA,Xst),e(sA,dae),e(dae,zst),e(sA,Wst),e(et,Qst),M(lA,et,null),b(f,KHe,u),b(f,Nf,u),e(Nf,iA),e(iA,vLe),M(fS,vLe,null),e(Nf,Ust),e(Nf,FLe),e(FLe,Hst),b(f,ZHe,u),b(f,Ar,u),M(mS,Ar,null),e(Ar,Jst),e(Ar,qf),e(qf,Yst),e(qf,cae),e(cae,Kst),e(qf,Zst),e(qf,fae),e(fae,elt),e(qf,olt),e(Ar,rlt),e(Ar,gS),e(gS,tlt),e(gS,TLe),e(TLe,alt),e(gS,nlt),e(Ar,slt),e(Ar,sa),M(hS,sa,null),e(sa,llt),e(sa,MLe),e(MLe,ilt),e(sa,dlt),e(sa,jf),e(jf,clt),e(jf,ELe),e(ELe,flt),e(jf,mlt),e(jf,mae),e(mae,glt),e(jf,hlt),e(sa,plt),M(dA,sa,null),e(Ar,_lt),e(Ar,ot),M(pS,ot,null),e(ot,ult),e(ot,CLe),e(CLe,blt),e(ot,vlt),e(ot,qn),e(qn,Flt),e(qn,wLe),e(wLe,Tlt),e(qn,Mlt),e(qn,ALe),e(ALe,Elt),e(qn,Clt),e(qn,LLe),e(LLe,wlt),e(qn,Alt),e(ot,Llt),e(ot,Xe),e(Xe,cA),e(cA,yLe),e(yLe,ylt),e(cA,xlt),e(cA,gae),e(gae,$lt),e(cA,klt),e(Xe,Slt),e(Xe,fA),e(fA,xLe),e(xLe,Rlt),e(fA,Plt),e(fA,hae),e(hae,Blt),e(fA,Ilt),e(Xe,Nlt),e(Xe,mA),e(mA,$Le),e($Le,qlt),e(mA,jlt),e(mA,pae),e(pae,Dlt),e(mA,Glt),e(Xe,Olt),e(Xe,gA),e(gA,kLe),e(kLe,Vlt),e(gA,Xlt),e(gA,_ae),e(_ae,zlt),e(gA,Wlt),e(Xe,Qlt),e(Xe,hA),e(hA,SLe),e(SLe,Ult),e(hA,Hlt),e(hA,uae),e(uae,Jlt),e(hA,Ylt),e(Xe,Klt),e(Xe,pA),e(pA,RLe),e(RLe,Zlt),e(pA,eit),e(pA,bae),e(bae,oit),e(pA,rit),e(Xe,tit),e(Xe,_A),e(_A,PLe),e(PLe,ait),e(_A,nit),e(_A,vae),e(vae,sit),e(_A,lit),e(Xe,iit),e(Xe,uA),e(uA,BLe),e(BLe,dit),e(uA,cit),e(uA,Fae),e(Fae,fit),e(uA,mit),e(ot,git),M(bA,ot,null),b(f,eJe,u),b(f,Df,u),e(Df,vA),e(vA,ILe),M(_S,ILe,null),e(Df,hit),e(Df,NLe),e(NLe,pit),b(f,oJe,u),b(f,Lr,u),M(uS,Lr,null),e(Lr,_it),e(Lr,Gf),e(Gf,uit),e(Gf,Tae),e(Tae,bit),e(Gf,vit),e(Gf,Mae),e(Mae,Fit),e(Gf,Tit),e(Lr,Mit),e(Lr,bS),e(bS,Eit),e(bS,qLe),e(qLe,Cit),e(bS,wit),e(Lr,Ait),e(Lr,la),M(vS,la,null),e(la,Lit),e(la,jLe),e(jLe,yit),e(la,xit),e(la,Of),e(Of,$it),e(Of,DLe),e(DLe,kit),e(Of,Sit),e(Of,Eae),e(Eae,Rit),e(Of,Pit),e(la,Bit),M(FA,la,null),e(Lr,Iit),e(Lr,rt),M(FS,rt,null),e(rt,Nit),e(rt,GLe),e(GLe,qit),e(rt,jit),e(rt,jn),e(jn,Dit),e(jn,OLe),e(OLe,Git),e(jn,Oit),e(jn,VLe),e(VLe,Vit),e(jn,Xit),e(jn,XLe),e(XLe,zit),e(jn,Wit),e(rt,Qit),e(rt,ze),e(ze,TA),e(TA,zLe),e(zLe,Uit),e(TA,Hit),e(TA,Cae),e(Cae,Jit),e(TA,Yit),e(ze,Kit),e(ze,MA),e(MA,WLe),e(WLe,Zit),e(MA,edt),e(MA,wae),e(wae,odt),e(MA,rdt),e(ze,tdt),e(ze,EA),e(EA,QLe),e(QLe,adt),e(EA,ndt),e(EA,Aae),e(Aae,sdt),e(EA,ldt),e(ze,idt),e(ze,CA),e(CA,ULe),e(ULe,ddt),e(CA,cdt),e(CA,Lae),e(Lae,fdt),e(CA,mdt),e(ze,gdt),e(ze,wA),e(wA,HLe),e(HLe,hdt),e(wA,pdt),e(wA,yae),e(yae,_dt),e(wA,udt),e(ze,bdt),e(ze,AA),e(AA,JLe),e(JLe,vdt),e(AA,Fdt),e(AA,xae),e(xae,Tdt),e(AA,Mdt),e(ze,Edt),e(ze,LA),e(LA,YLe),e(YLe,Cdt),e(LA,wdt),e(LA,$ae),e($ae,Adt),e(LA,Ldt),e(ze,ydt),e(ze,yA),e(yA,KLe),e(KLe,xdt),e(yA,$dt),e(yA,kae),e(kae,kdt),e(yA,Sdt),e(rt,Rdt),M(xA,rt,null),b(f,rJe,u),b(f,Vf,u),e(Vf,$A),e($A,ZLe),M(TS,ZLe,null),e(Vf,Pdt),e(Vf,eye),e(eye,Bdt),b(f,tJe,u),b(f,yr,u),M(MS,yr,null),e(yr,Idt),e(yr,Xf),e(Xf,Ndt),e(Xf,Sae),e(Sae,qdt),e(Xf,jdt),e(Xf,Rae),e(Rae,Ddt),e(Xf,Gdt),e(yr,Odt),e(yr,ES),e(ES,Vdt),e(ES,oye),e(oye,Xdt),e(ES,zdt),e(yr,Wdt),e(yr,ia),M(CS,ia,null),e(ia,Qdt),e(ia,rye),e(rye,Udt),e(ia,Hdt),e(ia,zf),e(zf,Jdt),e(zf,tye),e(tye,Ydt),e(zf,Kdt),e(zf,Pae),e(Pae,Zdt),e(zf,ect),e(ia,oct),M(kA,ia,null),e(yr,rct),e(yr,tt),M(wS,tt,null),e(tt,tct),e(tt,aye),e(aye,act),e(tt,nct),e(tt,Dn),e(Dn,sct),e(Dn,nye),e(nye,lct),e(Dn,ict),e(Dn,sye),e(sye,dct),e(Dn,cct),e(Dn,lye),e(lye,fct),e(Dn,mct),e(tt,gct),e(tt,iye),e(iye,SA),e(SA,dye),e(dye,hct),e(SA,pct),e(SA,Bae),e(Bae,_ct),e(SA,uct),e(tt,bct),M(RA,tt,null),b(f,aJe,u),b(f,Wf,u),e(Wf,PA),e(PA,cye),M(AS,cye,null),e(Wf,vct),e(Wf,fye),e(fye,Fct),b(f,nJe,u),b(f,xr,u),M(LS,xr,null),e(xr,Tct),e(xr,Qf),e(Qf,Mct),e(Qf,Iae),e(Iae,Ect),e(Qf,Cct),e(Qf,Nae),e(Nae,wct),e(Qf,Act),e(xr,Lct),e(xr,yS),e(yS,yct),e(yS,mye),e(mye,xct),e(yS,$ct),e(xr,kct),e(xr,da),M(xS,da,null),e(da,Sct),e(da,gye),e(gye,Rct),e(da,Pct),e(da,Uf),e(Uf,Bct),e(Uf,hye),e(hye,Ict),e(Uf,Nct),e(Uf,qae),e(qae,qct),e(Uf,jct),e(da,Dct),M(BA,da,null),e(xr,Gct),e(xr,at),M($S,at,null),e(at,Oct),e(at,pye),e(pye,Vct),e(at,Xct),e(at,Gn),e(Gn,zct),e(Gn,_ye),e(_ye,Wct),e(Gn,Qct),e(Gn,uye),e(uye,Uct),e(Gn,Hct),e(Gn,bye),e(bye,Jct),e(Gn,Yct),e(at,Kct),e(at,kS),e(kS,IA),e(IA,vye),e(vye,Zct),e(IA,eft),e(IA,jae),e(jae,oft),e(IA,rft),e(kS,tft),e(kS,NA),e(NA,Fye),e(Fye,aft),e(NA,nft),e(NA,Dae),e(Dae,sft),e(NA,lft),e(at,ift),M(qA,at,null),b(f,sJe,u),b(f,Hf,u),e(Hf,jA),e(jA,Tye),M(SS,Tye,null),e(Hf,dft),e(Hf,Mye),e(Mye,cft),b(f,lJe,u),b(f,$r,u),M(RS,$r,null),e($r,fft),e($r,Jf),e(Jf,mft),e(Jf,Gae),e(Gae,gft),e(Jf,hft),e(Jf,Oae),e(Oae,pft),e(Jf,_ft),e($r,uft),e($r,PS),e(PS,bft),e(PS,Eye),e(Eye,vft),e(PS,Fft),e($r,Tft),e($r,ca),M(BS,ca,null),e(ca,Mft),e(ca,Cye),e(Cye,Eft),e(ca,Cft),e(ca,Yf),e(Yf,wft),e(Yf,wye),e(wye,Aft),e(Yf,Lft),e(Yf,Vae),e(Vae,yft),e(Yf,xft),e(ca,$ft),M(DA,ca,null),e($r,kft),e($r,nt),M(IS,nt,null),e(nt,Sft),e(nt,Aye),e(Aye,Rft),e(nt,Pft),e(nt,On),e(On,Bft),e(On,Lye),e(Lye,Ift),e(On,Nft),e(On,yye),e(yye,qft),e(On,jft),e(On,xye),e(xye,Dft),e(On,Gft),e(nt,Oft),e(nt,$ye),e($ye,GA),e(GA,kye),e(kye,Vft),e(GA,Xft),e(GA,Xae),e(Xae,zft),e(GA,Wft),e(nt,Qft),M(OA,nt,null),iJe=!0},p(f,[u]){const NS={};u&2&&(NS.$$scope={dirty:u,ctx:f}),sm.$set(NS);const Sye={};u&2&&(Sye.$$scope={dirty:u,ctx:f}),Mh.$set(Sye);const Rye={};u&2&&(Rye.$$scope={dirty:u,ctx:f}),ap.$set(Rye);const Pye={};u&2&&(Pye.$$scope={dirty:u,ctx:f}),zp.$set(Pye);const qS={};u&2&&(qS.$$scope={dirty:u,ctx:f}),Wp.$set(qS);const Bye={};u&2&&(Bye.$$scope={dirty:u,ctx:f}),p_.$set(Bye);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),__.$set(Vn);const Iye={};u&2&&(Iye.$$scope={dirty:u,ctx:f}),v_.$set(Iye);const Nye={};u&2&&(Nye.$$scope={dirty:u,ctx:f}),y5.$set(Nye);const qye={};u&2&&(qye.$$scope={dirty:u,ctx:f}),$5.$set(qye);const jS={};u&2&&(jS.$$scope={dirty:u,ctx:f}),w1.$set(jS);const jye={};u&2&&(jye.$$scope={dirty:u,ctx:f}),L1.$set(jye);const DS={};u&2&&(DS.$$scope={dirty:u,ctx:f}),p2.$set(DS);const Dye={};u&2&&(Dye.$$scope={dirty:u,ctx:f}),u2.$set(Dye);const GS={};u&2&&(GS.$$scope={dirty:u,ctx:f}),tb.$set(GS);const Gye={};u&2&&(Gye.$$scope={dirty:u,ctx:f}),nb.$set(Gye);const Oye={};u&2&&(Oye.$$scope={dirty:u,ctx:f}),Ab.$set(Oye);const Vye={};u&2&&(Vye.$$scope={dirty:u,ctx:f}),yb.$set(Vye);const Kf={};u&2&&(Kf.$$scope={dirty:u,ctx:f}),yv.$set(Kf);const Xye={};u&2&&(Xye.$$scope={dirty:u,ctx:f}),$v.$set(Xye);const zye={};u&2&&(zye.$$scope={dirty:u,ctx:f}),dF.$set(zye);const Wye={};u&2&&(Wye.$$scope={dirty:u,ctx:f}),fF.$set(Wye);const OS={};u&2&&(OS.$$scope={dirty:u,ctx:f}),vF.$set(OS);const Qye={};u&2&&(Qye.$$scope={dirty:u,ctx:f}),TF.$set(Qye);const Uye={};u&2&&(Uye.$$scope={dirty:u,ctx:f}),sT.$set(Uye);const Hye={};u&2&&(Hye.$$scope={dirty:u,ctx:f}),iT.$set(Hye);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),ZT.$set(dt);const VS={};u&2&&(VS.$$scope={dirty:u,ctx:f}),o8.$set(VS);const Jye={};u&2&&(Jye.$$scope={dirty:u,ctx:f}),a8.$set(Jye);const XS={};u&2&&(XS.$$scope={dirty:u,ctx:f}),s8.$set(XS);const Yye={};u&2&&(Yye.$$scope={dirty:u,ctx:f}),M8.$set(Yye);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),C8.$set(ct);const Kye={};u&2&&(Kye.$$scope={dirty:u,ctx:f}),L8.$set(Kye);const Zf={};u&2&&(Zf.$$scope={dirty:u,ctx:f}),x8.$set(Zf);const Zye={};u&2&&(Zye.$$scope={dirty:u,ctx:f}),S8.$set(Zye);const e9e={};u&2&&(e9e.$$scope={dirty:u,ctx:f}),P8.$set(e9e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),N8.$set(L);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),j8.$set(VA);const o9e={};u&2&&(o9e.$$scope={dirty:u,ctx:f}),J8.$set(o9e);const r9e={};u&2&&(r9e.$$scope={dirty:u,ctx:f}),K8.$set(r9e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),nM.$set(XA);const t9e={};u&2&&(t9e.$$scope={dirty:u,ctx:f}),lM.$set(t9e);const a9e={};u&2&&(a9e.$$scope={dirty:u,ctx:f}),vM.$set(a9e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),TM.$set(zA);const n9e={};u&2&&(n9e.$$scope={dirty:u,ctx:f}),wM.$set(n9e);const s9e={};u&2&&(s9e.$$scope={dirty:u,ctx:f}),LM.$set(s9e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),PM.$set(WA);const l9e={};u&2&&(l9e.$$scope={dirty:u,ctx:f}),IM.$set(l9e);const i9e={};u&2&&(i9e.$$scope={dirty:u,ctx:f}),OM.$set(i9e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),XM.$set(QA);const d9e={};u&2&&(d9e.$$scope={dirty:u,ctx:f}),UM.$set(d9e);const c9e={};u&2&&(c9e.$$scope={dirty:u,ctx:f}),JM.$set(c9e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),ZM.$set(UA);const f9e={};u&2&&(f9e.$$scope={dirty:u,ctx:f}),oE.$set(f9e);const m9e={};u&2&&(m9e.$$scope={dirty:u,ctx:f}),iE.$set(m9e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),cE.$set(HA);const g9e={};u&2&&(g9e.$$scope={dirty:u,ctx:f}),gE.$set(g9e);const h9e={};u&2&&(h9e.$$scope={dirty:u,ctx:f}),pE.$set(h9e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),g4.$set(JA);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:f}),p4.$set(p9e);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:f}),j4.$set(_9e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),G4.$set(YA);const u9e={};u&2&&(u9e.$$scope={dirty:u,ctx:f}),oC.$set(u9e);const b9e={};u&2&&(b9e.$$scope={dirty:u,ctx:f}),tC.$set(b9e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),mC.$set(KA);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:f}),hC.$set(v9e);const F9e={};u&2&&(F9e.$$scope={dirty:u,ctx:f}),bC.$set(F9e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),FC.$set(ZA);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:f}),GC.$set(T9e);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:f}),VC.$set(M9e);const e7={};u&2&&(e7.$$scope={dirty:u,ctx:f}),e3.$set(e7);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:f}),r3.$set(E9e);const C9e={};u&2&&(C9e.$$scope={dirty:u,ctx:f}),x3.$set(C9e);const o7={};u&2&&(o7.$$scope={dirty:u,ctx:f}),k3.$set(o7);const w9e={};u&2&&(w9e.$$scope={dirty:u,ctx:f}),H3.$set(w9e);const A9e={};u&2&&(A9e.$$scope={dirty:u,ctx:f}),Y3.$set(A9e);const r7={};u&2&&(r7.$$scope={dirty:u,ctx:f}),e0.$set(r7);const L9e={};u&2&&(L9e.$$scope={dirty:u,ctx:f}),r0.$set(L9e);const y9e={};u&2&&(y9e.$$scope={dirty:u,ctx:f}),a0.$set(y9e);const t7={};u&2&&(t7.$$scope={dirty:u,ctx:f}),s0.$set(t7);const x9e={};u&2&&(x9e.$$scope={dirty:u,ctx:f}),L0.$set(x9e);const $9e={};u&2&&($9e.$$scope={dirty:u,ctx:f}),x0.$set($9e);const a7={};u&2&&(a7.$$scope={dirty:u,ctx:f}),J0.$set(a7);const k9e={};u&2&&(k9e.$$scope={dirty:u,ctx:f}),K0.$set(k9e);const S9e={};u&2&&(S9e.$$scope={dirty:u,ctx:f}),ew.$set(S9e);const n7={};u&2&&(n7.$$scope={dirty:u,ctx:f}),rw.$set(n7);const R9e={};u&2&&(R9e.$$scope={dirty:u,ctx:f}),aw.$set(R9e);const P9e={};u&2&&(P9e.$$scope={dirty:u,ctx:f}),sw.$set(P9e);const s7={};u&2&&(s7.$$scope={dirty:u,ctx:f}),Pw.$set(s7);const B9e={};u&2&&(B9e.$$scope={dirty:u,ctx:f}),Iw.$set(B9e);const I9e={};u&2&&(I9e.$$scope={dirty:u,ctx:f}),Qw.$set(I9e);const l7={};u&2&&(l7.$$scope={dirty:u,ctx:f}),Hw.$set(l7);const N9e={};u&2&&(N9e.$$scope={dirty:u,ctx:f}),d6.$set(N9e);const q9e={};u&2&&(q9e.$$scope={dirty:u,ctx:f}),f6.$set(q9e);const i7={};u&2&&(i7.$$scope={dirty:u,ctx:f}),M6.$set(i7);const j9e={};u&2&&(j9e.$$scope={dirty:u,ctx:f}),C6.$set(j9e);const D9e={};u&2&&(D9e.$$scope={dirty:u,ctx:f}),B6.$set(D9e);const d7={};u&2&&(d7.$$scope={dirty:u,ctx:f}),N6.$set(d7);const G9e={};u&2&&(G9e.$$scope={dirty:u,ctx:f}),U6.$set(G9e);const O9e={};u&2&&(O9e.$$scope={dirty:u,ctx:f}),J6.$set(O9e);const c7={};u&2&&(c7.$$scope={dirty:u,ctx:f}),lA.$set(c7);const V9e={};u&2&&(V9e.$$scope={dirty:u,ctx:f}),dA.$set(V9e);const X9e={};u&2&&(X9e.$$scope={dirty:u,ctx:f}),bA.$set(X9e);const f7={};u&2&&(f7.$$scope={dirty:u,ctx:f}),FA.$set(f7);const z9e={};u&2&&(z9e.$$scope={dirty:u,ctx:f}),xA.$set(z9e);const W9e={};u&2&&(W9e.$$scope={dirty:u,ctx:f}),kA.$set(W9e);const m7={};u&2&&(m7.$$scope={dirty:u,ctx:f}),RA.$set(m7);const Q9e={};u&2&&(Q9e.$$scope={dirty:u,ctx:f}),BA.$set(Q9e);const U9e={};u&2&&(U9e.$$scope={dirty:u,ctx:f}),qA.$set(U9e);const g7={};u&2&&(g7.$$scope={dirty:u,ctx:f}),DA.$set(g7);const H9e={};u&2&&(H9e.$$scope={dirty:u,ctx:f}),OA.$set(H9e)},i(f){iJe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(sm.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(Ey.$$.fragment,f),E(Mh.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(xy.$$.fragment,f),E(ap.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(zp.$$.fragment,f),E(Wp.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Gy.$$.fragment,f),E(p_.$$.fragment,f),E(__.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(v_.$$.fragment,f),E(Qy.$$.fragment,f),E(y5.$$.fragment,f),E(Uy.$$.fragment,f),E(Hy.$$.fragment,f),E(Yy.$$.fragment,f),E($5.$$.fragment,f),E(Ky.$$.fragment,f),E(w1.$$.fragment,f),E(Zy.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(L1.$$.fragment,f),E(t9.$$.fragment,f),E(p2.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(u2.$$.fragment,f),E(i9.$$.fragment,f),E(tb.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(nb.$$.fragment,f),E(g9.$$.fragment,f),E(Ab.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(yb.$$.fragment,f),E(b9.$$.fragment,f),E(yv.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E($v.$$.fragment,f),E(E9.$$.fragment,f),E(dF.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(fF.$$.fragment,f),E(y9.$$.fragment,f),E(vF.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(TF.$$.fragment,f),E(R9.$$.fragment,f),E(sT.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(iT.$$.fragment,f),E(q9.$$.fragment,f),E(ZT.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(o8.$$.fragment,f),E(V9.$$.fragment,f),E(a8.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(s8.$$.fragment,f),E(U9.$$.fragment,f),E(M8.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(C8.$$.fragment,f),E(Z9.$$.fragment,f),E(L8.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(x8.$$.fragment,f),E(ax.$$.fragment,f),E(S8.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(P8.$$.fragment,f),E(dx.$$.fragment,f),E(N8.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(j8.$$.fragment,f),E(hx.$$.fragment,f),E(J8.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(K8.$$.fragment,f),E(vx.$$.fragment,f),E(nM.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(lM.$$.fragment,f),E(Cx.$$.fragment,f),E(vM.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(TM.$$.fragment,f),E(xx.$$.fragment,f),E(wM.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(LM.$$.fragment,f),E(Bx.$$.fragment,f),E(PM.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(IM.$$.fragment,f),E(Dx.$$.fragment,f),E(OM.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(XM.$$.fragment,f),E(zx.$$.fragment,f),E(UM.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(JM.$$.fragment,f),E(Yx.$$.fragment,f),E(ZM.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(oE.$$.fragment,f),E(r$.$$.fragment,f),E(iE.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(cE.$$.fragment,f),E(l$.$$.fragment,f),E(gE.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(pE.$$.fragment,f),E(m$.$$.fragment,f),E(g4.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(p4.$$.fragment,f),E(u$.$$.fragment,f),E(j4.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(G4.$$.fragment,f),E(M$.$$.fragment,f),E(oC.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(tC.$$.fragment,f),E(L$.$$.fragment,f),E(mC.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(hC.$$.fragment,f),E(S$.$$.fragment,f),E(bC.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(FC.$$.fragment,f),E(N$.$$.fragment,f),E(GC.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(VC.$$.fragment,f),E(O$.$$.fragment,f),E(e3.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(W$.$$.fragment,f),E(r3.$$.fragment,f),E(Q$.$$.fragment,f),E(x3.$$.fragment,f),E(U$.$$.fragment,f),E(H$.$$.fragment,f),E(Y$.$$.fragment,f),E(k3.$$.fragment,f),E(K$.$$.fragment,f),E(H3.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(Y3.$$.fragment,f),E(tk.$$.fragment,f),E(e0.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(r0.$$.fragment,f),E(dk.$$.fragment,f),E(a0.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(s0.$$.fragment,f),E(hk.$$.fragment,f),E(L0.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(x0.$$.fragment,f),E(vk.$$.fragment,f),E(J0.$$.fragment,f),E(Fk.$$.fragment,f),E(Tk.$$.fragment,f),E(Ek.$$.fragment,f),E(K0.$$.fragment,f),E(Ck.$$.fragment,f),E(ew.$$.fragment,f),E(wk.$$.fragment,f),E(Ak.$$.fragment,f),E(yk.$$.fragment,f),E(rw.$$.fragment,f),E(xk.$$.fragment,f),E(aw.$$.fragment,f),E($k.$$.fragment,f),E(kk.$$.fragment,f),E(Rk.$$.fragment,f),E(sw.$$.fragment,f),E(Pk.$$.fragment,f),E(Pw.$$.fragment,f),E(Bk.$$.fragment,f),E(Ik.$$.fragment,f),E(qk.$$.fragment,f),E(Iw.$$.fragment,f),E(jk.$$.fragment,f),E(Qw.$$.fragment,f),E(Dk.$$.fragment,f),E(Gk.$$.fragment,f),E(Vk.$$.fragment,f),E(Hw.$$.fragment,f),E(Xk.$$.fragment,f),E(d6.$$.fragment,f),E(zk.$$.fragment,f),E(Wk.$$.fragment,f),E(Uk.$$.fragment,f),E(f6.$$.fragment,f),E(Hk.$$.fragment,f),E(M6.$$.fragment,f),E(Jk.$$.fragment,f),E(Yk.$$.fragment,f),E(Zk.$$.fragment,f),E(C6.$$.fragment,f),E(eS.$$.fragment,f),E(B6.$$.fragment,f),E(oS.$$.fragment,f),E(rS.$$.fragment,f),E(aS.$$.fragment,f),E(N6.$$.fragment,f),E(nS.$$.fragment,f),E(U6.$$.fragment,f),E(sS.$$.fragment,f),E(lS.$$.fragment,f),E(dS.$$.fragment,f),E(J6.$$.fragment,f),E(cS.$$.fragment,f),E(lA.$$.fragment,f),E(fS.$$.fragment,f),E(mS.$$.fragment,f),E(hS.$$.fragment,f),E(dA.$$.fragment,f),E(pS.$$.fragment,f),E(bA.$$.fragment,f),E(_S.$$.fragment,f),E(uS.$$.fragment,f),E(vS.$$.fragment,f),E(FA.$$.fragment,f),E(FS.$$.fragment,f),E(xA.$$.fragment,f),E(TS.$$.fragment,f),E(MS.$$.fragment,f),E(CS.$$.fragment,f),E(kA.$$.fragment,f),E(wS.$$.fragment,f),E(RA.$$.fragment,f),E(AS.$$.fragment,f),E(LS.$$.fragment,f),E(xS.$$.fragment,f),E(BA.$$.fragment,f),E($S.$$.fragment,f),E(qA.$$.fragment,f),E(SS.$$.fragment,f),E(RS.$$.fragment,f),E(BS.$$.fragment,f),E(DA.$$.fragment,f),E(IS.$$.fragment,f),E(OA.$$.fragment,f),iJe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(sm.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(Ey.$$.fragment,f),C(Mh.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(xy.$$.fragment,f),C(ap.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(zp.$$.fragment,f),C(Wp.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Gy.$$.fragment,f),C(p_.$$.fragment,f),C(__.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(v_.$$.fragment,f),C(Qy.$$.fragment,f),C(y5.$$.fragment,f),C(Uy.$$.fragment,f),C(Hy.$$.fragment,f),C(Yy.$$.fragment,f),C($5.$$.fragment,f),C(Ky.$$.fragment,f),C(w1.$$.fragment,f),C(Zy.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(L1.$$.fragment,f),C(t9.$$.fragment,f),C(p2.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(u2.$$.fragment,f),C(i9.$$.fragment,f),C(tb.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(nb.$$.fragment,f),C(g9.$$.fragment,f),C(Ab.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(yb.$$.fragment,f),C(b9.$$.fragment,f),C(yv.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C($v.$$.fragment,f),C(E9.$$.fragment,f),C(dF.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(fF.$$.fragment,f),C(y9.$$.fragment,f),C(vF.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(TF.$$.fragment,f),C(R9.$$.fragment,f),C(sT.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(iT.$$.fragment,f),C(q9.$$.fragment,f),C(ZT.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(o8.$$.fragment,f),C(V9.$$.fragment,f),C(a8.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(s8.$$.fragment,f),C(U9.$$.fragment,f),C(M8.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(C8.$$.fragment,f),C(Z9.$$.fragment,f),C(L8.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(x8.$$.fragment,f),C(ax.$$.fragment,f),C(S8.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(P8.$$.fragment,f),C(dx.$$.fragment,f),C(N8.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(j8.$$.fragment,f),C(hx.$$.fragment,f),C(J8.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(K8.$$.fragment,f),C(vx.$$.fragment,f),C(nM.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(lM.$$.fragment,f),C(Cx.$$.fragment,f),C(vM.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(TM.$$.fragment,f),C(xx.$$.fragment,f),C(wM.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(LM.$$.fragment,f),C(Bx.$$.fragment,f),C(PM.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(IM.$$.fragment,f),C(Dx.$$.fragment,f),C(OM.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(XM.$$.fragment,f),C(zx.$$.fragment,f),C(UM.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(JM.$$.fragment,f),C(Yx.$$.fragment,f),C(ZM.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(oE.$$.fragment,f),C(r$.$$.fragment,f),C(iE.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(cE.$$.fragment,f),C(l$.$$.fragment,f),C(gE.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(pE.$$.fragment,f),C(m$.$$.fragment,f),C(g4.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(p4.$$.fragment,f),C(u$.$$.fragment,f),C(j4.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(G4.$$.fragment,f),C(M$.$$.fragment,f),C(oC.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(tC.$$.fragment,f),C(L$.$$.fragment,f),C(mC.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(hC.$$.fragment,f),C(S$.$$.fragment,f),C(bC.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(FC.$$.fragment,f),C(N$.$$.fragment,f),C(GC.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(VC.$$.fragment,f),C(O$.$$.fragment,f),C(e3.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(W$.$$.fragment,f),C(r3.$$.fragment,f),C(Q$.$$.fragment,f),C(x3.$$.fragment,f),C(U$.$$.fragment,f),C(H$.$$.fragment,f),C(Y$.$$.fragment,f),C(k3.$$.fragment,f),C(K$.$$.fragment,f),C(H3.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(Y3.$$.fragment,f),C(tk.$$.fragment,f),C(e0.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(r0.$$.fragment,f),C(dk.$$.fragment,f),C(a0.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(s0.$$.fragment,f),C(hk.$$.fragment,f),C(L0.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(x0.$$.fragment,f),C(vk.$$.fragment,f),C(J0.$$.fragment,f),C(Fk.$$.fragment,f),C(Tk.$$.fragment,f),C(Ek.$$.fragment,f),C(K0.$$.fragment,f),C(Ck.$$.fragment,f),C(ew.$$.fragment,f),C(wk.$$.fragment,f),C(Ak.$$.fragment,f),C(yk.$$.fragment,f),C(rw.$$.fragment,f),C(xk.$$.fragment,f),C(aw.$$.fragment,f),C($k.$$.fragment,f),C(kk.$$.fragment,f),C(Rk.$$.fragment,f),C(sw.$$.fragment,f),C(Pk.$$.fragment,f),C(Pw.$$.fragment,f),C(Bk.$$.fragment,f),C(Ik.$$.fragment,f),C(qk.$$.fragment,f),C(Iw.$$.fragment,f),C(jk.$$.fragment,f),C(Qw.$$.fragment,f),C(Dk.$$.fragment,f),C(Gk.$$.fragment,f),C(Vk.$$.fragment,f),C(Hw.$$.fragment,f),C(Xk.$$.fragment,f),C(d6.$$.fragment,f),C(zk.$$.fragment,f),C(Wk.$$.fragment,f),C(Uk.$$.fragment,f),C(f6.$$.fragment,f),C(Hk.$$.fragment,f),C(M6.$$.fragment,f),C(Jk.$$.fragment,f),C(Yk.$$.fragment,f),C(Zk.$$.fragment,f),C(C6.$$.fragment,f),C(eS.$$.fragment,f),C(B6.$$.fragment,f),C(oS.$$.fragment,f),C(rS.$$.fragment,f),C(aS.$$.fragment,f),C(N6.$$.fragment,f),C(nS.$$.fragment,f),C(U6.$$.fragment,f),C(sS.$$.fragment,f),C(lS.$$.fragment,f),C(dS.$$.fragment,f),C(J6.$$.fragment,f),C(cS.$$.fragment,f),C(lA.$$.fragment,f),C(fS.$$.fragment,f),C(mS.$$.fragment,f),C(hS.$$.fragment,f),C(dA.$$.fragment,f),C(pS.$$.fragment,f),C(bA.$$.fragment,f),C(_S.$$.fragment,f),C(uS.$$.fragment,f),C(vS.$$.fragment,f),C(FA.$$.fragment,f),C(FS.$$.fragment,f),C(xA.$$.fragment,f),C(TS.$$.fragment,f),C(MS.$$.fragment,f),C(CS.$$.fragment,f),C(kA.$$.fragment,f),C(wS.$$.fragment,f),C(RA.$$.fragment,f),C(AS.$$.fragment,f),C(LS.$$.fragment,f),C(xS.$$.fragment,f),C(BA.$$.fragment,f),C($S.$$.fragment,f),C(qA.$$.fragment,f),C(SS.$$.fragment,f),C(RS.$$.fragment,f),C(BS.$$.fragment,f),C(DA.$$.fragment,f),C(IS.$$.fragment,f),C(OA.$$.fragment,f),iJe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(om),f&&t(ft),f&&t(Ve),f&&t(Ue),f&&t(tm),w(ja,f),f&&t(He),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(ZQe),f&&t(Hi),w(uy),f&&t(eUe),f&&t(Un),f&&t(oUe),w(by,f),f&&t(rUe),f&&t(fP),f&&t(tUe),w(sm,f),f&&t(aUe),f&&t(Ji),w(vy),f&&t(nUe),f&&t(yo),w(Fy),w(Ey),w(Mh),w(Cy),f&&t(sUe),f&&t(Ki),w(wy),f&&t(lUe),f&&t(xo),w(Ay),w(xy),w(ap),w($y),f&&t(iUe),f&&t(Zi),w(ky),f&&t(dUe),f&&t($o),w(Sy),w(By),w(zp),w(Wp),w(Iy),f&&t(cUe),f&&t(ed),w(Ny),f&&t(fUe),f&&t(ko),w(qy),w(Gy),w(p_),w(__),w(Oy),f&&t(mUe),f&&t(rd),w(Vy),f&&t(gUe),f&&t(So),w(Xy),w(Wy),w(v_),w(Qy),w(y5),f&&t(hUe),f&&t(nd),w(Uy),f&&t(pUe),f&&t(Ro),w(Hy),w(Yy),w($5),w(Ky),w(w1),f&&t(_Ue),f&&t(id),w(Zy),f&&t(uUe),f&&t(Po),w(e9),w(r9),w(L1),w(t9),w(p2),f&&t(bUe),f&&t(fd),w(a9),f&&t(vUe),f&&t(Bo),w(n9),w(l9),w(u2),w(i9),w(tb),f&&t(FUe),f&&t(hd),w(d9),f&&t(TUe),f&&t(Io),w(c9),w(m9),w(nb),w(g9),w(Ab),f&&t(MUe),f&&t(ud),w(h9),f&&t(EUe),f&&t(No),w(p9),w(u9),w(yb),w(b9),w(yv),f&&t(CUe),f&&t(Fd),w(v9),f&&t(wUe),f&&t(qo),w(F9),w(M9),w($v),w(E9),w(dF),f&&t(AUe),f&&t(Ed),w(C9),f&&t(LUe),f&&t(jo),w(w9),w(L9),w(fF),w(y9),w(vF),f&&t(yUe),f&&t(Ad),w(x9),f&&t(xUe),f&&t(Go),w($9),w(S9),w(TF),w(R9),w(sT),f&&t($Ue),f&&t(xd),w(P9),f&&t(kUe),f&&t(Oo),w(B9),w(N9),w(iT),w(q9),w(ZT),f&&t(SUe),f&&t(Sd),w(j9),f&&t(RUe),f&&t(Vo),w(D9),w(O9),w(o8),w(V9),w(a8),f&&t(PUe),f&&t(Bd),w(X9),f&&t(BUe),f&&t(Xo),w(z9),w(Q9),w(s8),w(U9),w(M8),f&&t(IUe),f&&t(qd),w(H9),f&&t(NUe),f&&t(zo),w(J9),w(K9),w(C8),w(Z9),w(L8),f&&t(qUe),f&&t(Gd),w(ex),f&&t(jUe),f&&t(Wo),w(ox),w(tx),w(x8),w(ax),w(S8),f&&t(DUe),f&&t(Xd),w(nx),f&&t(GUe),f&&t(Qo),w(sx),w(ix),w(P8),w(dx),w(N8),f&&t(OUe),f&&t(Qd),w(cx),f&&t(VUe),f&&t(Uo),w(fx),w(gx),w(j8),w(hx),w(J8),f&&t(XUe),f&&t(Jd),w(px),f&&t(zUe),f&&t(Ho),w(_x),w(bx),w(K8),w(vx),w(nM),f&&t(WUe),f&&t(Zd),w(Fx),f&&t(QUe),f&&t(Jo),w(Tx),w(Ex),w(lM),w(Cx),w(vM),f&&t(UUe),f&&t(rc),w(wx),f&&t(HUe),f&&t(Yo),w(Ax),w(yx),w(TM),w(xx),w(wM),f&&t(JUe),f&&t(nc),w(kx),f&&t(YUe),f&&t(Ko),w(Sx),w(Px),w(LM),w(Bx),w(PM),f&&t(KUe),f&&t(ic),w(Ix),f&&t(ZUe),f&&t(Zo),w(Nx),w(jx),w(IM),w(Dx),w(OM),f&&t(eHe),f&&t(fc),w(Gx),f&&t(oHe),f&&t(er),w(Ox),w(Xx),w(XM),w(zx),w(UM),f&&t(rHe),f&&t(hc),w(Qx),f&&t(tHe),f&&t(or),w(Ux),w(Jx),w(JM),w(Yx),w(ZM),f&&t(aHe),f&&t(uc),w(Kx),f&&t(nHe),f&&t(rr),w(Zx),w(o$),w(oE),w(r$),w(iE),f&&t(sHe),f&&t(Fc),w(t$),f&&t(lHe),f&&t(tr),w(a$),w(s$),w(cE),w(l$),w(gE),f&&t(iHe),f&&t(Ec),w(i$),f&&t(dHe),f&&t(ar),w(d$),w(f$),w(pE),w(m$),w(g4),f&&t(cHe),f&&t(Ac),w(g$),f&&t(fHe),f&&t(nr),w(h$),w(_$),w(p4),w(u$),w(j4),f&&t(mHe),f&&t(xc),w(b$),f&&t(gHe),f&&t(sr),w(v$),w(T$),w(G4),w(M$),w(oC),f&&t(hHe),f&&t(Sc),w(E$),f&&t(pHe),f&&t(lr),w(C$),w(A$),w(tC),w(L$),w(mC),f&&t(_He),f&&t(Bc),w(y$),f&&t(uHe),f&&t(ir),w(x$),w(k$),w(hC),w(S$),w(bC),f&&t(bHe),f&&t(jc),w(R$),f&&t(vHe),f&&t(dr),w(P$),w(I$),w(FC),w(N$),w(GC),f&&t(FHe),f&&t(Oc),w(q$),f&&t(THe),f&&t(cr),w(j$),w(G$),w(VC),w(O$),w(e3),f&&t(MHe),f&&t(zc),w(V$),f&&t(EHe),f&&t(fr),w(X$),w(W$),w(r3),w(Q$),w(x3),f&&t(CHe),f&&t(Uc),w(U$),f&&t(wHe),f&&t(mr),w(H$),w(Y$),w(k3),w(K$),w(H3),f&&t(AHe),f&&t(Yc),w(Z$),f&&t(LHe),f&&t(gr),w(ek),w(rk),w(Y3),w(tk),w(e0),f&&t(yHe),f&&t(ef),w(nk),f&&t(xHe),f&&t(hr),w(sk),w(ik),w(r0),w(dk),w(a0),f&&t($He),f&&t(tf),w(ck),f&&t(kHe),f&&t(pr),w(fk),w(gk),w(s0),w(hk),w(L0),f&&t(SHe),f&&t(sf),w(pk),f&&t(RHe),f&&t(_r),w(_k),w(bk),w(x0),w(vk),w(J0),f&&t(PHe),f&&t(cf),w(Fk),f&&t(BHe),f&&t(ur),w(Tk),w(Ek),w(K0),w(Ck),w(ew),f&&t(IHe),f&&t(gf),w(wk),f&&t(NHe),f&&t(br),w(Ak),w(yk),w(rw),w(xk),w(aw),f&&t(qHe),f&&t(_f),w($k),f&&t(jHe),f&&t(vr),w(kk),w(Rk),w(sw),w(Pk),w(Pw),f&&t(DHe),f&&t(vf),w(Bk),f&&t(GHe),f&&t(Fr),w(Ik),w(qk),w(Iw),w(jk),w(Qw),f&&t(OHe),f&&t(Mf),w(Dk),f&&t(VHe),f&&t(Tr),w(Gk),w(Vk),w(Hw),w(Xk),w(d6),f&&t(XHe),f&&t(wf),w(zk),f&&t(zHe),f&&t(Mr),w(Wk),w(Uk),w(f6),w(Hk),w(M6),f&&t(WHe),f&&t(yf),w(Jk),f&&t(QHe),f&&t(Er),w(Yk),w(Zk),w(C6),w(eS),w(B6),f&&t(UHe),f&&t(kf),w(oS),f&&t(HHe),f&&t(Cr),w(rS),w(aS),w(N6),w(nS),w(U6),f&&t(JHe),f&&t(Pf),w(sS),f&&t(YHe),f&&t(wr),w(lS),w(dS),w(J6),w(cS),w(lA),f&&t(KHe),f&&t(Nf),w(fS),f&&t(ZHe),f&&t(Ar),w(mS),w(hS),w(dA),w(pS),w(bA),f&&t(eJe),f&&t(Df),w(_S),f&&t(oJe),f&&t(Lr),w(uS),w(vS),w(FA),w(FS),w(xA),f&&t(rJe),f&&t(Vf),w(TS),f&&t(tJe),f&&t(yr),w(MS),w(CS),w(kA),w(wS),w(RA),f&&t(aJe),f&&t(Wf),w(AS),f&&t(nJe),f&&t(xr),w(LS),w(xS),w(BA),w($S),w(qA),f&&t(sJe),f&&t(Hf),w(SS),f&&t(lJe),f&&t($r),w(RS),w(BS),w(DA),w(IS),w(OA)}}}const Tna={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Mna($){return _ta(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xna extends mta{constructor(g){super();gta(this,g,Mna,Fna,hta,{})}}export{xna as default,Tna as metadata};
