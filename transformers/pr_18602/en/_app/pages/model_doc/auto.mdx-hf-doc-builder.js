import{S as Voa,i as Xoa,s as zoa,e as a,k as l,w as F,t as o,M as Woa,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Qoa,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as jct}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Uoa($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,ny,om,Oe,Qe,zi,Xn,sy,zn,Wn,ly,Wi,Qn,iy,Qi,rm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),em=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),ny=o(")."),om=l(),Oe=a("p"),Qe=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),sy=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),ly=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),iy=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rm=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var ZR=s(p);m=r(ZR,"NewModelConfig"),ZR.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var eP=s(Oi);em=r(eP,"model_type"),eP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var oP=s(Vi);Xi=r(oP,'"new-model"'),oP.forEach(t),ny=r(Ae,")."),Ae.forEach(t),om=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),sy=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var rP=s(zn);Wn=r(rP,"PreTrainedModel"),rP.forEach(t),ly=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tm=s(Wi);Qn=r(tm,"config_class"),tm.forEach(t),iy=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var tP=s(Qi);rm=r(tP,"NewModelConfig"),tP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,em),e(g,ft),e(g,Vi),e(Vi,Xi),e(g,ny),b(Ue,om,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,zi),e(zi,Xn),e(Oe,sy),e(Oe,zn),e(zn,Wn),e(Oe,ly),e(Oe,Wi),e(Wi,Qn),e(Oe,iy),e(Oe,Qi),e(Qi,rm),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(om),Ue&&t(Oe)}}}function Hoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Joa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yoa($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Koa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zoa($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function era($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ora($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ara($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ira($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _ra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ura($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Era($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ara($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ira($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ora($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ura($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,ny,om,Oe,Qe,zi,Xn,sy,zn,Wn,ly,Wi,Qn,iy,Qi,rm,ja,Ue,Ae,ZR,Ui,eP,oP,Lo,Da,rP,tm,tP,UYe,CQe,Hi,am,yse,dy,HYe,xse,JYe,wQe,Un,YYe,$se,KYe,ZYe,kse,eKe,oKe,AQe,cy,LQe,aP,rKe,yQe,nm,xQe,Ji,sm,Sse,fy,tKe,Rse,aKe,$Qe,yo,my,nKe,gy,sKe,nP,lKe,iKe,dKe,hy,cKe,Pse,fKe,mKe,gKe,kr,py,hKe,Bse,pKe,_Ke,Yi,uKe,Ise,bKe,vKe,Nse,FKe,TKe,MKe,A,lm,qse,EKe,CKe,sP,wKe,AKe,LKe,im,jse,yKe,xKe,lP,$Ke,kKe,SKe,dm,Dse,RKe,PKe,iP,BKe,IKe,NKe,cm,Gse,qKe,jKe,dP,DKe,GKe,OKe,fm,Ose,VKe,XKe,cP,zKe,WKe,QKe,mm,Vse,UKe,HKe,fP,JKe,YKe,KKe,gm,Xse,ZKe,eZe,mP,oZe,rZe,tZe,hm,zse,aZe,nZe,gP,sZe,lZe,iZe,pm,Wse,dZe,cZe,hP,fZe,mZe,gZe,_m,Qse,hZe,pZe,pP,_Ze,uZe,bZe,um,Use,vZe,FZe,_P,TZe,MZe,EZe,bm,Hse,CZe,wZe,uP,AZe,LZe,yZe,vm,Jse,xZe,$Ze,bP,kZe,SZe,RZe,Fm,Yse,PZe,BZe,vP,IZe,NZe,qZe,Tm,Kse,jZe,DZe,FP,GZe,OZe,VZe,Mm,Zse,XZe,zZe,TP,WZe,QZe,UZe,Em,ele,HZe,JZe,MP,YZe,KZe,ZZe,Cm,ole,eeo,oeo,EP,reo,teo,aeo,wm,rle,neo,seo,CP,leo,ieo,deo,Am,tle,ceo,feo,wP,meo,geo,heo,Lm,ale,peo,_eo,AP,ueo,beo,veo,ym,nle,Feo,Teo,LP,Meo,Eeo,Ceo,xm,sle,weo,Aeo,yP,Leo,yeo,xeo,$m,lle,$eo,keo,xP,Seo,Reo,Peo,km,ile,Beo,Ieo,$P,Neo,qeo,jeo,Sm,dle,Deo,Geo,kP,Oeo,Veo,Xeo,Rm,cle,zeo,Weo,SP,Qeo,Ueo,Heo,Pm,fle,Jeo,Yeo,RP,Keo,Zeo,eoo,Bm,mle,ooo,roo,PP,too,aoo,noo,Im,gle,soo,loo,BP,ioo,doo,coo,Nm,hle,foo,moo,IP,goo,hoo,poo,qm,ple,_oo,uoo,NP,boo,voo,Foo,jm,_le,Too,Moo,qP,Eoo,Coo,woo,Dm,ule,Aoo,Loo,jP,yoo,xoo,$oo,Gm,ble,koo,Soo,DP,Roo,Poo,Boo,Om,vle,Ioo,Noo,GP,qoo,joo,Doo,Vm,Fle,Goo,Ooo,OP,Voo,Xoo,zoo,Xm,Tle,Woo,Qoo,VP,Uoo,Hoo,Joo,zm,Mle,Yoo,Koo,XP,Zoo,ero,oro,Wm,Ele,rro,tro,zP,aro,nro,sro,Qm,Cle,lro,iro,WP,dro,cro,fro,Um,wle,mro,gro,QP,hro,pro,_ro,Hm,Ale,uro,bro,UP,vro,Fro,Tro,Jm,Lle,Mro,Ero,HP,Cro,wro,Aro,Ym,yle,Lro,yro,JP,xro,$ro,kro,Km,xle,Sro,Rro,YP,Pro,Bro,Iro,Zm,$le,Nro,qro,KP,jro,Dro,Gro,eg,kle,Oro,Vro,ZP,Xro,zro,Wro,og,Sle,Qro,Uro,eB,Hro,Jro,Yro,rg,Rle,Kro,Zro,oB,eto,oto,rto,tg,Ple,tto,ato,rB,nto,sto,lto,ag,Ble,ito,dto,tB,cto,fto,mto,ng,Ile,gto,hto,aB,pto,_to,uto,sg,Nle,bto,vto,nB,Fto,Tto,Mto,lg,qle,Eto,Cto,sB,wto,Ato,Lto,ig,jle,yto,xto,lB,$to,kto,Sto,dg,Dle,Rto,Pto,iB,Bto,Ito,Nto,cg,Gle,qto,jto,dB,Dto,Gto,Oto,fg,Ole,Vto,Xto,cB,zto,Wto,Qto,mg,Vle,Uto,Hto,fB,Jto,Yto,Kto,gg,Xle,Zto,eao,mB,oao,rao,tao,hg,zle,aao,nao,gB,sao,lao,iao,pg,Wle,dao,cao,hB,fao,mao,gao,_g,Qle,hao,pao,pB,_ao,uao,bao,ug,Ule,vao,Fao,_B,Tao,Mao,Eao,bg,Hle,Cao,wao,uB,Aao,Lao,yao,vg,Jle,xao,$ao,bB,kao,Sao,Rao,Fg,Yle,Pao,Bao,vB,Iao,Nao,qao,Tg,Kle,jao,Dao,FB,Gao,Oao,Vao,Mg,Zle,Xao,zao,TB,Wao,Qao,Uao,Eg,eie,Hao,Jao,MB,Yao,Kao,Zao,Cg,oie,eno,ono,EB,rno,tno,ano,wg,rie,nno,sno,CB,lno,ino,dno,Ag,tie,cno,fno,wB,mno,gno,hno,Lg,aie,pno,_no,AB,uno,bno,vno,yg,nie,Fno,Tno,LB,Mno,Eno,Cno,xg,sie,wno,Ano,yB,Lno,yno,xno,$g,lie,$no,kno,xB,Sno,Rno,Pno,kg,iie,Bno,Ino,$B,Nno,qno,jno,Sg,die,Dno,Gno,kB,Ono,Vno,Xno,Rg,cie,zno,Wno,SB,Qno,Uno,Hno,Pg,fie,Jno,Yno,RB,Kno,Zno,eso,Bg,mie,oso,rso,PB,tso,aso,nso,Ig,gie,sso,lso,BB,iso,dso,cso,Ng,hie,fso,mso,IB,gso,hso,pso,qg,pie,_so,uso,NB,bso,vso,Fso,jg,_ie,Tso,Mso,qB,Eso,Cso,wso,Dg,uie,Aso,Lso,jB,yso,xso,$so,Gg,bie,kso,Sso,DB,Rso,Pso,Bso,Og,vie,Iso,Nso,GB,qso,jso,Dso,Vg,Fie,Gso,Oso,OB,Vso,Xso,zso,Xg,Tie,Wso,Qso,VB,Uso,Hso,Jso,zg,Mie,Yso,Kso,XB,Zso,elo,olo,Wg,Eie,rlo,tlo,zB,alo,nlo,slo,Qg,Cie,llo,ilo,WB,dlo,clo,flo,Ug,wie,mlo,glo,QB,hlo,plo,_lo,Hg,Aie,ulo,blo,UB,vlo,Flo,Tlo,Jg,Lie,Mlo,Elo,HB,Clo,wlo,Alo,Yg,yie,Llo,ylo,JB,xlo,$lo,klo,Kg,xie,Slo,Rlo,YB,Plo,Blo,Ilo,Zg,$ie,Nlo,qlo,KB,jlo,Dlo,Glo,eh,kie,Olo,Vlo,ZB,Xlo,zlo,Wlo,oh,Sie,Qlo,Ulo,eI,Hlo,Jlo,Ylo,rh,Rie,Klo,Zlo,oI,eio,oio,rio,th,Pie,tio,aio,rI,nio,sio,lio,ah,Bie,iio,dio,tI,cio,fio,mio,nh,Iie,gio,hio,aI,pio,_io,uio,sh,Nie,bio,vio,nI,Fio,Tio,Mio,lh,qie,Eio,Cio,sI,wio,Aio,Lio,ih,jie,yio,xio,lI,$io,kio,Sio,dh,Die,Rio,Pio,iI,Bio,Iio,Nio,ch,Gie,qio,jio,dI,Dio,Gio,Oio,fh,Oie,Vio,Xio,cI,zio,Wio,Qio,mh,Vie,Uio,Hio,fI,Jio,Yio,Kio,gh,Xie,Zio,edo,mI,odo,rdo,tdo,hh,zie,ado,ndo,gI,sdo,ldo,ido,ph,Wie,ddo,cdo,hI,fdo,mdo,gdo,_h,Qie,hdo,pdo,pI,_do,udo,bdo,uh,Uie,vdo,Fdo,_I,Tdo,Mdo,Edo,bh,Hie,Cdo,wdo,uI,Ado,Ldo,ydo,vh,Jie,xdo,$do,bI,kdo,Sdo,Rdo,Fh,Pdo,Th,_y,Bdo,Yie,Ido,kQe,Ki,Mh,Kie,uy,Ndo,Zie,qdo,SQe,xo,by,jdo,vy,Ddo,vI,Gdo,Odo,Vdo,Fy,Xdo,ede,zdo,Wdo,Qdo,Sr,Ty,Udo,ode,Hdo,Jdo,Ga,Ydo,rde,Kdo,Zdo,tde,eco,oco,ade,rco,tco,aco,k,Hn,nde,nco,sco,FI,lco,ico,TI,dco,cco,fco,Jn,sde,mco,gco,MI,hco,pco,EI,_co,uco,bco,Yn,lde,vco,Fco,CI,Tco,Mco,wI,Eco,Cco,wco,Eh,ide,Aco,Lco,AI,yco,xco,$co,Kn,dde,kco,Sco,LI,Rco,Pco,yI,Bco,Ico,Nco,Ch,cde,qco,jco,xI,Dco,Gco,Oco,wh,fde,Vco,Xco,$I,zco,Wco,Qco,Ah,mde,Uco,Hco,kI,Jco,Yco,Kco,Zn,gde,Zco,efo,SI,ofo,rfo,RI,tfo,afo,nfo,es,hde,sfo,lfo,PI,ifo,dfo,BI,cfo,ffo,mfo,os,pde,gfo,hfo,II,pfo,_fo,NI,ufo,bfo,vfo,Lh,_de,Ffo,Tfo,qI,Mfo,Efo,Cfo,yh,ude,wfo,Afo,jI,Lfo,yfo,xfo,xh,bde,$fo,kfo,DI,Sfo,Rfo,Pfo,rs,vde,Bfo,Ifo,GI,Nfo,qfo,OI,jfo,Dfo,Gfo,$h,Fde,Ofo,Vfo,VI,Xfo,zfo,Wfo,ts,Tde,Qfo,Ufo,XI,Hfo,Jfo,zI,Yfo,Kfo,Zfo,as,Mde,emo,omo,WI,rmo,tmo,QI,amo,nmo,smo,ns,Ede,lmo,imo,UI,dmo,cmo,HI,fmo,mmo,gmo,ss,Cde,hmo,pmo,JI,_mo,umo,YI,bmo,vmo,Fmo,kh,wde,Tmo,Mmo,KI,Emo,Cmo,wmo,ls,Ade,Amo,Lmo,ZI,ymo,xmo,eN,$mo,kmo,Smo,is,Lde,Rmo,Pmo,oN,Bmo,Imo,rN,Nmo,qmo,jmo,ds,yde,Dmo,Gmo,tN,Omo,Vmo,aN,Xmo,zmo,Wmo,cs,xde,Qmo,Umo,nN,Hmo,Jmo,sN,Ymo,Kmo,Zmo,fs,$de,ego,ogo,lN,rgo,tgo,iN,ago,ngo,sgo,ms,kde,lgo,igo,dN,dgo,cgo,cN,fgo,mgo,ggo,Sh,Sde,hgo,pgo,fN,_go,ugo,bgo,gs,Rde,vgo,Fgo,mN,Tgo,Mgo,gN,Ego,Cgo,wgo,Rh,Pde,Ago,Lgo,hN,ygo,xgo,$go,hs,Bde,kgo,Sgo,pN,Rgo,Pgo,_N,Bgo,Igo,Ngo,ps,Ide,qgo,jgo,uN,Dgo,Ggo,bN,Ogo,Vgo,Xgo,_s,Nde,zgo,Wgo,vN,Qgo,Ugo,FN,Hgo,Jgo,Ygo,Ph,qde,Kgo,Zgo,TN,eho,oho,rho,us,jde,tho,aho,MN,nho,sho,EN,lho,iho,dho,bs,Dde,cho,fho,CN,mho,gho,wN,hho,pho,_ho,vs,Gde,uho,bho,AN,vho,Fho,LN,Tho,Mho,Eho,Bh,Ode,Cho,who,yN,Aho,Lho,yho,Fs,Vde,xho,$ho,xN,kho,Sho,$N,Rho,Pho,Bho,Ts,Xde,Iho,Nho,kN,qho,jho,SN,Dho,Gho,Oho,Ms,zde,Vho,Xho,RN,zho,Who,PN,Qho,Uho,Hho,Es,Wde,Jho,Yho,BN,Kho,Zho,IN,epo,opo,rpo,Cs,Qde,tpo,apo,NN,npo,spo,qN,lpo,ipo,dpo,ws,Ude,cpo,fpo,jN,mpo,gpo,DN,hpo,ppo,_po,As,Hde,upo,bpo,GN,vpo,Fpo,ON,Tpo,Mpo,Epo,Ls,Jde,Cpo,wpo,VN,Apo,Lpo,XN,ypo,xpo,$po,Ih,Yde,kpo,Spo,zN,Rpo,Ppo,Bpo,ys,Kde,Ipo,Npo,WN,qpo,jpo,QN,Dpo,Gpo,Opo,Nh,Zde,Vpo,Xpo,UN,zpo,Wpo,Qpo,qh,ece,Upo,Hpo,HN,Jpo,Ypo,Kpo,xs,oce,Zpo,e_o,JN,o_o,r_o,YN,t_o,a_o,n_o,$s,rce,s_o,l_o,KN,i_o,d_o,ZN,c_o,f_o,m_o,ks,tce,g_o,h_o,eq,p_o,__o,oq,u_o,b_o,v_o,jh,ace,F_o,T_o,rq,M_o,E_o,C_o,Ss,nce,w_o,A_o,tq,L_o,y_o,aq,x_o,$_o,k_o,Rs,sce,S_o,R_o,nq,P_o,B_o,sq,I_o,N_o,q_o,Ps,lce,j_o,D_o,lq,G_o,O_o,iq,V_o,X_o,z_o,Bs,ice,W_o,Q_o,dq,U_o,H_o,cq,J_o,Y_o,K_o,Is,dce,Z_o,euo,fq,ouo,ruo,mq,tuo,auo,nuo,Ns,cce,suo,luo,gq,iuo,duo,hq,cuo,fuo,muo,qs,fce,guo,huo,pq,puo,_uo,_q,uuo,buo,vuo,js,mce,Fuo,Tuo,uq,Muo,Euo,bq,Cuo,wuo,Auo,Dh,gce,Luo,yuo,vq,xuo,$uo,kuo,Ds,hce,Suo,Ruo,Fq,Puo,Buo,Tq,Iuo,Nuo,quo,Gs,pce,juo,Duo,Mq,Guo,Ouo,Eq,Vuo,Xuo,zuo,Gh,_ce,Wuo,Quo,Cq,Uuo,Huo,Juo,Oh,uce,Yuo,Kuo,wq,Zuo,e2o,o2o,Vh,bce,r2o,t2o,Aq,a2o,n2o,s2o,Xh,vce,l2o,i2o,Lq,d2o,c2o,f2o,Os,Fce,m2o,g2o,yq,h2o,p2o,xq,_2o,u2o,b2o,zh,Tce,v2o,F2o,$q,T2o,M2o,E2o,Vs,Mce,C2o,w2o,kq,A2o,L2o,Sq,y2o,x2o,$2o,Xs,Ece,k2o,S2o,Rq,R2o,P2o,Pq,B2o,I2o,N2o,zs,Cce,q2o,j2o,Bq,D2o,G2o,Iq,O2o,V2o,X2o,Ws,wce,z2o,W2o,Nq,Q2o,U2o,qq,H2o,J2o,Y2o,Qs,Ace,K2o,Z2o,jq,e1o,o1o,Dq,r1o,t1o,a1o,Us,Lce,n1o,s1o,Gq,l1o,i1o,Oq,d1o,c1o,f1o,Wh,yce,m1o,g1o,Vq,h1o,p1o,_1o,Qh,xce,u1o,b1o,Xq,v1o,F1o,T1o,Hs,$ce,M1o,E1o,zq,C1o,w1o,Wq,A1o,L1o,y1o,Js,kce,x1o,$1o,Qq,k1o,S1o,Uq,R1o,P1o,B1o,Ys,Sce,I1o,N1o,Hq,q1o,j1o,Jq,D1o,G1o,O1o,Uh,Rce,V1o,X1o,Yq,z1o,W1o,Q1o,Hh,Pce,U1o,H1o,Kq,J1o,Y1o,K1o,Jh,Bce,Z1o,ebo,Zq,obo,rbo,tbo,Ks,Ice,abo,nbo,ej,sbo,lbo,oj,ibo,dbo,cbo,Zs,Nce,fbo,mbo,rj,gbo,hbo,tj,pbo,_bo,ubo,Yh,qce,bbo,vbo,aj,Fbo,Tbo,Mbo,Kh,jce,Ebo,Cbo,nj,wbo,Abo,Lbo,Zh,Dce,ybo,xbo,sj,$bo,kbo,Sbo,el,Gce,Rbo,Pbo,lj,Bbo,Ibo,ij,Nbo,qbo,jbo,ep,Oce,Dbo,Gbo,dj,Obo,Vbo,Xbo,op,Vce,zbo,Wbo,cj,Qbo,Ubo,Hbo,ol,Xce,Jbo,Ybo,fj,Kbo,Zbo,mj,evo,ovo,rvo,rl,zce,tvo,avo,gj,nvo,svo,hj,lvo,ivo,dvo,tl,Wce,cvo,fvo,pj,mvo,gvo,_j,hvo,pvo,_vo,al,Qce,uvo,bvo,uj,vvo,Fvo,bj,Tvo,Mvo,Evo,rp,Cvo,tp,My,wvo,Uce,Avo,RQe,Zi,ap,Hce,Ey,Lvo,Jce,yvo,PQe,$o,Cy,xvo,wy,$vo,vj,kvo,Svo,Rvo,Ay,Pvo,Yce,Bvo,Ivo,Nvo,He,Ly,qvo,Kce,jvo,Dvo,Oa,Gvo,Zce,Ovo,Vvo,efe,Xvo,zvo,ofe,Wvo,Qvo,Uvo,U,np,rfe,Hvo,Jvo,Fj,Yvo,Kvo,Zvo,sp,tfe,e0o,o0o,Tj,r0o,t0o,a0o,lp,afe,n0o,s0o,Mj,l0o,i0o,d0o,ip,nfe,c0o,f0o,Ej,m0o,g0o,h0o,dp,sfe,p0o,_0o,Cj,u0o,b0o,v0o,cp,lfe,F0o,T0o,wj,M0o,E0o,C0o,fp,ife,w0o,A0o,Aj,L0o,y0o,x0o,mp,dfe,$0o,k0o,Lj,S0o,R0o,P0o,gp,cfe,B0o,I0o,yj,N0o,q0o,j0o,hp,ffe,D0o,G0o,xj,O0o,V0o,X0o,pp,mfe,z0o,W0o,$j,Q0o,U0o,H0o,_p,gfe,J0o,Y0o,kj,K0o,Z0o,e6o,up,hfe,o6o,r6o,Sj,t6o,a6o,n6o,bp,pfe,s6o,l6o,Rj,i6o,d6o,c6o,vp,_fe,f6o,m6o,Pj,g6o,h6o,p6o,Fp,ufe,_6o,u6o,Bj,b6o,v6o,F6o,Tp,bfe,T6o,M6o,Ij,E6o,C6o,w6o,Mp,vfe,A6o,L6o,Nj,y6o,x6o,$6o,Ep,Ffe,k6o,S6o,qj,R6o,P6o,B6o,Cp,Tfe,I6o,N6o,jj,q6o,j6o,D6o,wp,Mfe,G6o,O6o,Dj,V6o,X6o,z6o,Ap,Efe,W6o,Q6o,Gj,U6o,H6o,J6o,Lp,Cfe,Y6o,K6o,Oj,Z6o,eFo,oFo,yp,wfe,rFo,tFo,Vj,aFo,nFo,sFo,xp,Afe,lFo,iFo,Xj,dFo,cFo,fFo,$p,Lfe,mFo,gFo,zj,hFo,pFo,_Fo,kp,yfe,uFo,bFo,Wj,vFo,FFo,TFo,Sp,xfe,MFo,EFo,Qj,CFo,wFo,AFo,Rp,$fe,LFo,yFo,Uj,xFo,$Fo,kFo,Pp,kfe,SFo,RFo,Hj,PFo,BFo,IFo,Bp,Sfe,NFo,qFo,Jj,jFo,DFo,GFo,Ip,Rfe,OFo,VFo,Yj,XFo,zFo,WFo,Np,Pfe,QFo,UFo,Kj,HFo,JFo,YFo,qp,Bfe,KFo,ZFo,Zj,eTo,oTo,rTo,jp,Ife,tTo,aTo,eD,nTo,sTo,lTo,Dp,Nfe,iTo,dTo,oD,cTo,fTo,mTo,Gp,qfe,gTo,hTo,rD,pTo,_To,uTo,Op,bTo,Vp,vTo,Xp,yy,FTo,jfe,TTo,BQe,ed,zp,Dfe,xy,MTo,Gfe,ETo,IQe,ko,$y,CTo,ky,wTo,tD,ATo,LTo,yTo,Sy,xTo,Ofe,$To,kTo,STo,Je,Ry,RTo,Vfe,PTo,BTo,od,ITo,Xfe,NTo,qTo,zfe,jTo,DTo,GTo,fe,Wp,Wfe,OTo,VTo,aD,XTo,zTo,WTo,Qp,Qfe,QTo,UTo,nD,HTo,JTo,YTo,Up,Ufe,KTo,ZTo,sD,e8o,o8o,r8o,Hp,Hfe,t8o,a8o,lD,n8o,s8o,l8o,Jp,Jfe,i8o,d8o,iD,c8o,f8o,m8o,Yp,Yfe,g8o,h8o,dD,p8o,_8o,u8o,Kp,Kfe,b8o,v8o,cD,F8o,T8o,M8o,Zp,Zfe,E8o,C8o,fD,w8o,A8o,L8o,e_,eme,y8o,x8o,mD,$8o,k8o,S8o,o_,ome,R8o,P8o,gD,B8o,I8o,N8o,r_,rme,q8o,j8o,hD,D8o,G8o,O8o,t_,tme,V8o,X8o,pD,z8o,W8o,Q8o,a_,ame,U8o,H8o,_D,J8o,Y8o,K8o,n_,nme,Z8o,eMo,uD,oMo,rMo,tMo,s_,sme,aMo,nMo,bD,sMo,lMo,iMo,l_,lme,dMo,cMo,vD,fMo,mMo,gMo,i_,ime,hMo,pMo,FD,_Mo,uMo,bMo,d_,dme,vMo,FMo,TD,TMo,MMo,EMo,c_,cme,CMo,wMo,MD,AMo,LMo,yMo,f_,xMo,m_,$Mo,g_,Py,kMo,fme,SMo,NQe,rd,h_,mme,By,RMo,gme,PMo,qQe,So,Iy,BMo,td,IMo,ED,NMo,qMo,CD,jMo,DMo,GMo,Ny,OMo,hme,VMo,XMo,zMo,mt,qy,WMo,pme,QMo,UMo,ad,HMo,_me,JMo,YMo,wD,KMo,ZMo,eEo,p_,oEo,Ye,jy,rEo,ume,tEo,aEo,Va,nEo,bme,sEo,lEo,vme,iEo,dEo,Fme,cEo,fEo,mEo,y,__,Tme,gEo,hEo,AD,pEo,_Eo,uEo,u_,Mme,bEo,vEo,LD,FEo,TEo,MEo,b_,Eme,EEo,CEo,yD,wEo,AEo,LEo,v_,Cme,yEo,xEo,xD,$Eo,kEo,SEo,F_,wme,REo,PEo,$D,BEo,IEo,NEo,T_,Ame,qEo,jEo,kD,DEo,GEo,OEo,M_,Lme,VEo,XEo,SD,zEo,WEo,QEo,E_,yme,UEo,HEo,RD,JEo,YEo,KEo,C_,xme,ZEo,e4o,PD,o4o,r4o,t4o,w_,$me,a4o,n4o,BD,s4o,l4o,i4o,A_,kme,d4o,c4o,ID,f4o,m4o,g4o,L_,Sme,h4o,p4o,ND,_4o,u4o,b4o,y_,Rme,v4o,F4o,qD,T4o,M4o,E4o,x_,Pme,C4o,w4o,jD,A4o,L4o,y4o,$_,Bme,x4o,$4o,DD,k4o,S4o,R4o,k_,Ime,P4o,B4o,GD,I4o,N4o,q4o,S_,Nme,j4o,D4o,OD,G4o,O4o,V4o,R_,qme,X4o,z4o,VD,W4o,Q4o,U4o,P_,jme,H4o,J4o,XD,Y4o,K4o,Z4o,B_,Dme,eCo,oCo,zD,rCo,tCo,aCo,I_,Gme,nCo,sCo,WD,lCo,iCo,dCo,N_,Ome,cCo,fCo,QD,mCo,gCo,hCo,q_,Vme,pCo,_Co,UD,uCo,bCo,vCo,j_,Xme,FCo,TCo,HD,MCo,ECo,CCo,D_,zme,wCo,ACo,JD,LCo,yCo,xCo,G_,Wme,$Co,kCo,YD,SCo,RCo,PCo,O_,Qme,BCo,ICo,KD,NCo,qCo,jCo,V_,Ume,DCo,GCo,ZD,OCo,VCo,XCo,X_,Hme,zCo,WCo,eG,QCo,UCo,HCo,z_,Jme,JCo,YCo,oG,KCo,ZCo,e3o,W_,Yme,o3o,r3o,rG,t3o,a3o,n3o,Q_,Kme,s3o,l3o,tG,i3o,d3o,c3o,U_,Zme,f3o,m3o,aG,g3o,h3o,p3o,H_,ege,_3o,u3o,nG,b3o,v3o,F3o,nl,oge,T3o,M3o,sG,E3o,C3o,lG,w3o,A3o,L3o,J_,rge,y3o,x3o,iG,$3o,k3o,S3o,Y_,tge,R3o,P3o,dG,B3o,I3o,N3o,K_,age,q3o,j3o,cG,D3o,G3o,O3o,Z_,nge,V3o,X3o,fG,z3o,W3o,Q3o,eu,sge,U3o,H3o,mG,J3o,Y3o,K3o,ou,lge,Z3o,e5o,gG,o5o,r5o,t5o,ru,ige,a5o,n5o,hG,s5o,l5o,i5o,tu,dge,d5o,c5o,pG,f5o,m5o,g5o,au,cge,h5o,p5o,_G,_5o,u5o,b5o,nu,fge,v5o,F5o,uG,T5o,M5o,E5o,su,mge,C5o,w5o,bG,A5o,L5o,y5o,lu,gge,x5o,$5o,vG,k5o,S5o,R5o,iu,hge,P5o,B5o,FG,I5o,N5o,q5o,du,pge,j5o,D5o,TG,G5o,O5o,V5o,cu,_ge,X5o,z5o,MG,W5o,Q5o,U5o,fu,uge,H5o,J5o,EG,Y5o,K5o,Z5o,mu,bge,ewo,owo,CG,rwo,two,awo,gu,vge,nwo,swo,wG,lwo,iwo,dwo,hu,Fge,cwo,fwo,AG,mwo,gwo,hwo,pu,Tge,pwo,_wo,LG,uwo,bwo,vwo,_u,Mge,Fwo,Two,yG,Mwo,Ewo,Cwo,uu,Ege,wwo,Awo,xG,Lwo,ywo,xwo,bu,Cge,$wo,kwo,$G,Swo,Rwo,Pwo,vu,wge,Bwo,Iwo,kG,Nwo,qwo,jwo,Fu,Age,Dwo,Gwo,SG,Owo,Vwo,Xwo,Tu,Lge,zwo,Wwo,RG,Qwo,Uwo,Hwo,Mu,yge,Jwo,Ywo,PG,Kwo,Zwo,eAo,Eu,xge,oAo,rAo,BG,tAo,aAo,nAo,Cu,$ge,sAo,lAo,IG,iAo,dAo,cAo,wu,kge,fAo,mAo,NG,gAo,hAo,pAo,Au,Sge,_Ao,uAo,qG,bAo,vAo,FAo,Lu,Rge,TAo,MAo,jG,EAo,CAo,wAo,yu,Pge,AAo,LAo,DG,yAo,xAo,$Ao,xu,Bge,kAo,SAo,GG,RAo,PAo,BAo,$u,Ige,IAo,NAo,OG,qAo,jAo,DAo,ku,Nge,GAo,OAo,VG,VAo,XAo,zAo,Su,qge,WAo,QAo,XG,UAo,HAo,JAo,Ru,jge,YAo,KAo,zG,ZAo,e7o,o7o,Pu,Dge,r7o,t7o,WG,a7o,n7o,s7o,Bu,Gge,l7o,i7o,QG,d7o,c7o,f7o,Iu,Oge,m7o,g7o,UG,h7o,p7o,_7o,Nu,Vge,u7o,b7o,HG,v7o,F7o,T7o,qu,Xge,M7o,E7o,JG,C7o,w7o,A7o,ju,zge,L7o,y7o,YG,x7o,$7o,k7o,Du,Wge,S7o,R7o,KG,P7o,B7o,I7o,Gu,Qge,N7o,q7o,ZG,j7o,D7o,G7o,Ou,Uge,O7o,V7o,eO,X7o,z7o,W7o,Vu,Hge,Q7o,U7o,oO,H7o,J7o,Y7o,Xu,Jge,K7o,Z7o,rO,eLo,oLo,rLo,zu,Yge,tLo,aLo,tO,nLo,sLo,lLo,Wu,Kge,iLo,dLo,aO,cLo,fLo,mLo,Qu,Zge,gLo,hLo,nO,pLo,_Lo,uLo,Uu,ehe,bLo,vLo,sO,FLo,TLo,MLo,Hu,ohe,ELo,CLo,lO,wLo,ALo,LLo,Ju,rhe,yLo,xLo,iO,$Lo,kLo,SLo,Yu,the,RLo,PLo,dO,BLo,ILo,NLo,Ku,ahe,qLo,jLo,cO,DLo,GLo,OLo,Zu,nhe,VLo,XLo,fO,zLo,WLo,QLo,e2,she,ULo,HLo,mO,JLo,YLo,KLo,o2,lhe,ZLo,eyo,gO,oyo,ryo,tyo,r2,ihe,ayo,nyo,hO,syo,lyo,iyo,t2,dhe,dyo,cyo,pO,fyo,myo,gyo,a2,che,hyo,pyo,_O,_yo,uyo,byo,n2,fhe,vyo,Fyo,uO,Tyo,Myo,Eyo,s2,mhe,Cyo,wyo,bO,Ayo,Lyo,yyo,l2,ghe,xyo,$yo,vO,kyo,Syo,Ryo,i2,hhe,Pyo,Byo,FO,Iyo,Nyo,qyo,d2,phe,jyo,Dyo,TO,Gyo,Oyo,Vyo,c2,_he,Xyo,zyo,MO,Wyo,Qyo,Uyo,f2,uhe,Hyo,Jyo,EO,Yyo,Kyo,Zyo,m2,bhe,e9o,o9o,CO,r9o,t9o,a9o,g2,vhe,n9o,s9o,wO,l9o,i9o,d9o,h2,Fhe,c9o,f9o,AO,m9o,g9o,h9o,p2,The,p9o,_9o,LO,u9o,b9o,v9o,_2,Mhe,F9o,T9o,yO,M9o,E9o,C9o,u2,Ehe,w9o,A9o,xO,L9o,y9o,x9o,b2,Che,$9o,k9o,$O,S9o,R9o,P9o,v2,whe,B9o,I9o,kO,N9o,q9o,j9o,F2,Ahe,D9o,G9o,SO,O9o,V9o,X9o,T2,Lhe,z9o,W9o,RO,Q9o,U9o,H9o,M2,J9o,yhe,Y9o,K9o,xhe,Z9o,exo,E2,jQe,nd,C2,$he,Dy,oxo,khe,rxo,DQe,Ro,Gy,txo,sd,axo,PO,nxo,sxo,BO,lxo,ixo,dxo,Oy,cxo,She,fxo,mxo,gxo,gt,Vy,hxo,Rhe,pxo,_xo,ld,uxo,Phe,bxo,vxo,IO,Fxo,Txo,Mxo,w2,Exo,Ke,Xy,Cxo,Bhe,wxo,Axo,Xa,Lxo,Ihe,yxo,xxo,Nhe,$xo,kxo,qhe,Sxo,Rxo,Pxo,G,A2,jhe,Bxo,Ixo,NO,Nxo,qxo,jxo,L2,Dhe,Dxo,Gxo,qO,Oxo,Vxo,Xxo,y2,Ghe,zxo,Wxo,jO,Qxo,Uxo,Hxo,x2,Ohe,Jxo,Yxo,DO,Kxo,Zxo,e$o,$2,Vhe,o$o,r$o,GO,t$o,a$o,n$o,k2,Xhe,s$o,l$o,OO,i$o,d$o,c$o,S2,zhe,f$o,m$o,VO,g$o,h$o,p$o,R2,Whe,_$o,u$o,XO,b$o,v$o,F$o,P2,Qhe,T$o,M$o,zO,E$o,C$o,w$o,B2,Uhe,A$o,L$o,WO,y$o,x$o,$$o,I2,Hhe,k$o,S$o,QO,R$o,P$o,B$o,N2,Jhe,I$o,N$o,UO,q$o,j$o,D$o,q2,Yhe,G$o,O$o,HO,V$o,X$o,z$o,j2,Khe,W$o,Q$o,JO,U$o,H$o,J$o,D2,Zhe,Y$o,K$o,YO,Z$o,eko,oko,G2,epe,rko,tko,KO,ako,nko,sko,O2,ope,lko,iko,ZO,dko,cko,fko,V2,rpe,mko,gko,eV,hko,pko,_ko,X2,tpe,uko,bko,oV,vko,Fko,Tko,z2,ape,Mko,Eko,rV,Cko,wko,Ako,W2,npe,Lko,yko,tV,xko,$ko,kko,Q2,spe,Sko,Rko,aV,Pko,Bko,Iko,U2,lpe,Nko,qko,nV,jko,Dko,Gko,H2,ipe,Oko,Vko,sV,Xko,zko,Wko,J2,dpe,Qko,Uko,lV,Hko,Jko,Yko,Y2,cpe,Kko,Zko,iV,eSo,oSo,rSo,K2,fpe,tSo,aSo,dV,nSo,sSo,lSo,Z2,mpe,iSo,dSo,cV,cSo,fSo,mSo,e1,gpe,gSo,hSo,fV,pSo,_So,uSo,o1,hpe,bSo,vSo,mV,FSo,TSo,MSo,r1,ppe,ESo,CSo,gV,wSo,ASo,LSo,t1,_pe,ySo,xSo,hV,$So,kSo,SSo,a1,upe,RSo,PSo,pV,BSo,ISo,NSo,n1,bpe,qSo,jSo,_V,DSo,GSo,OSo,s1,vpe,VSo,XSo,uV,zSo,WSo,QSo,l1,Fpe,USo,HSo,bV,JSo,YSo,KSo,i1,Tpe,ZSo,eRo,vV,oRo,rRo,tRo,d1,Mpe,aRo,nRo,FV,sRo,lRo,iRo,c1,Epe,dRo,cRo,TV,fRo,mRo,gRo,f1,Cpe,hRo,pRo,MV,_Ro,uRo,bRo,m1,wpe,vRo,FRo,EV,TRo,MRo,ERo,g1,Ape,CRo,wRo,CV,ARo,LRo,yRo,h1,Lpe,xRo,$Ro,wV,kRo,SRo,RRo,p1,ype,PRo,BRo,AV,IRo,NRo,qRo,_1,xpe,jRo,DRo,LV,GRo,ORo,VRo,u1,$pe,XRo,zRo,yV,WRo,QRo,URo,b1,kpe,HRo,JRo,xV,YRo,KRo,ZRo,v1,ePo,Spe,oPo,rPo,Rpe,tPo,aPo,F1,GQe,id,T1,Ppe,zy,nPo,Bpe,sPo,OQe,Po,Wy,lPo,dd,iPo,$V,dPo,cPo,kV,fPo,mPo,gPo,Qy,hPo,Ipe,pPo,_Po,uPo,ht,Uy,bPo,Npe,vPo,FPo,cd,TPo,qpe,MPo,EPo,SV,CPo,wPo,APo,M1,LPo,Ze,Hy,yPo,jpe,xPo,$Po,za,kPo,Dpe,SPo,RPo,Gpe,PPo,BPo,Ope,IPo,NPo,qPo,z,E1,Vpe,jPo,DPo,RV,GPo,OPo,VPo,C1,Xpe,XPo,zPo,PV,WPo,QPo,UPo,w1,zpe,HPo,JPo,BV,YPo,KPo,ZPo,A1,Wpe,eBo,oBo,IV,rBo,tBo,aBo,L1,Qpe,nBo,sBo,NV,lBo,iBo,dBo,y1,Upe,cBo,fBo,qV,mBo,gBo,hBo,x1,Hpe,pBo,_Bo,jV,uBo,bBo,vBo,$1,Jpe,FBo,TBo,DV,MBo,EBo,CBo,k1,Ype,wBo,ABo,GV,LBo,yBo,xBo,S1,Kpe,$Bo,kBo,OV,SBo,RBo,PBo,R1,Zpe,BBo,IBo,VV,NBo,qBo,jBo,P1,e_e,DBo,GBo,XV,OBo,VBo,XBo,B1,o_e,zBo,WBo,zV,QBo,UBo,HBo,I1,r_e,JBo,YBo,WV,KBo,ZBo,eIo,N1,t_e,oIo,rIo,QV,tIo,aIo,nIo,q1,a_e,sIo,lIo,UV,iIo,dIo,cIo,j1,n_e,fIo,mIo,HV,gIo,hIo,pIo,D1,s_e,_Io,uIo,JV,bIo,vIo,FIo,G1,l_e,TIo,MIo,YV,EIo,CIo,wIo,O1,i_e,AIo,LIo,KV,yIo,xIo,$Io,V1,d_e,kIo,SIo,ZV,RIo,PIo,BIo,X1,c_e,IIo,NIo,eX,qIo,jIo,DIo,z1,f_e,GIo,OIo,oX,VIo,XIo,zIo,W1,m_e,WIo,QIo,rX,UIo,HIo,JIo,Q1,g_e,YIo,KIo,tX,ZIo,eNo,oNo,U1,h_e,rNo,tNo,aX,aNo,nNo,sNo,H1,p_e,lNo,iNo,nX,dNo,cNo,fNo,J1,__e,mNo,gNo,sX,hNo,pNo,_No,Y1,u_e,uNo,bNo,lX,vNo,FNo,TNo,K1,b_e,MNo,ENo,iX,CNo,wNo,ANo,Z1,v_e,LNo,yNo,dX,xNo,$No,kNo,eb,F_e,SNo,RNo,cX,PNo,BNo,INo,ob,T_e,NNo,qNo,fX,jNo,DNo,GNo,rb,M_e,ONo,VNo,mX,XNo,zNo,WNo,tb,E_e,QNo,UNo,gX,HNo,JNo,YNo,ab,C_e,KNo,ZNo,hX,eqo,oqo,rqo,nb,w_e,tqo,aqo,pX,nqo,sqo,lqo,sb,A_e,iqo,dqo,_X,cqo,fqo,mqo,lb,L_e,gqo,hqo,uX,pqo,_qo,uqo,ib,y_e,bqo,vqo,bX,Fqo,Tqo,Mqo,db,Eqo,x_e,Cqo,wqo,$_e,Aqo,Lqo,cb,VQe,fd,fb,k_e,Jy,yqo,S_e,xqo,XQe,Bo,Yy,$qo,md,kqo,vX,Sqo,Rqo,FX,Pqo,Bqo,Iqo,Ky,Nqo,R_e,qqo,jqo,Dqo,pt,Zy,Gqo,P_e,Oqo,Vqo,gd,Xqo,B_e,zqo,Wqo,TX,Qqo,Uqo,Hqo,mb,Jqo,eo,e9,Yqo,I_e,Kqo,Zqo,Wa,ejo,N_e,ojo,rjo,q_e,tjo,ajo,j_e,njo,sjo,ljo,Q,gb,D_e,ijo,djo,MX,cjo,fjo,mjo,hb,G_e,gjo,hjo,EX,pjo,_jo,ujo,pb,O_e,bjo,vjo,CX,Fjo,Tjo,Mjo,_b,V_e,Ejo,Cjo,wX,wjo,Ajo,Ljo,ub,X_e,yjo,xjo,AX,$jo,kjo,Sjo,bb,z_e,Rjo,Pjo,LX,Bjo,Ijo,Njo,vb,W_e,qjo,jjo,yX,Djo,Gjo,Ojo,Fb,Q_e,Vjo,Xjo,xX,zjo,Wjo,Qjo,Tb,U_e,Ujo,Hjo,$X,Jjo,Yjo,Kjo,Mb,H_e,Zjo,eDo,kX,oDo,rDo,tDo,Eb,J_e,aDo,nDo,SX,sDo,lDo,iDo,Cb,Y_e,dDo,cDo,RX,fDo,mDo,gDo,wb,K_e,hDo,pDo,PX,_Do,uDo,bDo,Ab,Z_e,vDo,FDo,BX,TDo,MDo,EDo,Lb,eue,CDo,wDo,IX,ADo,LDo,yDo,yb,oue,xDo,$Do,NX,kDo,SDo,RDo,xb,rue,PDo,BDo,qX,IDo,NDo,qDo,$b,tue,jDo,DDo,jX,GDo,ODo,VDo,kb,aue,XDo,zDo,DX,WDo,QDo,UDo,Sb,nue,HDo,JDo,GX,YDo,KDo,ZDo,Rb,sue,eGo,oGo,OX,rGo,tGo,aGo,Pb,lue,nGo,sGo,VX,lGo,iGo,dGo,Bb,iue,cGo,fGo,XX,mGo,gGo,hGo,Ib,due,pGo,_Go,zX,uGo,bGo,vGo,Nb,cue,FGo,TGo,WX,MGo,EGo,CGo,qb,fue,wGo,AGo,QX,LGo,yGo,xGo,jb,mue,$Go,kGo,UX,SGo,RGo,PGo,Db,gue,BGo,IGo,HX,NGo,qGo,jGo,Gb,hue,DGo,GGo,JX,OGo,VGo,XGo,Ob,pue,zGo,WGo,YX,QGo,UGo,HGo,Vb,_ue,JGo,YGo,KX,KGo,ZGo,eOo,Xb,uue,oOo,rOo,ZX,tOo,aOo,nOo,zb,bue,sOo,lOo,ez,iOo,dOo,cOo,Wb,vue,fOo,mOo,Fue,gOo,hOo,pOo,Qb,Tue,_Oo,uOo,oz,bOo,vOo,FOo,Ub,Mue,TOo,MOo,rz,EOo,COo,wOo,Hb,Eue,AOo,LOo,tz,yOo,xOo,$Oo,Jb,Cue,kOo,SOo,az,ROo,POo,BOo,Yb,IOo,wue,NOo,qOo,Aue,jOo,DOo,Kb,zQe,hd,Zb,Lue,o9,GOo,yue,OOo,WQe,Io,r9,VOo,pd,XOo,nz,zOo,WOo,sz,QOo,UOo,HOo,t9,JOo,xue,YOo,KOo,ZOo,_t,a9,eVo,$ue,oVo,rVo,_d,tVo,kue,aVo,nVo,lz,sVo,lVo,iVo,ev,dVo,oo,n9,cVo,Sue,fVo,mVo,Qa,gVo,Rue,hVo,pVo,Pue,_Vo,uVo,Bue,bVo,vVo,FVo,me,ov,Iue,TVo,MVo,iz,EVo,CVo,wVo,rv,Nue,AVo,LVo,dz,yVo,xVo,$Vo,tv,que,kVo,SVo,cz,RVo,PVo,BVo,av,jue,IVo,NVo,fz,qVo,jVo,DVo,nv,Due,GVo,OVo,mz,VVo,XVo,zVo,sv,Gue,WVo,QVo,gz,UVo,HVo,JVo,lv,Oue,YVo,KVo,hz,ZVo,eXo,oXo,iv,Vue,rXo,tXo,pz,aXo,nXo,sXo,dv,Xue,lXo,iXo,_z,dXo,cXo,fXo,cv,zue,mXo,gXo,uz,hXo,pXo,_Xo,fv,Wue,uXo,bXo,bz,vXo,FXo,TXo,mv,Que,MXo,EXo,vz,CXo,wXo,AXo,gv,Uue,LXo,yXo,Fz,xXo,$Xo,kXo,hv,Hue,SXo,RXo,Tz,PXo,BXo,IXo,pv,Jue,NXo,qXo,Mz,jXo,DXo,GXo,_v,Yue,OXo,VXo,Ez,XXo,zXo,WXo,uv,Kue,QXo,UXo,Cz,HXo,JXo,YXo,bv,Zue,KXo,ZXo,wz,ezo,ozo,rzo,vv,e2e,tzo,azo,Az,nzo,szo,lzo,Fv,izo,o2e,dzo,czo,r2e,fzo,mzo,Tv,QQe,ud,Mv,t2e,s9,gzo,a2e,hzo,UQe,No,l9,pzo,bd,_zo,Lz,uzo,bzo,yz,vzo,Fzo,Tzo,i9,Mzo,n2e,Ezo,Czo,wzo,ut,d9,Azo,s2e,Lzo,yzo,vd,xzo,l2e,$zo,kzo,xz,Szo,Rzo,Pzo,Ev,Bzo,ro,c9,Izo,i2e,Nzo,qzo,Ua,jzo,d2e,Dzo,Gzo,c2e,Ozo,Vzo,f2e,Xzo,zzo,Wzo,N,Cv,m2e,Qzo,Uzo,$z,Hzo,Jzo,Yzo,wv,g2e,Kzo,Zzo,kz,eWo,oWo,rWo,Av,h2e,tWo,aWo,Sz,nWo,sWo,lWo,Lv,p2e,iWo,dWo,Rz,cWo,fWo,mWo,yv,_2e,gWo,hWo,Pz,pWo,_Wo,uWo,xv,u2e,bWo,vWo,Bz,FWo,TWo,MWo,$v,b2e,EWo,CWo,Iz,wWo,AWo,LWo,kv,v2e,yWo,xWo,Nz,$Wo,kWo,SWo,Sv,F2e,RWo,PWo,qz,BWo,IWo,NWo,Rv,T2e,qWo,jWo,jz,DWo,GWo,OWo,Pv,M2e,VWo,XWo,Dz,zWo,WWo,QWo,Bv,E2e,UWo,HWo,Gz,JWo,YWo,KWo,Iv,C2e,ZWo,eQo,Oz,oQo,rQo,tQo,Nv,w2e,aQo,nQo,Vz,sQo,lQo,iQo,qv,A2e,dQo,cQo,Xz,fQo,mQo,gQo,jv,L2e,hQo,pQo,zz,_Qo,uQo,bQo,Dv,y2e,vQo,FQo,Wz,TQo,MQo,EQo,Gv,x2e,CQo,wQo,Qz,AQo,LQo,yQo,Ov,$2e,xQo,$Qo,Uz,kQo,SQo,RQo,Vv,k2e,PQo,BQo,Hz,IQo,NQo,qQo,Xv,S2e,jQo,DQo,Jz,GQo,OQo,VQo,zv,R2e,XQo,zQo,Yz,WQo,QQo,UQo,Wv,P2e,HQo,JQo,Kz,YQo,KQo,ZQo,Qv,B2e,eUo,oUo,Zz,rUo,tUo,aUo,Uv,I2e,nUo,sUo,eW,lUo,iUo,dUo,Hv,N2e,cUo,fUo,oW,mUo,gUo,hUo,Jv,q2e,pUo,_Uo,rW,uUo,bUo,vUo,Yv,j2e,FUo,TUo,tW,MUo,EUo,CUo,Kv,D2e,wUo,AUo,aW,LUo,yUo,xUo,Zv,G2e,$Uo,kUo,nW,SUo,RUo,PUo,e0,O2e,BUo,IUo,sW,NUo,qUo,jUo,o0,V2e,DUo,GUo,lW,OUo,VUo,XUo,r0,X2e,zUo,WUo,iW,QUo,UUo,HUo,t0,z2e,JUo,YUo,dW,KUo,ZUo,eHo,a0,W2e,oHo,rHo,cW,tHo,aHo,nHo,n0,Q2e,sHo,lHo,fW,iHo,dHo,cHo,s0,U2e,fHo,mHo,mW,gHo,hHo,pHo,l0,H2e,_Ho,uHo,gW,bHo,vHo,FHo,i0,J2e,THo,MHo,hW,EHo,CHo,wHo,d0,Y2e,AHo,LHo,pW,yHo,xHo,$Ho,c0,K2e,kHo,SHo,_W,RHo,PHo,BHo,f0,Z2e,IHo,NHo,uW,qHo,jHo,DHo,m0,e1e,GHo,OHo,bW,VHo,XHo,zHo,g0,o1e,WHo,QHo,vW,UHo,HHo,JHo,h0,r1e,YHo,KHo,FW,ZHo,eJo,oJo,p0,t1e,rJo,tJo,TW,aJo,nJo,sJo,_0,a1e,lJo,iJo,MW,dJo,cJo,fJo,u0,n1e,mJo,gJo,EW,hJo,pJo,_Jo,b0,s1e,uJo,bJo,CW,vJo,FJo,TJo,v0,l1e,MJo,EJo,wW,CJo,wJo,AJo,F0,i1e,LJo,yJo,AW,xJo,$Jo,kJo,T0,d1e,SJo,RJo,LW,PJo,BJo,IJo,M0,NJo,c1e,qJo,jJo,f1e,DJo,GJo,E0,HQe,Fd,C0,m1e,f9,OJo,g1e,VJo,JQe,qo,m9,XJo,Td,zJo,yW,WJo,QJo,xW,UJo,HJo,JJo,g9,YJo,h1e,KJo,ZJo,eYo,bt,h9,oYo,p1e,rYo,tYo,Md,aYo,_1e,nYo,sYo,$W,lYo,iYo,dYo,w0,cYo,to,p9,fYo,u1e,mYo,gYo,Ha,hYo,b1e,pYo,_Yo,v1e,uYo,bYo,F1e,vYo,FYo,TYo,Z,A0,T1e,MYo,EYo,kW,CYo,wYo,AYo,L0,M1e,LYo,yYo,SW,xYo,$Yo,kYo,y0,E1e,SYo,RYo,RW,PYo,BYo,IYo,x0,C1e,NYo,qYo,PW,jYo,DYo,GYo,$0,w1e,OYo,VYo,BW,XYo,zYo,WYo,k0,A1e,QYo,UYo,IW,HYo,JYo,YYo,S0,L1e,KYo,ZYo,NW,eKo,oKo,rKo,R0,y1e,tKo,aKo,qW,nKo,sKo,lKo,P0,x1e,iKo,dKo,jW,cKo,fKo,mKo,B0,$1e,gKo,hKo,DW,pKo,_Ko,uKo,I0,k1e,bKo,vKo,GW,FKo,TKo,MKo,N0,S1e,EKo,CKo,OW,wKo,AKo,LKo,q0,R1e,yKo,xKo,VW,$Ko,kKo,SKo,j0,P1e,RKo,PKo,XW,BKo,IKo,NKo,D0,B1e,qKo,jKo,zW,DKo,GKo,OKo,G0,I1e,VKo,XKo,WW,zKo,WKo,QKo,O0,N1e,UKo,HKo,QW,JKo,YKo,KKo,V0,q1e,ZKo,eZo,UW,oZo,rZo,tZo,X0,j1e,aZo,nZo,HW,sZo,lZo,iZo,z0,D1e,dZo,cZo,JW,fZo,mZo,gZo,W0,G1e,hZo,pZo,YW,_Zo,uZo,bZo,Q0,O1e,vZo,FZo,KW,TZo,MZo,EZo,U0,V1e,CZo,wZo,ZW,AZo,LZo,yZo,H0,X1e,xZo,$Zo,eQ,kZo,SZo,RZo,J0,z1e,PZo,BZo,oQ,IZo,NZo,qZo,Y0,W1e,jZo,DZo,rQ,GZo,OZo,VZo,K0,Q1e,XZo,zZo,tQ,WZo,QZo,UZo,Z0,U1e,HZo,JZo,aQ,YZo,KZo,ZZo,e6,H1e,eer,oer,nQ,rer,ter,aer,o6,J1e,ner,ser,sQ,ler,ier,der,r6,Y1e,cer,fer,lQ,mer,ger,her,t6,per,K1e,_er,uer,Z1e,ber,ver,a6,YQe,Ed,n6,ebe,_9,Fer,obe,Ter,KQe,jo,u9,Mer,Cd,Eer,iQ,Cer,wer,dQ,Aer,Ler,yer,b9,xer,rbe,$er,ker,Ser,vt,v9,Rer,tbe,Per,Ber,wd,Ier,abe,Ner,qer,cQ,jer,Der,Ger,s6,Oer,ao,F9,Ver,nbe,Xer,zer,Ja,Wer,sbe,Qer,Uer,lbe,Her,Jer,ibe,Yer,Ker,Zer,Do,l6,dbe,eor,oor,fQ,ror,tor,aor,i6,cbe,nor,sor,mQ,lor,ior,dor,d6,fbe,cor,mor,gQ,gor,hor,por,c6,mbe,_or,uor,hQ,bor,vor,For,f6,gbe,Tor,Mor,pQ,Eor,Cor,wor,m6,hbe,Aor,Lor,_Q,yor,xor,$or,g6,kor,pbe,Sor,Ror,_be,Por,Bor,h6,ZQe,Ad,p6,ube,T9,Ior,bbe,Nor,eUe,Go,M9,qor,Ld,jor,uQ,Dor,Gor,bQ,Oor,Vor,Xor,E9,zor,vbe,Wor,Qor,Uor,Ft,C9,Hor,Fbe,Jor,Yor,yd,Kor,Tbe,Zor,err,vQ,orr,rrr,trr,_6,arr,no,w9,nrr,Mbe,srr,lrr,Ya,irr,Ebe,drr,crr,Cbe,frr,mrr,wbe,grr,hrr,prr,H,u6,Abe,_rr,urr,FQ,brr,vrr,Frr,b6,Lbe,Trr,Mrr,TQ,Err,Crr,wrr,v6,ybe,Arr,Lrr,MQ,yrr,xrr,$rr,F6,xbe,krr,Srr,EQ,Rrr,Prr,Brr,T6,$be,Irr,Nrr,CQ,qrr,jrr,Drr,M6,kbe,Grr,Orr,wQ,Vrr,Xrr,zrr,E6,Sbe,Wrr,Qrr,AQ,Urr,Hrr,Jrr,C6,Rbe,Yrr,Krr,LQ,Zrr,etr,otr,w6,Pbe,rtr,ttr,yQ,atr,ntr,str,A6,Bbe,ltr,itr,xQ,dtr,ctr,ftr,L6,Ibe,mtr,gtr,$Q,htr,ptr,_tr,y6,Nbe,utr,btr,kQ,vtr,Ftr,Ttr,x6,qbe,Mtr,Etr,SQ,Ctr,wtr,Atr,$6,jbe,Ltr,ytr,RQ,xtr,$tr,ktr,k6,Dbe,Str,Rtr,PQ,Ptr,Btr,Itr,S6,Gbe,Ntr,qtr,BQ,jtr,Dtr,Gtr,R6,Obe,Otr,Vtr,IQ,Xtr,ztr,Wtr,P6,Vbe,Qtr,Utr,NQ,Htr,Jtr,Ytr,B6,Xbe,Ktr,Ztr,qQ,ear,oar,rar,I6,zbe,tar,aar,jQ,nar,sar,lar,N6,Wbe,iar,dar,DQ,car,far,mar,q6,Qbe,gar,har,GQ,par,_ar,uar,j6,Ube,bar,Far,OQ,Tar,Mar,Ear,D6,Hbe,Car,war,VQ,Aar,Lar,yar,G6,Jbe,xar,$ar,XQ,kar,Sar,Rar,O6,Ybe,Par,Bar,zQ,Iar,Nar,qar,V6,Kbe,jar,Dar,WQ,Gar,Oar,Var,X6,Zbe,Xar,zar,QQ,War,Qar,Uar,z6,eve,Har,Jar,UQ,Yar,Kar,Zar,W6,ove,enr,onr,HQ,rnr,tnr,anr,Q6,rve,nnr,snr,JQ,lnr,inr,dnr,U6,tve,cnr,fnr,YQ,mnr,gnr,hnr,H6,ave,pnr,_nr,KQ,unr,bnr,vnr,J6,nve,Fnr,Tnr,ZQ,Mnr,Enr,Cnr,Y6,sve,wnr,Anr,eU,Lnr,ynr,xnr,K6,lve,$nr,knr,oU,Snr,Rnr,Pnr,Z6,ive,Bnr,Inr,rU,Nnr,qnr,jnr,eF,Dnr,dve,Gnr,Onr,cve,Vnr,Xnr,oF,oUe,xd,rF,fve,A9,znr,mve,Wnr,rUe,Oo,L9,Qnr,$d,Unr,tU,Hnr,Jnr,aU,Ynr,Knr,Znr,y9,esr,gve,osr,rsr,tsr,Tt,x9,asr,hve,nsr,ssr,kd,lsr,pve,isr,dsr,nU,csr,fsr,msr,tF,gsr,so,$9,hsr,_ve,psr,_sr,Ka,usr,uve,bsr,vsr,bve,Fsr,Tsr,vve,Msr,Esr,Csr,V,aF,Fve,wsr,Asr,sU,Lsr,ysr,xsr,nF,Tve,$sr,ksr,lU,Ssr,Rsr,Psr,sF,Mve,Bsr,Isr,iU,Nsr,qsr,jsr,lF,Eve,Dsr,Gsr,dU,Osr,Vsr,Xsr,iF,Cve,zsr,Wsr,cU,Qsr,Usr,Hsr,dF,wve,Jsr,Ysr,fU,Ksr,Zsr,elr,cF,Ave,olr,rlr,mU,tlr,alr,nlr,fF,Lve,slr,llr,gU,ilr,dlr,clr,mF,yve,flr,mlr,hU,glr,hlr,plr,gF,xve,_lr,ulr,pU,blr,vlr,Flr,hF,$ve,Tlr,Mlr,_U,Elr,Clr,wlr,pF,kve,Alr,Llr,uU,ylr,xlr,$lr,_F,Sve,klr,Slr,bU,Rlr,Plr,Blr,uF,Rve,Ilr,Nlr,vU,qlr,jlr,Dlr,bF,Pve,Glr,Olr,FU,Vlr,Xlr,zlr,vF,Bve,Wlr,Qlr,TU,Ulr,Hlr,Jlr,FF,Ive,Ylr,Klr,MU,Zlr,eir,oir,TF,Nve,rir,tir,EU,air,nir,sir,MF,qve,lir,iir,CU,dir,cir,fir,EF,jve,mir,gir,wU,hir,pir,_ir,CF,Dve,uir,bir,AU,vir,Fir,Tir,wF,Gve,Mir,Eir,LU,Cir,wir,Air,AF,Ove,Lir,yir,yU,xir,$ir,kir,LF,Vve,Sir,Rir,xU,Pir,Bir,Iir,yF,Xve,Nir,qir,$U,jir,Dir,Gir,xF,zve,Oir,Vir,kU,Xir,zir,Wir,$F,Wve,Qir,Uir,SU,Hir,Jir,Yir,kF,Qve,Kir,Zir,RU,edr,odr,rdr,SF,Uve,tdr,adr,PU,ndr,sdr,ldr,RF,Hve,idr,ddr,BU,cdr,fdr,mdr,PF,Jve,gdr,hdr,IU,pdr,_dr,udr,BF,Yve,bdr,vdr,NU,Fdr,Tdr,Mdr,IF,Kve,Edr,Cdr,qU,wdr,Adr,Ldr,NF,Zve,ydr,xdr,jU,$dr,kdr,Sdr,qF,e0e,Rdr,Pdr,DU,Bdr,Idr,Ndr,jF,o0e,qdr,jdr,GU,Ddr,Gdr,Odr,DF,r0e,Vdr,Xdr,OU,zdr,Wdr,Qdr,GF,t0e,Udr,Hdr,VU,Jdr,Ydr,Kdr,OF,a0e,Zdr,ecr,XU,ocr,rcr,tcr,VF,n0e,acr,ncr,zU,scr,lcr,icr,XF,s0e,dcr,ccr,WU,fcr,mcr,gcr,zF,l0e,hcr,pcr,QU,_cr,ucr,bcr,WF,i0e,vcr,Fcr,UU,Tcr,Mcr,Ecr,QF,Ccr,d0e,wcr,Acr,c0e,Lcr,ycr,UF,tUe,Sd,HF,f0e,k9,xcr,m0e,$cr,aUe,Vo,S9,kcr,Rd,Scr,HU,Rcr,Pcr,JU,Bcr,Icr,Ncr,R9,qcr,g0e,jcr,Dcr,Gcr,Mt,P9,Ocr,h0e,Vcr,Xcr,Pd,zcr,p0e,Wcr,Qcr,YU,Ucr,Hcr,Jcr,JF,Ycr,lo,B9,Kcr,_0e,Zcr,efr,Za,ofr,u0e,rfr,tfr,b0e,afr,nfr,v0e,sfr,lfr,ifr,F0e,YF,T0e,dfr,cfr,KU,ffr,mfr,gfr,KF,hfr,M0e,pfr,_fr,E0e,ufr,bfr,ZF,nUe,Bd,eT,C0e,I9,vfr,w0e,Ffr,sUe,Xo,N9,Tfr,Id,Mfr,ZU,Efr,Cfr,eH,wfr,Afr,Lfr,q9,yfr,A0e,xfr,$fr,kfr,Et,j9,Sfr,L0e,Rfr,Pfr,Nd,Bfr,y0e,Ifr,Nfr,oH,qfr,jfr,Dfr,oT,Gfr,io,D9,Ofr,x0e,Vfr,Xfr,en,zfr,$0e,Wfr,Qfr,k0e,Ufr,Hfr,S0e,Jfr,Yfr,Kfr,be,rT,R0e,Zfr,emr,rH,omr,rmr,tmr,tT,P0e,amr,nmr,tH,smr,lmr,imr,aT,B0e,dmr,cmr,aH,fmr,mmr,gmr,nT,I0e,hmr,pmr,nH,_mr,umr,bmr,sl,N0e,vmr,Fmr,sH,Tmr,Mmr,lH,Emr,Cmr,wmr,sT,q0e,Amr,Lmr,iH,ymr,xmr,$mr,ll,j0e,kmr,Smr,dH,Rmr,Pmr,cH,Bmr,Imr,Nmr,lT,D0e,qmr,jmr,fH,Dmr,Gmr,Omr,Ct,G0e,Vmr,Xmr,mH,zmr,Wmr,gH,Qmr,Umr,hH,Hmr,Jmr,Ymr,iT,O0e,Kmr,Zmr,pH,egr,ogr,rgr,dT,V0e,tgr,agr,_H,ngr,sgr,lgr,cT,X0e,igr,dgr,uH,cgr,fgr,mgr,fT,z0e,ggr,hgr,bH,pgr,_gr,ugr,mT,W0e,bgr,vgr,vH,Fgr,Tgr,Mgr,gT,Q0e,Egr,Cgr,FH,wgr,Agr,Lgr,hT,U0e,ygr,xgr,TH,$gr,kgr,Sgr,pT,H0e,Rgr,Pgr,MH,Bgr,Igr,Ngr,_T,qgr,J0e,jgr,Dgr,Y0e,Ggr,Ogr,uT,lUe,qd,bT,K0e,G9,Vgr,Z0e,Xgr,iUe,zo,O9,zgr,jd,Wgr,EH,Qgr,Ugr,CH,Hgr,Jgr,Ygr,V9,Kgr,e6e,Zgr,ehr,ohr,wt,X9,rhr,o6e,thr,ahr,Dd,nhr,r6e,shr,lhr,wH,ihr,dhr,chr,vT,fhr,co,z9,mhr,t6e,ghr,hhr,on,phr,a6e,_hr,uhr,n6e,bhr,vhr,s6e,Fhr,Thr,Mhr,l6e,FT,i6e,Ehr,Chr,AH,whr,Ahr,Lhr,TT,yhr,d6e,xhr,$hr,c6e,khr,Shr,MT,dUe,Gd,ET,f6e,W9,Rhr,m6e,Phr,cUe,Wo,Q9,Bhr,Od,Ihr,LH,Nhr,qhr,yH,jhr,Dhr,Ghr,U9,Ohr,g6e,Vhr,Xhr,zhr,At,H9,Whr,h6e,Qhr,Uhr,Vd,Hhr,p6e,Jhr,Yhr,xH,Khr,Zhr,epr,CT,opr,fo,J9,rpr,_6e,tpr,apr,rn,npr,u6e,spr,lpr,b6e,ipr,dpr,v6e,cpr,fpr,mpr,F6e,wT,T6e,gpr,hpr,$H,ppr,_pr,upr,AT,bpr,M6e,vpr,Fpr,E6e,Tpr,Mpr,LT,fUe,Xd,yT,C6e,Y9,Epr,w6e,Cpr,mUe,Qo,K9,wpr,zd,Apr,kH,Lpr,ypr,SH,xpr,$pr,kpr,Z9,Spr,A6e,Rpr,Ppr,Bpr,Lt,ex,Ipr,L6e,Npr,qpr,Wd,jpr,y6e,Dpr,Gpr,RH,Opr,Vpr,Xpr,xT,zpr,mo,ox,Wpr,x6e,Qpr,Upr,tn,Hpr,$6e,Jpr,Ypr,k6e,Kpr,Zpr,S6e,e_r,o_r,r_r,R6e,$T,P6e,t_r,a_r,PH,n_r,s_r,l_r,kT,i_r,B6e,d_r,c_r,I6e,f_r,m_r,ST,gUe,Qd,RT,N6e,rx,g_r,q6e,h_r,hUe,Uo,tx,p_r,Ud,__r,BH,u_r,b_r,IH,v_r,F_r,T_r,ax,M_r,j6e,E_r,C_r,w_r,yt,nx,A_r,D6e,L_r,y_r,Hd,x_r,G6e,$_r,k_r,NH,S_r,R_r,P_r,PT,B_r,go,sx,I_r,O6e,N_r,q_r,an,j_r,V6e,D_r,G_r,X6e,O_r,V_r,z6e,X_r,z_r,W_r,Pe,BT,W6e,Q_r,U_r,qH,H_r,J_r,Y_r,IT,Q6e,K_r,Z_r,jH,eur,our,rur,NT,U6e,tur,aur,DH,nur,sur,lur,qT,H6e,iur,dur,GH,cur,fur,mur,jT,J6e,gur,hur,OH,pur,_ur,uur,DT,Y6e,bur,vur,VH,Fur,Tur,Mur,GT,K6e,Eur,Cur,XH,wur,Aur,Lur,OT,Z6e,yur,xur,zH,$ur,kur,Sur,VT,eFe,Rur,Pur,WH,Bur,Iur,Nur,XT,qur,oFe,jur,Dur,rFe,Gur,Our,zT,pUe,Jd,WT,tFe,lx,Vur,aFe,Xur,_Ue,Ho,ix,zur,Yd,Wur,QH,Qur,Uur,UH,Hur,Jur,Yur,dx,Kur,nFe,Zur,e2r,o2r,xt,cx,r2r,sFe,t2r,a2r,Kd,n2r,lFe,s2r,l2r,HH,i2r,d2r,c2r,QT,f2r,ho,fx,m2r,iFe,g2r,h2r,nn,p2r,dFe,_2r,u2r,cFe,b2r,v2r,fFe,F2r,T2r,M2r,st,UT,mFe,E2r,C2r,JH,w2r,A2r,L2r,HT,gFe,y2r,x2r,YH,$2r,k2r,S2r,JT,hFe,R2r,P2r,KH,B2r,I2r,N2r,YT,pFe,q2r,j2r,ZH,D2r,G2r,O2r,KT,_Fe,V2r,X2r,eJ,z2r,W2r,Q2r,ZT,U2r,uFe,H2r,J2r,bFe,Y2r,K2r,e8,uUe,Zd,o8,vFe,mx,Z2r,FFe,e1r,bUe,Jo,gx,o1r,ec,r1r,oJ,t1r,a1r,rJ,n1r,s1r,l1r,hx,i1r,TFe,d1r,c1r,f1r,$t,px,m1r,MFe,g1r,h1r,oc,p1r,EFe,_1r,u1r,tJ,b1r,v1r,F1r,r8,T1r,po,_x,M1r,CFe,E1r,C1r,sn,w1r,wFe,A1r,L1r,AFe,y1r,x1r,LFe,$1r,k1r,S1r,Le,t8,yFe,R1r,P1r,aJ,B1r,I1r,N1r,a8,xFe,q1r,j1r,nJ,D1r,G1r,O1r,n8,$Fe,V1r,X1r,sJ,z1r,W1r,Q1r,s8,kFe,U1r,H1r,lJ,J1r,Y1r,K1r,l8,SFe,Z1r,ebr,iJ,obr,rbr,tbr,i8,RFe,abr,nbr,dJ,sbr,lbr,ibr,d8,PFe,dbr,cbr,cJ,fbr,mbr,gbr,c8,BFe,hbr,pbr,fJ,_br,ubr,bbr,f8,IFe,vbr,Fbr,mJ,Tbr,Mbr,Ebr,m8,NFe,Cbr,wbr,gJ,Abr,Lbr,ybr,g8,xbr,qFe,$br,kbr,jFe,Sbr,Rbr,h8,vUe,rc,p8,DFe,ux,Pbr,GFe,Bbr,FUe,Yo,bx,Ibr,tc,Nbr,hJ,qbr,jbr,pJ,Dbr,Gbr,Obr,vx,Vbr,OFe,Xbr,zbr,Wbr,kt,Fx,Qbr,VFe,Ubr,Hbr,ac,Jbr,XFe,Ybr,Kbr,_J,Zbr,evr,ovr,_8,rvr,_o,Tx,tvr,zFe,avr,nvr,ln,svr,WFe,lvr,ivr,QFe,dvr,cvr,UFe,fvr,mvr,gvr,Mx,u8,HFe,hvr,pvr,uJ,_vr,uvr,bvr,b8,JFe,vvr,Fvr,bJ,Tvr,Mvr,Evr,v8,Cvr,YFe,wvr,Avr,KFe,Lvr,yvr,F8,TUe,nc,T8,ZFe,Ex,xvr,eTe,$vr,MUe,Ko,Cx,kvr,sc,Svr,vJ,Rvr,Pvr,FJ,Bvr,Ivr,Nvr,wx,qvr,oTe,jvr,Dvr,Gvr,St,Ax,Ovr,rTe,Vvr,Xvr,lc,zvr,tTe,Wvr,Qvr,TJ,Uvr,Hvr,Jvr,M8,Yvr,uo,Lx,Kvr,aTe,Zvr,e0r,dn,o0r,nTe,r0r,t0r,sTe,a0r,n0r,lTe,s0r,l0r,i0r,lt,E8,iTe,d0r,c0r,MJ,f0r,m0r,g0r,C8,dTe,h0r,p0r,EJ,_0r,u0r,b0r,w8,cTe,v0r,F0r,CJ,T0r,M0r,E0r,A8,fTe,C0r,w0r,wJ,A0r,L0r,y0r,L8,mTe,x0r,$0r,AJ,k0r,S0r,R0r,y8,P0r,gTe,B0r,I0r,hTe,N0r,q0r,x8,EUe,ic,$8,pTe,yx,j0r,_Te,D0r,CUe,Zo,xx,G0r,dc,O0r,LJ,V0r,X0r,yJ,z0r,W0r,Q0r,$x,U0r,uTe,H0r,J0r,Y0r,Rt,kx,K0r,bTe,Z0r,e6r,cc,o6r,vTe,r6r,t6r,xJ,a6r,n6r,s6r,k8,l6r,bo,Sx,i6r,FTe,d6r,c6r,cn,f6r,TTe,m6r,g6r,MTe,h6r,p6r,ETe,_6r,u6r,b6r,fn,S8,CTe,v6r,F6r,$J,T6r,M6r,E6r,R8,wTe,C6r,w6r,kJ,A6r,L6r,y6r,P8,ATe,x6r,$6r,SJ,k6r,S6r,R6r,B8,LTe,P6r,B6r,RJ,I6r,N6r,q6r,I8,j6r,yTe,D6r,G6r,xTe,O6r,V6r,N8,wUe,fc,q8,$Te,Rx,X6r,kTe,z6r,AUe,er,Px,W6r,mc,Q6r,PJ,U6r,H6r,BJ,J6r,Y6r,K6r,Bx,Z6r,STe,eFr,oFr,rFr,Pt,Ix,tFr,RTe,aFr,nFr,gc,sFr,PTe,lFr,iFr,IJ,dFr,cFr,fFr,j8,mFr,vo,Nx,gFr,BTe,hFr,pFr,mn,_Fr,ITe,uFr,bFr,NTe,vFr,FFr,qTe,TFr,MFr,EFr,qx,D8,jTe,CFr,wFr,NJ,AFr,LFr,yFr,G8,DTe,xFr,$Fr,qJ,kFr,SFr,RFr,O8,PFr,GTe,BFr,IFr,OTe,NFr,qFr,V8,LUe,hc,X8,VTe,jx,jFr,XTe,DFr,yUe,or,Dx,GFr,pc,OFr,jJ,VFr,XFr,DJ,zFr,WFr,QFr,Gx,UFr,zTe,HFr,JFr,YFr,Bt,Ox,KFr,WTe,ZFr,eTr,_c,oTr,QTe,rTr,tTr,GJ,aTr,nTr,sTr,z8,lTr,Fo,Vx,iTr,UTe,dTr,cTr,gn,fTr,HTe,mTr,gTr,JTe,hTr,pTr,YTe,_Tr,uTr,bTr,KTe,W8,ZTe,vTr,FTr,OJ,TTr,MTr,ETr,Q8,CTr,e8e,wTr,ATr,o8e,LTr,yTr,U8,xUe,uc,H8,r8e,Xx,xTr,t8e,$Tr,$Ue,rr,zx,kTr,bc,STr,VJ,RTr,PTr,XJ,BTr,ITr,NTr,Wx,qTr,a8e,jTr,DTr,GTr,It,Qx,OTr,n8e,VTr,XTr,vc,zTr,s8e,WTr,QTr,zJ,UTr,HTr,JTr,J8,YTr,To,Ux,KTr,l8e,ZTr,e8r,hn,o8r,i8e,r8r,t8r,d8e,a8r,n8r,c8e,s8r,l8r,i8r,it,Y8,f8e,d8r,c8r,WJ,f8r,m8r,g8r,K8,m8e,h8r,p8r,QJ,_8r,u8r,b8r,Z8,g8e,v8r,F8r,UJ,T8r,M8r,E8r,eM,h8e,C8r,w8r,HJ,A8r,L8r,y8r,oM,p8e,x8r,$8r,JJ,k8r,S8r,R8r,rM,P8r,_8e,B8r,I8r,u8e,N8r,q8r,tM,kUe,Fc,aM,b8e,Hx,j8r,v8e,D8r,SUe,tr,Jx,G8r,Tc,O8r,YJ,V8r,X8r,KJ,z8r,W8r,Q8r,Yx,U8r,F8e,H8r,J8r,Y8r,Nt,Kx,K8r,T8e,Z8r,eMr,Mc,oMr,M8e,rMr,tMr,ZJ,aMr,nMr,sMr,nM,lMr,Mo,Zx,iMr,E8e,dMr,cMr,pn,fMr,C8e,mMr,gMr,w8e,hMr,pMr,A8e,_Mr,uMr,bMr,L8e,sM,y8e,vMr,FMr,eY,TMr,MMr,EMr,lM,CMr,x8e,wMr,AMr,$8e,LMr,yMr,iM,RUe,Ec,dM,k8e,e$,xMr,S8e,$Mr,PUe,ar,o$,kMr,Cc,SMr,oY,RMr,PMr,rY,BMr,IMr,NMr,r$,qMr,R8e,jMr,DMr,GMr,qt,t$,OMr,P8e,VMr,XMr,wc,zMr,B8e,WMr,QMr,tY,UMr,HMr,JMr,cM,YMr,Rr,a$,KMr,I8e,ZMr,eEr,_n,oEr,N8e,rEr,tEr,q8e,aEr,nEr,j8e,sEr,lEr,iEr,q,fM,D8e,dEr,cEr,aY,fEr,mEr,gEr,mM,G8e,hEr,pEr,nY,_Er,uEr,bEr,gM,O8e,vEr,FEr,sY,TEr,MEr,EEr,hM,V8e,CEr,wEr,lY,AEr,LEr,yEr,pM,X8e,xEr,$Er,iY,kEr,SEr,REr,_M,z8e,PEr,BEr,dY,IEr,NEr,qEr,uM,W8e,jEr,DEr,cY,GEr,OEr,VEr,bM,Q8e,XEr,zEr,fY,WEr,QEr,UEr,vM,U8e,HEr,JEr,mY,YEr,KEr,ZEr,FM,H8e,e4r,o4r,gY,r4r,t4r,a4r,TM,J8e,n4r,s4r,hY,l4r,i4r,d4r,MM,Y8e,c4r,f4r,pY,m4r,g4r,h4r,EM,K8e,p4r,_4r,_Y,u4r,b4r,v4r,CM,Z8e,F4r,T4r,uY,M4r,E4r,C4r,wM,eMe,w4r,A4r,bY,L4r,y4r,x4r,AM,oMe,$4r,k4r,vY,S4r,R4r,P4r,LM,rMe,B4r,I4r,FY,N4r,q4r,j4r,yM,tMe,D4r,G4r,TY,O4r,V4r,X4r,il,aMe,z4r,W4r,MY,Q4r,U4r,EY,H4r,J4r,Y4r,xM,nMe,K4r,Z4r,CY,eCr,oCr,rCr,$M,sMe,tCr,aCr,wY,nCr,sCr,lCr,kM,lMe,iCr,dCr,AY,cCr,fCr,mCr,SM,iMe,gCr,hCr,LY,pCr,_Cr,uCr,RM,dMe,bCr,vCr,yY,FCr,TCr,MCr,PM,cMe,ECr,CCr,xY,wCr,ACr,LCr,BM,fMe,yCr,xCr,$Y,$Cr,kCr,SCr,IM,mMe,RCr,PCr,kY,BCr,ICr,NCr,NM,gMe,qCr,jCr,SY,DCr,GCr,OCr,qM,hMe,VCr,XCr,RY,zCr,WCr,QCr,jM,pMe,UCr,HCr,PY,JCr,YCr,KCr,DM,_Me,ZCr,e3r,BY,o3r,r3r,t3r,GM,uMe,a3r,n3r,IY,s3r,l3r,i3r,OM,bMe,d3r,c3r,NY,f3r,m3r,g3r,VM,vMe,h3r,p3r,qY,_3r,u3r,b3r,XM,FMe,v3r,F3r,jY,T3r,M3r,E3r,zM,TMe,C3r,w3r,DY,A3r,L3r,y3r,WM,MMe,x3r,$3r,GY,k3r,S3r,R3r,QM,EMe,P3r,B3r,OY,I3r,N3r,q3r,UM,CMe,j3r,D3r,VY,G3r,O3r,V3r,HM,wMe,X3r,z3r,XY,W3r,Q3r,U3r,JM,AMe,H3r,J3r,zY,Y3r,K3r,Z3r,YM,LMe,e5r,o5r,WY,r5r,t5r,a5r,KM,yMe,n5r,s5r,QY,l5r,i5r,d5r,ZM,xMe,c5r,f5r,UY,m5r,g5r,h5r,eE,$Me,p5r,_5r,HY,u5r,b5r,v5r,oE,kMe,F5r,T5r,JY,M5r,E5r,C5r,rE,SMe,w5r,A5r,YY,L5r,y5r,x5r,tE,RMe,$5r,k5r,KY,S5r,R5r,P5r,aE,PMe,B5r,I5r,ZY,N5r,q5r,j5r,nE,BMe,D5r,G5r,eK,O5r,V5r,X5r,sE,IMe,z5r,W5r,oK,Q5r,U5r,H5r,lE,BUe,Ac,iE,NMe,n$,J5r,qMe,Y5r,IUe,nr,s$,K5r,Lc,Z5r,rK,ewr,owr,tK,rwr,twr,awr,l$,nwr,jMe,swr,lwr,iwr,jt,i$,dwr,DMe,cwr,fwr,yc,mwr,GMe,gwr,hwr,aK,pwr,_wr,uwr,dE,bwr,Pr,d$,vwr,OMe,Fwr,Twr,un,Mwr,VMe,Ewr,Cwr,XMe,wwr,Awr,zMe,Lwr,ywr,xwr,se,cE,WMe,$wr,kwr,nK,Swr,Rwr,Pwr,fE,QMe,Bwr,Iwr,sK,Nwr,qwr,jwr,mE,UMe,Dwr,Gwr,lK,Owr,Vwr,Xwr,gE,HMe,zwr,Wwr,iK,Qwr,Uwr,Hwr,hE,JMe,Jwr,Ywr,dK,Kwr,Zwr,eAr,pE,YMe,oAr,rAr,cK,tAr,aAr,nAr,_E,KMe,sAr,lAr,fK,iAr,dAr,cAr,uE,ZMe,fAr,mAr,mK,gAr,hAr,pAr,bE,eEe,_Ar,uAr,gK,bAr,vAr,FAr,vE,oEe,TAr,MAr,hK,EAr,CAr,wAr,FE,rEe,AAr,LAr,pK,yAr,xAr,$Ar,TE,tEe,kAr,SAr,_K,RAr,PAr,BAr,ME,aEe,IAr,NAr,uK,qAr,jAr,DAr,EE,nEe,GAr,OAr,bK,VAr,XAr,zAr,CE,sEe,WAr,QAr,vK,UAr,HAr,JAr,wE,lEe,YAr,KAr,FK,ZAr,e7r,o7r,AE,iEe,r7r,t7r,TK,a7r,n7r,s7r,LE,dEe,l7r,i7r,MK,d7r,c7r,f7r,yE,cEe,m7r,g7r,EK,h7r,p7r,_7r,xE,fEe,u7r,b7r,CK,v7r,F7r,T7r,$E,mEe,M7r,E7r,wK,C7r,w7r,A7r,kE,gEe,L7r,y7r,AK,x7r,$7r,k7r,SE,hEe,S7r,R7r,LK,P7r,B7r,I7r,RE,NUe,xc,PE,pEe,c$,N7r,_Ee,q7r,qUe,sr,f$,j7r,$c,D7r,yK,G7r,O7r,xK,V7r,X7r,z7r,m$,W7r,uEe,Q7r,U7r,H7r,Dt,g$,J7r,bEe,Y7r,K7r,kc,Z7r,vEe,eLr,oLr,$K,rLr,tLr,aLr,BE,nLr,Br,h$,sLr,FEe,lLr,iLr,bn,dLr,TEe,cLr,fLr,MEe,mLr,gLr,EEe,hLr,pLr,_Lr,Me,IE,CEe,uLr,bLr,kK,vLr,FLr,TLr,NE,wEe,MLr,ELr,SK,CLr,wLr,ALr,qE,AEe,LLr,yLr,RK,xLr,$Lr,kLr,jE,LEe,SLr,RLr,PK,PLr,BLr,ILr,DE,yEe,NLr,qLr,BK,jLr,DLr,GLr,GE,xEe,OLr,VLr,IK,XLr,zLr,WLr,OE,$Ee,QLr,ULr,NK,HLr,JLr,YLr,VE,kEe,KLr,ZLr,qK,eyr,oyr,ryr,XE,SEe,tyr,ayr,jK,nyr,syr,lyr,zE,REe,iyr,dyr,DK,cyr,fyr,myr,WE,PEe,gyr,hyr,GK,pyr,_yr,uyr,QE,BEe,byr,vyr,OK,Fyr,Tyr,Myr,UE,IEe,Eyr,Cyr,VK,wyr,Ayr,Lyr,HE,jUe,Sc,JE,NEe,p$,yyr,qEe,xyr,DUe,lr,_$,$yr,Rc,kyr,XK,Syr,Ryr,zK,Pyr,Byr,Iyr,u$,Nyr,jEe,qyr,jyr,Dyr,Gt,b$,Gyr,DEe,Oyr,Vyr,Pc,Xyr,GEe,zyr,Wyr,WK,Qyr,Uyr,Hyr,YE,Jyr,Ir,v$,Yyr,OEe,Kyr,Zyr,vn,e9r,VEe,o9r,r9r,XEe,t9r,a9r,zEe,n9r,s9r,l9r,Ve,KE,WEe,i9r,d9r,QK,c9r,f9r,m9r,ZE,QEe,g9r,h9r,UK,p9r,_9r,u9r,dl,UEe,b9r,v9r,HK,F9r,T9r,JK,M9r,E9r,C9r,e4,HEe,w9r,A9r,YK,L9r,y9r,x9r,o4,JEe,$9r,k9r,KK,S9r,R9r,P9r,r4,YEe,B9r,I9r,ZK,N9r,q9r,j9r,t4,KEe,D9r,G9r,eZ,O9r,V9r,X9r,a4,ZEe,z9r,W9r,oZ,Q9r,U9r,H9r,n4,GUe,Bc,s4,e4e,F$,J9r,o4e,Y9r,OUe,ir,T$,K9r,Ic,Z9r,rZ,exr,oxr,tZ,rxr,txr,axr,M$,nxr,r4e,sxr,lxr,ixr,Ot,E$,dxr,t4e,cxr,fxr,Nc,mxr,a4e,gxr,hxr,aZ,pxr,_xr,uxr,l4,bxr,Nr,C$,vxr,n4e,Fxr,Txr,Fn,Mxr,s4e,Exr,Cxr,l4e,wxr,Axr,i4e,Lxr,yxr,xxr,w$,i4,d4e,$xr,kxr,nZ,Sxr,Rxr,Pxr,d4,c4e,Bxr,Ixr,sZ,Nxr,qxr,jxr,c4,VUe,qc,f4,f4e,A$,Dxr,m4e,Gxr,XUe,dr,L$,Oxr,jc,Vxr,lZ,Xxr,zxr,iZ,Wxr,Qxr,Uxr,y$,Hxr,g4e,Jxr,Yxr,Kxr,Vt,x$,Zxr,h4e,e$r,o$r,Dc,r$r,p4e,t$r,a$r,dZ,n$r,s$r,l$r,m4,i$r,qr,$$,d$r,_4e,c$r,f$r,Tn,m$r,u4e,g$r,h$r,b4e,p$r,_$r,v4e,u$r,b$r,v$r,ie,g4,F4e,F$r,T$r,cZ,M$r,E$r,C$r,h4,T4e,w$r,A$r,fZ,L$r,y$r,x$r,p4,M4e,$$r,k$r,mZ,S$r,R$r,P$r,_4,E4e,B$r,I$r,gZ,N$r,q$r,j$r,u4,C4e,D$r,G$r,hZ,O$r,V$r,X$r,b4,w4e,z$r,W$r,pZ,Q$r,U$r,H$r,v4,A4e,J$r,Y$r,_Z,K$r,Z$r,ekr,F4,L4e,okr,rkr,uZ,tkr,akr,nkr,T4,y4e,skr,lkr,bZ,ikr,dkr,ckr,M4,x4e,fkr,mkr,vZ,gkr,hkr,pkr,E4,$4e,_kr,ukr,FZ,bkr,vkr,Fkr,C4,k4e,Tkr,Mkr,TZ,Ekr,Ckr,wkr,w4,S4e,Akr,Lkr,MZ,ykr,xkr,$kr,A4,R4e,kkr,Skr,EZ,Rkr,Pkr,Bkr,L4,P4e,Ikr,Nkr,CZ,qkr,jkr,Dkr,y4,B4e,Gkr,Okr,wZ,Vkr,Xkr,zkr,x4,I4e,Wkr,Qkr,AZ,Ukr,Hkr,Jkr,$4,N4e,Ykr,Kkr,LZ,Zkr,eSr,oSr,k4,q4e,rSr,tSr,yZ,aSr,nSr,sSr,S4,j4e,lSr,iSr,xZ,dSr,cSr,fSr,R4,zUe,Gc,P4,D4e,k$,mSr,G4e,gSr,WUe,cr,S$,hSr,Oc,pSr,$Z,_Sr,uSr,kZ,bSr,vSr,FSr,R$,TSr,O4e,MSr,ESr,CSr,Xt,P$,wSr,V4e,ASr,LSr,Vc,ySr,X4e,xSr,$Sr,SZ,kSr,SSr,RSr,B4,PSr,jr,B$,BSr,z4e,ISr,NSr,Mn,qSr,W4e,jSr,DSr,Q4e,GSr,OSr,U4e,VSr,XSr,zSr,ye,I4,H4e,WSr,QSr,RZ,USr,HSr,JSr,N4,J4e,YSr,KSr,PZ,ZSr,eRr,oRr,q4,Y4e,rRr,tRr,BZ,aRr,nRr,sRr,j4,K4e,lRr,iRr,IZ,dRr,cRr,fRr,D4,Z4e,mRr,gRr,NZ,hRr,pRr,_Rr,G4,eCe,uRr,bRr,qZ,vRr,FRr,TRr,O4,oCe,MRr,ERr,jZ,CRr,wRr,ARr,V4,rCe,LRr,yRr,DZ,xRr,$Rr,kRr,X4,tCe,SRr,RRr,GZ,PRr,BRr,IRr,z4,aCe,NRr,qRr,OZ,jRr,DRr,GRr,W4,QUe,Xc,Q4,nCe,I$,ORr,sCe,VRr,UUe,fr,N$,XRr,zc,zRr,VZ,WRr,QRr,XZ,URr,HRr,JRr,q$,YRr,lCe,KRr,ZRr,ePr,zt,j$,oPr,iCe,rPr,tPr,Wc,aPr,dCe,nPr,sPr,zZ,lPr,iPr,dPr,U4,cPr,Dr,D$,fPr,cCe,mPr,gPr,En,hPr,fCe,pPr,_Pr,mCe,uPr,bPr,gCe,vPr,FPr,TPr,te,H4,hCe,MPr,EPr,WZ,CPr,wPr,APr,J4,pCe,LPr,yPr,QZ,xPr,$Pr,kPr,Y4,_Ce,SPr,RPr,UZ,PPr,BPr,IPr,K4,uCe,NPr,qPr,HZ,jPr,DPr,GPr,Z4,bCe,OPr,VPr,JZ,XPr,zPr,WPr,eC,vCe,QPr,UPr,YZ,HPr,JPr,YPr,oC,FCe,KPr,ZPr,KZ,eBr,oBr,rBr,rC,TCe,tBr,aBr,ZZ,nBr,sBr,lBr,tC,MCe,iBr,dBr,eee,cBr,fBr,mBr,aC,ECe,gBr,hBr,oee,pBr,_Br,uBr,nC,CCe,bBr,vBr,ree,FBr,TBr,MBr,sC,wCe,EBr,CBr,tee,wBr,ABr,LBr,lC,ACe,yBr,xBr,aee,$Br,kBr,SBr,iC,LCe,RBr,PBr,nee,BBr,IBr,NBr,dC,yCe,qBr,jBr,see,DBr,GBr,OBr,cC,xCe,VBr,XBr,lee,zBr,WBr,QBr,fC,$Ce,UBr,HBr,iee,JBr,YBr,KBr,mC,kCe,ZBr,eIr,dee,oIr,rIr,tIr,gC,SCe,aIr,nIr,cee,sIr,lIr,iIr,hC,RCe,dIr,cIr,fee,fIr,mIr,gIr,pC,PCe,hIr,pIr,mee,_Ir,uIr,bIr,_C,BCe,vIr,FIr,gee,TIr,MIr,EIr,uC,ICe,CIr,wIr,hee,AIr,LIr,yIr,bC,NCe,xIr,$Ir,pee,kIr,SIr,RIr,vC,qCe,PIr,BIr,_ee,IIr,NIr,qIr,FC,jCe,jIr,DIr,uee,GIr,OIr,VIr,TC,HUe,Qc,MC,DCe,G$,XIr,GCe,zIr,JUe,mr,O$,WIr,Uc,QIr,bee,UIr,HIr,vee,JIr,YIr,KIr,V$,ZIr,OCe,eNr,oNr,rNr,Wt,X$,tNr,VCe,aNr,nNr,Hc,sNr,XCe,lNr,iNr,Fee,dNr,cNr,fNr,EC,mNr,Gr,z$,gNr,zCe,hNr,pNr,Cn,_Nr,WCe,uNr,bNr,QCe,vNr,FNr,UCe,TNr,MNr,ENr,ve,CC,HCe,CNr,wNr,Tee,ANr,LNr,yNr,wC,JCe,xNr,$Nr,Mee,kNr,SNr,RNr,AC,YCe,PNr,BNr,Eee,INr,NNr,qNr,LC,KCe,jNr,DNr,Cee,GNr,ONr,VNr,yC,ZCe,XNr,zNr,wee,WNr,QNr,UNr,xC,e3e,HNr,JNr,Aee,YNr,KNr,ZNr,$C,o3e,eqr,oqr,Lee,rqr,tqr,aqr,kC,r3e,nqr,sqr,yee,lqr,iqr,dqr,SC,t3e,cqr,fqr,xee,mqr,gqr,hqr,RC,a3e,pqr,_qr,$ee,uqr,bqr,vqr,PC,n3e,Fqr,Tqr,kee,Mqr,Eqr,Cqr,BC,s3e,wqr,Aqr,See,Lqr,yqr,xqr,IC,l3e,$qr,kqr,Ree,Sqr,Rqr,Pqr,NC,i3e,Bqr,Iqr,Pee,Nqr,qqr,jqr,qC,d3e,Dqr,Gqr,Bee,Oqr,Vqr,Xqr,jC,c3e,zqr,Wqr,Iee,Qqr,Uqr,Hqr,DC,f3e,Jqr,Yqr,Nee,Kqr,Zqr,ejr,GC,YUe,Jc,OC,m3e,W$,ojr,g3e,rjr,KUe,gr,Q$,tjr,Yc,ajr,qee,njr,sjr,jee,ljr,ijr,djr,U$,cjr,h3e,fjr,mjr,gjr,Qt,H$,hjr,p3e,pjr,_jr,Kc,ujr,_3e,bjr,vjr,Dee,Fjr,Tjr,Mjr,VC,Ejr,Or,J$,Cjr,u3e,wjr,Ajr,wn,Ljr,b3e,yjr,xjr,v3e,$jr,kjr,F3e,Sjr,Rjr,Pjr,Y$,XC,T3e,Bjr,Ijr,Gee,Njr,qjr,jjr,zC,M3e,Djr,Gjr,Oee,Ojr,Vjr,Xjr,WC,ZUe,Zc,QC,E3e,K$,zjr,C3e,Wjr,eHe,hr,Z$,Qjr,ef,Ujr,Vee,Hjr,Jjr,Xee,Yjr,Kjr,Zjr,ek,eDr,w3e,oDr,rDr,tDr,Ut,ok,aDr,A3e,nDr,sDr,of,lDr,L3e,iDr,dDr,zee,cDr,fDr,mDr,UC,gDr,Vr,rk,hDr,y3e,pDr,_Dr,An,uDr,x3e,bDr,vDr,$3e,FDr,TDr,k3e,MDr,EDr,CDr,S3e,HC,R3e,wDr,ADr,Wee,LDr,yDr,xDr,JC,oHe,rf,YC,P3e,tk,$Dr,B3e,kDr,rHe,pr,ak,SDr,tf,RDr,Qee,PDr,BDr,Uee,IDr,NDr,qDr,nk,jDr,I3e,DDr,GDr,ODr,Ht,sk,VDr,N3e,XDr,zDr,af,WDr,q3e,QDr,UDr,Hee,HDr,JDr,YDr,KC,KDr,Xr,lk,ZDr,j3e,eGr,oGr,Ln,rGr,D3e,tGr,aGr,G3e,nGr,sGr,O3e,lGr,iGr,dGr,de,ZC,V3e,cGr,fGr,Jee,mGr,gGr,hGr,e3,X3e,pGr,_Gr,Yee,uGr,bGr,vGr,o3,z3e,FGr,TGr,Kee,MGr,EGr,CGr,r3,W3e,wGr,AGr,Zee,LGr,yGr,xGr,t3,Q3e,$Gr,kGr,eoe,SGr,RGr,PGr,a3,U3e,BGr,IGr,ooe,NGr,qGr,jGr,n3,H3e,DGr,GGr,roe,OGr,VGr,XGr,s3,J3e,zGr,WGr,toe,QGr,UGr,HGr,l3,Y3e,JGr,YGr,aoe,KGr,ZGr,eOr,i3,K3e,oOr,rOr,noe,tOr,aOr,nOr,d3,Z3e,sOr,lOr,soe,iOr,dOr,cOr,c3,e5e,fOr,mOr,loe,gOr,hOr,pOr,f3,o5e,_Or,uOr,ioe,bOr,vOr,FOr,m3,r5e,TOr,MOr,doe,EOr,COr,wOr,g3,t5e,AOr,LOr,coe,yOr,xOr,$Or,h3,a5e,kOr,SOr,foe,ROr,POr,BOr,p3,n5e,IOr,NOr,moe,qOr,jOr,DOr,_3,s5e,GOr,OOr,goe,VOr,XOr,zOr,u3,l5e,WOr,QOr,hoe,UOr,HOr,JOr,b3,i5e,YOr,KOr,poe,ZOr,eVr,oVr,v3,tHe,nf,F3,d5e,ik,rVr,c5e,tVr,aHe,_r,dk,aVr,sf,nVr,_oe,sVr,lVr,uoe,iVr,dVr,cVr,ck,fVr,f5e,mVr,gVr,hVr,Jt,fk,pVr,m5e,_Vr,uVr,lf,bVr,g5e,vVr,FVr,boe,TVr,MVr,EVr,T3,CVr,zr,mk,wVr,h5e,AVr,LVr,yn,yVr,p5e,xVr,$Vr,_5e,kVr,SVr,u5e,RVr,PVr,BVr,ce,M3,b5e,IVr,NVr,voe,qVr,jVr,DVr,E3,v5e,GVr,OVr,Foe,VVr,XVr,zVr,C3,F5e,WVr,QVr,Toe,UVr,HVr,JVr,w3,T5e,YVr,KVr,Moe,ZVr,eXr,oXr,A3,M5e,rXr,tXr,Eoe,aXr,nXr,sXr,L3,E5e,lXr,iXr,Coe,dXr,cXr,fXr,y3,C5e,mXr,gXr,woe,hXr,pXr,_Xr,x3,w5e,uXr,bXr,Aoe,vXr,FXr,TXr,$3,A5e,MXr,EXr,Loe,CXr,wXr,AXr,k3,L5e,LXr,yXr,yoe,xXr,$Xr,kXr,S3,y5e,SXr,RXr,xoe,PXr,BXr,IXr,R3,x5e,NXr,qXr,$oe,jXr,DXr,GXr,P3,$5e,OXr,VXr,koe,XXr,zXr,WXr,B3,k5e,QXr,UXr,Soe,HXr,JXr,YXr,I3,S5e,KXr,ZXr,Roe,ezr,ozr,rzr,N3,R5e,tzr,azr,Poe,nzr,szr,lzr,q3,P5e,izr,dzr,Boe,czr,fzr,mzr,j3,B5e,gzr,hzr,Ioe,pzr,_zr,uzr,D3,I5e,bzr,vzr,Noe,Fzr,Tzr,Mzr,G3,N5e,Ezr,Czr,qoe,wzr,Azr,Lzr,O3,nHe,df,V3,q5e,gk,yzr,j5e,xzr,sHe,ur,hk,$zr,cf,kzr,joe,Szr,Rzr,Doe,Pzr,Bzr,Izr,pk,Nzr,D5e,qzr,jzr,Dzr,Yt,_k,Gzr,G5e,Ozr,Vzr,ff,Xzr,O5e,zzr,Wzr,Goe,Qzr,Uzr,Hzr,X3,Jzr,Wr,uk,Yzr,V5e,Kzr,Zzr,xn,eWr,X5e,oWr,rWr,z5e,tWr,aWr,W5e,nWr,sWr,lWr,Q5e,z3,U5e,iWr,dWr,Ooe,cWr,fWr,mWr,W3,lHe,mf,Q3,H5e,bk,gWr,J5e,hWr,iHe,br,vk,pWr,gf,_Wr,Voe,uWr,bWr,Xoe,vWr,FWr,TWr,Fk,MWr,Y5e,EWr,CWr,wWr,Kt,Tk,AWr,K5e,LWr,yWr,hf,xWr,Z5e,$Wr,kWr,zoe,SWr,RWr,PWr,U3,BWr,Qr,Mk,IWr,ewe,NWr,qWr,$n,jWr,owe,DWr,GWr,rwe,OWr,VWr,twe,XWr,zWr,WWr,awe,H3,nwe,QWr,UWr,Woe,HWr,JWr,YWr,J3,dHe,pf,Y3,swe,Ek,KWr,lwe,ZWr,cHe,vr,Ck,eQr,_f,oQr,Qoe,rQr,tQr,Uoe,aQr,nQr,sQr,wk,lQr,iwe,iQr,dQr,cQr,Zt,Ak,fQr,dwe,mQr,gQr,uf,hQr,cwe,pQr,_Qr,Hoe,uQr,bQr,vQr,K3,FQr,Ur,Lk,TQr,fwe,MQr,EQr,kn,CQr,mwe,wQr,AQr,gwe,LQr,yQr,hwe,xQr,$Qr,kQr,re,Z3,pwe,SQr,RQr,Joe,PQr,BQr,IQr,e5,_we,NQr,qQr,Yoe,jQr,DQr,GQr,o5,uwe,OQr,VQr,Koe,XQr,zQr,WQr,r5,bwe,QQr,UQr,Zoe,HQr,JQr,YQr,t5,vwe,KQr,ZQr,ere,eUr,oUr,rUr,a5,Fwe,tUr,aUr,ore,nUr,sUr,lUr,n5,Twe,iUr,dUr,rre,cUr,fUr,mUr,s5,Mwe,gUr,hUr,tre,pUr,_Ur,uUr,l5,Ewe,bUr,vUr,are,FUr,TUr,MUr,i5,Cwe,EUr,CUr,nre,wUr,AUr,LUr,d5,wwe,yUr,xUr,sre,$Ur,kUr,SUr,c5,Awe,RUr,PUr,lre,BUr,IUr,NUr,f5,Lwe,qUr,jUr,ire,DUr,GUr,OUr,m5,ywe,VUr,XUr,dre,zUr,WUr,QUr,g5,xwe,UUr,HUr,cre,JUr,YUr,KUr,h5,$we,ZUr,eHr,fre,oHr,rHr,tHr,p5,kwe,aHr,nHr,mre,sHr,lHr,iHr,_5,Swe,dHr,cHr,gre,fHr,mHr,gHr,u5,Rwe,hHr,pHr,hre,_Hr,uHr,bHr,b5,Pwe,vHr,FHr,pre,THr,MHr,EHr,v5,Bwe,CHr,wHr,_re,AHr,LHr,yHr,F5,Iwe,xHr,$Hr,ure,kHr,SHr,RHr,T5,Nwe,PHr,BHr,bre,IHr,NHr,qHr,M5,qwe,jHr,DHr,vre,GHr,OHr,VHr,E5,jwe,XHr,zHr,Fre,WHr,QHr,UHr,C5,Dwe,HHr,JHr,Tre,YHr,KHr,ZHr,w5,Gwe,eJr,oJr,Mre,rJr,tJr,aJr,A5,fHe,bf,L5,Owe,yk,nJr,Vwe,sJr,mHe,Fr,xk,lJr,vf,iJr,Ere,dJr,cJr,Cre,fJr,mJr,gJr,$k,hJr,Xwe,pJr,_Jr,uJr,ea,kk,bJr,zwe,vJr,FJr,Ff,TJr,Wwe,MJr,EJr,wre,CJr,wJr,AJr,y5,LJr,Hr,Sk,yJr,Qwe,xJr,$Jr,Sn,kJr,Uwe,SJr,RJr,Hwe,PJr,BJr,Jwe,IJr,NJr,qJr,xe,x5,Ywe,jJr,DJr,Are,GJr,OJr,VJr,$5,Kwe,XJr,zJr,Lre,WJr,QJr,UJr,k5,Zwe,HJr,JJr,yre,YJr,KJr,ZJr,S5,eAe,eYr,oYr,xre,rYr,tYr,aYr,R5,oAe,nYr,sYr,$re,lYr,iYr,dYr,P5,rAe,cYr,fYr,kre,mYr,gYr,hYr,B5,tAe,pYr,_Yr,Sre,uYr,bYr,vYr,I5,aAe,FYr,TYr,Rre,MYr,EYr,CYr,N5,nAe,wYr,AYr,Pre,LYr,yYr,xYr,q5,sAe,$Yr,kYr,Bre,SYr,RYr,PYr,j5,gHe,Tf,D5,lAe,Rk,BYr,iAe,IYr,hHe,Tr,Pk,NYr,Mf,qYr,Ire,jYr,DYr,Nre,GYr,OYr,VYr,Bk,XYr,dAe,zYr,WYr,QYr,oa,Ik,UYr,cAe,HYr,JYr,Ef,YYr,fAe,KYr,ZYr,qre,eKr,oKr,rKr,G5,tKr,Jr,Nk,aKr,mAe,nKr,sKr,Rn,lKr,gAe,iKr,dKr,hAe,cKr,fKr,pAe,mKr,gKr,hKr,Ee,O5,_Ae,pKr,_Kr,jre,uKr,bKr,vKr,V5,uAe,FKr,TKr,Dre,MKr,EKr,CKr,X5,bAe,wKr,AKr,Gre,LKr,yKr,xKr,z5,vAe,$Kr,kKr,Ore,SKr,RKr,PKr,W5,FAe,BKr,IKr,Vre,NKr,qKr,jKr,Q5,TAe,DKr,GKr,Xre,OKr,VKr,XKr,U5,MAe,zKr,WKr,zre,QKr,UKr,HKr,H5,EAe,JKr,YKr,Wre,KKr,ZKr,eZr,J5,CAe,oZr,rZr,Qre,tZr,aZr,nZr,Y5,wAe,sZr,lZr,Ure,iZr,dZr,cZr,K5,AAe,fZr,mZr,Hre,gZr,hZr,pZr,Z5,LAe,_Zr,uZr,Jre,bZr,vZr,FZr,ew,yAe,TZr,MZr,Yre,EZr,CZr,wZr,ow,pHe,Cf,rw,xAe,qk,AZr,$Ae,LZr,_He,Mr,jk,yZr,wf,xZr,Kre,$Zr,kZr,Zre,SZr,RZr,PZr,Dk,BZr,kAe,IZr,NZr,qZr,ra,Gk,jZr,SAe,DZr,GZr,Af,OZr,RAe,VZr,XZr,ete,zZr,WZr,QZr,tw,UZr,Yr,Ok,HZr,PAe,JZr,YZr,Pn,KZr,BAe,ZZr,eet,IAe,oet,ret,NAe,tet,aet,net,$e,aw,qAe,set,iet,ote,det,cet,fet,nw,jAe,met,get,rte,het,pet,_et,sw,DAe,uet,bet,tte,vet,Fet,Tet,lw,GAe,Met,Eet,ate,Cet,wet,Aet,iw,OAe,Let,yet,nte,xet,$et,ket,dw,VAe,Set,Ret,ste,Pet,Bet,Iet,cw,XAe,Net,qet,lte,jet,Det,Get,fw,zAe,Oet,Vet,ite,Xet,zet,Wet,mw,WAe,Qet,Uet,dte,Het,Jet,Yet,gw,QAe,Ket,Zet,cte,eot,oot,rot,hw,uHe,Lf,pw,UAe,Vk,tot,HAe,aot,bHe,Er,Xk,not,yf,sot,fte,lot,iot,mte,dot,cot,fot,zk,mot,JAe,got,hot,pot,ta,Wk,_ot,YAe,uot,bot,xf,vot,KAe,Fot,Tot,gte,Mot,Eot,Cot,_w,wot,Kr,Qk,Aot,ZAe,Lot,yot,Bn,xot,e7e,$ot,kot,o7e,Sot,Rot,r7e,Pot,Bot,Iot,ke,uw,t7e,Not,qot,hte,jot,Dot,Got,bw,a7e,Oot,Vot,pte,Xot,zot,Wot,vw,n7e,Qot,Uot,_te,Hot,Jot,Yot,Fw,s7e,Kot,Zot,ute,ert,ort,rrt,Tw,l7e,trt,art,bte,nrt,srt,lrt,Mw,i7e,irt,drt,vte,crt,frt,mrt,Ew,d7e,grt,hrt,Fte,prt,_rt,urt,Cw,c7e,brt,vrt,Tte,Frt,Trt,Mrt,ww,f7e,Ert,Crt,Mte,wrt,Art,Lrt,Aw,m7e,yrt,xrt,Ete,$rt,krt,Srt,Lw,vHe,$f,yw,g7e,Uk,Rrt,h7e,Prt,FHe,Cr,Hk,Brt,kf,Irt,Cte,Nrt,qrt,wte,jrt,Drt,Grt,Jk,Ort,p7e,Vrt,Xrt,zrt,aa,Yk,Wrt,_7e,Qrt,Urt,Sf,Hrt,u7e,Jrt,Yrt,Ate,Krt,Zrt,ett,xw,ott,Zr,Kk,rtt,b7e,ttt,att,In,ntt,v7e,stt,ltt,F7e,itt,dtt,T7e,ctt,ftt,mtt,Se,$w,M7e,gtt,htt,Lte,ptt,_tt,utt,kw,E7e,btt,vtt,yte,Ftt,Ttt,Mtt,Sw,C7e,Ett,Ctt,xte,wtt,Att,Ltt,Rw,w7e,ytt,xtt,$te,$tt,ktt,Stt,Pw,A7e,Rtt,Ptt,kte,Btt,Itt,Ntt,Bw,L7e,qtt,jtt,Ste,Dtt,Gtt,Ott,Iw,y7e,Vtt,Xtt,Rte,ztt,Wtt,Qtt,Nw,x7e,Utt,Htt,Pte,Jtt,Ytt,Ktt,qw,$7e,Ztt,eat,Bte,oat,rat,tat,jw,k7e,aat,nat,Ite,sat,lat,iat,Dw,THe,Rf,Gw,S7e,Zk,dat,R7e,cat,MHe,wr,eS,fat,Pf,mat,Nte,gat,hat,qte,pat,_at,uat,oS,bat,P7e,vat,Fat,Tat,na,rS,Mat,B7e,Eat,Cat,Bf,wat,I7e,Aat,Lat,jte,yat,xat,$at,Ow,kat,et,tS,Sat,N7e,Rat,Pat,Nn,Bat,q7e,Iat,Nat,j7e,qat,jat,D7e,Dat,Gat,Oat,Re,Vw,G7e,Vat,Xat,Dte,zat,Wat,Qat,Xw,O7e,Uat,Hat,Gte,Jat,Yat,Kat,zw,V7e,Zat,ent,Ote,ont,rnt,tnt,Ww,X7e,ant,nnt,Vte,snt,lnt,int,Qw,z7e,dnt,cnt,Xte,fnt,mnt,gnt,Uw,W7e,hnt,pnt,zte,_nt,unt,bnt,Hw,Q7e,vnt,Fnt,Wte,Tnt,Mnt,Ent,Jw,U7e,Cnt,wnt,Qte,Ant,Lnt,ynt,Yw,H7e,xnt,$nt,Ute,knt,Snt,Rnt,Kw,J7e,Pnt,Bnt,Hte,Int,Nnt,qnt,Zw,EHe,If,eA,Y7e,aS,jnt,K7e,Dnt,CHe,Ar,nS,Gnt,Nf,Ont,Jte,Vnt,Xnt,Yte,znt,Wnt,Qnt,sS,Unt,Z7e,Hnt,Jnt,Ynt,sa,lS,Knt,eLe,Znt,est,qf,ost,oLe,rst,tst,Kte,ast,nst,sst,oA,lst,ot,iS,ist,rLe,dst,cst,qn,fst,tLe,mst,gst,aLe,hst,pst,nLe,_st,ust,bst,Xe,rA,sLe,vst,Fst,Zte,Tst,Mst,Est,tA,lLe,Cst,wst,eae,Ast,Lst,yst,aA,iLe,xst,$st,oae,kst,Sst,Rst,nA,dLe,Pst,Bst,rae,Ist,Nst,qst,sA,cLe,jst,Dst,tae,Gst,Ost,Vst,lA,fLe,Xst,zst,aae,Wst,Qst,Ust,iA,mLe,Hst,Jst,nae,Yst,Kst,Zst,dA,gLe,elt,olt,sae,rlt,tlt,alt,cA,wHe,jf,fA,hLe,dS,nlt,pLe,slt,AHe,Lr,cS,llt,Df,ilt,lae,dlt,clt,iae,flt,mlt,glt,fS,hlt,_Le,plt,_lt,ult,la,mS,blt,uLe,vlt,Flt,Gf,Tlt,bLe,Mlt,Elt,dae,Clt,wlt,Alt,mA,Llt,rt,gS,ylt,vLe,xlt,$lt,jn,klt,FLe,Slt,Rlt,TLe,Plt,Blt,MLe,Ilt,Nlt,qlt,ze,gA,ELe,jlt,Dlt,cae,Glt,Olt,Vlt,hA,CLe,Xlt,zlt,fae,Wlt,Qlt,Ult,pA,wLe,Hlt,Jlt,mae,Ylt,Klt,Zlt,_A,ALe,eit,oit,gae,rit,tit,ait,uA,LLe,nit,sit,hae,lit,iit,dit,bA,yLe,cit,fit,pae,mit,git,hit,vA,xLe,pit,_it,_ae,uit,bit,vit,FA,$Le,Fit,Tit,uae,Mit,Eit,Cit,TA,LHe,Of,MA,kLe,hS,wit,SLe,Ait,yHe,yr,pS,Lit,Vf,yit,bae,xit,$it,vae,kit,Sit,Rit,_S,Pit,RLe,Bit,Iit,Nit,ia,uS,qit,PLe,jit,Dit,Xf,Git,BLe,Oit,Vit,Fae,Xit,zit,Wit,EA,Qit,tt,bS,Uit,ILe,Hit,Jit,Dn,Yit,NLe,Kit,Zit,qLe,edt,odt,jLe,rdt,tdt,adt,DLe,CA,GLe,ndt,sdt,Tae,ldt,idt,ddt,wA,xHe,zf,AA,OLe,vS,cdt,VLe,fdt,$He,xr,FS,mdt,Wf,gdt,Mae,hdt,pdt,Eae,_dt,udt,bdt,TS,vdt,XLe,Fdt,Tdt,Mdt,da,MS,Edt,zLe,Cdt,wdt,Qf,Adt,WLe,Ldt,ydt,Cae,xdt,$dt,kdt,LA,Sdt,at,ES,Rdt,QLe,Pdt,Bdt,Gn,Idt,ULe,Ndt,qdt,HLe,jdt,Ddt,JLe,Gdt,Odt,Vdt,CS,yA,YLe,Xdt,zdt,wae,Wdt,Qdt,Udt,xA,KLe,Hdt,Jdt,Aae,Ydt,Kdt,Zdt,$A,kHe,Uf,kA,ZLe,wS,ect,eye,oct,SHe,$r,AS,rct,Hf,tct,Lae,act,nct,yae,sct,lct,ict,LS,dct,oye,cct,fct,mct,ca,yS,gct,rye,hct,pct,Jf,_ct,tye,uct,bct,xae,vct,Fct,Tct,SA,Mct,nt,xS,Ect,aye,Cct,wct,On,Act,nye,Lct,yct,sye,xct,$ct,lye,kct,Sct,Rct,iye,RA,dye,Pct,Bct,$ae,Ict,Nct,qct,PA,RHe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),dy=new oe({}),cy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nm=new jct({props:{warning:!0,$$slots:{default:[Uoa]},$$scope:{ctx:$}}}),fy=new oe({}),my=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/configuration_auto.py#L620"}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/configuration_auto.py#L643"}}),Fh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Hoa]},$$scope:{ctx:$}}}),_y=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/configuration_auto.py#L766"}}),uy=new oe({}),by=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/tokenization_auto.py#L418"}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18602/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/tokenization_auto.py#L432"}}),rp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Joa]},$$scope:{ctx:$}}}),My=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/tokenization_auto.py#L633"}}),Ey=new oe({}),Cy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/feature_extraction_auto.py#L198"}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18602/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/feature_extraction_auto.py#L212"}}),Op=new jct({props:{$$slots:{default:[Yoa]},$$scope:{ctx:$}}}),Vp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Koa]},$$scope:{ctx:$}}}),yy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/feature_extraction_auto.py#L339"}}),xy=new oe({}),$y=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/processing_auto.py#L90"}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/processing_auto.py#L104"}}),f_=new jct({props:{$$slots:{default:[Zoa]},$$scope:{ctx:$}}}),m_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[era]},$$scope:{ctx:$}}}),Py=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/processing_auto.py#L257"}}),By=new oe({}),Iy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L807"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),p_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[ora]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[rra]},$$scope:{ctx:$}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L814"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[tra]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),F1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ara]},$$scope:{ctx:$}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L829"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),M1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[nra]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),cb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[sra]},$$scope:{ctx:$}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L836"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),mb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[lra]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),Kb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ira]},$$scope:{ctx:$}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L843"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),ev=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dra]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cra]},$$scope:{ctx:$}}}),s9=new oe({}),l9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L852"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[fra]},$$scope:{ctx:$}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mra]},$$scope:{ctx:$}}}),f9=new oe({}),m9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L897"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[gra]},$$scope:{ctx:$}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hra]},$$scope:{ctx:$}}}),_9=new oe({}),u9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L904"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),s6=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pra]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_ra]},$$scope:{ctx:$}}}),T9=new oe({}),M9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L890"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),_6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ura]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bra]},$$scope:{ctx:$}}}),A9=new oe({}),L9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L861"}}),x9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vra]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Fra]},$$scope:{ctx:$}}}),k9=new oe({}),S9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L868"}}),P9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Tra]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Mra]},$$scope:{ctx:$}}}),I9=new oe({}),N9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L913"}}),j9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Era]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Cra]},$$scope:{ctx:$}}}),G9=new oe({}),O9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L952"}}),X9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[wra]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Ara]},$$scope:{ctx:$}}}),W9=new oe({}),Q9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L959"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Lra]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yra]},$$scope:{ctx:$}}}),Y9=new oe({}),K9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L879"}}),ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[xra]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[$ra]},$$scope:{ctx:$}}}),rx=new oe({}),tx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L966"}}),nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kra]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Sra]},$$scope:{ctx:$}}}),lx=new oe({}),ix=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L989"}}),cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Rra]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Pra]},$$scope:{ctx:$}}}),mx=new oe({}),gx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L973"}}),px=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),r8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Bra]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),h8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Ira]},$$scope:{ctx:$}}}),ux=new oe({}),bx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L980"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),_8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Nra]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),F8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qra]},$$scope:{ctx:$}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L998"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jra]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),x8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Dra]},$$scope:{ctx:$}}}),yx=new oe({}),xx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L1005"}}),kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),k8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Gra]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),N8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Ora]},$$scope:{ctx:$}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L945"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),j8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Vra]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),V8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Xra]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L920"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),z8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zra]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Wra]},$$scope:{ctx:$}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L927"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),J8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Qra]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ura]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_auto.py#L936"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Hra]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Jra]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Yra]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Kra]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),i$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Zra]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eta]},$$scope:{ctx:$}}}),c$=new oe({}),f$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),g$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[ota]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rta]},$$scope:{ctx:$}}}),p$=new oe({}),_$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),b$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18602/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tta]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ata]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L463"}}),E$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[nta]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[sta]},$$scope:{ctx:$}}}),A$=new oe({}),L$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),x$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[lta]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ita]},$$scope:{ctx:$}}}),k$=new oe({}),S$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),P$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dta]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cta]},$$scope:{ctx:$}}}),I$=new oe({}),N$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),j$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fta]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mta]},$$scope:{ctx:$}}}),G$=new oe({}),O$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),X$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gta]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hta]},$$scope:{ctx:$}}}),W$=new oe({}),Q$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),H$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pta]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_ta]},$$scope:{ctx:$}}}),K$=new oe({}),Z$=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),ok=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[uta]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),tk=new oe({}),ak=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),sk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Fta]},$$scope:{ctx:$}}}),ik=new oe({}),dk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),fk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Mta]},$$scope:{ctx:$}}}),gk=new oe({}),hk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),_k=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),bk=new oe({}),vk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),Tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),Mk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),Ek=new oe({}),Ck=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),Lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),yk=new oe({}),xk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),kk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),Sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),Rk=new oe({}),Pk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),Nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),qk=new oe({}),jk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),Ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),Vk=new oe({}),Xk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Wk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),Uk=new oe({}),Hk=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Yk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),Kk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),Zk=new oe({}),eS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),rS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),tS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),Zw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),aS=new oe({}),nS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),lS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),oA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),iS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),cA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),dS=new oe({}),cS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),mS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),mA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),gS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),hS=new oe({}),pS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),uS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),bS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),wA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),vS=new oe({}),FS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),MS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),ES=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),wS=new oe({}),AS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),yS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L389"}}),SA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),xS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18602/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18602/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18602/src/transformers/models/auto/auto_factory.py#L417"}}),PA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),em=l(),ft=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),ny=o("from_pretrained()"),om=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),zi=o("Instantiating one of "),Xn=a("a"),sy=o("AutoConfig"),zn=o(", "),Wn=a("a"),ly=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),iy=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rm=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),ZR=o("will create a model that is an instance of "),Ui=a("a"),eP=o("BertModel"),oP=o("."),Lo=l(),Da=a("p"),rP=o("There is one class of "),tm=a("code"),tP=o("AutoModel"),UYe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),CQe=l(),Hi=a("h2"),am=a("a"),yse=a("span"),F(dy.$$.fragment),HYe=l(),xse=a("span"),JYe=o("Extending the Auto Classes"),wQe=l(),Un=a("p"),YYe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$se=a("code"),KYe=o("NewModel"),ZYe=o(", make sure you have a "),kse=a("code"),eKe=o("NewModelConfig"),oKe=o(` then you can add those to the auto
classes like this:`),AQe=l(),F(cy.$$.fragment),LQe=l(),aP=a("p"),rKe=o("You will then be able to use the auto classes like you would usually do!"),yQe=l(),F(nm.$$.fragment),xQe=l(),Ji=a("h2"),sm=a("a"),Sse=a("span"),F(fy.$$.fragment),tKe=l(),Rse=a("span"),aKe=o("AutoConfig"),$Qe=l(),yo=a("div"),F(my.$$.fragment),nKe=l(),gy=a("p"),sKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),nP=a("a"),lKe=o("from_pretrained()"),iKe=o(" class method."),dKe=l(),hy=a("p"),cKe=o("This class cannot be instantiated directly using "),Pse=a("code"),fKe=o("__init__()"),mKe=o(" (throws an error)."),gKe=l(),kr=a("div"),F(py.$$.fragment),hKe=l(),Bse=a("p"),pKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),_Ke=l(),Yi=a("p"),uKe=o("The configuration class to instantiate is selected based on the "),Ise=a("code"),bKe=o("model_type"),vKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nse=a("code"),FKe=o("pretrained_model_name_or_path"),TKe=o(":"),MKe=l(),A=a("ul"),lm=a("li"),qse=a("strong"),EKe=o("albert"),CKe=o(" \u2014 "),sP=a("a"),wKe=o("AlbertConfig"),AKe=o(" (ALBERT model)"),LKe=l(),im=a("li"),jse=a("strong"),yKe=o("bart"),xKe=o(" \u2014 "),lP=a("a"),$Ke=o("BartConfig"),kKe=o(" (BART model)"),SKe=l(),dm=a("li"),Dse=a("strong"),RKe=o("beit"),PKe=o(" \u2014 "),iP=a("a"),BKe=o("BeitConfig"),IKe=o(" (BEiT model)"),NKe=l(),cm=a("li"),Gse=a("strong"),qKe=o("bert"),jKe=o(" \u2014 "),dP=a("a"),DKe=o("BertConfig"),GKe=o(" (BERT model)"),OKe=l(),fm=a("li"),Ose=a("strong"),VKe=o("bert-generation"),XKe=o(" \u2014 "),cP=a("a"),zKe=o("BertGenerationConfig"),WKe=o(" (Bert Generation model)"),QKe=l(),mm=a("li"),Vse=a("strong"),UKe=o("big_bird"),HKe=o(" \u2014 "),fP=a("a"),JKe=o("BigBirdConfig"),YKe=o(" (BigBird model)"),KKe=l(),gm=a("li"),Xse=a("strong"),ZKe=o("bigbird_pegasus"),eZe=o(" \u2014 "),mP=a("a"),oZe=o("BigBirdPegasusConfig"),rZe=o(" (BigBird-Pegasus model)"),tZe=l(),hm=a("li"),zse=a("strong"),aZe=o("blenderbot"),nZe=o(" \u2014 "),gP=a("a"),sZe=o("BlenderbotConfig"),lZe=o(" (Blenderbot model)"),iZe=l(),pm=a("li"),Wse=a("strong"),dZe=o("blenderbot-small"),cZe=o(" \u2014 "),hP=a("a"),fZe=o("BlenderbotSmallConfig"),mZe=o(" (BlenderbotSmall model)"),gZe=l(),_m=a("li"),Qse=a("strong"),hZe=o("bloom"),pZe=o(" \u2014 "),pP=a("a"),_Ze=o("BloomConfig"),uZe=o(" (BLOOM model)"),bZe=l(),um=a("li"),Use=a("strong"),vZe=o("camembert"),FZe=o(" \u2014 "),_P=a("a"),TZe=o("CamembertConfig"),MZe=o(" (CamemBERT model)"),EZe=l(),bm=a("li"),Hse=a("strong"),CZe=o("canine"),wZe=o(" \u2014 "),uP=a("a"),AZe=o("CanineConfig"),LZe=o(" (CANINE model)"),yZe=l(),vm=a("li"),Jse=a("strong"),xZe=o("clip"),$Ze=o(" \u2014 "),bP=a("a"),kZe=o("CLIPConfig"),SZe=o(" (CLIP model)"),RZe=l(),Fm=a("li"),Yse=a("strong"),PZe=o("codegen"),BZe=o(" \u2014 "),vP=a("a"),IZe=o("CodeGenConfig"),NZe=o(" (CodeGen model)"),qZe=l(),Tm=a("li"),Kse=a("strong"),jZe=o("convbert"),DZe=o(" \u2014 "),FP=a("a"),GZe=o("ConvBertConfig"),OZe=o(" (ConvBERT model)"),VZe=l(),Mm=a("li"),Zse=a("strong"),XZe=o("convnext"),zZe=o(" \u2014 "),TP=a("a"),WZe=o("ConvNextConfig"),QZe=o(" (ConvNeXT model)"),UZe=l(),Em=a("li"),ele=a("strong"),HZe=o("ctrl"),JZe=o(" \u2014 "),MP=a("a"),YZe=o("CTRLConfig"),KZe=o(" (CTRL model)"),ZZe=l(),Cm=a("li"),ole=a("strong"),eeo=o("cvt"),oeo=o(" \u2014 "),EP=a("a"),reo=o("CvtConfig"),teo=o(" (CvT model)"),aeo=l(),wm=a("li"),rle=a("strong"),neo=o("data2vec-audio"),seo=o(" \u2014 "),CP=a("a"),leo=o("Data2VecAudioConfig"),ieo=o(" (Data2VecAudio model)"),deo=l(),Am=a("li"),tle=a("strong"),ceo=o("data2vec-text"),feo=o(" \u2014 "),wP=a("a"),meo=o("Data2VecTextConfig"),geo=o(" (Data2VecText model)"),heo=l(),Lm=a("li"),ale=a("strong"),peo=o("data2vec-vision"),_eo=o(" \u2014 "),AP=a("a"),ueo=o("Data2VecVisionConfig"),beo=o(" (Data2VecVision model)"),veo=l(),ym=a("li"),nle=a("strong"),Feo=o("deberta"),Teo=o(" \u2014 "),LP=a("a"),Meo=o("DebertaConfig"),Eeo=o(" (DeBERTa model)"),Ceo=l(),xm=a("li"),sle=a("strong"),weo=o("deberta-v2"),Aeo=o(" \u2014 "),yP=a("a"),Leo=o("DebertaV2Config"),yeo=o(" (DeBERTa-v2 model)"),xeo=l(),$m=a("li"),lle=a("strong"),$eo=o("decision_transformer"),keo=o(" \u2014 "),xP=a("a"),Seo=o("DecisionTransformerConfig"),Reo=o(" (Decision Transformer model)"),Peo=l(),km=a("li"),ile=a("strong"),Beo=o("deit"),Ieo=o(" \u2014 "),$P=a("a"),Neo=o("DeiTConfig"),qeo=o(" (DeiT model)"),jeo=l(),Sm=a("li"),dle=a("strong"),Deo=o("detr"),Geo=o(" \u2014 "),kP=a("a"),Oeo=o("DetrConfig"),Veo=o(" (DETR model)"),Xeo=l(),Rm=a("li"),cle=a("strong"),zeo=o("distilbert"),Weo=o(" \u2014 "),SP=a("a"),Qeo=o("DistilBertConfig"),Ueo=o(" (DistilBERT model)"),Heo=l(),Pm=a("li"),fle=a("strong"),Jeo=o("dpr"),Yeo=o(" \u2014 "),RP=a("a"),Keo=o("DPRConfig"),Zeo=o(" (DPR model)"),eoo=l(),Bm=a("li"),mle=a("strong"),ooo=o("dpt"),roo=o(" \u2014 "),PP=a("a"),too=o("DPTConfig"),aoo=o(" (DPT model)"),noo=l(),Im=a("li"),gle=a("strong"),soo=o("electra"),loo=o(" \u2014 "),BP=a("a"),ioo=o("ElectraConfig"),doo=o(" (ELECTRA model)"),coo=l(),Nm=a("li"),hle=a("strong"),foo=o("encoder-decoder"),moo=o(" \u2014 "),IP=a("a"),goo=o("EncoderDecoderConfig"),hoo=o(" (Encoder decoder model)"),poo=l(),qm=a("li"),ple=a("strong"),_oo=o("flaubert"),uoo=o(" \u2014 "),NP=a("a"),boo=o("FlaubertConfig"),voo=o(" (FlauBERT model)"),Foo=l(),jm=a("li"),_le=a("strong"),Too=o("flava"),Moo=o(" \u2014 "),qP=a("a"),Eoo=o("FlavaConfig"),Coo=o(" (FLAVA model)"),woo=l(),Dm=a("li"),ule=a("strong"),Aoo=o("fnet"),Loo=o(" \u2014 "),jP=a("a"),yoo=o("FNetConfig"),xoo=o(" (FNet model)"),$oo=l(),Gm=a("li"),ble=a("strong"),koo=o("fsmt"),Soo=o(" \u2014 "),DP=a("a"),Roo=o("FSMTConfig"),Poo=o(" (FairSeq Machine-Translation model)"),Boo=l(),Om=a("li"),vle=a("strong"),Ioo=o("funnel"),Noo=o(" \u2014 "),GP=a("a"),qoo=o("FunnelConfig"),joo=o(" (Funnel Transformer model)"),Doo=l(),Vm=a("li"),Fle=a("strong"),Goo=o("glpn"),Ooo=o(" \u2014 "),OP=a("a"),Voo=o("GLPNConfig"),Xoo=o(" (GLPN model)"),zoo=l(),Xm=a("li"),Tle=a("strong"),Woo=o("gpt2"),Qoo=o(" \u2014 "),VP=a("a"),Uoo=o("GPT2Config"),Hoo=o(" (OpenAI GPT-2 model)"),Joo=l(),zm=a("li"),Mle=a("strong"),Yoo=o("gpt_neo"),Koo=o(" \u2014 "),XP=a("a"),Zoo=o("GPTNeoConfig"),ero=o(" (GPT Neo model)"),oro=l(),Wm=a("li"),Ele=a("strong"),rro=o("gpt_neox"),tro=o(" \u2014 "),zP=a("a"),aro=o("GPTNeoXConfig"),nro=o(" (GPT NeoX model)"),sro=l(),Qm=a("li"),Cle=a("strong"),lro=o("gptj"),iro=o(" \u2014 "),WP=a("a"),dro=o("GPTJConfig"),cro=o(" (GPT-J model)"),fro=l(),Um=a("li"),wle=a("strong"),mro=o("groupvit"),gro=o(" \u2014 "),QP=a("a"),hro=o("GroupViTConfig"),pro=o(" (GroupViT model)"),_ro=l(),Hm=a("li"),Ale=a("strong"),uro=o("hubert"),bro=o(" \u2014 "),UP=a("a"),vro=o("HubertConfig"),Fro=o(" (Hubert model)"),Tro=l(),Jm=a("li"),Lle=a("strong"),Mro=o("ibert"),Ero=o(" \u2014 "),HP=a("a"),Cro=o("IBertConfig"),wro=o(" (I-BERT model)"),Aro=l(),Ym=a("li"),yle=a("strong"),Lro=o("imagegpt"),yro=o(" \u2014 "),JP=a("a"),xro=o("ImageGPTConfig"),$ro=o(" (ImageGPT model)"),kro=l(),Km=a("li"),xle=a("strong"),Sro=o("layoutlm"),Rro=o(" \u2014 "),YP=a("a"),Pro=o("LayoutLMConfig"),Bro=o(" (LayoutLM model)"),Iro=l(),Zm=a("li"),$le=a("strong"),Nro=o("layoutlmv2"),qro=o(" \u2014 "),KP=a("a"),jro=o("LayoutLMv2Config"),Dro=o(" (LayoutLMv2 model)"),Gro=l(),eg=a("li"),kle=a("strong"),Oro=o("layoutlmv3"),Vro=o(" \u2014 "),ZP=a("a"),Xro=o("LayoutLMv3Config"),zro=o(" (LayoutLMv3 model)"),Wro=l(),og=a("li"),Sle=a("strong"),Qro=o("led"),Uro=o(" \u2014 "),eB=a("a"),Hro=o("LEDConfig"),Jro=o(" (LED model)"),Yro=l(),rg=a("li"),Rle=a("strong"),Kro=o("levit"),Zro=o(" \u2014 "),oB=a("a"),eto=o("LevitConfig"),oto=o(" (LeViT model)"),rto=l(),tg=a("li"),Ple=a("strong"),tto=o("longformer"),ato=o(" \u2014 "),rB=a("a"),nto=o("LongformerConfig"),sto=o(" (Longformer model)"),lto=l(),ag=a("li"),Ble=a("strong"),ito=o("longt5"),dto=o(" \u2014 "),tB=a("a"),cto=o("LongT5Config"),fto=o(" (LongT5 model)"),mto=l(),ng=a("li"),Ile=a("strong"),gto=o("luke"),hto=o(" \u2014 "),aB=a("a"),pto=o("LukeConfig"),_to=o(" (LUKE model)"),uto=l(),sg=a("li"),Nle=a("strong"),bto=o("lxmert"),vto=o(" \u2014 "),nB=a("a"),Fto=o("LxmertConfig"),Tto=o(" (LXMERT model)"),Mto=l(),lg=a("li"),qle=a("strong"),Eto=o("m2m_100"),Cto=o(" \u2014 "),sB=a("a"),wto=o("M2M100Config"),Ato=o(" (M2M100 model)"),Lto=l(),ig=a("li"),jle=a("strong"),yto=o("marian"),xto=o(" \u2014 "),lB=a("a"),$to=o("MarianConfig"),kto=o(" (Marian model)"),Sto=l(),dg=a("li"),Dle=a("strong"),Rto=o("maskformer"),Pto=o(" \u2014 "),iB=a("a"),Bto=o("MaskFormerConfig"),Ito=o(" (MaskFormer model)"),Nto=l(),cg=a("li"),Gle=a("strong"),qto=o("mbart"),jto=o(" \u2014 "),dB=a("a"),Dto=o("MBartConfig"),Gto=o(" (mBART model)"),Oto=l(),fg=a("li"),Ole=a("strong"),Vto=o("mctct"),Xto=o(" \u2014 "),cB=a("a"),zto=o("MCTCTConfig"),Wto=o(" (M-CTC-T model)"),Qto=l(),mg=a("li"),Vle=a("strong"),Uto=o("megatron-bert"),Hto=o(" \u2014 "),fB=a("a"),Jto=o("MegatronBertConfig"),Yto=o(" (Megatron-BERT model)"),Kto=l(),gg=a("li"),Xle=a("strong"),Zto=o("mobilebert"),eao=o(" \u2014 "),mB=a("a"),oao=o("MobileBertConfig"),rao=o(" (MobileBERT model)"),tao=l(),hg=a("li"),zle=a("strong"),aao=o("mobilevit"),nao=o(" \u2014 "),gB=a("a"),sao=o("MobileViTConfig"),lao=o(" (MobileViT model)"),iao=l(),pg=a("li"),Wle=a("strong"),dao=o("mpnet"),cao=o(" \u2014 "),hB=a("a"),fao=o("MPNetConfig"),mao=o(" (MPNet model)"),gao=l(),_g=a("li"),Qle=a("strong"),hao=o("mt5"),pao=o(" \u2014 "),pB=a("a"),_ao=o("MT5Config"),uao=o(" (MT5 model)"),bao=l(),ug=a("li"),Ule=a("strong"),vao=o("mvp"),Fao=o(" \u2014 "),_B=a("a"),Tao=o("MvpConfig"),Mao=o(" (MVP model)"),Eao=l(),bg=a("li"),Hle=a("strong"),Cao=o("nezha"),wao=o(" \u2014 "),uB=a("a"),Aao=o("NezhaConfig"),Lao=o(" (Nezha model)"),yao=l(),vg=a("li"),Jle=a("strong"),xao=o("nystromformer"),$ao=o(" \u2014 "),bB=a("a"),kao=o("NystromformerConfig"),Sao=o(" (Nystr\xF6mformer model)"),Rao=l(),Fg=a("li"),Yle=a("strong"),Pao=o("openai-gpt"),Bao=o(" \u2014 "),vB=a("a"),Iao=o("OpenAIGPTConfig"),Nao=o(" (OpenAI GPT model)"),qao=l(),Tg=a("li"),Kle=a("strong"),jao=o("opt"),Dao=o(" \u2014 "),FB=a("a"),Gao=o("OPTConfig"),Oao=o(" (OPT model)"),Vao=l(),Mg=a("li"),Zle=a("strong"),Xao=o("owlvit"),zao=o(" \u2014 "),TB=a("a"),Wao=o("OwlViTConfig"),Qao=o(" (OWL-ViT model)"),Uao=l(),Eg=a("li"),eie=a("strong"),Hao=o("pegasus"),Jao=o(" \u2014 "),MB=a("a"),Yao=o("PegasusConfig"),Kao=o(" (Pegasus model)"),Zao=l(),Cg=a("li"),oie=a("strong"),eno=o("perceiver"),ono=o(" \u2014 "),EB=a("a"),rno=o("PerceiverConfig"),tno=o(" (Perceiver model)"),ano=l(),wg=a("li"),rie=a("strong"),nno=o("plbart"),sno=o(" \u2014 "),CB=a("a"),lno=o("PLBartConfig"),ino=o(" (PLBart model)"),dno=l(),Ag=a("li"),tie=a("strong"),cno=o("poolformer"),fno=o(" \u2014 "),wB=a("a"),mno=o("PoolFormerConfig"),gno=o(" (PoolFormer model)"),hno=l(),Lg=a("li"),aie=a("strong"),pno=o("prophetnet"),_no=o(" \u2014 "),AB=a("a"),uno=o("ProphetNetConfig"),bno=o(" (ProphetNet model)"),vno=l(),yg=a("li"),nie=a("strong"),Fno=o("qdqbert"),Tno=o(" \u2014 "),LB=a("a"),Mno=o("QDQBertConfig"),Eno=o(" (QDQBert model)"),Cno=l(),xg=a("li"),sie=a("strong"),wno=o("rag"),Ano=o(" \u2014 "),yB=a("a"),Lno=o("RagConfig"),yno=o(" (RAG model)"),xno=l(),$g=a("li"),lie=a("strong"),$no=o("realm"),kno=o(" \u2014 "),xB=a("a"),Sno=o("RealmConfig"),Rno=o(" (REALM model)"),Pno=l(),kg=a("li"),iie=a("strong"),Bno=o("reformer"),Ino=o(" \u2014 "),$B=a("a"),Nno=o("ReformerConfig"),qno=o(" (Reformer model)"),jno=l(),Sg=a("li"),die=a("strong"),Dno=o("regnet"),Gno=o(" \u2014 "),kB=a("a"),Ono=o("RegNetConfig"),Vno=o(" (RegNet model)"),Xno=l(),Rg=a("li"),cie=a("strong"),zno=o("rembert"),Wno=o(" \u2014 "),SB=a("a"),Qno=o("RemBertConfig"),Uno=o(" (RemBERT model)"),Hno=l(),Pg=a("li"),fie=a("strong"),Jno=o("resnet"),Yno=o(" \u2014 "),RB=a("a"),Kno=o("ResNetConfig"),Zno=o(" (ResNet model)"),eso=l(),Bg=a("li"),mie=a("strong"),oso=o("retribert"),rso=o(" \u2014 "),PB=a("a"),tso=o("RetriBertConfig"),aso=o(" (RetriBERT model)"),nso=l(),Ig=a("li"),gie=a("strong"),sso=o("roberta"),lso=o(" \u2014 "),BB=a("a"),iso=o("RobertaConfig"),dso=o(" (RoBERTa model)"),cso=l(),Ng=a("li"),hie=a("strong"),fso=o("roformer"),mso=o(" \u2014 "),IB=a("a"),gso=o("RoFormerConfig"),hso=o(" (RoFormer model)"),pso=l(),qg=a("li"),pie=a("strong"),_so=o("segformer"),uso=o(" \u2014 "),NB=a("a"),bso=o("SegformerConfig"),vso=o(" (SegFormer model)"),Fso=l(),jg=a("li"),_ie=a("strong"),Tso=o("sew"),Mso=o(" \u2014 "),qB=a("a"),Eso=o("SEWConfig"),Cso=o(" (SEW model)"),wso=l(),Dg=a("li"),uie=a("strong"),Aso=o("sew-d"),Lso=o(" \u2014 "),jB=a("a"),yso=o("SEWDConfig"),xso=o(" (SEW-D model)"),$so=l(),Gg=a("li"),bie=a("strong"),kso=o("speech-encoder-decoder"),Sso=o(" \u2014 "),DB=a("a"),Rso=o("SpeechEncoderDecoderConfig"),Pso=o(" (Speech Encoder decoder model)"),Bso=l(),Og=a("li"),vie=a("strong"),Iso=o("speech_to_text"),Nso=o(" \u2014 "),GB=a("a"),qso=o("Speech2TextConfig"),jso=o(" (Speech2Text model)"),Dso=l(),Vg=a("li"),Fie=a("strong"),Gso=o("speech_to_text_2"),Oso=o(" \u2014 "),OB=a("a"),Vso=o("Speech2Text2Config"),Xso=o(" (Speech2Text2 model)"),zso=l(),Xg=a("li"),Tie=a("strong"),Wso=o("splinter"),Qso=o(" \u2014 "),VB=a("a"),Uso=o("SplinterConfig"),Hso=o(" (Splinter model)"),Jso=l(),zg=a("li"),Mie=a("strong"),Yso=o("squeezebert"),Kso=o(" \u2014 "),XB=a("a"),Zso=o("SqueezeBertConfig"),elo=o(" (SqueezeBERT model)"),olo=l(),Wg=a("li"),Eie=a("strong"),rlo=o("swin"),tlo=o(" \u2014 "),zB=a("a"),alo=o("SwinConfig"),nlo=o(" (Swin Transformer model)"),slo=l(),Qg=a("li"),Cie=a("strong"),llo=o("swinv2"),ilo=o(" \u2014 "),WB=a("a"),dlo=o("Swinv2Config"),clo=o(" (Swin Transformer V2 model)"),flo=l(),Ug=a("li"),wie=a("strong"),mlo=o("t5"),glo=o(" \u2014 "),QB=a("a"),hlo=o("T5Config"),plo=o(" (T5 model)"),_lo=l(),Hg=a("li"),Aie=a("strong"),ulo=o("tapas"),blo=o(" \u2014 "),UB=a("a"),vlo=o("TapasConfig"),Flo=o(" (TAPAS model)"),Tlo=l(),Jg=a("li"),Lie=a("strong"),Mlo=o("trajectory_transformer"),Elo=o(" \u2014 "),HB=a("a"),Clo=o("TrajectoryTransformerConfig"),wlo=o(" (Trajectory Transformer model)"),Alo=l(),Yg=a("li"),yie=a("strong"),Llo=o("transfo-xl"),ylo=o(" \u2014 "),JB=a("a"),xlo=o("TransfoXLConfig"),$lo=o(" (Transformer-XL model)"),klo=l(),Kg=a("li"),xie=a("strong"),Slo=o("trocr"),Rlo=o(" \u2014 "),YB=a("a"),Plo=o("TrOCRConfig"),Blo=o(" (TrOCR model)"),Ilo=l(),Zg=a("li"),$ie=a("strong"),Nlo=o("unispeech"),qlo=o(" \u2014 "),KB=a("a"),jlo=o("UniSpeechConfig"),Dlo=o(" (UniSpeech model)"),Glo=l(),eh=a("li"),kie=a("strong"),Olo=o("unispeech-sat"),Vlo=o(" \u2014 "),ZB=a("a"),Xlo=o("UniSpeechSatConfig"),zlo=o(" (UniSpeechSat model)"),Wlo=l(),oh=a("li"),Sie=a("strong"),Qlo=o("van"),Ulo=o(" \u2014 "),eI=a("a"),Hlo=o("VanConfig"),Jlo=o(" (VAN model)"),Ylo=l(),rh=a("li"),Rie=a("strong"),Klo=o("videomae"),Zlo=o(" \u2014 "),oI=a("a"),eio=o("VideoMAEConfig"),oio=o(" (VideoMAE model)"),rio=l(),th=a("li"),Pie=a("strong"),tio=o("vilt"),aio=o(" \u2014 "),rI=a("a"),nio=o("ViltConfig"),sio=o(" (ViLT model)"),lio=l(),ah=a("li"),Bie=a("strong"),iio=o("vision-encoder-decoder"),dio=o(" \u2014 "),tI=a("a"),cio=o("VisionEncoderDecoderConfig"),fio=o(" (Vision Encoder decoder model)"),mio=l(),nh=a("li"),Iie=a("strong"),gio=o("vision-text-dual-encoder"),hio=o(" \u2014 "),aI=a("a"),pio=o("VisionTextDualEncoderConfig"),_io=o(" (VisionTextDualEncoder model)"),uio=l(),sh=a("li"),Nie=a("strong"),bio=o("visual_bert"),vio=o(" \u2014 "),nI=a("a"),Fio=o("VisualBertConfig"),Tio=o(" (VisualBERT model)"),Mio=l(),lh=a("li"),qie=a("strong"),Eio=o("vit"),Cio=o(" \u2014 "),sI=a("a"),wio=o("ViTConfig"),Aio=o(" (ViT model)"),Lio=l(),ih=a("li"),jie=a("strong"),yio=o("vit_mae"),xio=o(" \u2014 "),lI=a("a"),$io=o("ViTMAEConfig"),kio=o(" (ViTMAE model)"),Sio=l(),dh=a("li"),Die=a("strong"),Rio=o("wav2vec2"),Pio=o(" \u2014 "),iI=a("a"),Bio=o("Wav2Vec2Config"),Iio=o(" (Wav2Vec2 model)"),Nio=l(),ch=a("li"),Gie=a("strong"),qio=o("wav2vec2-conformer"),jio=o(" \u2014 "),dI=a("a"),Dio=o("Wav2Vec2ConformerConfig"),Gio=o(" (Wav2Vec2-Conformer model)"),Oio=l(),fh=a("li"),Oie=a("strong"),Vio=o("wavlm"),Xio=o(" \u2014 "),cI=a("a"),zio=o("WavLMConfig"),Wio=o(" (WavLM model)"),Qio=l(),mh=a("li"),Vie=a("strong"),Uio=o("xglm"),Hio=o(" \u2014 "),fI=a("a"),Jio=o("XGLMConfig"),Yio=o(" (XGLM model)"),Kio=l(),gh=a("li"),Xie=a("strong"),Zio=o("xlm"),edo=o(" \u2014 "),mI=a("a"),odo=o("XLMConfig"),rdo=o(" (XLM model)"),tdo=l(),hh=a("li"),zie=a("strong"),ado=o("xlm-prophetnet"),ndo=o(" \u2014 "),gI=a("a"),sdo=o("XLMProphetNetConfig"),ldo=o(" (XLM-ProphetNet model)"),ido=l(),ph=a("li"),Wie=a("strong"),ddo=o("xlm-roberta"),cdo=o(" \u2014 "),hI=a("a"),fdo=o("XLMRobertaConfig"),mdo=o(" (XLM-RoBERTa model)"),gdo=l(),_h=a("li"),Qie=a("strong"),hdo=o("xlm-roberta-xl"),pdo=o(" \u2014 "),pI=a("a"),_do=o("XLMRobertaXLConfig"),udo=o(" (XLM-RoBERTa-XL model)"),bdo=l(),uh=a("li"),Uie=a("strong"),vdo=o("xlnet"),Fdo=o(" \u2014 "),_I=a("a"),Tdo=o("XLNetConfig"),Mdo=o(" (XLNet model)"),Edo=l(),bh=a("li"),Hie=a("strong"),Cdo=o("yolos"),wdo=o(" \u2014 "),uI=a("a"),Ado=o("YolosConfig"),Ldo=o(" (YOLOS model)"),ydo=l(),vh=a("li"),Jie=a("strong"),xdo=o("yoso"),$do=o(" \u2014 "),bI=a("a"),kdo=o("YosoConfig"),Sdo=o(" (YOSO model)"),Rdo=l(),F(Fh.$$.fragment),Pdo=l(),Th=a("div"),F(_y.$$.fragment),Bdo=l(),Yie=a("p"),Ido=o("Register a new configuration for this class."),kQe=l(),Ki=a("h2"),Mh=a("a"),Kie=a("span"),F(uy.$$.fragment),Ndo=l(),Zie=a("span"),qdo=o("AutoTokenizer"),SQe=l(),xo=a("div"),F(by.$$.fragment),jdo=l(),vy=a("p"),Ddo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vI=a("a"),Gdo=o("AutoTokenizer.from_pretrained()"),Odo=o(" class method."),Vdo=l(),Fy=a("p"),Xdo=o("This class cannot be instantiated directly using "),ede=a("code"),zdo=o("__init__()"),Wdo=o(" (throws an error)."),Qdo=l(),Sr=a("div"),F(Ty.$$.fragment),Udo=l(),ode=a("p"),Hdo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Jdo=l(),Ga=a("p"),Ydo=o("The tokenizer class to instantiate is selected based on the "),rde=a("code"),Kdo=o("model_type"),Zdo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),eco=o("pretrained_model_name_or_path"),oco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),rco=o("pretrained_model_name_or_path"),tco=o(":"),aco=l(),k=a("ul"),Hn=a("li"),nde=a("strong"),nco=o("albert"),sco=o(" \u2014 "),FI=a("a"),lco=o("AlbertTokenizer"),ico=o(" or "),TI=a("a"),dco=o("AlbertTokenizerFast"),cco=o(" (ALBERT model)"),fco=l(),Jn=a("li"),sde=a("strong"),mco=o("bart"),gco=o(" \u2014 "),MI=a("a"),hco=o("BartTokenizer"),pco=o(" or "),EI=a("a"),_co=o("BartTokenizerFast"),uco=o(" (BART model)"),bco=l(),Yn=a("li"),lde=a("strong"),vco=o("barthez"),Fco=o(" \u2014 "),CI=a("a"),Tco=o("BarthezTokenizer"),Mco=o(" or "),wI=a("a"),Eco=o("BarthezTokenizerFast"),Cco=o(" (BARThez model)"),wco=l(),Eh=a("li"),ide=a("strong"),Aco=o("bartpho"),Lco=o(" \u2014 "),AI=a("a"),yco=o("BartphoTokenizer"),xco=o(" (BARTpho model)"),$co=l(),Kn=a("li"),dde=a("strong"),kco=o("bert"),Sco=o(" \u2014 "),LI=a("a"),Rco=o("BertTokenizer"),Pco=o(" or "),yI=a("a"),Bco=o("BertTokenizerFast"),Ico=o(" (BERT model)"),Nco=l(),Ch=a("li"),cde=a("strong"),qco=o("bert-generation"),jco=o(" \u2014 "),xI=a("a"),Dco=o("BertGenerationTokenizer"),Gco=o(" (Bert Generation model)"),Oco=l(),wh=a("li"),fde=a("strong"),Vco=o("bert-japanese"),Xco=o(" \u2014 "),$I=a("a"),zco=o("BertJapaneseTokenizer"),Wco=o(" (BertJapanese model)"),Qco=l(),Ah=a("li"),mde=a("strong"),Uco=o("bertweet"),Hco=o(" \u2014 "),kI=a("a"),Jco=o("BertweetTokenizer"),Yco=o(" (BERTweet model)"),Kco=l(),Zn=a("li"),gde=a("strong"),Zco=o("big_bird"),efo=o(" \u2014 "),SI=a("a"),ofo=o("BigBirdTokenizer"),rfo=o(" or "),RI=a("a"),tfo=o("BigBirdTokenizerFast"),afo=o(" (BigBird model)"),nfo=l(),es=a("li"),hde=a("strong"),sfo=o("bigbird_pegasus"),lfo=o(" \u2014 "),PI=a("a"),ifo=o("PegasusTokenizer"),dfo=o(" or "),BI=a("a"),cfo=o("PegasusTokenizerFast"),ffo=o(" (BigBird-Pegasus model)"),mfo=l(),os=a("li"),pde=a("strong"),gfo=o("blenderbot"),hfo=o(" \u2014 "),II=a("a"),pfo=o("BlenderbotTokenizer"),_fo=o(" or "),NI=a("a"),ufo=o("BlenderbotTokenizerFast"),bfo=o(" (Blenderbot model)"),vfo=l(),Lh=a("li"),_de=a("strong"),Ffo=o("blenderbot-small"),Tfo=o(" \u2014 "),qI=a("a"),Mfo=o("BlenderbotSmallTokenizer"),Efo=o(" (BlenderbotSmall model)"),Cfo=l(),yh=a("li"),ude=a("strong"),wfo=o("bloom"),Afo=o(" \u2014 "),jI=a("a"),Lfo=o("BloomTokenizerFast"),yfo=o(" (BLOOM model)"),xfo=l(),xh=a("li"),bde=a("strong"),$fo=o("byt5"),kfo=o(" \u2014 "),DI=a("a"),Sfo=o("ByT5Tokenizer"),Rfo=o(" (ByT5 model)"),Pfo=l(),rs=a("li"),vde=a("strong"),Bfo=o("camembert"),Ifo=o(" \u2014 "),GI=a("a"),Nfo=o("CamembertTokenizer"),qfo=o(" or "),OI=a("a"),jfo=o("CamembertTokenizerFast"),Dfo=o(" (CamemBERT model)"),Gfo=l(),$h=a("li"),Fde=a("strong"),Ofo=o("canine"),Vfo=o(" \u2014 "),VI=a("a"),Xfo=o("CanineTokenizer"),zfo=o(" (CANINE model)"),Wfo=l(),ts=a("li"),Tde=a("strong"),Qfo=o("clip"),Ufo=o(" \u2014 "),XI=a("a"),Hfo=o("CLIPTokenizer"),Jfo=o(" or "),zI=a("a"),Yfo=o("CLIPTokenizerFast"),Kfo=o(" (CLIP model)"),Zfo=l(),as=a("li"),Mde=a("strong"),emo=o("codegen"),omo=o(" \u2014 "),WI=a("a"),rmo=o("CodeGenTokenizer"),tmo=o(" or "),QI=a("a"),amo=o("CodeGenTokenizerFast"),nmo=o(" (CodeGen model)"),smo=l(),ns=a("li"),Ede=a("strong"),lmo=o("convbert"),imo=o(" \u2014 "),UI=a("a"),dmo=o("ConvBertTokenizer"),cmo=o(" or "),HI=a("a"),fmo=o("ConvBertTokenizerFast"),mmo=o(" (ConvBERT model)"),gmo=l(),ss=a("li"),Cde=a("strong"),hmo=o("cpm"),pmo=o(" \u2014 "),JI=a("a"),_mo=o("CpmTokenizer"),umo=o(" or "),YI=a("a"),bmo=o("CpmTokenizerFast"),vmo=o(" (CPM model)"),Fmo=l(),kh=a("li"),wde=a("strong"),Tmo=o("ctrl"),Mmo=o(" \u2014 "),KI=a("a"),Emo=o("CTRLTokenizer"),Cmo=o(" (CTRL model)"),wmo=l(),ls=a("li"),Ade=a("strong"),Amo=o("data2vec-text"),Lmo=o(" \u2014 "),ZI=a("a"),ymo=o("RobertaTokenizer"),xmo=o(" or "),eN=a("a"),$mo=o("RobertaTokenizerFast"),kmo=o(" (Data2VecText model)"),Smo=l(),is=a("li"),Lde=a("strong"),Rmo=o("deberta"),Pmo=o(" \u2014 "),oN=a("a"),Bmo=o("DebertaTokenizer"),Imo=o(" or "),rN=a("a"),Nmo=o("DebertaTokenizerFast"),qmo=o(" (DeBERTa model)"),jmo=l(),ds=a("li"),yde=a("strong"),Dmo=o("deberta-v2"),Gmo=o(" \u2014 "),tN=a("a"),Omo=o("DebertaV2Tokenizer"),Vmo=o(" or "),aN=a("a"),Xmo=o("DebertaV2TokenizerFast"),zmo=o(" (DeBERTa-v2 model)"),Wmo=l(),cs=a("li"),xde=a("strong"),Qmo=o("distilbert"),Umo=o(" \u2014 "),nN=a("a"),Hmo=o("DistilBertTokenizer"),Jmo=o(" or "),sN=a("a"),Ymo=o("DistilBertTokenizerFast"),Kmo=o(" (DistilBERT model)"),Zmo=l(),fs=a("li"),$de=a("strong"),ego=o("dpr"),ogo=o(" \u2014 "),lN=a("a"),rgo=o("DPRQuestionEncoderTokenizer"),tgo=o(" or "),iN=a("a"),ago=o("DPRQuestionEncoderTokenizerFast"),ngo=o(" (DPR model)"),sgo=l(),ms=a("li"),kde=a("strong"),lgo=o("electra"),igo=o(" \u2014 "),dN=a("a"),dgo=o("ElectraTokenizer"),cgo=o(" or "),cN=a("a"),fgo=o("ElectraTokenizerFast"),mgo=o(" (ELECTRA model)"),ggo=l(),Sh=a("li"),Sde=a("strong"),hgo=o("flaubert"),pgo=o(" \u2014 "),fN=a("a"),_go=o("FlaubertTokenizer"),ugo=o(" (FlauBERT model)"),bgo=l(),gs=a("li"),Rde=a("strong"),vgo=o("fnet"),Fgo=o(" \u2014 "),mN=a("a"),Tgo=o("FNetTokenizer"),Mgo=o(" or "),gN=a("a"),Ego=o("FNetTokenizerFast"),Cgo=o(" (FNet model)"),wgo=l(),Rh=a("li"),Pde=a("strong"),Ago=o("fsmt"),Lgo=o(" \u2014 "),hN=a("a"),ygo=o("FSMTTokenizer"),xgo=o(" (FairSeq Machine-Translation model)"),$go=l(),hs=a("li"),Bde=a("strong"),kgo=o("funnel"),Sgo=o(" \u2014 "),pN=a("a"),Rgo=o("FunnelTokenizer"),Pgo=o(" or "),_N=a("a"),Bgo=o("FunnelTokenizerFast"),Igo=o(" (Funnel Transformer model)"),Ngo=l(),ps=a("li"),Ide=a("strong"),qgo=o("gpt2"),jgo=o(" \u2014 "),uN=a("a"),Dgo=o("GPT2Tokenizer"),Ggo=o(" or "),bN=a("a"),Ogo=o("GPT2TokenizerFast"),Vgo=o(" (OpenAI GPT-2 model)"),Xgo=l(),_s=a("li"),Nde=a("strong"),zgo=o("gpt_neo"),Wgo=o(" \u2014 "),vN=a("a"),Qgo=o("GPT2Tokenizer"),Ugo=o(" or "),FN=a("a"),Hgo=o("GPT2TokenizerFast"),Jgo=o(" (GPT Neo model)"),Ygo=l(),Ph=a("li"),qde=a("strong"),Kgo=o("gpt_neox"),Zgo=o(" \u2014 "),TN=a("a"),eho=o("GPTNeoXTokenizerFast"),oho=o(" (GPT NeoX model)"),rho=l(),us=a("li"),jde=a("strong"),tho=o("gptj"),aho=o(" \u2014 "),MN=a("a"),nho=o("GPT2Tokenizer"),sho=o(" or "),EN=a("a"),lho=o("GPT2TokenizerFast"),iho=o(" (GPT-J model)"),dho=l(),bs=a("li"),Dde=a("strong"),cho=o("groupvit"),fho=o(" \u2014 "),CN=a("a"),mho=o("CLIPTokenizer"),gho=o(" or "),wN=a("a"),hho=o("CLIPTokenizerFast"),pho=o(" (GroupViT model)"),_ho=l(),vs=a("li"),Gde=a("strong"),uho=o("herbert"),bho=o(" \u2014 "),AN=a("a"),vho=o("HerbertTokenizer"),Fho=o(" or "),LN=a("a"),Tho=o("HerbertTokenizerFast"),Mho=o(" (HerBERT model)"),Eho=l(),Bh=a("li"),Ode=a("strong"),Cho=o("hubert"),who=o(" \u2014 "),yN=a("a"),Aho=o("Wav2Vec2CTCTokenizer"),Lho=o(" (Hubert model)"),yho=l(),Fs=a("li"),Vde=a("strong"),xho=o("ibert"),$ho=o(" \u2014 "),xN=a("a"),kho=o("RobertaTokenizer"),Sho=o(" or "),$N=a("a"),Rho=o("RobertaTokenizerFast"),Pho=o(" (I-BERT model)"),Bho=l(),Ts=a("li"),Xde=a("strong"),Iho=o("layoutlm"),Nho=o(" \u2014 "),kN=a("a"),qho=o("LayoutLMTokenizer"),jho=o(" or "),SN=a("a"),Dho=o("LayoutLMTokenizerFast"),Gho=o(" (LayoutLM model)"),Oho=l(),Ms=a("li"),zde=a("strong"),Vho=o("layoutlmv2"),Xho=o(" \u2014 "),RN=a("a"),zho=o("LayoutLMv2Tokenizer"),Who=o(" or "),PN=a("a"),Qho=o("LayoutLMv2TokenizerFast"),Uho=o(" (LayoutLMv2 model)"),Hho=l(),Es=a("li"),Wde=a("strong"),Jho=o("layoutlmv3"),Yho=o(" \u2014 "),BN=a("a"),Kho=o("LayoutLMv3Tokenizer"),Zho=o(" or "),IN=a("a"),epo=o("LayoutLMv3TokenizerFast"),opo=o(" (LayoutLMv3 model)"),rpo=l(),Cs=a("li"),Qde=a("strong"),tpo=o("layoutxlm"),apo=o(" \u2014 "),NN=a("a"),npo=o("LayoutXLMTokenizer"),spo=o(" or "),qN=a("a"),lpo=o("LayoutXLMTokenizerFast"),ipo=o(" (LayoutXLM model)"),dpo=l(),ws=a("li"),Ude=a("strong"),cpo=o("led"),fpo=o(" \u2014 "),jN=a("a"),mpo=o("LEDTokenizer"),gpo=o(" or "),DN=a("a"),hpo=o("LEDTokenizerFast"),ppo=o(" (LED model)"),_po=l(),As=a("li"),Hde=a("strong"),upo=o("longformer"),bpo=o(" \u2014 "),GN=a("a"),vpo=o("LongformerTokenizer"),Fpo=o(" or "),ON=a("a"),Tpo=o("LongformerTokenizerFast"),Mpo=o(" (Longformer model)"),Epo=l(),Ls=a("li"),Jde=a("strong"),Cpo=o("longt5"),wpo=o(" \u2014 "),VN=a("a"),Apo=o("T5Tokenizer"),Lpo=o(" or "),XN=a("a"),ypo=o("T5TokenizerFast"),xpo=o(" (LongT5 model)"),$po=l(),Ih=a("li"),Yde=a("strong"),kpo=o("luke"),Spo=o(" \u2014 "),zN=a("a"),Rpo=o("LukeTokenizer"),Ppo=o(" (LUKE model)"),Bpo=l(),ys=a("li"),Kde=a("strong"),Ipo=o("lxmert"),Npo=o(" \u2014 "),WN=a("a"),qpo=o("LxmertTokenizer"),jpo=o(" or "),QN=a("a"),Dpo=o("LxmertTokenizerFast"),Gpo=o(" (LXMERT model)"),Opo=l(),Nh=a("li"),Zde=a("strong"),Vpo=o("m2m_100"),Xpo=o(" \u2014 "),UN=a("a"),zpo=o("M2M100Tokenizer"),Wpo=o(" (M2M100 model)"),Qpo=l(),qh=a("li"),ece=a("strong"),Upo=o("marian"),Hpo=o(" \u2014 "),HN=a("a"),Jpo=o("MarianTokenizer"),Ypo=o(" (Marian model)"),Kpo=l(),xs=a("li"),oce=a("strong"),Zpo=o("mbart"),e_o=o(" \u2014 "),JN=a("a"),o_o=o("MBartTokenizer"),r_o=o(" or "),YN=a("a"),t_o=o("MBartTokenizerFast"),a_o=o(" (mBART model)"),n_o=l(),$s=a("li"),rce=a("strong"),s_o=o("mbart50"),l_o=o(" \u2014 "),KN=a("a"),i_o=o("MBart50Tokenizer"),d_o=o(" or "),ZN=a("a"),c_o=o("MBart50TokenizerFast"),f_o=o(" (mBART-50 model)"),m_o=l(),ks=a("li"),tce=a("strong"),g_o=o("megatron-bert"),h_o=o(" \u2014 "),eq=a("a"),p_o=o("BertTokenizer"),__o=o(" or "),oq=a("a"),u_o=o("BertTokenizerFast"),b_o=o(" (Megatron-BERT model)"),v_o=l(),jh=a("li"),ace=a("strong"),F_o=o("mluke"),T_o=o(" \u2014 "),rq=a("a"),M_o=o("MLukeTokenizer"),E_o=o(" (mLUKE model)"),C_o=l(),Ss=a("li"),nce=a("strong"),w_o=o("mobilebert"),A_o=o(" \u2014 "),tq=a("a"),L_o=o("MobileBertTokenizer"),y_o=o(" or "),aq=a("a"),x_o=o("MobileBertTokenizerFast"),$_o=o(" (MobileBERT model)"),k_o=l(),Rs=a("li"),sce=a("strong"),S_o=o("mpnet"),R_o=o(" \u2014 "),nq=a("a"),P_o=o("MPNetTokenizer"),B_o=o(" or "),sq=a("a"),I_o=o("MPNetTokenizerFast"),N_o=o(" (MPNet model)"),q_o=l(),Ps=a("li"),lce=a("strong"),j_o=o("mt5"),D_o=o(" \u2014 "),lq=a("a"),G_o=o("MT5Tokenizer"),O_o=o(" or "),iq=a("a"),V_o=o("MT5TokenizerFast"),X_o=o(" (MT5 model)"),z_o=l(),Bs=a("li"),ice=a("strong"),W_o=o("mvp"),Q_o=o(" \u2014 "),dq=a("a"),U_o=o("MvpTokenizer"),H_o=o(" or "),cq=a("a"),J_o=o("MvpTokenizerFast"),Y_o=o(" (MVP model)"),K_o=l(),Is=a("li"),dce=a("strong"),Z_o=o("nezha"),euo=o(" \u2014 "),fq=a("a"),ouo=o("BertTokenizer"),ruo=o(" or "),mq=a("a"),tuo=o("BertTokenizerFast"),auo=o(" (Nezha model)"),nuo=l(),Ns=a("li"),cce=a("strong"),suo=o("nllb"),luo=o(" \u2014 "),gq=a("a"),iuo=o("NllbTokenizer"),duo=o(" or "),hq=a("a"),cuo=o("NllbTokenizerFast"),fuo=o(" (NLLB model)"),muo=l(),qs=a("li"),fce=a("strong"),guo=o("nystromformer"),huo=o(" \u2014 "),pq=a("a"),puo=o("AlbertTokenizer"),_uo=o(" or "),_q=a("a"),uuo=o("AlbertTokenizerFast"),buo=o(" (Nystr\xF6mformer model)"),vuo=l(),js=a("li"),mce=a("strong"),Fuo=o("openai-gpt"),Tuo=o(" \u2014 "),uq=a("a"),Muo=o("OpenAIGPTTokenizer"),Euo=o(" or "),bq=a("a"),Cuo=o("OpenAIGPTTokenizerFast"),wuo=o(" (OpenAI GPT model)"),Auo=l(),Dh=a("li"),gce=a("strong"),Luo=o("opt"),yuo=o(" \u2014 "),vq=a("a"),xuo=o("GPT2Tokenizer"),$uo=o(" (OPT model)"),kuo=l(),Ds=a("li"),hce=a("strong"),Suo=o("owlvit"),Ruo=o(" \u2014 "),Fq=a("a"),Puo=o("CLIPTokenizer"),Buo=o(" or "),Tq=a("a"),Iuo=o("CLIPTokenizerFast"),Nuo=o(" (OWL-ViT model)"),quo=l(),Gs=a("li"),pce=a("strong"),juo=o("pegasus"),Duo=o(" \u2014 "),Mq=a("a"),Guo=o("PegasusTokenizer"),Ouo=o(" or "),Eq=a("a"),Vuo=o("PegasusTokenizerFast"),Xuo=o(" (Pegasus model)"),zuo=l(),Gh=a("li"),_ce=a("strong"),Wuo=o("perceiver"),Quo=o(" \u2014 "),Cq=a("a"),Uuo=o("PerceiverTokenizer"),Huo=o(" (Perceiver model)"),Juo=l(),Oh=a("li"),uce=a("strong"),Yuo=o("phobert"),Kuo=o(" \u2014 "),wq=a("a"),Zuo=o("PhobertTokenizer"),e2o=o(" (PhoBERT model)"),o2o=l(),Vh=a("li"),bce=a("strong"),r2o=o("plbart"),t2o=o(" \u2014 "),Aq=a("a"),a2o=o("PLBartTokenizer"),n2o=o(" (PLBart model)"),s2o=l(),Xh=a("li"),vce=a("strong"),l2o=o("prophetnet"),i2o=o(" \u2014 "),Lq=a("a"),d2o=o("ProphetNetTokenizer"),c2o=o(" (ProphetNet model)"),f2o=l(),Os=a("li"),Fce=a("strong"),m2o=o("qdqbert"),g2o=o(" \u2014 "),yq=a("a"),h2o=o("BertTokenizer"),p2o=o(" or "),xq=a("a"),_2o=o("BertTokenizerFast"),u2o=o(" (QDQBert model)"),b2o=l(),zh=a("li"),Tce=a("strong"),v2o=o("rag"),F2o=o(" \u2014 "),$q=a("a"),T2o=o("RagTokenizer"),M2o=o(" (RAG model)"),E2o=l(),Vs=a("li"),Mce=a("strong"),C2o=o("realm"),w2o=o(" \u2014 "),kq=a("a"),A2o=o("RealmTokenizer"),L2o=o(" or "),Sq=a("a"),y2o=o("RealmTokenizerFast"),x2o=o(" (REALM model)"),$2o=l(),Xs=a("li"),Ece=a("strong"),k2o=o("reformer"),S2o=o(" \u2014 "),Rq=a("a"),R2o=o("ReformerTokenizer"),P2o=o(" or "),Pq=a("a"),B2o=o("ReformerTokenizerFast"),I2o=o(" (Reformer model)"),N2o=l(),zs=a("li"),Cce=a("strong"),q2o=o("rembert"),j2o=o(" \u2014 "),Bq=a("a"),D2o=o("RemBertTokenizer"),G2o=o(" or "),Iq=a("a"),O2o=o("RemBertTokenizerFast"),V2o=o(" (RemBERT model)"),X2o=l(),Ws=a("li"),wce=a("strong"),z2o=o("retribert"),W2o=o(" \u2014 "),Nq=a("a"),Q2o=o("RetriBertTokenizer"),U2o=o(" or "),qq=a("a"),H2o=o("RetriBertTokenizerFast"),J2o=o(" (RetriBERT model)"),Y2o=l(),Qs=a("li"),Ace=a("strong"),K2o=o("roberta"),Z2o=o(" \u2014 "),jq=a("a"),e1o=o("RobertaTokenizer"),o1o=o(" or "),Dq=a("a"),r1o=o("RobertaTokenizerFast"),t1o=o(" (RoBERTa model)"),a1o=l(),Us=a("li"),Lce=a("strong"),n1o=o("roformer"),s1o=o(" \u2014 "),Gq=a("a"),l1o=o("RoFormerTokenizer"),i1o=o(" or "),Oq=a("a"),d1o=o("RoFormerTokenizerFast"),c1o=o(" (RoFormer model)"),f1o=l(),Wh=a("li"),yce=a("strong"),m1o=o("speech_to_text"),g1o=o(" \u2014 "),Vq=a("a"),h1o=o("Speech2TextTokenizer"),p1o=o(" (Speech2Text model)"),_1o=l(),Qh=a("li"),xce=a("strong"),u1o=o("speech_to_text_2"),b1o=o(" \u2014 "),Xq=a("a"),v1o=o("Speech2Text2Tokenizer"),F1o=o(" (Speech2Text2 model)"),T1o=l(),Hs=a("li"),$ce=a("strong"),M1o=o("splinter"),E1o=o(" \u2014 "),zq=a("a"),C1o=o("SplinterTokenizer"),w1o=o(" or "),Wq=a("a"),A1o=o("SplinterTokenizerFast"),L1o=o(" (Splinter model)"),y1o=l(),Js=a("li"),kce=a("strong"),x1o=o("squeezebert"),$1o=o(" \u2014 "),Qq=a("a"),k1o=o("SqueezeBertTokenizer"),S1o=o(" or "),Uq=a("a"),R1o=o("SqueezeBertTokenizerFast"),P1o=o(" (SqueezeBERT model)"),B1o=l(),Ys=a("li"),Sce=a("strong"),I1o=o("t5"),N1o=o(" \u2014 "),Hq=a("a"),q1o=o("T5Tokenizer"),j1o=o(" or "),Jq=a("a"),D1o=o("T5TokenizerFast"),G1o=o(" (T5 model)"),O1o=l(),Uh=a("li"),Rce=a("strong"),V1o=o("tapas"),X1o=o(" \u2014 "),Yq=a("a"),z1o=o("TapasTokenizer"),W1o=o(" (TAPAS model)"),Q1o=l(),Hh=a("li"),Pce=a("strong"),U1o=o("tapex"),H1o=o(" \u2014 "),Kq=a("a"),J1o=o("TapexTokenizer"),Y1o=o(" (TAPEX model)"),K1o=l(),Jh=a("li"),Bce=a("strong"),Z1o=o("transfo-xl"),ebo=o(" \u2014 "),Zq=a("a"),obo=o("TransfoXLTokenizer"),rbo=o(" (Transformer-XL model)"),tbo=l(),Ks=a("li"),Ice=a("strong"),abo=o("vilt"),nbo=o(" \u2014 "),ej=a("a"),sbo=o("BertTokenizer"),lbo=o(" or "),oj=a("a"),ibo=o("BertTokenizerFast"),dbo=o(" (ViLT model)"),cbo=l(),Zs=a("li"),Nce=a("strong"),fbo=o("visual_bert"),mbo=o(" \u2014 "),rj=a("a"),gbo=o("BertTokenizer"),hbo=o(" or "),tj=a("a"),pbo=o("BertTokenizerFast"),_bo=o(" (VisualBERT model)"),ubo=l(),Yh=a("li"),qce=a("strong"),bbo=o("wav2vec2"),vbo=o(" \u2014 "),aj=a("a"),Fbo=o("Wav2Vec2CTCTokenizer"),Tbo=o(" (Wav2Vec2 model)"),Mbo=l(),Kh=a("li"),jce=a("strong"),Ebo=o("wav2vec2-conformer"),Cbo=o(" \u2014 "),nj=a("a"),wbo=o("Wav2Vec2CTCTokenizer"),Abo=o(" (Wav2Vec2-Conformer model)"),Lbo=l(),Zh=a("li"),Dce=a("strong"),ybo=o("wav2vec2_phoneme"),xbo=o(" \u2014 "),sj=a("a"),$bo=o("Wav2Vec2PhonemeCTCTokenizer"),kbo=o(" (Wav2Vec2Phoneme model)"),Sbo=l(),el=a("li"),Gce=a("strong"),Rbo=o("xglm"),Pbo=o(" \u2014 "),lj=a("a"),Bbo=o("XGLMTokenizer"),Ibo=o(" or "),ij=a("a"),Nbo=o("XGLMTokenizerFast"),qbo=o(" (XGLM model)"),jbo=l(),ep=a("li"),Oce=a("strong"),Dbo=o("xlm"),Gbo=o(" \u2014 "),dj=a("a"),Obo=o("XLMTokenizer"),Vbo=o(" (XLM model)"),Xbo=l(),op=a("li"),Vce=a("strong"),zbo=o("xlm-prophetnet"),Wbo=o(" \u2014 "),cj=a("a"),Qbo=o("XLMProphetNetTokenizer"),Ubo=o(" (XLM-ProphetNet model)"),Hbo=l(),ol=a("li"),Xce=a("strong"),Jbo=o("xlm-roberta"),Ybo=o(" \u2014 "),fj=a("a"),Kbo=o("XLMRobertaTokenizer"),Zbo=o(" or "),mj=a("a"),evo=o("XLMRobertaTokenizerFast"),ovo=o(" (XLM-RoBERTa model)"),rvo=l(),rl=a("li"),zce=a("strong"),tvo=o("xlm-roberta-xl"),avo=o(" \u2014 "),gj=a("a"),nvo=o("RobertaTokenizer"),svo=o(" or "),hj=a("a"),lvo=o("RobertaTokenizerFast"),ivo=o(" (XLM-RoBERTa-XL model)"),dvo=l(),tl=a("li"),Wce=a("strong"),cvo=o("xlnet"),fvo=o(" \u2014 "),pj=a("a"),mvo=o("XLNetTokenizer"),gvo=o(" or "),_j=a("a"),hvo=o("XLNetTokenizerFast"),pvo=o(" (XLNet model)"),_vo=l(),al=a("li"),Qce=a("strong"),uvo=o("yoso"),bvo=o(" \u2014 "),uj=a("a"),vvo=o("AlbertTokenizer"),Fvo=o(" or "),bj=a("a"),Tvo=o("AlbertTokenizerFast"),Mvo=o(" (YOSO model)"),Evo=l(),F(rp.$$.fragment),Cvo=l(),tp=a("div"),F(My.$$.fragment),wvo=l(),Uce=a("p"),Avo=o("Register a new tokenizer in this mapping."),RQe=l(),Zi=a("h2"),ap=a("a"),Hce=a("span"),F(Ey.$$.fragment),Lvo=l(),Jce=a("span"),yvo=o("AutoFeatureExtractor"),PQe=l(),$o=a("div"),F(Cy.$$.fragment),xvo=l(),wy=a("p"),$vo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vj=a("a"),kvo=o("AutoFeatureExtractor.from_pretrained()"),Svo=o(" class method."),Rvo=l(),Ay=a("p"),Pvo=o("This class cannot be instantiated directly using "),Yce=a("code"),Bvo=o("__init__()"),Ivo=o(" (throws an error)."),Nvo=l(),He=a("div"),F(Ly.$$.fragment),qvo=l(),Kce=a("p"),jvo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Dvo=l(),Oa=a("p"),Gvo=o("The feature extractor class to instantiate is selected based on the "),Zce=a("code"),Ovo=o("model_type"),Vvo=o(` property of the config object
(either passed as an argument or loaded from `),efe=a("code"),Xvo=o("pretrained_model_name_or_path"),zvo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ofe=a("code"),Wvo=o("pretrained_model_name_or_path"),Qvo=o(":"),Uvo=l(),U=a("ul"),np=a("li"),rfe=a("strong"),Hvo=o("beit"),Jvo=o(" \u2014 "),Fj=a("a"),Yvo=o("BeitFeatureExtractor"),Kvo=o(" (BEiT model)"),Zvo=l(),sp=a("li"),tfe=a("strong"),e0o=o("clip"),o0o=o(" \u2014 "),Tj=a("a"),r0o=o("CLIPFeatureExtractor"),t0o=o(" (CLIP model)"),a0o=l(),lp=a("li"),afe=a("strong"),n0o=o("convnext"),s0o=o(" \u2014 "),Mj=a("a"),l0o=o("ConvNextFeatureExtractor"),i0o=o(" (ConvNeXT model)"),d0o=l(),ip=a("li"),nfe=a("strong"),c0o=o("cvt"),f0o=o(" \u2014 "),Ej=a("a"),m0o=o("ConvNextFeatureExtractor"),g0o=o(" (CvT model)"),h0o=l(),dp=a("li"),sfe=a("strong"),p0o=o("data2vec-audio"),_0o=o(" \u2014 "),Cj=a("a"),u0o=o("Wav2Vec2FeatureExtractor"),b0o=o(" (Data2VecAudio model)"),v0o=l(),cp=a("li"),lfe=a("strong"),F0o=o("data2vec-vision"),T0o=o(" \u2014 "),wj=a("a"),M0o=o("BeitFeatureExtractor"),E0o=o(" (Data2VecVision model)"),C0o=l(),fp=a("li"),ife=a("strong"),w0o=o("deit"),A0o=o(" \u2014 "),Aj=a("a"),L0o=o("DeiTFeatureExtractor"),y0o=o(" (DeiT model)"),x0o=l(),mp=a("li"),dfe=a("strong"),$0o=o("detr"),k0o=o(" \u2014 "),Lj=a("a"),S0o=o("DetrFeatureExtractor"),R0o=o(" (DETR model)"),P0o=l(),gp=a("li"),cfe=a("strong"),B0o=o("dpt"),I0o=o(" \u2014 "),yj=a("a"),N0o=o("DPTFeatureExtractor"),q0o=o(" (DPT model)"),j0o=l(),hp=a("li"),ffe=a("strong"),D0o=o("flava"),G0o=o(" \u2014 "),xj=a("a"),O0o=o("FlavaFeatureExtractor"),V0o=o(" (FLAVA model)"),X0o=l(),pp=a("li"),mfe=a("strong"),z0o=o("glpn"),W0o=o(" \u2014 "),$j=a("a"),Q0o=o("GLPNFeatureExtractor"),U0o=o(" (GLPN model)"),H0o=l(),_p=a("li"),gfe=a("strong"),J0o=o("groupvit"),Y0o=o(" \u2014 "),kj=a("a"),K0o=o("CLIPFeatureExtractor"),Z0o=o(" (GroupViT model)"),e6o=l(),up=a("li"),hfe=a("strong"),o6o=o("hubert"),r6o=o(" \u2014 "),Sj=a("a"),t6o=o("Wav2Vec2FeatureExtractor"),a6o=o(" (Hubert model)"),n6o=l(),bp=a("li"),pfe=a("strong"),s6o=o("imagegpt"),l6o=o(" \u2014 "),Rj=a("a"),i6o=o("ImageGPTFeatureExtractor"),d6o=o(" (ImageGPT model)"),c6o=l(),vp=a("li"),_fe=a("strong"),f6o=o("layoutlmv2"),m6o=o(" \u2014 "),Pj=a("a"),g6o=o("LayoutLMv2FeatureExtractor"),h6o=o(" (LayoutLMv2 model)"),p6o=l(),Fp=a("li"),ufe=a("strong"),_6o=o("layoutlmv3"),u6o=o(" \u2014 "),Bj=a("a"),b6o=o("LayoutLMv3FeatureExtractor"),v6o=o(" (LayoutLMv3 model)"),F6o=l(),Tp=a("li"),bfe=a("strong"),T6o=o("levit"),M6o=o(" \u2014 "),Ij=a("a"),E6o=o("LevitFeatureExtractor"),C6o=o(" (LeViT model)"),w6o=l(),Mp=a("li"),vfe=a("strong"),A6o=o("maskformer"),L6o=o(" \u2014 "),Nj=a("a"),y6o=o("MaskFormerFeatureExtractor"),x6o=o(" (MaskFormer model)"),$6o=l(),Ep=a("li"),Ffe=a("strong"),k6o=o("mctct"),S6o=o(" \u2014 "),qj=a("a"),R6o=o("MCTCTFeatureExtractor"),P6o=o(" (M-CTC-T model)"),B6o=l(),Cp=a("li"),Tfe=a("strong"),I6o=o("mobilevit"),N6o=o(" \u2014 "),jj=a("a"),q6o=o("MobileViTFeatureExtractor"),j6o=o(" (MobileViT model)"),D6o=l(),wp=a("li"),Mfe=a("strong"),G6o=o("owlvit"),O6o=o(" \u2014 "),Dj=a("a"),V6o=o("OwlViTFeatureExtractor"),X6o=o(" (OWL-ViT model)"),z6o=l(),Ap=a("li"),Efe=a("strong"),W6o=o("perceiver"),Q6o=o(" \u2014 "),Gj=a("a"),U6o=o("PerceiverFeatureExtractor"),H6o=o(" (Perceiver model)"),J6o=l(),Lp=a("li"),Cfe=a("strong"),Y6o=o("poolformer"),K6o=o(" \u2014 "),Oj=a("a"),Z6o=o("PoolFormerFeatureExtractor"),eFo=o(" (PoolFormer model)"),oFo=l(),yp=a("li"),wfe=a("strong"),rFo=o("regnet"),tFo=o(" \u2014 "),Vj=a("a"),aFo=o("ConvNextFeatureExtractor"),nFo=o(" (RegNet model)"),sFo=l(),xp=a("li"),Afe=a("strong"),lFo=o("resnet"),iFo=o(" \u2014 "),Xj=a("a"),dFo=o("ConvNextFeatureExtractor"),cFo=o(" (ResNet model)"),fFo=l(),$p=a("li"),Lfe=a("strong"),mFo=o("segformer"),gFo=o(" \u2014 "),zj=a("a"),hFo=o("SegformerFeatureExtractor"),pFo=o(" (SegFormer model)"),_Fo=l(),kp=a("li"),yfe=a("strong"),uFo=o("speech_to_text"),bFo=o(" \u2014 "),Wj=a("a"),vFo=o("Speech2TextFeatureExtractor"),FFo=o(" (Speech2Text model)"),TFo=l(),Sp=a("li"),xfe=a("strong"),MFo=o("swin"),EFo=o(" \u2014 "),Qj=a("a"),CFo=o("ViTFeatureExtractor"),wFo=o(" (Swin Transformer model)"),AFo=l(),Rp=a("li"),$fe=a("strong"),LFo=o("swinv2"),yFo=o(" \u2014 "),Uj=a("a"),xFo=o("ViTFeatureExtractor"),$Fo=o(" (Swin Transformer V2 model)"),kFo=l(),Pp=a("li"),kfe=a("strong"),SFo=o("van"),RFo=o(" \u2014 "),Hj=a("a"),PFo=o("ConvNextFeatureExtractor"),BFo=o(" (VAN model)"),IFo=l(),Bp=a("li"),Sfe=a("strong"),NFo=o("videomae"),qFo=o(" \u2014 "),Jj=a("a"),jFo=o("ViTFeatureExtractor"),DFo=o(" (VideoMAE model)"),GFo=l(),Ip=a("li"),Rfe=a("strong"),OFo=o("vilt"),VFo=o(" \u2014 "),Yj=a("a"),XFo=o("ViltFeatureExtractor"),zFo=o(" (ViLT model)"),WFo=l(),Np=a("li"),Pfe=a("strong"),QFo=o("vit"),UFo=o(" \u2014 "),Kj=a("a"),HFo=o("ViTFeatureExtractor"),JFo=o(" (ViT model)"),YFo=l(),qp=a("li"),Bfe=a("strong"),KFo=o("vit_mae"),ZFo=o(" \u2014 "),Zj=a("a"),eTo=o("ViTFeatureExtractor"),oTo=o(" (ViTMAE model)"),rTo=l(),jp=a("li"),Ife=a("strong"),tTo=o("wav2vec2"),aTo=o(" \u2014 "),eD=a("a"),nTo=o("Wav2Vec2FeatureExtractor"),sTo=o(" (Wav2Vec2 model)"),lTo=l(),Dp=a("li"),Nfe=a("strong"),iTo=o("wav2vec2-conformer"),dTo=o(" \u2014 "),oD=a("a"),cTo=o("Wav2Vec2FeatureExtractor"),fTo=o(" (Wav2Vec2-Conformer model)"),mTo=l(),Gp=a("li"),qfe=a("strong"),gTo=o("yolos"),hTo=o(" \u2014 "),rD=a("a"),pTo=o("YolosFeatureExtractor"),_To=o(" (YOLOS model)"),uTo=l(),F(Op.$$.fragment),bTo=l(),F(Vp.$$.fragment),vTo=l(),Xp=a("div"),F(yy.$$.fragment),FTo=l(),jfe=a("p"),TTo=o("Register a new feature extractor for this class."),BQe=l(),ed=a("h2"),zp=a("a"),Dfe=a("span"),F(xy.$$.fragment),MTo=l(),Gfe=a("span"),ETo=o("AutoProcessor"),IQe=l(),ko=a("div"),F($y.$$.fragment),CTo=l(),ky=a("p"),wTo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tD=a("a"),ATo=o("AutoProcessor.from_pretrained()"),LTo=o(" class method."),yTo=l(),Sy=a("p"),xTo=o("This class cannot be instantiated directly using "),Ofe=a("code"),$To=o("__init__()"),kTo=o(" (throws an error)."),STo=l(),Je=a("div"),F(Ry.$$.fragment),RTo=l(),Vfe=a("p"),PTo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),BTo=l(),od=a("p"),ITo=o("The processor class to instantiate is selected based on the "),Xfe=a("code"),NTo=o("model_type"),qTo=o(` property of the config object (either
passed as an argument or loaded from `),zfe=a("code"),jTo=o("pretrained_model_name_or_path"),DTo=o(" if possible):"),GTo=l(),fe=a("ul"),Wp=a("li"),Wfe=a("strong"),OTo=o("clip"),VTo=o(" \u2014 "),aD=a("a"),XTo=o("CLIPProcessor"),zTo=o(" (CLIP model)"),WTo=l(),Qp=a("li"),Qfe=a("strong"),QTo=o("flava"),UTo=o(" \u2014 "),nD=a("a"),HTo=o("FlavaProcessor"),JTo=o(" (FLAVA model)"),YTo=l(),Up=a("li"),Ufe=a("strong"),KTo=o("groupvit"),ZTo=o(" \u2014 "),sD=a("a"),e8o=o("CLIPProcessor"),o8o=o(" (GroupViT model)"),r8o=l(),Hp=a("li"),Hfe=a("strong"),t8o=o("layoutlmv2"),a8o=o(" \u2014 "),lD=a("a"),n8o=o("LayoutLMv2Processor"),s8o=o(" (LayoutLMv2 model)"),l8o=l(),Jp=a("li"),Jfe=a("strong"),i8o=o("layoutlmv3"),d8o=o(" \u2014 "),iD=a("a"),c8o=o("LayoutLMv3Processor"),f8o=o(" (LayoutLMv3 model)"),m8o=l(),Yp=a("li"),Yfe=a("strong"),g8o=o("layoutxlm"),h8o=o(" \u2014 "),dD=a("a"),p8o=o("LayoutXLMProcessor"),_8o=o(" (LayoutXLM model)"),u8o=l(),Kp=a("li"),Kfe=a("strong"),b8o=o("owlvit"),v8o=o(" \u2014 "),cD=a("a"),F8o=o("OwlViTProcessor"),T8o=o(" (OWL-ViT model)"),M8o=l(),Zp=a("li"),Zfe=a("strong"),E8o=o("sew"),C8o=o(" \u2014 "),fD=a("a"),w8o=o("Wav2Vec2Processor"),A8o=o(" (SEW model)"),L8o=l(),e_=a("li"),eme=a("strong"),y8o=o("sew-d"),x8o=o(" \u2014 "),mD=a("a"),$8o=o("Wav2Vec2Processor"),k8o=o(" (SEW-D model)"),S8o=l(),o_=a("li"),ome=a("strong"),R8o=o("speech_to_text"),P8o=o(" \u2014 "),gD=a("a"),B8o=o("Speech2TextProcessor"),I8o=o(" (Speech2Text model)"),N8o=l(),r_=a("li"),rme=a("strong"),q8o=o("speech_to_text_2"),j8o=o(" \u2014 "),hD=a("a"),D8o=o("Speech2Text2Processor"),G8o=o(" (Speech2Text2 model)"),O8o=l(),t_=a("li"),tme=a("strong"),V8o=o("trocr"),X8o=o(" \u2014 "),pD=a("a"),z8o=o("TrOCRProcessor"),W8o=o(" (TrOCR model)"),Q8o=l(),a_=a("li"),ame=a("strong"),U8o=o("unispeech"),H8o=o(" \u2014 "),_D=a("a"),J8o=o("Wav2Vec2Processor"),Y8o=o(" (UniSpeech model)"),K8o=l(),n_=a("li"),nme=a("strong"),Z8o=o("unispeech-sat"),eMo=o(" \u2014 "),uD=a("a"),oMo=o("Wav2Vec2Processor"),rMo=o(" (UniSpeechSat model)"),tMo=l(),s_=a("li"),sme=a("strong"),aMo=o("vilt"),nMo=o(" \u2014 "),bD=a("a"),sMo=o("ViltProcessor"),lMo=o(" (ViLT model)"),iMo=l(),l_=a("li"),lme=a("strong"),dMo=o("vision-text-dual-encoder"),cMo=o(" \u2014 "),vD=a("a"),fMo=o("VisionTextDualEncoderProcessor"),mMo=o(" (VisionTextDualEncoder model)"),gMo=l(),i_=a("li"),ime=a("strong"),hMo=o("wav2vec2"),pMo=o(" \u2014 "),FD=a("a"),_Mo=o("Wav2Vec2Processor"),uMo=o(" (Wav2Vec2 model)"),bMo=l(),d_=a("li"),dme=a("strong"),vMo=o("wav2vec2-conformer"),FMo=o(" \u2014 "),TD=a("a"),TMo=o("Wav2Vec2Processor"),MMo=o(" (Wav2Vec2-Conformer model)"),EMo=l(),c_=a("li"),cme=a("strong"),CMo=o("wavlm"),wMo=o(" \u2014 "),MD=a("a"),AMo=o("Wav2Vec2Processor"),LMo=o(" (WavLM model)"),yMo=l(),F(f_.$$.fragment),xMo=l(),F(m_.$$.fragment),$Mo=l(),g_=a("div"),F(Py.$$.fragment),kMo=l(),fme=a("p"),SMo=o("Register a new processor for this class."),NQe=l(),rd=a("h2"),h_=a("a"),mme=a("span"),F(By.$$.fragment),RMo=l(),gme=a("span"),PMo=o("AutoModel"),qQe=l(),So=a("div"),F(Iy.$$.fragment),BMo=l(),td=a("p"),IMo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ED=a("a"),NMo=o("from_pretrained()"),qMo=o(" class method or the "),CD=a("a"),jMo=o("from_config()"),DMo=o(` class
method.`),GMo=l(),Ny=a("p"),OMo=o("This class cannot be instantiated directly using "),hme=a("code"),VMo=o("__init__()"),XMo=o(" (throws an error)."),zMo=l(),mt=a("div"),F(qy.$$.fragment),WMo=l(),pme=a("p"),QMo=o("Instantiates one of the base model classes of the library from a configuration."),UMo=l(),ad=a("p"),HMo=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),JMo=o("not"),YMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wD=a("a"),KMo=o("from_pretrained()"),ZMo=o(" to load the model weights."),eEo=l(),F(p_.$$.fragment),oEo=l(),Ye=a("div"),F(jy.$$.fragment),rEo=l(),ume=a("p"),tEo=o("Instantiate one of the base model classes of the library from a pretrained model."),aEo=l(),Va=a("p"),nEo=o("The model class to instantiate is selected based on the "),bme=a("code"),sEo=o("model_type"),lEo=o(` property of the config object (either
passed as an argument or loaded from `),vme=a("code"),iEo=o("pretrained_model_name_or_path"),dEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),cEo=o("pretrained_model_name_or_path"),fEo=o(":"),mEo=l(),y=a("ul"),__=a("li"),Tme=a("strong"),gEo=o("albert"),hEo=o(" \u2014 "),AD=a("a"),pEo=o("AlbertModel"),_Eo=o(" (ALBERT model)"),uEo=l(),u_=a("li"),Mme=a("strong"),bEo=o("bart"),vEo=o(" \u2014 "),LD=a("a"),FEo=o("BartModel"),TEo=o(" (BART model)"),MEo=l(),b_=a("li"),Eme=a("strong"),EEo=o("beit"),CEo=o(" \u2014 "),yD=a("a"),wEo=o("BeitModel"),AEo=o(" (BEiT model)"),LEo=l(),v_=a("li"),Cme=a("strong"),yEo=o("bert"),xEo=o(" \u2014 "),xD=a("a"),$Eo=o("BertModel"),kEo=o(" (BERT model)"),SEo=l(),F_=a("li"),wme=a("strong"),REo=o("bert-generation"),PEo=o(" \u2014 "),$D=a("a"),BEo=o("BertGenerationEncoder"),IEo=o(" (Bert Generation model)"),NEo=l(),T_=a("li"),Ame=a("strong"),qEo=o("big_bird"),jEo=o(" \u2014 "),kD=a("a"),DEo=o("BigBirdModel"),GEo=o(" (BigBird model)"),OEo=l(),M_=a("li"),Lme=a("strong"),VEo=o("bigbird_pegasus"),XEo=o(" \u2014 "),SD=a("a"),zEo=o("BigBirdPegasusModel"),WEo=o(" (BigBird-Pegasus model)"),QEo=l(),E_=a("li"),yme=a("strong"),UEo=o("blenderbot"),HEo=o(" \u2014 "),RD=a("a"),JEo=o("BlenderbotModel"),YEo=o(" (Blenderbot model)"),KEo=l(),C_=a("li"),xme=a("strong"),ZEo=o("blenderbot-small"),e4o=o(" \u2014 "),PD=a("a"),o4o=o("BlenderbotSmallModel"),r4o=o(" (BlenderbotSmall model)"),t4o=l(),w_=a("li"),$me=a("strong"),a4o=o("bloom"),n4o=o(" \u2014 "),BD=a("a"),s4o=o("BloomModel"),l4o=o(" (BLOOM model)"),i4o=l(),A_=a("li"),kme=a("strong"),d4o=o("camembert"),c4o=o(" \u2014 "),ID=a("a"),f4o=o("CamembertModel"),m4o=o(" (CamemBERT model)"),g4o=l(),L_=a("li"),Sme=a("strong"),h4o=o("canine"),p4o=o(" \u2014 "),ND=a("a"),_4o=o("CanineModel"),u4o=o(" (CANINE model)"),b4o=l(),y_=a("li"),Rme=a("strong"),v4o=o("clip"),F4o=o(" \u2014 "),qD=a("a"),T4o=o("CLIPModel"),M4o=o(" (CLIP model)"),E4o=l(),x_=a("li"),Pme=a("strong"),C4o=o("codegen"),w4o=o(" \u2014 "),jD=a("a"),A4o=o("CodeGenModel"),L4o=o(" (CodeGen model)"),y4o=l(),$_=a("li"),Bme=a("strong"),x4o=o("convbert"),$4o=o(" \u2014 "),DD=a("a"),k4o=o("ConvBertModel"),S4o=o(" (ConvBERT model)"),R4o=l(),k_=a("li"),Ime=a("strong"),P4o=o("convnext"),B4o=o(" \u2014 "),GD=a("a"),I4o=o("ConvNextModel"),N4o=o(" (ConvNeXT model)"),q4o=l(),S_=a("li"),Nme=a("strong"),j4o=o("ctrl"),D4o=o(" \u2014 "),OD=a("a"),G4o=o("CTRLModel"),O4o=o(" (CTRL model)"),V4o=l(),R_=a("li"),qme=a("strong"),X4o=o("cvt"),z4o=o(" \u2014 "),VD=a("a"),W4o=o("CvtModel"),Q4o=o(" (CvT model)"),U4o=l(),P_=a("li"),jme=a("strong"),H4o=o("data2vec-audio"),J4o=o(" \u2014 "),XD=a("a"),Y4o=o("Data2VecAudioModel"),K4o=o(" (Data2VecAudio model)"),Z4o=l(),B_=a("li"),Dme=a("strong"),eCo=o("data2vec-text"),oCo=o(" \u2014 "),zD=a("a"),rCo=o("Data2VecTextModel"),tCo=o(" (Data2VecText model)"),aCo=l(),I_=a("li"),Gme=a("strong"),nCo=o("data2vec-vision"),sCo=o(" \u2014 "),WD=a("a"),lCo=o("Data2VecVisionModel"),iCo=o(" (Data2VecVision model)"),dCo=l(),N_=a("li"),Ome=a("strong"),cCo=o("deberta"),fCo=o(" \u2014 "),QD=a("a"),mCo=o("DebertaModel"),gCo=o(" (DeBERTa model)"),hCo=l(),q_=a("li"),Vme=a("strong"),pCo=o("deberta-v2"),_Co=o(" \u2014 "),UD=a("a"),uCo=o("DebertaV2Model"),bCo=o(" (DeBERTa-v2 model)"),vCo=l(),j_=a("li"),Xme=a("strong"),FCo=o("decision_transformer"),TCo=o(" \u2014 "),HD=a("a"),MCo=o("DecisionTransformerModel"),ECo=o(" (Decision Transformer model)"),CCo=l(),D_=a("li"),zme=a("strong"),wCo=o("deit"),ACo=o(" \u2014 "),JD=a("a"),LCo=o("DeiTModel"),yCo=o(" (DeiT model)"),xCo=l(),G_=a("li"),Wme=a("strong"),$Co=o("detr"),kCo=o(" \u2014 "),YD=a("a"),SCo=o("DetrModel"),RCo=o(" (DETR model)"),PCo=l(),O_=a("li"),Qme=a("strong"),BCo=o("distilbert"),ICo=o(" \u2014 "),KD=a("a"),NCo=o("DistilBertModel"),qCo=o(" (DistilBERT model)"),jCo=l(),V_=a("li"),Ume=a("strong"),DCo=o("dpr"),GCo=o(" \u2014 "),ZD=a("a"),OCo=o("DPRQuestionEncoder"),VCo=o(" (DPR model)"),XCo=l(),X_=a("li"),Hme=a("strong"),zCo=o("dpt"),WCo=o(" \u2014 "),eG=a("a"),QCo=o("DPTModel"),UCo=o(" (DPT model)"),HCo=l(),z_=a("li"),Jme=a("strong"),JCo=o("electra"),YCo=o(" \u2014 "),oG=a("a"),KCo=o("ElectraModel"),ZCo=o(" (ELECTRA model)"),e3o=l(),W_=a("li"),Yme=a("strong"),o3o=o("flaubert"),r3o=o(" \u2014 "),rG=a("a"),t3o=o("FlaubertModel"),a3o=o(" (FlauBERT model)"),n3o=l(),Q_=a("li"),Kme=a("strong"),s3o=o("flava"),l3o=o(" \u2014 "),tG=a("a"),i3o=o("FlavaModel"),d3o=o(" (FLAVA model)"),c3o=l(),U_=a("li"),Zme=a("strong"),f3o=o("fnet"),m3o=o(" \u2014 "),aG=a("a"),g3o=o("FNetModel"),h3o=o(" (FNet model)"),p3o=l(),H_=a("li"),ege=a("strong"),_3o=o("fsmt"),u3o=o(" \u2014 "),nG=a("a"),b3o=o("FSMTModel"),v3o=o(" (FairSeq Machine-Translation model)"),F3o=l(),nl=a("li"),oge=a("strong"),T3o=o("funnel"),M3o=o(" \u2014 "),sG=a("a"),E3o=o("FunnelModel"),C3o=o(" or "),lG=a("a"),w3o=o("FunnelBaseModel"),A3o=o(" (Funnel Transformer model)"),L3o=l(),J_=a("li"),rge=a("strong"),y3o=o("glpn"),x3o=o(" \u2014 "),iG=a("a"),$3o=o("GLPNModel"),k3o=o(" (GLPN model)"),S3o=l(),Y_=a("li"),tge=a("strong"),R3o=o("gpt2"),P3o=o(" \u2014 "),dG=a("a"),B3o=o("GPT2Model"),I3o=o(" (OpenAI GPT-2 model)"),N3o=l(),K_=a("li"),age=a("strong"),q3o=o("gpt_neo"),j3o=o(" \u2014 "),cG=a("a"),D3o=o("GPTNeoModel"),G3o=o(" (GPT Neo model)"),O3o=l(),Z_=a("li"),nge=a("strong"),V3o=o("gpt_neox"),X3o=o(" \u2014 "),fG=a("a"),z3o=o("GPTNeoXModel"),W3o=o(" (GPT NeoX model)"),Q3o=l(),eu=a("li"),sge=a("strong"),U3o=o("gptj"),H3o=o(" \u2014 "),mG=a("a"),J3o=o("GPTJModel"),Y3o=o(" (GPT-J model)"),K3o=l(),ou=a("li"),lge=a("strong"),Z3o=o("groupvit"),e5o=o(" \u2014 "),gG=a("a"),o5o=o("GroupViTModel"),r5o=o(" (GroupViT model)"),t5o=l(),ru=a("li"),ige=a("strong"),a5o=o("hubert"),n5o=o(" \u2014 "),hG=a("a"),s5o=o("HubertModel"),l5o=o(" (Hubert model)"),i5o=l(),tu=a("li"),dge=a("strong"),d5o=o("ibert"),c5o=o(" \u2014 "),pG=a("a"),f5o=o("IBertModel"),m5o=o(" (I-BERT model)"),g5o=l(),au=a("li"),cge=a("strong"),h5o=o("imagegpt"),p5o=o(" \u2014 "),_G=a("a"),_5o=o("ImageGPTModel"),u5o=o(" (ImageGPT model)"),b5o=l(),nu=a("li"),fge=a("strong"),v5o=o("layoutlm"),F5o=o(" \u2014 "),uG=a("a"),T5o=o("LayoutLMModel"),M5o=o(" (LayoutLM model)"),E5o=l(),su=a("li"),mge=a("strong"),C5o=o("layoutlmv2"),w5o=o(" \u2014 "),bG=a("a"),A5o=o("LayoutLMv2Model"),L5o=o(" (LayoutLMv2 model)"),y5o=l(),lu=a("li"),gge=a("strong"),x5o=o("layoutlmv3"),$5o=o(" \u2014 "),vG=a("a"),k5o=o("LayoutLMv3Model"),S5o=o(" (LayoutLMv3 model)"),R5o=l(),iu=a("li"),hge=a("strong"),P5o=o("led"),B5o=o(" \u2014 "),FG=a("a"),I5o=o("LEDModel"),N5o=o(" (LED model)"),q5o=l(),du=a("li"),pge=a("strong"),j5o=o("levit"),D5o=o(" \u2014 "),TG=a("a"),G5o=o("LevitModel"),O5o=o(" (LeViT model)"),V5o=l(),cu=a("li"),_ge=a("strong"),X5o=o("longformer"),z5o=o(" \u2014 "),MG=a("a"),W5o=o("LongformerModel"),Q5o=o(" (Longformer model)"),U5o=l(),fu=a("li"),uge=a("strong"),H5o=o("longt5"),J5o=o(" \u2014 "),EG=a("a"),Y5o=o("LongT5Model"),K5o=o(" (LongT5 model)"),Z5o=l(),mu=a("li"),bge=a("strong"),ewo=o("luke"),owo=o(" \u2014 "),CG=a("a"),rwo=o("LukeModel"),two=o(" (LUKE model)"),awo=l(),gu=a("li"),vge=a("strong"),nwo=o("lxmert"),swo=o(" \u2014 "),wG=a("a"),lwo=o("LxmertModel"),iwo=o(" (LXMERT model)"),dwo=l(),hu=a("li"),Fge=a("strong"),cwo=o("m2m_100"),fwo=o(" \u2014 "),AG=a("a"),mwo=o("M2M100Model"),gwo=o(" (M2M100 model)"),hwo=l(),pu=a("li"),Tge=a("strong"),pwo=o("marian"),_wo=o(" \u2014 "),LG=a("a"),uwo=o("MarianModel"),bwo=o(" (Marian model)"),vwo=l(),_u=a("li"),Mge=a("strong"),Fwo=o("maskformer"),Two=o(" \u2014 "),yG=a("a"),Mwo=o("MaskFormerModel"),Ewo=o(" (MaskFormer model)"),Cwo=l(),uu=a("li"),Ege=a("strong"),wwo=o("mbart"),Awo=o(" \u2014 "),xG=a("a"),Lwo=o("MBartModel"),ywo=o(" (mBART model)"),xwo=l(),bu=a("li"),Cge=a("strong"),$wo=o("mctct"),kwo=o(" \u2014 "),$G=a("a"),Swo=o("MCTCTModel"),Rwo=o(" (M-CTC-T model)"),Pwo=l(),vu=a("li"),wge=a("strong"),Bwo=o("megatron-bert"),Iwo=o(" \u2014 "),kG=a("a"),Nwo=o("MegatronBertModel"),qwo=o(" (Megatron-BERT model)"),jwo=l(),Fu=a("li"),Age=a("strong"),Dwo=o("mobilebert"),Gwo=o(" \u2014 "),SG=a("a"),Owo=o("MobileBertModel"),Vwo=o(" (MobileBERT model)"),Xwo=l(),Tu=a("li"),Lge=a("strong"),zwo=o("mobilevit"),Wwo=o(" \u2014 "),RG=a("a"),Qwo=o("MobileViTModel"),Uwo=o(" (MobileViT model)"),Hwo=l(),Mu=a("li"),yge=a("strong"),Jwo=o("mpnet"),Ywo=o(" \u2014 "),PG=a("a"),Kwo=o("MPNetModel"),Zwo=o(" (MPNet model)"),eAo=l(),Eu=a("li"),xge=a("strong"),oAo=o("mt5"),rAo=o(" \u2014 "),BG=a("a"),tAo=o("MT5Model"),aAo=o(" (MT5 model)"),nAo=l(),Cu=a("li"),$ge=a("strong"),sAo=o("mvp"),lAo=o(" \u2014 "),IG=a("a"),iAo=o("MvpModel"),dAo=o(" (MVP model)"),cAo=l(),wu=a("li"),kge=a("strong"),fAo=o("nezha"),mAo=o(" \u2014 "),NG=a("a"),gAo=o("NezhaModel"),hAo=o(" (Nezha model)"),pAo=l(),Au=a("li"),Sge=a("strong"),_Ao=o("nllb"),uAo=o(" \u2014 "),qG=a("a"),bAo=o("M2M100Model"),vAo=o(" (NLLB model)"),FAo=l(),Lu=a("li"),Rge=a("strong"),TAo=o("nystromformer"),MAo=o(" \u2014 "),jG=a("a"),EAo=o("NystromformerModel"),CAo=o(" (Nystr\xF6mformer model)"),wAo=l(),yu=a("li"),Pge=a("strong"),AAo=o("openai-gpt"),LAo=o(" \u2014 "),DG=a("a"),yAo=o("OpenAIGPTModel"),xAo=o(" (OpenAI GPT model)"),$Ao=l(),xu=a("li"),Bge=a("strong"),kAo=o("opt"),SAo=o(" \u2014 "),GG=a("a"),RAo=o("OPTModel"),PAo=o(" (OPT model)"),BAo=l(),$u=a("li"),Ige=a("strong"),IAo=o("owlvit"),NAo=o(" \u2014 "),OG=a("a"),qAo=o("OwlViTModel"),jAo=o(" (OWL-ViT model)"),DAo=l(),ku=a("li"),Nge=a("strong"),GAo=o("pegasus"),OAo=o(" \u2014 "),VG=a("a"),VAo=o("PegasusModel"),XAo=o(" (Pegasus model)"),zAo=l(),Su=a("li"),qge=a("strong"),WAo=o("perceiver"),QAo=o(" \u2014 "),XG=a("a"),UAo=o("PerceiverModel"),HAo=o(" (Perceiver model)"),JAo=l(),Ru=a("li"),jge=a("strong"),YAo=o("plbart"),KAo=o(" \u2014 "),zG=a("a"),ZAo=o("PLBartModel"),e7o=o(" (PLBart model)"),o7o=l(),Pu=a("li"),Dge=a("strong"),r7o=o("poolformer"),t7o=o(" \u2014 "),WG=a("a"),a7o=o("PoolFormerModel"),n7o=o(" (PoolFormer model)"),s7o=l(),Bu=a("li"),Gge=a("strong"),l7o=o("prophetnet"),i7o=o(" \u2014 "),QG=a("a"),d7o=o("ProphetNetModel"),c7o=o(" (ProphetNet model)"),f7o=l(),Iu=a("li"),Oge=a("strong"),m7o=o("qdqbert"),g7o=o(" \u2014 "),UG=a("a"),h7o=o("QDQBertModel"),p7o=o(" (QDQBert model)"),_7o=l(),Nu=a("li"),Vge=a("strong"),u7o=o("reformer"),b7o=o(" \u2014 "),HG=a("a"),v7o=o("ReformerModel"),F7o=o(" (Reformer model)"),T7o=l(),qu=a("li"),Xge=a("strong"),M7o=o("regnet"),E7o=o(" \u2014 "),JG=a("a"),C7o=o("RegNetModel"),w7o=o(" (RegNet model)"),A7o=l(),ju=a("li"),zge=a("strong"),L7o=o("rembert"),y7o=o(" \u2014 "),YG=a("a"),x7o=o("RemBertModel"),$7o=o(" (RemBERT model)"),k7o=l(),Du=a("li"),Wge=a("strong"),S7o=o("resnet"),R7o=o(" \u2014 "),KG=a("a"),P7o=o("ResNetModel"),B7o=o(" (ResNet model)"),I7o=l(),Gu=a("li"),Qge=a("strong"),N7o=o("retribert"),q7o=o(" \u2014 "),ZG=a("a"),j7o=o("RetriBertModel"),D7o=o(" (RetriBERT model)"),G7o=l(),Ou=a("li"),Uge=a("strong"),O7o=o("roberta"),V7o=o(" \u2014 "),eO=a("a"),X7o=o("RobertaModel"),z7o=o(" (RoBERTa model)"),W7o=l(),Vu=a("li"),Hge=a("strong"),Q7o=o("roformer"),U7o=o(" \u2014 "),oO=a("a"),H7o=o("RoFormerModel"),J7o=o(" (RoFormer model)"),Y7o=l(),Xu=a("li"),Jge=a("strong"),K7o=o("segformer"),Z7o=o(" \u2014 "),rO=a("a"),eLo=o("SegformerModel"),oLo=o(" (SegFormer model)"),rLo=l(),zu=a("li"),Yge=a("strong"),tLo=o("sew"),aLo=o(" \u2014 "),tO=a("a"),nLo=o("SEWModel"),sLo=o(" (SEW model)"),lLo=l(),Wu=a("li"),Kge=a("strong"),iLo=o("sew-d"),dLo=o(" \u2014 "),aO=a("a"),cLo=o("SEWDModel"),fLo=o(" (SEW-D model)"),mLo=l(),Qu=a("li"),Zge=a("strong"),gLo=o("speech_to_text"),hLo=o(" \u2014 "),nO=a("a"),pLo=o("Speech2TextModel"),_Lo=o(" (Speech2Text model)"),uLo=l(),Uu=a("li"),ehe=a("strong"),bLo=o("splinter"),vLo=o(" \u2014 "),sO=a("a"),FLo=o("SplinterModel"),TLo=o(" (Splinter model)"),MLo=l(),Hu=a("li"),ohe=a("strong"),ELo=o("squeezebert"),CLo=o(" \u2014 "),lO=a("a"),wLo=o("SqueezeBertModel"),ALo=o(" (SqueezeBERT model)"),LLo=l(),Ju=a("li"),rhe=a("strong"),yLo=o("swin"),xLo=o(" \u2014 "),iO=a("a"),$Lo=o("SwinModel"),kLo=o(" (Swin Transformer model)"),SLo=l(),Yu=a("li"),the=a("strong"),RLo=o("swinv2"),PLo=o(" \u2014 "),dO=a("a"),BLo=o("Swinv2Model"),ILo=o(" (Swin Transformer V2 model)"),NLo=l(),Ku=a("li"),ahe=a("strong"),qLo=o("t5"),jLo=o(" \u2014 "),cO=a("a"),DLo=o("T5Model"),GLo=o(" (T5 model)"),OLo=l(),Zu=a("li"),nhe=a("strong"),VLo=o("tapas"),XLo=o(" \u2014 "),fO=a("a"),zLo=o("TapasModel"),WLo=o(" (TAPAS model)"),QLo=l(),e2=a("li"),she=a("strong"),ULo=o("trajectory_transformer"),HLo=o(" \u2014 "),mO=a("a"),JLo=o("TrajectoryTransformerModel"),YLo=o(" (Trajectory Transformer model)"),KLo=l(),o2=a("li"),lhe=a("strong"),ZLo=o("transfo-xl"),eyo=o(" \u2014 "),gO=a("a"),oyo=o("TransfoXLModel"),ryo=o(" (Transformer-XL model)"),tyo=l(),r2=a("li"),ihe=a("strong"),ayo=o("unispeech"),nyo=o(" \u2014 "),hO=a("a"),syo=o("UniSpeechModel"),lyo=o(" (UniSpeech model)"),iyo=l(),t2=a("li"),dhe=a("strong"),dyo=o("unispeech-sat"),cyo=o(" \u2014 "),pO=a("a"),fyo=o("UniSpeechSatModel"),myo=o(" (UniSpeechSat model)"),gyo=l(),a2=a("li"),che=a("strong"),hyo=o("van"),pyo=o(" \u2014 "),_O=a("a"),_yo=o("VanModel"),uyo=o(" (VAN model)"),byo=l(),n2=a("li"),fhe=a("strong"),vyo=o("videomae"),Fyo=o(" \u2014 "),uO=a("a"),Tyo=o("VideoMAEModel"),Myo=o(" (VideoMAE model)"),Eyo=l(),s2=a("li"),mhe=a("strong"),Cyo=o("vilt"),wyo=o(" \u2014 "),bO=a("a"),Ayo=o("ViltModel"),Lyo=o(" (ViLT model)"),yyo=l(),l2=a("li"),ghe=a("strong"),xyo=o("vision-text-dual-encoder"),$yo=o(" \u2014 "),vO=a("a"),kyo=o("VisionTextDualEncoderModel"),Syo=o(" (VisionTextDualEncoder model)"),Ryo=l(),i2=a("li"),hhe=a("strong"),Pyo=o("visual_bert"),Byo=o(" \u2014 "),FO=a("a"),Iyo=o("VisualBertModel"),Nyo=o(" (VisualBERT model)"),qyo=l(),d2=a("li"),phe=a("strong"),jyo=o("vit"),Dyo=o(" \u2014 "),TO=a("a"),Gyo=o("ViTModel"),Oyo=o(" (ViT model)"),Vyo=l(),c2=a("li"),_he=a("strong"),Xyo=o("vit_mae"),zyo=o(" \u2014 "),MO=a("a"),Wyo=o("ViTMAEModel"),Qyo=o(" (ViTMAE model)"),Uyo=l(),f2=a("li"),uhe=a("strong"),Hyo=o("wav2vec2"),Jyo=o(" \u2014 "),EO=a("a"),Yyo=o("Wav2Vec2Model"),Kyo=o(" (Wav2Vec2 model)"),Zyo=l(),m2=a("li"),bhe=a("strong"),e9o=o("wav2vec2-conformer"),o9o=o(" \u2014 "),CO=a("a"),r9o=o("Wav2Vec2ConformerModel"),t9o=o(" (Wav2Vec2-Conformer model)"),a9o=l(),g2=a("li"),vhe=a("strong"),n9o=o("wavlm"),s9o=o(" \u2014 "),wO=a("a"),l9o=o("WavLMModel"),i9o=o(" (WavLM model)"),d9o=l(),h2=a("li"),Fhe=a("strong"),c9o=o("xglm"),f9o=o(" \u2014 "),AO=a("a"),m9o=o("XGLMModel"),g9o=o(" (XGLM model)"),h9o=l(),p2=a("li"),The=a("strong"),p9o=o("xlm"),_9o=o(" \u2014 "),LO=a("a"),u9o=o("XLMModel"),b9o=o(" (XLM model)"),v9o=l(),_2=a("li"),Mhe=a("strong"),F9o=o("xlm-prophetnet"),T9o=o(" \u2014 "),yO=a("a"),M9o=o("XLMProphetNetModel"),E9o=o(" (XLM-ProphetNet model)"),C9o=l(),u2=a("li"),Ehe=a("strong"),w9o=o("xlm-roberta"),A9o=o(" \u2014 "),xO=a("a"),L9o=o("XLMRobertaModel"),y9o=o(" (XLM-RoBERTa model)"),x9o=l(),b2=a("li"),Che=a("strong"),$9o=o("xlm-roberta-xl"),k9o=o(" \u2014 "),$O=a("a"),S9o=o("XLMRobertaXLModel"),R9o=o(" (XLM-RoBERTa-XL model)"),P9o=l(),v2=a("li"),whe=a("strong"),B9o=o("xlnet"),I9o=o(" \u2014 "),kO=a("a"),N9o=o("XLNetModel"),q9o=o(" (XLNet model)"),j9o=l(),F2=a("li"),Ahe=a("strong"),D9o=o("yolos"),G9o=o(" \u2014 "),SO=a("a"),O9o=o("YolosModel"),V9o=o(" (YOLOS model)"),X9o=l(),T2=a("li"),Lhe=a("strong"),z9o=o("yoso"),W9o=o(" \u2014 "),RO=a("a"),Q9o=o("YosoModel"),U9o=o(" (YOSO model)"),H9o=l(),M2=a("p"),J9o=o("The model is set in evaluation mode by default using "),yhe=a("code"),Y9o=o("model.eval()"),K9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),Z9o=o("model.train()"),exo=l(),F(E2.$$.fragment),jQe=l(),nd=a("h2"),C2=a("a"),$he=a("span"),F(Dy.$$.fragment),oxo=l(),khe=a("span"),rxo=o("AutoModelForPreTraining"),DQe=l(),Ro=a("div"),F(Gy.$$.fragment),txo=l(),sd=a("p"),axo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PO=a("a"),nxo=o("from_pretrained()"),sxo=o(" class method or the "),BO=a("a"),lxo=o("from_config()"),ixo=o(` class
method.`),dxo=l(),Oy=a("p"),cxo=o("This class cannot be instantiated directly using "),She=a("code"),fxo=o("__init__()"),mxo=o(" (throws an error)."),gxo=l(),gt=a("div"),F(Vy.$$.fragment),hxo=l(),Rhe=a("p"),pxo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_xo=l(),ld=a("p"),uxo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),bxo=o("not"),vxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),Fxo=o("from_pretrained()"),Txo=o(" to load the model weights."),Mxo=l(),F(w2.$$.fragment),Exo=l(),Ke=a("div"),F(Xy.$$.fragment),Cxo=l(),Bhe=a("p"),wxo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Axo=l(),Xa=a("p"),Lxo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),yxo=o("model_type"),xxo=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),$xo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),Sxo=o("pretrained_model_name_or_path"),Rxo=o(":"),Pxo=l(),G=a("ul"),A2=a("li"),jhe=a("strong"),Bxo=o("albert"),Ixo=o(" \u2014 "),NO=a("a"),Nxo=o("AlbertForPreTraining"),qxo=o(" (ALBERT model)"),jxo=l(),L2=a("li"),Dhe=a("strong"),Dxo=o("bart"),Gxo=o(" \u2014 "),qO=a("a"),Oxo=o("BartForConditionalGeneration"),Vxo=o(" (BART model)"),Xxo=l(),y2=a("li"),Ghe=a("strong"),zxo=o("bert"),Wxo=o(" \u2014 "),jO=a("a"),Qxo=o("BertForPreTraining"),Uxo=o(" (BERT model)"),Hxo=l(),x2=a("li"),Ohe=a("strong"),Jxo=o("big_bird"),Yxo=o(" \u2014 "),DO=a("a"),Kxo=o("BigBirdForPreTraining"),Zxo=o(" (BigBird model)"),e$o=l(),$2=a("li"),Vhe=a("strong"),o$o=o("bloom"),r$o=o(" \u2014 "),GO=a("a"),t$o=o("BloomForCausalLM"),a$o=o(" (BLOOM model)"),n$o=l(),k2=a("li"),Xhe=a("strong"),s$o=o("camembert"),l$o=o(" \u2014 "),OO=a("a"),i$o=o("CamembertForMaskedLM"),d$o=o(" (CamemBERT model)"),c$o=l(),S2=a("li"),zhe=a("strong"),f$o=o("ctrl"),m$o=o(" \u2014 "),VO=a("a"),g$o=o("CTRLLMHeadModel"),h$o=o(" (CTRL model)"),p$o=l(),R2=a("li"),Whe=a("strong"),_$o=o("data2vec-text"),u$o=o(" \u2014 "),XO=a("a"),b$o=o("Data2VecTextForMaskedLM"),v$o=o(" (Data2VecText model)"),F$o=l(),P2=a("li"),Qhe=a("strong"),T$o=o("deberta"),M$o=o(" \u2014 "),zO=a("a"),E$o=o("DebertaForMaskedLM"),C$o=o(" (DeBERTa model)"),w$o=l(),B2=a("li"),Uhe=a("strong"),A$o=o("deberta-v2"),L$o=o(" \u2014 "),WO=a("a"),y$o=o("DebertaV2ForMaskedLM"),x$o=o(" (DeBERTa-v2 model)"),$$o=l(),I2=a("li"),Hhe=a("strong"),k$o=o("distilbert"),S$o=o(" \u2014 "),QO=a("a"),R$o=o("DistilBertForMaskedLM"),P$o=o(" (DistilBERT model)"),B$o=l(),N2=a("li"),Jhe=a("strong"),I$o=o("electra"),N$o=o(" \u2014 "),UO=a("a"),q$o=o("ElectraForPreTraining"),j$o=o(" (ELECTRA model)"),D$o=l(),q2=a("li"),Yhe=a("strong"),G$o=o("flaubert"),O$o=o(" \u2014 "),HO=a("a"),V$o=o("FlaubertWithLMHeadModel"),X$o=o(" (FlauBERT model)"),z$o=l(),j2=a("li"),Khe=a("strong"),W$o=o("flava"),Q$o=o(" \u2014 "),JO=a("a"),U$o=o("FlavaForPreTraining"),H$o=o(" (FLAVA model)"),J$o=l(),D2=a("li"),Zhe=a("strong"),Y$o=o("fnet"),K$o=o(" \u2014 "),YO=a("a"),Z$o=o("FNetForPreTraining"),eko=o(" (FNet model)"),oko=l(),G2=a("li"),epe=a("strong"),rko=o("fsmt"),tko=o(" \u2014 "),KO=a("a"),ako=o("FSMTForConditionalGeneration"),nko=o(" (FairSeq Machine-Translation model)"),sko=l(),O2=a("li"),ope=a("strong"),lko=o("funnel"),iko=o(" \u2014 "),ZO=a("a"),dko=o("FunnelForPreTraining"),cko=o(" (Funnel Transformer model)"),fko=l(),V2=a("li"),rpe=a("strong"),mko=o("gpt2"),gko=o(" \u2014 "),eV=a("a"),hko=o("GPT2LMHeadModel"),pko=o(" (OpenAI GPT-2 model)"),_ko=l(),X2=a("li"),tpe=a("strong"),uko=o("ibert"),bko=o(" \u2014 "),oV=a("a"),vko=o("IBertForMaskedLM"),Fko=o(" (I-BERT model)"),Tko=l(),z2=a("li"),ape=a("strong"),Mko=o("layoutlm"),Eko=o(" \u2014 "),rV=a("a"),Cko=o("LayoutLMForMaskedLM"),wko=o(" (LayoutLM model)"),Ako=l(),W2=a("li"),npe=a("strong"),Lko=o("longformer"),yko=o(" \u2014 "),tV=a("a"),xko=o("LongformerForMaskedLM"),$ko=o(" (Longformer model)"),kko=l(),Q2=a("li"),spe=a("strong"),Sko=o("luke"),Rko=o(" \u2014 "),aV=a("a"),Pko=o("LukeForMaskedLM"),Bko=o(" (LUKE model)"),Iko=l(),U2=a("li"),lpe=a("strong"),Nko=o("lxmert"),qko=o(" \u2014 "),nV=a("a"),jko=o("LxmertForPreTraining"),Dko=o(" (LXMERT model)"),Gko=l(),H2=a("li"),ipe=a("strong"),Oko=o("megatron-bert"),Vko=o(" \u2014 "),sV=a("a"),Xko=o("MegatronBertForPreTraining"),zko=o(" (Megatron-BERT model)"),Wko=l(),J2=a("li"),dpe=a("strong"),Qko=o("mobilebert"),Uko=o(" \u2014 "),lV=a("a"),Hko=o("MobileBertForPreTraining"),Jko=o(" (MobileBERT model)"),Yko=l(),Y2=a("li"),cpe=a("strong"),Kko=o("mpnet"),Zko=o(" \u2014 "),iV=a("a"),eSo=o("MPNetForMaskedLM"),oSo=o(" (MPNet model)"),rSo=l(),K2=a("li"),fpe=a("strong"),tSo=o("mvp"),aSo=o(" \u2014 "),dV=a("a"),nSo=o("MvpForConditionalGeneration"),sSo=o(" (MVP model)"),lSo=l(),Z2=a("li"),mpe=a("strong"),iSo=o("nezha"),dSo=o(" \u2014 "),cV=a("a"),cSo=o("NezhaForPreTraining"),fSo=o(" (Nezha model)"),mSo=l(),e1=a("li"),gpe=a("strong"),gSo=o("openai-gpt"),hSo=o(" \u2014 "),fV=a("a"),pSo=o("OpenAIGPTLMHeadModel"),_So=o(" (OpenAI GPT model)"),uSo=l(),o1=a("li"),hpe=a("strong"),bSo=o("retribert"),vSo=o(" \u2014 "),mV=a("a"),FSo=o("RetriBertModel"),TSo=o(" (RetriBERT model)"),MSo=l(),r1=a("li"),ppe=a("strong"),ESo=o("roberta"),CSo=o(" \u2014 "),gV=a("a"),wSo=o("RobertaForMaskedLM"),ASo=o(" (RoBERTa model)"),LSo=l(),t1=a("li"),_pe=a("strong"),ySo=o("splinter"),xSo=o(" \u2014 "),hV=a("a"),$So=o("SplinterForPreTraining"),kSo=o(" (Splinter model)"),SSo=l(),a1=a("li"),upe=a("strong"),RSo=o("squeezebert"),PSo=o(" \u2014 "),pV=a("a"),BSo=o("SqueezeBertForMaskedLM"),ISo=o(" (SqueezeBERT model)"),NSo=l(),n1=a("li"),bpe=a("strong"),qSo=o("t5"),jSo=o(" \u2014 "),_V=a("a"),DSo=o("T5ForConditionalGeneration"),GSo=o(" (T5 model)"),OSo=l(),s1=a("li"),vpe=a("strong"),VSo=o("tapas"),XSo=o(" \u2014 "),uV=a("a"),zSo=o("TapasForMaskedLM"),WSo=o(" (TAPAS model)"),QSo=l(),l1=a("li"),Fpe=a("strong"),USo=o("transfo-xl"),HSo=o(" \u2014 "),bV=a("a"),JSo=o("TransfoXLLMHeadModel"),YSo=o(" (Transformer-XL model)"),KSo=l(),i1=a("li"),Tpe=a("strong"),ZSo=o("unispeech"),eRo=o(" \u2014 "),vV=a("a"),oRo=o("UniSpeechForPreTraining"),rRo=o(" (UniSpeech model)"),tRo=l(),d1=a("li"),Mpe=a("strong"),aRo=o("unispeech-sat"),nRo=o(" \u2014 "),FV=a("a"),sRo=o("UniSpeechSatForPreTraining"),lRo=o(" (UniSpeechSat model)"),iRo=l(),c1=a("li"),Epe=a("strong"),dRo=o("videomae"),cRo=o(" \u2014 "),TV=a("a"),fRo=o("VideoMAEForPreTraining"),mRo=o(" (VideoMAE model)"),gRo=l(),f1=a("li"),Cpe=a("strong"),hRo=o("visual_bert"),pRo=o(" \u2014 "),MV=a("a"),_Ro=o("VisualBertForPreTraining"),uRo=o(" (VisualBERT model)"),bRo=l(),m1=a("li"),wpe=a("strong"),vRo=o("vit_mae"),FRo=o(" \u2014 "),EV=a("a"),TRo=o("ViTMAEForPreTraining"),MRo=o(" (ViTMAE model)"),ERo=l(),g1=a("li"),Ape=a("strong"),CRo=o("wav2vec2"),wRo=o(" \u2014 "),CV=a("a"),ARo=o("Wav2Vec2ForPreTraining"),LRo=o(" (Wav2Vec2 model)"),yRo=l(),h1=a("li"),Lpe=a("strong"),xRo=o("wav2vec2-conformer"),$Ro=o(" \u2014 "),wV=a("a"),kRo=o("Wav2Vec2ConformerForPreTraining"),SRo=o(" (Wav2Vec2-Conformer model)"),RRo=l(),p1=a("li"),ype=a("strong"),PRo=o("xlm"),BRo=o(" \u2014 "),AV=a("a"),IRo=o("XLMWithLMHeadModel"),NRo=o(" (XLM model)"),qRo=l(),_1=a("li"),xpe=a("strong"),jRo=o("xlm-roberta"),DRo=o(" \u2014 "),LV=a("a"),GRo=o("XLMRobertaForMaskedLM"),ORo=o(" (XLM-RoBERTa model)"),VRo=l(),u1=a("li"),$pe=a("strong"),XRo=o("xlm-roberta-xl"),zRo=o(" \u2014 "),yV=a("a"),WRo=o("XLMRobertaXLForMaskedLM"),QRo=o(" (XLM-RoBERTa-XL model)"),URo=l(),b1=a("li"),kpe=a("strong"),HRo=o("xlnet"),JRo=o(" \u2014 "),xV=a("a"),YRo=o("XLNetLMHeadModel"),KRo=o(" (XLNet model)"),ZRo=l(),v1=a("p"),ePo=o("The model is set in evaluation mode by default using "),Spe=a("code"),oPo=o("model.eval()"),rPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),tPo=o("model.train()"),aPo=l(),F(F1.$$.fragment),GQe=l(),id=a("h2"),T1=a("a"),Ppe=a("span"),F(zy.$$.fragment),nPo=l(),Bpe=a("span"),sPo=o("AutoModelForCausalLM"),OQe=l(),Po=a("div"),F(Wy.$$.fragment),lPo=l(),dd=a("p"),iPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$V=a("a"),dPo=o("from_pretrained()"),cPo=o(" class method or the "),kV=a("a"),fPo=o("from_config()"),mPo=o(` class
method.`),gPo=l(),Qy=a("p"),hPo=o("This class cannot be instantiated directly using "),Ipe=a("code"),pPo=o("__init__()"),_Po=o(" (throws an error)."),uPo=l(),ht=a("div"),F(Uy.$$.fragment),bPo=l(),Npe=a("p"),vPo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FPo=l(),cd=a("p"),TPo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),MPo=o("not"),EPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),CPo=o("from_pretrained()"),wPo=o(" to load the model weights."),APo=l(),F(M1.$$.fragment),LPo=l(),Ze=a("div"),F(Hy.$$.fragment),yPo=l(),jpe=a("p"),xPo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Po=l(),za=a("p"),kPo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),SPo=o("model_type"),RPo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),PPo=o("pretrained_model_name_or_path"),BPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),IPo=o("pretrained_model_name_or_path"),NPo=o(":"),qPo=l(),z=a("ul"),E1=a("li"),Vpe=a("strong"),jPo=o("bart"),DPo=o(" \u2014 "),RV=a("a"),GPo=o("BartForCausalLM"),OPo=o(" (BART model)"),VPo=l(),C1=a("li"),Xpe=a("strong"),XPo=o("bert"),zPo=o(" \u2014 "),PV=a("a"),WPo=o("BertLMHeadModel"),QPo=o(" (BERT model)"),UPo=l(),w1=a("li"),zpe=a("strong"),HPo=o("bert-generation"),JPo=o(" \u2014 "),BV=a("a"),YPo=o("BertGenerationDecoder"),KPo=o(" (Bert Generation model)"),ZPo=l(),A1=a("li"),Wpe=a("strong"),eBo=o("big_bird"),oBo=o(" \u2014 "),IV=a("a"),rBo=o("BigBirdForCausalLM"),tBo=o(" (BigBird model)"),aBo=l(),L1=a("li"),Qpe=a("strong"),nBo=o("bigbird_pegasus"),sBo=o(" \u2014 "),NV=a("a"),lBo=o("BigBirdPegasusForCausalLM"),iBo=o(" (BigBird-Pegasus model)"),dBo=l(),y1=a("li"),Upe=a("strong"),cBo=o("blenderbot"),fBo=o(" \u2014 "),qV=a("a"),mBo=o("BlenderbotForCausalLM"),gBo=o(" (Blenderbot model)"),hBo=l(),x1=a("li"),Hpe=a("strong"),pBo=o("blenderbot-small"),_Bo=o(" \u2014 "),jV=a("a"),uBo=o("BlenderbotSmallForCausalLM"),bBo=o(" (BlenderbotSmall model)"),vBo=l(),$1=a("li"),Jpe=a("strong"),FBo=o("bloom"),TBo=o(" \u2014 "),DV=a("a"),MBo=o("BloomForCausalLM"),EBo=o(" (BLOOM model)"),CBo=l(),k1=a("li"),Ype=a("strong"),wBo=o("camembert"),ABo=o(" \u2014 "),GV=a("a"),LBo=o("CamembertForCausalLM"),yBo=o(" (CamemBERT model)"),xBo=l(),S1=a("li"),Kpe=a("strong"),$Bo=o("codegen"),kBo=o(" \u2014 "),OV=a("a"),SBo=o("CodeGenForCausalLM"),RBo=o(" (CodeGen model)"),PBo=l(),R1=a("li"),Zpe=a("strong"),BBo=o("ctrl"),IBo=o(" \u2014 "),VV=a("a"),NBo=o("CTRLLMHeadModel"),qBo=o(" (CTRL model)"),jBo=l(),P1=a("li"),e_e=a("strong"),DBo=o("data2vec-text"),GBo=o(" \u2014 "),XV=a("a"),OBo=o("Data2VecTextForCausalLM"),VBo=o(" (Data2VecText model)"),XBo=l(),B1=a("li"),o_e=a("strong"),zBo=o("electra"),WBo=o(" \u2014 "),zV=a("a"),QBo=o("ElectraForCausalLM"),UBo=o(" (ELECTRA model)"),HBo=l(),I1=a("li"),r_e=a("strong"),JBo=o("gpt2"),YBo=o(" \u2014 "),WV=a("a"),KBo=o("GPT2LMHeadModel"),ZBo=o(" (OpenAI GPT-2 model)"),eIo=l(),N1=a("li"),t_e=a("strong"),oIo=o("gpt_neo"),rIo=o(" \u2014 "),QV=a("a"),tIo=o("GPTNeoForCausalLM"),aIo=o(" (GPT Neo model)"),nIo=l(),q1=a("li"),a_e=a("strong"),sIo=o("gpt_neox"),lIo=o(" \u2014 "),UV=a("a"),iIo=o("GPTNeoXForCausalLM"),dIo=o(" (GPT NeoX model)"),cIo=l(),j1=a("li"),n_e=a("strong"),fIo=o("gptj"),mIo=o(" \u2014 "),HV=a("a"),gIo=o("GPTJForCausalLM"),hIo=o(" (GPT-J model)"),pIo=l(),D1=a("li"),s_e=a("strong"),_Io=o("marian"),uIo=o(" \u2014 "),JV=a("a"),bIo=o("MarianForCausalLM"),vIo=o(" (Marian model)"),FIo=l(),G1=a("li"),l_e=a("strong"),TIo=o("mbart"),MIo=o(" \u2014 "),YV=a("a"),EIo=o("MBartForCausalLM"),CIo=o(" (mBART model)"),wIo=l(),O1=a("li"),i_e=a("strong"),AIo=o("megatron-bert"),LIo=o(" \u2014 "),KV=a("a"),yIo=o("MegatronBertForCausalLM"),xIo=o(" (Megatron-BERT model)"),$Io=l(),V1=a("li"),d_e=a("strong"),kIo=o("mvp"),SIo=o(" \u2014 "),ZV=a("a"),RIo=o("MvpForCausalLM"),PIo=o(" (MVP model)"),BIo=l(),X1=a("li"),c_e=a("strong"),IIo=o("openai-gpt"),NIo=o(" \u2014 "),eX=a("a"),qIo=o("OpenAIGPTLMHeadModel"),jIo=o(" (OpenAI GPT model)"),DIo=l(),z1=a("li"),f_e=a("strong"),GIo=o("opt"),OIo=o(" \u2014 "),oX=a("a"),VIo=o("OPTForCausalLM"),XIo=o(" (OPT model)"),zIo=l(),W1=a("li"),m_e=a("strong"),WIo=o("pegasus"),QIo=o(" \u2014 "),rX=a("a"),UIo=o("PegasusForCausalLM"),HIo=o(" (Pegasus model)"),JIo=l(),Q1=a("li"),g_e=a("strong"),YIo=o("plbart"),KIo=o(" \u2014 "),tX=a("a"),ZIo=o("PLBartForCausalLM"),eNo=o(" (PLBart model)"),oNo=l(),U1=a("li"),h_e=a("strong"),rNo=o("prophetnet"),tNo=o(" \u2014 "),aX=a("a"),aNo=o("ProphetNetForCausalLM"),nNo=o(" (ProphetNet model)"),sNo=l(),H1=a("li"),p_e=a("strong"),lNo=o("qdqbert"),iNo=o(" \u2014 "),nX=a("a"),dNo=o("QDQBertLMHeadModel"),cNo=o(" (QDQBert model)"),fNo=l(),J1=a("li"),__e=a("strong"),mNo=o("reformer"),gNo=o(" \u2014 "),sX=a("a"),hNo=o("ReformerModelWithLMHead"),pNo=o(" (Reformer model)"),_No=l(),Y1=a("li"),u_e=a("strong"),uNo=o("rembert"),bNo=o(" \u2014 "),lX=a("a"),vNo=o("RemBertForCausalLM"),FNo=o(" (RemBERT model)"),TNo=l(),K1=a("li"),b_e=a("strong"),MNo=o("roberta"),ENo=o(" \u2014 "),iX=a("a"),CNo=o("RobertaForCausalLM"),wNo=o(" (RoBERTa model)"),ANo=l(),Z1=a("li"),v_e=a("strong"),LNo=o("roformer"),yNo=o(" \u2014 "),dX=a("a"),xNo=o("RoFormerForCausalLM"),$No=o(" (RoFormer model)"),kNo=l(),eb=a("li"),F_e=a("strong"),SNo=o("speech_to_text_2"),RNo=o(" \u2014 "),cX=a("a"),PNo=o("Speech2Text2ForCausalLM"),BNo=o(" (Speech2Text2 model)"),INo=l(),ob=a("li"),T_e=a("strong"),NNo=o("transfo-xl"),qNo=o(" \u2014 "),fX=a("a"),jNo=o("TransfoXLLMHeadModel"),DNo=o(" (Transformer-XL model)"),GNo=l(),rb=a("li"),M_e=a("strong"),ONo=o("trocr"),VNo=o(" \u2014 "),mX=a("a"),XNo=o("TrOCRForCausalLM"),zNo=o(" (TrOCR model)"),WNo=l(),tb=a("li"),E_e=a("strong"),QNo=o("xglm"),UNo=o(" \u2014 "),gX=a("a"),HNo=o("XGLMForCausalLM"),JNo=o(" (XGLM model)"),YNo=l(),ab=a("li"),C_e=a("strong"),KNo=o("xlm"),ZNo=o(" \u2014 "),hX=a("a"),eqo=o("XLMWithLMHeadModel"),oqo=o(" (XLM model)"),rqo=l(),nb=a("li"),w_e=a("strong"),tqo=o("xlm-prophetnet"),aqo=o(" \u2014 "),pX=a("a"),nqo=o("XLMProphetNetForCausalLM"),sqo=o(" (XLM-ProphetNet model)"),lqo=l(),sb=a("li"),A_e=a("strong"),iqo=o("xlm-roberta"),dqo=o(" \u2014 "),_X=a("a"),cqo=o("XLMRobertaForCausalLM"),fqo=o(" (XLM-RoBERTa model)"),mqo=l(),lb=a("li"),L_e=a("strong"),gqo=o("xlm-roberta-xl"),hqo=o(" \u2014 "),uX=a("a"),pqo=o("XLMRobertaXLForCausalLM"),_qo=o(" (XLM-RoBERTa-XL model)"),uqo=l(),ib=a("li"),y_e=a("strong"),bqo=o("xlnet"),vqo=o(" \u2014 "),bX=a("a"),Fqo=o("XLNetLMHeadModel"),Tqo=o(" (XLNet model)"),Mqo=l(),db=a("p"),Eqo=o("The model is set in evaluation mode by default using "),x_e=a("code"),Cqo=o("model.eval()"),wqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=a("code"),Aqo=o("model.train()"),Lqo=l(),F(cb.$$.fragment),VQe=l(),fd=a("h2"),fb=a("a"),k_e=a("span"),F(Jy.$$.fragment),yqo=l(),S_e=a("span"),xqo=o("AutoModelForMaskedLM"),XQe=l(),Bo=a("div"),F(Yy.$$.fragment),$qo=l(),md=a("p"),kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vX=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" class method or the "),FX=a("a"),Pqo=o("from_config()"),Bqo=o(` class
method.`),Iqo=l(),Ky=a("p"),Nqo=o("This class cannot be instantiated directly using "),R_e=a("code"),qqo=o("__init__()"),jqo=o(" (throws an error)."),Dqo=l(),pt=a("div"),F(Zy.$$.fragment),Gqo=l(),P_e=a("p"),Oqo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vqo=l(),gd=a("p"),Xqo=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),zqo=o("not"),Wqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),Qqo=o("from_pretrained()"),Uqo=o(" to load the model weights."),Hqo=l(),F(mb.$$.fragment),Jqo=l(),eo=a("div"),F(e9.$$.fragment),Yqo=l(),I_e=a("p"),Kqo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zqo=l(),Wa=a("p"),ejo=o("The model class to instantiate is selected based on the "),N_e=a("code"),ojo=o("model_type"),rjo=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=a("code"),njo=o("pretrained_model_name_or_path"),sjo=o(":"),ljo=l(),Q=a("ul"),gb=a("li"),D_e=a("strong"),ijo=o("albert"),djo=o(" \u2014 "),MX=a("a"),cjo=o("AlbertForMaskedLM"),fjo=o(" (ALBERT model)"),mjo=l(),hb=a("li"),G_e=a("strong"),gjo=o("bart"),hjo=o(" \u2014 "),EX=a("a"),pjo=o("BartForConditionalGeneration"),_jo=o(" (BART model)"),ujo=l(),pb=a("li"),O_e=a("strong"),bjo=o("bert"),vjo=o(" \u2014 "),CX=a("a"),Fjo=o("BertForMaskedLM"),Tjo=o(" (BERT model)"),Mjo=l(),_b=a("li"),V_e=a("strong"),Ejo=o("big_bird"),Cjo=o(" \u2014 "),wX=a("a"),wjo=o("BigBirdForMaskedLM"),Ajo=o(" (BigBird model)"),Ljo=l(),ub=a("li"),X_e=a("strong"),yjo=o("camembert"),xjo=o(" \u2014 "),AX=a("a"),$jo=o("CamembertForMaskedLM"),kjo=o(" (CamemBERT model)"),Sjo=l(),bb=a("li"),z_e=a("strong"),Rjo=o("convbert"),Pjo=o(" \u2014 "),LX=a("a"),Bjo=o("ConvBertForMaskedLM"),Ijo=o(" (ConvBERT model)"),Njo=l(),vb=a("li"),W_e=a("strong"),qjo=o("data2vec-text"),jjo=o(" \u2014 "),yX=a("a"),Djo=o("Data2VecTextForMaskedLM"),Gjo=o(" (Data2VecText model)"),Ojo=l(),Fb=a("li"),Q_e=a("strong"),Vjo=o("deberta"),Xjo=o(" \u2014 "),xX=a("a"),zjo=o("DebertaForMaskedLM"),Wjo=o(" (DeBERTa model)"),Qjo=l(),Tb=a("li"),U_e=a("strong"),Ujo=o("deberta-v2"),Hjo=o(" \u2014 "),$X=a("a"),Jjo=o("DebertaV2ForMaskedLM"),Yjo=o(" (DeBERTa-v2 model)"),Kjo=l(),Mb=a("li"),H_e=a("strong"),Zjo=o("distilbert"),eDo=o(" \u2014 "),kX=a("a"),oDo=o("DistilBertForMaskedLM"),rDo=o(" (DistilBERT model)"),tDo=l(),Eb=a("li"),J_e=a("strong"),aDo=o("electra"),nDo=o(" \u2014 "),SX=a("a"),sDo=o("ElectraForMaskedLM"),lDo=o(" (ELECTRA model)"),iDo=l(),Cb=a("li"),Y_e=a("strong"),dDo=o("flaubert"),cDo=o(" \u2014 "),RX=a("a"),fDo=o("FlaubertWithLMHeadModel"),mDo=o(" (FlauBERT model)"),gDo=l(),wb=a("li"),K_e=a("strong"),hDo=o("fnet"),pDo=o(" \u2014 "),PX=a("a"),_Do=o("FNetForMaskedLM"),uDo=o(" (FNet model)"),bDo=l(),Ab=a("li"),Z_e=a("strong"),vDo=o("funnel"),FDo=o(" \u2014 "),BX=a("a"),TDo=o("FunnelForMaskedLM"),MDo=o(" (Funnel Transformer model)"),EDo=l(),Lb=a("li"),eue=a("strong"),CDo=o("ibert"),wDo=o(" \u2014 "),IX=a("a"),ADo=o("IBertForMaskedLM"),LDo=o(" (I-BERT model)"),yDo=l(),yb=a("li"),oue=a("strong"),xDo=o("layoutlm"),$Do=o(" \u2014 "),NX=a("a"),kDo=o("LayoutLMForMaskedLM"),SDo=o(" (LayoutLM model)"),RDo=l(),xb=a("li"),rue=a("strong"),PDo=o("longformer"),BDo=o(" \u2014 "),qX=a("a"),IDo=o("LongformerForMaskedLM"),NDo=o(" (Longformer model)"),qDo=l(),$b=a("li"),tue=a("strong"),jDo=o("luke"),DDo=o(" \u2014 "),jX=a("a"),GDo=o("LukeForMaskedLM"),ODo=o(" (LUKE model)"),VDo=l(),kb=a("li"),aue=a("strong"),XDo=o("mbart"),zDo=o(" \u2014 "),DX=a("a"),WDo=o("MBartForConditionalGeneration"),QDo=o(" (mBART model)"),UDo=l(),Sb=a("li"),nue=a("strong"),HDo=o("megatron-bert"),JDo=o(" \u2014 "),GX=a("a"),YDo=o("MegatronBertForMaskedLM"),KDo=o(" (Megatron-BERT model)"),ZDo=l(),Rb=a("li"),sue=a("strong"),eGo=o("mobilebert"),oGo=o(" \u2014 "),OX=a("a"),rGo=o("MobileBertForMaskedLM"),tGo=o(" (MobileBERT model)"),aGo=l(),Pb=a("li"),lue=a("strong"),nGo=o("mpnet"),sGo=o(" \u2014 "),VX=a("a"),lGo=o("MPNetForMaskedLM"),iGo=o(" (MPNet model)"),dGo=l(),Bb=a("li"),iue=a("strong"),cGo=o("mvp"),fGo=o(" \u2014 "),XX=a("a"),mGo=o("MvpForConditionalGeneration"),gGo=o(" (MVP model)"),hGo=l(),Ib=a("li"),due=a("strong"),pGo=o("nezha"),_Go=o(" \u2014 "),zX=a("a"),uGo=o("NezhaForMaskedLM"),bGo=o(" (Nezha model)"),vGo=l(),Nb=a("li"),cue=a("strong"),FGo=o("nystromformer"),TGo=o(" \u2014 "),WX=a("a"),MGo=o("NystromformerForMaskedLM"),EGo=o(" (Nystr\xF6mformer model)"),CGo=l(),qb=a("li"),fue=a("strong"),wGo=o("perceiver"),AGo=o(" \u2014 "),QX=a("a"),LGo=o("PerceiverForMaskedLM"),yGo=o(" (Perceiver model)"),xGo=l(),jb=a("li"),mue=a("strong"),$Go=o("qdqbert"),kGo=o(" \u2014 "),UX=a("a"),SGo=o("QDQBertForMaskedLM"),RGo=o(" (QDQBert model)"),PGo=l(),Db=a("li"),gue=a("strong"),BGo=o("reformer"),IGo=o(" \u2014 "),HX=a("a"),NGo=o("ReformerForMaskedLM"),qGo=o(" (Reformer model)"),jGo=l(),Gb=a("li"),hue=a("strong"),DGo=o("rembert"),GGo=o(" \u2014 "),JX=a("a"),OGo=o("RemBertForMaskedLM"),VGo=o(" (RemBERT model)"),XGo=l(),Ob=a("li"),pue=a("strong"),zGo=o("roberta"),WGo=o(" \u2014 "),YX=a("a"),QGo=o("RobertaForMaskedLM"),UGo=o(" (RoBERTa model)"),HGo=l(),Vb=a("li"),_ue=a("strong"),JGo=o("roformer"),YGo=o(" \u2014 "),KX=a("a"),KGo=o("RoFormerForMaskedLM"),ZGo=o(" (RoFormer model)"),eOo=l(),Xb=a("li"),uue=a("strong"),oOo=o("squeezebert"),rOo=o(" \u2014 "),ZX=a("a"),tOo=o("SqueezeBertForMaskedLM"),aOo=o(" (SqueezeBERT model)"),nOo=l(),zb=a("li"),bue=a("strong"),sOo=o("tapas"),lOo=o(" \u2014 "),ez=a("a"),iOo=o("TapasForMaskedLM"),dOo=o(" (TAPAS model)"),cOo=l(),Wb=a("li"),vue=a("strong"),fOo=o("wav2vec2"),mOo=o(" \u2014 "),Fue=a("code"),gOo=o("Wav2Vec2ForMaskedLM"),hOo=o(" (Wav2Vec2 model)"),pOo=l(),Qb=a("li"),Tue=a("strong"),_Oo=o("xlm"),uOo=o(" \u2014 "),oz=a("a"),bOo=o("XLMWithLMHeadModel"),vOo=o(" (XLM model)"),FOo=l(),Ub=a("li"),Mue=a("strong"),TOo=o("xlm-roberta"),MOo=o(" \u2014 "),rz=a("a"),EOo=o("XLMRobertaForMaskedLM"),COo=o(" (XLM-RoBERTa model)"),wOo=l(),Hb=a("li"),Eue=a("strong"),AOo=o("xlm-roberta-xl"),LOo=o(" \u2014 "),tz=a("a"),yOo=o("XLMRobertaXLForMaskedLM"),xOo=o(" (XLM-RoBERTa-XL model)"),$Oo=l(),Jb=a("li"),Cue=a("strong"),kOo=o("yoso"),SOo=o(" \u2014 "),az=a("a"),ROo=o("YosoForMaskedLM"),POo=o(" (YOSO model)"),BOo=l(),Yb=a("p"),IOo=o("The model is set in evaluation mode by default using "),wue=a("code"),NOo=o("model.eval()"),qOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),jOo=o("model.train()"),DOo=l(),F(Kb.$$.fragment),zQe=l(),hd=a("h2"),Zb=a("a"),Lue=a("span"),F(o9.$$.fragment),GOo=l(),yue=a("span"),OOo=o("AutoModelForSeq2SeqLM"),WQe=l(),Io=a("div"),F(r9.$$.fragment),VOo=l(),pd=a("p"),XOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nz=a("a"),zOo=o("from_pretrained()"),WOo=o(" class method or the "),sz=a("a"),QOo=o("from_config()"),UOo=o(` class
method.`),HOo=l(),t9=a("p"),JOo=o("This class cannot be instantiated directly using "),xue=a("code"),YOo=o("__init__()"),KOo=o(" (throws an error)."),ZOo=l(),_t=a("div"),F(a9.$$.fragment),eVo=l(),$ue=a("p"),oVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rVo=l(),_d=a("p"),tVo=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),aVo=o("not"),nVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),sVo=o("from_pretrained()"),lVo=o(" to load the model weights."),iVo=l(),F(ev.$$.fragment),dVo=l(),oo=a("div"),F(n9.$$.fragment),cVo=l(),Sue=a("p"),fVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mVo=l(),Qa=a("p"),gVo=o("The model class to instantiate is selected based on the "),Rue=a("code"),hVo=o("model_type"),pVo=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),_Vo=o("pretrained_model_name_or_path"),uVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(":"),FVo=l(),me=a("ul"),ov=a("li"),Iue=a("strong"),TVo=o("bart"),MVo=o(" \u2014 "),iz=a("a"),EVo=o("BartForConditionalGeneration"),CVo=o(" (BART model)"),wVo=l(),rv=a("li"),Nue=a("strong"),AVo=o("bigbird_pegasus"),LVo=o(" \u2014 "),dz=a("a"),yVo=o("BigBirdPegasusForConditionalGeneration"),xVo=o(" (BigBird-Pegasus model)"),$Vo=l(),tv=a("li"),que=a("strong"),kVo=o("blenderbot"),SVo=o(" \u2014 "),cz=a("a"),RVo=o("BlenderbotForConditionalGeneration"),PVo=o(" (Blenderbot model)"),BVo=l(),av=a("li"),jue=a("strong"),IVo=o("blenderbot-small"),NVo=o(" \u2014 "),fz=a("a"),qVo=o("BlenderbotSmallForConditionalGeneration"),jVo=o(" (BlenderbotSmall model)"),DVo=l(),nv=a("li"),Due=a("strong"),GVo=o("encoder-decoder"),OVo=o(" \u2014 "),mz=a("a"),VVo=o("EncoderDecoderModel"),XVo=o(" (Encoder decoder model)"),zVo=l(),sv=a("li"),Gue=a("strong"),WVo=o("fsmt"),QVo=o(" \u2014 "),gz=a("a"),UVo=o("FSMTForConditionalGeneration"),HVo=o(" (FairSeq Machine-Translation model)"),JVo=l(),lv=a("li"),Oue=a("strong"),YVo=o("led"),KVo=o(" \u2014 "),hz=a("a"),ZVo=o("LEDForConditionalGeneration"),eXo=o(" (LED model)"),oXo=l(),iv=a("li"),Vue=a("strong"),rXo=o("longt5"),tXo=o(" \u2014 "),pz=a("a"),aXo=o("LongT5ForConditionalGeneration"),nXo=o(" (LongT5 model)"),sXo=l(),dv=a("li"),Xue=a("strong"),lXo=o("m2m_100"),iXo=o(" \u2014 "),_z=a("a"),dXo=o("M2M100ForConditionalGeneration"),cXo=o(" (M2M100 model)"),fXo=l(),cv=a("li"),zue=a("strong"),mXo=o("marian"),gXo=o(" \u2014 "),uz=a("a"),hXo=o("MarianMTModel"),pXo=o(" (Marian model)"),_Xo=l(),fv=a("li"),Wue=a("strong"),uXo=o("mbart"),bXo=o(" \u2014 "),bz=a("a"),vXo=o("MBartForConditionalGeneration"),FXo=o(" (mBART model)"),TXo=l(),mv=a("li"),Que=a("strong"),MXo=o("mt5"),EXo=o(" \u2014 "),vz=a("a"),CXo=o("MT5ForConditionalGeneration"),wXo=o(" (MT5 model)"),AXo=l(),gv=a("li"),Uue=a("strong"),LXo=o("mvp"),yXo=o(" \u2014 "),Fz=a("a"),xXo=o("MvpForConditionalGeneration"),$Xo=o(" (MVP model)"),kXo=l(),hv=a("li"),Hue=a("strong"),SXo=o("nllb"),RXo=o(" \u2014 "),Tz=a("a"),PXo=o("M2M100ForConditionalGeneration"),BXo=o(" (NLLB model)"),IXo=l(),pv=a("li"),Jue=a("strong"),NXo=o("pegasus"),qXo=o(" \u2014 "),Mz=a("a"),jXo=o("PegasusForConditionalGeneration"),DXo=o(" (Pegasus model)"),GXo=l(),_v=a("li"),Yue=a("strong"),OXo=o("plbart"),VXo=o(" \u2014 "),Ez=a("a"),XXo=o("PLBartForConditionalGeneration"),zXo=o(" (PLBart model)"),WXo=l(),uv=a("li"),Kue=a("strong"),QXo=o("prophetnet"),UXo=o(" \u2014 "),Cz=a("a"),HXo=o("ProphetNetForConditionalGeneration"),JXo=o(" (ProphetNet model)"),YXo=l(),bv=a("li"),Zue=a("strong"),KXo=o("t5"),ZXo=o(" \u2014 "),wz=a("a"),ezo=o("T5ForConditionalGeneration"),ozo=o(" (T5 model)"),rzo=l(),vv=a("li"),e2e=a("strong"),tzo=o("xlm-prophetnet"),azo=o(" \u2014 "),Az=a("a"),nzo=o("XLMProphetNetForConditionalGeneration"),szo=o(" (XLM-ProphetNet model)"),lzo=l(),Fv=a("p"),izo=o("The model is set in evaluation mode by default using "),o2e=a("code"),dzo=o("model.eval()"),czo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r2e=a("code"),fzo=o("model.train()"),mzo=l(),F(Tv.$$.fragment),QQe=l(),ud=a("h2"),Mv=a("a"),t2e=a("span"),F(s9.$$.fragment),gzo=l(),a2e=a("span"),hzo=o("AutoModelForSequenceClassification"),UQe=l(),No=a("div"),F(l9.$$.fragment),pzo=l(),bd=a("p"),_zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lz=a("a"),uzo=o("from_pretrained()"),bzo=o(" class method or the "),yz=a("a"),vzo=o("from_config()"),Fzo=o(` class
method.`),Tzo=l(),i9=a("p"),Mzo=o("This class cannot be instantiated directly using "),n2e=a("code"),Ezo=o("__init__()"),Czo=o(" (throws an error)."),wzo=l(),ut=a("div"),F(d9.$$.fragment),Azo=l(),s2e=a("p"),Lzo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yzo=l(),vd=a("p"),xzo=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),$zo=o("not"),kzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),Szo=o("from_pretrained()"),Rzo=o(" to load the model weights."),Pzo=l(),F(Ev.$$.fragment),Bzo=l(),ro=a("div"),F(c9.$$.fragment),Izo=l(),i2e=a("p"),Nzo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qzo=l(),Ua=a("p"),jzo=o("The model class to instantiate is selected based on the "),d2e=a("code"),Dzo=o("model_type"),Gzo=o(` property of the config object (either
passed as an argument or loaded from `),c2e=a("code"),Ozo=o("pretrained_model_name_or_path"),Vzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),Xzo=o("pretrained_model_name_or_path"),zzo=o(":"),Wzo=l(),N=a("ul"),Cv=a("li"),m2e=a("strong"),Qzo=o("albert"),Uzo=o(" \u2014 "),$z=a("a"),Hzo=o("AlbertForSequenceClassification"),Jzo=o(" (ALBERT model)"),Yzo=l(),wv=a("li"),g2e=a("strong"),Kzo=o("bart"),Zzo=o(" \u2014 "),kz=a("a"),eWo=o("BartForSequenceClassification"),oWo=o(" (BART model)"),rWo=l(),Av=a("li"),h2e=a("strong"),tWo=o("bert"),aWo=o(" \u2014 "),Sz=a("a"),nWo=o("BertForSequenceClassification"),sWo=o(" (BERT model)"),lWo=l(),Lv=a("li"),p2e=a("strong"),iWo=o("big_bird"),dWo=o(" \u2014 "),Rz=a("a"),cWo=o("BigBirdForSequenceClassification"),fWo=o(" (BigBird model)"),mWo=l(),yv=a("li"),_2e=a("strong"),gWo=o("bigbird_pegasus"),hWo=o(" \u2014 "),Pz=a("a"),pWo=o("BigBirdPegasusForSequenceClassification"),_Wo=o(" (BigBird-Pegasus model)"),uWo=l(),xv=a("li"),u2e=a("strong"),bWo=o("bloom"),vWo=o(" \u2014 "),Bz=a("a"),FWo=o("BloomForSequenceClassification"),TWo=o(" (BLOOM model)"),MWo=l(),$v=a("li"),b2e=a("strong"),EWo=o("camembert"),CWo=o(" \u2014 "),Iz=a("a"),wWo=o("CamembertForSequenceClassification"),AWo=o(" (CamemBERT model)"),LWo=l(),kv=a("li"),v2e=a("strong"),yWo=o("canine"),xWo=o(" \u2014 "),Nz=a("a"),$Wo=o("CanineForSequenceClassification"),kWo=o(" (CANINE model)"),SWo=l(),Sv=a("li"),F2e=a("strong"),RWo=o("convbert"),PWo=o(" \u2014 "),qz=a("a"),BWo=o("ConvBertForSequenceClassification"),IWo=o(" (ConvBERT model)"),NWo=l(),Rv=a("li"),T2e=a("strong"),qWo=o("ctrl"),jWo=o(" \u2014 "),jz=a("a"),DWo=o("CTRLForSequenceClassification"),GWo=o(" (CTRL model)"),OWo=l(),Pv=a("li"),M2e=a("strong"),VWo=o("data2vec-text"),XWo=o(" \u2014 "),Dz=a("a"),zWo=o("Data2VecTextForSequenceClassification"),WWo=o(" (Data2VecText model)"),QWo=l(),Bv=a("li"),E2e=a("strong"),UWo=o("deberta"),HWo=o(" \u2014 "),Gz=a("a"),JWo=o("DebertaForSequenceClassification"),YWo=o(" (DeBERTa model)"),KWo=l(),Iv=a("li"),C2e=a("strong"),ZWo=o("deberta-v2"),eQo=o(" \u2014 "),Oz=a("a"),oQo=o("DebertaV2ForSequenceClassification"),rQo=o(" (DeBERTa-v2 model)"),tQo=l(),Nv=a("li"),w2e=a("strong"),aQo=o("distilbert"),nQo=o(" \u2014 "),Vz=a("a"),sQo=o("DistilBertForSequenceClassification"),lQo=o(" (DistilBERT model)"),iQo=l(),qv=a("li"),A2e=a("strong"),dQo=o("electra"),cQo=o(" \u2014 "),Xz=a("a"),fQo=o("ElectraForSequenceClassification"),mQo=o(" (ELECTRA model)"),gQo=l(),jv=a("li"),L2e=a("strong"),hQo=o("flaubert"),pQo=o(" \u2014 "),zz=a("a"),_Qo=o("FlaubertForSequenceClassification"),uQo=o(" (FlauBERT model)"),bQo=l(),Dv=a("li"),y2e=a("strong"),vQo=o("fnet"),FQo=o(" \u2014 "),Wz=a("a"),TQo=o("FNetForSequenceClassification"),MQo=o(" (FNet model)"),EQo=l(),Gv=a("li"),x2e=a("strong"),CQo=o("funnel"),wQo=o(" \u2014 "),Qz=a("a"),AQo=o("FunnelForSequenceClassification"),LQo=o(" (Funnel Transformer model)"),yQo=l(),Ov=a("li"),$2e=a("strong"),xQo=o("gpt2"),$Qo=o(" \u2014 "),Uz=a("a"),kQo=o("GPT2ForSequenceClassification"),SQo=o(" (OpenAI GPT-2 model)"),RQo=l(),Vv=a("li"),k2e=a("strong"),PQo=o("gpt_neo"),BQo=o(" \u2014 "),Hz=a("a"),IQo=o("GPTNeoForSequenceClassification"),NQo=o(" (GPT Neo model)"),qQo=l(),Xv=a("li"),S2e=a("strong"),jQo=o("gptj"),DQo=o(" \u2014 "),Jz=a("a"),GQo=o("GPTJForSequenceClassification"),OQo=o(" (GPT-J model)"),VQo=l(),zv=a("li"),R2e=a("strong"),XQo=o("ibert"),zQo=o(" \u2014 "),Yz=a("a"),WQo=o("IBertForSequenceClassification"),QQo=o(" (I-BERT model)"),UQo=l(),Wv=a("li"),P2e=a("strong"),HQo=o("layoutlm"),JQo=o(" \u2014 "),Kz=a("a"),YQo=o("LayoutLMForSequenceClassification"),KQo=o(" (LayoutLM model)"),ZQo=l(),Qv=a("li"),B2e=a("strong"),eUo=o("layoutlmv2"),oUo=o(" \u2014 "),Zz=a("a"),rUo=o("LayoutLMv2ForSequenceClassification"),tUo=o(" (LayoutLMv2 model)"),aUo=l(),Uv=a("li"),I2e=a("strong"),nUo=o("layoutlmv3"),sUo=o(" \u2014 "),eW=a("a"),lUo=o("LayoutLMv3ForSequenceClassification"),iUo=o(" (LayoutLMv3 model)"),dUo=l(),Hv=a("li"),N2e=a("strong"),cUo=o("led"),fUo=o(" \u2014 "),oW=a("a"),mUo=o("LEDForSequenceClassification"),gUo=o(" (LED model)"),hUo=l(),Jv=a("li"),q2e=a("strong"),pUo=o("longformer"),_Uo=o(" \u2014 "),rW=a("a"),uUo=o("LongformerForSequenceClassification"),bUo=o(" (Longformer model)"),vUo=l(),Yv=a("li"),j2e=a("strong"),FUo=o("luke"),TUo=o(" \u2014 "),tW=a("a"),MUo=o("LukeForSequenceClassification"),EUo=o(" (LUKE model)"),CUo=l(),Kv=a("li"),D2e=a("strong"),wUo=o("mbart"),AUo=o(" \u2014 "),aW=a("a"),LUo=o("MBartForSequenceClassification"),yUo=o(" (mBART model)"),xUo=l(),Zv=a("li"),G2e=a("strong"),$Uo=o("megatron-bert"),kUo=o(" \u2014 "),nW=a("a"),SUo=o("MegatronBertForSequenceClassification"),RUo=o(" (Megatron-BERT model)"),PUo=l(),e0=a("li"),O2e=a("strong"),BUo=o("mobilebert"),IUo=o(" \u2014 "),sW=a("a"),NUo=o("MobileBertForSequenceClassification"),qUo=o(" (MobileBERT model)"),jUo=l(),o0=a("li"),V2e=a("strong"),DUo=o("mpnet"),GUo=o(" \u2014 "),lW=a("a"),OUo=o("MPNetForSequenceClassification"),VUo=o(" (MPNet model)"),XUo=l(),r0=a("li"),X2e=a("strong"),zUo=o("mvp"),WUo=o(" \u2014 "),iW=a("a"),QUo=o("MvpForSequenceClassification"),UUo=o(" (MVP model)"),HUo=l(),t0=a("li"),z2e=a("strong"),JUo=o("nezha"),YUo=o(" \u2014 "),dW=a("a"),KUo=o("NezhaForSequenceClassification"),ZUo=o(" (Nezha model)"),eHo=l(),a0=a("li"),W2e=a("strong"),oHo=o("nystromformer"),rHo=o(" \u2014 "),cW=a("a"),tHo=o("NystromformerForSequenceClassification"),aHo=o(" (Nystr\xF6mformer model)"),nHo=l(),n0=a("li"),Q2e=a("strong"),sHo=o("openai-gpt"),lHo=o(" \u2014 "),fW=a("a"),iHo=o("OpenAIGPTForSequenceClassification"),dHo=o(" (OpenAI GPT model)"),cHo=l(),s0=a("li"),U2e=a("strong"),fHo=o("opt"),mHo=o(" \u2014 "),mW=a("a"),gHo=o("OPTForSequenceClassification"),hHo=o(" (OPT model)"),pHo=l(),l0=a("li"),H2e=a("strong"),_Ho=o("perceiver"),uHo=o(" \u2014 "),gW=a("a"),bHo=o("PerceiverForSequenceClassification"),vHo=o(" (Perceiver model)"),FHo=l(),i0=a("li"),J2e=a("strong"),THo=o("plbart"),MHo=o(" \u2014 "),hW=a("a"),EHo=o("PLBartForSequenceClassification"),CHo=o(" (PLBart model)"),wHo=l(),d0=a("li"),Y2e=a("strong"),AHo=o("qdqbert"),LHo=o(" \u2014 "),pW=a("a"),yHo=o("QDQBertForSequenceClassification"),xHo=o(" (QDQBert model)"),$Ho=l(),c0=a("li"),K2e=a("strong"),kHo=o("reformer"),SHo=o(" \u2014 "),_W=a("a"),RHo=o("ReformerForSequenceClassification"),PHo=o(" (Reformer model)"),BHo=l(),f0=a("li"),Z2e=a("strong"),IHo=o("rembert"),NHo=o(" \u2014 "),uW=a("a"),qHo=o("RemBertForSequenceClassification"),jHo=o(" (RemBERT model)"),DHo=l(),m0=a("li"),e1e=a("strong"),GHo=o("roberta"),OHo=o(" \u2014 "),bW=a("a"),VHo=o("RobertaForSequenceClassification"),XHo=o(" (RoBERTa model)"),zHo=l(),g0=a("li"),o1e=a("strong"),WHo=o("roformer"),QHo=o(" \u2014 "),vW=a("a"),UHo=o("RoFormerForSequenceClassification"),HHo=o(" (RoFormer model)"),JHo=l(),h0=a("li"),r1e=a("strong"),YHo=o("squeezebert"),KHo=o(" \u2014 "),FW=a("a"),ZHo=o("SqueezeBertForSequenceClassification"),eJo=o(" (SqueezeBERT model)"),oJo=l(),p0=a("li"),t1e=a("strong"),rJo=o("tapas"),tJo=o(" \u2014 "),TW=a("a"),aJo=o("TapasForSequenceClassification"),nJo=o(" (TAPAS model)"),sJo=l(),_0=a("li"),a1e=a("strong"),lJo=o("transfo-xl"),iJo=o(" \u2014 "),MW=a("a"),dJo=o("TransfoXLForSequenceClassification"),cJo=o(" (Transformer-XL model)"),fJo=l(),u0=a("li"),n1e=a("strong"),mJo=o("xlm"),gJo=o(" \u2014 "),EW=a("a"),hJo=o("XLMForSequenceClassification"),pJo=o(" (XLM model)"),_Jo=l(),b0=a("li"),s1e=a("strong"),uJo=o("xlm-roberta"),bJo=o(" \u2014 "),CW=a("a"),vJo=o("XLMRobertaForSequenceClassification"),FJo=o(" (XLM-RoBERTa model)"),TJo=l(),v0=a("li"),l1e=a("strong"),MJo=o("xlm-roberta-xl"),EJo=o(" \u2014 "),wW=a("a"),CJo=o("XLMRobertaXLForSequenceClassification"),wJo=o(" (XLM-RoBERTa-XL model)"),AJo=l(),F0=a("li"),i1e=a("strong"),LJo=o("xlnet"),yJo=o(" \u2014 "),AW=a("a"),xJo=o("XLNetForSequenceClassification"),$Jo=o(" (XLNet model)"),kJo=l(),T0=a("li"),d1e=a("strong"),SJo=o("yoso"),RJo=o(" \u2014 "),LW=a("a"),PJo=o("YosoForSequenceClassification"),BJo=o(" (YOSO model)"),IJo=l(),M0=a("p"),NJo=o("The model is set in evaluation mode by default using "),c1e=a("code"),qJo=o("model.eval()"),jJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=a("code"),DJo=o("model.train()"),GJo=l(),F(E0.$$.fragment),HQe=l(),Fd=a("h2"),C0=a("a"),m1e=a("span"),F(f9.$$.fragment),OJo=l(),g1e=a("span"),VJo=o("AutoModelForMultipleChoice"),JQe=l(),qo=a("div"),F(m9.$$.fragment),XJo=l(),Td=a("p"),zJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yW=a("a"),WJo=o("from_pretrained()"),QJo=o(" class method or the "),xW=a("a"),UJo=o("from_config()"),HJo=o(` class
method.`),JJo=l(),g9=a("p"),YJo=o("This class cannot be instantiated directly using "),h1e=a("code"),KJo=o("__init__()"),ZJo=o(" (throws an error)."),eYo=l(),bt=a("div"),F(h9.$$.fragment),oYo=l(),p1e=a("p"),rYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tYo=l(),Md=a("p"),aYo=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),nYo=o("not"),sYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),lYo=o("from_pretrained()"),iYo=o(" to load the model weights."),dYo=l(),F(w0.$$.fragment),cYo=l(),to=a("div"),F(p9.$$.fragment),fYo=l(),u1e=a("p"),mYo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gYo=l(),Ha=a("p"),hYo=o("The model class to instantiate is selected based on the "),b1e=a("code"),pYo=o("model_type"),_Yo=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),uYo=o("pretrained_model_name_or_path"),bYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),vYo=o("pretrained_model_name_or_path"),FYo=o(":"),TYo=l(),Z=a("ul"),A0=a("li"),T1e=a("strong"),MYo=o("albert"),EYo=o(" \u2014 "),kW=a("a"),CYo=o("AlbertForMultipleChoice"),wYo=o(" (ALBERT model)"),AYo=l(),L0=a("li"),M1e=a("strong"),LYo=o("bert"),yYo=o(" \u2014 "),SW=a("a"),xYo=o("BertForMultipleChoice"),$Yo=o(" (BERT model)"),kYo=l(),y0=a("li"),E1e=a("strong"),SYo=o("big_bird"),RYo=o(" \u2014 "),RW=a("a"),PYo=o("BigBirdForMultipleChoice"),BYo=o(" (BigBird model)"),IYo=l(),x0=a("li"),C1e=a("strong"),NYo=o("camembert"),qYo=o(" \u2014 "),PW=a("a"),jYo=o("CamembertForMultipleChoice"),DYo=o(" (CamemBERT model)"),GYo=l(),$0=a("li"),w1e=a("strong"),OYo=o("canine"),VYo=o(" \u2014 "),BW=a("a"),XYo=o("CanineForMultipleChoice"),zYo=o(" (CANINE model)"),WYo=l(),k0=a("li"),A1e=a("strong"),QYo=o("convbert"),UYo=o(" \u2014 "),IW=a("a"),HYo=o("ConvBertForMultipleChoice"),JYo=o(" (ConvBERT model)"),YYo=l(),S0=a("li"),L1e=a("strong"),KYo=o("data2vec-text"),ZYo=o(" \u2014 "),NW=a("a"),eKo=o("Data2VecTextForMultipleChoice"),oKo=o(" (Data2VecText model)"),rKo=l(),R0=a("li"),y1e=a("strong"),tKo=o("deberta-v2"),aKo=o(" \u2014 "),qW=a("a"),nKo=o("DebertaV2ForMultipleChoice"),sKo=o(" (DeBERTa-v2 model)"),lKo=l(),P0=a("li"),x1e=a("strong"),iKo=o("distilbert"),dKo=o(" \u2014 "),jW=a("a"),cKo=o("DistilBertForMultipleChoice"),fKo=o(" (DistilBERT model)"),mKo=l(),B0=a("li"),$1e=a("strong"),gKo=o("electra"),hKo=o(" \u2014 "),DW=a("a"),pKo=o("ElectraForMultipleChoice"),_Ko=o(" (ELECTRA model)"),uKo=l(),I0=a("li"),k1e=a("strong"),bKo=o("flaubert"),vKo=o(" \u2014 "),GW=a("a"),FKo=o("FlaubertForMultipleChoice"),TKo=o(" (FlauBERT model)"),MKo=l(),N0=a("li"),S1e=a("strong"),EKo=o("fnet"),CKo=o(" \u2014 "),OW=a("a"),wKo=o("FNetForMultipleChoice"),AKo=o(" (FNet model)"),LKo=l(),q0=a("li"),R1e=a("strong"),yKo=o("funnel"),xKo=o(" \u2014 "),VW=a("a"),$Ko=o("FunnelForMultipleChoice"),kKo=o(" (Funnel Transformer model)"),SKo=l(),j0=a("li"),P1e=a("strong"),RKo=o("ibert"),PKo=o(" \u2014 "),XW=a("a"),BKo=o("IBertForMultipleChoice"),IKo=o(" (I-BERT model)"),NKo=l(),D0=a("li"),B1e=a("strong"),qKo=o("longformer"),jKo=o(" \u2014 "),zW=a("a"),DKo=o("LongformerForMultipleChoice"),GKo=o(" (Longformer model)"),OKo=l(),G0=a("li"),I1e=a("strong"),VKo=o("luke"),XKo=o(" \u2014 "),WW=a("a"),zKo=o("LukeForMultipleChoice"),WKo=o(" (LUKE model)"),QKo=l(),O0=a("li"),N1e=a("strong"),UKo=o("megatron-bert"),HKo=o(" \u2014 "),QW=a("a"),JKo=o("MegatronBertForMultipleChoice"),YKo=o(" (Megatron-BERT model)"),KKo=l(),V0=a("li"),q1e=a("strong"),ZKo=o("mobilebert"),eZo=o(" \u2014 "),UW=a("a"),oZo=o("MobileBertForMultipleChoice"),rZo=o(" (MobileBERT model)"),tZo=l(),X0=a("li"),j1e=a("strong"),aZo=o("mpnet"),nZo=o(" \u2014 "),HW=a("a"),sZo=o("MPNetForMultipleChoice"),lZo=o(" (MPNet model)"),iZo=l(),z0=a("li"),D1e=a("strong"),dZo=o("nezha"),cZo=o(" \u2014 "),JW=a("a"),fZo=o("NezhaForMultipleChoice"),mZo=o(" (Nezha model)"),gZo=l(),W0=a("li"),G1e=a("strong"),hZo=o("nystromformer"),pZo=o(" \u2014 "),YW=a("a"),_Zo=o("NystromformerForMultipleChoice"),uZo=o(" (Nystr\xF6mformer model)"),bZo=l(),Q0=a("li"),O1e=a("strong"),vZo=o("qdqbert"),FZo=o(" \u2014 "),KW=a("a"),TZo=o("QDQBertForMultipleChoice"),MZo=o(" (QDQBert model)"),EZo=l(),U0=a("li"),V1e=a("strong"),CZo=o("rembert"),wZo=o(" \u2014 "),ZW=a("a"),AZo=o("RemBertForMultipleChoice"),LZo=o(" (RemBERT model)"),yZo=l(),H0=a("li"),X1e=a("strong"),xZo=o("roberta"),$Zo=o(" \u2014 "),eQ=a("a"),kZo=o("RobertaForMultipleChoice"),SZo=o(" (RoBERTa model)"),RZo=l(),J0=a("li"),z1e=a("strong"),PZo=o("roformer"),BZo=o(" \u2014 "),oQ=a("a"),IZo=o("RoFormerForMultipleChoice"),NZo=o(" (RoFormer model)"),qZo=l(),Y0=a("li"),W1e=a("strong"),jZo=o("squeezebert"),DZo=o(" \u2014 "),rQ=a("a"),GZo=o("SqueezeBertForMultipleChoice"),OZo=o(" (SqueezeBERT model)"),VZo=l(),K0=a("li"),Q1e=a("strong"),XZo=o("xlm"),zZo=o(" \u2014 "),tQ=a("a"),WZo=o("XLMForMultipleChoice"),QZo=o(" (XLM model)"),UZo=l(),Z0=a("li"),U1e=a("strong"),HZo=o("xlm-roberta"),JZo=o(" \u2014 "),aQ=a("a"),YZo=o("XLMRobertaForMultipleChoice"),KZo=o(" (XLM-RoBERTa model)"),ZZo=l(),e6=a("li"),H1e=a("strong"),eer=o("xlm-roberta-xl"),oer=o(" \u2014 "),nQ=a("a"),rer=o("XLMRobertaXLForMultipleChoice"),ter=o(" (XLM-RoBERTa-XL model)"),aer=l(),o6=a("li"),J1e=a("strong"),ner=o("xlnet"),ser=o(" \u2014 "),sQ=a("a"),ler=o("XLNetForMultipleChoice"),ier=o(" (XLNet model)"),der=l(),r6=a("li"),Y1e=a("strong"),cer=o("yoso"),fer=o(" \u2014 "),lQ=a("a"),mer=o("YosoForMultipleChoice"),ger=o(" (YOSO model)"),her=l(),t6=a("p"),per=o("The model is set in evaluation mode by default using "),K1e=a("code"),_er=o("model.eval()"),uer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=a("code"),ber=o("model.train()"),ver=l(),F(a6.$$.fragment),YQe=l(),Ed=a("h2"),n6=a("a"),ebe=a("span"),F(_9.$$.fragment),Fer=l(),obe=a("span"),Ter=o("AutoModelForNextSentencePrediction"),KQe=l(),jo=a("div"),F(u9.$$.fragment),Mer=l(),Cd=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iQ=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),dQ=a("a"),Aer=o("from_config()"),Ler=o(` class
method.`),yer=l(),b9=a("p"),xer=o("This class cannot be instantiated directly using "),rbe=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),vt=a("div"),F(v9.$$.fragment),Rer=l(),tbe=a("p"),Per=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ber=l(),wd=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),Ner=o("not"),qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),F(s6.$$.fragment),Oer=l(),ao=a("div"),F(F9.$$.fragment),Ver=l(),nbe=a("p"),Xer=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zer=l(),Ja=a("p"),Wer=o("The model class to instantiate is selected based on the "),sbe=a("code"),Qer=o("model_type"),Uer=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),Her=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),Do=a("ul"),l6=a("li"),dbe=a("strong"),eor=o("bert"),oor=o(" \u2014 "),fQ=a("a"),ror=o("BertForNextSentencePrediction"),tor=o(" (BERT model)"),aor=l(),i6=a("li"),cbe=a("strong"),nor=o("fnet"),sor=o(" \u2014 "),mQ=a("a"),lor=o("FNetForNextSentencePrediction"),ior=o(" (FNet model)"),dor=l(),d6=a("li"),fbe=a("strong"),cor=o("megatron-bert"),mor=o(" \u2014 "),gQ=a("a"),gor=o("MegatronBertForNextSentencePrediction"),hor=o(" (Megatron-BERT model)"),por=l(),c6=a("li"),mbe=a("strong"),_or=o("mobilebert"),uor=o(" \u2014 "),hQ=a("a"),bor=o("MobileBertForNextSentencePrediction"),vor=o(" (MobileBERT model)"),For=l(),f6=a("li"),gbe=a("strong"),Tor=o("nezha"),Mor=o(" \u2014 "),pQ=a("a"),Eor=o("NezhaForNextSentencePrediction"),Cor=o(" (Nezha model)"),wor=l(),m6=a("li"),hbe=a("strong"),Aor=o("qdqbert"),Lor=o(" \u2014 "),_Q=a("a"),yor=o("QDQBertForNextSentencePrediction"),xor=o(" (QDQBert model)"),$or=l(),g6=a("p"),kor=o("The model is set in evaluation mode by default using "),pbe=a("code"),Sor=o("model.eval()"),Ror=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=a("code"),Por=o("model.train()"),Bor=l(),F(h6.$$.fragment),ZQe=l(),Ad=a("h2"),p6=a("a"),ube=a("span"),F(T9.$$.fragment),Ior=l(),bbe=a("span"),Nor=o("AutoModelForTokenClassification"),eUe=l(),Go=a("div"),F(M9.$$.fragment),qor=l(),Ld=a("p"),jor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uQ=a("a"),Dor=o("from_pretrained()"),Gor=o(" class method or the "),bQ=a("a"),Oor=o("from_config()"),Vor=o(` class
method.`),Xor=l(),E9=a("p"),zor=o("This class cannot be instantiated directly using "),vbe=a("code"),Wor=o("__init__()"),Qor=o(" (throws an error)."),Uor=l(),Ft=a("div"),F(C9.$$.fragment),Hor=l(),Fbe=a("p"),Jor=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yor=l(),yd=a("p"),Kor=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),Zor=o("not"),err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),orr=o("from_pretrained()"),rrr=o(" to load the model weights."),trr=l(),F(_6.$$.fragment),arr=l(),no=a("div"),F(w9.$$.fragment),nrr=l(),Mbe=a("p"),srr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lrr=l(),Ya=a("p"),irr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),drr=o("model_type"),crr=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),frr=o("pretrained_model_name_or_path"),mrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),grr=o("pretrained_model_name_or_path"),hrr=o(":"),prr=l(),H=a("ul"),u6=a("li"),Abe=a("strong"),_rr=o("albert"),urr=o(" \u2014 "),FQ=a("a"),brr=o("AlbertForTokenClassification"),vrr=o(" (ALBERT model)"),Frr=l(),b6=a("li"),Lbe=a("strong"),Trr=o("bert"),Mrr=o(" \u2014 "),TQ=a("a"),Err=o("BertForTokenClassification"),Crr=o(" (BERT model)"),wrr=l(),v6=a("li"),ybe=a("strong"),Arr=o("big_bird"),Lrr=o(" \u2014 "),MQ=a("a"),yrr=o("BigBirdForTokenClassification"),xrr=o(" (BigBird model)"),$rr=l(),F6=a("li"),xbe=a("strong"),krr=o("bloom"),Srr=o(" \u2014 "),EQ=a("a"),Rrr=o("BloomForTokenClassification"),Prr=o(" (BLOOM model)"),Brr=l(),T6=a("li"),$be=a("strong"),Irr=o("camembert"),Nrr=o(" \u2014 "),CQ=a("a"),qrr=o("CamembertForTokenClassification"),jrr=o(" (CamemBERT model)"),Drr=l(),M6=a("li"),kbe=a("strong"),Grr=o("canine"),Orr=o(" \u2014 "),wQ=a("a"),Vrr=o("CanineForTokenClassification"),Xrr=o(" (CANINE model)"),zrr=l(),E6=a("li"),Sbe=a("strong"),Wrr=o("convbert"),Qrr=o(" \u2014 "),AQ=a("a"),Urr=o("ConvBertForTokenClassification"),Hrr=o(" (ConvBERT model)"),Jrr=l(),C6=a("li"),Rbe=a("strong"),Yrr=o("data2vec-text"),Krr=o(" \u2014 "),LQ=a("a"),Zrr=o("Data2VecTextForTokenClassification"),etr=o(" (Data2VecText model)"),otr=l(),w6=a("li"),Pbe=a("strong"),rtr=o("deberta"),ttr=o(" \u2014 "),yQ=a("a"),atr=o("DebertaForTokenClassification"),ntr=o(" (DeBERTa model)"),str=l(),A6=a("li"),Bbe=a("strong"),ltr=o("deberta-v2"),itr=o(" \u2014 "),xQ=a("a"),dtr=o("DebertaV2ForTokenClassification"),ctr=o(" (DeBERTa-v2 model)"),ftr=l(),L6=a("li"),Ibe=a("strong"),mtr=o("distilbert"),gtr=o(" \u2014 "),$Q=a("a"),htr=o("DistilBertForTokenClassification"),ptr=o(" (DistilBERT model)"),_tr=l(),y6=a("li"),Nbe=a("strong"),utr=o("electra"),btr=o(" \u2014 "),kQ=a("a"),vtr=o("ElectraForTokenClassification"),Ftr=o(" (ELECTRA model)"),Ttr=l(),x6=a("li"),qbe=a("strong"),Mtr=o("flaubert"),Etr=o(" \u2014 "),SQ=a("a"),Ctr=o("FlaubertForTokenClassification"),wtr=o(" (FlauBERT model)"),Atr=l(),$6=a("li"),jbe=a("strong"),Ltr=o("fnet"),ytr=o(" \u2014 "),RQ=a("a"),xtr=o("FNetForTokenClassification"),$tr=o(" (FNet model)"),ktr=l(),k6=a("li"),Dbe=a("strong"),Str=o("funnel"),Rtr=o(" \u2014 "),PQ=a("a"),Ptr=o("FunnelForTokenClassification"),Btr=o(" (Funnel Transformer model)"),Itr=l(),S6=a("li"),Gbe=a("strong"),Ntr=o("gpt2"),qtr=o(" \u2014 "),BQ=a("a"),jtr=o("GPT2ForTokenClassification"),Dtr=o(" (OpenAI GPT-2 model)"),Gtr=l(),R6=a("li"),Obe=a("strong"),Otr=o("ibert"),Vtr=o(" \u2014 "),IQ=a("a"),Xtr=o("IBertForTokenClassification"),ztr=o(" (I-BERT model)"),Wtr=l(),P6=a("li"),Vbe=a("strong"),Qtr=o("layoutlm"),Utr=o(" \u2014 "),NQ=a("a"),Htr=o("LayoutLMForTokenClassification"),Jtr=o(" (LayoutLM model)"),Ytr=l(),B6=a("li"),Xbe=a("strong"),Ktr=o("layoutlmv2"),Ztr=o(" \u2014 "),qQ=a("a"),ear=o("LayoutLMv2ForTokenClassification"),oar=o(" (LayoutLMv2 model)"),rar=l(),I6=a("li"),zbe=a("strong"),tar=o("layoutlmv3"),aar=o(" \u2014 "),jQ=a("a"),nar=o("LayoutLMv3ForTokenClassification"),sar=o(" (LayoutLMv3 model)"),lar=l(),N6=a("li"),Wbe=a("strong"),iar=o("longformer"),dar=o(" \u2014 "),DQ=a("a"),car=o("LongformerForTokenClassification"),far=o(" (Longformer model)"),mar=l(),q6=a("li"),Qbe=a("strong"),gar=o("luke"),har=o(" \u2014 "),GQ=a("a"),par=o("LukeForTokenClassification"),_ar=o(" (LUKE model)"),uar=l(),j6=a("li"),Ube=a("strong"),bar=o("megatron-bert"),Far=o(" \u2014 "),OQ=a("a"),Tar=o("MegatronBertForTokenClassification"),Mar=o(" (Megatron-BERT model)"),Ear=l(),D6=a("li"),Hbe=a("strong"),Car=o("mobilebert"),war=o(" \u2014 "),VQ=a("a"),Aar=o("MobileBertForTokenClassification"),Lar=o(" (MobileBERT model)"),yar=l(),G6=a("li"),Jbe=a("strong"),xar=o("mpnet"),$ar=o(" \u2014 "),XQ=a("a"),kar=o("MPNetForTokenClassification"),Sar=o(" (MPNet model)"),Rar=l(),O6=a("li"),Ybe=a("strong"),Par=o("nezha"),Bar=o(" \u2014 "),zQ=a("a"),Iar=o("NezhaForTokenClassification"),Nar=o(" (Nezha model)"),qar=l(),V6=a("li"),Kbe=a("strong"),jar=o("nystromformer"),Dar=o(" \u2014 "),WQ=a("a"),Gar=o("NystromformerForTokenClassification"),Oar=o(" (Nystr\xF6mformer model)"),Var=l(),X6=a("li"),Zbe=a("strong"),Xar=o("qdqbert"),zar=o(" \u2014 "),QQ=a("a"),War=o("QDQBertForTokenClassification"),Qar=o(" (QDQBert model)"),Uar=l(),z6=a("li"),eve=a("strong"),Har=o("rembert"),Jar=o(" \u2014 "),UQ=a("a"),Yar=o("RemBertForTokenClassification"),Kar=o(" (RemBERT model)"),Zar=l(),W6=a("li"),ove=a("strong"),enr=o("roberta"),onr=o(" \u2014 "),HQ=a("a"),rnr=o("RobertaForTokenClassification"),tnr=o(" (RoBERTa model)"),anr=l(),Q6=a("li"),rve=a("strong"),nnr=o("roformer"),snr=o(" \u2014 "),JQ=a("a"),lnr=o("RoFormerForTokenClassification"),inr=o(" (RoFormer model)"),dnr=l(),U6=a("li"),tve=a("strong"),cnr=o("squeezebert"),fnr=o(" \u2014 "),YQ=a("a"),mnr=o("SqueezeBertForTokenClassification"),gnr=o(" (SqueezeBERT model)"),hnr=l(),H6=a("li"),ave=a("strong"),pnr=o("xlm"),_nr=o(" \u2014 "),KQ=a("a"),unr=o("XLMForTokenClassification"),bnr=o(" (XLM model)"),vnr=l(),J6=a("li"),nve=a("strong"),Fnr=o("xlm-roberta"),Tnr=o(" \u2014 "),ZQ=a("a"),Mnr=o("XLMRobertaForTokenClassification"),Enr=o(" (XLM-RoBERTa model)"),Cnr=l(),Y6=a("li"),sve=a("strong"),wnr=o("xlm-roberta-xl"),Anr=o(" \u2014 "),eU=a("a"),Lnr=o("XLMRobertaXLForTokenClassification"),ynr=o(" (XLM-RoBERTa-XL model)"),xnr=l(),K6=a("li"),lve=a("strong"),$nr=o("xlnet"),knr=o(" \u2014 "),oU=a("a"),Snr=o("XLNetForTokenClassification"),Rnr=o(" (XLNet model)"),Pnr=l(),Z6=a("li"),ive=a("strong"),Bnr=o("yoso"),Inr=o(" \u2014 "),rU=a("a"),Nnr=o("YosoForTokenClassification"),qnr=o(" (YOSO model)"),jnr=l(),eF=a("p"),Dnr=o("The model is set in evaluation mode by default using "),dve=a("code"),Gnr=o("model.eval()"),Onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cve=a("code"),Vnr=o("model.train()"),Xnr=l(),F(oF.$$.fragment),oUe=l(),xd=a("h2"),rF=a("a"),fve=a("span"),F(A9.$$.fragment),znr=l(),mve=a("span"),Wnr=o("AutoModelForQuestionAnswering"),rUe=l(),Oo=a("div"),F(L9.$$.fragment),Qnr=l(),$d=a("p"),Unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tU=a("a"),Hnr=o("from_pretrained()"),Jnr=o(" class method or the "),aU=a("a"),Ynr=o("from_config()"),Knr=o(` class
method.`),Znr=l(),y9=a("p"),esr=o("This class cannot be instantiated directly using "),gve=a("code"),osr=o("__init__()"),rsr=o(" (throws an error)."),tsr=l(),Tt=a("div"),F(x9.$$.fragment),asr=l(),hve=a("p"),nsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ssr=l(),kd=a("p"),lsr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),isr=o("not"),dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),csr=o("from_pretrained()"),fsr=o(" to load the model weights."),msr=l(),F(tF.$$.fragment),gsr=l(),so=a("div"),F($9.$$.fragment),hsr=l(),_ve=a("p"),psr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_sr=l(),Ka=a("p"),usr=o("The model class to instantiate is selected based on the "),uve=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),bve=a("code"),Fsr=o("pretrained_model_name_or_path"),Tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=a("code"),Msr=o("pretrained_model_name_or_path"),Esr=o(":"),Csr=l(),V=a("ul"),aF=a("li"),Fve=a("strong"),wsr=o("albert"),Asr=o(" \u2014 "),sU=a("a"),Lsr=o("AlbertForQuestionAnswering"),ysr=o(" (ALBERT model)"),xsr=l(),nF=a("li"),Tve=a("strong"),$sr=o("bart"),ksr=o(" \u2014 "),lU=a("a"),Ssr=o("BartForQuestionAnswering"),Rsr=o(" (BART model)"),Psr=l(),sF=a("li"),Mve=a("strong"),Bsr=o("bert"),Isr=o(" \u2014 "),iU=a("a"),Nsr=o("BertForQuestionAnswering"),qsr=o(" (BERT model)"),jsr=l(),lF=a("li"),Eve=a("strong"),Dsr=o("big_bird"),Gsr=o(" \u2014 "),dU=a("a"),Osr=o("BigBirdForQuestionAnswering"),Vsr=o(" (BigBird model)"),Xsr=l(),iF=a("li"),Cve=a("strong"),zsr=o("bigbird_pegasus"),Wsr=o(" \u2014 "),cU=a("a"),Qsr=o("BigBirdPegasusForQuestionAnswering"),Usr=o(" (BigBird-Pegasus model)"),Hsr=l(),dF=a("li"),wve=a("strong"),Jsr=o("camembert"),Ysr=o(" \u2014 "),fU=a("a"),Ksr=o("CamembertForQuestionAnswering"),Zsr=o(" (CamemBERT model)"),elr=l(),cF=a("li"),Ave=a("strong"),olr=o("canine"),rlr=o(" \u2014 "),mU=a("a"),tlr=o("CanineForQuestionAnswering"),alr=o(" (CANINE model)"),nlr=l(),fF=a("li"),Lve=a("strong"),slr=o("convbert"),llr=o(" \u2014 "),gU=a("a"),ilr=o("ConvBertForQuestionAnswering"),dlr=o(" (ConvBERT model)"),clr=l(),mF=a("li"),yve=a("strong"),flr=o("data2vec-text"),mlr=o(" \u2014 "),hU=a("a"),glr=o("Data2VecTextForQuestionAnswering"),hlr=o(" (Data2VecText model)"),plr=l(),gF=a("li"),xve=a("strong"),_lr=o("deberta"),ulr=o(" \u2014 "),pU=a("a"),blr=o("DebertaForQuestionAnswering"),vlr=o(" (DeBERTa model)"),Flr=l(),hF=a("li"),$ve=a("strong"),Tlr=o("deberta-v2"),Mlr=o(" \u2014 "),_U=a("a"),Elr=o("DebertaV2ForQuestionAnswering"),Clr=o(" (DeBERTa-v2 model)"),wlr=l(),pF=a("li"),kve=a("strong"),Alr=o("distilbert"),Llr=o(" \u2014 "),uU=a("a"),ylr=o("DistilBertForQuestionAnswering"),xlr=o(" (DistilBERT model)"),$lr=l(),_F=a("li"),Sve=a("strong"),klr=o("electra"),Slr=o(" \u2014 "),bU=a("a"),Rlr=o("ElectraForQuestionAnswering"),Plr=o(" (ELECTRA model)"),Blr=l(),uF=a("li"),Rve=a("strong"),Ilr=o("flaubert"),Nlr=o(" \u2014 "),vU=a("a"),qlr=o("FlaubertForQuestionAnsweringSimple"),jlr=o(" (FlauBERT model)"),Dlr=l(),bF=a("li"),Pve=a("strong"),Glr=o("fnet"),Olr=o(" \u2014 "),FU=a("a"),Vlr=o("FNetForQuestionAnswering"),Xlr=o(" (FNet model)"),zlr=l(),vF=a("li"),Bve=a("strong"),Wlr=o("funnel"),Qlr=o(" \u2014 "),TU=a("a"),Ulr=o("FunnelForQuestionAnswering"),Hlr=o(" (Funnel Transformer model)"),Jlr=l(),FF=a("li"),Ive=a("strong"),Ylr=o("gptj"),Klr=o(" \u2014 "),MU=a("a"),Zlr=o("GPTJForQuestionAnswering"),eir=o(" (GPT-J model)"),oir=l(),TF=a("li"),Nve=a("strong"),rir=o("ibert"),tir=o(" \u2014 "),EU=a("a"),air=o("IBertForQuestionAnswering"),nir=o(" (I-BERT model)"),sir=l(),MF=a("li"),qve=a("strong"),lir=o("layoutlmv2"),iir=o(" \u2014 "),CU=a("a"),dir=o("LayoutLMv2ForQuestionAnswering"),cir=o(" (LayoutLMv2 model)"),fir=l(),EF=a("li"),jve=a("strong"),mir=o("layoutlmv3"),gir=o(" \u2014 "),wU=a("a"),hir=o("LayoutLMv3ForQuestionAnswering"),pir=o(" (LayoutLMv3 model)"),_ir=l(),CF=a("li"),Dve=a("strong"),uir=o("led"),bir=o(" \u2014 "),AU=a("a"),vir=o("LEDForQuestionAnswering"),Fir=o(" (LED model)"),Tir=l(),wF=a("li"),Gve=a("strong"),Mir=o("longformer"),Eir=o(" \u2014 "),LU=a("a"),Cir=o("LongformerForQuestionAnswering"),wir=o(" (Longformer model)"),Air=l(),AF=a("li"),Ove=a("strong"),Lir=o("luke"),yir=o(" \u2014 "),yU=a("a"),xir=o("LukeForQuestionAnswering"),$ir=o(" (LUKE model)"),kir=l(),LF=a("li"),Vve=a("strong"),Sir=o("lxmert"),Rir=o(" \u2014 "),xU=a("a"),Pir=o("LxmertForQuestionAnswering"),Bir=o(" (LXMERT model)"),Iir=l(),yF=a("li"),Xve=a("strong"),Nir=o("mbart"),qir=o(" \u2014 "),$U=a("a"),jir=o("MBartForQuestionAnswering"),Dir=o(" (mBART model)"),Gir=l(),xF=a("li"),zve=a("strong"),Oir=o("megatron-bert"),Vir=o(" \u2014 "),kU=a("a"),Xir=o("MegatronBertForQuestionAnswering"),zir=o(" (Megatron-BERT model)"),Wir=l(),$F=a("li"),Wve=a("strong"),Qir=o("mobilebert"),Uir=o(" \u2014 "),SU=a("a"),Hir=o("MobileBertForQuestionAnswering"),Jir=o(" (MobileBERT model)"),Yir=l(),kF=a("li"),Qve=a("strong"),Kir=o("mpnet"),Zir=o(" \u2014 "),RU=a("a"),edr=o("MPNetForQuestionAnswering"),odr=o(" (MPNet model)"),rdr=l(),SF=a("li"),Uve=a("strong"),tdr=o("mvp"),adr=o(" \u2014 "),PU=a("a"),ndr=o("MvpForQuestionAnswering"),sdr=o(" (MVP model)"),ldr=l(),RF=a("li"),Hve=a("strong"),idr=o("nezha"),ddr=o(" \u2014 "),BU=a("a"),cdr=o("NezhaForQuestionAnswering"),fdr=o(" (Nezha model)"),mdr=l(),PF=a("li"),Jve=a("strong"),gdr=o("nystromformer"),hdr=o(" \u2014 "),IU=a("a"),pdr=o("NystromformerForQuestionAnswering"),_dr=o(" (Nystr\xF6mformer model)"),udr=l(),BF=a("li"),Yve=a("strong"),bdr=o("qdqbert"),vdr=o(" \u2014 "),NU=a("a"),Fdr=o("QDQBertForQuestionAnswering"),Tdr=o(" (QDQBert model)"),Mdr=l(),IF=a("li"),Kve=a("strong"),Edr=o("reformer"),Cdr=o(" \u2014 "),qU=a("a"),wdr=o("ReformerForQuestionAnswering"),Adr=o(" (Reformer model)"),Ldr=l(),NF=a("li"),Zve=a("strong"),ydr=o("rembert"),xdr=o(" \u2014 "),jU=a("a"),$dr=o("RemBertForQuestionAnswering"),kdr=o(" (RemBERT model)"),Sdr=l(),qF=a("li"),e0e=a("strong"),Rdr=o("roberta"),Pdr=o(" \u2014 "),DU=a("a"),Bdr=o("RobertaForQuestionAnswering"),Idr=o(" (RoBERTa model)"),Ndr=l(),jF=a("li"),o0e=a("strong"),qdr=o("roformer"),jdr=o(" \u2014 "),GU=a("a"),Ddr=o("RoFormerForQuestionAnswering"),Gdr=o(" (RoFormer model)"),Odr=l(),DF=a("li"),r0e=a("strong"),Vdr=o("splinter"),Xdr=o(" \u2014 "),OU=a("a"),zdr=o("SplinterForQuestionAnswering"),Wdr=o(" (Splinter model)"),Qdr=l(),GF=a("li"),t0e=a("strong"),Udr=o("squeezebert"),Hdr=o(" \u2014 "),VU=a("a"),Jdr=o("SqueezeBertForQuestionAnswering"),Ydr=o(" (SqueezeBERT model)"),Kdr=l(),OF=a("li"),a0e=a("strong"),Zdr=o("xlm"),ecr=o(" \u2014 "),XU=a("a"),ocr=o("XLMForQuestionAnsweringSimple"),rcr=o(" (XLM model)"),tcr=l(),VF=a("li"),n0e=a("strong"),acr=o("xlm-roberta"),ncr=o(" \u2014 "),zU=a("a"),scr=o("XLMRobertaForQuestionAnswering"),lcr=o(" (XLM-RoBERTa model)"),icr=l(),XF=a("li"),s0e=a("strong"),dcr=o("xlm-roberta-xl"),ccr=o(" \u2014 "),WU=a("a"),fcr=o("XLMRobertaXLForQuestionAnswering"),mcr=o(" (XLM-RoBERTa-XL model)"),gcr=l(),zF=a("li"),l0e=a("strong"),hcr=o("xlnet"),pcr=o(" \u2014 "),QU=a("a"),_cr=o("XLNetForQuestionAnsweringSimple"),ucr=o(" (XLNet model)"),bcr=l(),WF=a("li"),i0e=a("strong"),vcr=o("yoso"),Fcr=o(" \u2014 "),UU=a("a"),Tcr=o("YosoForQuestionAnswering"),Mcr=o(" (YOSO model)"),Ecr=l(),QF=a("p"),Ccr=o("The model is set in evaluation mode by default using "),d0e=a("code"),wcr=o("model.eval()"),Acr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c0e=a("code"),Lcr=o("model.train()"),ycr=l(),F(UF.$$.fragment),tUe=l(),Sd=a("h2"),HF=a("a"),f0e=a("span"),F(k9.$$.fragment),xcr=l(),m0e=a("span"),$cr=o("AutoModelForTableQuestionAnswering"),aUe=l(),Vo=a("div"),F(S9.$$.fragment),kcr=l(),Rd=a("p"),Scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HU=a("a"),Rcr=o("from_pretrained()"),Pcr=o(" class method or the "),JU=a("a"),Bcr=o("from_config()"),Icr=o(` class
method.`),Ncr=l(),R9=a("p"),qcr=o("This class cannot be instantiated directly using "),g0e=a("code"),jcr=o("__init__()"),Dcr=o(" (throws an error)."),Gcr=l(),Mt=a("div"),F(P9.$$.fragment),Ocr=l(),h0e=a("p"),Vcr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xcr=l(),Pd=a("p"),zcr=o(`Note:
Loading a model from its configuration file does `),p0e=a("strong"),Wcr=o("not"),Qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),Ucr=o("from_pretrained()"),Hcr=o(" to load the model weights."),Jcr=l(),F(JF.$$.fragment),Ycr=l(),lo=a("div"),F(B9.$$.fragment),Kcr=l(),_0e=a("p"),Zcr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),efr=l(),Za=a("p"),ofr=o("The model class to instantiate is selected based on the "),u0e=a("code"),rfr=o("model_type"),tfr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),afr=o("pretrained_model_name_or_path"),nfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),sfr=o("pretrained_model_name_or_path"),lfr=o(":"),ifr=l(),F0e=a("ul"),YF=a("li"),T0e=a("strong"),dfr=o("tapas"),cfr=o(" \u2014 "),KU=a("a"),ffr=o("TapasForQuestionAnswering"),mfr=o(" (TAPAS model)"),gfr=l(),KF=a("p"),hfr=o("The model is set in evaluation mode by default using "),M0e=a("code"),pfr=o("model.eval()"),_fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E0e=a("code"),ufr=o("model.train()"),bfr=l(),F(ZF.$$.fragment),nUe=l(),Bd=a("h2"),eT=a("a"),C0e=a("span"),F(I9.$$.fragment),vfr=l(),w0e=a("span"),Ffr=o("AutoModelForImageClassification"),sUe=l(),Xo=a("div"),F(N9.$$.fragment),Tfr=l(),Id=a("p"),Mfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZU=a("a"),Efr=o("from_pretrained()"),Cfr=o(" class method or the "),eH=a("a"),wfr=o("from_config()"),Afr=o(` class
method.`),Lfr=l(),q9=a("p"),yfr=o("This class cannot be instantiated directly using "),A0e=a("code"),xfr=o("__init__()"),$fr=o(" (throws an error)."),kfr=l(),Et=a("div"),F(j9.$$.fragment),Sfr=l(),L0e=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pfr=l(),Nd=a("p"),Bfr=o(`Note:
Loading a model from its configuration file does `),y0e=a("strong"),Ifr=o("not"),Nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),qfr=o("from_pretrained()"),jfr=o(" to load the model weights."),Dfr=l(),F(oT.$$.fragment),Gfr=l(),io=a("div"),F(D9.$$.fragment),Ofr=l(),x0e=a("p"),Vfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xfr=l(),en=a("p"),zfr=o("The model class to instantiate is selected based on the "),$0e=a("code"),Wfr=o("model_type"),Qfr=o(` property of the config object (either
passed as an argument or loaded from `),k0e=a("code"),Ufr=o("pretrained_model_name_or_path"),Hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),be=a("ul"),rT=a("li"),R0e=a("strong"),Zfr=o("beit"),emr=o(" \u2014 "),rH=a("a"),omr=o("BeitForImageClassification"),rmr=o(" (BEiT model)"),tmr=l(),tT=a("li"),P0e=a("strong"),amr=o("convnext"),nmr=o(" \u2014 "),tH=a("a"),smr=o("ConvNextForImageClassification"),lmr=o(" (ConvNeXT model)"),imr=l(),aT=a("li"),B0e=a("strong"),dmr=o("cvt"),cmr=o(" \u2014 "),aH=a("a"),fmr=o("CvtForImageClassification"),mmr=o(" (CvT model)"),gmr=l(),nT=a("li"),I0e=a("strong"),hmr=o("data2vec-vision"),pmr=o(" \u2014 "),nH=a("a"),_mr=o("Data2VecVisionForImageClassification"),umr=o(" (Data2VecVision model)"),bmr=l(),sl=a("li"),N0e=a("strong"),vmr=o("deit"),Fmr=o(" \u2014 "),sH=a("a"),Tmr=o("DeiTForImageClassification"),Mmr=o(" or "),lH=a("a"),Emr=o("DeiTForImageClassificationWithTeacher"),Cmr=o(" (DeiT model)"),wmr=l(),sT=a("li"),q0e=a("strong"),Amr=o("imagegpt"),Lmr=o(" \u2014 "),iH=a("a"),ymr=o("ImageGPTForImageClassification"),xmr=o(" (ImageGPT model)"),$mr=l(),ll=a("li"),j0e=a("strong"),kmr=o("levit"),Smr=o(" \u2014 "),dH=a("a"),Rmr=o("LevitForImageClassification"),Pmr=o(" or "),cH=a("a"),Bmr=o("LevitForImageClassificationWithTeacher"),Imr=o(" (LeViT model)"),Nmr=l(),lT=a("li"),D0e=a("strong"),qmr=o("mobilevit"),jmr=o(" \u2014 "),fH=a("a"),Dmr=o("MobileViTForImageClassification"),Gmr=o(" (MobileViT model)"),Omr=l(),Ct=a("li"),G0e=a("strong"),Vmr=o("perceiver"),Xmr=o(" \u2014 "),mH=a("a"),zmr=o("PerceiverForImageClassificationLearned"),Wmr=o(" or "),gH=a("a"),Qmr=o("PerceiverForImageClassificationFourier"),Umr=o(" or "),hH=a("a"),Hmr=o("PerceiverForImageClassificationConvProcessing"),Jmr=o(" (Perceiver model)"),Ymr=l(),iT=a("li"),O0e=a("strong"),Kmr=o("poolformer"),Zmr=o(" \u2014 "),pH=a("a"),egr=o("PoolFormerForImageClassification"),ogr=o(" (PoolFormer model)"),rgr=l(),dT=a("li"),V0e=a("strong"),tgr=o("regnet"),agr=o(" \u2014 "),_H=a("a"),ngr=o("RegNetForImageClassification"),sgr=o(" (RegNet model)"),lgr=l(),cT=a("li"),X0e=a("strong"),igr=o("resnet"),dgr=o(" \u2014 "),uH=a("a"),cgr=o("ResNetForImageClassification"),fgr=o(" (ResNet model)"),mgr=l(),fT=a("li"),z0e=a("strong"),ggr=o("segformer"),hgr=o(" \u2014 "),bH=a("a"),pgr=o("SegformerForImageClassification"),_gr=o(" (SegFormer model)"),ugr=l(),mT=a("li"),W0e=a("strong"),bgr=o("swin"),vgr=o(" \u2014 "),vH=a("a"),Fgr=o("SwinForImageClassification"),Tgr=o(" (Swin Transformer model)"),Mgr=l(),gT=a("li"),Q0e=a("strong"),Egr=o("swinv2"),Cgr=o(" \u2014 "),FH=a("a"),wgr=o("Swinv2ForImageClassification"),Agr=o(" (Swin Transformer V2 model)"),Lgr=l(),hT=a("li"),U0e=a("strong"),ygr=o("van"),xgr=o(" \u2014 "),TH=a("a"),$gr=o("VanForImageClassification"),kgr=o(" (VAN model)"),Sgr=l(),pT=a("li"),H0e=a("strong"),Rgr=o("vit"),Pgr=o(" \u2014 "),MH=a("a"),Bgr=o("ViTForImageClassification"),Igr=o(" (ViT model)"),Ngr=l(),_T=a("p"),qgr=o("The model is set in evaluation mode by default using "),J0e=a("code"),jgr=o("model.eval()"),Dgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y0e=a("code"),Ggr=o("model.train()"),Ogr=l(),F(uT.$$.fragment),lUe=l(),qd=a("h2"),bT=a("a"),K0e=a("span"),F(G9.$$.fragment),Vgr=l(),Z0e=a("span"),Xgr=o("AutoModelForVideoClassification"),iUe=l(),zo=a("div"),F(O9.$$.fragment),zgr=l(),jd=a("p"),Wgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),EH=a("a"),Qgr=o("from_pretrained()"),Ugr=o(" class method or the "),CH=a("a"),Hgr=o("from_config()"),Jgr=o(` class
method.`),Ygr=l(),V9=a("p"),Kgr=o("This class cannot be instantiated directly using "),e6e=a("code"),Zgr=o("__init__()"),ehr=o(" (throws an error)."),ohr=l(),wt=a("div"),F(X9.$$.fragment),rhr=l(),o6e=a("p"),thr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),ahr=l(),Dd=a("p"),nhr=o(`Note:
Loading a model from its configuration file does `),r6e=a("strong"),shr=o("not"),lhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),ihr=o("from_pretrained()"),dhr=o(" to load the model weights."),chr=l(),F(vT.$$.fragment),fhr=l(),co=a("div"),F(z9.$$.fragment),mhr=l(),t6e=a("p"),ghr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),hhr=l(),on=a("p"),phr=o("The model class to instantiate is selected based on the "),a6e=a("code"),_hr=o("model_type"),uhr=o(` property of the config object (either
passed as an argument or loaded from `),n6e=a("code"),bhr=o("pretrained_model_name_or_path"),vhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=a("code"),Fhr=o("pretrained_model_name_or_path"),Thr=o(":"),Mhr=l(),l6e=a("ul"),FT=a("li"),i6e=a("strong"),Ehr=o("videomae"),Chr=o(" \u2014 "),AH=a("a"),whr=o("VideoMAEForVideoClassification"),Ahr=o(" (VideoMAE model)"),Lhr=l(),TT=a("p"),yhr=o("The model is set in evaluation mode by default using "),d6e=a("code"),xhr=o("model.eval()"),$hr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c6e=a("code"),khr=o("model.train()"),Shr=l(),F(MT.$$.fragment),dUe=l(),Gd=a("h2"),ET=a("a"),f6e=a("span"),F(W9.$$.fragment),Rhr=l(),m6e=a("span"),Phr=o("AutoModelForVision2Seq"),cUe=l(),Wo=a("div"),F(Q9.$$.fragment),Bhr=l(),Od=a("p"),Ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LH=a("a"),Nhr=o("from_pretrained()"),qhr=o(" class method or the "),yH=a("a"),jhr=o("from_config()"),Dhr=o(` class
method.`),Ghr=l(),U9=a("p"),Ohr=o("This class cannot be instantiated directly using "),g6e=a("code"),Vhr=o("__init__()"),Xhr=o(" (throws an error)."),zhr=l(),At=a("div"),F(H9.$$.fragment),Whr=l(),h6e=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Uhr=l(),Vd=a("p"),Hhr=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),Jhr=o("not"),Yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),Khr=o("from_pretrained()"),Zhr=o(" to load the model weights."),epr=l(),F(CT.$$.fragment),opr=l(),fo=a("div"),F(J9.$$.fragment),rpr=l(),_6e=a("p"),tpr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),apr=l(),rn=a("p"),npr=o("The model class to instantiate is selected based on the "),u6e=a("code"),spr=o("model_type"),lpr=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),ipr=o("pretrained_model_name_or_path"),dpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(":"),mpr=l(),F6e=a("ul"),wT=a("li"),T6e=a("strong"),gpr=o("vision-encoder-decoder"),hpr=o(" \u2014 "),$H=a("a"),ppr=o("VisionEncoderDecoderModel"),_pr=o(" (Vision Encoder decoder model)"),upr=l(),AT=a("p"),bpr=o("The model is set in evaluation mode by default using "),M6e=a("code"),vpr=o("model.eval()"),Fpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E6e=a("code"),Tpr=o("model.train()"),Mpr=l(),F(LT.$$.fragment),fUe=l(),Xd=a("h2"),yT=a("a"),C6e=a("span"),F(Y9.$$.fragment),Epr=l(),w6e=a("span"),Cpr=o("AutoModelForVisualQuestionAnswering"),mUe=l(),Qo=a("div"),F(K9.$$.fragment),wpr=l(),zd=a("p"),Apr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),kH=a("a"),Lpr=o("from_pretrained()"),ypr=o(" class method or the "),SH=a("a"),xpr=o("from_config()"),$pr=o(` class
method.`),kpr=l(),Z9=a("p"),Spr=o("This class cannot be instantiated directly using "),A6e=a("code"),Rpr=o("__init__()"),Ppr=o(" (throws an error)."),Bpr=l(),Lt=a("div"),F(ex.$$.fragment),Ipr=l(),L6e=a("p"),Npr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),qpr=l(),Wd=a("p"),jpr=o(`Note:
Loading a model from its configuration file does `),y6e=a("strong"),Dpr=o("not"),Gpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),Opr=o("from_pretrained()"),Vpr=o(" to load the model weights."),Xpr=l(),F(xT.$$.fragment),zpr=l(),mo=a("div"),F(ox.$$.fragment),Wpr=l(),x6e=a("p"),Qpr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Upr=l(),tn=a("p"),Hpr=o("The model class to instantiate is selected based on the "),$6e=a("code"),Jpr=o("model_type"),Ypr=o(` property of the config object (either
passed as an argument or loaded from `),k6e=a("code"),Kpr=o("pretrained_model_name_or_path"),Zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S6e=a("code"),e_r=o("pretrained_model_name_or_path"),o_r=o(":"),r_r=l(),R6e=a("ul"),$T=a("li"),P6e=a("strong"),t_r=o("vilt"),a_r=o(" \u2014 "),PH=a("a"),n_r=o("ViltForQuestionAnswering"),s_r=o(" (ViLT model)"),l_r=l(),kT=a("p"),i_r=o("The model is set in evaluation mode by default using "),B6e=a("code"),d_r=o("model.eval()"),c_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I6e=a("code"),f_r=o("model.train()"),m_r=l(),F(ST.$$.fragment),gUe=l(),Qd=a("h2"),RT=a("a"),N6e=a("span"),F(rx.$$.fragment),g_r=l(),q6e=a("span"),h_r=o("AutoModelForAudioClassification"),hUe=l(),Uo=a("div"),F(tx.$$.fragment),p_r=l(),Ud=a("p"),__r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BH=a("a"),u_r=o("from_pretrained()"),b_r=o(" class method or the "),IH=a("a"),v_r=o("from_config()"),F_r=o(` class
method.`),T_r=l(),ax=a("p"),M_r=o("This class cannot be instantiated directly using "),j6e=a("code"),E_r=o("__init__()"),C_r=o(" (throws an error)."),w_r=l(),yt=a("div"),F(nx.$$.fragment),A_r=l(),D6e=a("p"),L_r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),y_r=l(),Hd=a("p"),x_r=o(`Note:
Loading a model from its configuration file does `),G6e=a("strong"),$_r=o("not"),k_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),S_r=o("from_pretrained()"),R_r=o(" to load the model weights."),P_r=l(),F(PT.$$.fragment),B_r=l(),go=a("div"),F(sx.$$.fragment),I_r=l(),O6e=a("p"),N_r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),q_r=l(),an=a("p"),j_r=o("The model class to instantiate is selected based on the "),V6e=a("code"),D_r=o("model_type"),G_r=o(` property of the config object (either
passed as an argument or loaded from `),X6e=a("code"),O_r=o("pretrained_model_name_or_path"),V_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=a("code"),X_r=o("pretrained_model_name_or_path"),z_r=o(":"),W_r=l(),Pe=a("ul"),BT=a("li"),W6e=a("strong"),Q_r=o("data2vec-audio"),U_r=o(" \u2014 "),qH=a("a"),H_r=o("Data2VecAudioForSequenceClassification"),J_r=o(" (Data2VecAudio model)"),Y_r=l(),IT=a("li"),Q6e=a("strong"),K_r=o("hubert"),Z_r=o(" \u2014 "),jH=a("a"),eur=o("HubertForSequenceClassification"),our=o(" (Hubert model)"),rur=l(),NT=a("li"),U6e=a("strong"),tur=o("sew"),aur=o(" \u2014 "),DH=a("a"),nur=o("SEWForSequenceClassification"),sur=o(" (SEW model)"),lur=l(),qT=a("li"),H6e=a("strong"),iur=o("sew-d"),dur=o(" \u2014 "),GH=a("a"),cur=o("SEWDForSequenceClassification"),fur=o(" (SEW-D model)"),mur=l(),jT=a("li"),J6e=a("strong"),gur=o("unispeech"),hur=o(" \u2014 "),OH=a("a"),pur=o("UniSpeechForSequenceClassification"),_ur=o(" (UniSpeech model)"),uur=l(),DT=a("li"),Y6e=a("strong"),bur=o("unispeech-sat"),vur=o(" \u2014 "),VH=a("a"),Fur=o("UniSpeechSatForSequenceClassification"),Tur=o(" (UniSpeechSat model)"),Mur=l(),GT=a("li"),K6e=a("strong"),Eur=o("wav2vec2"),Cur=o(" \u2014 "),XH=a("a"),wur=o("Wav2Vec2ForSequenceClassification"),Aur=o(" (Wav2Vec2 model)"),Lur=l(),OT=a("li"),Z6e=a("strong"),yur=o("wav2vec2-conformer"),xur=o(" \u2014 "),zH=a("a"),$ur=o("Wav2Vec2ConformerForSequenceClassification"),kur=o(" (Wav2Vec2-Conformer model)"),Sur=l(),VT=a("li"),eFe=a("strong"),Rur=o("wavlm"),Pur=o(" \u2014 "),WH=a("a"),Bur=o("WavLMForSequenceClassification"),Iur=o(" (WavLM model)"),Nur=l(),XT=a("p"),qur=o("The model is set in evaluation mode by default using "),oFe=a("code"),jur=o("model.eval()"),Dur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rFe=a("code"),Gur=o("model.train()"),Our=l(),F(zT.$$.fragment),pUe=l(),Jd=a("h2"),WT=a("a"),tFe=a("span"),F(lx.$$.fragment),Vur=l(),aFe=a("span"),Xur=o("AutoModelForAudioFrameClassification"),_Ue=l(),Ho=a("div"),F(ix.$$.fragment),zur=l(),Yd=a("p"),Wur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QH=a("a"),Qur=o("from_pretrained()"),Uur=o(" class method or the "),UH=a("a"),Hur=o("from_config()"),Jur=o(` class
method.`),Yur=l(),dx=a("p"),Kur=o("This class cannot be instantiated directly using "),nFe=a("code"),Zur=o("__init__()"),e2r=o(" (throws an error)."),o2r=l(),xt=a("div"),F(cx.$$.fragment),r2r=l(),sFe=a("p"),t2r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),a2r=l(),Kd=a("p"),n2r=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),s2r=o("not"),l2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),i2r=o("from_pretrained()"),d2r=o(" to load the model weights."),c2r=l(),F(QT.$$.fragment),f2r=l(),ho=a("div"),F(fx.$$.fragment),m2r=l(),iFe=a("p"),g2r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),h2r=l(),nn=a("p"),p2r=o("The model class to instantiate is selected based on the "),dFe=a("code"),_2r=o("model_type"),u2r=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),b2r=o("pretrained_model_name_or_path"),v2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),F2r=o("pretrained_model_name_or_path"),T2r=o(":"),M2r=l(),st=a("ul"),UT=a("li"),mFe=a("strong"),E2r=o("data2vec-audio"),C2r=o(" \u2014 "),JH=a("a"),w2r=o("Data2VecAudioForAudioFrameClassification"),A2r=o(" (Data2VecAudio model)"),L2r=l(),HT=a("li"),gFe=a("strong"),y2r=o("unispeech-sat"),x2r=o(" \u2014 "),YH=a("a"),$2r=o("UniSpeechSatForAudioFrameClassification"),k2r=o(" (UniSpeechSat model)"),S2r=l(),JT=a("li"),hFe=a("strong"),R2r=o("wav2vec2"),P2r=o(" \u2014 "),KH=a("a"),B2r=o("Wav2Vec2ForAudioFrameClassification"),I2r=o(" (Wav2Vec2 model)"),N2r=l(),YT=a("li"),pFe=a("strong"),q2r=o("wav2vec2-conformer"),j2r=o(" \u2014 "),ZH=a("a"),D2r=o("Wav2Vec2ConformerForAudioFrameClassification"),G2r=o(" (Wav2Vec2-Conformer model)"),O2r=l(),KT=a("li"),_Fe=a("strong"),V2r=o("wavlm"),X2r=o(" \u2014 "),eJ=a("a"),z2r=o("WavLMForAudioFrameClassification"),W2r=o(" (WavLM model)"),Q2r=l(),ZT=a("p"),U2r=o("The model is set in evaluation mode by default using "),uFe=a("code"),H2r=o("model.eval()"),J2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bFe=a("code"),Y2r=o("model.train()"),K2r=l(),F(e8.$$.fragment),uUe=l(),Zd=a("h2"),o8=a("a"),vFe=a("span"),F(mx.$$.fragment),Z2r=l(),FFe=a("span"),e1r=o("AutoModelForCTC"),bUe=l(),Jo=a("div"),F(gx.$$.fragment),o1r=l(),ec=a("p"),r1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oJ=a("a"),t1r=o("from_pretrained()"),a1r=o(" class method or the "),rJ=a("a"),n1r=o("from_config()"),s1r=o(` class
method.`),l1r=l(),hx=a("p"),i1r=o("This class cannot be instantiated directly using "),TFe=a("code"),d1r=o("__init__()"),c1r=o(" (throws an error)."),f1r=l(),$t=a("div"),F(px.$$.fragment),m1r=l(),MFe=a("p"),g1r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),h1r=l(),oc=a("p"),p1r=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),_1r=o("not"),u1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),b1r=o("from_pretrained()"),v1r=o(" to load the model weights."),F1r=l(),F(r8.$$.fragment),T1r=l(),po=a("div"),F(_x.$$.fragment),M1r=l(),CFe=a("p"),E1r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),C1r=l(),sn=a("p"),w1r=o("The model class to instantiate is selected based on the "),wFe=a("code"),A1r=o("model_type"),L1r=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),y1r=o("pretrained_model_name_or_path"),x1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),$1r=o("pretrained_model_name_or_path"),k1r=o(":"),S1r=l(),Le=a("ul"),t8=a("li"),yFe=a("strong"),R1r=o("data2vec-audio"),P1r=o(" \u2014 "),aJ=a("a"),B1r=o("Data2VecAudioForCTC"),I1r=o(" (Data2VecAudio model)"),N1r=l(),a8=a("li"),xFe=a("strong"),q1r=o("hubert"),j1r=o(" \u2014 "),nJ=a("a"),D1r=o("HubertForCTC"),G1r=o(" (Hubert model)"),O1r=l(),n8=a("li"),$Fe=a("strong"),V1r=o("mctct"),X1r=o(" \u2014 "),sJ=a("a"),z1r=o("MCTCTForCTC"),W1r=o(" (M-CTC-T model)"),Q1r=l(),s8=a("li"),kFe=a("strong"),U1r=o("sew"),H1r=o(" \u2014 "),lJ=a("a"),J1r=o("SEWForCTC"),Y1r=o(" (SEW model)"),K1r=l(),l8=a("li"),SFe=a("strong"),Z1r=o("sew-d"),ebr=o(" \u2014 "),iJ=a("a"),obr=o("SEWDForCTC"),rbr=o(" (SEW-D model)"),tbr=l(),i8=a("li"),RFe=a("strong"),abr=o("unispeech"),nbr=o(" \u2014 "),dJ=a("a"),sbr=o("UniSpeechForCTC"),lbr=o(" (UniSpeech model)"),ibr=l(),d8=a("li"),PFe=a("strong"),dbr=o("unispeech-sat"),cbr=o(" \u2014 "),cJ=a("a"),fbr=o("UniSpeechSatForCTC"),mbr=o(" (UniSpeechSat model)"),gbr=l(),c8=a("li"),BFe=a("strong"),hbr=o("wav2vec2"),pbr=o(" \u2014 "),fJ=a("a"),_br=o("Wav2Vec2ForCTC"),ubr=o(" (Wav2Vec2 model)"),bbr=l(),f8=a("li"),IFe=a("strong"),vbr=o("wav2vec2-conformer"),Fbr=o(" \u2014 "),mJ=a("a"),Tbr=o("Wav2Vec2ConformerForCTC"),Mbr=o(" (Wav2Vec2-Conformer model)"),Ebr=l(),m8=a("li"),NFe=a("strong"),Cbr=o("wavlm"),wbr=o(" \u2014 "),gJ=a("a"),Abr=o("WavLMForCTC"),Lbr=o(" (WavLM model)"),ybr=l(),g8=a("p"),xbr=o("The model is set in evaluation mode by default using "),qFe=a("code"),$br=o("model.eval()"),kbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jFe=a("code"),Sbr=o("model.train()"),Rbr=l(),F(h8.$$.fragment),vUe=l(),rc=a("h2"),p8=a("a"),DFe=a("span"),F(ux.$$.fragment),Pbr=l(),GFe=a("span"),Bbr=o("AutoModelForSpeechSeq2Seq"),FUe=l(),Yo=a("div"),F(bx.$$.fragment),Ibr=l(),tc=a("p"),Nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hJ=a("a"),qbr=o("from_pretrained()"),jbr=o(" class method or the "),pJ=a("a"),Dbr=o("from_config()"),Gbr=o(` class
method.`),Obr=l(),vx=a("p"),Vbr=o("This class cannot be instantiated directly using "),OFe=a("code"),Xbr=o("__init__()"),zbr=o(" (throws an error)."),Wbr=l(),kt=a("div"),F(Fx.$$.fragment),Qbr=l(),VFe=a("p"),Ubr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hbr=l(),ac=a("p"),Jbr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),Ybr=o("not"),Kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),Zbr=o("from_pretrained()"),evr=o(" to load the model weights."),ovr=l(),F(_8.$$.fragment),rvr=l(),_o=a("div"),F(Tx.$$.fragment),tvr=l(),zFe=a("p"),avr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nvr=l(),ln=a("p"),svr=o("The model class to instantiate is selected based on the "),WFe=a("code"),lvr=o("model_type"),ivr=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),fvr=o("pretrained_model_name_or_path"),mvr=o(":"),gvr=l(),Mx=a("ul"),u8=a("li"),HFe=a("strong"),hvr=o("speech-encoder-decoder"),pvr=o(" \u2014 "),uJ=a("a"),_vr=o("SpeechEncoderDecoderModel"),uvr=o(" (Speech Encoder decoder model)"),bvr=l(),b8=a("li"),JFe=a("strong"),vvr=o("speech_to_text"),Fvr=o(" \u2014 "),bJ=a("a"),Tvr=o("Speech2TextForConditionalGeneration"),Mvr=o(" (Speech2Text model)"),Evr=l(),v8=a("p"),Cvr=o("The model is set in evaluation mode by default using "),YFe=a("code"),wvr=o("model.eval()"),Avr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KFe=a("code"),Lvr=o("model.train()"),yvr=l(),F(F8.$$.fragment),TUe=l(),nc=a("h2"),T8=a("a"),ZFe=a("span"),F(Ex.$$.fragment),xvr=l(),eTe=a("span"),$vr=o("AutoModelForAudioXVector"),MUe=l(),Ko=a("div"),F(Cx.$$.fragment),kvr=l(),sc=a("p"),Svr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vJ=a("a"),Rvr=o("from_pretrained()"),Pvr=o(" class method or the "),FJ=a("a"),Bvr=o("from_config()"),Ivr=o(` class
method.`),Nvr=l(),wx=a("p"),qvr=o("This class cannot be instantiated directly using "),oTe=a("code"),jvr=o("__init__()"),Dvr=o(" (throws an error)."),Gvr=l(),St=a("div"),F(Ax.$$.fragment),Ovr=l(),rTe=a("p"),Vvr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Xvr=l(),lc=a("p"),zvr=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),Wvr=o("not"),Qvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),Uvr=o("from_pretrained()"),Hvr=o(" to load the model weights."),Jvr=l(),F(M8.$$.fragment),Yvr=l(),uo=a("div"),F(Lx.$$.fragment),Kvr=l(),aTe=a("p"),Zvr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),e0r=l(),dn=a("p"),o0r=o("The model class to instantiate is selected based on the "),nTe=a("code"),r0r=o("model_type"),t0r=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),s0r=o("pretrained_model_name_or_path"),l0r=o(":"),i0r=l(),lt=a("ul"),E8=a("li"),iTe=a("strong"),d0r=o("data2vec-audio"),c0r=o(" \u2014 "),MJ=a("a"),f0r=o("Data2VecAudioForXVector"),m0r=o(" (Data2VecAudio model)"),g0r=l(),C8=a("li"),dTe=a("strong"),h0r=o("unispeech-sat"),p0r=o(" \u2014 "),EJ=a("a"),_0r=o("UniSpeechSatForXVector"),u0r=o(" (UniSpeechSat model)"),b0r=l(),w8=a("li"),cTe=a("strong"),v0r=o("wav2vec2"),F0r=o(" \u2014 "),CJ=a("a"),T0r=o("Wav2Vec2ForXVector"),M0r=o(" (Wav2Vec2 model)"),E0r=l(),A8=a("li"),fTe=a("strong"),C0r=o("wav2vec2-conformer"),w0r=o(" \u2014 "),wJ=a("a"),A0r=o("Wav2Vec2ConformerForXVector"),L0r=o(" (Wav2Vec2-Conformer model)"),y0r=l(),L8=a("li"),mTe=a("strong"),x0r=o("wavlm"),$0r=o(" \u2014 "),AJ=a("a"),k0r=o("WavLMForXVector"),S0r=o(" (WavLM model)"),R0r=l(),y8=a("p"),P0r=o("The model is set in evaluation mode by default using "),gTe=a("code"),B0r=o("model.eval()"),I0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hTe=a("code"),N0r=o("model.train()"),q0r=l(),F(x8.$$.fragment),EUe=l(),ic=a("h2"),$8=a("a"),pTe=a("span"),F(yx.$$.fragment),j0r=l(),_Te=a("span"),D0r=o("AutoModelForMaskedImageModeling"),CUe=l(),Zo=a("div"),F(xx.$$.fragment),G0r=l(),dc=a("p"),O0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LJ=a("a"),V0r=o("from_pretrained()"),X0r=o(" class method or the "),yJ=a("a"),z0r=o("from_config()"),W0r=o(` class
method.`),Q0r=l(),$x=a("p"),U0r=o("This class cannot be instantiated directly using "),uTe=a("code"),H0r=o("__init__()"),J0r=o(" (throws an error)."),Y0r=l(),Rt=a("div"),F(kx.$$.fragment),K0r=l(),bTe=a("p"),Z0r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),e6r=l(),cc=a("p"),o6r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),r6r=o("not"),t6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),a6r=o("from_pretrained()"),n6r=o(" to load the model weights."),s6r=l(),F(k8.$$.fragment),l6r=l(),bo=a("div"),F(Sx.$$.fragment),i6r=l(),FTe=a("p"),d6r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),c6r=l(),cn=a("p"),f6r=o("The model class to instantiate is selected based on the "),TTe=a("code"),m6r=o("model_type"),g6r=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),_6r=o("pretrained_model_name_or_path"),u6r=o(":"),b6r=l(),fn=a("ul"),S8=a("li"),CTe=a("strong"),v6r=o("deit"),F6r=o(" \u2014 "),$J=a("a"),T6r=o("DeiTForMaskedImageModeling"),M6r=o(" (DeiT model)"),E6r=l(),R8=a("li"),wTe=a("strong"),C6r=o("swin"),w6r=o(" \u2014 "),kJ=a("a"),A6r=o("SwinForMaskedImageModeling"),L6r=o(" (Swin Transformer model)"),y6r=l(),P8=a("li"),ATe=a("strong"),x6r=o("swinv2"),$6r=o(" \u2014 "),SJ=a("a"),k6r=o("Swinv2ForMaskedImageModeling"),S6r=o(" (Swin Transformer V2 model)"),R6r=l(),B8=a("li"),LTe=a("strong"),P6r=o("vit"),B6r=o(" \u2014 "),RJ=a("a"),I6r=o("ViTForMaskedImageModeling"),N6r=o(" (ViT model)"),q6r=l(),I8=a("p"),j6r=o("The model is set in evaluation mode by default using "),yTe=a("code"),D6r=o("model.eval()"),G6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xTe=a("code"),O6r=o("model.train()"),V6r=l(),F(N8.$$.fragment),wUe=l(),fc=a("h2"),q8=a("a"),$Te=a("span"),F(Rx.$$.fragment),X6r=l(),kTe=a("span"),z6r=o("AutoModelForObjectDetection"),AUe=l(),er=a("div"),F(Px.$$.fragment),W6r=l(),mc=a("p"),Q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PJ=a("a"),U6r=o("from_pretrained()"),H6r=o(" class method or the "),BJ=a("a"),J6r=o("from_config()"),Y6r=o(` class
method.`),K6r=l(),Bx=a("p"),Z6r=o("This class cannot be instantiated directly using "),STe=a("code"),eFr=o("__init__()"),oFr=o(" (throws an error)."),rFr=l(),Pt=a("div"),F(Ix.$$.fragment),tFr=l(),RTe=a("p"),aFr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nFr=l(),gc=a("p"),sFr=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),lFr=o("not"),iFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=a("a"),dFr=o("from_pretrained()"),cFr=o(" to load the model weights."),fFr=l(),F(j8.$$.fragment),mFr=l(),vo=a("div"),F(Nx.$$.fragment),gFr=l(),BTe=a("p"),hFr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pFr=l(),mn=a("p"),_Fr=o("The model class to instantiate is selected based on the "),ITe=a("code"),uFr=o("model_type"),bFr=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),vFr=o("pretrained_model_name_or_path"),FFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),TFr=o("pretrained_model_name_or_path"),MFr=o(":"),EFr=l(),qx=a("ul"),D8=a("li"),jTe=a("strong"),CFr=o("detr"),wFr=o(" \u2014 "),NJ=a("a"),AFr=o("DetrForObjectDetection"),LFr=o(" (DETR model)"),yFr=l(),G8=a("li"),DTe=a("strong"),xFr=o("yolos"),$Fr=o(" \u2014 "),qJ=a("a"),kFr=o("YolosForObjectDetection"),SFr=o(" (YOLOS model)"),RFr=l(),O8=a("p"),PFr=o("The model is set in evaluation mode by default using "),GTe=a("code"),BFr=o("model.eval()"),IFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OTe=a("code"),NFr=o("model.train()"),qFr=l(),F(V8.$$.fragment),LUe=l(),hc=a("h2"),X8=a("a"),VTe=a("span"),F(jx.$$.fragment),jFr=l(),XTe=a("span"),DFr=o("AutoModelForImageSegmentation"),yUe=l(),or=a("div"),F(Dx.$$.fragment),GFr=l(),pc=a("p"),OFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jJ=a("a"),VFr=o("from_pretrained()"),XFr=o(" class method or the "),DJ=a("a"),zFr=o("from_config()"),WFr=o(` class
method.`),QFr=l(),Gx=a("p"),UFr=o("This class cannot be instantiated directly using "),zTe=a("code"),HFr=o("__init__()"),JFr=o(" (throws an error)."),YFr=l(),Bt=a("div"),F(Ox.$$.fragment),KFr=l(),WTe=a("p"),ZFr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),eTr=l(),_c=a("p"),oTr=o(`Note:
Loading a model from its configuration file does `),QTe=a("strong"),rTr=o("not"),tTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),aTr=o("from_pretrained()"),nTr=o(" to load the model weights."),sTr=l(),F(z8.$$.fragment),lTr=l(),Fo=a("div"),F(Vx.$$.fragment),iTr=l(),UTe=a("p"),dTr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cTr=l(),gn=a("p"),fTr=o("The model class to instantiate is selected based on the "),HTe=a("code"),mTr=o("model_type"),gTr=o(` property of the config object (either
passed as an argument or loaded from `),JTe=a("code"),hTr=o("pretrained_model_name_or_path"),pTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=a("code"),_Tr=o("pretrained_model_name_or_path"),uTr=o(":"),bTr=l(),KTe=a("ul"),W8=a("li"),ZTe=a("strong"),vTr=o("detr"),FTr=o(" \u2014 "),OJ=a("a"),TTr=o("DetrForSegmentation"),MTr=o(" (DETR model)"),ETr=l(),Q8=a("p"),CTr=o("The model is set in evaluation mode by default using "),e8e=a("code"),wTr=o("model.eval()"),ATr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o8e=a("code"),LTr=o("model.train()"),yTr=l(),F(U8.$$.fragment),xUe=l(),uc=a("h2"),H8=a("a"),r8e=a("span"),F(Xx.$$.fragment),xTr=l(),t8e=a("span"),$Tr=o("AutoModelForSemanticSegmentation"),$Ue=l(),rr=a("div"),F(zx.$$.fragment),kTr=l(),bc=a("p"),STr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VJ=a("a"),RTr=o("from_pretrained()"),PTr=o(" class method or the "),XJ=a("a"),BTr=o("from_config()"),ITr=o(` class
method.`),NTr=l(),Wx=a("p"),qTr=o("This class cannot be instantiated directly using "),a8e=a("code"),jTr=o("__init__()"),DTr=o(" (throws an error)."),GTr=l(),It=a("div"),F(Qx.$$.fragment),OTr=l(),n8e=a("p"),VTr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),XTr=l(),vc=a("p"),zTr=o(`Note:
Loading a model from its configuration file does `),s8e=a("strong"),WTr=o("not"),QTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),UTr=o("from_pretrained()"),HTr=o(" to load the model weights."),JTr=l(),F(J8.$$.fragment),YTr=l(),To=a("div"),F(Ux.$$.fragment),KTr=l(),l8e=a("p"),ZTr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),e8r=l(),hn=a("p"),o8r=o("The model class to instantiate is selected based on the "),i8e=a("code"),r8r=o("model_type"),t8r=o(` property of the config object (either
passed as an argument or loaded from `),d8e=a("code"),a8r=o("pretrained_model_name_or_path"),n8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=a("code"),s8r=o("pretrained_model_name_or_path"),l8r=o(":"),i8r=l(),it=a("ul"),Y8=a("li"),f8e=a("strong"),d8r=o("beit"),c8r=o(" \u2014 "),WJ=a("a"),f8r=o("BeitForSemanticSegmentation"),m8r=o(" (BEiT model)"),g8r=l(),K8=a("li"),m8e=a("strong"),h8r=o("data2vec-vision"),p8r=o(" \u2014 "),QJ=a("a"),_8r=o("Data2VecVisionForSemanticSegmentation"),u8r=o(" (Data2VecVision model)"),b8r=l(),Z8=a("li"),g8e=a("strong"),v8r=o("dpt"),F8r=o(" \u2014 "),UJ=a("a"),T8r=o("DPTForSemanticSegmentation"),M8r=o(" (DPT model)"),E8r=l(),eM=a("li"),h8e=a("strong"),C8r=o("mobilevit"),w8r=o(" \u2014 "),HJ=a("a"),A8r=o("MobileViTForSemanticSegmentation"),L8r=o(" (MobileViT model)"),y8r=l(),oM=a("li"),p8e=a("strong"),x8r=o("segformer"),$8r=o(" \u2014 "),JJ=a("a"),k8r=o("SegformerForSemanticSegmentation"),S8r=o(" (SegFormer model)"),R8r=l(),rM=a("p"),P8r=o("The model is set in evaluation mode by default using "),_8e=a("code"),B8r=o("model.eval()"),I8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u8e=a("code"),N8r=o("model.train()"),q8r=l(),F(tM.$$.fragment),kUe=l(),Fc=a("h2"),aM=a("a"),b8e=a("span"),F(Hx.$$.fragment),j8r=l(),v8e=a("span"),D8r=o("AutoModelForInstanceSegmentation"),SUe=l(),tr=a("div"),F(Jx.$$.fragment),G8r=l(),Tc=a("p"),O8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),YJ=a("a"),V8r=o("from_pretrained()"),X8r=o(" class method or the "),KJ=a("a"),z8r=o("from_config()"),W8r=o(` class
method.`),Q8r=l(),Yx=a("p"),U8r=o("This class cannot be instantiated directly using "),F8e=a("code"),H8r=o("__init__()"),J8r=o(" (throws an error)."),Y8r=l(),Nt=a("div"),F(Kx.$$.fragment),K8r=l(),T8e=a("p"),Z8r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),eMr=l(),Mc=a("p"),oMr=o(`Note:
Loading a model from its configuration file does `),M8e=a("strong"),rMr=o("not"),tMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),aMr=o("from_pretrained()"),nMr=o(" to load the model weights."),sMr=l(),F(nM.$$.fragment),lMr=l(),Mo=a("div"),F(Zx.$$.fragment),iMr=l(),E8e=a("p"),dMr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),cMr=l(),pn=a("p"),fMr=o("The model class to instantiate is selected based on the "),C8e=a("code"),mMr=o("model_type"),gMr=o(` property of the config object (either
passed as an argument or loaded from `),w8e=a("code"),hMr=o("pretrained_model_name_or_path"),pMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=a("code"),_Mr=o("pretrained_model_name_or_path"),uMr=o(":"),bMr=l(),L8e=a("ul"),sM=a("li"),y8e=a("strong"),vMr=o("maskformer"),FMr=o(" \u2014 "),eY=a("a"),TMr=o("MaskFormerForInstanceSegmentation"),MMr=o(" (MaskFormer model)"),EMr=l(),lM=a("p"),CMr=o("The model is set in evaluation mode by default using "),x8e=a("code"),wMr=o("model.eval()"),AMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$8e=a("code"),LMr=o("model.train()"),yMr=l(),F(iM.$$.fragment),RUe=l(),Ec=a("h2"),dM=a("a"),k8e=a("span"),F(e$.$$.fragment),xMr=l(),S8e=a("span"),$Mr=o("TFAutoModel"),PUe=l(),ar=a("div"),F(o$.$$.fragment),kMr=l(),Cc=a("p"),SMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oY=a("a"),RMr=o("from_pretrained()"),PMr=o(" class method or the "),rY=a("a"),BMr=o("from_config()"),IMr=o(` class
method.`),NMr=l(),r$=a("p"),qMr=o("This class cannot be instantiated directly using "),R8e=a("code"),jMr=o("__init__()"),DMr=o(" (throws an error)."),GMr=l(),qt=a("div"),F(t$.$$.fragment),OMr=l(),P8e=a("p"),VMr=o("Instantiates one of the base model classes of the library from a configuration."),XMr=l(),wc=a("p"),zMr=o(`Note:
Loading a model from its configuration file does `),B8e=a("strong"),WMr=o("not"),QMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),UMr=o("from_pretrained()"),HMr=o(" to load the model weights."),JMr=l(),F(cM.$$.fragment),YMr=l(),Rr=a("div"),F(a$.$$.fragment),KMr=l(),I8e=a("p"),ZMr=o("Instantiate one of the base model classes of the library from a pretrained model."),eEr=l(),_n=a("p"),oEr=o("The model class to instantiate is selected based on the "),N8e=a("code"),rEr=o("model_type"),tEr=o(` property of the config object (either
passed as an argument or loaded from `),q8e=a("code"),aEr=o("pretrained_model_name_or_path"),nEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j8e=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(":"),iEr=l(),q=a("ul"),fM=a("li"),D8e=a("strong"),dEr=o("albert"),cEr=o(" \u2014 "),aY=a("a"),fEr=o("TFAlbertModel"),mEr=o(" (ALBERT model)"),gEr=l(),mM=a("li"),G8e=a("strong"),hEr=o("bart"),pEr=o(" \u2014 "),nY=a("a"),_Er=o("TFBartModel"),uEr=o(" (BART model)"),bEr=l(),gM=a("li"),O8e=a("strong"),vEr=o("bert"),FEr=o(" \u2014 "),sY=a("a"),TEr=o("TFBertModel"),MEr=o(" (BERT model)"),EEr=l(),hM=a("li"),V8e=a("strong"),CEr=o("blenderbot"),wEr=o(" \u2014 "),lY=a("a"),AEr=o("TFBlenderbotModel"),LEr=o(" (Blenderbot model)"),yEr=l(),pM=a("li"),X8e=a("strong"),xEr=o("blenderbot-small"),$Er=o(" \u2014 "),iY=a("a"),kEr=o("TFBlenderbotSmallModel"),SEr=o(" (BlenderbotSmall model)"),REr=l(),_M=a("li"),z8e=a("strong"),PEr=o("camembert"),BEr=o(" \u2014 "),dY=a("a"),IEr=o("TFCamembertModel"),NEr=o(" (CamemBERT model)"),qEr=l(),uM=a("li"),W8e=a("strong"),jEr=o("clip"),DEr=o(" \u2014 "),cY=a("a"),GEr=o("TFCLIPModel"),OEr=o(" (CLIP model)"),VEr=l(),bM=a("li"),Q8e=a("strong"),XEr=o("convbert"),zEr=o(" \u2014 "),fY=a("a"),WEr=o("TFConvBertModel"),QEr=o(" (ConvBERT model)"),UEr=l(),vM=a("li"),U8e=a("strong"),HEr=o("convnext"),JEr=o(" \u2014 "),mY=a("a"),YEr=o("TFConvNextModel"),KEr=o(" (ConvNeXT model)"),ZEr=l(),FM=a("li"),H8e=a("strong"),e4r=o("ctrl"),o4r=o(" \u2014 "),gY=a("a"),r4r=o("TFCTRLModel"),t4r=o(" (CTRL model)"),a4r=l(),TM=a("li"),J8e=a("strong"),n4r=o("data2vec-vision"),s4r=o(" \u2014 "),hY=a("a"),l4r=o("TFData2VecVisionModel"),i4r=o(" (Data2VecVision model)"),d4r=l(),MM=a("li"),Y8e=a("strong"),c4r=o("deberta"),f4r=o(" \u2014 "),pY=a("a"),m4r=o("TFDebertaModel"),g4r=o(" (DeBERTa model)"),h4r=l(),EM=a("li"),K8e=a("strong"),p4r=o("deberta-v2"),_4r=o(" \u2014 "),_Y=a("a"),u4r=o("TFDebertaV2Model"),b4r=o(" (DeBERTa-v2 model)"),v4r=l(),CM=a("li"),Z8e=a("strong"),F4r=o("deit"),T4r=o(" \u2014 "),uY=a("a"),M4r=o("TFDeiTModel"),E4r=o(" (DeiT model)"),C4r=l(),wM=a("li"),eMe=a("strong"),w4r=o("distilbert"),A4r=o(" \u2014 "),bY=a("a"),L4r=o("TFDistilBertModel"),y4r=o(" (DistilBERT model)"),x4r=l(),AM=a("li"),oMe=a("strong"),$4r=o("dpr"),k4r=o(" \u2014 "),vY=a("a"),S4r=o("TFDPRQuestionEncoder"),R4r=o(" (DPR model)"),P4r=l(),LM=a("li"),rMe=a("strong"),B4r=o("electra"),I4r=o(" \u2014 "),FY=a("a"),N4r=o("TFElectraModel"),q4r=o(" (ELECTRA model)"),j4r=l(),yM=a("li"),tMe=a("strong"),D4r=o("flaubert"),G4r=o(" \u2014 "),TY=a("a"),O4r=o("TFFlaubertModel"),V4r=o(" (FlauBERT model)"),X4r=l(),il=a("li"),aMe=a("strong"),z4r=o("funnel"),W4r=o(" \u2014 "),MY=a("a"),Q4r=o("TFFunnelModel"),U4r=o(" or "),EY=a("a"),H4r=o("TFFunnelBaseModel"),J4r=o(" (Funnel Transformer model)"),Y4r=l(),xM=a("li"),nMe=a("strong"),K4r=o("gpt2"),Z4r=o(" \u2014 "),CY=a("a"),eCr=o("TFGPT2Model"),oCr=o(" (OpenAI GPT-2 model)"),rCr=l(),$M=a("li"),sMe=a("strong"),tCr=o("gptj"),aCr=o(" \u2014 "),wY=a("a"),nCr=o("TFGPTJModel"),sCr=o(" (GPT-J model)"),lCr=l(),kM=a("li"),lMe=a("strong"),iCr=o("hubert"),dCr=o(" \u2014 "),AY=a("a"),cCr=o("TFHubertModel"),fCr=o(" (Hubert model)"),mCr=l(),SM=a("li"),iMe=a("strong"),gCr=o("layoutlm"),hCr=o(" \u2014 "),LY=a("a"),pCr=o("TFLayoutLMModel"),_Cr=o(" (LayoutLM model)"),uCr=l(),RM=a("li"),dMe=a("strong"),bCr=o("led"),vCr=o(" \u2014 "),yY=a("a"),FCr=o("TFLEDModel"),TCr=o(" (LED model)"),MCr=l(),PM=a("li"),cMe=a("strong"),ECr=o("longformer"),CCr=o(" \u2014 "),xY=a("a"),wCr=o("TFLongformerModel"),ACr=o(" (Longformer model)"),LCr=l(),BM=a("li"),fMe=a("strong"),yCr=o("lxmert"),xCr=o(" \u2014 "),$Y=a("a"),$Cr=o("TFLxmertModel"),kCr=o(" (LXMERT model)"),SCr=l(),IM=a("li"),mMe=a("strong"),RCr=o("marian"),PCr=o(" \u2014 "),kY=a("a"),BCr=o("TFMarianModel"),ICr=o(" (Marian model)"),NCr=l(),NM=a("li"),gMe=a("strong"),qCr=o("mbart"),jCr=o(" \u2014 "),SY=a("a"),DCr=o("TFMBartModel"),GCr=o(" (mBART model)"),OCr=l(),qM=a("li"),hMe=a("strong"),VCr=o("mobilebert"),XCr=o(" \u2014 "),RY=a("a"),zCr=o("TFMobileBertModel"),WCr=o(" (MobileBERT model)"),QCr=l(),jM=a("li"),pMe=a("strong"),UCr=o("mpnet"),HCr=o(" \u2014 "),PY=a("a"),JCr=o("TFMPNetModel"),YCr=o(" (MPNet model)"),KCr=l(),DM=a("li"),_Me=a("strong"),ZCr=o("mt5"),e3r=o(" \u2014 "),BY=a("a"),o3r=o("TFMT5Model"),r3r=o(" (MT5 model)"),t3r=l(),GM=a("li"),uMe=a("strong"),a3r=o("openai-gpt"),n3r=o(" \u2014 "),IY=a("a"),s3r=o("TFOpenAIGPTModel"),l3r=o(" (OpenAI GPT model)"),i3r=l(),OM=a("li"),bMe=a("strong"),d3r=o("opt"),c3r=o(" \u2014 "),NY=a("a"),f3r=o("TFOPTModel"),m3r=o(" (OPT model)"),g3r=l(),VM=a("li"),vMe=a("strong"),h3r=o("pegasus"),p3r=o(" \u2014 "),qY=a("a"),_3r=o("TFPegasusModel"),u3r=o(" (Pegasus model)"),b3r=l(),XM=a("li"),FMe=a("strong"),v3r=o("regnet"),F3r=o(" \u2014 "),jY=a("a"),T3r=o("TFRegNetModel"),M3r=o(" (RegNet model)"),E3r=l(),zM=a("li"),TMe=a("strong"),C3r=o("rembert"),w3r=o(" \u2014 "),DY=a("a"),A3r=o("TFRemBertModel"),L3r=o(" (RemBERT model)"),y3r=l(),WM=a("li"),MMe=a("strong"),x3r=o("resnet"),$3r=o(" \u2014 "),GY=a("a"),k3r=o("TFResNetModel"),S3r=o(" (ResNet model)"),R3r=l(),QM=a("li"),EMe=a("strong"),P3r=o("roberta"),B3r=o(" \u2014 "),OY=a("a"),I3r=o("TFRobertaModel"),N3r=o(" (RoBERTa model)"),q3r=l(),UM=a("li"),CMe=a("strong"),j3r=o("roformer"),D3r=o(" \u2014 "),VY=a("a"),G3r=o("TFRoFormerModel"),O3r=o(" (RoFormer model)"),V3r=l(),HM=a("li"),wMe=a("strong"),X3r=o("segformer"),z3r=o(" \u2014 "),XY=a("a"),W3r=o("TFSegformerModel"),Q3r=o(" (SegFormer model)"),U3r=l(),JM=a("li"),AMe=a("strong"),H3r=o("speech_to_text"),J3r=o(" \u2014 "),zY=a("a"),Y3r=o("TFSpeech2TextModel"),K3r=o(" (Speech2Text model)"),Z3r=l(),YM=a("li"),LMe=a("strong"),e5r=o("swin"),o5r=o(" \u2014 "),WY=a("a"),r5r=o("TFSwinModel"),t5r=o(" (Swin Transformer model)"),a5r=l(),KM=a("li"),yMe=a("strong"),n5r=o("t5"),s5r=o(" \u2014 "),QY=a("a"),l5r=o("TFT5Model"),i5r=o(" (T5 model)"),d5r=l(),ZM=a("li"),xMe=a("strong"),c5r=o("tapas"),f5r=o(" \u2014 "),UY=a("a"),m5r=o("TFTapasModel"),g5r=o(" (TAPAS model)"),h5r=l(),eE=a("li"),$Me=a("strong"),p5r=o("transfo-xl"),_5r=o(" \u2014 "),HY=a("a"),u5r=o("TFTransfoXLModel"),b5r=o(" (Transformer-XL model)"),v5r=l(),oE=a("li"),kMe=a("strong"),F5r=o("vit"),T5r=o(" \u2014 "),JY=a("a"),M5r=o("TFViTModel"),E5r=o(" (ViT model)"),C5r=l(),rE=a("li"),SMe=a("strong"),w5r=o("vit_mae"),A5r=o(" \u2014 "),YY=a("a"),L5r=o("TFViTMAEModel"),y5r=o(" (ViTMAE model)"),x5r=l(),tE=a("li"),RMe=a("strong"),$5r=o("wav2vec2"),k5r=o(" \u2014 "),KY=a("a"),S5r=o("TFWav2Vec2Model"),R5r=o(" (Wav2Vec2 model)"),P5r=l(),aE=a("li"),PMe=a("strong"),B5r=o("xlm"),I5r=o(" \u2014 "),ZY=a("a"),N5r=o("TFXLMModel"),q5r=o(" (XLM model)"),j5r=l(),nE=a("li"),BMe=a("strong"),D5r=o("xlm-roberta"),G5r=o(" \u2014 "),eK=a("a"),O5r=o("TFXLMRobertaModel"),V5r=o(" (XLM-RoBERTa model)"),X5r=l(),sE=a("li"),IMe=a("strong"),z5r=o("xlnet"),W5r=o(" \u2014 "),oK=a("a"),Q5r=o("TFXLNetModel"),U5r=o(" (XLNet model)"),H5r=l(),F(lE.$$.fragment),BUe=l(),Ac=a("h2"),iE=a("a"),NMe=a("span"),F(n$.$$.fragment),J5r=l(),qMe=a("span"),Y5r=o("TFAutoModelForPreTraining"),IUe=l(),nr=a("div"),F(s$.$$.fragment),K5r=l(),Lc=a("p"),Z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rK=a("a"),ewr=o("from_pretrained()"),owr=o(" class method or the "),tK=a("a"),rwr=o("from_config()"),twr=o(` class
method.`),awr=l(),l$=a("p"),nwr=o("This class cannot be instantiated directly using "),jMe=a("code"),swr=o("__init__()"),lwr=o(" (throws an error)."),iwr=l(),jt=a("div"),F(i$.$$.fragment),dwr=l(),DMe=a("p"),cwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fwr=l(),yc=a("p"),mwr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),gwr=o("not"),hwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),pwr=o("from_pretrained()"),_wr=o(" to load the model weights."),uwr=l(),F(dE.$$.fragment),bwr=l(),Pr=a("div"),F(d$.$$.fragment),vwr=l(),OMe=a("p"),Fwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Twr=l(),un=a("p"),Mwr=o("The model class to instantiate is selected based on the "),VMe=a("code"),Ewr=o("model_type"),Cwr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),Lwr=o("pretrained_model_name_or_path"),ywr=o(":"),xwr=l(),se=a("ul"),cE=a("li"),WMe=a("strong"),$wr=o("albert"),kwr=o(" \u2014 "),nK=a("a"),Swr=o("TFAlbertForPreTraining"),Rwr=o(" (ALBERT model)"),Pwr=l(),fE=a("li"),QMe=a("strong"),Bwr=o("bart"),Iwr=o(" \u2014 "),sK=a("a"),Nwr=o("TFBartForConditionalGeneration"),qwr=o(" (BART model)"),jwr=l(),mE=a("li"),UMe=a("strong"),Dwr=o("bert"),Gwr=o(" \u2014 "),lK=a("a"),Owr=o("TFBertForPreTraining"),Vwr=o(" (BERT model)"),Xwr=l(),gE=a("li"),HMe=a("strong"),zwr=o("camembert"),Wwr=o(" \u2014 "),iK=a("a"),Qwr=o("TFCamembertForMaskedLM"),Uwr=o(" (CamemBERT model)"),Hwr=l(),hE=a("li"),JMe=a("strong"),Jwr=o("ctrl"),Ywr=o(" \u2014 "),dK=a("a"),Kwr=o("TFCTRLLMHeadModel"),Zwr=o(" (CTRL model)"),eAr=l(),pE=a("li"),YMe=a("strong"),oAr=o("distilbert"),rAr=o(" \u2014 "),cK=a("a"),tAr=o("TFDistilBertForMaskedLM"),aAr=o(" (DistilBERT model)"),nAr=l(),_E=a("li"),KMe=a("strong"),sAr=o("electra"),lAr=o(" \u2014 "),fK=a("a"),iAr=o("TFElectraForPreTraining"),dAr=o(" (ELECTRA model)"),cAr=l(),uE=a("li"),ZMe=a("strong"),fAr=o("flaubert"),mAr=o(" \u2014 "),mK=a("a"),gAr=o("TFFlaubertWithLMHeadModel"),hAr=o(" (FlauBERT model)"),pAr=l(),bE=a("li"),eEe=a("strong"),_Ar=o("funnel"),uAr=o(" \u2014 "),gK=a("a"),bAr=o("TFFunnelForPreTraining"),vAr=o(" (Funnel Transformer model)"),FAr=l(),vE=a("li"),oEe=a("strong"),TAr=o("gpt2"),MAr=o(" \u2014 "),hK=a("a"),EAr=o("TFGPT2LMHeadModel"),CAr=o(" (OpenAI GPT-2 model)"),wAr=l(),FE=a("li"),rEe=a("strong"),AAr=o("layoutlm"),LAr=o(" \u2014 "),pK=a("a"),yAr=o("TFLayoutLMForMaskedLM"),xAr=o(" (LayoutLM model)"),$Ar=l(),TE=a("li"),tEe=a("strong"),kAr=o("lxmert"),SAr=o(" \u2014 "),_K=a("a"),RAr=o("TFLxmertForPreTraining"),PAr=o(" (LXMERT model)"),BAr=l(),ME=a("li"),aEe=a("strong"),IAr=o("mobilebert"),NAr=o(" \u2014 "),uK=a("a"),qAr=o("TFMobileBertForPreTraining"),jAr=o(" (MobileBERT model)"),DAr=l(),EE=a("li"),nEe=a("strong"),GAr=o("mpnet"),OAr=o(" \u2014 "),bK=a("a"),VAr=o("TFMPNetForMaskedLM"),XAr=o(" (MPNet model)"),zAr=l(),CE=a("li"),sEe=a("strong"),WAr=o("openai-gpt"),QAr=o(" \u2014 "),vK=a("a"),UAr=o("TFOpenAIGPTLMHeadModel"),HAr=o(" (OpenAI GPT model)"),JAr=l(),wE=a("li"),lEe=a("strong"),YAr=o("roberta"),KAr=o(" \u2014 "),FK=a("a"),ZAr=o("TFRobertaForMaskedLM"),e7r=o(" (RoBERTa model)"),o7r=l(),AE=a("li"),iEe=a("strong"),r7r=o("t5"),t7r=o(" \u2014 "),TK=a("a"),a7r=o("TFT5ForConditionalGeneration"),n7r=o(" (T5 model)"),s7r=l(),LE=a("li"),dEe=a("strong"),l7r=o("tapas"),i7r=o(" \u2014 "),MK=a("a"),d7r=o("TFTapasForMaskedLM"),c7r=o(" (TAPAS model)"),f7r=l(),yE=a("li"),cEe=a("strong"),m7r=o("transfo-xl"),g7r=o(" \u2014 "),EK=a("a"),h7r=o("TFTransfoXLLMHeadModel"),p7r=o(" (Transformer-XL model)"),_7r=l(),xE=a("li"),fEe=a("strong"),u7r=o("vit_mae"),b7r=o(" \u2014 "),CK=a("a"),v7r=o("TFViTMAEForPreTraining"),F7r=o(" (ViTMAE model)"),T7r=l(),$E=a("li"),mEe=a("strong"),M7r=o("xlm"),E7r=o(" \u2014 "),wK=a("a"),C7r=o("TFXLMWithLMHeadModel"),w7r=o(" (XLM model)"),A7r=l(),kE=a("li"),gEe=a("strong"),L7r=o("xlm-roberta"),y7r=o(" \u2014 "),AK=a("a"),x7r=o("TFXLMRobertaForMaskedLM"),$7r=o(" (XLM-RoBERTa model)"),k7r=l(),SE=a("li"),hEe=a("strong"),S7r=o("xlnet"),R7r=o(" \u2014 "),LK=a("a"),P7r=o("TFXLNetLMHeadModel"),B7r=o(" (XLNet model)"),I7r=l(),F(RE.$$.fragment),NUe=l(),xc=a("h2"),PE=a("a"),pEe=a("span"),F(c$.$$.fragment),N7r=l(),_Ee=a("span"),q7r=o("TFAutoModelForCausalLM"),qUe=l(),sr=a("div"),F(f$.$$.fragment),j7r=l(),$c=a("p"),D7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yK=a("a"),G7r=o("from_pretrained()"),O7r=o(" class method or the "),xK=a("a"),V7r=o("from_config()"),X7r=o(` class
method.`),z7r=l(),m$=a("p"),W7r=o("This class cannot be instantiated directly using "),uEe=a("code"),Q7r=o("__init__()"),U7r=o(" (throws an error)."),H7r=l(),Dt=a("div"),F(g$.$$.fragment),J7r=l(),bEe=a("p"),Y7r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K7r=l(),kc=a("p"),Z7r=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),eLr=o("not"),oLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),rLr=o("from_pretrained()"),tLr=o(" to load the model weights."),aLr=l(),F(BE.$$.fragment),nLr=l(),Br=a("div"),F(h$.$$.fragment),sLr=l(),FEe=a("p"),lLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iLr=l(),bn=a("p"),dLr=o("The model class to instantiate is selected based on the "),TEe=a("code"),cLr=o("model_type"),fLr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),mLr=o("pretrained_model_name_or_path"),gLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),hLr=o("pretrained_model_name_or_path"),pLr=o(":"),_Lr=l(),Me=a("ul"),IE=a("li"),CEe=a("strong"),uLr=o("bert"),bLr=o(" \u2014 "),kK=a("a"),vLr=o("TFBertLMHeadModel"),FLr=o(" (BERT model)"),TLr=l(),NE=a("li"),wEe=a("strong"),MLr=o("camembert"),ELr=o(" \u2014 "),SK=a("a"),CLr=o("TFCamembertForCausalLM"),wLr=o(" (CamemBERT model)"),ALr=l(),qE=a("li"),AEe=a("strong"),LLr=o("ctrl"),yLr=o(" \u2014 "),RK=a("a"),xLr=o("TFCTRLLMHeadModel"),$Lr=o(" (CTRL model)"),kLr=l(),jE=a("li"),LEe=a("strong"),SLr=o("gpt2"),RLr=o(" \u2014 "),PK=a("a"),PLr=o("TFGPT2LMHeadModel"),BLr=o(" (OpenAI GPT-2 model)"),ILr=l(),DE=a("li"),yEe=a("strong"),NLr=o("gptj"),qLr=o(" \u2014 "),BK=a("a"),jLr=o("TFGPTJForCausalLM"),DLr=o(" (GPT-J model)"),GLr=l(),GE=a("li"),xEe=a("strong"),OLr=o("openai-gpt"),VLr=o(" \u2014 "),IK=a("a"),XLr=o("TFOpenAIGPTLMHeadModel"),zLr=o(" (OpenAI GPT model)"),WLr=l(),OE=a("li"),$Ee=a("strong"),QLr=o("opt"),ULr=o(" \u2014 "),NK=a("a"),HLr=o("TFOPTForCausalLM"),JLr=o(" (OPT model)"),YLr=l(),VE=a("li"),kEe=a("strong"),KLr=o("rembert"),ZLr=o(" \u2014 "),qK=a("a"),eyr=o("TFRemBertForCausalLM"),oyr=o(" (RemBERT model)"),ryr=l(),XE=a("li"),SEe=a("strong"),tyr=o("roberta"),ayr=o(" \u2014 "),jK=a("a"),nyr=o("TFRobertaForCausalLM"),syr=o(" (RoBERTa model)"),lyr=l(),zE=a("li"),REe=a("strong"),iyr=o("roformer"),dyr=o(" \u2014 "),DK=a("a"),cyr=o("TFRoFormerForCausalLM"),fyr=o(" (RoFormer model)"),myr=l(),WE=a("li"),PEe=a("strong"),gyr=o("transfo-xl"),hyr=o(" \u2014 "),GK=a("a"),pyr=o("TFTransfoXLLMHeadModel"),_yr=o(" (Transformer-XL model)"),uyr=l(),QE=a("li"),BEe=a("strong"),byr=o("xlm"),vyr=o(" \u2014 "),OK=a("a"),Fyr=o("TFXLMWithLMHeadModel"),Tyr=o(" (XLM model)"),Myr=l(),UE=a("li"),IEe=a("strong"),Eyr=o("xlnet"),Cyr=o(" \u2014 "),VK=a("a"),wyr=o("TFXLNetLMHeadModel"),Ayr=o(" (XLNet model)"),Lyr=l(),F(HE.$$.fragment),jUe=l(),Sc=a("h2"),JE=a("a"),NEe=a("span"),F(p$.$$.fragment),yyr=l(),qEe=a("span"),xyr=o("TFAutoModelForImageClassification"),DUe=l(),lr=a("div"),F(_$.$$.fragment),$yr=l(),Rc=a("p"),kyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XK=a("a"),Syr=o("from_pretrained()"),Ryr=o(" class method or the "),zK=a("a"),Pyr=o("from_config()"),Byr=o(` class
method.`),Iyr=l(),u$=a("p"),Nyr=o("This class cannot be instantiated directly using "),jEe=a("code"),qyr=o("__init__()"),jyr=o(" (throws an error)."),Dyr=l(),Gt=a("div"),F(b$.$$.fragment),Gyr=l(),DEe=a("p"),Oyr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vyr=l(),Pc=a("p"),Xyr=o(`Note:
Loading a model from its configuration file does `),GEe=a("strong"),zyr=o("not"),Wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),Qyr=o("from_pretrained()"),Uyr=o(" to load the model weights."),Hyr=l(),F(YE.$$.fragment),Jyr=l(),Ir=a("div"),F(v$.$$.fragment),Yyr=l(),OEe=a("p"),Kyr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zyr=l(),vn=a("p"),e9r=o("The model class to instantiate is selected based on the "),VEe=a("code"),o9r=o("model_type"),r9r=o(` property of the config object (either
passed as an argument or loaded from `),XEe=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=a("code"),n9r=o("pretrained_model_name_or_path"),s9r=o(":"),l9r=l(),Ve=a("ul"),KE=a("li"),WEe=a("strong"),i9r=o("convnext"),d9r=o(" \u2014 "),QK=a("a"),c9r=o("TFConvNextForImageClassification"),f9r=o(" (ConvNeXT model)"),m9r=l(),ZE=a("li"),QEe=a("strong"),g9r=o("data2vec-vision"),h9r=o(" \u2014 "),UK=a("a"),p9r=o("TFData2VecVisionForImageClassification"),_9r=o(" (Data2VecVision model)"),u9r=l(),dl=a("li"),UEe=a("strong"),b9r=o("deit"),v9r=o(" \u2014 "),HK=a("a"),F9r=o("TFDeiTForImageClassification"),T9r=o(" or "),JK=a("a"),M9r=o("TFDeiTForImageClassificationWithTeacher"),E9r=o(" (DeiT model)"),C9r=l(),e4=a("li"),HEe=a("strong"),w9r=o("regnet"),A9r=o(" \u2014 "),YK=a("a"),L9r=o("TFRegNetForImageClassification"),y9r=o(" (RegNet model)"),x9r=l(),o4=a("li"),JEe=a("strong"),$9r=o("resnet"),k9r=o(" \u2014 "),KK=a("a"),S9r=o("TFResNetForImageClassification"),R9r=o(" (ResNet model)"),P9r=l(),r4=a("li"),YEe=a("strong"),B9r=o("segformer"),I9r=o(" \u2014 "),ZK=a("a"),N9r=o("TFSegformerForImageClassification"),q9r=o(" (SegFormer model)"),j9r=l(),t4=a("li"),KEe=a("strong"),D9r=o("swin"),G9r=o(" \u2014 "),eZ=a("a"),O9r=o("TFSwinForImageClassification"),V9r=o(" (Swin Transformer model)"),X9r=l(),a4=a("li"),ZEe=a("strong"),z9r=o("vit"),W9r=o(" \u2014 "),oZ=a("a"),Q9r=o("TFViTForImageClassification"),U9r=o(" (ViT model)"),H9r=l(),F(n4.$$.fragment),GUe=l(),Bc=a("h2"),s4=a("a"),e4e=a("span"),F(F$.$$.fragment),J9r=l(),o4e=a("span"),Y9r=o("TFAutoModelForSemanticSegmentation"),OUe=l(),ir=a("div"),F(T$.$$.fragment),K9r=l(),Ic=a("p"),Z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rZ=a("a"),exr=o("from_pretrained()"),oxr=o(" class method or the "),tZ=a("a"),rxr=o("from_config()"),txr=o(` class
method.`),axr=l(),M$=a("p"),nxr=o("This class cannot be instantiated directly using "),r4e=a("code"),sxr=o("__init__()"),lxr=o(" (throws an error)."),ixr=l(),Ot=a("div"),F(E$.$$.fragment),dxr=l(),t4e=a("p"),cxr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),fxr=l(),Nc=a("p"),mxr=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),gxr=o("not"),hxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),pxr=o("from_pretrained()"),_xr=o(" to load the model weights."),uxr=l(),F(l4.$$.fragment),bxr=l(),Nr=a("div"),F(C$.$$.fragment),vxr=l(),n4e=a("p"),Fxr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Txr=l(),Fn=a("p"),Mxr=o("The model class to instantiate is selected based on the "),s4e=a("code"),Exr=o("model_type"),Cxr=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),wxr=o("pretrained_model_name_or_path"),Axr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),Lxr=o("pretrained_model_name_or_path"),yxr=o(":"),xxr=l(),w$=a("ul"),i4=a("li"),d4e=a("strong"),$xr=o("data2vec-vision"),kxr=o(" \u2014 "),nZ=a("a"),Sxr=o("TFData2VecVisionForSemanticSegmentation"),Rxr=o(" (Data2VecVision model)"),Pxr=l(),d4=a("li"),c4e=a("strong"),Bxr=o("segformer"),Ixr=o(" \u2014 "),sZ=a("a"),Nxr=o("TFSegformerForSemanticSegmentation"),qxr=o(" (SegFormer model)"),jxr=l(),F(c4.$$.fragment),VUe=l(),qc=a("h2"),f4=a("a"),f4e=a("span"),F(A$.$$.fragment),Dxr=l(),m4e=a("span"),Gxr=o("TFAutoModelForMaskedLM"),XUe=l(),dr=a("div"),F(L$.$$.fragment),Oxr=l(),jc=a("p"),Vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lZ=a("a"),Xxr=o("from_pretrained()"),zxr=o(" class method or the "),iZ=a("a"),Wxr=o("from_config()"),Qxr=o(` class
method.`),Uxr=l(),y$=a("p"),Hxr=o("This class cannot be instantiated directly using "),g4e=a("code"),Jxr=o("__init__()"),Yxr=o(" (throws an error)."),Kxr=l(),Vt=a("div"),F(x$.$$.fragment),Zxr=l(),h4e=a("p"),e$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),o$r=l(),Dc=a("p"),r$r=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),t$r=o("not"),a$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),n$r=o("from_pretrained()"),s$r=o(" to load the model weights."),l$r=l(),F(m4.$$.fragment),i$r=l(),qr=a("div"),F($$.$$.fragment),d$r=l(),_4e=a("p"),c$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),f$r=l(),Tn=a("p"),m$r=o("The model class to instantiate is selected based on the "),u4e=a("code"),g$r=o("model_type"),h$r=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),p$r=o("pretrained_model_name_or_path"),_$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),u$r=o("pretrained_model_name_or_path"),b$r=o(":"),v$r=l(),ie=a("ul"),g4=a("li"),F4e=a("strong"),F$r=o("albert"),T$r=o(" \u2014 "),cZ=a("a"),M$r=o("TFAlbertForMaskedLM"),E$r=o(" (ALBERT model)"),C$r=l(),h4=a("li"),T4e=a("strong"),w$r=o("bert"),A$r=o(" \u2014 "),fZ=a("a"),L$r=o("TFBertForMaskedLM"),y$r=o(" (BERT model)"),x$r=l(),p4=a("li"),M4e=a("strong"),$$r=o("camembert"),k$r=o(" \u2014 "),mZ=a("a"),S$r=o("TFCamembertForMaskedLM"),R$r=o(" (CamemBERT model)"),P$r=l(),_4=a("li"),E4e=a("strong"),B$r=o("convbert"),I$r=o(" \u2014 "),gZ=a("a"),N$r=o("TFConvBertForMaskedLM"),q$r=o(" (ConvBERT model)"),j$r=l(),u4=a("li"),C4e=a("strong"),D$r=o("deberta"),G$r=o(" \u2014 "),hZ=a("a"),O$r=o("TFDebertaForMaskedLM"),V$r=o(" (DeBERTa model)"),X$r=l(),b4=a("li"),w4e=a("strong"),z$r=o("deberta-v2"),W$r=o(" \u2014 "),pZ=a("a"),Q$r=o("TFDebertaV2ForMaskedLM"),U$r=o(" (DeBERTa-v2 model)"),H$r=l(),v4=a("li"),A4e=a("strong"),J$r=o("distilbert"),Y$r=o(" \u2014 "),_Z=a("a"),K$r=o("TFDistilBertForMaskedLM"),Z$r=o(" (DistilBERT model)"),ekr=l(),F4=a("li"),L4e=a("strong"),okr=o("electra"),rkr=o(" \u2014 "),uZ=a("a"),tkr=o("TFElectraForMaskedLM"),akr=o(" (ELECTRA model)"),nkr=l(),T4=a("li"),y4e=a("strong"),skr=o("flaubert"),lkr=o(" \u2014 "),bZ=a("a"),ikr=o("TFFlaubertWithLMHeadModel"),dkr=o(" (FlauBERT model)"),ckr=l(),M4=a("li"),x4e=a("strong"),fkr=o("funnel"),mkr=o(" \u2014 "),vZ=a("a"),gkr=o("TFFunnelForMaskedLM"),hkr=o(" (Funnel Transformer model)"),pkr=l(),E4=a("li"),$4e=a("strong"),_kr=o("layoutlm"),ukr=o(" \u2014 "),FZ=a("a"),bkr=o("TFLayoutLMForMaskedLM"),vkr=o(" (LayoutLM model)"),Fkr=l(),C4=a("li"),k4e=a("strong"),Tkr=o("longformer"),Mkr=o(" \u2014 "),TZ=a("a"),Ekr=o("TFLongformerForMaskedLM"),Ckr=o(" (Longformer model)"),wkr=l(),w4=a("li"),S4e=a("strong"),Akr=o("mobilebert"),Lkr=o(" \u2014 "),MZ=a("a"),ykr=o("TFMobileBertForMaskedLM"),xkr=o(" (MobileBERT model)"),$kr=l(),A4=a("li"),R4e=a("strong"),kkr=o("mpnet"),Skr=o(" \u2014 "),EZ=a("a"),Rkr=o("TFMPNetForMaskedLM"),Pkr=o(" (MPNet model)"),Bkr=l(),L4=a("li"),P4e=a("strong"),Ikr=o("rembert"),Nkr=o(" \u2014 "),CZ=a("a"),qkr=o("TFRemBertForMaskedLM"),jkr=o(" (RemBERT model)"),Dkr=l(),y4=a("li"),B4e=a("strong"),Gkr=o("roberta"),Okr=o(" \u2014 "),wZ=a("a"),Vkr=o("TFRobertaForMaskedLM"),Xkr=o(" (RoBERTa model)"),zkr=l(),x4=a("li"),I4e=a("strong"),Wkr=o("roformer"),Qkr=o(" \u2014 "),AZ=a("a"),Ukr=o("TFRoFormerForMaskedLM"),Hkr=o(" (RoFormer model)"),Jkr=l(),$4=a("li"),N4e=a("strong"),Ykr=o("tapas"),Kkr=o(" \u2014 "),LZ=a("a"),Zkr=o("TFTapasForMaskedLM"),eSr=o(" (TAPAS model)"),oSr=l(),k4=a("li"),q4e=a("strong"),rSr=o("xlm"),tSr=o(" \u2014 "),yZ=a("a"),aSr=o("TFXLMWithLMHeadModel"),nSr=o(" (XLM model)"),sSr=l(),S4=a("li"),j4e=a("strong"),lSr=o("xlm-roberta"),iSr=o(" \u2014 "),xZ=a("a"),dSr=o("TFXLMRobertaForMaskedLM"),cSr=o(" (XLM-RoBERTa model)"),fSr=l(),F(R4.$$.fragment),zUe=l(),Gc=a("h2"),P4=a("a"),D4e=a("span"),F(k$.$$.fragment),mSr=l(),G4e=a("span"),gSr=o("TFAutoModelForSeq2SeqLM"),WUe=l(),cr=a("div"),F(S$.$$.fragment),hSr=l(),Oc=a("p"),pSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=a("a"),_Sr=o("from_pretrained()"),uSr=o(" class method or the "),kZ=a("a"),bSr=o("from_config()"),vSr=o(` class
method.`),FSr=l(),R$=a("p"),TSr=o("This class cannot be instantiated directly using "),O4e=a("code"),MSr=o("__init__()"),ESr=o(" (throws an error)."),CSr=l(),Xt=a("div"),F(P$.$$.fragment),wSr=l(),V4e=a("p"),ASr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LSr=l(),Vc=a("p"),ySr=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),xSr=o("not"),$Sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),kSr=o("from_pretrained()"),SSr=o(" to load the model weights."),RSr=l(),F(B4.$$.fragment),PSr=l(),jr=a("div"),F(B$.$$.fragment),BSr=l(),z4e=a("p"),ISr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NSr=l(),Mn=a("p"),qSr=o("The model class to instantiate is selected based on the "),W4e=a("code"),jSr=o("model_type"),DSr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(":"),zSr=l(),ye=a("ul"),I4=a("li"),H4e=a("strong"),WSr=o("bart"),QSr=o(" \u2014 "),RZ=a("a"),USr=o("TFBartForConditionalGeneration"),HSr=o(" (BART model)"),JSr=l(),N4=a("li"),J4e=a("strong"),YSr=o("blenderbot"),KSr=o(" \u2014 "),PZ=a("a"),ZSr=o("TFBlenderbotForConditionalGeneration"),eRr=o(" (Blenderbot model)"),oRr=l(),q4=a("li"),Y4e=a("strong"),rRr=o("blenderbot-small"),tRr=o(" \u2014 "),BZ=a("a"),aRr=o("TFBlenderbotSmallForConditionalGeneration"),nRr=o(" (BlenderbotSmall model)"),sRr=l(),j4=a("li"),K4e=a("strong"),lRr=o("encoder-decoder"),iRr=o(" \u2014 "),IZ=a("a"),dRr=o("TFEncoderDecoderModel"),cRr=o(" (Encoder decoder model)"),fRr=l(),D4=a("li"),Z4e=a("strong"),mRr=o("led"),gRr=o(" \u2014 "),NZ=a("a"),hRr=o("TFLEDForConditionalGeneration"),pRr=o(" (LED model)"),_Rr=l(),G4=a("li"),eCe=a("strong"),uRr=o("marian"),bRr=o(" \u2014 "),qZ=a("a"),vRr=o("TFMarianMTModel"),FRr=o(" (Marian model)"),TRr=l(),O4=a("li"),oCe=a("strong"),MRr=o("mbart"),ERr=o(" \u2014 "),jZ=a("a"),CRr=o("TFMBartForConditionalGeneration"),wRr=o(" (mBART model)"),ARr=l(),V4=a("li"),rCe=a("strong"),LRr=o("mt5"),yRr=o(" \u2014 "),DZ=a("a"),xRr=o("TFMT5ForConditionalGeneration"),$Rr=o(" (MT5 model)"),kRr=l(),X4=a("li"),tCe=a("strong"),SRr=o("pegasus"),RRr=o(" \u2014 "),GZ=a("a"),PRr=o("TFPegasusForConditionalGeneration"),BRr=o(" (Pegasus model)"),IRr=l(),z4=a("li"),aCe=a("strong"),NRr=o("t5"),qRr=o(" \u2014 "),OZ=a("a"),jRr=o("TFT5ForConditionalGeneration"),DRr=o(" (T5 model)"),GRr=l(),F(W4.$$.fragment),QUe=l(),Xc=a("h2"),Q4=a("a"),nCe=a("span"),F(I$.$$.fragment),ORr=l(),sCe=a("span"),VRr=o("TFAutoModelForSequenceClassification"),UUe=l(),fr=a("div"),F(N$.$$.fragment),XRr=l(),zc=a("p"),zRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=a("a"),WRr=o("from_pretrained()"),QRr=o(" class method or the "),XZ=a("a"),URr=o("from_config()"),HRr=o(` class
method.`),JRr=l(),q$=a("p"),YRr=o("This class cannot be instantiated directly using "),lCe=a("code"),KRr=o("__init__()"),ZRr=o(" (throws an error)."),ePr=l(),zt=a("div"),F(j$.$$.fragment),oPr=l(),iCe=a("p"),rPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tPr=l(),Wc=a("p"),aPr=o(`Note:
Loading a model from its configuration file does `),dCe=a("strong"),nPr=o("not"),sPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),lPr=o("from_pretrained()"),iPr=o(" to load the model weights."),dPr=l(),F(U4.$$.fragment),cPr=l(),Dr=a("div"),F(D$.$$.fragment),fPr=l(),cCe=a("p"),mPr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gPr=l(),En=a("p"),hPr=o("The model class to instantiate is selected based on the "),fCe=a("code"),pPr=o("model_type"),_Pr=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),uPr=o("pretrained_model_name_or_path"),bPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=a("code"),vPr=o("pretrained_model_name_or_path"),FPr=o(":"),TPr=l(),te=a("ul"),H4=a("li"),hCe=a("strong"),MPr=o("albert"),EPr=o(" \u2014 "),WZ=a("a"),CPr=o("TFAlbertForSequenceClassification"),wPr=o(" (ALBERT model)"),APr=l(),J4=a("li"),pCe=a("strong"),LPr=o("bert"),yPr=o(" \u2014 "),QZ=a("a"),xPr=o("TFBertForSequenceClassification"),$Pr=o(" (BERT model)"),kPr=l(),Y4=a("li"),_Ce=a("strong"),SPr=o("camembert"),RPr=o(" \u2014 "),UZ=a("a"),PPr=o("TFCamembertForSequenceClassification"),BPr=o(" (CamemBERT model)"),IPr=l(),K4=a("li"),uCe=a("strong"),NPr=o("convbert"),qPr=o(" \u2014 "),HZ=a("a"),jPr=o("TFConvBertForSequenceClassification"),DPr=o(" (ConvBERT model)"),GPr=l(),Z4=a("li"),bCe=a("strong"),OPr=o("ctrl"),VPr=o(" \u2014 "),JZ=a("a"),XPr=o("TFCTRLForSequenceClassification"),zPr=o(" (CTRL model)"),WPr=l(),eC=a("li"),vCe=a("strong"),QPr=o("deberta"),UPr=o(" \u2014 "),YZ=a("a"),HPr=o("TFDebertaForSequenceClassification"),JPr=o(" (DeBERTa model)"),YPr=l(),oC=a("li"),FCe=a("strong"),KPr=o("deberta-v2"),ZPr=o(" \u2014 "),KZ=a("a"),eBr=o("TFDebertaV2ForSequenceClassification"),oBr=o(" (DeBERTa-v2 model)"),rBr=l(),rC=a("li"),TCe=a("strong"),tBr=o("distilbert"),aBr=o(" \u2014 "),ZZ=a("a"),nBr=o("TFDistilBertForSequenceClassification"),sBr=o(" (DistilBERT model)"),lBr=l(),tC=a("li"),MCe=a("strong"),iBr=o("electra"),dBr=o(" \u2014 "),eee=a("a"),cBr=o("TFElectraForSequenceClassification"),fBr=o(" (ELECTRA model)"),mBr=l(),aC=a("li"),ECe=a("strong"),gBr=o("flaubert"),hBr=o(" \u2014 "),oee=a("a"),pBr=o("TFFlaubertForSequenceClassification"),_Br=o(" (FlauBERT model)"),uBr=l(),nC=a("li"),CCe=a("strong"),bBr=o("funnel"),vBr=o(" \u2014 "),ree=a("a"),FBr=o("TFFunnelForSequenceClassification"),TBr=o(" (Funnel Transformer model)"),MBr=l(),sC=a("li"),wCe=a("strong"),EBr=o("gpt2"),CBr=o(" \u2014 "),tee=a("a"),wBr=o("TFGPT2ForSequenceClassification"),ABr=o(" (OpenAI GPT-2 model)"),LBr=l(),lC=a("li"),ACe=a("strong"),yBr=o("gptj"),xBr=o(" \u2014 "),aee=a("a"),$Br=o("TFGPTJForSequenceClassification"),kBr=o(" (GPT-J model)"),SBr=l(),iC=a("li"),LCe=a("strong"),RBr=o("layoutlm"),PBr=o(" \u2014 "),nee=a("a"),BBr=o("TFLayoutLMForSequenceClassification"),IBr=o(" (LayoutLM model)"),NBr=l(),dC=a("li"),yCe=a("strong"),qBr=o("longformer"),jBr=o(" \u2014 "),see=a("a"),DBr=o("TFLongformerForSequenceClassification"),GBr=o(" (Longformer model)"),OBr=l(),cC=a("li"),xCe=a("strong"),VBr=o("mobilebert"),XBr=o(" \u2014 "),lee=a("a"),zBr=o("TFMobileBertForSequenceClassification"),WBr=o(" (MobileBERT model)"),QBr=l(),fC=a("li"),$Ce=a("strong"),UBr=o("mpnet"),HBr=o(" \u2014 "),iee=a("a"),JBr=o("TFMPNetForSequenceClassification"),YBr=o(" (MPNet model)"),KBr=l(),mC=a("li"),kCe=a("strong"),ZBr=o("openai-gpt"),eIr=o(" \u2014 "),dee=a("a"),oIr=o("TFOpenAIGPTForSequenceClassification"),rIr=o(" (OpenAI GPT model)"),tIr=l(),gC=a("li"),SCe=a("strong"),aIr=o("rembert"),nIr=o(" \u2014 "),cee=a("a"),sIr=o("TFRemBertForSequenceClassification"),lIr=o(" (RemBERT model)"),iIr=l(),hC=a("li"),RCe=a("strong"),dIr=o("roberta"),cIr=o(" \u2014 "),fee=a("a"),fIr=o("TFRobertaForSequenceClassification"),mIr=o(" (RoBERTa model)"),gIr=l(),pC=a("li"),PCe=a("strong"),hIr=o("roformer"),pIr=o(" \u2014 "),mee=a("a"),_Ir=o("TFRoFormerForSequenceClassification"),uIr=o(" (RoFormer model)"),bIr=l(),_C=a("li"),BCe=a("strong"),vIr=o("tapas"),FIr=o(" \u2014 "),gee=a("a"),TIr=o("TFTapasForSequenceClassification"),MIr=o(" (TAPAS model)"),EIr=l(),uC=a("li"),ICe=a("strong"),CIr=o("transfo-xl"),wIr=o(" \u2014 "),hee=a("a"),AIr=o("TFTransfoXLForSequenceClassification"),LIr=o(" (Transformer-XL model)"),yIr=l(),bC=a("li"),NCe=a("strong"),xIr=o("xlm"),$Ir=o(" \u2014 "),pee=a("a"),kIr=o("TFXLMForSequenceClassification"),SIr=o(" (XLM model)"),RIr=l(),vC=a("li"),qCe=a("strong"),PIr=o("xlm-roberta"),BIr=o(" \u2014 "),_ee=a("a"),IIr=o("TFXLMRobertaForSequenceClassification"),NIr=o(" (XLM-RoBERTa model)"),qIr=l(),FC=a("li"),jCe=a("strong"),jIr=o("xlnet"),DIr=o(" \u2014 "),uee=a("a"),GIr=o("TFXLNetForSequenceClassification"),OIr=o(" (XLNet model)"),VIr=l(),F(TC.$$.fragment),HUe=l(),Qc=a("h2"),MC=a("a"),DCe=a("span"),F(G$.$$.fragment),XIr=l(),GCe=a("span"),zIr=o("TFAutoModelForMultipleChoice"),JUe=l(),mr=a("div"),F(O$.$$.fragment),WIr=l(),Uc=a("p"),QIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bee=a("a"),UIr=o("from_pretrained()"),HIr=o(" class method or the "),vee=a("a"),JIr=o("from_config()"),YIr=o(` class
method.`),KIr=l(),V$=a("p"),ZIr=o("This class cannot be instantiated directly using "),OCe=a("code"),eNr=o("__init__()"),oNr=o(" (throws an error)."),rNr=l(),Wt=a("div"),F(X$.$$.fragment),tNr=l(),VCe=a("p"),aNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nNr=l(),Hc=a("p"),sNr=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),lNr=o("not"),iNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=a("a"),dNr=o("from_pretrained()"),cNr=o(" to load the model weights."),fNr=l(),F(EC.$$.fragment),mNr=l(),Gr=a("div"),F(z$.$$.fragment),gNr=l(),zCe=a("p"),hNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pNr=l(),Cn=a("p"),_Nr=o("The model class to instantiate is selected based on the "),WCe=a("code"),uNr=o("model_type"),bNr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),vNr=o("pretrained_model_name_or_path"),FNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UCe=a("code"),TNr=o("pretrained_model_name_or_path"),MNr=o(":"),ENr=l(),ve=a("ul"),CC=a("li"),HCe=a("strong"),CNr=o("albert"),wNr=o(" \u2014 "),Tee=a("a"),ANr=o("TFAlbertForMultipleChoice"),LNr=o(" (ALBERT model)"),yNr=l(),wC=a("li"),JCe=a("strong"),xNr=o("bert"),$Nr=o(" \u2014 "),Mee=a("a"),kNr=o("TFBertForMultipleChoice"),SNr=o(" (BERT model)"),RNr=l(),AC=a("li"),YCe=a("strong"),PNr=o("camembert"),BNr=o(" \u2014 "),Eee=a("a"),INr=o("TFCamembertForMultipleChoice"),NNr=o(" (CamemBERT model)"),qNr=l(),LC=a("li"),KCe=a("strong"),jNr=o("convbert"),DNr=o(" \u2014 "),Cee=a("a"),GNr=o("TFConvBertForMultipleChoice"),ONr=o(" (ConvBERT model)"),VNr=l(),yC=a("li"),ZCe=a("strong"),XNr=o("distilbert"),zNr=o(" \u2014 "),wee=a("a"),WNr=o("TFDistilBertForMultipleChoice"),QNr=o(" (DistilBERT model)"),UNr=l(),xC=a("li"),e3e=a("strong"),HNr=o("electra"),JNr=o(" \u2014 "),Aee=a("a"),YNr=o("TFElectraForMultipleChoice"),KNr=o(" (ELECTRA model)"),ZNr=l(),$C=a("li"),o3e=a("strong"),eqr=o("flaubert"),oqr=o(" \u2014 "),Lee=a("a"),rqr=o("TFFlaubertForMultipleChoice"),tqr=o(" (FlauBERT model)"),aqr=l(),kC=a("li"),r3e=a("strong"),nqr=o("funnel"),sqr=o(" \u2014 "),yee=a("a"),lqr=o("TFFunnelForMultipleChoice"),iqr=o(" (Funnel Transformer model)"),dqr=l(),SC=a("li"),t3e=a("strong"),cqr=o("longformer"),fqr=o(" \u2014 "),xee=a("a"),mqr=o("TFLongformerForMultipleChoice"),gqr=o(" (Longformer model)"),hqr=l(),RC=a("li"),a3e=a("strong"),pqr=o("mobilebert"),_qr=o(" \u2014 "),$ee=a("a"),uqr=o("TFMobileBertForMultipleChoice"),bqr=o(" (MobileBERT model)"),vqr=l(),PC=a("li"),n3e=a("strong"),Fqr=o("mpnet"),Tqr=o(" \u2014 "),kee=a("a"),Mqr=o("TFMPNetForMultipleChoice"),Eqr=o(" (MPNet model)"),Cqr=l(),BC=a("li"),s3e=a("strong"),wqr=o("rembert"),Aqr=o(" \u2014 "),See=a("a"),Lqr=o("TFRemBertForMultipleChoice"),yqr=o(" (RemBERT model)"),xqr=l(),IC=a("li"),l3e=a("strong"),$qr=o("roberta"),kqr=o(" \u2014 "),Ree=a("a"),Sqr=o("TFRobertaForMultipleChoice"),Rqr=o(" (RoBERTa model)"),Pqr=l(),NC=a("li"),i3e=a("strong"),Bqr=o("roformer"),Iqr=o(" \u2014 "),Pee=a("a"),Nqr=o("TFRoFormerForMultipleChoice"),qqr=o(" (RoFormer model)"),jqr=l(),qC=a("li"),d3e=a("strong"),Dqr=o("xlm"),Gqr=o(" \u2014 "),Bee=a("a"),Oqr=o("TFXLMForMultipleChoice"),Vqr=o(" (XLM model)"),Xqr=l(),jC=a("li"),c3e=a("strong"),zqr=o("xlm-roberta"),Wqr=o(" \u2014 "),Iee=a("a"),Qqr=o("TFXLMRobertaForMultipleChoice"),Uqr=o(" (XLM-RoBERTa model)"),Hqr=l(),DC=a("li"),f3e=a("strong"),Jqr=o("xlnet"),Yqr=o(" \u2014 "),Nee=a("a"),Kqr=o("TFXLNetForMultipleChoice"),Zqr=o(" (XLNet model)"),ejr=l(),F(GC.$$.fragment),YUe=l(),Jc=a("h2"),OC=a("a"),m3e=a("span"),F(W$.$$.fragment),ojr=l(),g3e=a("span"),rjr=o("TFAutoModelForNextSentencePrediction"),KUe=l(),gr=a("div"),F(Q$.$$.fragment),tjr=l(),Yc=a("p"),ajr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qee=a("a"),njr=o("from_pretrained()"),sjr=o(" class method or the "),jee=a("a"),ljr=o("from_config()"),ijr=o(` class
method.`),djr=l(),U$=a("p"),cjr=o("This class cannot be instantiated directly using "),h3e=a("code"),fjr=o("__init__()"),mjr=o(" (throws an error)."),gjr=l(),Qt=a("div"),F(H$.$$.fragment),hjr=l(),p3e=a("p"),pjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_jr=l(),Kc=a("p"),ujr=o(`Note:
Loading a model from its configuration file does `),_3e=a("strong"),bjr=o("not"),vjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" to load the model weights."),Mjr=l(),F(VC.$$.fragment),Ejr=l(),Or=a("div"),F(J$.$$.fragment),Cjr=l(),u3e=a("p"),wjr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ajr=l(),wn=a("p"),Ljr=o("The model class to instantiate is selected based on the "),b3e=a("code"),yjr=o("model_type"),xjr=o(` property of the config object (either
passed as an argument or loaded from `),v3e=a("code"),$jr=o("pretrained_model_name_or_path"),kjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(":"),Pjr=l(),Y$=a("ul"),XC=a("li"),T3e=a("strong"),Bjr=o("bert"),Ijr=o(" \u2014 "),Gee=a("a"),Njr=o("TFBertForNextSentencePrediction"),qjr=o(" (BERT model)"),jjr=l(),zC=a("li"),M3e=a("strong"),Djr=o("mobilebert"),Gjr=o(" \u2014 "),Oee=a("a"),Ojr=o("TFMobileBertForNextSentencePrediction"),Vjr=o(" (MobileBERT model)"),Xjr=l(),F(WC.$$.fragment),ZUe=l(),Zc=a("h2"),QC=a("a"),E3e=a("span"),F(K$.$$.fragment),zjr=l(),C3e=a("span"),Wjr=o("TFAutoModelForTableQuestionAnswering"),eHe=l(),hr=a("div"),F(Z$.$$.fragment),Qjr=l(),ef=a("p"),Ujr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vee=a("a"),Hjr=o("from_pretrained()"),Jjr=o(" class method or the "),Xee=a("a"),Yjr=o("from_config()"),Kjr=o(` class
method.`),Zjr=l(),ek=a("p"),eDr=o("This class cannot be instantiated directly using "),w3e=a("code"),oDr=o("__init__()"),rDr=o(" (throws an error)."),tDr=l(),Ut=a("div"),F(ok.$$.fragment),aDr=l(),A3e=a("p"),nDr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sDr=l(),of=a("p"),lDr=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),iDr=o("not"),dDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("a"),cDr=o("from_pretrained()"),fDr=o(" to load the model weights."),mDr=l(),F(UC.$$.fragment),gDr=l(),Vr=a("div"),F(rk.$$.fragment),hDr=l(),y3e=a("p"),pDr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Dr=l(),An=a("p"),uDr=o("The model class to instantiate is selected based on the "),x3e=a("code"),bDr=o("model_type"),vDr=o(` property of the config object (either
passed as an argument or loaded from `),$3e=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=a("code"),MDr=o("pretrained_model_name_or_path"),EDr=o(":"),CDr=l(),S3e=a("ul"),HC=a("li"),R3e=a("strong"),wDr=o("tapas"),ADr=o(" \u2014 "),Wee=a("a"),LDr=o("TFTapasForQuestionAnswering"),yDr=o(" (TAPAS model)"),xDr=l(),F(JC.$$.fragment),oHe=l(),rf=a("h2"),YC=a("a"),P3e=a("span"),F(tk.$$.fragment),$Dr=l(),B3e=a("span"),kDr=o("TFAutoModelForTokenClassification"),rHe=l(),pr=a("div"),F(ak.$$.fragment),SDr=l(),tf=a("p"),RDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qee=a("a"),PDr=o("from_pretrained()"),BDr=o(" class method or the "),Uee=a("a"),IDr=o("from_config()"),NDr=o(` class
method.`),qDr=l(),nk=a("p"),jDr=o("This class cannot be instantiated directly using "),I3e=a("code"),DDr=o("__init__()"),GDr=o(" (throws an error)."),ODr=l(),Ht=a("div"),F(sk.$$.fragment),VDr=l(),N3e=a("p"),XDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zDr=l(),af=a("p"),WDr=o(`Note:
Loading a model from its configuration file does `),q3e=a("strong"),QDr=o("not"),UDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=a("a"),HDr=o("from_pretrained()"),JDr=o(" to load the model weights."),YDr=l(),F(KC.$$.fragment),KDr=l(),Xr=a("div"),F(lk.$$.fragment),ZDr=l(),j3e=a("p"),eGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oGr=l(),Ln=a("p"),rGr=o("The model class to instantiate is selected based on the "),D3e=a("code"),tGr=o("model_type"),aGr=o(` property of the config object (either
passed as an argument or loaded from `),G3e=a("code"),nGr=o("pretrained_model_name_or_path"),sGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=a("code"),lGr=o("pretrained_model_name_or_path"),iGr=o(":"),dGr=l(),de=a("ul"),ZC=a("li"),V3e=a("strong"),cGr=o("albert"),fGr=o(" \u2014 "),Jee=a("a"),mGr=o("TFAlbertForTokenClassification"),gGr=o(" (ALBERT model)"),hGr=l(),e3=a("li"),X3e=a("strong"),pGr=o("bert"),_Gr=o(" \u2014 "),Yee=a("a"),uGr=o("TFBertForTokenClassification"),bGr=o(" (BERT model)"),vGr=l(),o3=a("li"),z3e=a("strong"),FGr=o("camembert"),TGr=o(" \u2014 "),Kee=a("a"),MGr=o("TFCamembertForTokenClassification"),EGr=o(" (CamemBERT model)"),CGr=l(),r3=a("li"),W3e=a("strong"),wGr=o("convbert"),AGr=o(" \u2014 "),Zee=a("a"),LGr=o("TFConvBertForTokenClassification"),yGr=o(" (ConvBERT model)"),xGr=l(),t3=a("li"),Q3e=a("strong"),$Gr=o("deberta"),kGr=o(" \u2014 "),eoe=a("a"),SGr=o("TFDebertaForTokenClassification"),RGr=o(" (DeBERTa model)"),PGr=l(),a3=a("li"),U3e=a("strong"),BGr=o("deberta-v2"),IGr=o(" \u2014 "),ooe=a("a"),NGr=o("TFDebertaV2ForTokenClassification"),qGr=o(" (DeBERTa-v2 model)"),jGr=l(),n3=a("li"),H3e=a("strong"),DGr=o("distilbert"),GGr=o(" \u2014 "),roe=a("a"),OGr=o("TFDistilBertForTokenClassification"),VGr=o(" (DistilBERT model)"),XGr=l(),s3=a("li"),J3e=a("strong"),zGr=o("electra"),WGr=o(" \u2014 "),toe=a("a"),QGr=o("TFElectraForTokenClassification"),UGr=o(" (ELECTRA model)"),HGr=l(),l3=a("li"),Y3e=a("strong"),JGr=o("flaubert"),YGr=o(" \u2014 "),aoe=a("a"),KGr=o("TFFlaubertForTokenClassification"),ZGr=o(" (FlauBERT model)"),eOr=l(),i3=a("li"),K3e=a("strong"),oOr=o("funnel"),rOr=o(" \u2014 "),noe=a("a"),tOr=o("TFFunnelForTokenClassification"),aOr=o(" (Funnel Transformer model)"),nOr=l(),d3=a("li"),Z3e=a("strong"),sOr=o("layoutlm"),lOr=o(" \u2014 "),soe=a("a"),iOr=o("TFLayoutLMForTokenClassification"),dOr=o(" (LayoutLM model)"),cOr=l(),c3=a("li"),e5e=a("strong"),fOr=o("longformer"),mOr=o(" \u2014 "),loe=a("a"),gOr=o("TFLongformerForTokenClassification"),hOr=o(" (Longformer model)"),pOr=l(),f3=a("li"),o5e=a("strong"),_Or=o("mobilebert"),uOr=o(" \u2014 "),ioe=a("a"),bOr=o("TFMobileBertForTokenClassification"),vOr=o(" (MobileBERT model)"),FOr=l(),m3=a("li"),r5e=a("strong"),TOr=o("mpnet"),MOr=o(" \u2014 "),doe=a("a"),EOr=o("TFMPNetForTokenClassification"),COr=o(" (MPNet model)"),wOr=l(),g3=a("li"),t5e=a("strong"),AOr=o("rembert"),LOr=o(" \u2014 "),coe=a("a"),yOr=o("TFRemBertForTokenClassification"),xOr=o(" (RemBERT model)"),$Or=l(),h3=a("li"),a5e=a("strong"),kOr=o("roberta"),SOr=o(" \u2014 "),foe=a("a"),ROr=o("TFRobertaForTokenClassification"),POr=o(" (RoBERTa model)"),BOr=l(),p3=a("li"),n5e=a("strong"),IOr=o("roformer"),NOr=o(" \u2014 "),moe=a("a"),qOr=o("TFRoFormerForTokenClassification"),jOr=o(" (RoFormer model)"),DOr=l(),_3=a("li"),s5e=a("strong"),GOr=o("xlm"),OOr=o(" \u2014 "),goe=a("a"),VOr=o("TFXLMForTokenClassification"),XOr=o(" (XLM model)"),zOr=l(),u3=a("li"),l5e=a("strong"),WOr=o("xlm-roberta"),QOr=o(" \u2014 "),hoe=a("a"),UOr=o("TFXLMRobertaForTokenClassification"),HOr=o(" (XLM-RoBERTa model)"),JOr=l(),b3=a("li"),i5e=a("strong"),YOr=o("xlnet"),KOr=o(" \u2014 "),poe=a("a"),ZOr=o("TFXLNetForTokenClassification"),eVr=o(" (XLNet model)"),oVr=l(),F(v3.$$.fragment),tHe=l(),nf=a("h2"),F3=a("a"),d5e=a("span"),F(ik.$$.fragment),rVr=l(),c5e=a("span"),tVr=o("TFAutoModelForQuestionAnswering"),aHe=l(),_r=a("div"),F(dk.$$.fragment),aVr=l(),sf=a("p"),nVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_oe=a("a"),sVr=o("from_pretrained()"),lVr=o(" class method or the "),uoe=a("a"),iVr=o("from_config()"),dVr=o(` class
method.`),cVr=l(),ck=a("p"),fVr=o("This class cannot be instantiated directly using "),f5e=a("code"),mVr=o("__init__()"),gVr=o(" (throws an error)."),hVr=l(),Jt=a("div"),F(fk.$$.fragment),pVr=l(),m5e=a("p"),_Vr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uVr=l(),lf=a("p"),bVr=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),vVr=o("not"),FVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),TVr=o("from_pretrained()"),MVr=o(" to load the model weights."),EVr=l(),F(T3.$$.fragment),CVr=l(),zr=a("div"),F(mk.$$.fragment),wVr=l(),h5e=a("p"),AVr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LVr=l(),yn=a("p"),yVr=o("The model class to instantiate is selected based on the "),p5e=a("code"),xVr=o("model_type"),$Vr=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),kVr=o("pretrained_model_name_or_path"),SVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),RVr=o("pretrained_model_name_or_path"),PVr=o(":"),BVr=l(),ce=a("ul"),M3=a("li"),b5e=a("strong"),IVr=o("albert"),NVr=o(" \u2014 "),voe=a("a"),qVr=o("TFAlbertForQuestionAnswering"),jVr=o(" (ALBERT model)"),DVr=l(),E3=a("li"),v5e=a("strong"),GVr=o("bert"),OVr=o(" \u2014 "),Foe=a("a"),VVr=o("TFBertForQuestionAnswering"),XVr=o(" (BERT model)"),zVr=l(),C3=a("li"),F5e=a("strong"),WVr=o("camembert"),QVr=o(" \u2014 "),Toe=a("a"),UVr=o("TFCamembertForQuestionAnswering"),HVr=o(" (CamemBERT model)"),JVr=l(),w3=a("li"),T5e=a("strong"),YVr=o("convbert"),KVr=o(" \u2014 "),Moe=a("a"),ZVr=o("TFConvBertForQuestionAnswering"),eXr=o(" (ConvBERT model)"),oXr=l(),A3=a("li"),M5e=a("strong"),rXr=o("deberta"),tXr=o(" \u2014 "),Eoe=a("a"),aXr=o("TFDebertaForQuestionAnswering"),nXr=o(" (DeBERTa model)"),sXr=l(),L3=a("li"),E5e=a("strong"),lXr=o("deberta-v2"),iXr=o(" \u2014 "),Coe=a("a"),dXr=o("TFDebertaV2ForQuestionAnswering"),cXr=o(" (DeBERTa-v2 model)"),fXr=l(),y3=a("li"),C5e=a("strong"),mXr=o("distilbert"),gXr=o(" \u2014 "),woe=a("a"),hXr=o("TFDistilBertForQuestionAnswering"),pXr=o(" (DistilBERT model)"),_Xr=l(),x3=a("li"),w5e=a("strong"),uXr=o("electra"),bXr=o(" \u2014 "),Aoe=a("a"),vXr=o("TFElectraForQuestionAnswering"),FXr=o(" (ELECTRA model)"),TXr=l(),$3=a("li"),A5e=a("strong"),MXr=o("flaubert"),EXr=o(" \u2014 "),Loe=a("a"),CXr=o("TFFlaubertForQuestionAnsweringSimple"),wXr=o(" (FlauBERT model)"),AXr=l(),k3=a("li"),L5e=a("strong"),LXr=o("funnel"),yXr=o(" \u2014 "),yoe=a("a"),xXr=o("TFFunnelForQuestionAnswering"),$Xr=o(" (Funnel Transformer model)"),kXr=l(),S3=a("li"),y5e=a("strong"),SXr=o("gptj"),RXr=o(" \u2014 "),xoe=a("a"),PXr=o("TFGPTJForQuestionAnswering"),BXr=o(" (GPT-J model)"),IXr=l(),R3=a("li"),x5e=a("strong"),NXr=o("longformer"),qXr=o(" \u2014 "),$oe=a("a"),jXr=o("TFLongformerForQuestionAnswering"),DXr=o(" (Longformer model)"),GXr=l(),P3=a("li"),$5e=a("strong"),OXr=o("mobilebert"),VXr=o(" \u2014 "),koe=a("a"),XXr=o("TFMobileBertForQuestionAnswering"),zXr=o(" (MobileBERT model)"),WXr=l(),B3=a("li"),k5e=a("strong"),QXr=o("mpnet"),UXr=o(" \u2014 "),Soe=a("a"),HXr=o("TFMPNetForQuestionAnswering"),JXr=o(" (MPNet model)"),YXr=l(),I3=a("li"),S5e=a("strong"),KXr=o("rembert"),ZXr=o(" \u2014 "),Roe=a("a"),ezr=o("TFRemBertForQuestionAnswering"),ozr=o(" (RemBERT model)"),rzr=l(),N3=a("li"),R5e=a("strong"),tzr=o("roberta"),azr=o(" \u2014 "),Poe=a("a"),nzr=o("TFRobertaForQuestionAnswering"),szr=o(" (RoBERTa model)"),lzr=l(),q3=a("li"),P5e=a("strong"),izr=o("roformer"),dzr=o(" \u2014 "),Boe=a("a"),czr=o("TFRoFormerForQuestionAnswering"),fzr=o(" (RoFormer model)"),mzr=l(),j3=a("li"),B5e=a("strong"),gzr=o("xlm"),hzr=o(" \u2014 "),Ioe=a("a"),pzr=o("TFXLMForQuestionAnsweringSimple"),_zr=o(" (XLM model)"),uzr=l(),D3=a("li"),I5e=a("strong"),bzr=o("xlm-roberta"),vzr=o(" \u2014 "),Noe=a("a"),Fzr=o("TFXLMRobertaForQuestionAnswering"),Tzr=o(" (XLM-RoBERTa model)"),Mzr=l(),G3=a("li"),N5e=a("strong"),Ezr=o("xlnet"),Czr=o(" \u2014 "),qoe=a("a"),wzr=o("TFXLNetForQuestionAnsweringSimple"),Azr=o(" (XLNet model)"),Lzr=l(),F(O3.$$.fragment),nHe=l(),df=a("h2"),V3=a("a"),q5e=a("span"),F(gk.$$.fragment),yzr=l(),j5e=a("span"),xzr=o("TFAutoModelForVision2Seq"),sHe=l(),ur=a("div"),F(hk.$$.fragment),$zr=l(),cf=a("p"),kzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),joe=a("a"),Szr=o("from_pretrained()"),Rzr=o(" class method or the "),Doe=a("a"),Pzr=o("from_config()"),Bzr=o(` class
method.`),Izr=l(),pk=a("p"),Nzr=o("This class cannot be instantiated directly using "),D5e=a("code"),qzr=o("__init__()"),jzr=o(" (throws an error)."),Dzr=l(),Yt=a("div"),F(_k.$$.fragment),Gzr=l(),G5e=a("p"),Ozr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vzr=l(),ff=a("p"),Xzr=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),zzr=o("not"),Wzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=a("a"),Qzr=o("from_pretrained()"),Uzr=o(" to load the model weights."),Hzr=l(),F(X3.$$.fragment),Jzr=l(),Wr=a("div"),F(uk.$$.fragment),Yzr=l(),V5e=a("p"),Kzr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zzr=l(),xn=a("p"),eWr=o("The model class to instantiate is selected based on the "),X5e=a("code"),oWr=o("model_type"),rWr=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),tWr=o("pretrained_model_name_or_path"),aWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),nWr=o("pretrained_model_name_or_path"),sWr=o(":"),lWr=l(),Q5e=a("ul"),z3=a("li"),U5e=a("strong"),iWr=o("vision-encoder-decoder"),dWr=o(" \u2014 "),Ooe=a("a"),cWr=o("TFVisionEncoderDecoderModel"),fWr=o(" (Vision Encoder decoder model)"),mWr=l(),F(W3.$$.fragment),lHe=l(),mf=a("h2"),Q3=a("a"),H5e=a("span"),F(bk.$$.fragment),gWr=l(),J5e=a("span"),hWr=o("TFAutoModelForSpeechSeq2Seq"),iHe=l(),br=a("div"),F(vk.$$.fragment),pWr=l(),gf=a("p"),_Wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Voe=a("a"),uWr=o("from_pretrained()"),bWr=o(" class method or the "),Xoe=a("a"),vWr=o("from_config()"),FWr=o(` class
method.`),TWr=l(),Fk=a("p"),MWr=o("This class cannot be instantiated directly using "),Y5e=a("code"),EWr=o("__init__()"),CWr=o(" (throws an error)."),wWr=l(),Kt=a("div"),F(Tk.$$.fragment),AWr=l(),K5e=a("p"),LWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yWr=l(),hf=a("p"),xWr=o(`Note:
Loading a model from its configuration file does `),Z5e=a("strong"),$Wr=o("not"),kWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=a("a"),SWr=o("from_pretrained()"),RWr=o(" to load the model weights."),PWr=l(),F(U3.$$.fragment),BWr=l(),Qr=a("div"),F(Mk.$$.fragment),IWr=l(),ewe=a("p"),NWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qWr=l(),$n=a("p"),jWr=o("The model class to instantiate is selected based on the "),owe=a("code"),DWr=o("model_type"),GWr=o(` property of the config object (either
passed as an argument or loaded from `),rwe=a("code"),OWr=o("pretrained_model_name_or_path"),VWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=a("code"),XWr=o("pretrained_model_name_or_path"),zWr=o(":"),WWr=l(),awe=a("ul"),H3=a("li"),nwe=a("strong"),QWr=o("speech_to_text"),UWr=o(" \u2014 "),Woe=a("a"),HWr=o("TFSpeech2TextForConditionalGeneration"),JWr=o(" (Speech2Text model)"),YWr=l(),F(J3.$$.fragment),dHe=l(),pf=a("h2"),Y3=a("a"),swe=a("span"),F(Ek.$$.fragment),KWr=l(),lwe=a("span"),ZWr=o("FlaxAutoModel"),cHe=l(),vr=a("div"),F(Ck.$$.fragment),eQr=l(),_f=a("p"),oQr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Qoe=a("a"),rQr=o("from_pretrained()"),tQr=o(" class method or the "),Uoe=a("a"),aQr=o("from_config()"),nQr=o(` class
method.`),sQr=l(),wk=a("p"),lQr=o("This class cannot be instantiated directly using "),iwe=a("code"),iQr=o("__init__()"),dQr=o(" (throws an error)."),cQr=l(),Zt=a("div"),F(Ak.$$.fragment),fQr=l(),dwe=a("p"),mQr=o("Instantiates one of the base model classes of the library from a configuration."),gQr=l(),uf=a("p"),hQr=o(`Note:
Loading a model from its configuration file does `),cwe=a("strong"),pQr=o("not"),_Qr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=a("a"),uQr=o("from_pretrained()"),bQr=o(" to load the model weights."),vQr=l(),F(K3.$$.fragment),FQr=l(),Ur=a("div"),F(Lk.$$.fragment),TQr=l(),fwe=a("p"),MQr=o("Instantiate one of the base model classes of the library from a pretrained model."),EQr=l(),kn=a("p"),CQr=o("The model class to instantiate is selected based on the "),mwe=a("code"),wQr=o("model_type"),AQr=o(` property of the config object (either
passed as an argument or loaded from `),gwe=a("code"),LQr=o("pretrained_model_name_or_path"),yQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=a("code"),xQr=o("pretrained_model_name_or_path"),$Qr=o(":"),kQr=l(),re=a("ul"),Z3=a("li"),pwe=a("strong"),SQr=o("albert"),RQr=o(" \u2014 "),Joe=a("a"),PQr=o("FlaxAlbertModel"),BQr=o(" (ALBERT model)"),IQr=l(),e5=a("li"),_we=a("strong"),NQr=o("bart"),qQr=o(" \u2014 "),Yoe=a("a"),jQr=o("FlaxBartModel"),DQr=o(" (BART model)"),GQr=l(),o5=a("li"),uwe=a("strong"),OQr=o("beit"),VQr=o(" \u2014 "),Koe=a("a"),XQr=o("FlaxBeitModel"),zQr=o(" (BEiT model)"),WQr=l(),r5=a("li"),bwe=a("strong"),QQr=o("bert"),UQr=o(" \u2014 "),Zoe=a("a"),HQr=o("FlaxBertModel"),JQr=o(" (BERT model)"),YQr=l(),t5=a("li"),vwe=a("strong"),KQr=o("big_bird"),ZQr=o(" \u2014 "),ere=a("a"),eUr=o("FlaxBigBirdModel"),oUr=o(" (BigBird model)"),rUr=l(),a5=a("li"),Fwe=a("strong"),tUr=o("blenderbot"),aUr=o(" \u2014 "),ore=a("a"),nUr=o("FlaxBlenderbotModel"),sUr=o(" (Blenderbot model)"),lUr=l(),n5=a("li"),Twe=a("strong"),iUr=o("blenderbot-small"),dUr=o(" \u2014 "),rre=a("a"),cUr=o("FlaxBlenderbotSmallModel"),fUr=o(" (BlenderbotSmall model)"),mUr=l(),s5=a("li"),Mwe=a("strong"),gUr=o("clip"),hUr=o(" \u2014 "),tre=a("a"),pUr=o("FlaxCLIPModel"),_Ur=o(" (CLIP model)"),uUr=l(),l5=a("li"),Ewe=a("strong"),bUr=o("distilbert"),vUr=o(" \u2014 "),are=a("a"),FUr=o("FlaxDistilBertModel"),TUr=o(" (DistilBERT model)"),MUr=l(),i5=a("li"),Cwe=a("strong"),EUr=o("electra"),CUr=o(" \u2014 "),nre=a("a"),wUr=o("FlaxElectraModel"),AUr=o(" (ELECTRA model)"),LUr=l(),d5=a("li"),wwe=a("strong"),yUr=o("gpt2"),xUr=o(" \u2014 "),sre=a("a"),$Ur=o("FlaxGPT2Model"),kUr=o(" (OpenAI GPT-2 model)"),SUr=l(),c5=a("li"),Awe=a("strong"),RUr=o("gpt_neo"),PUr=o(" \u2014 "),lre=a("a"),BUr=o("FlaxGPTNeoModel"),IUr=o(" (GPT Neo model)"),NUr=l(),f5=a("li"),Lwe=a("strong"),qUr=o("gptj"),jUr=o(" \u2014 "),ire=a("a"),DUr=o("FlaxGPTJModel"),GUr=o(" (GPT-J model)"),OUr=l(),m5=a("li"),ywe=a("strong"),VUr=o("longt5"),XUr=o(" \u2014 "),dre=a("a"),zUr=o("FlaxLongT5Model"),WUr=o(" (LongT5 model)"),QUr=l(),g5=a("li"),xwe=a("strong"),UUr=o("marian"),HUr=o(" \u2014 "),cre=a("a"),JUr=o("FlaxMarianModel"),YUr=o(" (Marian model)"),KUr=l(),h5=a("li"),$we=a("strong"),ZUr=o("mbart"),eHr=o(" \u2014 "),fre=a("a"),oHr=o("FlaxMBartModel"),rHr=o(" (mBART model)"),tHr=l(),p5=a("li"),kwe=a("strong"),aHr=o("mt5"),nHr=o(" \u2014 "),mre=a("a"),sHr=o("FlaxMT5Model"),lHr=o(" (MT5 model)"),iHr=l(),_5=a("li"),Swe=a("strong"),dHr=o("opt"),cHr=o(" \u2014 "),gre=a("a"),fHr=o("FlaxOPTModel"),mHr=o(" (OPT model)"),gHr=l(),u5=a("li"),Rwe=a("strong"),hHr=o("pegasus"),pHr=o(" \u2014 "),hre=a("a"),_Hr=o("FlaxPegasusModel"),uHr=o(" (Pegasus model)"),bHr=l(),b5=a("li"),Pwe=a("strong"),vHr=o("roberta"),FHr=o(" \u2014 "),pre=a("a"),THr=o("FlaxRobertaModel"),MHr=o(" (RoBERTa model)"),EHr=l(),v5=a("li"),Bwe=a("strong"),CHr=o("roformer"),wHr=o(" \u2014 "),_re=a("a"),AHr=o("FlaxRoFormerModel"),LHr=o(" (RoFormer model)"),yHr=l(),F5=a("li"),Iwe=a("strong"),xHr=o("t5"),$Hr=o(" \u2014 "),ure=a("a"),kHr=o("FlaxT5Model"),SHr=o(" (T5 model)"),RHr=l(),T5=a("li"),Nwe=a("strong"),PHr=o("vision-text-dual-encoder"),BHr=o(" \u2014 "),bre=a("a"),IHr=o("FlaxVisionTextDualEncoderModel"),NHr=o(" (VisionTextDualEncoder model)"),qHr=l(),M5=a("li"),qwe=a("strong"),jHr=o("vit"),DHr=o(" \u2014 "),vre=a("a"),GHr=o("FlaxViTModel"),OHr=o(" (ViT model)"),VHr=l(),E5=a("li"),jwe=a("strong"),XHr=o("wav2vec2"),zHr=o(" \u2014 "),Fre=a("a"),WHr=o("FlaxWav2Vec2Model"),QHr=o(" (Wav2Vec2 model)"),UHr=l(),C5=a("li"),Dwe=a("strong"),HHr=o("xglm"),JHr=o(" \u2014 "),Tre=a("a"),YHr=o("FlaxXGLMModel"),KHr=o(" (XGLM model)"),ZHr=l(),w5=a("li"),Gwe=a("strong"),eJr=o("xlm-roberta"),oJr=o(" \u2014 "),Mre=a("a"),rJr=o("FlaxXLMRobertaModel"),tJr=o(" (XLM-RoBERTa model)"),aJr=l(),F(A5.$$.fragment),fHe=l(),bf=a("h2"),L5=a("a"),Owe=a("span"),F(yk.$$.fragment),nJr=l(),Vwe=a("span"),sJr=o("FlaxAutoModelForCausalLM"),mHe=l(),Fr=a("div"),F(xk.$$.fragment),lJr=l(),vf=a("p"),iJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ere=a("a"),dJr=o("from_pretrained()"),cJr=o(" class method or the "),Cre=a("a"),fJr=o("from_config()"),mJr=o(` class
method.`),gJr=l(),$k=a("p"),hJr=o("This class cannot be instantiated directly using "),Xwe=a("code"),pJr=o("__init__()"),_Jr=o(" (throws an error)."),uJr=l(),ea=a("div"),F(kk.$$.fragment),bJr=l(),zwe=a("p"),vJr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FJr=l(),Ff=a("p"),TJr=o(`Note:
Loading a model from its configuration file does `),Wwe=a("strong"),MJr=o("not"),EJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=a("a"),CJr=o("from_pretrained()"),wJr=o(" to load the model weights."),AJr=l(),F(y5.$$.fragment),LJr=l(),Hr=a("div"),F(Sk.$$.fragment),yJr=l(),Qwe=a("p"),xJr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Jr=l(),Sn=a("p"),kJr=o("The model class to instantiate is selected based on the "),Uwe=a("code"),SJr=o("model_type"),RJr=o(` property of the config object (either
passed as an argument or loaded from `),Hwe=a("code"),PJr=o("pretrained_model_name_or_path"),BJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=a("code"),IJr=o("pretrained_model_name_or_path"),NJr=o(":"),qJr=l(),xe=a("ul"),x5=a("li"),Ywe=a("strong"),jJr=o("bart"),DJr=o(" \u2014 "),Are=a("a"),GJr=o("FlaxBartForCausalLM"),OJr=o(" (BART model)"),VJr=l(),$5=a("li"),Kwe=a("strong"),XJr=o("bert"),zJr=o(" \u2014 "),Lre=a("a"),WJr=o("FlaxBertForCausalLM"),QJr=o(" (BERT model)"),UJr=l(),k5=a("li"),Zwe=a("strong"),HJr=o("big_bird"),JJr=o(" \u2014 "),yre=a("a"),YJr=o("FlaxBigBirdForCausalLM"),KJr=o(" (BigBird model)"),ZJr=l(),S5=a("li"),eAe=a("strong"),eYr=o("electra"),oYr=o(" \u2014 "),xre=a("a"),rYr=o("FlaxElectraForCausalLM"),tYr=o(" (ELECTRA model)"),aYr=l(),R5=a("li"),oAe=a("strong"),nYr=o("gpt2"),sYr=o(" \u2014 "),$re=a("a"),lYr=o("FlaxGPT2LMHeadModel"),iYr=o(" (OpenAI GPT-2 model)"),dYr=l(),P5=a("li"),rAe=a("strong"),cYr=o("gpt_neo"),fYr=o(" \u2014 "),kre=a("a"),mYr=o("FlaxGPTNeoForCausalLM"),gYr=o(" (GPT Neo model)"),hYr=l(),B5=a("li"),tAe=a("strong"),pYr=o("gptj"),_Yr=o(" \u2014 "),Sre=a("a"),uYr=o("FlaxGPTJForCausalLM"),bYr=o(" (GPT-J model)"),vYr=l(),I5=a("li"),aAe=a("strong"),FYr=o("opt"),TYr=o(" \u2014 "),Rre=a("a"),MYr=o("FlaxOPTForCausalLM"),EYr=o(" (OPT model)"),CYr=l(),N5=a("li"),nAe=a("strong"),wYr=o("roberta"),AYr=o(" \u2014 "),Pre=a("a"),LYr=o("FlaxRobertaForCausalLM"),yYr=o(" (RoBERTa model)"),xYr=l(),q5=a("li"),sAe=a("strong"),$Yr=o("xglm"),kYr=o(" \u2014 "),Bre=a("a"),SYr=o("FlaxXGLMForCausalLM"),RYr=o(" (XGLM model)"),PYr=l(),F(j5.$$.fragment),gHe=l(),Tf=a("h2"),D5=a("a"),lAe=a("span"),F(Rk.$$.fragment),BYr=l(),iAe=a("span"),IYr=o("FlaxAutoModelForPreTraining"),hHe=l(),Tr=a("div"),F(Pk.$$.fragment),NYr=l(),Mf=a("p"),qYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ire=a("a"),jYr=o("from_pretrained()"),DYr=o(" class method or the "),Nre=a("a"),GYr=o("from_config()"),OYr=o(` class
method.`),VYr=l(),Bk=a("p"),XYr=o("This class cannot be instantiated directly using "),dAe=a("code"),zYr=o("__init__()"),WYr=o(" (throws an error)."),QYr=l(),oa=a("div"),F(Ik.$$.fragment),UYr=l(),cAe=a("p"),HYr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JYr=l(),Ef=a("p"),YYr=o(`Note:
Loading a model from its configuration file does `),fAe=a("strong"),KYr=o("not"),ZYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=a("a"),eKr=o("from_pretrained()"),oKr=o(" to load the model weights."),rKr=l(),F(G5.$$.fragment),tKr=l(),Jr=a("div"),F(Nk.$$.fragment),aKr=l(),mAe=a("p"),nKr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sKr=l(),Rn=a("p"),lKr=o("The model class to instantiate is selected based on the "),gAe=a("code"),iKr=o("model_type"),dKr=o(` property of the config object (either
passed as an argument or loaded from `),hAe=a("code"),cKr=o("pretrained_model_name_or_path"),fKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pAe=a("code"),mKr=o("pretrained_model_name_or_path"),gKr=o(":"),hKr=l(),Ee=a("ul"),O5=a("li"),_Ae=a("strong"),pKr=o("albert"),_Kr=o(" \u2014 "),jre=a("a"),uKr=o("FlaxAlbertForPreTraining"),bKr=o(" (ALBERT model)"),vKr=l(),V5=a("li"),uAe=a("strong"),FKr=o("bart"),TKr=o(" \u2014 "),Dre=a("a"),MKr=o("FlaxBartForConditionalGeneration"),EKr=o(" (BART model)"),CKr=l(),X5=a("li"),bAe=a("strong"),wKr=o("bert"),AKr=o(" \u2014 "),Gre=a("a"),LKr=o("FlaxBertForPreTraining"),yKr=o(" (BERT model)"),xKr=l(),z5=a("li"),vAe=a("strong"),$Kr=o("big_bird"),kKr=o(" \u2014 "),Ore=a("a"),SKr=o("FlaxBigBirdForPreTraining"),RKr=o(" (BigBird model)"),PKr=l(),W5=a("li"),FAe=a("strong"),BKr=o("electra"),IKr=o(" \u2014 "),Vre=a("a"),NKr=o("FlaxElectraForPreTraining"),qKr=o(" (ELECTRA model)"),jKr=l(),Q5=a("li"),TAe=a("strong"),DKr=o("longt5"),GKr=o(" \u2014 "),Xre=a("a"),OKr=o("FlaxLongT5ForConditionalGeneration"),VKr=o(" (LongT5 model)"),XKr=l(),U5=a("li"),MAe=a("strong"),zKr=o("mbart"),WKr=o(" \u2014 "),zre=a("a"),QKr=o("FlaxMBartForConditionalGeneration"),UKr=o(" (mBART model)"),HKr=l(),H5=a("li"),EAe=a("strong"),JKr=o("mt5"),YKr=o(" \u2014 "),Wre=a("a"),KKr=o("FlaxMT5ForConditionalGeneration"),ZKr=o(" (MT5 model)"),eZr=l(),J5=a("li"),CAe=a("strong"),oZr=o("roberta"),rZr=o(" \u2014 "),Qre=a("a"),tZr=o("FlaxRobertaForMaskedLM"),aZr=o(" (RoBERTa model)"),nZr=l(),Y5=a("li"),wAe=a("strong"),sZr=o("roformer"),lZr=o(" \u2014 "),Ure=a("a"),iZr=o("FlaxRoFormerForMaskedLM"),dZr=o(" (RoFormer model)"),cZr=l(),K5=a("li"),AAe=a("strong"),fZr=o("t5"),mZr=o(" \u2014 "),Hre=a("a"),gZr=o("FlaxT5ForConditionalGeneration"),hZr=o(" (T5 model)"),pZr=l(),Z5=a("li"),LAe=a("strong"),_Zr=o("wav2vec2"),uZr=o(" \u2014 "),Jre=a("a"),bZr=o("FlaxWav2Vec2ForPreTraining"),vZr=o(" (Wav2Vec2 model)"),FZr=l(),ew=a("li"),yAe=a("strong"),TZr=o("xlm-roberta"),MZr=o(" \u2014 "),Yre=a("a"),EZr=o("FlaxXLMRobertaForMaskedLM"),CZr=o(" (XLM-RoBERTa model)"),wZr=l(),F(ow.$$.fragment),pHe=l(),Cf=a("h2"),rw=a("a"),xAe=a("span"),F(qk.$$.fragment),AZr=l(),$Ae=a("span"),LZr=o("FlaxAutoModelForMaskedLM"),_He=l(),Mr=a("div"),F(jk.$$.fragment),yZr=l(),wf=a("p"),xZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Kre=a("a"),$Zr=o("from_pretrained()"),kZr=o(" class method or the "),Zre=a("a"),SZr=o("from_config()"),RZr=o(` class
method.`),PZr=l(),Dk=a("p"),BZr=o("This class cannot be instantiated directly using "),kAe=a("code"),IZr=o("__init__()"),NZr=o(" (throws an error)."),qZr=l(),ra=a("div"),F(Gk.$$.fragment),jZr=l(),SAe=a("p"),DZr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GZr=l(),Af=a("p"),OZr=o(`Note:
Loading a model from its configuration file does `),RAe=a("strong"),VZr=o("not"),XZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=a("a"),zZr=o("from_pretrained()"),WZr=o(" to load the model weights."),QZr=l(),F(tw.$$.fragment),UZr=l(),Yr=a("div"),F(Ok.$$.fragment),HZr=l(),PAe=a("p"),JZr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YZr=l(),Pn=a("p"),KZr=o("The model class to instantiate is selected based on the "),BAe=a("code"),ZZr=o("model_type"),eet=o(` property of the config object (either
passed as an argument or loaded from `),IAe=a("code"),oet=o("pretrained_model_name_or_path"),ret=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=a("code"),tet=o("pretrained_model_name_or_path"),aet=o(":"),net=l(),$e=a("ul"),aw=a("li"),qAe=a("strong"),set=o("albert"),iet=o(" \u2014 "),ote=a("a"),det=o("FlaxAlbertForMaskedLM"),cet=o(" (ALBERT model)"),fet=l(),nw=a("li"),jAe=a("strong"),met=o("bart"),get=o(" \u2014 "),rte=a("a"),het=o("FlaxBartForConditionalGeneration"),pet=o(" (BART model)"),_et=l(),sw=a("li"),DAe=a("strong"),uet=o("bert"),bet=o(" \u2014 "),tte=a("a"),vet=o("FlaxBertForMaskedLM"),Fet=o(" (BERT model)"),Tet=l(),lw=a("li"),GAe=a("strong"),Met=o("big_bird"),Eet=o(" \u2014 "),ate=a("a"),Cet=o("FlaxBigBirdForMaskedLM"),wet=o(" (BigBird model)"),Aet=l(),iw=a("li"),OAe=a("strong"),Let=o("distilbert"),yet=o(" \u2014 "),nte=a("a"),xet=o("FlaxDistilBertForMaskedLM"),$et=o(" (DistilBERT model)"),ket=l(),dw=a("li"),VAe=a("strong"),Set=o("electra"),Ret=o(" \u2014 "),ste=a("a"),Pet=o("FlaxElectraForMaskedLM"),Bet=o(" (ELECTRA model)"),Iet=l(),cw=a("li"),XAe=a("strong"),Net=o("mbart"),qet=o(" \u2014 "),lte=a("a"),jet=o("FlaxMBartForConditionalGeneration"),Det=o(" (mBART model)"),Get=l(),fw=a("li"),zAe=a("strong"),Oet=o("roberta"),Vet=o(" \u2014 "),ite=a("a"),Xet=o("FlaxRobertaForMaskedLM"),zet=o(" (RoBERTa model)"),Wet=l(),mw=a("li"),WAe=a("strong"),Qet=o("roformer"),Uet=o(" \u2014 "),dte=a("a"),Het=o("FlaxRoFormerForMaskedLM"),Jet=o(" (RoFormer model)"),Yet=l(),gw=a("li"),QAe=a("strong"),Ket=o("xlm-roberta"),Zet=o(" \u2014 "),cte=a("a"),eot=o("FlaxXLMRobertaForMaskedLM"),oot=o(" (XLM-RoBERTa model)"),rot=l(),F(hw.$$.fragment),uHe=l(),Lf=a("h2"),pw=a("a"),UAe=a("span"),F(Vk.$$.fragment),tot=l(),HAe=a("span"),aot=o("FlaxAutoModelForSeq2SeqLM"),bHe=l(),Er=a("div"),F(Xk.$$.fragment),not=l(),yf=a("p"),sot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fte=a("a"),lot=o("from_pretrained()"),iot=o(" class method or the "),mte=a("a"),dot=o("from_config()"),cot=o(` class
method.`),fot=l(),zk=a("p"),mot=o("This class cannot be instantiated directly using "),JAe=a("code"),got=o("__init__()"),hot=o(" (throws an error)."),pot=l(),ta=a("div"),F(Wk.$$.fragment),_ot=l(),YAe=a("p"),uot=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bot=l(),xf=a("p"),vot=o(`Note:
Loading a model from its configuration file does `),KAe=a("strong"),Fot=o("not"),Tot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=a("a"),Mot=o("from_pretrained()"),Eot=o(" to load the model weights."),Cot=l(),F(_w.$$.fragment),wot=l(),Kr=a("div"),F(Qk.$$.fragment),Aot=l(),ZAe=a("p"),Lot=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yot=l(),Bn=a("p"),xot=o("The model class to instantiate is selected based on the "),e7e=a("code"),$ot=o("model_type"),kot=o(` property of the config object (either
passed as an argument or loaded from `),o7e=a("code"),Sot=o("pretrained_model_name_or_path"),Rot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=a("code"),Pot=o("pretrained_model_name_or_path"),Bot=o(":"),Iot=l(),ke=a("ul"),uw=a("li"),t7e=a("strong"),Not=o("bart"),qot=o(" \u2014 "),hte=a("a"),jot=o("FlaxBartForConditionalGeneration"),Dot=o(" (BART model)"),Got=l(),bw=a("li"),a7e=a("strong"),Oot=o("blenderbot"),Vot=o(" \u2014 "),pte=a("a"),Xot=o("FlaxBlenderbotForConditionalGeneration"),zot=o(" (Blenderbot model)"),Wot=l(),vw=a("li"),n7e=a("strong"),Qot=o("blenderbot-small"),Uot=o(" \u2014 "),_te=a("a"),Hot=o("FlaxBlenderbotSmallForConditionalGeneration"),Jot=o(" (BlenderbotSmall model)"),Yot=l(),Fw=a("li"),s7e=a("strong"),Kot=o("encoder-decoder"),Zot=o(" \u2014 "),ute=a("a"),ert=o("FlaxEncoderDecoderModel"),ort=o(" (Encoder decoder model)"),rrt=l(),Tw=a("li"),l7e=a("strong"),trt=o("longt5"),art=o(" \u2014 "),bte=a("a"),nrt=o("FlaxLongT5ForConditionalGeneration"),srt=o(" (LongT5 model)"),lrt=l(),Mw=a("li"),i7e=a("strong"),irt=o("marian"),drt=o(" \u2014 "),vte=a("a"),crt=o("FlaxMarianMTModel"),frt=o(" (Marian model)"),mrt=l(),Ew=a("li"),d7e=a("strong"),grt=o("mbart"),hrt=o(" \u2014 "),Fte=a("a"),prt=o("FlaxMBartForConditionalGeneration"),_rt=o(" (mBART model)"),urt=l(),Cw=a("li"),c7e=a("strong"),brt=o("mt5"),vrt=o(" \u2014 "),Tte=a("a"),Frt=o("FlaxMT5ForConditionalGeneration"),Trt=o(" (MT5 model)"),Mrt=l(),ww=a("li"),f7e=a("strong"),Ert=o("pegasus"),Crt=o(" \u2014 "),Mte=a("a"),wrt=o("FlaxPegasusForConditionalGeneration"),Art=o(" (Pegasus model)"),Lrt=l(),Aw=a("li"),m7e=a("strong"),yrt=o("t5"),xrt=o(" \u2014 "),Ete=a("a"),$rt=o("FlaxT5ForConditionalGeneration"),krt=o(" (T5 model)"),Srt=l(),F(Lw.$$.fragment),vHe=l(),$f=a("h2"),yw=a("a"),g7e=a("span"),F(Uk.$$.fragment),Rrt=l(),h7e=a("span"),Prt=o("FlaxAutoModelForSequenceClassification"),FHe=l(),Cr=a("div"),F(Hk.$$.fragment),Brt=l(),kf=a("p"),Irt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cte=a("a"),Nrt=o("from_pretrained()"),qrt=o(" class method or the "),wte=a("a"),jrt=o("from_config()"),Drt=o(` class
method.`),Grt=l(),Jk=a("p"),Ort=o("This class cannot be instantiated directly using "),p7e=a("code"),Vrt=o("__init__()"),Xrt=o(" (throws an error)."),zrt=l(),aa=a("div"),F(Yk.$$.fragment),Wrt=l(),_7e=a("p"),Qrt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Urt=l(),Sf=a("p"),Hrt=o(`Note:
Loading a model from its configuration file does `),u7e=a("strong"),Jrt=o("not"),Yrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=a("a"),Krt=o("from_pretrained()"),Zrt=o(" to load the model weights."),ett=l(),F(xw.$$.fragment),ott=l(),Zr=a("div"),F(Kk.$$.fragment),rtt=l(),b7e=a("p"),ttt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),att=l(),In=a("p"),ntt=o("The model class to instantiate is selected based on the "),v7e=a("code"),stt=o("model_type"),ltt=o(` property of the config object (either
passed as an argument or loaded from `),F7e=a("code"),itt=o("pretrained_model_name_or_path"),dtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=a("code"),ctt=o("pretrained_model_name_or_path"),ftt=o(":"),mtt=l(),Se=a("ul"),$w=a("li"),M7e=a("strong"),gtt=o("albert"),htt=o(" \u2014 "),Lte=a("a"),ptt=o("FlaxAlbertForSequenceClassification"),_tt=o(" (ALBERT model)"),utt=l(),kw=a("li"),E7e=a("strong"),btt=o("bart"),vtt=o(" \u2014 "),yte=a("a"),Ftt=o("FlaxBartForSequenceClassification"),Ttt=o(" (BART model)"),Mtt=l(),Sw=a("li"),C7e=a("strong"),Ett=o("bert"),Ctt=o(" \u2014 "),xte=a("a"),wtt=o("FlaxBertForSequenceClassification"),Att=o(" (BERT model)"),Ltt=l(),Rw=a("li"),w7e=a("strong"),ytt=o("big_bird"),xtt=o(" \u2014 "),$te=a("a"),$tt=o("FlaxBigBirdForSequenceClassification"),ktt=o(" (BigBird model)"),Stt=l(),Pw=a("li"),A7e=a("strong"),Rtt=o("distilbert"),Ptt=o(" \u2014 "),kte=a("a"),Btt=o("FlaxDistilBertForSequenceClassification"),Itt=o(" (DistilBERT model)"),Ntt=l(),Bw=a("li"),L7e=a("strong"),qtt=o("electra"),jtt=o(" \u2014 "),Ste=a("a"),Dtt=o("FlaxElectraForSequenceClassification"),Gtt=o(" (ELECTRA model)"),Ott=l(),Iw=a("li"),y7e=a("strong"),Vtt=o("mbart"),Xtt=o(" \u2014 "),Rte=a("a"),ztt=o("FlaxMBartForSequenceClassification"),Wtt=o(" (mBART model)"),Qtt=l(),Nw=a("li"),x7e=a("strong"),Utt=o("roberta"),Htt=o(" \u2014 "),Pte=a("a"),Jtt=o("FlaxRobertaForSequenceClassification"),Ytt=o(" (RoBERTa model)"),Ktt=l(),qw=a("li"),$7e=a("strong"),Ztt=o("roformer"),eat=o(" \u2014 "),Bte=a("a"),oat=o("FlaxRoFormerForSequenceClassification"),rat=o(" (RoFormer model)"),tat=l(),jw=a("li"),k7e=a("strong"),aat=o("xlm-roberta"),nat=o(" \u2014 "),Ite=a("a"),sat=o("FlaxXLMRobertaForSequenceClassification"),lat=o(" (XLM-RoBERTa model)"),iat=l(),F(Dw.$$.fragment),THe=l(),Rf=a("h2"),Gw=a("a"),S7e=a("span"),F(Zk.$$.fragment),dat=l(),R7e=a("span"),cat=o("FlaxAutoModelForQuestionAnswering"),MHe=l(),wr=a("div"),F(eS.$$.fragment),fat=l(),Pf=a("p"),mat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nte=a("a"),gat=o("from_pretrained()"),hat=o(" class method or the "),qte=a("a"),pat=o("from_config()"),_at=o(` class
method.`),uat=l(),oS=a("p"),bat=o("This class cannot be instantiated directly using "),P7e=a("code"),vat=o("__init__()"),Fat=o(" (throws an error)."),Tat=l(),na=a("div"),F(rS.$$.fragment),Mat=l(),B7e=a("p"),Eat=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cat=l(),Bf=a("p"),wat=o(`Note:
Loading a model from its configuration file does `),I7e=a("strong"),Aat=o("not"),Lat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=a("a"),yat=o("from_pretrained()"),xat=o(" to load the model weights."),$at=l(),F(Ow.$$.fragment),kat=l(),et=a("div"),F(tS.$$.fragment),Sat=l(),N7e=a("p"),Rat=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pat=l(),Nn=a("p"),Bat=o("The model class to instantiate is selected based on the "),q7e=a("code"),Iat=o("model_type"),Nat=o(` property of the config object (either
passed as an argument or loaded from `),j7e=a("code"),qat=o("pretrained_model_name_or_path"),jat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=a("code"),Dat=o("pretrained_model_name_or_path"),Gat=o(":"),Oat=l(),Re=a("ul"),Vw=a("li"),G7e=a("strong"),Vat=o("albert"),Xat=o(" \u2014 "),Dte=a("a"),zat=o("FlaxAlbertForQuestionAnswering"),Wat=o(" (ALBERT model)"),Qat=l(),Xw=a("li"),O7e=a("strong"),Uat=o("bart"),Hat=o(" \u2014 "),Gte=a("a"),Jat=o("FlaxBartForQuestionAnswering"),Yat=o(" (BART model)"),Kat=l(),zw=a("li"),V7e=a("strong"),Zat=o("bert"),ent=o(" \u2014 "),Ote=a("a"),ont=o("FlaxBertForQuestionAnswering"),rnt=o(" (BERT model)"),tnt=l(),Ww=a("li"),X7e=a("strong"),ant=o("big_bird"),nnt=o(" \u2014 "),Vte=a("a"),snt=o("FlaxBigBirdForQuestionAnswering"),lnt=o(" (BigBird model)"),int=l(),Qw=a("li"),z7e=a("strong"),dnt=o("distilbert"),cnt=o(" \u2014 "),Xte=a("a"),fnt=o("FlaxDistilBertForQuestionAnswering"),mnt=o(" (DistilBERT model)"),gnt=l(),Uw=a("li"),W7e=a("strong"),hnt=o("electra"),pnt=o(" \u2014 "),zte=a("a"),_nt=o("FlaxElectraForQuestionAnswering"),unt=o(" (ELECTRA model)"),bnt=l(),Hw=a("li"),Q7e=a("strong"),vnt=o("mbart"),Fnt=o(" \u2014 "),Wte=a("a"),Tnt=o("FlaxMBartForQuestionAnswering"),Mnt=o(" (mBART model)"),Ent=l(),Jw=a("li"),U7e=a("strong"),Cnt=o("roberta"),wnt=o(" \u2014 "),Qte=a("a"),Ant=o("FlaxRobertaForQuestionAnswering"),Lnt=o(" (RoBERTa model)"),ynt=l(),Yw=a("li"),H7e=a("strong"),xnt=o("roformer"),$nt=o(" \u2014 "),Ute=a("a"),knt=o("FlaxRoFormerForQuestionAnswering"),Snt=o(" (RoFormer model)"),Rnt=l(),Kw=a("li"),J7e=a("strong"),Pnt=o("xlm-roberta"),Bnt=o(" \u2014 "),Hte=a("a"),Int=o("FlaxXLMRobertaForQuestionAnswering"),Nnt=o(" (XLM-RoBERTa model)"),qnt=l(),F(Zw.$$.fragment),EHe=l(),If=a("h2"),eA=a("a"),Y7e=a("span"),F(aS.$$.fragment),jnt=l(),K7e=a("span"),Dnt=o("FlaxAutoModelForTokenClassification"),CHe=l(),Ar=a("div"),F(nS.$$.fragment),Gnt=l(),Nf=a("p"),Ont=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Jte=a("a"),Vnt=o("from_pretrained()"),Xnt=o(" class method or the "),Yte=a("a"),znt=o("from_config()"),Wnt=o(` class
method.`),Qnt=l(),sS=a("p"),Unt=o("This class cannot be instantiated directly using "),Z7e=a("code"),Hnt=o("__init__()"),Jnt=o(" (throws an error)."),Ynt=l(),sa=a("div"),F(lS.$$.fragment),Knt=l(),eLe=a("p"),Znt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),est=l(),qf=a("p"),ost=o(`Note:
Loading a model from its configuration file does `),oLe=a("strong"),rst=o("not"),tst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=a("a"),ast=o("from_pretrained()"),nst=o(" to load the model weights."),sst=l(),F(oA.$$.fragment),lst=l(),ot=a("div"),F(iS.$$.fragment),ist=l(),rLe=a("p"),dst=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cst=l(),qn=a("p"),fst=o("The model class to instantiate is selected based on the "),tLe=a("code"),mst=o("model_type"),gst=o(` property of the config object (either
passed as an argument or loaded from `),aLe=a("code"),hst=o("pretrained_model_name_or_path"),pst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nLe=a("code"),_st=o("pretrained_model_name_or_path"),ust=o(":"),bst=l(),Xe=a("ul"),rA=a("li"),sLe=a("strong"),vst=o("albert"),Fst=o(" \u2014 "),Zte=a("a"),Tst=o("FlaxAlbertForTokenClassification"),Mst=o(" (ALBERT model)"),Est=l(),tA=a("li"),lLe=a("strong"),Cst=o("bert"),wst=o(" \u2014 "),eae=a("a"),Ast=o("FlaxBertForTokenClassification"),Lst=o(" (BERT model)"),yst=l(),aA=a("li"),iLe=a("strong"),xst=o("big_bird"),$st=o(" \u2014 "),oae=a("a"),kst=o("FlaxBigBirdForTokenClassification"),Sst=o(" (BigBird model)"),Rst=l(),nA=a("li"),dLe=a("strong"),Pst=o("distilbert"),Bst=o(" \u2014 "),rae=a("a"),Ist=o("FlaxDistilBertForTokenClassification"),Nst=o(" (DistilBERT model)"),qst=l(),sA=a("li"),cLe=a("strong"),jst=o("electra"),Dst=o(" \u2014 "),tae=a("a"),Gst=o("FlaxElectraForTokenClassification"),Ost=o(" (ELECTRA model)"),Vst=l(),lA=a("li"),fLe=a("strong"),Xst=o("roberta"),zst=o(" \u2014 "),aae=a("a"),Wst=o("FlaxRobertaForTokenClassification"),Qst=o(" (RoBERTa model)"),Ust=l(),iA=a("li"),mLe=a("strong"),Hst=o("roformer"),Jst=o(" \u2014 "),nae=a("a"),Yst=o("FlaxRoFormerForTokenClassification"),Kst=o(" (RoFormer model)"),Zst=l(),dA=a("li"),gLe=a("strong"),elt=o("xlm-roberta"),olt=o(" \u2014 "),sae=a("a"),rlt=o("FlaxXLMRobertaForTokenClassification"),tlt=o(" (XLM-RoBERTa model)"),alt=l(),F(cA.$$.fragment),wHe=l(),jf=a("h2"),fA=a("a"),hLe=a("span"),F(dS.$$.fragment),nlt=l(),pLe=a("span"),slt=o("FlaxAutoModelForMultipleChoice"),AHe=l(),Lr=a("div"),F(cS.$$.fragment),llt=l(),Df=a("p"),ilt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lae=a("a"),dlt=o("from_pretrained()"),clt=o(" class method or the "),iae=a("a"),flt=o("from_config()"),mlt=o(` class
method.`),glt=l(),fS=a("p"),hlt=o("This class cannot be instantiated directly using "),_Le=a("code"),plt=o("__init__()"),_lt=o(" (throws an error)."),ult=l(),la=a("div"),F(mS.$$.fragment),blt=l(),uLe=a("p"),vlt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Flt=l(),Gf=a("p"),Tlt=o(`Note:
Loading a model from its configuration file does `),bLe=a("strong"),Mlt=o("not"),Elt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=a("a"),Clt=o("from_pretrained()"),wlt=o(" to load the model weights."),Alt=l(),F(mA.$$.fragment),Llt=l(),rt=a("div"),F(gS.$$.fragment),ylt=l(),vLe=a("p"),xlt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$lt=l(),jn=a("p"),klt=o("The model class to instantiate is selected based on the "),FLe=a("code"),Slt=o("model_type"),Rlt=o(` property of the config object (either
passed as an argument or loaded from `),TLe=a("code"),Plt=o("pretrained_model_name_or_path"),Blt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=a("code"),Ilt=o("pretrained_model_name_or_path"),Nlt=o(":"),qlt=l(),ze=a("ul"),gA=a("li"),ELe=a("strong"),jlt=o("albert"),Dlt=o(" \u2014 "),cae=a("a"),Glt=o("FlaxAlbertForMultipleChoice"),Olt=o(" (ALBERT model)"),Vlt=l(),hA=a("li"),CLe=a("strong"),Xlt=o("bert"),zlt=o(" \u2014 "),fae=a("a"),Wlt=o("FlaxBertForMultipleChoice"),Qlt=o(" (BERT model)"),Ult=l(),pA=a("li"),wLe=a("strong"),Hlt=o("big_bird"),Jlt=o(" \u2014 "),mae=a("a"),Ylt=o("FlaxBigBirdForMultipleChoice"),Klt=o(" (BigBird model)"),Zlt=l(),_A=a("li"),ALe=a("strong"),eit=o("distilbert"),oit=o(" \u2014 "),gae=a("a"),rit=o("FlaxDistilBertForMultipleChoice"),tit=o(" (DistilBERT model)"),ait=l(),uA=a("li"),LLe=a("strong"),nit=o("electra"),sit=o(" \u2014 "),hae=a("a"),lit=o("FlaxElectraForMultipleChoice"),iit=o(" (ELECTRA model)"),dit=l(),bA=a("li"),yLe=a("strong"),cit=o("roberta"),fit=o(" \u2014 "),pae=a("a"),mit=o("FlaxRobertaForMultipleChoice"),git=o(" (RoBERTa model)"),hit=l(),vA=a("li"),xLe=a("strong"),pit=o("roformer"),_it=o(" \u2014 "),_ae=a("a"),uit=o("FlaxRoFormerForMultipleChoice"),bit=o(" (RoFormer model)"),vit=l(),FA=a("li"),$Le=a("strong"),Fit=o("xlm-roberta"),Tit=o(" \u2014 "),uae=a("a"),Mit=o("FlaxXLMRobertaForMultipleChoice"),Eit=o(" (XLM-RoBERTa model)"),Cit=l(),F(TA.$$.fragment),LHe=l(),Of=a("h2"),MA=a("a"),kLe=a("span"),F(hS.$$.fragment),wit=l(),SLe=a("span"),Ait=o("FlaxAutoModelForNextSentencePrediction"),yHe=l(),yr=a("div"),F(pS.$$.fragment),Lit=l(),Vf=a("p"),yit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bae=a("a"),xit=o("from_pretrained()"),$it=o(" class method or the "),vae=a("a"),kit=o("from_config()"),Sit=o(` class
method.`),Rit=l(),_S=a("p"),Pit=o("This class cannot be instantiated directly using "),RLe=a("code"),Bit=o("__init__()"),Iit=o(" (throws an error)."),Nit=l(),ia=a("div"),F(uS.$$.fragment),qit=l(),PLe=a("p"),jit=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dit=l(),Xf=a("p"),Git=o(`Note:
Loading a model from its configuration file does `),BLe=a("strong"),Oit=o("not"),Vit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=a("a"),Xit=o("from_pretrained()"),zit=o(" to load the model weights."),Wit=l(),F(EA.$$.fragment),Qit=l(),tt=a("div"),F(bS.$$.fragment),Uit=l(),ILe=a("p"),Hit=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jit=l(),Dn=a("p"),Yit=o("The model class to instantiate is selected based on the "),NLe=a("code"),Kit=o("model_type"),Zit=o(` property of the config object (either
passed as an argument or loaded from `),qLe=a("code"),edt=o("pretrained_model_name_or_path"),odt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jLe=a("code"),rdt=o("pretrained_model_name_or_path"),tdt=o(":"),adt=l(),DLe=a("ul"),CA=a("li"),GLe=a("strong"),ndt=o("bert"),sdt=o(" \u2014 "),Tae=a("a"),ldt=o("FlaxBertForNextSentencePrediction"),idt=o(" (BERT model)"),ddt=l(),F(wA.$$.fragment),xHe=l(),zf=a("h2"),AA=a("a"),OLe=a("span"),F(vS.$$.fragment),cdt=l(),VLe=a("span"),fdt=o("FlaxAutoModelForImageClassification"),$He=l(),xr=a("div"),F(FS.$$.fragment),mdt=l(),Wf=a("p"),gdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mae=a("a"),hdt=o("from_pretrained()"),pdt=o(" class method or the "),Eae=a("a"),_dt=o("from_config()"),udt=o(` class
method.`),bdt=l(),TS=a("p"),vdt=o("This class cannot be instantiated directly using "),XLe=a("code"),Fdt=o("__init__()"),Tdt=o(" (throws an error)."),Mdt=l(),da=a("div"),F(MS.$$.fragment),Edt=l(),zLe=a("p"),Cdt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wdt=l(),Qf=a("p"),Adt=o(`Note:
Loading a model from its configuration file does `),WLe=a("strong"),Ldt=o("not"),ydt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=a("a"),xdt=o("from_pretrained()"),$dt=o(" to load the model weights."),kdt=l(),F(LA.$$.fragment),Sdt=l(),at=a("div"),F(ES.$$.fragment),Rdt=l(),QLe=a("p"),Pdt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bdt=l(),Gn=a("p"),Idt=o("The model class to instantiate is selected based on the "),ULe=a("code"),Ndt=o("model_type"),qdt=o(` property of the config object (either
passed as an argument or loaded from `),HLe=a("code"),jdt=o("pretrained_model_name_or_path"),Ddt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JLe=a("code"),Gdt=o("pretrained_model_name_or_path"),Odt=o(":"),Vdt=l(),CS=a("ul"),yA=a("li"),YLe=a("strong"),Xdt=o("beit"),zdt=o(" \u2014 "),wae=a("a"),Wdt=o("FlaxBeitForImageClassification"),Qdt=o(" (BEiT model)"),Udt=l(),xA=a("li"),KLe=a("strong"),Hdt=o("vit"),Jdt=o(" \u2014 "),Aae=a("a"),Ydt=o("FlaxViTForImageClassification"),Kdt=o(" (ViT model)"),Zdt=l(),F($A.$$.fragment),kHe=l(),Uf=a("h2"),kA=a("a"),ZLe=a("span"),F(wS.$$.fragment),ect=l(),eye=a("span"),oct=o("FlaxAutoModelForVision2Seq"),SHe=l(),$r=a("div"),F(AS.$$.fragment),rct=l(),Hf=a("p"),tct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Lae=a("a"),act=o("from_pretrained()"),nct=o(" class method or the "),yae=a("a"),sct=o("from_config()"),lct=o(` class
method.`),ict=l(),LS=a("p"),dct=o("This class cannot be instantiated directly using "),oye=a("code"),cct=o("__init__()"),fct=o(" (throws an error)."),mct=l(),ca=a("div"),F(yS.$$.fragment),gct=l(),rye=a("p"),hct=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pct=l(),Jf=a("p"),_ct=o(`Note:
Loading a model from its configuration file does `),tye=a("strong"),uct=o("not"),bct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=a("a"),vct=o("from_pretrained()"),Fct=o(" to load the model weights."),Tct=l(),F(SA.$$.fragment),Mct=l(),nt=a("div"),F(xS.$$.fragment),Ect=l(),aye=a("p"),Cct=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wct=l(),On=a("p"),Act=o("The model class to instantiate is selected based on the "),nye=a("code"),Lct=o("model_type"),yct=o(` property of the config object (either
passed as an argument or loaded from `),sye=a("code"),xct=o("pretrained_model_name_or_path"),$ct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lye=a("code"),kct=o("pretrained_model_name_or_path"),Sct=o(":"),Rct=l(),iye=a("ul"),RA=a("li"),dye=a("strong"),Pct=o("vision-encoder-decoder"),Bct=o(" \u2014 "),$ae=a("a"),Ict=o("FlaxVisionEncoderDecoderModel"),Nct=o(" (Vision Encoder decoder model)"),qct=l(),F(PA.$$.fragment),this.h()},l(f){const u=Woa('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var $S=s(p);m=n($S,"A",{id:!0,class:!0,href:!0});var cye=s(m);_=n(cye,"SPAN",{});var fye=s(_);T(d.$$.fragment,fye),fye.forEach(t),cye.forEach(t),h=i($S),Ao=n($S,"SPAN",{});var mye=s(Ao);Oi=r(mye,"Auto Classes"),mye.forEach(t),$S.forEach(t),em=i(f),ft=n(f,"P",{});var kS=s(ft);Vi=r(kS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(kS,"CODE",{});var gye=s(Xi);ny=r(gye,"from_pretrained()"),gye.forEach(t),om=r(kS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),kS.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Vn=s(Qe);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var hye=s(Xn);sy=r(hye,"AutoConfig"),hye.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var pye=s(Wn);ly=r(pye,"AutoModel"),pye.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var _ye=s(Qn);iy=r(_ye,"AutoTokenizer"),_ye.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rm=i(f),T(ja.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var SS=s(Ae);ZR=r(SS,"will create a model that is an instance of "),Ui=n(SS,"A",{href:!0});var uye=s(Ui);eP=r(uye,"BertModel"),uye.forEach(t),oP=r(SS,"."),SS.forEach(t),Lo=i(f),Da=n(f,"P",{});var RS=s(Da);rP=r(RS,"There is one class of "),tm=n(RS,"CODE",{});var bye=s(tm);tP=r(bye,"AutoModel"),bye.forEach(t),UYe=r(RS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),RS.forEach(t),CQe=i(f),Hi=n(f,"H2",{class:!0});var PS=s(Hi);am=n(PS,"A",{id:!0,class:!0,href:!0});var vye=s(am);yse=n(vye,"SPAN",{});var Fye=s(yse);T(dy.$$.fragment,Fye),Fye.forEach(t),vye.forEach(t),HYe=i(PS),xse=n(PS,"SPAN",{});var Tye=s(xse);JYe=r(Tye,"Extending the Auto Classes"),Tye.forEach(t),PS.forEach(t),wQe=i(f),Un=n(f,"P",{});var Yf=s(Un);YYe=r(Yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$se=n(Yf,"CODE",{});var Mye=s($se);KYe=r(Mye,"NewModel"),Mye.forEach(t),ZYe=r(Yf,", make sure you have a "),kse=n(Yf,"CODE",{});var Eye=s(kse);eKe=r(Eye,"NewModelConfig"),Eye.forEach(t),oKe=r(Yf,` then you can add those to the auto
classes like this:`),Yf.forEach(t),AQe=i(f),T(cy.$$.fragment,f),LQe=i(f),aP=n(f,"P",{});var Cye=s(aP);rKe=r(Cye,"You will then be able to use the auto classes like you would usually do!"),Cye.forEach(t),yQe=i(f),T(nm.$$.fragment,f),xQe=i(f),Ji=n(f,"H2",{class:!0});var BS=s(Ji);sm=n(BS,"A",{id:!0,class:!0,href:!0});var wye=s(sm);Sse=n(wye,"SPAN",{});var Aye=s(Sse);T(fy.$$.fragment,Aye),Aye.forEach(t),wye.forEach(t),tKe=i(BS),Rse=n(BS,"SPAN",{});var Lye=s(Rse);aKe=r(Lye,"AutoConfig"),Lye.forEach(t),BS.forEach(t),$Qe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(my.$$.fragment,dt),nKe=i(dt),gy=n(dt,"P",{});var IS=s(gy);sKe=r(IS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),nP=n(IS,"A",{href:!0});var yye=s(nP);lKe=r(yye,"from_pretrained()"),yye.forEach(t),iKe=r(IS," class method."),IS.forEach(t),dKe=i(dt),hy=n(dt,"P",{});var NS=s(hy);cKe=r(NS,"This class cannot be instantiated directly using "),Pse=n(NS,"CODE",{});var xye=s(Pse);fKe=r(xye,"__init__()"),xye.forEach(t),mKe=r(NS," (throws an error)."),NS.forEach(t),gKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(py.$$.fragment,ct),hKe=i(ct),Bse=n(ct,"P",{});var $ye=s(Bse);pKe=r($ye,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$ye.forEach(t),_Ke=i(ct),Yi=n(ct,"P",{});var Kf=s(Yi);uKe=r(Kf,"The configuration class to instantiate is selected based on the "),Ise=n(Kf,"CODE",{});var kye=s(Ise);bKe=r(kye,"model_type"),kye.forEach(t),vKe=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nse=n(Kf,"CODE",{});var Sye=s(Nse);FKe=r(Sye,"pretrained_model_name_or_path"),Sye.forEach(t),TKe=r(Kf,":"),Kf.forEach(t),MKe=i(ct),A=n(ct,"UL",{});var L=s(A);lm=n(L,"LI",{});var BA=s(lm);qse=n(BA,"STRONG",{});var Rye=s(qse);EKe=r(Rye,"albert"),Rye.forEach(t),CKe=r(BA," \u2014 "),sP=n(BA,"A",{href:!0});var Pye=s(sP);wKe=r(Pye,"AlbertConfig"),Pye.forEach(t),AKe=r(BA," (ALBERT model)"),BA.forEach(t),LKe=i(L),im=n(L,"LI",{});var IA=s(im);jse=n(IA,"STRONG",{});var Bye=s(jse);yKe=r(Bye,"bart"),Bye.forEach(t),xKe=r(IA," \u2014 "),lP=n(IA,"A",{href:!0});var Iye=s(lP);$Ke=r(Iye,"BartConfig"),Iye.forEach(t),kKe=r(IA," (BART model)"),IA.forEach(t),SKe=i(L),dm=n(L,"LI",{});var NA=s(dm);Dse=n(NA,"STRONG",{});var Nye=s(Dse);RKe=r(Nye,"beit"),Nye.forEach(t),PKe=r(NA," \u2014 "),iP=n(NA,"A",{href:!0});var qye=s(iP);BKe=r(qye,"BeitConfig"),qye.forEach(t),IKe=r(NA," (BEiT model)"),NA.forEach(t),NKe=i(L),cm=n(L,"LI",{});var qA=s(cm);Gse=n(qA,"STRONG",{});var jye=s(Gse);qKe=r(jye,"bert"),jye.forEach(t),jKe=r(qA," \u2014 "),dP=n(qA,"A",{href:!0});var Dye=s(dP);DKe=r(Dye,"BertConfig"),Dye.forEach(t),GKe=r(qA," (BERT model)"),qA.forEach(t),OKe=i(L),fm=n(L,"LI",{});var jA=s(fm);Ose=n(jA,"STRONG",{});var Gye=s(Ose);VKe=r(Gye,"bert-generation"),Gye.forEach(t),XKe=r(jA," \u2014 "),cP=n(jA,"A",{href:!0});var Oye=s(cP);zKe=r(Oye,"BertGenerationConfig"),Oye.forEach(t),WKe=r(jA," (Bert Generation model)"),jA.forEach(t),QKe=i(L),mm=n(L,"LI",{});var DA=s(mm);Vse=n(DA,"STRONG",{});var Vye=s(Vse);UKe=r(Vye,"big_bird"),Vye.forEach(t),HKe=r(DA," \u2014 "),fP=n(DA,"A",{href:!0});var Xye=s(fP);JKe=r(Xye,"BigBirdConfig"),Xye.forEach(t),YKe=r(DA," (BigBird model)"),DA.forEach(t),KKe=i(L),gm=n(L,"LI",{});var GA=s(gm);Xse=n(GA,"STRONG",{});var zye=s(Xse);ZKe=r(zye,"bigbird_pegasus"),zye.forEach(t),eZe=r(GA," \u2014 "),mP=n(GA,"A",{href:!0});var Wye=s(mP);oZe=r(Wye,"BigBirdPegasusConfig"),Wye.forEach(t),rZe=r(GA," (BigBird-Pegasus model)"),GA.forEach(t),tZe=i(L),hm=n(L,"LI",{});var OA=s(hm);zse=n(OA,"STRONG",{});var Qye=s(zse);aZe=r(Qye,"blenderbot"),Qye.forEach(t),nZe=r(OA," \u2014 "),gP=n(OA,"A",{href:!0});var Uye=s(gP);sZe=r(Uye,"BlenderbotConfig"),Uye.forEach(t),lZe=r(OA," (Blenderbot model)"),OA.forEach(t),iZe=i(L),pm=n(L,"LI",{});var VA=s(pm);Wse=n(VA,"STRONG",{});var Hye=s(Wse);dZe=r(Hye,"blenderbot-small"),Hye.forEach(t),cZe=r(VA," \u2014 "),hP=n(VA,"A",{href:!0});var Jye=s(hP);fZe=r(Jye,"BlenderbotSmallConfig"),Jye.forEach(t),mZe=r(VA," (BlenderbotSmall model)"),VA.forEach(t),gZe=i(L),_m=n(L,"LI",{});var XA=s(_m);Qse=n(XA,"STRONG",{});var Yye=s(Qse);hZe=r(Yye,"bloom"),Yye.forEach(t),pZe=r(XA," \u2014 "),pP=n(XA,"A",{href:!0});var Kye=s(pP);_Ze=r(Kye,"BloomConfig"),Kye.forEach(t),uZe=r(XA," (BLOOM model)"),XA.forEach(t),bZe=i(L),um=n(L,"LI",{});var zA=s(um);Use=n(zA,"STRONG",{});var Zye=s(Use);vZe=r(Zye,"camembert"),Zye.forEach(t),FZe=r(zA," \u2014 "),_P=n(zA,"A",{href:!0});var e9e=s(_P);TZe=r(e9e,"CamembertConfig"),e9e.forEach(t),MZe=r(zA," (CamemBERT model)"),zA.forEach(t),EZe=i(L),bm=n(L,"LI",{});var WA=s(bm);Hse=n(WA,"STRONG",{});var o9e=s(Hse);CZe=r(o9e,"canine"),o9e.forEach(t),wZe=r(WA," \u2014 "),uP=n(WA,"A",{href:!0});var r9e=s(uP);AZe=r(r9e,"CanineConfig"),r9e.forEach(t),LZe=r(WA," (CANINE model)"),WA.forEach(t),yZe=i(L),vm=n(L,"LI",{});var QA=s(vm);Jse=n(QA,"STRONG",{});var t9e=s(Jse);xZe=r(t9e,"clip"),t9e.forEach(t),$Ze=r(QA," \u2014 "),bP=n(QA,"A",{href:!0});var a9e=s(bP);kZe=r(a9e,"CLIPConfig"),a9e.forEach(t),SZe=r(QA," (CLIP model)"),QA.forEach(t),RZe=i(L),Fm=n(L,"LI",{});var UA=s(Fm);Yse=n(UA,"STRONG",{});var n9e=s(Yse);PZe=r(n9e,"codegen"),n9e.forEach(t),BZe=r(UA," \u2014 "),vP=n(UA,"A",{href:!0});var s9e=s(vP);IZe=r(s9e,"CodeGenConfig"),s9e.forEach(t),NZe=r(UA," (CodeGen model)"),UA.forEach(t),qZe=i(L),Tm=n(L,"LI",{});var HA=s(Tm);Kse=n(HA,"STRONG",{});var l9e=s(Kse);jZe=r(l9e,"convbert"),l9e.forEach(t),DZe=r(HA," \u2014 "),FP=n(HA,"A",{href:!0});var i9e=s(FP);GZe=r(i9e,"ConvBertConfig"),i9e.forEach(t),OZe=r(HA," (ConvBERT model)"),HA.forEach(t),VZe=i(L),Mm=n(L,"LI",{});var JA=s(Mm);Zse=n(JA,"STRONG",{});var d9e=s(Zse);XZe=r(d9e,"convnext"),d9e.forEach(t),zZe=r(JA," \u2014 "),TP=n(JA,"A",{href:!0});var c9e=s(TP);WZe=r(c9e,"ConvNextConfig"),c9e.forEach(t),QZe=r(JA," (ConvNeXT model)"),JA.forEach(t),UZe=i(L),Em=n(L,"LI",{});var YA=s(Em);ele=n(YA,"STRONG",{});var f9e=s(ele);HZe=r(f9e,"ctrl"),f9e.forEach(t),JZe=r(YA," \u2014 "),MP=n(YA,"A",{href:!0});var m9e=s(MP);YZe=r(m9e,"CTRLConfig"),m9e.forEach(t),KZe=r(YA," (CTRL model)"),YA.forEach(t),ZZe=i(L),Cm=n(L,"LI",{});var KA=s(Cm);ole=n(KA,"STRONG",{});var g9e=s(ole);eeo=r(g9e,"cvt"),g9e.forEach(t),oeo=r(KA," \u2014 "),EP=n(KA,"A",{href:!0});var h9e=s(EP);reo=r(h9e,"CvtConfig"),h9e.forEach(t),teo=r(KA," (CvT model)"),KA.forEach(t),aeo=i(L),wm=n(L,"LI",{});var ZA=s(wm);rle=n(ZA,"STRONG",{});var p9e=s(rle);neo=r(p9e,"data2vec-audio"),p9e.forEach(t),seo=r(ZA," \u2014 "),CP=n(ZA,"A",{href:!0});var _9e=s(CP);leo=r(_9e,"Data2VecAudioConfig"),_9e.forEach(t),ieo=r(ZA," (Data2VecAudio model)"),ZA.forEach(t),deo=i(L),Am=n(L,"LI",{});var e7=s(Am);tle=n(e7,"STRONG",{});var u9e=s(tle);ceo=r(u9e,"data2vec-text"),u9e.forEach(t),feo=r(e7," \u2014 "),wP=n(e7,"A",{href:!0});var b9e=s(wP);meo=r(b9e,"Data2VecTextConfig"),b9e.forEach(t),geo=r(e7," (Data2VecText model)"),e7.forEach(t),heo=i(L),Lm=n(L,"LI",{});var o7=s(Lm);ale=n(o7,"STRONG",{});var v9e=s(ale);peo=r(v9e,"data2vec-vision"),v9e.forEach(t),_eo=r(o7," \u2014 "),AP=n(o7,"A",{href:!0});var F9e=s(AP);ueo=r(F9e,"Data2VecVisionConfig"),F9e.forEach(t),beo=r(o7," (Data2VecVision model)"),o7.forEach(t),veo=i(L),ym=n(L,"LI",{});var r7=s(ym);nle=n(r7,"STRONG",{});var T9e=s(nle);Feo=r(T9e,"deberta"),T9e.forEach(t),Teo=r(r7," \u2014 "),LP=n(r7,"A",{href:!0});var M9e=s(LP);Meo=r(M9e,"DebertaConfig"),M9e.forEach(t),Eeo=r(r7," (DeBERTa model)"),r7.forEach(t),Ceo=i(L),xm=n(L,"LI",{});var t7=s(xm);sle=n(t7,"STRONG",{});var E9e=s(sle);weo=r(E9e,"deberta-v2"),E9e.forEach(t),Aeo=r(t7," \u2014 "),yP=n(t7,"A",{href:!0});var C9e=s(yP);Leo=r(C9e,"DebertaV2Config"),C9e.forEach(t),yeo=r(t7," (DeBERTa-v2 model)"),t7.forEach(t),xeo=i(L),$m=n(L,"LI",{});var a7=s($m);lle=n(a7,"STRONG",{});var w9e=s(lle);$eo=r(w9e,"decision_transformer"),w9e.forEach(t),keo=r(a7," \u2014 "),xP=n(a7,"A",{href:!0});var A9e=s(xP);Seo=r(A9e,"DecisionTransformerConfig"),A9e.forEach(t),Reo=r(a7," (Decision Transformer model)"),a7.forEach(t),Peo=i(L),km=n(L,"LI",{});var n7=s(km);ile=n(n7,"STRONG",{});var L9e=s(ile);Beo=r(L9e,"deit"),L9e.forEach(t),Ieo=r(n7," \u2014 "),$P=n(n7,"A",{href:!0});var Dct=s($P);Neo=r(Dct,"DeiTConfig"),Dct.forEach(t),qeo=r(n7," (DeiT model)"),n7.forEach(t),jeo=i(L),Sm=n(L,"LI",{});var y9e=s(Sm);dle=n(y9e,"STRONG",{});var Gct=s(dle);Deo=r(Gct,"detr"),Gct.forEach(t),Geo=r(y9e," \u2014 "),kP=n(y9e,"A",{href:!0});var Oct=s(kP);Oeo=r(Oct,"DetrConfig"),Oct.forEach(t),Veo=r(y9e," (DETR model)"),y9e.forEach(t),Xeo=i(L),Rm=n(L,"LI",{});var x9e=s(Rm);cle=n(x9e,"STRONG",{});var Vct=s(cle);zeo=r(Vct,"distilbert"),Vct.forEach(t),Weo=r(x9e," \u2014 "),SP=n(x9e,"A",{href:!0});var Xct=s(SP);Qeo=r(Xct,"DistilBertConfig"),Xct.forEach(t),Ueo=r(x9e," (DistilBERT model)"),x9e.forEach(t),Heo=i(L),Pm=n(L,"LI",{});var $9e=s(Pm);fle=n($9e,"STRONG",{});var zct=s(fle);Jeo=r(zct,"dpr"),zct.forEach(t),Yeo=r($9e," \u2014 "),RP=n($9e,"A",{href:!0});var Wct=s(RP);Keo=r(Wct,"DPRConfig"),Wct.forEach(t),Zeo=r($9e," (DPR model)"),$9e.forEach(t),eoo=i(L),Bm=n(L,"LI",{});var k9e=s(Bm);mle=n(k9e,"STRONG",{});var Qct=s(mle);ooo=r(Qct,"dpt"),Qct.forEach(t),roo=r(k9e," \u2014 "),PP=n(k9e,"A",{href:!0});var Uct=s(PP);too=r(Uct,"DPTConfig"),Uct.forEach(t),aoo=r(k9e," (DPT model)"),k9e.forEach(t),noo=i(L),Im=n(L,"LI",{});var S9e=s(Im);gle=n(S9e,"STRONG",{});var Hct=s(gle);soo=r(Hct,"electra"),Hct.forEach(t),loo=r(S9e," \u2014 "),BP=n(S9e,"A",{href:!0});var Jct=s(BP);ioo=r(Jct,"ElectraConfig"),Jct.forEach(t),doo=r(S9e," (ELECTRA model)"),S9e.forEach(t),coo=i(L),Nm=n(L,"LI",{});var R9e=s(Nm);hle=n(R9e,"STRONG",{});var Yct=s(hle);foo=r(Yct,"encoder-decoder"),Yct.forEach(t),moo=r(R9e," \u2014 "),IP=n(R9e,"A",{href:!0});var Kct=s(IP);goo=r(Kct,"EncoderDecoderConfig"),Kct.forEach(t),hoo=r(R9e," (Encoder decoder model)"),R9e.forEach(t),poo=i(L),qm=n(L,"LI",{});var P9e=s(qm);ple=n(P9e,"STRONG",{});var Zct=s(ple);_oo=r(Zct,"flaubert"),Zct.forEach(t),uoo=r(P9e," \u2014 "),NP=n(P9e,"A",{href:!0});var eft=s(NP);boo=r(eft,"FlaubertConfig"),eft.forEach(t),voo=r(P9e," (FlauBERT model)"),P9e.forEach(t),Foo=i(L),jm=n(L,"LI",{});var B9e=s(jm);_le=n(B9e,"STRONG",{});var oft=s(_le);Too=r(oft,"flava"),oft.forEach(t),Moo=r(B9e," \u2014 "),qP=n(B9e,"A",{href:!0});var rft=s(qP);Eoo=r(rft,"FlavaConfig"),rft.forEach(t),Coo=r(B9e," (FLAVA model)"),B9e.forEach(t),woo=i(L),Dm=n(L,"LI",{});var I9e=s(Dm);ule=n(I9e,"STRONG",{});var tft=s(ule);Aoo=r(tft,"fnet"),tft.forEach(t),Loo=r(I9e," \u2014 "),jP=n(I9e,"A",{href:!0});var aft=s(jP);yoo=r(aft,"FNetConfig"),aft.forEach(t),xoo=r(I9e," (FNet model)"),I9e.forEach(t),$oo=i(L),Gm=n(L,"LI",{});var N9e=s(Gm);ble=n(N9e,"STRONG",{});var nft=s(ble);koo=r(nft,"fsmt"),nft.forEach(t),Soo=r(N9e," \u2014 "),DP=n(N9e,"A",{href:!0});var sft=s(DP);Roo=r(sft,"FSMTConfig"),sft.forEach(t),Poo=r(N9e," (FairSeq Machine-Translation model)"),N9e.forEach(t),Boo=i(L),Om=n(L,"LI",{});var q9e=s(Om);vle=n(q9e,"STRONG",{});var lft=s(vle);Ioo=r(lft,"funnel"),lft.forEach(t),Noo=r(q9e," \u2014 "),GP=n(q9e,"A",{href:!0});var ift=s(GP);qoo=r(ift,"FunnelConfig"),ift.forEach(t),joo=r(q9e," (Funnel Transformer model)"),q9e.forEach(t),Doo=i(L),Vm=n(L,"LI",{});var j9e=s(Vm);Fle=n(j9e,"STRONG",{});var dft=s(Fle);Goo=r(dft,"glpn"),dft.forEach(t),Ooo=r(j9e," \u2014 "),OP=n(j9e,"A",{href:!0});var cft=s(OP);Voo=r(cft,"GLPNConfig"),cft.forEach(t),Xoo=r(j9e," (GLPN model)"),j9e.forEach(t),zoo=i(L),Xm=n(L,"LI",{});var D9e=s(Xm);Tle=n(D9e,"STRONG",{});var fft=s(Tle);Woo=r(fft,"gpt2"),fft.forEach(t),Qoo=r(D9e," \u2014 "),VP=n(D9e,"A",{href:!0});var mft=s(VP);Uoo=r(mft,"GPT2Config"),mft.forEach(t),Hoo=r(D9e," (OpenAI GPT-2 model)"),D9e.forEach(t),Joo=i(L),zm=n(L,"LI",{});var G9e=s(zm);Mle=n(G9e,"STRONG",{});var gft=s(Mle);Yoo=r(gft,"gpt_neo"),gft.forEach(t),Koo=r(G9e," \u2014 "),XP=n(G9e,"A",{href:!0});var hft=s(XP);Zoo=r(hft,"GPTNeoConfig"),hft.forEach(t),ero=r(G9e," (GPT Neo model)"),G9e.forEach(t),oro=i(L),Wm=n(L,"LI",{});var O9e=s(Wm);Ele=n(O9e,"STRONG",{});var pft=s(Ele);rro=r(pft,"gpt_neox"),pft.forEach(t),tro=r(O9e," \u2014 "),zP=n(O9e,"A",{href:!0});var _ft=s(zP);aro=r(_ft,"GPTNeoXConfig"),_ft.forEach(t),nro=r(O9e," (GPT NeoX model)"),O9e.forEach(t),sro=i(L),Qm=n(L,"LI",{});var V9e=s(Qm);Cle=n(V9e,"STRONG",{});var uft=s(Cle);lro=r(uft,"gptj"),uft.forEach(t),iro=r(V9e," \u2014 "),WP=n(V9e,"A",{href:!0});var bft=s(WP);dro=r(bft,"GPTJConfig"),bft.forEach(t),cro=r(V9e," (GPT-J model)"),V9e.forEach(t),fro=i(L),Um=n(L,"LI",{});var X9e=s(Um);wle=n(X9e,"STRONG",{});var vft=s(wle);mro=r(vft,"groupvit"),vft.forEach(t),gro=r(X9e," \u2014 "),QP=n(X9e,"A",{href:!0});var Fft=s(QP);hro=r(Fft,"GroupViTConfig"),Fft.forEach(t),pro=r(X9e," (GroupViT model)"),X9e.forEach(t),_ro=i(L),Hm=n(L,"LI",{});var z9e=s(Hm);Ale=n(z9e,"STRONG",{});var Tft=s(Ale);uro=r(Tft,"hubert"),Tft.forEach(t),bro=r(z9e," \u2014 "),UP=n(z9e,"A",{href:!0});var Mft=s(UP);vro=r(Mft,"HubertConfig"),Mft.forEach(t),Fro=r(z9e," (Hubert model)"),z9e.forEach(t),Tro=i(L),Jm=n(L,"LI",{});var W9e=s(Jm);Lle=n(W9e,"STRONG",{});var Eft=s(Lle);Mro=r(Eft,"ibert"),Eft.forEach(t),Ero=r(W9e," \u2014 "),HP=n(W9e,"A",{href:!0});var Cft=s(HP);Cro=r(Cft,"IBertConfig"),Cft.forEach(t),wro=r(W9e," (I-BERT model)"),W9e.forEach(t),Aro=i(L),Ym=n(L,"LI",{});var Q9e=s(Ym);yle=n(Q9e,"STRONG",{});var wft=s(yle);Lro=r(wft,"imagegpt"),wft.forEach(t),yro=r(Q9e," \u2014 "),JP=n(Q9e,"A",{href:!0});var Aft=s(JP);xro=r(Aft,"ImageGPTConfig"),Aft.forEach(t),$ro=r(Q9e," (ImageGPT model)"),Q9e.forEach(t),kro=i(L),Km=n(L,"LI",{});var U9e=s(Km);xle=n(U9e,"STRONG",{});var Lft=s(xle);Sro=r(Lft,"layoutlm"),Lft.forEach(t),Rro=r(U9e," \u2014 "),YP=n(U9e,"A",{href:!0});var yft=s(YP);Pro=r(yft,"LayoutLMConfig"),yft.forEach(t),Bro=r(U9e," (LayoutLM model)"),U9e.forEach(t),Iro=i(L),Zm=n(L,"LI",{});var H9e=s(Zm);$le=n(H9e,"STRONG",{});var xft=s($le);Nro=r(xft,"layoutlmv2"),xft.forEach(t),qro=r(H9e," \u2014 "),KP=n(H9e,"A",{href:!0});var $ft=s(KP);jro=r($ft,"LayoutLMv2Config"),$ft.forEach(t),Dro=r(H9e," (LayoutLMv2 model)"),H9e.forEach(t),Gro=i(L),eg=n(L,"LI",{});var J9e=s(eg);kle=n(J9e,"STRONG",{});var kft=s(kle);Oro=r(kft,"layoutlmv3"),kft.forEach(t),Vro=r(J9e," \u2014 "),ZP=n(J9e,"A",{href:!0});var Sft=s(ZP);Xro=r(Sft,"LayoutLMv3Config"),Sft.forEach(t),zro=r(J9e," (LayoutLMv3 model)"),J9e.forEach(t),Wro=i(L),og=n(L,"LI",{});var Y9e=s(og);Sle=n(Y9e,"STRONG",{});var Rft=s(Sle);Qro=r(Rft,"led"),Rft.forEach(t),Uro=r(Y9e," \u2014 "),eB=n(Y9e,"A",{href:!0});var Pft=s(eB);Hro=r(Pft,"LEDConfig"),Pft.forEach(t),Jro=r(Y9e," (LED model)"),Y9e.forEach(t),Yro=i(L),rg=n(L,"LI",{});var K9e=s(rg);Rle=n(K9e,"STRONG",{});var Bft=s(Rle);Kro=r(Bft,"levit"),Bft.forEach(t),Zro=r(K9e," \u2014 "),oB=n(K9e,"A",{href:!0});var Ift=s(oB);eto=r(Ift,"LevitConfig"),Ift.forEach(t),oto=r(K9e," (LeViT model)"),K9e.forEach(t),rto=i(L),tg=n(L,"LI",{});var Z9e=s(tg);Ple=n(Z9e,"STRONG",{});var Nft=s(Ple);tto=r(Nft,"longformer"),Nft.forEach(t),ato=r(Z9e," \u2014 "),rB=n(Z9e,"A",{href:!0});var qft=s(rB);nto=r(qft,"LongformerConfig"),qft.forEach(t),sto=r(Z9e," (Longformer model)"),Z9e.forEach(t),lto=i(L),ag=n(L,"LI",{});var exe=s(ag);Ble=n(exe,"STRONG",{});var jft=s(Ble);ito=r(jft,"longt5"),jft.forEach(t),dto=r(exe," \u2014 "),tB=n(exe,"A",{href:!0});var Dft=s(tB);cto=r(Dft,"LongT5Config"),Dft.forEach(t),fto=r(exe," (LongT5 model)"),exe.forEach(t),mto=i(L),ng=n(L,"LI",{});var oxe=s(ng);Ile=n(oxe,"STRONG",{});var Gft=s(Ile);gto=r(Gft,"luke"),Gft.forEach(t),hto=r(oxe," \u2014 "),aB=n(oxe,"A",{href:!0});var Oft=s(aB);pto=r(Oft,"LukeConfig"),Oft.forEach(t),_to=r(oxe," (LUKE model)"),oxe.forEach(t),uto=i(L),sg=n(L,"LI",{});var rxe=s(sg);Nle=n(rxe,"STRONG",{});var Vft=s(Nle);bto=r(Vft,"lxmert"),Vft.forEach(t),vto=r(rxe," \u2014 "),nB=n(rxe,"A",{href:!0});var Xft=s(nB);Fto=r(Xft,"LxmertConfig"),Xft.forEach(t),Tto=r(rxe," (LXMERT model)"),rxe.forEach(t),Mto=i(L),lg=n(L,"LI",{});var txe=s(lg);qle=n(txe,"STRONG",{});var zft=s(qle);Eto=r(zft,"m2m_100"),zft.forEach(t),Cto=r(txe," \u2014 "),sB=n(txe,"A",{href:!0});var Wft=s(sB);wto=r(Wft,"M2M100Config"),Wft.forEach(t),Ato=r(txe," (M2M100 model)"),txe.forEach(t),Lto=i(L),ig=n(L,"LI",{});var axe=s(ig);jle=n(axe,"STRONG",{});var Qft=s(jle);yto=r(Qft,"marian"),Qft.forEach(t),xto=r(axe," \u2014 "),lB=n(axe,"A",{href:!0});var Uft=s(lB);$to=r(Uft,"MarianConfig"),Uft.forEach(t),kto=r(axe," (Marian model)"),axe.forEach(t),Sto=i(L),dg=n(L,"LI",{});var nxe=s(dg);Dle=n(nxe,"STRONG",{});var Hft=s(Dle);Rto=r(Hft,"maskformer"),Hft.forEach(t),Pto=r(nxe," \u2014 "),iB=n(nxe,"A",{href:!0});var Jft=s(iB);Bto=r(Jft,"MaskFormerConfig"),Jft.forEach(t),Ito=r(nxe," (MaskFormer model)"),nxe.forEach(t),Nto=i(L),cg=n(L,"LI",{});var sxe=s(cg);Gle=n(sxe,"STRONG",{});var Yft=s(Gle);qto=r(Yft,"mbart"),Yft.forEach(t),jto=r(sxe," \u2014 "),dB=n(sxe,"A",{href:!0});var Kft=s(dB);Dto=r(Kft,"MBartConfig"),Kft.forEach(t),Gto=r(sxe," (mBART model)"),sxe.forEach(t),Oto=i(L),fg=n(L,"LI",{});var lxe=s(fg);Ole=n(lxe,"STRONG",{});var Zft=s(Ole);Vto=r(Zft,"mctct"),Zft.forEach(t),Xto=r(lxe," \u2014 "),cB=n(lxe,"A",{href:!0});var emt=s(cB);zto=r(emt,"MCTCTConfig"),emt.forEach(t),Wto=r(lxe," (M-CTC-T model)"),lxe.forEach(t),Qto=i(L),mg=n(L,"LI",{});var ixe=s(mg);Vle=n(ixe,"STRONG",{});var omt=s(Vle);Uto=r(omt,"megatron-bert"),omt.forEach(t),Hto=r(ixe," \u2014 "),fB=n(ixe,"A",{href:!0});var rmt=s(fB);Jto=r(rmt,"MegatronBertConfig"),rmt.forEach(t),Yto=r(ixe," (Megatron-BERT model)"),ixe.forEach(t),Kto=i(L),gg=n(L,"LI",{});var dxe=s(gg);Xle=n(dxe,"STRONG",{});var tmt=s(Xle);Zto=r(tmt,"mobilebert"),tmt.forEach(t),eao=r(dxe," \u2014 "),mB=n(dxe,"A",{href:!0});var amt=s(mB);oao=r(amt,"MobileBertConfig"),amt.forEach(t),rao=r(dxe," (MobileBERT model)"),dxe.forEach(t),tao=i(L),hg=n(L,"LI",{});var cxe=s(hg);zle=n(cxe,"STRONG",{});var nmt=s(zle);aao=r(nmt,"mobilevit"),nmt.forEach(t),nao=r(cxe," \u2014 "),gB=n(cxe,"A",{href:!0});var smt=s(gB);sao=r(smt,"MobileViTConfig"),smt.forEach(t),lao=r(cxe," (MobileViT model)"),cxe.forEach(t),iao=i(L),pg=n(L,"LI",{});var fxe=s(pg);Wle=n(fxe,"STRONG",{});var lmt=s(Wle);dao=r(lmt,"mpnet"),lmt.forEach(t),cao=r(fxe," \u2014 "),hB=n(fxe,"A",{href:!0});var imt=s(hB);fao=r(imt,"MPNetConfig"),imt.forEach(t),mao=r(fxe," (MPNet model)"),fxe.forEach(t),gao=i(L),_g=n(L,"LI",{});var mxe=s(_g);Qle=n(mxe,"STRONG",{});var dmt=s(Qle);hao=r(dmt,"mt5"),dmt.forEach(t),pao=r(mxe," \u2014 "),pB=n(mxe,"A",{href:!0});var cmt=s(pB);_ao=r(cmt,"MT5Config"),cmt.forEach(t),uao=r(mxe," (MT5 model)"),mxe.forEach(t),bao=i(L),ug=n(L,"LI",{});var gxe=s(ug);Ule=n(gxe,"STRONG",{});var fmt=s(Ule);vao=r(fmt,"mvp"),fmt.forEach(t),Fao=r(gxe," \u2014 "),_B=n(gxe,"A",{href:!0});var mmt=s(_B);Tao=r(mmt,"MvpConfig"),mmt.forEach(t),Mao=r(gxe," (MVP model)"),gxe.forEach(t),Eao=i(L),bg=n(L,"LI",{});var hxe=s(bg);Hle=n(hxe,"STRONG",{});var gmt=s(Hle);Cao=r(gmt,"nezha"),gmt.forEach(t),wao=r(hxe," \u2014 "),uB=n(hxe,"A",{href:!0});var hmt=s(uB);Aao=r(hmt,"NezhaConfig"),hmt.forEach(t),Lao=r(hxe," (Nezha model)"),hxe.forEach(t),yao=i(L),vg=n(L,"LI",{});var pxe=s(vg);Jle=n(pxe,"STRONG",{});var pmt=s(Jle);xao=r(pmt,"nystromformer"),pmt.forEach(t),$ao=r(pxe," \u2014 "),bB=n(pxe,"A",{href:!0});var _mt=s(bB);kao=r(_mt,"NystromformerConfig"),_mt.forEach(t),Sao=r(pxe," (Nystr\xF6mformer model)"),pxe.forEach(t),Rao=i(L),Fg=n(L,"LI",{});var _xe=s(Fg);Yle=n(_xe,"STRONG",{});var umt=s(Yle);Pao=r(umt,"openai-gpt"),umt.forEach(t),Bao=r(_xe," \u2014 "),vB=n(_xe,"A",{href:!0});var bmt=s(vB);Iao=r(bmt,"OpenAIGPTConfig"),bmt.forEach(t),Nao=r(_xe," (OpenAI GPT model)"),_xe.forEach(t),qao=i(L),Tg=n(L,"LI",{});var uxe=s(Tg);Kle=n(uxe,"STRONG",{});var vmt=s(Kle);jao=r(vmt,"opt"),vmt.forEach(t),Dao=r(uxe," \u2014 "),FB=n(uxe,"A",{href:!0});var Fmt=s(FB);Gao=r(Fmt,"OPTConfig"),Fmt.forEach(t),Oao=r(uxe," (OPT model)"),uxe.forEach(t),Vao=i(L),Mg=n(L,"LI",{});var bxe=s(Mg);Zle=n(bxe,"STRONG",{});var Tmt=s(Zle);Xao=r(Tmt,"owlvit"),Tmt.forEach(t),zao=r(bxe," \u2014 "),TB=n(bxe,"A",{href:!0});var Mmt=s(TB);Wao=r(Mmt,"OwlViTConfig"),Mmt.forEach(t),Qao=r(bxe," (OWL-ViT model)"),bxe.forEach(t),Uao=i(L),Eg=n(L,"LI",{});var vxe=s(Eg);eie=n(vxe,"STRONG",{});var Emt=s(eie);Hao=r(Emt,"pegasus"),Emt.forEach(t),Jao=r(vxe," \u2014 "),MB=n(vxe,"A",{href:!0});var Cmt=s(MB);Yao=r(Cmt,"PegasusConfig"),Cmt.forEach(t),Kao=r(vxe," (Pegasus model)"),vxe.forEach(t),Zao=i(L),Cg=n(L,"LI",{});var Fxe=s(Cg);oie=n(Fxe,"STRONG",{});var wmt=s(oie);eno=r(wmt,"perceiver"),wmt.forEach(t),ono=r(Fxe," \u2014 "),EB=n(Fxe,"A",{href:!0});var Amt=s(EB);rno=r(Amt,"PerceiverConfig"),Amt.forEach(t),tno=r(Fxe," (Perceiver model)"),Fxe.forEach(t),ano=i(L),wg=n(L,"LI",{});var Txe=s(wg);rie=n(Txe,"STRONG",{});var Lmt=s(rie);nno=r(Lmt,"plbart"),Lmt.forEach(t),sno=r(Txe," \u2014 "),CB=n(Txe,"A",{href:!0});var ymt=s(CB);lno=r(ymt,"PLBartConfig"),ymt.forEach(t),ino=r(Txe," (PLBart model)"),Txe.forEach(t),dno=i(L),Ag=n(L,"LI",{});var Mxe=s(Ag);tie=n(Mxe,"STRONG",{});var xmt=s(tie);cno=r(xmt,"poolformer"),xmt.forEach(t),fno=r(Mxe," \u2014 "),wB=n(Mxe,"A",{href:!0});var $mt=s(wB);mno=r($mt,"PoolFormerConfig"),$mt.forEach(t),gno=r(Mxe," (PoolFormer model)"),Mxe.forEach(t),hno=i(L),Lg=n(L,"LI",{});var Exe=s(Lg);aie=n(Exe,"STRONG",{});var kmt=s(aie);pno=r(kmt,"prophetnet"),kmt.forEach(t),_no=r(Exe," \u2014 "),AB=n(Exe,"A",{href:!0});var Smt=s(AB);uno=r(Smt,"ProphetNetConfig"),Smt.forEach(t),bno=r(Exe," (ProphetNet model)"),Exe.forEach(t),vno=i(L),yg=n(L,"LI",{});var Cxe=s(yg);nie=n(Cxe,"STRONG",{});var Rmt=s(nie);Fno=r(Rmt,"qdqbert"),Rmt.forEach(t),Tno=r(Cxe," \u2014 "),LB=n(Cxe,"A",{href:!0});var Pmt=s(LB);Mno=r(Pmt,"QDQBertConfig"),Pmt.forEach(t),Eno=r(Cxe," (QDQBert model)"),Cxe.forEach(t),Cno=i(L),xg=n(L,"LI",{});var wxe=s(xg);sie=n(wxe,"STRONG",{});var Bmt=s(sie);wno=r(Bmt,"rag"),Bmt.forEach(t),Ano=r(wxe," \u2014 "),yB=n(wxe,"A",{href:!0});var Imt=s(yB);Lno=r(Imt,"RagConfig"),Imt.forEach(t),yno=r(wxe," (RAG model)"),wxe.forEach(t),xno=i(L),$g=n(L,"LI",{});var Axe=s($g);lie=n(Axe,"STRONG",{});var Nmt=s(lie);$no=r(Nmt,"realm"),Nmt.forEach(t),kno=r(Axe," \u2014 "),xB=n(Axe,"A",{href:!0});var qmt=s(xB);Sno=r(qmt,"RealmConfig"),qmt.forEach(t),Rno=r(Axe," (REALM model)"),Axe.forEach(t),Pno=i(L),kg=n(L,"LI",{});var Lxe=s(kg);iie=n(Lxe,"STRONG",{});var jmt=s(iie);Bno=r(jmt,"reformer"),jmt.forEach(t),Ino=r(Lxe," \u2014 "),$B=n(Lxe,"A",{href:!0});var Dmt=s($B);Nno=r(Dmt,"ReformerConfig"),Dmt.forEach(t),qno=r(Lxe," (Reformer model)"),Lxe.forEach(t),jno=i(L),Sg=n(L,"LI",{});var yxe=s(Sg);die=n(yxe,"STRONG",{});var Gmt=s(die);Dno=r(Gmt,"regnet"),Gmt.forEach(t),Gno=r(yxe," \u2014 "),kB=n(yxe,"A",{href:!0});var Omt=s(kB);Ono=r(Omt,"RegNetConfig"),Omt.forEach(t),Vno=r(yxe," (RegNet model)"),yxe.forEach(t),Xno=i(L),Rg=n(L,"LI",{});var xxe=s(Rg);cie=n(xxe,"STRONG",{});var Vmt=s(cie);zno=r(Vmt,"rembert"),Vmt.forEach(t),Wno=r(xxe," \u2014 "),SB=n(xxe,"A",{href:!0});var Xmt=s(SB);Qno=r(Xmt,"RemBertConfig"),Xmt.forEach(t),Uno=r(xxe," (RemBERT model)"),xxe.forEach(t),Hno=i(L),Pg=n(L,"LI",{});var $xe=s(Pg);fie=n($xe,"STRONG",{});var zmt=s(fie);Jno=r(zmt,"resnet"),zmt.forEach(t),Yno=r($xe," \u2014 "),RB=n($xe,"A",{href:!0});var Wmt=s(RB);Kno=r(Wmt,"ResNetConfig"),Wmt.forEach(t),Zno=r($xe," (ResNet model)"),$xe.forEach(t),eso=i(L),Bg=n(L,"LI",{});var kxe=s(Bg);mie=n(kxe,"STRONG",{});var Qmt=s(mie);oso=r(Qmt,"retribert"),Qmt.forEach(t),rso=r(kxe," \u2014 "),PB=n(kxe,"A",{href:!0});var Umt=s(PB);tso=r(Umt,"RetriBertConfig"),Umt.forEach(t),aso=r(kxe," (RetriBERT model)"),kxe.forEach(t),nso=i(L),Ig=n(L,"LI",{});var Sxe=s(Ig);gie=n(Sxe,"STRONG",{});var Hmt=s(gie);sso=r(Hmt,"roberta"),Hmt.forEach(t),lso=r(Sxe," \u2014 "),BB=n(Sxe,"A",{href:!0});var Jmt=s(BB);iso=r(Jmt,"RobertaConfig"),Jmt.forEach(t),dso=r(Sxe," (RoBERTa model)"),Sxe.forEach(t),cso=i(L),Ng=n(L,"LI",{});var Rxe=s(Ng);hie=n(Rxe,"STRONG",{});var Ymt=s(hie);fso=r(Ymt,"roformer"),Ymt.forEach(t),mso=r(Rxe," \u2014 "),IB=n(Rxe,"A",{href:!0});var Kmt=s(IB);gso=r(Kmt,"RoFormerConfig"),Kmt.forEach(t),hso=r(Rxe," (RoFormer model)"),Rxe.forEach(t),pso=i(L),qg=n(L,"LI",{});var Pxe=s(qg);pie=n(Pxe,"STRONG",{});var Zmt=s(pie);_so=r(Zmt,"segformer"),Zmt.forEach(t),uso=r(Pxe," \u2014 "),NB=n(Pxe,"A",{href:!0});var egt=s(NB);bso=r(egt,"SegformerConfig"),egt.forEach(t),vso=r(Pxe," (SegFormer model)"),Pxe.forEach(t),Fso=i(L),jg=n(L,"LI",{});var Bxe=s(jg);_ie=n(Bxe,"STRONG",{});var ogt=s(_ie);Tso=r(ogt,"sew"),ogt.forEach(t),Mso=r(Bxe," \u2014 "),qB=n(Bxe,"A",{href:!0});var rgt=s(qB);Eso=r(rgt,"SEWConfig"),rgt.forEach(t),Cso=r(Bxe," (SEW model)"),Bxe.forEach(t),wso=i(L),Dg=n(L,"LI",{});var Ixe=s(Dg);uie=n(Ixe,"STRONG",{});var tgt=s(uie);Aso=r(tgt,"sew-d"),tgt.forEach(t),Lso=r(Ixe," \u2014 "),jB=n(Ixe,"A",{href:!0});var agt=s(jB);yso=r(agt,"SEWDConfig"),agt.forEach(t),xso=r(Ixe," (SEW-D model)"),Ixe.forEach(t),$so=i(L),Gg=n(L,"LI",{});var Nxe=s(Gg);bie=n(Nxe,"STRONG",{});var ngt=s(bie);kso=r(ngt,"speech-encoder-decoder"),ngt.forEach(t),Sso=r(Nxe," \u2014 "),DB=n(Nxe,"A",{href:!0});var sgt=s(DB);Rso=r(sgt,"SpeechEncoderDecoderConfig"),sgt.forEach(t),Pso=r(Nxe," (Speech Encoder decoder model)"),Nxe.forEach(t),Bso=i(L),Og=n(L,"LI",{});var qxe=s(Og);vie=n(qxe,"STRONG",{});var lgt=s(vie);Iso=r(lgt,"speech_to_text"),lgt.forEach(t),Nso=r(qxe," \u2014 "),GB=n(qxe,"A",{href:!0});var igt=s(GB);qso=r(igt,"Speech2TextConfig"),igt.forEach(t),jso=r(qxe," (Speech2Text model)"),qxe.forEach(t),Dso=i(L),Vg=n(L,"LI",{});var jxe=s(Vg);Fie=n(jxe,"STRONG",{});var dgt=s(Fie);Gso=r(dgt,"speech_to_text_2"),dgt.forEach(t),Oso=r(jxe," \u2014 "),OB=n(jxe,"A",{href:!0});var cgt=s(OB);Vso=r(cgt,"Speech2Text2Config"),cgt.forEach(t),Xso=r(jxe," (Speech2Text2 model)"),jxe.forEach(t),zso=i(L),Xg=n(L,"LI",{});var Dxe=s(Xg);Tie=n(Dxe,"STRONG",{});var fgt=s(Tie);Wso=r(fgt,"splinter"),fgt.forEach(t),Qso=r(Dxe," \u2014 "),VB=n(Dxe,"A",{href:!0});var mgt=s(VB);Uso=r(mgt,"SplinterConfig"),mgt.forEach(t),Hso=r(Dxe," (Splinter model)"),Dxe.forEach(t),Jso=i(L),zg=n(L,"LI",{});var Gxe=s(zg);Mie=n(Gxe,"STRONG",{});var ggt=s(Mie);Yso=r(ggt,"squeezebert"),ggt.forEach(t),Kso=r(Gxe," \u2014 "),XB=n(Gxe,"A",{href:!0});var hgt=s(XB);Zso=r(hgt,"SqueezeBertConfig"),hgt.forEach(t),elo=r(Gxe," (SqueezeBERT model)"),Gxe.forEach(t),olo=i(L),Wg=n(L,"LI",{});var Oxe=s(Wg);Eie=n(Oxe,"STRONG",{});var pgt=s(Eie);rlo=r(pgt,"swin"),pgt.forEach(t),tlo=r(Oxe," \u2014 "),zB=n(Oxe,"A",{href:!0});var _gt=s(zB);alo=r(_gt,"SwinConfig"),_gt.forEach(t),nlo=r(Oxe," (Swin Transformer model)"),Oxe.forEach(t),slo=i(L),Qg=n(L,"LI",{});var Vxe=s(Qg);Cie=n(Vxe,"STRONG",{});var ugt=s(Cie);llo=r(ugt,"swinv2"),ugt.forEach(t),ilo=r(Vxe," \u2014 "),WB=n(Vxe,"A",{href:!0});var bgt=s(WB);dlo=r(bgt,"Swinv2Config"),bgt.forEach(t),clo=r(Vxe," (Swin Transformer V2 model)"),Vxe.forEach(t),flo=i(L),Ug=n(L,"LI",{});var Xxe=s(Ug);wie=n(Xxe,"STRONG",{});var vgt=s(wie);mlo=r(vgt,"t5"),vgt.forEach(t),glo=r(Xxe," \u2014 "),QB=n(Xxe,"A",{href:!0});var Fgt=s(QB);hlo=r(Fgt,"T5Config"),Fgt.forEach(t),plo=r(Xxe," (T5 model)"),Xxe.forEach(t),_lo=i(L),Hg=n(L,"LI",{});var zxe=s(Hg);Aie=n(zxe,"STRONG",{});var Tgt=s(Aie);ulo=r(Tgt,"tapas"),Tgt.forEach(t),blo=r(zxe," \u2014 "),UB=n(zxe,"A",{href:!0});var Mgt=s(UB);vlo=r(Mgt,"TapasConfig"),Mgt.forEach(t),Flo=r(zxe," (TAPAS model)"),zxe.forEach(t),Tlo=i(L),Jg=n(L,"LI",{});var Wxe=s(Jg);Lie=n(Wxe,"STRONG",{});var Egt=s(Lie);Mlo=r(Egt,"trajectory_transformer"),Egt.forEach(t),Elo=r(Wxe," \u2014 "),HB=n(Wxe,"A",{href:!0});var Cgt=s(HB);Clo=r(Cgt,"TrajectoryTransformerConfig"),Cgt.forEach(t),wlo=r(Wxe," (Trajectory Transformer model)"),Wxe.forEach(t),Alo=i(L),Yg=n(L,"LI",{});var Qxe=s(Yg);yie=n(Qxe,"STRONG",{});var wgt=s(yie);Llo=r(wgt,"transfo-xl"),wgt.forEach(t),ylo=r(Qxe," \u2014 "),JB=n(Qxe,"A",{href:!0});var Agt=s(JB);xlo=r(Agt,"TransfoXLConfig"),Agt.forEach(t),$lo=r(Qxe," (Transformer-XL model)"),Qxe.forEach(t),klo=i(L),Kg=n(L,"LI",{});var Uxe=s(Kg);xie=n(Uxe,"STRONG",{});var Lgt=s(xie);Slo=r(Lgt,"trocr"),Lgt.forEach(t),Rlo=r(Uxe," \u2014 "),YB=n(Uxe,"A",{href:!0});var ygt=s(YB);Plo=r(ygt,"TrOCRConfig"),ygt.forEach(t),Blo=r(Uxe," (TrOCR model)"),Uxe.forEach(t),Ilo=i(L),Zg=n(L,"LI",{});var Hxe=s(Zg);$ie=n(Hxe,"STRONG",{});var xgt=s($ie);Nlo=r(xgt,"unispeech"),xgt.forEach(t),qlo=r(Hxe," \u2014 "),KB=n(Hxe,"A",{href:!0});var $gt=s(KB);jlo=r($gt,"UniSpeechConfig"),$gt.forEach(t),Dlo=r(Hxe," (UniSpeech model)"),Hxe.forEach(t),Glo=i(L),eh=n(L,"LI",{});var Jxe=s(eh);kie=n(Jxe,"STRONG",{});var kgt=s(kie);Olo=r(kgt,"unispeech-sat"),kgt.forEach(t),Vlo=r(Jxe," \u2014 "),ZB=n(Jxe,"A",{href:!0});var Sgt=s(ZB);Xlo=r(Sgt,"UniSpeechSatConfig"),Sgt.forEach(t),zlo=r(Jxe," (UniSpeechSat model)"),Jxe.forEach(t),Wlo=i(L),oh=n(L,"LI",{});var Yxe=s(oh);Sie=n(Yxe,"STRONG",{});var Rgt=s(Sie);Qlo=r(Rgt,"van"),Rgt.forEach(t),Ulo=r(Yxe," \u2014 "),eI=n(Yxe,"A",{href:!0});var Pgt=s(eI);Hlo=r(Pgt,"VanConfig"),Pgt.forEach(t),Jlo=r(Yxe," (VAN model)"),Yxe.forEach(t),Ylo=i(L),rh=n(L,"LI",{});var Kxe=s(rh);Rie=n(Kxe,"STRONG",{});var Bgt=s(Rie);Klo=r(Bgt,"videomae"),Bgt.forEach(t),Zlo=r(Kxe," \u2014 "),oI=n(Kxe,"A",{href:!0});var Igt=s(oI);eio=r(Igt,"VideoMAEConfig"),Igt.forEach(t),oio=r(Kxe," (VideoMAE model)"),Kxe.forEach(t),rio=i(L),th=n(L,"LI",{});var Zxe=s(th);Pie=n(Zxe,"STRONG",{});var Ngt=s(Pie);tio=r(Ngt,"vilt"),Ngt.forEach(t),aio=r(Zxe," \u2014 "),rI=n(Zxe,"A",{href:!0});var qgt=s(rI);nio=r(qgt,"ViltConfig"),qgt.forEach(t),sio=r(Zxe," (ViLT model)"),Zxe.forEach(t),lio=i(L),ah=n(L,"LI",{});var e$e=s(ah);Bie=n(e$e,"STRONG",{});var jgt=s(Bie);iio=r(jgt,"vision-encoder-decoder"),jgt.forEach(t),dio=r(e$e," \u2014 "),tI=n(e$e,"A",{href:!0});var Dgt=s(tI);cio=r(Dgt,"VisionEncoderDecoderConfig"),Dgt.forEach(t),fio=r(e$e," (Vision Encoder decoder model)"),e$e.forEach(t),mio=i(L),nh=n(L,"LI",{});var o$e=s(nh);Iie=n(o$e,"STRONG",{});var Ggt=s(Iie);gio=r(Ggt,"vision-text-dual-encoder"),Ggt.forEach(t),hio=r(o$e," \u2014 "),aI=n(o$e,"A",{href:!0});var Ogt=s(aI);pio=r(Ogt,"VisionTextDualEncoderConfig"),Ogt.forEach(t),_io=r(o$e," (VisionTextDualEncoder model)"),o$e.forEach(t),uio=i(L),sh=n(L,"LI",{});var r$e=s(sh);Nie=n(r$e,"STRONG",{});var Vgt=s(Nie);bio=r(Vgt,"visual_bert"),Vgt.forEach(t),vio=r(r$e," \u2014 "),nI=n(r$e,"A",{href:!0});var Xgt=s(nI);Fio=r(Xgt,"VisualBertConfig"),Xgt.forEach(t),Tio=r(r$e," (VisualBERT model)"),r$e.forEach(t),Mio=i(L),lh=n(L,"LI",{});var t$e=s(lh);qie=n(t$e,"STRONG",{});var zgt=s(qie);Eio=r(zgt,"vit"),zgt.forEach(t),Cio=r(t$e," \u2014 "),sI=n(t$e,"A",{href:!0});var Wgt=s(sI);wio=r(Wgt,"ViTConfig"),Wgt.forEach(t),Aio=r(t$e," (ViT model)"),t$e.forEach(t),Lio=i(L),ih=n(L,"LI",{});var a$e=s(ih);jie=n(a$e,"STRONG",{});var Qgt=s(jie);yio=r(Qgt,"vit_mae"),Qgt.forEach(t),xio=r(a$e," \u2014 "),lI=n(a$e,"A",{href:!0});var Ugt=s(lI);$io=r(Ugt,"ViTMAEConfig"),Ugt.forEach(t),kio=r(a$e," (ViTMAE model)"),a$e.forEach(t),Sio=i(L),dh=n(L,"LI",{});var n$e=s(dh);Die=n(n$e,"STRONG",{});var Hgt=s(Die);Rio=r(Hgt,"wav2vec2"),Hgt.forEach(t),Pio=r(n$e," \u2014 "),iI=n(n$e,"A",{href:!0});var Jgt=s(iI);Bio=r(Jgt,"Wav2Vec2Config"),Jgt.forEach(t),Iio=r(n$e," (Wav2Vec2 model)"),n$e.forEach(t),Nio=i(L),ch=n(L,"LI",{});var s$e=s(ch);Gie=n(s$e,"STRONG",{});var Ygt=s(Gie);qio=r(Ygt,"wav2vec2-conformer"),Ygt.forEach(t),jio=r(s$e," \u2014 "),dI=n(s$e,"A",{href:!0});var Kgt=s(dI);Dio=r(Kgt,"Wav2Vec2ConformerConfig"),Kgt.forEach(t),Gio=r(s$e," (Wav2Vec2-Conformer model)"),s$e.forEach(t),Oio=i(L),fh=n(L,"LI",{});var l$e=s(fh);Oie=n(l$e,"STRONG",{});var Zgt=s(Oie);Vio=r(Zgt,"wavlm"),Zgt.forEach(t),Xio=r(l$e," \u2014 "),cI=n(l$e,"A",{href:!0});var eht=s(cI);zio=r(eht,"WavLMConfig"),eht.forEach(t),Wio=r(l$e," (WavLM model)"),l$e.forEach(t),Qio=i(L),mh=n(L,"LI",{});var i$e=s(mh);Vie=n(i$e,"STRONG",{});var oht=s(Vie);Uio=r(oht,"xglm"),oht.forEach(t),Hio=r(i$e," \u2014 "),fI=n(i$e,"A",{href:!0});var rht=s(fI);Jio=r(rht,"XGLMConfig"),rht.forEach(t),Yio=r(i$e," (XGLM model)"),i$e.forEach(t),Kio=i(L),gh=n(L,"LI",{});var d$e=s(gh);Xie=n(d$e,"STRONG",{});var tht=s(Xie);Zio=r(tht,"xlm"),tht.forEach(t),edo=r(d$e," \u2014 "),mI=n(d$e,"A",{href:!0});var aht=s(mI);odo=r(aht,"XLMConfig"),aht.forEach(t),rdo=r(d$e," (XLM model)"),d$e.forEach(t),tdo=i(L),hh=n(L,"LI",{});var c$e=s(hh);zie=n(c$e,"STRONG",{});var nht=s(zie);ado=r(nht,"xlm-prophetnet"),nht.forEach(t),ndo=r(c$e," \u2014 "),gI=n(c$e,"A",{href:!0});var sht=s(gI);sdo=r(sht,"XLMProphetNetConfig"),sht.forEach(t),ldo=r(c$e," (XLM-ProphetNet model)"),c$e.forEach(t),ido=i(L),ph=n(L,"LI",{});var f$e=s(ph);Wie=n(f$e,"STRONG",{});var lht=s(Wie);ddo=r(lht,"xlm-roberta"),lht.forEach(t),cdo=r(f$e," \u2014 "),hI=n(f$e,"A",{href:!0});var iht=s(hI);fdo=r(iht,"XLMRobertaConfig"),iht.forEach(t),mdo=r(f$e," (XLM-RoBERTa model)"),f$e.forEach(t),gdo=i(L),_h=n(L,"LI",{});var m$e=s(_h);Qie=n(m$e,"STRONG",{});var dht=s(Qie);hdo=r(dht,"xlm-roberta-xl"),dht.forEach(t),pdo=r(m$e," \u2014 "),pI=n(m$e,"A",{href:!0});var cht=s(pI);_do=r(cht,"XLMRobertaXLConfig"),cht.forEach(t),udo=r(m$e," (XLM-RoBERTa-XL model)"),m$e.forEach(t),bdo=i(L),uh=n(L,"LI",{});var g$e=s(uh);Uie=n(g$e,"STRONG",{});var fht=s(Uie);vdo=r(fht,"xlnet"),fht.forEach(t),Fdo=r(g$e," \u2014 "),_I=n(g$e,"A",{href:!0});var mht=s(_I);Tdo=r(mht,"XLNetConfig"),mht.forEach(t),Mdo=r(g$e," (XLNet model)"),g$e.forEach(t),Edo=i(L),bh=n(L,"LI",{});var h$e=s(bh);Hie=n(h$e,"STRONG",{});var ght=s(Hie);Cdo=r(ght,"yolos"),ght.forEach(t),wdo=r(h$e," \u2014 "),uI=n(h$e,"A",{href:!0});var hht=s(uI);Ado=r(hht,"YolosConfig"),hht.forEach(t),Ldo=r(h$e," (YOLOS model)"),h$e.forEach(t),ydo=i(L),vh=n(L,"LI",{});var p$e=s(vh);Jie=n(p$e,"STRONG",{});var pht=s(Jie);xdo=r(pht,"yoso"),pht.forEach(t),$do=r(p$e," \u2014 "),bI=n(p$e,"A",{href:!0});var _ht=s(bI);kdo=r(_ht,"YosoConfig"),_ht.forEach(t),Sdo=r(p$e," (YOSO model)"),p$e.forEach(t),L.forEach(t),Rdo=i(ct),T(Fh.$$.fragment,ct),ct.forEach(t),Pdo=i(dt),Th=n(dt,"DIV",{class:!0});var PHe=s(Th);T(_y.$$.fragment,PHe),Bdo=i(PHe),Yie=n(PHe,"P",{});var uht=s(Yie);Ido=r(uht,"Register a new configuration for this class."),uht.forEach(t),PHe.forEach(t),dt.forEach(t),kQe=i(f),Ki=n(f,"H2",{class:!0});var BHe=s(Ki);Mh=n(BHe,"A",{id:!0,class:!0,href:!0});var bht=s(Mh);Kie=n(bht,"SPAN",{});var vht=s(Kie);T(uy.$$.fragment,vht),vht.forEach(t),bht.forEach(t),Ndo=i(BHe),Zie=n(BHe,"SPAN",{});var Fht=s(Zie);qdo=r(Fht,"AutoTokenizer"),Fht.forEach(t),BHe.forEach(t),SQe=i(f),xo=n(f,"DIV",{class:!0});var cl=s(xo);T(by.$$.fragment,cl),jdo=i(cl),vy=n(cl,"P",{});var IHe=s(vy);Ddo=r(IHe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vI=n(IHe,"A",{href:!0});var Tht=s(vI);Gdo=r(Tht,"AutoTokenizer.from_pretrained()"),Tht.forEach(t),Odo=r(IHe," class method."),IHe.forEach(t),Vdo=i(cl),Fy=n(cl,"P",{});var NHe=s(Fy);Xdo=r(NHe,"This class cannot be instantiated directly using "),ede=n(NHe,"CODE",{});var Mht=s(ede);zdo=r(Mht,"__init__()"),Mht.forEach(t),Wdo=r(NHe," (throws an error)."),NHe.forEach(t),Qdo=i(cl),Sr=n(cl,"DIV",{class:!0});var fl=s(Sr);T(Ty.$$.fragment,fl),Udo=i(fl),ode=n(fl,"P",{});var Eht=s(ode);Hdo=r(Eht,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Eht.forEach(t),Jdo=i(fl),Ga=n(fl,"P",{});var s7=s(Ga);Ydo=r(s7,"The tokenizer class to instantiate is selected based on the "),rde=n(s7,"CODE",{});var Cht=s(rde);Kdo=r(Cht,"model_type"),Cht.forEach(t),Zdo=r(s7,` property of the config object (either
passed as an argument or loaded from `),tde=n(s7,"CODE",{});var wht=s(tde);eco=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),oco=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(s7,"CODE",{});var Aht=s(ade);rco=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),tco=r(s7,":"),s7.forEach(t),aco=i(fl),k=n(fl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var qS=s(Hn);nde=n(qS,"STRONG",{});var Lht=s(nde);nco=r(Lht,"albert"),Lht.forEach(t),sco=r(qS," \u2014 "),FI=n(qS,"A",{href:!0});var yht=s(FI);lco=r(yht,"AlbertTokenizer"),yht.forEach(t),ico=r(qS," or "),TI=n(qS,"A",{href:!0});var xht=s(TI);dco=r(xht,"AlbertTokenizerFast"),xht.forEach(t),cco=r(qS," (ALBERT model)"),qS.forEach(t),fco=i(S),Jn=n(S,"LI",{});var jS=s(Jn);sde=n(jS,"STRONG",{});var $ht=s(sde);mco=r($ht,"bart"),$ht.forEach(t),gco=r(jS," \u2014 "),MI=n(jS,"A",{href:!0});var kht=s(MI);hco=r(kht,"BartTokenizer"),kht.forEach(t),pco=r(jS," or "),EI=n(jS,"A",{href:!0});var Sht=s(EI);_co=r(Sht,"BartTokenizerFast"),Sht.forEach(t),uco=r(jS," (BART model)"),jS.forEach(t),bco=i(S),Yn=n(S,"LI",{});var DS=s(Yn);lde=n(DS,"STRONG",{});var Rht=s(lde);vco=r(Rht,"barthez"),Rht.forEach(t),Fco=r(DS," \u2014 "),CI=n(DS,"A",{href:!0});var Pht=s(CI);Tco=r(Pht,"BarthezTokenizer"),Pht.forEach(t),Mco=r(DS," or "),wI=n(DS,"A",{href:!0});var Bht=s(wI);Eco=r(Bht,"BarthezTokenizerFast"),Bht.forEach(t),Cco=r(DS," (BARThez model)"),DS.forEach(t),wco=i(S),Eh=n(S,"LI",{});var _$e=s(Eh);ide=n(_$e,"STRONG",{});var Iht=s(ide);Aco=r(Iht,"bartpho"),Iht.forEach(t),Lco=r(_$e," \u2014 "),AI=n(_$e,"A",{href:!0});var Nht=s(AI);yco=r(Nht,"BartphoTokenizer"),Nht.forEach(t),xco=r(_$e," (BARTpho model)"),_$e.forEach(t),$co=i(S),Kn=n(S,"LI",{});var GS=s(Kn);dde=n(GS,"STRONG",{});var qht=s(dde);kco=r(qht,"bert"),qht.forEach(t),Sco=r(GS," \u2014 "),LI=n(GS,"A",{href:!0});var jht=s(LI);Rco=r(jht,"BertTokenizer"),jht.forEach(t),Pco=r(GS," or "),yI=n(GS,"A",{href:!0});var Dht=s(yI);Bco=r(Dht,"BertTokenizerFast"),Dht.forEach(t),Ico=r(GS," (BERT model)"),GS.forEach(t),Nco=i(S),Ch=n(S,"LI",{});var u$e=s(Ch);cde=n(u$e,"STRONG",{});var Ght=s(cde);qco=r(Ght,"bert-generation"),Ght.forEach(t),jco=r(u$e," \u2014 "),xI=n(u$e,"A",{href:!0});var Oht=s(xI);Dco=r(Oht,"BertGenerationTokenizer"),Oht.forEach(t),Gco=r(u$e," (Bert Generation model)"),u$e.forEach(t),Oco=i(S),wh=n(S,"LI",{});var b$e=s(wh);fde=n(b$e,"STRONG",{});var Vht=s(fde);Vco=r(Vht,"bert-japanese"),Vht.forEach(t),Xco=r(b$e," \u2014 "),$I=n(b$e,"A",{href:!0});var Xht=s($I);zco=r(Xht,"BertJapaneseTokenizer"),Xht.forEach(t),Wco=r(b$e," (BertJapanese model)"),b$e.forEach(t),Qco=i(S),Ah=n(S,"LI",{});var v$e=s(Ah);mde=n(v$e,"STRONG",{});var zht=s(mde);Uco=r(zht,"bertweet"),zht.forEach(t),Hco=r(v$e," \u2014 "),kI=n(v$e,"A",{href:!0});var Wht=s(kI);Jco=r(Wht,"BertweetTokenizer"),Wht.forEach(t),Yco=r(v$e," (BERTweet model)"),v$e.forEach(t),Kco=i(S),Zn=n(S,"LI",{});var OS=s(Zn);gde=n(OS,"STRONG",{});var Qht=s(gde);Zco=r(Qht,"big_bird"),Qht.forEach(t),efo=r(OS," \u2014 "),SI=n(OS,"A",{href:!0});var Uht=s(SI);ofo=r(Uht,"BigBirdTokenizer"),Uht.forEach(t),rfo=r(OS," or "),RI=n(OS,"A",{href:!0});var Hht=s(RI);tfo=r(Hht,"BigBirdTokenizerFast"),Hht.forEach(t),afo=r(OS," (BigBird model)"),OS.forEach(t),nfo=i(S),es=n(S,"LI",{});var VS=s(es);hde=n(VS,"STRONG",{});var Jht=s(hde);sfo=r(Jht,"bigbird_pegasus"),Jht.forEach(t),lfo=r(VS," \u2014 "),PI=n(VS,"A",{href:!0});var Yht=s(PI);ifo=r(Yht,"PegasusTokenizer"),Yht.forEach(t),dfo=r(VS," or "),BI=n(VS,"A",{href:!0});var Kht=s(BI);cfo=r(Kht,"PegasusTokenizerFast"),Kht.forEach(t),ffo=r(VS," (BigBird-Pegasus model)"),VS.forEach(t),mfo=i(S),os=n(S,"LI",{});var XS=s(os);pde=n(XS,"STRONG",{});var Zht=s(pde);gfo=r(Zht,"blenderbot"),Zht.forEach(t),hfo=r(XS," \u2014 "),II=n(XS,"A",{href:!0});var ept=s(II);pfo=r(ept,"BlenderbotTokenizer"),ept.forEach(t),_fo=r(XS," or "),NI=n(XS,"A",{href:!0});var opt=s(NI);ufo=r(opt,"BlenderbotTokenizerFast"),opt.forEach(t),bfo=r(XS," (Blenderbot model)"),XS.forEach(t),vfo=i(S),Lh=n(S,"LI",{});var F$e=s(Lh);_de=n(F$e,"STRONG",{});var rpt=s(_de);Ffo=r(rpt,"blenderbot-small"),rpt.forEach(t),Tfo=r(F$e," \u2014 "),qI=n(F$e,"A",{href:!0});var tpt=s(qI);Mfo=r(tpt,"BlenderbotSmallTokenizer"),tpt.forEach(t),Efo=r(F$e," (BlenderbotSmall model)"),F$e.forEach(t),Cfo=i(S),yh=n(S,"LI",{});var T$e=s(yh);ude=n(T$e,"STRONG",{});var apt=s(ude);wfo=r(apt,"bloom"),apt.forEach(t),Afo=r(T$e," \u2014 "),jI=n(T$e,"A",{href:!0});var npt=s(jI);Lfo=r(npt,"BloomTokenizerFast"),npt.forEach(t),yfo=r(T$e," (BLOOM model)"),T$e.forEach(t),xfo=i(S),xh=n(S,"LI",{});var M$e=s(xh);bde=n(M$e,"STRONG",{});var spt=s(bde);$fo=r(spt,"byt5"),spt.forEach(t),kfo=r(M$e," \u2014 "),DI=n(M$e,"A",{href:!0});var lpt=s(DI);Sfo=r(lpt,"ByT5Tokenizer"),lpt.forEach(t),Rfo=r(M$e," (ByT5 model)"),M$e.forEach(t),Pfo=i(S),rs=n(S,"LI",{});var zS=s(rs);vde=n(zS,"STRONG",{});var ipt=s(vde);Bfo=r(ipt,"camembert"),ipt.forEach(t),Ifo=r(zS," \u2014 "),GI=n(zS,"A",{href:!0});var dpt=s(GI);Nfo=r(dpt,"CamembertTokenizer"),dpt.forEach(t),qfo=r(zS," or "),OI=n(zS,"A",{href:!0});var cpt=s(OI);jfo=r(cpt,"CamembertTokenizerFast"),cpt.forEach(t),Dfo=r(zS," (CamemBERT model)"),zS.forEach(t),Gfo=i(S),$h=n(S,"LI",{});var E$e=s($h);Fde=n(E$e,"STRONG",{});var fpt=s(Fde);Ofo=r(fpt,"canine"),fpt.forEach(t),Vfo=r(E$e," \u2014 "),VI=n(E$e,"A",{href:!0});var mpt=s(VI);Xfo=r(mpt,"CanineTokenizer"),mpt.forEach(t),zfo=r(E$e," (CANINE model)"),E$e.forEach(t),Wfo=i(S),ts=n(S,"LI",{});var WS=s(ts);Tde=n(WS,"STRONG",{});var gpt=s(Tde);Qfo=r(gpt,"clip"),gpt.forEach(t),Ufo=r(WS," \u2014 "),XI=n(WS,"A",{href:!0});var hpt=s(XI);Hfo=r(hpt,"CLIPTokenizer"),hpt.forEach(t),Jfo=r(WS," or "),zI=n(WS,"A",{href:!0});var ppt=s(zI);Yfo=r(ppt,"CLIPTokenizerFast"),ppt.forEach(t),Kfo=r(WS," (CLIP model)"),WS.forEach(t),Zfo=i(S),as=n(S,"LI",{});var QS=s(as);Mde=n(QS,"STRONG",{});var _pt=s(Mde);emo=r(_pt,"codegen"),_pt.forEach(t),omo=r(QS," \u2014 "),WI=n(QS,"A",{href:!0});var upt=s(WI);rmo=r(upt,"CodeGenTokenizer"),upt.forEach(t),tmo=r(QS," or "),QI=n(QS,"A",{href:!0});var bpt=s(QI);amo=r(bpt,"CodeGenTokenizerFast"),bpt.forEach(t),nmo=r(QS," (CodeGen model)"),QS.forEach(t),smo=i(S),ns=n(S,"LI",{});var US=s(ns);Ede=n(US,"STRONG",{});var vpt=s(Ede);lmo=r(vpt,"convbert"),vpt.forEach(t),imo=r(US," \u2014 "),UI=n(US,"A",{href:!0});var Fpt=s(UI);dmo=r(Fpt,"ConvBertTokenizer"),Fpt.forEach(t),cmo=r(US," or "),HI=n(US,"A",{href:!0});var Tpt=s(HI);fmo=r(Tpt,"ConvBertTokenizerFast"),Tpt.forEach(t),mmo=r(US," (ConvBERT model)"),US.forEach(t),gmo=i(S),ss=n(S,"LI",{});var HS=s(ss);Cde=n(HS,"STRONG",{});var Mpt=s(Cde);hmo=r(Mpt,"cpm"),Mpt.forEach(t),pmo=r(HS," \u2014 "),JI=n(HS,"A",{href:!0});var Ept=s(JI);_mo=r(Ept,"CpmTokenizer"),Ept.forEach(t),umo=r(HS," or "),YI=n(HS,"A",{href:!0});var Cpt=s(YI);bmo=r(Cpt,"CpmTokenizerFast"),Cpt.forEach(t),vmo=r(HS," (CPM model)"),HS.forEach(t),Fmo=i(S),kh=n(S,"LI",{});var C$e=s(kh);wde=n(C$e,"STRONG",{});var wpt=s(wde);Tmo=r(wpt,"ctrl"),wpt.forEach(t),Mmo=r(C$e," \u2014 "),KI=n(C$e,"A",{href:!0});var Apt=s(KI);Emo=r(Apt,"CTRLTokenizer"),Apt.forEach(t),Cmo=r(C$e," (CTRL model)"),C$e.forEach(t),wmo=i(S),ls=n(S,"LI",{});var JS=s(ls);Ade=n(JS,"STRONG",{});var Lpt=s(Ade);Amo=r(Lpt,"data2vec-text"),Lpt.forEach(t),Lmo=r(JS," \u2014 "),ZI=n(JS,"A",{href:!0});var ypt=s(ZI);ymo=r(ypt,"RobertaTokenizer"),ypt.forEach(t),xmo=r(JS," or "),eN=n(JS,"A",{href:!0});var xpt=s(eN);$mo=r(xpt,"RobertaTokenizerFast"),xpt.forEach(t),kmo=r(JS," (Data2VecText model)"),JS.forEach(t),Smo=i(S),is=n(S,"LI",{});var YS=s(is);Lde=n(YS,"STRONG",{});var $pt=s(Lde);Rmo=r($pt,"deberta"),$pt.forEach(t),Pmo=r(YS," \u2014 "),oN=n(YS,"A",{href:!0});var kpt=s(oN);Bmo=r(kpt,"DebertaTokenizer"),kpt.forEach(t),Imo=r(YS," or "),rN=n(YS,"A",{href:!0});var Spt=s(rN);Nmo=r(Spt,"DebertaTokenizerFast"),Spt.forEach(t),qmo=r(YS," (DeBERTa model)"),YS.forEach(t),jmo=i(S),ds=n(S,"LI",{});var KS=s(ds);yde=n(KS,"STRONG",{});var Rpt=s(yde);Dmo=r(Rpt,"deberta-v2"),Rpt.forEach(t),Gmo=r(KS," \u2014 "),tN=n(KS,"A",{href:!0});var Ppt=s(tN);Omo=r(Ppt,"DebertaV2Tokenizer"),Ppt.forEach(t),Vmo=r(KS," or "),aN=n(KS,"A",{href:!0});var Bpt=s(aN);Xmo=r(Bpt,"DebertaV2TokenizerFast"),Bpt.forEach(t),zmo=r(KS," (DeBERTa-v2 model)"),KS.forEach(t),Wmo=i(S),cs=n(S,"LI",{});var ZS=s(cs);xde=n(ZS,"STRONG",{});var Ipt=s(xde);Qmo=r(Ipt,"distilbert"),Ipt.forEach(t),Umo=r(ZS," \u2014 "),nN=n(ZS,"A",{href:!0});var Npt=s(nN);Hmo=r(Npt,"DistilBertTokenizer"),Npt.forEach(t),Jmo=r(ZS," or "),sN=n(ZS,"A",{href:!0});var qpt=s(sN);Ymo=r(qpt,"DistilBertTokenizerFast"),qpt.forEach(t),Kmo=r(ZS," (DistilBERT model)"),ZS.forEach(t),Zmo=i(S),fs=n(S,"LI",{});var eR=s(fs);$de=n(eR,"STRONG",{});var jpt=s($de);ego=r(jpt,"dpr"),jpt.forEach(t),ogo=r(eR," \u2014 "),lN=n(eR,"A",{href:!0});var Dpt=s(lN);rgo=r(Dpt,"DPRQuestionEncoderTokenizer"),Dpt.forEach(t),tgo=r(eR," or "),iN=n(eR,"A",{href:!0});var Gpt=s(iN);ago=r(Gpt,"DPRQuestionEncoderTokenizerFast"),Gpt.forEach(t),ngo=r(eR," (DPR model)"),eR.forEach(t),sgo=i(S),ms=n(S,"LI",{});var oR=s(ms);kde=n(oR,"STRONG",{});var Opt=s(kde);lgo=r(Opt,"electra"),Opt.forEach(t),igo=r(oR," \u2014 "),dN=n(oR,"A",{href:!0});var Vpt=s(dN);dgo=r(Vpt,"ElectraTokenizer"),Vpt.forEach(t),cgo=r(oR," or "),cN=n(oR,"A",{href:!0});var Xpt=s(cN);fgo=r(Xpt,"ElectraTokenizerFast"),Xpt.forEach(t),mgo=r(oR," (ELECTRA model)"),oR.forEach(t),ggo=i(S),Sh=n(S,"LI",{});var w$e=s(Sh);Sde=n(w$e,"STRONG",{});var zpt=s(Sde);hgo=r(zpt,"flaubert"),zpt.forEach(t),pgo=r(w$e," \u2014 "),fN=n(w$e,"A",{href:!0});var Wpt=s(fN);_go=r(Wpt,"FlaubertTokenizer"),Wpt.forEach(t),ugo=r(w$e," (FlauBERT model)"),w$e.forEach(t),bgo=i(S),gs=n(S,"LI",{});var rR=s(gs);Rde=n(rR,"STRONG",{});var Qpt=s(Rde);vgo=r(Qpt,"fnet"),Qpt.forEach(t),Fgo=r(rR," \u2014 "),mN=n(rR,"A",{href:!0});var Upt=s(mN);Tgo=r(Upt,"FNetTokenizer"),Upt.forEach(t),Mgo=r(rR," or "),gN=n(rR,"A",{href:!0});var Hpt=s(gN);Ego=r(Hpt,"FNetTokenizerFast"),Hpt.forEach(t),Cgo=r(rR," (FNet model)"),rR.forEach(t),wgo=i(S),Rh=n(S,"LI",{});var A$e=s(Rh);Pde=n(A$e,"STRONG",{});var Jpt=s(Pde);Ago=r(Jpt,"fsmt"),Jpt.forEach(t),Lgo=r(A$e," \u2014 "),hN=n(A$e,"A",{href:!0});var Ypt=s(hN);ygo=r(Ypt,"FSMTTokenizer"),Ypt.forEach(t),xgo=r(A$e," (FairSeq Machine-Translation model)"),A$e.forEach(t),$go=i(S),hs=n(S,"LI",{});var tR=s(hs);Bde=n(tR,"STRONG",{});var Kpt=s(Bde);kgo=r(Kpt,"funnel"),Kpt.forEach(t),Sgo=r(tR," \u2014 "),pN=n(tR,"A",{href:!0});var Zpt=s(pN);Rgo=r(Zpt,"FunnelTokenizer"),Zpt.forEach(t),Pgo=r(tR," or "),_N=n(tR,"A",{href:!0});var e_t=s(_N);Bgo=r(e_t,"FunnelTokenizerFast"),e_t.forEach(t),Igo=r(tR," (Funnel Transformer model)"),tR.forEach(t),Ngo=i(S),ps=n(S,"LI",{});var aR=s(ps);Ide=n(aR,"STRONG",{});var o_t=s(Ide);qgo=r(o_t,"gpt2"),o_t.forEach(t),jgo=r(aR," \u2014 "),uN=n(aR,"A",{href:!0});var r_t=s(uN);Dgo=r(r_t,"GPT2Tokenizer"),r_t.forEach(t),Ggo=r(aR," or "),bN=n(aR,"A",{href:!0});var t_t=s(bN);Ogo=r(t_t,"GPT2TokenizerFast"),t_t.forEach(t),Vgo=r(aR," (OpenAI GPT-2 model)"),aR.forEach(t),Xgo=i(S),_s=n(S,"LI",{});var nR=s(_s);Nde=n(nR,"STRONG",{});var a_t=s(Nde);zgo=r(a_t,"gpt_neo"),a_t.forEach(t),Wgo=r(nR," \u2014 "),vN=n(nR,"A",{href:!0});var n_t=s(vN);Qgo=r(n_t,"GPT2Tokenizer"),n_t.forEach(t),Ugo=r(nR," or "),FN=n(nR,"A",{href:!0});var s_t=s(FN);Hgo=r(s_t,"GPT2TokenizerFast"),s_t.forEach(t),Jgo=r(nR," (GPT Neo model)"),nR.forEach(t),Ygo=i(S),Ph=n(S,"LI",{});var L$e=s(Ph);qde=n(L$e,"STRONG",{});var l_t=s(qde);Kgo=r(l_t,"gpt_neox"),l_t.forEach(t),Zgo=r(L$e," \u2014 "),TN=n(L$e,"A",{href:!0});var i_t=s(TN);eho=r(i_t,"GPTNeoXTokenizerFast"),i_t.forEach(t),oho=r(L$e," (GPT NeoX model)"),L$e.forEach(t),rho=i(S),us=n(S,"LI",{});var sR=s(us);jde=n(sR,"STRONG",{});var d_t=s(jde);tho=r(d_t,"gptj"),d_t.forEach(t),aho=r(sR," \u2014 "),MN=n(sR,"A",{href:!0});var c_t=s(MN);nho=r(c_t,"GPT2Tokenizer"),c_t.forEach(t),sho=r(sR," or "),EN=n(sR,"A",{href:!0});var f_t=s(EN);lho=r(f_t,"GPT2TokenizerFast"),f_t.forEach(t),iho=r(sR," (GPT-J model)"),sR.forEach(t),dho=i(S),bs=n(S,"LI",{});var lR=s(bs);Dde=n(lR,"STRONG",{});var m_t=s(Dde);cho=r(m_t,"groupvit"),m_t.forEach(t),fho=r(lR," \u2014 "),CN=n(lR,"A",{href:!0});var g_t=s(CN);mho=r(g_t,"CLIPTokenizer"),g_t.forEach(t),gho=r(lR," or "),wN=n(lR,"A",{href:!0});var h_t=s(wN);hho=r(h_t,"CLIPTokenizerFast"),h_t.forEach(t),pho=r(lR," (GroupViT model)"),lR.forEach(t),_ho=i(S),vs=n(S,"LI",{});var iR=s(vs);Gde=n(iR,"STRONG",{});var p_t=s(Gde);uho=r(p_t,"herbert"),p_t.forEach(t),bho=r(iR," \u2014 "),AN=n(iR,"A",{href:!0});var __t=s(AN);vho=r(__t,"HerbertTokenizer"),__t.forEach(t),Fho=r(iR," or "),LN=n(iR,"A",{href:!0});var u_t=s(LN);Tho=r(u_t,"HerbertTokenizerFast"),u_t.forEach(t),Mho=r(iR," (HerBERT model)"),iR.forEach(t),Eho=i(S),Bh=n(S,"LI",{});var y$e=s(Bh);Ode=n(y$e,"STRONG",{});var b_t=s(Ode);Cho=r(b_t,"hubert"),b_t.forEach(t),who=r(y$e," \u2014 "),yN=n(y$e,"A",{href:!0});var v_t=s(yN);Aho=r(v_t,"Wav2Vec2CTCTokenizer"),v_t.forEach(t),Lho=r(y$e," (Hubert model)"),y$e.forEach(t),yho=i(S),Fs=n(S,"LI",{});var dR=s(Fs);Vde=n(dR,"STRONG",{});var F_t=s(Vde);xho=r(F_t,"ibert"),F_t.forEach(t),$ho=r(dR," \u2014 "),xN=n(dR,"A",{href:!0});var T_t=s(xN);kho=r(T_t,"RobertaTokenizer"),T_t.forEach(t),Sho=r(dR," or "),$N=n(dR,"A",{href:!0});var M_t=s($N);Rho=r(M_t,"RobertaTokenizerFast"),M_t.forEach(t),Pho=r(dR," (I-BERT model)"),dR.forEach(t),Bho=i(S),Ts=n(S,"LI",{});var cR=s(Ts);Xde=n(cR,"STRONG",{});var E_t=s(Xde);Iho=r(E_t,"layoutlm"),E_t.forEach(t),Nho=r(cR," \u2014 "),kN=n(cR,"A",{href:!0});var C_t=s(kN);qho=r(C_t,"LayoutLMTokenizer"),C_t.forEach(t),jho=r(cR," or "),SN=n(cR,"A",{href:!0});var w_t=s(SN);Dho=r(w_t,"LayoutLMTokenizerFast"),w_t.forEach(t),Gho=r(cR," (LayoutLM model)"),cR.forEach(t),Oho=i(S),Ms=n(S,"LI",{});var fR=s(Ms);zde=n(fR,"STRONG",{});var A_t=s(zde);Vho=r(A_t,"layoutlmv2"),A_t.forEach(t),Xho=r(fR," \u2014 "),RN=n(fR,"A",{href:!0});var L_t=s(RN);zho=r(L_t,"LayoutLMv2Tokenizer"),L_t.forEach(t),Who=r(fR," or "),PN=n(fR,"A",{href:!0});var y_t=s(PN);Qho=r(y_t,"LayoutLMv2TokenizerFast"),y_t.forEach(t),Uho=r(fR," (LayoutLMv2 model)"),fR.forEach(t),Hho=i(S),Es=n(S,"LI",{});var mR=s(Es);Wde=n(mR,"STRONG",{});var x_t=s(Wde);Jho=r(x_t,"layoutlmv3"),x_t.forEach(t),Yho=r(mR," \u2014 "),BN=n(mR,"A",{href:!0});var $_t=s(BN);Kho=r($_t,"LayoutLMv3Tokenizer"),$_t.forEach(t),Zho=r(mR," or "),IN=n(mR,"A",{href:!0});var k_t=s(IN);epo=r(k_t,"LayoutLMv3TokenizerFast"),k_t.forEach(t),opo=r(mR," (LayoutLMv3 model)"),mR.forEach(t),rpo=i(S),Cs=n(S,"LI",{});var gR=s(Cs);Qde=n(gR,"STRONG",{});var S_t=s(Qde);tpo=r(S_t,"layoutxlm"),S_t.forEach(t),apo=r(gR," \u2014 "),NN=n(gR,"A",{href:!0});var R_t=s(NN);npo=r(R_t,"LayoutXLMTokenizer"),R_t.forEach(t),spo=r(gR," or "),qN=n(gR,"A",{href:!0});var P_t=s(qN);lpo=r(P_t,"LayoutXLMTokenizerFast"),P_t.forEach(t),ipo=r(gR," (LayoutXLM model)"),gR.forEach(t),dpo=i(S),ws=n(S,"LI",{});var hR=s(ws);Ude=n(hR,"STRONG",{});var B_t=s(Ude);cpo=r(B_t,"led"),B_t.forEach(t),fpo=r(hR," \u2014 "),jN=n(hR,"A",{href:!0});var I_t=s(jN);mpo=r(I_t,"LEDTokenizer"),I_t.forEach(t),gpo=r(hR," or "),DN=n(hR,"A",{href:!0});var N_t=s(DN);hpo=r(N_t,"LEDTokenizerFast"),N_t.forEach(t),ppo=r(hR," (LED model)"),hR.forEach(t),_po=i(S),As=n(S,"LI",{});var pR=s(As);Hde=n(pR,"STRONG",{});var q_t=s(Hde);upo=r(q_t,"longformer"),q_t.forEach(t),bpo=r(pR," \u2014 "),GN=n(pR,"A",{href:!0});var j_t=s(GN);vpo=r(j_t,"LongformerTokenizer"),j_t.forEach(t),Fpo=r(pR," or "),ON=n(pR,"A",{href:!0});var D_t=s(ON);Tpo=r(D_t,"LongformerTokenizerFast"),D_t.forEach(t),Mpo=r(pR," (Longformer model)"),pR.forEach(t),Epo=i(S),Ls=n(S,"LI",{});var _R=s(Ls);Jde=n(_R,"STRONG",{});var G_t=s(Jde);Cpo=r(G_t,"longt5"),G_t.forEach(t),wpo=r(_R," \u2014 "),VN=n(_R,"A",{href:!0});var O_t=s(VN);Apo=r(O_t,"T5Tokenizer"),O_t.forEach(t),Lpo=r(_R," or "),XN=n(_R,"A",{href:!0});var V_t=s(XN);ypo=r(V_t,"T5TokenizerFast"),V_t.forEach(t),xpo=r(_R," (LongT5 model)"),_R.forEach(t),$po=i(S),Ih=n(S,"LI",{});var x$e=s(Ih);Yde=n(x$e,"STRONG",{});var X_t=s(Yde);kpo=r(X_t,"luke"),X_t.forEach(t),Spo=r(x$e," \u2014 "),zN=n(x$e,"A",{href:!0});var z_t=s(zN);Rpo=r(z_t,"LukeTokenizer"),z_t.forEach(t),Ppo=r(x$e," (LUKE model)"),x$e.forEach(t),Bpo=i(S),ys=n(S,"LI",{});var uR=s(ys);Kde=n(uR,"STRONG",{});var W_t=s(Kde);Ipo=r(W_t,"lxmert"),W_t.forEach(t),Npo=r(uR," \u2014 "),WN=n(uR,"A",{href:!0});var Q_t=s(WN);qpo=r(Q_t,"LxmertTokenizer"),Q_t.forEach(t),jpo=r(uR," or "),QN=n(uR,"A",{href:!0});var U_t=s(QN);Dpo=r(U_t,"LxmertTokenizerFast"),U_t.forEach(t),Gpo=r(uR," (LXMERT model)"),uR.forEach(t),Opo=i(S),Nh=n(S,"LI",{});var $$e=s(Nh);Zde=n($$e,"STRONG",{});var H_t=s(Zde);Vpo=r(H_t,"m2m_100"),H_t.forEach(t),Xpo=r($$e," \u2014 "),UN=n($$e,"A",{href:!0});var J_t=s(UN);zpo=r(J_t,"M2M100Tokenizer"),J_t.forEach(t),Wpo=r($$e," (M2M100 model)"),$$e.forEach(t),Qpo=i(S),qh=n(S,"LI",{});var k$e=s(qh);ece=n(k$e,"STRONG",{});var Y_t=s(ece);Upo=r(Y_t,"marian"),Y_t.forEach(t),Hpo=r(k$e," \u2014 "),HN=n(k$e,"A",{href:!0});var K_t=s(HN);Jpo=r(K_t,"MarianTokenizer"),K_t.forEach(t),Ypo=r(k$e," (Marian model)"),k$e.forEach(t),Kpo=i(S),xs=n(S,"LI",{});var bR=s(xs);oce=n(bR,"STRONG",{});var Z_t=s(oce);Zpo=r(Z_t,"mbart"),Z_t.forEach(t),e_o=r(bR," \u2014 "),JN=n(bR,"A",{href:!0});var eut=s(JN);o_o=r(eut,"MBartTokenizer"),eut.forEach(t),r_o=r(bR," or "),YN=n(bR,"A",{href:!0});var out=s(YN);t_o=r(out,"MBartTokenizerFast"),out.forEach(t),a_o=r(bR," (mBART model)"),bR.forEach(t),n_o=i(S),$s=n(S,"LI",{});var vR=s($s);rce=n(vR,"STRONG",{});var rut=s(rce);s_o=r(rut,"mbart50"),rut.forEach(t),l_o=r(vR," \u2014 "),KN=n(vR,"A",{href:!0});var tut=s(KN);i_o=r(tut,"MBart50Tokenizer"),tut.forEach(t),d_o=r(vR," or "),ZN=n(vR,"A",{href:!0});var aut=s(ZN);c_o=r(aut,"MBart50TokenizerFast"),aut.forEach(t),f_o=r(vR," (mBART-50 model)"),vR.forEach(t),m_o=i(S),ks=n(S,"LI",{});var FR=s(ks);tce=n(FR,"STRONG",{});var nut=s(tce);g_o=r(nut,"megatron-bert"),nut.forEach(t),h_o=r(FR," \u2014 "),eq=n(FR,"A",{href:!0});var sut=s(eq);p_o=r(sut,"BertTokenizer"),sut.forEach(t),__o=r(FR," or "),oq=n(FR,"A",{href:!0});var lut=s(oq);u_o=r(lut,"BertTokenizerFast"),lut.forEach(t),b_o=r(FR," (Megatron-BERT model)"),FR.forEach(t),v_o=i(S),jh=n(S,"LI",{});var S$e=s(jh);ace=n(S$e,"STRONG",{});var iut=s(ace);F_o=r(iut,"mluke"),iut.forEach(t),T_o=r(S$e," \u2014 "),rq=n(S$e,"A",{href:!0});var dut=s(rq);M_o=r(dut,"MLukeTokenizer"),dut.forEach(t),E_o=r(S$e," (mLUKE model)"),S$e.forEach(t),C_o=i(S),Ss=n(S,"LI",{});var TR=s(Ss);nce=n(TR,"STRONG",{});var cut=s(nce);w_o=r(cut,"mobilebert"),cut.forEach(t),A_o=r(TR," \u2014 "),tq=n(TR,"A",{href:!0});var fut=s(tq);L_o=r(fut,"MobileBertTokenizer"),fut.forEach(t),y_o=r(TR," or "),aq=n(TR,"A",{href:!0});var mut=s(aq);x_o=r(mut,"MobileBertTokenizerFast"),mut.forEach(t),$_o=r(TR," (MobileBERT model)"),TR.forEach(t),k_o=i(S),Rs=n(S,"LI",{});var MR=s(Rs);sce=n(MR,"STRONG",{});var gut=s(sce);S_o=r(gut,"mpnet"),gut.forEach(t),R_o=r(MR," \u2014 "),nq=n(MR,"A",{href:!0});var hut=s(nq);P_o=r(hut,"MPNetTokenizer"),hut.forEach(t),B_o=r(MR," or "),sq=n(MR,"A",{href:!0});var put=s(sq);I_o=r(put,"MPNetTokenizerFast"),put.forEach(t),N_o=r(MR," (MPNet model)"),MR.forEach(t),q_o=i(S),Ps=n(S,"LI",{});var ER=s(Ps);lce=n(ER,"STRONG",{});var _ut=s(lce);j_o=r(_ut,"mt5"),_ut.forEach(t),D_o=r(ER," \u2014 "),lq=n(ER,"A",{href:!0});var uut=s(lq);G_o=r(uut,"MT5Tokenizer"),uut.forEach(t),O_o=r(ER," or "),iq=n(ER,"A",{href:!0});var but=s(iq);V_o=r(but,"MT5TokenizerFast"),but.forEach(t),X_o=r(ER," (MT5 model)"),ER.forEach(t),z_o=i(S),Bs=n(S,"LI",{});var CR=s(Bs);ice=n(CR,"STRONG",{});var vut=s(ice);W_o=r(vut,"mvp"),vut.forEach(t),Q_o=r(CR," \u2014 "),dq=n(CR,"A",{href:!0});var Fut=s(dq);U_o=r(Fut,"MvpTokenizer"),Fut.forEach(t),H_o=r(CR," or "),cq=n(CR,"A",{href:!0});var Tut=s(cq);J_o=r(Tut,"MvpTokenizerFast"),Tut.forEach(t),Y_o=r(CR," (MVP model)"),CR.forEach(t),K_o=i(S),Is=n(S,"LI",{});var wR=s(Is);dce=n(wR,"STRONG",{});var Mut=s(dce);Z_o=r(Mut,"nezha"),Mut.forEach(t),euo=r(wR," \u2014 "),fq=n(wR,"A",{href:!0});var Eut=s(fq);ouo=r(Eut,"BertTokenizer"),Eut.forEach(t),ruo=r(wR," or "),mq=n(wR,"A",{href:!0});var Cut=s(mq);tuo=r(Cut,"BertTokenizerFast"),Cut.forEach(t),auo=r(wR," (Nezha model)"),wR.forEach(t),nuo=i(S),Ns=n(S,"LI",{});var AR=s(Ns);cce=n(AR,"STRONG",{});var wut=s(cce);suo=r(wut,"nllb"),wut.forEach(t),luo=r(AR," \u2014 "),gq=n(AR,"A",{href:!0});var Aut=s(gq);iuo=r(Aut,"NllbTokenizer"),Aut.forEach(t),duo=r(AR," or "),hq=n(AR,"A",{href:!0});var Lut=s(hq);cuo=r(Lut,"NllbTokenizerFast"),Lut.forEach(t),fuo=r(AR," (NLLB model)"),AR.forEach(t),muo=i(S),qs=n(S,"LI",{});var LR=s(qs);fce=n(LR,"STRONG",{});var yut=s(fce);guo=r(yut,"nystromformer"),yut.forEach(t),huo=r(LR," \u2014 "),pq=n(LR,"A",{href:!0});var xut=s(pq);puo=r(xut,"AlbertTokenizer"),xut.forEach(t),_uo=r(LR," or "),_q=n(LR,"A",{href:!0});var $ut=s(_q);uuo=r($ut,"AlbertTokenizerFast"),$ut.forEach(t),buo=r(LR," (Nystr\xF6mformer model)"),LR.forEach(t),vuo=i(S),js=n(S,"LI",{});var yR=s(js);mce=n(yR,"STRONG",{});var kut=s(mce);Fuo=r(kut,"openai-gpt"),kut.forEach(t),Tuo=r(yR," \u2014 "),uq=n(yR,"A",{href:!0});var Sut=s(uq);Muo=r(Sut,"OpenAIGPTTokenizer"),Sut.forEach(t),Euo=r(yR," or "),bq=n(yR,"A",{href:!0});var Rut=s(bq);Cuo=r(Rut,"OpenAIGPTTokenizerFast"),Rut.forEach(t),wuo=r(yR," (OpenAI GPT model)"),yR.forEach(t),Auo=i(S),Dh=n(S,"LI",{});var R$e=s(Dh);gce=n(R$e,"STRONG",{});var Put=s(gce);Luo=r(Put,"opt"),Put.forEach(t),yuo=r(R$e," \u2014 "),vq=n(R$e,"A",{href:!0});var But=s(vq);xuo=r(But,"GPT2Tokenizer"),But.forEach(t),$uo=r(R$e," (OPT model)"),R$e.forEach(t),kuo=i(S),Ds=n(S,"LI",{});var xR=s(Ds);hce=n(xR,"STRONG",{});var Iut=s(hce);Suo=r(Iut,"owlvit"),Iut.forEach(t),Ruo=r(xR," \u2014 "),Fq=n(xR,"A",{href:!0});var Nut=s(Fq);Puo=r(Nut,"CLIPTokenizer"),Nut.forEach(t),Buo=r(xR," or "),Tq=n(xR,"A",{href:!0});var qut=s(Tq);Iuo=r(qut,"CLIPTokenizerFast"),qut.forEach(t),Nuo=r(xR," (OWL-ViT model)"),xR.forEach(t),quo=i(S),Gs=n(S,"LI",{});var $R=s(Gs);pce=n($R,"STRONG",{});var jut=s(pce);juo=r(jut,"pegasus"),jut.forEach(t),Duo=r($R," \u2014 "),Mq=n($R,"A",{href:!0});var Dut=s(Mq);Guo=r(Dut,"PegasusTokenizer"),Dut.forEach(t),Ouo=r($R," or "),Eq=n($R,"A",{href:!0});var Gut=s(Eq);Vuo=r(Gut,"PegasusTokenizerFast"),Gut.forEach(t),Xuo=r($R," (Pegasus model)"),$R.forEach(t),zuo=i(S),Gh=n(S,"LI",{});var P$e=s(Gh);_ce=n(P$e,"STRONG",{});var Out=s(_ce);Wuo=r(Out,"perceiver"),Out.forEach(t),Quo=r(P$e," \u2014 "),Cq=n(P$e,"A",{href:!0});var Vut=s(Cq);Uuo=r(Vut,"PerceiverTokenizer"),Vut.forEach(t),Huo=r(P$e," (Perceiver model)"),P$e.forEach(t),Juo=i(S),Oh=n(S,"LI",{});var B$e=s(Oh);uce=n(B$e,"STRONG",{});var Xut=s(uce);Yuo=r(Xut,"phobert"),Xut.forEach(t),Kuo=r(B$e," \u2014 "),wq=n(B$e,"A",{href:!0});var zut=s(wq);Zuo=r(zut,"PhobertTokenizer"),zut.forEach(t),e2o=r(B$e," (PhoBERT model)"),B$e.forEach(t),o2o=i(S),Vh=n(S,"LI",{});var I$e=s(Vh);bce=n(I$e,"STRONG",{});var Wut=s(bce);r2o=r(Wut,"plbart"),Wut.forEach(t),t2o=r(I$e," \u2014 "),Aq=n(I$e,"A",{href:!0});var Qut=s(Aq);a2o=r(Qut,"PLBartTokenizer"),Qut.forEach(t),n2o=r(I$e," (PLBart model)"),I$e.forEach(t),s2o=i(S),Xh=n(S,"LI",{});var N$e=s(Xh);vce=n(N$e,"STRONG",{});var Uut=s(vce);l2o=r(Uut,"prophetnet"),Uut.forEach(t),i2o=r(N$e," \u2014 "),Lq=n(N$e,"A",{href:!0});var Hut=s(Lq);d2o=r(Hut,"ProphetNetTokenizer"),Hut.forEach(t),c2o=r(N$e," (ProphetNet model)"),N$e.forEach(t),f2o=i(S),Os=n(S,"LI",{});var kR=s(Os);Fce=n(kR,"STRONG",{});var Jut=s(Fce);m2o=r(Jut,"qdqbert"),Jut.forEach(t),g2o=r(kR," \u2014 "),yq=n(kR,"A",{href:!0});var Yut=s(yq);h2o=r(Yut,"BertTokenizer"),Yut.forEach(t),p2o=r(kR," or "),xq=n(kR,"A",{href:!0});var Kut=s(xq);_2o=r(Kut,"BertTokenizerFast"),Kut.forEach(t),u2o=r(kR," (QDQBert model)"),kR.forEach(t),b2o=i(S),zh=n(S,"LI",{});var q$e=s(zh);Tce=n(q$e,"STRONG",{});var Zut=s(Tce);v2o=r(Zut,"rag"),Zut.forEach(t),F2o=r(q$e," \u2014 "),$q=n(q$e,"A",{href:!0});var e2t=s($q);T2o=r(e2t,"RagTokenizer"),e2t.forEach(t),M2o=r(q$e," (RAG model)"),q$e.forEach(t),E2o=i(S),Vs=n(S,"LI",{});var SR=s(Vs);Mce=n(SR,"STRONG",{});var o2t=s(Mce);C2o=r(o2t,"realm"),o2t.forEach(t),w2o=r(SR," \u2014 "),kq=n(SR,"A",{href:!0});var r2t=s(kq);A2o=r(r2t,"RealmTokenizer"),r2t.forEach(t),L2o=r(SR," or "),Sq=n(SR,"A",{href:!0});var t2t=s(Sq);y2o=r(t2t,"RealmTokenizerFast"),t2t.forEach(t),x2o=r(SR," (REALM model)"),SR.forEach(t),$2o=i(S),Xs=n(S,"LI",{});var RR=s(Xs);Ece=n(RR,"STRONG",{});var a2t=s(Ece);k2o=r(a2t,"reformer"),a2t.forEach(t),S2o=r(RR," \u2014 "),Rq=n(RR,"A",{href:!0});var n2t=s(Rq);R2o=r(n2t,"ReformerTokenizer"),n2t.forEach(t),P2o=r(RR," or "),Pq=n(RR,"A",{href:!0});var s2t=s(Pq);B2o=r(s2t,"ReformerTokenizerFast"),s2t.forEach(t),I2o=r(RR," (Reformer model)"),RR.forEach(t),N2o=i(S),zs=n(S,"LI",{});var PR=s(zs);Cce=n(PR,"STRONG",{});var l2t=s(Cce);q2o=r(l2t,"rembert"),l2t.forEach(t),j2o=r(PR," \u2014 "),Bq=n(PR,"A",{href:!0});var i2t=s(Bq);D2o=r(i2t,"RemBertTokenizer"),i2t.forEach(t),G2o=r(PR," or "),Iq=n(PR,"A",{href:!0});var d2t=s(Iq);O2o=r(d2t,"RemBertTokenizerFast"),d2t.forEach(t),V2o=r(PR," (RemBERT model)"),PR.forEach(t),X2o=i(S),Ws=n(S,"LI",{});var BR=s(Ws);wce=n(BR,"STRONG",{});var c2t=s(wce);z2o=r(c2t,"retribert"),c2t.forEach(t),W2o=r(BR," \u2014 "),Nq=n(BR,"A",{href:!0});var f2t=s(Nq);Q2o=r(f2t,"RetriBertTokenizer"),f2t.forEach(t),U2o=r(BR," or "),qq=n(BR,"A",{href:!0});var m2t=s(qq);H2o=r(m2t,"RetriBertTokenizerFast"),m2t.forEach(t),J2o=r(BR," (RetriBERT model)"),BR.forEach(t),Y2o=i(S),Qs=n(S,"LI",{});var IR=s(Qs);Ace=n(IR,"STRONG",{});var g2t=s(Ace);K2o=r(g2t,"roberta"),g2t.forEach(t),Z2o=r(IR," \u2014 "),jq=n(IR,"A",{href:!0});var h2t=s(jq);e1o=r(h2t,"RobertaTokenizer"),h2t.forEach(t),o1o=r(IR," or "),Dq=n(IR,"A",{href:!0});var p2t=s(Dq);r1o=r(p2t,"RobertaTokenizerFast"),p2t.forEach(t),t1o=r(IR," (RoBERTa model)"),IR.forEach(t),a1o=i(S),Us=n(S,"LI",{});var NR=s(Us);Lce=n(NR,"STRONG",{});var _2t=s(Lce);n1o=r(_2t,"roformer"),_2t.forEach(t),s1o=r(NR," \u2014 "),Gq=n(NR,"A",{href:!0});var u2t=s(Gq);l1o=r(u2t,"RoFormerTokenizer"),u2t.forEach(t),i1o=r(NR," or "),Oq=n(NR,"A",{href:!0});var b2t=s(Oq);d1o=r(b2t,"RoFormerTokenizerFast"),b2t.forEach(t),c1o=r(NR," (RoFormer model)"),NR.forEach(t),f1o=i(S),Wh=n(S,"LI",{});var j$e=s(Wh);yce=n(j$e,"STRONG",{});var v2t=s(yce);m1o=r(v2t,"speech_to_text"),v2t.forEach(t),g1o=r(j$e," \u2014 "),Vq=n(j$e,"A",{href:!0});var F2t=s(Vq);h1o=r(F2t,"Speech2TextTokenizer"),F2t.forEach(t),p1o=r(j$e," (Speech2Text model)"),j$e.forEach(t),_1o=i(S),Qh=n(S,"LI",{});var D$e=s(Qh);xce=n(D$e,"STRONG",{});var T2t=s(xce);u1o=r(T2t,"speech_to_text_2"),T2t.forEach(t),b1o=r(D$e," \u2014 "),Xq=n(D$e,"A",{href:!0});var M2t=s(Xq);v1o=r(M2t,"Speech2Text2Tokenizer"),M2t.forEach(t),F1o=r(D$e," (Speech2Text2 model)"),D$e.forEach(t),T1o=i(S),Hs=n(S,"LI",{});var qR=s(Hs);$ce=n(qR,"STRONG",{});var E2t=s($ce);M1o=r(E2t,"splinter"),E2t.forEach(t),E1o=r(qR," \u2014 "),zq=n(qR,"A",{href:!0});var C2t=s(zq);C1o=r(C2t,"SplinterTokenizer"),C2t.forEach(t),w1o=r(qR," or "),Wq=n(qR,"A",{href:!0});var w2t=s(Wq);A1o=r(w2t,"SplinterTokenizerFast"),w2t.forEach(t),L1o=r(qR," (Splinter model)"),qR.forEach(t),y1o=i(S),Js=n(S,"LI",{});var jR=s(Js);kce=n(jR,"STRONG",{});var A2t=s(kce);x1o=r(A2t,"squeezebert"),A2t.forEach(t),$1o=r(jR," \u2014 "),Qq=n(jR,"A",{href:!0});var L2t=s(Qq);k1o=r(L2t,"SqueezeBertTokenizer"),L2t.forEach(t),S1o=r(jR," or "),Uq=n(jR,"A",{href:!0});var y2t=s(Uq);R1o=r(y2t,"SqueezeBertTokenizerFast"),y2t.forEach(t),P1o=r(jR," (SqueezeBERT model)"),jR.forEach(t),B1o=i(S),Ys=n(S,"LI",{});var DR=s(Ys);Sce=n(DR,"STRONG",{});var x2t=s(Sce);I1o=r(x2t,"t5"),x2t.forEach(t),N1o=r(DR," \u2014 "),Hq=n(DR,"A",{href:!0});var $2t=s(Hq);q1o=r($2t,"T5Tokenizer"),$2t.forEach(t),j1o=r(DR," or "),Jq=n(DR,"A",{href:!0});var k2t=s(Jq);D1o=r(k2t,"T5TokenizerFast"),k2t.forEach(t),G1o=r(DR," (T5 model)"),DR.forEach(t),O1o=i(S),Uh=n(S,"LI",{});var G$e=s(Uh);Rce=n(G$e,"STRONG",{});var S2t=s(Rce);V1o=r(S2t,"tapas"),S2t.forEach(t),X1o=r(G$e," \u2014 "),Yq=n(G$e,"A",{href:!0});var R2t=s(Yq);z1o=r(R2t,"TapasTokenizer"),R2t.forEach(t),W1o=r(G$e," (TAPAS model)"),G$e.forEach(t),Q1o=i(S),Hh=n(S,"LI",{});var O$e=s(Hh);Pce=n(O$e,"STRONG",{});var P2t=s(Pce);U1o=r(P2t,"tapex"),P2t.forEach(t),H1o=r(O$e," \u2014 "),Kq=n(O$e,"A",{href:!0});var B2t=s(Kq);J1o=r(B2t,"TapexTokenizer"),B2t.forEach(t),Y1o=r(O$e," (TAPEX model)"),O$e.forEach(t),K1o=i(S),Jh=n(S,"LI",{});var V$e=s(Jh);Bce=n(V$e,"STRONG",{});var I2t=s(Bce);Z1o=r(I2t,"transfo-xl"),I2t.forEach(t),ebo=r(V$e," \u2014 "),Zq=n(V$e,"A",{href:!0});var N2t=s(Zq);obo=r(N2t,"TransfoXLTokenizer"),N2t.forEach(t),rbo=r(V$e," (Transformer-XL model)"),V$e.forEach(t),tbo=i(S),Ks=n(S,"LI",{});var GR=s(Ks);Ice=n(GR,"STRONG",{});var q2t=s(Ice);abo=r(q2t,"vilt"),q2t.forEach(t),nbo=r(GR," \u2014 "),ej=n(GR,"A",{href:!0});var j2t=s(ej);sbo=r(j2t,"BertTokenizer"),j2t.forEach(t),lbo=r(GR," or "),oj=n(GR,"A",{href:!0});var D2t=s(oj);ibo=r(D2t,"BertTokenizerFast"),D2t.forEach(t),dbo=r(GR," (ViLT model)"),GR.forEach(t),cbo=i(S),Zs=n(S,"LI",{});var OR=s(Zs);Nce=n(OR,"STRONG",{});var G2t=s(Nce);fbo=r(G2t,"visual_bert"),G2t.forEach(t),mbo=r(OR," \u2014 "),rj=n(OR,"A",{href:!0});var O2t=s(rj);gbo=r(O2t,"BertTokenizer"),O2t.forEach(t),hbo=r(OR," or "),tj=n(OR,"A",{href:!0});var V2t=s(tj);pbo=r(V2t,"BertTokenizerFast"),V2t.forEach(t),_bo=r(OR," (VisualBERT model)"),OR.forEach(t),ubo=i(S),Yh=n(S,"LI",{});var X$e=s(Yh);qce=n(X$e,"STRONG",{});var X2t=s(qce);bbo=r(X2t,"wav2vec2"),X2t.forEach(t),vbo=r(X$e," \u2014 "),aj=n(X$e,"A",{href:!0});var z2t=s(aj);Fbo=r(z2t,"Wav2Vec2CTCTokenizer"),z2t.forEach(t),Tbo=r(X$e," (Wav2Vec2 model)"),X$e.forEach(t),Mbo=i(S),Kh=n(S,"LI",{});var z$e=s(Kh);jce=n(z$e,"STRONG",{});var W2t=s(jce);Ebo=r(W2t,"wav2vec2-conformer"),W2t.forEach(t),Cbo=r(z$e," \u2014 "),nj=n(z$e,"A",{href:!0});var Q2t=s(nj);wbo=r(Q2t,"Wav2Vec2CTCTokenizer"),Q2t.forEach(t),Abo=r(z$e," (Wav2Vec2-Conformer model)"),z$e.forEach(t),Lbo=i(S),Zh=n(S,"LI",{});var W$e=s(Zh);Dce=n(W$e,"STRONG",{});var U2t=s(Dce);ybo=r(U2t,"wav2vec2_phoneme"),U2t.forEach(t),xbo=r(W$e," \u2014 "),sj=n(W$e,"A",{href:!0});var H2t=s(sj);$bo=r(H2t,"Wav2Vec2PhonemeCTCTokenizer"),H2t.forEach(t),kbo=r(W$e," (Wav2Vec2Phoneme model)"),W$e.forEach(t),Sbo=i(S),el=n(S,"LI",{});var VR=s(el);Gce=n(VR,"STRONG",{});var J2t=s(Gce);Rbo=r(J2t,"xglm"),J2t.forEach(t),Pbo=r(VR," \u2014 "),lj=n(VR,"A",{href:!0});var Y2t=s(lj);Bbo=r(Y2t,"XGLMTokenizer"),Y2t.forEach(t),Ibo=r(VR," or "),ij=n(VR,"A",{href:!0});var K2t=s(ij);Nbo=r(K2t,"XGLMTokenizerFast"),K2t.forEach(t),qbo=r(VR," (XGLM model)"),VR.forEach(t),jbo=i(S),ep=n(S,"LI",{});var Q$e=s(ep);Oce=n(Q$e,"STRONG",{});var Z2t=s(Oce);Dbo=r(Z2t,"xlm"),Z2t.forEach(t),Gbo=r(Q$e," \u2014 "),dj=n(Q$e,"A",{href:!0});var e1t=s(dj);Obo=r(e1t,"XLMTokenizer"),e1t.forEach(t),Vbo=r(Q$e," (XLM model)"),Q$e.forEach(t),Xbo=i(S),op=n(S,"LI",{});var U$e=s(op);Vce=n(U$e,"STRONG",{});var o1t=s(Vce);zbo=r(o1t,"xlm-prophetnet"),o1t.forEach(t),Wbo=r(U$e," \u2014 "),cj=n(U$e,"A",{href:!0});var r1t=s(cj);Qbo=r(r1t,"XLMProphetNetTokenizer"),r1t.forEach(t),Ubo=r(U$e," (XLM-ProphetNet model)"),U$e.forEach(t),Hbo=i(S),ol=n(S,"LI",{});var XR=s(ol);Xce=n(XR,"STRONG",{});var t1t=s(Xce);Jbo=r(t1t,"xlm-roberta"),t1t.forEach(t),Ybo=r(XR," \u2014 "),fj=n(XR,"A",{href:!0});var a1t=s(fj);Kbo=r(a1t,"XLMRobertaTokenizer"),a1t.forEach(t),Zbo=r(XR," or "),mj=n(XR,"A",{href:!0});var n1t=s(mj);evo=r(n1t,"XLMRobertaTokenizerFast"),n1t.forEach(t),ovo=r(XR," (XLM-RoBERTa model)"),XR.forEach(t),rvo=i(S),rl=n(S,"LI",{});var zR=s(rl);zce=n(zR,"STRONG",{});var s1t=s(zce);tvo=r(s1t,"xlm-roberta-xl"),s1t.forEach(t),avo=r(zR," \u2014 "),gj=n(zR,"A",{href:!0});var l1t=s(gj);nvo=r(l1t,"RobertaTokenizer"),l1t.forEach(t),svo=r(zR," or "),hj=n(zR,"A",{href:!0});var i1t=s(hj);lvo=r(i1t,"RobertaTokenizerFast"),i1t.forEach(t),ivo=r(zR," (XLM-RoBERTa-XL model)"),zR.forEach(t),dvo=i(S),tl=n(S,"LI",{});var WR=s(tl);Wce=n(WR,"STRONG",{});var d1t=s(Wce);cvo=r(d1t,"xlnet"),d1t.forEach(t),fvo=r(WR," \u2014 "),pj=n(WR,"A",{href:!0});var c1t=s(pj);mvo=r(c1t,"XLNetTokenizer"),c1t.forEach(t),gvo=r(WR," or "),_j=n(WR,"A",{href:!0});var f1t=s(_j);hvo=r(f1t,"XLNetTokenizerFast"),f1t.forEach(t),pvo=r(WR," (XLNet model)"),WR.forEach(t),_vo=i(S),al=n(S,"LI",{});var QR=s(al);Qce=n(QR,"STRONG",{});var m1t=s(Qce);uvo=r(m1t,"yoso"),m1t.forEach(t),bvo=r(QR," \u2014 "),uj=n(QR,"A",{href:!0});var g1t=s(uj);vvo=r(g1t,"AlbertTokenizer"),g1t.forEach(t),Fvo=r(QR," or "),bj=n(QR,"A",{href:!0});var h1t=s(bj);Tvo=r(h1t,"AlbertTokenizerFast"),h1t.forEach(t),Mvo=r(QR," (YOSO model)"),QR.forEach(t),S.forEach(t),Evo=i(fl),T(rp.$$.fragment,fl),fl.forEach(t),Cvo=i(cl),tp=n(cl,"DIV",{class:!0});var qHe=s(tp);T(My.$$.fragment,qHe),wvo=i(qHe),Uce=n(qHe,"P",{});var p1t=s(Uce);Avo=r(p1t,"Register a new tokenizer in this mapping."),p1t.forEach(t),qHe.forEach(t),cl.forEach(t),RQe=i(f),Zi=n(f,"H2",{class:!0});var jHe=s(Zi);ap=n(jHe,"A",{id:!0,class:!0,href:!0});var _1t=s(ap);Hce=n(_1t,"SPAN",{});var u1t=s(Hce);T(Ey.$$.fragment,u1t),u1t.forEach(t),_1t.forEach(t),Lvo=i(jHe),Jce=n(jHe,"SPAN",{});var b1t=s(Jce);yvo=r(b1t,"AutoFeatureExtractor"),b1t.forEach(t),jHe.forEach(t),PQe=i(f),$o=n(f,"DIV",{class:!0});var ml=s($o);T(Cy.$$.fragment,ml),xvo=i(ml),wy=n(ml,"P",{});var DHe=s(wy);$vo=r(DHe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vj=n(DHe,"A",{href:!0});var v1t=s(vj);kvo=r(v1t,"AutoFeatureExtractor.from_pretrained()"),v1t.forEach(t),Svo=r(DHe," class method."),DHe.forEach(t),Rvo=i(ml),Ay=n(ml,"P",{});var GHe=s(Ay);Pvo=r(GHe,"This class cannot be instantiated directly using "),Yce=n(GHe,"CODE",{});var F1t=s(Yce);Bvo=r(F1t,"__init__()"),F1t.forEach(t),Ivo=r(GHe," (throws an error)."),GHe.forEach(t),Nvo=i(ml),He=n(ml,"DIV",{class:!0});var fa=s(He);T(Ly.$$.fragment,fa),qvo=i(fa),Kce=n(fa,"P",{});var T1t=s(Kce);jvo=r(T1t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),T1t.forEach(t),Dvo=i(fa),Oa=n(fa,"P",{});var l7=s(Oa);Gvo=r(l7,"The feature extractor class to instantiate is selected based on the "),Zce=n(l7,"CODE",{});var M1t=s(Zce);Ovo=r(M1t,"model_type"),M1t.forEach(t),Vvo=r(l7,` property of the config object
(either passed as an argument or loaded from `),efe=n(l7,"CODE",{});var E1t=s(efe);Xvo=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),zvo=r(l7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ofe=n(l7,"CODE",{});var C1t=s(ofe);Wvo=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),Qvo=r(l7,":"),l7.forEach(t),Uvo=i(fa),U=n(fa,"UL",{});var Y=s(U);np=n(Y,"LI",{});var H$e=s(np);rfe=n(H$e,"STRONG",{});var w1t=s(rfe);Hvo=r(w1t,"beit"),w1t.forEach(t),Jvo=r(H$e," \u2014 "),Fj=n(H$e,"A",{href:!0});var A1t=s(Fj);Yvo=r(A1t,"BeitFeatureExtractor"),A1t.forEach(t),Kvo=r(H$e," (BEiT model)"),H$e.forEach(t),Zvo=i(Y),sp=n(Y,"LI",{});var J$e=s(sp);tfe=n(J$e,"STRONG",{});var L1t=s(tfe);e0o=r(L1t,"clip"),L1t.forEach(t),o0o=r(J$e," \u2014 "),Tj=n(J$e,"A",{href:!0});var y1t=s(Tj);r0o=r(y1t,"CLIPFeatureExtractor"),y1t.forEach(t),t0o=r(J$e," (CLIP model)"),J$e.forEach(t),a0o=i(Y),lp=n(Y,"LI",{});var Y$e=s(lp);afe=n(Y$e,"STRONG",{});var x1t=s(afe);n0o=r(x1t,"convnext"),x1t.forEach(t),s0o=r(Y$e," \u2014 "),Mj=n(Y$e,"A",{href:!0});var $1t=s(Mj);l0o=r($1t,"ConvNextFeatureExtractor"),$1t.forEach(t),i0o=r(Y$e," (ConvNeXT model)"),Y$e.forEach(t),d0o=i(Y),ip=n(Y,"LI",{});var K$e=s(ip);nfe=n(K$e,"STRONG",{});var k1t=s(nfe);c0o=r(k1t,"cvt"),k1t.forEach(t),f0o=r(K$e," \u2014 "),Ej=n(K$e,"A",{href:!0});var S1t=s(Ej);m0o=r(S1t,"ConvNextFeatureExtractor"),S1t.forEach(t),g0o=r(K$e," (CvT model)"),K$e.forEach(t),h0o=i(Y),dp=n(Y,"LI",{});var Z$e=s(dp);sfe=n(Z$e,"STRONG",{});var R1t=s(sfe);p0o=r(R1t,"data2vec-audio"),R1t.forEach(t),_0o=r(Z$e," \u2014 "),Cj=n(Z$e,"A",{href:!0});var P1t=s(Cj);u0o=r(P1t,"Wav2Vec2FeatureExtractor"),P1t.forEach(t),b0o=r(Z$e," (Data2VecAudio model)"),Z$e.forEach(t),v0o=i(Y),cp=n(Y,"LI",{});var eke=s(cp);lfe=n(eke,"STRONG",{});var B1t=s(lfe);F0o=r(B1t,"data2vec-vision"),B1t.forEach(t),T0o=r(eke," \u2014 "),wj=n(eke,"A",{href:!0});var I1t=s(wj);M0o=r(I1t,"BeitFeatureExtractor"),I1t.forEach(t),E0o=r(eke," (Data2VecVision model)"),eke.forEach(t),C0o=i(Y),fp=n(Y,"LI",{});var oke=s(fp);ife=n(oke,"STRONG",{});var N1t=s(ife);w0o=r(N1t,"deit"),N1t.forEach(t),A0o=r(oke," \u2014 "),Aj=n(oke,"A",{href:!0});var q1t=s(Aj);L0o=r(q1t,"DeiTFeatureExtractor"),q1t.forEach(t),y0o=r(oke," (DeiT model)"),oke.forEach(t),x0o=i(Y),mp=n(Y,"LI",{});var rke=s(mp);dfe=n(rke,"STRONG",{});var j1t=s(dfe);$0o=r(j1t,"detr"),j1t.forEach(t),k0o=r(rke," \u2014 "),Lj=n(rke,"A",{href:!0});var D1t=s(Lj);S0o=r(D1t,"DetrFeatureExtractor"),D1t.forEach(t),R0o=r(rke," (DETR model)"),rke.forEach(t),P0o=i(Y),gp=n(Y,"LI",{});var tke=s(gp);cfe=n(tke,"STRONG",{});var G1t=s(cfe);B0o=r(G1t,"dpt"),G1t.forEach(t),I0o=r(tke," \u2014 "),yj=n(tke,"A",{href:!0});var O1t=s(yj);N0o=r(O1t,"DPTFeatureExtractor"),O1t.forEach(t),q0o=r(tke," (DPT model)"),tke.forEach(t),j0o=i(Y),hp=n(Y,"LI",{});var ake=s(hp);ffe=n(ake,"STRONG",{});var V1t=s(ffe);D0o=r(V1t,"flava"),V1t.forEach(t),G0o=r(ake," \u2014 "),xj=n(ake,"A",{href:!0});var X1t=s(xj);O0o=r(X1t,"FlavaFeatureExtractor"),X1t.forEach(t),V0o=r(ake," (FLAVA model)"),ake.forEach(t),X0o=i(Y),pp=n(Y,"LI",{});var nke=s(pp);mfe=n(nke,"STRONG",{});var z1t=s(mfe);z0o=r(z1t,"glpn"),z1t.forEach(t),W0o=r(nke," \u2014 "),$j=n(nke,"A",{href:!0});var W1t=s($j);Q0o=r(W1t,"GLPNFeatureExtractor"),W1t.forEach(t),U0o=r(nke," (GLPN model)"),nke.forEach(t),H0o=i(Y),_p=n(Y,"LI",{});var ske=s(_p);gfe=n(ske,"STRONG",{});var Q1t=s(gfe);J0o=r(Q1t,"groupvit"),Q1t.forEach(t),Y0o=r(ske," \u2014 "),kj=n(ske,"A",{href:!0});var U1t=s(kj);K0o=r(U1t,"CLIPFeatureExtractor"),U1t.forEach(t),Z0o=r(ske," (GroupViT model)"),ske.forEach(t),e6o=i(Y),up=n(Y,"LI",{});var lke=s(up);hfe=n(lke,"STRONG",{});var H1t=s(hfe);o6o=r(H1t,"hubert"),H1t.forEach(t),r6o=r(lke," \u2014 "),Sj=n(lke,"A",{href:!0});var J1t=s(Sj);t6o=r(J1t,"Wav2Vec2FeatureExtractor"),J1t.forEach(t),a6o=r(lke," (Hubert model)"),lke.forEach(t),n6o=i(Y),bp=n(Y,"LI",{});var ike=s(bp);pfe=n(ike,"STRONG",{});var Y1t=s(pfe);s6o=r(Y1t,"imagegpt"),Y1t.forEach(t),l6o=r(ike," \u2014 "),Rj=n(ike,"A",{href:!0});var K1t=s(Rj);i6o=r(K1t,"ImageGPTFeatureExtractor"),K1t.forEach(t),d6o=r(ike," (ImageGPT model)"),ike.forEach(t),c6o=i(Y),vp=n(Y,"LI",{});var dke=s(vp);_fe=n(dke,"STRONG",{});var Z1t=s(_fe);f6o=r(Z1t,"layoutlmv2"),Z1t.forEach(t),m6o=r(dke," \u2014 "),Pj=n(dke,"A",{href:!0});var ebt=s(Pj);g6o=r(ebt,"LayoutLMv2FeatureExtractor"),ebt.forEach(t),h6o=r(dke," (LayoutLMv2 model)"),dke.forEach(t),p6o=i(Y),Fp=n(Y,"LI",{});var cke=s(Fp);ufe=n(cke,"STRONG",{});var obt=s(ufe);_6o=r(obt,"layoutlmv3"),obt.forEach(t),u6o=r(cke," \u2014 "),Bj=n(cke,"A",{href:!0});var rbt=s(Bj);b6o=r(rbt,"LayoutLMv3FeatureExtractor"),rbt.forEach(t),v6o=r(cke," (LayoutLMv3 model)"),cke.forEach(t),F6o=i(Y),Tp=n(Y,"LI",{});var fke=s(Tp);bfe=n(fke,"STRONG",{});var tbt=s(bfe);T6o=r(tbt,"levit"),tbt.forEach(t),M6o=r(fke," \u2014 "),Ij=n(fke,"A",{href:!0});var abt=s(Ij);E6o=r(abt,"LevitFeatureExtractor"),abt.forEach(t),C6o=r(fke," (LeViT model)"),fke.forEach(t),w6o=i(Y),Mp=n(Y,"LI",{});var mke=s(Mp);vfe=n(mke,"STRONG",{});var nbt=s(vfe);A6o=r(nbt,"maskformer"),nbt.forEach(t),L6o=r(mke," \u2014 "),Nj=n(mke,"A",{href:!0});var sbt=s(Nj);y6o=r(sbt,"MaskFormerFeatureExtractor"),sbt.forEach(t),x6o=r(mke," (MaskFormer model)"),mke.forEach(t),$6o=i(Y),Ep=n(Y,"LI",{});var gke=s(Ep);Ffe=n(gke,"STRONG",{});var lbt=s(Ffe);k6o=r(lbt,"mctct"),lbt.forEach(t),S6o=r(gke," \u2014 "),qj=n(gke,"A",{href:!0});var ibt=s(qj);R6o=r(ibt,"MCTCTFeatureExtractor"),ibt.forEach(t),P6o=r(gke," (M-CTC-T model)"),gke.forEach(t),B6o=i(Y),Cp=n(Y,"LI",{});var hke=s(Cp);Tfe=n(hke,"STRONG",{});var dbt=s(Tfe);I6o=r(dbt,"mobilevit"),dbt.forEach(t),N6o=r(hke," \u2014 "),jj=n(hke,"A",{href:!0});var cbt=s(jj);q6o=r(cbt,"MobileViTFeatureExtractor"),cbt.forEach(t),j6o=r(hke," (MobileViT model)"),hke.forEach(t),D6o=i(Y),wp=n(Y,"LI",{});var pke=s(wp);Mfe=n(pke,"STRONG",{});var fbt=s(Mfe);G6o=r(fbt,"owlvit"),fbt.forEach(t),O6o=r(pke," \u2014 "),Dj=n(pke,"A",{href:!0});var mbt=s(Dj);V6o=r(mbt,"OwlViTFeatureExtractor"),mbt.forEach(t),X6o=r(pke," (OWL-ViT model)"),pke.forEach(t),z6o=i(Y),Ap=n(Y,"LI",{});var _ke=s(Ap);Efe=n(_ke,"STRONG",{});var gbt=s(Efe);W6o=r(gbt,"perceiver"),gbt.forEach(t),Q6o=r(_ke," \u2014 "),Gj=n(_ke,"A",{href:!0});var hbt=s(Gj);U6o=r(hbt,"PerceiverFeatureExtractor"),hbt.forEach(t),H6o=r(_ke," (Perceiver model)"),_ke.forEach(t),J6o=i(Y),Lp=n(Y,"LI",{});var uke=s(Lp);Cfe=n(uke,"STRONG",{});var pbt=s(Cfe);Y6o=r(pbt,"poolformer"),pbt.forEach(t),K6o=r(uke," \u2014 "),Oj=n(uke,"A",{href:!0});var _bt=s(Oj);Z6o=r(_bt,"PoolFormerFeatureExtractor"),_bt.forEach(t),eFo=r(uke," (PoolFormer model)"),uke.forEach(t),oFo=i(Y),yp=n(Y,"LI",{});var bke=s(yp);wfe=n(bke,"STRONG",{});var ubt=s(wfe);rFo=r(ubt,"regnet"),ubt.forEach(t),tFo=r(bke," \u2014 "),Vj=n(bke,"A",{href:!0});var bbt=s(Vj);aFo=r(bbt,"ConvNextFeatureExtractor"),bbt.forEach(t),nFo=r(bke," (RegNet model)"),bke.forEach(t),sFo=i(Y),xp=n(Y,"LI",{});var vke=s(xp);Afe=n(vke,"STRONG",{});var vbt=s(Afe);lFo=r(vbt,"resnet"),vbt.forEach(t),iFo=r(vke," \u2014 "),Xj=n(vke,"A",{href:!0});var Fbt=s(Xj);dFo=r(Fbt,"ConvNextFeatureExtractor"),Fbt.forEach(t),cFo=r(vke," (ResNet model)"),vke.forEach(t),fFo=i(Y),$p=n(Y,"LI",{});var Fke=s($p);Lfe=n(Fke,"STRONG",{});var Tbt=s(Lfe);mFo=r(Tbt,"segformer"),Tbt.forEach(t),gFo=r(Fke," \u2014 "),zj=n(Fke,"A",{href:!0});var Mbt=s(zj);hFo=r(Mbt,"SegformerFeatureExtractor"),Mbt.forEach(t),pFo=r(Fke," (SegFormer model)"),Fke.forEach(t),_Fo=i(Y),kp=n(Y,"LI",{});var Tke=s(kp);yfe=n(Tke,"STRONG",{});var Ebt=s(yfe);uFo=r(Ebt,"speech_to_text"),Ebt.forEach(t),bFo=r(Tke," \u2014 "),Wj=n(Tke,"A",{href:!0});var Cbt=s(Wj);vFo=r(Cbt,"Speech2TextFeatureExtractor"),Cbt.forEach(t),FFo=r(Tke," (Speech2Text model)"),Tke.forEach(t),TFo=i(Y),Sp=n(Y,"LI",{});var Mke=s(Sp);xfe=n(Mke,"STRONG",{});var wbt=s(xfe);MFo=r(wbt,"swin"),wbt.forEach(t),EFo=r(Mke," \u2014 "),Qj=n(Mke,"A",{href:!0});var Abt=s(Qj);CFo=r(Abt,"ViTFeatureExtractor"),Abt.forEach(t),wFo=r(Mke," (Swin Transformer model)"),Mke.forEach(t),AFo=i(Y),Rp=n(Y,"LI",{});var Eke=s(Rp);$fe=n(Eke,"STRONG",{});var Lbt=s($fe);LFo=r(Lbt,"swinv2"),Lbt.forEach(t),yFo=r(Eke," \u2014 "),Uj=n(Eke,"A",{href:!0});var ybt=s(Uj);xFo=r(ybt,"ViTFeatureExtractor"),ybt.forEach(t),$Fo=r(Eke," (Swin Transformer V2 model)"),Eke.forEach(t),kFo=i(Y),Pp=n(Y,"LI",{});var Cke=s(Pp);kfe=n(Cke,"STRONG",{});var xbt=s(kfe);SFo=r(xbt,"van"),xbt.forEach(t),RFo=r(Cke," \u2014 "),Hj=n(Cke,"A",{href:!0});var $bt=s(Hj);PFo=r($bt,"ConvNextFeatureExtractor"),$bt.forEach(t),BFo=r(Cke," (VAN model)"),Cke.forEach(t),IFo=i(Y),Bp=n(Y,"LI",{});var wke=s(Bp);Sfe=n(wke,"STRONG",{});var kbt=s(Sfe);NFo=r(kbt,"videomae"),kbt.forEach(t),qFo=r(wke," \u2014 "),Jj=n(wke,"A",{href:!0});var Sbt=s(Jj);jFo=r(Sbt,"ViTFeatureExtractor"),Sbt.forEach(t),DFo=r(wke," (VideoMAE model)"),wke.forEach(t),GFo=i(Y),Ip=n(Y,"LI",{});var Ake=s(Ip);Rfe=n(Ake,"STRONG",{});var Rbt=s(Rfe);OFo=r(Rbt,"vilt"),Rbt.forEach(t),VFo=r(Ake," \u2014 "),Yj=n(Ake,"A",{href:!0});var Pbt=s(Yj);XFo=r(Pbt,"ViltFeatureExtractor"),Pbt.forEach(t),zFo=r(Ake," (ViLT model)"),Ake.forEach(t),WFo=i(Y),Np=n(Y,"LI",{});var Lke=s(Np);Pfe=n(Lke,"STRONG",{});var Bbt=s(Pfe);QFo=r(Bbt,"vit"),Bbt.forEach(t),UFo=r(Lke," \u2014 "),Kj=n(Lke,"A",{href:!0});var Ibt=s(Kj);HFo=r(Ibt,"ViTFeatureExtractor"),Ibt.forEach(t),JFo=r(Lke," (ViT model)"),Lke.forEach(t),YFo=i(Y),qp=n(Y,"LI",{});var yke=s(qp);Bfe=n(yke,"STRONG",{});var Nbt=s(Bfe);KFo=r(Nbt,"vit_mae"),Nbt.forEach(t),ZFo=r(yke," \u2014 "),Zj=n(yke,"A",{href:!0});var qbt=s(Zj);eTo=r(qbt,"ViTFeatureExtractor"),qbt.forEach(t),oTo=r(yke," (ViTMAE model)"),yke.forEach(t),rTo=i(Y),jp=n(Y,"LI",{});var xke=s(jp);Ife=n(xke,"STRONG",{});var jbt=s(Ife);tTo=r(jbt,"wav2vec2"),jbt.forEach(t),aTo=r(xke," \u2014 "),eD=n(xke,"A",{href:!0});var Dbt=s(eD);nTo=r(Dbt,"Wav2Vec2FeatureExtractor"),Dbt.forEach(t),sTo=r(xke," (Wav2Vec2 model)"),xke.forEach(t),lTo=i(Y),Dp=n(Y,"LI",{});var $ke=s(Dp);Nfe=n($ke,"STRONG",{});var Gbt=s(Nfe);iTo=r(Gbt,"wav2vec2-conformer"),Gbt.forEach(t),dTo=r($ke," \u2014 "),oD=n($ke,"A",{href:!0});var Obt=s(oD);cTo=r(Obt,"Wav2Vec2FeatureExtractor"),Obt.forEach(t),fTo=r($ke," (Wav2Vec2-Conformer model)"),$ke.forEach(t),mTo=i(Y),Gp=n(Y,"LI",{});var kke=s(Gp);qfe=n(kke,"STRONG",{});var Vbt=s(qfe);gTo=r(Vbt,"yolos"),Vbt.forEach(t),hTo=r(kke," \u2014 "),rD=n(kke,"A",{href:!0});var Xbt=s(rD);pTo=r(Xbt,"YolosFeatureExtractor"),Xbt.forEach(t),_To=r(kke," (YOLOS model)"),kke.forEach(t),Y.forEach(t),uTo=i(fa),T(Op.$$.fragment,fa),bTo=i(fa),T(Vp.$$.fragment,fa),fa.forEach(t),vTo=i(ml),Xp=n(ml,"DIV",{class:!0});var OHe=s(Xp);T(yy.$$.fragment,OHe),FTo=i(OHe),jfe=n(OHe,"P",{});var zbt=s(jfe);TTo=r(zbt,"Register a new feature extractor for this class."),zbt.forEach(t),OHe.forEach(t),ml.forEach(t),BQe=i(f),ed=n(f,"H2",{class:!0});var VHe=s(ed);zp=n(VHe,"A",{id:!0,class:!0,href:!0});var Wbt=s(zp);Dfe=n(Wbt,"SPAN",{});var Qbt=s(Dfe);T(xy.$$.fragment,Qbt),Qbt.forEach(t),Wbt.forEach(t),MTo=i(VHe),Gfe=n(VHe,"SPAN",{});var Ubt=s(Gfe);ETo=r(Ubt,"AutoProcessor"),Ubt.forEach(t),VHe.forEach(t),IQe=i(f),ko=n(f,"DIV",{class:!0});var gl=s(ko);T($y.$$.fragment,gl),CTo=i(gl),ky=n(gl,"P",{});var XHe=s(ky);wTo=r(XHe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tD=n(XHe,"A",{href:!0});var Hbt=s(tD);ATo=r(Hbt,"AutoProcessor.from_pretrained()"),Hbt.forEach(t),LTo=r(XHe," class method."),XHe.forEach(t),yTo=i(gl),Sy=n(gl,"P",{});var zHe=s(Sy);xTo=r(zHe,"This class cannot be instantiated directly using "),Ofe=n(zHe,"CODE",{});var Jbt=s(Ofe);$To=r(Jbt,"__init__()"),Jbt.forEach(t),kTo=r(zHe," (throws an error)."),zHe.forEach(t),STo=i(gl),Je=n(gl,"DIV",{class:!0});var ma=s(Je);T(Ry.$$.fragment,ma),RTo=i(ma),Vfe=n(ma,"P",{});var Ybt=s(Vfe);PTo=r(Ybt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ybt.forEach(t),BTo=i(ma),od=n(ma,"P",{});var kae=s(od);ITo=r(kae,"The processor class to instantiate is selected based on the "),Xfe=n(kae,"CODE",{});var Kbt=s(Xfe);NTo=r(Kbt,"model_type"),Kbt.forEach(t),qTo=r(kae,` property of the config object (either
passed as an argument or loaded from `),zfe=n(kae,"CODE",{});var Zbt=s(zfe);jTo=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),DTo=r(kae," if possible):"),kae.forEach(t),GTo=i(ma),fe=n(ma,"UL",{});var _e=s(fe);Wp=n(_e,"LI",{});var Ske=s(Wp);Wfe=n(Ske,"STRONG",{});var evt=s(Wfe);OTo=r(evt,"clip"),evt.forEach(t),VTo=r(Ske," \u2014 "),aD=n(Ske,"A",{href:!0});var ovt=s(aD);XTo=r(ovt,"CLIPProcessor"),ovt.forEach(t),zTo=r(Ske," (CLIP model)"),Ske.forEach(t),WTo=i(_e),Qp=n(_e,"LI",{});var Rke=s(Qp);Qfe=n(Rke,"STRONG",{});var rvt=s(Qfe);QTo=r(rvt,"flava"),rvt.forEach(t),UTo=r(Rke," \u2014 "),nD=n(Rke,"A",{href:!0});var tvt=s(nD);HTo=r(tvt,"FlavaProcessor"),tvt.forEach(t),JTo=r(Rke," (FLAVA model)"),Rke.forEach(t),YTo=i(_e),Up=n(_e,"LI",{});var Pke=s(Up);Ufe=n(Pke,"STRONG",{});var avt=s(Ufe);KTo=r(avt,"groupvit"),avt.forEach(t),ZTo=r(Pke," \u2014 "),sD=n(Pke,"A",{href:!0});var nvt=s(sD);e8o=r(nvt,"CLIPProcessor"),nvt.forEach(t),o8o=r(Pke," (GroupViT model)"),Pke.forEach(t),r8o=i(_e),Hp=n(_e,"LI",{});var Bke=s(Hp);Hfe=n(Bke,"STRONG",{});var svt=s(Hfe);t8o=r(svt,"layoutlmv2"),svt.forEach(t),a8o=r(Bke," \u2014 "),lD=n(Bke,"A",{href:!0});var lvt=s(lD);n8o=r(lvt,"LayoutLMv2Processor"),lvt.forEach(t),s8o=r(Bke," (LayoutLMv2 model)"),Bke.forEach(t),l8o=i(_e),Jp=n(_e,"LI",{});var Ike=s(Jp);Jfe=n(Ike,"STRONG",{});var ivt=s(Jfe);i8o=r(ivt,"layoutlmv3"),ivt.forEach(t),d8o=r(Ike," \u2014 "),iD=n(Ike,"A",{href:!0});var dvt=s(iD);c8o=r(dvt,"LayoutLMv3Processor"),dvt.forEach(t),f8o=r(Ike," (LayoutLMv3 model)"),Ike.forEach(t),m8o=i(_e),Yp=n(_e,"LI",{});var Nke=s(Yp);Yfe=n(Nke,"STRONG",{});var cvt=s(Yfe);g8o=r(cvt,"layoutxlm"),cvt.forEach(t),h8o=r(Nke," \u2014 "),dD=n(Nke,"A",{href:!0});var fvt=s(dD);p8o=r(fvt,"LayoutXLMProcessor"),fvt.forEach(t),_8o=r(Nke," (LayoutXLM model)"),Nke.forEach(t),u8o=i(_e),Kp=n(_e,"LI",{});var qke=s(Kp);Kfe=n(qke,"STRONG",{});var mvt=s(Kfe);b8o=r(mvt,"owlvit"),mvt.forEach(t),v8o=r(qke," \u2014 "),cD=n(qke,"A",{href:!0});var gvt=s(cD);F8o=r(gvt,"OwlViTProcessor"),gvt.forEach(t),T8o=r(qke," (OWL-ViT model)"),qke.forEach(t),M8o=i(_e),Zp=n(_e,"LI",{});var jke=s(Zp);Zfe=n(jke,"STRONG",{});var hvt=s(Zfe);E8o=r(hvt,"sew"),hvt.forEach(t),C8o=r(jke," \u2014 "),fD=n(jke,"A",{href:!0});var pvt=s(fD);w8o=r(pvt,"Wav2Vec2Processor"),pvt.forEach(t),A8o=r(jke," (SEW model)"),jke.forEach(t),L8o=i(_e),e_=n(_e,"LI",{});var Dke=s(e_);eme=n(Dke,"STRONG",{});var _vt=s(eme);y8o=r(_vt,"sew-d"),_vt.forEach(t),x8o=r(Dke," \u2014 "),mD=n(Dke,"A",{href:!0});var uvt=s(mD);$8o=r(uvt,"Wav2Vec2Processor"),uvt.forEach(t),k8o=r(Dke," (SEW-D model)"),Dke.forEach(t),S8o=i(_e),o_=n(_e,"LI",{});var Gke=s(o_);ome=n(Gke,"STRONG",{});var bvt=s(ome);R8o=r(bvt,"speech_to_text"),bvt.forEach(t),P8o=r(Gke," \u2014 "),gD=n(Gke,"A",{href:!0});var vvt=s(gD);B8o=r(vvt,"Speech2TextProcessor"),vvt.forEach(t),I8o=r(Gke," (Speech2Text model)"),Gke.forEach(t),N8o=i(_e),r_=n(_e,"LI",{});var Oke=s(r_);rme=n(Oke,"STRONG",{});var Fvt=s(rme);q8o=r(Fvt,"speech_to_text_2"),Fvt.forEach(t),j8o=r(Oke," \u2014 "),hD=n(Oke,"A",{href:!0});var Tvt=s(hD);D8o=r(Tvt,"Speech2Text2Processor"),Tvt.forEach(t),G8o=r(Oke," (Speech2Text2 model)"),Oke.forEach(t),O8o=i(_e),t_=n(_e,"LI",{});var Vke=s(t_);tme=n(Vke,"STRONG",{});var Mvt=s(tme);V8o=r(Mvt,"trocr"),Mvt.forEach(t),X8o=r(Vke," \u2014 "),pD=n(Vke,"A",{href:!0});var Evt=s(pD);z8o=r(Evt,"TrOCRProcessor"),Evt.forEach(t),W8o=r(Vke," (TrOCR model)"),Vke.forEach(t),Q8o=i(_e),a_=n(_e,"LI",{});var Xke=s(a_);ame=n(Xke,"STRONG",{});var Cvt=s(ame);U8o=r(Cvt,"unispeech"),Cvt.forEach(t),H8o=r(Xke," \u2014 "),_D=n(Xke,"A",{href:!0});var wvt=s(_D);J8o=r(wvt,"Wav2Vec2Processor"),wvt.forEach(t),Y8o=r(Xke," (UniSpeech model)"),Xke.forEach(t),K8o=i(_e),n_=n(_e,"LI",{});var zke=s(n_);nme=n(zke,"STRONG",{});var Avt=s(nme);Z8o=r(Avt,"unispeech-sat"),Avt.forEach(t),eMo=r(zke," \u2014 "),uD=n(zke,"A",{href:!0});var Lvt=s(uD);oMo=r(Lvt,"Wav2Vec2Processor"),Lvt.forEach(t),rMo=r(zke," (UniSpeechSat model)"),zke.forEach(t),tMo=i(_e),s_=n(_e,"LI",{});var Wke=s(s_);sme=n(Wke,"STRONG",{});var yvt=s(sme);aMo=r(yvt,"vilt"),yvt.forEach(t),nMo=r(Wke," \u2014 "),bD=n(Wke,"A",{href:!0});var xvt=s(bD);sMo=r(xvt,"ViltProcessor"),xvt.forEach(t),lMo=r(Wke," (ViLT model)"),Wke.forEach(t),iMo=i(_e),l_=n(_e,"LI",{});var Qke=s(l_);lme=n(Qke,"STRONG",{});var $vt=s(lme);dMo=r($vt,"vision-text-dual-encoder"),$vt.forEach(t),cMo=r(Qke," \u2014 "),vD=n(Qke,"A",{href:!0});var kvt=s(vD);fMo=r(kvt,"VisionTextDualEncoderProcessor"),kvt.forEach(t),mMo=r(Qke," (VisionTextDualEncoder model)"),Qke.forEach(t),gMo=i(_e),i_=n(_e,"LI",{});var Uke=s(i_);ime=n(Uke,"STRONG",{});var Svt=s(ime);hMo=r(Svt,"wav2vec2"),Svt.forEach(t),pMo=r(Uke," \u2014 "),FD=n(Uke,"A",{href:!0});var Rvt=s(FD);_Mo=r(Rvt,"Wav2Vec2Processor"),Rvt.forEach(t),uMo=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),bMo=i(_e),d_=n(_e,"LI",{});var Hke=s(d_);dme=n(Hke,"STRONG",{});var Pvt=s(dme);vMo=r(Pvt,"wav2vec2-conformer"),Pvt.forEach(t),FMo=r(Hke," \u2014 "),TD=n(Hke,"A",{href:!0});var Bvt=s(TD);TMo=r(Bvt,"Wav2Vec2Processor"),Bvt.forEach(t),MMo=r(Hke," (Wav2Vec2-Conformer model)"),Hke.forEach(t),EMo=i(_e),c_=n(_e,"LI",{});var Jke=s(c_);cme=n(Jke,"STRONG",{});var Ivt=s(cme);CMo=r(Ivt,"wavlm"),Ivt.forEach(t),wMo=r(Jke," \u2014 "),MD=n(Jke,"A",{href:!0});var Nvt=s(MD);AMo=r(Nvt,"Wav2Vec2Processor"),Nvt.forEach(t),LMo=r(Jke," (WavLM model)"),Jke.forEach(t),_e.forEach(t),yMo=i(ma),T(f_.$$.fragment,ma),xMo=i(ma),T(m_.$$.fragment,ma),ma.forEach(t),$Mo=i(gl),g_=n(gl,"DIV",{class:!0});var WHe=s(g_);T(Py.$$.fragment,WHe),kMo=i(WHe),fme=n(WHe,"P",{});var qvt=s(fme);SMo=r(qvt,"Register a new processor for this class."),qvt.forEach(t),WHe.forEach(t),gl.forEach(t),NQe=i(f),rd=n(f,"H2",{class:!0});var QHe=s(rd);h_=n(QHe,"A",{id:!0,class:!0,href:!0});var jvt=s(h_);mme=n(jvt,"SPAN",{});var Dvt=s(mme);T(By.$$.fragment,Dvt),Dvt.forEach(t),jvt.forEach(t),RMo=i(QHe),gme=n(QHe,"SPAN",{});var Gvt=s(gme);PMo=r(Gvt,"AutoModel"),Gvt.forEach(t),QHe.forEach(t),qQe=i(f),So=n(f,"DIV",{class:!0});var hl=s(So);T(Iy.$$.fragment,hl),BMo=i(hl),td=n(hl,"P",{});var Sae=s(td);IMo=r(Sae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ED=n(Sae,"A",{href:!0});var Ovt=s(ED);NMo=r(Ovt,"from_pretrained()"),Ovt.forEach(t),qMo=r(Sae," class method or the "),CD=n(Sae,"A",{href:!0});var Vvt=s(CD);jMo=r(Vvt,"from_config()"),Vvt.forEach(t),DMo=r(Sae,` class
method.`),Sae.forEach(t),GMo=i(hl),Ny=n(hl,"P",{});var UHe=s(Ny);OMo=r(UHe,"This class cannot be instantiated directly using "),hme=n(UHe,"CODE",{});var Xvt=s(hme);VMo=r(Xvt,"__init__()"),Xvt.forEach(t),XMo=r(UHe," (throws an error)."),UHe.forEach(t),zMo=i(hl),mt=n(hl,"DIV",{class:!0});var i7=s(mt);T(qy.$$.fragment,i7),WMo=i(i7),pme=n(i7,"P",{});var zvt=s(pme);QMo=r(zvt,"Instantiates one of the base model classes of the library from a configuration."),zvt.forEach(t),UMo=i(i7),ad=n(i7,"P",{});var Rae=s(ad);HMo=r(Rae,`Note:
Loading a model from its configuration file does `),_me=n(Rae,"STRONG",{});var Wvt=s(_me);JMo=r(Wvt,"not"),Wvt.forEach(t),YMo=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wD=n(Rae,"A",{href:!0});var Qvt=s(wD);KMo=r(Qvt,"from_pretrained()"),Qvt.forEach(t),ZMo=r(Rae," to load the model weights."),Rae.forEach(t),eEo=i(i7),T(p_.$$.fragment,i7),i7.forEach(t),oEo=i(hl),Ye=n(hl,"DIV",{class:!0});var ga=s(Ye);T(jy.$$.fragment,ga),rEo=i(ga),ume=n(ga,"P",{});var Uvt=s(ume);tEo=r(Uvt,"Instantiate one of the base model classes of the library from a pretrained model."),Uvt.forEach(t),aEo=i(ga),Va=n(ga,"P",{});var d7=s(Va);nEo=r(d7,"The model class to instantiate is selected based on the "),bme=n(d7,"CODE",{});var Hvt=s(bme);sEo=r(Hvt,"model_type"),Hvt.forEach(t),lEo=r(d7,` property of the config object (either
passed as an argument or loaded from `),vme=n(d7,"CODE",{});var Jvt=s(vme);iEo=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),dEo=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(d7,"CODE",{});var Yvt=s(Fme);cEo=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),fEo=r(d7,":"),d7.forEach(t),mEo=i(ga),y=n(ga,"UL",{});var x=s(y);__=n(x,"LI",{});var Yke=s(__);Tme=n(Yke,"STRONG",{});var Kvt=s(Tme);gEo=r(Kvt,"albert"),Kvt.forEach(t),hEo=r(Yke," \u2014 "),AD=n(Yke,"A",{href:!0});var Zvt=s(AD);pEo=r(Zvt,"AlbertModel"),Zvt.forEach(t),_Eo=r(Yke," (ALBERT model)"),Yke.forEach(t),uEo=i(x),u_=n(x,"LI",{});var Kke=s(u_);Mme=n(Kke,"STRONG",{});var e0t=s(Mme);bEo=r(e0t,"bart"),e0t.forEach(t),vEo=r(Kke," \u2014 "),LD=n(Kke,"A",{href:!0});var o0t=s(LD);FEo=r(o0t,"BartModel"),o0t.forEach(t),TEo=r(Kke," (BART model)"),Kke.forEach(t),MEo=i(x),b_=n(x,"LI",{});var Zke=s(b_);Eme=n(Zke,"STRONG",{});var r0t=s(Eme);EEo=r(r0t,"beit"),r0t.forEach(t),CEo=r(Zke," \u2014 "),yD=n(Zke,"A",{href:!0});var t0t=s(yD);wEo=r(t0t,"BeitModel"),t0t.forEach(t),AEo=r(Zke," (BEiT model)"),Zke.forEach(t),LEo=i(x),v_=n(x,"LI",{});var eSe=s(v_);Cme=n(eSe,"STRONG",{});var a0t=s(Cme);yEo=r(a0t,"bert"),a0t.forEach(t),xEo=r(eSe," \u2014 "),xD=n(eSe,"A",{href:!0});var n0t=s(xD);$Eo=r(n0t,"BertModel"),n0t.forEach(t),kEo=r(eSe," (BERT model)"),eSe.forEach(t),SEo=i(x),F_=n(x,"LI",{});var oSe=s(F_);wme=n(oSe,"STRONG",{});var s0t=s(wme);REo=r(s0t,"bert-generation"),s0t.forEach(t),PEo=r(oSe," \u2014 "),$D=n(oSe,"A",{href:!0});var l0t=s($D);BEo=r(l0t,"BertGenerationEncoder"),l0t.forEach(t),IEo=r(oSe," (Bert Generation model)"),oSe.forEach(t),NEo=i(x),T_=n(x,"LI",{});var rSe=s(T_);Ame=n(rSe,"STRONG",{});var i0t=s(Ame);qEo=r(i0t,"big_bird"),i0t.forEach(t),jEo=r(rSe," \u2014 "),kD=n(rSe,"A",{href:!0});var d0t=s(kD);DEo=r(d0t,"BigBirdModel"),d0t.forEach(t),GEo=r(rSe," (BigBird model)"),rSe.forEach(t),OEo=i(x),M_=n(x,"LI",{});var tSe=s(M_);Lme=n(tSe,"STRONG",{});var c0t=s(Lme);VEo=r(c0t,"bigbird_pegasus"),c0t.forEach(t),XEo=r(tSe," \u2014 "),SD=n(tSe,"A",{href:!0});var f0t=s(SD);zEo=r(f0t,"BigBirdPegasusModel"),f0t.forEach(t),WEo=r(tSe," (BigBird-Pegasus model)"),tSe.forEach(t),QEo=i(x),E_=n(x,"LI",{});var aSe=s(E_);yme=n(aSe,"STRONG",{});var m0t=s(yme);UEo=r(m0t,"blenderbot"),m0t.forEach(t),HEo=r(aSe," \u2014 "),RD=n(aSe,"A",{href:!0});var g0t=s(RD);JEo=r(g0t,"BlenderbotModel"),g0t.forEach(t),YEo=r(aSe," (Blenderbot model)"),aSe.forEach(t),KEo=i(x),C_=n(x,"LI",{});var nSe=s(C_);xme=n(nSe,"STRONG",{});var h0t=s(xme);ZEo=r(h0t,"blenderbot-small"),h0t.forEach(t),e4o=r(nSe," \u2014 "),PD=n(nSe,"A",{href:!0});var p0t=s(PD);o4o=r(p0t,"BlenderbotSmallModel"),p0t.forEach(t),r4o=r(nSe," (BlenderbotSmall model)"),nSe.forEach(t),t4o=i(x),w_=n(x,"LI",{});var sSe=s(w_);$me=n(sSe,"STRONG",{});var _0t=s($me);a4o=r(_0t,"bloom"),_0t.forEach(t),n4o=r(sSe," \u2014 "),BD=n(sSe,"A",{href:!0});var u0t=s(BD);s4o=r(u0t,"BloomModel"),u0t.forEach(t),l4o=r(sSe," (BLOOM model)"),sSe.forEach(t),i4o=i(x),A_=n(x,"LI",{});var lSe=s(A_);kme=n(lSe,"STRONG",{});var b0t=s(kme);d4o=r(b0t,"camembert"),b0t.forEach(t),c4o=r(lSe," \u2014 "),ID=n(lSe,"A",{href:!0});var v0t=s(ID);f4o=r(v0t,"CamembertModel"),v0t.forEach(t),m4o=r(lSe," (CamemBERT model)"),lSe.forEach(t),g4o=i(x),L_=n(x,"LI",{});var iSe=s(L_);Sme=n(iSe,"STRONG",{});var F0t=s(Sme);h4o=r(F0t,"canine"),F0t.forEach(t),p4o=r(iSe," \u2014 "),ND=n(iSe,"A",{href:!0});var T0t=s(ND);_4o=r(T0t,"CanineModel"),T0t.forEach(t),u4o=r(iSe," (CANINE model)"),iSe.forEach(t),b4o=i(x),y_=n(x,"LI",{});var dSe=s(y_);Rme=n(dSe,"STRONG",{});var M0t=s(Rme);v4o=r(M0t,"clip"),M0t.forEach(t),F4o=r(dSe," \u2014 "),qD=n(dSe,"A",{href:!0});var E0t=s(qD);T4o=r(E0t,"CLIPModel"),E0t.forEach(t),M4o=r(dSe," (CLIP model)"),dSe.forEach(t),E4o=i(x),x_=n(x,"LI",{});var cSe=s(x_);Pme=n(cSe,"STRONG",{});var C0t=s(Pme);C4o=r(C0t,"codegen"),C0t.forEach(t),w4o=r(cSe," \u2014 "),jD=n(cSe,"A",{href:!0});var w0t=s(jD);A4o=r(w0t,"CodeGenModel"),w0t.forEach(t),L4o=r(cSe," (CodeGen model)"),cSe.forEach(t),y4o=i(x),$_=n(x,"LI",{});var fSe=s($_);Bme=n(fSe,"STRONG",{});var A0t=s(Bme);x4o=r(A0t,"convbert"),A0t.forEach(t),$4o=r(fSe," \u2014 "),DD=n(fSe,"A",{href:!0});var L0t=s(DD);k4o=r(L0t,"ConvBertModel"),L0t.forEach(t),S4o=r(fSe," (ConvBERT model)"),fSe.forEach(t),R4o=i(x),k_=n(x,"LI",{});var mSe=s(k_);Ime=n(mSe,"STRONG",{});var y0t=s(Ime);P4o=r(y0t,"convnext"),y0t.forEach(t),B4o=r(mSe," \u2014 "),GD=n(mSe,"A",{href:!0});var x0t=s(GD);I4o=r(x0t,"ConvNextModel"),x0t.forEach(t),N4o=r(mSe," (ConvNeXT model)"),mSe.forEach(t),q4o=i(x),S_=n(x,"LI",{});var gSe=s(S_);Nme=n(gSe,"STRONG",{});var $0t=s(Nme);j4o=r($0t,"ctrl"),$0t.forEach(t),D4o=r(gSe," \u2014 "),OD=n(gSe,"A",{href:!0});var k0t=s(OD);G4o=r(k0t,"CTRLModel"),k0t.forEach(t),O4o=r(gSe," (CTRL model)"),gSe.forEach(t),V4o=i(x),R_=n(x,"LI",{});var hSe=s(R_);qme=n(hSe,"STRONG",{});var S0t=s(qme);X4o=r(S0t,"cvt"),S0t.forEach(t),z4o=r(hSe," \u2014 "),VD=n(hSe,"A",{href:!0});var R0t=s(VD);W4o=r(R0t,"CvtModel"),R0t.forEach(t),Q4o=r(hSe," (CvT model)"),hSe.forEach(t),U4o=i(x),P_=n(x,"LI",{});var pSe=s(P_);jme=n(pSe,"STRONG",{});var P0t=s(jme);H4o=r(P0t,"data2vec-audio"),P0t.forEach(t),J4o=r(pSe," \u2014 "),XD=n(pSe,"A",{href:!0});var B0t=s(XD);Y4o=r(B0t,"Data2VecAudioModel"),B0t.forEach(t),K4o=r(pSe," (Data2VecAudio model)"),pSe.forEach(t),Z4o=i(x),B_=n(x,"LI",{});var _Se=s(B_);Dme=n(_Se,"STRONG",{});var I0t=s(Dme);eCo=r(I0t,"data2vec-text"),I0t.forEach(t),oCo=r(_Se," \u2014 "),zD=n(_Se,"A",{href:!0});var N0t=s(zD);rCo=r(N0t,"Data2VecTextModel"),N0t.forEach(t),tCo=r(_Se," (Data2VecText model)"),_Se.forEach(t),aCo=i(x),I_=n(x,"LI",{});var uSe=s(I_);Gme=n(uSe,"STRONG",{});var q0t=s(Gme);nCo=r(q0t,"data2vec-vision"),q0t.forEach(t),sCo=r(uSe," \u2014 "),WD=n(uSe,"A",{href:!0});var j0t=s(WD);lCo=r(j0t,"Data2VecVisionModel"),j0t.forEach(t),iCo=r(uSe," (Data2VecVision model)"),uSe.forEach(t),dCo=i(x),N_=n(x,"LI",{});var bSe=s(N_);Ome=n(bSe,"STRONG",{});var D0t=s(Ome);cCo=r(D0t,"deberta"),D0t.forEach(t),fCo=r(bSe," \u2014 "),QD=n(bSe,"A",{href:!0});var G0t=s(QD);mCo=r(G0t,"DebertaModel"),G0t.forEach(t),gCo=r(bSe," (DeBERTa model)"),bSe.forEach(t),hCo=i(x),q_=n(x,"LI",{});var vSe=s(q_);Vme=n(vSe,"STRONG",{});var O0t=s(Vme);pCo=r(O0t,"deberta-v2"),O0t.forEach(t),_Co=r(vSe," \u2014 "),UD=n(vSe,"A",{href:!0});var V0t=s(UD);uCo=r(V0t,"DebertaV2Model"),V0t.forEach(t),bCo=r(vSe," (DeBERTa-v2 model)"),vSe.forEach(t),vCo=i(x),j_=n(x,"LI",{});var FSe=s(j_);Xme=n(FSe,"STRONG",{});var X0t=s(Xme);FCo=r(X0t,"decision_transformer"),X0t.forEach(t),TCo=r(FSe," \u2014 "),HD=n(FSe,"A",{href:!0});var z0t=s(HD);MCo=r(z0t,"DecisionTransformerModel"),z0t.forEach(t),ECo=r(FSe," (Decision Transformer model)"),FSe.forEach(t),CCo=i(x),D_=n(x,"LI",{});var TSe=s(D_);zme=n(TSe,"STRONG",{});var W0t=s(zme);wCo=r(W0t,"deit"),W0t.forEach(t),ACo=r(TSe," \u2014 "),JD=n(TSe,"A",{href:!0});var Q0t=s(JD);LCo=r(Q0t,"DeiTModel"),Q0t.forEach(t),yCo=r(TSe," (DeiT model)"),TSe.forEach(t),xCo=i(x),G_=n(x,"LI",{});var MSe=s(G_);Wme=n(MSe,"STRONG",{});var U0t=s(Wme);$Co=r(U0t,"detr"),U0t.forEach(t),kCo=r(MSe," \u2014 "),YD=n(MSe,"A",{href:!0});var H0t=s(YD);SCo=r(H0t,"DetrModel"),H0t.forEach(t),RCo=r(MSe," (DETR model)"),MSe.forEach(t),PCo=i(x),O_=n(x,"LI",{});var ESe=s(O_);Qme=n(ESe,"STRONG",{});var J0t=s(Qme);BCo=r(J0t,"distilbert"),J0t.forEach(t),ICo=r(ESe," \u2014 "),KD=n(ESe,"A",{href:!0});var Y0t=s(KD);NCo=r(Y0t,"DistilBertModel"),Y0t.forEach(t),qCo=r(ESe," (DistilBERT model)"),ESe.forEach(t),jCo=i(x),V_=n(x,"LI",{});var CSe=s(V_);Ume=n(CSe,"STRONG",{});var K0t=s(Ume);DCo=r(K0t,"dpr"),K0t.forEach(t),GCo=r(CSe," \u2014 "),ZD=n(CSe,"A",{href:!0});var Z0t=s(ZD);OCo=r(Z0t,"DPRQuestionEncoder"),Z0t.forEach(t),VCo=r(CSe," (DPR model)"),CSe.forEach(t),XCo=i(x),X_=n(x,"LI",{});var wSe=s(X_);Hme=n(wSe,"STRONG",{});var e6t=s(Hme);zCo=r(e6t,"dpt"),e6t.forEach(t),WCo=r(wSe," \u2014 "),eG=n(wSe,"A",{href:!0});var o6t=s(eG);QCo=r(o6t,"DPTModel"),o6t.forEach(t),UCo=r(wSe," (DPT model)"),wSe.forEach(t),HCo=i(x),z_=n(x,"LI",{});var ASe=s(z_);Jme=n(ASe,"STRONG",{});var r6t=s(Jme);JCo=r(r6t,"electra"),r6t.forEach(t),YCo=r(ASe," \u2014 "),oG=n(ASe,"A",{href:!0});var t6t=s(oG);KCo=r(t6t,"ElectraModel"),t6t.forEach(t),ZCo=r(ASe," (ELECTRA model)"),ASe.forEach(t),e3o=i(x),W_=n(x,"LI",{});var LSe=s(W_);Yme=n(LSe,"STRONG",{});var a6t=s(Yme);o3o=r(a6t,"flaubert"),a6t.forEach(t),r3o=r(LSe," \u2014 "),rG=n(LSe,"A",{href:!0});var n6t=s(rG);t3o=r(n6t,"FlaubertModel"),n6t.forEach(t),a3o=r(LSe," (FlauBERT model)"),LSe.forEach(t),n3o=i(x),Q_=n(x,"LI",{});var ySe=s(Q_);Kme=n(ySe,"STRONG",{});var s6t=s(Kme);s3o=r(s6t,"flava"),s6t.forEach(t),l3o=r(ySe," \u2014 "),tG=n(ySe,"A",{href:!0});var l6t=s(tG);i3o=r(l6t,"FlavaModel"),l6t.forEach(t),d3o=r(ySe," (FLAVA model)"),ySe.forEach(t),c3o=i(x),U_=n(x,"LI",{});var xSe=s(U_);Zme=n(xSe,"STRONG",{});var i6t=s(Zme);f3o=r(i6t,"fnet"),i6t.forEach(t),m3o=r(xSe," \u2014 "),aG=n(xSe,"A",{href:!0});var d6t=s(aG);g3o=r(d6t,"FNetModel"),d6t.forEach(t),h3o=r(xSe," (FNet model)"),xSe.forEach(t),p3o=i(x),H_=n(x,"LI",{});var $Se=s(H_);ege=n($Se,"STRONG",{});var c6t=s(ege);_3o=r(c6t,"fsmt"),c6t.forEach(t),u3o=r($Se," \u2014 "),nG=n($Se,"A",{href:!0});var f6t=s(nG);b3o=r(f6t,"FSMTModel"),f6t.forEach(t),v3o=r($Se," (FairSeq Machine-Translation model)"),$Se.forEach(t),F3o=i(x),nl=n(x,"LI",{});var UR=s(nl);oge=n(UR,"STRONG",{});var m6t=s(oge);T3o=r(m6t,"funnel"),m6t.forEach(t),M3o=r(UR," \u2014 "),sG=n(UR,"A",{href:!0});var g6t=s(sG);E3o=r(g6t,"FunnelModel"),g6t.forEach(t),C3o=r(UR," or "),lG=n(UR,"A",{href:!0});var h6t=s(lG);w3o=r(h6t,"FunnelBaseModel"),h6t.forEach(t),A3o=r(UR," (Funnel Transformer model)"),UR.forEach(t),L3o=i(x),J_=n(x,"LI",{});var kSe=s(J_);rge=n(kSe,"STRONG",{});var p6t=s(rge);y3o=r(p6t,"glpn"),p6t.forEach(t),x3o=r(kSe," \u2014 "),iG=n(kSe,"A",{href:!0});var _6t=s(iG);$3o=r(_6t,"GLPNModel"),_6t.forEach(t),k3o=r(kSe," (GLPN model)"),kSe.forEach(t),S3o=i(x),Y_=n(x,"LI",{});var SSe=s(Y_);tge=n(SSe,"STRONG",{});var u6t=s(tge);R3o=r(u6t,"gpt2"),u6t.forEach(t),P3o=r(SSe," \u2014 "),dG=n(SSe,"A",{href:!0});var b6t=s(dG);B3o=r(b6t,"GPT2Model"),b6t.forEach(t),I3o=r(SSe," (OpenAI GPT-2 model)"),SSe.forEach(t),N3o=i(x),K_=n(x,"LI",{});var RSe=s(K_);age=n(RSe,"STRONG",{});var v6t=s(age);q3o=r(v6t,"gpt_neo"),v6t.forEach(t),j3o=r(RSe," \u2014 "),cG=n(RSe,"A",{href:!0});var F6t=s(cG);D3o=r(F6t,"GPTNeoModel"),F6t.forEach(t),G3o=r(RSe," (GPT Neo model)"),RSe.forEach(t),O3o=i(x),Z_=n(x,"LI",{});var PSe=s(Z_);nge=n(PSe,"STRONG",{});var T6t=s(nge);V3o=r(T6t,"gpt_neox"),T6t.forEach(t),X3o=r(PSe," \u2014 "),fG=n(PSe,"A",{href:!0});var M6t=s(fG);z3o=r(M6t,"GPTNeoXModel"),M6t.forEach(t),W3o=r(PSe," (GPT NeoX model)"),PSe.forEach(t),Q3o=i(x),eu=n(x,"LI",{});var BSe=s(eu);sge=n(BSe,"STRONG",{});var E6t=s(sge);U3o=r(E6t,"gptj"),E6t.forEach(t),H3o=r(BSe," \u2014 "),mG=n(BSe,"A",{href:!0});var C6t=s(mG);J3o=r(C6t,"GPTJModel"),C6t.forEach(t),Y3o=r(BSe," (GPT-J model)"),BSe.forEach(t),K3o=i(x),ou=n(x,"LI",{});var ISe=s(ou);lge=n(ISe,"STRONG",{});var w6t=s(lge);Z3o=r(w6t,"groupvit"),w6t.forEach(t),e5o=r(ISe," \u2014 "),gG=n(ISe,"A",{href:!0});var A6t=s(gG);o5o=r(A6t,"GroupViTModel"),A6t.forEach(t),r5o=r(ISe," (GroupViT model)"),ISe.forEach(t),t5o=i(x),ru=n(x,"LI",{});var NSe=s(ru);ige=n(NSe,"STRONG",{});var L6t=s(ige);a5o=r(L6t,"hubert"),L6t.forEach(t),n5o=r(NSe," \u2014 "),hG=n(NSe,"A",{href:!0});var y6t=s(hG);s5o=r(y6t,"HubertModel"),y6t.forEach(t),l5o=r(NSe," (Hubert model)"),NSe.forEach(t),i5o=i(x),tu=n(x,"LI",{});var qSe=s(tu);dge=n(qSe,"STRONG",{});var x6t=s(dge);d5o=r(x6t,"ibert"),x6t.forEach(t),c5o=r(qSe," \u2014 "),pG=n(qSe,"A",{href:!0});var $6t=s(pG);f5o=r($6t,"IBertModel"),$6t.forEach(t),m5o=r(qSe," (I-BERT model)"),qSe.forEach(t),g5o=i(x),au=n(x,"LI",{});var jSe=s(au);cge=n(jSe,"STRONG",{});var k6t=s(cge);h5o=r(k6t,"imagegpt"),k6t.forEach(t),p5o=r(jSe," \u2014 "),_G=n(jSe,"A",{href:!0});var S6t=s(_G);_5o=r(S6t,"ImageGPTModel"),S6t.forEach(t),u5o=r(jSe," (ImageGPT model)"),jSe.forEach(t),b5o=i(x),nu=n(x,"LI",{});var DSe=s(nu);fge=n(DSe,"STRONG",{});var R6t=s(fge);v5o=r(R6t,"layoutlm"),R6t.forEach(t),F5o=r(DSe," \u2014 "),uG=n(DSe,"A",{href:!0});var P6t=s(uG);T5o=r(P6t,"LayoutLMModel"),P6t.forEach(t),M5o=r(DSe," (LayoutLM model)"),DSe.forEach(t),E5o=i(x),su=n(x,"LI",{});var GSe=s(su);mge=n(GSe,"STRONG",{});var B6t=s(mge);C5o=r(B6t,"layoutlmv2"),B6t.forEach(t),w5o=r(GSe," \u2014 "),bG=n(GSe,"A",{href:!0});var I6t=s(bG);A5o=r(I6t,"LayoutLMv2Model"),I6t.forEach(t),L5o=r(GSe," (LayoutLMv2 model)"),GSe.forEach(t),y5o=i(x),lu=n(x,"LI",{});var OSe=s(lu);gge=n(OSe,"STRONG",{});var N6t=s(gge);x5o=r(N6t,"layoutlmv3"),N6t.forEach(t),$5o=r(OSe," \u2014 "),vG=n(OSe,"A",{href:!0});var q6t=s(vG);k5o=r(q6t,"LayoutLMv3Model"),q6t.forEach(t),S5o=r(OSe," (LayoutLMv3 model)"),OSe.forEach(t),R5o=i(x),iu=n(x,"LI",{});var VSe=s(iu);hge=n(VSe,"STRONG",{});var j6t=s(hge);P5o=r(j6t,"led"),j6t.forEach(t),B5o=r(VSe," \u2014 "),FG=n(VSe,"A",{href:!0});var D6t=s(FG);I5o=r(D6t,"LEDModel"),D6t.forEach(t),N5o=r(VSe," (LED model)"),VSe.forEach(t),q5o=i(x),du=n(x,"LI",{});var XSe=s(du);pge=n(XSe,"STRONG",{});var G6t=s(pge);j5o=r(G6t,"levit"),G6t.forEach(t),D5o=r(XSe," \u2014 "),TG=n(XSe,"A",{href:!0});var O6t=s(TG);G5o=r(O6t,"LevitModel"),O6t.forEach(t),O5o=r(XSe," (LeViT model)"),XSe.forEach(t),V5o=i(x),cu=n(x,"LI",{});var zSe=s(cu);_ge=n(zSe,"STRONG",{});var V6t=s(_ge);X5o=r(V6t,"longformer"),V6t.forEach(t),z5o=r(zSe," \u2014 "),MG=n(zSe,"A",{href:!0});var X6t=s(MG);W5o=r(X6t,"LongformerModel"),X6t.forEach(t),Q5o=r(zSe," (Longformer model)"),zSe.forEach(t),U5o=i(x),fu=n(x,"LI",{});var WSe=s(fu);uge=n(WSe,"STRONG",{});var z6t=s(uge);H5o=r(z6t,"longt5"),z6t.forEach(t),J5o=r(WSe," \u2014 "),EG=n(WSe,"A",{href:!0});var W6t=s(EG);Y5o=r(W6t,"LongT5Model"),W6t.forEach(t),K5o=r(WSe," (LongT5 model)"),WSe.forEach(t),Z5o=i(x),mu=n(x,"LI",{});var QSe=s(mu);bge=n(QSe,"STRONG",{});var Q6t=s(bge);ewo=r(Q6t,"luke"),Q6t.forEach(t),owo=r(QSe," \u2014 "),CG=n(QSe,"A",{href:!0});var U6t=s(CG);rwo=r(U6t,"LukeModel"),U6t.forEach(t),two=r(QSe," (LUKE model)"),QSe.forEach(t),awo=i(x),gu=n(x,"LI",{});var USe=s(gu);vge=n(USe,"STRONG",{});var H6t=s(vge);nwo=r(H6t,"lxmert"),H6t.forEach(t),swo=r(USe," \u2014 "),wG=n(USe,"A",{href:!0});var J6t=s(wG);lwo=r(J6t,"LxmertModel"),J6t.forEach(t),iwo=r(USe," (LXMERT model)"),USe.forEach(t),dwo=i(x),hu=n(x,"LI",{});var HSe=s(hu);Fge=n(HSe,"STRONG",{});var Y6t=s(Fge);cwo=r(Y6t,"m2m_100"),Y6t.forEach(t),fwo=r(HSe," \u2014 "),AG=n(HSe,"A",{href:!0});var K6t=s(AG);mwo=r(K6t,"M2M100Model"),K6t.forEach(t),gwo=r(HSe," (M2M100 model)"),HSe.forEach(t),hwo=i(x),pu=n(x,"LI",{});var JSe=s(pu);Tge=n(JSe,"STRONG",{});var Z6t=s(Tge);pwo=r(Z6t,"marian"),Z6t.forEach(t),_wo=r(JSe," \u2014 "),LG=n(JSe,"A",{href:!0});var eFt=s(LG);uwo=r(eFt,"MarianModel"),eFt.forEach(t),bwo=r(JSe," (Marian model)"),JSe.forEach(t),vwo=i(x),_u=n(x,"LI",{});var YSe=s(_u);Mge=n(YSe,"STRONG",{});var oFt=s(Mge);Fwo=r(oFt,"maskformer"),oFt.forEach(t),Two=r(YSe," \u2014 "),yG=n(YSe,"A",{href:!0});var rFt=s(yG);Mwo=r(rFt,"MaskFormerModel"),rFt.forEach(t),Ewo=r(YSe," (MaskFormer model)"),YSe.forEach(t),Cwo=i(x),uu=n(x,"LI",{});var KSe=s(uu);Ege=n(KSe,"STRONG",{});var tFt=s(Ege);wwo=r(tFt,"mbart"),tFt.forEach(t),Awo=r(KSe," \u2014 "),xG=n(KSe,"A",{href:!0});var aFt=s(xG);Lwo=r(aFt,"MBartModel"),aFt.forEach(t),ywo=r(KSe," (mBART model)"),KSe.forEach(t),xwo=i(x),bu=n(x,"LI",{});var ZSe=s(bu);Cge=n(ZSe,"STRONG",{});var nFt=s(Cge);$wo=r(nFt,"mctct"),nFt.forEach(t),kwo=r(ZSe," \u2014 "),$G=n(ZSe,"A",{href:!0});var sFt=s($G);Swo=r(sFt,"MCTCTModel"),sFt.forEach(t),Rwo=r(ZSe," (M-CTC-T model)"),ZSe.forEach(t),Pwo=i(x),vu=n(x,"LI",{});var eRe=s(vu);wge=n(eRe,"STRONG",{});var lFt=s(wge);Bwo=r(lFt,"megatron-bert"),lFt.forEach(t),Iwo=r(eRe," \u2014 "),kG=n(eRe,"A",{href:!0});var iFt=s(kG);Nwo=r(iFt,"MegatronBertModel"),iFt.forEach(t),qwo=r(eRe," (Megatron-BERT model)"),eRe.forEach(t),jwo=i(x),Fu=n(x,"LI",{});var oRe=s(Fu);Age=n(oRe,"STRONG",{});var dFt=s(Age);Dwo=r(dFt,"mobilebert"),dFt.forEach(t),Gwo=r(oRe," \u2014 "),SG=n(oRe,"A",{href:!0});var cFt=s(SG);Owo=r(cFt,"MobileBertModel"),cFt.forEach(t),Vwo=r(oRe," (MobileBERT model)"),oRe.forEach(t),Xwo=i(x),Tu=n(x,"LI",{});var rRe=s(Tu);Lge=n(rRe,"STRONG",{});var fFt=s(Lge);zwo=r(fFt,"mobilevit"),fFt.forEach(t),Wwo=r(rRe," \u2014 "),RG=n(rRe,"A",{href:!0});var mFt=s(RG);Qwo=r(mFt,"MobileViTModel"),mFt.forEach(t),Uwo=r(rRe," (MobileViT model)"),rRe.forEach(t),Hwo=i(x),Mu=n(x,"LI",{});var tRe=s(Mu);yge=n(tRe,"STRONG",{});var gFt=s(yge);Jwo=r(gFt,"mpnet"),gFt.forEach(t),Ywo=r(tRe," \u2014 "),PG=n(tRe,"A",{href:!0});var hFt=s(PG);Kwo=r(hFt,"MPNetModel"),hFt.forEach(t),Zwo=r(tRe," (MPNet model)"),tRe.forEach(t),eAo=i(x),Eu=n(x,"LI",{});var aRe=s(Eu);xge=n(aRe,"STRONG",{});var pFt=s(xge);oAo=r(pFt,"mt5"),pFt.forEach(t),rAo=r(aRe," \u2014 "),BG=n(aRe,"A",{href:!0});var _Ft=s(BG);tAo=r(_Ft,"MT5Model"),_Ft.forEach(t),aAo=r(aRe," (MT5 model)"),aRe.forEach(t),nAo=i(x),Cu=n(x,"LI",{});var nRe=s(Cu);$ge=n(nRe,"STRONG",{});var uFt=s($ge);sAo=r(uFt,"mvp"),uFt.forEach(t),lAo=r(nRe," \u2014 "),IG=n(nRe,"A",{href:!0});var bFt=s(IG);iAo=r(bFt,"MvpModel"),bFt.forEach(t),dAo=r(nRe," (MVP model)"),nRe.forEach(t),cAo=i(x),wu=n(x,"LI",{});var sRe=s(wu);kge=n(sRe,"STRONG",{});var vFt=s(kge);fAo=r(vFt,"nezha"),vFt.forEach(t),mAo=r(sRe," \u2014 "),NG=n(sRe,"A",{href:!0});var FFt=s(NG);gAo=r(FFt,"NezhaModel"),FFt.forEach(t),hAo=r(sRe," (Nezha model)"),sRe.forEach(t),pAo=i(x),Au=n(x,"LI",{});var lRe=s(Au);Sge=n(lRe,"STRONG",{});var TFt=s(Sge);_Ao=r(TFt,"nllb"),TFt.forEach(t),uAo=r(lRe," \u2014 "),qG=n(lRe,"A",{href:!0});var MFt=s(qG);bAo=r(MFt,"M2M100Model"),MFt.forEach(t),vAo=r(lRe," (NLLB model)"),lRe.forEach(t),FAo=i(x),Lu=n(x,"LI",{});var iRe=s(Lu);Rge=n(iRe,"STRONG",{});var EFt=s(Rge);TAo=r(EFt,"nystromformer"),EFt.forEach(t),MAo=r(iRe," \u2014 "),jG=n(iRe,"A",{href:!0});var CFt=s(jG);EAo=r(CFt,"NystromformerModel"),CFt.forEach(t),CAo=r(iRe," (Nystr\xF6mformer model)"),iRe.forEach(t),wAo=i(x),yu=n(x,"LI",{});var dRe=s(yu);Pge=n(dRe,"STRONG",{});var wFt=s(Pge);AAo=r(wFt,"openai-gpt"),wFt.forEach(t),LAo=r(dRe," \u2014 "),DG=n(dRe,"A",{href:!0});var AFt=s(DG);yAo=r(AFt,"OpenAIGPTModel"),AFt.forEach(t),xAo=r(dRe," (OpenAI GPT model)"),dRe.forEach(t),$Ao=i(x),xu=n(x,"LI",{});var cRe=s(xu);Bge=n(cRe,"STRONG",{});var LFt=s(Bge);kAo=r(LFt,"opt"),LFt.forEach(t),SAo=r(cRe," \u2014 "),GG=n(cRe,"A",{href:!0});var yFt=s(GG);RAo=r(yFt,"OPTModel"),yFt.forEach(t),PAo=r(cRe," (OPT model)"),cRe.forEach(t),BAo=i(x),$u=n(x,"LI",{});var fRe=s($u);Ige=n(fRe,"STRONG",{});var xFt=s(Ige);IAo=r(xFt,"owlvit"),xFt.forEach(t),NAo=r(fRe," \u2014 "),OG=n(fRe,"A",{href:!0});var $Ft=s(OG);qAo=r($Ft,"OwlViTModel"),$Ft.forEach(t),jAo=r(fRe," (OWL-ViT model)"),fRe.forEach(t),DAo=i(x),ku=n(x,"LI",{});var mRe=s(ku);Nge=n(mRe,"STRONG",{});var kFt=s(Nge);GAo=r(kFt,"pegasus"),kFt.forEach(t),OAo=r(mRe," \u2014 "),VG=n(mRe,"A",{href:!0});var SFt=s(VG);VAo=r(SFt,"PegasusModel"),SFt.forEach(t),XAo=r(mRe," (Pegasus model)"),mRe.forEach(t),zAo=i(x),Su=n(x,"LI",{});var gRe=s(Su);qge=n(gRe,"STRONG",{});var RFt=s(qge);WAo=r(RFt,"perceiver"),RFt.forEach(t),QAo=r(gRe," \u2014 "),XG=n(gRe,"A",{href:!0});var PFt=s(XG);UAo=r(PFt,"PerceiverModel"),PFt.forEach(t),HAo=r(gRe," (Perceiver model)"),gRe.forEach(t),JAo=i(x),Ru=n(x,"LI",{});var hRe=s(Ru);jge=n(hRe,"STRONG",{});var BFt=s(jge);YAo=r(BFt,"plbart"),BFt.forEach(t),KAo=r(hRe," \u2014 "),zG=n(hRe,"A",{href:!0});var IFt=s(zG);ZAo=r(IFt,"PLBartModel"),IFt.forEach(t),e7o=r(hRe," (PLBart model)"),hRe.forEach(t),o7o=i(x),Pu=n(x,"LI",{});var pRe=s(Pu);Dge=n(pRe,"STRONG",{});var NFt=s(Dge);r7o=r(NFt,"poolformer"),NFt.forEach(t),t7o=r(pRe," \u2014 "),WG=n(pRe,"A",{href:!0});var qFt=s(WG);a7o=r(qFt,"PoolFormerModel"),qFt.forEach(t),n7o=r(pRe," (PoolFormer model)"),pRe.forEach(t),s7o=i(x),Bu=n(x,"LI",{});var _Re=s(Bu);Gge=n(_Re,"STRONG",{});var jFt=s(Gge);l7o=r(jFt,"prophetnet"),jFt.forEach(t),i7o=r(_Re," \u2014 "),QG=n(_Re,"A",{href:!0});var DFt=s(QG);d7o=r(DFt,"ProphetNetModel"),DFt.forEach(t),c7o=r(_Re," (ProphetNet model)"),_Re.forEach(t),f7o=i(x),Iu=n(x,"LI",{});var uRe=s(Iu);Oge=n(uRe,"STRONG",{});var GFt=s(Oge);m7o=r(GFt,"qdqbert"),GFt.forEach(t),g7o=r(uRe," \u2014 "),UG=n(uRe,"A",{href:!0});var OFt=s(UG);h7o=r(OFt,"QDQBertModel"),OFt.forEach(t),p7o=r(uRe," (QDQBert model)"),uRe.forEach(t),_7o=i(x),Nu=n(x,"LI",{});var bRe=s(Nu);Vge=n(bRe,"STRONG",{});var VFt=s(Vge);u7o=r(VFt,"reformer"),VFt.forEach(t),b7o=r(bRe," \u2014 "),HG=n(bRe,"A",{href:!0});var XFt=s(HG);v7o=r(XFt,"ReformerModel"),XFt.forEach(t),F7o=r(bRe," (Reformer model)"),bRe.forEach(t),T7o=i(x),qu=n(x,"LI",{});var vRe=s(qu);Xge=n(vRe,"STRONG",{});var zFt=s(Xge);M7o=r(zFt,"regnet"),zFt.forEach(t),E7o=r(vRe," \u2014 "),JG=n(vRe,"A",{href:!0});var WFt=s(JG);C7o=r(WFt,"RegNetModel"),WFt.forEach(t),w7o=r(vRe," (RegNet model)"),vRe.forEach(t),A7o=i(x),ju=n(x,"LI",{});var FRe=s(ju);zge=n(FRe,"STRONG",{});var QFt=s(zge);L7o=r(QFt,"rembert"),QFt.forEach(t),y7o=r(FRe," \u2014 "),YG=n(FRe,"A",{href:!0});var UFt=s(YG);x7o=r(UFt,"RemBertModel"),UFt.forEach(t),$7o=r(FRe," (RemBERT model)"),FRe.forEach(t),k7o=i(x),Du=n(x,"LI",{});var TRe=s(Du);Wge=n(TRe,"STRONG",{});var HFt=s(Wge);S7o=r(HFt,"resnet"),HFt.forEach(t),R7o=r(TRe," \u2014 "),KG=n(TRe,"A",{href:!0});var JFt=s(KG);P7o=r(JFt,"ResNetModel"),JFt.forEach(t),B7o=r(TRe," (ResNet model)"),TRe.forEach(t),I7o=i(x),Gu=n(x,"LI",{});var MRe=s(Gu);Qge=n(MRe,"STRONG",{});var YFt=s(Qge);N7o=r(YFt,"retribert"),YFt.forEach(t),q7o=r(MRe," \u2014 "),ZG=n(MRe,"A",{href:!0});var KFt=s(ZG);j7o=r(KFt,"RetriBertModel"),KFt.forEach(t),D7o=r(MRe," (RetriBERT model)"),MRe.forEach(t),G7o=i(x),Ou=n(x,"LI",{});var ERe=s(Ou);Uge=n(ERe,"STRONG",{});var ZFt=s(Uge);O7o=r(ZFt,"roberta"),ZFt.forEach(t),V7o=r(ERe," \u2014 "),eO=n(ERe,"A",{href:!0});var eTt=s(eO);X7o=r(eTt,"RobertaModel"),eTt.forEach(t),z7o=r(ERe," (RoBERTa model)"),ERe.forEach(t),W7o=i(x),Vu=n(x,"LI",{});var CRe=s(Vu);Hge=n(CRe,"STRONG",{});var oTt=s(Hge);Q7o=r(oTt,"roformer"),oTt.forEach(t),U7o=r(CRe," \u2014 "),oO=n(CRe,"A",{href:!0});var rTt=s(oO);H7o=r(rTt,"RoFormerModel"),rTt.forEach(t),J7o=r(CRe," (RoFormer model)"),CRe.forEach(t),Y7o=i(x),Xu=n(x,"LI",{});var wRe=s(Xu);Jge=n(wRe,"STRONG",{});var tTt=s(Jge);K7o=r(tTt,"segformer"),tTt.forEach(t),Z7o=r(wRe," \u2014 "),rO=n(wRe,"A",{href:!0});var aTt=s(rO);eLo=r(aTt,"SegformerModel"),aTt.forEach(t),oLo=r(wRe," (SegFormer model)"),wRe.forEach(t),rLo=i(x),zu=n(x,"LI",{});var ARe=s(zu);Yge=n(ARe,"STRONG",{});var nTt=s(Yge);tLo=r(nTt,"sew"),nTt.forEach(t),aLo=r(ARe," \u2014 "),tO=n(ARe,"A",{href:!0});var sTt=s(tO);nLo=r(sTt,"SEWModel"),sTt.forEach(t),sLo=r(ARe," (SEW model)"),ARe.forEach(t),lLo=i(x),Wu=n(x,"LI",{});var LRe=s(Wu);Kge=n(LRe,"STRONG",{});var lTt=s(Kge);iLo=r(lTt,"sew-d"),lTt.forEach(t),dLo=r(LRe," \u2014 "),aO=n(LRe,"A",{href:!0});var iTt=s(aO);cLo=r(iTt,"SEWDModel"),iTt.forEach(t),fLo=r(LRe," (SEW-D model)"),LRe.forEach(t),mLo=i(x),Qu=n(x,"LI",{});var yRe=s(Qu);Zge=n(yRe,"STRONG",{});var dTt=s(Zge);gLo=r(dTt,"speech_to_text"),dTt.forEach(t),hLo=r(yRe," \u2014 "),nO=n(yRe,"A",{href:!0});var cTt=s(nO);pLo=r(cTt,"Speech2TextModel"),cTt.forEach(t),_Lo=r(yRe," (Speech2Text model)"),yRe.forEach(t),uLo=i(x),Uu=n(x,"LI",{});var xRe=s(Uu);ehe=n(xRe,"STRONG",{});var fTt=s(ehe);bLo=r(fTt,"splinter"),fTt.forEach(t),vLo=r(xRe," \u2014 "),sO=n(xRe,"A",{href:!0});var mTt=s(sO);FLo=r(mTt,"SplinterModel"),mTt.forEach(t),TLo=r(xRe," (Splinter model)"),xRe.forEach(t),MLo=i(x),Hu=n(x,"LI",{});var $Re=s(Hu);ohe=n($Re,"STRONG",{});var gTt=s(ohe);ELo=r(gTt,"squeezebert"),gTt.forEach(t),CLo=r($Re," \u2014 "),lO=n($Re,"A",{href:!0});var hTt=s(lO);wLo=r(hTt,"SqueezeBertModel"),hTt.forEach(t),ALo=r($Re," (SqueezeBERT model)"),$Re.forEach(t),LLo=i(x),Ju=n(x,"LI",{});var kRe=s(Ju);rhe=n(kRe,"STRONG",{});var pTt=s(rhe);yLo=r(pTt,"swin"),pTt.forEach(t),xLo=r(kRe," \u2014 "),iO=n(kRe,"A",{href:!0});var _Tt=s(iO);$Lo=r(_Tt,"SwinModel"),_Tt.forEach(t),kLo=r(kRe," (Swin Transformer model)"),kRe.forEach(t),SLo=i(x),Yu=n(x,"LI",{});var SRe=s(Yu);the=n(SRe,"STRONG",{});var uTt=s(the);RLo=r(uTt,"swinv2"),uTt.forEach(t),PLo=r(SRe," \u2014 "),dO=n(SRe,"A",{href:!0});var bTt=s(dO);BLo=r(bTt,"Swinv2Model"),bTt.forEach(t),ILo=r(SRe," (Swin Transformer V2 model)"),SRe.forEach(t),NLo=i(x),Ku=n(x,"LI",{});var RRe=s(Ku);ahe=n(RRe,"STRONG",{});var vTt=s(ahe);qLo=r(vTt,"t5"),vTt.forEach(t),jLo=r(RRe," \u2014 "),cO=n(RRe,"A",{href:!0});var FTt=s(cO);DLo=r(FTt,"T5Model"),FTt.forEach(t),GLo=r(RRe," (T5 model)"),RRe.forEach(t),OLo=i(x),Zu=n(x,"LI",{});var PRe=s(Zu);nhe=n(PRe,"STRONG",{});var TTt=s(nhe);VLo=r(TTt,"tapas"),TTt.forEach(t),XLo=r(PRe," \u2014 "),fO=n(PRe,"A",{href:!0});var MTt=s(fO);zLo=r(MTt,"TapasModel"),MTt.forEach(t),WLo=r(PRe," (TAPAS model)"),PRe.forEach(t),QLo=i(x),e2=n(x,"LI",{});var BRe=s(e2);she=n(BRe,"STRONG",{});var ETt=s(she);ULo=r(ETt,"trajectory_transformer"),ETt.forEach(t),HLo=r(BRe," \u2014 "),mO=n(BRe,"A",{href:!0});var CTt=s(mO);JLo=r(CTt,"TrajectoryTransformerModel"),CTt.forEach(t),YLo=r(BRe," (Trajectory Transformer model)"),BRe.forEach(t),KLo=i(x),o2=n(x,"LI",{});var IRe=s(o2);lhe=n(IRe,"STRONG",{});var wTt=s(lhe);ZLo=r(wTt,"transfo-xl"),wTt.forEach(t),eyo=r(IRe," \u2014 "),gO=n(IRe,"A",{href:!0});var ATt=s(gO);oyo=r(ATt,"TransfoXLModel"),ATt.forEach(t),ryo=r(IRe," (Transformer-XL model)"),IRe.forEach(t),tyo=i(x),r2=n(x,"LI",{});var NRe=s(r2);ihe=n(NRe,"STRONG",{});var LTt=s(ihe);ayo=r(LTt,"unispeech"),LTt.forEach(t),nyo=r(NRe," \u2014 "),hO=n(NRe,"A",{href:!0});var yTt=s(hO);syo=r(yTt,"UniSpeechModel"),yTt.forEach(t),lyo=r(NRe," (UniSpeech model)"),NRe.forEach(t),iyo=i(x),t2=n(x,"LI",{});var qRe=s(t2);dhe=n(qRe,"STRONG",{});var xTt=s(dhe);dyo=r(xTt,"unispeech-sat"),xTt.forEach(t),cyo=r(qRe," \u2014 "),pO=n(qRe,"A",{href:!0});var $Tt=s(pO);fyo=r($Tt,"UniSpeechSatModel"),$Tt.forEach(t),myo=r(qRe," (UniSpeechSat model)"),qRe.forEach(t),gyo=i(x),a2=n(x,"LI",{});var jRe=s(a2);che=n(jRe,"STRONG",{});var kTt=s(che);hyo=r(kTt,"van"),kTt.forEach(t),pyo=r(jRe," \u2014 "),_O=n(jRe,"A",{href:!0});var STt=s(_O);_yo=r(STt,"VanModel"),STt.forEach(t),uyo=r(jRe," (VAN model)"),jRe.forEach(t),byo=i(x),n2=n(x,"LI",{});var DRe=s(n2);fhe=n(DRe,"STRONG",{});var RTt=s(fhe);vyo=r(RTt,"videomae"),RTt.forEach(t),Fyo=r(DRe," \u2014 "),uO=n(DRe,"A",{href:!0});var PTt=s(uO);Tyo=r(PTt,"VideoMAEModel"),PTt.forEach(t),Myo=r(DRe," (VideoMAE model)"),DRe.forEach(t),Eyo=i(x),s2=n(x,"LI",{});var GRe=s(s2);mhe=n(GRe,"STRONG",{});var BTt=s(mhe);Cyo=r(BTt,"vilt"),BTt.forEach(t),wyo=r(GRe," \u2014 "),bO=n(GRe,"A",{href:!0});var ITt=s(bO);Ayo=r(ITt,"ViltModel"),ITt.forEach(t),Lyo=r(GRe," (ViLT model)"),GRe.forEach(t),yyo=i(x),l2=n(x,"LI",{});var ORe=s(l2);ghe=n(ORe,"STRONG",{});var NTt=s(ghe);xyo=r(NTt,"vision-text-dual-encoder"),NTt.forEach(t),$yo=r(ORe," \u2014 "),vO=n(ORe,"A",{href:!0});var qTt=s(vO);kyo=r(qTt,"VisionTextDualEncoderModel"),qTt.forEach(t),Syo=r(ORe," (VisionTextDualEncoder model)"),ORe.forEach(t),Ryo=i(x),i2=n(x,"LI",{});var VRe=s(i2);hhe=n(VRe,"STRONG",{});var jTt=s(hhe);Pyo=r(jTt,"visual_bert"),jTt.forEach(t),Byo=r(VRe," \u2014 "),FO=n(VRe,"A",{href:!0});var DTt=s(FO);Iyo=r(DTt,"VisualBertModel"),DTt.forEach(t),Nyo=r(VRe," (VisualBERT model)"),VRe.forEach(t),qyo=i(x),d2=n(x,"LI",{});var XRe=s(d2);phe=n(XRe,"STRONG",{});var GTt=s(phe);jyo=r(GTt,"vit"),GTt.forEach(t),Dyo=r(XRe," \u2014 "),TO=n(XRe,"A",{href:!0});var OTt=s(TO);Gyo=r(OTt,"ViTModel"),OTt.forEach(t),Oyo=r(XRe," (ViT model)"),XRe.forEach(t),Vyo=i(x),c2=n(x,"LI",{});var zRe=s(c2);_he=n(zRe,"STRONG",{});var VTt=s(_he);Xyo=r(VTt,"vit_mae"),VTt.forEach(t),zyo=r(zRe," \u2014 "),MO=n(zRe,"A",{href:!0});var XTt=s(MO);Wyo=r(XTt,"ViTMAEModel"),XTt.forEach(t),Qyo=r(zRe," (ViTMAE model)"),zRe.forEach(t),Uyo=i(x),f2=n(x,"LI",{});var WRe=s(f2);uhe=n(WRe,"STRONG",{});var zTt=s(uhe);Hyo=r(zTt,"wav2vec2"),zTt.forEach(t),Jyo=r(WRe," \u2014 "),EO=n(WRe,"A",{href:!0});var WTt=s(EO);Yyo=r(WTt,"Wav2Vec2Model"),WTt.forEach(t),Kyo=r(WRe," (Wav2Vec2 model)"),WRe.forEach(t),Zyo=i(x),m2=n(x,"LI",{});var QRe=s(m2);bhe=n(QRe,"STRONG",{});var QTt=s(bhe);e9o=r(QTt,"wav2vec2-conformer"),QTt.forEach(t),o9o=r(QRe," \u2014 "),CO=n(QRe,"A",{href:!0});var UTt=s(CO);r9o=r(UTt,"Wav2Vec2ConformerModel"),UTt.forEach(t),t9o=r(QRe," (Wav2Vec2-Conformer model)"),QRe.forEach(t),a9o=i(x),g2=n(x,"LI",{});var URe=s(g2);vhe=n(URe,"STRONG",{});var HTt=s(vhe);n9o=r(HTt,"wavlm"),HTt.forEach(t),s9o=r(URe," \u2014 "),wO=n(URe,"A",{href:!0});var JTt=s(wO);l9o=r(JTt,"WavLMModel"),JTt.forEach(t),i9o=r(URe," (WavLM model)"),URe.forEach(t),d9o=i(x),h2=n(x,"LI",{});var HRe=s(h2);Fhe=n(HRe,"STRONG",{});var YTt=s(Fhe);c9o=r(YTt,"xglm"),YTt.forEach(t),f9o=r(HRe," \u2014 "),AO=n(HRe,"A",{href:!0});var KTt=s(AO);m9o=r(KTt,"XGLMModel"),KTt.forEach(t),g9o=r(HRe," (XGLM model)"),HRe.forEach(t),h9o=i(x),p2=n(x,"LI",{});var JRe=s(p2);The=n(JRe,"STRONG",{});var ZTt=s(The);p9o=r(ZTt,"xlm"),ZTt.forEach(t),_9o=r(JRe," \u2014 "),LO=n(JRe,"A",{href:!0});var e8t=s(LO);u9o=r(e8t,"XLMModel"),e8t.forEach(t),b9o=r(JRe," (XLM model)"),JRe.forEach(t),v9o=i(x),_2=n(x,"LI",{});var YRe=s(_2);Mhe=n(YRe,"STRONG",{});var o8t=s(Mhe);F9o=r(o8t,"xlm-prophetnet"),o8t.forEach(t),T9o=r(YRe," \u2014 "),yO=n(YRe,"A",{href:!0});var r8t=s(yO);M9o=r(r8t,"XLMProphetNetModel"),r8t.forEach(t),E9o=r(YRe," (XLM-ProphetNet model)"),YRe.forEach(t),C9o=i(x),u2=n(x,"LI",{});var KRe=s(u2);Ehe=n(KRe,"STRONG",{});var t8t=s(Ehe);w9o=r(t8t,"xlm-roberta"),t8t.forEach(t),A9o=r(KRe," \u2014 "),xO=n(KRe,"A",{href:!0});var a8t=s(xO);L9o=r(a8t,"XLMRobertaModel"),a8t.forEach(t),y9o=r(KRe," (XLM-RoBERTa model)"),KRe.forEach(t),x9o=i(x),b2=n(x,"LI",{});var ZRe=s(b2);Che=n(ZRe,"STRONG",{});var n8t=s(Che);$9o=r(n8t,"xlm-roberta-xl"),n8t.forEach(t),k9o=r(ZRe," \u2014 "),$O=n(ZRe,"A",{href:!0});var s8t=s($O);S9o=r(s8t,"XLMRobertaXLModel"),s8t.forEach(t),R9o=r(ZRe," (XLM-RoBERTa-XL model)"),ZRe.forEach(t),P9o=i(x),v2=n(x,"LI",{});var ePe=s(v2);whe=n(ePe,"STRONG",{});var l8t=s(whe);B9o=r(l8t,"xlnet"),l8t.forEach(t),I9o=r(ePe," \u2014 "),kO=n(ePe,"A",{href:!0});var i8t=s(kO);N9o=r(i8t,"XLNetModel"),i8t.forEach(t),q9o=r(ePe," (XLNet model)"),ePe.forEach(t),j9o=i(x),F2=n(x,"LI",{});var oPe=s(F2);Ahe=n(oPe,"STRONG",{});var d8t=s(Ahe);D9o=r(d8t,"yolos"),d8t.forEach(t),G9o=r(oPe," \u2014 "),SO=n(oPe,"A",{href:!0});var c8t=s(SO);O9o=r(c8t,"YolosModel"),c8t.forEach(t),V9o=r(oPe," (YOLOS model)"),oPe.forEach(t),X9o=i(x),T2=n(x,"LI",{});var rPe=s(T2);Lhe=n(rPe,"STRONG",{});var f8t=s(Lhe);z9o=r(f8t,"yoso"),f8t.forEach(t),W9o=r(rPe," \u2014 "),RO=n(rPe,"A",{href:!0});var m8t=s(RO);Q9o=r(m8t,"YosoModel"),m8t.forEach(t),U9o=r(rPe," (YOSO model)"),rPe.forEach(t),x.forEach(t),H9o=i(ga),M2=n(ga,"P",{});var tPe=s(M2);J9o=r(tPe,"The model is set in evaluation mode by default using "),yhe=n(tPe,"CODE",{});var g8t=s(yhe);Y9o=r(g8t,"model.eval()"),g8t.forEach(t),K9o=r(tPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(tPe,"CODE",{});var h8t=s(xhe);Z9o=r(h8t,"model.train()"),h8t.forEach(t),tPe.forEach(t),exo=i(ga),T(E2.$$.fragment,ga),ga.forEach(t),hl.forEach(t),jQe=i(f),nd=n(f,"H2",{class:!0});var HHe=s(nd);C2=n(HHe,"A",{id:!0,class:!0,href:!0});var p8t=s(C2);$he=n(p8t,"SPAN",{});var _8t=s($he);T(Dy.$$.fragment,_8t),_8t.forEach(t),p8t.forEach(t),oxo=i(HHe),khe=n(HHe,"SPAN",{});var u8t=s(khe);rxo=r(u8t,"AutoModelForPreTraining"),u8t.forEach(t),HHe.forEach(t),DQe=i(f),Ro=n(f,"DIV",{class:!0});var pl=s(Ro);T(Gy.$$.fragment,pl),txo=i(pl),sd=n(pl,"P",{});var Pae=s(sd);axo=r(Pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PO=n(Pae,"A",{href:!0});var b8t=s(PO);nxo=r(b8t,"from_pretrained()"),b8t.forEach(t),sxo=r(Pae," class method or the "),BO=n(Pae,"A",{href:!0});var v8t=s(BO);lxo=r(v8t,"from_config()"),v8t.forEach(t),ixo=r(Pae,` class
method.`),Pae.forEach(t),dxo=i(pl),Oy=n(pl,"P",{});var JHe=s(Oy);cxo=r(JHe,"This class cannot be instantiated directly using "),She=n(JHe,"CODE",{});var F8t=s(She);fxo=r(F8t,"__init__()"),F8t.forEach(t),mxo=r(JHe," (throws an error)."),JHe.forEach(t),gxo=i(pl),gt=n(pl,"DIV",{class:!0});var c7=s(gt);T(Vy.$$.fragment,c7),hxo=i(c7),Rhe=n(c7,"P",{});var T8t=s(Rhe);pxo=r(T8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),T8t.forEach(t),_xo=i(c7),ld=n(c7,"P",{});var Bae=s(ld);uxo=r(Bae,`Note:
Loading a model from its configuration file does `),Phe=n(Bae,"STRONG",{});var M8t=s(Phe);bxo=r(M8t,"not"),M8t.forEach(t),vxo=r(Bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(Bae,"A",{href:!0});var E8t=s(IO);Fxo=r(E8t,"from_pretrained()"),E8t.forEach(t),Txo=r(Bae," to load the model weights."),Bae.forEach(t),Mxo=i(c7),T(w2.$$.fragment,c7),c7.forEach(t),Exo=i(pl),Ke=n(pl,"DIV",{class:!0});var ha=s(Ke);T(Xy.$$.fragment,ha),Cxo=i(ha),Bhe=n(ha,"P",{});var C8t=s(Bhe);wxo=r(C8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),C8t.forEach(t),Axo=i(ha),Xa=n(ha,"P",{});var f7=s(Xa);Lxo=r(f7,"The model class to instantiate is selected based on the "),Ihe=n(f7,"CODE",{});var w8t=s(Ihe);yxo=r(w8t,"model_type"),w8t.forEach(t),xxo=r(f7,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(f7,"CODE",{});var A8t=s(Nhe);$xo=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),kxo=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(f7,"CODE",{});var L8t=s(qhe);Sxo=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),Rxo=r(f7,":"),f7.forEach(t),Pxo=i(ha),G=n(ha,"UL",{});var O=s(G);A2=n(O,"LI",{});var aPe=s(A2);jhe=n(aPe,"STRONG",{});var y8t=s(jhe);Bxo=r(y8t,"albert"),y8t.forEach(t),Ixo=r(aPe," \u2014 "),NO=n(aPe,"A",{href:!0});var x8t=s(NO);Nxo=r(x8t,"AlbertForPreTraining"),x8t.forEach(t),qxo=r(aPe," (ALBERT model)"),aPe.forEach(t),jxo=i(O),L2=n(O,"LI",{});var nPe=s(L2);Dhe=n(nPe,"STRONG",{});var $8t=s(Dhe);Dxo=r($8t,"bart"),$8t.forEach(t),Gxo=r(nPe," \u2014 "),qO=n(nPe,"A",{href:!0});var k8t=s(qO);Oxo=r(k8t,"BartForConditionalGeneration"),k8t.forEach(t),Vxo=r(nPe," (BART model)"),nPe.forEach(t),Xxo=i(O),y2=n(O,"LI",{});var sPe=s(y2);Ghe=n(sPe,"STRONG",{});var S8t=s(Ghe);zxo=r(S8t,"bert"),S8t.forEach(t),Wxo=r(sPe," \u2014 "),jO=n(sPe,"A",{href:!0});var R8t=s(jO);Qxo=r(R8t,"BertForPreTraining"),R8t.forEach(t),Uxo=r(sPe," (BERT model)"),sPe.forEach(t),Hxo=i(O),x2=n(O,"LI",{});var lPe=s(x2);Ohe=n(lPe,"STRONG",{});var P8t=s(Ohe);Jxo=r(P8t,"big_bird"),P8t.forEach(t),Yxo=r(lPe," \u2014 "),DO=n(lPe,"A",{href:!0});var B8t=s(DO);Kxo=r(B8t,"BigBirdForPreTraining"),B8t.forEach(t),Zxo=r(lPe," (BigBird model)"),lPe.forEach(t),e$o=i(O),$2=n(O,"LI",{});var iPe=s($2);Vhe=n(iPe,"STRONG",{});var I8t=s(Vhe);o$o=r(I8t,"bloom"),I8t.forEach(t),r$o=r(iPe," \u2014 "),GO=n(iPe,"A",{href:!0});var N8t=s(GO);t$o=r(N8t,"BloomForCausalLM"),N8t.forEach(t),a$o=r(iPe," (BLOOM model)"),iPe.forEach(t),n$o=i(O),k2=n(O,"LI",{});var dPe=s(k2);Xhe=n(dPe,"STRONG",{});var q8t=s(Xhe);s$o=r(q8t,"camembert"),q8t.forEach(t),l$o=r(dPe," \u2014 "),OO=n(dPe,"A",{href:!0});var j8t=s(OO);i$o=r(j8t,"CamembertForMaskedLM"),j8t.forEach(t),d$o=r(dPe," (CamemBERT model)"),dPe.forEach(t),c$o=i(O),S2=n(O,"LI",{});var cPe=s(S2);zhe=n(cPe,"STRONG",{});var D8t=s(zhe);f$o=r(D8t,"ctrl"),D8t.forEach(t),m$o=r(cPe," \u2014 "),VO=n(cPe,"A",{href:!0});var G8t=s(VO);g$o=r(G8t,"CTRLLMHeadModel"),G8t.forEach(t),h$o=r(cPe," (CTRL model)"),cPe.forEach(t),p$o=i(O),R2=n(O,"LI",{});var fPe=s(R2);Whe=n(fPe,"STRONG",{});var O8t=s(Whe);_$o=r(O8t,"data2vec-text"),O8t.forEach(t),u$o=r(fPe," \u2014 "),XO=n(fPe,"A",{href:!0});var V8t=s(XO);b$o=r(V8t,"Data2VecTextForMaskedLM"),V8t.forEach(t),v$o=r(fPe," (Data2VecText model)"),fPe.forEach(t),F$o=i(O),P2=n(O,"LI",{});var mPe=s(P2);Qhe=n(mPe,"STRONG",{});var X8t=s(Qhe);T$o=r(X8t,"deberta"),X8t.forEach(t),M$o=r(mPe," \u2014 "),zO=n(mPe,"A",{href:!0});var z8t=s(zO);E$o=r(z8t,"DebertaForMaskedLM"),z8t.forEach(t),C$o=r(mPe," (DeBERTa model)"),mPe.forEach(t),w$o=i(O),B2=n(O,"LI",{});var gPe=s(B2);Uhe=n(gPe,"STRONG",{});var W8t=s(Uhe);A$o=r(W8t,"deberta-v2"),W8t.forEach(t),L$o=r(gPe," \u2014 "),WO=n(gPe,"A",{href:!0});var Q8t=s(WO);y$o=r(Q8t,"DebertaV2ForMaskedLM"),Q8t.forEach(t),x$o=r(gPe," (DeBERTa-v2 model)"),gPe.forEach(t),$$o=i(O),I2=n(O,"LI",{});var hPe=s(I2);Hhe=n(hPe,"STRONG",{});var U8t=s(Hhe);k$o=r(U8t,"distilbert"),U8t.forEach(t),S$o=r(hPe," \u2014 "),QO=n(hPe,"A",{href:!0});var H8t=s(QO);R$o=r(H8t,"DistilBertForMaskedLM"),H8t.forEach(t),P$o=r(hPe," (DistilBERT model)"),hPe.forEach(t),B$o=i(O),N2=n(O,"LI",{});var pPe=s(N2);Jhe=n(pPe,"STRONG",{});var J8t=s(Jhe);I$o=r(J8t,"electra"),J8t.forEach(t),N$o=r(pPe," \u2014 "),UO=n(pPe,"A",{href:!0});var Y8t=s(UO);q$o=r(Y8t,"ElectraForPreTraining"),Y8t.forEach(t),j$o=r(pPe," (ELECTRA model)"),pPe.forEach(t),D$o=i(O),q2=n(O,"LI",{});var _Pe=s(q2);Yhe=n(_Pe,"STRONG",{});var K8t=s(Yhe);G$o=r(K8t,"flaubert"),K8t.forEach(t),O$o=r(_Pe," \u2014 "),HO=n(_Pe,"A",{href:!0});var Z8t=s(HO);V$o=r(Z8t,"FlaubertWithLMHeadModel"),Z8t.forEach(t),X$o=r(_Pe," (FlauBERT model)"),_Pe.forEach(t),z$o=i(O),j2=n(O,"LI",{});var uPe=s(j2);Khe=n(uPe,"STRONG",{});var eMt=s(Khe);W$o=r(eMt,"flava"),eMt.forEach(t),Q$o=r(uPe," \u2014 "),JO=n(uPe,"A",{href:!0});var oMt=s(JO);U$o=r(oMt,"FlavaForPreTraining"),oMt.forEach(t),H$o=r(uPe," (FLAVA model)"),uPe.forEach(t),J$o=i(O),D2=n(O,"LI",{});var bPe=s(D2);Zhe=n(bPe,"STRONG",{});var rMt=s(Zhe);Y$o=r(rMt,"fnet"),rMt.forEach(t),K$o=r(bPe," \u2014 "),YO=n(bPe,"A",{href:!0});var tMt=s(YO);Z$o=r(tMt,"FNetForPreTraining"),tMt.forEach(t),eko=r(bPe," (FNet model)"),bPe.forEach(t),oko=i(O),G2=n(O,"LI",{});var vPe=s(G2);epe=n(vPe,"STRONG",{});var aMt=s(epe);rko=r(aMt,"fsmt"),aMt.forEach(t),tko=r(vPe," \u2014 "),KO=n(vPe,"A",{href:!0});var nMt=s(KO);ako=r(nMt,"FSMTForConditionalGeneration"),nMt.forEach(t),nko=r(vPe," (FairSeq Machine-Translation model)"),vPe.forEach(t),sko=i(O),O2=n(O,"LI",{});var FPe=s(O2);ope=n(FPe,"STRONG",{});var sMt=s(ope);lko=r(sMt,"funnel"),sMt.forEach(t),iko=r(FPe," \u2014 "),ZO=n(FPe,"A",{href:!0});var lMt=s(ZO);dko=r(lMt,"FunnelForPreTraining"),lMt.forEach(t),cko=r(FPe," (Funnel Transformer model)"),FPe.forEach(t),fko=i(O),V2=n(O,"LI",{});var TPe=s(V2);rpe=n(TPe,"STRONG",{});var iMt=s(rpe);mko=r(iMt,"gpt2"),iMt.forEach(t),gko=r(TPe," \u2014 "),eV=n(TPe,"A",{href:!0});var dMt=s(eV);hko=r(dMt,"GPT2LMHeadModel"),dMt.forEach(t),pko=r(TPe," (OpenAI GPT-2 model)"),TPe.forEach(t),_ko=i(O),X2=n(O,"LI",{});var MPe=s(X2);tpe=n(MPe,"STRONG",{});var cMt=s(tpe);uko=r(cMt,"ibert"),cMt.forEach(t),bko=r(MPe," \u2014 "),oV=n(MPe,"A",{href:!0});var fMt=s(oV);vko=r(fMt,"IBertForMaskedLM"),fMt.forEach(t),Fko=r(MPe," (I-BERT model)"),MPe.forEach(t),Tko=i(O),z2=n(O,"LI",{});var EPe=s(z2);ape=n(EPe,"STRONG",{});var mMt=s(ape);Mko=r(mMt,"layoutlm"),mMt.forEach(t),Eko=r(EPe," \u2014 "),rV=n(EPe,"A",{href:!0});var gMt=s(rV);Cko=r(gMt,"LayoutLMForMaskedLM"),gMt.forEach(t),wko=r(EPe," (LayoutLM model)"),EPe.forEach(t),Ako=i(O),W2=n(O,"LI",{});var CPe=s(W2);npe=n(CPe,"STRONG",{});var hMt=s(npe);Lko=r(hMt,"longformer"),hMt.forEach(t),yko=r(CPe," \u2014 "),tV=n(CPe,"A",{href:!0});var pMt=s(tV);xko=r(pMt,"LongformerForMaskedLM"),pMt.forEach(t),$ko=r(CPe," (Longformer model)"),CPe.forEach(t),kko=i(O),Q2=n(O,"LI",{});var wPe=s(Q2);spe=n(wPe,"STRONG",{});var _Mt=s(spe);Sko=r(_Mt,"luke"),_Mt.forEach(t),Rko=r(wPe," \u2014 "),aV=n(wPe,"A",{href:!0});var uMt=s(aV);Pko=r(uMt,"LukeForMaskedLM"),uMt.forEach(t),Bko=r(wPe," (LUKE model)"),wPe.forEach(t),Iko=i(O),U2=n(O,"LI",{});var APe=s(U2);lpe=n(APe,"STRONG",{});var bMt=s(lpe);Nko=r(bMt,"lxmert"),bMt.forEach(t),qko=r(APe," \u2014 "),nV=n(APe,"A",{href:!0});var vMt=s(nV);jko=r(vMt,"LxmertForPreTraining"),vMt.forEach(t),Dko=r(APe," (LXMERT model)"),APe.forEach(t),Gko=i(O),H2=n(O,"LI",{});var LPe=s(H2);ipe=n(LPe,"STRONG",{});var FMt=s(ipe);Oko=r(FMt,"megatron-bert"),FMt.forEach(t),Vko=r(LPe," \u2014 "),sV=n(LPe,"A",{href:!0});var TMt=s(sV);Xko=r(TMt,"MegatronBertForPreTraining"),TMt.forEach(t),zko=r(LPe," (Megatron-BERT model)"),LPe.forEach(t),Wko=i(O),J2=n(O,"LI",{});var yPe=s(J2);dpe=n(yPe,"STRONG",{});var MMt=s(dpe);Qko=r(MMt,"mobilebert"),MMt.forEach(t),Uko=r(yPe," \u2014 "),lV=n(yPe,"A",{href:!0});var EMt=s(lV);Hko=r(EMt,"MobileBertForPreTraining"),EMt.forEach(t),Jko=r(yPe," (MobileBERT model)"),yPe.forEach(t),Yko=i(O),Y2=n(O,"LI",{});var xPe=s(Y2);cpe=n(xPe,"STRONG",{});var CMt=s(cpe);Kko=r(CMt,"mpnet"),CMt.forEach(t),Zko=r(xPe," \u2014 "),iV=n(xPe,"A",{href:!0});var wMt=s(iV);eSo=r(wMt,"MPNetForMaskedLM"),wMt.forEach(t),oSo=r(xPe," (MPNet model)"),xPe.forEach(t),rSo=i(O),K2=n(O,"LI",{});var $Pe=s(K2);fpe=n($Pe,"STRONG",{});var AMt=s(fpe);tSo=r(AMt,"mvp"),AMt.forEach(t),aSo=r($Pe," \u2014 "),dV=n($Pe,"A",{href:!0});var LMt=s(dV);nSo=r(LMt,"MvpForConditionalGeneration"),LMt.forEach(t),sSo=r($Pe," (MVP model)"),$Pe.forEach(t),lSo=i(O),Z2=n(O,"LI",{});var kPe=s(Z2);mpe=n(kPe,"STRONG",{});var yMt=s(mpe);iSo=r(yMt,"nezha"),yMt.forEach(t),dSo=r(kPe," \u2014 "),cV=n(kPe,"A",{href:!0});var xMt=s(cV);cSo=r(xMt,"NezhaForPreTraining"),xMt.forEach(t),fSo=r(kPe," (Nezha model)"),kPe.forEach(t),mSo=i(O),e1=n(O,"LI",{});var SPe=s(e1);gpe=n(SPe,"STRONG",{});var $Mt=s(gpe);gSo=r($Mt,"openai-gpt"),$Mt.forEach(t),hSo=r(SPe," \u2014 "),fV=n(SPe,"A",{href:!0});var kMt=s(fV);pSo=r(kMt,"OpenAIGPTLMHeadModel"),kMt.forEach(t),_So=r(SPe," (OpenAI GPT model)"),SPe.forEach(t),uSo=i(O),o1=n(O,"LI",{});var RPe=s(o1);hpe=n(RPe,"STRONG",{});var SMt=s(hpe);bSo=r(SMt,"retribert"),SMt.forEach(t),vSo=r(RPe," \u2014 "),mV=n(RPe,"A",{href:!0});var RMt=s(mV);FSo=r(RMt,"RetriBertModel"),RMt.forEach(t),TSo=r(RPe," (RetriBERT model)"),RPe.forEach(t),MSo=i(O),r1=n(O,"LI",{});var PPe=s(r1);ppe=n(PPe,"STRONG",{});var PMt=s(ppe);ESo=r(PMt,"roberta"),PMt.forEach(t),CSo=r(PPe," \u2014 "),gV=n(PPe,"A",{href:!0});var BMt=s(gV);wSo=r(BMt,"RobertaForMaskedLM"),BMt.forEach(t),ASo=r(PPe," (RoBERTa model)"),PPe.forEach(t),LSo=i(O),t1=n(O,"LI",{});var BPe=s(t1);_pe=n(BPe,"STRONG",{});var IMt=s(_pe);ySo=r(IMt,"splinter"),IMt.forEach(t),xSo=r(BPe," \u2014 "),hV=n(BPe,"A",{href:!0});var NMt=s(hV);$So=r(NMt,"SplinterForPreTraining"),NMt.forEach(t),kSo=r(BPe," (Splinter model)"),BPe.forEach(t),SSo=i(O),a1=n(O,"LI",{});var IPe=s(a1);upe=n(IPe,"STRONG",{});var qMt=s(upe);RSo=r(qMt,"squeezebert"),qMt.forEach(t),PSo=r(IPe," \u2014 "),pV=n(IPe,"A",{href:!0});var jMt=s(pV);BSo=r(jMt,"SqueezeBertForMaskedLM"),jMt.forEach(t),ISo=r(IPe," (SqueezeBERT model)"),IPe.forEach(t),NSo=i(O),n1=n(O,"LI",{});var NPe=s(n1);bpe=n(NPe,"STRONG",{});var DMt=s(bpe);qSo=r(DMt,"t5"),DMt.forEach(t),jSo=r(NPe," \u2014 "),_V=n(NPe,"A",{href:!0});var GMt=s(_V);DSo=r(GMt,"T5ForConditionalGeneration"),GMt.forEach(t),GSo=r(NPe," (T5 model)"),NPe.forEach(t),OSo=i(O),s1=n(O,"LI",{});var qPe=s(s1);vpe=n(qPe,"STRONG",{});var OMt=s(vpe);VSo=r(OMt,"tapas"),OMt.forEach(t),XSo=r(qPe," \u2014 "),uV=n(qPe,"A",{href:!0});var VMt=s(uV);zSo=r(VMt,"TapasForMaskedLM"),VMt.forEach(t),WSo=r(qPe," (TAPAS model)"),qPe.forEach(t),QSo=i(O),l1=n(O,"LI",{});var jPe=s(l1);Fpe=n(jPe,"STRONG",{});var XMt=s(Fpe);USo=r(XMt,"transfo-xl"),XMt.forEach(t),HSo=r(jPe," \u2014 "),bV=n(jPe,"A",{href:!0});var zMt=s(bV);JSo=r(zMt,"TransfoXLLMHeadModel"),zMt.forEach(t),YSo=r(jPe," (Transformer-XL model)"),jPe.forEach(t),KSo=i(O),i1=n(O,"LI",{});var DPe=s(i1);Tpe=n(DPe,"STRONG",{});var WMt=s(Tpe);ZSo=r(WMt,"unispeech"),WMt.forEach(t),eRo=r(DPe," \u2014 "),vV=n(DPe,"A",{href:!0});var QMt=s(vV);oRo=r(QMt,"UniSpeechForPreTraining"),QMt.forEach(t),rRo=r(DPe," (UniSpeech model)"),DPe.forEach(t),tRo=i(O),d1=n(O,"LI",{});var GPe=s(d1);Mpe=n(GPe,"STRONG",{});var UMt=s(Mpe);aRo=r(UMt,"unispeech-sat"),UMt.forEach(t),nRo=r(GPe," \u2014 "),FV=n(GPe,"A",{href:!0});var HMt=s(FV);sRo=r(HMt,"UniSpeechSatForPreTraining"),HMt.forEach(t),lRo=r(GPe," (UniSpeechSat model)"),GPe.forEach(t),iRo=i(O),c1=n(O,"LI",{});var OPe=s(c1);Epe=n(OPe,"STRONG",{});var JMt=s(Epe);dRo=r(JMt,"videomae"),JMt.forEach(t),cRo=r(OPe," \u2014 "),TV=n(OPe,"A",{href:!0});var YMt=s(TV);fRo=r(YMt,"VideoMAEForPreTraining"),YMt.forEach(t),mRo=r(OPe," (VideoMAE model)"),OPe.forEach(t),gRo=i(O),f1=n(O,"LI",{});var VPe=s(f1);Cpe=n(VPe,"STRONG",{});var KMt=s(Cpe);hRo=r(KMt,"visual_bert"),KMt.forEach(t),pRo=r(VPe," \u2014 "),MV=n(VPe,"A",{href:!0});var ZMt=s(MV);_Ro=r(ZMt,"VisualBertForPreTraining"),ZMt.forEach(t),uRo=r(VPe," (VisualBERT model)"),VPe.forEach(t),bRo=i(O),m1=n(O,"LI",{});var XPe=s(m1);wpe=n(XPe,"STRONG",{});var eEt=s(wpe);vRo=r(eEt,"vit_mae"),eEt.forEach(t),FRo=r(XPe," \u2014 "),EV=n(XPe,"A",{href:!0});var oEt=s(EV);TRo=r(oEt,"ViTMAEForPreTraining"),oEt.forEach(t),MRo=r(XPe," (ViTMAE model)"),XPe.forEach(t),ERo=i(O),g1=n(O,"LI",{});var zPe=s(g1);Ape=n(zPe,"STRONG",{});var rEt=s(Ape);CRo=r(rEt,"wav2vec2"),rEt.forEach(t),wRo=r(zPe," \u2014 "),CV=n(zPe,"A",{href:!0});var tEt=s(CV);ARo=r(tEt,"Wav2Vec2ForPreTraining"),tEt.forEach(t),LRo=r(zPe," (Wav2Vec2 model)"),zPe.forEach(t),yRo=i(O),h1=n(O,"LI",{});var WPe=s(h1);Lpe=n(WPe,"STRONG",{});var aEt=s(Lpe);xRo=r(aEt,"wav2vec2-conformer"),aEt.forEach(t),$Ro=r(WPe," \u2014 "),wV=n(WPe,"A",{href:!0});var nEt=s(wV);kRo=r(nEt,"Wav2Vec2ConformerForPreTraining"),nEt.forEach(t),SRo=r(WPe," (Wav2Vec2-Conformer model)"),WPe.forEach(t),RRo=i(O),p1=n(O,"LI",{});var QPe=s(p1);ype=n(QPe,"STRONG",{});var sEt=s(ype);PRo=r(sEt,"xlm"),sEt.forEach(t),BRo=r(QPe," \u2014 "),AV=n(QPe,"A",{href:!0});var lEt=s(AV);IRo=r(lEt,"XLMWithLMHeadModel"),lEt.forEach(t),NRo=r(QPe," (XLM model)"),QPe.forEach(t),qRo=i(O),_1=n(O,"LI",{});var UPe=s(_1);xpe=n(UPe,"STRONG",{});var iEt=s(xpe);jRo=r(iEt,"xlm-roberta"),iEt.forEach(t),DRo=r(UPe," \u2014 "),LV=n(UPe,"A",{href:!0});var dEt=s(LV);GRo=r(dEt,"XLMRobertaForMaskedLM"),dEt.forEach(t),ORo=r(UPe," (XLM-RoBERTa model)"),UPe.forEach(t),VRo=i(O),u1=n(O,"LI",{});var HPe=s(u1);$pe=n(HPe,"STRONG",{});var cEt=s($pe);XRo=r(cEt,"xlm-roberta-xl"),cEt.forEach(t),zRo=r(HPe," \u2014 "),yV=n(HPe,"A",{href:!0});var fEt=s(yV);WRo=r(fEt,"XLMRobertaXLForMaskedLM"),fEt.forEach(t),QRo=r(HPe," (XLM-RoBERTa-XL model)"),HPe.forEach(t),URo=i(O),b1=n(O,"LI",{});var JPe=s(b1);kpe=n(JPe,"STRONG",{});var mEt=s(kpe);HRo=r(mEt,"xlnet"),mEt.forEach(t),JRo=r(JPe," \u2014 "),xV=n(JPe,"A",{href:!0});var gEt=s(xV);YRo=r(gEt,"XLNetLMHeadModel"),gEt.forEach(t),KRo=r(JPe," (XLNet model)"),JPe.forEach(t),O.forEach(t),ZRo=i(ha),v1=n(ha,"P",{});var YPe=s(v1);ePo=r(YPe,"The model is set in evaluation mode by default using "),Spe=n(YPe,"CODE",{});var hEt=s(Spe);oPo=r(hEt,"model.eval()"),hEt.forEach(t),rPo=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(YPe,"CODE",{});var pEt=s(Rpe);tPo=r(pEt,"model.train()"),pEt.forEach(t),YPe.forEach(t),aPo=i(ha),T(F1.$$.fragment,ha),ha.forEach(t),pl.forEach(t),GQe=i(f),id=n(f,"H2",{class:!0});var YHe=s(id);T1=n(YHe,"A",{id:!0,class:!0,href:!0});var _Et=s(T1);Ppe=n(_Et,"SPAN",{});var uEt=s(Ppe);T(zy.$$.fragment,uEt),uEt.forEach(t),_Et.forEach(t),nPo=i(YHe),Bpe=n(YHe,"SPAN",{});var bEt=s(Bpe);sPo=r(bEt,"AutoModelForCausalLM"),bEt.forEach(t),YHe.forEach(t),OQe=i(f),Po=n(f,"DIV",{class:!0});var _l=s(Po);T(Wy.$$.fragment,_l),lPo=i(_l),dd=n(_l,"P",{});var Iae=s(dd);iPo=r(Iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$V=n(Iae,"A",{href:!0});var vEt=s($V);dPo=r(vEt,"from_pretrained()"),vEt.forEach(t),cPo=r(Iae," class method or the "),kV=n(Iae,"A",{href:!0});var FEt=s(kV);fPo=r(FEt,"from_config()"),FEt.forEach(t),mPo=r(Iae,` class
method.`),Iae.forEach(t),gPo=i(_l),Qy=n(_l,"P",{});var KHe=s(Qy);hPo=r(KHe,"This class cannot be instantiated directly using "),Ipe=n(KHe,"CODE",{});var TEt=s(Ipe);pPo=r(TEt,"__init__()"),TEt.forEach(t),_Po=r(KHe," (throws an error)."),KHe.forEach(t),uPo=i(_l),ht=n(_l,"DIV",{class:!0});var m7=s(ht);T(Uy.$$.fragment,m7),bPo=i(m7),Npe=n(m7,"P",{});var MEt=s(Npe);vPo=r(MEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MEt.forEach(t),FPo=i(m7),cd=n(m7,"P",{});var Nae=s(cd);TPo=r(Nae,`Note:
Loading a model from its configuration file does `),qpe=n(Nae,"STRONG",{});var EEt=s(qpe);MPo=r(EEt,"not"),EEt.forEach(t),EPo=r(Nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(Nae,"A",{href:!0});var CEt=s(SV);CPo=r(CEt,"from_pretrained()"),CEt.forEach(t),wPo=r(Nae," to load the model weights."),Nae.forEach(t),APo=i(m7),T(M1.$$.fragment,m7),m7.forEach(t),LPo=i(_l),Ze=n(_l,"DIV",{class:!0});var pa=s(Ze);T(Hy.$$.fragment,pa),yPo=i(pa),jpe=n(pa,"P",{});var wEt=s(jpe);xPo=r(wEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wEt.forEach(t),$Po=i(pa),za=n(pa,"P",{});var g7=s(za);kPo=r(g7,"The model class to instantiate is selected based on the "),Dpe=n(g7,"CODE",{});var AEt=s(Dpe);SPo=r(AEt,"model_type"),AEt.forEach(t),RPo=r(g7,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(g7,"CODE",{});var LEt=s(Gpe);PPo=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),BPo=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(g7,"CODE",{});var yEt=s(Ope);IPo=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),NPo=r(g7,":"),g7.forEach(t),qPo=i(pa),z=n(pa,"UL",{});var W=s(z);E1=n(W,"LI",{});var KPe=s(E1);Vpe=n(KPe,"STRONG",{});var xEt=s(Vpe);jPo=r(xEt,"bart"),xEt.forEach(t),DPo=r(KPe," \u2014 "),RV=n(KPe,"A",{href:!0});var $Et=s(RV);GPo=r($Et,"BartForCausalLM"),$Et.forEach(t),OPo=r(KPe," (BART model)"),KPe.forEach(t),VPo=i(W),C1=n(W,"LI",{});var ZPe=s(C1);Xpe=n(ZPe,"STRONG",{});var kEt=s(Xpe);XPo=r(kEt,"bert"),kEt.forEach(t),zPo=r(ZPe," \u2014 "),PV=n(ZPe,"A",{href:!0});var SEt=s(PV);WPo=r(SEt,"BertLMHeadModel"),SEt.forEach(t),QPo=r(ZPe," (BERT model)"),ZPe.forEach(t),UPo=i(W),w1=n(W,"LI",{});var eBe=s(w1);zpe=n(eBe,"STRONG",{});var REt=s(zpe);HPo=r(REt,"bert-generation"),REt.forEach(t),JPo=r(eBe," \u2014 "),BV=n(eBe,"A",{href:!0});var PEt=s(BV);YPo=r(PEt,"BertGenerationDecoder"),PEt.forEach(t),KPo=r(eBe," (Bert Generation model)"),eBe.forEach(t),ZPo=i(W),A1=n(W,"LI",{});var oBe=s(A1);Wpe=n(oBe,"STRONG",{});var BEt=s(Wpe);eBo=r(BEt,"big_bird"),BEt.forEach(t),oBo=r(oBe," \u2014 "),IV=n(oBe,"A",{href:!0});var IEt=s(IV);rBo=r(IEt,"BigBirdForCausalLM"),IEt.forEach(t),tBo=r(oBe," (BigBird model)"),oBe.forEach(t),aBo=i(W),L1=n(W,"LI",{});var rBe=s(L1);Qpe=n(rBe,"STRONG",{});var NEt=s(Qpe);nBo=r(NEt,"bigbird_pegasus"),NEt.forEach(t),sBo=r(rBe," \u2014 "),NV=n(rBe,"A",{href:!0});var qEt=s(NV);lBo=r(qEt,"BigBirdPegasusForCausalLM"),qEt.forEach(t),iBo=r(rBe," (BigBird-Pegasus model)"),rBe.forEach(t),dBo=i(W),y1=n(W,"LI",{});var tBe=s(y1);Upe=n(tBe,"STRONG",{});var jEt=s(Upe);cBo=r(jEt,"blenderbot"),jEt.forEach(t),fBo=r(tBe," \u2014 "),qV=n(tBe,"A",{href:!0});var DEt=s(qV);mBo=r(DEt,"BlenderbotForCausalLM"),DEt.forEach(t),gBo=r(tBe," (Blenderbot model)"),tBe.forEach(t),hBo=i(W),x1=n(W,"LI",{});var aBe=s(x1);Hpe=n(aBe,"STRONG",{});var GEt=s(Hpe);pBo=r(GEt,"blenderbot-small"),GEt.forEach(t),_Bo=r(aBe," \u2014 "),jV=n(aBe,"A",{href:!0});var OEt=s(jV);uBo=r(OEt,"BlenderbotSmallForCausalLM"),OEt.forEach(t),bBo=r(aBe," (BlenderbotSmall model)"),aBe.forEach(t),vBo=i(W),$1=n(W,"LI",{});var nBe=s($1);Jpe=n(nBe,"STRONG",{});var VEt=s(Jpe);FBo=r(VEt,"bloom"),VEt.forEach(t),TBo=r(nBe," \u2014 "),DV=n(nBe,"A",{href:!0});var XEt=s(DV);MBo=r(XEt,"BloomForCausalLM"),XEt.forEach(t),EBo=r(nBe," (BLOOM model)"),nBe.forEach(t),CBo=i(W),k1=n(W,"LI",{});var sBe=s(k1);Ype=n(sBe,"STRONG",{});var zEt=s(Ype);wBo=r(zEt,"camembert"),zEt.forEach(t),ABo=r(sBe," \u2014 "),GV=n(sBe,"A",{href:!0});var WEt=s(GV);LBo=r(WEt,"CamembertForCausalLM"),WEt.forEach(t),yBo=r(sBe," (CamemBERT model)"),sBe.forEach(t),xBo=i(W),S1=n(W,"LI",{});var lBe=s(S1);Kpe=n(lBe,"STRONG",{});var QEt=s(Kpe);$Bo=r(QEt,"codegen"),QEt.forEach(t),kBo=r(lBe," \u2014 "),OV=n(lBe,"A",{href:!0});var UEt=s(OV);SBo=r(UEt,"CodeGenForCausalLM"),UEt.forEach(t),RBo=r(lBe," (CodeGen model)"),lBe.forEach(t),PBo=i(W),R1=n(W,"LI",{});var iBe=s(R1);Zpe=n(iBe,"STRONG",{});var HEt=s(Zpe);BBo=r(HEt,"ctrl"),HEt.forEach(t),IBo=r(iBe," \u2014 "),VV=n(iBe,"A",{href:!0});var JEt=s(VV);NBo=r(JEt,"CTRLLMHeadModel"),JEt.forEach(t),qBo=r(iBe," (CTRL model)"),iBe.forEach(t),jBo=i(W),P1=n(W,"LI",{});var dBe=s(P1);e_e=n(dBe,"STRONG",{});var YEt=s(e_e);DBo=r(YEt,"data2vec-text"),YEt.forEach(t),GBo=r(dBe," \u2014 "),XV=n(dBe,"A",{href:!0});var KEt=s(XV);OBo=r(KEt,"Data2VecTextForCausalLM"),KEt.forEach(t),VBo=r(dBe," (Data2VecText model)"),dBe.forEach(t),XBo=i(W),B1=n(W,"LI",{});var cBe=s(B1);o_e=n(cBe,"STRONG",{});var ZEt=s(o_e);zBo=r(ZEt,"electra"),ZEt.forEach(t),WBo=r(cBe," \u2014 "),zV=n(cBe,"A",{href:!0});var e4t=s(zV);QBo=r(e4t,"ElectraForCausalLM"),e4t.forEach(t),UBo=r(cBe," (ELECTRA model)"),cBe.forEach(t),HBo=i(W),I1=n(W,"LI",{});var fBe=s(I1);r_e=n(fBe,"STRONG",{});var o4t=s(r_e);JBo=r(o4t,"gpt2"),o4t.forEach(t),YBo=r(fBe," \u2014 "),WV=n(fBe,"A",{href:!0});var r4t=s(WV);KBo=r(r4t,"GPT2LMHeadModel"),r4t.forEach(t),ZBo=r(fBe," (OpenAI GPT-2 model)"),fBe.forEach(t),eIo=i(W),N1=n(W,"LI",{});var mBe=s(N1);t_e=n(mBe,"STRONG",{});var t4t=s(t_e);oIo=r(t4t,"gpt_neo"),t4t.forEach(t),rIo=r(mBe," \u2014 "),QV=n(mBe,"A",{href:!0});var a4t=s(QV);tIo=r(a4t,"GPTNeoForCausalLM"),a4t.forEach(t),aIo=r(mBe," (GPT Neo model)"),mBe.forEach(t),nIo=i(W),q1=n(W,"LI",{});var gBe=s(q1);a_e=n(gBe,"STRONG",{});var n4t=s(a_e);sIo=r(n4t,"gpt_neox"),n4t.forEach(t),lIo=r(gBe," \u2014 "),UV=n(gBe,"A",{href:!0});var s4t=s(UV);iIo=r(s4t,"GPTNeoXForCausalLM"),s4t.forEach(t),dIo=r(gBe," (GPT NeoX model)"),gBe.forEach(t),cIo=i(W),j1=n(W,"LI",{});var hBe=s(j1);n_e=n(hBe,"STRONG",{});var l4t=s(n_e);fIo=r(l4t,"gptj"),l4t.forEach(t),mIo=r(hBe," \u2014 "),HV=n(hBe,"A",{href:!0});var i4t=s(HV);gIo=r(i4t,"GPTJForCausalLM"),i4t.forEach(t),hIo=r(hBe," (GPT-J model)"),hBe.forEach(t),pIo=i(W),D1=n(W,"LI",{});var pBe=s(D1);s_e=n(pBe,"STRONG",{});var d4t=s(s_e);_Io=r(d4t,"marian"),d4t.forEach(t),uIo=r(pBe," \u2014 "),JV=n(pBe,"A",{href:!0});var c4t=s(JV);bIo=r(c4t,"MarianForCausalLM"),c4t.forEach(t),vIo=r(pBe," (Marian model)"),pBe.forEach(t),FIo=i(W),G1=n(W,"LI",{});var _Be=s(G1);l_e=n(_Be,"STRONG",{});var f4t=s(l_e);TIo=r(f4t,"mbart"),f4t.forEach(t),MIo=r(_Be," \u2014 "),YV=n(_Be,"A",{href:!0});var m4t=s(YV);EIo=r(m4t,"MBartForCausalLM"),m4t.forEach(t),CIo=r(_Be," (mBART model)"),_Be.forEach(t),wIo=i(W),O1=n(W,"LI",{});var uBe=s(O1);i_e=n(uBe,"STRONG",{});var g4t=s(i_e);AIo=r(g4t,"megatron-bert"),g4t.forEach(t),LIo=r(uBe," \u2014 "),KV=n(uBe,"A",{href:!0});var h4t=s(KV);yIo=r(h4t,"MegatronBertForCausalLM"),h4t.forEach(t),xIo=r(uBe," (Megatron-BERT model)"),uBe.forEach(t),$Io=i(W),V1=n(W,"LI",{});var bBe=s(V1);d_e=n(bBe,"STRONG",{});var p4t=s(d_e);kIo=r(p4t,"mvp"),p4t.forEach(t),SIo=r(bBe," \u2014 "),ZV=n(bBe,"A",{href:!0});var _4t=s(ZV);RIo=r(_4t,"MvpForCausalLM"),_4t.forEach(t),PIo=r(bBe," (MVP model)"),bBe.forEach(t),BIo=i(W),X1=n(W,"LI",{});var vBe=s(X1);c_e=n(vBe,"STRONG",{});var u4t=s(c_e);IIo=r(u4t,"openai-gpt"),u4t.forEach(t),NIo=r(vBe," \u2014 "),eX=n(vBe,"A",{href:!0});var b4t=s(eX);qIo=r(b4t,"OpenAIGPTLMHeadModel"),b4t.forEach(t),jIo=r(vBe," (OpenAI GPT model)"),vBe.forEach(t),DIo=i(W),z1=n(W,"LI",{});var FBe=s(z1);f_e=n(FBe,"STRONG",{});var v4t=s(f_e);GIo=r(v4t,"opt"),v4t.forEach(t),OIo=r(FBe," \u2014 "),oX=n(FBe,"A",{href:!0});var F4t=s(oX);VIo=r(F4t,"OPTForCausalLM"),F4t.forEach(t),XIo=r(FBe," (OPT model)"),FBe.forEach(t),zIo=i(W),W1=n(W,"LI",{});var TBe=s(W1);m_e=n(TBe,"STRONG",{});var T4t=s(m_e);WIo=r(T4t,"pegasus"),T4t.forEach(t),QIo=r(TBe," \u2014 "),rX=n(TBe,"A",{href:!0});var M4t=s(rX);UIo=r(M4t,"PegasusForCausalLM"),M4t.forEach(t),HIo=r(TBe," (Pegasus model)"),TBe.forEach(t),JIo=i(W),Q1=n(W,"LI",{});var MBe=s(Q1);g_e=n(MBe,"STRONG",{});var E4t=s(g_e);YIo=r(E4t,"plbart"),E4t.forEach(t),KIo=r(MBe," \u2014 "),tX=n(MBe,"A",{href:!0});var C4t=s(tX);ZIo=r(C4t,"PLBartForCausalLM"),C4t.forEach(t),eNo=r(MBe," (PLBart model)"),MBe.forEach(t),oNo=i(W),U1=n(W,"LI",{});var EBe=s(U1);h_e=n(EBe,"STRONG",{});var w4t=s(h_e);rNo=r(w4t,"prophetnet"),w4t.forEach(t),tNo=r(EBe," \u2014 "),aX=n(EBe,"A",{href:!0});var A4t=s(aX);aNo=r(A4t,"ProphetNetForCausalLM"),A4t.forEach(t),nNo=r(EBe," (ProphetNet model)"),EBe.forEach(t),sNo=i(W),H1=n(W,"LI",{});var CBe=s(H1);p_e=n(CBe,"STRONG",{});var L4t=s(p_e);lNo=r(L4t,"qdqbert"),L4t.forEach(t),iNo=r(CBe," \u2014 "),nX=n(CBe,"A",{href:!0});var y4t=s(nX);dNo=r(y4t,"QDQBertLMHeadModel"),y4t.forEach(t),cNo=r(CBe," (QDQBert model)"),CBe.forEach(t),fNo=i(W),J1=n(W,"LI",{});var wBe=s(J1);__e=n(wBe,"STRONG",{});var x4t=s(__e);mNo=r(x4t,"reformer"),x4t.forEach(t),gNo=r(wBe," \u2014 "),sX=n(wBe,"A",{href:!0});var $4t=s(sX);hNo=r($4t,"ReformerModelWithLMHead"),$4t.forEach(t),pNo=r(wBe," (Reformer model)"),wBe.forEach(t),_No=i(W),Y1=n(W,"LI",{});var ABe=s(Y1);u_e=n(ABe,"STRONG",{});var k4t=s(u_e);uNo=r(k4t,"rembert"),k4t.forEach(t),bNo=r(ABe," \u2014 "),lX=n(ABe,"A",{href:!0});var S4t=s(lX);vNo=r(S4t,"RemBertForCausalLM"),S4t.forEach(t),FNo=r(ABe," (RemBERT model)"),ABe.forEach(t),TNo=i(W),K1=n(W,"LI",{});var LBe=s(K1);b_e=n(LBe,"STRONG",{});var R4t=s(b_e);MNo=r(R4t,"roberta"),R4t.forEach(t),ENo=r(LBe," \u2014 "),iX=n(LBe,"A",{href:!0});var P4t=s(iX);CNo=r(P4t,"RobertaForCausalLM"),P4t.forEach(t),wNo=r(LBe," (RoBERTa model)"),LBe.forEach(t),ANo=i(W),Z1=n(W,"LI",{});var yBe=s(Z1);v_e=n(yBe,"STRONG",{});var B4t=s(v_e);LNo=r(B4t,"roformer"),B4t.forEach(t),yNo=r(yBe," \u2014 "),dX=n(yBe,"A",{href:!0});var I4t=s(dX);xNo=r(I4t,"RoFormerForCausalLM"),I4t.forEach(t),$No=r(yBe," (RoFormer model)"),yBe.forEach(t),kNo=i(W),eb=n(W,"LI",{});var xBe=s(eb);F_e=n(xBe,"STRONG",{});var N4t=s(F_e);SNo=r(N4t,"speech_to_text_2"),N4t.forEach(t),RNo=r(xBe," \u2014 "),cX=n(xBe,"A",{href:!0});var q4t=s(cX);PNo=r(q4t,"Speech2Text2ForCausalLM"),q4t.forEach(t),BNo=r(xBe," (Speech2Text2 model)"),xBe.forEach(t),INo=i(W),ob=n(W,"LI",{});var $Be=s(ob);T_e=n($Be,"STRONG",{});var j4t=s(T_e);NNo=r(j4t,"transfo-xl"),j4t.forEach(t),qNo=r($Be," \u2014 "),fX=n($Be,"A",{href:!0});var D4t=s(fX);jNo=r(D4t,"TransfoXLLMHeadModel"),D4t.forEach(t),DNo=r($Be," (Transformer-XL model)"),$Be.forEach(t),GNo=i(W),rb=n(W,"LI",{});var kBe=s(rb);M_e=n(kBe,"STRONG",{});var G4t=s(M_e);ONo=r(G4t,"trocr"),G4t.forEach(t),VNo=r(kBe," \u2014 "),mX=n(kBe,"A",{href:!0});var O4t=s(mX);XNo=r(O4t,"TrOCRForCausalLM"),O4t.forEach(t),zNo=r(kBe," (TrOCR model)"),kBe.forEach(t),WNo=i(W),tb=n(W,"LI",{});var SBe=s(tb);E_e=n(SBe,"STRONG",{});var V4t=s(E_e);QNo=r(V4t,"xglm"),V4t.forEach(t),UNo=r(SBe," \u2014 "),gX=n(SBe,"A",{href:!0});var X4t=s(gX);HNo=r(X4t,"XGLMForCausalLM"),X4t.forEach(t),JNo=r(SBe," (XGLM model)"),SBe.forEach(t),YNo=i(W),ab=n(W,"LI",{});var RBe=s(ab);C_e=n(RBe,"STRONG",{});var z4t=s(C_e);KNo=r(z4t,"xlm"),z4t.forEach(t),ZNo=r(RBe," \u2014 "),hX=n(RBe,"A",{href:!0});var W4t=s(hX);eqo=r(W4t,"XLMWithLMHeadModel"),W4t.forEach(t),oqo=r(RBe," (XLM model)"),RBe.forEach(t),rqo=i(W),nb=n(W,"LI",{});var PBe=s(nb);w_e=n(PBe,"STRONG",{});var Q4t=s(w_e);tqo=r(Q4t,"xlm-prophetnet"),Q4t.forEach(t),aqo=r(PBe," \u2014 "),pX=n(PBe,"A",{href:!0});var U4t=s(pX);nqo=r(U4t,"XLMProphetNetForCausalLM"),U4t.forEach(t),sqo=r(PBe," (XLM-ProphetNet model)"),PBe.forEach(t),lqo=i(W),sb=n(W,"LI",{});var BBe=s(sb);A_e=n(BBe,"STRONG",{});var H4t=s(A_e);iqo=r(H4t,"xlm-roberta"),H4t.forEach(t),dqo=r(BBe," \u2014 "),_X=n(BBe,"A",{href:!0});var J4t=s(_X);cqo=r(J4t,"XLMRobertaForCausalLM"),J4t.forEach(t),fqo=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),mqo=i(W),lb=n(W,"LI",{});var IBe=s(lb);L_e=n(IBe,"STRONG",{});var Y4t=s(L_e);gqo=r(Y4t,"xlm-roberta-xl"),Y4t.forEach(t),hqo=r(IBe," \u2014 "),uX=n(IBe,"A",{href:!0});var K4t=s(uX);pqo=r(K4t,"XLMRobertaXLForCausalLM"),K4t.forEach(t),_qo=r(IBe," (XLM-RoBERTa-XL model)"),IBe.forEach(t),uqo=i(W),ib=n(W,"LI",{});var NBe=s(ib);y_e=n(NBe,"STRONG",{});var Z4t=s(y_e);bqo=r(Z4t,"xlnet"),Z4t.forEach(t),vqo=r(NBe," \u2014 "),bX=n(NBe,"A",{href:!0});var eCt=s(bX);Fqo=r(eCt,"XLNetLMHeadModel"),eCt.forEach(t),Tqo=r(NBe," (XLNet model)"),NBe.forEach(t),W.forEach(t),Mqo=i(pa),db=n(pa,"P",{});var qBe=s(db);Eqo=r(qBe,"The model is set in evaluation mode by default using "),x_e=n(qBe,"CODE",{});var oCt=s(x_e);Cqo=r(oCt,"model.eval()"),oCt.forEach(t),wqo=r(qBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=n(qBe,"CODE",{});var rCt=s($_e);Aqo=r(rCt,"model.train()"),rCt.forEach(t),qBe.forEach(t),Lqo=i(pa),T(cb.$$.fragment,pa),pa.forEach(t),_l.forEach(t),VQe=i(f),fd=n(f,"H2",{class:!0});var ZHe=s(fd);fb=n(ZHe,"A",{id:!0,class:!0,href:!0});var tCt=s(fb);k_e=n(tCt,"SPAN",{});var aCt=s(k_e);T(Jy.$$.fragment,aCt),aCt.forEach(t),tCt.forEach(t),yqo=i(ZHe),S_e=n(ZHe,"SPAN",{});var nCt=s(S_e);xqo=r(nCt,"AutoModelForMaskedLM"),nCt.forEach(t),ZHe.forEach(t),XQe=i(f),Bo=n(f,"DIV",{class:!0});var ul=s(Bo);T(Yy.$$.fragment,ul),$qo=i(ul),md=n(ul,"P",{});var qae=s(md);kqo=r(qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vX=n(qae,"A",{href:!0});var sCt=s(vX);Sqo=r(sCt,"from_pretrained()"),sCt.forEach(t),Rqo=r(qae," class method or the "),FX=n(qae,"A",{href:!0});var lCt=s(FX);Pqo=r(lCt,"from_config()"),lCt.forEach(t),Bqo=r(qae,` class
method.`),qae.forEach(t),Iqo=i(ul),Ky=n(ul,"P",{});var eJe=s(Ky);Nqo=r(eJe,"This class cannot be instantiated directly using "),R_e=n(eJe,"CODE",{});var iCt=s(R_e);qqo=r(iCt,"__init__()"),iCt.forEach(t),jqo=r(eJe," (throws an error)."),eJe.forEach(t),Dqo=i(ul),pt=n(ul,"DIV",{class:!0});var h7=s(pt);T(Zy.$$.fragment,h7),Gqo=i(h7),P_e=n(h7,"P",{});var dCt=s(P_e);Oqo=r(dCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dCt.forEach(t),Vqo=i(h7),gd=n(h7,"P",{});var jae=s(gd);Xqo=r(jae,`Note:
Loading a model from its configuration file does `),B_e=n(jae,"STRONG",{});var cCt=s(B_e);zqo=r(cCt,"not"),cCt.forEach(t),Wqo=r(jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(jae,"A",{href:!0});var fCt=s(TX);Qqo=r(fCt,"from_pretrained()"),fCt.forEach(t),Uqo=r(jae," to load the model weights."),jae.forEach(t),Hqo=i(h7),T(mb.$$.fragment,h7),h7.forEach(t),Jqo=i(ul),eo=n(ul,"DIV",{class:!0});var _a=s(eo);T(e9.$$.fragment,_a),Yqo=i(_a),I_e=n(_a,"P",{});var mCt=s(I_e);Kqo=r(mCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mCt.forEach(t),Zqo=i(_a),Wa=n(_a,"P",{});var p7=s(Wa);ejo=r(p7,"The model class to instantiate is selected based on the "),N_e=n(p7,"CODE",{});var gCt=s(N_e);ojo=r(gCt,"model_type"),gCt.forEach(t),rjo=r(p7,` property of the config object (either
passed as an argument or loaded from `),q_e=n(p7,"CODE",{});var hCt=s(q_e);tjo=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),ajo=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=n(p7,"CODE",{});var pCt=s(j_e);njo=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),sjo=r(p7,":"),p7.forEach(t),ljo=i(_a),Q=n(_a,"UL",{});var J=s(Q);gb=n(J,"LI",{});var jBe=s(gb);D_e=n(jBe,"STRONG",{});var _Ct=s(D_e);ijo=r(_Ct,"albert"),_Ct.forEach(t),djo=r(jBe," \u2014 "),MX=n(jBe,"A",{href:!0});var uCt=s(MX);cjo=r(uCt,"AlbertForMaskedLM"),uCt.forEach(t),fjo=r(jBe," (ALBERT model)"),jBe.forEach(t),mjo=i(J),hb=n(J,"LI",{});var DBe=s(hb);G_e=n(DBe,"STRONG",{});var bCt=s(G_e);gjo=r(bCt,"bart"),bCt.forEach(t),hjo=r(DBe," \u2014 "),EX=n(DBe,"A",{href:!0});var vCt=s(EX);pjo=r(vCt,"BartForConditionalGeneration"),vCt.forEach(t),_jo=r(DBe," (BART model)"),DBe.forEach(t),ujo=i(J),pb=n(J,"LI",{});var GBe=s(pb);O_e=n(GBe,"STRONG",{});var FCt=s(O_e);bjo=r(FCt,"bert"),FCt.forEach(t),vjo=r(GBe," \u2014 "),CX=n(GBe,"A",{href:!0});var TCt=s(CX);Fjo=r(TCt,"BertForMaskedLM"),TCt.forEach(t),Tjo=r(GBe," (BERT model)"),GBe.forEach(t),Mjo=i(J),_b=n(J,"LI",{});var OBe=s(_b);V_e=n(OBe,"STRONG",{});var MCt=s(V_e);Ejo=r(MCt,"big_bird"),MCt.forEach(t),Cjo=r(OBe," \u2014 "),wX=n(OBe,"A",{href:!0});var ECt=s(wX);wjo=r(ECt,"BigBirdForMaskedLM"),ECt.forEach(t),Ajo=r(OBe," (BigBird model)"),OBe.forEach(t),Ljo=i(J),ub=n(J,"LI",{});var VBe=s(ub);X_e=n(VBe,"STRONG",{});var CCt=s(X_e);yjo=r(CCt,"camembert"),CCt.forEach(t),xjo=r(VBe," \u2014 "),AX=n(VBe,"A",{href:!0});var wCt=s(AX);$jo=r(wCt,"CamembertForMaskedLM"),wCt.forEach(t),kjo=r(VBe," (CamemBERT model)"),VBe.forEach(t),Sjo=i(J),bb=n(J,"LI",{});var XBe=s(bb);z_e=n(XBe,"STRONG",{});var ACt=s(z_e);Rjo=r(ACt,"convbert"),ACt.forEach(t),Pjo=r(XBe," \u2014 "),LX=n(XBe,"A",{href:!0});var LCt=s(LX);Bjo=r(LCt,"ConvBertForMaskedLM"),LCt.forEach(t),Ijo=r(XBe," (ConvBERT model)"),XBe.forEach(t),Njo=i(J),vb=n(J,"LI",{});var zBe=s(vb);W_e=n(zBe,"STRONG",{});var yCt=s(W_e);qjo=r(yCt,"data2vec-text"),yCt.forEach(t),jjo=r(zBe," \u2014 "),yX=n(zBe,"A",{href:!0});var xCt=s(yX);Djo=r(xCt,"Data2VecTextForMaskedLM"),xCt.forEach(t),Gjo=r(zBe," (Data2VecText model)"),zBe.forEach(t),Ojo=i(J),Fb=n(J,"LI",{});var WBe=s(Fb);Q_e=n(WBe,"STRONG",{});var $Ct=s(Q_e);Vjo=r($Ct,"deberta"),$Ct.forEach(t),Xjo=r(WBe," \u2014 "),xX=n(WBe,"A",{href:!0});var kCt=s(xX);zjo=r(kCt,"DebertaForMaskedLM"),kCt.forEach(t),Wjo=r(WBe," (DeBERTa model)"),WBe.forEach(t),Qjo=i(J),Tb=n(J,"LI",{});var QBe=s(Tb);U_e=n(QBe,"STRONG",{});var SCt=s(U_e);Ujo=r(SCt,"deberta-v2"),SCt.forEach(t),Hjo=r(QBe," \u2014 "),$X=n(QBe,"A",{href:!0});var RCt=s($X);Jjo=r(RCt,"DebertaV2ForMaskedLM"),RCt.forEach(t),Yjo=r(QBe," (DeBERTa-v2 model)"),QBe.forEach(t),Kjo=i(J),Mb=n(J,"LI",{});var UBe=s(Mb);H_e=n(UBe,"STRONG",{});var PCt=s(H_e);Zjo=r(PCt,"distilbert"),PCt.forEach(t),eDo=r(UBe," \u2014 "),kX=n(UBe,"A",{href:!0});var BCt=s(kX);oDo=r(BCt,"DistilBertForMaskedLM"),BCt.forEach(t),rDo=r(UBe," (DistilBERT model)"),UBe.forEach(t),tDo=i(J),Eb=n(J,"LI",{});var HBe=s(Eb);J_e=n(HBe,"STRONG",{});var ICt=s(J_e);aDo=r(ICt,"electra"),ICt.forEach(t),nDo=r(HBe," \u2014 "),SX=n(HBe,"A",{href:!0});var NCt=s(SX);sDo=r(NCt,"ElectraForMaskedLM"),NCt.forEach(t),lDo=r(HBe," (ELECTRA model)"),HBe.forEach(t),iDo=i(J),Cb=n(J,"LI",{});var JBe=s(Cb);Y_e=n(JBe,"STRONG",{});var qCt=s(Y_e);dDo=r(qCt,"flaubert"),qCt.forEach(t),cDo=r(JBe," \u2014 "),RX=n(JBe,"A",{href:!0});var jCt=s(RX);fDo=r(jCt,"FlaubertWithLMHeadModel"),jCt.forEach(t),mDo=r(JBe," (FlauBERT model)"),JBe.forEach(t),gDo=i(J),wb=n(J,"LI",{});var YBe=s(wb);K_e=n(YBe,"STRONG",{});var DCt=s(K_e);hDo=r(DCt,"fnet"),DCt.forEach(t),pDo=r(YBe," \u2014 "),PX=n(YBe,"A",{href:!0});var GCt=s(PX);_Do=r(GCt,"FNetForMaskedLM"),GCt.forEach(t),uDo=r(YBe," (FNet model)"),YBe.forEach(t),bDo=i(J),Ab=n(J,"LI",{});var KBe=s(Ab);Z_e=n(KBe,"STRONG",{});var OCt=s(Z_e);vDo=r(OCt,"funnel"),OCt.forEach(t),FDo=r(KBe," \u2014 "),BX=n(KBe,"A",{href:!0});var VCt=s(BX);TDo=r(VCt,"FunnelForMaskedLM"),VCt.forEach(t),MDo=r(KBe," (Funnel Transformer model)"),KBe.forEach(t),EDo=i(J),Lb=n(J,"LI",{});var ZBe=s(Lb);eue=n(ZBe,"STRONG",{});var XCt=s(eue);CDo=r(XCt,"ibert"),XCt.forEach(t),wDo=r(ZBe," \u2014 "),IX=n(ZBe,"A",{href:!0});var zCt=s(IX);ADo=r(zCt,"IBertForMaskedLM"),zCt.forEach(t),LDo=r(ZBe," (I-BERT model)"),ZBe.forEach(t),yDo=i(J),yb=n(J,"LI",{});var eIe=s(yb);oue=n(eIe,"STRONG",{});var WCt=s(oue);xDo=r(WCt,"layoutlm"),WCt.forEach(t),$Do=r(eIe," \u2014 "),NX=n(eIe,"A",{href:!0});var QCt=s(NX);kDo=r(QCt,"LayoutLMForMaskedLM"),QCt.forEach(t),SDo=r(eIe," (LayoutLM model)"),eIe.forEach(t),RDo=i(J),xb=n(J,"LI",{});var oIe=s(xb);rue=n(oIe,"STRONG",{});var UCt=s(rue);PDo=r(UCt,"longformer"),UCt.forEach(t),BDo=r(oIe," \u2014 "),qX=n(oIe,"A",{href:!0});var HCt=s(qX);IDo=r(HCt,"LongformerForMaskedLM"),HCt.forEach(t),NDo=r(oIe," (Longformer model)"),oIe.forEach(t),qDo=i(J),$b=n(J,"LI",{});var rIe=s($b);tue=n(rIe,"STRONG",{});var JCt=s(tue);jDo=r(JCt,"luke"),JCt.forEach(t),DDo=r(rIe," \u2014 "),jX=n(rIe,"A",{href:!0});var YCt=s(jX);GDo=r(YCt,"LukeForMaskedLM"),YCt.forEach(t),ODo=r(rIe," (LUKE model)"),rIe.forEach(t),VDo=i(J),kb=n(J,"LI",{});var tIe=s(kb);aue=n(tIe,"STRONG",{});var KCt=s(aue);XDo=r(KCt,"mbart"),KCt.forEach(t),zDo=r(tIe," \u2014 "),DX=n(tIe,"A",{href:!0});var ZCt=s(DX);WDo=r(ZCt,"MBartForConditionalGeneration"),ZCt.forEach(t),QDo=r(tIe," (mBART model)"),tIe.forEach(t),UDo=i(J),Sb=n(J,"LI",{});var aIe=s(Sb);nue=n(aIe,"STRONG",{});var e3t=s(nue);HDo=r(e3t,"megatron-bert"),e3t.forEach(t),JDo=r(aIe," \u2014 "),GX=n(aIe,"A",{href:!0});var o3t=s(GX);YDo=r(o3t,"MegatronBertForMaskedLM"),o3t.forEach(t),KDo=r(aIe," (Megatron-BERT model)"),aIe.forEach(t),ZDo=i(J),Rb=n(J,"LI",{});var nIe=s(Rb);sue=n(nIe,"STRONG",{});var r3t=s(sue);eGo=r(r3t,"mobilebert"),r3t.forEach(t),oGo=r(nIe," \u2014 "),OX=n(nIe,"A",{href:!0});var t3t=s(OX);rGo=r(t3t,"MobileBertForMaskedLM"),t3t.forEach(t),tGo=r(nIe," (MobileBERT model)"),nIe.forEach(t),aGo=i(J),Pb=n(J,"LI",{});var sIe=s(Pb);lue=n(sIe,"STRONG",{});var a3t=s(lue);nGo=r(a3t,"mpnet"),a3t.forEach(t),sGo=r(sIe," \u2014 "),VX=n(sIe,"A",{href:!0});var n3t=s(VX);lGo=r(n3t,"MPNetForMaskedLM"),n3t.forEach(t),iGo=r(sIe," (MPNet model)"),sIe.forEach(t),dGo=i(J),Bb=n(J,"LI",{});var lIe=s(Bb);iue=n(lIe,"STRONG",{});var s3t=s(iue);cGo=r(s3t,"mvp"),s3t.forEach(t),fGo=r(lIe," \u2014 "),XX=n(lIe,"A",{href:!0});var l3t=s(XX);mGo=r(l3t,"MvpForConditionalGeneration"),l3t.forEach(t),gGo=r(lIe," (MVP model)"),lIe.forEach(t),hGo=i(J),Ib=n(J,"LI",{});var iIe=s(Ib);due=n(iIe,"STRONG",{});var i3t=s(due);pGo=r(i3t,"nezha"),i3t.forEach(t),_Go=r(iIe," \u2014 "),zX=n(iIe,"A",{href:!0});var d3t=s(zX);uGo=r(d3t,"NezhaForMaskedLM"),d3t.forEach(t),bGo=r(iIe," (Nezha model)"),iIe.forEach(t),vGo=i(J),Nb=n(J,"LI",{});var dIe=s(Nb);cue=n(dIe,"STRONG",{});var c3t=s(cue);FGo=r(c3t,"nystromformer"),c3t.forEach(t),TGo=r(dIe," \u2014 "),WX=n(dIe,"A",{href:!0});var f3t=s(WX);MGo=r(f3t,"NystromformerForMaskedLM"),f3t.forEach(t),EGo=r(dIe," (Nystr\xF6mformer model)"),dIe.forEach(t),CGo=i(J),qb=n(J,"LI",{});var cIe=s(qb);fue=n(cIe,"STRONG",{});var m3t=s(fue);wGo=r(m3t,"perceiver"),m3t.forEach(t),AGo=r(cIe," \u2014 "),QX=n(cIe,"A",{href:!0});var g3t=s(QX);LGo=r(g3t,"PerceiverForMaskedLM"),g3t.forEach(t),yGo=r(cIe," (Perceiver model)"),cIe.forEach(t),xGo=i(J),jb=n(J,"LI",{});var fIe=s(jb);mue=n(fIe,"STRONG",{});var h3t=s(mue);$Go=r(h3t,"qdqbert"),h3t.forEach(t),kGo=r(fIe," \u2014 "),UX=n(fIe,"A",{href:!0});var p3t=s(UX);SGo=r(p3t,"QDQBertForMaskedLM"),p3t.forEach(t),RGo=r(fIe," (QDQBert model)"),fIe.forEach(t),PGo=i(J),Db=n(J,"LI",{});var mIe=s(Db);gue=n(mIe,"STRONG",{});var _3t=s(gue);BGo=r(_3t,"reformer"),_3t.forEach(t),IGo=r(mIe," \u2014 "),HX=n(mIe,"A",{href:!0});var u3t=s(HX);NGo=r(u3t,"ReformerForMaskedLM"),u3t.forEach(t),qGo=r(mIe," (Reformer model)"),mIe.forEach(t),jGo=i(J),Gb=n(J,"LI",{});var gIe=s(Gb);hue=n(gIe,"STRONG",{});var b3t=s(hue);DGo=r(b3t,"rembert"),b3t.forEach(t),GGo=r(gIe," \u2014 "),JX=n(gIe,"A",{href:!0});var v3t=s(JX);OGo=r(v3t,"RemBertForMaskedLM"),v3t.forEach(t),VGo=r(gIe," (RemBERT model)"),gIe.forEach(t),XGo=i(J),Ob=n(J,"LI",{});var hIe=s(Ob);pue=n(hIe,"STRONG",{});var F3t=s(pue);zGo=r(F3t,"roberta"),F3t.forEach(t),WGo=r(hIe," \u2014 "),YX=n(hIe,"A",{href:!0});var T3t=s(YX);QGo=r(T3t,"RobertaForMaskedLM"),T3t.forEach(t),UGo=r(hIe," (RoBERTa model)"),hIe.forEach(t),HGo=i(J),Vb=n(J,"LI",{});var pIe=s(Vb);_ue=n(pIe,"STRONG",{});var M3t=s(_ue);JGo=r(M3t,"roformer"),M3t.forEach(t),YGo=r(pIe," \u2014 "),KX=n(pIe,"A",{href:!0});var E3t=s(KX);KGo=r(E3t,"RoFormerForMaskedLM"),E3t.forEach(t),ZGo=r(pIe," (RoFormer model)"),pIe.forEach(t),eOo=i(J),Xb=n(J,"LI",{});var _Ie=s(Xb);uue=n(_Ie,"STRONG",{});var C3t=s(uue);oOo=r(C3t,"squeezebert"),C3t.forEach(t),rOo=r(_Ie," \u2014 "),ZX=n(_Ie,"A",{href:!0});var w3t=s(ZX);tOo=r(w3t,"SqueezeBertForMaskedLM"),w3t.forEach(t),aOo=r(_Ie," (SqueezeBERT model)"),_Ie.forEach(t),nOo=i(J),zb=n(J,"LI",{});var uIe=s(zb);bue=n(uIe,"STRONG",{});var A3t=s(bue);sOo=r(A3t,"tapas"),A3t.forEach(t),lOo=r(uIe," \u2014 "),ez=n(uIe,"A",{href:!0});var L3t=s(ez);iOo=r(L3t,"TapasForMaskedLM"),L3t.forEach(t),dOo=r(uIe," (TAPAS model)"),uIe.forEach(t),cOo=i(J),Wb=n(J,"LI",{});var bIe=s(Wb);vue=n(bIe,"STRONG",{});var y3t=s(vue);fOo=r(y3t,"wav2vec2"),y3t.forEach(t),mOo=r(bIe," \u2014 "),Fue=n(bIe,"CODE",{});var x3t=s(Fue);gOo=r(x3t,"Wav2Vec2ForMaskedLM"),x3t.forEach(t),hOo=r(bIe," (Wav2Vec2 model)"),bIe.forEach(t),pOo=i(J),Qb=n(J,"LI",{});var vIe=s(Qb);Tue=n(vIe,"STRONG",{});var $3t=s(Tue);_Oo=r($3t,"xlm"),$3t.forEach(t),uOo=r(vIe," \u2014 "),oz=n(vIe,"A",{href:!0});var k3t=s(oz);bOo=r(k3t,"XLMWithLMHeadModel"),k3t.forEach(t),vOo=r(vIe," (XLM model)"),vIe.forEach(t),FOo=i(J),Ub=n(J,"LI",{});var FIe=s(Ub);Mue=n(FIe,"STRONG",{});var S3t=s(Mue);TOo=r(S3t,"xlm-roberta"),S3t.forEach(t),MOo=r(FIe," \u2014 "),rz=n(FIe,"A",{href:!0});var R3t=s(rz);EOo=r(R3t,"XLMRobertaForMaskedLM"),R3t.forEach(t),COo=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),wOo=i(J),Hb=n(J,"LI",{});var TIe=s(Hb);Eue=n(TIe,"STRONG",{});var P3t=s(Eue);AOo=r(P3t,"xlm-roberta-xl"),P3t.forEach(t),LOo=r(TIe," \u2014 "),tz=n(TIe,"A",{href:!0});var B3t=s(tz);yOo=r(B3t,"XLMRobertaXLForMaskedLM"),B3t.forEach(t),xOo=r(TIe," (XLM-RoBERTa-XL model)"),TIe.forEach(t),$Oo=i(J),Jb=n(J,"LI",{});var MIe=s(Jb);Cue=n(MIe,"STRONG",{});var I3t=s(Cue);kOo=r(I3t,"yoso"),I3t.forEach(t),SOo=r(MIe," \u2014 "),az=n(MIe,"A",{href:!0});var N3t=s(az);ROo=r(N3t,"YosoForMaskedLM"),N3t.forEach(t),POo=r(MIe," (YOSO model)"),MIe.forEach(t),J.forEach(t),BOo=i(_a),Yb=n(_a,"P",{});var EIe=s(Yb);IOo=r(EIe,"The model is set in evaluation mode by default using "),wue=n(EIe,"CODE",{});var q3t=s(wue);NOo=r(q3t,"model.eval()"),q3t.forEach(t),qOo=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(EIe,"CODE",{});var j3t=s(Aue);jOo=r(j3t,"model.train()"),j3t.forEach(t),EIe.forEach(t),DOo=i(_a),T(Kb.$$.fragment,_a),_a.forEach(t),ul.forEach(t),zQe=i(f),hd=n(f,"H2",{class:!0});var oJe=s(hd);Zb=n(oJe,"A",{id:!0,class:!0,href:!0});var D3t=s(Zb);Lue=n(D3t,"SPAN",{});var G3t=s(Lue);T(o9.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),GOo=i(oJe),yue=n(oJe,"SPAN",{});var O3t=s(yue);OOo=r(O3t,"AutoModelForSeq2SeqLM"),O3t.forEach(t),oJe.forEach(t),WQe=i(f),Io=n(f,"DIV",{class:!0});var bl=s(Io);T(r9.$$.fragment,bl),VOo=i(bl),pd=n(bl,"P",{});var Dae=s(pd);XOo=r(Dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nz=n(Dae,"A",{href:!0});var V3t=s(nz);zOo=r(V3t,"from_pretrained()"),V3t.forEach(t),WOo=r(Dae," class method or the "),sz=n(Dae,"A",{href:!0});var X3t=s(sz);QOo=r(X3t,"from_config()"),X3t.forEach(t),UOo=r(Dae,` class
method.`),Dae.forEach(t),HOo=i(bl),t9=n(bl,"P",{});var rJe=s(t9);JOo=r(rJe,"This class cannot be instantiated directly using "),xue=n(rJe,"CODE",{});var z3t=s(xue);YOo=r(z3t,"__init__()"),z3t.forEach(t),KOo=r(rJe," (throws an error)."),rJe.forEach(t),ZOo=i(bl),_t=n(bl,"DIV",{class:!0});var _7=s(_t);T(a9.$$.fragment,_7),eVo=i(_7),$ue=n(_7,"P",{});var W3t=s($ue);oVo=r(W3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W3t.forEach(t),rVo=i(_7),_d=n(_7,"P",{});var Gae=s(_d);tVo=r(Gae,`Note:
Loading a model from its configuration file does `),kue=n(Gae,"STRONG",{});var Q3t=s(kue);aVo=r(Q3t,"not"),Q3t.forEach(t),nVo=r(Gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(Gae,"A",{href:!0});var U3t=s(lz);sVo=r(U3t,"from_pretrained()"),U3t.forEach(t),lVo=r(Gae," to load the model weights."),Gae.forEach(t),iVo=i(_7),T(ev.$$.fragment,_7),_7.forEach(t),dVo=i(bl),oo=n(bl,"DIV",{class:!0});var ua=s(oo);T(n9.$$.fragment,ua),cVo=i(ua),Sue=n(ua,"P",{});var H3t=s(Sue);fVo=r(H3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H3t.forEach(t),mVo=i(ua),Qa=n(ua,"P",{});var u7=s(Qa);gVo=r(u7,"The model class to instantiate is selected based on the "),Rue=n(u7,"CODE",{});var J3t=s(Rue);hVo=r(J3t,"model_type"),J3t.forEach(t),pVo=r(u7,` property of the config object (either
passed as an argument or loaded from `),Pue=n(u7,"CODE",{});var Y3t=s(Pue);_Vo=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),uVo=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(u7,"CODE",{});var K3t=s(Bue);bVo=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),vVo=r(u7,":"),u7.forEach(t),FVo=i(ua),me=n(ua,"UL",{});var ue=s(me);ov=n(ue,"LI",{});var CIe=s(ov);Iue=n(CIe,"STRONG",{});var Z3t=s(Iue);TVo=r(Z3t,"bart"),Z3t.forEach(t),MVo=r(CIe," \u2014 "),iz=n(CIe,"A",{href:!0});var e5t=s(iz);EVo=r(e5t,"BartForConditionalGeneration"),e5t.forEach(t),CVo=r(CIe," (BART model)"),CIe.forEach(t),wVo=i(ue),rv=n(ue,"LI",{});var wIe=s(rv);Nue=n(wIe,"STRONG",{});var o5t=s(Nue);AVo=r(o5t,"bigbird_pegasus"),o5t.forEach(t),LVo=r(wIe," \u2014 "),dz=n(wIe,"A",{href:!0});var r5t=s(dz);yVo=r(r5t,"BigBirdPegasusForConditionalGeneration"),r5t.forEach(t),xVo=r(wIe," (BigBird-Pegasus model)"),wIe.forEach(t),$Vo=i(ue),tv=n(ue,"LI",{});var AIe=s(tv);que=n(AIe,"STRONG",{});var t5t=s(que);kVo=r(t5t,"blenderbot"),t5t.forEach(t),SVo=r(AIe," \u2014 "),cz=n(AIe,"A",{href:!0});var a5t=s(cz);RVo=r(a5t,"BlenderbotForConditionalGeneration"),a5t.forEach(t),PVo=r(AIe," (Blenderbot model)"),AIe.forEach(t),BVo=i(ue),av=n(ue,"LI",{});var LIe=s(av);jue=n(LIe,"STRONG",{});var n5t=s(jue);IVo=r(n5t,"blenderbot-small"),n5t.forEach(t),NVo=r(LIe," \u2014 "),fz=n(LIe,"A",{href:!0});var s5t=s(fz);qVo=r(s5t,"BlenderbotSmallForConditionalGeneration"),s5t.forEach(t),jVo=r(LIe," (BlenderbotSmall model)"),LIe.forEach(t),DVo=i(ue),nv=n(ue,"LI",{});var yIe=s(nv);Due=n(yIe,"STRONG",{});var l5t=s(Due);GVo=r(l5t,"encoder-decoder"),l5t.forEach(t),OVo=r(yIe," \u2014 "),mz=n(yIe,"A",{href:!0});var i5t=s(mz);VVo=r(i5t,"EncoderDecoderModel"),i5t.forEach(t),XVo=r(yIe," (Encoder decoder model)"),yIe.forEach(t),zVo=i(ue),sv=n(ue,"LI",{});var xIe=s(sv);Gue=n(xIe,"STRONG",{});var d5t=s(Gue);WVo=r(d5t,"fsmt"),d5t.forEach(t),QVo=r(xIe," \u2014 "),gz=n(xIe,"A",{href:!0});var c5t=s(gz);UVo=r(c5t,"FSMTForConditionalGeneration"),c5t.forEach(t),HVo=r(xIe," (FairSeq Machine-Translation model)"),xIe.forEach(t),JVo=i(ue),lv=n(ue,"LI",{});var $Ie=s(lv);Oue=n($Ie,"STRONG",{});var f5t=s(Oue);YVo=r(f5t,"led"),f5t.forEach(t),KVo=r($Ie," \u2014 "),hz=n($Ie,"A",{href:!0});var m5t=s(hz);ZVo=r(m5t,"LEDForConditionalGeneration"),m5t.forEach(t),eXo=r($Ie," (LED model)"),$Ie.forEach(t),oXo=i(ue),iv=n(ue,"LI",{});var kIe=s(iv);Vue=n(kIe,"STRONG",{});var g5t=s(Vue);rXo=r(g5t,"longt5"),g5t.forEach(t),tXo=r(kIe," \u2014 "),pz=n(kIe,"A",{href:!0});var h5t=s(pz);aXo=r(h5t,"LongT5ForConditionalGeneration"),h5t.forEach(t),nXo=r(kIe," (LongT5 model)"),kIe.forEach(t),sXo=i(ue),dv=n(ue,"LI",{});var SIe=s(dv);Xue=n(SIe,"STRONG",{});var p5t=s(Xue);lXo=r(p5t,"m2m_100"),p5t.forEach(t),iXo=r(SIe," \u2014 "),_z=n(SIe,"A",{href:!0});var _5t=s(_z);dXo=r(_5t,"M2M100ForConditionalGeneration"),_5t.forEach(t),cXo=r(SIe," (M2M100 model)"),SIe.forEach(t),fXo=i(ue),cv=n(ue,"LI",{});var RIe=s(cv);zue=n(RIe,"STRONG",{});var u5t=s(zue);mXo=r(u5t,"marian"),u5t.forEach(t),gXo=r(RIe," \u2014 "),uz=n(RIe,"A",{href:!0});var b5t=s(uz);hXo=r(b5t,"MarianMTModel"),b5t.forEach(t),pXo=r(RIe," (Marian model)"),RIe.forEach(t),_Xo=i(ue),fv=n(ue,"LI",{});var PIe=s(fv);Wue=n(PIe,"STRONG",{});var v5t=s(Wue);uXo=r(v5t,"mbart"),v5t.forEach(t),bXo=r(PIe," \u2014 "),bz=n(PIe,"A",{href:!0});var F5t=s(bz);vXo=r(F5t,"MBartForConditionalGeneration"),F5t.forEach(t),FXo=r(PIe," (mBART model)"),PIe.forEach(t),TXo=i(ue),mv=n(ue,"LI",{});var BIe=s(mv);Que=n(BIe,"STRONG",{});var T5t=s(Que);MXo=r(T5t,"mt5"),T5t.forEach(t),EXo=r(BIe," \u2014 "),vz=n(BIe,"A",{href:!0});var M5t=s(vz);CXo=r(M5t,"MT5ForConditionalGeneration"),M5t.forEach(t),wXo=r(BIe," (MT5 model)"),BIe.forEach(t),AXo=i(ue),gv=n(ue,"LI",{});var IIe=s(gv);Uue=n(IIe,"STRONG",{});var E5t=s(Uue);LXo=r(E5t,"mvp"),E5t.forEach(t),yXo=r(IIe," \u2014 "),Fz=n(IIe,"A",{href:!0});var C5t=s(Fz);xXo=r(C5t,"MvpForConditionalGeneration"),C5t.forEach(t),$Xo=r(IIe," (MVP model)"),IIe.forEach(t),kXo=i(ue),hv=n(ue,"LI",{});var NIe=s(hv);Hue=n(NIe,"STRONG",{});var w5t=s(Hue);SXo=r(w5t,"nllb"),w5t.forEach(t),RXo=r(NIe," \u2014 "),Tz=n(NIe,"A",{href:!0});var A5t=s(Tz);PXo=r(A5t,"M2M100ForConditionalGeneration"),A5t.forEach(t),BXo=r(NIe," (NLLB model)"),NIe.forEach(t),IXo=i(ue),pv=n(ue,"LI",{});var qIe=s(pv);Jue=n(qIe,"STRONG",{});var L5t=s(Jue);NXo=r(L5t,"pegasus"),L5t.forEach(t),qXo=r(qIe," \u2014 "),Mz=n(qIe,"A",{href:!0});var y5t=s(Mz);jXo=r(y5t,"PegasusForConditionalGeneration"),y5t.forEach(t),DXo=r(qIe," (Pegasus model)"),qIe.forEach(t),GXo=i(ue),_v=n(ue,"LI",{});var jIe=s(_v);Yue=n(jIe,"STRONG",{});var x5t=s(Yue);OXo=r(x5t,"plbart"),x5t.forEach(t),VXo=r(jIe," \u2014 "),Ez=n(jIe,"A",{href:!0});var $5t=s(Ez);XXo=r($5t,"PLBartForConditionalGeneration"),$5t.forEach(t),zXo=r(jIe," (PLBart model)"),jIe.forEach(t),WXo=i(ue),uv=n(ue,"LI",{});var DIe=s(uv);Kue=n(DIe,"STRONG",{});var k5t=s(Kue);QXo=r(k5t,"prophetnet"),k5t.forEach(t),UXo=r(DIe," \u2014 "),Cz=n(DIe,"A",{href:!0});var S5t=s(Cz);HXo=r(S5t,"ProphetNetForConditionalGeneration"),S5t.forEach(t),JXo=r(DIe," (ProphetNet model)"),DIe.forEach(t),YXo=i(ue),bv=n(ue,"LI",{});var GIe=s(bv);Zue=n(GIe,"STRONG",{});var R5t=s(Zue);KXo=r(R5t,"t5"),R5t.forEach(t),ZXo=r(GIe," \u2014 "),wz=n(GIe,"A",{href:!0});var P5t=s(wz);ezo=r(P5t,"T5ForConditionalGeneration"),P5t.forEach(t),ozo=r(GIe," (T5 model)"),GIe.forEach(t),rzo=i(ue),vv=n(ue,"LI",{});var OIe=s(vv);e2e=n(OIe,"STRONG",{});var B5t=s(e2e);tzo=r(B5t,"xlm-prophetnet"),B5t.forEach(t),azo=r(OIe," \u2014 "),Az=n(OIe,"A",{href:!0});var I5t=s(Az);nzo=r(I5t,"XLMProphetNetForConditionalGeneration"),I5t.forEach(t),szo=r(OIe," (XLM-ProphetNet model)"),OIe.forEach(t),ue.forEach(t),lzo=i(ua),Fv=n(ua,"P",{});var VIe=s(Fv);izo=r(VIe,"The model is set in evaluation mode by default using "),o2e=n(VIe,"CODE",{});var N5t=s(o2e);dzo=r(N5t,"model.eval()"),N5t.forEach(t),czo=r(VIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r2e=n(VIe,"CODE",{});var q5t=s(r2e);fzo=r(q5t,"model.train()"),q5t.forEach(t),VIe.forEach(t),mzo=i(ua),T(Tv.$$.fragment,ua),ua.forEach(t),bl.forEach(t),QQe=i(f),ud=n(f,"H2",{class:!0});var tJe=s(ud);Mv=n(tJe,"A",{id:!0,class:!0,href:!0});var j5t=s(Mv);t2e=n(j5t,"SPAN",{});var D5t=s(t2e);T(s9.$$.fragment,D5t),D5t.forEach(t),j5t.forEach(t),gzo=i(tJe),a2e=n(tJe,"SPAN",{});var G5t=s(a2e);hzo=r(G5t,"AutoModelForSequenceClassification"),G5t.forEach(t),tJe.forEach(t),UQe=i(f),No=n(f,"DIV",{class:!0});var vl=s(No);T(l9.$$.fragment,vl),pzo=i(vl),bd=n(vl,"P",{});var Oae=s(bd);_zo=r(Oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lz=n(Oae,"A",{href:!0});var O5t=s(Lz);uzo=r(O5t,"from_pretrained()"),O5t.forEach(t),bzo=r(Oae," class method or the "),yz=n(Oae,"A",{href:!0});var V5t=s(yz);vzo=r(V5t,"from_config()"),V5t.forEach(t),Fzo=r(Oae,` class
method.`),Oae.forEach(t),Tzo=i(vl),i9=n(vl,"P",{});var aJe=s(i9);Mzo=r(aJe,"This class cannot be instantiated directly using "),n2e=n(aJe,"CODE",{});var X5t=s(n2e);Ezo=r(X5t,"__init__()"),X5t.forEach(t),Czo=r(aJe," (throws an error)."),aJe.forEach(t),wzo=i(vl),ut=n(vl,"DIV",{class:!0});var b7=s(ut);T(d9.$$.fragment,b7),Azo=i(b7),s2e=n(b7,"P",{});var z5t=s(s2e);Lzo=r(z5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z5t.forEach(t),yzo=i(b7),vd=n(b7,"P",{});var Vae=s(vd);xzo=r(Vae,`Note:
Loading a model from its configuration file does `),l2e=n(Vae,"STRONG",{});var W5t=s(l2e);$zo=r(W5t,"not"),W5t.forEach(t),kzo=r(Vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(Vae,"A",{href:!0});var Q5t=s(xz);Szo=r(Q5t,"from_pretrained()"),Q5t.forEach(t),Rzo=r(Vae," to load the model weights."),Vae.forEach(t),Pzo=i(b7),T(Ev.$$.fragment,b7),b7.forEach(t),Bzo=i(vl),ro=n(vl,"DIV",{class:!0});var ba=s(ro);T(c9.$$.fragment,ba),Izo=i(ba),i2e=n(ba,"P",{});var U5t=s(i2e);Nzo=r(U5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),U5t.forEach(t),qzo=i(ba),Ua=n(ba,"P",{});var v7=s(Ua);jzo=r(v7,"The model class to instantiate is selected based on the "),d2e=n(v7,"CODE",{});var H5t=s(d2e);Dzo=r(H5t,"model_type"),H5t.forEach(t),Gzo=r(v7,` property of the config object (either
passed as an argument or loaded from `),c2e=n(v7,"CODE",{});var J5t=s(c2e);Ozo=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),Vzo=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n(v7,"CODE",{});var Y5t=s(f2e);Xzo=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),zzo=r(v7,":"),v7.forEach(t),Wzo=i(ba),N=n(ba,"UL",{});var j=s(N);Cv=n(j,"LI",{});var XIe=s(Cv);m2e=n(XIe,"STRONG",{});var K5t=s(m2e);Qzo=r(K5t,"albert"),K5t.forEach(t),Uzo=r(XIe," \u2014 "),$z=n(XIe,"A",{href:!0});var Z5t=s($z);Hzo=r(Z5t,"AlbertForSequenceClassification"),Z5t.forEach(t),Jzo=r(XIe," (ALBERT model)"),XIe.forEach(t),Yzo=i(j),wv=n(j,"LI",{});var zIe=s(wv);g2e=n(zIe,"STRONG",{});var ewt=s(g2e);Kzo=r(ewt,"bart"),ewt.forEach(t),Zzo=r(zIe," \u2014 "),kz=n(zIe,"A",{href:!0});var owt=s(kz);eWo=r(owt,"BartForSequenceClassification"),owt.forEach(t),oWo=r(zIe," (BART model)"),zIe.forEach(t),rWo=i(j),Av=n(j,"LI",{});var WIe=s(Av);h2e=n(WIe,"STRONG",{});var rwt=s(h2e);tWo=r(rwt,"bert"),rwt.forEach(t),aWo=r(WIe," \u2014 "),Sz=n(WIe,"A",{href:!0});var twt=s(Sz);nWo=r(twt,"BertForSequenceClassification"),twt.forEach(t),sWo=r(WIe," (BERT model)"),WIe.forEach(t),lWo=i(j),Lv=n(j,"LI",{});var QIe=s(Lv);p2e=n(QIe,"STRONG",{});var awt=s(p2e);iWo=r(awt,"big_bird"),awt.forEach(t),dWo=r(QIe," \u2014 "),Rz=n(QIe,"A",{href:!0});var nwt=s(Rz);cWo=r(nwt,"BigBirdForSequenceClassification"),nwt.forEach(t),fWo=r(QIe," (BigBird model)"),QIe.forEach(t),mWo=i(j),yv=n(j,"LI",{});var UIe=s(yv);_2e=n(UIe,"STRONG",{});var swt=s(_2e);gWo=r(swt,"bigbird_pegasus"),swt.forEach(t),hWo=r(UIe," \u2014 "),Pz=n(UIe,"A",{href:!0});var lwt=s(Pz);pWo=r(lwt,"BigBirdPegasusForSequenceClassification"),lwt.forEach(t),_Wo=r(UIe," (BigBird-Pegasus model)"),UIe.forEach(t),uWo=i(j),xv=n(j,"LI",{});var HIe=s(xv);u2e=n(HIe,"STRONG",{});var iwt=s(u2e);bWo=r(iwt,"bloom"),iwt.forEach(t),vWo=r(HIe," \u2014 "),Bz=n(HIe,"A",{href:!0});var dwt=s(Bz);FWo=r(dwt,"BloomForSequenceClassification"),dwt.forEach(t),TWo=r(HIe," (BLOOM model)"),HIe.forEach(t),MWo=i(j),$v=n(j,"LI",{});var JIe=s($v);b2e=n(JIe,"STRONG",{});var cwt=s(b2e);EWo=r(cwt,"camembert"),cwt.forEach(t),CWo=r(JIe," \u2014 "),Iz=n(JIe,"A",{href:!0});var fwt=s(Iz);wWo=r(fwt,"CamembertForSequenceClassification"),fwt.forEach(t),AWo=r(JIe," (CamemBERT model)"),JIe.forEach(t),LWo=i(j),kv=n(j,"LI",{});var YIe=s(kv);v2e=n(YIe,"STRONG",{});var mwt=s(v2e);yWo=r(mwt,"canine"),mwt.forEach(t),xWo=r(YIe," \u2014 "),Nz=n(YIe,"A",{href:!0});var gwt=s(Nz);$Wo=r(gwt,"CanineForSequenceClassification"),gwt.forEach(t),kWo=r(YIe," (CANINE model)"),YIe.forEach(t),SWo=i(j),Sv=n(j,"LI",{});var KIe=s(Sv);F2e=n(KIe,"STRONG",{});var hwt=s(F2e);RWo=r(hwt,"convbert"),hwt.forEach(t),PWo=r(KIe," \u2014 "),qz=n(KIe,"A",{href:!0});var pwt=s(qz);BWo=r(pwt,"ConvBertForSequenceClassification"),pwt.forEach(t),IWo=r(KIe," (ConvBERT model)"),KIe.forEach(t),NWo=i(j),Rv=n(j,"LI",{});var ZIe=s(Rv);T2e=n(ZIe,"STRONG",{});var _wt=s(T2e);qWo=r(_wt,"ctrl"),_wt.forEach(t),jWo=r(ZIe," \u2014 "),jz=n(ZIe,"A",{href:!0});var uwt=s(jz);DWo=r(uwt,"CTRLForSequenceClassification"),uwt.forEach(t),GWo=r(ZIe," (CTRL model)"),ZIe.forEach(t),OWo=i(j),Pv=n(j,"LI",{});var eNe=s(Pv);M2e=n(eNe,"STRONG",{});var bwt=s(M2e);VWo=r(bwt,"data2vec-text"),bwt.forEach(t),XWo=r(eNe," \u2014 "),Dz=n(eNe,"A",{href:!0});var vwt=s(Dz);zWo=r(vwt,"Data2VecTextForSequenceClassification"),vwt.forEach(t),WWo=r(eNe," (Data2VecText model)"),eNe.forEach(t),QWo=i(j),Bv=n(j,"LI",{});var oNe=s(Bv);E2e=n(oNe,"STRONG",{});var Fwt=s(E2e);UWo=r(Fwt,"deberta"),Fwt.forEach(t),HWo=r(oNe," \u2014 "),Gz=n(oNe,"A",{href:!0});var Twt=s(Gz);JWo=r(Twt,"DebertaForSequenceClassification"),Twt.forEach(t),YWo=r(oNe," (DeBERTa model)"),oNe.forEach(t),KWo=i(j),Iv=n(j,"LI",{});var rNe=s(Iv);C2e=n(rNe,"STRONG",{});var Mwt=s(C2e);ZWo=r(Mwt,"deberta-v2"),Mwt.forEach(t),eQo=r(rNe," \u2014 "),Oz=n(rNe,"A",{href:!0});var Ewt=s(Oz);oQo=r(Ewt,"DebertaV2ForSequenceClassification"),Ewt.forEach(t),rQo=r(rNe," (DeBERTa-v2 model)"),rNe.forEach(t),tQo=i(j),Nv=n(j,"LI",{});var tNe=s(Nv);w2e=n(tNe,"STRONG",{});var Cwt=s(w2e);aQo=r(Cwt,"distilbert"),Cwt.forEach(t),nQo=r(tNe," \u2014 "),Vz=n(tNe,"A",{href:!0});var wwt=s(Vz);sQo=r(wwt,"DistilBertForSequenceClassification"),wwt.forEach(t),lQo=r(tNe," (DistilBERT model)"),tNe.forEach(t),iQo=i(j),qv=n(j,"LI",{});var aNe=s(qv);A2e=n(aNe,"STRONG",{});var Awt=s(A2e);dQo=r(Awt,"electra"),Awt.forEach(t),cQo=r(aNe," \u2014 "),Xz=n(aNe,"A",{href:!0});var Lwt=s(Xz);fQo=r(Lwt,"ElectraForSequenceClassification"),Lwt.forEach(t),mQo=r(aNe," (ELECTRA model)"),aNe.forEach(t),gQo=i(j),jv=n(j,"LI",{});var nNe=s(jv);L2e=n(nNe,"STRONG",{});var ywt=s(L2e);hQo=r(ywt,"flaubert"),ywt.forEach(t),pQo=r(nNe," \u2014 "),zz=n(nNe,"A",{href:!0});var xwt=s(zz);_Qo=r(xwt,"FlaubertForSequenceClassification"),xwt.forEach(t),uQo=r(nNe," (FlauBERT model)"),nNe.forEach(t),bQo=i(j),Dv=n(j,"LI",{});var sNe=s(Dv);y2e=n(sNe,"STRONG",{});var $wt=s(y2e);vQo=r($wt,"fnet"),$wt.forEach(t),FQo=r(sNe," \u2014 "),Wz=n(sNe,"A",{href:!0});var kwt=s(Wz);TQo=r(kwt,"FNetForSequenceClassification"),kwt.forEach(t),MQo=r(sNe," (FNet model)"),sNe.forEach(t),EQo=i(j),Gv=n(j,"LI",{});var lNe=s(Gv);x2e=n(lNe,"STRONG",{});var Swt=s(x2e);CQo=r(Swt,"funnel"),Swt.forEach(t),wQo=r(lNe," \u2014 "),Qz=n(lNe,"A",{href:!0});var Rwt=s(Qz);AQo=r(Rwt,"FunnelForSequenceClassification"),Rwt.forEach(t),LQo=r(lNe," (Funnel Transformer model)"),lNe.forEach(t),yQo=i(j),Ov=n(j,"LI",{});var iNe=s(Ov);$2e=n(iNe,"STRONG",{});var Pwt=s($2e);xQo=r(Pwt,"gpt2"),Pwt.forEach(t),$Qo=r(iNe," \u2014 "),Uz=n(iNe,"A",{href:!0});var Bwt=s(Uz);kQo=r(Bwt,"GPT2ForSequenceClassification"),Bwt.forEach(t),SQo=r(iNe," (OpenAI GPT-2 model)"),iNe.forEach(t),RQo=i(j),Vv=n(j,"LI",{});var dNe=s(Vv);k2e=n(dNe,"STRONG",{});var Iwt=s(k2e);PQo=r(Iwt,"gpt_neo"),Iwt.forEach(t),BQo=r(dNe," \u2014 "),Hz=n(dNe,"A",{href:!0});var Nwt=s(Hz);IQo=r(Nwt,"GPTNeoForSequenceClassification"),Nwt.forEach(t),NQo=r(dNe," (GPT Neo model)"),dNe.forEach(t),qQo=i(j),Xv=n(j,"LI",{});var cNe=s(Xv);S2e=n(cNe,"STRONG",{});var qwt=s(S2e);jQo=r(qwt,"gptj"),qwt.forEach(t),DQo=r(cNe," \u2014 "),Jz=n(cNe,"A",{href:!0});var jwt=s(Jz);GQo=r(jwt,"GPTJForSequenceClassification"),jwt.forEach(t),OQo=r(cNe," (GPT-J model)"),cNe.forEach(t),VQo=i(j),zv=n(j,"LI",{});var fNe=s(zv);R2e=n(fNe,"STRONG",{});var Dwt=s(R2e);XQo=r(Dwt,"ibert"),Dwt.forEach(t),zQo=r(fNe," \u2014 "),Yz=n(fNe,"A",{href:!0});var Gwt=s(Yz);WQo=r(Gwt,"IBertForSequenceClassification"),Gwt.forEach(t),QQo=r(fNe," (I-BERT model)"),fNe.forEach(t),UQo=i(j),Wv=n(j,"LI",{});var mNe=s(Wv);P2e=n(mNe,"STRONG",{});var Owt=s(P2e);HQo=r(Owt,"layoutlm"),Owt.forEach(t),JQo=r(mNe," \u2014 "),Kz=n(mNe,"A",{href:!0});var Vwt=s(Kz);YQo=r(Vwt,"LayoutLMForSequenceClassification"),Vwt.forEach(t),KQo=r(mNe," (LayoutLM model)"),mNe.forEach(t),ZQo=i(j),Qv=n(j,"LI",{});var gNe=s(Qv);B2e=n(gNe,"STRONG",{});var Xwt=s(B2e);eUo=r(Xwt,"layoutlmv2"),Xwt.forEach(t),oUo=r(gNe," \u2014 "),Zz=n(gNe,"A",{href:!0});var zwt=s(Zz);rUo=r(zwt,"LayoutLMv2ForSequenceClassification"),zwt.forEach(t),tUo=r(gNe," (LayoutLMv2 model)"),gNe.forEach(t),aUo=i(j),Uv=n(j,"LI",{});var hNe=s(Uv);I2e=n(hNe,"STRONG",{});var Wwt=s(I2e);nUo=r(Wwt,"layoutlmv3"),Wwt.forEach(t),sUo=r(hNe," \u2014 "),eW=n(hNe,"A",{href:!0});var Qwt=s(eW);lUo=r(Qwt,"LayoutLMv3ForSequenceClassification"),Qwt.forEach(t),iUo=r(hNe," (LayoutLMv3 model)"),hNe.forEach(t),dUo=i(j),Hv=n(j,"LI",{});var pNe=s(Hv);N2e=n(pNe,"STRONG",{});var Uwt=s(N2e);cUo=r(Uwt,"led"),Uwt.forEach(t),fUo=r(pNe," \u2014 "),oW=n(pNe,"A",{href:!0});var Hwt=s(oW);mUo=r(Hwt,"LEDForSequenceClassification"),Hwt.forEach(t),gUo=r(pNe," (LED model)"),pNe.forEach(t),hUo=i(j),Jv=n(j,"LI",{});var _Ne=s(Jv);q2e=n(_Ne,"STRONG",{});var Jwt=s(q2e);pUo=r(Jwt,"longformer"),Jwt.forEach(t),_Uo=r(_Ne," \u2014 "),rW=n(_Ne,"A",{href:!0});var Ywt=s(rW);uUo=r(Ywt,"LongformerForSequenceClassification"),Ywt.forEach(t),bUo=r(_Ne," (Longformer model)"),_Ne.forEach(t),vUo=i(j),Yv=n(j,"LI",{});var uNe=s(Yv);j2e=n(uNe,"STRONG",{});var Kwt=s(j2e);FUo=r(Kwt,"luke"),Kwt.forEach(t),TUo=r(uNe," \u2014 "),tW=n(uNe,"A",{href:!0});var Zwt=s(tW);MUo=r(Zwt,"LukeForSequenceClassification"),Zwt.forEach(t),EUo=r(uNe," (LUKE model)"),uNe.forEach(t),CUo=i(j),Kv=n(j,"LI",{});var bNe=s(Kv);D2e=n(bNe,"STRONG",{});var eAt=s(D2e);wUo=r(eAt,"mbart"),eAt.forEach(t),AUo=r(bNe," \u2014 "),aW=n(bNe,"A",{href:!0});var oAt=s(aW);LUo=r(oAt,"MBartForSequenceClassification"),oAt.forEach(t),yUo=r(bNe," (mBART model)"),bNe.forEach(t),xUo=i(j),Zv=n(j,"LI",{});var vNe=s(Zv);G2e=n(vNe,"STRONG",{});var rAt=s(G2e);$Uo=r(rAt,"megatron-bert"),rAt.forEach(t),kUo=r(vNe," \u2014 "),nW=n(vNe,"A",{href:!0});var tAt=s(nW);SUo=r(tAt,"MegatronBertForSequenceClassification"),tAt.forEach(t),RUo=r(vNe," (Megatron-BERT model)"),vNe.forEach(t),PUo=i(j),e0=n(j,"LI",{});var FNe=s(e0);O2e=n(FNe,"STRONG",{});var aAt=s(O2e);BUo=r(aAt,"mobilebert"),aAt.forEach(t),IUo=r(FNe," \u2014 "),sW=n(FNe,"A",{href:!0});var nAt=s(sW);NUo=r(nAt,"MobileBertForSequenceClassification"),nAt.forEach(t),qUo=r(FNe," (MobileBERT model)"),FNe.forEach(t),jUo=i(j),o0=n(j,"LI",{});var TNe=s(o0);V2e=n(TNe,"STRONG",{});var sAt=s(V2e);DUo=r(sAt,"mpnet"),sAt.forEach(t),GUo=r(TNe," \u2014 "),lW=n(TNe,"A",{href:!0});var lAt=s(lW);OUo=r(lAt,"MPNetForSequenceClassification"),lAt.forEach(t),VUo=r(TNe," (MPNet model)"),TNe.forEach(t),XUo=i(j),r0=n(j,"LI",{});var MNe=s(r0);X2e=n(MNe,"STRONG",{});var iAt=s(X2e);zUo=r(iAt,"mvp"),iAt.forEach(t),WUo=r(MNe," \u2014 "),iW=n(MNe,"A",{href:!0});var dAt=s(iW);QUo=r(dAt,"MvpForSequenceClassification"),dAt.forEach(t),UUo=r(MNe," (MVP model)"),MNe.forEach(t),HUo=i(j),t0=n(j,"LI",{});var ENe=s(t0);z2e=n(ENe,"STRONG",{});var cAt=s(z2e);JUo=r(cAt,"nezha"),cAt.forEach(t),YUo=r(ENe," \u2014 "),dW=n(ENe,"A",{href:!0});var fAt=s(dW);KUo=r(fAt,"NezhaForSequenceClassification"),fAt.forEach(t),ZUo=r(ENe," (Nezha model)"),ENe.forEach(t),eHo=i(j),a0=n(j,"LI",{});var CNe=s(a0);W2e=n(CNe,"STRONG",{});var mAt=s(W2e);oHo=r(mAt,"nystromformer"),mAt.forEach(t),rHo=r(CNe," \u2014 "),cW=n(CNe,"A",{href:!0});var gAt=s(cW);tHo=r(gAt,"NystromformerForSequenceClassification"),gAt.forEach(t),aHo=r(CNe," (Nystr\xF6mformer model)"),CNe.forEach(t),nHo=i(j),n0=n(j,"LI",{});var wNe=s(n0);Q2e=n(wNe,"STRONG",{});var hAt=s(Q2e);sHo=r(hAt,"openai-gpt"),hAt.forEach(t),lHo=r(wNe," \u2014 "),fW=n(wNe,"A",{href:!0});var pAt=s(fW);iHo=r(pAt,"OpenAIGPTForSequenceClassification"),pAt.forEach(t),dHo=r(wNe," (OpenAI GPT model)"),wNe.forEach(t),cHo=i(j),s0=n(j,"LI",{});var ANe=s(s0);U2e=n(ANe,"STRONG",{});var _At=s(U2e);fHo=r(_At,"opt"),_At.forEach(t),mHo=r(ANe," \u2014 "),mW=n(ANe,"A",{href:!0});var uAt=s(mW);gHo=r(uAt,"OPTForSequenceClassification"),uAt.forEach(t),hHo=r(ANe," (OPT model)"),ANe.forEach(t),pHo=i(j),l0=n(j,"LI",{});var LNe=s(l0);H2e=n(LNe,"STRONG",{});var bAt=s(H2e);_Ho=r(bAt,"perceiver"),bAt.forEach(t),uHo=r(LNe," \u2014 "),gW=n(LNe,"A",{href:!0});var vAt=s(gW);bHo=r(vAt,"PerceiverForSequenceClassification"),vAt.forEach(t),vHo=r(LNe," (Perceiver model)"),LNe.forEach(t),FHo=i(j),i0=n(j,"LI",{});var yNe=s(i0);J2e=n(yNe,"STRONG",{});var FAt=s(J2e);THo=r(FAt,"plbart"),FAt.forEach(t),MHo=r(yNe," \u2014 "),hW=n(yNe,"A",{href:!0});var TAt=s(hW);EHo=r(TAt,"PLBartForSequenceClassification"),TAt.forEach(t),CHo=r(yNe," (PLBart model)"),yNe.forEach(t),wHo=i(j),d0=n(j,"LI",{});var xNe=s(d0);Y2e=n(xNe,"STRONG",{});var MAt=s(Y2e);AHo=r(MAt,"qdqbert"),MAt.forEach(t),LHo=r(xNe," \u2014 "),pW=n(xNe,"A",{href:!0});var EAt=s(pW);yHo=r(EAt,"QDQBertForSequenceClassification"),EAt.forEach(t),xHo=r(xNe," (QDQBert model)"),xNe.forEach(t),$Ho=i(j),c0=n(j,"LI",{});var $Ne=s(c0);K2e=n($Ne,"STRONG",{});var CAt=s(K2e);kHo=r(CAt,"reformer"),CAt.forEach(t),SHo=r($Ne," \u2014 "),_W=n($Ne,"A",{href:!0});var wAt=s(_W);RHo=r(wAt,"ReformerForSequenceClassification"),wAt.forEach(t),PHo=r($Ne," (Reformer model)"),$Ne.forEach(t),BHo=i(j),f0=n(j,"LI",{});var kNe=s(f0);Z2e=n(kNe,"STRONG",{});var AAt=s(Z2e);IHo=r(AAt,"rembert"),AAt.forEach(t),NHo=r(kNe," \u2014 "),uW=n(kNe,"A",{href:!0});var LAt=s(uW);qHo=r(LAt,"RemBertForSequenceClassification"),LAt.forEach(t),jHo=r(kNe," (RemBERT model)"),kNe.forEach(t),DHo=i(j),m0=n(j,"LI",{});var SNe=s(m0);e1e=n(SNe,"STRONG",{});var yAt=s(e1e);GHo=r(yAt,"roberta"),yAt.forEach(t),OHo=r(SNe," \u2014 "),bW=n(SNe,"A",{href:!0});var xAt=s(bW);VHo=r(xAt,"RobertaForSequenceClassification"),xAt.forEach(t),XHo=r(SNe," (RoBERTa model)"),SNe.forEach(t),zHo=i(j),g0=n(j,"LI",{});var RNe=s(g0);o1e=n(RNe,"STRONG",{});var $At=s(o1e);WHo=r($At,"roformer"),$At.forEach(t),QHo=r(RNe," \u2014 "),vW=n(RNe,"A",{href:!0});var kAt=s(vW);UHo=r(kAt,"RoFormerForSequenceClassification"),kAt.forEach(t),HHo=r(RNe," (RoFormer model)"),RNe.forEach(t),JHo=i(j),h0=n(j,"LI",{});var PNe=s(h0);r1e=n(PNe,"STRONG",{});var SAt=s(r1e);YHo=r(SAt,"squeezebert"),SAt.forEach(t),KHo=r(PNe," \u2014 "),FW=n(PNe,"A",{href:!0});var RAt=s(FW);ZHo=r(RAt,"SqueezeBertForSequenceClassification"),RAt.forEach(t),eJo=r(PNe," (SqueezeBERT model)"),PNe.forEach(t),oJo=i(j),p0=n(j,"LI",{});var BNe=s(p0);t1e=n(BNe,"STRONG",{});var PAt=s(t1e);rJo=r(PAt,"tapas"),PAt.forEach(t),tJo=r(BNe," \u2014 "),TW=n(BNe,"A",{href:!0});var BAt=s(TW);aJo=r(BAt,"TapasForSequenceClassification"),BAt.forEach(t),nJo=r(BNe," (TAPAS model)"),BNe.forEach(t),sJo=i(j),_0=n(j,"LI",{});var INe=s(_0);a1e=n(INe,"STRONG",{});var IAt=s(a1e);lJo=r(IAt,"transfo-xl"),IAt.forEach(t),iJo=r(INe," \u2014 "),MW=n(INe,"A",{href:!0});var NAt=s(MW);dJo=r(NAt,"TransfoXLForSequenceClassification"),NAt.forEach(t),cJo=r(INe," (Transformer-XL model)"),INe.forEach(t),fJo=i(j),u0=n(j,"LI",{});var NNe=s(u0);n1e=n(NNe,"STRONG",{});var qAt=s(n1e);mJo=r(qAt,"xlm"),qAt.forEach(t),gJo=r(NNe," \u2014 "),EW=n(NNe,"A",{href:!0});var jAt=s(EW);hJo=r(jAt,"XLMForSequenceClassification"),jAt.forEach(t),pJo=r(NNe," (XLM model)"),NNe.forEach(t),_Jo=i(j),b0=n(j,"LI",{});var qNe=s(b0);s1e=n(qNe,"STRONG",{});var DAt=s(s1e);uJo=r(DAt,"xlm-roberta"),DAt.forEach(t),bJo=r(qNe," \u2014 "),CW=n(qNe,"A",{href:!0});var GAt=s(CW);vJo=r(GAt,"XLMRobertaForSequenceClassification"),GAt.forEach(t),FJo=r(qNe," (XLM-RoBERTa model)"),qNe.forEach(t),TJo=i(j),v0=n(j,"LI",{});var jNe=s(v0);l1e=n(jNe,"STRONG",{});var OAt=s(l1e);MJo=r(OAt,"xlm-roberta-xl"),OAt.forEach(t),EJo=r(jNe," \u2014 "),wW=n(jNe,"A",{href:!0});var VAt=s(wW);CJo=r(VAt,"XLMRobertaXLForSequenceClassification"),VAt.forEach(t),wJo=r(jNe," (XLM-RoBERTa-XL model)"),jNe.forEach(t),AJo=i(j),F0=n(j,"LI",{});var DNe=s(F0);i1e=n(DNe,"STRONG",{});var XAt=s(i1e);LJo=r(XAt,"xlnet"),XAt.forEach(t),yJo=r(DNe," \u2014 "),AW=n(DNe,"A",{href:!0});var zAt=s(AW);xJo=r(zAt,"XLNetForSequenceClassification"),zAt.forEach(t),$Jo=r(DNe," (XLNet model)"),DNe.forEach(t),kJo=i(j),T0=n(j,"LI",{});var GNe=s(T0);d1e=n(GNe,"STRONG",{});var WAt=s(d1e);SJo=r(WAt,"yoso"),WAt.forEach(t),RJo=r(GNe," \u2014 "),LW=n(GNe,"A",{href:!0});var QAt=s(LW);PJo=r(QAt,"YosoForSequenceClassification"),QAt.forEach(t),BJo=r(GNe," (YOSO model)"),GNe.forEach(t),j.forEach(t),IJo=i(ba),M0=n(ba,"P",{});var ONe=s(M0);NJo=r(ONe,"The model is set in evaluation mode by default using "),c1e=n(ONe,"CODE",{});var UAt=s(c1e);qJo=r(UAt,"model.eval()"),UAt.forEach(t),jJo=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=n(ONe,"CODE",{});var HAt=s(f1e);DJo=r(HAt,"model.train()"),HAt.forEach(t),ONe.forEach(t),GJo=i(ba),T(E0.$$.fragment,ba),ba.forEach(t),vl.forEach(t),HQe=i(f),Fd=n(f,"H2",{class:!0});var nJe=s(Fd);C0=n(nJe,"A",{id:!0,class:!0,href:!0});var JAt=s(C0);m1e=n(JAt,"SPAN",{});var YAt=s(m1e);T(f9.$$.fragment,YAt),YAt.forEach(t),JAt.forEach(t),OJo=i(nJe),g1e=n(nJe,"SPAN",{});var KAt=s(g1e);VJo=r(KAt,"AutoModelForMultipleChoice"),KAt.forEach(t),nJe.forEach(t),JQe=i(f),qo=n(f,"DIV",{class:!0});var Fl=s(qo);T(m9.$$.fragment,Fl),XJo=i(Fl),Td=n(Fl,"P",{});var Xae=s(Td);zJo=r(Xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yW=n(Xae,"A",{href:!0});var ZAt=s(yW);WJo=r(ZAt,"from_pretrained()"),ZAt.forEach(t),QJo=r(Xae," class method or the "),xW=n(Xae,"A",{href:!0});var e7t=s(xW);UJo=r(e7t,"from_config()"),e7t.forEach(t),HJo=r(Xae,` class
method.`),Xae.forEach(t),JJo=i(Fl),g9=n(Fl,"P",{});var sJe=s(g9);YJo=r(sJe,"This class cannot be instantiated directly using "),h1e=n(sJe,"CODE",{});var o7t=s(h1e);KJo=r(o7t,"__init__()"),o7t.forEach(t),ZJo=r(sJe," (throws an error)."),sJe.forEach(t),eYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var F7=s(bt);T(h9.$$.fragment,F7),oYo=i(F7),p1e=n(F7,"P",{});var r7t=s(p1e);rYo=r(r7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),r7t.forEach(t),tYo=i(F7),Md=n(F7,"P",{});var zae=s(Md);aYo=r(zae,`Note:
Loading a model from its configuration file does `),_1e=n(zae,"STRONG",{});var t7t=s(_1e);nYo=r(t7t,"not"),t7t.forEach(t),sYo=r(zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(zae,"A",{href:!0});var a7t=s($W);lYo=r(a7t,"from_pretrained()"),a7t.forEach(t),iYo=r(zae," to load the model weights."),zae.forEach(t),dYo=i(F7),T(w0.$$.fragment,F7),F7.forEach(t),cYo=i(Fl),to=n(Fl,"DIV",{class:!0});var va=s(to);T(p9.$$.fragment,va),fYo=i(va),u1e=n(va,"P",{});var n7t=s(u1e);mYo=r(n7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),n7t.forEach(t),gYo=i(va),Ha=n(va,"P",{});var T7=s(Ha);hYo=r(T7,"The model class to instantiate is selected based on the "),b1e=n(T7,"CODE",{});var s7t=s(b1e);pYo=r(s7t,"model_type"),s7t.forEach(t),_Yo=r(T7,` property of the config object (either
passed as an argument or loaded from `),v1e=n(T7,"CODE",{});var l7t=s(v1e);uYo=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),bYo=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(T7,"CODE",{});var i7t=s(F1e);vYo=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),FYo=r(T7,":"),T7.forEach(t),TYo=i(va),Z=n(va,"UL",{});var ee=s(Z);A0=n(ee,"LI",{});var VNe=s(A0);T1e=n(VNe,"STRONG",{});var d7t=s(T1e);MYo=r(d7t,"albert"),d7t.forEach(t),EYo=r(VNe," \u2014 "),kW=n(VNe,"A",{href:!0});var c7t=s(kW);CYo=r(c7t,"AlbertForMultipleChoice"),c7t.forEach(t),wYo=r(VNe," (ALBERT model)"),VNe.forEach(t),AYo=i(ee),L0=n(ee,"LI",{});var XNe=s(L0);M1e=n(XNe,"STRONG",{});var f7t=s(M1e);LYo=r(f7t,"bert"),f7t.forEach(t),yYo=r(XNe," \u2014 "),SW=n(XNe,"A",{href:!0});var m7t=s(SW);xYo=r(m7t,"BertForMultipleChoice"),m7t.forEach(t),$Yo=r(XNe," (BERT model)"),XNe.forEach(t),kYo=i(ee),y0=n(ee,"LI",{});var zNe=s(y0);E1e=n(zNe,"STRONG",{});var g7t=s(E1e);SYo=r(g7t,"big_bird"),g7t.forEach(t),RYo=r(zNe," \u2014 "),RW=n(zNe,"A",{href:!0});var h7t=s(RW);PYo=r(h7t,"BigBirdForMultipleChoice"),h7t.forEach(t),BYo=r(zNe," (BigBird model)"),zNe.forEach(t),IYo=i(ee),x0=n(ee,"LI",{});var WNe=s(x0);C1e=n(WNe,"STRONG",{});var p7t=s(C1e);NYo=r(p7t,"camembert"),p7t.forEach(t),qYo=r(WNe," \u2014 "),PW=n(WNe,"A",{href:!0});var _7t=s(PW);jYo=r(_7t,"CamembertForMultipleChoice"),_7t.forEach(t),DYo=r(WNe," (CamemBERT model)"),WNe.forEach(t),GYo=i(ee),$0=n(ee,"LI",{});var QNe=s($0);w1e=n(QNe,"STRONG",{});var u7t=s(w1e);OYo=r(u7t,"canine"),u7t.forEach(t),VYo=r(QNe," \u2014 "),BW=n(QNe,"A",{href:!0});var b7t=s(BW);XYo=r(b7t,"CanineForMultipleChoice"),b7t.forEach(t),zYo=r(QNe," (CANINE model)"),QNe.forEach(t),WYo=i(ee),k0=n(ee,"LI",{});var UNe=s(k0);A1e=n(UNe,"STRONG",{});var v7t=s(A1e);QYo=r(v7t,"convbert"),v7t.forEach(t),UYo=r(UNe," \u2014 "),IW=n(UNe,"A",{href:!0});var F7t=s(IW);HYo=r(F7t,"ConvBertForMultipleChoice"),F7t.forEach(t),JYo=r(UNe," (ConvBERT model)"),UNe.forEach(t),YYo=i(ee),S0=n(ee,"LI",{});var HNe=s(S0);L1e=n(HNe,"STRONG",{});var T7t=s(L1e);KYo=r(T7t,"data2vec-text"),T7t.forEach(t),ZYo=r(HNe," \u2014 "),NW=n(HNe,"A",{href:!0});var M7t=s(NW);eKo=r(M7t,"Data2VecTextForMultipleChoice"),M7t.forEach(t),oKo=r(HNe," (Data2VecText model)"),HNe.forEach(t),rKo=i(ee),R0=n(ee,"LI",{});var JNe=s(R0);y1e=n(JNe,"STRONG",{});var E7t=s(y1e);tKo=r(E7t,"deberta-v2"),E7t.forEach(t),aKo=r(JNe," \u2014 "),qW=n(JNe,"A",{href:!0});var C7t=s(qW);nKo=r(C7t,"DebertaV2ForMultipleChoice"),C7t.forEach(t),sKo=r(JNe," (DeBERTa-v2 model)"),JNe.forEach(t),lKo=i(ee),P0=n(ee,"LI",{});var YNe=s(P0);x1e=n(YNe,"STRONG",{});var w7t=s(x1e);iKo=r(w7t,"distilbert"),w7t.forEach(t),dKo=r(YNe," \u2014 "),jW=n(YNe,"A",{href:!0});var A7t=s(jW);cKo=r(A7t,"DistilBertForMultipleChoice"),A7t.forEach(t),fKo=r(YNe," (DistilBERT model)"),YNe.forEach(t),mKo=i(ee),B0=n(ee,"LI",{});var KNe=s(B0);$1e=n(KNe,"STRONG",{});var L7t=s($1e);gKo=r(L7t,"electra"),L7t.forEach(t),hKo=r(KNe," \u2014 "),DW=n(KNe,"A",{href:!0});var y7t=s(DW);pKo=r(y7t,"ElectraForMultipleChoice"),y7t.forEach(t),_Ko=r(KNe," (ELECTRA model)"),KNe.forEach(t),uKo=i(ee),I0=n(ee,"LI",{});var ZNe=s(I0);k1e=n(ZNe,"STRONG",{});var x7t=s(k1e);bKo=r(x7t,"flaubert"),x7t.forEach(t),vKo=r(ZNe," \u2014 "),GW=n(ZNe,"A",{href:!0});var $7t=s(GW);FKo=r($7t,"FlaubertForMultipleChoice"),$7t.forEach(t),TKo=r(ZNe," (FlauBERT model)"),ZNe.forEach(t),MKo=i(ee),N0=n(ee,"LI",{});var eqe=s(N0);S1e=n(eqe,"STRONG",{});var k7t=s(S1e);EKo=r(k7t,"fnet"),k7t.forEach(t),CKo=r(eqe," \u2014 "),OW=n(eqe,"A",{href:!0});var S7t=s(OW);wKo=r(S7t,"FNetForMultipleChoice"),S7t.forEach(t),AKo=r(eqe," (FNet model)"),eqe.forEach(t),LKo=i(ee),q0=n(ee,"LI",{});var oqe=s(q0);R1e=n(oqe,"STRONG",{});var R7t=s(R1e);yKo=r(R7t,"funnel"),R7t.forEach(t),xKo=r(oqe," \u2014 "),VW=n(oqe,"A",{href:!0});var P7t=s(VW);$Ko=r(P7t,"FunnelForMultipleChoice"),P7t.forEach(t),kKo=r(oqe," (Funnel Transformer model)"),oqe.forEach(t),SKo=i(ee),j0=n(ee,"LI",{});var rqe=s(j0);P1e=n(rqe,"STRONG",{});var B7t=s(P1e);RKo=r(B7t,"ibert"),B7t.forEach(t),PKo=r(rqe," \u2014 "),XW=n(rqe,"A",{href:!0});var I7t=s(XW);BKo=r(I7t,"IBertForMultipleChoice"),I7t.forEach(t),IKo=r(rqe," (I-BERT model)"),rqe.forEach(t),NKo=i(ee),D0=n(ee,"LI",{});var tqe=s(D0);B1e=n(tqe,"STRONG",{});var N7t=s(B1e);qKo=r(N7t,"longformer"),N7t.forEach(t),jKo=r(tqe," \u2014 "),zW=n(tqe,"A",{href:!0});var q7t=s(zW);DKo=r(q7t,"LongformerForMultipleChoice"),q7t.forEach(t),GKo=r(tqe," (Longformer model)"),tqe.forEach(t),OKo=i(ee),G0=n(ee,"LI",{});var aqe=s(G0);I1e=n(aqe,"STRONG",{});var j7t=s(I1e);VKo=r(j7t,"luke"),j7t.forEach(t),XKo=r(aqe," \u2014 "),WW=n(aqe,"A",{href:!0});var D7t=s(WW);zKo=r(D7t,"LukeForMultipleChoice"),D7t.forEach(t),WKo=r(aqe," (LUKE model)"),aqe.forEach(t),QKo=i(ee),O0=n(ee,"LI",{});var nqe=s(O0);N1e=n(nqe,"STRONG",{});var G7t=s(N1e);UKo=r(G7t,"megatron-bert"),G7t.forEach(t),HKo=r(nqe," \u2014 "),QW=n(nqe,"A",{href:!0});var O7t=s(QW);JKo=r(O7t,"MegatronBertForMultipleChoice"),O7t.forEach(t),YKo=r(nqe," (Megatron-BERT model)"),nqe.forEach(t),KKo=i(ee),V0=n(ee,"LI",{});var sqe=s(V0);q1e=n(sqe,"STRONG",{});var V7t=s(q1e);ZKo=r(V7t,"mobilebert"),V7t.forEach(t),eZo=r(sqe," \u2014 "),UW=n(sqe,"A",{href:!0});var X7t=s(UW);oZo=r(X7t,"MobileBertForMultipleChoice"),X7t.forEach(t),rZo=r(sqe," (MobileBERT model)"),sqe.forEach(t),tZo=i(ee),X0=n(ee,"LI",{});var lqe=s(X0);j1e=n(lqe,"STRONG",{});var z7t=s(j1e);aZo=r(z7t,"mpnet"),z7t.forEach(t),nZo=r(lqe," \u2014 "),HW=n(lqe,"A",{href:!0});var W7t=s(HW);sZo=r(W7t,"MPNetForMultipleChoice"),W7t.forEach(t),lZo=r(lqe," (MPNet model)"),lqe.forEach(t),iZo=i(ee),z0=n(ee,"LI",{});var iqe=s(z0);D1e=n(iqe,"STRONG",{});var Q7t=s(D1e);dZo=r(Q7t,"nezha"),Q7t.forEach(t),cZo=r(iqe," \u2014 "),JW=n(iqe,"A",{href:!0});var U7t=s(JW);fZo=r(U7t,"NezhaForMultipleChoice"),U7t.forEach(t),mZo=r(iqe," (Nezha model)"),iqe.forEach(t),gZo=i(ee),W0=n(ee,"LI",{});var dqe=s(W0);G1e=n(dqe,"STRONG",{});var H7t=s(G1e);hZo=r(H7t,"nystromformer"),H7t.forEach(t),pZo=r(dqe," \u2014 "),YW=n(dqe,"A",{href:!0});var J7t=s(YW);_Zo=r(J7t,"NystromformerForMultipleChoice"),J7t.forEach(t),uZo=r(dqe," (Nystr\xF6mformer model)"),dqe.forEach(t),bZo=i(ee),Q0=n(ee,"LI",{});var cqe=s(Q0);O1e=n(cqe,"STRONG",{});var Y7t=s(O1e);vZo=r(Y7t,"qdqbert"),Y7t.forEach(t),FZo=r(cqe," \u2014 "),KW=n(cqe,"A",{href:!0});var K7t=s(KW);TZo=r(K7t,"QDQBertForMultipleChoice"),K7t.forEach(t),MZo=r(cqe," (QDQBert model)"),cqe.forEach(t),EZo=i(ee),U0=n(ee,"LI",{});var fqe=s(U0);V1e=n(fqe,"STRONG",{});var Z7t=s(V1e);CZo=r(Z7t,"rembert"),Z7t.forEach(t),wZo=r(fqe," \u2014 "),ZW=n(fqe,"A",{href:!0});var eLt=s(ZW);AZo=r(eLt,"RemBertForMultipleChoice"),eLt.forEach(t),LZo=r(fqe," (RemBERT model)"),fqe.forEach(t),yZo=i(ee),H0=n(ee,"LI",{});var mqe=s(H0);X1e=n(mqe,"STRONG",{});var oLt=s(X1e);xZo=r(oLt,"roberta"),oLt.forEach(t),$Zo=r(mqe," \u2014 "),eQ=n(mqe,"A",{href:!0});var rLt=s(eQ);kZo=r(rLt,"RobertaForMultipleChoice"),rLt.forEach(t),SZo=r(mqe," (RoBERTa model)"),mqe.forEach(t),RZo=i(ee),J0=n(ee,"LI",{});var gqe=s(J0);z1e=n(gqe,"STRONG",{});var tLt=s(z1e);PZo=r(tLt,"roformer"),tLt.forEach(t),BZo=r(gqe," \u2014 "),oQ=n(gqe,"A",{href:!0});var aLt=s(oQ);IZo=r(aLt,"RoFormerForMultipleChoice"),aLt.forEach(t),NZo=r(gqe," (RoFormer model)"),gqe.forEach(t),qZo=i(ee),Y0=n(ee,"LI",{});var hqe=s(Y0);W1e=n(hqe,"STRONG",{});var nLt=s(W1e);jZo=r(nLt,"squeezebert"),nLt.forEach(t),DZo=r(hqe," \u2014 "),rQ=n(hqe,"A",{href:!0});var sLt=s(rQ);GZo=r(sLt,"SqueezeBertForMultipleChoice"),sLt.forEach(t),OZo=r(hqe," (SqueezeBERT model)"),hqe.forEach(t),VZo=i(ee),K0=n(ee,"LI",{});var pqe=s(K0);Q1e=n(pqe,"STRONG",{});var lLt=s(Q1e);XZo=r(lLt,"xlm"),lLt.forEach(t),zZo=r(pqe," \u2014 "),tQ=n(pqe,"A",{href:!0});var iLt=s(tQ);WZo=r(iLt,"XLMForMultipleChoice"),iLt.forEach(t),QZo=r(pqe," (XLM model)"),pqe.forEach(t),UZo=i(ee),Z0=n(ee,"LI",{});var _qe=s(Z0);U1e=n(_qe,"STRONG",{});var dLt=s(U1e);HZo=r(dLt,"xlm-roberta"),dLt.forEach(t),JZo=r(_qe," \u2014 "),aQ=n(_qe,"A",{href:!0});var cLt=s(aQ);YZo=r(cLt,"XLMRobertaForMultipleChoice"),cLt.forEach(t),KZo=r(_qe," (XLM-RoBERTa model)"),_qe.forEach(t),ZZo=i(ee),e6=n(ee,"LI",{});var uqe=s(e6);H1e=n(uqe,"STRONG",{});var fLt=s(H1e);eer=r(fLt,"xlm-roberta-xl"),fLt.forEach(t),oer=r(uqe," \u2014 "),nQ=n(uqe,"A",{href:!0});var mLt=s(nQ);rer=r(mLt,"XLMRobertaXLForMultipleChoice"),mLt.forEach(t),ter=r(uqe," (XLM-RoBERTa-XL model)"),uqe.forEach(t),aer=i(ee),o6=n(ee,"LI",{});var bqe=s(o6);J1e=n(bqe,"STRONG",{});var gLt=s(J1e);ner=r(gLt,"xlnet"),gLt.forEach(t),ser=r(bqe," \u2014 "),sQ=n(bqe,"A",{href:!0});var hLt=s(sQ);ler=r(hLt,"XLNetForMultipleChoice"),hLt.forEach(t),ier=r(bqe," (XLNet model)"),bqe.forEach(t),der=i(ee),r6=n(ee,"LI",{});var vqe=s(r6);Y1e=n(vqe,"STRONG",{});var pLt=s(Y1e);cer=r(pLt,"yoso"),pLt.forEach(t),fer=r(vqe," \u2014 "),lQ=n(vqe,"A",{href:!0});var _Lt=s(lQ);mer=r(_Lt,"YosoForMultipleChoice"),_Lt.forEach(t),ger=r(vqe," (YOSO model)"),vqe.forEach(t),ee.forEach(t),her=i(va),t6=n(va,"P",{});var Fqe=s(t6);per=r(Fqe,"The model is set in evaluation mode by default using "),K1e=n(Fqe,"CODE",{});var uLt=s(K1e);_er=r(uLt,"model.eval()"),uLt.forEach(t),uer=r(Fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=n(Fqe,"CODE",{});var bLt=s(Z1e);ber=r(bLt,"model.train()"),bLt.forEach(t),Fqe.forEach(t),ver=i(va),T(a6.$$.fragment,va),va.forEach(t),Fl.forEach(t),YQe=i(f),Ed=n(f,"H2",{class:!0});var lJe=s(Ed);n6=n(lJe,"A",{id:!0,class:!0,href:!0});var vLt=s(n6);ebe=n(vLt,"SPAN",{});var FLt=s(ebe);T(_9.$$.fragment,FLt),FLt.forEach(t),vLt.forEach(t),Fer=i(lJe),obe=n(lJe,"SPAN",{});var TLt=s(obe);Ter=r(TLt,"AutoModelForNextSentencePrediction"),TLt.forEach(t),lJe.forEach(t),KQe=i(f),jo=n(f,"DIV",{class:!0});var Tl=s(jo);T(u9.$$.fragment,Tl),Mer=i(Tl),Cd=n(Tl,"P",{});var Wae=s(Cd);Eer=r(Wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iQ=n(Wae,"A",{href:!0});var MLt=s(iQ);Cer=r(MLt,"from_pretrained()"),MLt.forEach(t),wer=r(Wae," class method or the "),dQ=n(Wae,"A",{href:!0});var ELt=s(dQ);Aer=r(ELt,"from_config()"),ELt.forEach(t),Ler=r(Wae,` class
method.`),Wae.forEach(t),yer=i(Tl),b9=n(Tl,"P",{});var iJe=s(b9);xer=r(iJe,"This class cannot be instantiated directly using "),rbe=n(iJe,"CODE",{});var CLt=s(rbe);$er=r(CLt,"__init__()"),CLt.forEach(t),ker=r(iJe," (throws an error)."),iJe.forEach(t),Ser=i(Tl),vt=n(Tl,"DIV",{class:!0});var M7=s(vt);T(v9.$$.fragment,M7),Rer=i(M7),tbe=n(M7,"P",{});var wLt=s(tbe);Per=r(wLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wLt.forEach(t),Ber=i(M7),wd=n(M7,"P",{});var Qae=s(wd);Ier=r(Qae,`Note:
Loading a model from its configuration file does `),abe=n(Qae,"STRONG",{});var ALt=s(abe);Ner=r(ALt,"not"),ALt.forEach(t),qer=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(Qae,"A",{href:!0});var LLt=s(cQ);jer=r(LLt,"from_pretrained()"),LLt.forEach(t),Der=r(Qae," to load the model weights."),Qae.forEach(t),Ger=i(M7),T(s6.$$.fragment,M7),M7.forEach(t),Oer=i(Tl),ao=n(Tl,"DIV",{class:!0});var Fa=s(ao);T(F9.$$.fragment,Fa),Ver=i(Fa),nbe=n(Fa,"P",{});var yLt=s(nbe);Xer=r(yLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yLt.forEach(t),zer=i(Fa),Ja=n(Fa,"P",{});var E7=s(Ja);Wer=r(E7,"The model class to instantiate is selected based on the "),sbe=n(E7,"CODE",{});var xLt=s(sbe);Qer=r(xLt,"model_type"),xLt.forEach(t),Uer=r(E7,` property of the config object (either
passed as an argument or loaded from `),lbe=n(E7,"CODE",{});var $Lt=s(lbe);Her=r($Lt,"pretrained_model_name_or_path"),$Lt.forEach(t),Jer=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(E7,"CODE",{});var kLt=s(ibe);Yer=r(kLt,"pretrained_model_name_or_path"),kLt.forEach(t),Ker=r(E7,":"),E7.forEach(t),Zer=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);l6=n(Ta,"LI",{});var Tqe=s(l6);dbe=n(Tqe,"STRONG",{});var SLt=s(dbe);eor=r(SLt,"bert"),SLt.forEach(t),oor=r(Tqe," \u2014 "),fQ=n(Tqe,"A",{href:!0});var RLt=s(fQ);ror=r(RLt,"BertForNextSentencePrediction"),RLt.forEach(t),tor=r(Tqe," (BERT model)"),Tqe.forEach(t),aor=i(Ta),i6=n(Ta,"LI",{});var Mqe=s(i6);cbe=n(Mqe,"STRONG",{});var PLt=s(cbe);nor=r(PLt,"fnet"),PLt.forEach(t),sor=r(Mqe," \u2014 "),mQ=n(Mqe,"A",{href:!0});var BLt=s(mQ);lor=r(BLt,"FNetForNextSentencePrediction"),BLt.forEach(t),ior=r(Mqe," (FNet model)"),Mqe.forEach(t),dor=i(Ta),d6=n(Ta,"LI",{});var Eqe=s(d6);fbe=n(Eqe,"STRONG",{});var ILt=s(fbe);cor=r(ILt,"megatron-bert"),ILt.forEach(t),mor=r(Eqe," \u2014 "),gQ=n(Eqe,"A",{href:!0});var NLt=s(gQ);gor=r(NLt,"MegatronBertForNextSentencePrediction"),NLt.forEach(t),hor=r(Eqe," (Megatron-BERT model)"),Eqe.forEach(t),por=i(Ta),c6=n(Ta,"LI",{});var Cqe=s(c6);mbe=n(Cqe,"STRONG",{});var qLt=s(mbe);_or=r(qLt,"mobilebert"),qLt.forEach(t),uor=r(Cqe," \u2014 "),hQ=n(Cqe,"A",{href:!0});var jLt=s(hQ);bor=r(jLt,"MobileBertForNextSentencePrediction"),jLt.forEach(t),vor=r(Cqe," (MobileBERT model)"),Cqe.forEach(t),For=i(Ta),f6=n(Ta,"LI",{});var wqe=s(f6);gbe=n(wqe,"STRONG",{});var DLt=s(gbe);Tor=r(DLt,"nezha"),DLt.forEach(t),Mor=r(wqe," \u2014 "),pQ=n(wqe,"A",{href:!0});var GLt=s(pQ);Eor=r(GLt,"NezhaForNextSentencePrediction"),GLt.forEach(t),Cor=r(wqe," (Nezha model)"),wqe.forEach(t),wor=i(Ta),m6=n(Ta,"LI",{});var Aqe=s(m6);hbe=n(Aqe,"STRONG",{});var OLt=s(hbe);Aor=r(OLt,"qdqbert"),OLt.forEach(t),Lor=r(Aqe," \u2014 "),_Q=n(Aqe,"A",{href:!0});var VLt=s(_Q);yor=r(VLt,"QDQBertForNextSentencePrediction"),VLt.forEach(t),xor=r(Aqe," (QDQBert model)"),Aqe.forEach(t),Ta.forEach(t),$or=i(Fa),g6=n(Fa,"P",{});var Lqe=s(g6);kor=r(Lqe,"The model is set in evaluation mode by default using "),pbe=n(Lqe,"CODE",{});var XLt=s(pbe);Sor=r(XLt,"model.eval()"),XLt.forEach(t),Ror=r(Lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=n(Lqe,"CODE",{});var zLt=s(_be);Por=r(zLt,"model.train()"),zLt.forEach(t),Lqe.forEach(t),Bor=i(Fa),T(h6.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),ZQe=i(f),Ad=n(f,"H2",{class:!0});var dJe=s(Ad);p6=n(dJe,"A",{id:!0,class:!0,href:!0});var WLt=s(p6);ube=n(WLt,"SPAN",{});var QLt=s(ube);T(T9.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),Ior=i(dJe),bbe=n(dJe,"SPAN",{});var ULt=s(bbe);Nor=r(ULt,"AutoModelForTokenClassification"),ULt.forEach(t),dJe.forEach(t),eUe=i(f),Go=n(f,"DIV",{class:!0});var Ml=s(Go);T(M9.$$.fragment,Ml),qor=i(Ml),Ld=n(Ml,"P",{});var Uae=s(Ld);jor=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uQ=n(Uae,"A",{href:!0});var HLt=s(uQ);Dor=r(HLt,"from_pretrained()"),HLt.forEach(t),Gor=r(Uae," class method or the "),bQ=n(Uae,"A",{href:!0});var JLt=s(bQ);Oor=r(JLt,"from_config()"),JLt.forEach(t),Vor=r(Uae,` class
method.`),Uae.forEach(t),Xor=i(Ml),E9=n(Ml,"P",{});var cJe=s(E9);zor=r(cJe,"This class cannot be instantiated directly using "),vbe=n(cJe,"CODE",{});var YLt=s(vbe);Wor=r(YLt,"__init__()"),YLt.forEach(t),Qor=r(cJe," (throws an error)."),cJe.forEach(t),Uor=i(Ml),Ft=n(Ml,"DIV",{class:!0});var C7=s(Ft);T(C9.$$.fragment,C7),Hor=i(C7),Fbe=n(C7,"P",{});var KLt=s(Fbe);Jor=r(KLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KLt.forEach(t),Yor=i(C7),yd=n(C7,"P",{});var Hae=s(yd);Kor=r(Hae,`Note:
Loading a model from its configuration file does `),Tbe=n(Hae,"STRONG",{});var ZLt=s(Tbe);Zor=r(ZLt,"not"),ZLt.forEach(t),err=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(Hae,"A",{href:!0});var eyt=s(vQ);orr=r(eyt,"from_pretrained()"),eyt.forEach(t),rrr=r(Hae," to load the model weights."),Hae.forEach(t),trr=i(C7),T(_6.$$.fragment,C7),C7.forEach(t),arr=i(Ml),no=n(Ml,"DIV",{class:!0});var Ma=s(no);T(w9.$$.fragment,Ma),nrr=i(Ma),Mbe=n(Ma,"P",{});var oyt=s(Mbe);srr=r(oyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oyt.forEach(t),lrr=i(Ma),Ya=n(Ma,"P",{});var w7=s(Ya);irr=r(w7,"The model class to instantiate is selected based on the "),Ebe=n(w7,"CODE",{});var ryt=s(Ebe);drr=r(ryt,"model_type"),ryt.forEach(t),crr=r(w7,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(w7,"CODE",{});var tyt=s(Cbe);frr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),mrr=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(w7,"CODE",{});var ayt=s(wbe);grr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),hrr=r(w7,":"),w7.forEach(t),prr=i(Ma),H=n(Ma,"UL",{});var K=s(H);u6=n(K,"LI",{});var yqe=s(u6);Abe=n(yqe,"STRONG",{});var nyt=s(Abe);_rr=r(nyt,"albert"),nyt.forEach(t),urr=r(yqe," \u2014 "),FQ=n(yqe,"A",{href:!0});var syt=s(FQ);brr=r(syt,"AlbertForTokenClassification"),syt.forEach(t),vrr=r(yqe," (ALBERT model)"),yqe.forEach(t),Frr=i(K),b6=n(K,"LI",{});var xqe=s(b6);Lbe=n(xqe,"STRONG",{});var lyt=s(Lbe);Trr=r(lyt,"bert"),lyt.forEach(t),Mrr=r(xqe," \u2014 "),TQ=n(xqe,"A",{href:!0});var iyt=s(TQ);Err=r(iyt,"BertForTokenClassification"),iyt.forEach(t),Crr=r(xqe," (BERT model)"),xqe.forEach(t),wrr=i(K),v6=n(K,"LI",{});var $qe=s(v6);ybe=n($qe,"STRONG",{});var dyt=s(ybe);Arr=r(dyt,"big_bird"),dyt.forEach(t),Lrr=r($qe," \u2014 "),MQ=n($qe,"A",{href:!0});var cyt=s(MQ);yrr=r(cyt,"BigBirdForTokenClassification"),cyt.forEach(t),xrr=r($qe," (BigBird model)"),$qe.forEach(t),$rr=i(K),F6=n(K,"LI",{});var kqe=s(F6);xbe=n(kqe,"STRONG",{});var fyt=s(xbe);krr=r(fyt,"bloom"),fyt.forEach(t),Srr=r(kqe," \u2014 "),EQ=n(kqe,"A",{href:!0});var myt=s(EQ);Rrr=r(myt,"BloomForTokenClassification"),myt.forEach(t),Prr=r(kqe," (BLOOM model)"),kqe.forEach(t),Brr=i(K),T6=n(K,"LI",{});var Sqe=s(T6);$be=n(Sqe,"STRONG",{});var gyt=s($be);Irr=r(gyt,"camembert"),gyt.forEach(t),Nrr=r(Sqe," \u2014 "),CQ=n(Sqe,"A",{href:!0});var hyt=s(CQ);qrr=r(hyt,"CamembertForTokenClassification"),hyt.forEach(t),jrr=r(Sqe," (CamemBERT model)"),Sqe.forEach(t),Drr=i(K),M6=n(K,"LI",{});var Rqe=s(M6);kbe=n(Rqe,"STRONG",{});var pyt=s(kbe);Grr=r(pyt,"canine"),pyt.forEach(t),Orr=r(Rqe," \u2014 "),wQ=n(Rqe,"A",{href:!0});var _yt=s(wQ);Vrr=r(_yt,"CanineForTokenClassification"),_yt.forEach(t),Xrr=r(Rqe," (CANINE model)"),Rqe.forEach(t),zrr=i(K),E6=n(K,"LI",{});var Pqe=s(E6);Sbe=n(Pqe,"STRONG",{});var uyt=s(Sbe);Wrr=r(uyt,"convbert"),uyt.forEach(t),Qrr=r(Pqe," \u2014 "),AQ=n(Pqe,"A",{href:!0});var byt=s(AQ);Urr=r(byt,"ConvBertForTokenClassification"),byt.forEach(t),Hrr=r(Pqe," (ConvBERT model)"),Pqe.forEach(t),Jrr=i(K),C6=n(K,"LI",{});var Bqe=s(C6);Rbe=n(Bqe,"STRONG",{});var vyt=s(Rbe);Yrr=r(vyt,"data2vec-text"),vyt.forEach(t),Krr=r(Bqe," \u2014 "),LQ=n(Bqe,"A",{href:!0});var Fyt=s(LQ);Zrr=r(Fyt,"Data2VecTextForTokenClassification"),Fyt.forEach(t),etr=r(Bqe," (Data2VecText model)"),Bqe.forEach(t),otr=i(K),w6=n(K,"LI",{});var Iqe=s(w6);Pbe=n(Iqe,"STRONG",{});var Tyt=s(Pbe);rtr=r(Tyt,"deberta"),Tyt.forEach(t),ttr=r(Iqe," \u2014 "),yQ=n(Iqe,"A",{href:!0});var Myt=s(yQ);atr=r(Myt,"DebertaForTokenClassification"),Myt.forEach(t),ntr=r(Iqe," (DeBERTa model)"),Iqe.forEach(t),str=i(K),A6=n(K,"LI",{});var Nqe=s(A6);Bbe=n(Nqe,"STRONG",{});var Eyt=s(Bbe);ltr=r(Eyt,"deberta-v2"),Eyt.forEach(t),itr=r(Nqe," \u2014 "),xQ=n(Nqe,"A",{href:!0});var Cyt=s(xQ);dtr=r(Cyt,"DebertaV2ForTokenClassification"),Cyt.forEach(t),ctr=r(Nqe," (DeBERTa-v2 model)"),Nqe.forEach(t),ftr=i(K),L6=n(K,"LI",{});var qqe=s(L6);Ibe=n(qqe,"STRONG",{});var wyt=s(Ibe);mtr=r(wyt,"distilbert"),wyt.forEach(t),gtr=r(qqe," \u2014 "),$Q=n(qqe,"A",{href:!0});var Ayt=s($Q);htr=r(Ayt,"DistilBertForTokenClassification"),Ayt.forEach(t),ptr=r(qqe," (DistilBERT model)"),qqe.forEach(t),_tr=i(K),y6=n(K,"LI",{});var jqe=s(y6);Nbe=n(jqe,"STRONG",{});var Lyt=s(Nbe);utr=r(Lyt,"electra"),Lyt.forEach(t),btr=r(jqe," \u2014 "),kQ=n(jqe,"A",{href:!0});var yyt=s(kQ);vtr=r(yyt,"ElectraForTokenClassification"),yyt.forEach(t),Ftr=r(jqe," (ELECTRA model)"),jqe.forEach(t),Ttr=i(K),x6=n(K,"LI",{});var Dqe=s(x6);qbe=n(Dqe,"STRONG",{});var xyt=s(qbe);Mtr=r(xyt,"flaubert"),xyt.forEach(t),Etr=r(Dqe," \u2014 "),SQ=n(Dqe,"A",{href:!0});var $yt=s(SQ);Ctr=r($yt,"FlaubertForTokenClassification"),$yt.forEach(t),wtr=r(Dqe," (FlauBERT model)"),Dqe.forEach(t),Atr=i(K),$6=n(K,"LI",{});var Gqe=s($6);jbe=n(Gqe,"STRONG",{});var kyt=s(jbe);Ltr=r(kyt,"fnet"),kyt.forEach(t),ytr=r(Gqe," \u2014 "),RQ=n(Gqe,"A",{href:!0});var Syt=s(RQ);xtr=r(Syt,"FNetForTokenClassification"),Syt.forEach(t),$tr=r(Gqe," (FNet model)"),Gqe.forEach(t),ktr=i(K),k6=n(K,"LI",{});var Oqe=s(k6);Dbe=n(Oqe,"STRONG",{});var Ryt=s(Dbe);Str=r(Ryt,"funnel"),Ryt.forEach(t),Rtr=r(Oqe," \u2014 "),PQ=n(Oqe,"A",{href:!0});var Pyt=s(PQ);Ptr=r(Pyt,"FunnelForTokenClassification"),Pyt.forEach(t),Btr=r(Oqe," (Funnel Transformer model)"),Oqe.forEach(t),Itr=i(K),S6=n(K,"LI",{});var Vqe=s(S6);Gbe=n(Vqe,"STRONG",{});var Byt=s(Gbe);Ntr=r(Byt,"gpt2"),Byt.forEach(t),qtr=r(Vqe," \u2014 "),BQ=n(Vqe,"A",{href:!0});var Iyt=s(BQ);jtr=r(Iyt,"GPT2ForTokenClassification"),Iyt.forEach(t),Dtr=r(Vqe," (OpenAI GPT-2 model)"),Vqe.forEach(t),Gtr=i(K),R6=n(K,"LI",{});var Xqe=s(R6);Obe=n(Xqe,"STRONG",{});var Nyt=s(Obe);Otr=r(Nyt,"ibert"),Nyt.forEach(t),Vtr=r(Xqe," \u2014 "),IQ=n(Xqe,"A",{href:!0});var qyt=s(IQ);Xtr=r(qyt,"IBertForTokenClassification"),qyt.forEach(t),ztr=r(Xqe," (I-BERT model)"),Xqe.forEach(t),Wtr=i(K),P6=n(K,"LI",{});var zqe=s(P6);Vbe=n(zqe,"STRONG",{});var jyt=s(Vbe);Qtr=r(jyt,"layoutlm"),jyt.forEach(t),Utr=r(zqe," \u2014 "),NQ=n(zqe,"A",{href:!0});var Dyt=s(NQ);Htr=r(Dyt,"LayoutLMForTokenClassification"),Dyt.forEach(t),Jtr=r(zqe," (LayoutLM model)"),zqe.forEach(t),Ytr=i(K),B6=n(K,"LI",{});var Wqe=s(B6);Xbe=n(Wqe,"STRONG",{});var Gyt=s(Xbe);Ktr=r(Gyt,"layoutlmv2"),Gyt.forEach(t),Ztr=r(Wqe," \u2014 "),qQ=n(Wqe,"A",{href:!0});var Oyt=s(qQ);ear=r(Oyt,"LayoutLMv2ForTokenClassification"),Oyt.forEach(t),oar=r(Wqe," (LayoutLMv2 model)"),Wqe.forEach(t),rar=i(K),I6=n(K,"LI",{});var Qqe=s(I6);zbe=n(Qqe,"STRONG",{});var Vyt=s(zbe);tar=r(Vyt,"layoutlmv3"),Vyt.forEach(t),aar=r(Qqe," \u2014 "),jQ=n(Qqe,"A",{href:!0});var Xyt=s(jQ);nar=r(Xyt,"LayoutLMv3ForTokenClassification"),Xyt.forEach(t),sar=r(Qqe," (LayoutLMv3 model)"),Qqe.forEach(t),lar=i(K),N6=n(K,"LI",{});var Uqe=s(N6);Wbe=n(Uqe,"STRONG",{});var zyt=s(Wbe);iar=r(zyt,"longformer"),zyt.forEach(t),dar=r(Uqe," \u2014 "),DQ=n(Uqe,"A",{href:!0});var Wyt=s(DQ);car=r(Wyt,"LongformerForTokenClassification"),Wyt.forEach(t),far=r(Uqe," (Longformer model)"),Uqe.forEach(t),mar=i(K),q6=n(K,"LI",{});var Hqe=s(q6);Qbe=n(Hqe,"STRONG",{});var Qyt=s(Qbe);gar=r(Qyt,"luke"),Qyt.forEach(t),har=r(Hqe," \u2014 "),GQ=n(Hqe,"A",{href:!0});var Uyt=s(GQ);par=r(Uyt,"LukeForTokenClassification"),Uyt.forEach(t),_ar=r(Hqe," (LUKE model)"),Hqe.forEach(t),uar=i(K),j6=n(K,"LI",{});var Jqe=s(j6);Ube=n(Jqe,"STRONG",{});var Hyt=s(Ube);bar=r(Hyt,"megatron-bert"),Hyt.forEach(t),Far=r(Jqe," \u2014 "),OQ=n(Jqe,"A",{href:!0});var Jyt=s(OQ);Tar=r(Jyt,"MegatronBertForTokenClassification"),Jyt.forEach(t),Mar=r(Jqe," (Megatron-BERT model)"),Jqe.forEach(t),Ear=i(K),D6=n(K,"LI",{});var Yqe=s(D6);Hbe=n(Yqe,"STRONG",{});var Yyt=s(Hbe);Car=r(Yyt,"mobilebert"),Yyt.forEach(t),war=r(Yqe," \u2014 "),VQ=n(Yqe,"A",{href:!0});var Kyt=s(VQ);Aar=r(Kyt,"MobileBertForTokenClassification"),Kyt.forEach(t),Lar=r(Yqe," (MobileBERT model)"),Yqe.forEach(t),yar=i(K),G6=n(K,"LI",{});var Kqe=s(G6);Jbe=n(Kqe,"STRONG",{});var Zyt=s(Jbe);xar=r(Zyt,"mpnet"),Zyt.forEach(t),$ar=r(Kqe," \u2014 "),XQ=n(Kqe,"A",{href:!0});var e9t=s(XQ);kar=r(e9t,"MPNetForTokenClassification"),e9t.forEach(t),Sar=r(Kqe," (MPNet model)"),Kqe.forEach(t),Rar=i(K),O6=n(K,"LI",{});var Zqe=s(O6);Ybe=n(Zqe,"STRONG",{});var o9t=s(Ybe);Par=r(o9t,"nezha"),o9t.forEach(t),Bar=r(Zqe," \u2014 "),zQ=n(Zqe,"A",{href:!0});var r9t=s(zQ);Iar=r(r9t,"NezhaForTokenClassification"),r9t.forEach(t),Nar=r(Zqe," (Nezha model)"),Zqe.forEach(t),qar=i(K),V6=n(K,"LI",{});var eje=s(V6);Kbe=n(eje,"STRONG",{});var t9t=s(Kbe);jar=r(t9t,"nystromformer"),t9t.forEach(t),Dar=r(eje," \u2014 "),WQ=n(eje,"A",{href:!0});var a9t=s(WQ);Gar=r(a9t,"NystromformerForTokenClassification"),a9t.forEach(t),Oar=r(eje," (Nystr\xF6mformer model)"),eje.forEach(t),Var=i(K),X6=n(K,"LI",{});var oje=s(X6);Zbe=n(oje,"STRONG",{});var n9t=s(Zbe);Xar=r(n9t,"qdqbert"),n9t.forEach(t),zar=r(oje," \u2014 "),QQ=n(oje,"A",{href:!0});var s9t=s(QQ);War=r(s9t,"QDQBertForTokenClassification"),s9t.forEach(t),Qar=r(oje," (QDQBert model)"),oje.forEach(t),Uar=i(K),z6=n(K,"LI",{});var rje=s(z6);eve=n(rje,"STRONG",{});var l9t=s(eve);Har=r(l9t,"rembert"),l9t.forEach(t),Jar=r(rje," \u2014 "),UQ=n(rje,"A",{href:!0});var i9t=s(UQ);Yar=r(i9t,"RemBertForTokenClassification"),i9t.forEach(t),Kar=r(rje," (RemBERT model)"),rje.forEach(t),Zar=i(K),W6=n(K,"LI",{});var tje=s(W6);ove=n(tje,"STRONG",{});var d9t=s(ove);enr=r(d9t,"roberta"),d9t.forEach(t),onr=r(tje," \u2014 "),HQ=n(tje,"A",{href:!0});var c9t=s(HQ);rnr=r(c9t,"RobertaForTokenClassification"),c9t.forEach(t),tnr=r(tje," (RoBERTa model)"),tje.forEach(t),anr=i(K),Q6=n(K,"LI",{});var aje=s(Q6);rve=n(aje,"STRONG",{});var f9t=s(rve);nnr=r(f9t,"roformer"),f9t.forEach(t),snr=r(aje," \u2014 "),JQ=n(aje,"A",{href:!0});var m9t=s(JQ);lnr=r(m9t,"RoFormerForTokenClassification"),m9t.forEach(t),inr=r(aje," (RoFormer model)"),aje.forEach(t),dnr=i(K),U6=n(K,"LI",{});var nje=s(U6);tve=n(nje,"STRONG",{});var g9t=s(tve);cnr=r(g9t,"squeezebert"),g9t.forEach(t),fnr=r(nje," \u2014 "),YQ=n(nje,"A",{href:!0});var h9t=s(YQ);mnr=r(h9t,"SqueezeBertForTokenClassification"),h9t.forEach(t),gnr=r(nje," (SqueezeBERT model)"),nje.forEach(t),hnr=i(K),H6=n(K,"LI",{});var sje=s(H6);ave=n(sje,"STRONG",{});var p9t=s(ave);pnr=r(p9t,"xlm"),p9t.forEach(t),_nr=r(sje," \u2014 "),KQ=n(sje,"A",{href:!0});var _9t=s(KQ);unr=r(_9t,"XLMForTokenClassification"),_9t.forEach(t),bnr=r(sje," (XLM model)"),sje.forEach(t),vnr=i(K),J6=n(K,"LI",{});var lje=s(J6);nve=n(lje,"STRONG",{});var u9t=s(nve);Fnr=r(u9t,"xlm-roberta"),u9t.forEach(t),Tnr=r(lje," \u2014 "),ZQ=n(lje,"A",{href:!0});var b9t=s(ZQ);Mnr=r(b9t,"XLMRobertaForTokenClassification"),b9t.forEach(t),Enr=r(lje," (XLM-RoBERTa model)"),lje.forEach(t),Cnr=i(K),Y6=n(K,"LI",{});var ije=s(Y6);sve=n(ije,"STRONG",{});var v9t=s(sve);wnr=r(v9t,"xlm-roberta-xl"),v9t.forEach(t),Anr=r(ije," \u2014 "),eU=n(ije,"A",{href:!0});var F9t=s(eU);Lnr=r(F9t,"XLMRobertaXLForTokenClassification"),F9t.forEach(t),ynr=r(ije," (XLM-RoBERTa-XL model)"),ije.forEach(t),xnr=i(K),K6=n(K,"LI",{});var dje=s(K6);lve=n(dje,"STRONG",{});var T9t=s(lve);$nr=r(T9t,"xlnet"),T9t.forEach(t),knr=r(dje," \u2014 "),oU=n(dje,"A",{href:!0});var M9t=s(oU);Snr=r(M9t,"XLNetForTokenClassification"),M9t.forEach(t),Rnr=r(dje," (XLNet model)"),dje.forEach(t),Pnr=i(K),Z6=n(K,"LI",{});var cje=s(Z6);ive=n(cje,"STRONG",{});var E9t=s(ive);Bnr=r(E9t,"yoso"),E9t.forEach(t),Inr=r(cje," \u2014 "),rU=n(cje,"A",{href:!0});var C9t=s(rU);Nnr=r(C9t,"YosoForTokenClassification"),C9t.forEach(t),qnr=r(cje," (YOSO model)"),cje.forEach(t),K.forEach(t),jnr=i(Ma),eF=n(Ma,"P",{});var fje=s(eF);Dnr=r(fje,"The model is set in evaluation mode by default using "),dve=n(fje,"CODE",{});var w9t=s(dve);Gnr=r(w9t,"model.eval()"),w9t.forEach(t),Onr=r(fje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cve=n(fje,"CODE",{});var A9t=s(cve);Vnr=r(A9t,"model.train()"),A9t.forEach(t),fje.forEach(t),Xnr=i(Ma),T(oF.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),oUe=i(f),xd=n(f,"H2",{class:!0});var fJe=s(xd);rF=n(fJe,"A",{id:!0,class:!0,href:!0});var L9t=s(rF);fve=n(L9t,"SPAN",{});var y9t=s(fve);T(A9.$$.fragment,y9t),y9t.forEach(t),L9t.forEach(t),znr=i(fJe),mve=n(fJe,"SPAN",{});var x9t=s(mve);Wnr=r(x9t,"AutoModelForQuestionAnswering"),x9t.forEach(t),fJe.forEach(t),rUe=i(f),Oo=n(f,"DIV",{class:!0});var El=s(Oo);T(L9.$$.fragment,El),Qnr=i(El),$d=n(El,"P",{});var Jae=s($d);Unr=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tU=n(Jae,"A",{href:!0});var $9t=s(tU);Hnr=r($9t,"from_pretrained()"),$9t.forEach(t),Jnr=r(Jae," class method or the "),aU=n(Jae,"A",{href:!0});var k9t=s(aU);Ynr=r(k9t,"from_config()"),k9t.forEach(t),Knr=r(Jae,` class
method.`),Jae.forEach(t),Znr=i(El),y9=n(El,"P",{});var mJe=s(y9);esr=r(mJe,"This class cannot be instantiated directly using "),gve=n(mJe,"CODE",{});var S9t=s(gve);osr=r(S9t,"__init__()"),S9t.forEach(t),rsr=r(mJe," (throws an error)."),mJe.forEach(t),tsr=i(El),Tt=n(El,"DIV",{class:!0});var A7=s(Tt);T(x9.$$.fragment,A7),asr=i(A7),hve=n(A7,"P",{});var R9t=s(hve);nsr=r(R9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R9t.forEach(t),ssr=i(A7),kd=n(A7,"P",{});var Yae=s(kd);lsr=r(Yae,`Note:
Loading a model from its configuration file does `),pve=n(Yae,"STRONG",{});var P9t=s(pve);isr=r(P9t,"not"),P9t.forEach(t),dsr=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(Yae,"A",{href:!0});var B9t=s(nU);csr=r(B9t,"from_pretrained()"),B9t.forEach(t),fsr=r(Yae," to load the model weights."),Yae.forEach(t),msr=i(A7),T(tF.$$.fragment,A7),A7.forEach(t),gsr=i(El),so=n(El,"DIV",{class:!0});var Ea=s(so);T($9.$$.fragment,Ea),hsr=i(Ea),_ve=n(Ea,"P",{});var I9t=s(_ve);psr=r(I9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I9t.forEach(t),_sr=i(Ea),Ka=n(Ea,"P",{});var L7=s(Ka);usr=r(L7,"The model class to instantiate is selected based on the "),uve=n(L7,"CODE",{});var N9t=s(uve);bsr=r(N9t,"model_type"),N9t.forEach(t),vsr=r(L7,` property of the config object (either
passed as an argument or loaded from `),bve=n(L7,"CODE",{});var q9t=s(bve);Fsr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),Tsr=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=n(L7,"CODE",{});var j9t=s(vve);Msr=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),Esr=r(L7,":"),L7.forEach(t),Csr=i(Ea),V=n(Ea,"UL",{});var X=s(V);aF=n(X,"LI",{});var mje=s(aF);Fve=n(mje,"STRONG",{});var D9t=s(Fve);wsr=r(D9t,"albert"),D9t.forEach(t),Asr=r(mje," \u2014 "),sU=n(mje,"A",{href:!0});var G9t=s(sU);Lsr=r(G9t,"AlbertForQuestionAnswering"),G9t.forEach(t),ysr=r(mje," (ALBERT model)"),mje.forEach(t),xsr=i(X),nF=n(X,"LI",{});var gje=s(nF);Tve=n(gje,"STRONG",{});var O9t=s(Tve);$sr=r(O9t,"bart"),O9t.forEach(t),ksr=r(gje," \u2014 "),lU=n(gje,"A",{href:!0});var V9t=s(lU);Ssr=r(V9t,"BartForQuestionAnswering"),V9t.forEach(t),Rsr=r(gje," (BART model)"),gje.forEach(t),Psr=i(X),sF=n(X,"LI",{});var hje=s(sF);Mve=n(hje,"STRONG",{});var X9t=s(Mve);Bsr=r(X9t,"bert"),X9t.forEach(t),Isr=r(hje," \u2014 "),iU=n(hje,"A",{href:!0});var z9t=s(iU);Nsr=r(z9t,"BertForQuestionAnswering"),z9t.forEach(t),qsr=r(hje," (BERT model)"),hje.forEach(t),jsr=i(X),lF=n(X,"LI",{});var pje=s(lF);Eve=n(pje,"STRONG",{});var W9t=s(Eve);Dsr=r(W9t,"big_bird"),W9t.forEach(t),Gsr=r(pje," \u2014 "),dU=n(pje,"A",{href:!0});var Q9t=s(dU);Osr=r(Q9t,"BigBirdForQuestionAnswering"),Q9t.forEach(t),Vsr=r(pje," (BigBird model)"),pje.forEach(t),Xsr=i(X),iF=n(X,"LI",{});var _je=s(iF);Cve=n(_je,"STRONG",{});var U9t=s(Cve);zsr=r(U9t,"bigbird_pegasus"),U9t.forEach(t),Wsr=r(_je," \u2014 "),cU=n(_je,"A",{href:!0});var H9t=s(cU);Qsr=r(H9t,"BigBirdPegasusForQuestionAnswering"),H9t.forEach(t),Usr=r(_je," (BigBird-Pegasus model)"),_je.forEach(t),Hsr=i(X),dF=n(X,"LI",{});var uje=s(dF);wve=n(uje,"STRONG",{});var J9t=s(wve);Jsr=r(J9t,"camembert"),J9t.forEach(t),Ysr=r(uje," \u2014 "),fU=n(uje,"A",{href:!0});var Y9t=s(fU);Ksr=r(Y9t,"CamembertForQuestionAnswering"),Y9t.forEach(t),Zsr=r(uje," (CamemBERT model)"),uje.forEach(t),elr=i(X),cF=n(X,"LI",{});var bje=s(cF);Ave=n(bje,"STRONG",{});var K9t=s(Ave);olr=r(K9t,"canine"),K9t.forEach(t),rlr=r(bje," \u2014 "),mU=n(bje,"A",{href:!0});var Z9t=s(mU);tlr=r(Z9t,"CanineForQuestionAnswering"),Z9t.forEach(t),alr=r(bje," (CANINE model)"),bje.forEach(t),nlr=i(X),fF=n(X,"LI",{});var vje=s(fF);Lve=n(vje,"STRONG",{});var ext=s(Lve);slr=r(ext,"convbert"),ext.forEach(t),llr=r(vje," \u2014 "),gU=n(vje,"A",{href:!0});var oxt=s(gU);ilr=r(oxt,"ConvBertForQuestionAnswering"),oxt.forEach(t),dlr=r(vje," (ConvBERT model)"),vje.forEach(t),clr=i(X),mF=n(X,"LI",{});var Fje=s(mF);yve=n(Fje,"STRONG",{});var rxt=s(yve);flr=r(rxt,"data2vec-text"),rxt.forEach(t),mlr=r(Fje," \u2014 "),hU=n(Fje,"A",{href:!0});var txt=s(hU);glr=r(txt,"Data2VecTextForQuestionAnswering"),txt.forEach(t),hlr=r(Fje," (Data2VecText model)"),Fje.forEach(t),plr=i(X),gF=n(X,"LI",{});var Tje=s(gF);xve=n(Tje,"STRONG",{});var axt=s(xve);_lr=r(axt,"deberta"),axt.forEach(t),ulr=r(Tje," \u2014 "),pU=n(Tje,"A",{href:!0});var nxt=s(pU);blr=r(nxt,"DebertaForQuestionAnswering"),nxt.forEach(t),vlr=r(Tje," (DeBERTa model)"),Tje.forEach(t),Flr=i(X),hF=n(X,"LI",{});var Mje=s(hF);$ve=n(Mje,"STRONG",{});var sxt=s($ve);Tlr=r(sxt,"deberta-v2"),sxt.forEach(t),Mlr=r(Mje," \u2014 "),_U=n(Mje,"A",{href:!0});var lxt=s(_U);Elr=r(lxt,"DebertaV2ForQuestionAnswering"),lxt.forEach(t),Clr=r(Mje," (DeBERTa-v2 model)"),Mje.forEach(t),wlr=i(X),pF=n(X,"LI",{});var Eje=s(pF);kve=n(Eje,"STRONG",{});var ixt=s(kve);Alr=r(ixt,"distilbert"),ixt.forEach(t),Llr=r(Eje," \u2014 "),uU=n(Eje,"A",{href:!0});var dxt=s(uU);ylr=r(dxt,"DistilBertForQuestionAnswering"),dxt.forEach(t),xlr=r(Eje," (DistilBERT model)"),Eje.forEach(t),$lr=i(X),_F=n(X,"LI",{});var Cje=s(_F);Sve=n(Cje,"STRONG",{});var cxt=s(Sve);klr=r(cxt,"electra"),cxt.forEach(t),Slr=r(Cje," \u2014 "),bU=n(Cje,"A",{href:!0});var fxt=s(bU);Rlr=r(fxt,"ElectraForQuestionAnswering"),fxt.forEach(t),Plr=r(Cje," (ELECTRA model)"),Cje.forEach(t),Blr=i(X),uF=n(X,"LI",{});var wje=s(uF);Rve=n(wje,"STRONG",{});var mxt=s(Rve);Ilr=r(mxt,"flaubert"),mxt.forEach(t),Nlr=r(wje," \u2014 "),vU=n(wje,"A",{href:!0});var gxt=s(vU);qlr=r(gxt,"FlaubertForQuestionAnsweringSimple"),gxt.forEach(t),jlr=r(wje," (FlauBERT model)"),wje.forEach(t),Dlr=i(X),bF=n(X,"LI",{});var Aje=s(bF);Pve=n(Aje,"STRONG",{});var hxt=s(Pve);Glr=r(hxt,"fnet"),hxt.forEach(t),Olr=r(Aje," \u2014 "),FU=n(Aje,"A",{href:!0});var pxt=s(FU);Vlr=r(pxt,"FNetForQuestionAnswering"),pxt.forEach(t),Xlr=r(Aje," (FNet model)"),Aje.forEach(t),zlr=i(X),vF=n(X,"LI",{});var Lje=s(vF);Bve=n(Lje,"STRONG",{});var _xt=s(Bve);Wlr=r(_xt,"funnel"),_xt.forEach(t),Qlr=r(Lje," \u2014 "),TU=n(Lje,"A",{href:!0});var uxt=s(TU);Ulr=r(uxt,"FunnelForQuestionAnswering"),uxt.forEach(t),Hlr=r(Lje," (Funnel Transformer model)"),Lje.forEach(t),Jlr=i(X),FF=n(X,"LI",{});var yje=s(FF);Ive=n(yje,"STRONG",{});var bxt=s(Ive);Ylr=r(bxt,"gptj"),bxt.forEach(t),Klr=r(yje," \u2014 "),MU=n(yje,"A",{href:!0});var vxt=s(MU);Zlr=r(vxt,"GPTJForQuestionAnswering"),vxt.forEach(t),eir=r(yje," (GPT-J model)"),yje.forEach(t),oir=i(X),TF=n(X,"LI",{});var xje=s(TF);Nve=n(xje,"STRONG",{});var Fxt=s(Nve);rir=r(Fxt,"ibert"),Fxt.forEach(t),tir=r(xje," \u2014 "),EU=n(xje,"A",{href:!0});var Txt=s(EU);air=r(Txt,"IBertForQuestionAnswering"),Txt.forEach(t),nir=r(xje," (I-BERT model)"),xje.forEach(t),sir=i(X),MF=n(X,"LI",{});var $je=s(MF);qve=n($je,"STRONG",{});var Mxt=s(qve);lir=r(Mxt,"layoutlmv2"),Mxt.forEach(t),iir=r($je," \u2014 "),CU=n($je,"A",{href:!0});var Ext=s(CU);dir=r(Ext,"LayoutLMv2ForQuestionAnswering"),Ext.forEach(t),cir=r($je," (LayoutLMv2 model)"),$je.forEach(t),fir=i(X),EF=n(X,"LI",{});var kje=s(EF);jve=n(kje,"STRONG",{});var Cxt=s(jve);mir=r(Cxt,"layoutlmv3"),Cxt.forEach(t),gir=r(kje," \u2014 "),wU=n(kje,"A",{href:!0});var wxt=s(wU);hir=r(wxt,"LayoutLMv3ForQuestionAnswering"),wxt.forEach(t),pir=r(kje," (LayoutLMv3 model)"),kje.forEach(t),_ir=i(X),CF=n(X,"LI",{});var Sje=s(CF);Dve=n(Sje,"STRONG",{});var Axt=s(Dve);uir=r(Axt,"led"),Axt.forEach(t),bir=r(Sje," \u2014 "),AU=n(Sje,"A",{href:!0});var Lxt=s(AU);vir=r(Lxt,"LEDForQuestionAnswering"),Lxt.forEach(t),Fir=r(Sje," (LED model)"),Sje.forEach(t),Tir=i(X),wF=n(X,"LI",{});var Rje=s(wF);Gve=n(Rje,"STRONG",{});var yxt=s(Gve);Mir=r(yxt,"longformer"),yxt.forEach(t),Eir=r(Rje," \u2014 "),LU=n(Rje,"A",{href:!0});var xxt=s(LU);Cir=r(xxt,"LongformerForQuestionAnswering"),xxt.forEach(t),wir=r(Rje," (Longformer model)"),Rje.forEach(t),Air=i(X),AF=n(X,"LI",{});var Pje=s(AF);Ove=n(Pje,"STRONG",{});var $xt=s(Ove);Lir=r($xt,"luke"),$xt.forEach(t),yir=r(Pje," \u2014 "),yU=n(Pje,"A",{href:!0});var kxt=s(yU);xir=r(kxt,"LukeForQuestionAnswering"),kxt.forEach(t),$ir=r(Pje," (LUKE model)"),Pje.forEach(t),kir=i(X),LF=n(X,"LI",{});var Bje=s(LF);Vve=n(Bje,"STRONG",{});var Sxt=s(Vve);Sir=r(Sxt,"lxmert"),Sxt.forEach(t),Rir=r(Bje," \u2014 "),xU=n(Bje,"A",{href:!0});var Rxt=s(xU);Pir=r(Rxt,"LxmertForQuestionAnswering"),Rxt.forEach(t),Bir=r(Bje," (LXMERT model)"),Bje.forEach(t),Iir=i(X),yF=n(X,"LI",{});var Ije=s(yF);Xve=n(Ije,"STRONG",{});var Pxt=s(Xve);Nir=r(Pxt,"mbart"),Pxt.forEach(t),qir=r(Ije," \u2014 "),$U=n(Ije,"A",{href:!0});var Bxt=s($U);jir=r(Bxt,"MBartForQuestionAnswering"),Bxt.forEach(t),Dir=r(Ije," (mBART model)"),Ije.forEach(t),Gir=i(X),xF=n(X,"LI",{});var Nje=s(xF);zve=n(Nje,"STRONG",{});var Ixt=s(zve);Oir=r(Ixt,"megatron-bert"),Ixt.forEach(t),Vir=r(Nje," \u2014 "),kU=n(Nje,"A",{href:!0});var Nxt=s(kU);Xir=r(Nxt,"MegatronBertForQuestionAnswering"),Nxt.forEach(t),zir=r(Nje," (Megatron-BERT model)"),Nje.forEach(t),Wir=i(X),$F=n(X,"LI",{});var qje=s($F);Wve=n(qje,"STRONG",{});var qxt=s(Wve);Qir=r(qxt,"mobilebert"),qxt.forEach(t),Uir=r(qje," \u2014 "),SU=n(qje,"A",{href:!0});var jxt=s(SU);Hir=r(jxt,"MobileBertForQuestionAnswering"),jxt.forEach(t),Jir=r(qje," (MobileBERT model)"),qje.forEach(t),Yir=i(X),kF=n(X,"LI",{});var jje=s(kF);Qve=n(jje,"STRONG",{});var Dxt=s(Qve);Kir=r(Dxt,"mpnet"),Dxt.forEach(t),Zir=r(jje," \u2014 "),RU=n(jje,"A",{href:!0});var Gxt=s(RU);edr=r(Gxt,"MPNetForQuestionAnswering"),Gxt.forEach(t),odr=r(jje," (MPNet model)"),jje.forEach(t),rdr=i(X),SF=n(X,"LI",{});var Dje=s(SF);Uve=n(Dje,"STRONG",{});var Oxt=s(Uve);tdr=r(Oxt,"mvp"),Oxt.forEach(t),adr=r(Dje," \u2014 "),PU=n(Dje,"A",{href:!0});var Vxt=s(PU);ndr=r(Vxt,"MvpForQuestionAnswering"),Vxt.forEach(t),sdr=r(Dje," (MVP model)"),Dje.forEach(t),ldr=i(X),RF=n(X,"LI",{});var Gje=s(RF);Hve=n(Gje,"STRONG",{});var Xxt=s(Hve);idr=r(Xxt,"nezha"),Xxt.forEach(t),ddr=r(Gje," \u2014 "),BU=n(Gje,"A",{href:!0});var zxt=s(BU);cdr=r(zxt,"NezhaForQuestionAnswering"),zxt.forEach(t),fdr=r(Gje," (Nezha model)"),Gje.forEach(t),mdr=i(X),PF=n(X,"LI",{});var Oje=s(PF);Jve=n(Oje,"STRONG",{});var Wxt=s(Jve);gdr=r(Wxt,"nystromformer"),Wxt.forEach(t),hdr=r(Oje," \u2014 "),IU=n(Oje,"A",{href:!0});var Qxt=s(IU);pdr=r(Qxt,"NystromformerForQuestionAnswering"),Qxt.forEach(t),_dr=r(Oje," (Nystr\xF6mformer model)"),Oje.forEach(t),udr=i(X),BF=n(X,"LI",{});var Vje=s(BF);Yve=n(Vje,"STRONG",{});var Uxt=s(Yve);bdr=r(Uxt,"qdqbert"),Uxt.forEach(t),vdr=r(Vje," \u2014 "),NU=n(Vje,"A",{href:!0});var Hxt=s(NU);Fdr=r(Hxt,"QDQBertForQuestionAnswering"),Hxt.forEach(t),Tdr=r(Vje," (QDQBert model)"),Vje.forEach(t),Mdr=i(X),IF=n(X,"LI",{});var Xje=s(IF);Kve=n(Xje,"STRONG",{});var Jxt=s(Kve);Edr=r(Jxt,"reformer"),Jxt.forEach(t),Cdr=r(Xje," \u2014 "),qU=n(Xje,"A",{href:!0});var Yxt=s(qU);wdr=r(Yxt,"ReformerForQuestionAnswering"),Yxt.forEach(t),Adr=r(Xje," (Reformer model)"),Xje.forEach(t),Ldr=i(X),NF=n(X,"LI",{});var zje=s(NF);Zve=n(zje,"STRONG",{});var Kxt=s(Zve);ydr=r(Kxt,"rembert"),Kxt.forEach(t),xdr=r(zje," \u2014 "),jU=n(zje,"A",{href:!0});var Zxt=s(jU);$dr=r(Zxt,"RemBertForQuestionAnswering"),Zxt.forEach(t),kdr=r(zje," (RemBERT model)"),zje.forEach(t),Sdr=i(X),qF=n(X,"LI",{});var Wje=s(qF);e0e=n(Wje,"STRONG",{});var e$t=s(e0e);Rdr=r(e$t,"roberta"),e$t.forEach(t),Pdr=r(Wje," \u2014 "),DU=n(Wje,"A",{href:!0});var o$t=s(DU);Bdr=r(o$t,"RobertaForQuestionAnswering"),o$t.forEach(t),Idr=r(Wje," (RoBERTa model)"),Wje.forEach(t),Ndr=i(X),jF=n(X,"LI",{});var Qje=s(jF);o0e=n(Qje,"STRONG",{});var r$t=s(o0e);qdr=r(r$t,"roformer"),r$t.forEach(t),jdr=r(Qje," \u2014 "),GU=n(Qje,"A",{href:!0});var t$t=s(GU);Ddr=r(t$t,"RoFormerForQuestionAnswering"),t$t.forEach(t),Gdr=r(Qje," (RoFormer model)"),Qje.forEach(t),Odr=i(X),DF=n(X,"LI",{});var Uje=s(DF);r0e=n(Uje,"STRONG",{});var a$t=s(r0e);Vdr=r(a$t,"splinter"),a$t.forEach(t),Xdr=r(Uje," \u2014 "),OU=n(Uje,"A",{href:!0});var n$t=s(OU);zdr=r(n$t,"SplinterForQuestionAnswering"),n$t.forEach(t),Wdr=r(Uje," (Splinter model)"),Uje.forEach(t),Qdr=i(X),GF=n(X,"LI",{});var Hje=s(GF);t0e=n(Hje,"STRONG",{});var s$t=s(t0e);Udr=r(s$t,"squeezebert"),s$t.forEach(t),Hdr=r(Hje," \u2014 "),VU=n(Hje,"A",{href:!0});var l$t=s(VU);Jdr=r(l$t,"SqueezeBertForQuestionAnswering"),l$t.forEach(t),Ydr=r(Hje," (SqueezeBERT model)"),Hje.forEach(t),Kdr=i(X),OF=n(X,"LI",{});var Jje=s(OF);a0e=n(Jje,"STRONG",{});var i$t=s(a0e);Zdr=r(i$t,"xlm"),i$t.forEach(t),ecr=r(Jje," \u2014 "),XU=n(Jje,"A",{href:!0});var d$t=s(XU);ocr=r(d$t,"XLMForQuestionAnsweringSimple"),d$t.forEach(t),rcr=r(Jje," (XLM model)"),Jje.forEach(t),tcr=i(X),VF=n(X,"LI",{});var Yje=s(VF);n0e=n(Yje,"STRONG",{});var c$t=s(n0e);acr=r(c$t,"xlm-roberta"),c$t.forEach(t),ncr=r(Yje," \u2014 "),zU=n(Yje,"A",{href:!0});var f$t=s(zU);scr=r(f$t,"XLMRobertaForQuestionAnswering"),f$t.forEach(t),lcr=r(Yje," (XLM-RoBERTa model)"),Yje.forEach(t),icr=i(X),XF=n(X,"LI",{});var Kje=s(XF);s0e=n(Kje,"STRONG",{});var m$t=s(s0e);dcr=r(m$t,"xlm-roberta-xl"),m$t.forEach(t),ccr=r(Kje," \u2014 "),WU=n(Kje,"A",{href:!0});var g$t=s(WU);fcr=r(g$t,"XLMRobertaXLForQuestionAnswering"),g$t.forEach(t),mcr=r(Kje," (XLM-RoBERTa-XL model)"),Kje.forEach(t),gcr=i(X),zF=n(X,"LI",{});var Zje=s(zF);l0e=n(Zje,"STRONG",{});var h$t=s(l0e);hcr=r(h$t,"xlnet"),h$t.forEach(t),pcr=r(Zje," \u2014 "),QU=n(Zje,"A",{href:!0});var p$t=s(QU);_cr=r(p$t,"XLNetForQuestionAnsweringSimple"),p$t.forEach(t),ucr=r(Zje," (XLNet model)"),Zje.forEach(t),bcr=i(X),WF=n(X,"LI",{});var eDe=s(WF);i0e=n(eDe,"STRONG",{});var _$t=s(i0e);vcr=r(_$t,"yoso"),_$t.forEach(t),Fcr=r(eDe," \u2014 "),UU=n(eDe,"A",{href:!0});var u$t=s(UU);Tcr=r(u$t,"YosoForQuestionAnswering"),u$t.forEach(t),Mcr=r(eDe," (YOSO model)"),eDe.forEach(t),X.forEach(t),Ecr=i(Ea),QF=n(Ea,"P",{});var oDe=s(QF);Ccr=r(oDe,"The model is set in evaluation mode by default using "),d0e=n(oDe,"CODE",{});var b$t=s(d0e);wcr=r(b$t,"model.eval()"),b$t.forEach(t),Acr=r(oDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c0e=n(oDe,"CODE",{});var v$t=s(c0e);Lcr=r(v$t,"model.train()"),v$t.forEach(t),oDe.forEach(t),ycr=i(Ea),T(UF.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),tUe=i(f),Sd=n(f,"H2",{class:!0});var gJe=s(Sd);HF=n(gJe,"A",{id:!0,class:!0,href:!0});var F$t=s(HF);f0e=n(F$t,"SPAN",{});var T$t=s(f0e);T(k9.$$.fragment,T$t),T$t.forEach(t),F$t.forEach(t),xcr=i(gJe),m0e=n(gJe,"SPAN",{});var M$t=s(m0e);$cr=r(M$t,"AutoModelForTableQuestionAnswering"),M$t.forEach(t),gJe.forEach(t),aUe=i(f),Vo=n(f,"DIV",{class:!0});var Cl=s(Vo);T(S9.$$.fragment,Cl),kcr=i(Cl),Rd=n(Cl,"P",{});var Kae=s(Rd);Scr=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HU=n(Kae,"A",{href:!0});var E$t=s(HU);Rcr=r(E$t,"from_pretrained()"),E$t.forEach(t),Pcr=r(Kae," class method or the "),JU=n(Kae,"A",{href:!0});var C$t=s(JU);Bcr=r(C$t,"from_config()"),C$t.forEach(t),Icr=r(Kae,` class
method.`),Kae.forEach(t),Ncr=i(Cl),R9=n(Cl,"P",{});var hJe=s(R9);qcr=r(hJe,"This class cannot be instantiated directly using "),g0e=n(hJe,"CODE",{});var w$t=s(g0e);jcr=r(w$t,"__init__()"),w$t.forEach(t),Dcr=r(hJe," (throws an error)."),hJe.forEach(t),Gcr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var y7=s(Mt);T(P9.$$.fragment,y7),Ocr=i(y7),h0e=n(y7,"P",{});var A$t=s(h0e);Vcr=r(A$t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),A$t.forEach(t),Xcr=i(y7),Pd=n(y7,"P",{});var Zae=s(Pd);zcr=r(Zae,`Note:
Loading a model from its configuration file does `),p0e=n(Zae,"STRONG",{});var L$t=s(p0e);Wcr=r(L$t,"not"),L$t.forEach(t),Qcr=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(Zae,"A",{href:!0});var y$t=s(YU);Ucr=r(y$t,"from_pretrained()"),y$t.forEach(t),Hcr=r(Zae," to load the model weights."),Zae.forEach(t),Jcr=i(y7),T(JF.$$.fragment,y7),y7.forEach(t),Ycr=i(Cl),lo=n(Cl,"DIV",{class:!0});var Ca=s(lo);T(B9.$$.fragment,Ca),Kcr=i(Ca),_0e=n(Ca,"P",{});var x$t=s(_0e);Zcr=r(x$t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),x$t.forEach(t),efr=i(Ca),Za=n(Ca,"P",{});var x7=s(Za);ofr=r(x7,"The model class to instantiate is selected based on the "),u0e=n(x7,"CODE",{});var $$t=s(u0e);rfr=r($$t,"model_type"),$$t.forEach(t),tfr=r(x7,` property of the config object (either
passed as an argument or loaded from `),b0e=n(x7,"CODE",{});var k$t=s(b0e);afr=r(k$t,"pretrained_model_name_or_path"),k$t.forEach(t),nfr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(x7,"CODE",{});var S$t=s(v0e);sfr=r(S$t,"pretrained_model_name_or_path"),S$t.forEach(t),lfr=r(x7,":"),x7.forEach(t),ifr=i(Ca),F0e=n(Ca,"UL",{});var R$t=s(F0e);YF=n(R$t,"LI",{});var rDe=s(YF);T0e=n(rDe,"STRONG",{});var P$t=s(T0e);dfr=r(P$t,"tapas"),P$t.forEach(t),cfr=r(rDe," \u2014 "),KU=n(rDe,"A",{href:!0});var B$t=s(KU);ffr=r(B$t,"TapasForQuestionAnswering"),B$t.forEach(t),mfr=r(rDe," (TAPAS model)"),rDe.forEach(t),R$t.forEach(t),gfr=i(Ca),KF=n(Ca,"P",{});var tDe=s(KF);hfr=r(tDe,"The model is set in evaluation mode by default using "),M0e=n(tDe,"CODE",{});var I$t=s(M0e);pfr=r(I$t,"model.eval()"),I$t.forEach(t),_fr=r(tDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E0e=n(tDe,"CODE",{});var N$t=s(E0e);ufr=r(N$t,"model.train()"),N$t.forEach(t),tDe.forEach(t),bfr=i(Ca),T(ZF.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),nUe=i(f),Bd=n(f,"H2",{class:!0});var pJe=s(Bd);eT=n(pJe,"A",{id:!0,class:!0,href:!0});var q$t=s(eT);C0e=n(q$t,"SPAN",{});var j$t=s(C0e);T(I9.$$.fragment,j$t),j$t.forEach(t),q$t.forEach(t),vfr=i(pJe),w0e=n(pJe,"SPAN",{});var D$t=s(w0e);Ffr=r(D$t,"AutoModelForImageClassification"),D$t.forEach(t),pJe.forEach(t),sUe=i(f),Xo=n(f,"DIV",{class:!0});var wl=s(Xo);T(N9.$$.fragment,wl),Tfr=i(wl),Id=n(wl,"P",{});var ene=s(Id);Mfr=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZU=n(ene,"A",{href:!0});var G$t=s(ZU);Efr=r(G$t,"from_pretrained()"),G$t.forEach(t),Cfr=r(ene," class method or the "),eH=n(ene,"A",{href:!0});var O$t=s(eH);wfr=r(O$t,"from_config()"),O$t.forEach(t),Afr=r(ene,` class
method.`),ene.forEach(t),Lfr=i(wl),q9=n(wl,"P",{});var _Je=s(q9);yfr=r(_Je,"This class cannot be instantiated directly using "),A0e=n(_Je,"CODE",{});var V$t=s(A0e);xfr=r(V$t,"__init__()"),V$t.forEach(t),$fr=r(_Je," (throws an error)."),_Je.forEach(t),kfr=i(wl),Et=n(wl,"DIV",{class:!0});var $7=s(Et);T(j9.$$.fragment,$7),Sfr=i($7),L0e=n($7,"P",{});var X$t=s(L0e);Rfr=r(X$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),X$t.forEach(t),Pfr=i($7),Nd=n($7,"P",{});var one=s(Nd);Bfr=r(one,`Note:
Loading a model from its configuration file does `),y0e=n(one,"STRONG",{});var z$t=s(y0e);Ifr=r(z$t,"not"),z$t.forEach(t),Nfr=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(one,"A",{href:!0});var W$t=s(oH);qfr=r(W$t,"from_pretrained()"),W$t.forEach(t),jfr=r(one," to load the model weights."),one.forEach(t),Dfr=i($7),T(oT.$$.fragment,$7),$7.forEach(t),Gfr=i(wl),io=n(wl,"DIV",{class:!0});var wa=s(io);T(D9.$$.fragment,wa),Ofr=i(wa),x0e=n(wa,"P",{});var Q$t=s(x0e);Vfr=r(Q$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Q$t.forEach(t),Xfr=i(wa),en=n(wa,"P",{});var k7=s(en);zfr=r(k7,"The model class to instantiate is selected based on the "),$0e=n(k7,"CODE",{});var U$t=s($0e);Wfr=r(U$t,"model_type"),U$t.forEach(t),Qfr=r(k7,` property of the config object (either
passed as an argument or loaded from `),k0e=n(k7,"CODE",{});var H$t=s(k0e);Ufr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),Hfr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(k7,"CODE",{});var J$t=s(S0e);Jfr=r(J$t,"pretrained_model_name_or_path"),J$t.forEach(t),Yfr=r(k7,":"),k7.forEach(t),Kfr=i(wa),be=n(wa,"UL",{});var Fe=s(be);rT=n(Fe,"LI",{});var aDe=s(rT);R0e=n(aDe,"STRONG",{});var Y$t=s(R0e);Zfr=r(Y$t,"beit"),Y$t.forEach(t),emr=r(aDe," \u2014 "),rH=n(aDe,"A",{href:!0});var K$t=s(rH);omr=r(K$t,"BeitForImageClassification"),K$t.forEach(t),rmr=r(aDe," (BEiT model)"),aDe.forEach(t),tmr=i(Fe),tT=n(Fe,"LI",{});var nDe=s(tT);P0e=n(nDe,"STRONG",{});var Z$t=s(P0e);amr=r(Z$t,"convnext"),Z$t.forEach(t),nmr=r(nDe," \u2014 "),tH=n(nDe,"A",{href:!0});var ekt=s(tH);smr=r(ekt,"ConvNextForImageClassification"),ekt.forEach(t),lmr=r(nDe," (ConvNeXT model)"),nDe.forEach(t),imr=i(Fe),aT=n(Fe,"LI",{});var sDe=s(aT);B0e=n(sDe,"STRONG",{});var okt=s(B0e);dmr=r(okt,"cvt"),okt.forEach(t),cmr=r(sDe," \u2014 "),aH=n(sDe,"A",{href:!0});var rkt=s(aH);fmr=r(rkt,"CvtForImageClassification"),rkt.forEach(t),mmr=r(sDe," (CvT model)"),sDe.forEach(t),gmr=i(Fe),nT=n(Fe,"LI",{});var lDe=s(nT);I0e=n(lDe,"STRONG",{});var tkt=s(I0e);hmr=r(tkt,"data2vec-vision"),tkt.forEach(t),pmr=r(lDe," \u2014 "),nH=n(lDe,"A",{href:!0});var akt=s(nH);_mr=r(akt,"Data2VecVisionForImageClassification"),akt.forEach(t),umr=r(lDe," (Data2VecVision model)"),lDe.forEach(t),bmr=i(Fe),sl=n(Fe,"LI",{});var HR=s(sl);N0e=n(HR,"STRONG",{});var nkt=s(N0e);vmr=r(nkt,"deit"),nkt.forEach(t),Fmr=r(HR," \u2014 "),sH=n(HR,"A",{href:!0});var skt=s(sH);Tmr=r(skt,"DeiTForImageClassification"),skt.forEach(t),Mmr=r(HR," or "),lH=n(HR,"A",{href:!0});var lkt=s(lH);Emr=r(lkt,"DeiTForImageClassificationWithTeacher"),lkt.forEach(t),Cmr=r(HR," (DeiT model)"),HR.forEach(t),wmr=i(Fe),sT=n(Fe,"LI",{});var iDe=s(sT);q0e=n(iDe,"STRONG",{});var ikt=s(q0e);Amr=r(ikt,"imagegpt"),ikt.forEach(t),Lmr=r(iDe," \u2014 "),iH=n(iDe,"A",{href:!0});var dkt=s(iH);ymr=r(dkt,"ImageGPTForImageClassification"),dkt.forEach(t),xmr=r(iDe," (ImageGPT model)"),iDe.forEach(t),$mr=i(Fe),ll=n(Fe,"LI",{});var JR=s(ll);j0e=n(JR,"STRONG",{});var ckt=s(j0e);kmr=r(ckt,"levit"),ckt.forEach(t),Smr=r(JR," \u2014 "),dH=n(JR,"A",{href:!0});var fkt=s(dH);Rmr=r(fkt,"LevitForImageClassification"),fkt.forEach(t),Pmr=r(JR," or "),cH=n(JR,"A",{href:!0});var mkt=s(cH);Bmr=r(mkt,"LevitForImageClassificationWithTeacher"),mkt.forEach(t),Imr=r(JR," (LeViT model)"),JR.forEach(t),Nmr=i(Fe),lT=n(Fe,"LI",{});var dDe=s(lT);D0e=n(dDe,"STRONG",{});var gkt=s(D0e);qmr=r(gkt,"mobilevit"),gkt.forEach(t),jmr=r(dDe," \u2014 "),fH=n(dDe,"A",{href:!0});var hkt=s(fH);Dmr=r(hkt,"MobileViTForImageClassification"),hkt.forEach(t),Gmr=r(dDe," (MobileViT model)"),dDe.forEach(t),Omr=i(Fe),Ct=n(Fe,"LI",{});var Zf=s(Ct);G0e=n(Zf,"STRONG",{});var pkt=s(G0e);Vmr=r(pkt,"perceiver"),pkt.forEach(t),Xmr=r(Zf," \u2014 "),mH=n(Zf,"A",{href:!0});var _kt=s(mH);zmr=r(_kt,"PerceiverForImageClassificationLearned"),_kt.forEach(t),Wmr=r(Zf," or "),gH=n(Zf,"A",{href:!0});var ukt=s(gH);Qmr=r(ukt,"PerceiverForImageClassificationFourier"),ukt.forEach(t),Umr=r(Zf," or "),hH=n(Zf,"A",{href:!0});var bkt=s(hH);Hmr=r(bkt,"PerceiverForImageClassificationConvProcessing"),bkt.forEach(t),Jmr=r(Zf," (Perceiver model)"),Zf.forEach(t),Ymr=i(Fe),iT=n(Fe,"LI",{});var cDe=s(iT);O0e=n(cDe,"STRONG",{});var vkt=s(O0e);Kmr=r(vkt,"poolformer"),vkt.forEach(t),Zmr=r(cDe," \u2014 "),pH=n(cDe,"A",{href:!0});var Fkt=s(pH);egr=r(Fkt,"PoolFormerForImageClassification"),Fkt.forEach(t),ogr=r(cDe," (PoolFormer model)"),cDe.forEach(t),rgr=i(Fe),dT=n(Fe,"LI",{});var fDe=s(dT);V0e=n(fDe,"STRONG",{});var Tkt=s(V0e);tgr=r(Tkt,"regnet"),Tkt.forEach(t),agr=r(fDe," \u2014 "),_H=n(fDe,"A",{href:!0});var Mkt=s(_H);ngr=r(Mkt,"RegNetForImageClassification"),Mkt.forEach(t),sgr=r(fDe," (RegNet model)"),fDe.forEach(t),lgr=i(Fe),cT=n(Fe,"LI",{});var mDe=s(cT);X0e=n(mDe,"STRONG",{});var Ekt=s(X0e);igr=r(Ekt,"resnet"),Ekt.forEach(t),dgr=r(mDe," \u2014 "),uH=n(mDe,"A",{href:!0});var Ckt=s(uH);cgr=r(Ckt,"ResNetForImageClassification"),Ckt.forEach(t),fgr=r(mDe," (ResNet model)"),mDe.forEach(t),mgr=i(Fe),fT=n(Fe,"LI",{});var gDe=s(fT);z0e=n(gDe,"STRONG",{});var wkt=s(z0e);ggr=r(wkt,"segformer"),wkt.forEach(t),hgr=r(gDe," \u2014 "),bH=n(gDe,"A",{href:!0});var Akt=s(bH);pgr=r(Akt,"SegformerForImageClassification"),Akt.forEach(t),_gr=r(gDe," (SegFormer model)"),gDe.forEach(t),ugr=i(Fe),mT=n(Fe,"LI",{});var hDe=s(mT);W0e=n(hDe,"STRONG",{});var Lkt=s(W0e);bgr=r(Lkt,"swin"),Lkt.forEach(t),vgr=r(hDe," \u2014 "),vH=n(hDe,"A",{href:!0});var ykt=s(vH);Fgr=r(ykt,"SwinForImageClassification"),ykt.forEach(t),Tgr=r(hDe," (Swin Transformer model)"),hDe.forEach(t),Mgr=i(Fe),gT=n(Fe,"LI",{});var pDe=s(gT);Q0e=n(pDe,"STRONG",{});var xkt=s(Q0e);Egr=r(xkt,"swinv2"),xkt.forEach(t),Cgr=r(pDe," \u2014 "),FH=n(pDe,"A",{href:!0});var $kt=s(FH);wgr=r($kt,"Swinv2ForImageClassification"),$kt.forEach(t),Agr=r(pDe," (Swin Transformer V2 model)"),pDe.forEach(t),Lgr=i(Fe),hT=n(Fe,"LI",{});var _De=s(hT);U0e=n(_De,"STRONG",{});var kkt=s(U0e);ygr=r(kkt,"van"),kkt.forEach(t),xgr=r(_De," \u2014 "),TH=n(_De,"A",{href:!0});var Skt=s(TH);$gr=r(Skt,"VanForImageClassification"),Skt.forEach(t),kgr=r(_De," (VAN model)"),_De.forEach(t),Sgr=i(Fe),pT=n(Fe,"LI",{});var uDe=s(pT);H0e=n(uDe,"STRONG",{});var Rkt=s(H0e);Rgr=r(Rkt,"vit"),Rkt.forEach(t),Pgr=r(uDe," \u2014 "),MH=n(uDe,"A",{href:!0});var Pkt=s(MH);Bgr=r(Pkt,"ViTForImageClassification"),Pkt.forEach(t),Igr=r(uDe," (ViT model)"),uDe.forEach(t),Fe.forEach(t),Ngr=i(wa),_T=n(wa,"P",{});var bDe=s(_T);qgr=r(bDe,"The model is set in evaluation mode by default using "),J0e=n(bDe,"CODE",{});var Bkt=s(J0e);jgr=r(Bkt,"model.eval()"),Bkt.forEach(t),Dgr=r(bDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y0e=n(bDe,"CODE",{});var Ikt=s(Y0e);Ggr=r(Ikt,"model.train()"),Ikt.forEach(t),bDe.forEach(t),Ogr=i(wa),T(uT.$$.fragment,wa),wa.forEach(t),wl.forEach(t),lUe=i(f),qd=n(f,"H2",{class:!0});var uJe=s(qd);bT=n(uJe,"A",{id:!0,class:!0,href:!0});var Nkt=s(bT);K0e=n(Nkt,"SPAN",{});var qkt=s(K0e);T(G9.$$.fragment,qkt),qkt.forEach(t),Nkt.forEach(t),Vgr=i(uJe),Z0e=n(uJe,"SPAN",{});var jkt=s(Z0e);Xgr=r(jkt,"AutoModelForVideoClassification"),jkt.forEach(t),uJe.forEach(t),iUe=i(f),zo=n(f,"DIV",{class:!0});var Al=s(zo);T(O9.$$.fragment,Al),zgr=i(Al),jd=n(Al,"P",{});var rne=s(jd);Wgr=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),EH=n(rne,"A",{href:!0});var Dkt=s(EH);Qgr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),Ugr=r(rne," class method or the "),CH=n(rne,"A",{href:!0});var Gkt=s(CH);Hgr=r(Gkt,"from_config()"),Gkt.forEach(t),Jgr=r(rne,` class
method.`),rne.forEach(t),Ygr=i(Al),V9=n(Al,"P",{});var bJe=s(V9);Kgr=r(bJe,"This class cannot be instantiated directly using "),e6e=n(bJe,"CODE",{});var Okt=s(e6e);Zgr=r(Okt,"__init__()"),Okt.forEach(t),ehr=r(bJe," (throws an error)."),bJe.forEach(t),ohr=i(Al),wt=n(Al,"DIV",{class:!0});var S7=s(wt);T(X9.$$.fragment,S7),rhr=i(S7),o6e=n(S7,"P",{});var Vkt=s(o6e);thr=r(Vkt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Vkt.forEach(t),ahr=i(S7),Dd=n(S7,"P",{});var tne=s(Dd);nhr=r(tne,`Note:
Loading a model from its configuration file does `),r6e=n(tne,"STRONG",{});var Xkt=s(r6e);shr=r(Xkt,"not"),Xkt.forEach(t),lhr=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(tne,"A",{href:!0});var zkt=s(wH);ihr=r(zkt,"from_pretrained()"),zkt.forEach(t),dhr=r(tne," to load the model weights."),tne.forEach(t),chr=i(S7),T(vT.$$.fragment,S7),S7.forEach(t),fhr=i(Al),co=n(Al,"DIV",{class:!0});var Aa=s(co);T(z9.$$.fragment,Aa),mhr=i(Aa),t6e=n(Aa,"P",{});var Wkt=s(t6e);ghr=r(Wkt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Wkt.forEach(t),hhr=i(Aa),on=n(Aa,"P",{});var R7=s(on);phr=r(R7,"The model class to instantiate is selected based on the "),a6e=n(R7,"CODE",{});var Qkt=s(a6e);_hr=r(Qkt,"model_type"),Qkt.forEach(t),uhr=r(R7,` property of the config object (either
passed as an argument or loaded from `),n6e=n(R7,"CODE",{});var Ukt=s(n6e);bhr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),vhr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=n(R7,"CODE",{});var Hkt=s(s6e);Fhr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),Thr=r(R7,":"),R7.forEach(t),Mhr=i(Aa),l6e=n(Aa,"UL",{});var Jkt=s(l6e);FT=n(Jkt,"LI",{});var vDe=s(FT);i6e=n(vDe,"STRONG",{});var Ykt=s(i6e);Ehr=r(Ykt,"videomae"),Ykt.forEach(t),Chr=r(vDe," \u2014 "),AH=n(vDe,"A",{href:!0});var Kkt=s(AH);whr=r(Kkt,"VideoMAEForVideoClassification"),Kkt.forEach(t),Ahr=r(vDe," (VideoMAE model)"),vDe.forEach(t),Jkt.forEach(t),Lhr=i(Aa),TT=n(Aa,"P",{});var FDe=s(TT);yhr=r(FDe,"The model is set in evaluation mode by default using "),d6e=n(FDe,"CODE",{});var Zkt=s(d6e);xhr=r(Zkt,"model.eval()"),Zkt.forEach(t),$hr=r(FDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c6e=n(FDe,"CODE",{});var eSt=s(c6e);khr=r(eSt,"model.train()"),eSt.forEach(t),FDe.forEach(t),Shr=i(Aa),T(MT.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),dUe=i(f),Gd=n(f,"H2",{class:!0});var vJe=s(Gd);ET=n(vJe,"A",{id:!0,class:!0,href:!0});var oSt=s(ET);f6e=n(oSt,"SPAN",{});var rSt=s(f6e);T(W9.$$.fragment,rSt),rSt.forEach(t),oSt.forEach(t),Rhr=i(vJe),m6e=n(vJe,"SPAN",{});var tSt=s(m6e);Phr=r(tSt,"AutoModelForVision2Seq"),tSt.forEach(t),vJe.forEach(t),cUe=i(f),Wo=n(f,"DIV",{class:!0});var Ll=s(Wo);T(Q9.$$.fragment,Ll),Bhr=i(Ll),Od=n(Ll,"P",{});var ane=s(Od);Ihr=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LH=n(ane,"A",{href:!0});var aSt=s(LH);Nhr=r(aSt,"from_pretrained()"),aSt.forEach(t),qhr=r(ane," class method or the "),yH=n(ane,"A",{href:!0});var nSt=s(yH);jhr=r(nSt,"from_config()"),nSt.forEach(t),Dhr=r(ane,` class
method.`),ane.forEach(t),Ghr=i(Ll),U9=n(Ll,"P",{});var FJe=s(U9);Ohr=r(FJe,"This class cannot be instantiated directly using "),g6e=n(FJe,"CODE",{});var sSt=s(g6e);Vhr=r(sSt,"__init__()"),sSt.forEach(t),Xhr=r(FJe," (throws an error)."),FJe.forEach(t),zhr=i(Ll),At=n(Ll,"DIV",{class:!0});var P7=s(At);T(H9.$$.fragment,P7),Whr=i(P7),h6e=n(P7,"P",{});var lSt=s(h6e);Qhr=r(lSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lSt.forEach(t),Uhr=i(P7),Vd=n(P7,"P",{});var nne=s(Vd);Hhr=r(nne,`Note:
Loading a model from its configuration file does `),p6e=n(nne,"STRONG",{});var iSt=s(p6e);Jhr=r(iSt,"not"),iSt.forEach(t),Yhr=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(nne,"A",{href:!0});var dSt=s(xH);Khr=r(dSt,"from_pretrained()"),dSt.forEach(t),Zhr=r(nne," to load the model weights."),nne.forEach(t),epr=i(P7),T(CT.$$.fragment,P7),P7.forEach(t),opr=i(Ll),fo=n(Ll,"DIV",{class:!0});var La=s(fo);T(J9.$$.fragment,La),rpr=i(La),_6e=n(La,"P",{});var cSt=s(_6e);tpr=r(cSt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cSt.forEach(t),apr=i(La),rn=n(La,"P",{});var B7=s(rn);npr=r(B7,"The model class to instantiate is selected based on the "),u6e=n(B7,"CODE",{});var fSt=s(u6e);spr=r(fSt,"model_type"),fSt.forEach(t),lpr=r(B7,` property of the config object (either
passed as an argument or loaded from `),b6e=n(B7,"CODE",{});var mSt=s(b6e);ipr=r(mSt,"pretrained_model_name_or_path"),mSt.forEach(t),dpr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(B7,"CODE",{});var gSt=s(v6e);cpr=r(gSt,"pretrained_model_name_or_path"),gSt.forEach(t),fpr=r(B7,":"),B7.forEach(t),mpr=i(La),F6e=n(La,"UL",{});var hSt=s(F6e);wT=n(hSt,"LI",{});var TDe=s(wT);T6e=n(TDe,"STRONG",{});var pSt=s(T6e);gpr=r(pSt,"vision-encoder-decoder"),pSt.forEach(t),hpr=r(TDe," \u2014 "),$H=n(TDe,"A",{href:!0});var _St=s($H);ppr=r(_St,"VisionEncoderDecoderModel"),_St.forEach(t),_pr=r(TDe," (Vision Encoder decoder model)"),TDe.forEach(t),hSt.forEach(t),upr=i(La),AT=n(La,"P",{});var MDe=s(AT);bpr=r(MDe,"The model is set in evaluation mode by default using "),M6e=n(MDe,"CODE",{});var uSt=s(M6e);vpr=r(uSt,"model.eval()"),uSt.forEach(t),Fpr=r(MDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E6e=n(MDe,"CODE",{});var bSt=s(E6e);Tpr=r(bSt,"model.train()"),bSt.forEach(t),MDe.forEach(t),Mpr=i(La),T(LT.$$.fragment,La),La.forEach(t),Ll.forEach(t),fUe=i(f),Xd=n(f,"H2",{class:!0});var TJe=s(Xd);yT=n(TJe,"A",{id:!0,class:!0,href:!0});var vSt=s(yT);C6e=n(vSt,"SPAN",{});var FSt=s(C6e);T(Y9.$$.fragment,FSt),FSt.forEach(t),vSt.forEach(t),Epr=i(TJe),w6e=n(TJe,"SPAN",{});var TSt=s(w6e);Cpr=r(TSt,"AutoModelForVisualQuestionAnswering"),TSt.forEach(t),TJe.forEach(t),mUe=i(f),Qo=n(f,"DIV",{class:!0});var yl=s(Qo);T(K9.$$.fragment,yl),wpr=i(yl),zd=n(yl,"P",{});var sne=s(zd);Apr=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),kH=n(sne,"A",{href:!0});var MSt=s(kH);Lpr=r(MSt,"from_pretrained()"),MSt.forEach(t),ypr=r(sne," class method or the "),SH=n(sne,"A",{href:!0});var ESt=s(SH);xpr=r(ESt,"from_config()"),ESt.forEach(t),$pr=r(sne,` class
method.`),sne.forEach(t),kpr=i(yl),Z9=n(yl,"P",{});var MJe=s(Z9);Spr=r(MJe,"This class cannot be instantiated directly using "),A6e=n(MJe,"CODE",{});var CSt=s(A6e);Rpr=r(CSt,"__init__()"),CSt.forEach(t),Ppr=r(MJe," (throws an error)."),MJe.forEach(t),Bpr=i(yl),Lt=n(yl,"DIV",{class:!0});var I7=s(Lt);T(ex.$$.fragment,I7),Ipr=i(I7),L6e=n(I7,"P",{});var wSt=s(L6e);Npr=r(wSt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),wSt.forEach(t),qpr=i(I7),Wd=n(I7,"P",{});var lne=s(Wd);jpr=r(lne,`Note:
Loading a model from its configuration file does `),y6e=n(lne,"STRONG",{});var ASt=s(y6e);Dpr=r(ASt,"not"),ASt.forEach(t),Gpr=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(lne,"A",{href:!0});var LSt=s(RH);Opr=r(LSt,"from_pretrained()"),LSt.forEach(t),Vpr=r(lne," to load the model weights."),lne.forEach(t),Xpr=i(I7),T(xT.$$.fragment,I7),I7.forEach(t),zpr=i(yl),mo=n(yl,"DIV",{class:!0});var ya=s(mo);T(ox.$$.fragment,ya),Wpr=i(ya),x6e=n(ya,"P",{});var ySt=s(x6e);Qpr=r(ySt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ySt.forEach(t),Upr=i(ya),tn=n(ya,"P",{});var N7=s(tn);Hpr=r(N7,"The model class to instantiate is selected based on the "),$6e=n(N7,"CODE",{});var xSt=s($6e);Jpr=r(xSt,"model_type"),xSt.forEach(t),Ypr=r(N7,` property of the config object (either
passed as an argument or loaded from `),k6e=n(N7,"CODE",{});var $St=s(k6e);Kpr=r($St,"pretrained_model_name_or_path"),$St.forEach(t),Zpr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S6e=n(N7,"CODE",{});var kSt=s(S6e);e_r=r(kSt,"pretrained_model_name_or_path"),kSt.forEach(t),o_r=r(N7,":"),N7.forEach(t),r_r=i(ya),R6e=n(ya,"UL",{});var SSt=s(R6e);$T=n(SSt,"LI",{});var EDe=s($T);P6e=n(EDe,"STRONG",{});var RSt=s(P6e);t_r=r(RSt,"vilt"),RSt.forEach(t),a_r=r(EDe," \u2014 "),PH=n(EDe,"A",{href:!0});var PSt=s(PH);n_r=r(PSt,"ViltForQuestionAnswering"),PSt.forEach(t),s_r=r(EDe," (ViLT model)"),EDe.forEach(t),SSt.forEach(t),l_r=i(ya),kT=n(ya,"P",{});var CDe=s(kT);i_r=r(CDe,"The model is set in evaluation mode by default using "),B6e=n(CDe,"CODE",{});var BSt=s(B6e);d_r=r(BSt,"model.eval()"),BSt.forEach(t),c_r=r(CDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I6e=n(CDe,"CODE",{});var ISt=s(I6e);f_r=r(ISt,"model.train()"),ISt.forEach(t),CDe.forEach(t),m_r=i(ya),T(ST.$$.fragment,ya),ya.forEach(t),yl.forEach(t),gUe=i(f),Qd=n(f,"H2",{class:!0});var EJe=s(Qd);RT=n(EJe,"A",{id:!0,class:!0,href:!0});var NSt=s(RT);N6e=n(NSt,"SPAN",{});var qSt=s(N6e);T(rx.$$.fragment,qSt),qSt.forEach(t),NSt.forEach(t),g_r=i(EJe),q6e=n(EJe,"SPAN",{});var jSt=s(q6e);h_r=r(jSt,"AutoModelForAudioClassification"),jSt.forEach(t),EJe.forEach(t),hUe=i(f),Uo=n(f,"DIV",{class:!0});var xl=s(Uo);T(tx.$$.fragment,xl),p_r=i(xl),Ud=n(xl,"P",{});var ine=s(Ud);__r=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BH=n(ine,"A",{href:!0});var DSt=s(BH);u_r=r(DSt,"from_pretrained()"),DSt.forEach(t),b_r=r(ine," class method or the "),IH=n(ine,"A",{href:!0});var GSt=s(IH);v_r=r(GSt,"from_config()"),GSt.forEach(t),F_r=r(ine,` class
method.`),ine.forEach(t),T_r=i(xl),ax=n(xl,"P",{});var CJe=s(ax);M_r=r(CJe,"This class cannot be instantiated directly using "),j6e=n(CJe,"CODE",{});var OSt=s(j6e);E_r=r(OSt,"__init__()"),OSt.forEach(t),C_r=r(CJe," (throws an error)."),CJe.forEach(t),w_r=i(xl),yt=n(xl,"DIV",{class:!0});var q7=s(yt);T(nx.$$.fragment,q7),A_r=i(q7),D6e=n(q7,"P",{});var VSt=s(D6e);L_r=r(VSt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VSt.forEach(t),y_r=i(q7),Hd=n(q7,"P",{});var dne=s(Hd);x_r=r(dne,`Note:
Loading a model from its configuration file does `),G6e=n(dne,"STRONG",{});var XSt=s(G6e);$_r=r(XSt,"not"),XSt.forEach(t),k_r=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(dne,"A",{href:!0});var zSt=s(NH);S_r=r(zSt,"from_pretrained()"),zSt.forEach(t),R_r=r(dne," to load the model weights."),dne.forEach(t),P_r=i(q7),T(PT.$$.fragment,q7),q7.forEach(t),B_r=i(xl),go=n(xl,"DIV",{class:!0});var xa=s(go);T(sx.$$.fragment,xa),I_r=i(xa),O6e=n(xa,"P",{});var WSt=s(O6e);N_r=r(WSt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),WSt.forEach(t),q_r=i(xa),an=n(xa,"P",{});var j7=s(an);j_r=r(j7,"The model class to instantiate is selected based on the "),V6e=n(j7,"CODE",{});var QSt=s(V6e);D_r=r(QSt,"model_type"),QSt.forEach(t),G_r=r(j7,` property of the config object (either
passed as an argument or loaded from `),X6e=n(j7,"CODE",{});var USt=s(X6e);O_r=r(USt,"pretrained_model_name_or_path"),USt.forEach(t),V_r=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=n(j7,"CODE",{});var HSt=s(z6e);X_r=r(HSt,"pretrained_model_name_or_path"),HSt.forEach(t),z_r=r(j7,":"),j7.forEach(t),W_r=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);BT=n(We,"LI",{});var wDe=s(BT);W6e=n(wDe,"STRONG",{});var JSt=s(W6e);Q_r=r(JSt,"data2vec-audio"),JSt.forEach(t),U_r=r(wDe," \u2014 "),qH=n(wDe,"A",{href:!0});var YSt=s(qH);H_r=r(YSt,"Data2VecAudioForSequenceClassification"),YSt.forEach(t),J_r=r(wDe," (Data2VecAudio model)"),wDe.forEach(t),Y_r=i(We),IT=n(We,"LI",{});var ADe=s(IT);Q6e=n(ADe,"STRONG",{});var KSt=s(Q6e);K_r=r(KSt,"hubert"),KSt.forEach(t),Z_r=r(ADe," \u2014 "),jH=n(ADe,"A",{href:!0});var ZSt=s(jH);eur=r(ZSt,"HubertForSequenceClassification"),ZSt.forEach(t),our=r(ADe," (Hubert model)"),ADe.forEach(t),rur=i(We),NT=n(We,"LI",{});var LDe=s(NT);U6e=n(LDe,"STRONG",{});var eRt=s(U6e);tur=r(eRt,"sew"),eRt.forEach(t),aur=r(LDe," \u2014 "),DH=n(LDe,"A",{href:!0});var oRt=s(DH);nur=r(oRt,"SEWForSequenceClassification"),oRt.forEach(t),sur=r(LDe," (SEW model)"),LDe.forEach(t),lur=i(We),qT=n(We,"LI",{});var yDe=s(qT);H6e=n(yDe,"STRONG",{});var rRt=s(H6e);iur=r(rRt,"sew-d"),rRt.forEach(t),dur=r(yDe," \u2014 "),GH=n(yDe,"A",{href:!0});var tRt=s(GH);cur=r(tRt,"SEWDForSequenceClassification"),tRt.forEach(t),fur=r(yDe," (SEW-D model)"),yDe.forEach(t),mur=i(We),jT=n(We,"LI",{});var xDe=s(jT);J6e=n(xDe,"STRONG",{});var aRt=s(J6e);gur=r(aRt,"unispeech"),aRt.forEach(t),hur=r(xDe," \u2014 "),OH=n(xDe,"A",{href:!0});var nRt=s(OH);pur=r(nRt,"UniSpeechForSequenceClassification"),nRt.forEach(t),_ur=r(xDe," (UniSpeech model)"),xDe.forEach(t),uur=i(We),DT=n(We,"LI",{});var $De=s(DT);Y6e=n($De,"STRONG",{});var sRt=s(Y6e);bur=r(sRt,"unispeech-sat"),sRt.forEach(t),vur=r($De," \u2014 "),VH=n($De,"A",{href:!0});var lRt=s(VH);Fur=r(lRt,"UniSpeechSatForSequenceClassification"),lRt.forEach(t),Tur=r($De," (UniSpeechSat model)"),$De.forEach(t),Mur=i(We),GT=n(We,"LI",{});var kDe=s(GT);K6e=n(kDe,"STRONG",{});var iRt=s(K6e);Eur=r(iRt,"wav2vec2"),iRt.forEach(t),Cur=r(kDe," \u2014 "),XH=n(kDe,"A",{href:!0});var dRt=s(XH);wur=r(dRt,"Wav2Vec2ForSequenceClassification"),dRt.forEach(t),Aur=r(kDe," (Wav2Vec2 model)"),kDe.forEach(t),Lur=i(We),OT=n(We,"LI",{});var SDe=s(OT);Z6e=n(SDe,"STRONG",{});var cRt=s(Z6e);yur=r(cRt,"wav2vec2-conformer"),cRt.forEach(t),xur=r(SDe," \u2014 "),zH=n(SDe,"A",{href:!0});var fRt=s(zH);$ur=r(fRt,"Wav2Vec2ConformerForSequenceClassification"),fRt.forEach(t),kur=r(SDe," (Wav2Vec2-Conformer model)"),SDe.forEach(t),Sur=i(We),VT=n(We,"LI",{});var RDe=s(VT);eFe=n(RDe,"STRONG",{});var mRt=s(eFe);Rur=r(mRt,"wavlm"),mRt.forEach(t),Pur=r(RDe," \u2014 "),WH=n(RDe,"A",{href:!0});var gRt=s(WH);Bur=r(gRt,"WavLMForSequenceClassification"),gRt.forEach(t),Iur=r(RDe," (WavLM model)"),RDe.forEach(t),We.forEach(t),Nur=i(xa),XT=n(xa,"P",{});var PDe=s(XT);qur=r(PDe,"The model is set in evaluation mode by default using "),oFe=n(PDe,"CODE",{});var hRt=s(oFe);jur=r(hRt,"model.eval()"),hRt.forEach(t),Dur=r(PDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rFe=n(PDe,"CODE",{});var pRt=s(rFe);Gur=r(pRt,"model.train()"),pRt.forEach(t),PDe.forEach(t),Our=i(xa),T(zT.$$.fragment,xa),xa.forEach(t),xl.forEach(t),pUe=i(f),Jd=n(f,"H2",{class:!0});var wJe=s(Jd);WT=n(wJe,"A",{id:!0,class:!0,href:!0});var _Rt=s(WT);tFe=n(_Rt,"SPAN",{});var uRt=s(tFe);T(lx.$$.fragment,uRt),uRt.forEach(t),_Rt.forEach(t),Vur=i(wJe),aFe=n(wJe,"SPAN",{});var bRt=s(aFe);Xur=r(bRt,"AutoModelForAudioFrameClassification"),bRt.forEach(t),wJe.forEach(t),_Ue=i(f),Ho=n(f,"DIV",{class:!0});var $l=s(Ho);T(ix.$$.fragment,$l),zur=i($l),Yd=n($l,"P",{});var cne=s(Yd);Wur=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QH=n(cne,"A",{href:!0});var vRt=s(QH);Qur=r(vRt,"from_pretrained()"),vRt.forEach(t),Uur=r(cne," class method or the "),UH=n(cne,"A",{href:!0});var FRt=s(UH);Hur=r(FRt,"from_config()"),FRt.forEach(t),Jur=r(cne,` class
method.`),cne.forEach(t),Yur=i($l),dx=n($l,"P",{});var AJe=s(dx);Kur=r(AJe,"This class cannot be instantiated directly using "),nFe=n(AJe,"CODE",{});var TRt=s(nFe);Zur=r(TRt,"__init__()"),TRt.forEach(t),e2r=r(AJe," (throws an error)."),AJe.forEach(t),o2r=i($l),xt=n($l,"DIV",{class:!0});var D7=s(xt);T(cx.$$.fragment,D7),r2r=i(D7),sFe=n(D7,"P",{});var MRt=s(sFe);t2r=r(MRt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),MRt.forEach(t),a2r=i(D7),Kd=n(D7,"P",{});var fne=s(Kd);n2r=r(fne,`Note:
Loading a model from its configuration file does `),lFe=n(fne,"STRONG",{});var ERt=s(lFe);s2r=r(ERt,"not"),ERt.forEach(t),l2r=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(fne,"A",{href:!0});var CRt=s(HH);i2r=r(CRt,"from_pretrained()"),CRt.forEach(t),d2r=r(fne," to load the model weights."),fne.forEach(t),c2r=i(D7),T(QT.$$.fragment,D7),D7.forEach(t),f2r=i($l),ho=n($l,"DIV",{class:!0});var $a=s(ho);T(fx.$$.fragment,$a),m2r=i($a),iFe=n($a,"P",{});var wRt=s(iFe);g2r=r(wRt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wRt.forEach(t),h2r=i($a),nn=n($a,"P",{});var G7=s(nn);p2r=r(G7,"The model class to instantiate is selected based on the "),dFe=n(G7,"CODE",{});var ARt=s(dFe);_2r=r(ARt,"model_type"),ARt.forEach(t),u2r=r(G7,` property of the config object (either
passed as an argument or loaded from `),cFe=n(G7,"CODE",{});var LRt=s(cFe);b2r=r(LRt,"pretrained_model_name_or_path"),LRt.forEach(t),v2r=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(G7,"CODE",{});var yRt=s(fFe);F2r=r(yRt,"pretrained_model_name_or_path"),yRt.forEach(t),T2r=r(G7,":"),G7.forEach(t),M2r=i($a),st=n($a,"UL",{});var kl=s(st);UT=n(kl,"LI",{});var BDe=s(UT);mFe=n(BDe,"STRONG",{});var xRt=s(mFe);E2r=r(xRt,"data2vec-audio"),xRt.forEach(t),C2r=r(BDe," \u2014 "),JH=n(BDe,"A",{href:!0});var $Rt=s(JH);w2r=r($Rt,"Data2VecAudioForAudioFrameClassification"),$Rt.forEach(t),A2r=r(BDe," (Data2VecAudio model)"),BDe.forEach(t),L2r=i(kl),HT=n(kl,"LI",{});var IDe=s(HT);gFe=n(IDe,"STRONG",{});var kRt=s(gFe);y2r=r(kRt,"unispeech-sat"),kRt.forEach(t),x2r=r(IDe," \u2014 "),YH=n(IDe,"A",{href:!0});var SRt=s(YH);$2r=r(SRt,"UniSpeechSatForAudioFrameClassification"),SRt.forEach(t),k2r=r(IDe," (UniSpeechSat model)"),IDe.forEach(t),S2r=i(kl),JT=n(kl,"LI",{});var NDe=s(JT);hFe=n(NDe,"STRONG",{});var RRt=s(hFe);R2r=r(RRt,"wav2vec2"),RRt.forEach(t),P2r=r(NDe," \u2014 "),KH=n(NDe,"A",{href:!0});var PRt=s(KH);B2r=r(PRt,"Wav2Vec2ForAudioFrameClassification"),PRt.forEach(t),I2r=r(NDe," (Wav2Vec2 model)"),NDe.forEach(t),N2r=i(kl),YT=n(kl,"LI",{});var qDe=s(YT);pFe=n(qDe,"STRONG",{});var BRt=s(pFe);q2r=r(BRt,"wav2vec2-conformer"),BRt.forEach(t),j2r=r(qDe," \u2014 "),ZH=n(qDe,"A",{href:!0});var IRt=s(ZH);D2r=r(IRt,"Wav2Vec2ConformerForAudioFrameClassification"),IRt.forEach(t),G2r=r(qDe," (Wav2Vec2-Conformer model)"),qDe.forEach(t),O2r=i(kl),KT=n(kl,"LI",{});var jDe=s(KT);_Fe=n(jDe,"STRONG",{});var NRt=s(_Fe);V2r=r(NRt,"wavlm"),NRt.forEach(t),X2r=r(jDe," \u2014 "),eJ=n(jDe,"A",{href:!0});var qRt=s(eJ);z2r=r(qRt,"WavLMForAudioFrameClassification"),qRt.forEach(t),W2r=r(jDe," (WavLM model)"),jDe.forEach(t),kl.forEach(t),Q2r=i($a),ZT=n($a,"P",{});var DDe=s(ZT);U2r=r(DDe,"The model is set in evaluation mode by default using "),uFe=n(DDe,"CODE",{});var jRt=s(uFe);H2r=r(jRt,"model.eval()"),jRt.forEach(t),J2r=r(DDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bFe=n(DDe,"CODE",{});var DRt=s(bFe);Y2r=r(DRt,"model.train()"),DRt.forEach(t),DDe.forEach(t),K2r=i($a),T(e8.$$.fragment,$a),$a.forEach(t),$l.forEach(t),uUe=i(f),Zd=n(f,"H2",{class:!0});var LJe=s(Zd);o8=n(LJe,"A",{id:!0,class:!0,href:!0});var GRt=s(o8);vFe=n(GRt,"SPAN",{});var ORt=s(vFe);T(mx.$$.fragment,ORt),ORt.forEach(t),GRt.forEach(t),Z2r=i(LJe),FFe=n(LJe,"SPAN",{});var VRt=s(FFe);e1r=r(VRt,"AutoModelForCTC"),VRt.forEach(t),LJe.forEach(t),bUe=i(f),Jo=n(f,"DIV",{class:!0});var Sl=s(Jo);T(gx.$$.fragment,Sl),o1r=i(Sl),ec=n(Sl,"P",{});var mne=s(ec);r1r=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oJ=n(mne,"A",{href:!0});var XRt=s(oJ);t1r=r(XRt,"from_pretrained()"),XRt.forEach(t),a1r=r(mne," class method or the "),rJ=n(mne,"A",{href:!0});var zRt=s(rJ);n1r=r(zRt,"from_config()"),zRt.forEach(t),s1r=r(mne,` class
method.`),mne.forEach(t),l1r=i(Sl),hx=n(Sl,"P",{});var yJe=s(hx);i1r=r(yJe,"This class cannot be instantiated directly using "),TFe=n(yJe,"CODE",{});var WRt=s(TFe);d1r=r(WRt,"__init__()"),WRt.forEach(t),c1r=r(yJe," (throws an error)."),yJe.forEach(t),f1r=i(Sl),$t=n(Sl,"DIV",{class:!0});var O7=s($t);T(px.$$.fragment,O7),m1r=i(O7),MFe=n(O7,"P",{});var QRt=s(MFe);g1r=r(QRt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),QRt.forEach(t),h1r=i(O7),oc=n(O7,"P",{});var gne=s(oc);p1r=r(gne,`Note:
Loading a model from its configuration file does `),EFe=n(gne,"STRONG",{});var URt=s(EFe);_1r=r(URt,"not"),URt.forEach(t),u1r=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(gne,"A",{href:!0});var HRt=s(tJ);b1r=r(HRt,"from_pretrained()"),HRt.forEach(t),v1r=r(gne," to load the model weights."),gne.forEach(t),F1r=i(O7),T(r8.$$.fragment,O7),O7.forEach(t),T1r=i(Sl),po=n(Sl,"DIV",{class:!0});var ka=s(po);T(_x.$$.fragment,ka),M1r=i(ka),CFe=n(ka,"P",{});var JRt=s(CFe);E1r=r(JRt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),JRt.forEach(t),C1r=i(ka),sn=n(ka,"P",{});var V7=s(sn);w1r=r(V7,"The model class to instantiate is selected based on the "),wFe=n(V7,"CODE",{});var YRt=s(wFe);A1r=r(YRt,"model_type"),YRt.forEach(t),L1r=r(V7,` property of the config object (either
passed as an argument or loaded from `),AFe=n(V7,"CODE",{});var KRt=s(AFe);y1r=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),x1r=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(V7,"CODE",{});var ZRt=s(LFe);$1r=r(ZRt,"pretrained_model_name_or_path"),ZRt.forEach(t),k1r=r(V7,":"),V7.forEach(t),S1r=i(ka),Le=n(ka,"UL",{});var Be=s(Le);t8=n(Be,"LI",{});var GDe=s(t8);yFe=n(GDe,"STRONG",{});var ePt=s(yFe);R1r=r(ePt,"data2vec-audio"),ePt.forEach(t),P1r=r(GDe," \u2014 "),aJ=n(GDe,"A",{href:!0});var oPt=s(aJ);B1r=r(oPt,"Data2VecAudioForCTC"),oPt.forEach(t),I1r=r(GDe," (Data2VecAudio model)"),GDe.forEach(t),N1r=i(Be),a8=n(Be,"LI",{});var ODe=s(a8);xFe=n(ODe,"STRONG",{});var rPt=s(xFe);q1r=r(rPt,"hubert"),rPt.forEach(t),j1r=r(ODe," \u2014 "),nJ=n(ODe,"A",{href:!0});var tPt=s(nJ);D1r=r(tPt,"HubertForCTC"),tPt.forEach(t),G1r=r(ODe," (Hubert model)"),ODe.forEach(t),O1r=i(Be),n8=n(Be,"LI",{});var VDe=s(n8);$Fe=n(VDe,"STRONG",{});var aPt=s($Fe);V1r=r(aPt,"mctct"),aPt.forEach(t),X1r=r(VDe," \u2014 "),sJ=n(VDe,"A",{href:!0});var nPt=s(sJ);z1r=r(nPt,"MCTCTForCTC"),nPt.forEach(t),W1r=r(VDe," (M-CTC-T model)"),VDe.forEach(t),Q1r=i(Be),s8=n(Be,"LI",{});var XDe=s(s8);kFe=n(XDe,"STRONG",{});var sPt=s(kFe);U1r=r(sPt,"sew"),sPt.forEach(t),H1r=r(XDe," \u2014 "),lJ=n(XDe,"A",{href:!0});var lPt=s(lJ);J1r=r(lPt,"SEWForCTC"),lPt.forEach(t),Y1r=r(XDe," (SEW model)"),XDe.forEach(t),K1r=i(Be),l8=n(Be,"LI",{});var zDe=s(l8);SFe=n(zDe,"STRONG",{});var iPt=s(SFe);Z1r=r(iPt,"sew-d"),iPt.forEach(t),ebr=r(zDe," \u2014 "),iJ=n(zDe,"A",{href:!0});var dPt=s(iJ);obr=r(dPt,"SEWDForCTC"),dPt.forEach(t),rbr=r(zDe," (SEW-D model)"),zDe.forEach(t),tbr=i(Be),i8=n(Be,"LI",{});var WDe=s(i8);RFe=n(WDe,"STRONG",{});var cPt=s(RFe);abr=r(cPt,"unispeech"),cPt.forEach(t),nbr=r(WDe," \u2014 "),dJ=n(WDe,"A",{href:!0});var fPt=s(dJ);sbr=r(fPt,"UniSpeechForCTC"),fPt.forEach(t),lbr=r(WDe," (UniSpeech model)"),WDe.forEach(t),ibr=i(Be),d8=n(Be,"LI",{});var QDe=s(d8);PFe=n(QDe,"STRONG",{});var mPt=s(PFe);dbr=r(mPt,"unispeech-sat"),mPt.forEach(t),cbr=r(QDe," \u2014 "),cJ=n(QDe,"A",{href:!0});var gPt=s(cJ);fbr=r(gPt,"UniSpeechSatForCTC"),gPt.forEach(t),mbr=r(QDe," (UniSpeechSat model)"),QDe.forEach(t),gbr=i(Be),c8=n(Be,"LI",{});var UDe=s(c8);BFe=n(UDe,"STRONG",{});var hPt=s(BFe);hbr=r(hPt,"wav2vec2"),hPt.forEach(t),pbr=r(UDe," \u2014 "),fJ=n(UDe,"A",{href:!0});var pPt=s(fJ);_br=r(pPt,"Wav2Vec2ForCTC"),pPt.forEach(t),ubr=r(UDe," (Wav2Vec2 model)"),UDe.forEach(t),bbr=i(Be),f8=n(Be,"LI",{});var HDe=s(f8);IFe=n(HDe,"STRONG",{});var _Pt=s(IFe);vbr=r(_Pt,"wav2vec2-conformer"),_Pt.forEach(t),Fbr=r(HDe," \u2014 "),mJ=n(HDe,"A",{href:!0});var uPt=s(mJ);Tbr=r(uPt,"Wav2Vec2ConformerForCTC"),uPt.forEach(t),Mbr=r(HDe," (Wav2Vec2-Conformer model)"),HDe.forEach(t),Ebr=i(Be),m8=n(Be,"LI",{});var JDe=s(m8);NFe=n(JDe,"STRONG",{});var bPt=s(NFe);Cbr=r(bPt,"wavlm"),bPt.forEach(t),wbr=r(JDe," \u2014 "),gJ=n(JDe,"A",{href:!0});var vPt=s(gJ);Abr=r(vPt,"WavLMForCTC"),vPt.forEach(t),Lbr=r(JDe," (WavLM model)"),JDe.forEach(t),Be.forEach(t),ybr=i(ka),g8=n(ka,"P",{});var YDe=s(g8);xbr=r(YDe,"The model is set in evaluation mode by default using "),qFe=n(YDe,"CODE",{});var FPt=s(qFe);$br=r(FPt,"model.eval()"),FPt.forEach(t),kbr=r(YDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jFe=n(YDe,"CODE",{});var TPt=s(jFe);Sbr=r(TPt,"model.train()"),TPt.forEach(t),YDe.forEach(t),Rbr=i(ka),T(h8.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),vUe=i(f),rc=n(f,"H2",{class:!0});var xJe=s(rc);p8=n(xJe,"A",{id:!0,class:!0,href:!0});var MPt=s(p8);DFe=n(MPt,"SPAN",{});var EPt=s(DFe);T(ux.$$.fragment,EPt),EPt.forEach(t),MPt.forEach(t),Pbr=i(xJe),GFe=n(xJe,"SPAN",{});var CPt=s(GFe);Bbr=r(CPt,"AutoModelForSpeechSeq2Seq"),CPt.forEach(t),xJe.forEach(t),FUe=i(f),Yo=n(f,"DIV",{class:!0});var Rl=s(Yo);T(bx.$$.fragment,Rl),Ibr=i(Rl),tc=n(Rl,"P",{});var hne=s(tc);Nbr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hJ=n(hne,"A",{href:!0});var wPt=s(hJ);qbr=r(wPt,"from_pretrained()"),wPt.forEach(t),jbr=r(hne," class method or the "),pJ=n(hne,"A",{href:!0});var APt=s(pJ);Dbr=r(APt,"from_config()"),APt.forEach(t),Gbr=r(hne,` class
method.`),hne.forEach(t),Obr=i(Rl),vx=n(Rl,"P",{});var $Je=s(vx);Vbr=r($Je,"This class cannot be instantiated directly using "),OFe=n($Je,"CODE",{});var LPt=s(OFe);Xbr=r(LPt,"__init__()"),LPt.forEach(t),zbr=r($Je," (throws an error)."),$Je.forEach(t),Wbr=i(Rl),kt=n(Rl,"DIV",{class:!0});var X7=s(kt);T(Fx.$$.fragment,X7),Qbr=i(X7),VFe=n(X7,"P",{});var yPt=s(VFe);Ubr=r(yPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yPt.forEach(t),Hbr=i(X7),ac=n(X7,"P",{});var pne=s(ac);Jbr=r(pne,`Note:
Loading a model from its configuration file does `),XFe=n(pne,"STRONG",{});var xPt=s(XFe);Ybr=r(xPt,"not"),xPt.forEach(t),Kbr=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(pne,"A",{href:!0});var $Pt=s(_J);Zbr=r($Pt,"from_pretrained()"),$Pt.forEach(t),evr=r(pne," to load the model weights."),pne.forEach(t),ovr=i(X7),T(_8.$$.fragment,X7),X7.forEach(t),rvr=i(Rl),_o=n(Rl,"DIV",{class:!0});var Sa=s(_o);T(Tx.$$.fragment,Sa),tvr=i(Sa),zFe=n(Sa,"P",{});var kPt=s(zFe);avr=r(kPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kPt.forEach(t),nvr=i(Sa),ln=n(Sa,"P",{});var z7=s(ln);svr=r(z7,"The model class to instantiate is selected based on the "),WFe=n(z7,"CODE",{});var SPt=s(WFe);lvr=r(SPt,"model_type"),SPt.forEach(t),ivr=r(z7,` property of the config object (either
passed as an argument or loaded from `),QFe=n(z7,"CODE",{});var RPt=s(QFe);dvr=r(RPt,"pretrained_model_name_or_path"),RPt.forEach(t),cvr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(z7,"CODE",{});var PPt=s(UFe);fvr=r(PPt,"pretrained_model_name_or_path"),PPt.forEach(t),mvr=r(z7,":"),z7.forEach(t),gvr=i(Sa),Mx=n(Sa,"UL",{});var kJe=s(Mx);u8=n(kJe,"LI",{});var KDe=s(u8);HFe=n(KDe,"STRONG",{});var BPt=s(HFe);hvr=r(BPt,"speech-encoder-decoder"),BPt.forEach(t),pvr=r(KDe," \u2014 "),uJ=n(KDe,"A",{href:!0});var IPt=s(uJ);_vr=r(IPt,"SpeechEncoderDecoderModel"),IPt.forEach(t),uvr=r(KDe," (Speech Encoder decoder model)"),KDe.forEach(t),bvr=i(kJe),b8=n(kJe,"LI",{});var ZDe=s(b8);JFe=n(ZDe,"STRONG",{});var NPt=s(JFe);vvr=r(NPt,"speech_to_text"),NPt.forEach(t),Fvr=r(ZDe," \u2014 "),bJ=n(ZDe,"A",{href:!0});var qPt=s(bJ);Tvr=r(qPt,"Speech2TextForConditionalGeneration"),qPt.forEach(t),Mvr=r(ZDe," (Speech2Text model)"),ZDe.forEach(t),kJe.forEach(t),Evr=i(Sa),v8=n(Sa,"P",{});var eGe=s(v8);Cvr=r(eGe,"The model is set in evaluation mode by default using "),YFe=n(eGe,"CODE",{});var jPt=s(YFe);wvr=r(jPt,"model.eval()"),jPt.forEach(t),Avr=r(eGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KFe=n(eGe,"CODE",{});var DPt=s(KFe);Lvr=r(DPt,"model.train()"),DPt.forEach(t),eGe.forEach(t),yvr=i(Sa),T(F8.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),TUe=i(f),nc=n(f,"H2",{class:!0});var SJe=s(nc);T8=n(SJe,"A",{id:!0,class:!0,href:!0});var GPt=s(T8);ZFe=n(GPt,"SPAN",{});var OPt=s(ZFe);T(Ex.$$.fragment,OPt),OPt.forEach(t),GPt.forEach(t),xvr=i(SJe),eTe=n(SJe,"SPAN",{});var VPt=s(eTe);$vr=r(VPt,"AutoModelForAudioXVector"),VPt.forEach(t),SJe.forEach(t),MUe=i(f),Ko=n(f,"DIV",{class:!0});var Pl=s(Ko);T(Cx.$$.fragment,Pl),kvr=i(Pl),sc=n(Pl,"P",{});var _ne=s(sc);Svr=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vJ=n(_ne,"A",{href:!0});var XPt=s(vJ);Rvr=r(XPt,"from_pretrained()"),XPt.forEach(t),Pvr=r(_ne," class method or the "),FJ=n(_ne,"A",{href:!0});var zPt=s(FJ);Bvr=r(zPt,"from_config()"),zPt.forEach(t),Ivr=r(_ne,` class
method.`),_ne.forEach(t),Nvr=i(Pl),wx=n(Pl,"P",{});var RJe=s(wx);qvr=r(RJe,"This class cannot be instantiated directly using "),oTe=n(RJe,"CODE",{});var WPt=s(oTe);jvr=r(WPt,"__init__()"),WPt.forEach(t),Dvr=r(RJe," (throws an error)."),RJe.forEach(t),Gvr=i(Pl),St=n(Pl,"DIV",{class:!0});var W7=s(St);T(Ax.$$.fragment,W7),Ovr=i(W7),rTe=n(W7,"P",{});var QPt=s(rTe);Vvr=r(QPt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),QPt.forEach(t),Xvr=i(W7),lc=n(W7,"P",{});var une=s(lc);zvr=r(une,`Note:
Loading a model from its configuration file does `),tTe=n(une,"STRONG",{});var UPt=s(tTe);Wvr=r(UPt,"not"),UPt.forEach(t),Qvr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(une,"A",{href:!0});var HPt=s(TJ);Uvr=r(HPt,"from_pretrained()"),HPt.forEach(t),Hvr=r(une," to load the model weights."),une.forEach(t),Jvr=i(W7),T(M8.$$.fragment,W7),W7.forEach(t),Yvr=i(Pl),uo=n(Pl,"DIV",{class:!0});var Ra=s(uo);T(Lx.$$.fragment,Ra),Kvr=i(Ra),aTe=n(Ra,"P",{});var JPt=s(aTe);Zvr=r(JPt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),JPt.forEach(t),e0r=i(Ra),dn=n(Ra,"P",{});var Q7=s(dn);o0r=r(Q7,"The model class to instantiate is selected based on the "),nTe=n(Q7,"CODE",{});var YPt=s(nTe);r0r=r(YPt,"model_type"),YPt.forEach(t),t0r=r(Q7,` property of the config object (either
passed as an argument or loaded from `),sTe=n(Q7,"CODE",{});var KPt=s(sTe);a0r=r(KPt,"pretrained_model_name_or_path"),KPt.forEach(t),n0r=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(Q7,"CODE",{});var ZPt=s(lTe);s0r=r(ZPt,"pretrained_model_name_or_path"),ZPt.forEach(t),l0r=r(Q7,":"),Q7.forEach(t),i0r=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);E8=n(Bl,"LI",{});var oGe=s(E8);iTe=n(oGe,"STRONG",{});var eBt=s(iTe);d0r=r(eBt,"data2vec-audio"),eBt.forEach(t),c0r=r(oGe," \u2014 "),MJ=n(oGe,"A",{href:!0});var oBt=s(MJ);f0r=r(oBt,"Data2VecAudioForXVector"),oBt.forEach(t),m0r=r(oGe," (Data2VecAudio model)"),oGe.forEach(t),g0r=i(Bl),C8=n(Bl,"LI",{});var rGe=s(C8);dTe=n(rGe,"STRONG",{});var rBt=s(dTe);h0r=r(rBt,"unispeech-sat"),rBt.forEach(t),p0r=r(rGe," \u2014 "),EJ=n(rGe,"A",{href:!0});var tBt=s(EJ);_0r=r(tBt,"UniSpeechSatForXVector"),tBt.forEach(t),u0r=r(rGe," (UniSpeechSat model)"),rGe.forEach(t),b0r=i(Bl),w8=n(Bl,"LI",{});var tGe=s(w8);cTe=n(tGe,"STRONG",{});var aBt=s(cTe);v0r=r(aBt,"wav2vec2"),aBt.forEach(t),F0r=r(tGe," \u2014 "),CJ=n(tGe,"A",{href:!0});var nBt=s(CJ);T0r=r(nBt,"Wav2Vec2ForXVector"),nBt.forEach(t),M0r=r(tGe," (Wav2Vec2 model)"),tGe.forEach(t),E0r=i(Bl),A8=n(Bl,"LI",{});var aGe=s(A8);fTe=n(aGe,"STRONG",{});var sBt=s(fTe);C0r=r(sBt,"wav2vec2-conformer"),sBt.forEach(t),w0r=r(aGe," \u2014 "),wJ=n(aGe,"A",{href:!0});var lBt=s(wJ);A0r=r(lBt,"Wav2Vec2ConformerForXVector"),lBt.forEach(t),L0r=r(aGe," (Wav2Vec2-Conformer model)"),aGe.forEach(t),y0r=i(Bl),L8=n(Bl,"LI",{});var nGe=s(L8);mTe=n(nGe,"STRONG",{});var iBt=s(mTe);x0r=r(iBt,"wavlm"),iBt.forEach(t),$0r=r(nGe," \u2014 "),AJ=n(nGe,"A",{href:!0});var dBt=s(AJ);k0r=r(dBt,"WavLMForXVector"),dBt.forEach(t),S0r=r(nGe," (WavLM model)"),nGe.forEach(t),Bl.forEach(t),R0r=i(Ra),y8=n(Ra,"P",{});var sGe=s(y8);P0r=r(sGe,"The model is set in evaluation mode by default using "),gTe=n(sGe,"CODE",{});var cBt=s(gTe);B0r=r(cBt,"model.eval()"),cBt.forEach(t),I0r=r(sGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hTe=n(sGe,"CODE",{});var fBt=s(hTe);N0r=r(fBt,"model.train()"),fBt.forEach(t),sGe.forEach(t),q0r=i(Ra),T(x8.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),EUe=i(f),ic=n(f,"H2",{class:!0});var PJe=s(ic);$8=n(PJe,"A",{id:!0,class:!0,href:!0});var mBt=s($8);pTe=n(mBt,"SPAN",{});var gBt=s(pTe);T(yx.$$.fragment,gBt),gBt.forEach(t),mBt.forEach(t),j0r=i(PJe),_Te=n(PJe,"SPAN",{});var hBt=s(_Te);D0r=r(hBt,"AutoModelForMaskedImageModeling"),hBt.forEach(t),PJe.forEach(t),CUe=i(f),Zo=n(f,"DIV",{class:!0});var Il=s(Zo);T(xx.$$.fragment,Il),G0r=i(Il),dc=n(Il,"P",{});var bne=s(dc);O0r=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LJ=n(bne,"A",{href:!0});var pBt=s(LJ);V0r=r(pBt,"from_pretrained()"),pBt.forEach(t),X0r=r(bne," class method or the "),yJ=n(bne,"A",{href:!0});var _Bt=s(yJ);z0r=r(_Bt,"from_config()"),_Bt.forEach(t),W0r=r(bne,` class
method.`),bne.forEach(t),Q0r=i(Il),$x=n(Il,"P",{});var BJe=s($x);U0r=r(BJe,"This class cannot be instantiated directly using "),uTe=n(BJe,"CODE",{});var uBt=s(uTe);H0r=r(uBt,"__init__()"),uBt.forEach(t),J0r=r(BJe," (throws an error)."),BJe.forEach(t),Y0r=i(Il),Rt=n(Il,"DIV",{class:!0});var U7=s(Rt);T(kx.$$.fragment,U7),K0r=i(U7),bTe=n(U7,"P",{});var bBt=s(bTe);Z0r=r(bBt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bBt.forEach(t),e6r=i(U7),cc=n(U7,"P",{});var vne=s(cc);o6r=r(vne,`Note:
Loading a model from its configuration file does `),vTe=n(vne,"STRONG",{});var vBt=s(vTe);r6r=r(vBt,"not"),vBt.forEach(t),t6r=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(vne,"A",{href:!0});var FBt=s(xJ);a6r=r(FBt,"from_pretrained()"),FBt.forEach(t),n6r=r(vne," to load the model weights."),vne.forEach(t),s6r=i(U7),T(k8.$$.fragment,U7),U7.forEach(t),l6r=i(Il),bo=n(Il,"DIV",{class:!0});var Pa=s(bo);T(Sx.$$.fragment,Pa),i6r=i(Pa),FTe=n(Pa,"P",{});var TBt=s(FTe);d6r=r(TBt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),TBt.forEach(t),c6r=i(Pa),cn=n(Pa,"P",{});var H7=s(cn);f6r=r(H7,"The model class to instantiate is selected based on the "),TTe=n(H7,"CODE",{});var MBt=s(TTe);m6r=r(MBt,"model_type"),MBt.forEach(t),g6r=r(H7,` property of the config object (either
passed as an argument or loaded from `),MTe=n(H7,"CODE",{});var EBt=s(MTe);h6r=r(EBt,"pretrained_model_name_or_path"),EBt.forEach(t),p6r=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(H7,"CODE",{});var CBt=s(ETe);_6r=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),u6r=r(H7,":"),H7.forEach(t),b6r=i(Pa),fn=n(Pa,"UL",{});var J7=s(fn);S8=n(J7,"LI",{});var lGe=s(S8);CTe=n(lGe,"STRONG",{});var wBt=s(CTe);v6r=r(wBt,"deit"),wBt.forEach(t),F6r=r(lGe," \u2014 "),$J=n(lGe,"A",{href:!0});var ABt=s($J);T6r=r(ABt,"DeiTForMaskedImageModeling"),ABt.forEach(t),M6r=r(lGe," (DeiT model)"),lGe.forEach(t),E6r=i(J7),R8=n(J7,"LI",{});var iGe=s(R8);wTe=n(iGe,"STRONG",{});var LBt=s(wTe);C6r=r(LBt,"swin"),LBt.forEach(t),w6r=r(iGe," \u2014 "),kJ=n(iGe,"A",{href:!0});var yBt=s(kJ);A6r=r(yBt,"SwinForMaskedImageModeling"),yBt.forEach(t),L6r=r(iGe," (Swin Transformer model)"),iGe.forEach(t),y6r=i(J7),P8=n(J7,"LI",{});var dGe=s(P8);ATe=n(dGe,"STRONG",{});var xBt=s(ATe);x6r=r(xBt,"swinv2"),xBt.forEach(t),$6r=r(dGe," \u2014 "),SJ=n(dGe,"A",{href:!0});var $Bt=s(SJ);k6r=r($Bt,"Swinv2ForMaskedImageModeling"),$Bt.forEach(t),S6r=r(dGe," (Swin Transformer V2 model)"),dGe.forEach(t),R6r=i(J7),B8=n(J7,"LI",{});var cGe=s(B8);LTe=n(cGe,"STRONG",{});var kBt=s(LTe);P6r=r(kBt,"vit"),kBt.forEach(t),B6r=r(cGe," \u2014 "),RJ=n(cGe,"A",{href:!0});var SBt=s(RJ);I6r=r(SBt,"ViTForMaskedImageModeling"),SBt.forEach(t),N6r=r(cGe," (ViT model)"),cGe.forEach(t),J7.forEach(t),q6r=i(Pa),I8=n(Pa,"P",{});var fGe=s(I8);j6r=r(fGe,"The model is set in evaluation mode by default using "),yTe=n(fGe,"CODE",{});var RBt=s(yTe);D6r=r(RBt,"model.eval()"),RBt.forEach(t),G6r=r(fGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xTe=n(fGe,"CODE",{});var PBt=s(xTe);O6r=r(PBt,"model.train()"),PBt.forEach(t),fGe.forEach(t),V6r=i(Pa),T(N8.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),wUe=i(f),fc=n(f,"H2",{class:!0});var IJe=s(fc);q8=n(IJe,"A",{id:!0,class:!0,href:!0});var BBt=s(q8);$Te=n(BBt,"SPAN",{});var IBt=s($Te);T(Rx.$$.fragment,IBt),IBt.forEach(t),BBt.forEach(t),X6r=i(IJe),kTe=n(IJe,"SPAN",{});var NBt=s(kTe);z6r=r(NBt,"AutoModelForObjectDetection"),NBt.forEach(t),IJe.forEach(t),AUe=i(f),er=n(f,"DIV",{class:!0});var Nl=s(er);T(Px.$$.fragment,Nl),W6r=i(Nl),mc=n(Nl,"P",{});var Fne=s(mc);Q6r=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PJ=n(Fne,"A",{href:!0});var qBt=s(PJ);U6r=r(qBt,"from_pretrained()"),qBt.forEach(t),H6r=r(Fne," class method or the "),BJ=n(Fne,"A",{href:!0});var jBt=s(BJ);J6r=r(jBt,"from_config()"),jBt.forEach(t),Y6r=r(Fne,` class
method.`),Fne.forEach(t),K6r=i(Nl),Bx=n(Nl,"P",{});var NJe=s(Bx);Z6r=r(NJe,"This class cannot be instantiated directly using "),STe=n(NJe,"CODE",{});var DBt=s(STe);eFr=r(DBt,"__init__()"),DBt.forEach(t),oFr=r(NJe," (throws an error)."),NJe.forEach(t),rFr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var Y7=s(Pt);T(Ix.$$.fragment,Y7),tFr=i(Y7),RTe=n(Y7,"P",{});var GBt=s(RTe);aFr=r(GBt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),GBt.forEach(t),nFr=i(Y7),gc=n(Y7,"P",{});var Tne=s(gc);sFr=r(Tne,`Note:
Loading a model from its configuration file does `),PTe=n(Tne,"STRONG",{});var OBt=s(PTe);lFr=r(OBt,"not"),OBt.forEach(t),iFr=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=n(Tne,"A",{href:!0});var VBt=s(IJ);dFr=r(VBt,"from_pretrained()"),VBt.forEach(t),cFr=r(Tne," to load the model weights."),Tne.forEach(t),fFr=i(Y7),T(j8.$$.fragment,Y7),Y7.forEach(t),mFr=i(Nl),vo=n(Nl,"DIV",{class:!0});var Ba=s(vo);T(Nx.$$.fragment,Ba),gFr=i(Ba),BTe=n(Ba,"P",{});var XBt=s(BTe);hFr=r(XBt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),XBt.forEach(t),pFr=i(Ba),mn=n(Ba,"P",{});var K7=s(mn);_Fr=r(K7,"The model class to instantiate is selected based on the "),ITe=n(K7,"CODE",{});var zBt=s(ITe);uFr=r(zBt,"model_type"),zBt.forEach(t),bFr=r(K7,` property of the config object (either
passed as an argument or loaded from `),NTe=n(K7,"CODE",{});var WBt=s(NTe);vFr=r(WBt,"pretrained_model_name_or_path"),WBt.forEach(t),FFr=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(K7,"CODE",{});var QBt=s(qTe);TFr=r(QBt,"pretrained_model_name_or_path"),QBt.forEach(t),MFr=r(K7,":"),K7.forEach(t),EFr=i(Ba),qx=n(Ba,"UL",{});var qJe=s(qx);D8=n(qJe,"LI",{});var mGe=s(D8);jTe=n(mGe,"STRONG",{});var UBt=s(jTe);CFr=r(UBt,"detr"),UBt.forEach(t),wFr=r(mGe," \u2014 "),NJ=n(mGe,"A",{href:!0});var HBt=s(NJ);AFr=r(HBt,"DetrForObjectDetection"),HBt.forEach(t),LFr=r(mGe," (DETR model)"),mGe.forEach(t),yFr=i(qJe),G8=n(qJe,"LI",{});var gGe=s(G8);DTe=n(gGe,"STRONG",{});var JBt=s(DTe);xFr=r(JBt,"yolos"),JBt.forEach(t),$Fr=r(gGe," \u2014 "),qJ=n(gGe,"A",{href:!0});var YBt=s(qJ);kFr=r(YBt,"YolosForObjectDetection"),YBt.forEach(t),SFr=r(gGe," (YOLOS model)"),gGe.forEach(t),qJe.forEach(t),RFr=i(Ba),O8=n(Ba,"P",{});var hGe=s(O8);PFr=r(hGe,"The model is set in evaluation mode by default using "),GTe=n(hGe,"CODE",{});var KBt=s(GTe);BFr=r(KBt,"model.eval()"),KBt.forEach(t),IFr=r(hGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OTe=n(hGe,"CODE",{});var ZBt=s(OTe);NFr=r(ZBt,"model.train()"),ZBt.forEach(t),hGe.forEach(t),qFr=i(Ba),T(V8.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),LUe=i(f),hc=n(f,"H2",{class:!0});var jJe=s(hc);X8=n(jJe,"A",{id:!0,class:!0,href:!0});var eIt=s(X8);VTe=n(eIt,"SPAN",{});var oIt=s(VTe);T(jx.$$.fragment,oIt),oIt.forEach(t),eIt.forEach(t),jFr=i(jJe),XTe=n(jJe,"SPAN",{});var rIt=s(XTe);DFr=r(rIt,"AutoModelForImageSegmentation"),rIt.forEach(t),jJe.forEach(t),yUe=i(f),or=n(f,"DIV",{class:!0});var ql=s(or);T(Dx.$$.fragment,ql),GFr=i(ql),pc=n(ql,"P",{});var Mne=s(pc);OFr=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jJ=n(Mne,"A",{href:!0});var tIt=s(jJ);VFr=r(tIt,"from_pretrained()"),tIt.forEach(t),XFr=r(Mne," class method or the "),DJ=n(Mne,"A",{href:!0});var aIt=s(DJ);zFr=r(aIt,"from_config()"),aIt.forEach(t),WFr=r(Mne,` class
method.`),Mne.forEach(t),QFr=i(ql),Gx=n(ql,"P",{});var DJe=s(Gx);UFr=r(DJe,"This class cannot be instantiated directly using "),zTe=n(DJe,"CODE",{});var nIt=s(zTe);HFr=r(nIt,"__init__()"),nIt.forEach(t),JFr=r(DJe," (throws an error)."),DJe.forEach(t),YFr=i(ql),Bt=n(ql,"DIV",{class:!0});var Z7=s(Bt);T(Ox.$$.fragment,Z7),KFr=i(Z7),WTe=n(Z7,"P",{});var sIt=s(WTe);ZFr=r(sIt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sIt.forEach(t),eTr=i(Z7),_c=n(Z7,"P",{});var Ene=s(_c);oTr=r(Ene,`Note:
Loading a model from its configuration file does `),QTe=n(Ene,"STRONG",{});var lIt=s(QTe);rTr=r(lIt,"not"),lIt.forEach(t),tTr=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Ene,"A",{href:!0});var iIt=s(GJ);aTr=r(iIt,"from_pretrained()"),iIt.forEach(t),nTr=r(Ene," to load the model weights."),Ene.forEach(t),sTr=i(Z7),T(z8.$$.fragment,Z7),Z7.forEach(t),lTr=i(ql),Fo=n(ql,"DIV",{class:!0});var Ia=s(Fo);T(Vx.$$.fragment,Ia),iTr=i(Ia),UTe=n(Ia,"P",{});var dIt=s(UTe);dTr=r(dIt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),dIt.forEach(t),cTr=i(Ia),gn=n(Ia,"P",{});var eL=s(gn);fTr=r(eL,"The model class to instantiate is selected based on the "),HTe=n(eL,"CODE",{});var cIt=s(HTe);mTr=r(cIt,"model_type"),cIt.forEach(t),gTr=r(eL,` property of the config object (either
passed as an argument or loaded from `),JTe=n(eL,"CODE",{});var fIt=s(JTe);hTr=r(fIt,"pretrained_model_name_or_path"),fIt.forEach(t),pTr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=n(eL,"CODE",{});var mIt=s(YTe);_Tr=r(mIt,"pretrained_model_name_or_path"),mIt.forEach(t),uTr=r(eL,":"),eL.forEach(t),bTr=i(Ia),KTe=n(Ia,"UL",{});var gIt=s(KTe);W8=n(gIt,"LI",{});var pGe=s(W8);ZTe=n(pGe,"STRONG",{});var hIt=s(ZTe);vTr=r(hIt,"detr"),hIt.forEach(t),FTr=r(pGe," \u2014 "),OJ=n(pGe,"A",{href:!0});var pIt=s(OJ);TTr=r(pIt,"DetrForSegmentation"),pIt.forEach(t),MTr=r(pGe," (DETR model)"),pGe.forEach(t),gIt.forEach(t),ETr=i(Ia),Q8=n(Ia,"P",{});var _Ge=s(Q8);CTr=r(_Ge,"The model is set in evaluation mode by default using "),e8e=n(_Ge,"CODE",{});var _It=s(e8e);wTr=r(_It,"model.eval()"),_It.forEach(t),ATr=r(_Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o8e=n(_Ge,"CODE",{});var uIt=s(o8e);LTr=r(uIt,"model.train()"),uIt.forEach(t),_Ge.forEach(t),yTr=i(Ia),T(U8.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),xUe=i(f),uc=n(f,"H2",{class:!0});var GJe=s(uc);H8=n(GJe,"A",{id:!0,class:!0,href:!0});var bIt=s(H8);r8e=n(bIt,"SPAN",{});var vIt=s(r8e);T(Xx.$$.fragment,vIt),vIt.forEach(t),bIt.forEach(t),xTr=i(GJe),t8e=n(GJe,"SPAN",{});var FIt=s(t8e);$Tr=r(FIt,"AutoModelForSemanticSegmentation"),FIt.forEach(t),GJe.forEach(t),$Ue=i(f),rr=n(f,"DIV",{class:!0});var jl=s(rr);T(zx.$$.fragment,jl),kTr=i(jl),bc=n(jl,"P",{});var Cne=s(bc);STr=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VJ=n(Cne,"A",{href:!0});var TIt=s(VJ);RTr=r(TIt,"from_pretrained()"),TIt.forEach(t),PTr=r(Cne," class method or the "),XJ=n(Cne,"A",{href:!0});var MIt=s(XJ);BTr=r(MIt,"from_config()"),MIt.forEach(t),ITr=r(Cne,` class
method.`),Cne.forEach(t),NTr=i(jl),Wx=n(jl,"P",{});var OJe=s(Wx);qTr=r(OJe,"This class cannot be instantiated directly using "),a8e=n(OJe,"CODE",{});var EIt=s(a8e);jTr=r(EIt,"__init__()"),EIt.forEach(t),DTr=r(OJe," (throws an error)."),OJe.forEach(t),GTr=i(jl),It=n(jl,"DIV",{class:!0});var oL=s(It);T(Qx.$$.fragment,oL),OTr=i(oL),n8e=n(oL,"P",{});var CIt=s(n8e);VTr=r(CIt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),CIt.forEach(t),XTr=i(oL),vc=n(oL,"P",{});var wne=s(vc);zTr=r(wne,`Note:
Loading a model from its configuration file does `),s8e=n(wne,"STRONG",{});var wIt=s(s8e);WTr=r(wIt,"not"),wIt.forEach(t),QTr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(wne,"A",{href:!0});var AIt=s(zJ);UTr=r(AIt,"from_pretrained()"),AIt.forEach(t),HTr=r(wne," to load the model weights."),wne.forEach(t),JTr=i(oL),T(J8.$$.fragment,oL),oL.forEach(t),YTr=i(jl),To=n(jl,"DIV",{class:!0});var Na=s(To);T(Ux.$$.fragment,Na),KTr=i(Na),l8e=n(Na,"P",{});var LIt=s(l8e);ZTr=r(LIt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),LIt.forEach(t),e8r=i(Na),hn=n(Na,"P",{});var rL=s(hn);o8r=r(rL,"The model class to instantiate is selected based on the "),i8e=n(rL,"CODE",{});var yIt=s(i8e);r8r=r(yIt,"model_type"),yIt.forEach(t),t8r=r(rL,` property of the config object (either
passed as an argument or loaded from `),d8e=n(rL,"CODE",{});var xIt=s(d8e);a8r=r(xIt,"pretrained_model_name_or_path"),xIt.forEach(t),n8r=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=n(rL,"CODE",{});var $It=s(c8e);s8r=r($It,"pretrained_model_name_or_path"),$It.forEach(t),l8r=r(rL,":"),rL.forEach(t),i8r=i(Na),it=n(Na,"UL",{});var Dl=s(it);Y8=n(Dl,"LI",{});var uGe=s(Y8);f8e=n(uGe,"STRONG",{});var kIt=s(f8e);d8r=r(kIt,"beit"),kIt.forEach(t),c8r=r(uGe," \u2014 "),WJ=n(uGe,"A",{href:!0});var SIt=s(WJ);f8r=r(SIt,"BeitForSemanticSegmentation"),SIt.forEach(t),m8r=r(uGe," (BEiT model)"),uGe.forEach(t),g8r=i(Dl),K8=n(Dl,"LI",{});var bGe=s(K8);m8e=n(bGe,"STRONG",{});var RIt=s(m8e);h8r=r(RIt,"data2vec-vision"),RIt.forEach(t),p8r=r(bGe," \u2014 "),QJ=n(bGe,"A",{href:!0});var PIt=s(QJ);_8r=r(PIt,"Data2VecVisionForSemanticSegmentation"),PIt.forEach(t),u8r=r(bGe," (Data2VecVision model)"),bGe.forEach(t),b8r=i(Dl),Z8=n(Dl,"LI",{});var vGe=s(Z8);g8e=n(vGe,"STRONG",{});var BIt=s(g8e);v8r=r(BIt,"dpt"),BIt.forEach(t),F8r=r(vGe," \u2014 "),UJ=n(vGe,"A",{href:!0});var IIt=s(UJ);T8r=r(IIt,"DPTForSemanticSegmentation"),IIt.forEach(t),M8r=r(vGe," (DPT model)"),vGe.forEach(t),E8r=i(Dl),eM=n(Dl,"LI",{});var FGe=s(eM);h8e=n(FGe,"STRONG",{});var NIt=s(h8e);C8r=r(NIt,"mobilevit"),NIt.forEach(t),w8r=r(FGe," \u2014 "),HJ=n(FGe,"A",{href:!0});var qIt=s(HJ);A8r=r(qIt,"MobileViTForSemanticSegmentation"),qIt.forEach(t),L8r=r(FGe," (MobileViT model)"),FGe.forEach(t),y8r=i(Dl),oM=n(Dl,"LI",{});var TGe=s(oM);p8e=n(TGe,"STRONG",{});var jIt=s(p8e);x8r=r(jIt,"segformer"),jIt.forEach(t),$8r=r(TGe," \u2014 "),JJ=n(TGe,"A",{href:!0});var DIt=s(JJ);k8r=r(DIt,"SegformerForSemanticSegmentation"),DIt.forEach(t),S8r=r(TGe," (SegFormer model)"),TGe.forEach(t),Dl.forEach(t),R8r=i(Na),rM=n(Na,"P",{});var MGe=s(rM);P8r=r(MGe,"The model is set in evaluation mode by default using "),_8e=n(MGe,"CODE",{});var GIt=s(_8e);B8r=r(GIt,"model.eval()"),GIt.forEach(t),I8r=r(MGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u8e=n(MGe,"CODE",{});var OIt=s(u8e);N8r=r(OIt,"model.train()"),OIt.forEach(t),MGe.forEach(t),q8r=i(Na),T(tM.$$.fragment,Na),Na.forEach(t),jl.forEach(t),kUe=i(f),Fc=n(f,"H2",{class:!0});var VJe=s(Fc);aM=n(VJe,"A",{id:!0,class:!0,href:!0});var VIt=s(aM);b8e=n(VIt,"SPAN",{});var XIt=s(b8e);T(Hx.$$.fragment,XIt),XIt.forEach(t),VIt.forEach(t),j8r=i(VJe),v8e=n(VJe,"SPAN",{});var zIt=s(v8e);D8r=r(zIt,"AutoModelForInstanceSegmentation"),zIt.forEach(t),VJe.forEach(t),SUe=i(f),tr=n(f,"DIV",{class:!0});var Gl=s(tr);T(Jx.$$.fragment,Gl),G8r=i(Gl),Tc=n(Gl,"P",{});var Ane=s(Tc);O8r=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),YJ=n(Ane,"A",{href:!0});var WIt=s(YJ);V8r=r(WIt,"from_pretrained()"),WIt.forEach(t),X8r=r(Ane," class method or the "),KJ=n(Ane,"A",{href:!0});var QIt=s(KJ);z8r=r(QIt,"from_config()"),QIt.forEach(t),W8r=r(Ane,` class
method.`),Ane.forEach(t),Q8r=i(Gl),Yx=n(Gl,"P",{});var XJe=s(Yx);U8r=r(XJe,"This class cannot be instantiated directly using "),F8e=n(XJe,"CODE",{});var UIt=s(F8e);H8r=r(UIt,"__init__()"),UIt.forEach(t),J8r=r(XJe," (throws an error)."),XJe.forEach(t),Y8r=i(Gl),Nt=n(Gl,"DIV",{class:!0});var tL=s(Nt);T(Kx.$$.fragment,tL),K8r=i(tL),T8e=n(tL,"P",{});var HIt=s(T8e);Z8r=r(HIt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),HIt.forEach(t),eMr=i(tL),Mc=n(tL,"P",{});var Lne=s(Mc);oMr=r(Lne,`Note:
Loading a model from its configuration file does `),M8e=n(Lne,"STRONG",{});var JIt=s(M8e);rMr=r(JIt,"not"),JIt.forEach(t),tMr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(Lne,"A",{href:!0});var YIt=s(ZJ);aMr=r(YIt,"from_pretrained()"),YIt.forEach(t),nMr=r(Lne," to load the model weights."),Lne.forEach(t),sMr=i(tL),T(nM.$$.fragment,tL),tL.forEach(t),lMr=i(Gl),Mo=n(Gl,"DIV",{class:!0});var qa=s(Mo);T(Zx.$$.fragment,qa),iMr=i(qa),E8e=n(qa,"P",{});var KIt=s(E8e);dMr=r(KIt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),KIt.forEach(t),cMr=i(qa),pn=n(qa,"P",{});var aL=s(pn);fMr=r(aL,"The model class to instantiate is selected based on the "),C8e=n(aL,"CODE",{});var ZIt=s(C8e);mMr=r(ZIt,"model_type"),ZIt.forEach(t),gMr=r(aL,` property of the config object (either
passed as an argument or loaded from `),w8e=n(aL,"CODE",{});var eNt=s(w8e);hMr=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),pMr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=n(aL,"CODE",{});var oNt=s(A8e);_Mr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),uMr=r(aL,":"),aL.forEach(t),bMr=i(qa),L8e=n(qa,"UL",{});var rNt=s(L8e);sM=n(rNt,"LI",{});var EGe=s(sM);y8e=n(EGe,"STRONG",{});var tNt=s(y8e);vMr=r(tNt,"maskformer"),tNt.forEach(t),FMr=r(EGe," \u2014 "),eY=n(EGe,"A",{href:!0});var aNt=s(eY);TMr=r(aNt,"MaskFormerForInstanceSegmentation"),aNt.forEach(t),MMr=r(EGe," (MaskFormer model)"),EGe.forEach(t),rNt.forEach(t),EMr=i(qa),lM=n(qa,"P",{});var CGe=s(lM);CMr=r(CGe,"The model is set in evaluation mode by default using "),x8e=n(CGe,"CODE",{});var nNt=s(x8e);wMr=r(nNt,"model.eval()"),nNt.forEach(t),AMr=r(CGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$8e=n(CGe,"CODE",{});var sNt=s($8e);LMr=r(sNt,"model.train()"),sNt.forEach(t),CGe.forEach(t),yMr=i(qa),T(iM.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),RUe=i(f),Ec=n(f,"H2",{class:!0});var zJe=s(Ec);dM=n(zJe,"A",{id:!0,class:!0,href:!0});var lNt=s(dM);k8e=n(lNt,"SPAN",{});var iNt=s(k8e);T(e$.$$.fragment,iNt),iNt.forEach(t),lNt.forEach(t),xMr=i(zJe),S8e=n(zJe,"SPAN",{});var dNt=s(S8e);$Mr=r(dNt,"TFAutoModel"),dNt.forEach(t),zJe.forEach(t),PUe=i(f),ar=n(f,"DIV",{class:!0});var Ol=s(ar);T(o$.$$.fragment,Ol),kMr=i(Ol),Cc=n(Ol,"P",{});var yne=s(Cc);SMr=r(yne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oY=n(yne,"A",{href:!0});var cNt=s(oY);RMr=r(cNt,"from_pretrained()"),cNt.forEach(t),PMr=r(yne," class method or the "),rY=n(yne,"A",{href:!0});var fNt=s(rY);BMr=r(fNt,"from_config()"),fNt.forEach(t),IMr=r(yne,` class
method.`),yne.forEach(t),NMr=i(Ol),r$=n(Ol,"P",{});var WJe=s(r$);qMr=r(WJe,"This class cannot be instantiated directly using "),R8e=n(WJe,"CODE",{});var mNt=s(R8e);jMr=r(mNt,"__init__()"),mNt.forEach(t),DMr=r(WJe," (throws an error)."),WJe.forEach(t),GMr=i(Ol),qt=n(Ol,"DIV",{class:!0});var nL=s(qt);T(t$.$$.fragment,nL),OMr=i(nL),P8e=n(nL,"P",{});var gNt=s(P8e);VMr=r(gNt,"Instantiates one of the base model classes of the library from a configuration."),gNt.forEach(t),XMr=i(nL),wc=n(nL,"P",{});var xne=s(wc);zMr=r(xne,`Note:
Loading a model from its configuration file does `),B8e=n(xne,"STRONG",{});var hNt=s(B8e);WMr=r(hNt,"not"),hNt.forEach(t),QMr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(xne,"A",{href:!0});var pNt=s(tY);UMr=r(pNt,"from_pretrained()"),pNt.forEach(t),HMr=r(xne," to load the model weights."),xne.forEach(t),JMr=i(nL),T(cM.$$.fragment,nL),nL.forEach(t),YMr=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(a$.$$.fragment,Vl),KMr=i(Vl),I8e=n(Vl,"P",{});var _Nt=s(I8e);ZMr=r(_Nt,"Instantiate one of the base model classes of the library from a pretrained model."),_Nt.forEach(t),eEr=i(Vl),_n=n(Vl,"P",{});var sL=s(_n);oEr=r(sL,"The model class to instantiate is selected based on the "),N8e=n(sL,"CODE",{});var uNt=s(N8e);rEr=r(uNt,"model_type"),uNt.forEach(t),tEr=r(sL,` property of the config object (either
passed as an argument or loaded from `),q8e=n(sL,"CODE",{});var bNt=s(q8e);aEr=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),nEr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j8e=n(sL,"CODE",{});var vNt=s(j8e);sEr=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),lEr=r(sL,":"),sL.forEach(t),iEr=i(Vl),q=n(Vl,"UL",{});var D=s(q);fM=n(D,"LI",{});var wGe=s(fM);D8e=n(wGe,"STRONG",{});var FNt=s(D8e);dEr=r(FNt,"albert"),FNt.forEach(t),cEr=r(wGe," \u2014 "),aY=n(wGe,"A",{href:!0});var TNt=s(aY);fEr=r(TNt,"TFAlbertModel"),TNt.forEach(t),mEr=r(wGe," (ALBERT model)"),wGe.forEach(t),gEr=i(D),mM=n(D,"LI",{});var AGe=s(mM);G8e=n(AGe,"STRONG",{});var MNt=s(G8e);hEr=r(MNt,"bart"),MNt.forEach(t),pEr=r(AGe," \u2014 "),nY=n(AGe,"A",{href:!0});var ENt=s(nY);_Er=r(ENt,"TFBartModel"),ENt.forEach(t),uEr=r(AGe," (BART model)"),AGe.forEach(t),bEr=i(D),gM=n(D,"LI",{});var LGe=s(gM);O8e=n(LGe,"STRONG",{});var CNt=s(O8e);vEr=r(CNt,"bert"),CNt.forEach(t),FEr=r(LGe," \u2014 "),sY=n(LGe,"A",{href:!0});var wNt=s(sY);TEr=r(wNt,"TFBertModel"),wNt.forEach(t),MEr=r(LGe," (BERT model)"),LGe.forEach(t),EEr=i(D),hM=n(D,"LI",{});var yGe=s(hM);V8e=n(yGe,"STRONG",{});var ANt=s(V8e);CEr=r(ANt,"blenderbot"),ANt.forEach(t),wEr=r(yGe," \u2014 "),lY=n(yGe,"A",{href:!0});var LNt=s(lY);AEr=r(LNt,"TFBlenderbotModel"),LNt.forEach(t),LEr=r(yGe," (Blenderbot model)"),yGe.forEach(t),yEr=i(D),pM=n(D,"LI",{});var xGe=s(pM);X8e=n(xGe,"STRONG",{});var yNt=s(X8e);xEr=r(yNt,"blenderbot-small"),yNt.forEach(t),$Er=r(xGe," \u2014 "),iY=n(xGe,"A",{href:!0});var xNt=s(iY);kEr=r(xNt,"TFBlenderbotSmallModel"),xNt.forEach(t),SEr=r(xGe," (BlenderbotSmall model)"),xGe.forEach(t),REr=i(D),_M=n(D,"LI",{});var $Ge=s(_M);z8e=n($Ge,"STRONG",{});var $Nt=s(z8e);PEr=r($Nt,"camembert"),$Nt.forEach(t),BEr=r($Ge," \u2014 "),dY=n($Ge,"A",{href:!0});var kNt=s(dY);IEr=r(kNt,"TFCamembertModel"),kNt.forEach(t),NEr=r($Ge," (CamemBERT model)"),$Ge.forEach(t),qEr=i(D),uM=n(D,"LI",{});var kGe=s(uM);W8e=n(kGe,"STRONG",{});var SNt=s(W8e);jEr=r(SNt,"clip"),SNt.forEach(t),DEr=r(kGe," \u2014 "),cY=n(kGe,"A",{href:!0});var RNt=s(cY);GEr=r(RNt,"TFCLIPModel"),RNt.forEach(t),OEr=r(kGe," (CLIP model)"),kGe.forEach(t),VEr=i(D),bM=n(D,"LI",{});var SGe=s(bM);Q8e=n(SGe,"STRONG",{});var PNt=s(Q8e);XEr=r(PNt,"convbert"),PNt.forEach(t),zEr=r(SGe," \u2014 "),fY=n(SGe,"A",{href:!0});var BNt=s(fY);WEr=r(BNt,"TFConvBertModel"),BNt.forEach(t),QEr=r(SGe," (ConvBERT model)"),SGe.forEach(t),UEr=i(D),vM=n(D,"LI",{});var RGe=s(vM);U8e=n(RGe,"STRONG",{});var INt=s(U8e);HEr=r(INt,"convnext"),INt.forEach(t),JEr=r(RGe," \u2014 "),mY=n(RGe,"A",{href:!0});var NNt=s(mY);YEr=r(NNt,"TFConvNextModel"),NNt.forEach(t),KEr=r(RGe," (ConvNeXT model)"),RGe.forEach(t),ZEr=i(D),FM=n(D,"LI",{});var PGe=s(FM);H8e=n(PGe,"STRONG",{});var qNt=s(H8e);e4r=r(qNt,"ctrl"),qNt.forEach(t),o4r=r(PGe," \u2014 "),gY=n(PGe,"A",{href:!0});var jNt=s(gY);r4r=r(jNt,"TFCTRLModel"),jNt.forEach(t),t4r=r(PGe," (CTRL model)"),PGe.forEach(t),a4r=i(D),TM=n(D,"LI",{});var BGe=s(TM);J8e=n(BGe,"STRONG",{});var DNt=s(J8e);n4r=r(DNt,"data2vec-vision"),DNt.forEach(t),s4r=r(BGe," \u2014 "),hY=n(BGe,"A",{href:!0});var GNt=s(hY);l4r=r(GNt,"TFData2VecVisionModel"),GNt.forEach(t),i4r=r(BGe," (Data2VecVision model)"),BGe.forEach(t),d4r=i(D),MM=n(D,"LI",{});var IGe=s(MM);Y8e=n(IGe,"STRONG",{});var ONt=s(Y8e);c4r=r(ONt,"deberta"),ONt.forEach(t),f4r=r(IGe," \u2014 "),pY=n(IGe,"A",{href:!0});var VNt=s(pY);m4r=r(VNt,"TFDebertaModel"),VNt.forEach(t),g4r=r(IGe," (DeBERTa model)"),IGe.forEach(t),h4r=i(D),EM=n(D,"LI",{});var NGe=s(EM);K8e=n(NGe,"STRONG",{});var XNt=s(K8e);p4r=r(XNt,"deberta-v2"),XNt.forEach(t),_4r=r(NGe," \u2014 "),_Y=n(NGe,"A",{href:!0});var zNt=s(_Y);u4r=r(zNt,"TFDebertaV2Model"),zNt.forEach(t),b4r=r(NGe," (DeBERTa-v2 model)"),NGe.forEach(t),v4r=i(D),CM=n(D,"LI",{});var qGe=s(CM);Z8e=n(qGe,"STRONG",{});var WNt=s(Z8e);F4r=r(WNt,"deit"),WNt.forEach(t),T4r=r(qGe," \u2014 "),uY=n(qGe,"A",{href:!0});var QNt=s(uY);M4r=r(QNt,"TFDeiTModel"),QNt.forEach(t),E4r=r(qGe," (DeiT model)"),qGe.forEach(t),C4r=i(D),wM=n(D,"LI",{});var jGe=s(wM);eMe=n(jGe,"STRONG",{});var UNt=s(eMe);w4r=r(UNt,"distilbert"),UNt.forEach(t),A4r=r(jGe," \u2014 "),bY=n(jGe,"A",{href:!0});var HNt=s(bY);L4r=r(HNt,"TFDistilBertModel"),HNt.forEach(t),y4r=r(jGe," (DistilBERT model)"),jGe.forEach(t),x4r=i(D),AM=n(D,"LI",{});var DGe=s(AM);oMe=n(DGe,"STRONG",{});var JNt=s(oMe);$4r=r(JNt,"dpr"),JNt.forEach(t),k4r=r(DGe," \u2014 "),vY=n(DGe,"A",{href:!0});var YNt=s(vY);S4r=r(YNt,"TFDPRQuestionEncoder"),YNt.forEach(t),R4r=r(DGe," (DPR model)"),DGe.forEach(t),P4r=i(D),LM=n(D,"LI",{});var GGe=s(LM);rMe=n(GGe,"STRONG",{});var KNt=s(rMe);B4r=r(KNt,"electra"),KNt.forEach(t),I4r=r(GGe," \u2014 "),FY=n(GGe,"A",{href:!0});var ZNt=s(FY);N4r=r(ZNt,"TFElectraModel"),ZNt.forEach(t),q4r=r(GGe," (ELECTRA model)"),GGe.forEach(t),j4r=i(D),yM=n(D,"LI",{});var OGe=s(yM);tMe=n(OGe,"STRONG",{});var eqt=s(tMe);D4r=r(eqt,"flaubert"),eqt.forEach(t),G4r=r(OGe," \u2014 "),TY=n(OGe,"A",{href:!0});var oqt=s(TY);O4r=r(oqt,"TFFlaubertModel"),oqt.forEach(t),V4r=r(OGe," (FlauBERT model)"),OGe.forEach(t),X4r=i(D),il=n(D,"LI",{});var YR=s(il);aMe=n(YR,"STRONG",{});var rqt=s(aMe);z4r=r(rqt,"funnel"),rqt.forEach(t),W4r=r(YR," \u2014 "),MY=n(YR,"A",{href:!0});var tqt=s(MY);Q4r=r(tqt,"TFFunnelModel"),tqt.forEach(t),U4r=r(YR," or "),EY=n(YR,"A",{href:!0});var aqt=s(EY);H4r=r(aqt,"TFFunnelBaseModel"),aqt.forEach(t),J4r=r(YR," (Funnel Transformer model)"),YR.forEach(t),Y4r=i(D),xM=n(D,"LI",{});var VGe=s(xM);nMe=n(VGe,"STRONG",{});var nqt=s(nMe);K4r=r(nqt,"gpt2"),nqt.forEach(t),Z4r=r(VGe," \u2014 "),CY=n(VGe,"A",{href:!0});var sqt=s(CY);eCr=r(sqt,"TFGPT2Model"),sqt.forEach(t),oCr=r(VGe," (OpenAI GPT-2 model)"),VGe.forEach(t),rCr=i(D),$M=n(D,"LI",{});var XGe=s($M);sMe=n(XGe,"STRONG",{});var lqt=s(sMe);tCr=r(lqt,"gptj"),lqt.forEach(t),aCr=r(XGe," \u2014 "),wY=n(XGe,"A",{href:!0});var iqt=s(wY);nCr=r(iqt,"TFGPTJModel"),iqt.forEach(t),sCr=r(XGe," (GPT-J model)"),XGe.forEach(t),lCr=i(D),kM=n(D,"LI",{});var zGe=s(kM);lMe=n(zGe,"STRONG",{});var dqt=s(lMe);iCr=r(dqt,"hubert"),dqt.forEach(t),dCr=r(zGe," \u2014 "),AY=n(zGe,"A",{href:!0});var cqt=s(AY);cCr=r(cqt,"TFHubertModel"),cqt.forEach(t),fCr=r(zGe," (Hubert model)"),zGe.forEach(t),mCr=i(D),SM=n(D,"LI",{});var WGe=s(SM);iMe=n(WGe,"STRONG",{});var fqt=s(iMe);gCr=r(fqt,"layoutlm"),fqt.forEach(t),hCr=r(WGe," \u2014 "),LY=n(WGe,"A",{href:!0});var mqt=s(LY);pCr=r(mqt,"TFLayoutLMModel"),mqt.forEach(t),_Cr=r(WGe," (LayoutLM model)"),WGe.forEach(t),uCr=i(D),RM=n(D,"LI",{});var QGe=s(RM);dMe=n(QGe,"STRONG",{});var gqt=s(dMe);bCr=r(gqt,"led"),gqt.forEach(t),vCr=r(QGe," \u2014 "),yY=n(QGe,"A",{href:!0});var hqt=s(yY);FCr=r(hqt,"TFLEDModel"),hqt.forEach(t),TCr=r(QGe," (LED model)"),QGe.forEach(t),MCr=i(D),PM=n(D,"LI",{});var UGe=s(PM);cMe=n(UGe,"STRONG",{});var pqt=s(cMe);ECr=r(pqt,"longformer"),pqt.forEach(t),CCr=r(UGe," \u2014 "),xY=n(UGe,"A",{href:!0});var _qt=s(xY);wCr=r(_qt,"TFLongformerModel"),_qt.forEach(t),ACr=r(UGe," (Longformer model)"),UGe.forEach(t),LCr=i(D),BM=n(D,"LI",{});var HGe=s(BM);fMe=n(HGe,"STRONG",{});var uqt=s(fMe);yCr=r(uqt,"lxmert"),uqt.forEach(t),xCr=r(HGe," \u2014 "),$Y=n(HGe,"A",{href:!0});var bqt=s($Y);$Cr=r(bqt,"TFLxmertModel"),bqt.forEach(t),kCr=r(HGe," (LXMERT model)"),HGe.forEach(t),SCr=i(D),IM=n(D,"LI",{});var JGe=s(IM);mMe=n(JGe,"STRONG",{});var vqt=s(mMe);RCr=r(vqt,"marian"),vqt.forEach(t),PCr=r(JGe," \u2014 "),kY=n(JGe,"A",{href:!0});var Fqt=s(kY);BCr=r(Fqt,"TFMarianModel"),Fqt.forEach(t),ICr=r(JGe," (Marian model)"),JGe.forEach(t),NCr=i(D),NM=n(D,"LI",{});var YGe=s(NM);gMe=n(YGe,"STRONG",{});var Tqt=s(gMe);qCr=r(Tqt,"mbart"),Tqt.forEach(t),jCr=r(YGe," \u2014 "),SY=n(YGe,"A",{href:!0});var Mqt=s(SY);DCr=r(Mqt,"TFMBartModel"),Mqt.forEach(t),GCr=r(YGe," (mBART model)"),YGe.forEach(t),OCr=i(D),qM=n(D,"LI",{});var KGe=s(qM);hMe=n(KGe,"STRONG",{});var Eqt=s(hMe);VCr=r(Eqt,"mobilebert"),Eqt.forEach(t),XCr=r(KGe," \u2014 "),RY=n(KGe,"A",{href:!0});var Cqt=s(RY);zCr=r(Cqt,"TFMobileBertModel"),Cqt.forEach(t),WCr=r(KGe," (MobileBERT model)"),KGe.forEach(t),QCr=i(D),jM=n(D,"LI",{});var ZGe=s(jM);pMe=n(ZGe,"STRONG",{});var wqt=s(pMe);UCr=r(wqt,"mpnet"),wqt.forEach(t),HCr=r(ZGe," \u2014 "),PY=n(ZGe,"A",{href:!0});var Aqt=s(PY);JCr=r(Aqt,"TFMPNetModel"),Aqt.forEach(t),YCr=r(ZGe," (MPNet model)"),ZGe.forEach(t),KCr=i(D),DM=n(D,"LI",{});var eOe=s(DM);_Me=n(eOe,"STRONG",{});var Lqt=s(_Me);ZCr=r(Lqt,"mt5"),Lqt.forEach(t),e3r=r(eOe," \u2014 "),BY=n(eOe,"A",{href:!0});var yqt=s(BY);o3r=r(yqt,"TFMT5Model"),yqt.forEach(t),r3r=r(eOe," (MT5 model)"),eOe.forEach(t),t3r=i(D),GM=n(D,"LI",{});var oOe=s(GM);uMe=n(oOe,"STRONG",{});var xqt=s(uMe);a3r=r(xqt,"openai-gpt"),xqt.forEach(t),n3r=r(oOe," \u2014 "),IY=n(oOe,"A",{href:!0});var $qt=s(IY);s3r=r($qt,"TFOpenAIGPTModel"),$qt.forEach(t),l3r=r(oOe," (OpenAI GPT model)"),oOe.forEach(t),i3r=i(D),OM=n(D,"LI",{});var rOe=s(OM);bMe=n(rOe,"STRONG",{});var kqt=s(bMe);d3r=r(kqt,"opt"),kqt.forEach(t),c3r=r(rOe," \u2014 "),NY=n(rOe,"A",{href:!0});var Sqt=s(NY);f3r=r(Sqt,"TFOPTModel"),Sqt.forEach(t),m3r=r(rOe," (OPT model)"),rOe.forEach(t),g3r=i(D),VM=n(D,"LI",{});var tOe=s(VM);vMe=n(tOe,"STRONG",{});var Rqt=s(vMe);h3r=r(Rqt,"pegasus"),Rqt.forEach(t),p3r=r(tOe," \u2014 "),qY=n(tOe,"A",{href:!0});var Pqt=s(qY);_3r=r(Pqt,"TFPegasusModel"),Pqt.forEach(t),u3r=r(tOe," (Pegasus model)"),tOe.forEach(t),b3r=i(D),XM=n(D,"LI",{});var aOe=s(XM);FMe=n(aOe,"STRONG",{});var Bqt=s(FMe);v3r=r(Bqt,"regnet"),Bqt.forEach(t),F3r=r(aOe," \u2014 "),jY=n(aOe,"A",{href:!0});var Iqt=s(jY);T3r=r(Iqt,"TFRegNetModel"),Iqt.forEach(t),M3r=r(aOe," (RegNet model)"),aOe.forEach(t),E3r=i(D),zM=n(D,"LI",{});var nOe=s(zM);TMe=n(nOe,"STRONG",{});var Nqt=s(TMe);C3r=r(Nqt,"rembert"),Nqt.forEach(t),w3r=r(nOe," \u2014 "),DY=n(nOe,"A",{href:!0});var qqt=s(DY);A3r=r(qqt,"TFRemBertModel"),qqt.forEach(t),L3r=r(nOe," (RemBERT model)"),nOe.forEach(t),y3r=i(D),WM=n(D,"LI",{});var sOe=s(WM);MMe=n(sOe,"STRONG",{});var jqt=s(MMe);x3r=r(jqt,"resnet"),jqt.forEach(t),$3r=r(sOe," \u2014 "),GY=n(sOe,"A",{href:!0});var Dqt=s(GY);k3r=r(Dqt,"TFResNetModel"),Dqt.forEach(t),S3r=r(sOe," (ResNet model)"),sOe.forEach(t),R3r=i(D),QM=n(D,"LI",{});var lOe=s(QM);EMe=n(lOe,"STRONG",{});var Gqt=s(EMe);P3r=r(Gqt,"roberta"),Gqt.forEach(t),B3r=r(lOe," \u2014 "),OY=n(lOe,"A",{href:!0});var Oqt=s(OY);I3r=r(Oqt,"TFRobertaModel"),Oqt.forEach(t),N3r=r(lOe," (RoBERTa model)"),lOe.forEach(t),q3r=i(D),UM=n(D,"LI",{});var iOe=s(UM);CMe=n(iOe,"STRONG",{});var Vqt=s(CMe);j3r=r(Vqt,"roformer"),Vqt.forEach(t),D3r=r(iOe," \u2014 "),VY=n(iOe,"A",{href:!0});var Xqt=s(VY);G3r=r(Xqt,"TFRoFormerModel"),Xqt.forEach(t),O3r=r(iOe," (RoFormer model)"),iOe.forEach(t),V3r=i(D),HM=n(D,"LI",{});var dOe=s(HM);wMe=n(dOe,"STRONG",{});var zqt=s(wMe);X3r=r(zqt,"segformer"),zqt.forEach(t),z3r=r(dOe," \u2014 "),XY=n(dOe,"A",{href:!0});var Wqt=s(XY);W3r=r(Wqt,"TFSegformerModel"),Wqt.forEach(t),Q3r=r(dOe," (SegFormer model)"),dOe.forEach(t),U3r=i(D),JM=n(D,"LI",{});var cOe=s(JM);AMe=n(cOe,"STRONG",{});var Qqt=s(AMe);H3r=r(Qqt,"speech_to_text"),Qqt.forEach(t),J3r=r(cOe," \u2014 "),zY=n(cOe,"A",{href:!0});var Uqt=s(zY);Y3r=r(Uqt,"TFSpeech2TextModel"),Uqt.forEach(t),K3r=r(cOe," (Speech2Text model)"),cOe.forEach(t),Z3r=i(D),YM=n(D,"LI",{});var fOe=s(YM);LMe=n(fOe,"STRONG",{});var Hqt=s(LMe);e5r=r(Hqt,"swin"),Hqt.forEach(t),o5r=r(fOe," \u2014 "),WY=n(fOe,"A",{href:!0});var Jqt=s(WY);r5r=r(Jqt,"TFSwinModel"),Jqt.forEach(t),t5r=r(fOe," (Swin Transformer model)"),fOe.forEach(t),a5r=i(D),KM=n(D,"LI",{});var mOe=s(KM);yMe=n(mOe,"STRONG",{});var Yqt=s(yMe);n5r=r(Yqt,"t5"),Yqt.forEach(t),s5r=r(mOe," \u2014 "),QY=n(mOe,"A",{href:!0});var Kqt=s(QY);l5r=r(Kqt,"TFT5Model"),Kqt.forEach(t),i5r=r(mOe," (T5 model)"),mOe.forEach(t),d5r=i(D),ZM=n(D,"LI",{});var gOe=s(ZM);xMe=n(gOe,"STRONG",{});var Zqt=s(xMe);c5r=r(Zqt,"tapas"),Zqt.forEach(t),f5r=r(gOe," \u2014 "),UY=n(gOe,"A",{href:!0});var ejt=s(UY);m5r=r(ejt,"TFTapasModel"),ejt.forEach(t),g5r=r(gOe," (TAPAS model)"),gOe.forEach(t),h5r=i(D),eE=n(D,"LI",{});var hOe=s(eE);$Me=n(hOe,"STRONG",{});var ojt=s($Me);p5r=r(ojt,"transfo-xl"),ojt.forEach(t),_5r=r(hOe," \u2014 "),HY=n(hOe,"A",{href:!0});var rjt=s(HY);u5r=r(rjt,"TFTransfoXLModel"),rjt.forEach(t),b5r=r(hOe," (Transformer-XL model)"),hOe.forEach(t),v5r=i(D),oE=n(D,"LI",{});var pOe=s(oE);kMe=n(pOe,"STRONG",{});var tjt=s(kMe);F5r=r(tjt,"vit"),tjt.forEach(t),T5r=r(pOe," \u2014 "),JY=n(pOe,"A",{href:!0});var ajt=s(JY);M5r=r(ajt,"TFViTModel"),ajt.forEach(t),E5r=r(pOe," (ViT model)"),pOe.forEach(t),C5r=i(D),rE=n(D,"LI",{});var _Oe=s(rE);SMe=n(_Oe,"STRONG",{});var njt=s(SMe);w5r=r(njt,"vit_mae"),njt.forEach(t),A5r=r(_Oe," \u2014 "),YY=n(_Oe,"A",{href:!0});var sjt=s(YY);L5r=r(sjt,"TFViTMAEModel"),sjt.forEach(t),y5r=r(_Oe," (ViTMAE model)"),_Oe.forEach(t),x5r=i(D),tE=n(D,"LI",{});var uOe=s(tE);RMe=n(uOe,"STRONG",{});var ljt=s(RMe);$5r=r(ljt,"wav2vec2"),ljt.forEach(t),k5r=r(uOe," \u2014 "),KY=n(uOe,"A",{href:!0});var ijt=s(KY);S5r=r(ijt,"TFWav2Vec2Model"),ijt.forEach(t),R5r=r(uOe," (Wav2Vec2 model)"),uOe.forEach(t),P5r=i(D),aE=n(D,"LI",{});var bOe=s(aE);PMe=n(bOe,"STRONG",{});var djt=s(PMe);B5r=r(djt,"xlm"),djt.forEach(t),I5r=r(bOe," \u2014 "),ZY=n(bOe,"A",{href:!0});var cjt=s(ZY);N5r=r(cjt,"TFXLMModel"),cjt.forEach(t),q5r=r(bOe," (XLM model)"),bOe.forEach(t),j5r=i(D),nE=n(D,"LI",{});var vOe=s(nE);BMe=n(vOe,"STRONG",{});var fjt=s(BMe);D5r=r(fjt,"xlm-roberta"),fjt.forEach(t),G5r=r(vOe," \u2014 "),eK=n(vOe,"A",{href:!0});var mjt=s(eK);O5r=r(mjt,"TFXLMRobertaModel"),mjt.forEach(t),V5r=r(vOe," (XLM-RoBERTa model)"),vOe.forEach(t),X5r=i(D),sE=n(D,"LI",{});var FOe=s(sE);IMe=n(FOe,"STRONG",{});var gjt=s(IMe);z5r=r(gjt,"xlnet"),gjt.forEach(t),W5r=r(FOe," \u2014 "),oK=n(FOe,"A",{href:!0});var hjt=s(oK);Q5r=r(hjt,"TFXLNetModel"),hjt.forEach(t),U5r=r(FOe," (XLNet model)"),FOe.forEach(t),D.forEach(t),H5r=i(Vl),T(lE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),BUe=i(f),Ac=n(f,"H2",{class:!0});var QJe=s(Ac);iE=n(QJe,"A",{id:!0,class:!0,href:!0});var pjt=s(iE);NMe=n(pjt,"SPAN",{});var _jt=s(NMe);T(n$.$$.fragment,_jt),_jt.forEach(t),pjt.forEach(t),J5r=i(QJe),qMe=n(QJe,"SPAN",{});var ujt=s(qMe);Y5r=r(ujt,"TFAutoModelForPreTraining"),ujt.forEach(t),QJe.forEach(t),IUe=i(f),nr=n(f,"DIV",{class:!0});var Xl=s(nr);T(s$.$$.fragment,Xl),K5r=i(Xl),Lc=n(Xl,"P",{});var $ne=s(Lc);Z5r=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rK=n($ne,"A",{href:!0});var bjt=s(rK);ewr=r(bjt,"from_pretrained()"),bjt.forEach(t),owr=r($ne," class method or the "),tK=n($ne,"A",{href:!0});var vjt=s(tK);rwr=r(vjt,"from_config()"),vjt.forEach(t),twr=r($ne,` class
method.`),$ne.forEach(t),awr=i(Xl),l$=n(Xl,"P",{});var UJe=s(l$);nwr=r(UJe,"This class cannot be instantiated directly using "),jMe=n(UJe,"CODE",{});var Fjt=s(jMe);swr=r(Fjt,"__init__()"),Fjt.forEach(t),lwr=r(UJe," (throws an error)."),UJe.forEach(t),iwr=i(Xl),jt=n(Xl,"DIV",{class:!0});var lL=s(jt);T(i$.$$.fragment,lL),dwr=i(lL),DMe=n(lL,"P",{});var Tjt=s(DMe);cwr=r(Tjt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tjt.forEach(t),fwr=i(lL),yc=n(lL,"P",{});var kne=s(yc);mwr=r(kne,`Note:
Loading a model from its configuration file does `),GMe=n(kne,"STRONG",{});var Mjt=s(GMe);gwr=r(Mjt,"not"),Mjt.forEach(t),hwr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(kne,"A",{href:!0});var Ejt=s(aK);pwr=r(Ejt,"from_pretrained()"),Ejt.forEach(t),_wr=r(kne," to load the model weights."),kne.forEach(t),uwr=i(lL),T(dE.$$.fragment,lL),lL.forEach(t),bwr=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(d$.$$.fragment,zl),vwr=i(zl),OMe=n(zl,"P",{});var Cjt=s(OMe);Fwr=r(Cjt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cjt.forEach(t),Twr=i(zl),un=n(zl,"P",{});var iL=s(un);Mwr=r(iL,"The model class to instantiate is selected based on the "),VMe=n(iL,"CODE",{});var wjt=s(VMe);Ewr=r(wjt,"model_type"),wjt.forEach(t),Cwr=r(iL,` property of the config object (either
passed as an argument or loaded from `),XMe=n(iL,"CODE",{});var Ajt=s(XMe);wwr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),Awr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(iL,"CODE",{});var Ljt=s(zMe);Lwr=r(Ljt,"pretrained_model_name_or_path"),Ljt.forEach(t),ywr=r(iL,":"),iL.forEach(t),xwr=i(zl),se=n(zl,"UL",{});var le=s(se);cE=n(le,"LI",{});var TOe=s(cE);WMe=n(TOe,"STRONG",{});var yjt=s(WMe);$wr=r(yjt,"albert"),yjt.forEach(t),kwr=r(TOe," \u2014 "),nK=n(TOe,"A",{href:!0});var xjt=s(nK);Swr=r(xjt,"TFAlbertForPreTraining"),xjt.forEach(t),Rwr=r(TOe," (ALBERT model)"),TOe.forEach(t),Pwr=i(le),fE=n(le,"LI",{});var MOe=s(fE);QMe=n(MOe,"STRONG",{});var $jt=s(QMe);Bwr=r($jt,"bart"),$jt.forEach(t),Iwr=r(MOe," \u2014 "),sK=n(MOe,"A",{href:!0});var kjt=s(sK);Nwr=r(kjt,"TFBartForConditionalGeneration"),kjt.forEach(t),qwr=r(MOe," (BART model)"),MOe.forEach(t),jwr=i(le),mE=n(le,"LI",{});var EOe=s(mE);UMe=n(EOe,"STRONG",{});var Sjt=s(UMe);Dwr=r(Sjt,"bert"),Sjt.forEach(t),Gwr=r(EOe," \u2014 "),lK=n(EOe,"A",{href:!0});var Rjt=s(lK);Owr=r(Rjt,"TFBertForPreTraining"),Rjt.forEach(t),Vwr=r(EOe," (BERT model)"),EOe.forEach(t),Xwr=i(le),gE=n(le,"LI",{});var COe=s(gE);HMe=n(COe,"STRONG",{});var Pjt=s(HMe);zwr=r(Pjt,"camembert"),Pjt.forEach(t),Wwr=r(COe," \u2014 "),iK=n(COe,"A",{href:!0});var Bjt=s(iK);Qwr=r(Bjt,"TFCamembertForMaskedLM"),Bjt.forEach(t),Uwr=r(COe," (CamemBERT model)"),COe.forEach(t),Hwr=i(le),hE=n(le,"LI",{});var wOe=s(hE);JMe=n(wOe,"STRONG",{});var Ijt=s(JMe);Jwr=r(Ijt,"ctrl"),Ijt.forEach(t),Ywr=r(wOe," \u2014 "),dK=n(wOe,"A",{href:!0});var Njt=s(dK);Kwr=r(Njt,"TFCTRLLMHeadModel"),Njt.forEach(t),Zwr=r(wOe," (CTRL model)"),wOe.forEach(t),eAr=i(le),pE=n(le,"LI",{});var AOe=s(pE);YMe=n(AOe,"STRONG",{});var qjt=s(YMe);oAr=r(qjt,"distilbert"),qjt.forEach(t),rAr=r(AOe," \u2014 "),cK=n(AOe,"A",{href:!0});var jjt=s(cK);tAr=r(jjt,"TFDistilBertForMaskedLM"),jjt.forEach(t),aAr=r(AOe," (DistilBERT model)"),AOe.forEach(t),nAr=i(le),_E=n(le,"LI",{});var LOe=s(_E);KMe=n(LOe,"STRONG",{});var Djt=s(KMe);sAr=r(Djt,"electra"),Djt.forEach(t),lAr=r(LOe," \u2014 "),fK=n(LOe,"A",{href:!0});var Gjt=s(fK);iAr=r(Gjt,"TFElectraForPreTraining"),Gjt.forEach(t),dAr=r(LOe," (ELECTRA model)"),LOe.forEach(t),cAr=i(le),uE=n(le,"LI",{});var yOe=s(uE);ZMe=n(yOe,"STRONG",{});var Ojt=s(ZMe);fAr=r(Ojt,"flaubert"),Ojt.forEach(t),mAr=r(yOe," \u2014 "),mK=n(yOe,"A",{href:!0});var Vjt=s(mK);gAr=r(Vjt,"TFFlaubertWithLMHeadModel"),Vjt.forEach(t),hAr=r(yOe," (FlauBERT model)"),yOe.forEach(t),pAr=i(le),bE=n(le,"LI",{});var xOe=s(bE);eEe=n(xOe,"STRONG",{});var Xjt=s(eEe);_Ar=r(Xjt,"funnel"),Xjt.forEach(t),uAr=r(xOe," \u2014 "),gK=n(xOe,"A",{href:!0});var zjt=s(gK);bAr=r(zjt,"TFFunnelForPreTraining"),zjt.forEach(t),vAr=r(xOe," (Funnel Transformer model)"),xOe.forEach(t),FAr=i(le),vE=n(le,"LI",{});var $Oe=s(vE);oEe=n($Oe,"STRONG",{});var Wjt=s(oEe);TAr=r(Wjt,"gpt2"),Wjt.forEach(t),MAr=r($Oe," \u2014 "),hK=n($Oe,"A",{href:!0});var Qjt=s(hK);EAr=r(Qjt,"TFGPT2LMHeadModel"),Qjt.forEach(t),CAr=r($Oe," (OpenAI GPT-2 model)"),$Oe.forEach(t),wAr=i(le),FE=n(le,"LI",{});var kOe=s(FE);rEe=n(kOe,"STRONG",{});var Ujt=s(rEe);AAr=r(Ujt,"layoutlm"),Ujt.forEach(t),LAr=r(kOe," \u2014 "),pK=n(kOe,"A",{href:!0});var Hjt=s(pK);yAr=r(Hjt,"TFLayoutLMForMaskedLM"),Hjt.forEach(t),xAr=r(kOe," (LayoutLM model)"),kOe.forEach(t),$Ar=i(le),TE=n(le,"LI",{});var SOe=s(TE);tEe=n(SOe,"STRONG",{});var Jjt=s(tEe);kAr=r(Jjt,"lxmert"),Jjt.forEach(t),SAr=r(SOe," \u2014 "),_K=n(SOe,"A",{href:!0});var Yjt=s(_K);RAr=r(Yjt,"TFLxmertForPreTraining"),Yjt.forEach(t),PAr=r(SOe," (LXMERT model)"),SOe.forEach(t),BAr=i(le),ME=n(le,"LI",{});var ROe=s(ME);aEe=n(ROe,"STRONG",{});var Kjt=s(aEe);IAr=r(Kjt,"mobilebert"),Kjt.forEach(t),NAr=r(ROe," \u2014 "),uK=n(ROe,"A",{href:!0});var Zjt=s(uK);qAr=r(Zjt,"TFMobileBertForPreTraining"),Zjt.forEach(t),jAr=r(ROe," (MobileBERT model)"),ROe.forEach(t),DAr=i(le),EE=n(le,"LI",{});var POe=s(EE);nEe=n(POe,"STRONG",{});var eDt=s(nEe);GAr=r(eDt,"mpnet"),eDt.forEach(t),OAr=r(POe," \u2014 "),bK=n(POe,"A",{href:!0});var oDt=s(bK);VAr=r(oDt,"TFMPNetForMaskedLM"),oDt.forEach(t),XAr=r(POe," (MPNet model)"),POe.forEach(t),zAr=i(le),CE=n(le,"LI",{});var BOe=s(CE);sEe=n(BOe,"STRONG",{});var rDt=s(sEe);WAr=r(rDt,"openai-gpt"),rDt.forEach(t),QAr=r(BOe," \u2014 "),vK=n(BOe,"A",{href:!0});var tDt=s(vK);UAr=r(tDt,"TFOpenAIGPTLMHeadModel"),tDt.forEach(t),HAr=r(BOe," (OpenAI GPT model)"),BOe.forEach(t),JAr=i(le),wE=n(le,"LI",{});var IOe=s(wE);lEe=n(IOe,"STRONG",{});var aDt=s(lEe);YAr=r(aDt,"roberta"),aDt.forEach(t),KAr=r(IOe," \u2014 "),FK=n(IOe,"A",{href:!0});var nDt=s(FK);ZAr=r(nDt,"TFRobertaForMaskedLM"),nDt.forEach(t),e7r=r(IOe," (RoBERTa model)"),IOe.forEach(t),o7r=i(le),AE=n(le,"LI",{});var NOe=s(AE);iEe=n(NOe,"STRONG",{});var sDt=s(iEe);r7r=r(sDt,"t5"),sDt.forEach(t),t7r=r(NOe," \u2014 "),TK=n(NOe,"A",{href:!0});var lDt=s(TK);a7r=r(lDt,"TFT5ForConditionalGeneration"),lDt.forEach(t),n7r=r(NOe," (T5 model)"),NOe.forEach(t),s7r=i(le),LE=n(le,"LI",{});var qOe=s(LE);dEe=n(qOe,"STRONG",{});var iDt=s(dEe);l7r=r(iDt,"tapas"),iDt.forEach(t),i7r=r(qOe," \u2014 "),MK=n(qOe,"A",{href:!0});var dDt=s(MK);d7r=r(dDt,"TFTapasForMaskedLM"),dDt.forEach(t),c7r=r(qOe," (TAPAS model)"),qOe.forEach(t),f7r=i(le),yE=n(le,"LI",{});var jOe=s(yE);cEe=n(jOe,"STRONG",{});var cDt=s(cEe);m7r=r(cDt,"transfo-xl"),cDt.forEach(t),g7r=r(jOe," \u2014 "),EK=n(jOe,"A",{href:!0});var fDt=s(EK);h7r=r(fDt,"TFTransfoXLLMHeadModel"),fDt.forEach(t),p7r=r(jOe," (Transformer-XL model)"),jOe.forEach(t),_7r=i(le),xE=n(le,"LI",{});var DOe=s(xE);fEe=n(DOe,"STRONG",{});var mDt=s(fEe);u7r=r(mDt,"vit_mae"),mDt.forEach(t),b7r=r(DOe," \u2014 "),CK=n(DOe,"A",{href:!0});var gDt=s(CK);v7r=r(gDt,"TFViTMAEForPreTraining"),gDt.forEach(t),F7r=r(DOe," (ViTMAE model)"),DOe.forEach(t),T7r=i(le),$E=n(le,"LI",{});var GOe=s($E);mEe=n(GOe,"STRONG",{});var hDt=s(mEe);M7r=r(hDt,"xlm"),hDt.forEach(t),E7r=r(GOe," \u2014 "),wK=n(GOe,"A",{href:!0});var pDt=s(wK);C7r=r(pDt,"TFXLMWithLMHeadModel"),pDt.forEach(t),w7r=r(GOe," (XLM model)"),GOe.forEach(t),A7r=i(le),kE=n(le,"LI",{});var OOe=s(kE);gEe=n(OOe,"STRONG",{});var _Dt=s(gEe);L7r=r(_Dt,"xlm-roberta"),_Dt.forEach(t),y7r=r(OOe," \u2014 "),AK=n(OOe,"A",{href:!0});var uDt=s(AK);x7r=r(uDt,"TFXLMRobertaForMaskedLM"),uDt.forEach(t),$7r=r(OOe," (XLM-RoBERTa model)"),OOe.forEach(t),k7r=i(le),SE=n(le,"LI",{});var VOe=s(SE);hEe=n(VOe,"STRONG",{});var bDt=s(hEe);S7r=r(bDt,"xlnet"),bDt.forEach(t),R7r=r(VOe," \u2014 "),LK=n(VOe,"A",{href:!0});var vDt=s(LK);P7r=r(vDt,"TFXLNetLMHeadModel"),vDt.forEach(t),B7r=r(VOe," (XLNet model)"),VOe.forEach(t),le.forEach(t),I7r=i(zl),T(RE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),NUe=i(f),xc=n(f,"H2",{class:!0});var HJe=s(xc);PE=n(HJe,"A",{id:!0,class:!0,href:!0});var FDt=s(PE);pEe=n(FDt,"SPAN",{});var TDt=s(pEe);T(c$.$$.fragment,TDt),TDt.forEach(t),FDt.forEach(t),N7r=i(HJe),_Ee=n(HJe,"SPAN",{});var MDt=s(_Ee);q7r=r(MDt,"TFAutoModelForCausalLM"),MDt.forEach(t),HJe.forEach(t),qUe=i(f),sr=n(f,"DIV",{class:!0});var Wl=s(sr);T(f$.$$.fragment,Wl),j7r=i(Wl),$c=n(Wl,"P",{});var Sne=s($c);D7r=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yK=n(Sne,"A",{href:!0});var EDt=s(yK);G7r=r(EDt,"from_pretrained()"),EDt.forEach(t),O7r=r(Sne," class method or the "),xK=n(Sne,"A",{href:!0});var CDt=s(xK);V7r=r(CDt,"from_config()"),CDt.forEach(t),X7r=r(Sne,` class
method.`),Sne.forEach(t),z7r=i(Wl),m$=n(Wl,"P",{});var JJe=s(m$);W7r=r(JJe,"This class cannot be instantiated directly using "),uEe=n(JJe,"CODE",{});var wDt=s(uEe);Q7r=r(wDt,"__init__()"),wDt.forEach(t),U7r=r(JJe," (throws an error)."),JJe.forEach(t),H7r=i(Wl),Dt=n(Wl,"DIV",{class:!0});var dL=s(Dt);T(g$.$$.fragment,dL),J7r=i(dL),bEe=n(dL,"P",{});var ADt=s(bEe);Y7r=r(ADt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ADt.forEach(t),K7r=i(dL),kc=n(dL,"P",{});var Rne=s(kc);Z7r=r(Rne,`Note:
Loading a model from its configuration file does `),vEe=n(Rne,"STRONG",{});var LDt=s(vEe);eLr=r(LDt,"not"),LDt.forEach(t),oLr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(Rne,"A",{href:!0});var yDt=s($K);rLr=r(yDt,"from_pretrained()"),yDt.forEach(t),tLr=r(Rne," to load the model weights."),Rne.forEach(t),aLr=i(dL),T(BE.$$.fragment,dL),dL.forEach(t),nLr=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(h$.$$.fragment,Ql),sLr=i(Ql),FEe=n(Ql,"P",{});var xDt=s(FEe);lLr=r(xDt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xDt.forEach(t),iLr=i(Ql),bn=n(Ql,"P",{});var cL=s(bn);dLr=r(cL,"The model class to instantiate is selected based on the "),TEe=n(cL,"CODE",{});var $Dt=s(TEe);cLr=r($Dt,"model_type"),$Dt.forEach(t),fLr=r(cL,` property of the config object (either
passed as an argument or loaded from `),MEe=n(cL,"CODE",{});var kDt=s(MEe);mLr=r(kDt,"pretrained_model_name_or_path"),kDt.forEach(t),gLr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(cL,"CODE",{});var SDt=s(EEe);hLr=r(SDt,"pretrained_model_name_or_path"),SDt.forEach(t),pLr=r(cL,":"),cL.forEach(t),_Lr=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);IE=n(Ce,"LI",{});var XOe=s(IE);CEe=n(XOe,"STRONG",{});var RDt=s(CEe);uLr=r(RDt,"bert"),RDt.forEach(t),bLr=r(XOe," \u2014 "),kK=n(XOe,"A",{href:!0});var PDt=s(kK);vLr=r(PDt,"TFBertLMHeadModel"),PDt.forEach(t),FLr=r(XOe," (BERT model)"),XOe.forEach(t),TLr=i(Ce),NE=n(Ce,"LI",{});var zOe=s(NE);wEe=n(zOe,"STRONG",{});var BDt=s(wEe);MLr=r(BDt,"camembert"),BDt.forEach(t),ELr=r(zOe," \u2014 "),SK=n(zOe,"A",{href:!0});var IDt=s(SK);CLr=r(IDt,"TFCamembertForCausalLM"),IDt.forEach(t),wLr=r(zOe," (CamemBERT model)"),zOe.forEach(t),ALr=i(Ce),qE=n(Ce,"LI",{});var WOe=s(qE);AEe=n(WOe,"STRONG",{});var NDt=s(AEe);LLr=r(NDt,"ctrl"),NDt.forEach(t),yLr=r(WOe," \u2014 "),RK=n(WOe,"A",{href:!0});var qDt=s(RK);xLr=r(qDt,"TFCTRLLMHeadModel"),qDt.forEach(t),$Lr=r(WOe," (CTRL model)"),WOe.forEach(t),kLr=i(Ce),jE=n(Ce,"LI",{});var QOe=s(jE);LEe=n(QOe,"STRONG",{});var jDt=s(LEe);SLr=r(jDt,"gpt2"),jDt.forEach(t),RLr=r(QOe," \u2014 "),PK=n(QOe,"A",{href:!0});var DDt=s(PK);PLr=r(DDt,"TFGPT2LMHeadModel"),DDt.forEach(t),BLr=r(QOe," (OpenAI GPT-2 model)"),QOe.forEach(t),ILr=i(Ce),DE=n(Ce,"LI",{});var UOe=s(DE);yEe=n(UOe,"STRONG",{});var GDt=s(yEe);NLr=r(GDt,"gptj"),GDt.forEach(t),qLr=r(UOe," \u2014 "),BK=n(UOe,"A",{href:!0});var ODt=s(BK);jLr=r(ODt,"TFGPTJForCausalLM"),ODt.forEach(t),DLr=r(UOe," (GPT-J model)"),UOe.forEach(t),GLr=i(Ce),GE=n(Ce,"LI",{});var HOe=s(GE);xEe=n(HOe,"STRONG",{});var VDt=s(xEe);OLr=r(VDt,"openai-gpt"),VDt.forEach(t),VLr=r(HOe," \u2014 "),IK=n(HOe,"A",{href:!0});var XDt=s(IK);XLr=r(XDt,"TFOpenAIGPTLMHeadModel"),XDt.forEach(t),zLr=r(HOe," (OpenAI GPT model)"),HOe.forEach(t),WLr=i(Ce),OE=n(Ce,"LI",{});var JOe=s(OE);$Ee=n(JOe,"STRONG",{});var zDt=s($Ee);QLr=r(zDt,"opt"),zDt.forEach(t),ULr=r(JOe," \u2014 "),NK=n(JOe,"A",{href:!0});var WDt=s(NK);HLr=r(WDt,"TFOPTForCausalLM"),WDt.forEach(t),JLr=r(JOe," (OPT model)"),JOe.forEach(t),YLr=i(Ce),VE=n(Ce,"LI",{});var YOe=s(VE);kEe=n(YOe,"STRONG",{});var QDt=s(kEe);KLr=r(QDt,"rembert"),QDt.forEach(t),ZLr=r(YOe," \u2014 "),qK=n(YOe,"A",{href:!0});var UDt=s(qK);eyr=r(UDt,"TFRemBertForCausalLM"),UDt.forEach(t),oyr=r(YOe," (RemBERT model)"),YOe.forEach(t),ryr=i(Ce),XE=n(Ce,"LI",{});var KOe=s(XE);SEe=n(KOe,"STRONG",{});var HDt=s(SEe);tyr=r(HDt,"roberta"),HDt.forEach(t),ayr=r(KOe," \u2014 "),jK=n(KOe,"A",{href:!0});var JDt=s(jK);nyr=r(JDt,"TFRobertaForCausalLM"),JDt.forEach(t),syr=r(KOe," (RoBERTa model)"),KOe.forEach(t),lyr=i(Ce),zE=n(Ce,"LI",{});var ZOe=s(zE);REe=n(ZOe,"STRONG",{});var YDt=s(REe);iyr=r(YDt,"roformer"),YDt.forEach(t),dyr=r(ZOe," \u2014 "),DK=n(ZOe,"A",{href:!0});var KDt=s(DK);cyr=r(KDt,"TFRoFormerForCausalLM"),KDt.forEach(t),fyr=r(ZOe," (RoFormer model)"),ZOe.forEach(t),myr=i(Ce),WE=n(Ce,"LI",{});var eVe=s(WE);PEe=n(eVe,"STRONG",{});var ZDt=s(PEe);gyr=r(ZDt,"transfo-xl"),ZDt.forEach(t),hyr=r(eVe," \u2014 "),GK=n(eVe,"A",{href:!0});var eGt=s(GK);pyr=r(eGt,"TFTransfoXLLMHeadModel"),eGt.forEach(t),_yr=r(eVe," (Transformer-XL model)"),eVe.forEach(t),uyr=i(Ce),QE=n(Ce,"LI",{});var oVe=s(QE);BEe=n(oVe,"STRONG",{});var oGt=s(BEe);byr=r(oGt,"xlm"),oGt.forEach(t),vyr=r(oVe," \u2014 "),OK=n(oVe,"A",{href:!0});var rGt=s(OK);Fyr=r(rGt,"TFXLMWithLMHeadModel"),rGt.forEach(t),Tyr=r(oVe," (XLM model)"),oVe.forEach(t),Myr=i(Ce),UE=n(Ce,"LI",{});var rVe=s(UE);IEe=n(rVe,"STRONG",{});var tGt=s(IEe);Eyr=r(tGt,"xlnet"),tGt.forEach(t),Cyr=r(rVe," \u2014 "),VK=n(rVe,"A",{href:!0});var aGt=s(VK);wyr=r(aGt,"TFXLNetLMHeadModel"),aGt.forEach(t),Ayr=r(rVe," (XLNet model)"),rVe.forEach(t),Ce.forEach(t),Lyr=i(Ql),T(HE.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),jUe=i(f),Sc=n(f,"H2",{class:!0});var YJe=s(Sc);JE=n(YJe,"A",{id:!0,class:!0,href:!0});var nGt=s(JE);NEe=n(nGt,"SPAN",{});var sGt=s(NEe);T(p$.$$.fragment,sGt),sGt.forEach(t),nGt.forEach(t),yyr=i(YJe),qEe=n(YJe,"SPAN",{});var lGt=s(qEe);xyr=r(lGt,"TFAutoModelForImageClassification"),lGt.forEach(t),YJe.forEach(t),DUe=i(f),lr=n(f,"DIV",{class:!0});var Ul=s(lr);T(_$.$$.fragment,Ul),$yr=i(Ul),Rc=n(Ul,"P",{});var Pne=s(Rc);kyr=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XK=n(Pne,"A",{href:!0});var iGt=s(XK);Syr=r(iGt,"from_pretrained()"),iGt.forEach(t),Ryr=r(Pne," class method or the "),zK=n(Pne,"A",{href:!0});var dGt=s(zK);Pyr=r(dGt,"from_config()"),dGt.forEach(t),Byr=r(Pne,` class
method.`),Pne.forEach(t),Iyr=i(Ul),u$=n(Ul,"P",{});var KJe=s(u$);Nyr=r(KJe,"This class cannot be instantiated directly using "),jEe=n(KJe,"CODE",{});var cGt=s(jEe);qyr=r(cGt,"__init__()"),cGt.forEach(t),jyr=r(KJe," (throws an error)."),KJe.forEach(t),Dyr=i(Ul),Gt=n(Ul,"DIV",{class:!0});var fL=s(Gt);T(b$.$$.fragment,fL),Gyr=i(fL),DEe=n(fL,"P",{});var fGt=s(DEe);Oyr=r(fGt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fGt.forEach(t),Vyr=i(fL),Pc=n(fL,"P",{});var Bne=s(Pc);Xyr=r(Bne,`Note:
Loading a model from its configuration file does `),GEe=n(Bne,"STRONG",{});var mGt=s(GEe);zyr=r(mGt,"not"),mGt.forEach(t),Wyr=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(Bne,"A",{href:!0});var gGt=s(WK);Qyr=r(gGt,"from_pretrained()"),gGt.forEach(t),Uyr=r(Bne," to load the model weights."),Bne.forEach(t),Hyr=i(fL),T(YE.$$.fragment,fL),fL.forEach(t),Jyr=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(v$.$$.fragment,Hl),Yyr=i(Hl),OEe=n(Hl,"P",{});var hGt=s(OEe);Kyr=r(hGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hGt.forEach(t),Zyr=i(Hl),vn=n(Hl,"P",{});var mL=s(vn);e9r=r(mL,"The model class to instantiate is selected based on the "),VEe=n(mL,"CODE",{});var pGt=s(VEe);o9r=r(pGt,"model_type"),pGt.forEach(t),r9r=r(mL,` property of the config object (either
passed as an argument or loaded from `),XEe=n(mL,"CODE",{});var _Gt=s(XEe);t9r=r(_Gt,"pretrained_model_name_or_path"),_Gt.forEach(t),a9r=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=n(mL,"CODE",{});var uGt=s(zEe);n9r=r(uGt,"pretrained_model_name_or_path"),uGt.forEach(t),s9r=r(mL,":"),mL.forEach(t),l9r=i(Hl),Ve=n(Hl,"UL",{});var Eo=s(Ve);KE=n(Eo,"LI",{});var tVe=s(KE);WEe=n(tVe,"STRONG",{});var bGt=s(WEe);i9r=r(bGt,"convnext"),bGt.forEach(t),d9r=r(tVe," \u2014 "),QK=n(tVe,"A",{href:!0});var vGt=s(QK);c9r=r(vGt,"TFConvNextForImageClassification"),vGt.forEach(t),f9r=r(tVe," (ConvNeXT model)"),tVe.forEach(t),m9r=i(Eo),ZE=n(Eo,"LI",{});var aVe=s(ZE);QEe=n(aVe,"STRONG",{});var FGt=s(QEe);g9r=r(FGt,"data2vec-vision"),FGt.forEach(t),h9r=r(aVe," \u2014 "),UK=n(aVe,"A",{href:!0});var TGt=s(UK);p9r=r(TGt,"TFData2VecVisionForImageClassification"),TGt.forEach(t),_9r=r(aVe," (Data2VecVision model)"),aVe.forEach(t),u9r=i(Eo),dl=n(Eo,"LI",{});var KR=s(dl);UEe=n(KR,"STRONG",{});var MGt=s(UEe);b9r=r(MGt,"deit"),MGt.forEach(t),v9r=r(KR," \u2014 "),HK=n(KR,"A",{href:!0});var EGt=s(HK);F9r=r(EGt,"TFDeiTForImageClassification"),EGt.forEach(t),T9r=r(KR," or "),JK=n(KR,"A",{href:!0});var CGt=s(JK);M9r=r(CGt,"TFDeiTForImageClassificationWithTeacher"),CGt.forEach(t),E9r=r(KR," (DeiT model)"),KR.forEach(t),C9r=i(Eo),e4=n(Eo,"LI",{});var nVe=s(e4);HEe=n(nVe,"STRONG",{});var wGt=s(HEe);w9r=r(wGt,"regnet"),wGt.forEach(t),A9r=r(nVe," \u2014 "),YK=n(nVe,"A",{href:!0});var AGt=s(YK);L9r=r(AGt,"TFRegNetForImageClassification"),AGt.forEach(t),y9r=r(nVe," (RegNet model)"),nVe.forEach(t),x9r=i(Eo),o4=n(Eo,"LI",{});var sVe=s(o4);JEe=n(sVe,"STRONG",{});var LGt=s(JEe);$9r=r(LGt,"resnet"),LGt.forEach(t),k9r=r(sVe," \u2014 "),KK=n(sVe,"A",{href:!0});var yGt=s(KK);S9r=r(yGt,"TFResNetForImageClassification"),yGt.forEach(t),R9r=r(sVe," (ResNet model)"),sVe.forEach(t),P9r=i(Eo),r4=n(Eo,"LI",{});var lVe=s(r4);YEe=n(lVe,"STRONG",{});var xGt=s(YEe);B9r=r(xGt,"segformer"),xGt.forEach(t),I9r=r(lVe," \u2014 "),ZK=n(lVe,"A",{href:!0});var $Gt=s(ZK);N9r=r($Gt,"TFSegformerForImageClassification"),$Gt.forEach(t),q9r=r(lVe," (SegFormer model)"),lVe.forEach(t),j9r=i(Eo),t4=n(Eo,"LI",{});var iVe=s(t4);KEe=n(iVe,"STRONG",{});var kGt=s(KEe);D9r=r(kGt,"swin"),kGt.forEach(t),G9r=r(iVe," \u2014 "),eZ=n(iVe,"A",{href:!0});var SGt=s(eZ);O9r=r(SGt,"TFSwinForImageClassification"),SGt.forEach(t),V9r=r(iVe," (Swin Transformer model)"),iVe.forEach(t),X9r=i(Eo),a4=n(Eo,"LI",{});var dVe=s(a4);ZEe=n(dVe,"STRONG",{});var RGt=s(ZEe);z9r=r(RGt,"vit"),RGt.forEach(t),W9r=r(dVe," \u2014 "),oZ=n(dVe,"A",{href:!0});var PGt=s(oZ);Q9r=r(PGt,"TFViTForImageClassification"),PGt.forEach(t),U9r=r(dVe," (ViT model)"),dVe.forEach(t),Eo.forEach(t),H9r=i(Hl),T(n4.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),GUe=i(f),Bc=n(f,"H2",{class:!0});var ZJe=s(Bc);s4=n(ZJe,"A",{id:!0,class:!0,href:!0});var BGt=s(s4);e4e=n(BGt,"SPAN",{});var IGt=s(e4e);T(F$.$$.fragment,IGt),IGt.forEach(t),BGt.forEach(t),J9r=i(ZJe),o4e=n(ZJe,"SPAN",{});var NGt=s(o4e);Y9r=r(NGt,"TFAutoModelForSemanticSegmentation"),NGt.forEach(t),ZJe.forEach(t),OUe=i(f),ir=n(f,"DIV",{class:!0});var Jl=s(ir);T(T$.$$.fragment,Jl),K9r=i(Jl),Ic=n(Jl,"P",{});var Ine=s(Ic);Z9r=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rZ=n(Ine,"A",{href:!0});var qGt=s(rZ);exr=r(qGt,"from_pretrained()"),qGt.forEach(t),oxr=r(Ine," class method or the "),tZ=n(Ine,"A",{href:!0});var jGt=s(tZ);rxr=r(jGt,"from_config()"),jGt.forEach(t),txr=r(Ine,` class
method.`),Ine.forEach(t),axr=i(Jl),M$=n(Jl,"P",{});var eYe=s(M$);nxr=r(eYe,"This class cannot be instantiated directly using "),r4e=n(eYe,"CODE",{});var DGt=s(r4e);sxr=r(DGt,"__init__()"),DGt.forEach(t),lxr=r(eYe," (throws an error)."),eYe.forEach(t),ixr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var gL=s(Ot);T(E$.$$.fragment,gL),dxr=i(gL),t4e=n(gL,"P",{});var GGt=s(t4e);cxr=r(GGt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GGt.forEach(t),fxr=i(gL),Nc=n(gL,"P",{});var Nne=s(Nc);mxr=r(Nne,`Note:
Loading a model from its configuration file does `),a4e=n(Nne,"STRONG",{});var OGt=s(a4e);gxr=r(OGt,"not"),OGt.forEach(t),hxr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(Nne,"A",{href:!0});var VGt=s(aZ);pxr=r(VGt,"from_pretrained()"),VGt.forEach(t),_xr=r(Nne," to load the model weights."),Nne.forEach(t),uxr=i(gL),T(l4.$$.fragment,gL),gL.forEach(t),bxr=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(C$.$$.fragment,Yl),vxr=i(Yl),n4e=n(Yl,"P",{});var XGt=s(n4e);Fxr=r(XGt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XGt.forEach(t),Txr=i(Yl),Fn=n(Yl,"P",{});var hL=s(Fn);Mxr=r(hL,"The model class to instantiate is selected based on the "),s4e=n(hL,"CODE",{});var zGt=s(s4e);Exr=r(zGt,"model_type"),zGt.forEach(t),Cxr=r(hL,` property of the config object (either
passed as an argument or loaded from `),l4e=n(hL,"CODE",{});var WGt=s(l4e);wxr=r(WGt,"pretrained_model_name_or_path"),WGt.forEach(t),Axr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(hL,"CODE",{});var QGt=s(i4e);Lxr=r(QGt,"pretrained_model_name_or_path"),QGt.forEach(t),yxr=r(hL,":"),hL.forEach(t),xxr=i(Yl),w$=n(Yl,"UL",{});var oYe=s(w$);i4=n(oYe,"LI",{});var cVe=s(i4);d4e=n(cVe,"STRONG",{});var UGt=s(d4e);$xr=r(UGt,"data2vec-vision"),UGt.forEach(t),kxr=r(cVe," \u2014 "),nZ=n(cVe,"A",{href:!0});var HGt=s(nZ);Sxr=r(HGt,"TFData2VecVisionForSemanticSegmentation"),HGt.forEach(t),Rxr=r(cVe," (Data2VecVision model)"),cVe.forEach(t),Pxr=i(oYe),d4=n(oYe,"LI",{});var fVe=s(d4);c4e=n(fVe,"STRONG",{});var JGt=s(c4e);Bxr=r(JGt,"segformer"),JGt.forEach(t),Ixr=r(fVe," \u2014 "),sZ=n(fVe,"A",{href:!0});var YGt=s(sZ);Nxr=r(YGt,"TFSegformerForSemanticSegmentation"),YGt.forEach(t),qxr=r(fVe," (SegFormer model)"),fVe.forEach(t),oYe.forEach(t),jxr=i(Yl),T(c4.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),VUe=i(f),qc=n(f,"H2",{class:!0});var rYe=s(qc);f4=n(rYe,"A",{id:!0,class:!0,href:!0});var KGt=s(f4);f4e=n(KGt,"SPAN",{});var ZGt=s(f4e);T(A$.$$.fragment,ZGt),ZGt.forEach(t),KGt.forEach(t),Dxr=i(rYe),m4e=n(rYe,"SPAN",{});var eOt=s(m4e);Gxr=r(eOt,"TFAutoModelForMaskedLM"),eOt.forEach(t),rYe.forEach(t),XUe=i(f),dr=n(f,"DIV",{class:!0});var Kl=s(dr);T(L$.$$.fragment,Kl),Oxr=i(Kl),jc=n(Kl,"P",{});var qne=s(jc);Vxr=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lZ=n(qne,"A",{href:!0});var oOt=s(lZ);Xxr=r(oOt,"from_pretrained()"),oOt.forEach(t),zxr=r(qne," class method or the "),iZ=n(qne,"A",{href:!0});var rOt=s(iZ);Wxr=r(rOt,"from_config()"),rOt.forEach(t),Qxr=r(qne,` class
method.`),qne.forEach(t),Uxr=i(Kl),y$=n(Kl,"P",{});var tYe=s(y$);Hxr=r(tYe,"This class cannot be instantiated directly using "),g4e=n(tYe,"CODE",{});var tOt=s(g4e);Jxr=r(tOt,"__init__()"),tOt.forEach(t),Yxr=r(tYe," (throws an error)."),tYe.forEach(t),Kxr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var pL=s(Vt);T(x$.$$.fragment,pL),Zxr=i(pL),h4e=n(pL,"P",{});var aOt=s(h4e);e$r=r(aOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aOt.forEach(t),o$r=i(pL),Dc=n(pL,"P",{});var jne=s(Dc);r$r=r(jne,`Note:
Loading a model from its configuration file does `),p4e=n(jne,"STRONG",{});var nOt=s(p4e);t$r=r(nOt,"not"),nOt.forEach(t),a$r=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(jne,"A",{href:!0});var sOt=s(dZ);n$r=r(sOt,"from_pretrained()"),sOt.forEach(t),s$r=r(jne," to load the model weights."),jne.forEach(t),l$r=i(pL),T(m4.$$.fragment,pL),pL.forEach(t),i$r=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T($$.$$.fragment,Zl),d$r=i(Zl),_4e=n(Zl,"P",{});var lOt=s(_4e);c$r=r(lOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lOt.forEach(t),f$r=i(Zl),Tn=n(Zl,"P",{});var _L=s(Tn);m$r=r(_L,"The model class to instantiate is selected based on the "),u4e=n(_L,"CODE",{});var iOt=s(u4e);g$r=r(iOt,"model_type"),iOt.forEach(t),h$r=r(_L,` property of the config object (either
passed as an argument or loaded from `),b4e=n(_L,"CODE",{});var dOt=s(b4e);p$r=r(dOt,"pretrained_model_name_or_path"),dOt.forEach(t),_$r=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(_L,"CODE",{});var cOt=s(v4e);u$r=r(cOt,"pretrained_model_name_or_path"),cOt.forEach(t),b$r=r(_L,":"),_L.forEach(t),v$r=i(Zl),ie=n(Zl,"UL",{});var ge=s(ie);g4=n(ge,"LI",{});var mVe=s(g4);F4e=n(mVe,"STRONG",{});var fOt=s(F4e);F$r=r(fOt,"albert"),fOt.forEach(t),T$r=r(mVe," \u2014 "),cZ=n(mVe,"A",{href:!0});var mOt=s(cZ);M$r=r(mOt,"TFAlbertForMaskedLM"),mOt.forEach(t),E$r=r(mVe," (ALBERT model)"),mVe.forEach(t),C$r=i(ge),h4=n(ge,"LI",{});var gVe=s(h4);T4e=n(gVe,"STRONG",{});var gOt=s(T4e);w$r=r(gOt,"bert"),gOt.forEach(t),A$r=r(gVe," \u2014 "),fZ=n(gVe,"A",{href:!0});var hOt=s(fZ);L$r=r(hOt,"TFBertForMaskedLM"),hOt.forEach(t),y$r=r(gVe," (BERT model)"),gVe.forEach(t),x$r=i(ge),p4=n(ge,"LI",{});var hVe=s(p4);M4e=n(hVe,"STRONG",{});var pOt=s(M4e);$$r=r(pOt,"camembert"),pOt.forEach(t),k$r=r(hVe," \u2014 "),mZ=n(hVe,"A",{href:!0});var _Ot=s(mZ);S$r=r(_Ot,"TFCamembertForMaskedLM"),_Ot.forEach(t),R$r=r(hVe," (CamemBERT model)"),hVe.forEach(t),P$r=i(ge),_4=n(ge,"LI",{});var pVe=s(_4);E4e=n(pVe,"STRONG",{});var uOt=s(E4e);B$r=r(uOt,"convbert"),uOt.forEach(t),I$r=r(pVe," \u2014 "),gZ=n(pVe,"A",{href:!0});var bOt=s(gZ);N$r=r(bOt,"TFConvBertForMaskedLM"),bOt.forEach(t),q$r=r(pVe," (ConvBERT model)"),pVe.forEach(t),j$r=i(ge),u4=n(ge,"LI",{});var _Ve=s(u4);C4e=n(_Ve,"STRONG",{});var vOt=s(C4e);D$r=r(vOt,"deberta"),vOt.forEach(t),G$r=r(_Ve," \u2014 "),hZ=n(_Ve,"A",{href:!0});var FOt=s(hZ);O$r=r(FOt,"TFDebertaForMaskedLM"),FOt.forEach(t),V$r=r(_Ve," (DeBERTa model)"),_Ve.forEach(t),X$r=i(ge),b4=n(ge,"LI",{});var uVe=s(b4);w4e=n(uVe,"STRONG",{});var TOt=s(w4e);z$r=r(TOt,"deberta-v2"),TOt.forEach(t),W$r=r(uVe," \u2014 "),pZ=n(uVe,"A",{href:!0});var MOt=s(pZ);Q$r=r(MOt,"TFDebertaV2ForMaskedLM"),MOt.forEach(t),U$r=r(uVe," (DeBERTa-v2 model)"),uVe.forEach(t),H$r=i(ge),v4=n(ge,"LI",{});var bVe=s(v4);A4e=n(bVe,"STRONG",{});var EOt=s(A4e);J$r=r(EOt,"distilbert"),EOt.forEach(t),Y$r=r(bVe," \u2014 "),_Z=n(bVe,"A",{href:!0});var COt=s(_Z);K$r=r(COt,"TFDistilBertForMaskedLM"),COt.forEach(t),Z$r=r(bVe," (DistilBERT model)"),bVe.forEach(t),ekr=i(ge),F4=n(ge,"LI",{});var vVe=s(F4);L4e=n(vVe,"STRONG",{});var wOt=s(L4e);okr=r(wOt,"electra"),wOt.forEach(t),rkr=r(vVe," \u2014 "),uZ=n(vVe,"A",{href:!0});var AOt=s(uZ);tkr=r(AOt,"TFElectraForMaskedLM"),AOt.forEach(t),akr=r(vVe," (ELECTRA model)"),vVe.forEach(t),nkr=i(ge),T4=n(ge,"LI",{});var FVe=s(T4);y4e=n(FVe,"STRONG",{});var LOt=s(y4e);skr=r(LOt,"flaubert"),LOt.forEach(t),lkr=r(FVe," \u2014 "),bZ=n(FVe,"A",{href:!0});var yOt=s(bZ);ikr=r(yOt,"TFFlaubertWithLMHeadModel"),yOt.forEach(t),dkr=r(FVe," (FlauBERT model)"),FVe.forEach(t),ckr=i(ge),M4=n(ge,"LI",{});var TVe=s(M4);x4e=n(TVe,"STRONG",{});var xOt=s(x4e);fkr=r(xOt,"funnel"),xOt.forEach(t),mkr=r(TVe," \u2014 "),vZ=n(TVe,"A",{href:!0});var $Ot=s(vZ);gkr=r($Ot,"TFFunnelForMaskedLM"),$Ot.forEach(t),hkr=r(TVe," (Funnel Transformer model)"),TVe.forEach(t),pkr=i(ge),E4=n(ge,"LI",{});var MVe=s(E4);$4e=n(MVe,"STRONG",{});var kOt=s($4e);_kr=r(kOt,"layoutlm"),kOt.forEach(t),ukr=r(MVe," \u2014 "),FZ=n(MVe,"A",{href:!0});var SOt=s(FZ);bkr=r(SOt,"TFLayoutLMForMaskedLM"),SOt.forEach(t),vkr=r(MVe," (LayoutLM model)"),MVe.forEach(t),Fkr=i(ge),C4=n(ge,"LI",{});var EVe=s(C4);k4e=n(EVe,"STRONG",{});var ROt=s(k4e);Tkr=r(ROt,"longformer"),ROt.forEach(t),Mkr=r(EVe," \u2014 "),TZ=n(EVe,"A",{href:!0});var POt=s(TZ);Ekr=r(POt,"TFLongformerForMaskedLM"),POt.forEach(t),Ckr=r(EVe," (Longformer model)"),EVe.forEach(t),wkr=i(ge),w4=n(ge,"LI",{});var CVe=s(w4);S4e=n(CVe,"STRONG",{});var BOt=s(S4e);Akr=r(BOt,"mobilebert"),BOt.forEach(t),Lkr=r(CVe," \u2014 "),MZ=n(CVe,"A",{href:!0});var IOt=s(MZ);ykr=r(IOt,"TFMobileBertForMaskedLM"),IOt.forEach(t),xkr=r(CVe," (MobileBERT model)"),CVe.forEach(t),$kr=i(ge),A4=n(ge,"LI",{});var wVe=s(A4);R4e=n(wVe,"STRONG",{});var NOt=s(R4e);kkr=r(NOt,"mpnet"),NOt.forEach(t),Skr=r(wVe," \u2014 "),EZ=n(wVe,"A",{href:!0});var qOt=s(EZ);Rkr=r(qOt,"TFMPNetForMaskedLM"),qOt.forEach(t),Pkr=r(wVe," (MPNet model)"),wVe.forEach(t),Bkr=i(ge),L4=n(ge,"LI",{});var AVe=s(L4);P4e=n(AVe,"STRONG",{});var jOt=s(P4e);Ikr=r(jOt,"rembert"),jOt.forEach(t),Nkr=r(AVe," \u2014 "),CZ=n(AVe,"A",{href:!0});var DOt=s(CZ);qkr=r(DOt,"TFRemBertForMaskedLM"),DOt.forEach(t),jkr=r(AVe," (RemBERT model)"),AVe.forEach(t),Dkr=i(ge),y4=n(ge,"LI",{});var LVe=s(y4);B4e=n(LVe,"STRONG",{});var GOt=s(B4e);Gkr=r(GOt,"roberta"),GOt.forEach(t),Okr=r(LVe," \u2014 "),wZ=n(LVe,"A",{href:!0});var OOt=s(wZ);Vkr=r(OOt,"TFRobertaForMaskedLM"),OOt.forEach(t),Xkr=r(LVe," (RoBERTa model)"),LVe.forEach(t),zkr=i(ge),x4=n(ge,"LI",{});var yVe=s(x4);I4e=n(yVe,"STRONG",{});var VOt=s(I4e);Wkr=r(VOt,"roformer"),VOt.forEach(t),Qkr=r(yVe," \u2014 "),AZ=n(yVe,"A",{href:!0});var XOt=s(AZ);Ukr=r(XOt,"TFRoFormerForMaskedLM"),XOt.forEach(t),Hkr=r(yVe," (RoFormer model)"),yVe.forEach(t),Jkr=i(ge),$4=n(ge,"LI",{});var xVe=s($4);N4e=n(xVe,"STRONG",{});var zOt=s(N4e);Ykr=r(zOt,"tapas"),zOt.forEach(t),Kkr=r(xVe," \u2014 "),LZ=n(xVe,"A",{href:!0});var WOt=s(LZ);Zkr=r(WOt,"TFTapasForMaskedLM"),WOt.forEach(t),eSr=r(xVe," (TAPAS model)"),xVe.forEach(t),oSr=i(ge),k4=n(ge,"LI",{});var $Ve=s(k4);q4e=n($Ve,"STRONG",{});var QOt=s(q4e);rSr=r(QOt,"xlm"),QOt.forEach(t),tSr=r($Ve," \u2014 "),yZ=n($Ve,"A",{href:!0});var UOt=s(yZ);aSr=r(UOt,"TFXLMWithLMHeadModel"),UOt.forEach(t),nSr=r($Ve," (XLM model)"),$Ve.forEach(t),sSr=i(ge),S4=n(ge,"LI",{});var kVe=s(S4);j4e=n(kVe,"STRONG",{});var HOt=s(j4e);lSr=r(HOt,"xlm-roberta"),HOt.forEach(t),iSr=r(kVe," \u2014 "),xZ=n(kVe,"A",{href:!0});var JOt=s(xZ);dSr=r(JOt,"TFXLMRobertaForMaskedLM"),JOt.forEach(t),cSr=r(kVe," (XLM-RoBERTa model)"),kVe.forEach(t),ge.forEach(t),fSr=i(Zl),T(R4.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),zUe=i(f),Gc=n(f,"H2",{class:!0});var aYe=s(Gc);P4=n(aYe,"A",{id:!0,class:!0,href:!0});var YOt=s(P4);D4e=n(YOt,"SPAN",{});var KOt=s(D4e);T(k$.$$.fragment,KOt),KOt.forEach(t),YOt.forEach(t),mSr=i(aYe),G4e=n(aYe,"SPAN",{});var ZOt=s(G4e);gSr=r(ZOt,"TFAutoModelForSeq2SeqLM"),ZOt.forEach(t),aYe.forEach(t),WUe=i(f),cr=n(f,"DIV",{class:!0});var ei=s(cr);T(S$.$$.fragment,ei),hSr=i(ei),Oc=n(ei,"P",{});var Dne=s(Oc);pSr=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=n(Dne,"A",{href:!0});var eVt=s($Z);_Sr=r(eVt,"from_pretrained()"),eVt.forEach(t),uSr=r(Dne," class method or the "),kZ=n(Dne,"A",{href:!0});var oVt=s(kZ);bSr=r(oVt,"from_config()"),oVt.forEach(t),vSr=r(Dne,` class
method.`),Dne.forEach(t),FSr=i(ei),R$=n(ei,"P",{});var nYe=s(R$);TSr=r(nYe,"This class cannot be instantiated directly using "),O4e=n(nYe,"CODE",{});var rVt=s(O4e);MSr=r(rVt,"__init__()"),rVt.forEach(t),ESr=r(nYe," (throws an error)."),nYe.forEach(t),CSr=i(ei),Xt=n(ei,"DIV",{class:!0});var uL=s(Xt);T(P$.$$.fragment,uL),wSr=i(uL),V4e=n(uL,"P",{});var tVt=s(V4e);ASr=r(tVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tVt.forEach(t),LSr=i(uL),Vc=n(uL,"P",{});var Gne=s(Vc);ySr=r(Gne,`Note:
Loading a model from its configuration file does `),X4e=n(Gne,"STRONG",{});var aVt=s(X4e);xSr=r(aVt,"not"),aVt.forEach(t),$Sr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(Gne,"A",{href:!0});var nVt=s(SZ);kSr=r(nVt,"from_pretrained()"),nVt.forEach(t),SSr=r(Gne," to load the model weights."),Gne.forEach(t),RSr=i(uL),T(B4.$$.fragment,uL),uL.forEach(t),PSr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(B$.$$.fragment,oi),BSr=i(oi),z4e=n(oi,"P",{});var sVt=s(z4e);ISr=r(sVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sVt.forEach(t),NSr=i(oi),Mn=n(oi,"P",{});var bL=s(Mn);qSr=r(bL,"The model class to instantiate is selected based on the "),W4e=n(bL,"CODE",{});var lVt=s(W4e);jSr=r(lVt,"model_type"),lVt.forEach(t),DSr=r(bL,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(bL,"CODE",{});var iVt=s(Q4e);GSr=r(iVt,"pretrained_model_name_or_path"),iVt.forEach(t),OSr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=n(bL,"CODE",{});var dVt=s(U4e);VSr=r(dVt,"pretrained_model_name_or_path"),dVt.forEach(t),XSr=r(bL,":"),bL.forEach(t),zSr=i(oi),ye=n(oi,"UL",{});var Ie=s(ye);I4=n(Ie,"LI",{});var SVe=s(I4);H4e=n(SVe,"STRONG",{});var cVt=s(H4e);WSr=r(cVt,"bart"),cVt.forEach(t),QSr=r(SVe," \u2014 "),RZ=n(SVe,"A",{href:!0});var fVt=s(RZ);USr=r(fVt,"TFBartForConditionalGeneration"),fVt.forEach(t),HSr=r(SVe," (BART model)"),SVe.forEach(t),JSr=i(Ie),N4=n(Ie,"LI",{});var RVe=s(N4);J4e=n(RVe,"STRONG",{});var mVt=s(J4e);YSr=r(mVt,"blenderbot"),mVt.forEach(t),KSr=r(RVe," \u2014 "),PZ=n(RVe,"A",{href:!0});var gVt=s(PZ);ZSr=r(gVt,"TFBlenderbotForConditionalGeneration"),gVt.forEach(t),eRr=r(RVe," (Blenderbot model)"),RVe.forEach(t),oRr=i(Ie),q4=n(Ie,"LI",{});var PVe=s(q4);Y4e=n(PVe,"STRONG",{});var hVt=s(Y4e);rRr=r(hVt,"blenderbot-small"),hVt.forEach(t),tRr=r(PVe," \u2014 "),BZ=n(PVe,"A",{href:!0});var pVt=s(BZ);aRr=r(pVt,"TFBlenderbotSmallForConditionalGeneration"),pVt.forEach(t),nRr=r(PVe," (BlenderbotSmall model)"),PVe.forEach(t),sRr=i(Ie),j4=n(Ie,"LI",{});var BVe=s(j4);K4e=n(BVe,"STRONG",{});var _Vt=s(K4e);lRr=r(_Vt,"encoder-decoder"),_Vt.forEach(t),iRr=r(BVe," \u2014 "),IZ=n(BVe,"A",{href:!0});var uVt=s(IZ);dRr=r(uVt,"TFEncoderDecoderModel"),uVt.forEach(t),cRr=r(BVe," (Encoder decoder model)"),BVe.forEach(t),fRr=i(Ie),D4=n(Ie,"LI",{});var IVe=s(D4);Z4e=n(IVe,"STRONG",{});var bVt=s(Z4e);mRr=r(bVt,"led"),bVt.forEach(t),gRr=r(IVe," \u2014 "),NZ=n(IVe,"A",{href:!0});var vVt=s(NZ);hRr=r(vVt,"TFLEDForConditionalGeneration"),vVt.forEach(t),pRr=r(IVe," (LED model)"),IVe.forEach(t),_Rr=i(Ie),G4=n(Ie,"LI",{});var NVe=s(G4);eCe=n(NVe,"STRONG",{});var FVt=s(eCe);uRr=r(FVt,"marian"),FVt.forEach(t),bRr=r(NVe," \u2014 "),qZ=n(NVe,"A",{href:!0});var TVt=s(qZ);vRr=r(TVt,"TFMarianMTModel"),TVt.forEach(t),FRr=r(NVe," (Marian model)"),NVe.forEach(t),TRr=i(Ie),O4=n(Ie,"LI",{});var qVe=s(O4);oCe=n(qVe,"STRONG",{});var MVt=s(oCe);MRr=r(MVt,"mbart"),MVt.forEach(t),ERr=r(qVe," \u2014 "),jZ=n(qVe,"A",{href:!0});var EVt=s(jZ);CRr=r(EVt,"TFMBartForConditionalGeneration"),EVt.forEach(t),wRr=r(qVe," (mBART model)"),qVe.forEach(t),ARr=i(Ie),V4=n(Ie,"LI",{});var jVe=s(V4);rCe=n(jVe,"STRONG",{});var CVt=s(rCe);LRr=r(CVt,"mt5"),CVt.forEach(t),yRr=r(jVe," \u2014 "),DZ=n(jVe,"A",{href:!0});var wVt=s(DZ);xRr=r(wVt,"TFMT5ForConditionalGeneration"),wVt.forEach(t),$Rr=r(jVe," (MT5 model)"),jVe.forEach(t),kRr=i(Ie),X4=n(Ie,"LI",{});var DVe=s(X4);tCe=n(DVe,"STRONG",{});var AVt=s(tCe);SRr=r(AVt,"pegasus"),AVt.forEach(t),RRr=r(DVe," \u2014 "),GZ=n(DVe,"A",{href:!0});var LVt=s(GZ);PRr=r(LVt,"TFPegasusForConditionalGeneration"),LVt.forEach(t),BRr=r(DVe," (Pegasus model)"),DVe.forEach(t),IRr=i(Ie),z4=n(Ie,"LI",{});var GVe=s(z4);aCe=n(GVe,"STRONG",{});var yVt=s(aCe);NRr=r(yVt,"t5"),yVt.forEach(t),qRr=r(GVe," \u2014 "),OZ=n(GVe,"A",{href:!0});var xVt=s(OZ);jRr=r(xVt,"TFT5ForConditionalGeneration"),xVt.forEach(t),DRr=r(GVe," (T5 model)"),GVe.forEach(t),Ie.forEach(t),GRr=i(oi),T(W4.$$.fragment,oi),oi.forEach(t),ei.forEach(t),QUe=i(f),Xc=n(f,"H2",{class:!0});var sYe=s(Xc);Q4=n(sYe,"A",{id:!0,class:!0,href:!0});var $Vt=s(Q4);nCe=n($Vt,"SPAN",{});var kVt=s(nCe);T(I$.$$.fragment,kVt),kVt.forEach(t),$Vt.forEach(t),ORr=i(sYe),sCe=n(sYe,"SPAN",{});var SVt=s(sCe);VRr=r(SVt,"TFAutoModelForSequenceClassification"),SVt.forEach(t),sYe.forEach(t),UUe=i(f),fr=n(f,"DIV",{class:!0});var ri=s(fr);T(N$.$$.fragment,ri),XRr=i(ri),zc=n(ri,"P",{});var One=s(zc);zRr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=n(One,"A",{href:!0});var RVt=s(VZ);WRr=r(RVt,"from_pretrained()"),RVt.forEach(t),QRr=r(One," class method or the "),XZ=n(One,"A",{href:!0});var PVt=s(XZ);URr=r(PVt,"from_config()"),PVt.forEach(t),HRr=r(One,` class
method.`),One.forEach(t),JRr=i(ri),q$=n(ri,"P",{});var lYe=s(q$);YRr=r(lYe,"This class cannot be instantiated directly using "),lCe=n(lYe,"CODE",{});var BVt=s(lCe);KRr=r(BVt,"__init__()"),BVt.forEach(t),ZRr=r(lYe," (throws an error)."),lYe.forEach(t),ePr=i(ri),zt=n(ri,"DIV",{class:!0});var vL=s(zt);T(j$.$$.fragment,vL),oPr=i(vL),iCe=n(vL,"P",{});var IVt=s(iCe);rPr=r(IVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IVt.forEach(t),tPr=i(vL),Wc=n(vL,"P",{});var Vne=s(Wc);aPr=r(Vne,`Note:
Loading a model from its configuration file does `),dCe=n(Vne,"STRONG",{});var NVt=s(dCe);nPr=r(NVt,"not"),NVt.forEach(t),sPr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(Vne,"A",{href:!0});var qVt=s(zZ);lPr=r(qVt,"from_pretrained()"),qVt.forEach(t),iPr=r(Vne," to load the model weights."),Vne.forEach(t),dPr=i(vL),T(U4.$$.fragment,vL),vL.forEach(t),cPr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(D$.$$.fragment,ti),fPr=i(ti),cCe=n(ti,"P",{});var jVt=s(cCe);mPr=r(jVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jVt.forEach(t),gPr=i(ti),En=n(ti,"P",{});var FL=s(En);hPr=r(FL,"The model class to instantiate is selected based on the "),fCe=n(FL,"CODE",{});var DVt=s(fCe);pPr=r(DVt,"model_type"),DVt.forEach(t),_Pr=r(FL,` property of the config object (either
passed as an argument or loaded from `),mCe=n(FL,"CODE",{});var GVt=s(mCe);uPr=r(GVt,"pretrained_model_name_or_path"),GVt.forEach(t),bPr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=n(FL,"CODE",{});var OVt=s(gCe);vPr=r(OVt,"pretrained_model_name_or_path"),OVt.forEach(t),FPr=r(FL,":"),FL.forEach(t),TPr=i(ti),te=n(ti,"UL",{});var ne=s(te);H4=n(ne,"LI",{});var OVe=s(H4);hCe=n(OVe,"STRONG",{});var VVt=s(hCe);MPr=r(VVt,"albert"),VVt.forEach(t),EPr=r(OVe," \u2014 "),WZ=n(OVe,"A",{href:!0});var XVt=s(WZ);CPr=r(XVt,"TFAlbertForSequenceClassification"),XVt.forEach(t),wPr=r(OVe," (ALBERT model)"),OVe.forEach(t),APr=i(ne),J4=n(ne,"LI",{});var VVe=s(J4);pCe=n(VVe,"STRONG",{});var zVt=s(pCe);LPr=r(zVt,"bert"),zVt.forEach(t),yPr=r(VVe," \u2014 "),QZ=n(VVe,"A",{href:!0});var WVt=s(QZ);xPr=r(WVt,"TFBertForSequenceClassification"),WVt.forEach(t),$Pr=r(VVe," (BERT model)"),VVe.forEach(t),kPr=i(ne),Y4=n(ne,"LI",{});var XVe=s(Y4);_Ce=n(XVe,"STRONG",{});var QVt=s(_Ce);SPr=r(QVt,"camembert"),QVt.forEach(t),RPr=r(XVe," \u2014 "),UZ=n(XVe,"A",{href:!0});var UVt=s(UZ);PPr=r(UVt,"TFCamembertForSequenceClassification"),UVt.forEach(t),BPr=r(XVe," (CamemBERT model)"),XVe.forEach(t),IPr=i(ne),K4=n(ne,"LI",{});var zVe=s(K4);uCe=n(zVe,"STRONG",{});var HVt=s(uCe);NPr=r(HVt,"convbert"),HVt.forEach(t),qPr=r(zVe," \u2014 "),HZ=n(zVe,"A",{href:!0});var JVt=s(HZ);jPr=r(JVt,"TFConvBertForSequenceClassification"),JVt.forEach(t),DPr=r(zVe," (ConvBERT model)"),zVe.forEach(t),GPr=i(ne),Z4=n(ne,"LI",{});var WVe=s(Z4);bCe=n(WVe,"STRONG",{});var YVt=s(bCe);OPr=r(YVt,"ctrl"),YVt.forEach(t),VPr=r(WVe," \u2014 "),JZ=n(WVe,"A",{href:!0});var KVt=s(JZ);XPr=r(KVt,"TFCTRLForSequenceClassification"),KVt.forEach(t),zPr=r(WVe," (CTRL model)"),WVe.forEach(t),WPr=i(ne),eC=n(ne,"LI",{});var QVe=s(eC);vCe=n(QVe,"STRONG",{});var ZVt=s(vCe);QPr=r(ZVt,"deberta"),ZVt.forEach(t),UPr=r(QVe," \u2014 "),YZ=n(QVe,"A",{href:!0});var eXt=s(YZ);HPr=r(eXt,"TFDebertaForSequenceClassification"),eXt.forEach(t),JPr=r(QVe," (DeBERTa model)"),QVe.forEach(t),YPr=i(ne),oC=n(ne,"LI",{});var UVe=s(oC);FCe=n(UVe,"STRONG",{});var oXt=s(FCe);KPr=r(oXt,"deberta-v2"),oXt.forEach(t),ZPr=r(UVe," \u2014 "),KZ=n(UVe,"A",{href:!0});var rXt=s(KZ);eBr=r(rXt,"TFDebertaV2ForSequenceClassification"),rXt.forEach(t),oBr=r(UVe," (DeBERTa-v2 model)"),UVe.forEach(t),rBr=i(ne),rC=n(ne,"LI",{});var HVe=s(rC);TCe=n(HVe,"STRONG",{});var tXt=s(TCe);tBr=r(tXt,"distilbert"),tXt.forEach(t),aBr=r(HVe," \u2014 "),ZZ=n(HVe,"A",{href:!0});var aXt=s(ZZ);nBr=r(aXt,"TFDistilBertForSequenceClassification"),aXt.forEach(t),sBr=r(HVe," (DistilBERT model)"),HVe.forEach(t),lBr=i(ne),tC=n(ne,"LI",{});var JVe=s(tC);MCe=n(JVe,"STRONG",{});var nXt=s(MCe);iBr=r(nXt,"electra"),nXt.forEach(t),dBr=r(JVe," \u2014 "),eee=n(JVe,"A",{href:!0});var sXt=s(eee);cBr=r(sXt,"TFElectraForSequenceClassification"),sXt.forEach(t),fBr=r(JVe," (ELECTRA model)"),JVe.forEach(t),mBr=i(ne),aC=n(ne,"LI",{});var YVe=s(aC);ECe=n(YVe,"STRONG",{});var lXt=s(ECe);gBr=r(lXt,"flaubert"),lXt.forEach(t),hBr=r(YVe," \u2014 "),oee=n(YVe,"A",{href:!0});var iXt=s(oee);pBr=r(iXt,"TFFlaubertForSequenceClassification"),iXt.forEach(t),_Br=r(YVe," (FlauBERT model)"),YVe.forEach(t),uBr=i(ne),nC=n(ne,"LI",{});var KVe=s(nC);CCe=n(KVe,"STRONG",{});var dXt=s(CCe);bBr=r(dXt,"funnel"),dXt.forEach(t),vBr=r(KVe," \u2014 "),ree=n(KVe,"A",{href:!0});var cXt=s(ree);FBr=r(cXt,"TFFunnelForSequenceClassification"),cXt.forEach(t),TBr=r(KVe," (Funnel Transformer model)"),KVe.forEach(t),MBr=i(ne),sC=n(ne,"LI",{});var ZVe=s(sC);wCe=n(ZVe,"STRONG",{});var fXt=s(wCe);EBr=r(fXt,"gpt2"),fXt.forEach(t),CBr=r(ZVe," \u2014 "),tee=n(ZVe,"A",{href:!0});var mXt=s(tee);wBr=r(mXt,"TFGPT2ForSequenceClassification"),mXt.forEach(t),ABr=r(ZVe," (OpenAI GPT-2 model)"),ZVe.forEach(t),LBr=i(ne),lC=n(ne,"LI",{});var eXe=s(lC);ACe=n(eXe,"STRONG",{});var gXt=s(ACe);yBr=r(gXt,"gptj"),gXt.forEach(t),xBr=r(eXe," \u2014 "),aee=n(eXe,"A",{href:!0});var hXt=s(aee);$Br=r(hXt,"TFGPTJForSequenceClassification"),hXt.forEach(t),kBr=r(eXe," (GPT-J model)"),eXe.forEach(t),SBr=i(ne),iC=n(ne,"LI",{});var oXe=s(iC);LCe=n(oXe,"STRONG",{});var pXt=s(LCe);RBr=r(pXt,"layoutlm"),pXt.forEach(t),PBr=r(oXe," \u2014 "),nee=n(oXe,"A",{href:!0});var _Xt=s(nee);BBr=r(_Xt,"TFLayoutLMForSequenceClassification"),_Xt.forEach(t),IBr=r(oXe," (LayoutLM model)"),oXe.forEach(t),NBr=i(ne),dC=n(ne,"LI",{});var rXe=s(dC);yCe=n(rXe,"STRONG",{});var uXt=s(yCe);qBr=r(uXt,"longformer"),uXt.forEach(t),jBr=r(rXe," \u2014 "),see=n(rXe,"A",{href:!0});var bXt=s(see);DBr=r(bXt,"TFLongformerForSequenceClassification"),bXt.forEach(t),GBr=r(rXe," (Longformer model)"),rXe.forEach(t),OBr=i(ne),cC=n(ne,"LI",{});var tXe=s(cC);xCe=n(tXe,"STRONG",{});var vXt=s(xCe);VBr=r(vXt,"mobilebert"),vXt.forEach(t),XBr=r(tXe," \u2014 "),lee=n(tXe,"A",{href:!0});var FXt=s(lee);zBr=r(FXt,"TFMobileBertForSequenceClassification"),FXt.forEach(t),WBr=r(tXe," (MobileBERT model)"),tXe.forEach(t),QBr=i(ne),fC=n(ne,"LI",{});var aXe=s(fC);$Ce=n(aXe,"STRONG",{});var TXt=s($Ce);UBr=r(TXt,"mpnet"),TXt.forEach(t),HBr=r(aXe," \u2014 "),iee=n(aXe,"A",{href:!0});var MXt=s(iee);JBr=r(MXt,"TFMPNetForSequenceClassification"),MXt.forEach(t),YBr=r(aXe," (MPNet model)"),aXe.forEach(t),KBr=i(ne),mC=n(ne,"LI",{});var nXe=s(mC);kCe=n(nXe,"STRONG",{});var EXt=s(kCe);ZBr=r(EXt,"openai-gpt"),EXt.forEach(t),eIr=r(nXe," \u2014 "),dee=n(nXe,"A",{href:!0});var CXt=s(dee);oIr=r(CXt,"TFOpenAIGPTForSequenceClassification"),CXt.forEach(t),rIr=r(nXe," (OpenAI GPT model)"),nXe.forEach(t),tIr=i(ne),gC=n(ne,"LI",{});var sXe=s(gC);SCe=n(sXe,"STRONG",{});var wXt=s(SCe);aIr=r(wXt,"rembert"),wXt.forEach(t),nIr=r(sXe," \u2014 "),cee=n(sXe,"A",{href:!0});var AXt=s(cee);sIr=r(AXt,"TFRemBertForSequenceClassification"),AXt.forEach(t),lIr=r(sXe," (RemBERT model)"),sXe.forEach(t),iIr=i(ne),hC=n(ne,"LI",{});var lXe=s(hC);RCe=n(lXe,"STRONG",{});var LXt=s(RCe);dIr=r(LXt,"roberta"),LXt.forEach(t),cIr=r(lXe," \u2014 "),fee=n(lXe,"A",{href:!0});var yXt=s(fee);fIr=r(yXt,"TFRobertaForSequenceClassification"),yXt.forEach(t),mIr=r(lXe," (RoBERTa model)"),lXe.forEach(t),gIr=i(ne),pC=n(ne,"LI",{});var iXe=s(pC);PCe=n(iXe,"STRONG",{});var xXt=s(PCe);hIr=r(xXt,"roformer"),xXt.forEach(t),pIr=r(iXe," \u2014 "),mee=n(iXe,"A",{href:!0});var $Xt=s(mee);_Ir=r($Xt,"TFRoFormerForSequenceClassification"),$Xt.forEach(t),uIr=r(iXe," (RoFormer model)"),iXe.forEach(t),bIr=i(ne),_C=n(ne,"LI",{});var dXe=s(_C);BCe=n(dXe,"STRONG",{});var kXt=s(BCe);vIr=r(kXt,"tapas"),kXt.forEach(t),FIr=r(dXe," \u2014 "),gee=n(dXe,"A",{href:!0});var SXt=s(gee);TIr=r(SXt,"TFTapasForSequenceClassification"),SXt.forEach(t),MIr=r(dXe," (TAPAS model)"),dXe.forEach(t),EIr=i(ne),uC=n(ne,"LI",{});var cXe=s(uC);ICe=n(cXe,"STRONG",{});var RXt=s(ICe);CIr=r(RXt,"transfo-xl"),RXt.forEach(t),wIr=r(cXe," \u2014 "),hee=n(cXe,"A",{href:!0});var PXt=s(hee);AIr=r(PXt,"TFTransfoXLForSequenceClassification"),PXt.forEach(t),LIr=r(cXe," (Transformer-XL model)"),cXe.forEach(t),yIr=i(ne),bC=n(ne,"LI",{});var fXe=s(bC);NCe=n(fXe,"STRONG",{});var BXt=s(NCe);xIr=r(BXt,"xlm"),BXt.forEach(t),$Ir=r(fXe," \u2014 "),pee=n(fXe,"A",{href:!0});var IXt=s(pee);kIr=r(IXt,"TFXLMForSequenceClassification"),IXt.forEach(t),SIr=r(fXe," (XLM model)"),fXe.forEach(t),RIr=i(ne),vC=n(ne,"LI",{});var mXe=s(vC);qCe=n(mXe,"STRONG",{});var NXt=s(qCe);PIr=r(NXt,"xlm-roberta"),NXt.forEach(t),BIr=r(mXe," \u2014 "),_ee=n(mXe,"A",{href:!0});var qXt=s(_ee);IIr=r(qXt,"TFXLMRobertaForSequenceClassification"),qXt.forEach(t),NIr=r(mXe," (XLM-RoBERTa model)"),mXe.forEach(t),qIr=i(ne),FC=n(ne,"LI",{});var gXe=s(FC);jCe=n(gXe,"STRONG",{});var jXt=s(jCe);jIr=r(jXt,"xlnet"),jXt.forEach(t),DIr=r(gXe," \u2014 "),uee=n(gXe,"A",{href:!0});var DXt=s(uee);GIr=r(DXt,"TFXLNetForSequenceClassification"),DXt.forEach(t),OIr=r(gXe," (XLNet model)"),gXe.forEach(t),ne.forEach(t),VIr=i(ti),T(TC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),HUe=i(f),Qc=n(f,"H2",{class:!0});var iYe=s(Qc);MC=n(iYe,"A",{id:!0,class:!0,href:!0});var GXt=s(MC);DCe=n(GXt,"SPAN",{});var OXt=s(DCe);T(G$.$$.fragment,OXt),OXt.forEach(t),GXt.forEach(t),XIr=i(iYe),GCe=n(iYe,"SPAN",{});var VXt=s(GCe);zIr=r(VXt,"TFAutoModelForMultipleChoice"),VXt.forEach(t),iYe.forEach(t),JUe=i(f),mr=n(f,"DIV",{class:!0});var ai=s(mr);T(O$.$$.fragment,ai),WIr=i(ai),Uc=n(ai,"P",{});var Xne=s(Uc);QIr=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bee=n(Xne,"A",{href:!0});var XXt=s(bee);UIr=r(XXt,"from_pretrained()"),XXt.forEach(t),HIr=r(Xne," class method or the "),vee=n(Xne,"A",{href:!0});var zXt=s(vee);JIr=r(zXt,"from_config()"),zXt.forEach(t),YIr=r(Xne,` class
method.`),Xne.forEach(t),KIr=i(ai),V$=n(ai,"P",{});var dYe=s(V$);ZIr=r(dYe,"This class cannot be instantiated directly using "),OCe=n(dYe,"CODE",{});var WXt=s(OCe);eNr=r(WXt,"__init__()"),WXt.forEach(t),oNr=r(dYe," (throws an error)."),dYe.forEach(t),rNr=i(ai),Wt=n(ai,"DIV",{class:!0});var TL=s(Wt);T(X$.$$.fragment,TL),tNr=i(TL),VCe=n(TL,"P",{});var QXt=s(VCe);aNr=r(QXt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QXt.forEach(t),nNr=i(TL),Hc=n(TL,"P",{});var zne=s(Hc);sNr=r(zne,`Note:
Loading a model from its configuration file does `),XCe=n(zne,"STRONG",{});var UXt=s(XCe);lNr=r(UXt,"not"),UXt.forEach(t),iNr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=n(zne,"A",{href:!0});var HXt=s(Fee);dNr=r(HXt,"from_pretrained()"),HXt.forEach(t),cNr=r(zne," to load the model weights."),zne.forEach(t),fNr=i(TL),T(EC.$$.fragment,TL),TL.forEach(t),mNr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(z$.$$.fragment,ni),gNr=i(ni),zCe=n(ni,"P",{});var JXt=s(zCe);hNr=r(JXt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JXt.forEach(t),pNr=i(ni),Cn=n(ni,"P",{});var ML=s(Cn);_Nr=r(ML,"The model class to instantiate is selected based on the "),WCe=n(ML,"CODE",{});var YXt=s(WCe);uNr=r(YXt,"model_type"),YXt.forEach(t),bNr=r(ML,` property of the config object (either
passed as an argument or loaded from `),QCe=n(ML,"CODE",{});var KXt=s(QCe);vNr=r(KXt,"pretrained_model_name_or_path"),KXt.forEach(t),FNr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UCe=n(ML,"CODE",{});var ZXt=s(UCe);TNr=r(ZXt,"pretrained_model_name_or_path"),ZXt.forEach(t),MNr=r(ML,":"),ML.forEach(t),ENr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);CC=n(Te,"LI",{});var hXe=s(CC);HCe=n(hXe,"STRONG",{});var ezt=s(HCe);CNr=r(ezt,"albert"),ezt.forEach(t),wNr=r(hXe," \u2014 "),Tee=n(hXe,"A",{href:!0});var ozt=s(Tee);ANr=r(ozt,"TFAlbertForMultipleChoice"),ozt.forEach(t),LNr=r(hXe," (ALBERT model)"),hXe.forEach(t),yNr=i(Te),wC=n(Te,"LI",{});var pXe=s(wC);JCe=n(pXe,"STRONG",{});var rzt=s(JCe);xNr=r(rzt,"bert"),rzt.forEach(t),$Nr=r(pXe," \u2014 "),Mee=n(pXe,"A",{href:!0});var tzt=s(Mee);kNr=r(tzt,"TFBertForMultipleChoice"),tzt.forEach(t),SNr=r(pXe," (BERT model)"),pXe.forEach(t),RNr=i(Te),AC=n(Te,"LI",{});var _Xe=s(AC);YCe=n(_Xe,"STRONG",{});var azt=s(YCe);PNr=r(azt,"camembert"),azt.forEach(t),BNr=r(_Xe," \u2014 "),Eee=n(_Xe,"A",{href:!0});var nzt=s(Eee);INr=r(nzt,"TFCamembertForMultipleChoice"),nzt.forEach(t),NNr=r(_Xe," (CamemBERT model)"),_Xe.forEach(t),qNr=i(Te),LC=n(Te,"LI",{});var uXe=s(LC);KCe=n(uXe,"STRONG",{});var szt=s(KCe);jNr=r(szt,"convbert"),szt.forEach(t),DNr=r(uXe," \u2014 "),Cee=n(uXe,"A",{href:!0});var lzt=s(Cee);GNr=r(lzt,"TFConvBertForMultipleChoice"),lzt.forEach(t),ONr=r(uXe," (ConvBERT model)"),uXe.forEach(t),VNr=i(Te),yC=n(Te,"LI",{});var bXe=s(yC);ZCe=n(bXe,"STRONG",{});var izt=s(ZCe);XNr=r(izt,"distilbert"),izt.forEach(t),zNr=r(bXe," \u2014 "),wee=n(bXe,"A",{href:!0});var dzt=s(wee);WNr=r(dzt,"TFDistilBertForMultipleChoice"),dzt.forEach(t),QNr=r(bXe," (DistilBERT model)"),bXe.forEach(t),UNr=i(Te),xC=n(Te,"LI",{});var vXe=s(xC);e3e=n(vXe,"STRONG",{});var czt=s(e3e);HNr=r(czt,"electra"),czt.forEach(t),JNr=r(vXe," \u2014 "),Aee=n(vXe,"A",{href:!0});var fzt=s(Aee);YNr=r(fzt,"TFElectraForMultipleChoice"),fzt.forEach(t),KNr=r(vXe," (ELECTRA model)"),vXe.forEach(t),ZNr=i(Te),$C=n(Te,"LI",{});var FXe=s($C);o3e=n(FXe,"STRONG",{});var mzt=s(o3e);eqr=r(mzt,"flaubert"),mzt.forEach(t),oqr=r(FXe," \u2014 "),Lee=n(FXe,"A",{href:!0});var gzt=s(Lee);rqr=r(gzt,"TFFlaubertForMultipleChoice"),gzt.forEach(t),tqr=r(FXe," (FlauBERT model)"),FXe.forEach(t),aqr=i(Te),kC=n(Te,"LI",{});var TXe=s(kC);r3e=n(TXe,"STRONG",{});var hzt=s(r3e);nqr=r(hzt,"funnel"),hzt.forEach(t),sqr=r(TXe," \u2014 "),yee=n(TXe,"A",{href:!0});var pzt=s(yee);lqr=r(pzt,"TFFunnelForMultipleChoice"),pzt.forEach(t),iqr=r(TXe," (Funnel Transformer model)"),TXe.forEach(t),dqr=i(Te),SC=n(Te,"LI",{});var MXe=s(SC);t3e=n(MXe,"STRONG",{});var _zt=s(t3e);cqr=r(_zt,"longformer"),_zt.forEach(t),fqr=r(MXe," \u2014 "),xee=n(MXe,"A",{href:!0});var uzt=s(xee);mqr=r(uzt,"TFLongformerForMultipleChoice"),uzt.forEach(t),gqr=r(MXe," (Longformer model)"),MXe.forEach(t),hqr=i(Te),RC=n(Te,"LI",{});var EXe=s(RC);a3e=n(EXe,"STRONG",{});var bzt=s(a3e);pqr=r(bzt,"mobilebert"),bzt.forEach(t),_qr=r(EXe," \u2014 "),$ee=n(EXe,"A",{href:!0});var vzt=s($ee);uqr=r(vzt,"TFMobileBertForMultipleChoice"),vzt.forEach(t),bqr=r(EXe," (MobileBERT model)"),EXe.forEach(t),vqr=i(Te),PC=n(Te,"LI",{});var CXe=s(PC);n3e=n(CXe,"STRONG",{});var Fzt=s(n3e);Fqr=r(Fzt,"mpnet"),Fzt.forEach(t),Tqr=r(CXe," \u2014 "),kee=n(CXe,"A",{href:!0});var Tzt=s(kee);Mqr=r(Tzt,"TFMPNetForMultipleChoice"),Tzt.forEach(t),Eqr=r(CXe," (MPNet model)"),CXe.forEach(t),Cqr=i(Te),BC=n(Te,"LI",{});var wXe=s(BC);s3e=n(wXe,"STRONG",{});var Mzt=s(s3e);wqr=r(Mzt,"rembert"),Mzt.forEach(t),Aqr=r(wXe," \u2014 "),See=n(wXe,"A",{href:!0});var Ezt=s(See);Lqr=r(Ezt,"TFRemBertForMultipleChoice"),Ezt.forEach(t),yqr=r(wXe," (RemBERT model)"),wXe.forEach(t),xqr=i(Te),IC=n(Te,"LI",{});var AXe=s(IC);l3e=n(AXe,"STRONG",{});var Czt=s(l3e);$qr=r(Czt,"roberta"),Czt.forEach(t),kqr=r(AXe," \u2014 "),Ree=n(AXe,"A",{href:!0});var wzt=s(Ree);Sqr=r(wzt,"TFRobertaForMultipleChoice"),wzt.forEach(t),Rqr=r(AXe," (RoBERTa model)"),AXe.forEach(t),Pqr=i(Te),NC=n(Te,"LI",{});var LXe=s(NC);i3e=n(LXe,"STRONG",{});var Azt=s(i3e);Bqr=r(Azt,"roformer"),Azt.forEach(t),Iqr=r(LXe," \u2014 "),Pee=n(LXe,"A",{href:!0});var Lzt=s(Pee);Nqr=r(Lzt,"TFRoFormerForMultipleChoice"),Lzt.forEach(t),qqr=r(LXe," (RoFormer model)"),LXe.forEach(t),jqr=i(Te),qC=n(Te,"LI",{});var yXe=s(qC);d3e=n(yXe,"STRONG",{});var yzt=s(d3e);Dqr=r(yzt,"xlm"),yzt.forEach(t),Gqr=r(yXe," \u2014 "),Bee=n(yXe,"A",{href:!0});var xzt=s(Bee);Oqr=r(xzt,"TFXLMForMultipleChoice"),xzt.forEach(t),Vqr=r(yXe," (XLM model)"),yXe.forEach(t),Xqr=i(Te),jC=n(Te,"LI",{});var xXe=s(jC);c3e=n(xXe,"STRONG",{});var $zt=s(c3e);zqr=r($zt,"xlm-roberta"),$zt.forEach(t),Wqr=r(xXe," \u2014 "),Iee=n(xXe,"A",{href:!0});var kzt=s(Iee);Qqr=r(kzt,"TFXLMRobertaForMultipleChoice"),kzt.forEach(t),Uqr=r(xXe," (XLM-RoBERTa model)"),xXe.forEach(t),Hqr=i(Te),DC=n(Te,"LI",{});var $Xe=s(DC);f3e=n($Xe,"STRONG",{});var Szt=s(f3e);Jqr=r(Szt,"xlnet"),Szt.forEach(t),Yqr=r($Xe," \u2014 "),Nee=n($Xe,"A",{href:!0});var Rzt=s(Nee);Kqr=r(Rzt,"TFXLNetForMultipleChoice"),Rzt.forEach(t),Zqr=r($Xe," (XLNet model)"),$Xe.forEach(t),Te.forEach(t),ejr=i(ni),T(GC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),YUe=i(f),Jc=n(f,"H2",{class:!0});var cYe=s(Jc);OC=n(cYe,"A",{id:!0,class:!0,href:!0});var Pzt=s(OC);m3e=n(Pzt,"SPAN",{});var Bzt=s(m3e);T(W$.$$.fragment,Bzt),Bzt.forEach(t),Pzt.forEach(t),ojr=i(cYe),g3e=n(cYe,"SPAN",{});var Izt=s(g3e);rjr=r(Izt,"TFAutoModelForNextSentencePrediction"),Izt.forEach(t),cYe.forEach(t),KUe=i(f),gr=n(f,"DIV",{class:!0});var si=s(gr);T(Q$.$$.fragment,si),tjr=i(si),Yc=n(si,"P",{});var Wne=s(Yc);ajr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qee=n(Wne,"A",{href:!0});var Nzt=s(qee);njr=r(Nzt,"from_pretrained()"),Nzt.forEach(t),sjr=r(Wne," class method or the "),jee=n(Wne,"A",{href:!0});var qzt=s(jee);ljr=r(qzt,"from_config()"),qzt.forEach(t),ijr=r(Wne,` class
method.`),Wne.forEach(t),djr=i(si),U$=n(si,"P",{});var fYe=s(U$);cjr=r(fYe,"This class cannot be instantiated directly using "),h3e=n(fYe,"CODE",{});var jzt=s(h3e);fjr=r(jzt,"__init__()"),jzt.forEach(t),mjr=r(fYe," (throws an error)."),fYe.forEach(t),gjr=i(si),Qt=n(si,"DIV",{class:!0});var EL=s(Qt);T(H$.$$.fragment,EL),hjr=i(EL),p3e=n(EL,"P",{});var Dzt=s(p3e);pjr=r(Dzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dzt.forEach(t),_jr=i(EL),Kc=n(EL,"P",{});var Qne=s(Kc);ujr=r(Qne,`Note:
Loading a model from its configuration file does `),_3e=n(Qne,"STRONG",{});var Gzt=s(_3e);bjr=r(Gzt,"not"),Gzt.forEach(t),vjr=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=n(Qne,"A",{href:!0});var Ozt=s(Dee);Fjr=r(Ozt,"from_pretrained()"),Ozt.forEach(t),Tjr=r(Qne," to load the model weights."),Qne.forEach(t),Mjr=i(EL),T(VC.$$.fragment,EL),EL.forEach(t),Ejr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(J$.$$.fragment,li),Cjr=i(li),u3e=n(li,"P",{});var Vzt=s(u3e);wjr=r(Vzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vzt.forEach(t),Ajr=i(li),wn=n(li,"P",{});var CL=s(wn);Ljr=r(CL,"The model class to instantiate is selected based on the "),b3e=n(CL,"CODE",{});var Xzt=s(b3e);yjr=r(Xzt,"model_type"),Xzt.forEach(t),xjr=r(CL,` property of the config object (either
passed as an argument or loaded from `),v3e=n(CL,"CODE",{});var zzt=s(v3e);$jr=r(zzt,"pretrained_model_name_or_path"),zzt.forEach(t),kjr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(CL,"CODE",{});var Wzt=s(F3e);Sjr=r(Wzt,"pretrained_model_name_or_path"),Wzt.forEach(t),Rjr=r(CL,":"),CL.forEach(t),Pjr=i(li),Y$=n(li,"UL",{});var mYe=s(Y$);XC=n(mYe,"LI",{});var kXe=s(XC);T3e=n(kXe,"STRONG",{});var Qzt=s(T3e);Bjr=r(Qzt,"bert"),Qzt.forEach(t),Ijr=r(kXe," \u2014 "),Gee=n(kXe,"A",{href:!0});var Uzt=s(Gee);Njr=r(Uzt,"TFBertForNextSentencePrediction"),Uzt.forEach(t),qjr=r(kXe," (BERT model)"),kXe.forEach(t),jjr=i(mYe),zC=n(mYe,"LI",{});var SXe=s(zC);M3e=n(SXe,"STRONG",{});var Hzt=s(M3e);Djr=r(Hzt,"mobilebert"),Hzt.forEach(t),Gjr=r(SXe," \u2014 "),Oee=n(SXe,"A",{href:!0});var Jzt=s(Oee);Ojr=r(Jzt,"TFMobileBertForNextSentencePrediction"),Jzt.forEach(t),Vjr=r(SXe," (MobileBERT model)"),SXe.forEach(t),mYe.forEach(t),Xjr=i(li),T(WC.$$.fragment,li),li.forEach(t),si.forEach(t),ZUe=i(f),Zc=n(f,"H2",{class:!0});var gYe=s(Zc);QC=n(gYe,"A",{id:!0,class:!0,href:!0});var Yzt=s(QC);E3e=n(Yzt,"SPAN",{});var Kzt=s(E3e);T(K$.$$.fragment,Kzt),Kzt.forEach(t),Yzt.forEach(t),zjr=i(gYe),C3e=n(gYe,"SPAN",{});var Zzt=s(C3e);Wjr=r(Zzt,"TFAutoModelForTableQuestionAnswering"),Zzt.forEach(t),gYe.forEach(t),eHe=i(f),hr=n(f,"DIV",{class:!0});var ii=s(hr);T(Z$.$$.fragment,ii),Qjr=i(ii),ef=n(ii,"P",{});var Une=s(ef);Ujr=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vee=n(Une,"A",{href:!0});var eWt=s(Vee);Hjr=r(eWt,"from_pretrained()"),eWt.forEach(t),Jjr=r(Une," class method or the "),Xee=n(Une,"A",{href:!0});var oWt=s(Xee);Yjr=r(oWt,"from_config()"),oWt.forEach(t),Kjr=r(Une,` class
method.`),Une.forEach(t),Zjr=i(ii),ek=n(ii,"P",{});var hYe=s(ek);eDr=r(hYe,"This class cannot be instantiated directly using "),w3e=n(hYe,"CODE",{});var rWt=s(w3e);oDr=r(rWt,"__init__()"),rWt.forEach(t),rDr=r(hYe," (throws an error)."),hYe.forEach(t),tDr=i(ii),Ut=n(ii,"DIV",{class:!0});var wL=s(Ut);T(ok.$$.fragment,wL),aDr=i(wL),A3e=n(wL,"P",{});var tWt=s(A3e);nDr=r(tWt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tWt.forEach(t),sDr=i(wL),of=n(wL,"P",{});var Hne=s(of);lDr=r(Hne,`Note:
Loading a model from its configuration file does `),L3e=n(Hne,"STRONG",{});var aWt=s(L3e);iDr=r(aWt,"not"),aWt.forEach(t),dDr=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(Hne,"A",{href:!0});var nWt=s(zee);cDr=r(nWt,"from_pretrained()"),nWt.forEach(t),fDr=r(Hne," to load the model weights."),Hne.forEach(t),mDr=i(wL),T(UC.$$.fragment,wL),wL.forEach(t),gDr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(rk.$$.fragment,di),hDr=i(di),y3e=n(di,"P",{});var sWt=s(y3e);pDr=r(sWt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sWt.forEach(t),_Dr=i(di),An=n(di,"P",{});var AL=s(An);uDr=r(AL,"The model class to instantiate is selected based on the "),x3e=n(AL,"CODE",{});var lWt=s(x3e);bDr=r(lWt,"model_type"),lWt.forEach(t),vDr=r(AL,` property of the config object (either
passed as an argument or loaded from `),$3e=n(AL,"CODE",{});var iWt=s($3e);FDr=r(iWt,"pretrained_model_name_or_path"),iWt.forEach(t),TDr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=n(AL,"CODE",{});var dWt=s(k3e);MDr=r(dWt,"pretrained_model_name_or_path"),dWt.forEach(t),EDr=r(AL,":"),AL.forEach(t),CDr=i(di),S3e=n(di,"UL",{});var cWt=s(S3e);HC=n(cWt,"LI",{});var RXe=s(HC);R3e=n(RXe,"STRONG",{});var fWt=s(R3e);wDr=r(fWt,"tapas"),fWt.forEach(t),ADr=r(RXe," \u2014 "),Wee=n(RXe,"A",{href:!0});var mWt=s(Wee);LDr=r(mWt,"TFTapasForQuestionAnswering"),mWt.forEach(t),yDr=r(RXe," (TAPAS model)"),RXe.forEach(t),cWt.forEach(t),xDr=i(di),T(JC.$$.fragment,di),di.forEach(t),ii.forEach(t),oHe=i(f),rf=n(f,"H2",{class:!0});var pYe=s(rf);YC=n(pYe,"A",{id:!0,class:!0,href:!0});var gWt=s(YC);P3e=n(gWt,"SPAN",{});var hWt=s(P3e);T(tk.$$.fragment,hWt),hWt.forEach(t),gWt.forEach(t),$Dr=i(pYe),B3e=n(pYe,"SPAN",{});var pWt=s(B3e);kDr=r(pWt,"TFAutoModelForTokenClassification"),pWt.forEach(t),pYe.forEach(t),rHe=i(f),pr=n(f,"DIV",{class:!0});var ci=s(pr);T(ak.$$.fragment,ci),SDr=i(ci),tf=n(ci,"P",{});var Jne=s(tf);RDr=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qee=n(Jne,"A",{href:!0});var _Wt=s(Qee);PDr=r(_Wt,"from_pretrained()"),_Wt.forEach(t),BDr=r(Jne," class method or the "),Uee=n(Jne,"A",{href:!0});var uWt=s(Uee);IDr=r(uWt,"from_config()"),uWt.forEach(t),NDr=r(Jne,` class
method.`),Jne.forEach(t),qDr=i(ci),nk=n(ci,"P",{});var _Ye=s(nk);jDr=r(_Ye,"This class cannot be instantiated directly using "),I3e=n(_Ye,"CODE",{});var bWt=s(I3e);DDr=r(bWt,"__init__()"),bWt.forEach(t),GDr=r(_Ye," (throws an error)."),_Ye.forEach(t),ODr=i(ci),Ht=n(ci,"DIV",{class:!0});var LL=s(Ht);T(sk.$$.fragment,LL),VDr=i(LL),N3e=n(LL,"P",{});var vWt=s(N3e);XDr=r(vWt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vWt.forEach(t),zDr=i(LL),af=n(LL,"P",{});var Yne=s(af);WDr=r(Yne,`Note:
Loading a model from its configuration file does `),q3e=n(Yne,"STRONG",{});var FWt=s(q3e);QDr=r(FWt,"not"),FWt.forEach(t),UDr=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=n(Yne,"A",{href:!0});var TWt=s(Hee);HDr=r(TWt,"from_pretrained()"),TWt.forEach(t),JDr=r(Yne," to load the model weights."),Yne.forEach(t),YDr=i(LL),T(KC.$$.fragment,LL),LL.forEach(t),KDr=i(ci),Xr=n(ci,"DIV",{class:!0});var fi=s(Xr);T(lk.$$.fragment,fi),ZDr=i(fi),j3e=n(fi,"P",{});var MWt=s(j3e);eGr=r(MWt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MWt.forEach(t),oGr=i(fi),Ln=n(fi,"P",{});var yL=s(Ln);rGr=r(yL,"The model class to instantiate is selected based on the "),D3e=n(yL,"CODE",{});var EWt=s(D3e);tGr=r(EWt,"model_type"),EWt.forEach(t),aGr=r(yL,` property of the config object (either
passed as an argument or loaded from `),G3e=n(yL,"CODE",{});var CWt=s(G3e);nGr=r(CWt,"pretrained_model_name_or_path"),CWt.forEach(t),sGr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=n(yL,"CODE",{});var wWt=s(O3e);lGr=r(wWt,"pretrained_model_name_or_path"),wWt.forEach(t),iGr=r(yL,":"),yL.forEach(t),dGr=i(fi),de=n(fi,"UL",{});var he=s(de);ZC=n(he,"LI",{});var PXe=s(ZC);V3e=n(PXe,"STRONG",{});var AWt=s(V3e);cGr=r(AWt,"albert"),AWt.forEach(t),fGr=r(PXe," \u2014 "),Jee=n(PXe,"A",{href:!0});var LWt=s(Jee);mGr=r(LWt,"TFAlbertForTokenClassification"),LWt.forEach(t),gGr=r(PXe," (ALBERT model)"),PXe.forEach(t),hGr=i(he),e3=n(he,"LI",{});var BXe=s(e3);X3e=n(BXe,"STRONG",{});var yWt=s(X3e);pGr=r(yWt,"bert"),yWt.forEach(t),_Gr=r(BXe," \u2014 "),Yee=n(BXe,"A",{href:!0});var xWt=s(Yee);uGr=r(xWt,"TFBertForTokenClassification"),xWt.forEach(t),bGr=r(BXe," (BERT model)"),BXe.forEach(t),vGr=i(he),o3=n(he,"LI",{});var IXe=s(o3);z3e=n(IXe,"STRONG",{});var $Wt=s(z3e);FGr=r($Wt,"camembert"),$Wt.forEach(t),TGr=r(IXe," \u2014 "),Kee=n(IXe,"A",{href:!0});var kWt=s(Kee);MGr=r(kWt,"TFCamembertForTokenClassification"),kWt.forEach(t),EGr=r(IXe," (CamemBERT model)"),IXe.forEach(t),CGr=i(he),r3=n(he,"LI",{});var NXe=s(r3);W3e=n(NXe,"STRONG",{});var SWt=s(W3e);wGr=r(SWt,"convbert"),SWt.forEach(t),AGr=r(NXe," \u2014 "),Zee=n(NXe,"A",{href:!0});var RWt=s(Zee);LGr=r(RWt,"TFConvBertForTokenClassification"),RWt.forEach(t),yGr=r(NXe," (ConvBERT model)"),NXe.forEach(t),xGr=i(he),t3=n(he,"LI",{});var qXe=s(t3);Q3e=n(qXe,"STRONG",{});var PWt=s(Q3e);$Gr=r(PWt,"deberta"),PWt.forEach(t),kGr=r(qXe," \u2014 "),eoe=n(qXe,"A",{href:!0});var BWt=s(eoe);SGr=r(BWt,"TFDebertaForTokenClassification"),BWt.forEach(t),RGr=r(qXe," (DeBERTa model)"),qXe.forEach(t),PGr=i(he),a3=n(he,"LI",{});var jXe=s(a3);U3e=n(jXe,"STRONG",{});var IWt=s(U3e);BGr=r(IWt,"deberta-v2"),IWt.forEach(t),IGr=r(jXe," \u2014 "),ooe=n(jXe,"A",{href:!0});var NWt=s(ooe);NGr=r(NWt,"TFDebertaV2ForTokenClassification"),NWt.forEach(t),qGr=r(jXe," (DeBERTa-v2 model)"),jXe.forEach(t),jGr=i(he),n3=n(he,"LI",{});var DXe=s(n3);H3e=n(DXe,"STRONG",{});var qWt=s(H3e);DGr=r(qWt,"distilbert"),qWt.forEach(t),GGr=r(DXe," \u2014 "),roe=n(DXe,"A",{href:!0});var jWt=s(roe);OGr=r(jWt,"TFDistilBertForTokenClassification"),jWt.forEach(t),VGr=r(DXe," (DistilBERT model)"),DXe.forEach(t),XGr=i(he),s3=n(he,"LI",{});var GXe=s(s3);J3e=n(GXe,"STRONG",{});var DWt=s(J3e);zGr=r(DWt,"electra"),DWt.forEach(t),WGr=r(GXe," \u2014 "),toe=n(GXe,"A",{href:!0});var GWt=s(toe);QGr=r(GWt,"TFElectraForTokenClassification"),GWt.forEach(t),UGr=r(GXe," (ELECTRA model)"),GXe.forEach(t),HGr=i(he),l3=n(he,"LI",{});var OXe=s(l3);Y3e=n(OXe,"STRONG",{});var OWt=s(Y3e);JGr=r(OWt,"flaubert"),OWt.forEach(t),YGr=r(OXe," \u2014 "),aoe=n(OXe,"A",{href:!0});var VWt=s(aoe);KGr=r(VWt,"TFFlaubertForTokenClassification"),VWt.forEach(t),ZGr=r(OXe," (FlauBERT model)"),OXe.forEach(t),eOr=i(he),i3=n(he,"LI",{});var VXe=s(i3);K3e=n(VXe,"STRONG",{});var XWt=s(K3e);oOr=r(XWt,"funnel"),XWt.forEach(t),rOr=r(VXe," \u2014 "),noe=n(VXe,"A",{href:!0});var zWt=s(noe);tOr=r(zWt,"TFFunnelForTokenClassification"),zWt.forEach(t),aOr=r(VXe," (Funnel Transformer model)"),VXe.forEach(t),nOr=i(he),d3=n(he,"LI",{});var XXe=s(d3);Z3e=n(XXe,"STRONG",{});var WWt=s(Z3e);sOr=r(WWt,"layoutlm"),WWt.forEach(t),lOr=r(XXe," \u2014 "),soe=n(XXe,"A",{href:!0});var QWt=s(soe);iOr=r(QWt,"TFLayoutLMForTokenClassification"),QWt.forEach(t),dOr=r(XXe," (LayoutLM model)"),XXe.forEach(t),cOr=i(he),c3=n(he,"LI",{});var zXe=s(c3);e5e=n(zXe,"STRONG",{});var UWt=s(e5e);fOr=r(UWt,"longformer"),UWt.forEach(t),mOr=r(zXe," \u2014 "),loe=n(zXe,"A",{href:!0});var HWt=s(loe);gOr=r(HWt,"TFLongformerForTokenClassification"),HWt.forEach(t),hOr=r(zXe," (Longformer model)"),zXe.forEach(t),pOr=i(he),f3=n(he,"LI",{});var WXe=s(f3);o5e=n(WXe,"STRONG",{});var JWt=s(o5e);_Or=r(JWt,"mobilebert"),JWt.forEach(t),uOr=r(WXe," \u2014 "),ioe=n(WXe,"A",{href:!0});var YWt=s(ioe);bOr=r(YWt,"TFMobileBertForTokenClassification"),YWt.forEach(t),vOr=r(WXe," (MobileBERT model)"),WXe.forEach(t),FOr=i(he),m3=n(he,"LI",{});var QXe=s(m3);r5e=n(QXe,"STRONG",{});var KWt=s(r5e);TOr=r(KWt,"mpnet"),KWt.forEach(t),MOr=r(QXe," \u2014 "),doe=n(QXe,"A",{href:!0});var ZWt=s(doe);EOr=r(ZWt,"TFMPNetForTokenClassification"),ZWt.forEach(t),COr=r(QXe," (MPNet model)"),QXe.forEach(t),wOr=i(he),g3=n(he,"LI",{});var UXe=s(g3);t5e=n(UXe,"STRONG",{});var eQt=s(t5e);AOr=r(eQt,"rembert"),eQt.forEach(t),LOr=r(UXe," \u2014 "),coe=n(UXe,"A",{href:!0});var oQt=s(coe);yOr=r(oQt,"TFRemBertForTokenClassification"),oQt.forEach(t),xOr=r(UXe," (RemBERT model)"),UXe.forEach(t),$Or=i(he),h3=n(he,"LI",{});var HXe=s(h3);a5e=n(HXe,"STRONG",{});var rQt=s(a5e);kOr=r(rQt,"roberta"),rQt.forEach(t),SOr=r(HXe," \u2014 "),foe=n(HXe,"A",{href:!0});var tQt=s(foe);ROr=r(tQt,"TFRobertaForTokenClassification"),tQt.forEach(t),POr=r(HXe," (RoBERTa model)"),HXe.forEach(t),BOr=i(he),p3=n(he,"LI",{});var JXe=s(p3);n5e=n(JXe,"STRONG",{});var aQt=s(n5e);IOr=r(aQt,"roformer"),aQt.forEach(t),NOr=r(JXe," \u2014 "),moe=n(JXe,"A",{href:!0});var nQt=s(moe);qOr=r(nQt,"TFRoFormerForTokenClassification"),nQt.forEach(t),jOr=r(JXe," (RoFormer model)"),JXe.forEach(t),DOr=i(he),_3=n(he,"LI",{});var YXe=s(_3);s5e=n(YXe,"STRONG",{});var sQt=s(s5e);GOr=r(sQt,"xlm"),sQt.forEach(t),OOr=r(YXe," \u2014 "),goe=n(YXe,"A",{href:!0});var lQt=s(goe);VOr=r(lQt,"TFXLMForTokenClassification"),lQt.forEach(t),XOr=r(YXe," (XLM model)"),YXe.forEach(t),zOr=i(he),u3=n(he,"LI",{});var KXe=s(u3);l5e=n(KXe,"STRONG",{});var iQt=s(l5e);WOr=r(iQt,"xlm-roberta"),iQt.forEach(t),QOr=r(KXe," \u2014 "),hoe=n(KXe,"A",{href:!0});var dQt=s(hoe);UOr=r(dQt,"TFXLMRobertaForTokenClassification"),dQt.forEach(t),HOr=r(KXe," (XLM-RoBERTa model)"),KXe.forEach(t),JOr=i(he),b3=n(he,"LI",{});var ZXe=s(b3);i5e=n(ZXe,"STRONG",{});var cQt=s(i5e);YOr=r(cQt,"xlnet"),cQt.forEach(t),KOr=r(ZXe," \u2014 "),poe=n(ZXe,"A",{href:!0});var fQt=s(poe);ZOr=r(fQt,"TFXLNetForTokenClassification"),fQt.forEach(t),eVr=r(ZXe," (XLNet model)"),ZXe.forEach(t),he.forEach(t),oVr=i(fi),T(v3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),tHe=i(f),nf=n(f,"H2",{class:!0});var uYe=s(nf);F3=n(uYe,"A",{id:!0,class:!0,href:!0});var mQt=s(F3);d5e=n(mQt,"SPAN",{});var gQt=s(d5e);T(ik.$$.fragment,gQt),gQt.forEach(t),mQt.forEach(t),rVr=i(uYe),c5e=n(uYe,"SPAN",{});var hQt=s(c5e);tVr=r(hQt,"TFAutoModelForQuestionAnswering"),hQt.forEach(t),uYe.forEach(t),aHe=i(f),_r=n(f,"DIV",{class:!0});var mi=s(_r);T(dk.$$.fragment,mi),aVr=i(mi),sf=n(mi,"P",{});var Kne=s(sf);nVr=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_oe=n(Kne,"A",{href:!0});var pQt=s(_oe);sVr=r(pQt,"from_pretrained()"),pQt.forEach(t),lVr=r(Kne," class method or the "),uoe=n(Kne,"A",{href:!0});var _Qt=s(uoe);iVr=r(_Qt,"from_config()"),_Qt.forEach(t),dVr=r(Kne,` class
method.`),Kne.forEach(t),cVr=i(mi),ck=n(mi,"P",{});var bYe=s(ck);fVr=r(bYe,"This class cannot be instantiated directly using "),f5e=n(bYe,"CODE",{});var uQt=s(f5e);mVr=r(uQt,"__init__()"),uQt.forEach(t),gVr=r(bYe," (throws an error)."),bYe.forEach(t),hVr=i(mi),Jt=n(mi,"DIV",{class:!0});var xL=s(Jt);T(fk.$$.fragment,xL),pVr=i(xL),m5e=n(xL,"P",{});var bQt=s(m5e);_Vr=r(bQt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bQt.forEach(t),uVr=i(xL),lf=n(xL,"P",{});var Zne=s(lf);bVr=r(Zne,`Note:
Loading a model from its configuration file does `),g5e=n(Zne,"STRONG",{});var vQt=s(g5e);vVr=r(vQt,"not"),vQt.forEach(t),FVr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(Zne,"A",{href:!0});var FQt=s(boe);TVr=r(FQt,"from_pretrained()"),FQt.forEach(t),MVr=r(Zne," to load the model weights."),Zne.forEach(t),EVr=i(xL),T(T3.$$.fragment,xL),xL.forEach(t),CVr=i(mi),zr=n(mi,"DIV",{class:!0});var gi=s(zr);T(mk.$$.fragment,gi),wVr=i(gi),h5e=n(gi,"P",{});var TQt=s(h5e);AVr=r(TQt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),TQt.forEach(t),LVr=i(gi),yn=n(gi,"P",{});var $L=s(yn);yVr=r($L,"The model class to instantiate is selected based on the "),p5e=n($L,"CODE",{});var MQt=s(p5e);xVr=r(MQt,"model_type"),MQt.forEach(t),$Vr=r($L,` property of the config object (either
passed as an argument or loaded from `),_5e=n($L,"CODE",{});var EQt=s(_5e);kVr=r(EQt,"pretrained_model_name_or_path"),EQt.forEach(t),SVr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n($L,"CODE",{});var CQt=s(u5e);RVr=r(CQt,"pretrained_model_name_or_path"),CQt.forEach(t),PVr=r($L,":"),$L.forEach(t),BVr=i(gi),ce=n(gi,"UL",{});var pe=s(ce);M3=n(pe,"LI",{});var eze=s(M3);b5e=n(eze,"STRONG",{});var wQt=s(b5e);IVr=r(wQt,"albert"),wQt.forEach(t),NVr=r(eze," \u2014 "),voe=n(eze,"A",{href:!0});var AQt=s(voe);qVr=r(AQt,"TFAlbertForQuestionAnswering"),AQt.forEach(t),jVr=r(eze," (ALBERT model)"),eze.forEach(t),DVr=i(pe),E3=n(pe,"LI",{});var oze=s(E3);v5e=n(oze,"STRONG",{});var LQt=s(v5e);GVr=r(LQt,"bert"),LQt.forEach(t),OVr=r(oze," \u2014 "),Foe=n(oze,"A",{href:!0});var yQt=s(Foe);VVr=r(yQt,"TFBertForQuestionAnswering"),yQt.forEach(t),XVr=r(oze," (BERT model)"),oze.forEach(t),zVr=i(pe),C3=n(pe,"LI",{});var rze=s(C3);F5e=n(rze,"STRONG",{});var xQt=s(F5e);WVr=r(xQt,"camembert"),xQt.forEach(t),QVr=r(rze," \u2014 "),Toe=n(rze,"A",{href:!0});var $Qt=s(Toe);UVr=r($Qt,"TFCamembertForQuestionAnswering"),$Qt.forEach(t),HVr=r(rze," (CamemBERT model)"),rze.forEach(t),JVr=i(pe),w3=n(pe,"LI",{});var tze=s(w3);T5e=n(tze,"STRONG",{});var kQt=s(T5e);YVr=r(kQt,"convbert"),kQt.forEach(t),KVr=r(tze," \u2014 "),Moe=n(tze,"A",{href:!0});var SQt=s(Moe);ZVr=r(SQt,"TFConvBertForQuestionAnswering"),SQt.forEach(t),eXr=r(tze," (ConvBERT model)"),tze.forEach(t),oXr=i(pe),A3=n(pe,"LI",{});var aze=s(A3);M5e=n(aze,"STRONG",{});var RQt=s(M5e);rXr=r(RQt,"deberta"),RQt.forEach(t),tXr=r(aze," \u2014 "),Eoe=n(aze,"A",{href:!0});var PQt=s(Eoe);aXr=r(PQt,"TFDebertaForQuestionAnswering"),PQt.forEach(t),nXr=r(aze," (DeBERTa model)"),aze.forEach(t),sXr=i(pe),L3=n(pe,"LI",{});var nze=s(L3);E5e=n(nze,"STRONG",{});var BQt=s(E5e);lXr=r(BQt,"deberta-v2"),BQt.forEach(t),iXr=r(nze," \u2014 "),Coe=n(nze,"A",{href:!0});var IQt=s(Coe);dXr=r(IQt,"TFDebertaV2ForQuestionAnswering"),IQt.forEach(t),cXr=r(nze," (DeBERTa-v2 model)"),nze.forEach(t),fXr=i(pe),y3=n(pe,"LI",{});var sze=s(y3);C5e=n(sze,"STRONG",{});var NQt=s(C5e);mXr=r(NQt,"distilbert"),NQt.forEach(t),gXr=r(sze," \u2014 "),woe=n(sze,"A",{href:!0});var qQt=s(woe);hXr=r(qQt,"TFDistilBertForQuestionAnswering"),qQt.forEach(t),pXr=r(sze," (DistilBERT model)"),sze.forEach(t),_Xr=i(pe),x3=n(pe,"LI",{});var lze=s(x3);w5e=n(lze,"STRONG",{});var jQt=s(w5e);uXr=r(jQt,"electra"),jQt.forEach(t),bXr=r(lze," \u2014 "),Aoe=n(lze,"A",{href:!0});var DQt=s(Aoe);vXr=r(DQt,"TFElectraForQuestionAnswering"),DQt.forEach(t),FXr=r(lze," (ELECTRA model)"),lze.forEach(t),TXr=i(pe),$3=n(pe,"LI",{});var ize=s($3);A5e=n(ize,"STRONG",{});var GQt=s(A5e);MXr=r(GQt,"flaubert"),GQt.forEach(t),EXr=r(ize," \u2014 "),Loe=n(ize,"A",{href:!0});var OQt=s(Loe);CXr=r(OQt,"TFFlaubertForQuestionAnsweringSimple"),OQt.forEach(t),wXr=r(ize," (FlauBERT model)"),ize.forEach(t),AXr=i(pe),k3=n(pe,"LI",{});var dze=s(k3);L5e=n(dze,"STRONG",{});var VQt=s(L5e);LXr=r(VQt,"funnel"),VQt.forEach(t),yXr=r(dze," \u2014 "),yoe=n(dze,"A",{href:!0});var XQt=s(yoe);xXr=r(XQt,"TFFunnelForQuestionAnswering"),XQt.forEach(t),$Xr=r(dze," (Funnel Transformer model)"),dze.forEach(t),kXr=i(pe),S3=n(pe,"LI",{});var cze=s(S3);y5e=n(cze,"STRONG",{});var zQt=s(y5e);SXr=r(zQt,"gptj"),zQt.forEach(t),RXr=r(cze," \u2014 "),xoe=n(cze,"A",{href:!0});var WQt=s(xoe);PXr=r(WQt,"TFGPTJForQuestionAnswering"),WQt.forEach(t),BXr=r(cze," (GPT-J model)"),cze.forEach(t),IXr=i(pe),R3=n(pe,"LI",{});var fze=s(R3);x5e=n(fze,"STRONG",{});var QQt=s(x5e);NXr=r(QQt,"longformer"),QQt.forEach(t),qXr=r(fze," \u2014 "),$oe=n(fze,"A",{href:!0});var UQt=s($oe);jXr=r(UQt,"TFLongformerForQuestionAnswering"),UQt.forEach(t),DXr=r(fze," (Longformer model)"),fze.forEach(t),GXr=i(pe),P3=n(pe,"LI",{});var mze=s(P3);$5e=n(mze,"STRONG",{});var HQt=s($5e);OXr=r(HQt,"mobilebert"),HQt.forEach(t),VXr=r(mze," \u2014 "),koe=n(mze,"A",{href:!0});var JQt=s(koe);XXr=r(JQt,"TFMobileBertForQuestionAnswering"),JQt.forEach(t),zXr=r(mze," (MobileBERT model)"),mze.forEach(t),WXr=i(pe),B3=n(pe,"LI",{});var gze=s(B3);k5e=n(gze,"STRONG",{});var YQt=s(k5e);QXr=r(YQt,"mpnet"),YQt.forEach(t),UXr=r(gze," \u2014 "),Soe=n(gze,"A",{href:!0});var KQt=s(Soe);HXr=r(KQt,"TFMPNetForQuestionAnswering"),KQt.forEach(t),JXr=r(gze," (MPNet model)"),gze.forEach(t),YXr=i(pe),I3=n(pe,"LI",{});var hze=s(I3);S5e=n(hze,"STRONG",{});var ZQt=s(S5e);KXr=r(ZQt,"rembert"),ZQt.forEach(t),ZXr=r(hze," \u2014 "),Roe=n(hze,"A",{href:!0});var eUt=s(Roe);ezr=r(eUt,"TFRemBertForQuestionAnswering"),eUt.forEach(t),ozr=r(hze," (RemBERT model)"),hze.forEach(t),rzr=i(pe),N3=n(pe,"LI",{});var pze=s(N3);R5e=n(pze,"STRONG",{});var oUt=s(R5e);tzr=r(oUt,"roberta"),oUt.forEach(t),azr=r(pze," \u2014 "),Poe=n(pze,"A",{href:!0});var rUt=s(Poe);nzr=r(rUt,"TFRobertaForQuestionAnswering"),rUt.forEach(t),szr=r(pze," (RoBERTa model)"),pze.forEach(t),lzr=i(pe),q3=n(pe,"LI",{});var _ze=s(q3);P5e=n(_ze,"STRONG",{});var tUt=s(P5e);izr=r(tUt,"roformer"),tUt.forEach(t),dzr=r(_ze," \u2014 "),Boe=n(_ze,"A",{href:!0});var aUt=s(Boe);czr=r(aUt,"TFRoFormerForQuestionAnswering"),aUt.forEach(t),fzr=r(_ze," (RoFormer model)"),_ze.forEach(t),mzr=i(pe),j3=n(pe,"LI",{});var uze=s(j3);B5e=n(uze,"STRONG",{});var nUt=s(B5e);gzr=r(nUt,"xlm"),nUt.forEach(t),hzr=r(uze," \u2014 "),Ioe=n(uze,"A",{href:!0});var sUt=s(Ioe);pzr=r(sUt,"TFXLMForQuestionAnsweringSimple"),sUt.forEach(t),_zr=r(uze," (XLM model)"),uze.forEach(t),uzr=i(pe),D3=n(pe,"LI",{});var bze=s(D3);I5e=n(bze,"STRONG",{});var lUt=s(I5e);bzr=r(lUt,"xlm-roberta"),lUt.forEach(t),vzr=r(bze," \u2014 "),Noe=n(bze,"A",{href:!0});var iUt=s(Noe);Fzr=r(iUt,"TFXLMRobertaForQuestionAnswering"),iUt.forEach(t),Tzr=r(bze," (XLM-RoBERTa model)"),bze.forEach(t),Mzr=i(pe),G3=n(pe,"LI",{});var vze=s(G3);N5e=n(vze,"STRONG",{});var dUt=s(N5e);Ezr=r(dUt,"xlnet"),dUt.forEach(t),Czr=r(vze," \u2014 "),qoe=n(vze,"A",{href:!0});var cUt=s(qoe);wzr=r(cUt,"TFXLNetForQuestionAnsweringSimple"),cUt.forEach(t),Azr=r(vze," (XLNet model)"),vze.forEach(t),pe.forEach(t),Lzr=i(gi),T(O3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),nHe=i(f),df=n(f,"H2",{class:!0});var vYe=s(df);V3=n(vYe,"A",{id:!0,class:!0,href:!0});var fUt=s(V3);q5e=n(fUt,"SPAN",{});var mUt=s(q5e);T(gk.$$.fragment,mUt),mUt.forEach(t),fUt.forEach(t),yzr=i(vYe),j5e=n(vYe,"SPAN",{});var gUt=s(j5e);xzr=r(gUt,"TFAutoModelForVision2Seq"),gUt.forEach(t),vYe.forEach(t),sHe=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(hk.$$.fragment,hi),$zr=i(hi),cf=n(hi,"P",{});var ese=s(cf);kzr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),joe=n(ese,"A",{href:!0});var hUt=s(joe);Szr=r(hUt,"from_pretrained()"),hUt.forEach(t),Rzr=r(ese," class method or the "),Doe=n(ese,"A",{href:!0});var pUt=s(Doe);Pzr=r(pUt,"from_config()"),pUt.forEach(t),Bzr=r(ese,` class
method.`),ese.forEach(t),Izr=i(hi),pk=n(hi,"P",{});var FYe=s(pk);Nzr=r(FYe,"This class cannot be instantiated directly using "),D5e=n(FYe,"CODE",{});var _Ut=s(D5e);qzr=r(_Ut,"__init__()"),_Ut.forEach(t),jzr=r(FYe," (throws an error)."),FYe.forEach(t),Dzr=i(hi),Yt=n(hi,"DIV",{class:!0});var kL=s(Yt);T(_k.$$.fragment,kL),Gzr=i(kL),G5e=n(kL,"P",{});var uUt=s(G5e);Ozr=r(uUt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uUt.forEach(t),Vzr=i(kL),ff=n(kL,"P",{});var ose=s(ff);Xzr=r(ose,`Note:
Loading a model from its configuration file does `),O5e=n(ose,"STRONG",{});var bUt=s(O5e);zzr=r(bUt,"not"),bUt.forEach(t),Wzr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=n(ose,"A",{href:!0});var vUt=s(Goe);Qzr=r(vUt,"from_pretrained()"),vUt.forEach(t),Uzr=r(ose," to load the model weights."),ose.forEach(t),Hzr=i(kL),T(X3.$$.fragment,kL),kL.forEach(t),Jzr=i(hi),Wr=n(hi,"DIV",{class:!0});var pi=s(Wr);T(uk.$$.fragment,pi),Yzr=i(pi),V5e=n(pi,"P",{});var FUt=s(V5e);Kzr=r(FUt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FUt.forEach(t),Zzr=i(pi),xn=n(pi,"P",{});var SL=s(xn);eWr=r(SL,"The model class to instantiate is selected based on the "),X5e=n(SL,"CODE",{});var TUt=s(X5e);oWr=r(TUt,"model_type"),TUt.forEach(t),rWr=r(SL,` property of the config object (either
passed as an argument or loaded from `),z5e=n(SL,"CODE",{});var MUt=s(z5e);tWr=r(MUt,"pretrained_model_name_or_path"),MUt.forEach(t),aWr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(SL,"CODE",{});var EUt=s(W5e);nWr=r(EUt,"pretrained_model_name_or_path"),EUt.forEach(t),sWr=r(SL,":"),SL.forEach(t),lWr=i(pi),Q5e=n(pi,"UL",{});var CUt=s(Q5e);z3=n(CUt,"LI",{});var Fze=s(z3);U5e=n(Fze,"STRONG",{});var wUt=s(U5e);iWr=r(wUt,"vision-encoder-decoder"),wUt.forEach(t),dWr=r(Fze," \u2014 "),Ooe=n(Fze,"A",{href:!0});var AUt=s(Ooe);cWr=r(AUt,"TFVisionEncoderDecoderModel"),AUt.forEach(t),fWr=r(Fze," (Vision Encoder decoder model)"),Fze.forEach(t),CUt.forEach(t),mWr=i(pi),T(W3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),lHe=i(f),mf=n(f,"H2",{class:!0});var TYe=s(mf);Q3=n(TYe,"A",{id:!0,class:!0,href:!0});var LUt=s(Q3);H5e=n(LUt,"SPAN",{});var yUt=s(H5e);T(bk.$$.fragment,yUt),yUt.forEach(t),LUt.forEach(t),gWr=i(TYe),J5e=n(TYe,"SPAN",{});var xUt=s(J5e);hWr=r(xUt,"TFAutoModelForSpeechSeq2Seq"),xUt.forEach(t),TYe.forEach(t),iHe=i(f),br=n(f,"DIV",{class:!0});var _i=s(br);T(vk.$$.fragment,_i),pWr=i(_i),gf=n(_i,"P",{});var rse=s(gf);_Wr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Voe=n(rse,"A",{href:!0});var $Ut=s(Voe);uWr=r($Ut,"from_pretrained()"),$Ut.forEach(t),bWr=r(rse," class method or the "),Xoe=n(rse,"A",{href:!0});var kUt=s(Xoe);vWr=r(kUt,"from_config()"),kUt.forEach(t),FWr=r(rse,` class
method.`),rse.forEach(t),TWr=i(_i),Fk=n(_i,"P",{});var MYe=s(Fk);MWr=r(MYe,"This class cannot be instantiated directly using "),Y5e=n(MYe,"CODE",{});var SUt=s(Y5e);EWr=r(SUt,"__init__()"),SUt.forEach(t),CWr=r(MYe," (throws an error)."),MYe.forEach(t),wWr=i(_i),Kt=n(_i,"DIV",{class:!0});var RL=s(Kt);T(Tk.$$.fragment,RL),AWr=i(RL),K5e=n(RL,"P",{});var RUt=s(K5e);LWr=r(RUt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RUt.forEach(t),yWr=i(RL),hf=n(RL,"P",{});var tse=s(hf);xWr=r(tse,`Note:
Loading a model from its configuration file does `),Z5e=n(tse,"STRONG",{});var PUt=s(Z5e);$Wr=r(PUt,"not"),PUt.forEach(t),kWr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=n(tse,"A",{href:!0});var BUt=s(zoe);SWr=r(BUt,"from_pretrained()"),BUt.forEach(t),RWr=r(tse," to load the model weights."),tse.forEach(t),PWr=i(RL),T(U3.$$.fragment,RL),RL.forEach(t),BWr=i(_i),Qr=n(_i,"DIV",{class:!0});var ui=s(Qr);T(Mk.$$.fragment,ui),IWr=i(ui),ewe=n(ui,"P",{});var IUt=s(ewe);NWr=r(IUt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),IUt.forEach(t),qWr=i(ui),$n=n(ui,"P",{});var PL=s($n);jWr=r(PL,"The model class to instantiate is selected based on the "),owe=n(PL,"CODE",{});var NUt=s(owe);DWr=r(NUt,"model_type"),NUt.forEach(t),GWr=r(PL,` property of the config object (either
passed as an argument or loaded from `),rwe=n(PL,"CODE",{});var qUt=s(rwe);OWr=r(qUt,"pretrained_model_name_or_path"),qUt.forEach(t),VWr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=n(PL,"CODE",{});var jUt=s(twe);XWr=r(jUt,"pretrained_model_name_or_path"),jUt.forEach(t),zWr=r(PL,":"),PL.forEach(t),WWr=i(ui),awe=n(ui,"UL",{});var DUt=s(awe);H3=n(DUt,"LI",{});var Tze=s(H3);nwe=n(Tze,"STRONG",{});var GUt=s(nwe);QWr=r(GUt,"speech_to_text"),GUt.forEach(t),UWr=r(Tze," \u2014 "),Woe=n(Tze,"A",{href:!0});var OUt=s(Woe);HWr=r(OUt,"TFSpeech2TextForConditionalGeneration"),OUt.forEach(t),JWr=r(Tze," (Speech2Text model)"),Tze.forEach(t),DUt.forEach(t),YWr=i(ui),T(J3.$$.fragment,ui),ui.forEach(t),_i.forEach(t),dHe=i(f),pf=n(f,"H2",{class:!0});var EYe=s(pf);Y3=n(EYe,"A",{id:!0,class:!0,href:!0});var VUt=s(Y3);swe=n(VUt,"SPAN",{});var XUt=s(swe);T(Ek.$$.fragment,XUt),XUt.forEach(t),VUt.forEach(t),KWr=i(EYe),lwe=n(EYe,"SPAN",{});var zUt=s(lwe);ZWr=r(zUt,"FlaxAutoModel"),zUt.forEach(t),EYe.forEach(t),cHe=i(f),vr=n(f,"DIV",{class:!0});var bi=s(vr);T(Ck.$$.fragment,bi),eQr=i(bi),_f=n(bi,"P",{});var ase=s(_f);oQr=r(ase,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Qoe=n(ase,"A",{href:!0});var WUt=s(Qoe);rQr=r(WUt,"from_pretrained()"),WUt.forEach(t),tQr=r(ase," class method or the "),Uoe=n(ase,"A",{href:!0});var QUt=s(Uoe);aQr=r(QUt,"from_config()"),QUt.forEach(t),nQr=r(ase,` class
method.`),ase.forEach(t),sQr=i(bi),wk=n(bi,"P",{});var CYe=s(wk);lQr=r(CYe,"This class cannot be instantiated directly using "),iwe=n(CYe,"CODE",{});var UUt=s(iwe);iQr=r(UUt,"__init__()"),UUt.forEach(t),dQr=r(CYe," (throws an error)."),CYe.forEach(t),cQr=i(bi),Zt=n(bi,"DIV",{class:!0});var BL=s(Zt);T(Ak.$$.fragment,BL),fQr=i(BL),dwe=n(BL,"P",{});var HUt=s(dwe);mQr=r(HUt,"Instantiates one of the base model classes of the library from a configuration."),HUt.forEach(t),gQr=i(BL),uf=n(BL,"P",{});var nse=s(uf);hQr=r(nse,`Note:
Loading a model from its configuration file does `),cwe=n(nse,"STRONG",{});var JUt=s(cwe);pQr=r(JUt,"not"),JUt.forEach(t),_Qr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=n(nse,"A",{href:!0});var YUt=s(Hoe);uQr=r(YUt,"from_pretrained()"),YUt.forEach(t),bQr=r(nse," to load the model weights."),nse.forEach(t),vQr=i(BL),T(K3.$$.fragment,BL),BL.forEach(t),FQr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Lk.$$.fragment,vi),TQr=i(vi),fwe=n(vi,"P",{});var KUt=s(fwe);MQr=r(KUt,"Instantiate one of the base model classes of the library from a pretrained model."),KUt.forEach(t),EQr=i(vi),kn=n(vi,"P",{});var IL=s(kn);CQr=r(IL,"The model class to instantiate is selected based on the "),mwe=n(IL,"CODE",{});var ZUt=s(mwe);wQr=r(ZUt,"model_type"),ZUt.forEach(t),AQr=r(IL,` property of the config object (either
passed as an argument or loaded from `),gwe=n(IL,"CODE",{});var eHt=s(gwe);LQr=r(eHt,"pretrained_model_name_or_path"),eHt.forEach(t),yQr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=n(IL,"CODE",{});var oHt=s(hwe);xQr=r(oHt,"pretrained_model_name_or_path"),oHt.forEach(t),$Qr=r(IL,":"),IL.forEach(t),kQr=i(vi),re=n(vi,"UL",{});var ae=s(re);Z3=n(ae,"LI",{});var Mze=s(Z3);pwe=n(Mze,"STRONG",{});var rHt=s(pwe);SQr=r(rHt,"albert"),rHt.forEach(t),RQr=r(Mze," \u2014 "),Joe=n(Mze,"A",{href:!0});var tHt=s(Joe);PQr=r(tHt,"FlaxAlbertModel"),tHt.forEach(t),BQr=r(Mze," (ALBERT model)"),Mze.forEach(t),IQr=i(ae),e5=n(ae,"LI",{});var Eze=s(e5);_we=n(Eze,"STRONG",{});var aHt=s(_we);NQr=r(aHt,"bart"),aHt.forEach(t),qQr=r(Eze," \u2014 "),Yoe=n(Eze,"A",{href:!0});var nHt=s(Yoe);jQr=r(nHt,"FlaxBartModel"),nHt.forEach(t),DQr=r(Eze," (BART model)"),Eze.forEach(t),GQr=i(ae),o5=n(ae,"LI",{});var Cze=s(o5);uwe=n(Cze,"STRONG",{});var sHt=s(uwe);OQr=r(sHt,"beit"),sHt.forEach(t),VQr=r(Cze," \u2014 "),Koe=n(Cze,"A",{href:!0});var lHt=s(Koe);XQr=r(lHt,"FlaxBeitModel"),lHt.forEach(t),zQr=r(Cze," (BEiT model)"),Cze.forEach(t),WQr=i(ae),r5=n(ae,"LI",{});var wze=s(r5);bwe=n(wze,"STRONG",{});var iHt=s(bwe);QQr=r(iHt,"bert"),iHt.forEach(t),UQr=r(wze," \u2014 "),Zoe=n(wze,"A",{href:!0});var dHt=s(Zoe);HQr=r(dHt,"FlaxBertModel"),dHt.forEach(t),JQr=r(wze," (BERT model)"),wze.forEach(t),YQr=i(ae),t5=n(ae,"LI",{});var Aze=s(t5);vwe=n(Aze,"STRONG",{});var cHt=s(vwe);KQr=r(cHt,"big_bird"),cHt.forEach(t),ZQr=r(Aze," \u2014 "),ere=n(Aze,"A",{href:!0});var fHt=s(ere);eUr=r(fHt,"FlaxBigBirdModel"),fHt.forEach(t),oUr=r(Aze," (BigBird model)"),Aze.forEach(t),rUr=i(ae),a5=n(ae,"LI",{});var Lze=s(a5);Fwe=n(Lze,"STRONG",{});var mHt=s(Fwe);tUr=r(mHt,"blenderbot"),mHt.forEach(t),aUr=r(Lze," \u2014 "),ore=n(Lze,"A",{href:!0});var gHt=s(ore);nUr=r(gHt,"FlaxBlenderbotModel"),gHt.forEach(t),sUr=r(Lze," (Blenderbot model)"),Lze.forEach(t),lUr=i(ae),n5=n(ae,"LI",{});var yze=s(n5);Twe=n(yze,"STRONG",{});var hHt=s(Twe);iUr=r(hHt,"blenderbot-small"),hHt.forEach(t),dUr=r(yze," \u2014 "),rre=n(yze,"A",{href:!0});var pHt=s(rre);cUr=r(pHt,"FlaxBlenderbotSmallModel"),pHt.forEach(t),fUr=r(yze," (BlenderbotSmall model)"),yze.forEach(t),mUr=i(ae),s5=n(ae,"LI",{});var xze=s(s5);Mwe=n(xze,"STRONG",{});var _Ht=s(Mwe);gUr=r(_Ht,"clip"),_Ht.forEach(t),hUr=r(xze," \u2014 "),tre=n(xze,"A",{href:!0});var uHt=s(tre);pUr=r(uHt,"FlaxCLIPModel"),uHt.forEach(t),_Ur=r(xze," (CLIP model)"),xze.forEach(t),uUr=i(ae),l5=n(ae,"LI",{});var $ze=s(l5);Ewe=n($ze,"STRONG",{});var bHt=s(Ewe);bUr=r(bHt,"distilbert"),bHt.forEach(t),vUr=r($ze," \u2014 "),are=n($ze,"A",{href:!0});var vHt=s(are);FUr=r(vHt,"FlaxDistilBertModel"),vHt.forEach(t),TUr=r($ze," (DistilBERT model)"),$ze.forEach(t),MUr=i(ae),i5=n(ae,"LI",{});var kze=s(i5);Cwe=n(kze,"STRONG",{});var FHt=s(Cwe);EUr=r(FHt,"electra"),FHt.forEach(t),CUr=r(kze," \u2014 "),nre=n(kze,"A",{href:!0});var THt=s(nre);wUr=r(THt,"FlaxElectraModel"),THt.forEach(t),AUr=r(kze," (ELECTRA model)"),kze.forEach(t),LUr=i(ae),d5=n(ae,"LI",{});var Sze=s(d5);wwe=n(Sze,"STRONG",{});var MHt=s(wwe);yUr=r(MHt,"gpt2"),MHt.forEach(t),xUr=r(Sze," \u2014 "),sre=n(Sze,"A",{href:!0});var EHt=s(sre);$Ur=r(EHt,"FlaxGPT2Model"),EHt.forEach(t),kUr=r(Sze," (OpenAI GPT-2 model)"),Sze.forEach(t),SUr=i(ae),c5=n(ae,"LI",{});var Rze=s(c5);Awe=n(Rze,"STRONG",{});var CHt=s(Awe);RUr=r(CHt,"gpt_neo"),CHt.forEach(t),PUr=r(Rze," \u2014 "),lre=n(Rze,"A",{href:!0});var wHt=s(lre);BUr=r(wHt,"FlaxGPTNeoModel"),wHt.forEach(t),IUr=r(Rze," (GPT Neo model)"),Rze.forEach(t),NUr=i(ae),f5=n(ae,"LI",{});var Pze=s(f5);Lwe=n(Pze,"STRONG",{});var AHt=s(Lwe);qUr=r(AHt,"gptj"),AHt.forEach(t),jUr=r(Pze," \u2014 "),ire=n(Pze,"A",{href:!0});var LHt=s(ire);DUr=r(LHt,"FlaxGPTJModel"),LHt.forEach(t),GUr=r(Pze," (GPT-J model)"),Pze.forEach(t),OUr=i(ae),m5=n(ae,"LI",{});var Bze=s(m5);ywe=n(Bze,"STRONG",{});var yHt=s(ywe);VUr=r(yHt,"longt5"),yHt.forEach(t),XUr=r(Bze," \u2014 "),dre=n(Bze,"A",{href:!0});var xHt=s(dre);zUr=r(xHt,"FlaxLongT5Model"),xHt.forEach(t),WUr=r(Bze," (LongT5 model)"),Bze.forEach(t),QUr=i(ae),g5=n(ae,"LI",{});var Ize=s(g5);xwe=n(Ize,"STRONG",{});var $Ht=s(xwe);UUr=r($Ht,"marian"),$Ht.forEach(t),HUr=r(Ize," \u2014 "),cre=n(Ize,"A",{href:!0});var kHt=s(cre);JUr=r(kHt,"FlaxMarianModel"),kHt.forEach(t),YUr=r(Ize," (Marian model)"),Ize.forEach(t),KUr=i(ae),h5=n(ae,"LI",{});var Nze=s(h5);$we=n(Nze,"STRONG",{});var SHt=s($we);ZUr=r(SHt,"mbart"),SHt.forEach(t),eHr=r(Nze," \u2014 "),fre=n(Nze,"A",{href:!0});var RHt=s(fre);oHr=r(RHt,"FlaxMBartModel"),RHt.forEach(t),rHr=r(Nze," (mBART model)"),Nze.forEach(t),tHr=i(ae),p5=n(ae,"LI",{});var qze=s(p5);kwe=n(qze,"STRONG",{});var PHt=s(kwe);aHr=r(PHt,"mt5"),PHt.forEach(t),nHr=r(qze," \u2014 "),mre=n(qze,"A",{href:!0});var BHt=s(mre);sHr=r(BHt,"FlaxMT5Model"),BHt.forEach(t),lHr=r(qze," (MT5 model)"),qze.forEach(t),iHr=i(ae),_5=n(ae,"LI",{});var jze=s(_5);Swe=n(jze,"STRONG",{});var IHt=s(Swe);dHr=r(IHt,"opt"),IHt.forEach(t),cHr=r(jze," \u2014 "),gre=n(jze,"A",{href:!0});var NHt=s(gre);fHr=r(NHt,"FlaxOPTModel"),NHt.forEach(t),mHr=r(jze," (OPT model)"),jze.forEach(t),gHr=i(ae),u5=n(ae,"LI",{});var Dze=s(u5);Rwe=n(Dze,"STRONG",{});var qHt=s(Rwe);hHr=r(qHt,"pegasus"),qHt.forEach(t),pHr=r(Dze," \u2014 "),hre=n(Dze,"A",{href:!0});var jHt=s(hre);_Hr=r(jHt,"FlaxPegasusModel"),jHt.forEach(t),uHr=r(Dze," (Pegasus model)"),Dze.forEach(t),bHr=i(ae),b5=n(ae,"LI",{});var Gze=s(b5);Pwe=n(Gze,"STRONG",{});var DHt=s(Pwe);vHr=r(DHt,"roberta"),DHt.forEach(t),FHr=r(Gze," \u2014 "),pre=n(Gze,"A",{href:!0});var GHt=s(pre);THr=r(GHt,"FlaxRobertaModel"),GHt.forEach(t),MHr=r(Gze," (RoBERTa model)"),Gze.forEach(t),EHr=i(ae),v5=n(ae,"LI",{});var Oze=s(v5);Bwe=n(Oze,"STRONG",{});var OHt=s(Bwe);CHr=r(OHt,"roformer"),OHt.forEach(t),wHr=r(Oze," \u2014 "),_re=n(Oze,"A",{href:!0});var VHt=s(_re);AHr=r(VHt,"FlaxRoFormerModel"),VHt.forEach(t),LHr=r(Oze," (RoFormer model)"),Oze.forEach(t),yHr=i(ae),F5=n(ae,"LI",{});var Vze=s(F5);Iwe=n(Vze,"STRONG",{});var XHt=s(Iwe);xHr=r(XHt,"t5"),XHt.forEach(t),$Hr=r(Vze," \u2014 "),ure=n(Vze,"A",{href:!0});var zHt=s(ure);kHr=r(zHt,"FlaxT5Model"),zHt.forEach(t),SHr=r(Vze," (T5 model)"),Vze.forEach(t),RHr=i(ae),T5=n(ae,"LI",{});var Xze=s(T5);Nwe=n(Xze,"STRONG",{});var WHt=s(Nwe);PHr=r(WHt,"vision-text-dual-encoder"),WHt.forEach(t),BHr=r(Xze," \u2014 "),bre=n(Xze,"A",{href:!0});var QHt=s(bre);IHr=r(QHt,"FlaxVisionTextDualEncoderModel"),QHt.forEach(t),NHr=r(Xze," (VisionTextDualEncoder model)"),Xze.forEach(t),qHr=i(ae),M5=n(ae,"LI",{});var zze=s(M5);qwe=n(zze,"STRONG",{});var UHt=s(qwe);jHr=r(UHt,"vit"),UHt.forEach(t),DHr=r(zze," \u2014 "),vre=n(zze,"A",{href:!0});var HHt=s(vre);GHr=r(HHt,"FlaxViTModel"),HHt.forEach(t),OHr=r(zze," (ViT model)"),zze.forEach(t),VHr=i(ae),E5=n(ae,"LI",{});var Wze=s(E5);jwe=n(Wze,"STRONG",{});var JHt=s(jwe);XHr=r(JHt,"wav2vec2"),JHt.forEach(t),zHr=r(Wze," \u2014 "),Fre=n(Wze,"A",{href:!0});var YHt=s(Fre);WHr=r(YHt,"FlaxWav2Vec2Model"),YHt.forEach(t),QHr=r(Wze," (Wav2Vec2 model)"),Wze.forEach(t),UHr=i(ae),C5=n(ae,"LI",{});var Qze=s(C5);Dwe=n(Qze,"STRONG",{});var KHt=s(Dwe);HHr=r(KHt,"xglm"),KHt.forEach(t),JHr=r(Qze," \u2014 "),Tre=n(Qze,"A",{href:!0});var ZHt=s(Tre);YHr=r(ZHt,"FlaxXGLMModel"),ZHt.forEach(t),KHr=r(Qze," (XGLM model)"),Qze.forEach(t),ZHr=i(ae),w5=n(ae,"LI",{});var Uze=s(w5);Gwe=n(Uze,"STRONG",{});var eJt=s(Gwe);eJr=r(eJt,"xlm-roberta"),eJt.forEach(t),oJr=r(Uze," \u2014 "),Mre=n(Uze,"A",{href:!0});var oJt=s(Mre);rJr=r(oJt,"FlaxXLMRobertaModel"),oJt.forEach(t),tJr=r(Uze," (XLM-RoBERTa model)"),Uze.forEach(t),ae.forEach(t),aJr=i(vi),T(A5.$$.fragment,vi),vi.forEach(t),bi.forEach(t),fHe=i(f),bf=n(f,"H2",{class:!0});var wYe=s(bf);L5=n(wYe,"A",{id:!0,class:!0,href:!0});var rJt=s(L5);Owe=n(rJt,"SPAN",{});var tJt=s(Owe);T(yk.$$.fragment,tJt),tJt.forEach(t),rJt.forEach(t),nJr=i(wYe),Vwe=n(wYe,"SPAN",{});var aJt=s(Vwe);sJr=r(aJt,"FlaxAutoModelForCausalLM"),aJt.forEach(t),wYe.forEach(t),mHe=i(f),Fr=n(f,"DIV",{class:!0});var Fi=s(Fr);T(xk.$$.fragment,Fi),lJr=i(Fi),vf=n(Fi,"P",{});var sse=s(vf);iJr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ere=n(sse,"A",{href:!0});var nJt=s(Ere);dJr=r(nJt,"from_pretrained()"),nJt.forEach(t),cJr=r(sse," class method or the "),Cre=n(sse,"A",{href:!0});var sJt=s(Cre);fJr=r(sJt,"from_config()"),sJt.forEach(t),mJr=r(sse,` class
method.`),sse.forEach(t),gJr=i(Fi),$k=n(Fi,"P",{});var AYe=s($k);hJr=r(AYe,"This class cannot be instantiated directly using "),Xwe=n(AYe,"CODE",{});var lJt=s(Xwe);pJr=r(lJt,"__init__()"),lJt.forEach(t),_Jr=r(AYe," (throws an error)."),AYe.forEach(t),uJr=i(Fi),ea=n(Fi,"DIV",{class:!0});var NL=s(ea);T(kk.$$.fragment,NL),bJr=i(NL),zwe=n(NL,"P",{});var iJt=s(zwe);vJr=r(iJt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iJt.forEach(t),FJr=i(NL),Ff=n(NL,"P",{});var lse=s(Ff);TJr=r(lse,`Note:
Loading a model from its configuration file does `),Wwe=n(lse,"STRONG",{});var dJt=s(Wwe);MJr=r(dJt,"not"),dJt.forEach(t),EJr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=n(lse,"A",{href:!0});var cJt=s(wre);CJr=r(cJt,"from_pretrained()"),cJt.forEach(t),wJr=r(lse," to load the model weights."),lse.forEach(t),AJr=i(NL),T(y5.$$.fragment,NL),NL.forEach(t),LJr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(Sk.$$.fragment,Ti),yJr=i(Ti),Qwe=n(Ti,"P",{});var fJt=s(Qwe);xJr=r(fJt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fJt.forEach(t),$Jr=i(Ti),Sn=n(Ti,"P",{});var qL=s(Sn);kJr=r(qL,"The model class to instantiate is selected based on the "),Uwe=n(qL,"CODE",{});var mJt=s(Uwe);SJr=r(mJt,"model_type"),mJt.forEach(t),RJr=r(qL,` property of the config object (either
passed as an argument or loaded from `),Hwe=n(qL,"CODE",{});var gJt=s(Hwe);PJr=r(gJt,"pretrained_model_name_or_path"),gJt.forEach(t),BJr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=n(qL,"CODE",{});var hJt=s(Jwe);IJr=r(hJt,"pretrained_model_name_or_path"),hJt.forEach(t),NJr=r(qL,":"),qL.forEach(t),qJr=i(Ti),xe=n(Ti,"UL",{});var Ne=s(xe);x5=n(Ne,"LI",{});var Hze=s(x5);Ywe=n(Hze,"STRONG",{});var pJt=s(Ywe);jJr=r(pJt,"bart"),pJt.forEach(t),DJr=r(Hze," \u2014 "),Are=n(Hze,"A",{href:!0});var _Jt=s(Are);GJr=r(_Jt,"FlaxBartForCausalLM"),_Jt.forEach(t),OJr=r(Hze," (BART model)"),Hze.forEach(t),VJr=i(Ne),$5=n(Ne,"LI",{});var Jze=s($5);Kwe=n(Jze,"STRONG",{});var uJt=s(Kwe);XJr=r(uJt,"bert"),uJt.forEach(t),zJr=r(Jze," \u2014 "),Lre=n(Jze,"A",{href:!0});var bJt=s(Lre);WJr=r(bJt,"FlaxBertForCausalLM"),bJt.forEach(t),QJr=r(Jze," (BERT model)"),Jze.forEach(t),UJr=i(Ne),k5=n(Ne,"LI",{});var Yze=s(k5);Zwe=n(Yze,"STRONG",{});var vJt=s(Zwe);HJr=r(vJt,"big_bird"),vJt.forEach(t),JJr=r(Yze," \u2014 "),yre=n(Yze,"A",{href:!0});var FJt=s(yre);YJr=r(FJt,"FlaxBigBirdForCausalLM"),FJt.forEach(t),KJr=r(Yze," (BigBird model)"),Yze.forEach(t),ZJr=i(Ne),S5=n(Ne,"LI",{});var Kze=s(S5);eAe=n(Kze,"STRONG",{});var TJt=s(eAe);eYr=r(TJt,"electra"),TJt.forEach(t),oYr=r(Kze," \u2014 "),xre=n(Kze,"A",{href:!0});var MJt=s(xre);rYr=r(MJt,"FlaxElectraForCausalLM"),MJt.forEach(t),tYr=r(Kze," (ELECTRA model)"),Kze.forEach(t),aYr=i(Ne),R5=n(Ne,"LI",{});var Zze=s(R5);oAe=n(Zze,"STRONG",{});var EJt=s(oAe);nYr=r(EJt,"gpt2"),EJt.forEach(t),sYr=r(Zze," \u2014 "),$re=n(Zze,"A",{href:!0});var CJt=s($re);lYr=r(CJt,"FlaxGPT2LMHeadModel"),CJt.forEach(t),iYr=r(Zze," (OpenAI GPT-2 model)"),Zze.forEach(t),dYr=i(Ne),P5=n(Ne,"LI",{});var eWe=s(P5);rAe=n(eWe,"STRONG",{});var wJt=s(rAe);cYr=r(wJt,"gpt_neo"),wJt.forEach(t),fYr=r(eWe," \u2014 "),kre=n(eWe,"A",{href:!0});var AJt=s(kre);mYr=r(AJt,"FlaxGPTNeoForCausalLM"),AJt.forEach(t),gYr=r(eWe," (GPT Neo model)"),eWe.forEach(t),hYr=i(Ne),B5=n(Ne,"LI",{});var oWe=s(B5);tAe=n(oWe,"STRONG",{});var LJt=s(tAe);pYr=r(LJt,"gptj"),LJt.forEach(t),_Yr=r(oWe," \u2014 "),Sre=n(oWe,"A",{href:!0});var yJt=s(Sre);uYr=r(yJt,"FlaxGPTJForCausalLM"),yJt.forEach(t),bYr=r(oWe," (GPT-J model)"),oWe.forEach(t),vYr=i(Ne),I5=n(Ne,"LI",{});var rWe=s(I5);aAe=n(rWe,"STRONG",{});var xJt=s(aAe);FYr=r(xJt,"opt"),xJt.forEach(t),TYr=r(rWe," \u2014 "),Rre=n(rWe,"A",{href:!0});var $Jt=s(Rre);MYr=r($Jt,"FlaxOPTForCausalLM"),$Jt.forEach(t),EYr=r(rWe," (OPT model)"),rWe.forEach(t),CYr=i(Ne),N5=n(Ne,"LI",{});var tWe=s(N5);nAe=n(tWe,"STRONG",{});var kJt=s(nAe);wYr=r(kJt,"roberta"),kJt.forEach(t),AYr=r(tWe," \u2014 "),Pre=n(tWe,"A",{href:!0});var SJt=s(Pre);LYr=r(SJt,"FlaxRobertaForCausalLM"),SJt.forEach(t),yYr=r(tWe," (RoBERTa model)"),tWe.forEach(t),xYr=i(Ne),q5=n(Ne,"LI",{});var aWe=s(q5);sAe=n(aWe,"STRONG",{});var RJt=s(sAe);$Yr=r(RJt,"xglm"),RJt.forEach(t),kYr=r(aWe," \u2014 "),Bre=n(aWe,"A",{href:!0});var PJt=s(Bre);SYr=r(PJt,"FlaxXGLMForCausalLM"),PJt.forEach(t),RYr=r(aWe," (XGLM model)"),aWe.forEach(t),Ne.forEach(t),PYr=i(Ti),T(j5.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),gHe=i(f),Tf=n(f,"H2",{class:!0});var LYe=s(Tf);D5=n(LYe,"A",{id:!0,class:!0,href:!0});var BJt=s(D5);lAe=n(BJt,"SPAN",{});var IJt=s(lAe);T(Rk.$$.fragment,IJt),IJt.forEach(t),BJt.forEach(t),BYr=i(LYe),iAe=n(LYe,"SPAN",{});var NJt=s(iAe);IYr=r(NJt,"FlaxAutoModelForPreTraining"),NJt.forEach(t),LYe.forEach(t),hHe=i(f),Tr=n(f,"DIV",{class:!0});var Mi=s(Tr);T(Pk.$$.fragment,Mi),NYr=i(Mi),Mf=n(Mi,"P",{});var ise=s(Mf);qYr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ire=n(ise,"A",{href:!0});var qJt=s(Ire);jYr=r(qJt,"from_pretrained()"),qJt.forEach(t),DYr=r(ise," class method or the "),Nre=n(ise,"A",{href:!0});var jJt=s(Nre);GYr=r(jJt,"from_config()"),jJt.forEach(t),OYr=r(ise,` class
method.`),ise.forEach(t),VYr=i(Mi),Bk=n(Mi,"P",{});var yYe=s(Bk);XYr=r(yYe,"This class cannot be instantiated directly using "),dAe=n(yYe,"CODE",{});var DJt=s(dAe);zYr=r(DJt,"__init__()"),DJt.forEach(t),WYr=r(yYe," (throws an error)."),yYe.forEach(t),QYr=i(Mi),oa=n(Mi,"DIV",{class:!0});var jL=s(oa);T(Ik.$$.fragment,jL),UYr=i(jL),cAe=n(jL,"P",{});var GJt=s(cAe);HYr=r(GJt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GJt.forEach(t),JYr=i(jL),Ef=n(jL,"P",{});var dse=s(Ef);YYr=r(dse,`Note:
Loading a model from its configuration file does `),fAe=n(dse,"STRONG",{});var OJt=s(fAe);KYr=r(OJt,"not"),OJt.forEach(t),ZYr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=n(dse,"A",{href:!0});var VJt=s(qre);eKr=r(VJt,"from_pretrained()"),VJt.forEach(t),oKr=r(dse," to load the model weights."),dse.forEach(t),rKr=i(jL),T(G5.$$.fragment,jL),jL.forEach(t),tKr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Nk.$$.fragment,Ei),aKr=i(Ei),mAe=n(Ei,"P",{});var XJt=s(mAe);nKr=r(XJt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XJt.forEach(t),sKr=i(Ei),Rn=n(Ei,"P",{});var DL=s(Rn);lKr=r(DL,"The model class to instantiate is selected based on the "),gAe=n(DL,"CODE",{});var zJt=s(gAe);iKr=r(zJt,"model_type"),zJt.forEach(t),dKr=r(DL,` property of the config object (either
passed as an argument or loaded from `),hAe=n(DL,"CODE",{});var WJt=s(hAe);cKr=r(WJt,"pretrained_model_name_or_path"),WJt.forEach(t),fKr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pAe=n(DL,"CODE",{});var QJt=s(pAe);mKr=r(QJt,"pretrained_model_name_or_path"),QJt.forEach(t),gKr=r(DL,":"),DL.forEach(t),hKr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);O5=n(we,"LI",{});var nWe=s(O5);_Ae=n(nWe,"STRONG",{});var UJt=s(_Ae);pKr=r(UJt,"albert"),UJt.forEach(t),_Kr=r(nWe," \u2014 "),jre=n(nWe,"A",{href:!0});var HJt=s(jre);uKr=r(HJt,"FlaxAlbertForPreTraining"),HJt.forEach(t),bKr=r(nWe," (ALBERT model)"),nWe.forEach(t),vKr=i(we),V5=n(we,"LI",{});var sWe=s(V5);uAe=n(sWe,"STRONG",{});var JJt=s(uAe);FKr=r(JJt,"bart"),JJt.forEach(t),TKr=r(sWe," \u2014 "),Dre=n(sWe,"A",{href:!0});var YJt=s(Dre);MKr=r(YJt,"FlaxBartForConditionalGeneration"),YJt.forEach(t),EKr=r(sWe," (BART model)"),sWe.forEach(t),CKr=i(we),X5=n(we,"LI",{});var lWe=s(X5);bAe=n(lWe,"STRONG",{});var KJt=s(bAe);wKr=r(KJt,"bert"),KJt.forEach(t),AKr=r(lWe," \u2014 "),Gre=n(lWe,"A",{href:!0});var ZJt=s(Gre);LKr=r(ZJt,"FlaxBertForPreTraining"),ZJt.forEach(t),yKr=r(lWe," (BERT model)"),lWe.forEach(t),xKr=i(we),z5=n(we,"LI",{});var iWe=s(z5);vAe=n(iWe,"STRONG",{});var eYt=s(vAe);$Kr=r(eYt,"big_bird"),eYt.forEach(t),kKr=r(iWe," \u2014 "),Ore=n(iWe,"A",{href:!0});var oYt=s(Ore);SKr=r(oYt,"FlaxBigBirdForPreTraining"),oYt.forEach(t),RKr=r(iWe," (BigBird model)"),iWe.forEach(t),PKr=i(we),W5=n(we,"LI",{});var dWe=s(W5);FAe=n(dWe,"STRONG",{});var rYt=s(FAe);BKr=r(rYt,"electra"),rYt.forEach(t),IKr=r(dWe," \u2014 "),Vre=n(dWe,"A",{href:!0});var tYt=s(Vre);NKr=r(tYt,"FlaxElectraForPreTraining"),tYt.forEach(t),qKr=r(dWe," (ELECTRA model)"),dWe.forEach(t),jKr=i(we),Q5=n(we,"LI",{});var cWe=s(Q5);TAe=n(cWe,"STRONG",{});var aYt=s(TAe);DKr=r(aYt,"longt5"),aYt.forEach(t),GKr=r(cWe," \u2014 "),Xre=n(cWe,"A",{href:!0});var nYt=s(Xre);OKr=r(nYt,"FlaxLongT5ForConditionalGeneration"),nYt.forEach(t),VKr=r(cWe," (LongT5 model)"),cWe.forEach(t),XKr=i(we),U5=n(we,"LI",{});var fWe=s(U5);MAe=n(fWe,"STRONG",{});var sYt=s(MAe);zKr=r(sYt,"mbart"),sYt.forEach(t),WKr=r(fWe," \u2014 "),zre=n(fWe,"A",{href:!0});var lYt=s(zre);QKr=r(lYt,"FlaxMBartForConditionalGeneration"),lYt.forEach(t),UKr=r(fWe," (mBART model)"),fWe.forEach(t),HKr=i(we),H5=n(we,"LI",{});var mWe=s(H5);EAe=n(mWe,"STRONG",{});var iYt=s(EAe);JKr=r(iYt,"mt5"),iYt.forEach(t),YKr=r(mWe," \u2014 "),Wre=n(mWe,"A",{href:!0});var dYt=s(Wre);KKr=r(dYt,"FlaxMT5ForConditionalGeneration"),dYt.forEach(t),ZKr=r(mWe," (MT5 model)"),mWe.forEach(t),eZr=i(we),J5=n(we,"LI",{});var gWe=s(J5);CAe=n(gWe,"STRONG",{});var cYt=s(CAe);oZr=r(cYt,"roberta"),cYt.forEach(t),rZr=r(gWe," \u2014 "),Qre=n(gWe,"A",{href:!0});var fYt=s(Qre);tZr=r(fYt,"FlaxRobertaForMaskedLM"),fYt.forEach(t),aZr=r(gWe," (RoBERTa model)"),gWe.forEach(t),nZr=i(we),Y5=n(we,"LI",{});var hWe=s(Y5);wAe=n(hWe,"STRONG",{});var mYt=s(wAe);sZr=r(mYt,"roformer"),mYt.forEach(t),lZr=r(hWe," \u2014 "),Ure=n(hWe,"A",{href:!0});var gYt=s(Ure);iZr=r(gYt,"FlaxRoFormerForMaskedLM"),gYt.forEach(t),dZr=r(hWe," (RoFormer model)"),hWe.forEach(t),cZr=i(we),K5=n(we,"LI",{});var pWe=s(K5);AAe=n(pWe,"STRONG",{});var hYt=s(AAe);fZr=r(hYt,"t5"),hYt.forEach(t),mZr=r(pWe," \u2014 "),Hre=n(pWe,"A",{href:!0});var pYt=s(Hre);gZr=r(pYt,"FlaxT5ForConditionalGeneration"),pYt.forEach(t),hZr=r(pWe," (T5 model)"),pWe.forEach(t),pZr=i(we),Z5=n(we,"LI",{});var _We=s(Z5);LAe=n(_We,"STRONG",{});var _Yt=s(LAe);_Zr=r(_Yt,"wav2vec2"),_Yt.forEach(t),uZr=r(_We," \u2014 "),Jre=n(_We,"A",{href:!0});var uYt=s(Jre);bZr=r(uYt,"FlaxWav2Vec2ForPreTraining"),uYt.forEach(t),vZr=r(_We," (Wav2Vec2 model)"),_We.forEach(t),FZr=i(we),ew=n(we,"LI",{});var uWe=s(ew);yAe=n(uWe,"STRONG",{});var bYt=s(yAe);TZr=r(bYt,"xlm-roberta"),bYt.forEach(t),MZr=r(uWe," \u2014 "),Yre=n(uWe,"A",{href:!0});var vYt=s(Yre);EZr=r(vYt,"FlaxXLMRobertaForMaskedLM"),vYt.forEach(t),CZr=r(uWe," (XLM-RoBERTa model)"),uWe.forEach(t),we.forEach(t),wZr=i(Ei),T(ow.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),pHe=i(f),Cf=n(f,"H2",{class:!0});var xYe=s(Cf);rw=n(xYe,"A",{id:!0,class:!0,href:!0});var FYt=s(rw);xAe=n(FYt,"SPAN",{});var TYt=s(xAe);T(qk.$$.fragment,TYt),TYt.forEach(t),FYt.forEach(t),AZr=i(xYe),$Ae=n(xYe,"SPAN",{});var MYt=s($Ae);LZr=r(MYt,"FlaxAutoModelForMaskedLM"),MYt.forEach(t),xYe.forEach(t),_He=i(f),Mr=n(f,"DIV",{class:!0});var Ci=s(Mr);T(jk.$$.fragment,Ci),yZr=i(Ci),wf=n(Ci,"P",{});var cse=s(wf);xZr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Kre=n(cse,"A",{href:!0});var EYt=s(Kre);$Zr=r(EYt,"from_pretrained()"),EYt.forEach(t),kZr=r(cse," class method or the "),Zre=n(cse,"A",{href:!0});var CYt=s(Zre);SZr=r(CYt,"from_config()"),CYt.forEach(t),RZr=r(cse,` class
method.`),cse.forEach(t),PZr=i(Ci),Dk=n(Ci,"P",{});var $Ye=s(Dk);BZr=r($Ye,"This class cannot be instantiated directly using "),kAe=n($Ye,"CODE",{});var wYt=s(kAe);IZr=r(wYt,"__init__()"),wYt.forEach(t),NZr=r($Ye," (throws an error)."),$Ye.forEach(t),qZr=i(Ci),ra=n(Ci,"DIV",{class:!0});var GL=s(ra);T(Gk.$$.fragment,GL),jZr=i(GL),SAe=n(GL,"P",{});var AYt=s(SAe);DZr=r(AYt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AYt.forEach(t),GZr=i(GL),Af=n(GL,"P",{});var fse=s(Af);OZr=r(fse,`Note:
Loading a model from its configuration file does `),RAe=n(fse,"STRONG",{});var LYt=s(RAe);VZr=r(LYt,"not"),LYt.forEach(t),XZr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=n(fse,"A",{href:!0});var yYt=s(ete);zZr=r(yYt,"from_pretrained()"),yYt.forEach(t),WZr=r(fse," to load the model weights."),fse.forEach(t),QZr=i(GL),T(tw.$$.fragment,GL),GL.forEach(t),UZr=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Ok.$$.fragment,wi),HZr=i(wi),PAe=n(wi,"P",{});var xYt=s(PAe);JZr=r(xYt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xYt.forEach(t),YZr=i(wi),Pn=n(wi,"P",{});var OL=s(Pn);KZr=r(OL,"The model class to instantiate is selected based on the "),BAe=n(OL,"CODE",{});var $Yt=s(BAe);ZZr=r($Yt,"model_type"),$Yt.forEach(t),eet=r(OL,` property of the config object (either
passed as an argument or loaded from `),IAe=n(OL,"CODE",{});var kYt=s(IAe);oet=r(kYt,"pretrained_model_name_or_path"),kYt.forEach(t),ret=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=n(OL,"CODE",{});var SYt=s(NAe);tet=r(SYt,"pretrained_model_name_or_path"),SYt.forEach(t),aet=r(OL,":"),OL.forEach(t),net=i(wi),$e=n(wi,"UL",{});var qe=s($e);aw=n(qe,"LI",{});var bWe=s(aw);qAe=n(bWe,"STRONG",{});var RYt=s(qAe);set=r(RYt,"albert"),RYt.forEach(t),iet=r(bWe," \u2014 "),ote=n(bWe,"A",{href:!0});var PYt=s(ote);det=r(PYt,"FlaxAlbertForMaskedLM"),PYt.forEach(t),cet=r(bWe," (ALBERT model)"),bWe.forEach(t),fet=i(qe),nw=n(qe,"LI",{});var vWe=s(nw);jAe=n(vWe,"STRONG",{});var BYt=s(jAe);met=r(BYt,"bart"),BYt.forEach(t),get=r(vWe," \u2014 "),rte=n(vWe,"A",{href:!0});var IYt=s(rte);het=r(IYt,"FlaxBartForConditionalGeneration"),IYt.forEach(t),pet=r(vWe," (BART model)"),vWe.forEach(t),_et=i(qe),sw=n(qe,"LI",{});var FWe=s(sw);DAe=n(FWe,"STRONG",{});var NYt=s(DAe);uet=r(NYt,"bert"),NYt.forEach(t),bet=r(FWe," \u2014 "),tte=n(FWe,"A",{href:!0});var qYt=s(tte);vet=r(qYt,"FlaxBertForMaskedLM"),qYt.forEach(t),Fet=r(FWe," (BERT model)"),FWe.forEach(t),Tet=i(qe),lw=n(qe,"LI",{});var TWe=s(lw);GAe=n(TWe,"STRONG",{});var jYt=s(GAe);Met=r(jYt,"big_bird"),jYt.forEach(t),Eet=r(TWe," \u2014 "),ate=n(TWe,"A",{href:!0});var DYt=s(ate);Cet=r(DYt,"FlaxBigBirdForMaskedLM"),DYt.forEach(t),wet=r(TWe," (BigBird model)"),TWe.forEach(t),Aet=i(qe),iw=n(qe,"LI",{});var MWe=s(iw);OAe=n(MWe,"STRONG",{});var GYt=s(OAe);Let=r(GYt,"distilbert"),GYt.forEach(t),yet=r(MWe," \u2014 "),nte=n(MWe,"A",{href:!0});var OYt=s(nte);xet=r(OYt,"FlaxDistilBertForMaskedLM"),OYt.forEach(t),$et=r(MWe," (DistilBERT model)"),MWe.forEach(t),ket=i(qe),dw=n(qe,"LI",{});var EWe=s(dw);VAe=n(EWe,"STRONG",{});var VYt=s(VAe);Set=r(VYt,"electra"),VYt.forEach(t),Ret=r(EWe," \u2014 "),ste=n(EWe,"A",{href:!0});var XYt=s(ste);Pet=r(XYt,"FlaxElectraForMaskedLM"),XYt.forEach(t),Bet=r(EWe," (ELECTRA model)"),EWe.forEach(t),Iet=i(qe),cw=n(qe,"LI",{});var CWe=s(cw);XAe=n(CWe,"STRONG",{});var zYt=s(XAe);Net=r(zYt,"mbart"),zYt.forEach(t),qet=r(CWe," \u2014 "),lte=n(CWe,"A",{href:!0});var WYt=s(lte);jet=r(WYt,"FlaxMBartForConditionalGeneration"),WYt.forEach(t),Det=r(CWe," (mBART model)"),CWe.forEach(t),Get=i(qe),fw=n(qe,"LI",{});var wWe=s(fw);zAe=n(wWe,"STRONG",{});var QYt=s(zAe);Oet=r(QYt,"roberta"),QYt.forEach(t),Vet=r(wWe," \u2014 "),ite=n(wWe,"A",{href:!0});var UYt=s(ite);Xet=r(UYt,"FlaxRobertaForMaskedLM"),UYt.forEach(t),zet=r(wWe," (RoBERTa model)"),wWe.forEach(t),Wet=i(qe),mw=n(qe,"LI",{});var AWe=s(mw);WAe=n(AWe,"STRONG",{});var HYt=s(WAe);Qet=r(HYt,"roformer"),HYt.forEach(t),Uet=r(AWe," \u2014 "),dte=n(AWe,"A",{href:!0});var JYt=s(dte);Het=r(JYt,"FlaxRoFormerForMaskedLM"),JYt.forEach(t),Jet=r(AWe," (RoFormer model)"),AWe.forEach(t),Yet=i(qe),gw=n(qe,"LI",{});var LWe=s(gw);QAe=n(LWe,"STRONG",{});var YYt=s(QAe);Ket=r(YYt,"xlm-roberta"),YYt.forEach(t),Zet=r(LWe," \u2014 "),cte=n(LWe,"A",{href:!0});var KYt=s(cte);eot=r(KYt,"FlaxXLMRobertaForMaskedLM"),KYt.forEach(t),oot=r(LWe," (XLM-RoBERTa model)"),LWe.forEach(t),qe.forEach(t),rot=i(wi),T(hw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),uHe=i(f),Lf=n(f,"H2",{class:!0});var kYe=s(Lf);pw=n(kYe,"A",{id:!0,class:!0,href:!0});var ZYt=s(pw);UAe=n(ZYt,"SPAN",{});var eKt=s(UAe);T(Vk.$$.fragment,eKt),eKt.forEach(t),ZYt.forEach(t),tot=i(kYe),HAe=n(kYe,"SPAN",{});var oKt=s(HAe);aot=r(oKt,"FlaxAutoModelForSeq2SeqLM"),oKt.forEach(t),kYe.forEach(t),bHe=i(f),Er=n(f,"DIV",{class:!0});var Ai=s(Er);T(Xk.$$.fragment,Ai),not=i(Ai),yf=n(Ai,"P",{});var mse=s(yf);sot=r(mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fte=n(mse,"A",{href:!0});var rKt=s(fte);lot=r(rKt,"from_pretrained()"),rKt.forEach(t),iot=r(mse," class method or the "),mte=n(mse,"A",{href:!0});var tKt=s(mte);dot=r(tKt,"from_config()"),tKt.forEach(t),cot=r(mse,` class
method.`),mse.forEach(t),fot=i(Ai),zk=n(Ai,"P",{});var SYe=s(zk);mot=r(SYe,"This class cannot be instantiated directly using "),JAe=n(SYe,"CODE",{});var aKt=s(JAe);got=r(aKt,"__init__()"),aKt.forEach(t),hot=r(SYe," (throws an error)."),SYe.forEach(t),pot=i(Ai),ta=n(Ai,"DIV",{class:!0});var VL=s(ta);T(Wk.$$.fragment,VL),_ot=i(VL),YAe=n(VL,"P",{});var nKt=s(YAe);uot=r(nKt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nKt.forEach(t),bot=i(VL),xf=n(VL,"P",{});var gse=s(xf);vot=r(gse,`Note:
Loading a model from its configuration file does `),KAe=n(gse,"STRONG",{});var sKt=s(KAe);Fot=r(sKt,"not"),sKt.forEach(t),Tot=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=n(gse,"A",{href:!0});var lKt=s(gte);Mot=r(lKt,"from_pretrained()"),lKt.forEach(t),Eot=r(gse," to load the model weights."),gse.forEach(t),Cot=i(VL),T(_w.$$.fragment,VL),VL.forEach(t),wot=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(Qk.$$.fragment,Li),Aot=i(Li),ZAe=n(Li,"P",{});var iKt=s(ZAe);Lot=r(iKt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iKt.forEach(t),yot=i(Li),Bn=n(Li,"P",{});var XL=s(Bn);xot=r(XL,"The model class to instantiate is selected based on the "),e7e=n(XL,"CODE",{});var dKt=s(e7e);$ot=r(dKt,"model_type"),dKt.forEach(t),kot=r(XL,` property of the config object (either
passed as an argument or loaded from `),o7e=n(XL,"CODE",{});var cKt=s(o7e);Sot=r(cKt,"pretrained_model_name_or_path"),cKt.forEach(t),Rot=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=n(XL,"CODE",{});var fKt=s(r7e);Pot=r(fKt,"pretrained_model_name_or_path"),fKt.forEach(t),Bot=r(XL,":"),XL.forEach(t),Iot=i(Li),ke=n(Li,"UL",{});var je=s(ke);uw=n(je,"LI",{});var yWe=s(uw);t7e=n(yWe,"STRONG",{});var mKt=s(t7e);Not=r(mKt,"bart"),mKt.forEach(t),qot=r(yWe," \u2014 "),hte=n(yWe,"A",{href:!0});var gKt=s(hte);jot=r(gKt,"FlaxBartForConditionalGeneration"),gKt.forEach(t),Dot=r(yWe," (BART model)"),yWe.forEach(t),Got=i(je),bw=n(je,"LI",{});var xWe=s(bw);a7e=n(xWe,"STRONG",{});var hKt=s(a7e);Oot=r(hKt,"blenderbot"),hKt.forEach(t),Vot=r(xWe," \u2014 "),pte=n(xWe,"A",{href:!0});var pKt=s(pte);Xot=r(pKt,"FlaxBlenderbotForConditionalGeneration"),pKt.forEach(t),zot=r(xWe," (Blenderbot model)"),xWe.forEach(t),Wot=i(je),vw=n(je,"LI",{});var $We=s(vw);n7e=n($We,"STRONG",{});var _Kt=s(n7e);Qot=r(_Kt,"blenderbot-small"),_Kt.forEach(t),Uot=r($We," \u2014 "),_te=n($We,"A",{href:!0});var uKt=s(_te);Hot=r(uKt,"FlaxBlenderbotSmallForConditionalGeneration"),uKt.forEach(t),Jot=r($We," (BlenderbotSmall model)"),$We.forEach(t),Yot=i(je),Fw=n(je,"LI",{});var kWe=s(Fw);s7e=n(kWe,"STRONG",{});var bKt=s(s7e);Kot=r(bKt,"encoder-decoder"),bKt.forEach(t),Zot=r(kWe," \u2014 "),ute=n(kWe,"A",{href:!0});var vKt=s(ute);ert=r(vKt,"FlaxEncoderDecoderModel"),vKt.forEach(t),ort=r(kWe," (Encoder decoder model)"),kWe.forEach(t),rrt=i(je),Tw=n(je,"LI",{});var SWe=s(Tw);l7e=n(SWe,"STRONG",{});var FKt=s(l7e);trt=r(FKt,"longt5"),FKt.forEach(t),art=r(SWe," \u2014 "),bte=n(SWe,"A",{href:!0});var TKt=s(bte);nrt=r(TKt,"FlaxLongT5ForConditionalGeneration"),TKt.forEach(t),srt=r(SWe," (LongT5 model)"),SWe.forEach(t),lrt=i(je),Mw=n(je,"LI",{});var RWe=s(Mw);i7e=n(RWe,"STRONG",{});var MKt=s(i7e);irt=r(MKt,"marian"),MKt.forEach(t),drt=r(RWe," \u2014 "),vte=n(RWe,"A",{href:!0});var EKt=s(vte);crt=r(EKt,"FlaxMarianMTModel"),EKt.forEach(t),frt=r(RWe," (Marian model)"),RWe.forEach(t),mrt=i(je),Ew=n(je,"LI",{});var PWe=s(Ew);d7e=n(PWe,"STRONG",{});var CKt=s(d7e);grt=r(CKt,"mbart"),CKt.forEach(t),hrt=r(PWe," \u2014 "),Fte=n(PWe,"A",{href:!0});var wKt=s(Fte);prt=r(wKt,"FlaxMBartForConditionalGeneration"),wKt.forEach(t),_rt=r(PWe," (mBART model)"),PWe.forEach(t),urt=i(je),Cw=n(je,"LI",{});var BWe=s(Cw);c7e=n(BWe,"STRONG",{});var AKt=s(c7e);brt=r(AKt,"mt5"),AKt.forEach(t),vrt=r(BWe," \u2014 "),Tte=n(BWe,"A",{href:!0});var LKt=s(Tte);Frt=r(LKt,"FlaxMT5ForConditionalGeneration"),LKt.forEach(t),Trt=r(BWe," (MT5 model)"),BWe.forEach(t),Mrt=i(je),ww=n(je,"LI",{});var IWe=s(ww);f7e=n(IWe,"STRONG",{});var yKt=s(f7e);Ert=r(yKt,"pegasus"),yKt.forEach(t),Crt=r(IWe," \u2014 "),Mte=n(IWe,"A",{href:!0});var xKt=s(Mte);wrt=r(xKt,"FlaxPegasusForConditionalGeneration"),xKt.forEach(t),Art=r(IWe," (Pegasus model)"),IWe.forEach(t),Lrt=i(je),Aw=n(je,"LI",{});var NWe=s(Aw);m7e=n(NWe,"STRONG",{});var $Kt=s(m7e);yrt=r($Kt,"t5"),$Kt.forEach(t),xrt=r(NWe," \u2014 "),Ete=n(NWe,"A",{href:!0});var kKt=s(Ete);$rt=r(kKt,"FlaxT5ForConditionalGeneration"),kKt.forEach(t),krt=r(NWe," (T5 model)"),NWe.forEach(t),je.forEach(t),Srt=i(Li),T(Lw.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),vHe=i(f),$f=n(f,"H2",{class:!0});var RYe=s($f);yw=n(RYe,"A",{id:!0,class:!0,href:!0});var SKt=s(yw);g7e=n(SKt,"SPAN",{});var RKt=s(g7e);T(Uk.$$.fragment,RKt),RKt.forEach(t),SKt.forEach(t),Rrt=i(RYe),h7e=n(RYe,"SPAN",{});var PKt=s(h7e);Prt=r(PKt,"FlaxAutoModelForSequenceClassification"),PKt.forEach(t),RYe.forEach(t),FHe=i(f),Cr=n(f,"DIV",{class:!0});var yi=s(Cr);T(Hk.$$.fragment,yi),Brt=i(yi),kf=n(yi,"P",{});var hse=s(kf);Irt=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cte=n(hse,"A",{href:!0});var BKt=s(Cte);Nrt=r(BKt,"from_pretrained()"),BKt.forEach(t),qrt=r(hse," class method or the "),wte=n(hse,"A",{href:!0});var IKt=s(wte);jrt=r(IKt,"from_config()"),IKt.forEach(t),Drt=r(hse,` class
method.`),hse.forEach(t),Grt=i(yi),Jk=n(yi,"P",{});var PYe=s(Jk);Ort=r(PYe,"This class cannot be instantiated directly using "),p7e=n(PYe,"CODE",{});var NKt=s(p7e);Vrt=r(NKt,"__init__()"),NKt.forEach(t),Xrt=r(PYe," (throws an error)."),PYe.forEach(t),zrt=i(yi),aa=n(yi,"DIV",{class:!0});var zL=s(aa);T(Yk.$$.fragment,zL),Wrt=i(zL),_7e=n(zL,"P",{});var qKt=s(_7e);Qrt=r(qKt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qKt.forEach(t),Urt=i(zL),Sf=n(zL,"P",{});var pse=s(Sf);Hrt=r(pse,`Note:
Loading a model from its configuration file does `),u7e=n(pse,"STRONG",{});var jKt=s(u7e);Jrt=r(jKt,"not"),jKt.forEach(t),Yrt=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=n(pse,"A",{href:!0});var DKt=s(Ate);Krt=r(DKt,"from_pretrained()"),DKt.forEach(t),Zrt=r(pse," to load the model weights."),pse.forEach(t),ett=i(zL),T(xw.$$.fragment,zL),zL.forEach(t),ott=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(Kk.$$.fragment,xi),rtt=i(xi),b7e=n(xi,"P",{});var GKt=s(b7e);ttt=r(GKt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GKt.forEach(t),att=i(xi),In=n(xi,"P",{});var WL=s(In);ntt=r(WL,"The model class to instantiate is selected based on the "),v7e=n(WL,"CODE",{});var OKt=s(v7e);stt=r(OKt,"model_type"),OKt.forEach(t),ltt=r(WL,` property of the config object (either
passed as an argument or loaded from `),F7e=n(WL,"CODE",{});var VKt=s(F7e);itt=r(VKt,"pretrained_model_name_or_path"),VKt.forEach(t),dtt=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=n(WL,"CODE",{});var XKt=s(T7e);ctt=r(XKt,"pretrained_model_name_or_path"),XKt.forEach(t),ftt=r(WL,":"),WL.forEach(t),mtt=i(xi),Se=n(xi,"UL",{});var De=s(Se);$w=n(De,"LI",{});var qWe=s($w);M7e=n(qWe,"STRONG",{});var zKt=s(M7e);gtt=r(zKt,"albert"),zKt.forEach(t),htt=r(qWe," \u2014 "),Lte=n(qWe,"A",{href:!0});var WKt=s(Lte);ptt=r(WKt,"FlaxAlbertForSequenceClassification"),WKt.forEach(t),_tt=r(qWe," (ALBERT model)"),qWe.forEach(t),utt=i(De),kw=n(De,"LI",{});var jWe=s(kw);E7e=n(jWe,"STRONG",{});var QKt=s(E7e);btt=r(QKt,"bart"),QKt.forEach(t),vtt=r(jWe," \u2014 "),yte=n(jWe,"A",{href:!0});var UKt=s(yte);Ftt=r(UKt,"FlaxBartForSequenceClassification"),UKt.forEach(t),Ttt=r(jWe," (BART model)"),jWe.forEach(t),Mtt=i(De),Sw=n(De,"LI",{});var DWe=s(Sw);C7e=n(DWe,"STRONG",{});var HKt=s(C7e);Ett=r(HKt,"bert"),HKt.forEach(t),Ctt=r(DWe," \u2014 "),xte=n(DWe,"A",{href:!0});var JKt=s(xte);wtt=r(JKt,"FlaxBertForSequenceClassification"),JKt.forEach(t),Att=r(DWe," (BERT model)"),DWe.forEach(t),Ltt=i(De),Rw=n(De,"LI",{});var GWe=s(Rw);w7e=n(GWe,"STRONG",{});var YKt=s(w7e);ytt=r(YKt,"big_bird"),YKt.forEach(t),xtt=r(GWe," \u2014 "),$te=n(GWe,"A",{href:!0});var KKt=s($te);$tt=r(KKt,"FlaxBigBirdForSequenceClassification"),KKt.forEach(t),ktt=r(GWe," (BigBird model)"),GWe.forEach(t),Stt=i(De),Pw=n(De,"LI",{});var OWe=s(Pw);A7e=n(OWe,"STRONG",{});var ZKt=s(A7e);Rtt=r(ZKt,"distilbert"),ZKt.forEach(t),Ptt=r(OWe," \u2014 "),kte=n(OWe,"A",{href:!0});var eZt=s(kte);Btt=r(eZt,"FlaxDistilBertForSequenceClassification"),eZt.forEach(t),Itt=r(OWe," (DistilBERT model)"),OWe.forEach(t),Ntt=i(De),Bw=n(De,"LI",{});var VWe=s(Bw);L7e=n(VWe,"STRONG",{});var oZt=s(L7e);qtt=r(oZt,"electra"),oZt.forEach(t),jtt=r(VWe," \u2014 "),Ste=n(VWe,"A",{href:!0});var rZt=s(Ste);Dtt=r(rZt,"FlaxElectraForSequenceClassification"),rZt.forEach(t),Gtt=r(VWe," (ELECTRA model)"),VWe.forEach(t),Ott=i(De),Iw=n(De,"LI",{});var XWe=s(Iw);y7e=n(XWe,"STRONG",{});var tZt=s(y7e);Vtt=r(tZt,"mbart"),tZt.forEach(t),Xtt=r(XWe," \u2014 "),Rte=n(XWe,"A",{href:!0});var aZt=s(Rte);ztt=r(aZt,"FlaxMBartForSequenceClassification"),aZt.forEach(t),Wtt=r(XWe," (mBART model)"),XWe.forEach(t),Qtt=i(De),Nw=n(De,"LI",{});var zWe=s(Nw);x7e=n(zWe,"STRONG",{});var nZt=s(x7e);Utt=r(nZt,"roberta"),nZt.forEach(t),Htt=r(zWe," \u2014 "),Pte=n(zWe,"A",{href:!0});var sZt=s(Pte);Jtt=r(sZt,"FlaxRobertaForSequenceClassification"),sZt.forEach(t),Ytt=r(zWe," (RoBERTa model)"),zWe.forEach(t),Ktt=i(De),qw=n(De,"LI",{});var WWe=s(qw);$7e=n(WWe,"STRONG",{});var lZt=s($7e);Ztt=r(lZt,"roformer"),lZt.forEach(t),eat=r(WWe," \u2014 "),Bte=n(WWe,"A",{href:!0});var iZt=s(Bte);oat=r(iZt,"FlaxRoFormerForSequenceClassification"),iZt.forEach(t),rat=r(WWe," (RoFormer model)"),WWe.forEach(t),tat=i(De),jw=n(De,"LI",{});var QWe=s(jw);k7e=n(QWe,"STRONG",{});var dZt=s(k7e);aat=r(dZt,"xlm-roberta"),dZt.forEach(t),nat=r(QWe," \u2014 "),Ite=n(QWe,"A",{href:!0});var cZt=s(Ite);sat=r(cZt,"FlaxXLMRobertaForSequenceClassification"),cZt.forEach(t),lat=r(QWe," (XLM-RoBERTa model)"),QWe.forEach(t),De.forEach(t),iat=i(xi),T(Dw.$$.fragment,xi),xi.forEach(t),yi.forEach(t),THe=i(f),Rf=n(f,"H2",{class:!0});var BYe=s(Rf);Gw=n(BYe,"A",{id:!0,class:!0,href:!0});var fZt=s(Gw);S7e=n(fZt,"SPAN",{});var mZt=s(S7e);T(Zk.$$.fragment,mZt),mZt.forEach(t),fZt.forEach(t),dat=i(BYe),R7e=n(BYe,"SPAN",{});var gZt=s(R7e);cat=r(gZt,"FlaxAutoModelForQuestionAnswering"),gZt.forEach(t),BYe.forEach(t),MHe=i(f),wr=n(f,"DIV",{class:!0});var $i=s(wr);T(eS.$$.fragment,$i),fat=i($i),Pf=n($i,"P",{});var _se=s(Pf);mat=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nte=n(_se,"A",{href:!0});var hZt=s(Nte);gat=r(hZt,"from_pretrained()"),hZt.forEach(t),hat=r(_se," class method or the "),qte=n(_se,"A",{href:!0});var pZt=s(qte);pat=r(pZt,"from_config()"),pZt.forEach(t),_at=r(_se,` class
method.`),_se.forEach(t),uat=i($i),oS=n($i,"P",{});var IYe=s(oS);bat=r(IYe,"This class cannot be instantiated directly using "),P7e=n(IYe,"CODE",{});var _Zt=s(P7e);vat=r(_Zt,"__init__()"),_Zt.forEach(t),Fat=r(IYe," (throws an error)."),IYe.forEach(t),Tat=i($i),na=n($i,"DIV",{class:!0});var QL=s(na);T(rS.$$.fragment,QL),Mat=i(QL),B7e=n(QL,"P",{});var uZt=s(B7e);Eat=r(uZt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uZt.forEach(t),Cat=i(QL),Bf=n(QL,"P",{});var use=s(Bf);wat=r(use,`Note:
Loading a model from its configuration file does `),I7e=n(use,"STRONG",{});var bZt=s(I7e);Aat=r(bZt,"not"),bZt.forEach(t),Lat=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=n(use,"A",{href:!0});var vZt=s(jte);yat=r(vZt,"from_pretrained()"),vZt.forEach(t),xat=r(use," to load the model weights."),use.forEach(t),$at=i(QL),T(Ow.$$.fragment,QL),QL.forEach(t),kat=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(tS.$$.fragment,ki),Sat=i(ki),N7e=n(ki,"P",{});var FZt=s(N7e);Rat=r(FZt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FZt.forEach(t),Pat=i(ki),Nn=n(ki,"P",{});var UL=s(Nn);Bat=r(UL,"The model class to instantiate is selected based on the "),q7e=n(UL,"CODE",{});var TZt=s(q7e);Iat=r(TZt,"model_type"),TZt.forEach(t),Nat=r(UL,` property of the config object (either
passed as an argument or loaded from `),j7e=n(UL,"CODE",{});var MZt=s(j7e);qat=r(MZt,"pretrained_model_name_or_path"),MZt.forEach(t),jat=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=n(UL,"CODE",{});var EZt=s(D7e);Dat=r(EZt,"pretrained_model_name_or_path"),EZt.forEach(t),Gat=r(UL,":"),UL.forEach(t),Oat=i(ki),Re=n(ki,"UL",{});var Ge=s(Re);Vw=n(Ge,"LI",{});var UWe=s(Vw);G7e=n(UWe,"STRONG",{});var CZt=s(G7e);Vat=r(CZt,"albert"),CZt.forEach(t),Xat=r(UWe," \u2014 "),Dte=n(UWe,"A",{href:!0});var wZt=s(Dte);zat=r(wZt,"FlaxAlbertForQuestionAnswering"),wZt.forEach(t),Wat=r(UWe," (ALBERT model)"),UWe.forEach(t),Qat=i(Ge),Xw=n(Ge,"LI",{});var HWe=s(Xw);O7e=n(HWe,"STRONG",{});var AZt=s(O7e);Uat=r(AZt,"bart"),AZt.forEach(t),Hat=r(HWe," \u2014 "),Gte=n(HWe,"A",{href:!0});var LZt=s(Gte);Jat=r(LZt,"FlaxBartForQuestionAnswering"),LZt.forEach(t),Yat=r(HWe," (BART model)"),HWe.forEach(t),Kat=i(Ge),zw=n(Ge,"LI",{});var JWe=s(zw);V7e=n(JWe,"STRONG",{});var yZt=s(V7e);Zat=r(yZt,"bert"),yZt.forEach(t),ent=r(JWe," \u2014 "),Ote=n(JWe,"A",{href:!0});var xZt=s(Ote);ont=r(xZt,"FlaxBertForQuestionAnswering"),xZt.forEach(t),rnt=r(JWe," (BERT model)"),JWe.forEach(t),tnt=i(Ge),Ww=n(Ge,"LI",{});var YWe=s(Ww);X7e=n(YWe,"STRONG",{});var $Zt=s(X7e);ant=r($Zt,"big_bird"),$Zt.forEach(t),nnt=r(YWe," \u2014 "),Vte=n(YWe,"A",{href:!0});var kZt=s(Vte);snt=r(kZt,"FlaxBigBirdForQuestionAnswering"),kZt.forEach(t),lnt=r(YWe," (BigBird model)"),YWe.forEach(t),int=i(Ge),Qw=n(Ge,"LI",{});var KWe=s(Qw);z7e=n(KWe,"STRONG",{});var SZt=s(z7e);dnt=r(SZt,"distilbert"),SZt.forEach(t),cnt=r(KWe," \u2014 "),Xte=n(KWe,"A",{href:!0});var RZt=s(Xte);fnt=r(RZt,"FlaxDistilBertForQuestionAnswering"),RZt.forEach(t),mnt=r(KWe," (DistilBERT model)"),KWe.forEach(t),gnt=i(Ge),Uw=n(Ge,"LI",{});var ZWe=s(Uw);W7e=n(ZWe,"STRONG",{});var PZt=s(W7e);hnt=r(PZt,"electra"),PZt.forEach(t),pnt=r(ZWe," \u2014 "),zte=n(ZWe,"A",{href:!0});var BZt=s(zte);_nt=r(BZt,"FlaxElectraForQuestionAnswering"),BZt.forEach(t),unt=r(ZWe," (ELECTRA model)"),ZWe.forEach(t),bnt=i(Ge),Hw=n(Ge,"LI",{});var eQe=s(Hw);Q7e=n(eQe,"STRONG",{});var IZt=s(Q7e);vnt=r(IZt,"mbart"),IZt.forEach(t),Fnt=r(eQe," \u2014 "),Wte=n(eQe,"A",{href:!0});var NZt=s(Wte);Tnt=r(NZt,"FlaxMBartForQuestionAnswering"),NZt.forEach(t),Mnt=r(eQe," (mBART model)"),eQe.forEach(t),Ent=i(Ge),Jw=n(Ge,"LI",{});var oQe=s(Jw);U7e=n(oQe,"STRONG",{});var qZt=s(U7e);Cnt=r(qZt,"roberta"),qZt.forEach(t),wnt=r(oQe," \u2014 "),Qte=n(oQe,"A",{href:!0});var jZt=s(Qte);Ant=r(jZt,"FlaxRobertaForQuestionAnswering"),jZt.forEach(t),Lnt=r(oQe," (RoBERTa model)"),oQe.forEach(t),ynt=i(Ge),Yw=n(Ge,"LI",{});var rQe=s(Yw);H7e=n(rQe,"STRONG",{});var DZt=s(H7e);xnt=r(DZt,"roformer"),DZt.forEach(t),$nt=r(rQe," \u2014 "),Ute=n(rQe,"A",{href:!0});var GZt=s(Ute);knt=r(GZt,"FlaxRoFormerForQuestionAnswering"),GZt.forEach(t),Snt=r(rQe," (RoFormer model)"),rQe.forEach(t),Rnt=i(Ge),Kw=n(Ge,"LI",{});var tQe=s(Kw);J7e=n(tQe,"STRONG",{});var OZt=s(J7e);Pnt=r(OZt,"xlm-roberta"),OZt.forEach(t),Bnt=r(tQe," \u2014 "),Hte=n(tQe,"A",{href:!0});var VZt=s(Hte);Int=r(VZt,"FlaxXLMRobertaForQuestionAnswering"),VZt.forEach(t),Nnt=r(tQe," (XLM-RoBERTa model)"),tQe.forEach(t),Ge.forEach(t),qnt=i(ki),T(Zw.$$.fragment,ki),ki.forEach(t),$i.forEach(t),EHe=i(f),If=n(f,"H2",{class:!0});var NYe=s(If);eA=n(NYe,"A",{id:!0,class:!0,href:!0});var XZt=s(eA);Y7e=n(XZt,"SPAN",{});var zZt=s(Y7e);T(aS.$$.fragment,zZt),zZt.forEach(t),XZt.forEach(t),jnt=i(NYe),K7e=n(NYe,"SPAN",{});var WZt=s(K7e);Dnt=r(WZt,"FlaxAutoModelForTokenClassification"),WZt.forEach(t),NYe.forEach(t),CHe=i(f),Ar=n(f,"DIV",{class:!0});var Si=s(Ar);T(nS.$$.fragment,Si),Gnt=i(Si),Nf=n(Si,"P",{});var bse=s(Nf);Ont=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Jte=n(bse,"A",{href:!0});var QZt=s(Jte);Vnt=r(QZt,"from_pretrained()"),QZt.forEach(t),Xnt=r(bse," class method or the "),Yte=n(bse,"A",{href:!0});var UZt=s(Yte);znt=r(UZt,"from_config()"),UZt.forEach(t),Wnt=r(bse,` class
method.`),bse.forEach(t),Qnt=i(Si),sS=n(Si,"P",{});var qYe=s(sS);Unt=r(qYe,"This class cannot be instantiated directly using "),Z7e=n(qYe,"CODE",{});var HZt=s(Z7e);Hnt=r(HZt,"__init__()"),HZt.forEach(t),Jnt=r(qYe," (throws an error)."),qYe.forEach(t),Ynt=i(Si),sa=n(Si,"DIV",{class:!0});var HL=s(sa);T(lS.$$.fragment,HL),Knt=i(HL),eLe=n(HL,"P",{});var JZt=s(eLe);Znt=r(JZt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JZt.forEach(t),est=i(HL),qf=n(HL,"P",{});var vse=s(qf);ost=r(vse,`Note:
Loading a model from its configuration file does `),oLe=n(vse,"STRONG",{});var YZt=s(oLe);rst=r(YZt,"not"),YZt.forEach(t),tst=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=n(vse,"A",{href:!0});var KZt=s(Kte);ast=r(KZt,"from_pretrained()"),KZt.forEach(t),nst=r(vse," to load the model weights."),vse.forEach(t),sst=i(HL),T(oA.$$.fragment,HL),HL.forEach(t),lst=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(iS.$$.fragment,Ri),ist=i(Ri),rLe=n(Ri,"P",{});var ZZt=s(rLe);dst=r(ZZt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZZt.forEach(t),cst=i(Ri),qn=n(Ri,"P",{});var JL=s(qn);fst=r(JL,"The model class to instantiate is selected based on the "),tLe=n(JL,"CODE",{});var eea=s(tLe);mst=r(eea,"model_type"),eea.forEach(t),gst=r(JL,` property of the config object (either
passed as an argument or loaded from `),aLe=n(JL,"CODE",{});var oea=s(aLe);hst=r(oea,"pretrained_model_name_or_path"),oea.forEach(t),pst=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nLe=n(JL,"CODE",{});var rea=s(nLe);_st=r(rea,"pretrained_model_name_or_path"),rea.forEach(t),ust=r(JL,":"),JL.forEach(t),bst=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);rA=n(Co,"LI",{});var aQe=s(rA);sLe=n(aQe,"STRONG",{});var tea=s(sLe);vst=r(tea,"albert"),tea.forEach(t),Fst=r(aQe," \u2014 "),Zte=n(aQe,"A",{href:!0});var aea=s(Zte);Tst=r(aea,"FlaxAlbertForTokenClassification"),aea.forEach(t),Mst=r(aQe," (ALBERT model)"),aQe.forEach(t),Est=i(Co),tA=n(Co,"LI",{});var nQe=s(tA);lLe=n(nQe,"STRONG",{});var nea=s(lLe);Cst=r(nea,"bert"),nea.forEach(t),wst=r(nQe," \u2014 "),eae=n(nQe,"A",{href:!0});var sea=s(eae);Ast=r(sea,"FlaxBertForTokenClassification"),sea.forEach(t),Lst=r(nQe," (BERT model)"),nQe.forEach(t),yst=i(Co),aA=n(Co,"LI",{});var sQe=s(aA);iLe=n(sQe,"STRONG",{});var lea=s(iLe);xst=r(lea,"big_bird"),lea.forEach(t),$st=r(sQe," \u2014 "),oae=n(sQe,"A",{href:!0});var iea=s(oae);kst=r(iea,"FlaxBigBirdForTokenClassification"),iea.forEach(t),Sst=r(sQe," (BigBird model)"),sQe.forEach(t),Rst=i(Co),nA=n(Co,"LI",{});var lQe=s(nA);dLe=n(lQe,"STRONG",{});var dea=s(dLe);Pst=r(dea,"distilbert"),dea.forEach(t),Bst=r(lQe," \u2014 "),rae=n(lQe,"A",{href:!0});var cea=s(rae);Ist=r(cea,"FlaxDistilBertForTokenClassification"),cea.forEach(t),Nst=r(lQe," (DistilBERT model)"),lQe.forEach(t),qst=i(Co),sA=n(Co,"LI",{});var iQe=s(sA);cLe=n(iQe,"STRONG",{});var fea=s(cLe);jst=r(fea,"electra"),fea.forEach(t),Dst=r(iQe," \u2014 "),tae=n(iQe,"A",{href:!0});var mea=s(tae);Gst=r(mea,"FlaxElectraForTokenClassification"),mea.forEach(t),Ost=r(iQe," (ELECTRA model)"),iQe.forEach(t),Vst=i(Co),lA=n(Co,"LI",{});var dQe=s(lA);fLe=n(dQe,"STRONG",{});var gea=s(fLe);Xst=r(gea,"roberta"),gea.forEach(t),zst=r(dQe," \u2014 "),aae=n(dQe,"A",{href:!0});var hea=s(aae);Wst=r(hea,"FlaxRobertaForTokenClassification"),hea.forEach(t),Qst=r(dQe," (RoBERTa model)"),dQe.forEach(t),Ust=i(Co),iA=n(Co,"LI",{});var cQe=s(iA);mLe=n(cQe,"STRONG",{});var pea=s(mLe);Hst=r(pea,"roformer"),pea.forEach(t),Jst=r(cQe," \u2014 "),nae=n(cQe,"A",{href:!0});var _ea=s(nae);Yst=r(_ea,"FlaxRoFormerForTokenClassification"),_ea.forEach(t),Kst=r(cQe," (RoFormer model)"),cQe.forEach(t),Zst=i(Co),dA=n(Co,"LI",{});var fQe=s(dA);gLe=n(fQe,"STRONG",{});var uea=s(gLe);elt=r(uea,"xlm-roberta"),uea.forEach(t),olt=r(fQe," \u2014 "),sae=n(fQe,"A",{href:!0});var bea=s(sae);rlt=r(bea,"FlaxXLMRobertaForTokenClassification"),bea.forEach(t),tlt=r(fQe," (XLM-RoBERTa model)"),fQe.forEach(t),Co.forEach(t),alt=i(Ri),T(cA.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),wHe=i(f),jf=n(f,"H2",{class:!0});var jYe=s(jf);fA=n(jYe,"A",{id:!0,class:!0,href:!0});var vea=s(fA);hLe=n(vea,"SPAN",{});var Fea=s(hLe);T(dS.$$.fragment,Fea),Fea.forEach(t),vea.forEach(t),nlt=i(jYe),pLe=n(jYe,"SPAN",{});var Tea=s(pLe);slt=r(Tea,"FlaxAutoModelForMultipleChoice"),Tea.forEach(t),jYe.forEach(t),AHe=i(f),Lr=n(f,"DIV",{class:!0});var Pi=s(Lr);T(cS.$$.fragment,Pi),llt=i(Pi),Df=n(Pi,"P",{});var Fse=s(Df);ilt=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lae=n(Fse,"A",{href:!0});var Mea=s(lae);dlt=r(Mea,"from_pretrained()"),Mea.forEach(t),clt=r(Fse," class method or the "),iae=n(Fse,"A",{href:!0});var Eea=s(iae);flt=r(Eea,"from_config()"),Eea.forEach(t),mlt=r(Fse,` class
method.`),Fse.forEach(t),glt=i(Pi),fS=n(Pi,"P",{});var DYe=s(fS);hlt=r(DYe,"This class cannot be instantiated directly using "),_Le=n(DYe,"CODE",{});var Cea=s(_Le);plt=r(Cea,"__init__()"),Cea.forEach(t),_lt=r(DYe," (throws an error)."),DYe.forEach(t),ult=i(Pi),la=n(Pi,"DIV",{class:!0});var YL=s(la);T(mS.$$.fragment,YL),blt=i(YL),uLe=n(YL,"P",{});var wea=s(uLe);vlt=r(wea,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wea.forEach(t),Flt=i(YL),Gf=n(YL,"P",{});var Tse=s(Gf);Tlt=r(Tse,`Note:
Loading a model from its configuration file does `),bLe=n(Tse,"STRONG",{});var Aea=s(bLe);Mlt=r(Aea,"not"),Aea.forEach(t),Elt=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=n(Tse,"A",{href:!0});var Lea=s(dae);Clt=r(Lea,"from_pretrained()"),Lea.forEach(t),wlt=r(Tse," to load the model weights."),Tse.forEach(t),Alt=i(YL),T(mA.$$.fragment,YL),YL.forEach(t),Llt=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(gS.$$.fragment,Bi),ylt=i(Bi),vLe=n(Bi,"P",{});var yea=s(vLe);xlt=r(yea,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yea.forEach(t),$lt=i(Bi),jn=n(Bi,"P",{});var KL=s(jn);klt=r(KL,"The model class to instantiate is selected based on the "),FLe=n(KL,"CODE",{});var xea=s(FLe);Slt=r(xea,"model_type"),xea.forEach(t),Rlt=r(KL,` property of the config object (either
passed as an argument or loaded from `),TLe=n(KL,"CODE",{});var $ea=s(TLe);Plt=r($ea,"pretrained_model_name_or_path"),$ea.forEach(t),Blt=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=n(KL,"CODE",{});var kea=s(MLe);Ilt=r(kea,"pretrained_model_name_or_path"),kea.forEach(t),Nlt=r(KL,":"),KL.forEach(t),qlt=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);gA=n(wo,"LI",{});var mQe=s(gA);ELe=n(mQe,"STRONG",{});var Sea=s(ELe);jlt=r(Sea,"albert"),Sea.forEach(t),Dlt=r(mQe," \u2014 "),cae=n(mQe,"A",{href:!0});var Rea=s(cae);Glt=r(Rea,"FlaxAlbertForMultipleChoice"),Rea.forEach(t),Olt=r(mQe," (ALBERT model)"),mQe.forEach(t),Vlt=i(wo),hA=n(wo,"LI",{});var gQe=s(hA);CLe=n(gQe,"STRONG",{});var Pea=s(CLe);Xlt=r(Pea,"bert"),Pea.forEach(t),zlt=r(gQe," \u2014 "),fae=n(gQe,"A",{href:!0});var Bea=s(fae);Wlt=r(Bea,"FlaxBertForMultipleChoice"),Bea.forEach(t),Qlt=r(gQe," (BERT model)"),gQe.forEach(t),Ult=i(wo),pA=n(wo,"LI",{});var hQe=s(pA);wLe=n(hQe,"STRONG",{});var Iea=s(wLe);Hlt=r(Iea,"big_bird"),Iea.forEach(t),Jlt=r(hQe," \u2014 "),mae=n(hQe,"A",{href:!0});var Nea=s(mae);Ylt=r(Nea,"FlaxBigBirdForMultipleChoice"),Nea.forEach(t),Klt=r(hQe," (BigBird model)"),hQe.forEach(t),Zlt=i(wo),_A=n(wo,"LI",{});var pQe=s(_A);ALe=n(pQe,"STRONG",{});var qea=s(ALe);eit=r(qea,"distilbert"),qea.forEach(t),oit=r(pQe," \u2014 "),gae=n(pQe,"A",{href:!0});var jea=s(gae);rit=r(jea,"FlaxDistilBertForMultipleChoice"),jea.forEach(t),tit=r(pQe," (DistilBERT model)"),pQe.forEach(t),ait=i(wo),uA=n(wo,"LI",{});var _Qe=s(uA);LLe=n(_Qe,"STRONG",{});var Dea=s(LLe);nit=r(Dea,"electra"),Dea.forEach(t),sit=r(_Qe," \u2014 "),hae=n(_Qe,"A",{href:!0});var Gea=s(hae);lit=r(Gea,"FlaxElectraForMultipleChoice"),Gea.forEach(t),iit=r(_Qe," (ELECTRA model)"),_Qe.forEach(t),dit=i(wo),bA=n(wo,"LI",{});var uQe=s(bA);yLe=n(uQe,"STRONG",{});var Oea=s(yLe);cit=r(Oea,"roberta"),Oea.forEach(t),fit=r(uQe," \u2014 "),pae=n(uQe,"A",{href:!0});var Vea=s(pae);mit=r(Vea,"FlaxRobertaForMultipleChoice"),Vea.forEach(t),git=r(uQe," (RoBERTa model)"),uQe.forEach(t),hit=i(wo),vA=n(wo,"LI",{});var bQe=s(vA);xLe=n(bQe,"STRONG",{});var Xea=s(xLe);pit=r(Xea,"roformer"),Xea.forEach(t),_it=r(bQe," \u2014 "),_ae=n(bQe,"A",{href:!0});var zea=s(_ae);uit=r(zea,"FlaxRoFormerForMultipleChoice"),zea.forEach(t),bit=r(bQe," (RoFormer model)"),bQe.forEach(t),vit=i(wo),FA=n(wo,"LI",{});var vQe=s(FA);$Le=n(vQe,"STRONG",{});var Wea=s($Le);Fit=r(Wea,"xlm-roberta"),Wea.forEach(t),Tit=r(vQe," \u2014 "),uae=n(vQe,"A",{href:!0});var Qea=s(uae);Mit=r(Qea,"FlaxXLMRobertaForMultipleChoice"),Qea.forEach(t),Eit=r(vQe," (XLM-RoBERTa model)"),vQe.forEach(t),wo.forEach(t),Cit=i(Bi),T(TA.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),LHe=i(f),Of=n(f,"H2",{class:!0});var GYe=s(Of);MA=n(GYe,"A",{id:!0,class:!0,href:!0});var Uea=s(MA);kLe=n(Uea,"SPAN",{});var Hea=s(kLe);T(hS.$$.fragment,Hea),Hea.forEach(t),Uea.forEach(t),wit=i(GYe),SLe=n(GYe,"SPAN",{});var Jea=s(SLe);Ait=r(Jea,"FlaxAutoModelForNextSentencePrediction"),Jea.forEach(t),GYe.forEach(t),yHe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(pS.$$.fragment,Ii),Lit=i(Ii),Vf=n(Ii,"P",{});var Mse=s(Vf);yit=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bae=n(Mse,"A",{href:!0});var Yea=s(bae);xit=r(Yea,"from_pretrained()"),Yea.forEach(t),$it=r(Mse," class method or the "),vae=n(Mse,"A",{href:!0});var Kea=s(vae);kit=r(Kea,"from_config()"),Kea.forEach(t),Sit=r(Mse,` class
method.`),Mse.forEach(t),Rit=i(Ii),_S=n(Ii,"P",{});var OYe=s(_S);Pit=r(OYe,"This class cannot be instantiated directly using "),RLe=n(OYe,"CODE",{});var Zea=s(RLe);Bit=r(Zea,"__init__()"),Zea.forEach(t),Iit=r(OYe," (throws an error)."),OYe.forEach(t),Nit=i(Ii),ia=n(Ii,"DIV",{class:!0});var ZL=s(ia);T(uS.$$.fragment,ZL),qit=i(ZL),PLe=n(ZL,"P",{});var eoa=s(PLe);jit=r(eoa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eoa.forEach(t),Dit=i(ZL),Xf=n(ZL,"P",{});var Ese=s(Xf);Git=r(Ese,`Note:
Loading a model from its configuration file does `),BLe=n(Ese,"STRONG",{});var ooa=s(BLe);Oit=r(ooa,"not"),ooa.forEach(t),Vit=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=n(Ese,"A",{href:!0});var roa=s(Fae);Xit=r(roa,"from_pretrained()"),roa.forEach(t),zit=r(Ese," to load the model weights."),Ese.forEach(t),Wit=i(ZL),T(EA.$$.fragment,ZL),ZL.forEach(t),Qit=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(bS.$$.fragment,Ni),Uit=i(Ni),ILe=n(Ni,"P",{});var toa=s(ILe);Hit=r(toa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),toa.forEach(t),Jit=i(Ni),Dn=n(Ni,"P",{});var ey=s(Dn);Yit=r(ey,"The model class to instantiate is selected based on the "),NLe=n(ey,"CODE",{});var aoa=s(NLe);Kit=r(aoa,"model_type"),aoa.forEach(t),Zit=r(ey,` property of the config object (either
passed as an argument or loaded from `),qLe=n(ey,"CODE",{});var noa=s(qLe);edt=r(noa,"pretrained_model_name_or_path"),noa.forEach(t),odt=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jLe=n(ey,"CODE",{});var soa=s(jLe);rdt=r(soa,"pretrained_model_name_or_path"),soa.forEach(t),tdt=r(ey,":"),ey.forEach(t),adt=i(Ni),DLe=n(Ni,"UL",{});var loa=s(DLe);CA=n(loa,"LI",{});var FQe=s(CA);GLe=n(FQe,"STRONG",{});var ioa=s(GLe);ndt=r(ioa,"bert"),ioa.forEach(t),sdt=r(FQe," \u2014 "),Tae=n(FQe,"A",{href:!0});var doa=s(Tae);ldt=r(doa,"FlaxBertForNextSentencePrediction"),doa.forEach(t),idt=r(FQe," (BERT model)"),FQe.forEach(t),loa.forEach(t),ddt=i(Ni),T(wA.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),xHe=i(f),zf=n(f,"H2",{class:!0});var VYe=s(zf);AA=n(VYe,"A",{id:!0,class:!0,href:!0});var coa=s(AA);OLe=n(coa,"SPAN",{});var foa=s(OLe);T(vS.$$.fragment,foa),foa.forEach(t),coa.forEach(t),cdt=i(VYe),VLe=n(VYe,"SPAN",{});var moa=s(VLe);fdt=r(moa,"FlaxAutoModelForImageClassification"),moa.forEach(t),VYe.forEach(t),$He=i(f),xr=n(f,"DIV",{class:!0});var qi=s(xr);T(FS.$$.fragment,qi),mdt=i(qi),Wf=n(qi,"P",{});var Cse=s(Wf);gdt=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mae=n(Cse,"A",{href:!0});var goa=s(Mae);hdt=r(goa,"from_pretrained()"),goa.forEach(t),pdt=r(Cse," class method or the "),Eae=n(Cse,"A",{href:!0});var hoa=s(Eae);_dt=r(hoa,"from_config()"),hoa.forEach(t),udt=r(Cse,` class
method.`),Cse.forEach(t),bdt=i(qi),TS=n(qi,"P",{});var XYe=s(TS);vdt=r(XYe,"This class cannot be instantiated directly using "),XLe=n(XYe,"CODE",{});var poa=s(XLe);Fdt=r(poa,"__init__()"),poa.forEach(t),Tdt=r(XYe," (throws an error)."),XYe.forEach(t),Mdt=i(qi),da=n(qi,"DIV",{class:!0});var oy=s(da);T(MS.$$.fragment,oy),Edt=i(oy),zLe=n(oy,"P",{});var _oa=s(zLe);Cdt=r(_oa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_oa.forEach(t),wdt=i(oy),Qf=n(oy,"P",{});var wse=s(Qf);Adt=r(wse,`Note:
Loading a model from its configuration file does `),WLe=n(wse,"STRONG",{});var uoa=s(WLe);Ldt=r(uoa,"not"),uoa.forEach(t),ydt=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=n(wse,"A",{href:!0});var boa=s(Cae);xdt=r(boa,"from_pretrained()"),boa.forEach(t),$dt=r(wse," to load the model weights."),wse.forEach(t),kdt=i(oy),T(LA.$$.fragment,oy),oy.forEach(t),Sdt=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(ES.$$.fragment,ji),Rdt=i(ji),QLe=n(ji,"P",{});var voa=s(QLe);Pdt=r(voa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),voa.forEach(t),Bdt=i(ji),Gn=n(ji,"P",{});var ry=s(Gn);Idt=r(ry,"The model class to instantiate is selected based on the "),ULe=n(ry,"CODE",{});var Foa=s(ULe);Ndt=r(Foa,"model_type"),Foa.forEach(t),qdt=r(ry,` property of the config object (either
passed as an argument or loaded from `),HLe=n(ry,"CODE",{});var Toa=s(HLe);jdt=r(Toa,"pretrained_model_name_or_path"),Toa.forEach(t),Ddt=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JLe=n(ry,"CODE",{});var Moa=s(JLe);Gdt=r(Moa,"pretrained_model_name_or_path"),Moa.forEach(t),Odt=r(ry,":"),ry.forEach(t),Vdt=i(ji),CS=n(ji,"UL",{});var zYe=s(CS);yA=n(zYe,"LI",{});var TQe=s(yA);YLe=n(TQe,"STRONG",{});var Eoa=s(YLe);Xdt=r(Eoa,"beit"),Eoa.forEach(t),zdt=r(TQe," \u2014 "),wae=n(TQe,"A",{href:!0});var Coa=s(wae);Wdt=r(Coa,"FlaxBeitForImageClassification"),Coa.forEach(t),Qdt=r(TQe," (BEiT model)"),TQe.forEach(t),Udt=i(zYe),xA=n(zYe,"LI",{});var MQe=s(xA);KLe=n(MQe,"STRONG",{});var woa=s(KLe);Hdt=r(woa,"vit"),woa.forEach(t),Jdt=r(MQe," \u2014 "),Aae=n(MQe,"A",{href:!0});var Aoa=s(Aae);Ydt=r(Aoa,"FlaxViTForImageClassification"),Aoa.forEach(t),Kdt=r(MQe," (ViT model)"),MQe.forEach(t),zYe.forEach(t),Zdt=i(ji),T($A.$$.fragment,ji),ji.forEach(t),qi.forEach(t),kHe=i(f),Uf=n(f,"H2",{class:!0});var WYe=s(Uf);kA=n(WYe,"A",{id:!0,class:!0,href:!0});var Loa=s(kA);ZLe=n(Loa,"SPAN",{});var yoa=s(ZLe);T(wS.$$.fragment,yoa),yoa.forEach(t),Loa.forEach(t),ect=i(WYe),eye=n(WYe,"SPAN",{});var xoa=s(eye);oct=r(xoa,"FlaxAutoModelForVision2Seq"),xoa.forEach(t),WYe.forEach(t),SHe=i(f),$r=n(f,"DIV",{class:!0});var Di=s($r);T(AS.$$.fragment,Di),rct=i(Di),Hf=n(Di,"P",{});var Ase=s(Hf);tct=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Lae=n(Ase,"A",{href:!0});var $oa=s(Lae);act=r($oa,"from_pretrained()"),$oa.forEach(t),nct=r(Ase," class method or the "),yae=n(Ase,"A",{href:!0});var koa=s(yae);sct=r(koa,"from_config()"),koa.forEach(t),lct=r(Ase,` class
method.`),Ase.forEach(t),ict=i(Di),LS=n(Di,"P",{});var QYe=s(LS);dct=r(QYe,"This class cannot be instantiated directly using "),oye=n(QYe,"CODE",{});var Soa=s(oye);cct=r(Soa,"__init__()"),Soa.forEach(t),fct=r(QYe," (throws an error)."),QYe.forEach(t),mct=i(Di),ca=n(Di,"DIV",{class:!0});var ty=s(ca);T(yS.$$.fragment,ty),gct=i(ty),rye=n(ty,"P",{});var Roa=s(rye);hct=r(Roa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Roa.forEach(t),pct=i(ty),Jf=n(ty,"P",{});var Lse=s(Jf);_ct=r(Lse,`Note:
Loading a model from its configuration file does `),tye=n(Lse,"STRONG",{});var Poa=s(tye);uct=r(Poa,"not"),Poa.forEach(t),bct=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=n(Lse,"A",{href:!0});var Boa=s(xae);vct=r(Boa,"from_pretrained()"),Boa.forEach(t),Fct=r(Lse," to load the model weights."),Lse.forEach(t),Tct=i(ty),T(SA.$$.fragment,ty),ty.forEach(t),Mct=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(xS.$$.fragment,Gi),Ect=i(Gi),aye=n(Gi,"P",{});var Ioa=s(aye);Cct=r(Ioa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ioa.forEach(t),wct=i(Gi),On=n(Gi,"P",{});var ay=s(On);Act=r(ay,"The model class to instantiate is selected based on the "),nye=n(ay,"CODE",{});var Noa=s(nye);Lct=r(Noa,"model_type"),Noa.forEach(t),yct=r(ay,` property of the config object (either
passed as an argument or loaded from `),sye=n(ay,"CODE",{});var qoa=s(sye);xct=r(qoa,"pretrained_model_name_or_path"),qoa.forEach(t),$ct=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lye=n(ay,"CODE",{});var joa=s(lye);kct=r(joa,"pretrained_model_name_or_path"),joa.forEach(t),Sct=r(ay,":"),ay.forEach(t),Rct=i(Gi),iye=n(Gi,"UL",{});var Doa=s(iye);RA=n(Doa,"LI",{});var EQe=s(RA);dye=n(EQe,"STRONG",{});var Goa=s(dye);Pct=r(Goa,"vision-encoder-decoder"),Goa.forEach(t),Bct=r(EQe," \u2014 "),$ae=n(EQe,"A",{href:!0});var Ooa=s($ae);Ict=r(Ooa,"FlaxVisionEncoderDecoderModel"),Ooa.forEach(t),Nct=r(EQe," (Vision Encoder decoder model)"),EQe.forEach(t),Doa.forEach(t),qct=i(Gi),T(PA.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Kta)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertModel"),c(am,"id","extending-the-auto-classes"),c(am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(am,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sm,"id","transformers.AutoConfig"),c(sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sm,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(nP,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(sP,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertConfig"),c(lP,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartConfig"),c(iP,"href","/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitConfig"),c(dP,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertConfig"),c(cP,"href","/docs/transformers/pr_18602/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(fP,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdConfig"),c(mP,"href","/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(gP,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(hP,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(pP,"href","/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomConfig"),c(_P,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertConfig"),c(uP,"href","/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineConfig"),c(bP,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPConfig"),c(vP,"href","/docs/transformers/pr_18602/en/model_doc/codegen#transformers.CodeGenConfig"),c(FP,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertConfig"),c(TP,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextConfig"),c(MP,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLConfig"),c(EP,"href","/docs/transformers/pr_18602/en/model_doc/cvt#transformers.CvtConfig"),c(CP,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(wP,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(AP,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(LP,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaConfig"),c(yP,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(xP,"href","/docs/transformers/pr_18602/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($P,"href","/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTConfig"),c(kP,"href","/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrConfig"),c(SP,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertConfig"),c(RP,"href","/docs/transformers/pr_18602/en/model_doc/dpr#transformers.DPRConfig"),c(PP,"href","/docs/transformers/pr_18602/en/model_doc/dpt#transformers.DPTConfig"),c(BP,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraConfig"),c(IP,"href","/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(NP,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertConfig"),c(qP,"href","/docs/transformers/pr_18602/en/model_doc/flava#transformers.FlavaConfig"),c(jP,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetConfig"),c(DP,"href","/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTConfig"),c(GP,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelConfig"),c(OP,"href","/docs/transformers/pr_18602/en/model_doc/glpn#transformers.GLPNConfig"),c(VP,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Config"),c(XP,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(zP,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(WP,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJConfig"),c(QP,"href","/docs/transformers/pr_18602/en/model_doc/groupvit#transformers.GroupViTConfig"),c(UP,"href","/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertConfig"),c(HP,"href","/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertConfig"),c(JP,"href","/docs/transformers/pr_18602/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(YP,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(KP,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(ZP,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(eB,"href","/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDConfig"),c(oB,"href","/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitConfig"),c(rB,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerConfig"),c(tB,"href","/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5Config"),c(aB,"href","/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeConfig"),c(nB,"href","/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertConfig"),c(sB,"href","/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100Config"),c(lB,"href","/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianConfig"),c(iB,"href","/docs/transformers/pr_18602/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(dB,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartConfig"),c(cB,"href","/docs/transformers/pr_18602/en/model_doc/mctct#transformers.MCTCTConfig"),c(fB,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(mB,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(gB,"href","/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(hB,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetConfig"),c(pB,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Config"),c(_B,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpConfig"),c(uB,"href","/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaConfig"),c(bB,"href","/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(vB,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(FB,"href","/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTConfig"),c(TB,"href","/docs/transformers/pr_18602/en/model_doc/owlvit#transformers.OwlViTConfig"),c(MB,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusConfig"),c(EB,"href","/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverConfig"),c(CB,"href","/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartConfig"),c(wB,"href","/docs/transformers/pr_18602/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(AB,"href","/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(LB,"href","/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(yB,"href","/docs/transformers/pr_18602/en/model_doc/rag#transformers.RagConfig"),c(xB,"href","/docs/transformers/pr_18602/en/model_doc/realm#transformers.RealmConfig"),c($B,"href","/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerConfig"),c(kB,"href","/docs/transformers/pr_18602/en/model_doc/regnet#transformers.RegNetConfig"),c(SB,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertConfig"),c(RB,"href","/docs/transformers/pr_18602/en/model_doc/resnet#transformers.ResNetConfig"),c(PB,"href","/docs/transformers/pr_18602/en/model_doc/retribert#transformers.RetriBertConfig"),c(BB,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaConfig"),c(IB,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerConfig"),c(NB,"href","/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerConfig"),c(qB,"href","/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWConfig"),c(jB,"href","/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDConfig"),c(DB,"href","/docs/transformers/pr_18602/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(GB,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(OB,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(VB,"href","/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterConfig"),c(XB,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(zB,"href","/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinConfig"),c(WB,"href","/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2Config"),c(QB,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Config"),c(UB,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasConfig"),c(HB,"href","/docs/transformers/pr_18602/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(JB,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(YB,"href","/docs/transformers/pr_18602/en/model_doc/trocr#transformers.TrOCRConfig"),c(KB,"href","/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(ZB,"href","/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(eI,"href","/docs/transformers/pr_18602/en/model_doc/van#transformers.VanConfig"),c(oI,"href","/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEConfig"),c(rI,"href","/docs/transformers/pr_18602/en/model_doc/vilt#transformers.ViltConfig"),c(tI,"href","/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(aI,"href","/docs/transformers/pr_18602/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(nI,"href","/docs/transformers/pr_18602/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(sI,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTConfig"),c(lI,"href","/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(iI,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(dI,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(cI,"href","/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMConfig"),c(fI,"href","/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMConfig"),c(mI,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMConfig"),c(gI,"href","/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(hI,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(pI,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(_I,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetConfig"),c(uI,"href","/docs/transformers/pr_18602/en/model_doc/yolos#transformers.YolosConfig"),c(bI,"href","/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"id","transformers.AutoTokenizer"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(vI,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(FI,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertTokenizer"),c(TI,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MI,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartTokenizer"),c(EI,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartTokenizerFast"),c(CI,"href","/docs/transformers/pr_18602/en/model_doc/barthez#transformers.BarthezTokenizer"),c(wI,"href","/docs/transformers/pr_18602/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(AI,"href","/docs/transformers/pr_18602/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(LI,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizer"),c(yI,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizerFast"),c(xI,"href","/docs/transformers/pr_18602/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c($I,"href","/docs/transformers/pr_18602/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(kI,"href","/docs/transformers/pr_18602/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(SI,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(RI,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(PI,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BI,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(II,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(NI,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(qI,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(jI,"href","/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(DI,"href","/docs/transformers/pr_18602/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(GI,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertTokenizer"),c(OI,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(VI,"href","/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineTokenizer"),c(XI,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPTokenizer"),c(zI,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(WI,"href","/docs/transformers/pr_18602/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(QI,"href","/docs/transformers/pr_18602/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(UI,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(HI,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(JI,"href","/docs/transformers/pr_18602/en/model_doc/cpm#transformers.CpmTokenizer"),c(YI,"href","/docs/transformers/pr_18602/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(KI,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ZI,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eN,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oN,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaTokenizer"),c(rN,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(tN,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(aN,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(nN,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(sN,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(lN,"href","/docs/transformers/pr_18602/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(iN,"href","/docs/transformers/pr_18602/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(dN,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraTokenizer"),c(cN,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(fN,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(mN,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetTokenizer"),c(gN,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(hN,"href","/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(pN,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelTokenizer"),c(_N,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(uN,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bN,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vN,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FN,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TN,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(MN,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EN,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CN,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPTokenizer"),c(wN,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(AN,"href","/docs/transformers/pr_18602/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LN,"href","/docs/transformers/pr_18602/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(yN,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xN,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaTokenizer"),c($N,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kN,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SN,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RN,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PN,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(BN,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(IN,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(NN,"href","/docs/transformers/pr_18602/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qN,"href","/docs/transformers/pr_18602/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jN,"href","/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDTokenizer"),c(DN,"href","/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDTokenizerFast"),c(GN,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ON,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VN,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.T5Tokenizer"),c(XN,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.T5TokenizerFast"),c(zN,"href","/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeTokenizer"),c(WN,"href","/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(QN,"href","/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(UN,"href","/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(HN,"href","/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianTokenizer"),c(JN,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartTokenizer"),c(YN,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(KN,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(ZN,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(eq,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizer"),c(oq,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizerFast"),c(rq,"href","/docs/transformers/pr_18602/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tq,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aq,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nq,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sq,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lq,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.T5Tokenizer"),c(iq,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.T5TokenizerFast"),c(dq,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpTokenizer"),c(cq,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(fq,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizer"),c(mq,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizerFast"),c(gq,"href","/docs/transformers/pr_18602/en/model_doc/nllb#transformers.NllbTokenizer"),c(hq,"href","/docs/transformers/pr_18602/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(pq,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertTokenizer"),c(_q,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(uq,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bq,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vq,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Fq,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPTokenizer"),c(Tq,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Mq,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Eq,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Cq,"href","/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(wq,"href","/docs/transformers/pr_18602/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Aq,"href","/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Lq,"href","/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(yq,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizer"),c(xq,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizerFast"),c($q,"href","/docs/transformers/pr_18602/en/model_doc/rag#transformers.RagTokenizer"),c(kq,"href","/docs/transformers/pr_18602/en/model_doc/realm#transformers.RealmTokenizer"),c(Sq,"href","/docs/transformers/pr_18602/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Rq,"href","/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Pq,"href","/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Bq,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Iq,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Nq,"href","/docs/transformers/pr_18602/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(qq,"href","/docs/transformers/pr_18602/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(jq,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Dq,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Gq,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Oq,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Vq,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Xq,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(zq,"href","/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Wq,"href","/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Qq,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Uq,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Hq,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.T5Tokenizer"),c(Jq,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Yq,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasTokenizer"),c(Kq,"href","/docs/transformers/pr_18602/en/model_doc/tapex#transformers.TapexTokenizer"),c(Zq,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(ej,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizer"),c(oj,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizerFast"),c(rj,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizer"),c(tj,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertTokenizerFast"),c(aj,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nj,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sj,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(lj,"href","/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMTokenizer"),c(ij,"href","/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(dj,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMTokenizer"),c(cj,"href","/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(fj,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(mj,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(gj,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hj,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pj,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(_j,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(uj,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertTokenizer"),c(bj,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"id","transformers.AutoFeatureExtractor"),c(ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ap,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(vj,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Fj,"href","/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Tj,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Mj,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Ej,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Cj,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wj,"href","/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Aj,"href","/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Lj,"href","/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(yj,"href","/docs/transformers/pr_18602/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(xj,"href","/docs/transformers/pr_18602/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c($j,"href","/docs/transformers/pr_18602/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(kj,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Sj,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Rj,"href","/docs/transformers/pr_18602/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Pj,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Bj,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Ij,"href","/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_18602/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(qj,"href","/docs/transformers/pr_18602/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(jj,"href","/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Dj,"href","/docs/transformers/pr_18602/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Gj,"href","/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Oj,"href","/docs/transformers/pr_18602/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Vj,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Xj,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zj,"href","/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Wj,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Qj,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Uj,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18602/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eD,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oD,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rD,"href","/docs/transformers/pr_18602/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zp,"id","transformers.AutoProcessor"),c(zp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zp,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(tD,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(aD,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPProcessor"),c(nD,"href","/docs/transformers/pr_18602/en/model_doc/flava#transformers.FlavaProcessor"),c(sD,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPProcessor"),c(lD,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(iD,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(dD,"href","/docs/transformers/pr_18602/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(cD,"href","/docs/transformers/pr_18602/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(fD,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mD,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gD,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(hD,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(pD,"href","/docs/transformers/pr_18602/en/model_doc/trocr#transformers.TrOCRProcessor"),c(_D,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uD,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bD,"href","/docs/transformers/pr_18602/en/model_doc/vilt#transformers.ViltProcessor"),c(vD,"href","/docs/transformers/pr_18602/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(FD,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TD,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MD,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h_,"id","transformers.AutoModel"),c(h_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h_,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(ED,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CD,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wD,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AD,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertModel"),c(LD,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartModel"),c(yD,"href","/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitModel"),c(xD,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertModel"),c($D,"href","/docs/transformers/pr_18602/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(kD,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdModel"),c(SD,"href","/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(RD,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(PD,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(BD,"href","/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomModel"),c(ID,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertModel"),c(ND,"href","/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineModel"),c(qD,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.CLIPModel"),c(jD,"href","/docs/transformers/pr_18602/en/model_doc/codegen#transformers.CodeGenModel"),c(DD,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertModel"),c(GD,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextModel"),c(OD,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLModel"),c(VD,"href","/docs/transformers/pr_18602/en/model_doc/cvt#transformers.CvtModel"),c(XD,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(zD,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(WD,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(QD,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaModel"),c(UD,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(HD,"href","/docs/transformers/pr_18602/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(JD,"href","/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTModel"),c(YD,"href","/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrModel"),c(KD,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertModel"),c(ZD,"href","/docs/transformers/pr_18602/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(eG,"href","/docs/transformers/pr_18602/en/model_doc/dpt#transformers.DPTModel"),c(oG,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraModel"),c(rG,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertModel"),c(tG,"href","/docs/transformers/pr_18602/en/model_doc/flava#transformers.FlavaModel"),c(aG,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetModel"),c(nG,"href","/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTModel"),c(sG,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelModel"),c(lG,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelBaseModel"),c(iG,"href","/docs/transformers/pr_18602/en/model_doc/glpn#transformers.GLPNModel"),c(dG,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2Model"),c(cG,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(fG,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(mG,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJModel"),c(gG,"href","/docs/transformers/pr_18602/en/model_doc/groupvit#transformers.GroupViTModel"),c(hG,"href","/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertModel"),c(pG,"href","/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertModel"),c(_G,"href","/docs/transformers/pr_18602/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(uG,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(bG,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(vG,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(FG,"href","/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDModel"),c(TG,"href","/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitModel"),c(MG,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerModel"),c(EG,"href","/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5Model"),c(CG,"href","/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeModel"),c(wG,"href","/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertModel"),c(AG,"href","/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100Model"),c(LG,"href","/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianModel"),c(yG,"href","/docs/transformers/pr_18602/en/model_doc/maskformer#transformers.MaskFormerModel"),c(xG,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartModel"),c($G,"href","/docs/transformers/pr_18602/en/model_doc/mctct#transformers.MCTCTModel"),c(kG,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(SG,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertModel"),c(RG,"href","/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTModel"),c(PG,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetModel"),c(BG,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5Model"),c(IG,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpModel"),c(NG,"href","/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaModel"),c(qG,"href","/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100Model"),c(jG,"href","/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerModel"),c(DG,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(GG,"href","/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTModel"),c(OG,"href","/docs/transformers/pr_18602/en/model_doc/owlvit#transformers.OwlViTModel"),c(VG,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusModel"),c(XG,"href","/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverModel"),c(zG,"href","/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartModel"),c(WG,"href","/docs/transformers/pr_18602/en/model_doc/poolformer#transformers.PoolFormerModel"),c(QG,"href","/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(UG,"href","/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertModel"),c(HG,"href","/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerModel"),c(JG,"href","/docs/transformers/pr_18602/en/model_doc/regnet#transformers.RegNetModel"),c(YG,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertModel"),c(KG,"href","/docs/transformers/pr_18602/en/model_doc/resnet#transformers.ResNetModel"),c(ZG,"href","/docs/transformers/pr_18602/en/model_doc/retribert#transformers.RetriBertModel"),c(eO,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaModel"),c(oO,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerModel"),c(rO,"href","/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerModel"),c(tO,"href","/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWModel"),c(aO,"href","/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDModel"),c(nO,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(sO,"href","/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterModel"),c(lO,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(iO,"href","/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinModel"),c(dO,"href","/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2Model"),c(cO,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5Model"),c(fO,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasModel"),c(mO,"href","/docs/transformers/pr_18602/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(gO,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(hO,"href","/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechModel"),c(pO,"href","/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(_O,"href","/docs/transformers/pr_18602/en/model_doc/van#transformers.VanModel"),c(uO,"href","/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEModel"),c(bO,"href","/docs/transformers/pr_18602/en/model_doc/vilt#transformers.ViltModel"),c(vO,"href","/docs/transformers/pr_18602/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(FO,"href","/docs/transformers/pr_18602/en/model_doc/visual_bert#transformers.VisualBertModel"),c(TO,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTModel"),c(MO,"href","/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(EO,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(CO,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(wO,"href","/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMModel"),c(AO,"href","/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMModel"),c(LO,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMModel"),c(yO,"href","/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(xO,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c($O,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(kO,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetModel"),c(SO,"href","/docs/transformers/pr_18602/en/model_doc/yolos#transformers.YolosModel"),c(RO,"href","/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C2,"id","transformers.AutoModelForPreTraining"),c(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C2,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(PO,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForPreTraining"),c(qO,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForPreTraining"),c(DO,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(GO,"href","/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomForCausalLM"),c(OO,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(VO,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(XO,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zO,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(WO,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(QO,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(UO,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForPreTraining"),c(HO,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(JO,"href","/docs/transformers/pr_18602/en/model_doc/flava#transformers.FlavaForPreTraining"),c(YO,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForPreTraining"),c(KO,"href","/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(eV,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(oV,"href","/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(rV,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(tV,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(aV,"href","/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForMaskedLM"),c(nV,"href","/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(sV,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(lV,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(iV,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dV,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(fV,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(mV,"href","/docs/transformers/pr_18602/en/model_doc/retribert#transformers.RetriBertModel"),c(gV,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(hV,"href","/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(pV,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(_V,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bV,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vV,"href","/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(FV,"href","/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(TV,"href","/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(MV,"href","/docs/transformers/pr_18602/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(EV,"href","/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(CV,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(wV,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(AV,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LV,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(yV,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xV,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T1,"id","transformers.AutoModelForCausalLM"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c($V,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForCausalLM"),c(PV,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertLMHeadModel"),c(BV,"href","/docs/transformers/pr_18602/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(IV,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(NV,"href","/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(qV,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(jV,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(DV,"href","/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomForCausalLM"),c(GV,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(OV,"href","/docs/transformers/pr_18602/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(VV,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(XV,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(zV,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForCausalLM"),c(WV,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(QV,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(UV,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(HV,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(JV,"href","/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianForCausalLM"),c(YV,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForCausalLM"),c(KV,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(ZV,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForCausalLM"),c(eX,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oX,"href","/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTForCausalLM"),c(rX,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(tX,"href","/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(aX,"href","/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(nX,"href","/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(sX,"href","/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(lX,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(iX,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(dX,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(cX,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(fX,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mX,"href","/docs/transformers/pr_18602/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(gX,"href","/docs/transformers/pr_18602/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(hX,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pX,"href","/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_X,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(uX,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(bX,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fb,"id","transformers.AutoModelForMaskedLM"),c(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fb,"href","#transformers.AutoModelForMaskedLM"),c(fd,"class","relative group"),c(vX,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FX,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TX,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MX,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(EX,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CX,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForMaskedLM"),c(wX,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(AX,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(LX,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(yX,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(xX,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c($X,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(kX,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(SX,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(RX,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(PX,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(BX,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(IX,"href","/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(NX,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qX,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(jX,"href","/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForMaskedLM"),c(DX,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(GX,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(OX,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(VX,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(XX,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(zX,"href","/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(WX,"href","/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(QX,"href","/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(UX,"href","/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(HX,"href","/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(JX,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(YX,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(KX,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(ZX,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ez,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oz,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rz,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tz,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(az,"href","/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zb,"id","transformers.AutoModelForSeq2SeqLM"),c(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zb,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(nz,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sz,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lz,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iz,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dz,"href","/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(cz,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(fz,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(mz,"href","/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(gz,"href","/docs/transformers/pr_18602/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hz,"href","/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(pz,"href","/docs/transformers/pr_18602/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(_z,"href","/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(uz,"href","/docs/transformers/pr_18602/en/model_doc/marian#transformers.MarianMTModel"),c(bz,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(vz,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Tz,"href","/docs/transformers/pr_18602/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_18602/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(wz,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_18602/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForSequenceClassification"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForSequenceClassification"),c(ud,"class","relative group"),c(Lz,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(kz,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Sz,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Rz,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Pz,"href","/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Bz,"href","/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Iz,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Nz,"href","/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(qz,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(jz,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Dz,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(zz,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(sW,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(lW,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(iW,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(dW,"href","/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(cW,"href","/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(fW,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(mW,"href","/docs/transformers/pr_18602/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(gW,"href","/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(hW,"href","/docs/transformers/pr_18602/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(pW,"href","/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(_W,"href","/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(uW,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(vW,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(FW,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(TW,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(MW,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(EW,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(CW,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(wW,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(AW,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(LW,"href","/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.AutoModelForMultipleChoice"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(yW,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(SW,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForMultipleChoice"),c(RW,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(PW,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(BW,"href","/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(IW,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(NW,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(qW,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(jW,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(DW,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(GW,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(OW,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(VW,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(XW,"href","/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(zW,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(WW,"href","/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(QW,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(HW,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(JW,"href","/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(YW,"href","/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(KW,"href","/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n6,"id","transformers.AutoModelForNextSentencePrediction"),c(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n6,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(iQ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(mQ,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(gQ,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(hQ,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(pQ,"href","/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(_Q,"href","/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p6,"id","transformers.AutoModelForTokenClassification"),c(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p6,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(uQ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(TQ,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForTokenClassification"),c(MQ,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(EQ,"href","/docs/transformers/pr_18602/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(CQ,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(wQ,"href","/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineForTokenClassification"),c(AQ,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(LQ,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(yQ,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(xQ,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c($Q,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(kQ,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(SQ,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(RQ,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(PQ,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(BQ,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(IQ,"href","/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(NQ,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(qQ,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(jQ,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(DQ,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(GQ,"href","/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForTokenClassification"),c(OQ,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(VQ,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(XQ,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(zQ,"href","/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(WQ,"href","/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(QQ,"href","/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(UQ,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(HQ,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(JQ,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(YQ,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(KQ,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(eU,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(oU,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(rU,"href","/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForQuestionAnswering"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(tU,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_18602/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_18602/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(FU,"href","/docs/transformers/pr_18602/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_18602/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_18602/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_18602/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_18602/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c($U,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_18602/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_18602/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_18602/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_18602/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_18602/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_18602/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18602/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18602/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(zU,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(UU,"href","/docs/transformers/pr_18602/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForTableQuestionAnswering"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(HU,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForImageClassification"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(ZU,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitForImageClassification"),c(tH,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(aH,"href","/docs/transformers/pr_18602/en/model_doc/cvt#transformers.CvtForImageClassification"),c(nH,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(sH,"href","/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTForImageClassification"),c(lH,"href","/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(iH,"href","/docs/transformers/pr_18602/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(dH,"href","/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitForImageClassification"),c(cH,"href","/docs/transformers/pr_18602/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(fH,"href","/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(mH,"href","/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(gH,"href","/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(hH,"href","/docs/transformers/pr_18602/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(pH,"href","/docs/transformers/pr_18602/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(_H,"href","/docs/transformers/pr_18602/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(uH,"href","/docs/transformers/pr_18602/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(bH,"href","/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(vH,"href","/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinForImageClassification"),c(FH,"href","/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(TH,"href","/docs/transformers/pr_18602/en/model_doc/van#transformers.VanForImageClassification"),c(MH,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForVideoClassification"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(EH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_18602/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForVision2Seq"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(LH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(kH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_18602/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForAudioClassification"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(BH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(jH,"href","/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(GH,"href","/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(OH,"href","/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(VH,"href","/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(XH,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(zH,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(WH,"href","/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForAudioFrameClassification"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(QH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(YH,"href","/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(KH,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(ZH,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(eJ,"href","/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o8,"id","transformers.AutoModelForCTC"),c(o8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o8,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(oJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(nJ,"href","/docs/transformers/pr_18602/en/model_doc/hubert#transformers.HubertForCTC"),c(sJ,"href","/docs/transformers/pr_18602/en/model_doc/mctct#transformers.MCTCTForCTC"),c(lJ,"href","/docs/transformers/pr_18602/en/model_doc/sew#transformers.SEWForCTC"),c(iJ,"href","/docs/transformers/pr_18602/en/model_doc/sew-d#transformers.SEWDForCTC"),c(dJ,"href","/docs/transformers/pr_18602/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(cJ,"href","/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(fJ,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(mJ,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(gJ,"href","/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(p8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_18602/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(bJ,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T8,"id","transformers.AutoModelForAudioXVector"),c(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T8,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(EJ,"href","/docs/transformers/pr_18602/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(CJ,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wJ,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(AJ,"href","/docs/transformers/pr_18602/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($8,"id","transformers.AutoModelForMaskedImageModeling"),c($8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($8,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(LJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_18602/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(kJ,"href","/docs/transformers/pr_18602/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(SJ,"href","/docs/transformers/pr_18602/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(RJ,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q8,"id","transformers.AutoModelForObjectDetection"),c(q8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q8,"href","#transformers.AutoModelForObjectDetection"),c(fc,"class","relative group"),c(PJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrForObjectDetection"),c(qJ,"href","/docs/transformers/pr_18602/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X8,"id","transformers.AutoModelForImageSegmentation"),c(X8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X8,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_18602/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H8,"id","transformers.AutoModelForSemanticSegmentation"),c(H8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H8,"href","#transformers.AutoModelForSemanticSegmentation"),c(uc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_18602/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(QJ,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(UJ,"href","/docs/transformers/pr_18602/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(HJ,"href","/docs/transformers/pr_18602/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(JJ,"href","/docs/transformers/pr_18602/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.AutoModelForInstanceSegmentation"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_18602/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.TFAutoModel"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(oY,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertModel"),c(nY,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.TFBartModel"),c(sY,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertModel"),c(lY,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(iY,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(dY,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertModel"),c(cY,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.TFCLIPModel"),c(fY,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertModel"),c(mY,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.TFConvNextModel"),c(gY,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.TFCTRLModel"),c(hY,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(pY,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaModel"),c(_Y,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(uY,"href","/docs/transformers/pr_18602/en/model_doc/deit#transformers.TFDeiTModel"),c(bY,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(vY,"href","/docs/transformers/pr_18602/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(FY,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraModel"),c(TY,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(MY,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelModel"),c(EY,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(CY,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.TFGPT2Model"),c(wY,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.TFGPTJModel"),c(AY,"href","/docs/transformers/pr_18602/en/model_doc/hubert#transformers.TFHubertModel"),c(LY,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(yY,"href","/docs/transformers/pr_18602/en/model_doc/led#transformers.TFLEDModel"),c(xY,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerModel"),c($Y,"href","/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.TFLxmertModel"),c(kY,"href","/docs/transformers/pr_18602/en/model_doc/marian#transformers.TFMarianModel"),c(SY,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.TFMBartModel"),c(RY,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(PY,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetModel"),c(BY,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.TFMT5Model"),c(IY,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(NY,"href","/docs/transformers/pr_18602/en/model_doc/opt#transformers.TFOPTModel"),c(qY,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.TFPegasusModel"),c(jY,"href","/docs/transformers/pr_18602/en/model_doc/regnet#transformers.TFRegNetModel"),c(DY,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertModel"),c(GY,"href","/docs/transformers/pr_18602/en/model_doc/resnet#transformers.TFResNetModel"),c(OY,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaModel"),c(VY,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerModel"),c(XY,"href","/docs/transformers/pr_18602/en/model_doc/segformer#transformers.TFSegformerModel"),c(zY,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(WY,"href","/docs/transformers/pr_18602/en/model_doc/swin#transformers.TFSwinModel"),c(QY,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.TFT5Model"),c(UY,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasModel"),c(HY,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(JY,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.TFViTModel"),c(YY,"href","/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(KY,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(ZY,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMModel"),c(eK,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(oK,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.TFAutoModelForPreTraining"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(rK,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(sK,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForPreTraining"),c(iK,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(dK,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(cK,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(fK,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(mK,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(gK,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(hK,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(pK,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(_K,"href","/docs/transformers/pr_18602/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(uK,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(bK,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(vK,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(FK,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(TK,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(EK,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(CK,"href","/docs/transformers/pr_18602/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(wK,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AK,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(LK,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForCausalLM"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(yK,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(SK,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(RK,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(PK,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(BK,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(IK,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(NK,"href","/docs/transformers/pr_18602/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(qK,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(jK,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(DK,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(GK,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(OK,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VK,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForImageClassification"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(XK,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/pr_18602/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(UK,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(HK,"href","/docs/transformers/pr_18602/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(JK,"href","/docs/transformers/pr_18602/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(YK,"href","/docs/transformers/pr_18602/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(KK,"href","/docs/transformers/pr_18602/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(ZK,"href","/docs/transformers/pr_18602/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(eZ,"href","/docs/transformers/pr_18602/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(oZ,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.TFAutoModelForSemanticSegmentation"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_18602/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(sZ,"href","/docs/transformers/pr_18602/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForMaskedLM"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(lZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(fZ,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(mZ,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gZ,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(hZ,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(pZ,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(_Z,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(uZ,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(bZ,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vZ,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(FZ,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TZ,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(MZ,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(EZ,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CZ,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AZ,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(LZ,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(yZ,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xZ,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c($Z,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PZ,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(BZ,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(IZ,"href","/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(NZ,"href","/docs/transformers/pr_18602/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_18602/en/model_doc/marian#transformers.TFMarianMTModel"),c(jZ,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(GZ,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForSequenceClassification"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(VZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QZ,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UZ,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(HZ,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(JZ,"href","/docs/transformers/pr_18602/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(YZ,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(KZ,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(ZZ,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(eee,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(oee,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(ree,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(tee,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(aee,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(nee,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(see,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(lee,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(dee,"href","/docs/transformers/pr_18602/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(cee,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(fee,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(mee,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(gee,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(hee,"href","/docs/transformers/pr_18602/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(pee,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(uee,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.TFAutoModelForMultipleChoice"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c(bee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tee,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Mee,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Eee,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Cee,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(wee,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Aee,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Lee,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(yee,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(xee,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c($ee,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(kee,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(See,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Ree,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(qee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gee,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Oee,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(Vee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_18602/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.TFAutoModelForTokenClassification"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.TFAutoModelForTokenClassification"),c(rf,"class","relative group"),c(Qee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hee,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Yee,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Kee,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Zee,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(eoe,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(ooe,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(roe,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(toe,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(aoe,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(noe,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(soe,"href","/docs/transformers/pr_18602/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(loe,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(ioe,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(doe,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(coe,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(foe,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(moe,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(goe,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(hoe,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(poe,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.TFAutoModelForQuestionAnswering"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(_oe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uoe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(boe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(voe,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Foe,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Toe,"href","/docs/transformers/pr_18602/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Moe,"href","/docs/transformers/pr_18602/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Eoe,"href","/docs/transformers/pr_18602/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Coe,"href","/docs/transformers/pr_18602/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(woe,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Aoe,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Loe,"href","/docs/transformers/pr_18602/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(yoe,"href","/docs/transformers/pr_18602/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(xoe,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c($oe,"href","/docs/transformers/pr_18602/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(koe,"href","/docs/transformers/pr_18602/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Soe,"href","/docs/transformers/pr_18602/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Roe,"href","/docs/transformers/pr_18602/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_18602/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Noe,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_18602/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.TFAutoModelForVision2Seq"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.TFAutoModelForVision2Seq"),c(df,"class","relative group"),c(joe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Doe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Goe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ooe,"href","/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mf,"class","relative group"),c(Voe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xoe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zoe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Woe,"href","/docs/transformers/pr_18602/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModel"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModel"),c(pf,"class","relative group"),c(Qoe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uoe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hoe,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Joe,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Yoe,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartModel"),c(Koe,"href","/docs/transformers/pr_18602/en/model_doc/beit#transformers.FlaxBeitModel"),c(Zoe,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertModel"),c(ere,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ore,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(rre,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(tre,"href","/docs/transformers/pr_18602/en/model_doc/clip#transformers.FlaxCLIPModel"),c(are,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(nre,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraModel"),c(sre,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(lre,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(ire,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(dre,"href","/docs/transformers/pr_18602/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(cre,"href","/docs/transformers/pr_18602/en/model_doc/marian#transformers.FlaxMarianModel"),c(fre,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartModel"),c(mre,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.FlaxMT5Model"),c(gre,"href","/docs/transformers/pr_18602/en/model_doc/opt#transformers.FlaxOPTModel"),c(hre,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(pre,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(_re,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(ure,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.FlaxT5Model"),c(bre,"href","/docs/transformers/pr_18602/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(vre,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.FlaxViTModel"),c(Fre,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Tre,"href","/docs/transformers/pr_18602/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Mre,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForCausalLM"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForCausalLM"),c(bf,"class","relative group"),c(Ere,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cre,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wre,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Are,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Lre,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(yre,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(xre,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c($re,"href","/docs/transformers/pr_18602/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(kre,"href","/docs/transformers/pr_18602/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Sre,"href","/docs/transformers/pr_18602/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Rre,"href","/docs/transformers/pr_18602/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Pre,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Bre,"href","/docs/transformers/pr_18602/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.FlaxAutoModelForPreTraining"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tf,"class","relative group"),c(Ire,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nre,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qre,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jre,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Dre,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Gre,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Ore,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Vre,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Xre,"href","/docs/transformers/pr_18602/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(zre,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Wre,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Qre,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Ure,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Hre,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Jre,"href","/docs/transformers/pr_18602/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Yre,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForMaskedLM"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cf,"class","relative group"),c(Kre,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zre,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ete,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ote,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(rte,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tte,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(ate,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(nte,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ste,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(lte,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ite,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dte,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cte,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lf,"class","relative group"),c(fte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hte,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pte,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(_te,"href","/docs/transformers/pr_18602/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(ute,"href","/docs/transformers/pr_18602/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(bte,"href","/docs/transformers/pr_18602/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(vte,"href","/docs/transformers/pr_18602/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Fte,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Tte,"href","/docs/transformers/pr_18602/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Mte,"href","/docs/transformers/pr_18602/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Ete,"href","/docs/transformers/pr_18602/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($f,"class","relative group"),c(Cte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ate,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lte,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(yte,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(xte,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c($te,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(kte,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Ste,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Rte,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Pte,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Bte,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Ite,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rf,"class","relative group"),c(Nte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dte,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Gte,"href","/docs/transformers/pr_18602/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Ote,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Vte,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Xte,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(zte,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Wte,"href","/docs/transformers/pr_18602/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Qte,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Ute,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Hte,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eA,"id","transformers.FlaxAutoModelForTokenClassification"),c(eA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(If,"class","relative group"),c(Jte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kte,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zte,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(eae,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(oae,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(rae,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(tae,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(aae,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(nae,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(sae,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(fA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jf,"class","relative group"),c(lae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cae,"href","/docs/transformers/pr_18602/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(fae,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(mae,"href","/docs/transformers/pr_18602/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(gae,"href","/docs/transformers/pr_18602/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(hae,"href","/docs/transformers/pr_18602/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(pae,"href","/docs/transformers/pr_18602/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(_ae,"href","/docs/transformers/pr_18602/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(uae,"href","/docs/transformers/pr_18602/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(MA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Of,"class","relative group"),c(bae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tae,"href","/docs/transformers/pr_18602/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AA,"id","transformers.FlaxAutoModelForImageClassification"),c(AA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AA,"href","#transformers.FlaxAutoModelForImageClassification"),c(zf,"class","relative group"),c(Mae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wae,"href","/docs/transformers/pr_18602/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Aae,"href","/docs/transformers/pr_18602/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kA,"id","transformers.FlaxAutoModelForVision2Seq"),c(kA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uf,"class","relative group"),c(Lae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xae,"href","/docs/transformers/pr_18602/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ae,"href","/docs/transformers/pr_18602/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Oi),b(f,em,u),b(f,ft,u),e(ft,Vi),e(ft,Xi),e(Xi,ny),e(ft,om),b(f,Oe,u),b(f,Qe,u),e(Qe,zi),e(Qe,Xn),e(Xn,sy),e(Qe,zn),e(Qe,Wn),e(Wn,ly),e(Qe,Wi),e(Qe,Qn),e(Qn,iy),e(Qe,Qi),b(f,rm,u),M(ja,f,u),b(f,Ue,u),b(f,Ae,u),e(Ae,ZR),e(Ae,Ui),e(Ui,eP),e(Ae,oP),b(f,Lo,u),b(f,Da,u),e(Da,rP),e(Da,tm),e(tm,tP),e(Da,UYe),b(f,CQe,u),b(f,Hi,u),e(Hi,am),e(am,yse),M(dy,yse,null),e(Hi,HYe),e(Hi,xse),e(xse,JYe),b(f,wQe,u),b(f,Un,u),e(Un,YYe),e(Un,$se),e($se,KYe),e(Un,ZYe),e(Un,kse),e(kse,eKe),e(Un,oKe),b(f,AQe,u),M(cy,f,u),b(f,LQe,u),b(f,aP,u),e(aP,rKe),b(f,yQe,u),M(nm,f,u),b(f,xQe,u),b(f,Ji,u),e(Ji,sm),e(sm,Sse),M(fy,Sse,null),e(Ji,tKe),e(Ji,Rse),e(Rse,aKe),b(f,$Qe,u),b(f,yo,u),M(my,yo,null),e(yo,nKe),e(yo,gy),e(gy,sKe),e(gy,nP),e(nP,lKe),e(gy,iKe),e(yo,dKe),e(yo,hy),e(hy,cKe),e(hy,Pse),e(Pse,fKe),e(hy,mKe),e(yo,gKe),e(yo,kr),M(py,kr,null),e(kr,hKe),e(kr,Bse),e(Bse,pKe),e(kr,_Ke),e(kr,Yi),e(Yi,uKe),e(Yi,Ise),e(Ise,bKe),e(Yi,vKe),e(Yi,Nse),e(Nse,FKe),e(Yi,TKe),e(kr,MKe),e(kr,A),e(A,lm),e(lm,qse),e(qse,EKe),e(lm,CKe),e(lm,sP),e(sP,wKe),e(lm,AKe),e(A,LKe),e(A,im),e(im,jse),e(jse,yKe),e(im,xKe),e(im,lP),e(lP,$Ke),e(im,kKe),e(A,SKe),e(A,dm),e(dm,Dse),e(Dse,RKe),e(dm,PKe),e(dm,iP),e(iP,BKe),e(dm,IKe),e(A,NKe),e(A,cm),e(cm,Gse),e(Gse,qKe),e(cm,jKe),e(cm,dP),e(dP,DKe),e(cm,GKe),e(A,OKe),e(A,fm),e(fm,Ose),e(Ose,VKe),e(fm,XKe),e(fm,cP),e(cP,zKe),e(fm,WKe),e(A,QKe),e(A,mm),e(mm,Vse),e(Vse,UKe),e(mm,HKe),e(mm,fP),e(fP,JKe),e(mm,YKe),e(A,KKe),e(A,gm),e(gm,Xse),e(Xse,ZKe),e(gm,eZe),e(gm,mP),e(mP,oZe),e(gm,rZe),e(A,tZe),e(A,hm),e(hm,zse),e(zse,aZe),e(hm,nZe),e(hm,gP),e(gP,sZe),e(hm,lZe),e(A,iZe),e(A,pm),e(pm,Wse),e(Wse,dZe),e(pm,cZe),e(pm,hP),e(hP,fZe),e(pm,mZe),e(A,gZe),e(A,_m),e(_m,Qse),e(Qse,hZe),e(_m,pZe),e(_m,pP),e(pP,_Ze),e(_m,uZe),e(A,bZe),e(A,um),e(um,Use),e(Use,vZe),e(um,FZe),e(um,_P),e(_P,TZe),e(um,MZe),e(A,EZe),e(A,bm),e(bm,Hse),e(Hse,CZe),e(bm,wZe),e(bm,uP),e(uP,AZe),e(bm,LZe),e(A,yZe),e(A,vm),e(vm,Jse),e(Jse,xZe),e(vm,$Ze),e(vm,bP),e(bP,kZe),e(vm,SZe),e(A,RZe),e(A,Fm),e(Fm,Yse),e(Yse,PZe),e(Fm,BZe),e(Fm,vP),e(vP,IZe),e(Fm,NZe),e(A,qZe),e(A,Tm),e(Tm,Kse),e(Kse,jZe),e(Tm,DZe),e(Tm,FP),e(FP,GZe),e(Tm,OZe),e(A,VZe),e(A,Mm),e(Mm,Zse),e(Zse,XZe),e(Mm,zZe),e(Mm,TP),e(TP,WZe),e(Mm,QZe),e(A,UZe),e(A,Em),e(Em,ele),e(ele,HZe),e(Em,JZe),e(Em,MP),e(MP,YZe),e(Em,KZe),e(A,ZZe),e(A,Cm),e(Cm,ole),e(ole,eeo),e(Cm,oeo),e(Cm,EP),e(EP,reo),e(Cm,teo),e(A,aeo),e(A,wm),e(wm,rle),e(rle,neo),e(wm,seo),e(wm,CP),e(CP,leo),e(wm,ieo),e(A,deo),e(A,Am),e(Am,tle),e(tle,ceo),e(Am,feo),e(Am,wP),e(wP,meo),e(Am,geo),e(A,heo),e(A,Lm),e(Lm,ale),e(ale,peo),e(Lm,_eo),e(Lm,AP),e(AP,ueo),e(Lm,beo),e(A,veo),e(A,ym),e(ym,nle),e(nle,Feo),e(ym,Teo),e(ym,LP),e(LP,Meo),e(ym,Eeo),e(A,Ceo),e(A,xm),e(xm,sle),e(sle,weo),e(xm,Aeo),e(xm,yP),e(yP,Leo),e(xm,yeo),e(A,xeo),e(A,$m),e($m,lle),e(lle,$eo),e($m,keo),e($m,xP),e(xP,Seo),e($m,Reo),e(A,Peo),e(A,km),e(km,ile),e(ile,Beo),e(km,Ieo),e(km,$P),e($P,Neo),e(km,qeo),e(A,jeo),e(A,Sm),e(Sm,dle),e(dle,Deo),e(Sm,Geo),e(Sm,kP),e(kP,Oeo),e(Sm,Veo),e(A,Xeo),e(A,Rm),e(Rm,cle),e(cle,zeo),e(Rm,Weo),e(Rm,SP),e(SP,Qeo),e(Rm,Ueo),e(A,Heo),e(A,Pm),e(Pm,fle),e(fle,Jeo),e(Pm,Yeo),e(Pm,RP),e(RP,Keo),e(Pm,Zeo),e(A,eoo),e(A,Bm),e(Bm,mle),e(mle,ooo),e(Bm,roo),e(Bm,PP),e(PP,too),e(Bm,aoo),e(A,noo),e(A,Im),e(Im,gle),e(gle,soo),e(Im,loo),e(Im,BP),e(BP,ioo),e(Im,doo),e(A,coo),e(A,Nm),e(Nm,hle),e(hle,foo),e(Nm,moo),e(Nm,IP),e(IP,goo),e(Nm,hoo),e(A,poo),e(A,qm),e(qm,ple),e(ple,_oo),e(qm,uoo),e(qm,NP),e(NP,boo),e(qm,voo),e(A,Foo),e(A,jm),e(jm,_le),e(_le,Too),e(jm,Moo),e(jm,qP),e(qP,Eoo),e(jm,Coo),e(A,woo),e(A,Dm),e(Dm,ule),e(ule,Aoo),e(Dm,Loo),e(Dm,jP),e(jP,yoo),e(Dm,xoo),e(A,$oo),e(A,Gm),e(Gm,ble),e(ble,koo),e(Gm,Soo),e(Gm,DP),e(DP,Roo),e(Gm,Poo),e(A,Boo),e(A,Om),e(Om,vle),e(vle,Ioo),e(Om,Noo),e(Om,GP),e(GP,qoo),e(Om,joo),e(A,Doo),e(A,Vm),e(Vm,Fle),e(Fle,Goo),e(Vm,Ooo),e(Vm,OP),e(OP,Voo),e(Vm,Xoo),e(A,zoo),e(A,Xm),e(Xm,Tle),e(Tle,Woo),e(Xm,Qoo),e(Xm,VP),e(VP,Uoo),e(Xm,Hoo),e(A,Joo),e(A,zm),e(zm,Mle),e(Mle,Yoo),e(zm,Koo),e(zm,XP),e(XP,Zoo),e(zm,ero),e(A,oro),e(A,Wm),e(Wm,Ele),e(Ele,rro),e(Wm,tro),e(Wm,zP),e(zP,aro),e(Wm,nro),e(A,sro),e(A,Qm),e(Qm,Cle),e(Cle,lro),e(Qm,iro),e(Qm,WP),e(WP,dro),e(Qm,cro),e(A,fro),e(A,Um),e(Um,wle),e(wle,mro),e(Um,gro),e(Um,QP),e(QP,hro),e(Um,pro),e(A,_ro),e(A,Hm),e(Hm,Ale),e(Ale,uro),e(Hm,bro),e(Hm,UP),e(UP,vro),e(Hm,Fro),e(A,Tro),e(A,Jm),e(Jm,Lle),e(Lle,Mro),e(Jm,Ero),e(Jm,HP),e(HP,Cro),e(Jm,wro),e(A,Aro),e(A,Ym),e(Ym,yle),e(yle,Lro),e(Ym,yro),e(Ym,JP),e(JP,xro),e(Ym,$ro),e(A,kro),e(A,Km),e(Km,xle),e(xle,Sro),e(Km,Rro),e(Km,YP),e(YP,Pro),e(Km,Bro),e(A,Iro),e(A,Zm),e(Zm,$le),e($le,Nro),e(Zm,qro),e(Zm,KP),e(KP,jro),e(Zm,Dro),e(A,Gro),e(A,eg),e(eg,kle),e(kle,Oro),e(eg,Vro),e(eg,ZP),e(ZP,Xro),e(eg,zro),e(A,Wro),e(A,og),e(og,Sle),e(Sle,Qro),e(og,Uro),e(og,eB),e(eB,Hro),e(og,Jro),e(A,Yro),e(A,rg),e(rg,Rle),e(Rle,Kro),e(rg,Zro),e(rg,oB),e(oB,eto),e(rg,oto),e(A,rto),e(A,tg),e(tg,Ple),e(Ple,tto),e(tg,ato),e(tg,rB),e(rB,nto),e(tg,sto),e(A,lto),e(A,ag),e(ag,Ble),e(Ble,ito),e(ag,dto),e(ag,tB),e(tB,cto),e(ag,fto),e(A,mto),e(A,ng),e(ng,Ile),e(Ile,gto),e(ng,hto),e(ng,aB),e(aB,pto),e(ng,_to),e(A,uto),e(A,sg),e(sg,Nle),e(Nle,bto),e(sg,vto),e(sg,nB),e(nB,Fto),e(sg,Tto),e(A,Mto),e(A,lg),e(lg,qle),e(qle,Eto),e(lg,Cto),e(lg,sB),e(sB,wto),e(lg,Ato),e(A,Lto),e(A,ig),e(ig,jle),e(jle,yto),e(ig,xto),e(ig,lB),e(lB,$to),e(ig,kto),e(A,Sto),e(A,dg),e(dg,Dle),e(Dle,Rto),e(dg,Pto),e(dg,iB),e(iB,Bto),e(dg,Ito),e(A,Nto),e(A,cg),e(cg,Gle),e(Gle,qto),e(cg,jto),e(cg,dB),e(dB,Dto),e(cg,Gto),e(A,Oto),e(A,fg),e(fg,Ole),e(Ole,Vto),e(fg,Xto),e(fg,cB),e(cB,zto),e(fg,Wto),e(A,Qto),e(A,mg),e(mg,Vle),e(Vle,Uto),e(mg,Hto),e(mg,fB),e(fB,Jto),e(mg,Yto),e(A,Kto),e(A,gg),e(gg,Xle),e(Xle,Zto),e(gg,eao),e(gg,mB),e(mB,oao),e(gg,rao),e(A,tao),e(A,hg),e(hg,zle),e(zle,aao),e(hg,nao),e(hg,gB),e(gB,sao),e(hg,lao),e(A,iao),e(A,pg),e(pg,Wle),e(Wle,dao),e(pg,cao),e(pg,hB),e(hB,fao),e(pg,mao),e(A,gao),e(A,_g),e(_g,Qle),e(Qle,hao),e(_g,pao),e(_g,pB),e(pB,_ao),e(_g,uao),e(A,bao),e(A,ug),e(ug,Ule),e(Ule,vao),e(ug,Fao),e(ug,_B),e(_B,Tao),e(ug,Mao),e(A,Eao),e(A,bg),e(bg,Hle),e(Hle,Cao),e(bg,wao),e(bg,uB),e(uB,Aao),e(bg,Lao),e(A,yao),e(A,vg),e(vg,Jle),e(Jle,xao),e(vg,$ao),e(vg,bB),e(bB,kao),e(vg,Sao),e(A,Rao),e(A,Fg),e(Fg,Yle),e(Yle,Pao),e(Fg,Bao),e(Fg,vB),e(vB,Iao),e(Fg,Nao),e(A,qao),e(A,Tg),e(Tg,Kle),e(Kle,jao),e(Tg,Dao),e(Tg,FB),e(FB,Gao),e(Tg,Oao),e(A,Vao),e(A,Mg),e(Mg,Zle),e(Zle,Xao),e(Mg,zao),e(Mg,TB),e(TB,Wao),e(Mg,Qao),e(A,Uao),e(A,Eg),e(Eg,eie),e(eie,Hao),e(Eg,Jao),e(Eg,MB),e(MB,Yao),e(Eg,Kao),e(A,Zao),e(A,Cg),e(Cg,oie),e(oie,eno),e(Cg,ono),e(Cg,EB),e(EB,rno),e(Cg,tno),e(A,ano),e(A,wg),e(wg,rie),e(rie,nno),e(wg,sno),e(wg,CB),e(CB,lno),e(wg,ino),e(A,dno),e(A,Ag),e(Ag,tie),e(tie,cno),e(Ag,fno),e(Ag,wB),e(wB,mno),e(Ag,gno),e(A,hno),e(A,Lg),e(Lg,aie),e(aie,pno),e(Lg,_no),e(Lg,AB),e(AB,uno),e(Lg,bno),e(A,vno),e(A,yg),e(yg,nie),e(nie,Fno),e(yg,Tno),e(yg,LB),e(LB,Mno),e(yg,Eno),e(A,Cno),e(A,xg),e(xg,sie),e(sie,wno),e(xg,Ano),e(xg,yB),e(yB,Lno),e(xg,yno),e(A,xno),e(A,$g),e($g,lie),e(lie,$no),e($g,kno),e($g,xB),e(xB,Sno),e($g,Rno),e(A,Pno),e(A,kg),e(kg,iie),e(iie,Bno),e(kg,Ino),e(kg,$B),e($B,Nno),e(kg,qno),e(A,jno),e(A,Sg),e(Sg,die),e(die,Dno),e(Sg,Gno),e(Sg,kB),e(kB,Ono),e(Sg,Vno),e(A,Xno),e(A,Rg),e(Rg,cie),e(cie,zno),e(Rg,Wno),e(Rg,SB),e(SB,Qno),e(Rg,Uno),e(A,Hno),e(A,Pg),e(Pg,fie),e(fie,Jno),e(Pg,Yno),e(Pg,RB),e(RB,Kno),e(Pg,Zno),e(A,eso),e(A,Bg),e(Bg,mie),e(mie,oso),e(Bg,rso),e(Bg,PB),e(PB,tso),e(Bg,aso),e(A,nso),e(A,Ig),e(Ig,gie),e(gie,sso),e(Ig,lso),e(Ig,BB),e(BB,iso),e(Ig,dso),e(A,cso),e(A,Ng),e(Ng,hie),e(hie,fso),e(Ng,mso),e(Ng,IB),e(IB,gso),e(Ng,hso),e(A,pso),e(A,qg),e(qg,pie),e(pie,_so),e(qg,uso),e(qg,NB),e(NB,bso),e(qg,vso),e(A,Fso),e(A,jg),e(jg,_ie),e(_ie,Tso),e(jg,Mso),e(jg,qB),e(qB,Eso),e(jg,Cso),e(A,wso),e(A,Dg),e(Dg,uie),e(uie,Aso),e(Dg,Lso),e(Dg,jB),e(jB,yso),e(Dg,xso),e(A,$so),e(A,Gg),e(Gg,bie),e(bie,kso),e(Gg,Sso),e(Gg,DB),e(DB,Rso),e(Gg,Pso),e(A,Bso),e(A,Og),e(Og,vie),e(vie,Iso),e(Og,Nso),e(Og,GB),e(GB,qso),e(Og,jso),e(A,Dso),e(A,Vg),e(Vg,Fie),e(Fie,Gso),e(Vg,Oso),e(Vg,OB),e(OB,Vso),e(Vg,Xso),e(A,zso),e(A,Xg),e(Xg,Tie),e(Tie,Wso),e(Xg,Qso),e(Xg,VB),e(VB,Uso),e(Xg,Hso),e(A,Jso),e(A,zg),e(zg,Mie),e(Mie,Yso),e(zg,Kso),e(zg,XB),e(XB,Zso),e(zg,elo),e(A,olo),e(A,Wg),e(Wg,Eie),e(Eie,rlo),e(Wg,tlo),e(Wg,zB),e(zB,alo),e(Wg,nlo),e(A,slo),e(A,Qg),e(Qg,Cie),e(Cie,llo),e(Qg,ilo),e(Qg,WB),e(WB,dlo),e(Qg,clo),e(A,flo),e(A,Ug),e(Ug,wie),e(wie,mlo),e(Ug,glo),e(Ug,QB),e(QB,hlo),e(Ug,plo),e(A,_lo),e(A,Hg),e(Hg,Aie),e(Aie,ulo),e(Hg,blo),e(Hg,UB),e(UB,vlo),e(Hg,Flo),e(A,Tlo),e(A,Jg),e(Jg,Lie),e(Lie,Mlo),e(Jg,Elo),e(Jg,HB),e(HB,Clo),e(Jg,wlo),e(A,Alo),e(A,Yg),e(Yg,yie),e(yie,Llo),e(Yg,ylo),e(Yg,JB),e(JB,xlo),e(Yg,$lo),e(A,klo),e(A,Kg),e(Kg,xie),e(xie,Slo),e(Kg,Rlo),e(Kg,YB),e(YB,Plo),e(Kg,Blo),e(A,Ilo),e(A,Zg),e(Zg,$ie),e($ie,Nlo),e(Zg,qlo),e(Zg,KB),e(KB,jlo),e(Zg,Dlo),e(A,Glo),e(A,eh),e(eh,kie),e(kie,Olo),e(eh,Vlo),e(eh,ZB),e(ZB,Xlo),e(eh,zlo),e(A,Wlo),e(A,oh),e(oh,Sie),e(Sie,Qlo),e(oh,Ulo),e(oh,eI),e(eI,Hlo),e(oh,Jlo),e(A,Ylo),e(A,rh),e(rh,Rie),e(Rie,Klo),e(rh,Zlo),e(rh,oI),e(oI,eio),e(rh,oio),e(A,rio),e(A,th),e(th,Pie),e(Pie,tio),e(th,aio),e(th,rI),e(rI,nio),e(th,sio),e(A,lio),e(A,ah),e(ah,Bie),e(Bie,iio),e(ah,dio),e(ah,tI),e(tI,cio),e(ah,fio),e(A,mio),e(A,nh),e(nh,Iie),e(Iie,gio),e(nh,hio),e(nh,aI),e(aI,pio),e(nh,_io),e(A,uio),e(A,sh),e(sh,Nie),e(Nie,bio),e(sh,vio),e(sh,nI),e(nI,Fio),e(sh,Tio),e(A,Mio),e(A,lh),e(lh,qie),e(qie,Eio),e(lh,Cio),e(lh,sI),e(sI,wio),e(lh,Aio),e(A,Lio),e(A,ih),e(ih,jie),e(jie,yio),e(ih,xio),e(ih,lI),e(lI,$io),e(ih,kio),e(A,Sio),e(A,dh),e(dh,Die),e(Die,Rio),e(dh,Pio),e(dh,iI),e(iI,Bio),e(dh,Iio),e(A,Nio),e(A,ch),e(ch,Gie),e(Gie,qio),e(ch,jio),e(ch,dI),e(dI,Dio),e(ch,Gio),e(A,Oio),e(A,fh),e(fh,Oie),e(Oie,Vio),e(fh,Xio),e(fh,cI),e(cI,zio),e(fh,Wio),e(A,Qio),e(A,mh),e(mh,Vie),e(Vie,Uio),e(mh,Hio),e(mh,fI),e(fI,Jio),e(mh,Yio),e(A,Kio),e(A,gh),e(gh,Xie),e(Xie,Zio),e(gh,edo),e(gh,mI),e(mI,odo),e(gh,rdo),e(A,tdo),e(A,hh),e(hh,zie),e(zie,ado),e(hh,ndo),e(hh,gI),e(gI,sdo),e(hh,ldo),e(A,ido),e(A,ph),e(ph,Wie),e(Wie,ddo),e(ph,cdo),e(ph,hI),e(hI,fdo),e(ph,mdo),e(A,gdo),e(A,_h),e(_h,Qie),e(Qie,hdo),e(_h,pdo),e(_h,pI),e(pI,_do),e(_h,udo),e(A,bdo),e(A,uh),e(uh,Uie),e(Uie,vdo),e(uh,Fdo),e(uh,_I),e(_I,Tdo),e(uh,Mdo),e(A,Edo),e(A,bh),e(bh,Hie),e(Hie,Cdo),e(bh,wdo),e(bh,uI),e(uI,Ado),e(bh,Ldo),e(A,ydo),e(A,vh),e(vh,Jie),e(Jie,xdo),e(vh,$do),e(vh,bI),e(bI,kdo),e(vh,Sdo),e(kr,Rdo),M(Fh,kr,null),e(yo,Pdo),e(yo,Th),M(_y,Th,null),e(Th,Bdo),e(Th,Yie),e(Yie,Ido),b(f,kQe,u),b(f,Ki,u),e(Ki,Mh),e(Mh,Kie),M(uy,Kie,null),e(Ki,Ndo),e(Ki,Zie),e(Zie,qdo),b(f,SQe,u),b(f,xo,u),M(by,xo,null),e(xo,jdo),e(xo,vy),e(vy,Ddo),e(vy,vI),e(vI,Gdo),e(vy,Odo),e(xo,Vdo),e(xo,Fy),e(Fy,Xdo),e(Fy,ede),e(ede,zdo),e(Fy,Wdo),e(xo,Qdo),e(xo,Sr),M(Ty,Sr,null),e(Sr,Udo),e(Sr,ode),e(ode,Hdo),e(Sr,Jdo),e(Sr,Ga),e(Ga,Ydo),e(Ga,rde),e(rde,Kdo),e(Ga,Zdo),e(Ga,tde),e(tde,eco),e(Ga,oco),e(Ga,ade),e(ade,rco),e(Ga,tco),e(Sr,aco),e(Sr,k),e(k,Hn),e(Hn,nde),e(nde,nco),e(Hn,sco),e(Hn,FI),e(FI,lco),e(Hn,ico),e(Hn,TI),e(TI,dco),e(Hn,cco),e(k,fco),e(k,Jn),e(Jn,sde),e(sde,mco),e(Jn,gco),e(Jn,MI),e(MI,hco),e(Jn,pco),e(Jn,EI),e(EI,_co),e(Jn,uco),e(k,bco),e(k,Yn),e(Yn,lde),e(lde,vco),e(Yn,Fco),e(Yn,CI),e(CI,Tco),e(Yn,Mco),e(Yn,wI),e(wI,Eco),e(Yn,Cco),e(k,wco),e(k,Eh),e(Eh,ide),e(ide,Aco),e(Eh,Lco),e(Eh,AI),e(AI,yco),e(Eh,xco),e(k,$co),e(k,Kn),e(Kn,dde),e(dde,kco),e(Kn,Sco),e(Kn,LI),e(LI,Rco),e(Kn,Pco),e(Kn,yI),e(yI,Bco),e(Kn,Ico),e(k,Nco),e(k,Ch),e(Ch,cde),e(cde,qco),e(Ch,jco),e(Ch,xI),e(xI,Dco),e(Ch,Gco),e(k,Oco),e(k,wh),e(wh,fde),e(fde,Vco),e(wh,Xco),e(wh,$I),e($I,zco),e(wh,Wco),e(k,Qco),e(k,Ah),e(Ah,mde),e(mde,Uco),e(Ah,Hco),e(Ah,kI),e(kI,Jco),e(Ah,Yco),e(k,Kco),e(k,Zn),e(Zn,gde),e(gde,Zco),e(Zn,efo),e(Zn,SI),e(SI,ofo),e(Zn,rfo),e(Zn,RI),e(RI,tfo),e(Zn,afo),e(k,nfo),e(k,es),e(es,hde),e(hde,sfo),e(es,lfo),e(es,PI),e(PI,ifo),e(es,dfo),e(es,BI),e(BI,cfo),e(es,ffo),e(k,mfo),e(k,os),e(os,pde),e(pde,gfo),e(os,hfo),e(os,II),e(II,pfo),e(os,_fo),e(os,NI),e(NI,ufo),e(os,bfo),e(k,vfo),e(k,Lh),e(Lh,_de),e(_de,Ffo),e(Lh,Tfo),e(Lh,qI),e(qI,Mfo),e(Lh,Efo),e(k,Cfo),e(k,yh),e(yh,ude),e(ude,wfo),e(yh,Afo),e(yh,jI),e(jI,Lfo),e(yh,yfo),e(k,xfo),e(k,xh),e(xh,bde),e(bde,$fo),e(xh,kfo),e(xh,DI),e(DI,Sfo),e(xh,Rfo),e(k,Pfo),e(k,rs),e(rs,vde),e(vde,Bfo),e(rs,Ifo),e(rs,GI),e(GI,Nfo),e(rs,qfo),e(rs,OI),e(OI,jfo),e(rs,Dfo),e(k,Gfo),e(k,$h),e($h,Fde),e(Fde,Ofo),e($h,Vfo),e($h,VI),e(VI,Xfo),e($h,zfo),e(k,Wfo),e(k,ts),e(ts,Tde),e(Tde,Qfo),e(ts,Ufo),e(ts,XI),e(XI,Hfo),e(ts,Jfo),e(ts,zI),e(zI,Yfo),e(ts,Kfo),e(k,Zfo),e(k,as),e(as,Mde),e(Mde,emo),e(as,omo),e(as,WI),e(WI,rmo),e(as,tmo),e(as,QI),e(QI,amo),e(as,nmo),e(k,smo),e(k,ns),e(ns,Ede),e(Ede,lmo),e(ns,imo),e(ns,UI),e(UI,dmo),e(ns,cmo),e(ns,HI),e(HI,fmo),e(ns,mmo),e(k,gmo),e(k,ss),e(ss,Cde),e(Cde,hmo),e(ss,pmo),e(ss,JI),e(JI,_mo),e(ss,umo),e(ss,YI),e(YI,bmo),e(ss,vmo),e(k,Fmo),e(k,kh),e(kh,wde),e(wde,Tmo),e(kh,Mmo),e(kh,KI),e(KI,Emo),e(kh,Cmo),e(k,wmo),e(k,ls),e(ls,Ade),e(Ade,Amo),e(ls,Lmo),e(ls,ZI),e(ZI,ymo),e(ls,xmo),e(ls,eN),e(eN,$mo),e(ls,kmo),e(k,Smo),e(k,is),e(is,Lde),e(Lde,Rmo),e(is,Pmo),e(is,oN),e(oN,Bmo),e(is,Imo),e(is,rN),e(rN,Nmo),e(is,qmo),e(k,jmo),e(k,ds),e(ds,yde),e(yde,Dmo),e(ds,Gmo),e(ds,tN),e(tN,Omo),e(ds,Vmo),e(ds,aN),e(aN,Xmo),e(ds,zmo),e(k,Wmo),e(k,cs),e(cs,xde),e(xde,Qmo),e(cs,Umo),e(cs,nN),e(nN,Hmo),e(cs,Jmo),e(cs,sN),e(sN,Ymo),e(cs,Kmo),e(k,Zmo),e(k,fs),e(fs,$de),e($de,ego),e(fs,ogo),e(fs,lN),e(lN,rgo),e(fs,tgo),e(fs,iN),e(iN,ago),e(fs,ngo),e(k,sgo),e(k,ms),e(ms,kde),e(kde,lgo),e(ms,igo),e(ms,dN),e(dN,dgo),e(ms,cgo),e(ms,cN),e(cN,fgo),e(ms,mgo),e(k,ggo),e(k,Sh),e(Sh,Sde),e(Sde,hgo),e(Sh,pgo),e(Sh,fN),e(fN,_go),e(Sh,ugo),e(k,bgo),e(k,gs),e(gs,Rde),e(Rde,vgo),e(gs,Fgo),e(gs,mN),e(mN,Tgo),e(gs,Mgo),e(gs,gN),e(gN,Ego),e(gs,Cgo),e(k,wgo),e(k,Rh),e(Rh,Pde),e(Pde,Ago),e(Rh,Lgo),e(Rh,hN),e(hN,ygo),e(Rh,xgo),e(k,$go),e(k,hs),e(hs,Bde),e(Bde,kgo),e(hs,Sgo),e(hs,pN),e(pN,Rgo),e(hs,Pgo),e(hs,_N),e(_N,Bgo),e(hs,Igo),e(k,Ngo),e(k,ps),e(ps,Ide),e(Ide,qgo),e(ps,jgo),e(ps,uN),e(uN,Dgo),e(ps,Ggo),e(ps,bN),e(bN,Ogo),e(ps,Vgo),e(k,Xgo),e(k,_s),e(_s,Nde),e(Nde,zgo),e(_s,Wgo),e(_s,vN),e(vN,Qgo),e(_s,Ugo),e(_s,FN),e(FN,Hgo),e(_s,Jgo),e(k,Ygo),e(k,Ph),e(Ph,qde),e(qde,Kgo),e(Ph,Zgo),e(Ph,TN),e(TN,eho),e(Ph,oho),e(k,rho),e(k,us),e(us,jde),e(jde,tho),e(us,aho),e(us,MN),e(MN,nho),e(us,sho),e(us,EN),e(EN,lho),e(us,iho),e(k,dho),e(k,bs),e(bs,Dde),e(Dde,cho),e(bs,fho),e(bs,CN),e(CN,mho),e(bs,gho),e(bs,wN),e(wN,hho),e(bs,pho),e(k,_ho),e(k,vs),e(vs,Gde),e(Gde,uho),e(vs,bho),e(vs,AN),e(AN,vho),e(vs,Fho),e(vs,LN),e(LN,Tho),e(vs,Mho),e(k,Eho),e(k,Bh),e(Bh,Ode),e(Ode,Cho),e(Bh,who),e(Bh,yN),e(yN,Aho),e(Bh,Lho),e(k,yho),e(k,Fs),e(Fs,Vde),e(Vde,xho),e(Fs,$ho),e(Fs,xN),e(xN,kho),e(Fs,Sho),e(Fs,$N),e($N,Rho),e(Fs,Pho),e(k,Bho),e(k,Ts),e(Ts,Xde),e(Xde,Iho),e(Ts,Nho),e(Ts,kN),e(kN,qho),e(Ts,jho),e(Ts,SN),e(SN,Dho),e(Ts,Gho),e(k,Oho),e(k,Ms),e(Ms,zde),e(zde,Vho),e(Ms,Xho),e(Ms,RN),e(RN,zho),e(Ms,Who),e(Ms,PN),e(PN,Qho),e(Ms,Uho),e(k,Hho),e(k,Es),e(Es,Wde),e(Wde,Jho),e(Es,Yho),e(Es,BN),e(BN,Kho),e(Es,Zho),e(Es,IN),e(IN,epo),e(Es,opo),e(k,rpo),e(k,Cs),e(Cs,Qde),e(Qde,tpo),e(Cs,apo),e(Cs,NN),e(NN,npo),e(Cs,spo),e(Cs,qN),e(qN,lpo),e(Cs,ipo),e(k,dpo),e(k,ws),e(ws,Ude),e(Ude,cpo),e(ws,fpo),e(ws,jN),e(jN,mpo),e(ws,gpo),e(ws,DN),e(DN,hpo),e(ws,ppo),e(k,_po),e(k,As),e(As,Hde),e(Hde,upo),e(As,bpo),e(As,GN),e(GN,vpo),e(As,Fpo),e(As,ON),e(ON,Tpo),e(As,Mpo),e(k,Epo),e(k,Ls),e(Ls,Jde),e(Jde,Cpo),e(Ls,wpo),e(Ls,VN),e(VN,Apo),e(Ls,Lpo),e(Ls,XN),e(XN,ypo),e(Ls,xpo),e(k,$po),e(k,Ih),e(Ih,Yde),e(Yde,kpo),e(Ih,Spo),e(Ih,zN),e(zN,Rpo),e(Ih,Ppo),e(k,Bpo),e(k,ys),e(ys,Kde),e(Kde,Ipo),e(ys,Npo),e(ys,WN),e(WN,qpo),e(ys,jpo),e(ys,QN),e(QN,Dpo),e(ys,Gpo),e(k,Opo),e(k,Nh),e(Nh,Zde),e(Zde,Vpo),e(Nh,Xpo),e(Nh,UN),e(UN,zpo),e(Nh,Wpo),e(k,Qpo),e(k,qh),e(qh,ece),e(ece,Upo),e(qh,Hpo),e(qh,HN),e(HN,Jpo),e(qh,Ypo),e(k,Kpo),e(k,xs),e(xs,oce),e(oce,Zpo),e(xs,e_o),e(xs,JN),e(JN,o_o),e(xs,r_o),e(xs,YN),e(YN,t_o),e(xs,a_o),e(k,n_o),e(k,$s),e($s,rce),e(rce,s_o),e($s,l_o),e($s,KN),e(KN,i_o),e($s,d_o),e($s,ZN),e(ZN,c_o),e($s,f_o),e(k,m_o),e(k,ks),e(ks,tce),e(tce,g_o),e(ks,h_o),e(ks,eq),e(eq,p_o),e(ks,__o),e(ks,oq),e(oq,u_o),e(ks,b_o),e(k,v_o),e(k,jh),e(jh,ace),e(ace,F_o),e(jh,T_o),e(jh,rq),e(rq,M_o),e(jh,E_o),e(k,C_o),e(k,Ss),e(Ss,nce),e(nce,w_o),e(Ss,A_o),e(Ss,tq),e(tq,L_o),e(Ss,y_o),e(Ss,aq),e(aq,x_o),e(Ss,$_o),e(k,k_o),e(k,Rs),e(Rs,sce),e(sce,S_o),e(Rs,R_o),e(Rs,nq),e(nq,P_o),e(Rs,B_o),e(Rs,sq),e(sq,I_o),e(Rs,N_o),e(k,q_o),e(k,Ps),e(Ps,lce),e(lce,j_o),e(Ps,D_o),e(Ps,lq),e(lq,G_o),e(Ps,O_o),e(Ps,iq),e(iq,V_o),e(Ps,X_o),e(k,z_o),e(k,Bs),e(Bs,ice),e(ice,W_o),e(Bs,Q_o),e(Bs,dq),e(dq,U_o),e(Bs,H_o),e(Bs,cq),e(cq,J_o),e(Bs,Y_o),e(k,K_o),e(k,Is),e(Is,dce),e(dce,Z_o),e(Is,euo),e(Is,fq),e(fq,ouo),e(Is,ruo),e(Is,mq),e(mq,tuo),e(Is,auo),e(k,nuo),e(k,Ns),e(Ns,cce),e(cce,suo),e(Ns,luo),e(Ns,gq),e(gq,iuo),e(Ns,duo),e(Ns,hq),e(hq,cuo),e(Ns,fuo),e(k,muo),e(k,qs),e(qs,fce),e(fce,guo),e(qs,huo),e(qs,pq),e(pq,puo),e(qs,_uo),e(qs,_q),e(_q,uuo),e(qs,buo),e(k,vuo),e(k,js),e(js,mce),e(mce,Fuo),e(js,Tuo),e(js,uq),e(uq,Muo),e(js,Euo),e(js,bq),e(bq,Cuo),e(js,wuo),e(k,Auo),e(k,Dh),e(Dh,gce),e(gce,Luo),e(Dh,yuo),e(Dh,vq),e(vq,xuo),e(Dh,$uo),e(k,kuo),e(k,Ds),e(Ds,hce),e(hce,Suo),e(Ds,Ruo),e(Ds,Fq),e(Fq,Puo),e(Ds,Buo),e(Ds,Tq),e(Tq,Iuo),e(Ds,Nuo),e(k,quo),e(k,Gs),e(Gs,pce),e(pce,juo),e(Gs,Duo),e(Gs,Mq),e(Mq,Guo),e(Gs,Ouo),e(Gs,Eq),e(Eq,Vuo),e(Gs,Xuo),e(k,zuo),e(k,Gh),e(Gh,_ce),e(_ce,Wuo),e(Gh,Quo),e(Gh,Cq),e(Cq,Uuo),e(Gh,Huo),e(k,Juo),e(k,Oh),e(Oh,uce),e(uce,Yuo),e(Oh,Kuo),e(Oh,wq),e(wq,Zuo),e(Oh,e2o),e(k,o2o),e(k,Vh),e(Vh,bce),e(bce,r2o),e(Vh,t2o),e(Vh,Aq),e(Aq,a2o),e(Vh,n2o),e(k,s2o),e(k,Xh),e(Xh,vce),e(vce,l2o),e(Xh,i2o),e(Xh,Lq),e(Lq,d2o),e(Xh,c2o),e(k,f2o),e(k,Os),e(Os,Fce),e(Fce,m2o),e(Os,g2o),e(Os,yq),e(yq,h2o),e(Os,p2o),e(Os,xq),e(xq,_2o),e(Os,u2o),e(k,b2o),e(k,zh),e(zh,Tce),e(Tce,v2o),e(zh,F2o),e(zh,$q),e($q,T2o),e(zh,M2o),e(k,E2o),e(k,Vs),e(Vs,Mce),e(Mce,C2o),e(Vs,w2o),e(Vs,kq),e(kq,A2o),e(Vs,L2o),e(Vs,Sq),e(Sq,y2o),e(Vs,x2o),e(k,$2o),e(k,Xs),e(Xs,Ece),e(Ece,k2o),e(Xs,S2o),e(Xs,Rq),e(Rq,R2o),e(Xs,P2o),e(Xs,Pq),e(Pq,B2o),e(Xs,I2o),e(k,N2o),e(k,zs),e(zs,Cce),e(Cce,q2o),e(zs,j2o),e(zs,Bq),e(Bq,D2o),e(zs,G2o),e(zs,Iq),e(Iq,O2o),e(zs,V2o),e(k,X2o),e(k,Ws),e(Ws,wce),e(wce,z2o),e(Ws,W2o),e(Ws,Nq),e(Nq,Q2o),e(Ws,U2o),e(Ws,qq),e(qq,H2o),e(Ws,J2o),e(k,Y2o),e(k,Qs),e(Qs,Ace),e(Ace,K2o),e(Qs,Z2o),e(Qs,jq),e(jq,e1o),e(Qs,o1o),e(Qs,Dq),e(Dq,r1o),e(Qs,t1o),e(k,a1o),e(k,Us),e(Us,Lce),e(Lce,n1o),e(Us,s1o),e(Us,Gq),e(Gq,l1o),e(Us,i1o),e(Us,Oq),e(Oq,d1o),e(Us,c1o),e(k,f1o),e(k,Wh),e(Wh,yce),e(yce,m1o),e(Wh,g1o),e(Wh,Vq),e(Vq,h1o),e(Wh,p1o),e(k,_1o),e(k,Qh),e(Qh,xce),e(xce,u1o),e(Qh,b1o),e(Qh,Xq),e(Xq,v1o),e(Qh,F1o),e(k,T1o),e(k,Hs),e(Hs,$ce),e($ce,M1o),e(Hs,E1o),e(Hs,zq),e(zq,C1o),e(Hs,w1o),e(Hs,Wq),e(Wq,A1o),e(Hs,L1o),e(k,y1o),e(k,Js),e(Js,kce),e(kce,x1o),e(Js,$1o),e(Js,Qq),e(Qq,k1o),e(Js,S1o),e(Js,Uq),e(Uq,R1o),e(Js,P1o),e(k,B1o),e(k,Ys),e(Ys,Sce),e(Sce,I1o),e(Ys,N1o),e(Ys,Hq),e(Hq,q1o),e(Ys,j1o),e(Ys,Jq),e(Jq,D1o),e(Ys,G1o),e(k,O1o),e(k,Uh),e(Uh,Rce),e(Rce,V1o),e(Uh,X1o),e(Uh,Yq),e(Yq,z1o),e(Uh,W1o),e(k,Q1o),e(k,Hh),e(Hh,Pce),e(Pce,U1o),e(Hh,H1o),e(Hh,Kq),e(Kq,J1o),e(Hh,Y1o),e(k,K1o),e(k,Jh),e(Jh,Bce),e(Bce,Z1o),e(Jh,ebo),e(Jh,Zq),e(Zq,obo),e(Jh,rbo),e(k,tbo),e(k,Ks),e(Ks,Ice),e(Ice,abo),e(Ks,nbo),e(Ks,ej),e(ej,sbo),e(Ks,lbo),e(Ks,oj),e(oj,ibo),e(Ks,dbo),e(k,cbo),e(k,Zs),e(Zs,Nce),e(Nce,fbo),e(Zs,mbo),e(Zs,rj),e(rj,gbo),e(Zs,hbo),e(Zs,tj),e(tj,pbo),e(Zs,_bo),e(k,ubo),e(k,Yh),e(Yh,qce),e(qce,bbo),e(Yh,vbo),e(Yh,aj),e(aj,Fbo),e(Yh,Tbo),e(k,Mbo),e(k,Kh),e(Kh,jce),e(jce,Ebo),e(Kh,Cbo),e(Kh,nj),e(nj,wbo),e(Kh,Abo),e(k,Lbo),e(k,Zh),e(Zh,Dce),e(Dce,ybo),e(Zh,xbo),e(Zh,sj),e(sj,$bo),e(Zh,kbo),e(k,Sbo),e(k,el),e(el,Gce),e(Gce,Rbo),e(el,Pbo),e(el,lj),e(lj,Bbo),e(el,Ibo),e(el,ij),e(ij,Nbo),e(el,qbo),e(k,jbo),e(k,ep),e(ep,Oce),e(Oce,Dbo),e(ep,Gbo),e(ep,dj),e(dj,Obo),e(ep,Vbo),e(k,Xbo),e(k,op),e(op,Vce),e(Vce,zbo),e(op,Wbo),e(op,cj),e(cj,Qbo),e(op,Ubo),e(k,Hbo),e(k,ol),e(ol,Xce),e(Xce,Jbo),e(ol,Ybo),e(ol,fj),e(fj,Kbo),e(ol,Zbo),e(ol,mj),e(mj,evo),e(ol,ovo),e(k,rvo),e(k,rl),e(rl,zce),e(zce,tvo),e(rl,avo),e(rl,gj),e(gj,nvo),e(rl,svo),e(rl,hj),e(hj,lvo),e(rl,ivo),e(k,dvo),e(k,tl),e(tl,Wce),e(Wce,cvo),e(tl,fvo),e(tl,pj),e(pj,mvo),e(tl,gvo),e(tl,_j),e(_j,hvo),e(tl,pvo),e(k,_vo),e(k,al),e(al,Qce),e(Qce,uvo),e(al,bvo),e(al,uj),e(uj,vvo),e(al,Fvo),e(al,bj),e(bj,Tvo),e(al,Mvo),e(Sr,Evo),M(rp,Sr,null),e(xo,Cvo),e(xo,tp),M(My,tp,null),e(tp,wvo),e(tp,Uce),e(Uce,Avo),b(f,RQe,u),b(f,Zi,u),e(Zi,ap),e(ap,Hce),M(Ey,Hce,null),e(Zi,Lvo),e(Zi,Jce),e(Jce,yvo),b(f,PQe,u),b(f,$o,u),M(Cy,$o,null),e($o,xvo),e($o,wy),e(wy,$vo),e(wy,vj),e(vj,kvo),e(wy,Svo),e($o,Rvo),e($o,Ay),e(Ay,Pvo),e(Ay,Yce),e(Yce,Bvo),e(Ay,Ivo),e($o,Nvo),e($o,He),M(Ly,He,null),e(He,qvo),e(He,Kce),e(Kce,jvo),e(He,Dvo),e(He,Oa),e(Oa,Gvo),e(Oa,Zce),e(Zce,Ovo),e(Oa,Vvo),e(Oa,efe),e(efe,Xvo),e(Oa,zvo),e(Oa,ofe),e(ofe,Wvo),e(Oa,Qvo),e(He,Uvo),e(He,U),e(U,np),e(np,rfe),e(rfe,Hvo),e(np,Jvo),e(np,Fj),e(Fj,Yvo),e(np,Kvo),e(U,Zvo),e(U,sp),e(sp,tfe),e(tfe,e0o),e(sp,o0o),e(sp,Tj),e(Tj,r0o),e(sp,t0o),e(U,a0o),e(U,lp),e(lp,afe),e(afe,n0o),e(lp,s0o),e(lp,Mj),e(Mj,l0o),e(lp,i0o),e(U,d0o),e(U,ip),e(ip,nfe),e(nfe,c0o),e(ip,f0o),e(ip,Ej),e(Ej,m0o),e(ip,g0o),e(U,h0o),e(U,dp),e(dp,sfe),e(sfe,p0o),e(dp,_0o),e(dp,Cj),e(Cj,u0o),e(dp,b0o),e(U,v0o),e(U,cp),e(cp,lfe),e(lfe,F0o),e(cp,T0o),e(cp,wj),e(wj,M0o),e(cp,E0o),e(U,C0o),e(U,fp),e(fp,ife),e(ife,w0o),e(fp,A0o),e(fp,Aj),e(Aj,L0o),e(fp,y0o),e(U,x0o),e(U,mp),e(mp,dfe),e(dfe,$0o),e(mp,k0o),e(mp,Lj),e(Lj,S0o),e(mp,R0o),e(U,P0o),e(U,gp),e(gp,cfe),e(cfe,B0o),e(gp,I0o),e(gp,yj),e(yj,N0o),e(gp,q0o),e(U,j0o),e(U,hp),e(hp,ffe),e(ffe,D0o),e(hp,G0o),e(hp,xj),e(xj,O0o),e(hp,V0o),e(U,X0o),e(U,pp),e(pp,mfe),e(mfe,z0o),e(pp,W0o),e(pp,$j),e($j,Q0o),e(pp,U0o),e(U,H0o),e(U,_p),e(_p,gfe),e(gfe,J0o),e(_p,Y0o),e(_p,kj),e(kj,K0o),e(_p,Z0o),e(U,e6o),e(U,up),e(up,hfe),e(hfe,o6o),e(up,r6o),e(up,Sj),e(Sj,t6o),e(up,a6o),e(U,n6o),e(U,bp),e(bp,pfe),e(pfe,s6o),e(bp,l6o),e(bp,Rj),e(Rj,i6o),e(bp,d6o),e(U,c6o),e(U,vp),e(vp,_fe),e(_fe,f6o),e(vp,m6o),e(vp,Pj),e(Pj,g6o),e(vp,h6o),e(U,p6o),e(U,Fp),e(Fp,ufe),e(ufe,_6o),e(Fp,u6o),e(Fp,Bj),e(Bj,b6o),e(Fp,v6o),e(U,F6o),e(U,Tp),e(Tp,bfe),e(bfe,T6o),e(Tp,M6o),e(Tp,Ij),e(Ij,E6o),e(Tp,C6o),e(U,w6o),e(U,Mp),e(Mp,vfe),e(vfe,A6o),e(Mp,L6o),e(Mp,Nj),e(Nj,y6o),e(Mp,x6o),e(U,$6o),e(U,Ep),e(Ep,Ffe),e(Ffe,k6o),e(Ep,S6o),e(Ep,qj),e(qj,R6o),e(Ep,P6o),e(U,B6o),e(U,Cp),e(Cp,Tfe),e(Tfe,I6o),e(Cp,N6o),e(Cp,jj),e(jj,q6o),e(Cp,j6o),e(U,D6o),e(U,wp),e(wp,Mfe),e(Mfe,G6o),e(wp,O6o),e(wp,Dj),e(Dj,V6o),e(wp,X6o),e(U,z6o),e(U,Ap),e(Ap,Efe),e(Efe,W6o),e(Ap,Q6o),e(Ap,Gj),e(Gj,U6o),e(Ap,H6o),e(U,J6o),e(U,Lp),e(Lp,Cfe),e(Cfe,Y6o),e(Lp,K6o),e(Lp,Oj),e(Oj,Z6o),e(Lp,eFo),e(U,oFo),e(U,yp),e(yp,wfe),e(wfe,rFo),e(yp,tFo),e(yp,Vj),e(Vj,aFo),e(yp,nFo),e(U,sFo),e(U,xp),e(xp,Afe),e(Afe,lFo),e(xp,iFo),e(xp,Xj),e(Xj,dFo),e(xp,cFo),e(U,fFo),e(U,$p),e($p,Lfe),e(Lfe,mFo),e($p,gFo),e($p,zj),e(zj,hFo),e($p,pFo),e(U,_Fo),e(U,kp),e(kp,yfe),e(yfe,uFo),e(kp,bFo),e(kp,Wj),e(Wj,vFo),e(kp,FFo),e(U,TFo),e(U,Sp),e(Sp,xfe),e(xfe,MFo),e(Sp,EFo),e(Sp,Qj),e(Qj,CFo),e(Sp,wFo),e(U,AFo),e(U,Rp),e(Rp,$fe),e($fe,LFo),e(Rp,yFo),e(Rp,Uj),e(Uj,xFo),e(Rp,$Fo),e(U,kFo),e(U,Pp),e(Pp,kfe),e(kfe,SFo),e(Pp,RFo),e(Pp,Hj),e(Hj,PFo),e(Pp,BFo),e(U,IFo),e(U,Bp),e(Bp,Sfe),e(Sfe,NFo),e(Bp,qFo),e(Bp,Jj),e(Jj,jFo),e(Bp,DFo),e(U,GFo),e(U,Ip),e(Ip,Rfe),e(Rfe,OFo),e(Ip,VFo),e(Ip,Yj),e(Yj,XFo),e(Ip,zFo),e(U,WFo),e(U,Np),e(Np,Pfe),e(Pfe,QFo),e(Np,UFo),e(Np,Kj),e(Kj,HFo),e(Np,JFo),e(U,YFo),e(U,qp),e(qp,Bfe),e(Bfe,KFo),e(qp,ZFo),e(qp,Zj),e(Zj,eTo),e(qp,oTo),e(U,rTo),e(U,jp),e(jp,Ife),e(Ife,tTo),e(jp,aTo),e(jp,eD),e(eD,nTo),e(jp,sTo),e(U,lTo),e(U,Dp),e(Dp,Nfe),e(Nfe,iTo),e(Dp,dTo),e(Dp,oD),e(oD,cTo),e(Dp,fTo),e(U,mTo),e(U,Gp),e(Gp,qfe),e(qfe,gTo),e(Gp,hTo),e(Gp,rD),e(rD,pTo),e(Gp,_To),e(He,uTo),M(Op,He,null),e(He,bTo),M(Vp,He,null),e($o,vTo),e($o,Xp),M(yy,Xp,null),e(Xp,FTo),e(Xp,jfe),e(jfe,TTo),b(f,BQe,u),b(f,ed,u),e(ed,zp),e(zp,Dfe),M(xy,Dfe,null),e(ed,MTo),e(ed,Gfe),e(Gfe,ETo),b(f,IQe,u),b(f,ko,u),M($y,ko,null),e(ko,CTo),e(ko,ky),e(ky,wTo),e(ky,tD),e(tD,ATo),e(ky,LTo),e(ko,yTo),e(ko,Sy),e(Sy,xTo),e(Sy,Ofe),e(Ofe,$To),e(Sy,kTo),e(ko,STo),e(ko,Je),M(Ry,Je,null),e(Je,RTo),e(Je,Vfe),e(Vfe,PTo),e(Je,BTo),e(Je,od),e(od,ITo),e(od,Xfe),e(Xfe,NTo),e(od,qTo),e(od,zfe),e(zfe,jTo),e(od,DTo),e(Je,GTo),e(Je,fe),e(fe,Wp),e(Wp,Wfe),e(Wfe,OTo),e(Wp,VTo),e(Wp,aD),e(aD,XTo),e(Wp,zTo),e(fe,WTo),e(fe,Qp),e(Qp,Qfe),e(Qfe,QTo),e(Qp,UTo),e(Qp,nD),e(nD,HTo),e(Qp,JTo),e(fe,YTo),e(fe,Up),e(Up,Ufe),e(Ufe,KTo),e(Up,ZTo),e(Up,sD),e(sD,e8o),e(Up,o8o),e(fe,r8o),e(fe,Hp),e(Hp,Hfe),e(Hfe,t8o),e(Hp,a8o),e(Hp,lD),e(lD,n8o),e(Hp,s8o),e(fe,l8o),e(fe,Jp),e(Jp,Jfe),e(Jfe,i8o),e(Jp,d8o),e(Jp,iD),e(iD,c8o),e(Jp,f8o),e(fe,m8o),e(fe,Yp),e(Yp,Yfe),e(Yfe,g8o),e(Yp,h8o),e(Yp,dD),e(dD,p8o),e(Yp,_8o),e(fe,u8o),e(fe,Kp),e(Kp,Kfe),e(Kfe,b8o),e(Kp,v8o),e(Kp,cD),e(cD,F8o),e(Kp,T8o),e(fe,M8o),e(fe,Zp),e(Zp,Zfe),e(Zfe,E8o),e(Zp,C8o),e(Zp,fD),e(fD,w8o),e(Zp,A8o),e(fe,L8o),e(fe,e_),e(e_,eme),e(eme,y8o),e(e_,x8o),e(e_,mD),e(mD,$8o),e(e_,k8o),e(fe,S8o),e(fe,o_),e(o_,ome),e(ome,R8o),e(o_,P8o),e(o_,gD),e(gD,B8o),e(o_,I8o),e(fe,N8o),e(fe,r_),e(r_,rme),e(rme,q8o),e(r_,j8o),e(r_,hD),e(hD,D8o),e(r_,G8o),e(fe,O8o),e(fe,t_),e(t_,tme),e(tme,V8o),e(t_,X8o),e(t_,pD),e(pD,z8o),e(t_,W8o),e(fe,Q8o),e(fe,a_),e(a_,ame),e(ame,U8o),e(a_,H8o),e(a_,_D),e(_D,J8o),e(a_,Y8o),e(fe,K8o),e(fe,n_),e(n_,nme),e(nme,Z8o),e(n_,eMo),e(n_,uD),e(uD,oMo),e(n_,rMo),e(fe,tMo),e(fe,s_),e(s_,sme),e(sme,aMo),e(s_,nMo),e(s_,bD),e(bD,sMo),e(s_,lMo),e(fe,iMo),e(fe,l_),e(l_,lme),e(lme,dMo),e(l_,cMo),e(l_,vD),e(vD,fMo),e(l_,mMo),e(fe,gMo),e(fe,i_),e(i_,ime),e(ime,hMo),e(i_,pMo),e(i_,FD),e(FD,_Mo),e(i_,uMo),e(fe,bMo),e(fe,d_),e(d_,dme),e(dme,vMo),e(d_,FMo),e(d_,TD),e(TD,TMo),e(d_,MMo),e(fe,EMo),e(fe,c_),e(c_,cme),e(cme,CMo),e(c_,wMo),e(c_,MD),e(MD,AMo),e(c_,LMo),e(Je,yMo),M(f_,Je,null),e(Je,xMo),M(m_,Je,null),e(ko,$Mo),e(ko,g_),M(Py,g_,null),e(g_,kMo),e(g_,fme),e(fme,SMo),b(f,NQe,u),b(f,rd,u),e(rd,h_),e(h_,mme),M(By,mme,null),e(rd,RMo),e(rd,gme),e(gme,PMo),b(f,qQe,u),b(f,So,u),M(Iy,So,null),e(So,BMo),e(So,td),e(td,IMo),e(td,ED),e(ED,NMo),e(td,qMo),e(td,CD),e(CD,jMo),e(td,DMo),e(So,GMo),e(So,Ny),e(Ny,OMo),e(Ny,hme),e(hme,VMo),e(Ny,XMo),e(So,zMo),e(So,mt),M(qy,mt,null),e(mt,WMo),e(mt,pme),e(pme,QMo),e(mt,UMo),e(mt,ad),e(ad,HMo),e(ad,_me),e(_me,JMo),e(ad,YMo),e(ad,wD),e(wD,KMo),e(ad,ZMo),e(mt,eEo),M(p_,mt,null),e(So,oEo),e(So,Ye),M(jy,Ye,null),e(Ye,rEo),e(Ye,ume),e(ume,tEo),e(Ye,aEo),e(Ye,Va),e(Va,nEo),e(Va,bme),e(bme,sEo),e(Va,lEo),e(Va,vme),e(vme,iEo),e(Va,dEo),e(Va,Fme),e(Fme,cEo),e(Va,fEo),e(Ye,mEo),e(Ye,y),e(y,__),e(__,Tme),e(Tme,gEo),e(__,hEo),e(__,AD),e(AD,pEo),e(__,_Eo),e(y,uEo),e(y,u_),e(u_,Mme),e(Mme,bEo),e(u_,vEo),e(u_,LD),e(LD,FEo),e(u_,TEo),e(y,MEo),e(y,b_),e(b_,Eme),e(Eme,EEo),e(b_,CEo),e(b_,yD),e(yD,wEo),e(b_,AEo),e(y,LEo),e(y,v_),e(v_,Cme),e(Cme,yEo),e(v_,xEo),e(v_,xD),e(xD,$Eo),e(v_,kEo),e(y,SEo),e(y,F_),e(F_,wme),e(wme,REo),e(F_,PEo),e(F_,$D),e($D,BEo),e(F_,IEo),e(y,NEo),e(y,T_),e(T_,Ame),e(Ame,qEo),e(T_,jEo),e(T_,kD),e(kD,DEo),e(T_,GEo),e(y,OEo),e(y,M_),e(M_,Lme),e(Lme,VEo),e(M_,XEo),e(M_,SD),e(SD,zEo),e(M_,WEo),e(y,QEo),e(y,E_),e(E_,yme),e(yme,UEo),e(E_,HEo),e(E_,RD),e(RD,JEo),e(E_,YEo),e(y,KEo),e(y,C_),e(C_,xme),e(xme,ZEo),e(C_,e4o),e(C_,PD),e(PD,o4o),e(C_,r4o),e(y,t4o),e(y,w_),e(w_,$me),e($me,a4o),e(w_,n4o),e(w_,BD),e(BD,s4o),e(w_,l4o),e(y,i4o),e(y,A_),e(A_,kme),e(kme,d4o),e(A_,c4o),e(A_,ID),e(ID,f4o),e(A_,m4o),e(y,g4o),e(y,L_),e(L_,Sme),e(Sme,h4o),e(L_,p4o),e(L_,ND),e(ND,_4o),e(L_,u4o),e(y,b4o),e(y,y_),e(y_,Rme),e(Rme,v4o),e(y_,F4o),e(y_,qD),e(qD,T4o),e(y_,M4o),e(y,E4o),e(y,x_),e(x_,Pme),e(Pme,C4o),e(x_,w4o),e(x_,jD),e(jD,A4o),e(x_,L4o),e(y,y4o),e(y,$_),e($_,Bme),e(Bme,x4o),e($_,$4o),e($_,DD),e(DD,k4o),e($_,S4o),e(y,R4o),e(y,k_),e(k_,Ime),e(Ime,P4o),e(k_,B4o),e(k_,GD),e(GD,I4o),e(k_,N4o),e(y,q4o),e(y,S_),e(S_,Nme),e(Nme,j4o),e(S_,D4o),e(S_,OD),e(OD,G4o),e(S_,O4o),e(y,V4o),e(y,R_),e(R_,qme),e(qme,X4o),e(R_,z4o),e(R_,VD),e(VD,W4o),e(R_,Q4o),e(y,U4o),e(y,P_),e(P_,jme),e(jme,H4o),e(P_,J4o),e(P_,XD),e(XD,Y4o),e(P_,K4o),e(y,Z4o),e(y,B_),e(B_,Dme),e(Dme,eCo),e(B_,oCo),e(B_,zD),e(zD,rCo),e(B_,tCo),e(y,aCo),e(y,I_),e(I_,Gme),e(Gme,nCo),e(I_,sCo),e(I_,WD),e(WD,lCo),e(I_,iCo),e(y,dCo),e(y,N_),e(N_,Ome),e(Ome,cCo),e(N_,fCo),e(N_,QD),e(QD,mCo),e(N_,gCo),e(y,hCo),e(y,q_),e(q_,Vme),e(Vme,pCo),e(q_,_Co),e(q_,UD),e(UD,uCo),e(q_,bCo),e(y,vCo),e(y,j_),e(j_,Xme),e(Xme,FCo),e(j_,TCo),e(j_,HD),e(HD,MCo),e(j_,ECo),e(y,CCo),e(y,D_),e(D_,zme),e(zme,wCo),e(D_,ACo),e(D_,JD),e(JD,LCo),e(D_,yCo),e(y,xCo),e(y,G_),e(G_,Wme),e(Wme,$Co),e(G_,kCo),e(G_,YD),e(YD,SCo),e(G_,RCo),e(y,PCo),e(y,O_),e(O_,Qme),e(Qme,BCo),e(O_,ICo),e(O_,KD),e(KD,NCo),e(O_,qCo),e(y,jCo),e(y,V_),e(V_,Ume),e(Ume,DCo),e(V_,GCo),e(V_,ZD),e(ZD,OCo),e(V_,VCo),e(y,XCo),e(y,X_),e(X_,Hme),e(Hme,zCo),e(X_,WCo),e(X_,eG),e(eG,QCo),e(X_,UCo),e(y,HCo),e(y,z_),e(z_,Jme),e(Jme,JCo),e(z_,YCo),e(z_,oG),e(oG,KCo),e(z_,ZCo),e(y,e3o),e(y,W_),e(W_,Yme),e(Yme,o3o),e(W_,r3o),e(W_,rG),e(rG,t3o),e(W_,a3o),e(y,n3o),e(y,Q_),e(Q_,Kme),e(Kme,s3o),e(Q_,l3o),e(Q_,tG),e(tG,i3o),e(Q_,d3o),e(y,c3o),e(y,U_),e(U_,Zme),e(Zme,f3o),e(U_,m3o),e(U_,aG),e(aG,g3o),e(U_,h3o),e(y,p3o),e(y,H_),e(H_,ege),e(ege,_3o),e(H_,u3o),e(H_,nG),e(nG,b3o),e(H_,v3o),e(y,F3o),e(y,nl),e(nl,oge),e(oge,T3o),e(nl,M3o),e(nl,sG),e(sG,E3o),e(nl,C3o),e(nl,lG),e(lG,w3o),e(nl,A3o),e(y,L3o),e(y,J_),e(J_,rge),e(rge,y3o),e(J_,x3o),e(J_,iG),e(iG,$3o),e(J_,k3o),e(y,S3o),e(y,Y_),e(Y_,tge),e(tge,R3o),e(Y_,P3o),e(Y_,dG),e(dG,B3o),e(Y_,I3o),e(y,N3o),e(y,K_),e(K_,age),e(age,q3o),e(K_,j3o),e(K_,cG),e(cG,D3o),e(K_,G3o),e(y,O3o),e(y,Z_),e(Z_,nge),e(nge,V3o),e(Z_,X3o),e(Z_,fG),e(fG,z3o),e(Z_,W3o),e(y,Q3o),e(y,eu),e(eu,sge),e(sge,U3o),e(eu,H3o),e(eu,mG),e(mG,J3o),e(eu,Y3o),e(y,K3o),e(y,ou),e(ou,lge),e(lge,Z3o),e(ou,e5o),e(ou,gG),e(gG,o5o),e(ou,r5o),e(y,t5o),e(y,ru),e(ru,ige),e(ige,a5o),e(ru,n5o),e(ru,hG),e(hG,s5o),e(ru,l5o),e(y,i5o),e(y,tu),e(tu,dge),e(dge,d5o),e(tu,c5o),e(tu,pG),e(pG,f5o),e(tu,m5o),e(y,g5o),e(y,au),e(au,cge),e(cge,h5o),e(au,p5o),e(au,_G),e(_G,_5o),e(au,u5o),e(y,b5o),e(y,nu),e(nu,fge),e(fge,v5o),e(nu,F5o),e(nu,uG),e(uG,T5o),e(nu,M5o),e(y,E5o),e(y,su),e(su,mge),e(mge,C5o),e(su,w5o),e(su,bG),e(bG,A5o),e(su,L5o),e(y,y5o),e(y,lu),e(lu,gge),e(gge,x5o),e(lu,$5o),e(lu,vG),e(vG,k5o),e(lu,S5o),e(y,R5o),e(y,iu),e(iu,hge),e(hge,P5o),e(iu,B5o),e(iu,FG),e(FG,I5o),e(iu,N5o),e(y,q5o),e(y,du),e(du,pge),e(pge,j5o),e(du,D5o),e(du,TG),e(TG,G5o),e(du,O5o),e(y,V5o),e(y,cu),e(cu,_ge),e(_ge,X5o),e(cu,z5o),e(cu,MG),e(MG,W5o),e(cu,Q5o),e(y,U5o),e(y,fu),e(fu,uge),e(uge,H5o),e(fu,J5o),e(fu,EG),e(EG,Y5o),e(fu,K5o),e(y,Z5o),e(y,mu),e(mu,bge),e(bge,ewo),e(mu,owo),e(mu,CG),e(CG,rwo),e(mu,two),e(y,awo),e(y,gu),e(gu,vge),e(vge,nwo),e(gu,swo),e(gu,wG),e(wG,lwo),e(gu,iwo),e(y,dwo),e(y,hu),e(hu,Fge),e(Fge,cwo),e(hu,fwo),e(hu,AG),e(AG,mwo),e(hu,gwo),e(y,hwo),e(y,pu),e(pu,Tge),e(Tge,pwo),e(pu,_wo),e(pu,LG),e(LG,uwo),e(pu,bwo),e(y,vwo),e(y,_u),e(_u,Mge),e(Mge,Fwo),e(_u,Two),e(_u,yG),e(yG,Mwo),e(_u,Ewo),e(y,Cwo),e(y,uu),e(uu,Ege),e(Ege,wwo),e(uu,Awo),e(uu,xG),e(xG,Lwo),e(uu,ywo),e(y,xwo),e(y,bu),e(bu,Cge),e(Cge,$wo),e(bu,kwo),e(bu,$G),e($G,Swo),e(bu,Rwo),e(y,Pwo),e(y,vu),e(vu,wge),e(wge,Bwo),e(vu,Iwo),e(vu,kG),e(kG,Nwo),e(vu,qwo),e(y,jwo),e(y,Fu),e(Fu,Age),e(Age,Dwo),e(Fu,Gwo),e(Fu,SG),e(SG,Owo),e(Fu,Vwo),e(y,Xwo),e(y,Tu),e(Tu,Lge),e(Lge,zwo),e(Tu,Wwo),e(Tu,RG),e(RG,Qwo),e(Tu,Uwo),e(y,Hwo),e(y,Mu),e(Mu,yge),e(yge,Jwo),e(Mu,Ywo),e(Mu,PG),e(PG,Kwo),e(Mu,Zwo),e(y,eAo),e(y,Eu),e(Eu,xge),e(xge,oAo),e(Eu,rAo),e(Eu,BG),e(BG,tAo),e(Eu,aAo),e(y,nAo),e(y,Cu),e(Cu,$ge),e($ge,sAo),e(Cu,lAo),e(Cu,IG),e(IG,iAo),e(Cu,dAo),e(y,cAo),e(y,wu),e(wu,kge),e(kge,fAo),e(wu,mAo),e(wu,NG),e(NG,gAo),e(wu,hAo),e(y,pAo),e(y,Au),e(Au,Sge),e(Sge,_Ao),e(Au,uAo),e(Au,qG),e(qG,bAo),e(Au,vAo),e(y,FAo),e(y,Lu),e(Lu,Rge),e(Rge,TAo),e(Lu,MAo),e(Lu,jG),e(jG,EAo),e(Lu,CAo),e(y,wAo),e(y,yu),e(yu,Pge),e(Pge,AAo),e(yu,LAo),e(yu,DG),e(DG,yAo),e(yu,xAo),e(y,$Ao),e(y,xu),e(xu,Bge),e(Bge,kAo),e(xu,SAo),e(xu,GG),e(GG,RAo),e(xu,PAo),e(y,BAo),e(y,$u),e($u,Ige),e(Ige,IAo),e($u,NAo),e($u,OG),e(OG,qAo),e($u,jAo),e(y,DAo),e(y,ku),e(ku,Nge),e(Nge,GAo),e(ku,OAo),e(ku,VG),e(VG,VAo),e(ku,XAo),e(y,zAo),e(y,Su),e(Su,qge),e(qge,WAo),e(Su,QAo),e(Su,XG),e(XG,UAo),e(Su,HAo),e(y,JAo),e(y,Ru),e(Ru,jge),e(jge,YAo),e(Ru,KAo),e(Ru,zG),e(zG,ZAo),e(Ru,e7o),e(y,o7o),e(y,Pu),e(Pu,Dge),e(Dge,r7o),e(Pu,t7o),e(Pu,WG),e(WG,a7o),e(Pu,n7o),e(y,s7o),e(y,Bu),e(Bu,Gge),e(Gge,l7o),e(Bu,i7o),e(Bu,QG),e(QG,d7o),e(Bu,c7o),e(y,f7o),e(y,Iu),e(Iu,Oge),e(Oge,m7o),e(Iu,g7o),e(Iu,UG),e(UG,h7o),e(Iu,p7o),e(y,_7o),e(y,Nu),e(Nu,Vge),e(Vge,u7o),e(Nu,b7o),e(Nu,HG),e(HG,v7o),e(Nu,F7o),e(y,T7o),e(y,qu),e(qu,Xge),e(Xge,M7o),e(qu,E7o),e(qu,JG),e(JG,C7o),e(qu,w7o),e(y,A7o),e(y,ju),e(ju,zge),e(zge,L7o),e(ju,y7o),e(ju,YG),e(YG,x7o),e(ju,$7o),e(y,k7o),e(y,Du),e(Du,Wge),e(Wge,S7o),e(Du,R7o),e(Du,KG),e(KG,P7o),e(Du,B7o),e(y,I7o),e(y,Gu),e(Gu,Qge),e(Qge,N7o),e(Gu,q7o),e(Gu,ZG),e(ZG,j7o),e(Gu,D7o),e(y,G7o),e(y,Ou),e(Ou,Uge),e(Uge,O7o),e(Ou,V7o),e(Ou,eO),e(eO,X7o),e(Ou,z7o),e(y,W7o),e(y,Vu),e(Vu,Hge),e(Hge,Q7o),e(Vu,U7o),e(Vu,oO),e(oO,H7o),e(Vu,J7o),e(y,Y7o),e(y,Xu),e(Xu,Jge),e(Jge,K7o),e(Xu,Z7o),e(Xu,rO),e(rO,eLo),e(Xu,oLo),e(y,rLo),e(y,zu),e(zu,Yge),e(Yge,tLo),e(zu,aLo),e(zu,tO),e(tO,nLo),e(zu,sLo),e(y,lLo),e(y,Wu),e(Wu,Kge),e(Kge,iLo),e(Wu,dLo),e(Wu,aO),e(aO,cLo),e(Wu,fLo),e(y,mLo),e(y,Qu),e(Qu,Zge),e(Zge,gLo),e(Qu,hLo),e(Qu,nO),e(nO,pLo),e(Qu,_Lo),e(y,uLo),e(y,Uu),e(Uu,ehe),e(ehe,bLo),e(Uu,vLo),e(Uu,sO),e(sO,FLo),e(Uu,TLo),e(y,MLo),e(y,Hu),e(Hu,ohe),e(ohe,ELo),e(Hu,CLo),e(Hu,lO),e(lO,wLo),e(Hu,ALo),e(y,LLo),e(y,Ju),e(Ju,rhe),e(rhe,yLo),e(Ju,xLo),e(Ju,iO),e(iO,$Lo),e(Ju,kLo),e(y,SLo),e(y,Yu),e(Yu,the),e(the,RLo),e(Yu,PLo),e(Yu,dO),e(dO,BLo),e(Yu,ILo),e(y,NLo),e(y,Ku),e(Ku,ahe),e(ahe,qLo),e(Ku,jLo),e(Ku,cO),e(cO,DLo),e(Ku,GLo),e(y,OLo),e(y,Zu),e(Zu,nhe),e(nhe,VLo),e(Zu,XLo),e(Zu,fO),e(fO,zLo),e(Zu,WLo),e(y,QLo),e(y,e2),e(e2,she),e(she,ULo),e(e2,HLo),e(e2,mO),e(mO,JLo),e(e2,YLo),e(y,KLo),e(y,o2),e(o2,lhe),e(lhe,ZLo),e(o2,eyo),e(o2,gO),e(gO,oyo),e(o2,ryo),e(y,tyo),e(y,r2),e(r2,ihe),e(ihe,ayo),e(r2,nyo),e(r2,hO),e(hO,syo),e(r2,lyo),e(y,iyo),e(y,t2),e(t2,dhe),e(dhe,dyo),e(t2,cyo),e(t2,pO),e(pO,fyo),e(t2,myo),e(y,gyo),e(y,a2),e(a2,che),e(che,hyo),e(a2,pyo),e(a2,_O),e(_O,_yo),e(a2,uyo),e(y,byo),e(y,n2),e(n2,fhe),e(fhe,vyo),e(n2,Fyo),e(n2,uO),e(uO,Tyo),e(n2,Myo),e(y,Eyo),e(y,s2),e(s2,mhe),e(mhe,Cyo),e(s2,wyo),e(s2,bO),e(bO,Ayo),e(s2,Lyo),e(y,yyo),e(y,l2),e(l2,ghe),e(ghe,xyo),e(l2,$yo),e(l2,vO),e(vO,kyo),e(l2,Syo),e(y,Ryo),e(y,i2),e(i2,hhe),e(hhe,Pyo),e(i2,Byo),e(i2,FO),e(FO,Iyo),e(i2,Nyo),e(y,qyo),e(y,d2),e(d2,phe),e(phe,jyo),e(d2,Dyo),e(d2,TO),e(TO,Gyo),e(d2,Oyo),e(y,Vyo),e(y,c2),e(c2,_he),e(_he,Xyo),e(c2,zyo),e(c2,MO),e(MO,Wyo),e(c2,Qyo),e(y,Uyo),e(y,f2),e(f2,uhe),e(uhe,Hyo),e(f2,Jyo),e(f2,EO),e(EO,Yyo),e(f2,Kyo),e(y,Zyo),e(y,m2),e(m2,bhe),e(bhe,e9o),e(m2,o9o),e(m2,CO),e(CO,r9o),e(m2,t9o),e(y,a9o),e(y,g2),e(g2,vhe),e(vhe,n9o),e(g2,s9o),e(g2,wO),e(wO,l9o),e(g2,i9o),e(y,d9o),e(y,h2),e(h2,Fhe),e(Fhe,c9o),e(h2,f9o),e(h2,AO),e(AO,m9o),e(h2,g9o),e(y,h9o),e(y,p2),e(p2,The),e(The,p9o),e(p2,_9o),e(p2,LO),e(LO,u9o),e(p2,b9o),e(y,v9o),e(y,_2),e(_2,Mhe),e(Mhe,F9o),e(_2,T9o),e(_2,yO),e(yO,M9o),e(_2,E9o),e(y,C9o),e(y,u2),e(u2,Ehe),e(Ehe,w9o),e(u2,A9o),e(u2,xO),e(xO,L9o),e(u2,y9o),e(y,x9o),e(y,b2),e(b2,Che),e(Che,$9o),e(b2,k9o),e(b2,$O),e($O,S9o),e(b2,R9o),e(y,P9o),e(y,v2),e(v2,whe),e(whe,B9o),e(v2,I9o),e(v2,kO),e(kO,N9o),e(v2,q9o),e(y,j9o),e(y,F2),e(F2,Ahe),e(Ahe,D9o),e(F2,G9o),e(F2,SO),e(SO,O9o),e(F2,V9o),e(y,X9o),e(y,T2),e(T2,Lhe),e(Lhe,z9o),e(T2,W9o),e(T2,RO),e(RO,Q9o),e(T2,U9o),e(Ye,H9o),e(Ye,M2),e(M2,J9o),e(M2,yhe),e(yhe,Y9o),e(M2,K9o),e(M2,xhe),e(xhe,Z9o),e(Ye,exo),M(E2,Ye,null),b(f,jQe,u),b(f,nd,u),e(nd,C2),e(C2,$he),M(Dy,$he,null),e(nd,oxo),e(nd,khe),e(khe,rxo),b(f,DQe,u),b(f,Ro,u),M(Gy,Ro,null),e(Ro,txo),e(Ro,sd),e(sd,axo),e(sd,PO),e(PO,nxo),e(sd,sxo),e(sd,BO),e(BO,lxo),e(sd,ixo),e(Ro,dxo),e(Ro,Oy),e(Oy,cxo),e(Oy,She),e(She,fxo),e(Oy,mxo),e(Ro,gxo),e(Ro,gt),M(Vy,gt,null),e(gt,hxo),e(gt,Rhe),e(Rhe,pxo),e(gt,_xo),e(gt,ld),e(ld,uxo),e(ld,Phe),e(Phe,bxo),e(ld,vxo),e(ld,IO),e(IO,Fxo),e(ld,Txo),e(gt,Mxo),M(w2,gt,null),e(Ro,Exo),e(Ro,Ke),M(Xy,Ke,null),e(Ke,Cxo),e(Ke,Bhe),e(Bhe,wxo),e(Ke,Axo),e(Ke,Xa),e(Xa,Lxo),e(Xa,Ihe),e(Ihe,yxo),e(Xa,xxo),e(Xa,Nhe),e(Nhe,$xo),e(Xa,kxo),e(Xa,qhe),e(qhe,Sxo),e(Xa,Rxo),e(Ke,Pxo),e(Ke,G),e(G,A2),e(A2,jhe),e(jhe,Bxo),e(A2,Ixo),e(A2,NO),e(NO,Nxo),e(A2,qxo),e(G,jxo),e(G,L2),e(L2,Dhe),e(Dhe,Dxo),e(L2,Gxo),e(L2,qO),e(qO,Oxo),e(L2,Vxo),e(G,Xxo),e(G,y2),e(y2,Ghe),e(Ghe,zxo),e(y2,Wxo),e(y2,jO),e(jO,Qxo),e(y2,Uxo),e(G,Hxo),e(G,x2),e(x2,Ohe),e(Ohe,Jxo),e(x2,Yxo),e(x2,DO),e(DO,Kxo),e(x2,Zxo),e(G,e$o),e(G,$2),e($2,Vhe),e(Vhe,o$o),e($2,r$o),e($2,GO),e(GO,t$o),e($2,a$o),e(G,n$o),e(G,k2),e(k2,Xhe),e(Xhe,s$o),e(k2,l$o),e(k2,OO),e(OO,i$o),e(k2,d$o),e(G,c$o),e(G,S2),e(S2,zhe),e(zhe,f$o),e(S2,m$o),e(S2,VO),e(VO,g$o),e(S2,h$o),e(G,p$o),e(G,R2),e(R2,Whe),e(Whe,_$o),e(R2,u$o),e(R2,XO),e(XO,b$o),e(R2,v$o),e(G,F$o),e(G,P2),e(P2,Qhe),e(Qhe,T$o),e(P2,M$o),e(P2,zO),e(zO,E$o),e(P2,C$o),e(G,w$o),e(G,B2),e(B2,Uhe),e(Uhe,A$o),e(B2,L$o),e(B2,WO),e(WO,y$o),e(B2,x$o),e(G,$$o),e(G,I2),e(I2,Hhe),e(Hhe,k$o),e(I2,S$o),e(I2,QO),e(QO,R$o),e(I2,P$o),e(G,B$o),e(G,N2),e(N2,Jhe),e(Jhe,I$o),e(N2,N$o),e(N2,UO),e(UO,q$o),e(N2,j$o),e(G,D$o),e(G,q2),e(q2,Yhe),e(Yhe,G$o),e(q2,O$o),e(q2,HO),e(HO,V$o),e(q2,X$o),e(G,z$o),e(G,j2),e(j2,Khe),e(Khe,W$o),e(j2,Q$o),e(j2,JO),e(JO,U$o),e(j2,H$o),e(G,J$o),e(G,D2),e(D2,Zhe),e(Zhe,Y$o),e(D2,K$o),e(D2,YO),e(YO,Z$o),e(D2,eko),e(G,oko),e(G,G2),e(G2,epe),e(epe,rko),e(G2,tko),e(G2,KO),e(KO,ako),e(G2,nko),e(G,sko),e(G,O2),e(O2,ope),e(ope,lko),e(O2,iko),e(O2,ZO),e(ZO,dko),e(O2,cko),e(G,fko),e(G,V2),e(V2,rpe),e(rpe,mko),e(V2,gko),e(V2,eV),e(eV,hko),e(V2,pko),e(G,_ko),e(G,X2),e(X2,tpe),e(tpe,uko),e(X2,bko),e(X2,oV),e(oV,vko),e(X2,Fko),e(G,Tko),e(G,z2),e(z2,ape),e(ape,Mko),e(z2,Eko),e(z2,rV),e(rV,Cko),e(z2,wko),e(G,Ako),e(G,W2),e(W2,npe),e(npe,Lko),e(W2,yko),e(W2,tV),e(tV,xko),e(W2,$ko),e(G,kko),e(G,Q2),e(Q2,spe),e(spe,Sko),e(Q2,Rko),e(Q2,aV),e(aV,Pko),e(Q2,Bko),e(G,Iko),e(G,U2),e(U2,lpe),e(lpe,Nko),e(U2,qko),e(U2,nV),e(nV,jko),e(U2,Dko),e(G,Gko),e(G,H2),e(H2,ipe),e(ipe,Oko),e(H2,Vko),e(H2,sV),e(sV,Xko),e(H2,zko),e(G,Wko),e(G,J2),e(J2,dpe),e(dpe,Qko),e(J2,Uko),e(J2,lV),e(lV,Hko),e(J2,Jko),e(G,Yko),e(G,Y2),e(Y2,cpe),e(cpe,Kko),e(Y2,Zko),e(Y2,iV),e(iV,eSo),e(Y2,oSo),e(G,rSo),e(G,K2),e(K2,fpe),e(fpe,tSo),e(K2,aSo),e(K2,dV),e(dV,nSo),e(K2,sSo),e(G,lSo),e(G,Z2),e(Z2,mpe),e(mpe,iSo),e(Z2,dSo),e(Z2,cV),e(cV,cSo),e(Z2,fSo),e(G,mSo),e(G,e1),e(e1,gpe),e(gpe,gSo),e(e1,hSo),e(e1,fV),e(fV,pSo),e(e1,_So),e(G,uSo),e(G,o1),e(o1,hpe),e(hpe,bSo),e(o1,vSo),e(o1,mV),e(mV,FSo),e(o1,TSo),e(G,MSo),e(G,r1),e(r1,ppe),e(ppe,ESo),e(r1,CSo),e(r1,gV),e(gV,wSo),e(r1,ASo),e(G,LSo),e(G,t1),e(t1,_pe),e(_pe,ySo),e(t1,xSo),e(t1,hV),e(hV,$So),e(t1,kSo),e(G,SSo),e(G,a1),e(a1,upe),e(upe,RSo),e(a1,PSo),e(a1,pV),e(pV,BSo),e(a1,ISo),e(G,NSo),e(G,n1),e(n1,bpe),e(bpe,qSo),e(n1,jSo),e(n1,_V),e(_V,DSo),e(n1,GSo),e(G,OSo),e(G,s1),e(s1,vpe),e(vpe,VSo),e(s1,XSo),e(s1,uV),e(uV,zSo),e(s1,WSo),e(G,QSo),e(G,l1),e(l1,Fpe),e(Fpe,USo),e(l1,HSo),e(l1,bV),e(bV,JSo),e(l1,YSo),e(G,KSo),e(G,i1),e(i1,Tpe),e(Tpe,ZSo),e(i1,eRo),e(i1,vV),e(vV,oRo),e(i1,rRo),e(G,tRo),e(G,d1),e(d1,Mpe),e(Mpe,aRo),e(d1,nRo),e(d1,FV),e(FV,sRo),e(d1,lRo),e(G,iRo),e(G,c1),e(c1,Epe),e(Epe,dRo),e(c1,cRo),e(c1,TV),e(TV,fRo),e(c1,mRo),e(G,gRo),e(G,f1),e(f1,Cpe),e(Cpe,hRo),e(f1,pRo),e(f1,MV),e(MV,_Ro),e(f1,uRo),e(G,bRo),e(G,m1),e(m1,wpe),e(wpe,vRo),e(m1,FRo),e(m1,EV),e(EV,TRo),e(m1,MRo),e(G,ERo),e(G,g1),e(g1,Ape),e(Ape,CRo),e(g1,wRo),e(g1,CV),e(CV,ARo),e(g1,LRo),e(G,yRo),e(G,h1),e(h1,Lpe),e(Lpe,xRo),e(h1,$Ro),e(h1,wV),e(wV,kRo),e(h1,SRo),e(G,RRo),e(G,p1),e(p1,ype),e(ype,PRo),e(p1,BRo),e(p1,AV),e(AV,IRo),e(p1,NRo),e(G,qRo),e(G,_1),e(_1,xpe),e(xpe,jRo),e(_1,DRo),e(_1,LV),e(LV,GRo),e(_1,ORo),e(G,VRo),e(G,u1),e(u1,$pe),e($pe,XRo),e(u1,zRo),e(u1,yV),e(yV,WRo),e(u1,QRo),e(G,URo),e(G,b1),e(b1,kpe),e(kpe,HRo),e(b1,JRo),e(b1,xV),e(xV,YRo),e(b1,KRo),e(Ke,ZRo),e(Ke,v1),e(v1,ePo),e(v1,Spe),e(Spe,oPo),e(v1,rPo),e(v1,Rpe),e(Rpe,tPo),e(Ke,aPo),M(F1,Ke,null),b(f,GQe,u),b(f,id,u),e(id,T1),e(T1,Ppe),M(zy,Ppe,null),e(id,nPo),e(id,Bpe),e(Bpe,sPo),b(f,OQe,u),b(f,Po,u),M(Wy,Po,null),e(Po,lPo),e(Po,dd),e(dd,iPo),e(dd,$V),e($V,dPo),e(dd,cPo),e(dd,kV),e(kV,fPo),e(dd,mPo),e(Po,gPo),e(Po,Qy),e(Qy,hPo),e(Qy,Ipe),e(Ipe,pPo),e(Qy,_Po),e(Po,uPo),e(Po,ht),M(Uy,ht,null),e(ht,bPo),e(ht,Npe),e(Npe,vPo),e(ht,FPo),e(ht,cd),e(cd,TPo),e(cd,qpe),e(qpe,MPo),e(cd,EPo),e(cd,SV),e(SV,CPo),e(cd,wPo),e(ht,APo),M(M1,ht,null),e(Po,LPo),e(Po,Ze),M(Hy,Ze,null),e(Ze,yPo),e(Ze,jpe),e(jpe,xPo),e(Ze,$Po),e(Ze,za),e(za,kPo),e(za,Dpe),e(Dpe,SPo),e(za,RPo),e(za,Gpe),e(Gpe,PPo),e(za,BPo),e(za,Ope),e(Ope,IPo),e(za,NPo),e(Ze,qPo),e(Ze,z),e(z,E1),e(E1,Vpe),e(Vpe,jPo),e(E1,DPo),e(E1,RV),e(RV,GPo),e(E1,OPo),e(z,VPo),e(z,C1),e(C1,Xpe),e(Xpe,XPo),e(C1,zPo),e(C1,PV),e(PV,WPo),e(C1,QPo),e(z,UPo),e(z,w1),e(w1,zpe),e(zpe,HPo),e(w1,JPo),e(w1,BV),e(BV,YPo),e(w1,KPo),e(z,ZPo),e(z,A1),e(A1,Wpe),e(Wpe,eBo),e(A1,oBo),e(A1,IV),e(IV,rBo),e(A1,tBo),e(z,aBo),e(z,L1),e(L1,Qpe),e(Qpe,nBo),e(L1,sBo),e(L1,NV),e(NV,lBo),e(L1,iBo),e(z,dBo),e(z,y1),e(y1,Upe),e(Upe,cBo),e(y1,fBo),e(y1,qV),e(qV,mBo),e(y1,gBo),e(z,hBo),e(z,x1),e(x1,Hpe),e(Hpe,pBo),e(x1,_Bo),e(x1,jV),e(jV,uBo),e(x1,bBo),e(z,vBo),e(z,$1),e($1,Jpe),e(Jpe,FBo),e($1,TBo),e($1,DV),e(DV,MBo),e($1,EBo),e(z,CBo),e(z,k1),e(k1,Ype),e(Ype,wBo),e(k1,ABo),e(k1,GV),e(GV,LBo),e(k1,yBo),e(z,xBo),e(z,S1),e(S1,Kpe),e(Kpe,$Bo),e(S1,kBo),e(S1,OV),e(OV,SBo),e(S1,RBo),e(z,PBo),e(z,R1),e(R1,Zpe),e(Zpe,BBo),e(R1,IBo),e(R1,VV),e(VV,NBo),e(R1,qBo),e(z,jBo),e(z,P1),e(P1,e_e),e(e_e,DBo),e(P1,GBo),e(P1,XV),e(XV,OBo),e(P1,VBo),e(z,XBo),e(z,B1),e(B1,o_e),e(o_e,zBo),e(B1,WBo),e(B1,zV),e(zV,QBo),e(B1,UBo),e(z,HBo),e(z,I1),e(I1,r_e),e(r_e,JBo),e(I1,YBo),e(I1,WV),e(WV,KBo),e(I1,ZBo),e(z,eIo),e(z,N1),e(N1,t_e),e(t_e,oIo),e(N1,rIo),e(N1,QV),e(QV,tIo),e(N1,aIo),e(z,nIo),e(z,q1),e(q1,a_e),e(a_e,sIo),e(q1,lIo),e(q1,UV),e(UV,iIo),e(q1,dIo),e(z,cIo),e(z,j1),e(j1,n_e),e(n_e,fIo),e(j1,mIo),e(j1,HV),e(HV,gIo),e(j1,hIo),e(z,pIo),e(z,D1),e(D1,s_e),e(s_e,_Io),e(D1,uIo),e(D1,JV),e(JV,bIo),e(D1,vIo),e(z,FIo),e(z,G1),e(G1,l_e),e(l_e,TIo),e(G1,MIo),e(G1,YV),e(YV,EIo),e(G1,CIo),e(z,wIo),e(z,O1),e(O1,i_e),e(i_e,AIo),e(O1,LIo),e(O1,KV),e(KV,yIo),e(O1,xIo),e(z,$Io),e(z,V1),e(V1,d_e),e(d_e,kIo),e(V1,SIo),e(V1,ZV),e(ZV,RIo),e(V1,PIo),e(z,BIo),e(z,X1),e(X1,c_e),e(c_e,IIo),e(X1,NIo),e(X1,eX),e(eX,qIo),e(X1,jIo),e(z,DIo),e(z,z1),e(z1,f_e),e(f_e,GIo),e(z1,OIo),e(z1,oX),e(oX,VIo),e(z1,XIo),e(z,zIo),e(z,W1),e(W1,m_e),e(m_e,WIo),e(W1,QIo),e(W1,rX),e(rX,UIo),e(W1,HIo),e(z,JIo),e(z,Q1),e(Q1,g_e),e(g_e,YIo),e(Q1,KIo),e(Q1,tX),e(tX,ZIo),e(Q1,eNo),e(z,oNo),e(z,U1),e(U1,h_e),e(h_e,rNo),e(U1,tNo),e(U1,aX),e(aX,aNo),e(U1,nNo),e(z,sNo),e(z,H1),e(H1,p_e),e(p_e,lNo),e(H1,iNo),e(H1,nX),e(nX,dNo),e(H1,cNo),e(z,fNo),e(z,J1),e(J1,__e),e(__e,mNo),e(J1,gNo),e(J1,sX),e(sX,hNo),e(J1,pNo),e(z,_No),e(z,Y1),e(Y1,u_e),e(u_e,uNo),e(Y1,bNo),e(Y1,lX),e(lX,vNo),e(Y1,FNo),e(z,TNo),e(z,K1),e(K1,b_e),e(b_e,MNo),e(K1,ENo),e(K1,iX),e(iX,CNo),e(K1,wNo),e(z,ANo),e(z,Z1),e(Z1,v_e),e(v_e,LNo),e(Z1,yNo),e(Z1,dX),e(dX,xNo),e(Z1,$No),e(z,kNo),e(z,eb),e(eb,F_e),e(F_e,SNo),e(eb,RNo),e(eb,cX),e(cX,PNo),e(eb,BNo),e(z,INo),e(z,ob),e(ob,T_e),e(T_e,NNo),e(ob,qNo),e(ob,fX),e(fX,jNo),e(ob,DNo),e(z,GNo),e(z,rb),e(rb,M_e),e(M_e,ONo),e(rb,VNo),e(rb,mX),e(mX,XNo),e(rb,zNo),e(z,WNo),e(z,tb),e(tb,E_e),e(E_e,QNo),e(tb,UNo),e(tb,gX),e(gX,HNo),e(tb,JNo),e(z,YNo),e(z,ab),e(ab,C_e),e(C_e,KNo),e(ab,ZNo),e(ab,hX),e(hX,eqo),e(ab,oqo),e(z,rqo),e(z,nb),e(nb,w_e),e(w_e,tqo),e(nb,aqo),e(nb,pX),e(pX,nqo),e(nb,sqo),e(z,lqo),e(z,sb),e(sb,A_e),e(A_e,iqo),e(sb,dqo),e(sb,_X),e(_X,cqo),e(sb,fqo),e(z,mqo),e(z,lb),e(lb,L_e),e(L_e,gqo),e(lb,hqo),e(lb,uX),e(uX,pqo),e(lb,_qo),e(z,uqo),e(z,ib),e(ib,y_e),e(y_e,bqo),e(ib,vqo),e(ib,bX),e(bX,Fqo),e(ib,Tqo),e(Ze,Mqo),e(Ze,db),e(db,Eqo),e(db,x_e),e(x_e,Cqo),e(db,wqo),e(db,$_e),e($_e,Aqo),e(Ze,Lqo),M(cb,Ze,null),b(f,VQe,u),b(f,fd,u),e(fd,fb),e(fb,k_e),M(Jy,k_e,null),e(fd,yqo),e(fd,S_e),e(S_e,xqo),b(f,XQe,u),b(f,Bo,u),M(Yy,Bo,null),e(Bo,$qo),e(Bo,md),e(md,kqo),e(md,vX),e(vX,Sqo),e(md,Rqo),e(md,FX),e(FX,Pqo),e(md,Bqo),e(Bo,Iqo),e(Bo,Ky),e(Ky,Nqo),e(Ky,R_e),e(R_e,qqo),e(Ky,jqo),e(Bo,Dqo),e(Bo,pt),M(Zy,pt,null),e(pt,Gqo),e(pt,P_e),e(P_e,Oqo),e(pt,Vqo),e(pt,gd),e(gd,Xqo),e(gd,B_e),e(B_e,zqo),e(gd,Wqo),e(gd,TX),e(TX,Qqo),e(gd,Uqo),e(pt,Hqo),M(mb,pt,null),e(Bo,Jqo),e(Bo,eo),M(e9,eo,null),e(eo,Yqo),e(eo,I_e),e(I_e,Kqo),e(eo,Zqo),e(eo,Wa),e(Wa,ejo),e(Wa,N_e),e(N_e,ojo),e(Wa,rjo),e(Wa,q_e),e(q_e,tjo),e(Wa,ajo),e(Wa,j_e),e(j_e,njo),e(Wa,sjo),e(eo,ljo),e(eo,Q),e(Q,gb),e(gb,D_e),e(D_e,ijo),e(gb,djo),e(gb,MX),e(MX,cjo),e(gb,fjo),e(Q,mjo),e(Q,hb),e(hb,G_e),e(G_e,gjo),e(hb,hjo),e(hb,EX),e(EX,pjo),e(hb,_jo),e(Q,ujo),e(Q,pb),e(pb,O_e),e(O_e,bjo),e(pb,vjo),e(pb,CX),e(CX,Fjo),e(pb,Tjo),e(Q,Mjo),e(Q,_b),e(_b,V_e),e(V_e,Ejo),e(_b,Cjo),e(_b,wX),e(wX,wjo),e(_b,Ajo),e(Q,Ljo),e(Q,ub),e(ub,X_e),e(X_e,yjo),e(ub,xjo),e(ub,AX),e(AX,$jo),e(ub,kjo),e(Q,Sjo),e(Q,bb),e(bb,z_e),e(z_e,Rjo),e(bb,Pjo),e(bb,LX),e(LX,Bjo),e(bb,Ijo),e(Q,Njo),e(Q,vb),e(vb,W_e),e(W_e,qjo),e(vb,jjo),e(vb,yX),e(yX,Djo),e(vb,Gjo),e(Q,Ojo),e(Q,Fb),e(Fb,Q_e),e(Q_e,Vjo),e(Fb,Xjo),e(Fb,xX),e(xX,zjo),e(Fb,Wjo),e(Q,Qjo),e(Q,Tb),e(Tb,U_e),e(U_e,Ujo),e(Tb,Hjo),e(Tb,$X),e($X,Jjo),e(Tb,Yjo),e(Q,Kjo),e(Q,Mb),e(Mb,H_e),e(H_e,Zjo),e(Mb,eDo),e(Mb,kX),e(kX,oDo),e(Mb,rDo),e(Q,tDo),e(Q,Eb),e(Eb,J_e),e(J_e,aDo),e(Eb,nDo),e(Eb,SX),e(SX,sDo),e(Eb,lDo),e(Q,iDo),e(Q,Cb),e(Cb,Y_e),e(Y_e,dDo),e(Cb,cDo),e(Cb,RX),e(RX,fDo),e(Cb,mDo),e(Q,gDo),e(Q,wb),e(wb,K_e),e(K_e,hDo),e(wb,pDo),e(wb,PX),e(PX,_Do),e(wb,uDo),e(Q,bDo),e(Q,Ab),e(Ab,Z_e),e(Z_e,vDo),e(Ab,FDo),e(Ab,BX),e(BX,TDo),e(Ab,MDo),e(Q,EDo),e(Q,Lb),e(Lb,eue),e(eue,CDo),e(Lb,wDo),e(Lb,IX),e(IX,ADo),e(Lb,LDo),e(Q,yDo),e(Q,yb),e(yb,oue),e(oue,xDo),e(yb,$Do),e(yb,NX),e(NX,kDo),e(yb,SDo),e(Q,RDo),e(Q,xb),e(xb,rue),e(rue,PDo),e(xb,BDo),e(xb,qX),e(qX,IDo),e(xb,NDo),e(Q,qDo),e(Q,$b),e($b,tue),e(tue,jDo),e($b,DDo),e($b,jX),e(jX,GDo),e($b,ODo),e(Q,VDo),e(Q,kb),e(kb,aue),e(aue,XDo),e(kb,zDo),e(kb,DX),e(DX,WDo),e(kb,QDo),e(Q,UDo),e(Q,Sb),e(Sb,nue),e(nue,HDo),e(Sb,JDo),e(Sb,GX),e(GX,YDo),e(Sb,KDo),e(Q,ZDo),e(Q,Rb),e(Rb,sue),e(sue,eGo),e(Rb,oGo),e(Rb,OX),e(OX,rGo),e(Rb,tGo),e(Q,aGo),e(Q,Pb),e(Pb,lue),e(lue,nGo),e(Pb,sGo),e(Pb,VX),e(VX,lGo),e(Pb,iGo),e(Q,dGo),e(Q,Bb),e(Bb,iue),e(iue,cGo),e(Bb,fGo),e(Bb,XX),e(XX,mGo),e(Bb,gGo),e(Q,hGo),e(Q,Ib),e(Ib,due),e(due,pGo),e(Ib,_Go),e(Ib,zX),e(zX,uGo),e(Ib,bGo),e(Q,vGo),e(Q,Nb),e(Nb,cue),e(cue,FGo),e(Nb,TGo),e(Nb,WX),e(WX,MGo),e(Nb,EGo),e(Q,CGo),e(Q,qb),e(qb,fue),e(fue,wGo),e(qb,AGo),e(qb,QX),e(QX,LGo),e(qb,yGo),e(Q,xGo),e(Q,jb),e(jb,mue),e(mue,$Go),e(jb,kGo),e(jb,UX),e(UX,SGo),e(jb,RGo),e(Q,PGo),e(Q,Db),e(Db,gue),e(gue,BGo),e(Db,IGo),e(Db,HX),e(HX,NGo),e(Db,qGo),e(Q,jGo),e(Q,Gb),e(Gb,hue),e(hue,DGo),e(Gb,GGo),e(Gb,JX),e(JX,OGo),e(Gb,VGo),e(Q,XGo),e(Q,Ob),e(Ob,pue),e(pue,zGo),e(Ob,WGo),e(Ob,YX),e(YX,QGo),e(Ob,UGo),e(Q,HGo),e(Q,Vb),e(Vb,_ue),e(_ue,JGo),e(Vb,YGo),e(Vb,KX),e(KX,KGo),e(Vb,ZGo),e(Q,eOo),e(Q,Xb),e(Xb,uue),e(uue,oOo),e(Xb,rOo),e(Xb,ZX),e(ZX,tOo),e(Xb,aOo),e(Q,nOo),e(Q,zb),e(zb,bue),e(bue,sOo),e(zb,lOo),e(zb,ez),e(ez,iOo),e(zb,dOo),e(Q,cOo),e(Q,Wb),e(Wb,vue),e(vue,fOo),e(Wb,mOo),e(Wb,Fue),e(Fue,gOo),e(Wb,hOo),e(Q,pOo),e(Q,Qb),e(Qb,Tue),e(Tue,_Oo),e(Qb,uOo),e(Qb,oz),e(oz,bOo),e(Qb,vOo),e(Q,FOo),e(Q,Ub),e(Ub,Mue),e(Mue,TOo),e(Ub,MOo),e(Ub,rz),e(rz,EOo),e(Ub,COo),e(Q,wOo),e(Q,Hb),e(Hb,Eue),e(Eue,AOo),e(Hb,LOo),e(Hb,tz),e(tz,yOo),e(Hb,xOo),e(Q,$Oo),e(Q,Jb),e(Jb,Cue),e(Cue,kOo),e(Jb,SOo),e(Jb,az),e(az,ROo),e(Jb,POo),e(eo,BOo),e(eo,Yb),e(Yb,IOo),e(Yb,wue),e(wue,NOo),e(Yb,qOo),e(Yb,Aue),e(Aue,jOo),e(eo,DOo),M(Kb,eo,null),b(f,zQe,u),b(f,hd,u),e(hd,Zb),e(Zb,Lue),M(o9,Lue,null),e(hd,GOo),e(hd,yue),e(yue,OOo),b(f,WQe,u),b(f,Io,u),M(r9,Io,null),e(Io,VOo),e(Io,pd),e(pd,XOo),e(pd,nz),e(nz,zOo),e(pd,WOo),e(pd,sz),e(sz,QOo),e(pd,UOo),e(Io,HOo),e(Io,t9),e(t9,JOo),e(t9,xue),e(xue,YOo),e(t9,KOo),e(Io,ZOo),e(Io,_t),M(a9,_t,null),e(_t,eVo),e(_t,$ue),e($ue,oVo),e(_t,rVo),e(_t,_d),e(_d,tVo),e(_d,kue),e(kue,aVo),e(_d,nVo),e(_d,lz),e(lz,sVo),e(_d,lVo),e(_t,iVo),M(ev,_t,null),e(Io,dVo),e(Io,oo),M(n9,oo,null),e(oo,cVo),e(oo,Sue),e(Sue,fVo),e(oo,mVo),e(oo,Qa),e(Qa,gVo),e(Qa,Rue),e(Rue,hVo),e(Qa,pVo),e(Qa,Pue),e(Pue,_Vo),e(Qa,uVo),e(Qa,Bue),e(Bue,bVo),e(Qa,vVo),e(oo,FVo),e(oo,me),e(me,ov),e(ov,Iue),e(Iue,TVo),e(ov,MVo),e(ov,iz),e(iz,EVo),e(ov,CVo),e(me,wVo),e(me,rv),e(rv,Nue),e(Nue,AVo),e(rv,LVo),e(rv,dz),e(dz,yVo),e(rv,xVo),e(me,$Vo),e(me,tv),e(tv,que),e(que,kVo),e(tv,SVo),e(tv,cz),e(cz,RVo),e(tv,PVo),e(me,BVo),e(me,av),e(av,jue),e(jue,IVo),e(av,NVo),e(av,fz),e(fz,qVo),e(av,jVo),e(me,DVo),e(me,nv),e(nv,Due),e(Due,GVo),e(nv,OVo),e(nv,mz),e(mz,VVo),e(nv,XVo),e(me,zVo),e(me,sv),e(sv,Gue),e(Gue,WVo),e(sv,QVo),e(sv,gz),e(gz,UVo),e(sv,HVo),e(me,JVo),e(me,lv),e(lv,Oue),e(Oue,YVo),e(lv,KVo),e(lv,hz),e(hz,ZVo),e(lv,eXo),e(me,oXo),e(me,iv),e(iv,Vue),e(Vue,rXo),e(iv,tXo),e(iv,pz),e(pz,aXo),e(iv,nXo),e(me,sXo),e(me,dv),e(dv,Xue),e(Xue,lXo),e(dv,iXo),e(dv,_z),e(_z,dXo),e(dv,cXo),e(me,fXo),e(me,cv),e(cv,zue),e(zue,mXo),e(cv,gXo),e(cv,uz),e(uz,hXo),e(cv,pXo),e(me,_Xo),e(me,fv),e(fv,Wue),e(Wue,uXo),e(fv,bXo),e(fv,bz),e(bz,vXo),e(fv,FXo),e(me,TXo),e(me,mv),e(mv,Que),e(Que,MXo),e(mv,EXo),e(mv,vz),e(vz,CXo),e(mv,wXo),e(me,AXo),e(me,gv),e(gv,Uue),e(Uue,LXo),e(gv,yXo),e(gv,Fz),e(Fz,xXo),e(gv,$Xo),e(me,kXo),e(me,hv),e(hv,Hue),e(Hue,SXo),e(hv,RXo),e(hv,Tz),e(Tz,PXo),e(hv,BXo),e(me,IXo),e(me,pv),e(pv,Jue),e(Jue,NXo),e(pv,qXo),e(pv,Mz),e(Mz,jXo),e(pv,DXo),e(me,GXo),e(me,_v),e(_v,Yue),e(Yue,OXo),e(_v,VXo),e(_v,Ez),e(Ez,XXo),e(_v,zXo),e(me,WXo),e(me,uv),e(uv,Kue),e(Kue,QXo),e(uv,UXo),e(uv,Cz),e(Cz,HXo),e(uv,JXo),e(me,YXo),e(me,bv),e(bv,Zue),e(Zue,KXo),e(bv,ZXo),e(bv,wz),e(wz,ezo),e(bv,ozo),e(me,rzo),e(me,vv),e(vv,e2e),e(e2e,tzo),e(vv,azo),e(vv,Az),e(Az,nzo),e(vv,szo),e(oo,lzo),e(oo,Fv),e(Fv,izo),e(Fv,o2e),e(o2e,dzo),e(Fv,czo),e(Fv,r2e),e(r2e,fzo),e(oo,mzo),M(Tv,oo,null),b(f,QQe,u),b(f,ud,u),e(ud,Mv),e(Mv,t2e),M(s9,t2e,null),e(ud,gzo),e(ud,a2e),e(a2e,hzo),b(f,UQe,u),b(f,No,u),M(l9,No,null),e(No,pzo),e(No,bd),e(bd,_zo),e(bd,Lz),e(Lz,uzo),e(bd,bzo),e(bd,yz),e(yz,vzo),e(bd,Fzo),e(No,Tzo),e(No,i9),e(i9,Mzo),e(i9,n2e),e(n2e,Ezo),e(i9,Czo),e(No,wzo),e(No,ut),M(d9,ut,null),e(ut,Azo),e(ut,s2e),e(s2e,Lzo),e(ut,yzo),e(ut,vd),e(vd,xzo),e(vd,l2e),e(l2e,$zo),e(vd,kzo),e(vd,xz),e(xz,Szo),e(vd,Rzo),e(ut,Pzo),M(Ev,ut,null),e(No,Bzo),e(No,ro),M(c9,ro,null),e(ro,Izo),e(ro,i2e),e(i2e,Nzo),e(ro,qzo),e(ro,Ua),e(Ua,jzo),e(Ua,d2e),e(d2e,Dzo),e(Ua,Gzo),e(Ua,c2e),e(c2e,Ozo),e(Ua,Vzo),e(Ua,f2e),e(f2e,Xzo),e(Ua,zzo),e(ro,Wzo),e(ro,N),e(N,Cv),e(Cv,m2e),e(m2e,Qzo),e(Cv,Uzo),e(Cv,$z),e($z,Hzo),e(Cv,Jzo),e(N,Yzo),e(N,wv),e(wv,g2e),e(g2e,Kzo),e(wv,Zzo),e(wv,kz),e(kz,eWo),e(wv,oWo),e(N,rWo),e(N,Av),e(Av,h2e),e(h2e,tWo),e(Av,aWo),e(Av,Sz),e(Sz,nWo),e(Av,sWo),e(N,lWo),e(N,Lv),e(Lv,p2e),e(p2e,iWo),e(Lv,dWo),e(Lv,Rz),e(Rz,cWo),e(Lv,fWo),e(N,mWo),e(N,yv),e(yv,_2e),e(_2e,gWo),e(yv,hWo),e(yv,Pz),e(Pz,pWo),e(yv,_Wo),e(N,uWo),e(N,xv),e(xv,u2e),e(u2e,bWo),e(xv,vWo),e(xv,Bz),e(Bz,FWo),e(xv,TWo),e(N,MWo),e(N,$v),e($v,b2e),e(b2e,EWo),e($v,CWo),e($v,Iz),e(Iz,wWo),e($v,AWo),e(N,LWo),e(N,kv),e(kv,v2e),e(v2e,yWo),e(kv,xWo),e(kv,Nz),e(Nz,$Wo),e(kv,kWo),e(N,SWo),e(N,Sv),e(Sv,F2e),e(F2e,RWo),e(Sv,PWo),e(Sv,qz),e(qz,BWo),e(Sv,IWo),e(N,NWo),e(N,Rv),e(Rv,T2e),e(T2e,qWo),e(Rv,jWo),e(Rv,jz),e(jz,DWo),e(Rv,GWo),e(N,OWo),e(N,Pv),e(Pv,M2e),e(M2e,VWo),e(Pv,XWo),e(Pv,Dz),e(Dz,zWo),e(Pv,WWo),e(N,QWo),e(N,Bv),e(Bv,E2e),e(E2e,UWo),e(Bv,HWo),e(Bv,Gz),e(Gz,JWo),e(Bv,YWo),e(N,KWo),e(N,Iv),e(Iv,C2e),e(C2e,ZWo),e(Iv,eQo),e(Iv,Oz),e(Oz,oQo),e(Iv,rQo),e(N,tQo),e(N,Nv),e(Nv,w2e),e(w2e,aQo),e(Nv,nQo),e(Nv,Vz),e(Vz,sQo),e(Nv,lQo),e(N,iQo),e(N,qv),e(qv,A2e),e(A2e,dQo),e(qv,cQo),e(qv,Xz),e(Xz,fQo),e(qv,mQo),e(N,gQo),e(N,jv),e(jv,L2e),e(L2e,hQo),e(jv,pQo),e(jv,zz),e(zz,_Qo),e(jv,uQo),e(N,bQo),e(N,Dv),e(Dv,y2e),e(y2e,vQo),e(Dv,FQo),e(Dv,Wz),e(Wz,TQo),e(Dv,MQo),e(N,EQo),e(N,Gv),e(Gv,x2e),e(x2e,CQo),e(Gv,wQo),e(Gv,Qz),e(Qz,AQo),e(Gv,LQo),e(N,yQo),e(N,Ov),e(Ov,$2e),e($2e,xQo),e(Ov,$Qo),e(Ov,Uz),e(Uz,kQo),e(Ov,SQo),e(N,RQo),e(N,Vv),e(Vv,k2e),e(k2e,PQo),e(Vv,BQo),e(Vv,Hz),e(Hz,IQo),e(Vv,NQo),e(N,qQo),e(N,Xv),e(Xv,S2e),e(S2e,jQo),e(Xv,DQo),e(Xv,Jz),e(Jz,GQo),e(Xv,OQo),e(N,VQo),e(N,zv),e(zv,R2e),e(R2e,XQo),e(zv,zQo),e(zv,Yz),e(Yz,WQo),e(zv,QQo),e(N,UQo),e(N,Wv),e(Wv,P2e),e(P2e,HQo),e(Wv,JQo),e(Wv,Kz),e(Kz,YQo),e(Wv,KQo),e(N,ZQo),e(N,Qv),e(Qv,B2e),e(B2e,eUo),e(Qv,oUo),e(Qv,Zz),e(Zz,rUo),e(Qv,tUo),e(N,aUo),e(N,Uv),e(Uv,I2e),e(I2e,nUo),e(Uv,sUo),e(Uv,eW),e(eW,lUo),e(Uv,iUo),e(N,dUo),e(N,Hv),e(Hv,N2e),e(N2e,cUo),e(Hv,fUo),e(Hv,oW),e(oW,mUo),e(Hv,gUo),e(N,hUo),e(N,Jv),e(Jv,q2e),e(q2e,pUo),e(Jv,_Uo),e(Jv,rW),e(rW,uUo),e(Jv,bUo),e(N,vUo),e(N,Yv),e(Yv,j2e),e(j2e,FUo),e(Yv,TUo),e(Yv,tW),e(tW,MUo),e(Yv,EUo),e(N,CUo),e(N,Kv),e(Kv,D2e),e(D2e,wUo),e(Kv,AUo),e(Kv,aW),e(aW,LUo),e(Kv,yUo),e(N,xUo),e(N,Zv),e(Zv,G2e),e(G2e,$Uo),e(Zv,kUo),e(Zv,nW),e(nW,SUo),e(Zv,RUo),e(N,PUo),e(N,e0),e(e0,O2e),e(O2e,BUo),e(e0,IUo),e(e0,sW),e(sW,NUo),e(e0,qUo),e(N,jUo),e(N,o0),e(o0,V2e),e(V2e,DUo),e(o0,GUo),e(o0,lW),e(lW,OUo),e(o0,VUo),e(N,XUo),e(N,r0),e(r0,X2e),e(X2e,zUo),e(r0,WUo),e(r0,iW),e(iW,QUo),e(r0,UUo),e(N,HUo),e(N,t0),e(t0,z2e),e(z2e,JUo),e(t0,YUo),e(t0,dW),e(dW,KUo),e(t0,ZUo),e(N,eHo),e(N,a0),e(a0,W2e),e(W2e,oHo),e(a0,rHo),e(a0,cW),e(cW,tHo),e(a0,aHo),e(N,nHo),e(N,n0),e(n0,Q2e),e(Q2e,sHo),e(n0,lHo),e(n0,fW),e(fW,iHo),e(n0,dHo),e(N,cHo),e(N,s0),e(s0,U2e),e(U2e,fHo),e(s0,mHo),e(s0,mW),e(mW,gHo),e(s0,hHo),e(N,pHo),e(N,l0),e(l0,H2e),e(H2e,_Ho),e(l0,uHo),e(l0,gW),e(gW,bHo),e(l0,vHo),e(N,FHo),e(N,i0),e(i0,J2e),e(J2e,THo),e(i0,MHo),e(i0,hW),e(hW,EHo),e(i0,CHo),e(N,wHo),e(N,d0),e(d0,Y2e),e(Y2e,AHo),e(d0,LHo),e(d0,pW),e(pW,yHo),e(d0,xHo),e(N,$Ho),e(N,c0),e(c0,K2e),e(K2e,kHo),e(c0,SHo),e(c0,_W),e(_W,RHo),e(c0,PHo),e(N,BHo),e(N,f0),e(f0,Z2e),e(Z2e,IHo),e(f0,NHo),e(f0,uW),e(uW,qHo),e(f0,jHo),e(N,DHo),e(N,m0),e(m0,e1e),e(e1e,GHo),e(m0,OHo),e(m0,bW),e(bW,VHo),e(m0,XHo),e(N,zHo),e(N,g0),e(g0,o1e),e(o1e,WHo),e(g0,QHo),e(g0,vW),e(vW,UHo),e(g0,HHo),e(N,JHo),e(N,h0),e(h0,r1e),e(r1e,YHo),e(h0,KHo),e(h0,FW),e(FW,ZHo),e(h0,eJo),e(N,oJo),e(N,p0),e(p0,t1e),e(t1e,rJo),e(p0,tJo),e(p0,TW),e(TW,aJo),e(p0,nJo),e(N,sJo),e(N,_0),e(_0,a1e),e(a1e,lJo),e(_0,iJo),e(_0,MW),e(MW,dJo),e(_0,cJo),e(N,fJo),e(N,u0),e(u0,n1e),e(n1e,mJo),e(u0,gJo),e(u0,EW),e(EW,hJo),e(u0,pJo),e(N,_Jo),e(N,b0),e(b0,s1e),e(s1e,uJo),e(b0,bJo),e(b0,CW),e(CW,vJo),e(b0,FJo),e(N,TJo),e(N,v0),e(v0,l1e),e(l1e,MJo),e(v0,EJo),e(v0,wW),e(wW,CJo),e(v0,wJo),e(N,AJo),e(N,F0),e(F0,i1e),e(i1e,LJo),e(F0,yJo),e(F0,AW),e(AW,xJo),e(F0,$Jo),e(N,kJo),e(N,T0),e(T0,d1e),e(d1e,SJo),e(T0,RJo),e(T0,LW),e(LW,PJo),e(T0,BJo),e(ro,IJo),e(ro,M0),e(M0,NJo),e(M0,c1e),e(c1e,qJo),e(M0,jJo),e(M0,f1e),e(f1e,DJo),e(ro,GJo),M(E0,ro,null),b(f,HQe,u),b(f,Fd,u),e(Fd,C0),e(C0,m1e),M(f9,m1e,null),e(Fd,OJo),e(Fd,g1e),e(g1e,VJo),b(f,JQe,u),b(f,qo,u),M(m9,qo,null),e(qo,XJo),e(qo,Td),e(Td,zJo),e(Td,yW),e(yW,WJo),e(Td,QJo),e(Td,xW),e(xW,UJo),e(Td,HJo),e(qo,JJo),e(qo,g9),e(g9,YJo),e(g9,h1e),e(h1e,KJo),e(g9,ZJo),e(qo,eYo),e(qo,bt),M(h9,bt,null),e(bt,oYo),e(bt,p1e),e(p1e,rYo),e(bt,tYo),e(bt,Md),e(Md,aYo),e(Md,_1e),e(_1e,nYo),e(Md,sYo),e(Md,$W),e($W,lYo),e(Md,iYo),e(bt,dYo),M(w0,bt,null),e(qo,cYo),e(qo,to),M(p9,to,null),e(to,fYo),e(to,u1e),e(u1e,mYo),e(to,gYo),e(to,Ha),e(Ha,hYo),e(Ha,b1e),e(b1e,pYo),e(Ha,_Yo),e(Ha,v1e),e(v1e,uYo),e(Ha,bYo),e(Ha,F1e),e(F1e,vYo),e(Ha,FYo),e(to,TYo),e(to,Z),e(Z,A0),e(A0,T1e),e(T1e,MYo),e(A0,EYo),e(A0,kW),e(kW,CYo),e(A0,wYo),e(Z,AYo),e(Z,L0),e(L0,M1e),e(M1e,LYo),e(L0,yYo),e(L0,SW),e(SW,xYo),e(L0,$Yo),e(Z,kYo),e(Z,y0),e(y0,E1e),e(E1e,SYo),e(y0,RYo),e(y0,RW),e(RW,PYo),e(y0,BYo),e(Z,IYo),e(Z,x0),e(x0,C1e),e(C1e,NYo),e(x0,qYo),e(x0,PW),e(PW,jYo),e(x0,DYo),e(Z,GYo),e(Z,$0),e($0,w1e),e(w1e,OYo),e($0,VYo),e($0,BW),e(BW,XYo),e($0,zYo),e(Z,WYo),e(Z,k0),e(k0,A1e),e(A1e,QYo),e(k0,UYo),e(k0,IW),e(IW,HYo),e(k0,JYo),e(Z,YYo),e(Z,S0),e(S0,L1e),e(L1e,KYo),e(S0,ZYo),e(S0,NW),e(NW,eKo),e(S0,oKo),e(Z,rKo),e(Z,R0),e(R0,y1e),e(y1e,tKo),e(R0,aKo),e(R0,qW),e(qW,nKo),e(R0,sKo),e(Z,lKo),e(Z,P0),e(P0,x1e),e(x1e,iKo),e(P0,dKo),e(P0,jW),e(jW,cKo),e(P0,fKo),e(Z,mKo),e(Z,B0),e(B0,$1e),e($1e,gKo),e(B0,hKo),e(B0,DW),e(DW,pKo),e(B0,_Ko),e(Z,uKo),e(Z,I0),e(I0,k1e),e(k1e,bKo),e(I0,vKo),e(I0,GW),e(GW,FKo),e(I0,TKo),e(Z,MKo),e(Z,N0),e(N0,S1e),e(S1e,EKo),e(N0,CKo),e(N0,OW),e(OW,wKo),e(N0,AKo),e(Z,LKo),e(Z,q0),e(q0,R1e),e(R1e,yKo),e(q0,xKo),e(q0,VW),e(VW,$Ko),e(q0,kKo),e(Z,SKo),e(Z,j0),e(j0,P1e),e(P1e,RKo),e(j0,PKo),e(j0,XW),e(XW,BKo),e(j0,IKo),e(Z,NKo),e(Z,D0),e(D0,B1e),e(B1e,qKo),e(D0,jKo),e(D0,zW),e(zW,DKo),e(D0,GKo),e(Z,OKo),e(Z,G0),e(G0,I1e),e(I1e,VKo),e(G0,XKo),e(G0,WW),e(WW,zKo),e(G0,WKo),e(Z,QKo),e(Z,O0),e(O0,N1e),e(N1e,UKo),e(O0,HKo),e(O0,QW),e(QW,JKo),e(O0,YKo),e(Z,KKo),e(Z,V0),e(V0,q1e),e(q1e,ZKo),e(V0,eZo),e(V0,UW),e(UW,oZo),e(V0,rZo),e(Z,tZo),e(Z,X0),e(X0,j1e),e(j1e,aZo),e(X0,nZo),e(X0,HW),e(HW,sZo),e(X0,lZo),e(Z,iZo),e(Z,z0),e(z0,D1e),e(D1e,dZo),e(z0,cZo),e(z0,JW),e(JW,fZo),e(z0,mZo),e(Z,gZo),e(Z,W0),e(W0,G1e),e(G1e,hZo),e(W0,pZo),e(W0,YW),e(YW,_Zo),e(W0,uZo),e(Z,bZo),e(Z,Q0),e(Q0,O1e),e(O1e,vZo),e(Q0,FZo),e(Q0,KW),e(KW,TZo),e(Q0,MZo),e(Z,EZo),e(Z,U0),e(U0,V1e),e(V1e,CZo),e(U0,wZo),e(U0,ZW),e(ZW,AZo),e(U0,LZo),e(Z,yZo),e(Z,H0),e(H0,X1e),e(X1e,xZo),e(H0,$Zo),e(H0,eQ),e(eQ,kZo),e(H0,SZo),e(Z,RZo),e(Z,J0),e(J0,z1e),e(z1e,PZo),e(J0,BZo),e(J0,oQ),e(oQ,IZo),e(J0,NZo),e(Z,qZo),e(Z,Y0),e(Y0,W1e),e(W1e,jZo),e(Y0,DZo),e(Y0,rQ),e(rQ,GZo),e(Y0,OZo),e(Z,VZo),e(Z,K0),e(K0,Q1e),e(Q1e,XZo),e(K0,zZo),e(K0,tQ),e(tQ,WZo),e(K0,QZo),e(Z,UZo),e(Z,Z0),e(Z0,U1e),e(U1e,HZo),e(Z0,JZo),e(Z0,aQ),e(aQ,YZo),e(Z0,KZo),e(Z,ZZo),e(Z,e6),e(e6,H1e),e(H1e,eer),e(e6,oer),e(e6,nQ),e(nQ,rer),e(e6,ter),e(Z,aer),e(Z,o6),e(o6,J1e),e(J1e,ner),e(o6,ser),e(o6,sQ),e(sQ,ler),e(o6,ier),e(Z,der),e(Z,r6),e(r6,Y1e),e(Y1e,cer),e(r6,fer),e(r6,lQ),e(lQ,mer),e(r6,ger),e(to,her),e(to,t6),e(t6,per),e(t6,K1e),e(K1e,_er),e(t6,uer),e(t6,Z1e),e(Z1e,ber),e(to,ver),M(a6,to,null),b(f,YQe,u),b(f,Ed,u),e(Ed,n6),e(n6,ebe),M(_9,ebe,null),e(Ed,Fer),e(Ed,obe),e(obe,Ter),b(f,KQe,u),b(f,jo,u),M(u9,jo,null),e(jo,Mer),e(jo,Cd),e(Cd,Eer),e(Cd,iQ),e(iQ,Cer),e(Cd,wer),e(Cd,dQ),e(dQ,Aer),e(Cd,Ler),e(jo,yer),e(jo,b9),e(b9,xer),e(b9,rbe),e(rbe,$er),e(b9,ker),e(jo,Ser),e(jo,vt),M(v9,vt,null),e(vt,Rer),e(vt,tbe),e(tbe,Per),e(vt,Ber),e(vt,wd),e(wd,Ier),e(wd,abe),e(abe,Ner),e(wd,qer),e(wd,cQ),e(cQ,jer),e(wd,Der),e(vt,Ger),M(s6,vt,null),e(jo,Oer),e(jo,ao),M(F9,ao,null),e(ao,Ver),e(ao,nbe),e(nbe,Xer),e(ao,zer),e(ao,Ja),e(Ja,Wer),e(Ja,sbe),e(sbe,Qer),e(Ja,Uer),e(Ja,lbe),e(lbe,Her),e(Ja,Jer),e(Ja,ibe),e(ibe,Yer),e(Ja,Ker),e(ao,Zer),e(ao,Do),e(Do,l6),e(l6,dbe),e(dbe,eor),e(l6,oor),e(l6,fQ),e(fQ,ror),e(l6,tor),e(Do,aor),e(Do,i6),e(i6,cbe),e(cbe,nor),e(i6,sor),e(i6,mQ),e(mQ,lor),e(i6,ior),e(Do,dor),e(Do,d6),e(d6,fbe),e(fbe,cor),e(d6,mor),e(d6,gQ),e(gQ,gor),e(d6,hor),e(Do,por),e(Do,c6),e(c6,mbe),e(mbe,_or),e(c6,uor),e(c6,hQ),e(hQ,bor),e(c6,vor),e(Do,For),e(Do,f6),e(f6,gbe),e(gbe,Tor),e(f6,Mor),e(f6,pQ),e(pQ,Eor),e(f6,Cor),e(Do,wor),e(Do,m6),e(m6,hbe),e(hbe,Aor),e(m6,Lor),e(m6,_Q),e(_Q,yor),e(m6,xor),e(ao,$or),e(ao,g6),e(g6,kor),e(g6,pbe),e(pbe,Sor),e(g6,Ror),e(g6,_be),e(_be,Por),e(ao,Bor),M(h6,ao,null),b(f,ZQe,u),b(f,Ad,u),e(Ad,p6),e(p6,ube),M(T9,ube,null),e(Ad,Ior),e(Ad,bbe),e(bbe,Nor),b(f,eUe,u),b(f,Go,u),M(M9,Go,null),e(Go,qor),e(Go,Ld),e(Ld,jor),e(Ld,uQ),e(uQ,Dor),e(Ld,Gor),e(Ld,bQ),e(bQ,Oor),e(Ld,Vor),e(Go,Xor),e(Go,E9),e(E9,zor),e(E9,vbe),e(vbe,Wor),e(E9,Qor),e(Go,Uor),e(Go,Ft),M(C9,Ft,null),e(Ft,Hor),e(Ft,Fbe),e(Fbe,Jor),e(Ft,Yor),e(Ft,yd),e(yd,Kor),e(yd,Tbe),e(Tbe,Zor),e(yd,err),e(yd,vQ),e(vQ,orr),e(yd,rrr),e(Ft,trr),M(_6,Ft,null),e(Go,arr),e(Go,no),M(w9,no,null),e(no,nrr),e(no,Mbe),e(Mbe,srr),e(no,lrr),e(no,Ya),e(Ya,irr),e(Ya,Ebe),e(Ebe,drr),e(Ya,crr),e(Ya,Cbe),e(Cbe,frr),e(Ya,mrr),e(Ya,wbe),e(wbe,grr),e(Ya,hrr),e(no,prr),e(no,H),e(H,u6),e(u6,Abe),e(Abe,_rr),e(u6,urr),e(u6,FQ),e(FQ,brr),e(u6,vrr),e(H,Frr),e(H,b6),e(b6,Lbe),e(Lbe,Trr),e(b6,Mrr),e(b6,TQ),e(TQ,Err),e(b6,Crr),e(H,wrr),e(H,v6),e(v6,ybe),e(ybe,Arr),e(v6,Lrr),e(v6,MQ),e(MQ,yrr),e(v6,xrr),e(H,$rr),e(H,F6),e(F6,xbe),e(xbe,krr),e(F6,Srr),e(F6,EQ),e(EQ,Rrr),e(F6,Prr),e(H,Brr),e(H,T6),e(T6,$be),e($be,Irr),e(T6,Nrr),e(T6,CQ),e(CQ,qrr),e(T6,jrr),e(H,Drr),e(H,M6),e(M6,kbe),e(kbe,Grr),e(M6,Orr),e(M6,wQ),e(wQ,Vrr),e(M6,Xrr),e(H,zrr),e(H,E6),e(E6,Sbe),e(Sbe,Wrr),e(E6,Qrr),e(E6,AQ),e(AQ,Urr),e(E6,Hrr),e(H,Jrr),e(H,C6),e(C6,Rbe),e(Rbe,Yrr),e(C6,Krr),e(C6,LQ),e(LQ,Zrr),e(C6,etr),e(H,otr),e(H,w6),e(w6,Pbe),e(Pbe,rtr),e(w6,ttr),e(w6,yQ),e(yQ,atr),e(w6,ntr),e(H,str),e(H,A6),e(A6,Bbe),e(Bbe,ltr),e(A6,itr),e(A6,xQ),e(xQ,dtr),e(A6,ctr),e(H,ftr),e(H,L6),e(L6,Ibe),e(Ibe,mtr),e(L6,gtr),e(L6,$Q),e($Q,htr),e(L6,ptr),e(H,_tr),e(H,y6),e(y6,Nbe),e(Nbe,utr),e(y6,btr),e(y6,kQ),e(kQ,vtr),e(y6,Ftr),e(H,Ttr),e(H,x6),e(x6,qbe),e(qbe,Mtr),e(x6,Etr),e(x6,SQ),e(SQ,Ctr),e(x6,wtr),e(H,Atr),e(H,$6),e($6,jbe),e(jbe,Ltr),e($6,ytr),e($6,RQ),e(RQ,xtr),e($6,$tr),e(H,ktr),e(H,k6),e(k6,Dbe),e(Dbe,Str),e(k6,Rtr),e(k6,PQ),e(PQ,Ptr),e(k6,Btr),e(H,Itr),e(H,S6),e(S6,Gbe),e(Gbe,Ntr),e(S6,qtr),e(S6,BQ),e(BQ,jtr),e(S6,Dtr),e(H,Gtr),e(H,R6),e(R6,Obe),e(Obe,Otr),e(R6,Vtr),e(R6,IQ),e(IQ,Xtr),e(R6,ztr),e(H,Wtr),e(H,P6),e(P6,Vbe),e(Vbe,Qtr),e(P6,Utr),e(P6,NQ),e(NQ,Htr),e(P6,Jtr),e(H,Ytr),e(H,B6),e(B6,Xbe),e(Xbe,Ktr),e(B6,Ztr),e(B6,qQ),e(qQ,ear),e(B6,oar),e(H,rar),e(H,I6),e(I6,zbe),e(zbe,tar),e(I6,aar),e(I6,jQ),e(jQ,nar),e(I6,sar),e(H,lar),e(H,N6),e(N6,Wbe),e(Wbe,iar),e(N6,dar),e(N6,DQ),e(DQ,car),e(N6,far),e(H,mar),e(H,q6),e(q6,Qbe),e(Qbe,gar),e(q6,har),e(q6,GQ),e(GQ,par),e(q6,_ar),e(H,uar),e(H,j6),e(j6,Ube),e(Ube,bar),e(j6,Far),e(j6,OQ),e(OQ,Tar),e(j6,Mar),e(H,Ear),e(H,D6),e(D6,Hbe),e(Hbe,Car),e(D6,war),e(D6,VQ),e(VQ,Aar),e(D6,Lar),e(H,yar),e(H,G6),e(G6,Jbe),e(Jbe,xar),e(G6,$ar),e(G6,XQ),e(XQ,kar),e(G6,Sar),e(H,Rar),e(H,O6),e(O6,Ybe),e(Ybe,Par),e(O6,Bar),e(O6,zQ),e(zQ,Iar),e(O6,Nar),e(H,qar),e(H,V6),e(V6,Kbe),e(Kbe,jar),e(V6,Dar),e(V6,WQ),e(WQ,Gar),e(V6,Oar),e(H,Var),e(H,X6),e(X6,Zbe),e(Zbe,Xar),e(X6,zar),e(X6,QQ),e(QQ,War),e(X6,Qar),e(H,Uar),e(H,z6),e(z6,eve),e(eve,Har),e(z6,Jar),e(z6,UQ),e(UQ,Yar),e(z6,Kar),e(H,Zar),e(H,W6),e(W6,ove),e(ove,enr),e(W6,onr),e(W6,HQ),e(HQ,rnr),e(W6,tnr),e(H,anr),e(H,Q6),e(Q6,rve),e(rve,nnr),e(Q6,snr),e(Q6,JQ),e(JQ,lnr),e(Q6,inr),e(H,dnr),e(H,U6),e(U6,tve),e(tve,cnr),e(U6,fnr),e(U6,YQ),e(YQ,mnr),e(U6,gnr),e(H,hnr),e(H,H6),e(H6,ave),e(ave,pnr),e(H6,_nr),e(H6,KQ),e(KQ,unr),e(H6,bnr),e(H,vnr),e(H,J6),e(J6,nve),e(nve,Fnr),e(J6,Tnr),e(J6,ZQ),e(ZQ,Mnr),e(J6,Enr),e(H,Cnr),e(H,Y6),e(Y6,sve),e(sve,wnr),e(Y6,Anr),e(Y6,eU),e(eU,Lnr),e(Y6,ynr),e(H,xnr),e(H,K6),e(K6,lve),e(lve,$nr),e(K6,knr),e(K6,oU),e(oU,Snr),e(K6,Rnr),e(H,Pnr),e(H,Z6),e(Z6,ive),e(ive,Bnr),e(Z6,Inr),e(Z6,rU),e(rU,Nnr),e(Z6,qnr),e(no,jnr),e(no,eF),e(eF,Dnr),e(eF,dve),e(dve,Gnr),e(eF,Onr),e(eF,cve),e(cve,Vnr),e(no,Xnr),M(oF,no,null),b(f,oUe,u),b(f,xd,u),e(xd,rF),e(rF,fve),M(A9,fve,null),e(xd,znr),e(xd,mve),e(mve,Wnr),b(f,rUe,u),b(f,Oo,u),M(L9,Oo,null),e(Oo,Qnr),e(Oo,$d),e($d,Unr),e($d,tU),e(tU,Hnr),e($d,Jnr),e($d,aU),e(aU,Ynr),e($d,Knr),e(Oo,Znr),e(Oo,y9),e(y9,esr),e(y9,gve),e(gve,osr),e(y9,rsr),e(Oo,tsr),e(Oo,Tt),M(x9,Tt,null),e(Tt,asr),e(Tt,hve),e(hve,nsr),e(Tt,ssr),e(Tt,kd),e(kd,lsr),e(kd,pve),e(pve,isr),e(kd,dsr),e(kd,nU),e(nU,csr),e(kd,fsr),e(Tt,msr),M(tF,Tt,null),e(Oo,gsr),e(Oo,so),M($9,so,null),e(so,hsr),e(so,_ve),e(_ve,psr),e(so,_sr),e(so,Ka),e(Ka,usr),e(Ka,uve),e(uve,bsr),e(Ka,vsr),e(Ka,bve),e(bve,Fsr),e(Ka,Tsr),e(Ka,vve),e(vve,Msr),e(Ka,Esr),e(so,Csr),e(so,V),e(V,aF),e(aF,Fve),e(Fve,wsr),e(aF,Asr),e(aF,sU),e(sU,Lsr),e(aF,ysr),e(V,xsr),e(V,nF),e(nF,Tve),e(Tve,$sr),e(nF,ksr),e(nF,lU),e(lU,Ssr),e(nF,Rsr),e(V,Psr),e(V,sF),e(sF,Mve),e(Mve,Bsr),e(sF,Isr),e(sF,iU),e(iU,Nsr),e(sF,qsr),e(V,jsr),e(V,lF),e(lF,Eve),e(Eve,Dsr),e(lF,Gsr),e(lF,dU),e(dU,Osr),e(lF,Vsr),e(V,Xsr),e(V,iF),e(iF,Cve),e(Cve,zsr),e(iF,Wsr),e(iF,cU),e(cU,Qsr),e(iF,Usr),e(V,Hsr),e(V,dF),e(dF,wve),e(wve,Jsr),e(dF,Ysr),e(dF,fU),e(fU,Ksr),e(dF,Zsr),e(V,elr),e(V,cF),e(cF,Ave),e(Ave,olr),e(cF,rlr),e(cF,mU),e(mU,tlr),e(cF,alr),e(V,nlr),e(V,fF),e(fF,Lve),e(Lve,slr),e(fF,llr),e(fF,gU),e(gU,ilr),e(fF,dlr),e(V,clr),e(V,mF),e(mF,yve),e(yve,flr),e(mF,mlr),e(mF,hU),e(hU,glr),e(mF,hlr),e(V,plr),e(V,gF),e(gF,xve),e(xve,_lr),e(gF,ulr),e(gF,pU),e(pU,blr),e(gF,vlr),e(V,Flr),e(V,hF),e(hF,$ve),e($ve,Tlr),e(hF,Mlr),e(hF,_U),e(_U,Elr),e(hF,Clr),e(V,wlr),e(V,pF),e(pF,kve),e(kve,Alr),e(pF,Llr),e(pF,uU),e(uU,ylr),e(pF,xlr),e(V,$lr),e(V,_F),e(_F,Sve),e(Sve,klr),e(_F,Slr),e(_F,bU),e(bU,Rlr),e(_F,Plr),e(V,Blr),e(V,uF),e(uF,Rve),e(Rve,Ilr),e(uF,Nlr),e(uF,vU),e(vU,qlr),e(uF,jlr),e(V,Dlr),e(V,bF),e(bF,Pve),e(Pve,Glr),e(bF,Olr),e(bF,FU),e(FU,Vlr),e(bF,Xlr),e(V,zlr),e(V,vF),e(vF,Bve),e(Bve,Wlr),e(vF,Qlr),e(vF,TU),e(TU,Ulr),e(vF,Hlr),e(V,Jlr),e(V,FF),e(FF,Ive),e(Ive,Ylr),e(FF,Klr),e(FF,MU),e(MU,Zlr),e(FF,eir),e(V,oir),e(V,TF),e(TF,Nve),e(Nve,rir),e(TF,tir),e(TF,EU),e(EU,air),e(TF,nir),e(V,sir),e(V,MF),e(MF,qve),e(qve,lir),e(MF,iir),e(MF,CU),e(CU,dir),e(MF,cir),e(V,fir),e(V,EF),e(EF,jve),e(jve,mir),e(EF,gir),e(EF,wU),e(wU,hir),e(EF,pir),e(V,_ir),e(V,CF),e(CF,Dve),e(Dve,uir),e(CF,bir),e(CF,AU),e(AU,vir),e(CF,Fir),e(V,Tir),e(V,wF),e(wF,Gve),e(Gve,Mir),e(wF,Eir),e(wF,LU),e(LU,Cir),e(wF,wir),e(V,Air),e(V,AF),e(AF,Ove),e(Ove,Lir),e(AF,yir),e(AF,yU),e(yU,xir),e(AF,$ir),e(V,kir),e(V,LF),e(LF,Vve),e(Vve,Sir),e(LF,Rir),e(LF,xU),e(xU,Pir),e(LF,Bir),e(V,Iir),e(V,yF),e(yF,Xve),e(Xve,Nir),e(yF,qir),e(yF,$U),e($U,jir),e(yF,Dir),e(V,Gir),e(V,xF),e(xF,zve),e(zve,Oir),e(xF,Vir),e(xF,kU),e(kU,Xir),e(xF,zir),e(V,Wir),e(V,$F),e($F,Wve),e(Wve,Qir),e($F,Uir),e($F,SU),e(SU,Hir),e($F,Jir),e(V,Yir),e(V,kF),e(kF,Qve),e(Qve,Kir),e(kF,Zir),e(kF,RU),e(RU,edr),e(kF,odr),e(V,rdr),e(V,SF),e(SF,Uve),e(Uve,tdr),e(SF,adr),e(SF,PU),e(PU,ndr),e(SF,sdr),e(V,ldr),e(V,RF),e(RF,Hve),e(Hve,idr),e(RF,ddr),e(RF,BU),e(BU,cdr),e(RF,fdr),e(V,mdr),e(V,PF),e(PF,Jve),e(Jve,gdr),e(PF,hdr),e(PF,IU),e(IU,pdr),e(PF,_dr),e(V,udr),e(V,BF),e(BF,Yve),e(Yve,bdr),e(BF,vdr),e(BF,NU),e(NU,Fdr),e(BF,Tdr),e(V,Mdr),e(V,IF),e(IF,Kve),e(Kve,Edr),e(IF,Cdr),e(IF,qU),e(qU,wdr),e(IF,Adr),e(V,Ldr),e(V,NF),e(NF,Zve),e(Zve,ydr),e(NF,xdr),e(NF,jU),e(jU,$dr),e(NF,kdr),e(V,Sdr),e(V,qF),e(qF,e0e),e(e0e,Rdr),e(qF,Pdr),e(qF,DU),e(DU,Bdr),e(qF,Idr),e(V,Ndr),e(V,jF),e(jF,o0e),e(o0e,qdr),e(jF,jdr),e(jF,GU),e(GU,Ddr),e(jF,Gdr),e(V,Odr),e(V,DF),e(DF,r0e),e(r0e,Vdr),e(DF,Xdr),e(DF,OU),e(OU,zdr),e(DF,Wdr),e(V,Qdr),e(V,GF),e(GF,t0e),e(t0e,Udr),e(GF,Hdr),e(GF,VU),e(VU,Jdr),e(GF,Ydr),e(V,Kdr),e(V,OF),e(OF,a0e),e(a0e,Zdr),e(OF,ecr),e(OF,XU),e(XU,ocr),e(OF,rcr),e(V,tcr),e(V,VF),e(VF,n0e),e(n0e,acr),e(VF,ncr),e(VF,zU),e(zU,scr),e(VF,lcr),e(V,icr),e(V,XF),e(XF,s0e),e(s0e,dcr),e(XF,ccr),e(XF,WU),e(WU,fcr),e(XF,mcr),e(V,gcr),e(V,zF),e(zF,l0e),e(l0e,hcr),e(zF,pcr),e(zF,QU),e(QU,_cr),e(zF,ucr),e(V,bcr),e(V,WF),e(WF,i0e),e(i0e,vcr),e(WF,Fcr),e(WF,UU),e(UU,Tcr),e(WF,Mcr),e(so,Ecr),e(so,QF),e(QF,Ccr),e(QF,d0e),e(d0e,wcr),e(QF,Acr),e(QF,c0e),e(c0e,Lcr),e(so,ycr),M(UF,so,null),b(f,tUe,u),b(f,Sd,u),e(Sd,HF),e(HF,f0e),M(k9,f0e,null),e(Sd,xcr),e(Sd,m0e),e(m0e,$cr),b(f,aUe,u),b(f,Vo,u),M(S9,Vo,null),e(Vo,kcr),e(Vo,Rd),e(Rd,Scr),e(Rd,HU),e(HU,Rcr),e(Rd,Pcr),e(Rd,JU),e(JU,Bcr),e(Rd,Icr),e(Vo,Ncr),e(Vo,R9),e(R9,qcr),e(R9,g0e),e(g0e,jcr),e(R9,Dcr),e(Vo,Gcr),e(Vo,Mt),M(P9,Mt,null),e(Mt,Ocr),e(Mt,h0e),e(h0e,Vcr),e(Mt,Xcr),e(Mt,Pd),e(Pd,zcr),e(Pd,p0e),e(p0e,Wcr),e(Pd,Qcr),e(Pd,YU),e(YU,Ucr),e(Pd,Hcr),e(Mt,Jcr),M(JF,Mt,null),e(Vo,Ycr),e(Vo,lo),M(B9,lo,null),e(lo,Kcr),e(lo,_0e),e(_0e,Zcr),e(lo,efr),e(lo,Za),e(Za,ofr),e(Za,u0e),e(u0e,rfr),e(Za,tfr),e(Za,b0e),e(b0e,afr),e(Za,nfr),e(Za,v0e),e(v0e,sfr),e(Za,lfr),e(lo,ifr),e(lo,F0e),e(F0e,YF),e(YF,T0e),e(T0e,dfr),e(YF,cfr),e(YF,KU),e(KU,ffr),e(YF,mfr),e(lo,gfr),e(lo,KF),e(KF,hfr),e(KF,M0e),e(M0e,pfr),e(KF,_fr),e(KF,E0e),e(E0e,ufr),e(lo,bfr),M(ZF,lo,null),b(f,nUe,u),b(f,Bd,u),e(Bd,eT),e(eT,C0e),M(I9,C0e,null),e(Bd,vfr),e(Bd,w0e),e(w0e,Ffr),b(f,sUe,u),b(f,Xo,u),M(N9,Xo,null),e(Xo,Tfr),e(Xo,Id),e(Id,Mfr),e(Id,ZU),e(ZU,Efr),e(Id,Cfr),e(Id,eH),e(eH,wfr),e(Id,Afr),e(Xo,Lfr),e(Xo,q9),e(q9,yfr),e(q9,A0e),e(A0e,xfr),e(q9,$fr),e(Xo,kfr),e(Xo,Et),M(j9,Et,null),e(Et,Sfr),e(Et,L0e),e(L0e,Rfr),e(Et,Pfr),e(Et,Nd),e(Nd,Bfr),e(Nd,y0e),e(y0e,Ifr),e(Nd,Nfr),e(Nd,oH),e(oH,qfr),e(Nd,jfr),e(Et,Dfr),M(oT,Et,null),e(Xo,Gfr),e(Xo,io),M(D9,io,null),e(io,Ofr),e(io,x0e),e(x0e,Vfr),e(io,Xfr),e(io,en),e(en,zfr),e(en,$0e),e($0e,Wfr),e(en,Qfr),e(en,k0e),e(k0e,Ufr),e(en,Hfr),e(en,S0e),e(S0e,Jfr),e(en,Yfr),e(io,Kfr),e(io,be),e(be,rT),e(rT,R0e),e(R0e,Zfr),e(rT,emr),e(rT,rH),e(rH,omr),e(rT,rmr),e(be,tmr),e(be,tT),e(tT,P0e),e(P0e,amr),e(tT,nmr),e(tT,tH),e(tH,smr),e(tT,lmr),e(be,imr),e(be,aT),e(aT,B0e),e(B0e,dmr),e(aT,cmr),e(aT,aH),e(aH,fmr),e(aT,mmr),e(be,gmr),e(be,nT),e(nT,I0e),e(I0e,hmr),e(nT,pmr),e(nT,nH),e(nH,_mr),e(nT,umr),e(be,bmr),e(be,sl),e(sl,N0e),e(N0e,vmr),e(sl,Fmr),e(sl,sH),e(sH,Tmr),e(sl,Mmr),e(sl,lH),e(lH,Emr),e(sl,Cmr),e(be,wmr),e(be,sT),e(sT,q0e),e(q0e,Amr),e(sT,Lmr),e(sT,iH),e(iH,ymr),e(sT,xmr),e(be,$mr),e(be,ll),e(ll,j0e),e(j0e,kmr),e(ll,Smr),e(ll,dH),e(dH,Rmr),e(ll,Pmr),e(ll,cH),e(cH,Bmr),e(ll,Imr),e(be,Nmr),e(be,lT),e(lT,D0e),e(D0e,qmr),e(lT,jmr),e(lT,fH),e(fH,Dmr),e(lT,Gmr),e(be,Omr),e(be,Ct),e(Ct,G0e),e(G0e,Vmr),e(Ct,Xmr),e(Ct,mH),e(mH,zmr),e(Ct,Wmr),e(Ct,gH),e(gH,Qmr),e(Ct,Umr),e(Ct,hH),e(hH,Hmr),e(Ct,Jmr),e(be,Ymr),e(be,iT),e(iT,O0e),e(O0e,Kmr),e(iT,Zmr),e(iT,pH),e(pH,egr),e(iT,ogr),e(be,rgr),e(be,dT),e(dT,V0e),e(V0e,tgr),e(dT,agr),e(dT,_H),e(_H,ngr),e(dT,sgr),e(be,lgr),e(be,cT),e(cT,X0e),e(X0e,igr),e(cT,dgr),e(cT,uH),e(uH,cgr),e(cT,fgr),e(be,mgr),e(be,fT),e(fT,z0e),e(z0e,ggr),e(fT,hgr),e(fT,bH),e(bH,pgr),e(fT,_gr),e(be,ugr),e(be,mT),e(mT,W0e),e(W0e,bgr),e(mT,vgr),e(mT,vH),e(vH,Fgr),e(mT,Tgr),e(be,Mgr),e(be,gT),e(gT,Q0e),e(Q0e,Egr),e(gT,Cgr),e(gT,FH),e(FH,wgr),e(gT,Agr),e(be,Lgr),e(be,hT),e(hT,U0e),e(U0e,ygr),e(hT,xgr),e(hT,TH),e(TH,$gr),e(hT,kgr),e(be,Sgr),e(be,pT),e(pT,H0e),e(H0e,Rgr),e(pT,Pgr),e(pT,MH),e(MH,Bgr),e(pT,Igr),e(io,Ngr),e(io,_T),e(_T,qgr),e(_T,J0e),e(J0e,jgr),e(_T,Dgr),e(_T,Y0e),e(Y0e,Ggr),e(io,Ogr),M(uT,io,null),b(f,lUe,u),b(f,qd,u),e(qd,bT),e(bT,K0e),M(G9,K0e,null),e(qd,Vgr),e(qd,Z0e),e(Z0e,Xgr),b(f,iUe,u),b(f,zo,u),M(O9,zo,null),e(zo,zgr),e(zo,jd),e(jd,Wgr),e(jd,EH),e(EH,Qgr),e(jd,Ugr),e(jd,CH),e(CH,Hgr),e(jd,Jgr),e(zo,Ygr),e(zo,V9),e(V9,Kgr),e(V9,e6e),e(e6e,Zgr),e(V9,ehr),e(zo,ohr),e(zo,wt),M(X9,wt,null),e(wt,rhr),e(wt,o6e),e(o6e,thr),e(wt,ahr),e(wt,Dd),e(Dd,nhr),e(Dd,r6e),e(r6e,shr),e(Dd,lhr),e(Dd,wH),e(wH,ihr),e(Dd,dhr),e(wt,chr),M(vT,wt,null),e(zo,fhr),e(zo,co),M(z9,co,null),e(co,mhr),e(co,t6e),e(t6e,ghr),e(co,hhr),e(co,on),e(on,phr),e(on,a6e),e(a6e,_hr),e(on,uhr),e(on,n6e),e(n6e,bhr),e(on,vhr),e(on,s6e),e(s6e,Fhr),e(on,Thr),e(co,Mhr),e(co,l6e),e(l6e,FT),e(FT,i6e),e(i6e,Ehr),e(FT,Chr),e(FT,AH),e(AH,whr),e(FT,Ahr),e(co,Lhr),e(co,TT),e(TT,yhr),e(TT,d6e),e(d6e,xhr),e(TT,$hr),e(TT,c6e),e(c6e,khr),e(co,Shr),M(MT,co,null),b(f,dUe,u),b(f,Gd,u),e(Gd,ET),e(ET,f6e),M(W9,f6e,null),e(Gd,Rhr),e(Gd,m6e),e(m6e,Phr),b(f,cUe,u),b(f,Wo,u),M(Q9,Wo,null),e(Wo,Bhr),e(Wo,Od),e(Od,Ihr),e(Od,LH),e(LH,Nhr),e(Od,qhr),e(Od,yH),e(yH,jhr),e(Od,Dhr),e(Wo,Ghr),e(Wo,U9),e(U9,Ohr),e(U9,g6e),e(g6e,Vhr),e(U9,Xhr),e(Wo,zhr),e(Wo,At),M(H9,At,null),e(At,Whr),e(At,h6e),e(h6e,Qhr),e(At,Uhr),e(At,Vd),e(Vd,Hhr),e(Vd,p6e),e(p6e,Jhr),e(Vd,Yhr),e(Vd,xH),e(xH,Khr),e(Vd,Zhr),e(At,epr),M(CT,At,null),e(Wo,opr),e(Wo,fo),M(J9,fo,null),e(fo,rpr),e(fo,_6e),e(_6e,tpr),e(fo,apr),e(fo,rn),e(rn,npr),e(rn,u6e),e(u6e,spr),e(rn,lpr),e(rn,b6e),e(b6e,ipr),e(rn,dpr),e(rn,v6e),e(v6e,cpr),e(rn,fpr),e(fo,mpr),e(fo,F6e),e(F6e,wT),e(wT,T6e),e(T6e,gpr),e(wT,hpr),e(wT,$H),e($H,ppr),e(wT,_pr),e(fo,upr),e(fo,AT),e(AT,bpr),e(AT,M6e),e(M6e,vpr),e(AT,Fpr),e(AT,E6e),e(E6e,Tpr),e(fo,Mpr),M(LT,fo,null),b(f,fUe,u),b(f,Xd,u),e(Xd,yT),e(yT,C6e),M(Y9,C6e,null),e(Xd,Epr),e(Xd,w6e),e(w6e,Cpr),b(f,mUe,u),b(f,Qo,u),M(K9,Qo,null),e(Qo,wpr),e(Qo,zd),e(zd,Apr),e(zd,kH),e(kH,Lpr),e(zd,ypr),e(zd,SH),e(SH,xpr),e(zd,$pr),e(Qo,kpr),e(Qo,Z9),e(Z9,Spr),e(Z9,A6e),e(A6e,Rpr),e(Z9,Ppr),e(Qo,Bpr),e(Qo,Lt),M(ex,Lt,null),e(Lt,Ipr),e(Lt,L6e),e(L6e,Npr),e(Lt,qpr),e(Lt,Wd),e(Wd,jpr),e(Wd,y6e),e(y6e,Dpr),e(Wd,Gpr),e(Wd,RH),e(RH,Opr),e(Wd,Vpr),e(Lt,Xpr),M(xT,Lt,null),e(Qo,zpr),e(Qo,mo),M(ox,mo,null),e(mo,Wpr),e(mo,x6e),e(x6e,Qpr),e(mo,Upr),e(mo,tn),e(tn,Hpr),e(tn,$6e),e($6e,Jpr),e(tn,Ypr),e(tn,k6e),e(k6e,Kpr),e(tn,Zpr),e(tn,S6e),e(S6e,e_r),e(tn,o_r),e(mo,r_r),e(mo,R6e),e(R6e,$T),e($T,P6e),e(P6e,t_r),e($T,a_r),e($T,PH),e(PH,n_r),e($T,s_r),e(mo,l_r),e(mo,kT),e(kT,i_r),e(kT,B6e),e(B6e,d_r),e(kT,c_r),e(kT,I6e),e(I6e,f_r),e(mo,m_r),M(ST,mo,null),b(f,gUe,u),b(f,Qd,u),e(Qd,RT),e(RT,N6e),M(rx,N6e,null),e(Qd,g_r),e(Qd,q6e),e(q6e,h_r),b(f,hUe,u),b(f,Uo,u),M(tx,Uo,null),e(Uo,p_r),e(Uo,Ud),e(Ud,__r),e(Ud,BH),e(BH,u_r),e(Ud,b_r),e(Ud,IH),e(IH,v_r),e(Ud,F_r),e(Uo,T_r),e(Uo,ax),e(ax,M_r),e(ax,j6e),e(j6e,E_r),e(ax,C_r),e(Uo,w_r),e(Uo,yt),M(nx,yt,null),e(yt,A_r),e(yt,D6e),e(D6e,L_r),e(yt,y_r),e(yt,Hd),e(Hd,x_r),e(Hd,G6e),e(G6e,$_r),e(Hd,k_r),e(Hd,NH),e(NH,S_r),e(Hd,R_r),e(yt,P_r),M(PT,yt,null),e(Uo,B_r),e(Uo,go),M(sx,go,null),e(go,I_r),e(go,O6e),e(O6e,N_r),e(go,q_r),e(go,an),e(an,j_r),e(an,V6e),e(V6e,D_r),e(an,G_r),e(an,X6e),e(X6e,O_r),e(an,V_r),e(an,z6e),e(z6e,X_r),e(an,z_r),e(go,W_r),e(go,Pe),e(Pe,BT),e(BT,W6e),e(W6e,Q_r),e(BT,U_r),e(BT,qH),e(qH,H_r),e(BT,J_r),e(Pe,Y_r),e(Pe,IT),e(IT,Q6e),e(Q6e,K_r),e(IT,Z_r),e(IT,jH),e(jH,eur),e(IT,our),e(Pe,rur),e(Pe,NT),e(NT,U6e),e(U6e,tur),e(NT,aur),e(NT,DH),e(DH,nur),e(NT,sur),e(Pe,lur),e(Pe,qT),e(qT,H6e),e(H6e,iur),e(qT,dur),e(qT,GH),e(GH,cur),e(qT,fur),e(Pe,mur),e(Pe,jT),e(jT,J6e),e(J6e,gur),e(jT,hur),e(jT,OH),e(OH,pur),e(jT,_ur),e(Pe,uur),e(Pe,DT),e(DT,Y6e),e(Y6e,bur),e(DT,vur),e(DT,VH),e(VH,Fur),e(DT,Tur),e(Pe,Mur),e(Pe,GT),e(GT,K6e),e(K6e,Eur),e(GT,Cur),e(GT,XH),e(XH,wur),e(GT,Aur),e(Pe,Lur),e(Pe,OT),e(OT,Z6e),e(Z6e,yur),e(OT,xur),e(OT,zH),e(zH,$ur),e(OT,kur),e(Pe,Sur),e(Pe,VT),e(VT,eFe),e(eFe,Rur),e(VT,Pur),e(VT,WH),e(WH,Bur),e(VT,Iur),e(go,Nur),e(go,XT),e(XT,qur),e(XT,oFe),e(oFe,jur),e(XT,Dur),e(XT,rFe),e(rFe,Gur),e(go,Our),M(zT,go,null),b(f,pUe,u),b(f,Jd,u),e(Jd,WT),e(WT,tFe),M(lx,tFe,null),e(Jd,Vur),e(Jd,aFe),e(aFe,Xur),b(f,_Ue,u),b(f,Ho,u),M(ix,Ho,null),e(Ho,zur),e(Ho,Yd),e(Yd,Wur),e(Yd,QH),e(QH,Qur),e(Yd,Uur),e(Yd,UH),e(UH,Hur),e(Yd,Jur),e(Ho,Yur),e(Ho,dx),e(dx,Kur),e(dx,nFe),e(nFe,Zur),e(dx,e2r),e(Ho,o2r),e(Ho,xt),M(cx,xt,null),e(xt,r2r),e(xt,sFe),e(sFe,t2r),e(xt,a2r),e(xt,Kd),e(Kd,n2r),e(Kd,lFe),e(lFe,s2r),e(Kd,l2r),e(Kd,HH),e(HH,i2r),e(Kd,d2r),e(xt,c2r),M(QT,xt,null),e(Ho,f2r),e(Ho,ho),M(fx,ho,null),e(ho,m2r),e(ho,iFe),e(iFe,g2r),e(ho,h2r),e(ho,nn),e(nn,p2r),e(nn,dFe),e(dFe,_2r),e(nn,u2r),e(nn,cFe),e(cFe,b2r),e(nn,v2r),e(nn,fFe),e(fFe,F2r),e(nn,T2r),e(ho,M2r),e(ho,st),e(st,UT),e(UT,mFe),e(mFe,E2r),e(UT,C2r),e(UT,JH),e(JH,w2r),e(UT,A2r),e(st,L2r),e(st,HT),e(HT,gFe),e(gFe,y2r),e(HT,x2r),e(HT,YH),e(YH,$2r),e(HT,k2r),e(st,S2r),e(st,JT),e(JT,hFe),e(hFe,R2r),e(JT,P2r),e(JT,KH),e(KH,B2r),e(JT,I2r),e(st,N2r),e(st,YT),e(YT,pFe),e(pFe,q2r),e(YT,j2r),e(YT,ZH),e(ZH,D2r),e(YT,G2r),e(st,O2r),e(st,KT),e(KT,_Fe),e(_Fe,V2r),e(KT,X2r),e(KT,eJ),e(eJ,z2r),e(KT,W2r),e(ho,Q2r),e(ho,ZT),e(ZT,U2r),e(ZT,uFe),e(uFe,H2r),e(ZT,J2r),e(ZT,bFe),e(bFe,Y2r),e(ho,K2r),M(e8,ho,null),b(f,uUe,u),b(f,Zd,u),e(Zd,o8),e(o8,vFe),M(mx,vFe,null),e(Zd,Z2r),e(Zd,FFe),e(FFe,e1r),b(f,bUe,u),b(f,Jo,u),M(gx,Jo,null),e(Jo,o1r),e(Jo,ec),e(ec,r1r),e(ec,oJ),e(oJ,t1r),e(ec,a1r),e(ec,rJ),e(rJ,n1r),e(ec,s1r),e(Jo,l1r),e(Jo,hx),e(hx,i1r),e(hx,TFe),e(TFe,d1r),e(hx,c1r),e(Jo,f1r),e(Jo,$t),M(px,$t,null),e($t,m1r),e($t,MFe),e(MFe,g1r),e($t,h1r),e($t,oc),e(oc,p1r),e(oc,EFe),e(EFe,_1r),e(oc,u1r),e(oc,tJ),e(tJ,b1r),e(oc,v1r),e($t,F1r),M(r8,$t,null),e(Jo,T1r),e(Jo,po),M(_x,po,null),e(po,M1r),e(po,CFe),e(CFe,E1r),e(po,C1r),e(po,sn),e(sn,w1r),e(sn,wFe),e(wFe,A1r),e(sn,L1r),e(sn,AFe),e(AFe,y1r),e(sn,x1r),e(sn,LFe),e(LFe,$1r),e(sn,k1r),e(po,S1r),e(po,Le),e(Le,t8),e(t8,yFe),e(yFe,R1r),e(t8,P1r),e(t8,aJ),e(aJ,B1r),e(t8,I1r),e(Le,N1r),e(Le,a8),e(a8,xFe),e(xFe,q1r),e(a8,j1r),e(a8,nJ),e(nJ,D1r),e(a8,G1r),e(Le,O1r),e(Le,n8),e(n8,$Fe),e($Fe,V1r),e(n8,X1r),e(n8,sJ),e(sJ,z1r),e(n8,W1r),e(Le,Q1r),e(Le,s8),e(s8,kFe),e(kFe,U1r),e(s8,H1r),e(s8,lJ),e(lJ,J1r),e(s8,Y1r),e(Le,K1r),e(Le,l8),e(l8,SFe),e(SFe,Z1r),e(l8,ebr),e(l8,iJ),e(iJ,obr),e(l8,rbr),e(Le,tbr),e(Le,i8),e(i8,RFe),e(RFe,abr),e(i8,nbr),e(i8,dJ),e(dJ,sbr),e(i8,lbr),e(Le,ibr),e(Le,d8),e(d8,PFe),e(PFe,dbr),e(d8,cbr),e(d8,cJ),e(cJ,fbr),e(d8,mbr),e(Le,gbr),e(Le,c8),e(c8,BFe),e(BFe,hbr),e(c8,pbr),e(c8,fJ),e(fJ,_br),e(c8,ubr),e(Le,bbr),e(Le,f8),e(f8,IFe),e(IFe,vbr),e(f8,Fbr),e(f8,mJ),e(mJ,Tbr),e(f8,Mbr),e(Le,Ebr),e(Le,m8),e(m8,NFe),e(NFe,Cbr),e(m8,wbr),e(m8,gJ),e(gJ,Abr),e(m8,Lbr),e(po,ybr),e(po,g8),e(g8,xbr),e(g8,qFe),e(qFe,$br),e(g8,kbr),e(g8,jFe),e(jFe,Sbr),e(po,Rbr),M(h8,po,null),b(f,vUe,u),b(f,rc,u),e(rc,p8),e(p8,DFe),M(ux,DFe,null),e(rc,Pbr),e(rc,GFe),e(GFe,Bbr),b(f,FUe,u),b(f,Yo,u),M(bx,Yo,null),e(Yo,Ibr),e(Yo,tc),e(tc,Nbr),e(tc,hJ),e(hJ,qbr),e(tc,jbr),e(tc,pJ),e(pJ,Dbr),e(tc,Gbr),e(Yo,Obr),e(Yo,vx),e(vx,Vbr),e(vx,OFe),e(OFe,Xbr),e(vx,zbr),e(Yo,Wbr),e(Yo,kt),M(Fx,kt,null),e(kt,Qbr),e(kt,VFe),e(VFe,Ubr),e(kt,Hbr),e(kt,ac),e(ac,Jbr),e(ac,XFe),e(XFe,Ybr),e(ac,Kbr),e(ac,_J),e(_J,Zbr),e(ac,evr),e(kt,ovr),M(_8,kt,null),e(Yo,rvr),e(Yo,_o),M(Tx,_o,null),e(_o,tvr),e(_o,zFe),e(zFe,avr),e(_o,nvr),e(_o,ln),e(ln,svr),e(ln,WFe),e(WFe,lvr),e(ln,ivr),e(ln,QFe),e(QFe,dvr),e(ln,cvr),e(ln,UFe),e(UFe,fvr),e(ln,mvr),e(_o,gvr),e(_o,Mx),e(Mx,u8),e(u8,HFe),e(HFe,hvr),e(u8,pvr),e(u8,uJ),e(uJ,_vr),e(u8,uvr),e(Mx,bvr),e(Mx,b8),e(b8,JFe),e(JFe,vvr),e(b8,Fvr),e(b8,bJ),e(bJ,Tvr),e(b8,Mvr),e(_o,Evr),e(_o,v8),e(v8,Cvr),e(v8,YFe),e(YFe,wvr),e(v8,Avr),e(v8,KFe),e(KFe,Lvr),e(_o,yvr),M(F8,_o,null),b(f,TUe,u),b(f,nc,u),e(nc,T8),e(T8,ZFe),M(Ex,ZFe,null),e(nc,xvr),e(nc,eTe),e(eTe,$vr),b(f,MUe,u),b(f,Ko,u),M(Cx,Ko,null),e(Ko,kvr),e(Ko,sc),e(sc,Svr),e(sc,vJ),e(vJ,Rvr),e(sc,Pvr),e(sc,FJ),e(FJ,Bvr),e(sc,Ivr),e(Ko,Nvr),e(Ko,wx),e(wx,qvr),e(wx,oTe),e(oTe,jvr),e(wx,Dvr),e(Ko,Gvr),e(Ko,St),M(Ax,St,null),e(St,Ovr),e(St,rTe),e(rTe,Vvr),e(St,Xvr),e(St,lc),e(lc,zvr),e(lc,tTe),e(tTe,Wvr),e(lc,Qvr),e(lc,TJ),e(TJ,Uvr),e(lc,Hvr),e(St,Jvr),M(M8,St,null),e(Ko,Yvr),e(Ko,uo),M(Lx,uo,null),e(uo,Kvr),e(uo,aTe),e(aTe,Zvr),e(uo,e0r),e(uo,dn),e(dn,o0r),e(dn,nTe),e(nTe,r0r),e(dn,t0r),e(dn,sTe),e(sTe,a0r),e(dn,n0r),e(dn,lTe),e(lTe,s0r),e(dn,l0r),e(uo,i0r),e(uo,lt),e(lt,E8),e(E8,iTe),e(iTe,d0r),e(E8,c0r),e(E8,MJ),e(MJ,f0r),e(E8,m0r),e(lt,g0r),e(lt,C8),e(C8,dTe),e(dTe,h0r),e(C8,p0r),e(C8,EJ),e(EJ,_0r),e(C8,u0r),e(lt,b0r),e(lt,w8),e(w8,cTe),e(cTe,v0r),e(w8,F0r),e(w8,CJ),e(CJ,T0r),e(w8,M0r),e(lt,E0r),e(lt,A8),e(A8,fTe),e(fTe,C0r),e(A8,w0r),e(A8,wJ),e(wJ,A0r),e(A8,L0r),e(lt,y0r),e(lt,L8),e(L8,mTe),e(mTe,x0r),e(L8,$0r),e(L8,AJ),e(AJ,k0r),e(L8,S0r),e(uo,R0r),e(uo,y8),e(y8,P0r),e(y8,gTe),e(gTe,B0r),e(y8,I0r),e(y8,hTe),e(hTe,N0r),e(uo,q0r),M(x8,uo,null),b(f,EUe,u),b(f,ic,u),e(ic,$8),e($8,pTe),M(yx,pTe,null),e(ic,j0r),e(ic,_Te),e(_Te,D0r),b(f,CUe,u),b(f,Zo,u),M(xx,Zo,null),e(Zo,G0r),e(Zo,dc),e(dc,O0r),e(dc,LJ),e(LJ,V0r),e(dc,X0r),e(dc,yJ),e(yJ,z0r),e(dc,W0r),e(Zo,Q0r),e(Zo,$x),e($x,U0r),e($x,uTe),e(uTe,H0r),e($x,J0r),e(Zo,Y0r),e(Zo,Rt),M(kx,Rt,null),e(Rt,K0r),e(Rt,bTe),e(bTe,Z0r),e(Rt,e6r),e(Rt,cc),e(cc,o6r),e(cc,vTe),e(vTe,r6r),e(cc,t6r),e(cc,xJ),e(xJ,a6r),e(cc,n6r),e(Rt,s6r),M(k8,Rt,null),e(Zo,l6r),e(Zo,bo),M(Sx,bo,null),e(bo,i6r),e(bo,FTe),e(FTe,d6r),e(bo,c6r),e(bo,cn),e(cn,f6r),e(cn,TTe),e(TTe,m6r),e(cn,g6r),e(cn,MTe),e(MTe,h6r),e(cn,p6r),e(cn,ETe),e(ETe,_6r),e(cn,u6r),e(bo,b6r),e(bo,fn),e(fn,S8),e(S8,CTe),e(CTe,v6r),e(S8,F6r),e(S8,$J),e($J,T6r),e(S8,M6r),e(fn,E6r),e(fn,R8),e(R8,wTe),e(wTe,C6r),e(R8,w6r),e(R8,kJ),e(kJ,A6r),e(R8,L6r),e(fn,y6r),e(fn,P8),e(P8,ATe),e(ATe,x6r),e(P8,$6r),e(P8,SJ),e(SJ,k6r),e(P8,S6r),e(fn,R6r),e(fn,B8),e(B8,LTe),e(LTe,P6r),e(B8,B6r),e(B8,RJ),e(RJ,I6r),e(B8,N6r),e(bo,q6r),e(bo,I8),e(I8,j6r),e(I8,yTe),e(yTe,D6r),e(I8,G6r),e(I8,xTe),e(xTe,O6r),e(bo,V6r),M(N8,bo,null),b(f,wUe,u),b(f,fc,u),e(fc,q8),e(q8,$Te),M(Rx,$Te,null),e(fc,X6r),e(fc,kTe),e(kTe,z6r),b(f,AUe,u),b(f,er,u),M(Px,er,null),e(er,W6r),e(er,mc),e(mc,Q6r),e(mc,PJ),e(PJ,U6r),e(mc,H6r),e(mc,BJ),e(BJ,J6r),e(mc,Y6r),e(er,K6r),e(er,Bx),e(Bx,Z6r),e(Bx,STe),e(STe,eFr),e(Bx,oFr),e(er,rFr),e(er,Pt),M(Ix,Pt,null),e(Pt,tFr),e(Pt,RTe),e(RTe,aFr),e(Pt,nFr),e(Pt,gc),e(gc,sFr),e(gc,PTe),e(PTe,lFr),e(gc,iFr),e(gc,IJ),e(IJ,dFr),e(gc,cFr),e(Pt,fFr),M(j8,Pt,null),e(er,mFr),e(er,vo),M(Nx,vo,null),e(vo,gFr),e(vo,BTe),e(BTe,hFr),e(vo,pFr),e(vo,mn),e(mn,_Fr),e(mn,ITe),e(ITe,uFr),e(mn,bFr),e(mn,NTe),e(NTe,vFr),e(mn,FFr),e(mn,qTe),e(qTe,TFr),e(mn,MFr),e(vo,EFr),e(vo,qx),e(qx,D8),e(D8,jTe),e(jTe,CFr),e(D8,wFr),e(D8,NJ),e(NJ,AFr),e(D8,LFr),e(qx,yFr),e(qx,G8),e(G8,DTe),e(DTe,xFr),e(G8,$Fr),e(G8,qJ),e(qJ,kFr),e(G8,SFr),e(vo,RFr),e(vo,O8),e(O8,PFr),e(O8,GTe),e(GTe,BFr),e(O8,IFr),e(O8,OTe),e(OTe,NFr),e(vo,qFr),M(V8,vo,null),b(f,LUe,u),b(f,hc,u),e(hc,X8),e(X8,VTe),M(jx,VTe,null),e(hc,jFr),e(hc,XTe),e(XTe,DFr),b(f,yUe,u),b(f,or,u),M(Dx,or,null),e(or,GFr),e(or,pc),e(pc,OFr),e(pc,jJ),e(jJ,VFr),e(pc,XFr),e(pc,DJ),e(DJ,zFr),e(pc,WFr),e(or,QFr),e(or,Gx),e(Gx,UFr),e(Gx,zTe),e(zTe,HFr),e(Gx,JFr),e(or,YFr),e(or,Bt),M(Ox,Bt,null),e(Bt,KFr),e(Bt,WTe),e(WTe,ZFr),e(Bt,eTr),e(Bt,_c),e(_c,oTr),e(_c,QTe),e(QTe,rTr),e(_c,tTr),e(_c,GJ),e(GJ,aTr),e(_c,nTr),e(Bt,sTr),M(z8,Bt,null),e(or,lTr),e(or,Fo),M(Vx,Fo,null),e(Fo,iTr),e(Fo,UTe),e(UTe,dTr),e(Fo,cTr),e(Fo,gn),e(gn,fTr),e(gn,HTe),e(HTe,mTr),e(gn,gTr),e(gn,JTe),e(JTe,hTr),e(gn,pTr),e(gn,YTe),e(YTe,_Tr),e(gn,uTr),e(Fo,bTr),e(Fo,KTe),e(KTe,W8),e(W8,ZTe),e(ZTe,vTr),e(W8,FTr),e(W8,OJ),e(OJ,TTr),e(W8,MTr),e(Fo,ETr),e(Fo,Q8),e(Q8,CTr),e(Q8,e8e),e(e8e,wTr),e(Q8,ATr),e(Q8,o8e),e(o8e,LTr),e(Fo,yTr),M(U8,Fo,null),b(f,xUe,u),b(f,uc,u),e(uc,H8),e(H8,r8e),M(Xx,r8e,null),e(uc,xTr),e(uc,t8e),e(t8e,$Tr),b(f,$Ue,u),b(f,rr,u),M(zx,rr,null),e(rr,kTr),e(rr,bc),e(bc,STr),e(bc,VJ),e(VJ,RTr),e(bc,PTr),e(bc,XJ),e(XJ,BTr),e(bc,ITr),e(rr,NTr),e(rr,Wx),e(Wx,qTr),e(Wx,a8e),e(a8e,jTr),e(Wx,DTr),e(rr,GTr),e(rr,It),M(Qx,It,null),e(It,OTr),e(It,n8e),e(n8e,VTr),e(It,XTr),e(It,vc),e(vc,zTr),e(vc,s8e),e(s8e,WTr),e(vc,QTr),e(vc,zJ),e(zJ,UTr),e(vc,HTr),e(It,JTr),M(J8,It,null),e(rr,YTr),e(rr,To),M(Ux,To,null),e(To,KTr),e(To,l8e),e(l8e,ZTr),e(To,e8r),e(To,hn),e(hn,o8r),e(hn,i8e),e(i8e,r8r),e(hn,t8r),e(hn,d8e),e(d8e,a8r),e(hn,n8r),e(hn,c8e),e(c8e,s8r),e(hn,l8r),e(To,i8r),e(To,it),e(it,Y8),e(Y8,f8e),e(f8e,d8r),e(Y8,c8r),e(Y8,WJ),e(WJ,f8r),e(Y8,m8r),e(it,g8r),e(it,K8),e(K8,m8e),e(m8e,h8r),e(K8,p8r),e(K8,QJ),e(QJ,_8r),e(K8,u8r),e(it,b8r),e(it,Z8),e(Z8,g8e),e(g8e,v8r),e(Z8,F8r),e(Z8,UJ),e(UJ,T8r),e(Z8,M8r),e(it,E8r),e(it,eM),e(eM,h8e),e(h8e,C8r),e(eM,w8r),e(eM,HJ),e(HJ,A8r),e(eM,L8r),e(it,y8r),e(it,oM),e(oM,p8e),e(p8e,x8r),e(oM,$8r),e(oM,JJ),e(JJ,k8r),e(oM,S8r),e(To,R8r),e(To,rM),e(rM,P8r),e(rM,_8e),e(_8e,B8r),e(rM,I8r),e(rM,u8e),e(u8e,N8r),e(To,q8r),M(tM,To,null),b(f,kUe,u),b(f,Fc,u),e(Fc,aM),e(aM,b8e),M(Hx,b8e,null),e(Fc,j8r),e(Fc,v8e),e(v8e,D8r),b(f,SUe,u),b(f,tr,u),M(Jx,tr,null),e(tr,G8r),e(tr,Tc),e(Tc,O8r),e(Tc,YJ),e(YJ,V8r),e(Tc,X8r),e(Tc,KJ),e(KJ,z8r),e(Tc,W8r),e(tr,Q8r),e(tr,Yx),e(Yx,U8r),e(Yx,F8e),e(F8e,H8r),e(Yx,J8r),e(tr,Y8r),e(tr,Nt),M(Kx,Nt,null),e(Nt,K8r),e(Nt,T8e),e(T8e,Z8r),e(Nt,eMr),e(Nt,Mc),e(Mc,oMr),e(Mc,M8e),e(M8e,rMr),e(Mc,tMr),e(Mc,ZJ),e(ZJ,aMr),e(Mc,nMr),e(Nt,sMr),M(nM,Nt,null),e(tr,lMr),e(tr,Mo),M(Zx,Mo,null),e(Mo,iMr),e(Mo,E8e),e(E8e,dMr),e(Mo,cMr),e(Mo,pn),e(pn,fMr),e(pn,C8e),e(C8e,mMr),e(pn,gMr),e(pn,w8e),e(w8e,hMr),e(pn,pMr),e(pn,A8e),e(A8e,_Mr),e(pn,uMr),e(Mo,bMr),e(Mo,L8e),e(L8e,sM),e(sM,y8e),e(y8e,vMr),e(sM,FMr),e(sM,eY),e(eY,TMr),e(sM,MMr),e(Mo,EMr),e(Mo,lM),e(lM,CMr),e(lM,x8e),e(x8e,wMr),e(lM,AMr),e(lM,$8e),e($8e,LMr),e(Mo,yMr),M(iM,Mo,null),b(f,RUe,u),b(f,Ec,u),e(Ec,dM),e(dM,k8e),M(e$,k8e,null),e(Ec,xMr),e(Ec,S8e),e(S8e,$Mr),b(f,PUe,u),b(f,ar,u),M(o$,ar,null),e(ar,kMr),e(ar,Cc),e(Cc,SMr),e(Cc,oY),e(oY,RMr),e(Cc,PMr),e(Cc,rY),e(rY,BMr),e(Cc,IMr),e(ar,NMr),e(ar,r$),e(r$,qMr),e(r$,R8e),e(R8e,jMr),e(r$,DMr),e(ar,GMr),e(ar,qt),M(t$,qt,null),e(qt,OMr),e(qt,P8e),e(P8e,VMr),e(qt,XMr),e(qt,wc),e(wc,zMr),e(wc,B8e),e(B8e,WMr),e(wc,QMr),e(wc,tY),e(tY,UMr),e(wc,HMr),e(qt,JMr),M(cM,qt,null),e(ar,YMr),e(ar,Rr),M(a$,Rr,null),e(Rr,KMr),e(Rr,I8e),e(I8e,ZMr),e(Rr,eEr),e(Rr,_n),e(_n,oEr),e(_n,N8e),e(N8e,rEr),e(_n,tEr),e(_n,q8e),e(q8e,aEr),e(_n,nEr),e(_n,j8e),e(j8e,sEr),e(_n,lEr),e(Rr,iEr),e(Rr,q),e(q,fM),e(fM,D8e),e(D8e,dEr),e(fM,cEr),e(fM,aY),e(aY,fEr),e(fM,mEr),e(q,gEr),e(q,mM),e(mM,G8e),e(G8e,hEr),e(mM,pEr),e(mM,nY),e(nY,_Er),e(mM,uEr),e(q,bEr),e(q,gM),e(gM,O8e),e(O8e,vEr),e(gM,FEr),e(gM,sY),e(sY,TEr),e(gM,MEr),e(q,EEr),e(q,hM),e(hM,V8e),e(V8e,CEr),e(hM,wEr),e(hM,lY),e(lY,AEr),e(hM,LEr),e(q,yEr),e(q,pM),e(pM,X8e),e(X8e,xEr),e(pM,$Er),e(pM,iY),e(iY,kEr),e(pM,SEr),e(q,REr),e(q,_M),e(_M,z8e),e(z8e,PEr),e(_M,BEr),e(_M,dY),e(dY,IEr),e(_M,NEr),e(q,qEr),e(q,uM),e(uM,W8e),e(W8e,jEr),e(uM,DEr),e(uM,cY),e(cY,GEr),e(uM,OEr),e(q,VEr),e(q,bM),e(bM,Q8e),e(Q8e,XEr),e(bM,zEr),e(bM,fY),e(fY,WEr),e(bM,QEr),e(q,UEr),e(q,vM),e(vM,U8e),e(U8e,HEr),e(vM,JEr),e(vM,mY),e(mY,YEr),e(vM,KEr),e(q,ZEr),e(q,FM),e(FM,H8e),e(H8e,e4r),e(FM,o4r),e(FM,gY),e(gY,r4r),e(FM,t4r),e(q,a4r),e(q,TM),e(TM,J8e),e(J8e,n4r),e(TM,s4r),e(TM,hY),e(hY,l4r),e(TM,i4r),e(q,d4r),e(q,MM),e(MM,Y8e),e(Y8e,c4r),e(MM,f4r),e(MM,pY),e(pY,m4r),e(MM,g4r),e(q,h4r),e(q,EM),e(EM,K8e),e(K8e,p4r),e(EM,_4r),e(EM,_Y),e(_Y,u4r),e(EM,b4r),e(q,v4r),e(q,CM),e(CM,Z8e),e(Z8e,F4r),e(CM,T4r),e(CM,uY),e(uY,M4r),e(CM,E4r),e(q,C4r),e(q,wM),e(wM,eMe),e(eMe,w4r),e(wM,A4r),e(wM,bY),e(bY,L4r),e(wM,y4r),e(q,x4r),e(q,AM),e(AM,oMe),e(oMe,$4r),e(AM,k4r),e(AM,vY),e(vY,S4r),e(AM,R4r),e(q,P4r),e(q,LM),e(LM,rMe),e(rMe,B4r),e(LM,I4r),e(LM,FY),e(FY,N4r),e(LM,q4r),e(q,j4r),e(q,yM),e(yM,tMe),e(tMe,D4r),e(yM,G4r),e(yM,TY),e(TY,O4r),e(yM,V4r),e(q,X4r),e(q,il),e(il,aMe),e(aMe,z4r),e(il,W4r),e(il,MY),e(MY,Q4r),e(il,U4r),e(il,EY),e(EY,H4r),e(il,J4r),e(q,Y4r),e(q,xM),e(xM,nMe),e(nMe,K4r),e(xM,Z4r),e(xM,CY),e(CY,eCr),e(xM,oCr),e(q,rCr),e(q,$M),e($M,sMe),e(sMe,tCr),e($M,aCr),e($M,wY),e(wY,nCr),e($M,sCr),e(q,lCr),e(q,kM),e(kM,lMe),e(lMe,iCr),e(kM,dCr),e(kM,AY),e(AY,cCr),e(kM,fCr),e(q,mCr),e(q,SM),e(SM,iMe),e(iMe,gCr),e(SM,hCr),e(SM,LY),e(LY,pCr),e(SM,_Cr),e(q,uCr),e(q,RM),e(RM,dMe),e(dMe,bCr),e(RM,vCr),e(RM,yY),e(yY,FCr),e(RM,TCr),e(q,MCr),e(q,PM),e(PM,cMe),e(cMe,ECr),e(PM,CCr),e(PM,xY),e(xY,wCr),e(PM,ACr),e(q,LCr),e(q,BM),e(BM,fMe),e(fMe,yCr),e(BM,xCr),e(BM,$Y),e($Y,$Cr),e(BM,kCr),e(q,SCr),e(q,IM),e(IM,mMe),e(mMe,RCr),e(IM,PCr),e(IM,kY),e(kY,BCr),e(IM,ICr),e(q,NCr),e(q,NM),e(NM,gMe),e(gMe,qCr),e(NM,jCr),e(NM,SY),e(SY,DCr),e(NM,GCr),e(q,OCr),e(q,qM),e(qM,hMe),e(hMe,VCr),e(qM,XCr),e(qM,RY),e(RY,zCr),e(qM,WCr),e(q,QCr),e(q,jM),e(jM,pMe),e(pMe,UCr),e(jM,HCr),e(jM,PY),e(PY,JCr),e(jM,YCr),e(q,KCr),e(q,DM),e(DM,_Me),e(_Me,ZCr),e(DM,e3r),e(DM,BY),e(BY,o3r),e(DM,r3r),e(q,t3r),e(q,GM),e(GM,uMe),e(uMe,a3r),e(GM,n3r),e(GM,IY),e(IY,s3r),e(GM,l3r),e(q,i3r),e(q,OM),e(OM,bMe),e(bMe,d3r),e(OM,c3r),e(OM,NY),e(NY,f3r),e(OM,m3r),e(q,g3r),e(q,VM),e(VM,vMe),e(vMe,h3r),e(VM,p3r),e(VM,qY),e(qY,_3r),e(VM,u3r),e(q,b3r),e(q,XM),e(XM,FMe),e(FMe,v3r),e(XM,F3r),e(XM,jY),e(jY,T3r),e(XM,M3r),e(q,E3r),e(q,zM),e(zM,TMe),e(TMe,C3r),e(zM,w3r),e(zM,DY),e(DY,A3r),e(zM,L3r),e(q,y3r),e(q,WM),e(WM,MMe),e(MMe,x3r),e(WM,$3r),e(WM,GY),e(GY,k3r),e(WM,S3r),e(q,R3r),e(q,QM),e(QM,EMe),e(EMe,P3r),e(QM,B3r),e(QM,OY),e(OY,I3r),e(QM,N3r),e(q,q3r),e(q,UM),e(UM,CMe),e(CMe,j3r),e(UM,D3r),e(UM,VY),e(VY,G3r),e(UM,O3r),e(q,V3r),e(q,HM),e(HM,wMe),e(wMe,X3r),e(HM,z3r),e(HM,XY),e(XY,W3r),e(HM,Q3r),e(q,U3r),e(q,JM),e(JM,AMe),e(AMe,H3r),e(JM,J3r),e(JM,zY),e(zY,Y3r),e(JM,K3r),e(q,Z3r),e(q,YM),e(YM,LMe),e(LMe,e5r),e(YM,o5r),e(YM,WY),e(WY,r5r),e(YM,t5r),e(q,a5r),e(q,KM),e(KM,yMe),e(yMe,n5r),e(KM,s5r),e(KM,QY),e(QY,l5r),e(KM,i5r),e(q,d5r),e(q,ZM),e(ZM,xMe),e(xMe,c5r),e(ZM,f5r),e(ZM,UY),e(UY,m5r),e(ZM,g5r),e(q,h5r),e(q,eE),e(eE,$Me),e($Me,p5r),e(eE,_5r),e(eE,HY),e(HY,u5r),e(eE,b5r),e(q,v5r),e(q,oE),e(oE,kMe),e(kMe,F5r),e(oE,T5r),e(oE,JY),e(JY,M5r),e(oE,E5r),e(q,C5r),e(q,rE),e(rE,SMe),e(SMe,w5r),e(rE,A5r),e(rE,YY),e(YY,L5r),e(rE,y5r),e(q,x5r),e(q,tE),e(tE,RMe),e(RMe,$5r),e(tE,k5r),e(tE,KY),e(KY,S5r),e(tE,R5r),e(q,P5r),e(q,aE),e(aE,PMe),e(PMe,B5r),e(aE,I5r),e(aE,ZY),e(ZY,N5r),e(aE,q5r),e(q,j5r),e(q,nE),e(nE,BMe),e(BMe,D5r),e(nE,G5r),e(nE,eK),e(eK,O5r),e(nE,V5r),e(q,X5r),e(q,sE),e(sE,IMe),e(IMe,z5r),e(sE,W5r),e(sE,oK),e(oK,Q5r),e(sE,U5r),e(Rr,H5r),M(lE,Rr,null),b(f,BUe,u),b(f,Ac,u),e(Ac,iE),e(iE,NMe),M(n$,NMe,null),e(Ac,J5r),e(Ac,qMe),e(qMe,Y5r),b(f,IUe,u),b(f,nr,u),M(s$,nr,null),e(nr,K5r),e(nr,Lc),e(Lc,Z5r),e(Lc,rK),e(rK,ewr),e(Lc,owr),e(Lc,tK),e(tK,rwr),e(Lc,twr),e(nr,awr),e(nr,l$),e(l$,nwr),e(l$,jMe),e(jMe,swr),e(l$,lwr),e(nr,iwr),e(nr,jt),M(i$,jt,null),e(jt,dwr),e(jt,DMe),e(DMe,cwr),e(jt,fwr),e(jt,yc),e(yc,mwr),e(yc,GMe),e(GMe,gwr),e(yc,hwr),e(yc,aK),e(aK,pwr),e(yc,_wr),e(jt,uwr),M(dE,jt,null),e(nr,bwr),e(nr,Pr),M(d$,Pr,null),e(Pr,vwr),e(Pr,OMe),e(OMe,Fwr),e(Pr,Twr),e(Pr,un),e(un,Mwr),e(un,VMe),e(VMe,Ewr),e(un,Cwr),e(un,XMe),e(XMe,wwr),e(un,Awr),e(un,zMe),e(zMe,Lwr),e(un,ywr),e(Pr,xwr),e(Pr,se),e(se,cE),e(cE,WMe),e(WMe,$wr),e(cE,kwr),e(cE,nK),e(nK,Swr),e(cE,Rwr),e(se,Pwr),e(se,fE),e(fE,QMe),e(QMe,Bwr),e(fE,Iwr),e(fE,sK),e(sK,Nwr),e(fE,qwr),e(se,jwr),e(se,mE),e(mE,UMe),e(UMe,Dwr),e(mE,Gwr),e(mE,lK),e(lK,Owr),e(mE,Vwr),e(se,Xwr),e(se,gE),e(gE,HMe),e(HMe,zwr),e(gE,Wwr),e(gE,iK),e(iK,Qwr),e(gE,Uwr),e(se,Hwr),e(se,hE),e(hE,JMe),e(JMe,Jwr),e(hE,Ywr),e(hE,dK),e(dK,Kwr),e(hE,Zwr),e(se,eAr),e(se,pE),e(pE,YMe),e(YMe,oAr),e(pE,rAr),e(pE,cK),e(cK,tAr),e(pE,aAr),e(se,nAr),e(se,_E),e(_E,KMe),e(KMe,sAr),e(_E,lAr),e(_E,fK),e(fK,iAr),e(_E,dAr),e(se,cAr),e(se,uE),e(uE,ZMe),e(ZMe,fAr),e(uE,mAr),e(uE,mK),e(mK,gAr),e(uE,hAr),e(se,pAr),e(se,bE),e(bE,eEe),e(eEe,_Ar),e(bE,uAr),e(bE,gK),e(gK,bAr),e(bE,vAr),e(se,FAr),e(se,vE),e(vE,oEe),e(oEe,TAr),e(vE,MAr),e(vE,hK),e(hK,EAr),e(vE,CAr),e(se,wAr),e(se,FE),e(FE,rEe),e(rEe,AAr),e(FE,LAr),e(FE,pK),e(pK,yAr),e(FE,xAr),e(se,$Ar),e(se,TE),e(TE,tEe),e(tEe,kAr),e(TE,SAr),e(TE,_K),e(_K,RAr),e(TE,PAr),e(se,BAr),e(se,ME),e(ME,aEe),e(aEe,IAr),e(ME,NAr),e(ME,uK),e(uK,qAr),e(ME,jAr),e(se,DAr),e(se,EE),e(EE,nEe),e(nEe,GAr),e(EE,OAr),e(EE,bK),e(bK,VAr),e(EE,XAr),e(se,zAr),e(se,CE),e(CE,sEe),e(sEe,WAr),e(CE,QAr),e(CE,vK),e(vK,UAr),e(CE,HAr),e(se,JAr),e(se,wE),e(wE,lEe),e(lEe,YAr),e(wE,KAr),e(wE,FK),e(FK,ZAr),e(wE,e7r),e(se,o7r),e(se,AE),e(AE,iEe),e(iEe,r7r),e(AE,t7r),e(AE,TK),e(TK,a7r),e(AE,n7r),e(se,s7r),e(se,LE),e(LE,dEe),e(dEe,l7r),e(LE,i7r),e(LE,MK),e(MK,d7r),e(LE,c7r),e(se,f7r),e(se,yE),e(yE,cEe),e(cEe,m7r),e(yE,g7r),e(yE,EK),e(EK,h7r),e(yE,p7r),e(se,_7r),e(se,xE),e(xE,fEe),e(fEe,u7r),e(xE,b7r),e(xE,CK),e(CK,v7r),e(xE,F7r),e(se,T7r),e(se,$E),e($E,mEe),e(mEe,M7r),e($E,E7r),e($E,wK),e(wK,C7r),e($E,w7r),e(se,A7r),e(se,kE),e(kE,gEe),e(gEe,L7r),e(kE,y7r),e(kE,AK),e(AK,x7r),e(kE,$7r),e(se,k7r),e(se,SE),e(SE,hEe),e(hEe,S7r),e(SE,R7r),e(SE,LK),e(LK,P7r),e(SE,B7r),e(Pr,I7r),M(RE,Pr,null),b(f,NUe,u),b(f,xc,u),e(xc,PE),e(PE,pEe),M(c$,pEe,null),e(xc,N7r),e(xc,_Ee),e(_Ee,q7r),b(f,qUe,u),b(f,sr,u),M(f$,sr,null),e(sr,j7r),e(sr,$c),e($c,D7r),e($c,yK),e(yK,G7r),e($c,O7r),e($c,xK),e(xK,V7r),e($c,X7r),e(sr,z7r),e(sr,m$),e(m$,W7r),e(m$,uEe),e(uEe,Q7r),e(m$,U7r),e(sr,H7r),e(sr,Dt),M(g$,Dt,null),e(Dt,J7r),e(Dt,bEe),e(bEe,Y7r),e(Dt,K7r),e(Dt,kc),e(kc,Z7r),e(kc,vEe),e(vEe,eLr),e(kc,oLr),e(kc,$K),e($K,rLr),e(kc,tLr),e(Dt,aLr),M(BE,Dt,null),e(sr,nLr),e(sr,Br),M(h$,Br,null),e(Br,sLr),e(Br,FEe),e(FEe,lLr),e(Br,iLr),e(Br,bn),e(bn,dLr),e(bn,TEe),e(TEe,cLr),e(bn,fLr),e(bn,MEe),e(MEe,mLr),e(bn,gLr),e(bn,EEe),e(EEe,hLr),e(bn,pLr),e(Br,_Lr),e(Br,Me),e(Me,IE),e(IE,CEe),e(CEe,uLr),e(IE,bLr),e(IE,kK),e(kK,vLr),e(IE,FLr),e(Me,TLr),e(Me,NE),e(NE,wEe),e(wEe,MLr),e(NE,ELr),e(NE,SK),e(SK,CLr),e(NE,wLr),e(Me,ALr),e(Me,qE),e(qE,AEe),e(AEe,LLr),e(qE,yLr),e(qE,RK),e(RK,xLr),e(qE,$Lr),e(Me,kLr),e(Me,jE),e(jE,LEe),e(LEe,SLr),e(jE,RLr),e(jE,PK),e(PK,PLr),e(jE,BLr),e(Me,ILr),e(Me,DE),e(DE,yEe),e(yEe,NLr),e(DE,qLr),e(DE,BK),e(BK,jLr),e(DE,DLr),e(Me,GLr),e(Me,GE),e(GE,xEe),e(xEe,OLr),e(GE,VLr),e(GE,IK),e(IK,XLr),e(GE,zLr),e(Me,WLr),e(Me,OE),e(OE,$Ee),e($Ee,QLr),e(OE,ULr),e(OE,NK),e(NK,HLr),e(OE,JLr),e(Me,YLr),e(Me,VE),e(VE,kEe),e(kEe,KLr),e(VE,ZLr),e(VE,qK),e(qK,eyr),e(VE,oyr),e(Me,ryr),e(Me,XE),e(XE,SEe),e(SEe,tyr),e(XE,ayr),e(XE,jK),e(jK,nyr),e(XE,syr),e(Me,lyr),e(Me,zE),e(zE,REe),e(REe,iyr),e(zE,dyr),e(zE,DK),e(DK,cyr),e(zE,fyr),e(Me,myr),e(Me,WE),e(WE,PEe),e(PEe,gyr),e(WE,hyr),e(WE,GK),e(GK,pyr),e(WE,_yr),e(Me,uyr),e(Me,QE),e(QE,BEe),e(BEe,byr),e(QE,vyr),e(QE,OK),e(OK,Fyr),e(QE,Tyr),e(Me,Myr),e(Me,UE),e(UE,IEe),e(IEe,Eyr),e(UE,Cyr),e(UE,VK),e(VK,wyr),e(UE,Ayr),e(Br,Lyr),M(HE,Br,null),b(f,jUe,u),b(f,Sc,u),e(Sc,JE),e(JE,NEe),M(p$,NEe,null),e(Sc,yyr),e(Sc,qEe),e(qEe,xyr),b(f,DUe,u),b(f,lr,u),M(_$,lr,null),e(lr,$yr),e(lr,Rc),e(Rc,kyr),e(Rc,XK),e(XK,Syr),e(Rc,Ryr),e(Rc,zK),e(zK,Pyr),e(Rc,Byr),e(lr,Iyr),e(lr,u$),e(u$,Nyr),e(u$,jEe),e(jEe,qyr),e(u$,jyr),e(lr,Dyr),e(lr,Gt),M(b$,Gt,null),e(Gt,Gyr),e(Gt,DEe),e(DEe,Oyr),e(Gt,Vyr),e(Gt,Pc),e(Pc,Xyr),e(Pc,GEe),e(GEe,zyr),e(Pc,Wyr),e(Pc,WK),e(WK,Qyr),e(Pc,Uyr),e(Gt,Hyr),M(YE,Gt,null),e(lr,Jyr),e(lr,Ir),M(v$,Ir,null),e(Ir,Yyr),e(Ir,OEe),e(OEe,Kyr),e(Ir,Zyr),e(Ir,vn),e(vn,e9r),e(vn,VEe),e(VEe,o9r),e(vn,r9r),e(vn,XEe),e(XEe,t9r),e(vn,a9r),e(vn,zEe),e(zEe,n9r),e(vn,s9r),e(Ir,l9r),e(Ir,Ve),e(Ve,KE),e(KE,WEe),e(WEe,i9r),e(KE,d9r),e(KE,QK),e(QK,c9r),e(KE,f9r),e(Ve,m9r),e(Ve,ZE),e(ZE,QEe),e(QEe,g9r),e(ZE,h9r),e(ZE,UK),e(UK,p9r),e(ZE,_9r),e(Ve,u9r),e(Ve,dl),e(dl,UEe),e(UEe,b9r),e(dl,v9r),e(dl,HK),e(HK,F9r),e(dl,T9r),e(dl,JK),e(JK,M9r),e(dl,E9r),e(Ve,C9r),e(Ve,e4),e(e4,HEe),e(HEe,w9r),e(e4,A9r),e(e4,YK),e(YK,L9r),e(e4,y9r),e(Ve,x9r),e(Ve,o4),e(o4,JEe),e(JEe,$9r),e(o4,k9r),e(o4,KK),e(KK,S9r),e(o4,R9r),e(Ve,P9r),e(Ve,r4),e(r4,YEe),e(YEe,B9r),e(r4,I9r),e(r4,ZK),e(ZK,N9r),e(r4,q9r),e(Ve,j9r),e(Ve,t4),e(t4,KEe),e(KEe,D9r),e(t4,G9r),e(t4,eZ),e(eZ,O9r),e(t4,V9r),e(Ve,X9r),e(Ve,a4),e(a4,ZEe),e(ZEe,z9r),e(a4,W9r),e(a4,oZ),e(oZ,Q9r),e(a4,U9r),e(Ir,H9r),M(n4,Ir,null),b(f,GUe,u),b(f,Bc,u),e(Bc,s4),e(s4,e4e),M(F$,e4e,null),e(Bc,J9r),e(Bc,o4e),e(o4e,Y9r),b(f,OUe,u),b(f,ir,u),M(T$,ir,null),e(ir,K9r),e(ir,Ic),e(Ic,Z9r),e(Ic,rZ),e(rZ,exr),e(Ic,oxr),e(Ic,tZ),e(tZ,rxr),e(Ic,txr),e(ir,axr),e(ir,M$),e(M$,nxr),e(M$,r4e),e(r4e,sxr),e(M$,lxr),e(ir,ixr),e(ir,Ot),M(E$,Ot,null),e(Ot,dxr),e(Ot,t4e),e(t4e,cxr),e(Ot,fxr),e(Ot,Nc),e(Nc,mxr),e(Nc,a4e),e(a4e,gxr),e(Nc,hxr),e(Nc,aZ),e(aZ,pxr),e(Nc,_xr),e(Ot,uxr),M(l4,Ot,null),e(ir,bxr),e(ir,Nr),M(C$,Nr,null),e(Nr,vxr),e(Nr,n4e),e(n4e,Fxr),e(Nr,Txr),e(Nr,Fn),e(Fn,Mxr),e(Fn,s4e),e(s4e,Exr),e(Fn,Cxr),e(Fn,l4e),e(l4e,wxr),e(Fn,Axr),e(Fn,i4e),e(i4e,Lxr),e(Fn,yxr),e(Nr,xxr),e(Nr,w$),e(w$,i4),e(i4,d4e),e(d4e,$xr),e(i4,kxr),e(i4,nZ),e(nZ,Sxr),e(i4,Rxr),e(w$,Pxr),e(w$,d4),e(d4,c4e),e(c4e,Bxr),e(d4,Ixr),e(d4,sZ),e(sZ,Nxr),e(d4,qxr),e(Nr,jxr),M(c4,Nr,null),b(f,VUe,u),b(f,qc,u),e(qc,f4),e(f4,f4e),M(A$,f4e,null),e(qc,Dxr),e(qc,m4e),e(m4e,Gxr),b(f,XUe,u),b(f,dr,u),M(L$,dr,null),e(dr,Oxr),e(dr,jc),e(jc,Vxr),e(jc,lZ),e(lZ,Xxr),e(jc,zxr),e(jc,iZ),e(iZ,Wxr),e(jc,Qxr),e(dr,Uxr),e(dr,y$),e(y$,Hxr),e(y$,g4e),e(g4e,Jxr),e(y$,Yxr),e(dr,Kxr),e(dr,Vt),M(x$,Vt,null),e(Vt,Zxr),e(Vt,h4e),e(h4e,e$r),e(Vt,o$r),e(Vt,Dc),e(Dc,r$r),e(Dc,p4e),e(p4e,t$r),e(Dc,a$r),e(Dc,dZ),e(dZ,n$r),e(Dc,s$r),e(Vt,l$r),M(m4,Vt,null),e(dr,i$r),e(dr,qr),M($$,qr,null),e(qr,d$r),e(qr,_4e),e(_4e,c$r),e(qr,f$r),e(qr,Tn),e(Tn,m$r),e(Tn,u4e),e(u4e,g$r),e(Tn,h$r),e(Tn,b4e),e(b4e,p$r),e(Tn,_$r),e(Tn,v4e),e(v4e,u$r),e(Tn,b$r),e(qr,v$r),e(qr,ie),e(ie,g4),e(g4,F4e),e(F4e,F$r),e(g4,T$r),e(g4,cZ),e(cZ,M$r),e(g4,E$r),e(ie,C$r),e(ie,h4),e(h4,T4e),e(T4e,w$r),e(h4,A$r),e(h4,fZ),e(fZ,L$r),e(h4,y$r),e(ie,x$r),e(ie,p4),e(p4,M4e),e(M4e,$$r),e(p4,k$r),e(p4,mZ),e(mZ,S$r),e(p4,R$r),e(ie,P$r),e(ie,_4),e(_4,E4e),e(E4e,B$r),e(_4,I$r),e(_4,gZ),e(gZ,N$r),e(_4,q$r),e(ie,j$r),e(ie,u4),e(u4,C4e),e(C4e,D$r),e(u4,G$r),e(u4,hZ),e(hZ,O$r),e(u4,V$r),e(ie,X$r),e(ie,b4),e(b4,w4e),e(w4e,z$r),e(b4,W$r),e(b4,pZ),e(pZ,Q$r),e(b4,U$r),e(ie,H$r),e(ie,v4),e(v4,A4e),e(A4e,J$r),e(v4,Y$r),e(v4,_Z),e(_Z,K$r),e(v4,Z$r),e(ie,ekr),e(ie,F4),e(F4,L4e),e(L4e,okr),e(F4,rkr),e(F4,uZ),e(uZ,tkr),e(F4,akr),e(ie,nkr),e(ie,T4),e(T4,y4e),e(y4e,skr),e(T4,lkr),e(T4,bZ),e(bZ,ikr),e(T4,dkr),e(ie,ckr),e(ie,M4),e(M4,x4e),e(x4e,fkr),e(M4,mkr),e(M4,vZ),e(vZ,gkr),e(M4,hkr),e(ie,pkr),e(ie,E4),e(E4,$4e),e($4e,_kr),e(E4,ukr),e(E4,FZ),e(FZ,bkr),e(E4,vkr),e(ie,Fkr),e(ie,C4),e(C4,k4e),e(k4e,Tkr),e(C4,Mkr),e(C4,TZ),e(TZ,Ekr),e(C4,Ckr),e(ie,wkr),e(ie,w4),e(w4,S4e),e(S4e,Akr),e(w4,Lkr),e(w4,MZ),e(MZ,ykr),e(w4,xkr),e(ie,$kr),e(ie,A4),e(A4,R4e),e(R4e,kkr),e(A4,Skr),e(A4,EZ),e(EZ,Rkr),e(A4,Pkr),e(ie,Bkr),e(ie,L4),e(L4,P4e),e(P4e,Ikr),e(L4,Nkr),e(L4,CZ),e(CZ,qkr),e(L4,jkr),e(ie,Dkr),e(ie,y4),e(y4,B4e),e(B4e,Gkr),e(y4,Okr),e(y4,wZ),e(wZ,Vkr),e(y4,Xkr),e(ie,zkr),e(ie,x4),e(x4,I4e),e(I4e,Wkr),e(x4,Qkr),e(x4,AZ),e(AZ,Ukr),e(x4,Hkr),e(ie,Jkr),e(ie,$4),e($4,N4e),e(N4e,Ykr),e($4,Kkr),e($4,LZ),e(LZ,Zkr),e($4,eSr),e(ie,oSr),e(ie,k4),e(k4,q4e),e(q4e,rSr),e(k4,tSr),e(k4,yZ),e(yZ,aSr),e(k4,nSr),e(ie,sSr),e(ie,S4),e(S4,j4e),e(j4e,lSr),e(S4,iSr),e(S4,xZ),e(xZ,dSr),e(S4,cSr),e(qr,fSr),M(R4,qr,null),b(f,zUe,u),b(f,Gc,u),e(Gc,P4),e(P4,D4e),M(k$,D4e,null),e(Gc,mSr),e(Gc,G4e),e(G4e,gSr),b(f,WUe,u),b(f,cr,u),M(S$,cr,null),e(cr,hSr),e(cr,Oc),e(Oc,pSr),e(Oc,$Z),e($Z,_Sr),e(Oc,uSr),e(Oc,kZ),e(kZ,bSr),e(Oc,vSr),e(cr,FSr),e(cr,R$),e(R$,TSr),e(R$,O4e),e(O4e,MSr),e(R$,ESr),e(cr,CSr),e(cr,Xt),M(P$,Xt,null),e(Xt,wSr),e(Xt,V4e),e(V4e,ASr),e(Xt,LSr),e(Xt,Vc),e(Vc,ySr),e(Vc,X4e),e(X4e,xSr),e(Vc,$Sr),e(Vc,SZ),e(SZ,kSr),e(Vc,SSr),e(Xt,RSr),M(B4,Xt,null),e(cr,PSr),e(cr,jr),M(B$,jr,null),e(jr,BSr),e(jr,z4e),e(z4e,ISr),e(jr,NSr),e(jr,Mn),e(Mn,qSr),e(Mn,W4e),e(W4e,jSr),e(Mn,DSr),e(Mn,Q4e),e(Q4e,GSr),e(Mn,OSr),e(Mn,U4e),e(U4e,VSr),e(Mn,XSr),e(jr,zSr),e(jr,ye),e(ye,I4),e(I4,H4e),e(H4e,WSr),e(I4,QSr),e(I4,RZ),e(RZ,USr),e(I4,HSr),e(ye,JSr),e(ye,N4),e(N4,J4e),e(J4e,YSr),e(N4,KSr),e(N4,PZ),e(PZ,ZSr),e(N4,eRr),e(ye,oRr),e(ye,q4),e(q4,Y4e),e(Y4e,rRr),e(q4,tRr),e(q4,BZ),e(BZ,aRr),e(q4,nRr),e(ye,sRr),e(ye,j4),e(j4,K4e),e(K4e,lRr),e(j4,iRr),e(j4,IZ),e(IZ,dRr),e(j4,cRr),e(ye,fRr),e(ye,D4),e(D4,Z4e),e(Z4e,mRr),e(D4,gRr),e(D4,NZ),e(NZ,hRr),e(D4,pRr),e(ye,_Rr),e(ye,G4),e(G4,eCe),e(eCe,uRr),e(G4,bRr),e(G4,qZ),e(qZ,vRr),e(G4,FRr),e(ye,TRr),e(ye,O4),e(O4,oCe),e(oCe,MRr),e(O4,ERr),e(O4,jZ),e(jZ,CRr),e(O4,wRr),e(ye,ARr),e(ye,V4),e(V4,rCe),e(rCe,LRr),e(V4,yRr),e(V4,DZ),e(DZ,xRr),e(V4,$Rr),e(ye,kRr),e(ye,X4),e(X4,tCe),e(tCe,SRr),e(X4,RRr),e(X4,GZ),e(GZ,PRr),e(X4,BRr),e(ye,IRr),e(ye,z4),e(z4,aCe),e(aCe,NRr),e(z4,qRr),e(z4,OZ),e(OZ,jRr),e(z4,DRr),e(jr,GRr),M(W4,jr,null),b(f,QUe,u),b(f,Xc,u),e(Xc,Q4),e(Q4,nCe),M(I$,nCe,null),e(Xc,ORr),e(Xc,sCe),e(sCe,VRr),b(f,UUe,u),b(f,fr,u),M(N$,fr,null),e(fr,XRr),e(fr,zc),e(zc,zRr),e(zc,VZ),e(VZ,WRr),e(zc,QRr),e(zc,XZ),e(XZ,URr),e(zc,HRr),e(fr,JRr),e(fr,q$),e(q$,YRr),e(q$,lCe),e(lCe,KRr),e(q$,ZRr),e(fr,ePr),e(fr,zt),M(j$,zt,null),e(zt,oPr),e(zt,iCe),e(iCe,rPr),e(zt,tPr),e(zt,Wc),e(Wc,aPr),e(Wc,dCe),e(dCe,nPr),e(Wc,sPr),e(Wc,zZ),e(zZ,lPr),e(Wc,iPr),e(zt,dPr),M(U4,zt,null),e(fr,cPr),e(fr,Dr),M(D$,Dr,null),e(Dr,fPr),e(Dr,cCe),e(cCe,mPr),e(Dr,gPr),e(Dr,En),e(En,hPr),e(En,fCe),e(fCe,pPr),e(En,_Pr),e(En,mCe),e(mCe,uPr),e(En,bPr),e(En,gCe),e(gCe,vPr),e(En,FPr),e(Dr,TPr),e(Dr,te),e(te,H4),e(H4,hCe),e(hCe,MPr),e(H4,EPr),e(H4,WZ),e(WZ,CPr),e(H4,wPr),e(te,APr),e(te,J4),e(J4,pCe),e(pCe,LPr),e(J4,yPr),e(J4,QZ),e(QZ,xPr),e(J4,$Pr),e(te,kPr),e(te,Y4),e(Y4,_Ce),e(_Ce,SPr),e(Y4,RPr),e(Y4,UZ),e(UZ,PPr),e(Y4,BPr),e(te,IPr),e(te,K4),e(K4,uCe),e(uCe,NPr),e(K4,qPr),e(K4,HZ),e(HZ,jPr),e(K4,DPr),e(te,GPr),e(te,Z4),e(Z4,bCe),e(bCe,OPr),e(Z4,VPr),e(Z4,JZ),e(JZ,XPr),e(Z4,zPr),e(te,WPr),e(te,eC),e(eC,vCe),e(vCe,QPr),e(eC,UPr),e(eC,YZ),e(YZ,HPr),e(eC,JPr),e(te,YPr),e(te,oC),e(oC,FCe),e(FCe,KPr),e(oC,ZPr),e(oC,KZ),e(KZ,eBr),e(oC,oBr),e(te,rBr),e(te,rC),e(rC,TCe),e(TCe,tBr),e(rC,aBr),e(rC,ZZ),e(ZZ,nBr),e(rC,sBr),e(te,lBr),e(te,tC),e(tC,MCe),e(MCe,iBr),e(tC,dBr),e(tC,eee),e(eee,cBr),e(tC,fBr),e(te,mBr),e(te,aC),e(aC,ECe),e(ECe,gBr),e(aC,hBr),e(aC,oee),e(oee,pBr),e(aC,_Br),e(te,uBr),e(te,nC),e(nC,CCe),e(CCe,bBr),e(nC,vBr),e(nC,ree),e(ree,FBr),e(nC,TBr),e(te,MBr),e(te,sC),e(sC,wCe),e(wCe,EBr),e(sC,CBr),e(sC,tee),e(tee,wBr),e(sC,ABr),e(te,LBr),e(te,lC),e(lC,ACe),e(ACe,yBr),e(lC,xBr),e(lC,aee),e(aee,$Br),e(lC,kBr),e(te,SBr),e(te,iC),e(iC,LCe),e(LCe,RBr),e(iC,PBr),e(iC,nee),e(nee,BBr),e(iC,IBr),e(te,NBr),e(te,dC),e(dC,yCe),e(yCe,qBr),e(dC,jBr),e(dC,see),e(see,DBr),e(dC,GBr),e(te,OBr),e(te,cC),e(cC,xCe),e(xCe,VBr),e(cC,XBr),e(cC,lee),e(lee,zBr),e(cC,WBr),e(te,QBr),e(te,fC),e(fC,$Ce),e($Ce,UBr),e(fC,HBr),e(fC,iee),e(iee,JBr),e(fC,YBr),e(te,KBr),e(te,mC),e(mC,kCe),e(kCe,ZBr),e(mC,eIr),e(mC,dee),e(dee,oIr),e(mC,rIr),e(te,tIr),e(te,gC),e(gC,SCe),e(SCe,aIr),e(gC,nIr),e(gC,cee),e(cee,sIr),e(gC,lIr),e(te,iIr),e(te,hC),e(hC,RCe),e(RCe,dIr),e(hC,cIr),e(hC,fee),e(fee,fIr),e(hC,mIr),e(te,gIr),e(te,pC),e(pC,PCe),e(PCe,hIr),e(pC,pIr),e(pC,mee),e(mee,_Ir),e(pC,uIr),e(te,bIr),e(te,_C),e(_C,BCe),e(BCe,vIr),e(_C,FIr),e(_C,gee),e(gee,TIr),e(_C,MIr),e(te,EIr),e(te,uC),e(uC,ICe),e(ICe,CIr),e(uC,wIr),e(uC,hee),e(hee,AIr),e(uC,LIr),e(te,yIr),e(te,bC),e(bC,NCe),e(NCe,xIr),e(bC,$Ir),e(bC,pee),e(pee,kIr),e(bC,SIr),e(te,RIr),e(te,vC),e(vC,qCe),e(qCe,PIr),e(vC,BIr),e(vC,_ee),e(_ee,IIr),e(vC,NIr),e(te,qIr),e(te,FC),e(FC,jCe),e(jCe,jIr),e(FC,DIr),e(FC,uee),e(uee,GIr),e(FC,OIr),e(Dr,VIr),M(TC,Dr,null),b(f,HUe,u),b(f,Qc,u),e(Qc,MC),e(MC,DCe),M(G$,DCe,null),e(Qc,XIr),e(Qc,GCe),e(GCe,zIr),b(f,JUe,u),b(f,mr,u),M(O$,mr,null),e(mr,WIr),e(mr,Uc),e(Uc,QIr),e(Uc,bee),e(bee,UIr),e(Uc,HIr),e(Uc,vee),e(vee,JIr),e(Uc,YIr),e(mr,KIr),e(mr,V$),e(V$,ZIr),e(V$,OCe),e(OCe,eNr),e(V$,oNr),e(mr,rNr),e(mr,Wt),M(X$,Wt,null),e(Wt,tNr),e(Wt,VCe),e(VCe,aNr),e(Wt,nNr),e(Wt,Hc),e(Hc,sNr),e(Hc,XCe),e(XCe,lNr),e(Hc,iNr),e(Hc,Fee),e(Fee,dNr),e(Hc,cNr),e(Wt,fNr),M(EC,Wt,null),e(mr,mNr),e(mr,Gr),M(z$,Gr,null),e(Gr,gNr),e(Gr,zCe),e(zCe,hNr),e(Gr,pNr),e(Gr,Cn),e(Cn,_Nr),e(Cn,WCe),e(WCe,uNr),e(Cn,bNr),e(Cn,QCe),e(QCe,vNr),e(Cn,FNr),e(Cn,UCe),e(UCe,TNr),e(Cn,MNr),e(Gr,ENr),e(Gr,ve),e(ve,CC),e(CC,HCe),e(HCe,CNr),e(CC,wNr),e(CC,Tee),e(Tee,ANr),e(CC,LNr),e(ve,yNr),e(ve,wC),e(wC,JCe),e(JCe,xNr),e(wC,$Nr),e(wC,Mee),e(Mee,kNr),e(wC,SNr),e(ve,RNr),e(ve,AC),e(AC,YCe),e(YCe,PNr),e(AC,BNr),e(AC,Eee),e(Eee,INr),e(AC,NNr),e(ve,qNr),e(ve,LC),e(LC,KCe),e(KCe,jNr),e(LC,DNr),e(LC,Cee),e(Cee,GNr),e(LC,ONr),e(ve,VNr),e(ve,yC),e(yC,ZCe),e(ZCe,XNr),e(yC,zNr),e(yC,wee),e(wee,WNr),e(yC,QNr),e(ve,UNr),e(ve,xC),e(xC,e3e),e(e3e,HNr),e(xC,JNr),e(xC,Aee),e(Aee,YNr),e(xC,KNr),e(ve,ZNr),e(ve,$C),e($C,o3e),e(o3e,eqr),e($C,oqr),e($C,Lee),e(Lee,rqr),e($C,tqr),e(ve,aqr),e(ve,kC),e(kC,r3e),e(r3e,nqr),e(kC,sqr),e(kC,yee),e(yee,lqr),e(kC,iqr),e(ve,dqr),e(ve,SC),e(SC,t3e),e(t3e,cqr),e(SC,fqr),e(SC,xee),e(xee,mqr),e(SC,gqr),e(ve,hqr),e(ve,RC),e(RC,a3e),e(a3e,pqr),e(RC,_qr),e(RC,$ee),e($ee,uqr),e(RC,bqr),e(ve,vqr),e(ve,PC),e(PC,n3e),e(n3e,Fqr),e(PC,Tqr),e(PC,kee),e(kee,Mqr),e(PC,Eqr),e(ve,Cqr),e(ve,BC),e(BC,s3e),e(s3e,wqr),e(BC,Aqr),e(BC,See),e(See,Lqr),e(BC,yqr),e(ve,xqr),e(ve,IC),e(IC,l3e),e(l3e,$qr),e(IC,kqr),e(IC,Ree),e(Ree,Sqr),e(IC,Rqr),e(ve,Pqr),e(ve,NC),e(NC,i3e),e(i3e,Bqr),e(NC,Iqr),e(NC,Pee),e(Pee,Nqr),e(NC,qqr),e(ve,jqr),e(ve,qC),e(qC,d3e),e(d3e,Dqr),e(qC,Gqr),e(qC,Bee),e(Bee,Oqr),e(qC,Vqr),e(ve,Xqr),e(ve,jC),e(jC,c3e),e(c3e,zqr),e(jC,Wqr),e(jC,Iee),e(Iee,Qqr),e(jC,Uqr),e(ve,Hqr),e(ve,DC),e(DC,f3e),e(f3e,Jqr),e(DC,Yqr),e(DC,Nee),e(Nee,Kqr),e(DC,Zqr),e(Gr,ejr),M(GC,Gr,null),b(f,YUe,u),b(f,Jc,u),e(Jc,OC),e(OC,m3e),M(W$,m3e,null),e(Jc,ojr),e(Jc,g3e),e(g3e,rjr),b(f,KUe,u),b(f,gr,u),M(Q$,gr,null),e(gr,tjr),e(gr,Yc),e(Yc,ajr),e(Yc,qee),e(qee,njr),e(Yc,sjr),e(Yc,jee),e(jee,ljr),e(Yc,ijr),e(gr,djr),e(gr,U$),e(U$,cjr),e(U$,h3e),e(h3e,fjr),e(U$,mjr),e(gr,gjr),e(gr,Qt),M(H$,Qt,null),e(Qt,hjr),e(Qt,p3e),e(p3e,pjr),e(Qt,_jr),e(Qt,Kc),e(Kc,ujr),e(Kc,_3e),e(_3e,bjr),e(Kc,vjr),e(Kc,Dee),e(Dee,Fjr),e(Kc,Tjr),e(Qt,Mjr),M(VC,Qt,null),e(gr,Ejr),e(gr,Or),M(J$,Or,null),e(Or,Cjr),e(Or,u3e),e(u3e,wjr),e(Or,Ajr),e(Or,wn),e(wn,Ljr),e(wn,b3e),e(b3e,yjr),e(wn,xjr),e(wn,v3e),e(v3e,$jr),e(wn,kjr),e(wn,F3e),e(F3e,Sjr),e(wn,Rjr),e(Or,Pjr),e(Or,Y$),e(Y$,XC),e(XC,T3e),e(T3e,Bjr),e(XC,Ijr),e(XC,Gee),e(Gee,Njr),e(XC,qjr),e(Y$,jjr),e(Y$,zC),e(zC,M3e),e(M3e,Djr),e(zC,Gjr),e(zC,Oee),e(Oee,Ojr),e(zC,Vjr),e(Or,Xjr),M(WC,Or,null),b(f,ZUe,u),b(f,Zc,u),e(Zc,QC),e(QC,E3e),M(K$,E3e,null),e(Zc,zjr),e(Zc,C3e),e(C3e,Wjr),b(f,eHe,u),b(f,hr,u),M(Z$,hr,null),e(hr,Qjr),e(hr,ef),e(ef,Ujr),e(ef,Vee),e(Vee,Hjr),e(ef,Jjr),e(ef,Xee),e(Xee,Yjr),e(ef,Kjr),e(hr,Zjr),e(hr,ek),e(ek,eDr),e(ek,w3e),e(w3e,oDr),e(ek,rDr),e(hr,tDr),e(hr,Ut),M(ok,Ut,null),e(Ut,aDr),e(Ut,A3e),e(A3e,nDr),e(Ut,sDr),e(Ut,of),e(of,lDr),e(of,L3e),e(L3e,iDr),e(of,dDr),e(of,zee),e(zee,cDr),e(of,fDr),e(Ut,mDr),M(UC,Ut,null),e(hr,gDr),e(hr,Vr),M(rk,Vr,null),e(Vr,hDr),e(Vr,y3e),e(y3e,pDr),e(Vr,_Dr),e(Vr,An),e(An,uDr),e(An,x3e),e(x3e,bDr),e(An,vDr),e(An,$3e),e($3e,FDr),e(An,TDr),e(An,k3e),e(k3e,MDr),e(An,EDr),e(Vr,CDr),e(Vr,S3e),e(S3e,HC),e(HC,R3e),e(R3e,wDr),e(HC,ADr),e(HC,Wee),e(Wee,LDr),e(HC,yDr),e(Vr,xDr),M(JC,Vr,null),b(f,oHe,u),b(f,rf,u),e(rf,YC),e(YC,P3e),M(tk,P3e,null),e(rf,$Dr),e(rf,B3e),e(B3e,kDr),b(f,rHe,u),b(f,pr,u),M(ak,pr,null),e(pr,SDr),e(pr,tf),e(tf,RDr),e(tf,Qee),e(Qee,PDr),e(tf,BDr),e(tf,Uee),e(Uee,IDr),e(tf,NDr),e(pr,qDr),e(pr,nk),e(nk,jDr),e(nk,I3e),e(I3e,DDr),e(nk,GDr),e(pr,ODr),e(pr,Ht),M(sk,Ht,null),e(Ht,VDr),e(Ht,N3e),e(N3e,XDr),e(Ht,zDr),e(Ht,af),e(af,WDr),e(af,q3e),e(q3e,QDr),e(af,UDr),e(af,Hee),e(Hee,HDr),e(af,JDr),e(Ht,YDr),M(KC,Ht,null),e(pr,KDr),e(pr,Xr),M(lk,Xr,null),e(Xr,ZDr),e(Xr,j3e),e(j3e,eGr),e(Xr,oGr),e(Xr,Ln),e(Ln,rGr),e(Ln,D3e),e(D3e,tGr),e(Ln,aGr),e(Ln,G3e),e(G3e,nGr),e(Ln,sGr),e(Ln,O3e),e(O3e,lGr),e(Ln,iGr),e(Xr,dGr),e(Xr,de),e(de,ZC),e(ZC,V3e),e(V3e,cGr),e(ZC,fGr),e(ZC,Jee),e(Jee,mGr),e(ZC,gGr),e(de,hGr),e(de,e3),e(e3,X3e),e(X3e,pGr),e(e3,_Gr),e(e3,Yee),e(Yee,uGr),e(e3,bGr),e(de,vGr),e(de,o3),e(o3,z3e),e(z3e,FGr),e(o3,TGr),e(o3,Kee),e(Kee,MGr),e(o3,EGr),e(de,CGr),e(de,r3),e(r3,W3e),e(W3e,wGr),e(r3,AGr),e(r3,Zee),e(Zee,LGr),e(r3,yGr),e(de,xGr),e(de,t3),e(t3,Q3e),e(Q3e,$Gr),e(t3,kGr),e(t3,eoe),e(eoe,SGr),e(t3,RGr),e(de,PGr),e(de,a3),e(a3,U3e),e(U3e,BGr),e(a3,IGr),e(a3,ooe),e(ooe,NGr),e(a3,qGr),e(de,jGr),e(de,n3),e(n3,H3e),e(H3e,DGr),e(n3,GGr),e(n3,roe),e(roe,OGr),e(n3,VGr),e(de,XGr),e(de,s3),e(s3,J3e),e(J3e,zGr),e(s3,WGr),e(s3,toe),e(toe,QGr),e(s3,UGr),e(de,HGr),e(de,l3),e(l3,Y3e),e(Y3e,JGr),e(l3,YGr),e(l3,aoe),e(aoe,KGr),e(l3,ZGr),e(de,eOr),e(de,i3),e(i3,K3e),e(K3e,oOr),e(i3,rOr),e(i3,noe),e(noe,tOr),e(i3,aOr),e(de,nOr),e(de,d3),e(d3,Z3e),e(Z3e,sOr),e(d3,lOr),e(d3,soe),e(soe,iOr),e(d3,dOr),e(de,cOr),e(de,c3),e(c3,e5e),e(e5e,fOr),e(c3,mOr),e(c3,loe),e(loe,gOr),e(c3,hOr),e(de,pOr),e(de,f3),e(f3,o5e),e(o5e,_Or),e(f3,uOr),e(f3,ioe),e(ioe,bOr),e(f3,vOr),e(de,FOr),e(de,m3),e(m3,r5e),e(r5e,TOr),e(m3,MOr),e(m3,doe),e(doe,EOr),e(m3,COr),e(de,wOr),e(de,g3),e(g3,t5e),e(t5e,AOr),e(g3,LOr),e(g3,coe),e(coe,yOr),e(g3,xOr),e(de,$Or),e(de,h3),e(h3,a5e),e(a5e,kOr),e(h3,SOr),e(h3,foe),e(foe,ROr),e(h3,POr),e(de,BOr),e(de,p3),e(p3,n5e),e(n5e,IOr),e(p3,NOr),e(p3,moe),e(moe,qOr),e(p3,jOr),e(de,DOr),e(de,_3),e(_3,s5e),e(s5e,GOr),e(_3,OOr),e(_3,goe),e(goe,VOr),e(_3,XOr),e(de,zOr),e(de,u3),e(u3,l5e),e(l5e,WOr),e(u3,QOr),e(u3,hoe),e(hoe,UOr),e(u3,HOr),e(de,JOr),e(de,b3),e(b3,i5e),e(i5e,YOr),e(b3,KOr),e(b3,poe),e(poe,ZOr),e(b3,eVr),e(Xr,oVr),M(v3,Xr,null),b(f,tHe,u),b(f,nf,u),e(nf,F3),e(F3,d5e),M(ik,d5e,null),e(nf,rVr),e(nf,c5e),e(c5e,tVr),b(f,aHe,u),b(f,_r,u),M(dk,_r,null),e(_r,aVr),e(_r,sf),e(sf,nVr),e(sf,_oe),e(_oe,sVr),e(sf,lVr),e(sf,uoe),e(uoe,iVr),e(sf,dVr),e(_r,cVr),e(_r,ck),e(ck,fVr),e(ck,f5e),e(f5e,mVr),e(ck,gVr),e(_r,hVr),e(_r,Jt),M(fk,Jt,null),e(Jt,pVr),e(Jt,m5e),e(m5e,_Vr),e(Jt,uVr),e(Jt,lf),e(lf,bVr),e(lf,g5e),e(g5e,vVr),e(lf,FVr),e(lf,boe),e(boe,TVr),e(lf,MVr),e(Jt,EVr),M(T3,Jt,null),e(_r,CVr),e(_r,zr),M(mk,zr,null),e(zr,wVr),e(zr,h5e),e(h5e,AVr),e(zr,LVr),e(zr,yn),e(yn,yVr),e(yn,p5e),e(p5e,xVr),e(yn,$Vr),e(yn,_5e),e(_5e,kVr),e(yn,SVr),e(yn,u5e),e(u5e,RVr),e(yn,PVr),e(zr,BVr),e(zr,ce),e(ce,M3),e(M3,b5e),e(b5e,IVr),e(M3,NVr),e(M3,voe),e(voe,qVr),e(M3,jVr),e(ce,DVr),e(ce,E3),e(E3,v5e),e(v5e,GVr),e(E3,OVr),e(E3,Foe),e(Foe,VVr),e(E3,XVr),e(ce,zVr),e(ce,C3),e(C3,F5e),e(F5e,WVr),e(C3,QVr),e(C3,Toe),e(Toe,UVr),e(C3,HVr),e(ce,JVr),e(ce,w3),e(w3,T5e),e(T5e,YVr),e(w3,KVr),e(w3,Moe),e(Moe,ZVr),e(w3,eXr),e(ce,oXr),e(ce,A3),e(A3,M5e),e(M5e,rXr),e(A3,tXr),e(A3,Eoe),e(Eoe,aXr),e(A3,nXr),e(ce,sXr),e(ce,L3),e(L3,E5e),e(E5e,lXr),e(L3,iXr),e(L3,Coe),e(Coe,dXr),e(L3,cXr),e(ce,fXr),e(ce,y3),e(y3,C5e),e(C5e,mXr),e(y3,gXr),e(y3,woe),e(woe,hXr),e(y3,pXr),e(ce,_Xr),e(ce,x3),e(x3,w5e),e(w5e,uXr),e(x3,bXr),e(x3,Aoe),e(Aoe,vXr),e(x3,FXr),e(ce,TXr),e(ce,$3),e($3,A5e),e(A5e,MXr),e($3,EXr),e($3,Loe),e(Loe,CXr),e($3,wXr),e(ce,AXr),e(ce,k3),e(k3,L5e),e(L5e,LXr),e(k3,yXr),e(k3,yoe),e(yoe,xXr),e(k3,$Xr),e(ce,kXr),e(ce,S3),e(S3,y5e),e(y5e,SXr),e(S3,RXr),e(S3,xoe),e(xoe,PXr),e(S3,BXr),e(ce,IXr),e(ce,R3),e(R3,x5e),e(x5e,NXr),e(R3,qXr),e(R3,$oe),e($oe,jXr),e(R3,DXr),e(ce,GXr),e(ce,P3),e(P3,$5e),e($5e,OXr),e(P3,VXr),e(P3,koe),e(koe,XXr),e(P3,zXr),e(ce,WXr),e(ce,B3),e(B3,k5e),e(k5e,QXr),e(B3,UXr),e(B3,Soe),e(Soe,HXr),e(B3,JXr),e(ce,YXr),e(ce,I3),e(I3,S5e),e(S5e,KXr),e(I3,ZXr),e(I3,Roe),e(Roe,ezr),e(I3,ozr),e(ce,rzr),e(ce,N3),e(N3,R5e),e(R5e,tzr),e(N3,azr),e(N3,Poe),e(Poe,nzr),e(N3,szr),e(ce,lzr),e(ce,q3),e(q3,P5e),e(P5e,izr),e(q3,dzr),e(q3,Boe),e(Boe,czr),e(q3,fzr),e(ce,mzr),e(ce,j3),e(j3,B5e),e(B5e,gzr),e(j3,hzr),e(j3,Ioe),e(Ioe,pzr),e(j3,_zr),e(ce,uzr),e(ce,D3),e(D3,I5e),e(I5e,bzr),e(D3,vzr),e(D3,Noe),e(Noe,Fzr),e(D3,Tzr),e(ce,Mzr),e(ce,G3),e(G3,N5e),e(N5e,Ezr),e(G3,Czr),e(G3,qoe),e(qoe,wzr),e(G3,Azr),e(zr,Lzr),M(O3,zr,null),b(f,nHe,u),b(f,df,u),e(df,V3),e(V3,q5e),M(gk,q5e,null),e(df,yzr),e(df,j5e),e(j5e,xzr),b(f,sHe,u),b(f,ur,u),M(hk,ur,null),e(ur,$zr),e(ur,cf),e(cf,kzr),e(cf,joe),e(joe,Szr),e(cf,Rzr),e(cf,Doe),e(Doe,Pzr),e(cf,Bzr),e(ur,Izr),e(ur,pk),e(pk,Nzr),e(pk,D5e),e(D5e,qzr),e(pk,jzr),e(ur,Dzr),e(ur,Yt),M(_k,Yt,null),e(Yt,Gzr),e(Yt,G5e),e(G5e,Ozr),e(Yt,Vzr),e(Yt,ff),e(ff,Xzr),e(ff,O5e),e(O5e,zzr),e(ff,Wzr),e(ff,Goe),e(Goe,Qzr),e(ff,Uzr),e(Yt,Hzr),M(X3,Yt,null),e(ur,Jzr),e(ur,Wr),M(uk,Wr,null),e(Wr,Yzr),e(Wr,V5e),e(V5e,Kzr),e(Wr,Zzr),e(Wr,xn),e(xn,eWr),e(xn,X5e),e(X5e,oWr),e(xn,rWr),e(xn,z5e),e(z5e,tWr),e(xn,aWr),e(xn,W5e),e(W5e,nWr),e(xn,sWr),e(Wr,lWr),e(Wr,Q5e),e(Q5e,z3),e(z3,U5e),e(U5e,iWr),e(z3,dWr),e(z3,Ooe),e(Ooe,cWr),e(z3,fWr),e(Wr,mWr),M(W3,Wr,null),b(f,lHe,u),b(f,mf,u),e(mf,Q3),e(Q3,H5e),M(bk,H5e,null),e(mf,gWr),e(mf,J5e),e(J5e,hWr),b(f,iHe,u),b(f,br,u),M(vk,br,null),e(br,pWr),e(br,gf),e(gf,_Wr),e(gf,Voe),e(Voe,uWr),e(gf,bWr),e(gf,Xoe),e(Xoe,vWr),e(gf,FWr),e(br,TWr),e(br,Fk),e(Fk,MWr),e(Fk,Y5e),e(Y5e,EWr),e(Fk,CWr),e(br,wWr),e(br,Kt),M(Tk,Kt,null),e(Kt,AWr),e(Kt,K5e),e(K5e,LWr),e(Kt,yWr),e(Kt,hf),e(hf,xWr),e(hf,Z5e),e(Z5e,$Wr),e(hf,kWr),e(hf,zoe),e(zoe,SWr),e(hf,RWr),e(Kt,PWr),M(U3,Kt,null),e(br,BWr),e(br,Qr),M(Mk,Qr,null),e(Qr,IWr),e(Qr,ewe),e(ewe,NWr),e(Qr,qWr),e(Qr,$n),e($n,jWr),e($n,owe),e(owe,DWr),e($n,GWr),e($n,rwe),e(rwe,OWr),e($n,VWr),e($n,twe),e(twe,XWr),e($n,zWr),e(Qr,WWr),e(Qr,awe),e(awe,H3),e(H3,nwe),e(nwe,QWr),e(H3,UWr),e(H3,Woe),e(Woe,HWr),e(H3,JWr),e(Qr,YWr),M(J3,Qr,null),b(f,dHe,u),b(f,pf,u),e(pf,Y3),e(Y3,swe),M(Ek,swe,null),e(pf,KWr),e(pf,lwe),e(lwe,ZWr),b(f,cHe,u),b(f,vr,u),M(Ck,vr,null),e(vr,eQr),e(vr,_f),e(_f,oQr),e(_f,Qoe),e(Qoe,rQr),e(_f,tQr),e(_f,Uoe),e(Uoe,aQr),e(_f,nQr),e(vr,sQr),e(vr,wk),e(wk,lQr),e(wk,iwe),e(iwe,iQr),e(wk,dQr),e(vr,cQr),e(vr,Zt),M(Ak,Zt,null),e(Zt,fQr),e(Zt,dwe),e(dwe,mQr),e(Zt,gQr),e(Zt,uf),e(uf,hQr),e(uf,cwe),e(cwe,pQr),e(uf,_Qr),e(uf,Hoe),e(Hoe,uQr),e(uf,bQr),e(Zt,vQr),M(K3,Zt,null),e(vr,FQr),e(vr,Ur),M(Lk,Ur,null),e(Ur,TQr),e(Ur,fwe),e(fwe,MQr),e(Ur,EQr),e(Ur,kn),e(kn,CQr),e(kn,mwe),e(mwe,wQr),e(kn,AQr),e(kn,gwe),e(gwe,LQr),e(kn,yQr),e(kn,hwe),e(hwe,xQr),e(kn,$Qr),e(Ur,kQr),e(Ur,re),e(re,Z3),e(Z3,pwe),e(pwe,SQr),e(Z3,RQr),e(Z3,Joe),e(Joe,PQr),e(Z3,BQr),e(re,IQr),e(re,e5),e(e5,_we),e(_we,NQr),e(e5,qQr),e(e5,Yoe),e(Yoe,jQr),e(e5,DQr),e(re,GQr),e(re,o5),e(o5,uwe),e(uwe,OQr),e(o5,VQr),e(o5,Koe),e(Koe,XQr),e(o5,zQr),e(re,WQr),e(re,r5),e(r5,bwe),e(bwe,QQr),e(r5,UQr),e(r5,Zoe),e(Zoe,HQr),e(r5,JQr),e(re,YQr),e(re,t5),e(t5,vwe),e(vwe,KQr),e(t5,ZQr),e(t5,ere),e(ere,eUr),e(t5,oUr),e(re,rUr),e(re,a5),e(a5,Fwe),e(Fwe,tUr),e(a5,aUr),e(a5,ore),e(ore,nUr),e(a5,sUr),e(re,lUr),e(re,n5),e(n5,Twe),e(Twe,iUr),e(n5,dUr),e(n5,rre),e(rre,cUr),e(n5,fUr),e(re,mUr),e(re,s5),e(s5,Mwe),e(Mwe,gUr),e(s5,hUr),e(s5,tre),e(tre,pUr),e(s5,_Ur),e(re,uUr),e(re,l5),e(l5,Ewe),e(Ewe,bUr),e(l5,vUr),e(l5,are),e(are,FUr),e(l5,TUr),e(re,MUr),e(re,i5),e(i5,Cwe),e(Cwe,EUr),e(i5,CUr),e(i5,nre),e(nre,wUr),e(i5,AUr),e(re,LUr),e(re,d5),e(d5,wwe),e(wwe,yUr),e(d5,xUr),e(d5,sre),e(sre,$Ur),e(d5,kUr),e(re,SUr),e(re,c5),e(c5,Awe),e(Awe,RUr),e(c5,PUr),e(c5,lre),e(lre,BUr),e(c5,IUr),e(re,NUr),e(re,f5),e(f5,Lwe),e(Lwe,qUr),e(f5,jUr),e(f5,ire),e(ire,DUr),e(f5,GUr),e(re,OUr),e(re,m5),e(m5,ywe),e(ywe,VUr),e(m5,XUr),e(m5,dre),e(dre,zUr),e(m5,WUr),e(re,QUr),e(re,g5),e(g5,xwe),e(xwe,UUr),e(g5,HUr),e(g5,cre),e(cre,JUr),e(g5,YUr),e(re,KUr),e(re,h5),e(h5,$we),e($we,ZUr),e(h5,eHr),e(h5,fre),e(fre,oHr),e(h5,rHr),e(re,tHr),e(re,p5),e(p5,kwe),e(kwe,aHr),e(p5,nHr),e(p5,mre),e(mre,sHr),e(p5,lHr),e(re,iHr),e(re,_5),e(_5,Swe),e(Swe,dHr),e(_5,cHr),e(_5,gre),e(gre,fHr),e(_5,mHr),e(re,gHr),e(re,u5),e(u5,Rwe),e(Rwe,hHr),e(u5,pHr),e(u5,hre),e(hre,_Hr),e(u5,uHr),e(re,bHr),e(re,b5),e(b5,Pwe),e(Pwe,vHr),e(b5,FHr),e(b5,pre),e(pre,THr),e(b5,MHr),e(re,EHr),e(re,v5),e(v5,Bwe),e(Bwe,CHr),e(v5,wHr),e(v5,_re),e(_re,AHr),e(v5,LHr),e(re,yHr),e(re,F5),e(F5,Iwe),e(Iwe,xHr),e(F5,$Hr),e(F5,ure),e(ure,kHr),e(F5,SHr),e(re,RHr),e(re,T5),e(T5,Nwe),e(Nwe,PHr),e(T5,BHr),e(T5,bre),e(bre,IHr),e(T5,NHr),e(re,qHr),e(re,M5),e(M5,qwe),e(qwe,jHr),e(M5,DHr),e(M5,vre),e(vre,GHr),e(M5,OHr),e(re,VHr),e(re,E5),e(E5,jwe),e(jwe,XHr),e(E5,zHr),e(E5,Fre),e(Fre,WHr),e(E5,QHr),e(re,UHr),e(re,C5),e(C5,Dwe),e(Dwe,HHr),e(C5,JHr),e(C5,Tre),e(Tre,YHr),e(C5,KHr),e(re,ZHr),e(re,w5),e(w5,Gwe),e(Gwe,eJr),e(w5,oJr),e(w5,Mre),e(Mre,rJr),e(w5,tJr),e(Ur,aJr),M(A5,Ur,null),b(f,fHe,u),b(f,bf,u),e(bf,L5),e(L5,Owe),M(yk,Owe,null),e(bf,nJr),e(bf,Vwe),e(Vwe,sJr),b(f,mHe,u),b(f,Fr,u),M(xk,Fr,null),e(Fr,lJr),e(Fr,vf),e(vf,iJr),e(vf,Ere),e(Ere,dJr),e(vf,cJr),e(vf,Cre),e(Cre,fJr),e(vf,mJr),e(Fr,gJr),e(Fr,$k),e($k,hJr),e($k,Xwe),e(Xwe,pJr),e($k,_Jr),e(Fr,uJr),e(Fr,ea),M(kk,ea,null),e(ea,bJr),e(ea,zwe),e(zwe,vJr),e(ea,FJr),e(ea,Ff),e(Ff,TJr),e(Ff,Wwe),e(Wwe,MJr),e(Ff,EJr),e(Ff,wre),e(wre,CJr),e(Ff,wJr),e(ea,AJr),M(y5,ea,null),e(Fr,LJr),e(Fr,Hr),M(Sk,Hr,null),e(Hr,yJr),e(Hr,Qwe),e(Qwe,xJr),e(Hr,$Jr),e(Hr,Sn),e(Sn,kJr),e(Sn,Uwe),e(Uwe,SJr),e(Sn,RJr),e(Sn,Hwe),e(Hwe,PJr),e(Sn,BJr),e(Sn,Jwe),e(Jwe,IJr),e(Sn,NJr),e(Hr,qJr),e(Hr,xe),e(xe,x5),e(x5,Ywe),e(Ywe,jJr),e(x5,DJr),e(x5,Are),e(Are,GJr),e(x5,OJr),e(xe,VJr),e(xe,$5),e($5,Kwe),e(Kwe,XJr),e($5,zJr),e($5,Lre),e(Lre,WJr),e($5,QJr),e(xe,UJr),e(xe,k5),e(k5,Zwe),e(Zwe,HJr),e(k5,JJr),e(k5,yre),e(yre,YJr),e(k5,KJr),e(xe,ZJr),e(xe,S5),e(S5,eAe),e(eAe,eYr),e(S5,oYr),e(S5,xre),e(xre,rYr),e(S5,tYr),e(xe,aYr),e(xe,R5),e(R5,oAe),e(oAe,nYr),e(R5,sYr),e(R5,$re),e($re,lYr),e(R5,iYr),e(xe,dYr),e(xe,P5),e(P5,rAe),e(rAe,cYr),e(P5,fYr),e(P5,kre),e(kre,mYr),e(P5,gYr),e(xe,hYr),e(xe,B5),e(B5,tAe),e(tAe,pYr),e(B5,_Yr),e(B5,Sre),e(Sre,uYr),e(B5,bYr),e(xe,vYr),e(xe,I5),e(I5,aAe),e(aAe,FYr),e(I5,TYr),e(I5,Rre),e(Rre,MYr),e(I5,EYr),e(xe,CYr),e(xe,N5),e(N5,nAe),e(nAe,wYr),e(N5,AYr),e(N5,Pre),e(Pre,LYr),e(N5,yYr),e(xe,xYr),e(xe,q5),e(q5,sAe),e(sAe,$Yr),e(q5,kYr),e(q5,Bre),e(Bre,SYr),e(q5,RYr),e(Hr,PYr),M(j5,Hr,null),b(f,gHe,u),b(f,Tf,u),e(Tf,D5),e(D5,lAe),M(Rk,lAe,null),e(Tf,BYr),e(Tf,iAe),e(iAe,IYr),b(f,hHe,u),b(f,Tr,u),M(Pk,Tr,null),e(Tr,NYr),e(Tr,Mf),e(Mf,qYr),e(Mf,Ire),e(Ire,jYr),e(Mf,DYr),e(Mf,Nre),e(Nre,GYr),e(Mf,OYr),e(Tr,VYr),e(Tr,Bk),e(Bk,XYr),e(Bk,dAe),e(dAe,zYr),e(Bk,WYr),e(Tr,QYr),e(Tr,oa),M(Ik,oa,null),e(oa,UYr),e(oa,cAe),e(cAe,HYr),e(oa,JYr),e(oa,Ef),e(Ef,YYr),e(Ef,fAe),e(fAe,KYr),e(Ef,ZYr),e(Ef,qre),e(qre,eKr),e(Ef,oKr),e(oa,rKr),M(G5,oa,null),e(Tr,tKr),e(Tr,Jr),M(Nk,Jr,null),e(Jr,aKr),e(Jr,mAe),e(mAe,nKr),e(Jr,sKr),e(Jr,Rn),e(Rn,lKr),e(Rn,gAe),e(gAe,iKr),e(Rn,dKr),e(Rn,hAe),e(hAe,cKr),e(Rn,fKr),e(Rn,pAe),e(pAe,mKr),e(Rn,gKr),e(Jr,hKr),e(Jr,Ee),e(Ee,O5),e(O5,_Ae),e(_Ae,pKr),e(O5,_Kr),e(O5,jre),e(jre,uKr),e(O5,bKr),e(Ee,vKr),e(Ee,V5),e(V5,uAe),e(uAe,FKr),e(V5,TKr),e(V5,Dre),e(Dre,MKr),e(V5,EKr),e(Ee,CKr),e(Ee,X5),e(X5,bAe),e(bAe,wKr),e(X5,AKr),e(X5,Gre),e(Gre,LKr),e(X5,yKr),e(Ee,xKr),e(Ee,z5),e(z5,vAe),e(vAe,$Kr),e(z5,kKr),e(z5,Ore),e(Ore,SKr),e(z5,RKr),e(Ee,PKr),e(Ee,W5),e(W5,FAe),e(FAe,BKr),e(W5,IKr),e(W5,Vre),e(Vre,NKr),e(W5,qKr),e(Ee,jKr),e(Ee,Q5),e(Q5,TAe),e(TAe,DKr),e(Q5,GKr),e(Q5,Xre),e(Xre,OKr),e(Q5,VKr),e(Ee,XKr),e(Ee,U5),e(U5,MAe),e(MAe,zKr),e(U5,WKr),e(U5,zre),e(zre,QKr),e(U5,UKr),e(Ee,HKr),e(Ee,H5),e(H5,EAe),e(EAe,JKr),e(H5,YKr),e(H5,Wre),e(Wre,KKr),e(H5,ZKr),e(Ee,eZr),e(Ee,J5),e(J5,CAe),e(CAe,oZr),e(J5,rZr),e(J5,Qre),e(Qre,tZr),e(J5,aZr),e(Ee,nZr),e(Ee,Y5),e(Y5,wAe),e(wAe,sZr),e(Y5,lZr),e(Y5,Ure),e(Ure,iZr),e(Y5,dZr),e(Ee,cZr),e(Ee,K5),e(K5,AAe),e(AAe,fZr),e(K5,mZr),e(K5,Hre),e(Hre,gZr),e(K5,hZr),e(Ee,pZr),e(Ee,Z5),e(Z5,LAe),e(LAe,_Zr),e(Z5,uZr),e(Z5,Jre),e(Jre,bZr),e(Z5,vZr),e(Ee,FZr),e(Ee,ew),e(ew,yAe),e(yAe,TZr),e(ew,MZr),e(ew,Yre),e(Yre,EZr),e(ew,CZr),e(Jr,wZr),M(ow,Jr,null),b(f,pHe,u),b(f,Cf,u),e(Cf,rw),e(rw,xAe),M(qk,xAe,null),e(Cf,AZr),e(Cf,$Ae),e($Ae,LZr),b(f,_He,u),b(f,Mr,u),M(jk,Mr,null),e(Mr,yZr),e(Mr,wf),e(wf,xZr),e(wf,Kre),e(Kre,$Zr),e(wf,kZr),e(wf,Zre),e(Zre,SZr),e(wf,RZr),e(Mr,PZr),e(Mr,Dk),e(Dk,BZr),e(Dk,kAe),e(kAe,IZr),e(Dk,NZr),e(Mr,qZr),e(Mr,ra),M(Gk,ra,null),e(ra,jZr),e(ra,SAe),e(SAe,DZr),e(ra,GZr),e(ra,Af),e(Af,OZr),e(Af,RAe),e(RAe,VZr),e(Af,XZr),e(Af,ete),e(ete,zZr),e(Af,WZr),e(ra,QZr),M(tw,ra,null),e(Mr,UZr),e(Mr,Yr),M(Ok,Yr,null),e(Yr,HZr),e(Yr,PAe),e(PAe,JZr),e(Yr,YZr),e(Yr,Pn),e(Pn,KZr),e(Pn,BAe),e(BAe,ZZr),e(Pn,eet),e(Pn,IAe),e(IAe,oet),e(Pn,ret),e(Pn,NAe),e(NAe,tet),e(Pn,aet),e(Yr,net),e(Yr,$e),e($e,aw),e(aw,qAe),e(qAe,set),e(aw,iet),e(aw,ote),e(ote,det),e(aw,cet),e($e,fet),e($e,nw),e(nw,jAe),e(jAe,met),e(nw,get),e(nw,rte),e(rte,het),e(nw,pet),e($e,_et),e($e,sw),e(sw,DAe),e(DAe,uet),e(sw,bet),e(sw,tte),e(tte,vet),e(sw,Fet),e($e,Tet),e($e,lw),e(lw,GAe),e(GAe,Met),e(lw,Eet),e(lw,ate),e(ate,Cet),e(lw,wet),e($e,Aet),e($e,iw),e(iw,OAe),e(OAe,Let),e(iw,yet),e(iw,nte),e(nte,xet),e(iw,$et),e($e,ket),e($e,dw),e(dw,VAe),e(VAe,Set),e(dw,Ret),e(dw,ste),e(ste,Pet),e(dw,Bet),e($e,Iet),e($e,cw),e(cw,XAe),e(XAe,Net),e(cw,qet),e(cw,lte),e(lte,jet),e(cw,Det),e($e,Get),e($e,fw),e(fw,zAe),e(zAe,Oet),e(fw,Vet),e(fw,ite),e(ite,Xet),e(fw,zet),e($e,Wet),e($e,mw),e(mw,WAe),e(WAe,Qet),e(mw,Uet),e(mw,dte),e(dte,Het),e(mw,Jet),e($e,Yet),e($e,gw),e(gw,QAe),e(QAe,Ket),e(gw,Zet),e(gw,cte),e(cte,eot),e(gw,oot),e(Yr,rot),M(hw,Yr,null),b(f,uHe,u),b(f,Lf,u),e(Lf,pw),e(pw,UAe),M(Vk,UAe,null),e(Lf,tot),e(Lf,HAe),e(HAe,aot),b(f,bHe,u),b(f,Er,u),M(Xk,Er,null),e(Er,not),e(Er,yf),e(yf,sot),e(yf,fte),e(fte,lot),e(yf,iot),e(yf,mte),e(mte,dot),e(yf,cot),e(Er,fot),e(Er,zk),e(zk,mot),e(zk,JAe),e(JAe,got),e(zk,hot),e(Er,pot),e(Er,ta),M(Wk,ta,null),e(ta,_ot),e(ta,YAe),e(YAe,uot),e(ta,bot),e(ta,xf),e(xf,vot),e(xf,KAe),e(KAe,Fot),e(xf,Tot),e(xf,gte),e(gte,Mot),e(xf,Eot),e(ta,Cot),M(_w,ta,null),e(Er,wot),e(Er,Kr),M(Qk,Kr,null),e(Kr,Aot),e(Kr,ZAe),e(ZAe,Lot),e(Kr,yot),e(Kr,Bn),e(Bn,xot),e(Bn,e7e),e(e7e,$ot),e(Bn,kot),e(Bn,o7e),e(o7e,Sot),e(Bn,Rot),e(Bn,r7e),e(r7e,Pot),e(Bn,Bot),e(Kr,Iot),e(Kr,ke),e(ke,uw),e(uw,t7e),e(t7e,Not),e(uw,qot),e(uw,hte),e(hte,jot),e(uw,Dot),e(ke,Got),e(ke,bw),e(bw,a7e),e(a7e,Oot),e(bw,Vot),e(bw,pte),e(pte,Xot),e(bw,zot),e(ke,Wot),e(ke,vw),e(vw,n7e),e(n7e,Qot),e(vw,Uot),e(vw,_te),e(_te,Hot),e(vw,Jot),e(ke,Yot),e(ke,Fw),e(Fw,s7e),e(s7e,Kot),e(Fw,Zot),e(Fw,ute),e(ute,ert),e(Fw,ort),e(ke,rrt),e(ke,Tw),e(Tw,l7e),e(l7e,trt),e(Tw,art),e(Tw,bte),e(bte,nrt),e(Tw,srt),e(ke,lrt),e(ke,Mw),e(Mw,i7e),e(i7e,irt),e(Mw,drt),e(Mw,vte),e(vte,crt),e(Mw,frt),e(ke,mrt),e(ke,Ew),e(Ew,d7e),e(d7e,grt),e(Ew,hrt),e(Ew,Fte),e(Fte,prt),e(Ew,_rt),e(ke,urt),e(ke,Cw),e(Cw,c7e),e(c7e,brt),e(Cw,vrt),e(Cw,Tte),e(Tte,Frt),e(Cw,Trt),e(ke,Mrt),e(ke,ww),e(ww,f7e),e(f7e,Ert),e(ww,Crt),e(ww,Mte),e(Mte,wrt),e(ww,Art),e(ke,Lrt),e(ke,Aw),e(Aw,m7e),e(m7e,yrt),e(Aw,xrt),e(Aw,Ete),e(Ete,$rt),e(Aw,krt),e(Kr,Srt),M(Lw,Kr,null),b(f,vHe,u),b(f,$f,u),e($f,yw),e(yw,g7e),M(Uk,g7e,null),e($f,Rrt),e($f,h7e),e(h7e,Prt),b(f,FHe,u),b(f,Cr,u),M(Hk,Cr,null),e(Cr,Brt),e(Cr,kf),e(kf,Irt),e(kf,Cte),e(Cte,Nrt),e(kf,qrt),e(kf,wte),e(wte,jrt),e(kf,Drt),e(Cr,Grt),e(Cr,Jk),e(Jk,Ort),e(Jk,p7e),e(p7e,Vrt),e(Jk,Xrt),e(Cr,zrt),e(Cr,aa),M(Yk,aa,null),e(aa,Wrt),e(aa,_7e),e(_7e,Qrt),e(aa,Urt),e(aa,Sf),e(Sf,Hrt),e(Sf,u7e),e(u7e,Jrt),e(Sf,Yrt),e(Sf,Ate),e(Ate,Krt),e(Sf,Zrt),e(aa,ett),M(xw,aa,null),e(Cr,ott),e(Cr,Zr),M(Kk,Zr,null),e(Zr,rtt),e(Zr,b7e),e(b7e,ttt),e(Zr,att),e(Zr,In),e(In,ntt),e(In,v7e),e(v7e,stt),e(In,ltt),e(In,F7e),e(F7e,itt),e(In,dtt),e(In,T7e),e(T7e,ctt),e(In,ftt),e(Zr,mtt),e(Zr,Se),e(Se,$w),e($w,M7e),e(M7e,gtt),e($w,htt),e($w,Lte),e(Lte,ptt),e($w,_tt),e(Se,utt),e(Se,kw),e(kw,E7e),e(E7e,btt),e(kw,vtt),e(kw,yte),e(yte,Ftt),e(kw,Ttt),e(Se,Mtt),e(Se,Sw),e(Sw,C7e),e(C7e,Ett),e(Sw,Ctt),e(Sw,xte),e(xte,wtt),e(Sw,Att),e(Se,Ltt),e(Se,Rw),e(Rw,w7e),e(w7e,ytt),e(Rw,xtt),e(Rw,$te),e($te,$tt),e(Rw,ktt),e(Se,Stt),e(Se,Pw),e(Pw,A7e),e(A7e,Rtt),e(Pw,Ptt),e(Pw,kte),e(kte,Btt),e(Pw,Itt),e(Se,Ntt),e(Se,Bw),e(Bw,L7e),e(L7e,qtt),e(Bw,jtt),e(Bw,Ste),e(Ste,Dtt),e(Bw,Gtt),e(Se,Ott),e(Se,Iw),e(Iw,y7e),e(y7e,Vtt),e(Iw,Xtt),e(Iw,Rte),e(Rte,ztt),e(Iw,Wtt),e(Se,Qtt),e(Se,Nw),e(Nw,x7e),e(x7e,Utt),e(Nw,Htt),e(Nw,Pte),e(Pte,Jtt),e(Nw,Ytt),e(Se,Ktt),e(Se,qw),e(qw,$7e),e($7e,Ztt),e(qw,eat),e(qw,Bte),e(Bte,oat),e(qw,rat),e(Se,tat),e(Se,jw),e(jw,k7e),e(k7e,aat),e(jw,nat),e(jw,Ite),e(Ite,sat),e(jw,lat),e(Zr,iat),M(Dw,Zr,null),b(f,THe,u),b(f,Rf,u),e(Rf,Gw),e(Gw,S7e),M(Zk,S7e,null),e(Rf,dat),e(Rf,R7e),e(R7e,cat),b(f,MHe,u),b(f,wr,u),M(eS,wr,null),e(wr,fat),e(wr,Pf),e(Pf,mat),e(Pf,Nte),e(Nte,gat),e(Pf,hat),e(Pf,qte),e(qte,pat),e(Pf,_at),e(wr,uat),e(wr,oS),e(oS,bat),e(oS,P7e),e(P7e,vat),e(oS,Fat),e(wr,Tat),e(wr,na),M(rS,na,null),e(na,Mat),e(na,B7e),e(B7e,Eat),e(na,Cat),e(na,Bf),e(Bf,wat),e(Bf,I7e),e(I7e,Aat),e(Bf,Lat),e(Bf,jte),e(jte,yat),e(Bf,xat),e(na,$at),M(Ow,na,null),e(wr,kat),e(wr,et),M(tS,et,null),e(et,Sat),e(et,N7e),e(N7e,Rat),e(et,Pat),e(et,Nn),e(Nn,Bat),e(Nn,q7e),e(q7e,Iat),e(Nn,Nat),e(Nn,j7e),e(j7e,qat),e(Nn,jat),e(Nn,D7e),e(D7e,Dat),e(Nn,Gat),e(et,Oat),e(et,Re),e(Re,Vw),e(Vw,G7e),e(G7e,Vat),e(Vw,Xat),e(Vw,Dte),e(Dte,zat),e(Vw,Wat),e(Re,Qat),e(Re,Xw),e(Xw,O7e),e(O7e,Uat),e(Xw,Hat),e(Xw,Gte),e(Gte,Jat),e(Xw,Yat),e(Re,Kat),e(Re,zw),e(zw,V7e),e(V7e,Zat),e(zw,ent),e(zw,Ote),e(Ote,ont),e(zw,rnt),e(Re,tnt),e(Re,Ww),e(Ww,X7e),e(X7e,ant),e(Ww,nnt),e(Ww,Vte),e(Vte,snt),e(Ww,lnt),e(Re,int),e(Re,Qw),e(Qw,z7e),e(z7e,dnt),e(Qw,cnt),e(Qw,Xte),e(Xte,fnt),e(Qw,mnt),e(Re,gnt),e(Re,Uw),e(Uw,W7e),e(W7e,hnt),e(Uw,pnt),e(Uw,zte),e(zte,_nt),e(Uw,unt),e(Re,bnt),e(Re,Hw),e(Hw,Q7e),e(Q7e,vnt),e(Hw,Fnt),e(Hw,Wte),e(Wte,Tnt),e(Hw,Mnt),e(Re,Ent),e(Re,Jw),e(Jw,U7e),e(U7e,Cnt),e(Jw,wnt),e(Jw,Qte),e(Qte,Ant),e(Jw,Lnt),e(Re,ynt),e(Re,Yw),e(Yw,H7e),e(H7e,xnt),e(Yw,$nt),e(Yw,Ute),e(Ute,knt),e(Yw,Snt),e(Re,Rnt),e(Re,Kw),e(Kw,J7e),e(J7e,Pnt),e(Kw,Bnt),e(Kw,Hte),e(Hte,Int),e(Kw,Nnt),e(et,qnt),M(Zw,et,null),b(f,EHe,u),b(f,If,u),e(If,eA),e(eA,Y7e),M(aS,Y7e,null),e(If,jnt),e(If,K7e),e(K7e,Dnt),b(f,CHe,u),b(f,Ar,u),M(nS,Ar,null),e(Ar,Gnt),e(Ar,Nf),e(Nf,Ont),e(Nf,Jte),e(Jte,Vnt),e(Nf,Xnt),e(Nf,Yte),e(Yte,znt),e(Nf,Wnt),e(Ar,Qnt),e(Ar,sS),e(sS,Unt),e(sS,Z7e),e(Z7e,Hnt),e(sS,Jnt),e(Ar,Ynt),e(Ar,sa),M(lS,sa,null),e(sa,Knt),e(sa,eLe),e(eLe,Znt),e(sa,est),e(sa,qf),e(qf,ost),e(qf,oLe),e(oLe,rst),e(qf,tst),e(qf,Kte),e(Kte,ast),e(qf,nst),e(sa,sst),M(oA,sa,null),e(Ar,lst),e(Ar,ot),M(iS,ot,null),e(ot,ist),e(ot,rLe),e(rLe,dst),e(ot,cst),e(ot,qn),e(qn,fst),e(qn,tLe),e(tLe,mst),e(qn,gst),e(qn,aLe),e(aLe,hst),e(qn,pst),e(qn,nLe),e(nLe,_st),e(qn,ust),e(ot,bst),e(ot,Xe),e(Xe,rA),e(rA,sLe),e(sLe,vst),e(rA,Fst),e(rA,Zte),e(Zte,Tst),e(rA,Mst),e(Xe,Est),e(Xe,tA),e(tA,lLe),e(lLe,Cst),e(tA,wst),e(tA,eae),e(eae,Ast),e(tA,Lst),e(Xe,yst),e(Xe,aA),e(aA,iLe),e(iLe,xst),e(aA,$st),e(aA,oae),e(oae,kst),e(aA,Sst),e(Xe,Rst),e(Xe,nA),e(nA,dLe),e(dLe,Pst),e(nA,Bst),e(nA,rae),e(rae,Ist),e(nA,Nst),e(Xe,qst),e(Xe,sA),e(sA,cLe),e(cLe,jst),e(sA,Dst),e(sA,tae),e(tae,Gst),e(sA,Ost),e(Xe,Vst),e(Xe,lA),e(lA,fLe),e(fLe,Xst),e(lA,zst),e(lA,aae),e(aae,Wst),e(lA,Qst),e(Xe,Ust),e(Xe,iA),e(iA,mLe),e(mLe,Hst),e(iA,Jst),e(iA,nae),e(nae,Yst),e(iA,Kst),e(Xe,Zst),e(Xe,dA),e(dA,gLe),e(gLe,elt),e(dA,olt),e(dA,sae),e(sae,rlt),e(dA,tlt),e(ot,alt),M(cA,ot,null),b(f,wHe,u),b(f,jf,u),e(jf,fA),e(fA,hLe),M(dS,hLe,null),e(jf,nlt),e(jf,pLe),e(pLe,slt),b(f,AHe,u),b(f,Lr,u),M(cS,Lr,null),e(Lr,llt),e(Lr,Df),e(Df,ilt),e(Df,lae),e(lae,dlt),e(Df,clt),e(Df,iae),e(iae,flt),e(Df,mlt),e(Lr,glt),e(Lr,fS),e(fS,hlt),e(fS,_Le),e(_Le,plt),e(fS,_lt),e(Lr,ult),e(Lr,la),M(mS,la,null),e(la,blt),e(la,uLe),e(uLe,vlt),e(la,Flt),e(la,Gf),e(Gf,Tlt),e(Gf,bLe),e(bLe,Mlt),e(Gf,Elt),e(Gf,dae),e(dae,Clt),e(Gf,wlt),e(la,Alt),M(mA,la,null),e(Lr,Llt),e(Lr,rt),M(gS,rt,null),e(rt,ylt),e(rt,vLe),e(vLe,xlt),e(rt,$lt),e(rt,jn),e(jn,klt),e(jn,FLe),e(FLe,Slt),e(jn,Rlt),e(jn,TLe),e(TLe,Plt),e(jn,Blt),e(jn,MLe),e(MLe,Ilt),e(jn,Nlt),e(rt,qlt),e(rt,ze),e(ze,gA),e(gA,ELe),e(ELe,jlt),e(gA,Dlt),e(gA,cae),e(cae,Glt),e(gA,Olt),e(ze,Vlt),e(ze,hA),e(hA,CLe),e(CLe,Xlt),e(hA,zlt),e(hA,fae),e(fae,Wlt),e(hA,Qlt),e(ze,Ult),e(ze,pA),e(pA,wLe),e(wLe,Hlt),e(pA,Jlt),e(pA,mae),e(mae,Ylt),e(pA,Klt),e(ze,Zlt),e(ze,_A),e(_A,ALe),e(ALe,eit),e(_A,oit),e(_A,gae),e(gae,rit),e(_A,tit),e(ze,ait),e(ze,uA),e(uA,LLe),e(LLe,nit),e(uA,sit),e(uA,hae),e(hae,lit),e(uA,iit),e(ze,dit),e(ze,bA),e(bA,yLe),e(yLe,cit),e(bA,fit),e(bA,pae),e(pae,mit),e(bA,git),e(ze,hit),e(ze,vA),e(vA,xLe),e(xLe,pit),e(vA,_it),e(vA,_ae),e(_ae,uit),e(vA,bit),e(ze,vit),e(ze,FA),e(FA,$Le),e($Le,Fit),e(FA,Tit),e(FA,uae),e(uae,Mit),e(FA,Eit),e(rt,Cit),M(TA,rt,null),b(f,LHe,u),b(f,Of,u),e(Of,MA),e(MA,kLe),M(hS,kLe,null),e(Of,wit),e(Of,SLe),e(SLe,Ait),b(f,yHe,u),b(f,yr,u),M(pS,yr,null),e(yr,Lit),e(yr,Vf),e(Vf,yit),e(Vf,bae),e(bae,xit),e(Vf,$it),e(Vf,vae),e(vae,kit),e(Vf,Sit),e(yr,Rit),e(yr,_S),e(_S,Pit),e(_S,RLe),e(RLe,Bit),e(_S,Iit),e(yr,Nit),e(yr,ia),M(uS,ia,null),e(ia,qit),e(ia,PLe),e(PLe,jit),e(ia,Dit),e(ia,Xf),e(Xf,Git),e(Xf,BLe),e(BLe,Oit),e(Xf,Vit),e(Xf,Fae),e(Fae,Xit),e(Xf,zit),e(ia,Wit),M(EA,ia,null),e(yr,Qit),e(yr,tt),M(bS,tt,null),e(tt,Uit),e(tt,ILe),e(ILe,Hit),e(tt,Jit),e(tt,Dn),e(Dn,Yit),e(Dn,NLe),e(NLe,Kit),e(Dn,Zit),e(Dn,qLe),e(qLe,edt),e(Dn,odt),e(Dn,jLe),e(jLe,rdt),e(Dn,tdt),e(tt,adt),e(tt,DLe),e(DLe,CA),e(CA,GLe),e(GLe,ndt),e(CA,sdt),e(CA,Tae),e(Tae,ldt),e(CA,idt),e(tt,ddt),M(wA,tt,null),b(f,xHe,u),b(f,zf,u),e(zf,AA),e(AA,OLe),M(vS,OLe,null),e(zf,cdt),e(zf,VLe),e(VLe,fdt),b(f,$He,u),b(f,xr,u),M(FS,xr,null),e(xr,mdt),e(xr,Wf),e(Wf,gdt),e(Wf,Mae),e(Mae,hdt),e(Wf,pdt),e(Wf,Eae),e(Eae,_dt),e(Wf,udt),e(xr,bdt),e(xr,TS),e(TS,vdt),e(TS,XLe),e(XLe,Fdt),e(TS,Tdt),e(xr,Mdt),e(xr,da),M(MS,da,null),e(da,Edt),e(da,zLe),e(zLe,Cdt),e(da,wdt),e(da,Qf),e(Qf,Adt),e(Qf,WLe),e(WLe,Ldt),e(Qf,ydt),e(Qf,Cae),e(Cae,xdt),e(Qf,$dt),e(da,kdt),M(LA,da,null),e(xr,Sdt),e(xr,at),M(ES,at,null),e(at,Rdt),e(at,QLe),e(QLe,Pdt),e(at,Bdt),e(at,Gn),e(Gn,Idt),e(Gn,ULe),e(ULe,Ndt),e(Gn,qdt),e(Gn,HLe),e(HLe,jdt),e(Gn,Ddt),e(Gn,JLe),e(JLe,Gdt),e(Gn,Odt),e(at,Vdt),e(at,CS),e(CS,yA),e(yA,YLe),e(YLe,Xdt),e(yA,zdt),e(yA,wae),e(wae,Wdt),e(yA,Qdt),e(CS,Udt),e(CS,xA),e(xA,KLe),e(KLe,Hdt),e(xA,Jdt),e(xA,Aae),e(Aae,Ydt),e(xA,Kdt),e(at,Zdt),M($A,at,null),b(f,kHe,u),b(f,Uf,u),e(Uf,kA),e(kA,ZLe),M(wS,ZLe,null),e(Uf,ect),e(Uf,eye),e(eye,oct),b(f,SHe,u),b(f,$r,u),M(AS,$r,null),e($r,rct),e($r,Hf),e(Hf,tct),e(Hf,Lae),e(Lae,act),e(Hf,nct),e(Hf,yae),e(yae,sct),e(Hf,lct),e($r,ict),e($r,LS),e(LS,dct),e(LS,oye),e(oye,cct),e(LS,fct),e($r,mct),e($r,ca),M(yS,ca,null),e(ca,gct),e(ca,rye),e(rye,hct),e(ca,pct),e(ca,Jf),e(Jf,_ct),e(Jf,tye),e(tye,uct),e(Jf,bct),e(Jf,xae),e(xae,vct),e(Jf,Fct),e(ca,Tct),M(SA,ca,null),e($r,Mct),e($r,nt),M(xS,nt,null),e(nt,Ect),e(nt,aye),e(aye,Cct),e(nt,wct),e(nt,On),e(On,Act),e(On,nye),e(nye,Lct),e(On,yct),e(On,sye),e(sye,xct),e(On,$ct),e(On,lye),e(lye,kct),e(On,Sct),e(nt,Rct),e(nt,iye),e(iye,RA),e(RA,dye),e(dye,Pct),e(RA,Bct),e(RA,$ae),e($ae,Ict),e(RA,Nct),e(nt,qct),M(PA,nt,null),RHe=!0},p(f,[u]){const $S={};u&2&&($S.$$scope={dirty:u,ctx:f}),nm.$set($S);const cye={};u&2&&(cye.$$scope={dirty:u,ctx:f}),Fh.$set(cye);const fye={};u&2&&(fye.$$scope={dirty:u,ctx:f}),rp.$set(fye);const mye={};u&2&&(mye.$$scope={dirty:u,ctx:f}),Op.$set(mye);const kS={};u&2&&(kS.$$scope={dirty:u,ctx:f}),Vp.$set(kS);const gye={};u&2&&(gye.$$scope={dirty:u,ctx:f}),f_.$set(gye);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),m_.$set(Vn);const hye={};u&2&&(hye.$$scope={dirty:u,ctx:f}),p_.$set(hye);const pye={};u&2&&(pye.$$scope={dirty:u,ctx:f}),E2.$set(pye);const _ye={};u&2&&(_ye.$$scope={dirty:u,ctx:f}),w2.$set(_ye);const SS={};u&2&&(SS.$$scope={dirty:u,ctx:f}),F1.$set(SS);const uye={};u&2&&(uye.$$scope={dirty:u,ctx:f}),M1.$set(uye);const RS={};u&2&&(RS.$$scope={dirty:u,ctx:f}),cb.$set(RS);const bye={};u&2&&(bye.$$scope={dirty:u,ctx:f}),mb.$set(bye);const PS={};u&2&&(PS.$$scope={dirty:u,ctx:f}),Kb.$set(PS);const vye={};u&2&&(vye.$$scope={dirty:u,ctx:f}),ev.$set(vye);const Fye={};u&2&&(Fye.$$scope={dirty:u,ctx:f}),Tv.$set(Fye);const Tye={};u&2&&(Tye.$$scope={dirty:u,ctx:f}),Ev.$set(Tye);const Yf={};u&2&&(Yf.$$scope={dirty:u,ctx:f}),E0.$set(Yf);const Mye={};u&2&&(Mye.$$scope={dirty:u,ctx:f}),w0.$set(Mye);const Eye={};u&2&&(Eye.$$scope={dirty:u,ctx:f}),a6.$set(Eye);const Cye={};u&2&&(Cye.$$scope={dirty:u,ctx:f}),s6.$set(Cye);const BS={};u&2&&(BS.$$scope={dirty:u,ctx:f}),h6.$set(BS);const wye={};u&2&&(wye.$$scope={dirty:u,ctx:f}),_6.$set(wye);const Aye={};u&2&&(Aye.$$scope={dirty:u,ctx:f}),oF.$set(Aye);const Lye={};u&2&&(Lye.$$scope={dirty:u,ctx:f}),tF.$set(Lye);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),UF.$set(dt);const IS={};u&2&&(IS.$$scope={dirty:u,ctx:f}),JF.$set(IS);const yye={};u&2&&(yye.$$scope={dirty:u,ctx:f}),ZF.$set(yye);const NS={};u&2&&(NS.$$scope={dirty:u,ctx:f}),oT.$set(NS);const xye={};u&2&&(xye.$$scope={dirty:u,ctx:f}),uT.$set(xye);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),vT.$set(ct);const $ye={};u&2&&($ye.$$scope={dirty:u,ctx:f}),MT.$set($ye);const Kf={};u&2&&(Kf.$$scope={dirty:u,ctx:f}),CT.$set(Kf);const kye={};u&2&&(kye.$$scope={dirty:u,ctx:f}),LT.$set(kye);const Sye={};u&2&&(Sye.$$scope={dirty:u,ctx:f}),xT.$set(Sye);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),ST.$set(L);const BA={};u&2&&(BA.$$scope={dirty:u,ctx:f}),PT.$set(BA);const Rye={};u&2&&(Rye.$$scope={dirty:u,ctx:f}),zT.$set(Rye);const Pye={};u&2&&(Pye.$$scope={dirty:u,ctx:f}),QT.$set(Pye);const IA={};u&2&&(IA.$$scope={dirty:u,ctx:f}),e8.$set(IA);const Bye={};u&2&&(Bye.$$scope={dirty:u,ctx:f}),r8.$set(Bye);const Iye={};u&2&&(Iye.$$scope={dirty:u,ctx:f}),h8.$set(Iye);const NA={};u&2&&(NA.$$scope={dirty:u,ctx:f}),_8.$set(NA);const Nye={};u&2&&(Nye.$$scope={dirty:u,ctx:f}),F8.$set(Nye);const qye={};u&2&&(qye.$$scope={dirty:u,ctx:f}),M8.$set(qye);const qA={};u&2&&(qA.$$scope={dirty:u,ctx:f}),x8.$set(qA);const jye={};u&2&&(jye.$$scope={dirty:u,ctx:f}),k8.$set(jye);const Dye={};u&2&&(Dye.$$scope={dirty:u,ctx:f}),N8.$set(Dye);const jA={};u&2&&(jA.$$scope={dirty:u,ctx:f}),j8.$set(jA);const Gye={};u&2&&(Gye.$$scope={dirty:u,ctx:f}),V8.$set(Gye);const Oye={};u&2&&(Oye.$$scope={dirty:u,ctx:f}),z8.$set(Oye);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),U8.$set(DA);const Vye={};u&2&&(Vye.$$scope={dirty:u,ctx:f}),J8.$set(Vye);const Xye={};u&2&&(Xye.$$scope={dirty:u,ctx:f}),tM.$set(Xye);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),nM.$set(GA);const zye={};u&2&&(zye.$$scope={dirty:u,ctx:f}),iM.$set(zye);const Wye={};u&2&&(Wye.$$scope={dirty:u,ctx:f}),cM.$set(Wye);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),lE.$set(OA);const Qye={};u&2&&(Qye.$$scope={dirty:u,ctx:f}),dE.$set(Qye);const Uye={};u&2&&(Uye.$$scope={dirty:u,ctx:f}),RE.$set(Uye);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),BE.$set(VA);const Hye={};u&2&&(Hye.$$scope={dirty:u,ctx:f}),HE.$set(Hye);const Jye={};u&2&&(Jye.$$scope={dirty:u,ctx:f}),YE.$set(Jye);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),n4.$set(XA);const Yye={};u&2&&(Yye.$$scope={dirty:u,ctx:f}),l4.$set(Yye);const Kye={};u&2&&(Kye.$$scope={dirty:u,ctx:f}),c4.$set(Kye);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),m4.$set(zA);const Zye={};u&2&&(Zye.$$scope={dirty:u,ctx:f}),R4.$set(Zye);const e9e={};u&2&&(e9e.$$scope={dirty:u,ctx:f}),B4.$set(e9e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),W4.$set(WA);const o9e={};u&2&&(o9e.$$scope={dirty:u,ctx:f}),U4.$set(o9e);const r9e={};u&2&&(r9e.$$scope={dirty:u,ctx:f}),TC.$set(r9e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),EC.$set(QA);const t9e={};u&2&&(t9e.$$scope={dirty:u,ctx:f}),GC.$set(t9e);const a9e={};u&2&&(a9e.$$scope={dirty:u,ctx:f}),VC.$set(a9e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),WC.$set(UA);const n9e={};u&2&&(n9e.$$scope={dirty:u,ctx:f}),UC.$set(n9e);const s9e={};u&2&&(s9e.$$scope={dirty:u,ctx:f}),JC.$set(s9e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),KC.$set(HA);const l9e={};u&2&&(l9e.$$scope={dirty:u,ctx:f}),v3.$set(l9e);const i9e={};u&2&&(i9e.$$scope={dirty:u,ctx:f}),T3.$set(i9e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),O3.$set(JA);const d9e={};u&2&&(d9e.$$scope={dirty:u,ctx:f}),X3.$set(d9e);const c9e={};u&2&&(c9e.$$scope={dirty:u,ctx:f}),W3.$set(c9e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),U3.$set(YA);const f9e={};u&2&&(f9e.$$scope={dirty:u,ctx:f}),J3.$set(f9e);const m9e={};u&2&&(m9e.$$scope={dirty:u,ctx:f}),K3.$set(m9e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),A5.$set(KA);const g9e={};u&2&&(g9e.$$scope={dirty:u,ctx:f}),y5.$set(g9e);const h9e={};u&2&&(h9e.$$scope={dirty:u,ctx:f}),j5.$set(h9e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),G5.$set(ZA);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:f}),ow.$set(p9e);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:f}),tw.$set(_9e);const e7={};u&2&&(e7.$$scope={dirty:u,ctx:f}),hw.$set(e7);const u9e={};u&2&&(u9e.$$scope={dirty:u,ctx:f}),_w.$set(u9e);const b9e={};u&2&&(b9e.$$scope={dirty:u,ctx:f}),Lw.$set(b9e);const o7={};u&2&&(o7.$$scope={dirty:u,ctx:f}),xw.$set(o7);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:f}),Dw.$set(v9e);const F9e={};u&2&&(F9e.$$scope={dirty:u,ctx:f}),Ow.$set(F9e);const r7={};u&2&&(r7.$$scope={dirty:u,ctx:f}),Zw.$set(r7);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:f}),oA.$set(T9e);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:f}),cA.$set(M9e);const t7={};u&2&&(t7.$$scope={dirty:u,ctx:f}),mA.$set(t7);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:f}),TA.$set(E9e);const C9e={};u&2&&(C9e.$$scope={dirty:u,ctx:f}),EA.$set(C9e);const a7={};u&2&&(a7.$$scope={dirty:u,ctx:f}),wA.$set(a7);const w9e={};u&2&&(w9e.$$scope={dirty:u,ctx:f}),LA.$set(w9e);const A9e={};u&2&&(A9e.$$scope={dirty:u,ctx:f}),$A.$set(A9e);const n7={};u&2&&(n7.$$scope={dirty:u,ctx:f}),SA.$set(n7);const L9e={};u&2&&(L9e.$$scope={dirty:u,ctx:f}),PA.$set(L9e)},i(f){RHe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(nm.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(py.$$.fragment,f),E(Fh.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Ty.$$.fragment,f),E(rp.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ly.$$.fragment,f),E(Op.$$.fragment,f),E(Vp.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Ry.$$.fragment,f),E(f_.$$.fragment,f),E(m_.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(p_.$$.fragment,f),E(jy.$$.fragment,f),E(E2.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(w2.$$.fragment,f),E(Xy.$$.fragment,f),E(F1.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(M1.$$.fragment,f),E(Hy.$$.fragment,f),E(cb.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(mb.$$.fragment,f),E(e9.$$.fragment,f),E(Kb.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(ev.$$.fragment,f),E(n9.$$.fragment,f),E(Tv.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(Ev.$$.fragment,f),E(c9.$$.fragment,f),E(E0.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(w0.$$.fragment,f),E(p9.$$.fragment,f),E(a6.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(s6.$$.fragment,f),E(F9.$$.fragment,f),E(h6.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(_6.$$.fragment,f),E(w9.$$.fragment,f),E(oF.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(tF.$$.fragment,f),E($9.$$.fragment,f),E(UF.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(JF.$$.fragment,f),E(B9.$$.fragment,f),E(ZF.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(oT.$$.fragment,f),E(D9.$$.fragment,f),E(uT.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(vT.$$.fragment,f),E(z9.$$.fragment,f),E(MT.$$.fragment,f),E(W9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(CT.$$.fragment,f),E(J9.$$.fragment,f),E(LT.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(xT.$$.fragment,f),E(ox.$$.fragment,f),E(ST.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(PT.$$.fragment,f),E(sx.$$.fragment,f),E(zT.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(QT.$$.fragment,f),E(fx.$$.fragment,f),E(e8.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(r8.$$.fragment,f),E(_x.$$.fragment,f),E(h8.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(_8.$$.fragment,f),E(Tx.$$.fragment,f),E(F8.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(M8.$$.fragment,f),E(Lx.$$.fragment,f),E(x8.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(k8.$$.fragment,f),E(Sx.$$.fragment,f),E(N8.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(j8.$$.fragment,f),E(Nx.$$.fragment,f),E(V8.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(z8.$$.fragment,f),E(Vx.$$.fragment,f),E(U8.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(J8.$$.fragment,f),E(Ux.$$.fragment,f),E(tM.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(nM.$$.fragment,f),E(Zx.$$.fragment,f),E(iM.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(cM.$$.fragment,f),E(a$.$$.fragment,f),E(lE.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(dE.$$.fragment,f),E(d$.$$.fragment,f),E(RE.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(BE.$$.fragment,f),E(h$.$$.fragment,f),E(HE.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(YE.$$.fragment,f),E(v$.$$.fragment,f),E(n4.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(l4.$$.fragment,f),E(C$.$$.fragment,f),E(c4.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(m4.$$.fragment,f),E($$.$$.fragment,f),E(R4.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(B4.$$.fragment,f),E(B$.$$.fragment,f),E(W4.$$.fragment,f),E(I$.$$.fragment,f),E(N$.$$.fragment,f),E(j$.$$.fragment,f),E(U4.$$.fragment,f),E(D$.$$.fragment,f),E(TC.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(EC.$$.fragment,f),E(z$.$$.fragment,f),E(GC.$$.fragment,f),E(W$.$$.fragment,f),E(Q$.$$.fragment,f),E(H$.$$.fragment,f),E(VC.$$.fragment,f),E(J$.$$.fragment,f),E(WC.$$.fragment,f),E(K$.$$.fragment,f),E(Z$.$$.fragment,f),E(ok.$$.fragment,f),E(UC.$$.fragment,f),E(rk.$$.fragment,f),E(JC.$$.fragment,f),E(tk.$$.fragment,f),E(ak.$$.fragment,f),E(sk.$$.fragment,f),E(KC.$$.fragment,f),E(lk.$$.fragment,f),E(v3.$$.fragment,f),E(ik.$$.fragment,f),E(dk.$$.fragment,f),E(fk.$$.fragment,f),E(T3.$$.fragment,f),E(mk.$$.fragment,f),E(O3.$$.fragment,f),E(gk.$$.fragment,f),E(hk.$$.fragment,f),E(_k.$$.fragment,f),E(X3.$$.fragment,f),E(uk.$$.fragment,f),E(W3.$$.fragment,f),E(bk.$$.fragment,f),E(vk.$$.fragment,f),E(Tk.$$.fragment,f),E(U3.$$.fragment,f),E(Mk.$$.fragment,f),E(J3.$$.fragment,f),E(Ek.$$.fragment,f),E(Ck.$$.fragment,f),E(Ak.$$.fragment,f),E(K3.$$.fragment,f),E(Lk.$$.fragment,f),E(A5.$$.fragment,f),E(yk.$$.fragment,f),E(xk.$$.fragment,f),E(kk.$$.fragment,f),E(y5.$$.fragment,f),E(Sk.$$.fragment,f),E(j5.$$.fragment,f),E(Rk.$$.fragment,f),E(Pk.$$.fragment,f),E(Ik.$$.fragment,f),E(G5.$$.fragment,f),E(Nk.$$.fragment,f),E(ow.$$.fragment,f),E(qk.$$.fragment,f),E(jk.$$.fragment,f),E(Gk.$$.fragment,f),E(tw.$$.fragment,f),E(Ok.$$.fragment,f),E(hw.$$.fragment,f),E(Vk.$$.fragment,f),E(Xk.$$.fragment,f),E(Wk.$$.fragment,f),E(_w.$$.fragment,f),E(Qk.$$.fragment,f),E(Lw.$$.fragment,f),E(Uk.$$.fragment,f),E(Hk.$$.fragment,f),E(Yk.$$.fragment,f),E(xw.$$.fragment,f),E(Kk.$$.fragment,f),E(Dw.$$.fragment,f),E(Zk.$$.fragment,f),E(eS.$$.fragment,f),E(rS.$$.fragment,f),E(Ow.$$.fragment,f),E(tS.$$.fragment,f),E(Zw.$$.fragment,f),E(aS.$$.fragment,f),E(nS.$$.fragment,f),E(lS.$$.fragment,f),E(oA.$$.fragment,f),E(iS.$$.fragment,f),E(cA.$$.fragment,f),E(dS.$$.fragment,f),E(cS.$$.fragment,f),E(mS.$$.fragment,f),E(mA.$$.fragment,f),E(gS.$$.fragment,f),E(TA.$$.fragment,f),E(hS.$$.fragment,f),E(pS.$$.fragment,f),E(uS.$$.fragment,f),E(EA.$$.fragment,f),E(bS.$$.fragment,f),E(wA.$$.fragment,f),E(vS.$$.fragment,f),E(FS.$$.fragment,f),E(MS.$$.fragment,f),E(LA.$$.fragment,f),E(ES.$$.fragment,f),E($A.$$.fragment,f),E(wS.$$.fragment,f),E(AS.$$.fragment,f),E(yS.$$.fragment,f),E(SA.$$.fragment,f),E(xS.$$.fragment,f),E(PA.$$.fragment,f),RHe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(nm.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(py.$$.fragment,f),C(Fh.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Ty.$$.fragment,f),C(rp.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ly.$$.fragment,f),C(Op.$$.fragment,f),C(Vp.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Ry.$$.fragment,f),C(f_.$$.fragment,f),C(m_.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(p_.$$.fragment,f),C(jy.$$.fragment,f),C(E2.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(w2.$$.fragment,f),C(Xy.$$.fragment,f),C(F1.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(M1.$$.fragment,f),C(Hy.$$.fragment,f),C(cb.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(mb.$$.fragment,f),C(e9.$$.fragment,f),C(Kb.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(ev.$$.fragment,f),C(n9.$$.fragment,f),C(Tv.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(Ev.$$.fragment,f),C(c9.$$.fragment,f),C(E0.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(w0.$$.fragment,f),C(p9.$$.fragment,f),C(a6.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(s6.$$.fragment,f),C(F9.$$.fragment,f),C(h6.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(_6.$$.fragment,f),C(w9.$$.fragment,f),C(oF.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(tF.$$.fragment,f),C($9.$$.fragment,f),C(UF.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(JF.$$.fragment,f),C(B9.$$.fragment,f),C(ZF.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(oT.$$.fragment,f),C(D9.$$.fragment,f),C(uT.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(vT.$$.fragment,f),C(z9.$$.fragment,f),C(MT.$$.fragment,f),C(W9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(CT.$$.fragment,f),C(J9.$$.fragment,f),C(LT.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(xT.$$.fragment,f),C(ox.$$.fragment,f),C(ST.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(PT.$$.fragment,f),C(sx.$$.fragment,f),C(zT.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(QT.$$.fragment,f),C(fx.$$.fragment,f),C(e8.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(r8.$$.fragment,f),C(_x.$$.fragment,f),C(h8.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(_8.$$.fragment,f),C(Tx.$$.fragment,f),C(F8.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(M8.$$.fragment,f),C(Lx.$$.fragment,f),C(x8.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(k8.$$.fragment,f),C(Sx.$$.fragment,f),C(N8.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(j8.$$.fragment,f),C(Nx.$$.fragment,f),C(V8.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(z8.$$.fragment,f),C(Vx.$$.fragment,f),C(U8.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(J8.$$.fragment,f),C(Ux.$$.fragment,f),C(tM.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(nM.$$.fragment,f),C(Zx.$$.fragment,f),C(iM.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(cM.$$.fragment,f),C(a$.$$.fragment,f),C(lE.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(dE.$$.fragment,f),C(d$.$$.fragment,f),C(RE.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(BE.$$.fragment,f),C(h$.$$.fragment,f),C(HE.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(YE.$$.fragment,f),C(v$.$$.fragment,f),C(n4.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(l4.$$.fragment,f),C(C$.$$.fragment,f),C(c4.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(m4.$$.fragment,f),C($$.$$.fragment,f),C(R4.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(B4.$$.fragment,f),C(B$.$$.fragment,f),C(W4.$$.fragment,f),C(I$.$$.fragment,f),C(N$.$$.fragment,f),C(j$.$$.fragment,f),C(U4.$$.fragment,f),C(D$.$$.fragment,f),C(TC.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(EC.$$.fragment,f),C(z$.$$.fragment,f),C(GC.$$.fragment,f),C(W$.$$.fragment,f),C(Q$.$$.fragment,f),C(H$.$$.fragment,f),C(VC.$$.fragment,f),C(J$.$$.fragment,f),C(WC.$$.fragment,f),C(K$.$$.fragment,f),C(Z$.$$.fragment,f),C(ok.$$.fragment,f),C(UC.$$.fragment,f),C(rk.$$.fragment,f),C(JC.$$.fragment,f),C(tk.$$.fragment,f),C(ak.$$.fragment,f),C(sk.$$.fragment,f),C(KC.$$.fragment,f),C(lk.$$.fragment,f),C(v3.$$.fragment,f),C(ik.$$.fragment,f),C(dk.$$.fragment,f),C(fk.$$.fragment,f),C(T3.$$.fragment,f),C(mk.$$.fragment,f),C(O3.$$.fragment,f),C(gk.$$.fragment,f),C(hk.$$.fragment,f),C(_k.$$.fragment,f),C(X3.$$.fragment,f),C(uk.$$.fragment,f),C(W3.$$.fragment,f),C(bk.$$.fragment,f),C(vk.$$.fragment,f),C(Tk.$$.fragment,f),C(U3.$$.fragment,f),C(Mk.$$.fragment,f),C(J3.$$.fragment,f),C(Ek.$$.fragment,f),C(Ck.$$.fragment,f),C(Ak.$$.fragment,f),C(K3.$$.fragment,f),C(Lk.$$.fragment,f),C(A5.$$.fragment,f),C(yk.$$.fragment,f),C(xk.$$.fragment,f),C(kk.$$.fragment,f),C(y5.$$.fragment,f),C(Sk.$$.fragment,f),C(j5.$$.fragment,f),C(Rk.$$.fragment,f),C(Pk.$$.fragment,f),C(Ik.$$.fragment,f),C(G5.$$.fragment,f),C(Nk.$$.fragment,f),C(ow.$$.fragment,f),C(qk.$$.fragment,f),C(jk.$$.fragment,f),C(Gk.$$.fragment,f),C(tw.$$.fragment,f),C(Ok.$$.fragment,f),C(hw.$$.fragment,f),C(Vk.$$.fragment,f),C(Xk.$$.fragment,f),C(Wk.$$.fragment,f),C(_w.$$.fragment,f),C(Qk.$$.fragment,f),C(Lw.$$.fragment,f),C(Uk.$$.fragment,f),C(Hk.$$.fragment,f),C(Yk.$$.fragment,f),C(xw.$$.fragment,f),C(Kk.$$.fragment,f),C(Dw.$$.fragment,f),C(Zk.$$.fragment,f),C(eS.$$.fragment,f),C(rS.$$.fragment,f),C(Ow.$$.fragment,f),C(tS.$$.fragment,f),C(Zw.$$.fragment,f),C(aS.$$.fragment,f),C(nS.$$.fragment,f),C(lS.$$.fragment,f),C(oA.$$.fragment,f),C(iS.$$.fragment,f),C(cA.$$.fragment,f),C(dS.$$.fragment,f),C(cS.$$.fragment,f),C(mS.$$.fragment,f),C(mA.$$.fragment,f),C(gS.$$.fragment,f),C(TA.$$.fragment,f),C(hS.$$.fragment,f),C(pS.$$.fragment,f),C(uS.$$.fragment,f),C(EA.$$.fragment,f),C(bS.$$.fragment,f),C(wA.$$.fragment,f),C(vS.$$.fragment,f),C(FS.$$.fragment,f),C(MS.$$.fragment,f),C(LA.$$.fragment,f),C(ES.$$.fragment,f),C($A.$$.fragment,f),C(wS.$$.fragment,f),C(AS.$$.fragment,f),C(yS.$$.fragment,f),C(SA.$$.fragment,f),C(xS.$$.fragment,f),C(PA.$$.fragment,f),RHe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(em),f&&t(ft),f&&t(Oe),f&&t(Qe),f&&t(rm),w(ja,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(CQe),f&&t(Hi),w(dy),f&&t(wQe),f&&t(Un),f&&t(AQe),w(cy,f),f&&t(LQe),f&&t(aP),f&&t(yQe),w(nm,f),f&&t(xQe),f&&t(Ji),w(fy),f&&t($Qe),f&&t(yo),w(my),w(py),w(Fh),w(_y),f&&t(kQe),f&&t(Ki),w(uy),f&&t(SQe),f&&t(xo),w(by),w(Ty),w(rp),w(My),f&&t(RQe),f&&t(Zi),w(Ey),f&&t(PQe),f&&t($o),w(Cy),w(Ly),w(Op),w(Vp),w(yy),f&&t(BQe),f&&t(ed),w(xy),f&&t(IQe),f&&t(ko),w($y),w(Ry),w(f_),w(m_),w(Py),f&&t(NQe),f&&t(rd),w(By),f&&t(qQe),f&&t(So),w(Iy),w(qy),w(p_),w(jy),w(E2),f&&t(jQe),f&&t(nd),w(Dy),f&&t(DQe),f&&t(Ro),w(Gy),w(Vy),w(w2),w(Xy),w(F1),f&&t(GQe),f&&t(id),w(zy),f&&t(OQe),f&&t(Po),w(Wy),w(Uy),w(M1),w(Hy),w(cb),f&&t(VQe),f&&t(fd),w(Jy),f&&t(XQe),f&&t(Bo),w(Yy),w(Zy),w(mb),w(e9),w(Kb),f&&t(zQe),f&&t(hd),w(o9),f&&t(WQe),f&&t(Io),w(r9),w(a9),w(ev),w(n9),w(Tv),f&&t(QQe),f&&t(ud),w(s9),f&&t(UQe),f&&t(No),w(l9),w(d9),w(Ev),w(c9),w(E0),f&&t(HQe),f&&t(Fd),w(f9),f&&t(JQe),f&&t(qo),w(m9),w(h9),w(w0),w(p9),w(a6),f&&t(YQe),f&&t(Ed),w(_9),f&&t(KQe),f&&t(jo),w(u9),w(v9),w(s6),w(F9),w(h6),f&&t(ZQe),f&&t(Ad),w(T9),f&&t(eUe),f&&t(Go),w(M9),w(C9),w(_6),w(w9),w(oF),f&&t(oUe),f&&t(xd),w(A9),f&&t(rUe),f&&t(Oo),w(L9),w(x9),w(tF),w($9),w(UF),f&&t(tUe),f&&t(Sd),w(k9),f&&t(aUe),f&&t(Vo),w(S9),w(P9),w(JF),w(B9),w(ZF),f&&t(nUe),f&&t(Bd),w(I9),f&&t(sUe),f&&t(Xo),w(N9),w(j9),w(oT),w(D9),w(uT),f&&t(lUe),f&&t(qd),w(G9),f&&t(iUe),f&&t(zo),w(O9),w(X9),w(vT),w(z9),w(MT),f&&t(dUe),f&&t(Gd),w(W9),f&&t(cUe),f&&t(Wo),w(Q9),w(H9),w(CT),w(J9),w(LT),f&&t(fUe),f&&t(Xd),w(Y9),f&&t(mUe),f&&t(Qo),w(K9),w(ex),w(xT),w(ox),w(ST),f&&t(gUe),f&&t(Qd),w(rx),f&&t(hUe),f&&t(Uo),w(tx),w(nx),w(PT),w(sx),w(zT),f&&t(pUe),f&&t(Jd),w(lx),f&&t(_Ue),f&&t(Ho),w(ix),w(cx),w(QT),w(fx),w(e8),f&&t(uUe),f&&t(Zd),w(mx),f&&t(bUe),f&&t(Jo),w(gx),w(px),w(r8),w(_x),w(h8),f&&t(vUe),f&&t(rc),w(ux),f&&t(FUe),f&&t(Yo),w(bx),w(Fx),w(_8),w(Tx),w(F8),f&&t(TUe),f&&t(nc),w(Ex),f&&t(MUe),f&&t(Ko),w(Cx),w(Ax),w(M8),w(Lx),w(x8),f&&t(EUe),f&&t(ic),w(yx),f&&t(CUe),f&&t(Zo),w(xx),w(kx),w(k8),w(Sx),w(N8),f&&t(wUe),f&&t(fc),w(Rx),f&&t(AUe),f&&t(er),w(Px),w(Ix),w(j8),w(Nx),w(V8),f&&t(LUe),f&&t(hc),w(jx),f&&t(yUe),f&&t(or),w(Dx),w(Ox),w(z8),w(Vx),w(U8),f&&t(xUe),f&&t(uc),w(Xx),f&&t($Ue),f&&t(rr),w(zx),w(Qx),w(J8),w(Ux),w(tM),f&&t(kUe),f&&t(Fc),w(Hx),f&&t(SUe),f&&t(tr),w(Jx),w(Kx),w(nM),w(Zx),w(iM),f&&t(RUe),f&&t(Ec),w(e$),f&&t(PUe),f&&t(ar),w(o$),w(t$),w(cM),w(a$),w(lE),f&&t(BUe),f&&t(Ac),w(n$),f&&t(IUe),f&&t(nr),w(s$),w(i$),w(dE),w(d$),w(RE),f&&t(NUe),f&&t(xc),w(c$),f&&t(qUe),f&&t(sr),w(f$),w(g$),w(BE),w(h$),w(HE),f&&t(jUe),f&&t(Sc),w(p$),f&&t(DUe),f&&t(lr),w(_$),w(b$),w(YE),w(v$),w(n4),f&&t(GUe),f&&t(Bc),w(F$),f&&t(OUe),f&&t(ir),w(T$),w(E$),w(l4),w(C$),w(c4),f&&t(VUe),f&&t(qc),w(A$),f&&t(XUe),f&&t(dr),w(L$),w(x$),w(m4),w($$),w(R4),f&&t(zUe),f&&t(Gc),w(k$),f&&t(WUe),f&&t(cr),w(S$),w(P$),w(B4),w(B$),w(W4),f&&t(QUe),f&&t(Xc),w(I$),f&&t(UUe),f&&t(fr),w(N$),w(j$),w(U4),w(D$),w(TC),f&&t(HUe),f&&t(Qc),w(G$),f&&t(JUe),f&&t(mr),w(O$),w(X$),w(EC),w(z$),w(GC),f&&t(YUe),f&&t(Jc),w(W$),f&&t(KUe),f&&t(gr),w(Q$),w(H$),w(VC),w(J$),w(WC),f&&t(ZUe),f&&t(Zc),w(K$),f&&t(eHe),f&&t(hr),w(Z$),w(ok),w(UC),w(rk),w(JC),f&&t(oHe),f&&t(rf),w(tk),f&&t(rHe),f&&t(pr),w(ak),w(sk),w(KC),w(lk),w(v3),f&&t(tHe),f&&t(nf),w(ik),f&&t(aHe),f&&t(_r),w(dk),w(fk),w(T3),w(mk),w(O3),f&&t(nHe),f&&t(df),w(gk),f&&t(sHe),f&&t(ur),w(hk),w(_k),w(X3),w(uk),w(W3),f&&t(lHe),f&&t(mf),w(bk),f&&t(iHe),f&&t(br),w(vk),w(Tk),w(U3),w(Mk),w(J3),f&&t(dHe),f&&t(pf),w(Ek),f&&t(cHe),f&&t(vr),w(Ck),w(Ak),w(K3),w(Lk),w(A5),f&&t(fHe),f&&t(bf),w(yk),f&&t(mHe),f&&t(Fr),w(xk),w(kk),w(y5),w(Sk),w(j5),f&&t(gHe),f&&t(Tf),w(Rk),f&&t(hHe),f&&t(Tr),w(Pk),w(Ik),w(G5),w(Nk),w(ow),f&&t(pHe),f&&t(Cf),w(qk),f&&t(_He),f&&t(Mr),w(jk),w(Gk),w(tw),w(Ok),w(hw),f&&t(uHe),f&&t(Lf),w(Vk),f&&t(bHe),f&&t(Er),w(Xk),w(Wk),w(_w),w(Qk),w(Lw),f&&t(vHe),f&&t($f),w(Uk),f&&t(FHe),f&&t(Cr),w(Hk),w(Yk),w(xw),w(Kk),w(Dw),f&&t(THe),f&&t(Rf),w(Zk),f&&t(MHe),f&&t(wr),w(eS),w(rS),w(Ow),w(tS),w(Zw),f&&t(EHe),f&&t(If),w(aS),f&&t(CHe),f&&t(Ar),w(nS),w(lS),w(oA),w(iS),w(cA),f&&t(wHe),f&&t(jf),w(dS),f&&t(AHe),f&&t(Lr),w(cS),w(mS),w(mA),w(gS),w(TA),f&&t(LHe),f&&t(Of),w(hS),f&&t(yHe),f&&t(yr),w(pS),w(uS),w(EA),w(bS),w(wA),f&&t(xHe),f&&t(zf),w(vS),f&&t($He),f&&t(xr),w(FS),w(MS),w(LA),w(ES),w($A),f&&t(kHe),f&&t(Uf),w(wS),f&&t(SHe),f&&t($r),w(AS),w(yS),w(SA),w(xS),w(PA)}}}const Kta={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Zta($){return Qoa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class saa extends Voa{constructor(g){super();Xoa(this,g,Zta,Yta,zoa,{})}}export{saa as default,Kta as metadata};
