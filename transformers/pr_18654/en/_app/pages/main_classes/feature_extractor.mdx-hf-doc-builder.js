import{S as Pn,i as zn,s as Dn,e as a,k as c,w as h,t as s,M as Mn,c as o,d as r,m as d,a as n,x as g,h as i,b as l,G as e,g as E,y as _,q as v,o as x,B as y,v as qn,L as Ln}from"../../chunks/vendor-hf-doc-builder.js";import{T as kn}from"../../chunks/Tip-hf-doc-builder.js";import{D as T}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Nn}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Gt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Sn}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Bn(Q){let m,k,b,$,I;return{c(){m=a("p"),k=s("Passing "),b=a("code"),$=s("use_auth_token=True"),I=s(" is required when you want to use a private model.")},l(p){m=o(p,"P",{});var F=n(m);k=i(F,"Passing "),b=o(F,"CODE",{});var L=n(b);$=i(L,"use_auth_token=True"),L.forEach(r),I=i(F," is required when you want to use a private model."),F.forEach(r)},m(p,F){E(p,m,F),e(m,k),e(m,b),e(b,$),e(m,I)},d(p){p&&r(m)}}}function Cn(Q){let m,k,b,$,I;return $=new Nn({props:{code:`# We can't instantiate directly the base class *FeatureExtractionMixin* nor *SequenceFeatureExtractor* so let's show the examples on a
# derived class: *Wav2Vec2FeatureExtractor*
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    "facebook/wav2vec2-base-960h"
)  # Download feature_extraction_config from huggingface.co and cache.
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    "./test/saved_model/"
)  # E.g. feature_extractor (or model) was saved using *save_pretrained('./test/saved_model/')*
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained("./test/saved_model/preprocessor_config.json")
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    "facebook/wav2vec2-base-960h", return_attention_mask=False, foo=False
)
assert feature_extractor.return_attention_mask is False
feature_extractor, unused_kwargs = Wav2Vec2FeatureExtractor.from_pretrained(
    "facebook/wav2vec2-base-960h", return_attention_mask=False, foo=False, return_unused_kwargs=True
)
assert feature_extractor.return_attention_mask is False
assert unused_kwargs == {"foo": False}`,highlighted:`<span class="hljs-comment"># We can&#x27;t instantiate directly the base class *FeatureExtractionMixin* nor *SequenceFeatureExtractor* so let&#x27;s show the examples on a</span>
<span class="hljs-comment"># derived class: *Wav2Vec2FeatureExtractor*</span>
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    <span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>
)  <span class="hljs-comment"># Download feature_extraction_config from huggingface.co and cache.</span>
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    <span class="hljs-string">&quot;./test/saved_model/&quot;</span>
)  <span class="hljs-comment"># E.g. feature_extractor (or model) was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*</span>
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/preprocessor_config.json&quot;</span>)
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    <span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>, return_attention_mask=<span class="hljs-literal">False</span>, foo=<span class="hljs-literal">False</span>
)
<span class="hljs-keyword">assert</span> feature_extractor.return_attention_mask <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>
feature_extractor, unused_kwargs = Wav2Vec2FeatureExtractor.from_pretrained(
    <span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>, return_attention_mask=<span class="hljs-literal">False</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
)
<span class="hljs-keyword">assert</span> feature_extractor.return_attention_mask <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>
<span class="hljs-keyword">assert</span> unused_kwargs == {<span class="hljs-string">&quot;foo&quot;</span>: <span class="hljs-literal">False</span>}`}}),{c(){m=a("p"),k=s("Examples:"),b=c(),h($.$$.fragment)},l(p){m=o(p,"P",{});var F=n(m);k=i(F,"Examples:"),F.forEach(r),b=d(p),g($.$$.fragment,p)},m(p,F){E(p,m,F),e(m,k),E(p,b,F),_($,p,F),I=!0},p:Ln,i(p){I||(v($.$$.fragment,p),I=!0)},o(p){x($.$$.fragment,p),I=!1},d(p){p&&r(m),p&&r(b),y($,p)}}}function An(Q){let m,k,b,$,I,p,F,L;return{c(){m=a("p"),k=s("If the "),b=a("code"),$=s("processed_features"),I=s(` passed are dictionary of numpy arrays, PyTorch tensors or TensorFlow tensors, the
result will use the same type unless you provide a different tensor type with `),p=a("code"),F=s("return_tensors"),L=s(`. In the case of
PyTorch tensors, you will lose the specific device of your tensors however.`)},l(O){m=o(O,"P",{});var z=n(m);k=i(z,"If the "),b=o(z,"CODE",{});var D=n(b);$=i(D,"processed_features"),D.forEach(r),I=i(z,` passed are dictionary of numpy arrays, PyTorch tensors or TensorFlow tensors, the
result will use the same type unless you provide a different tensor type with `),p=o(z,"CODE",{});var Qe=n(p);F=i(Qe,"return_tensors"),Qe.forEach(r),L=i(z,`. In the case of
PyTorch tensors, you will lose the specific device of your tensors however.`),z.forEach(r)},m(O,z){E(O,m,z),e(m,k),e(m,b),e(b,$),e(m,I),e(m,p),e(p,F),e(m,L)},d(O){O&&r(m)}}}function jn(Q){let m,k,b,$,I,p,F,L,O,z,D,Qe,dt,Ir,Tr,lt,kr,Pr,Jt,V,X,mt,be,zr,pt,Dr,Yt,M,$e,Mr,ut,qr,Lr,N,Ee,Nr,B,Sr,Xe,Br,Cr,ft,Ar,jr,Ze,Or,Vr,Wr,Z,Rr,ee,Hr,te,we,Ur,W,Gr,ht,Jr,Yr,et,Kr,Qr,Kt,R,re,gt,Fe,Xr,_t,Zr,Qt,C,Ie,ea,vt,ta,ra,S,Te,aa,xt,oa,na,H,sa,yt,ia,ca,bt,da,la,ma,ae,Xt,U,oe,$t,ke,pa,Et,ua,Zt,P,Pe,fa,G,ha,tt,ga,_a,wt,va,xa,ya,Ft,ba,$a,ne,ze,Ea,It,wa,Fa,se,De,Ia,Me,Ta,Tt,ka,Pa,er,J,ie,kt,qe,za,Pt,Da,tr,f,Le,Ma,zt,qa,La,ce,Ne,Na,Se,Sa,Dt,Ba,Ca,Aa,de,Be,ja,Ce,Oa,Mt,Va,Wa,Ra,le,Ae,Ha,je,Ua,qt,Ga,Ja,Ya,me,Oe,Ka,Y,Qa,Lt,Xa,Za,Nt,eo,to,ro,pe,Ve,ao,q,oo,St,no,so,Bt,io,co,Ct,lo,mo,At,po,uo,fo,ue,We,ho,Re,go,jt,_o,vo,xo,fe,He,yo,K,bo,Ot,$o,Eo,Vt,wo,Fo,Io,he,Ue,To,Ge,ko,Wt,Po,zo,Do,ge,Je,Mo,Ye,qo,Rt,Lo,No,rr;return p=new Gt({}),be=new Gt({}),$e=new T({props:{name:"class transformers.FeatureExtractionMixin",anchor:"transformers.FeatureExtractionMixin",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/feature_extraction_utils.py#L196"}}),Ee=new T({props:{name:"from_pretrained",anchor:"transformers.FeatureExtractionMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FeatureExtractionMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/feature_extraction_utils.py#L220",returnDescription:`
<p>A feature extractor of type <a
  href="/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"
>FeatureExtractionMixin</a>.</p>
`}}),Z=new kn({props:{$$slots:{default:[Bn]},$$scope:{ctx:Q}}}),ee=new Sn({props:{anchor:"transformers.FeatureExtractionMixin.from_pretrained.example",$$slots:{default:[Cn]},$$scope:{ctx:Q}}}),we=new T({props:{name:"save_pretrained",anchor:"transformers.FeatureExtractionMixin.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"push_to_hub",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FeatureExtractionMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the feature extractor JSON file will be saved (will be created if it does not exist).`,name:"save_directory"},{anchor:"transformers.FeatureExtractionMixin.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the
repository you want to push to with <code>repo_id</code> (will default to the name of <code>save_directory</code> in your
namespace).
kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_18654/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"push_to_hub"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/feature_extraction_utils.py#L304"}}),Fe=new Gt({}),Ie=new T({props:{name:"class transformers.SequenceFeatureExtractor",anchor:"transformers.SequenceFeatureExtractor",parameters:[{name:"feature_size",val:": int"},{name:"sampling_rate",val:": int"},{name:"padding_value",val:": float"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SequenceFeatureExtractor.feature_size",description:`<strong>feature_size</strong> (<code>int</code>) &#x2014;
The feature dimension of the extracted features.`,name:"feature_size"},{anchor:"transformers.SequenceFeatureExtractor.sampling_rate",description:`<strong>sampling_rate</strong> (<code>int</code>) &#x2014;
The sampling rate at which the audio files should be digitalized expressed in Hertz per second (Hz).`,name:"sampling_rate"},{anchor:"transformers.SequenceFeatureExtractor.padding_value",description:`<strong>padding_value</strong> (<code>float</code>) &#x2014;
The value that is used to fill the padding values / vectors.`,name:"padding_value"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/feature_extraction_sequence_utils.py#L30"}}),Te=new T({props:{name:"pad",anchor:"transformers.SequenceFeatureExtractor.pad",parameters:[{name:"processed_features",val:": typing.Union[transformers.feature_extraction_utils.BatchFeature, typing.List[transformers.feature_extraction_utils.BatchFeature], typing.Dict[str, transformers.feature_extraction_utils.BatchFeature], typing.Dict[str, typing.List[transformers.feature_extraction_utils.BatchFeature]], typing.List[typing.Dict[str, transformers.feature_extraction_utils.BatchFeature]]]"},{name:"padding",val:": typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = True"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"truncation",val:": bool = False"},{name:"pad_to_multiple_of",val:": typing.Optional[int] = None"},{name:"return_attention_mask",val:": typing.Optional[bool] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"}],parametersDescription:[{anchor:"transformers.SequenceFeatureExtractor.pad.processed_features",description:`<strong>processed_features</strong> (<a href="/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.BatchFeature">BatchFeature</a>, list of <a href="/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.BatchFeature">BatchFeature</a>, <code>Dict[str, List[float]]</code>, <code>Dict[str, List[List[float]]</code> or <code>List[Dict[str, List[float]]]</code>) &#x2014;
Processed inputs. Can represent one input (<a href="/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.BatchFeature">BatchFeature</a> or <code>Dict[str, List[float]]</code>) or a batch of
input values / vectors (list of <a href="/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.BatchFeature">BatchFeature</a>, <em>Dict[str, List[List[float]]]</em> or <em>List[Dict[str,
List[float]]]</em>) so you can use this method during preprocessing as well as in a PyTorch Dataloader
collate function.</p>
<p>Instead of <code>List[float]</code> you can have tensors (numpy arrays, PyTorch tensors or TensorFlow tensors),
see the note above for the return type.`,name:"processed_features"},{anchor:"transformers.SequenceFeatureExtractor.pad.padding",description:`<strong>padding</strong> (<code>bool</code>, <code>str</code> or <a href="/docs/transformers/pr_18654/en/internal/file_utils#transformers.utils.PaddingStrategy">PaddingStrategy</a>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Select a strategy to pad the returned sequences (according to the model&#x2019;s padding side and padding
index) among:</p>
<ul>
<li><code>True</code> or <code>&apos;longest&apos;</code>: Pad to the longest sequence in the batch (or no padding if only a single
sequence if provided).</li>
<li><code>&apos;max_length&apos;</code>: Pad to a maximum length specified with the argument <code>max_length</code> or to the maximum
acceptable input length for the model if that argument is not provided.</li>
<li><code>False</code> or <code>&apos;do_not_pad&apos;</code> (default): No padding (i.e., can output a batch with sequences of different
lengths).</li>
</ul>`,name:"padding"},{anchor:"transformers.SequenceFeatureExtractor.pad.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Maximum length of the returned list and optionally padding length (see above).`,name:"max_length"},{anchor:"transformers.SequenceFeatureExtractor.pad.truncation",description:`<strong>truncation</strong> (<code>bool</code>) &#x2014;
Activates truncation to cut input sequences longer than <code>max_length</code> to <code>max_length</code>.`,name:"truncation"},{anchor:"transformers.SequenceFeatureExtractor.pad.pad_to_multiple_of",description:`<strong>pad_to_multiple_of</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If set will pad the sequence to a multiple of the provided value.</p>
<p>This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability</p>
<blockquote>
<p>= 7.5 (Volta), or on TPUs which benefit from having sequence lengths be a multiple of 128.</p>
</blockquote>`,name:"pad_to_multiple_of"},{anchor:"transformers.SequenceFeatureExtractor.pad.return_attention_mask",description:`<strong>return_attention_mask</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to return the attention mask. If left to the default, will return the attention mask according
to the specific feature_extractor&#x2019;s default.</p>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"return_attention_mask"},{anchor:"transformers.SequenceFeatureExtractor.pad.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_18654/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of list of python integers. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return Numpy <code>np.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/feature_extraction_sequence_utils.py#L53"}}),ae=new kn({props:{$$slots:{default:[An]},$$scope:{ctx:Q}}}),ke=new Gt({}),Pe=new T({props:{name:"class transformers.BatchFeature",anchor:"transformers.BatchFeature",parameters:[{name:"data",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"tensor_type",val:": typing.Union[NoneType, str, transformers.utils.generic.TensorType] = None"}],parametersDescription:[{anchor:"transformers.BatchFeature.data",description:`<strong>data</strong> (<code>dict</code>) &#x2014;
Dictionary of lists/arrays/tensors returned by the <strong>call</strong>/pad methods (&#x2018;input_values&#x2019;, &#x2018;attention_mask&#x2019;,
etc.).`,name:"data"},{anchor:"transformers.BatchFeature.tensor_type",description:`<strong>tensor_type</strong> (<code>Union[None, str, TensorType]</code>, <em>optional</em>) &#x2014;
You can give a tensor_type here to convert the lists of integers in PyTorch/TensorFlow/Numpy Tensors at
initialization.`,name:"tensor_type"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/feature_extraction_utils.py#L54"}}),ze=new T({props:{name:"convert_to_tensors",anchor:"transformers.BatchFeature.convert_to_tensors",parameters:[{name:"tensor_type",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"}],parametersDescription:[{anchor:"transformers.BatchFeature.convert_to_tensors.tensor_type",description:`<strong>tensor_type</strong> (<code>str</code> or <a href="/docs/transformers/pr_18654/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
The type of tensors to use. If <code>str</code>, should be one of the values of the enum <a href="/docs/transformers/pr_18654/en/internal/file_utils#transformers.TensorType">TensorType</a>. If
<code>None</code>, no modification is done.`,name:"tensor_type"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/feature_extraction_utils.py#L108"}}),De=new T({props:{name:"to",anchor:"transformers.BatchFeature.to",parameters:[{name:"device",val:": typing.Union[str, ForwardRef('torch.device')]"}],parametersDescription:[{anchor:"transformers.BatchFeature.to.device",description:"<strong>device</strong> (<code>str</code> or <code>torch.device</code>) &#x2014; The device to put the tensors on.",name:"device"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/feature_extraction_utils.py#L173",returnDescription:`
<p>The same instance after modification.</p>
`,returnType:`
<p><a
  href="/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),qe=new Gt({}),Le=new T({props:{name:"class transformers.ImageFeatureExtractionMixin",anchor:"transformers.ImageFeatureExtractionMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L78"}}),Ne=new T({props:{name:"center_crop",anchor:"transformers.ImageFeatureExtractionMixin.center_crop",parameters:[{name:"image",val:""},{name:"size",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.center_crop.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code> of shape (n_channels, height, width) or (height, width, n_channels)) &#x2014;
The image to resize.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.center_crop.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple[int, int]</code>) &#x2014;
The size to which crop the image.`,name:"size"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L288",returnDescription:`
<p>A center cropped <code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code> of shape: (n_channels,
height, width).</p>
`,returnType:`
<p>new_image</p>
`}}),Be=new T({props:{name:"convert_rgb",anchor:"transformers.ImageFeatureExtractionMixin.convert_rgb",parameters:[{name:"image",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.convert_rgb.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code>) &#x2014;
The image to convert.`,name:"image"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L120"}}),Ae=new T({props:{name:"expand_dims",anchor:"transformers.ImageFeatureExtractionMixin.expand_dims",parameters:[{name:"image",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.expand_dims.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to expand.`,name:"image"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L167"}}),Oe=new T({props:{name:"flip_channel_order",anchor:"transformers.ImageFeatureExtractionMixin.flip_channel_order",parameters:[{name:"image",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.flip_channel_order.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image whose color channels to flip. If <code>np.ndarray</code> or <code>torch.Tensor</code>, the channel dimension should
be first.`,name:"image"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L363"}}),Ve=new T({props:{name:"normalize",anchor:"transformers.ImageFeatureExtractionMixin.normalize",parameters:[{name:"image",val:""},{name:"mean",val:""},{name:"std",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.normalize.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to normalize.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.normalize.mean",description:`<strong>mean</strong> (<code>List[float]</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The mean (per channel) to use for normalization.`,name:"mean"},{anchor:"transformers.ImageFeatureExtractionMixin.normalize.std",description:`<strong>std</strong> (<code>List[float]</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The standard deviation (per channel) to use for normalization.`,name:"std"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L187"}}),We=new T({props:{name:"resize",anchor:"transformers.ImageFeatureExtractionMixin.resize",parameters:[{name:"image",val:""},{name:"size",val:""},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"default_to_square",val:" = True"},{name:"max_size",val:" = None"}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.resize.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to resize.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.resize.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple[int, int]</code>) &#x2014;
The size to use for resizing the image. If <code>size</code> is a sequence like (h, w), output size will be
matched to this.</p>
<p>If <code>size</code> is an int and <code>default_to_square</code> is <code>True</code>, then image will be resized to (size, size). If
<code>size</code> is an int and <code>default_to_square</code> is <code>False</code>, then smaller edge of the image will be matched to
this number. i.e, if height &gt; width, then image will be rescaled to (size * height / width, size).`,name:"size"},{anchor:"transformers.ImageFeatureExtractionMixin.resize.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
The filter to user for resampling.`,name:"resample"},{anchor:"transformers.ImageFeatureExtractionMixin.resize.default_to_square",description:`<strong>default_to_square</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
How to convert <code>size</code> when it is a single int. If set to <code>True</code>, the <code>size</code> will be converted to a
square (<code>size</code>,<code>size</code>). If set to <code>False</code>, will replicate
<a href="https://pytorch.org/vision/stable/transforms.html#torchvision.transforms.Resize" rel="nofollow"><code>torchvision.transforms.Resize</code></a>
with support for resizing only the smallest edge and providing an optional <code>max_size</code>.`,name:"default_to_square"},{anchor:"transformers.ImageFeatureExtractionMixin.resize.max_size",description:`<strong>max_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The maximum allowed for the longer edge of the resized image: if the longer edge of the image is
greater than <code>max_size</code> after being resized according to <code>size</code>, then the image is resized again so
that the longer edge is equal to <code>max_size</code>. As a result, <code>size</code> might be overruled, i.e the smaller
edge may be shorter than <code>size</code>. Only used if <code>default_to_square</code> is <code>False</code>.`,name:"max_size"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L223",returnDescription:`
<p>A resized <code>PIL.Image.Image</code>.</p>
`,returnType:`
<p>image</p>
`}}),He=new T({props:{name:"rotate",anchor:"transformers.ImageFeatureExtractionMixin.rotate",parameters:[{name:"image",val:""},{name:"angle",val:""},{name:"resample",val:" = 0"},{name:"expand",val:" = 0"},{name:"center",val:" = None"},{name:"translate",val:" = None"},{name:"fillcolor",val:" = None"}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.rotate.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to rotate. If <code>np.ndarray</code> or <code>torch.Tensor</code>, will be converted to <code>PIL.Image.Image</code> before
rotating.`,name:"image"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L380",returnDescription:`
<p>A rotated <code>PIL.Image.Image</code>.</p>
`,returnType:`
<p>image</p>
`}}),Ue=new T({props:{name:"to_numpy_array",anchor:"transformers.ImageFeatureExtractionMixin.to_numpy_array",parameters:[{name:"image",val:""},{name:"rescale",val:" = None"},{name:"channel_first",val:" = True"}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.to_numpy_array.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to convert to a NumPy array.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.to_numpy_array.rescale",description:`<strong>rescale</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to apply the scaling factor (to make pixel values floats between 0. and 1.). Will
default to <code>True</code> if the image is a PIL Image or an array/tensor of integers, <code>False</code> otherwise.`,name:"rescale"},{anchor:"transformers.ImageFeatureExtractionMixin.to_numpy_array.channel_first",description:`<strong>channel_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to permute the dimensions of the image to put the channel dimension first.`,name:"channel_first"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L134"}}),Je=new T({props:{name:"to_pil_image",anchor:"transformers.ImageFeatureExtractionMixin.to_pil_image",parameters:[{name:"image",val:""},{name:"rescale",val:" = None"}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.to_pil_image.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>numpy.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to convert to the PIL Image format.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.to_pil_image.rescale",description:`<strong>rescale</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to apply the scaling factor (to make pixel values integers between 0 and 255). Will
default to <code>True</code> if the image type is a floating type, <code>False</code> otherwise.`,name:"rescale"}],source:"https://github.com/huggingface/transformers/blob/vr_18654/src/transformers/image_utils.py#L90"}}),{c(){m=a("meta"),k=c(),b=a("h1"),$=a("a"),I=a("span"),h(p.$$.fragment),F=c(),L=a("span"),O=s("Feature Extractor"),z=c(),D=a("p"),Qe=s(`A feature extractor is in charge of preparing input features for audio or vision models. This includes feature extraction
from sequences, `),dt=a("em"),Ir=s("e.g."),Tr=s(`, pre-processing audio files to Log-Mel Spectrogram features, feature extraction from images
`),lt=a("em"),kr=s("e.g."),Pr=s(` cropping image image files, but also padding, normalization, and conversion to Numpy, PyTorch, and TensorFlow
tensors.`),Jt=c(),V=a("h2"),X=a("a"),mt=a("span"),h(be.$$.fragment),zr=c(),pt=a("span"),Dr=s("FeatureExtractionMixin"),Yt=c(),M=a("div"),h($e.$$.fragment),Mr=c(),ut=a("p"),qr=s(`This is a feature extraction mixin used to provide saving/loading functionality for sequential and image feature
extractors.`),Lr=c(),N=a("div"),h(Ee.$$.fragment),Nr=c(),B=a("p"),Sr=s("Instantiate a type of "),Xe=a("a"),Br=s("FeatureExtractionMixin"),Cr=s(" from a feature extractor, "),ft=a("em"),Ar=s("e.g."),jr=s(` a
derived class of `),Ze=a("a"),Or=s("SequenceFeatureExtractor"),Vr=s("."),Wr=c(),h(Z.$$.fragment),Rr=c(),h(ee.$$.fragment),Hr=c(),te=a("div"),h(we.$$.fragment),Ur=c(),W=a("p"),Gr=s("Save a feature_extractor object to the directory "),ht=a("code"),Jr=s("save_directory"),Yr=s(`, so that it can be re-loaded using the
`),et=a("a"),Kr=s("from_pretrained()"),Qr=s(" class method."),Kt=c(),R=a("h2"),re=a("a"),gt=a("span"),h(Fe.$$.fragment),Xr=c(),_t=a("span"),Zr=s("SequenceFeatureExtractor"),Qt=c(),C=a("div"),h(Ie.$$.fragment),ea=c(),vt=a("p"),ta=s("This is a general feature extraction class for speech recognition."),ra=c(),S=a("div"),h(Te.$$.fragment),aa=c(),xt=a("p"),oa=s(`Pad input values / input vectors or a batch of input values / input vectors up to predefined length or to the
max sequence length in the batch.`),na=c(),H=a("p"),sa=s("Padding side (left/right) padding values are defined at the feature extractor level (with "),yt=a("code"),ia=s("self.padding_side"),ca=s(`,
`),bt=a("code"),da=s("self.padding_value"),la=s(")"),ma=c(),h(ae.$$.fragment),Xt=c(),U=a("h2"),oe=a("a"),$t=a("span"),h(ke.$$.fragment),pa=c(),Et=a("span"),ua=s("BatchFeature"),Zt=c(),P=a("div"),h(Pe.$$.fragment),fa=c(),G=a("p"),ha=s("Holds the output of the "),tt=a("a"),ga=s("pad()"),_a=s(" and feature extractor specific "),wt=a("code"),va=s("__call__"),xa=s(" methods."),ya=c(),Ft=a("p"),ba=s("This class is derived from a python dictionary and can be used as a dictionary."),$a=c(),ne=a("div"),h(ze.$$.fragment),Ea=c(),It=a("p"),wa=s("Convert the inner content to tensors."),Fa=c(),se=a("div"),h(De.$$.fragment),Ia=c(),Me=a("p"),Ta=s("Send all values to device by calling "),Tt=a("code"),ka=s("v.to(device)"),Pa=s(" (PyTorch only)."),er=c(),J=a("h2"),ie=a("a"),kt=a("span"),h(qe.$$.fragment),za=c(),Pt=a("span"),Da=s("ImageFeatureExtractionMixin"),tr=c(),f=a("div"),h(Le.$$.fragment),Ma=c(),zt=a("p"),qa=s("Mixin that contain utilities for preparing image features."),La=c(),ce=a("div"),h(Ne.$$.fragment),Na=c(),Se=a("p"),Sa=s("Crops "),Dt=a("code"),Ba=s("image"),Ca=s(` to the given size using a center crop. Note that if the image is too small to be cropped to the
size given, it will be padded (so the returned result has the size asked).`),Aa=c(),de=a("div"),h(Be.$$.fragment),ja=c(),Ce=a("p"),Oa=s("Converts "),Mt=a("code"),Va=s("PIL.Image.Image"),Wa=s(" to RGB format."),Ra=c(),le=a("div"),h(Ae.$$.fragment),Ha=c(),je=a("p"),Ua=s("Expands 2-dimensional "),qt=a("code"),Ga=s("image"),Ja=s(" to 3 dimensions."),Ya=c(),me=a("div"),h(Oe.$$.fragment),Ka=c(),Y=a("p"),Qa=s("Flips the channel order of "),Lt=a("code"),Xa=s("image"),Za=s(` from RGB to BGR, or vice versa. Note that this will trigger a conversion of
`),Nt=a("code"),eo=s("image"),to=s(" to a NumPy array if it\u2019s a PIL Image."),ro=c(),pe=a("div"),h(Ve.$$.fragment),ao=c(),q=a("p"),oo=s("Normalizes "),St=a("code"),no=s("image"),so=s(" with "),Bt=a("code"),io=s("mean"),co=s(" and "),Ct=a("code"),lo=s("std"),mo=s(". Note that this will trigger a conversion of "),At=a("code"),po=s("image"),uo=s(` to a NumPy array
if it\u2019s a PIL Image.`),fo=c(),ue=a("div"),h(We.$$.fragment),ho=c(),Re=a("p"),go=s("Resizes "),jt=a("code"),_o=s("image"),vo=s(". Enforces conversion of input to PIL.Image."),xo=c(),fe=a("div"),h(He.$$.fragment),yo=c(),K=a("p"),bo=s("Returns a rotated copy of "),Ot=a("code"),$o=s("image"),Eo=s(". This method returns a copy of "),Vt=a("code"),wo=s("image"),Fo=s(`, rotated the given number of degrees
counter clockwise around its centre.`),Io=c(),he=a("div"),h(Ue.$$.fragment),To=c(),Ge=a("p"),ko=s("Converts "),Wt=a("code"),Po=s("image"),zo=s(` to a numpy array. Optionally rescales it and puts the channel dimension as the first
dimension.`),Do=c(),ge=a("div"),h(Je.$$.fragment),Mo=c(),Ye=a("p"),qo=s("Converts "),Rt=a("code"),Lo=s("image"),No=s(` to a PIL Image. Optionally rescales it and puts the channel dimension back as the last axis if
needed.`),this.h()},l(t){const u=Mn('[data-svelte="svelte-1phssyn"]',document.head);m=o(u,"META",{name:!0,content:!0}),u.forEach(r),k=d(t),b=o(t,"H1",{class:!0});var Ke=n(b);$=o(Ke,"A",{id:!0,class:!0,href:!0});var Ht=n($);I=o(Ht,"SPAN",{});var Ut=n(I);g(p.$$.fragment,Ut),Ut.forEach(r),Ht.forEach(r),F=d(Ke),L=o(Ke,"SPAN",{});var So=n(L);O=i(So,"Feature Extractor"),So.forEach(r),Ke.forEach(r),z=d(t),D=o(t,"P",{});var rt=n(D);Qe=i(rt,`A feature extractor is in charge of preparing input features for audio or vision models. This includes feature extraction
from sequences, `),dt=o(rt,"EM",{});var Bo=n(dt);Ir=i(Bo,"e.g."),Bo.forEach(r),Tr=i(rt,`, pre-processing audio files to Log-Mel Spectrogram features, feature extraction from images
`),lt=o(rt,"EM",{});var Co=n(lt);kr=i(Co,"e.g."),Co.forEach(r),Pr=i(rt,` cropping image image files, but also padding, normalization, and conversion to Numpy, PyTorch, and TensorFlow
tensors.`),rt.forEach(r),Jt=d(t),V=o(t,"H2",{class:!0});var ar=n(V);X=o(ar,"A",{id:!0,class:!0,href:!0});var Ao=n(X);mt=o(Ao,"SPAN",{});var jo=n(mt);g(be.$$.fragment,jo),jo.forEach(r),Ao.forEach(r),zr=d(ar),pt=o(ar,"SPAN",{});var Oo=n(pt);Dr=i(Oo,"FeatureExtractionMixin"),Oo.forEach(r),ar.forEach(r),Yt=d(t),M=o(t,"DIV",{class:!0});var _e=n(M);g($e.$$.fragment,_e),Mr=d(_e),ut=o(_e,"P",{});var Vo=n(ut);qr=i(Vo,`This is a feature extraction mixin used to provide saving/loading functionality for sequential and image feature
extractors.`),Vo.forEach(r),Lr=d(_e),N=o(_e,"DIV",{class:!0});var ve=n(N);g(Ee.$$.fragment,ve),Nr=d(ve),B=o(ve,"P",{});var xe=n(B);Sr=i(xe,"Instantiate a type of "),Xe=o(xe,"A",{href:!0});var Wo=n(Xe);Br=i(Wo,"FeatureExtractionMixin"),Wo.forEach(r),Cr=i(xe," from a feature extractor, "),ft=o(xe,"EM",{});var Ro=n(ft);Ar=i(Ro,"e.g."),Ro.forEach(r),jr=i(xe,` a
derived class of `),Ze=o(xe,"A",{href:!0});var Ho=n(Ze);Or=i(Ho,"SequenceFeatureExtractor"),Ho.forEach(r),Vr=i(xe,"."),xe.forEach(r),Wr=d(ve),g(Z.$$.fragment,ve),Rr=d(ve),g(ee.$$.fragment,ve),ve.forEach(r),Hr=d(_e),te=o(_e,"DIV",{class:!0});var or=n(te);g(we.$$.fragment,or),Ur=d(or),W=o(or,"P",{});var at=n(W);Gr=i(at,"Save a feature_extractor object to the directory "),ht=o(at,"CODE",{});var Uo=n(ht);Jr=i(Uo,"save_directory"),Uo.forEach(r),Yr=i(at,`, so that it can be re-loaded using the
`),et=o(at,"A",{href:!0});var Go=n(et);Kr=i(Go,"from_pretrained()"),Go.forEach(r),Qr=i(at," class method."),at.forEach(r),or.forEach(r),_e.forEach(r),Kt=d(t),R=o(t,"H2",{class:!0});var nr=n(R);re=o(nr,"A",{id:!0,class:!0,href:!0});var Jo=n(re);gt=o(Jo,"SPAN",{});var Yo=n(gt);g(Fe.$$.fragment,Yo),Yo.forEach(r),Jo.forEach(r),Xr=d(nr),_t=o(nr,"SPAN",{});var Ko=n(_t);Zr=i(Ko,"SequenceFeatureExtractor"),Ko.forEach(r),nr.forEach(r),Qt=d(t),C=o(t,"DIV",{class:!0});var ot=n(C);g(Ie.$$.fragment,ot),ea=d(ot),vt=o(ot,"P",{});var Qo=n(vt);ta=i(Qo,"This is a general feature extraction class for speech recognition."),Qo.forEach(r),ra=d(ot),S=o(ot,"DIV",{class:!0});var ye=n(S);g(Te.$$.fragment,ye),aa=d(ye),xt=o(ye,"P",{});var Xo=n(xt);oa=i(Xo,`Pad input values / input vectors or a batch of input values / input vectors up to predefined length or to the
max sequence length in the batch.`),Xo.forEach(r),na=d(ye),H=o(ye,"P",{});var nt=n(H);sa=i(nt,"Padding side (left/right) padding values are defined at the feature extractor level (with "),yt=o(nt,"CODE",{});var Zo=n(yt);ia=i(Zo,"self.padding_side"),Zo.forEach(r),ca=i(nt,`,
`),bt=o(nt,"CODE",{});var en=n(bt);da=i(en,"self.padding_value"),en.forEach(r),la=i(nt,")"),nt.forEach(r),ma=d(ye),g(ae.$$.fragment,ye),ye.forEach(r),ot.forEach(r),Xt=d(t),U=o(t,"H2",{class:!0});var sr=n(U);oe=o(sr,"A",{id:!0,class:!0,href:!0});var tn=n(oe);$t=o(tn,"SPAN",{});var rn=n($t);g(ke.$$.fragment,rn),rn.forEach(r),tn.forEach(r),pa=d(sr),Et=o(sr,"SPAN",{});var an=n(Et);ua=i(an,"BatchFeature"),an.forEach(r),sr.forEach(r),Zt=d(t),P=o(t,"DIV",{class:!0});var A=n(P);g(Pe.$$.fragment,A),fa=d(A),G=o(A,"P",{});var st=n(G);ha=i(st,"Holds the output of the "),tt=o(st,"A",{href:!0});var on=n(tt);ga=i(on,"pad()"),on.forEach(r),_a=i(st," and feature extractor specific "),wt=o(st,"CODE",{});var nn=n(wt);va=i(nn,"__call__"),nn.forEach(r),xa=i(st," methods."),st.forEach(r),ya=d(A),Ft=o(A,"P",{});var sn=n(Ft);ba=i(sn,"This class is derived from a python dictionary and can be used as a dictionary."),sn.forEach(r),$a=d(A),ne=o(A,"DIV",{class:!0});var ir=n(ne);g(ze.$$.fragment,ir),Ea=d(ir),It=o(ir,"P",{});var cn=n(It);wa=i(cn,"Convert the inner content to tensors."),cn.forEach(r),ir.forEach(r),Fa=d(A),se=o(A,"DIV",{class:!0});var cr=n(se);g(De.$$.fragment,cr),Ia=d(cr),Me=o(cr,"P",{});var dr=n(Me);Ta=i(dr,"Send all values to device by calling "),Tt=o(dr,"CODE",{});var dn=n(Tt);ka=i(dn,"v.to(device)"),dn.forEach(r),Pa=i(dr," (PyTorch only)."),dr.forEach(r),cr.forEach(r),A.forEach(r),er=d(t),J=o(t,"H2",{class:!0});var lr=n(J);ie=o(lr,"A",{id:!0,class:!0,href:!0});var ln=n(ie);kt=o(ln,"SPAN",{});var mn=n(kt);g(qe.$$.fragment,mn),mn.forEach(r),ln.forEach(r),za=d(lr),Pt=o(lr,"SPAN",{});var pn=n(Pt);Da=i(pn,"ImageFeatureExtractionMixin"),pn.forEach(r),lr.forEach(r),tr=d(t),f=o(t,"DIV",{class:!0});var w=n(f);g(Le.$$.fragment,w),Ma=d(w),zt=o(w,"P",{});var un=n(zt);qa=i(un,"Mixin that contain utilities for preparing image features."),un.forEach(r),La=d(w),ce=o(w,"DIV",{class:!0});var mr=n(ce);g(Ne.$$.fragment,mr),Na=d(mr),Se=o(mr,"P",{});var pr=n(Se);Sa=i(pr,"Crops "),Dt=o(pr,"CODE",{});var fn=n(Dt);Ba=i(fn,"image"),fn.forEach(r),Ca=i(pr,` to the given size using a center crop. Note that if the image is too small to be cropped to the
size given, it will be padded (so the returned result has the size asked).`),pr.forEach(r),mr.forEach(r),Aa=d(w),de=o(w,"DIV",{class:!0});var ur=n(de);g(Be.$$.fragment,ur),ja=d(ur),Ce=o(ur,"P",{});var fr=n(Ce);Oa=i(fr,"Converts "),Mt=o(fr,"CODE",{});var hn=n(Mt);Va=i(hn,"PIL.Image.Image"),hn.forEach(r),Wa=i(fr," to RGB format."),fr.forEach(r),ur.forEach(r),Ra=d(w),le=o(w,"DIV",{class:!0});var hr=n(le);g(Ae.$$.fragment,hr),Ha=d(hr),je=o(hr,"P",{});var gr=n(je);Ua=i(gr,"Expands 2-dimensional "),qt=o(gr,"CODE",{});var gn=n(qt);Ga=i(gn,"image"),gn.forEach(r),Ja=i(gr," to 3 dimensions."),gr.forEach(r),hr.forEach(r),Ya=d(w),me=o(w,"DIV",{class:!0});var _r=n(me);g(Oe.$$.fragment,_r),Ka=d(_r),Y=o(_r,"P",{});var it=n(Y);Qa=i(it,"Flips the channel order of "),Lt=o(it,"CODE",{});var _n=n(Lt);Xa=i(_n,"image"),_n.forEach(r),Za=i(it,` from RGB to BGR, or vice versa. Note that this will trigger a conversion of
`),Nt=o(it,"CODE",{});var vn=n(Nt);eo=i(vn,"image"),vn.forEach(r),to=i(it," to a NumPy array if it\u2019s a PIL Image."),it.forEach(r),_r.forEach(r),ro=d(w),pe=o(w,"DIV",{class:!0});var vr=n(pe);g(Ve.$$.fragment,vr),ao=d(vr),q=o(vr,"P",{});var j=n(q);oo=i(j,"Normalizes "),St=o(j,"CODE",{});var xn=n(St);no=i(xn,"image"),xn.forEach(r),so=i(j," with "),Bt=o(j,"CODE",{});var yn=n(Bt);io=i(yn,"mean"),yn.forEach(r),co=i(j," and "),Ct=o(j,"CODE",{});var bn=n(Ct);lo=i(bn,"std"),bn.forEach(r),mo=i(j,". Note that this will trigger a conversion of "),At=o(j,"CODE",{});var $n=n(At);po=i($n,"image"),$n.forEach(r),uo=i(j,` to a NumPy array
if it\u2019s a PIL Image.`),j.forEach(r),vr.forEach(r),fo=d(w),ue=o(w,"DIV",{class:!0});var xr=n(ue);g(We.$$.fragment,xr),ho=d(xr),Re=o(xr,"P",{});var yr=n(Re);go=i(yr,"Resizes "),jt=o(yr,"CODE",{});var En=n(jt);_o=i(En,"image"),En.forEach(r),vo=i(yr,". Enforces conversion of input to PIL.Image."),yr.forEach(r),xr.forEach(r),xo=d(w),fe=o(w,"DIV",{class:!0});var br=n(fe);g(He.$$.fragment,br),yo=d(br),K=o(br,"P",{});var ct=n(K);bo=i(ct,"Returns a rotated copy of "),Ot=o(ct,"CODE",{});var wn=n(Ot);$o=i(wn,"image"),wn.forEach(r),Eo=i(ct,". This method returns a copy of "),Vt=o(ct,"CODE",{});var Fn=n(Vt);wo=i(Fn,"image"),Fn.forEach(r),Fo=i(ct,`, rotated the given number of degrees
counter clockwise around its centre.`),ct.forEach(r),br.forEach(r),Io=d(w),he=o(w,"DIV",{class:!0});var $r=n(he);g(Ue.$$.fragment,$r),To=d($r),Ge=o($r,"P",{});var Er=n(Ge);ko=i(Er,"Converts "),Wt=o(Er,"CODE",{});var In=n(Wt);Po=i(In,"image"),In.forEach(r),zo=i(Er,` to a numpy array. Optionally rescales it and puts the channel dimension as the first
dimension.`),Er.forEach(r),$r.forEach(r),Do=d(w),ge=o(w,"DIV",{class:!0});var wr=n(ge);g(Je.$$.fragment,wr),Mo=d(wr),Ye=o(wr,"P",{});var Fr=n(Ye);qo=i(Fr,"Converts "),Rt=o(Fr,"CODE",{});var Tn=n(Rt);Lo=i(Tn,"image"),Tn.forEach(r),No=i(Fr,` to a PIL Image. Optionally rescales it and puts the channel dimension back as the last axis if
needed.`),Fr.forEach(r),wr.forEach(r),w.forEach(r),this.h()},h(){l(m,"name","hf:doc:metadata"),l(m,"content",JSON.stringify(On)),l($,"id","feature-extractor"),l($,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l($,"href","#feature-extractor"),l(b,"class","relative group"),l(X,"id","transformers.FeatureExtractionMixin"),l(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(X,"href","#transformers.FeatureExtractionMixin"),l(V,"class","relative group"),l(Xe,"href","/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(Ze,"href","/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor"),l(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(et,"href","/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained"),l(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(re,"id","transformers.SequenceFeatureExtractor"),l(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(re,"href","#transformers.SequenceFeatureExtractor"),l(R,"class","relative group"),l(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(oe,"id","transformers.BatchFeature"),l(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(oe,"href","#transformers.BatchFeature"),l(U,"class","relative group"),l(tt,"href","/docs/transformers/pr_18654/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor.pad"),l(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ie,"id","transformers.ImageFeatureExtractionMixin"),l(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ie,"href","#transformers.ImageFeatureExtractionMixin"),l(J,"class","relative group"),l(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(f,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,u){e(document.head,m),E(t,k,u),E(t,b,u),e(b,$),e($,I),_(p,I,null),e(b,F),e(b,L),e(L,O),E(t,z,u),E(t,D,u),e(D,Qe),e(D,dt),e(dt,Ir),e(D,Tr),e(D,lt),e(lt,kr),e(D,Pr),E(t,Jt,u),E(t,V,u),e(V,X),e(X,mt),_(be,mt,null),e(V,zr),e(V,pt),e(pt,Dr),E(t,Yt,u),E(t,M,u),_($e,M,null),e(M,Mr),e(M,ut),e(ut,qr),e(M,Lr),e(M,N),_(Ee,N,null),e(N,Nr),e(N,B),e(B,Sr),e(B,Xe),e(Xe,Br),e(B,Cr),e(B,ft),e(ft,Ar),e(B,jr),e(B,Ze),e(Ze,Or),e(B,Vr),e(N,Wr),_(Z,N,null),e(N,Rr),_(ee,N,null),e(M,Hr),e(M,te),_(we,te,null),e(te,Ur),e(te,W),e(W,Gr),e(W,ht),e(ht,Jr),e(W,Yr),e(W,et),e(et,Kr),e(W,Qr),E(t,Kt,u),E(t,R,u),e(R,re),e(re,gt),_(Fe,gt,null),e(R,Xr),e(R,_t),e(_t,Zr),E(t,Qt,u),E(t,C,u),_(Ie,C,null),e(C,ea),e(C,vt),e(vt,ta),e(C,ra),e(C,S),_(Te,S,null),e(S,aa),e(S,xt),e(xt,oa),e(S,na),e(S,H),e(H,sa),e(H,yt),e(yt,ia),e(H,ca),e(H,bt),e(bt,da),e(H,la),e(S,ma),_(ae,S,null),E(t,Xt,u),E(t,U,u),e(U,oe),e(oe,$t),_(ke,$t,null),e(U,pa),e(U,Et),e(Et,ua),E(t,Zt,u),E(t,P,u),_(Pe,P,null),e(P,fa),e(P,G),e(G,ha),e(G,tt),e(tt,ga),e(G,_a),e(G,wt),e(wt,va),e(G,xa),e(P,ya),e(P,Ft),e(Ft,ba),e(P,$a),e(P,ne),_(ze,ne,null),e(ne,Ea),e(ne,It),e(It,wa),e(P,Fa),e(P,se),_(De,se,null),e(se,Ia),e(se,Me),e(Me,Ta),e(Me,Tt),e(Tt,ka),e(Me,Pa),E(t,er,u),E(t,J,u),e(J,ie),e(ie,kt),_(qe,kt,null),e(J,za),e(J,Pt),e(Pt,Da),E(t,tr,u),E(t,f,u),_(Le,f,null),e(f,Ma),e(f,zt),e(zt,qa),e(f,La),e(f,ce),_(Ne,ce,null),e(ce,Na),e(ce,Se),e(Se,Sa),e(Se,Dt),e(Dt,Ba),e(Se,Ca),e(f,Aa),e(f,de),_(Be,de,null),e(de,ja),e(de,Ce),e(Ce,Oa),e(Ce,Mt),e(Mt,Va),e(Ce,Wa),e(f,Ra),e(f,le),_(Ae,le,null),e(le,Ha),e(le,je),e(je,Ua),e(je,qt),e(qt,Ga),e(je,Ja),e(f,Ya),e(f,me),_(Oe,me,null),e(me,Ka),e(me,Y),e(Y,Qa),e(Y,Lt),e(Lt,Xa),e(Y,Za),e(Y,Nt),e(Nt,eo),e(Y,to),e(f,ro),e(f,pe),_(Ve,pe,null),e(pe,ao),e(pe,q),e(q,oo),e(q,St),e(St,no),e(q,so),e(q,Bt),e(Bt,io),e(q,co),e(q,Ct),e(Ct,lo),e(q,mo),e(q,At),e(At,po),e(q,uo),e(f,fo),e(f,ue),_(We,ue,null),e(ue,ho),e(ue,Re),e(Re,go),e(Re,jt),e(jt,_o),e(Re,vo),e(f,xo),e(f,fe),_(He,fe,null),e(fe,yo),e(fe,K),e(K,bo),e(K,Ot),e(Ot,$o),e(K,Eo),e(K,Vt),e(Vt,wo),e(K,Fo),e(f,Io),e(f,he),_(Ue,he,null),e(he,To),e(he,Ge),e(Ge,ko),e(Ge,Wt),e(Wt,Po),e(Ge,zo),e(f,Do),e(f,ge),_(Je,ge,null),e(ge,Mo),e(ge,Ye),e(Ye,qo),e(Ye,Rt),e(Rt,Lo),e(Ye,No),rr=!0},p(t,[u]){const Ke={};u&2&&(Ke.$$scope={dirty:u,ctx:t}),Z.$set(Ke);const Ht={};u&2&&(Ht.$$scope={dirty:u,ctx:t}),ee.$set(Ht);const Ut={};u&2&&(Ut.$$scope={dirty:u,ctx:t}),ae.$set(Ut)},i(t){rr||(v(p.$$.fragment,t),v(be.$$.fragment,t),v($e.$$.fragment,t),v(Ee.$$.fragment,t),v(Z.$$.fragment,t),v(ee.$$.fragment,t),v(we.$$.fragment,t),v(Fe.$$.fragment,t),v(Ie.$$.fragment,t),v(Te.$$.fragment,t),v(ae.$$.fragment,t),v(ke.$$.fragment,t),v(Pe.$$.fragment,t),v(ze.$$.fragment,t),v(De.$$.fragment,t),v(qe.$$.fragment,t),v(Le.$$.fragment,t),v(Ne.$$.fragment,t),v(Be.$$.fragment,t),v(Ae.$$.fragment,t),v(Oe.$$.fragment,t),v(Ve.$$.fragment,t),v(We.$$.fragment,t),v(He.$$.fragment,t),v(Ue.$$.fragment,t),v(Je.$$.fragment,t),rr=!0)},o(t){x(p.$$.fragment,t),x(be.$$.fragment,t),x($e.$$.fragment,t),x(Ee.$$.fragment,t),x(Z.$$.fragment,t),x(ee.$$.fragment,t),x(we.$$.fragment,t),x(Fe.$$.fragment,t),x(Ie.$$.fragment,t),x(Te.$$.fragment,t),x(ae.$$.fragment,t),x(ke.$$.fragment,t),x(Pe.$$.fragment,t),x(ze.$$.fragment,t),x(De.$$.fragment,t),x(qe.$$.fragment,t),x(Le.$$.fragment,t),x(Ne.$$.fragment,t),x(Be.$$.fragment,t),x(Ae.$$.fragment,t),x(Oe.$$.fragment,t),x(Ve.$$.fragment,t),x(We.$$.fragment,t),x(He.$$.fragment,t),x(Ue.$$.fragment,t),x(Je.$$.fragment,t),rr=!1},d(t){r(m),t&&r(k),t&&r(b),y(p),t&&r(z),t&&r(D),t&&r(Jt),t&&r(V),y(be),t&&r(Yt),t&&r(M),y($e),y(Ee),y(Z),y(ee),y(we),t&&r(Kt),t&&r(R),y(Fe),t&&r(Qt),t&&r(C),y(Ie),y(Te),y(ae),t&&r(Xt),t&&r(U),y(ke),t&&r(Zt),t&&r(P),y(Pe),y(ze),y(De),t&&r(er),t&&r(J),y(qe),t&&r(tr),t&&r(f),y(Le),y(Ne),y(Be),y(Ae),y(Oe),y(Ve),y(We),y(He),y(Ue),y(Je)}}}const On={local:"feature-extractor",sections:[{local:"transformers.FeatureExtractionMixin",title:"FeatureExtractionMixin"},{local:"transformers.SequenceFeatureExtractor",title:"SequenceFeatureExtractor"},{local:"transformers.BatchFeature",title:"BatchFeature"},{local:"transformers.ImageFeatureExtractionMixin",title:"ImageFeatureExtractionMixin"}],title:"Feature Extractor"};function Vn(Q){return qn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Yn extends Pn{constructor(m){super();zn(this,m,Vn,jn,Dn,{})}}export{Yn as default,On as metadata};
