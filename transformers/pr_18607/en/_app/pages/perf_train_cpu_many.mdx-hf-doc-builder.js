import{S as xr,i as wr,s as Er,e as o,k as p,w as P,t as l,M as yr,c as r,d as n,m as h,a,x as T,h as i,b as s,G as t,g as f,y as C,L as Pr,q as $,o as k,B as D,v as Tr}from"../chunks/vendor-hf-doc-builder.js";import{I as rt}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as at}from"../chunks/CodeBlock-hf-doc-builder.js";function Cr(bo){let A,lt,I,O,He,G,qt,We,Ht,it,ce,Wt,st,R,S,Be,z,Bt,Ke,Kt,ct,w,V,jt,Gt,X,zt,Vt,F,Xt,Ft,pt,E,Jt,je,Yt,Qt,Ge,Zt,en,ht,q,tn,J,nn,on,ft,M,H,ze,Y,rn,Ve,an,dt,pe,ln,ut,W,Xe,d,he,sn,cn,fe,pn,hn,de,fn,dn,ue,un,_n,_e,mn,vn,me,gn,bn,L,u,ve,xn,wn,Fe,En,ge,yn,Pn,be,Tn,Cn,xe,$n,kn,we,Dn,An,_,Ee,In,Rn,Je,Mn,ye,Ln,Un,Pe,Nn,On,Te,Sn,qn,Ce,Hn,Wn,m,$e,Bn,Kn,ke,jn,Gn,De,zn,Vn,Ae,Xn,Fn,Ie,Jn,Yn,Ye,_t,Q,mt,y,Qn,Qe,Zn,eo,Z,to,no,vt,U,B,Ze,ee,oo,et,ro,gt,Re,ao,bt,te,xt,Me,lo,wt,N,K,tt,ne,io,nt,so,Et,oe,co,re,po,yt,Le,ho,Pt,ae,Tt,Ue,fo,Ct,Ne,uo,$t,le,kt,j,_o,ot,mo,vo,Dt,ie,At;return G=new rt({}),z=new rt({}),Y=new rt({}),Q=new at({props:{code:"pip install oneccl_bind_pt=={pytorch_version} -f https://software.intel.com/ipex-whl-stable",highlighted:'pip install oneccl_bind_pt=={<span class="hljs-attribute">pytorch_version} -f https</span>://software<span class="hljs-variable">.intel</span><span class="hljs-variable">.com</span>/ipex-whl-stable'}}),ee=new rt({}),te=new at({props:{code:"source /opt/intel/oneapi/setvars.sh",highlighted:'<span class="hljs-keyword">source</span> <span class="hljs-regexp">/opt/i</span>ntel<span class="hljs-regexp">/oneapi/</span>setvars.sh'}}),ne=new rt({}),ae=new at({props:{code:` export CCL_WORKER_COUNT=1
 export MASTER_ADDR=127.0.0.1
 mpirun -n 2 -genv OMP_NUM_THREADS=23 \\
 python3 run_qa.py \\
 --model_name_or_path bert-large-uncased \\
 --dataset_name squad \\
 --do_train \\
 --do_eval \\
 --per_device_train_batch_size 12  \\
 --learning_rate 3e-5  \\
 --num_train_epochs 2  \\
 --max_seq_length 384 \\
 --doc_stride 128  \\
 --output_dir /tmp/debug_squad/ \\
 --no_cuda \\
 --xpu_backend ccl`,highlighted:` export CCL_WORKER_COUNT=1
 export MASTER_ADDR=127.0.0.1
 mpirun -n 2 -genv OMP_NUM_THREADS=23 \\
 python3 run_qa.py \\
 --model_name_or_path bert-large-uncased \\
 --dataset_name squad \\
 --do_train \\
 --do_eval \\
 --per_device_train_batch_size 12  \\
 --learning_rate 3e-5  \\
 --num_train_epochs 2  \\
 --max_seq_length 384 \\
 --doc_stride 128  \\
 --output_dir /tmp/debug_squad/ \\
 --no_cuda \\
 --xpu_backend ccl`}}),le=new at({props:{code:` cat hostfile
 xxx.xxx.xxx.xxx #node0 ip
 xxx.xxx.xxx.xxx #node1 ip`,highlighted:` cat hostfile
 xxx.xxx.xxx.xxx #node0 ip
 xxx.xxx.xxx.xxx #node1 ip`}}),ie=new at({props:{code:` export CCL_WORKER_COUNT=1
 export MASTER_ADDR=xxx.xxx.xxx.xxx #node0 ip
 mpirun -f hostfile -n 4 -ppn 2 \\
 -genv OMP_NUM_THREADS=23 \\
 python3 run_qa.py \\
 --model_name_or_path bert-large-uncased \\
 --dataset_name squad \\
 --do_train \\
 --do_eval \\
 --per_device_train_batch_size 12  \\
 --learning_rate 3e-5  \\
 --num_train_epochs 2  \\
 --max_seq_length 384 \\
 --doc_stride 128  \\
 --output_dir /tmp/debug_squad/ \\
 --no_cuda \\
 --xpu_backend ccl`,highlighted:` export CCL_WORKER_COUNT=1
 export MASTER_ADDR=xxx.xxx.xxx.xxx #node0 ip
 mpirun -f hostfile -n 4 -ppn 2 \\
 -genv OMP_NUM_THREADS=23 \\
 python3 run_qa.py \\
 --model_name_or_path bert-large-uncased \\
 --dataset_name squad \\
 --do_train \\
 --do_eval \\
 --per_device_train_batch_size 12  \\
 --learning_rate 3e-5  \\
 --num_train_epochs 2  \\
 --max_seq_length 384 \\
 --doc_stride 128  \\
 --output_dir /tmp/debug_squad/ \\
 --no_cuda \\
 --xpu_backend ccl`}}),{c(){A=o("meta"),lt=p(),I=o("h1"),O=o("a"),He=o("span"),P(G.$$.fragment),qt=p(),We=o("span"),Ht=l("Efficient Training on Multiple CPUs"),it=p(),ce=o("p"),Wt=l("When training on a single CPU is too slow, we can use multiple CPUs. This guide focuses on PyTorch-based DDP enabling distributed CPU training efficiently."),st=p(),R=o("h2"),S=o("a"),Be=o("span"),P(z.$$.fragment),Bt=p(),Ke=o("span"),Kt=l("Intel\xAE oneCCL Bindings for PyTorch"),ct=p(),w=o("p"),V=o("a"),jt=l("Intel\xAE oneCCL"),Gt=l(" (collective communications library) is a library for efficient distributed deep learning training implementing such collectives like allreduce, allgather, alltoall. For more information on oneCCL, please refer to the "),X=o("a"),zt=l("oneCCL documentation"),Vt=l(" and "),F=o("a"),Xt=l("oneCCL specification"),Ft=l("."),pt=p(),E=o("p"),Jt=l("Module "),je=o("code"),Yt=l("oneccl_bindings_for_pytorch"),Qt=l(" ("),Ge=o("code"),Zt=l("torch_ccl"),en=l(" before version 1.12)  implements PyTorch C10D ProcessGroup API and can be dynamically loaded as external ProcessGroup and only works on Linux platform now"),ht=p(),q=o("p"),tn=l("Check more detailed information for "),J=o("a"),nn=l("oneccl_bind_pt"),on=l("."),ft=p(),M=o("h3"),H=o("a"),ze=o("span"),P(Y.$$.fragment),rn=p(),Ve=o("span"),an=l("Intel\xAE oneCCL Bindings for PyTorch installation:"),dt=p(),pe=o("p"),ln=l("Wheel files are available for the following Python versions:"),ut=p(),W=o("table"),Xe=o("thead"),d=o("tr"),he=o("th"),sn=l("Extension Version"),cn=p(),fe=o("th"),pn=l("Python 3.6"),hn=p(),de=o("th"),fn=l("Python 3.7"),dn=p(),ue=o("th"),un=l("Python 3.8"),_n=p(),_e=o("th"),mn=l("Python 3.9"),vn=p(),me=o("th"),gn=l("Python 3.10"),bn=p(),L=o("tbody"),u=o("tr"),ve=o("td"),xn=l("1.12.0"),wn=p(),Fe=o("td"),En=p(),ge=o("td"),yn=l("\u221A"),Pn=p(),be=o("td"),Tn=l("\u221A"),Cn=p(),xe=o("td"),$n=l("\u221A"),kn=p(),we=o("td"),Dn=l("\u221A"),An=p(),_=o("tr"),Ee=o("td"),In=l("1.11.0"),Rn=p(),Je=o("td"),Mn=p(),ye=o("td"),Ln=l("\u221A"),Un=p(),Pe=o("td"),Nn=l("\u221A"),On=p(),Te=o("td"),Sn=l("\u221A"),qn=p(),Ce=o("td"),Hn=l("\u221A"),Wn=p(),m=o("tr"),$e=o("td"),Bn=l("1.10.0"),Kn=p(),ke=o("td"),jn=l("\u221A"),Gn=p(),De=o("td"),zn=l("\u221A"),Vn=p(),Ae=o("td"),Xn=l("\u221A"),Fn=p(),Ie=o("td"),Jn=l("\u221A"),Yn=p(),Ye=o("td"),_t=p(),P(Q.$$.fragment),mt=p(),y=o("p"),Qn=l("where "),Qe=o("code"),Zn=l("{pytorch_version}"),eo=l(` should be your PyTorch version, for instance 1.12.0.
Check more approaches for `),Z=o("a"),to=l("oneccl_bind_pt installation"),no=l(`.
Versions of oneCCL and PyTorch must match.`),vt=p(),U=o("h2"),B=o("a"),Ze=o("span"),P(ee.$$.fragment),oo=p(),et=o("span"),ro=l("Intel\xAE MPI library"),gt=l(`

Use this standards-based MPI implementation to deliver flexible, efficient, scalable cluster messaging on Intel\xAE architecture. This component is part of the Intel\xAE oneAPI HPC Toolkit.
It can be installed via [MPI](https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#mpi).
`),Re=o("p"),ao=l("Please set the environment by following command before using it."),bt=p(),P(te.$$.fragment),xt=p(),Me=o("p"),lo=l("The following \u201CUsage in Trainer\u201D takes mpirun in Intel\xAE MPI library as an example."),wt=p(),N=o("h2"),K=o("a"),tt=o("span"),P(ne.$$.fragment),io=p(),nt=o("span"),so=l("Usage in Trainer"),Et=l(`

To enable multi CPU distributed training in the Trainer with the ccl backend, users should add **\`--xpu_backend ccl\`** in the command arguments.
`),oe=o("p"),co=l("Let\u2019s see an example with the "),re=o("a"),po=l("question-answering example"),yt=p(),Le=o("p"),ho=l("The following command enables training with 2 processes on one Xeon node, with one process running per one socket. The variables OMP_NUM_THREADS/CCL_WORKER_COUNT can be tuned for optimal performance."),Pt=p(),P(ae.$$.fragment),Tt=p(),Ue=o("p"),fo=l("The following command enables training with a total of four processes on two Xeons (node0 and node1, taking node0 as the main process), ppn (processes per node) is set to 2, with one process running per one socket. The variables OMP_NUM_THREADS/CCL_WORKER_COUNT can be tuned for optimal performance."),Ct=p(),Ne=o("p"),uo=l("In node0, you need to create a configuration file which contains the IP addresses of each node (for example hostfile) and pass that configuration file path as an argument."),$t=p(),P(le.$$.fragment),kt=p(),j=o("p"),_o=l("Now, run the following command in node0 and "),ot=o("strong"),mo=l("4DDP"),vo=l(" will be enabled in node0 and node1:"),Dt=p(),P(ie.$$.fragment),this.h()},l(e){const c=yr('[data-svelte="svelte-1phssyn"]',document.head);A=r(c,"META",{name:!0,content:!0}),c.forEach(n),lt=h(e),I=r(e,"H1",{class:!0});var It=a(I);O=r(It,"A",{id:!0,class:!0,href:!0});var xo=a(O);He=r(xo,"SPAN",{});var wo=a(He);T(G.$$.fragment,wo),wo.forEach(n),xo.forEach(n),qt=h(It),We=r(It,"SPAN",{});var Eo=a(We);Ht=i(Eo,"Efficient Training on Multiple CPUs"),Eo.forEach(n),It.forEach(n),it=h(e),ce=r(e,"P",{});var yo=a(ce);Wt=i(yo,"When training on a single CPU is too slow, we can use multiple CPUs. This guide focuses on PyTorch-based DDP enabling distributed CPU training efficiently."),yo.forEach(n),st=h(e),R=r(e,"H2",{class:!0});var Rt=a(R);S=r(Rt,"A",{id:!0,class:!0,href:!0});var Po=a(S);Be=r(Po,"SPAN",{});var To=a(Be);T(z.$$.fragment,To),To.forEach(n),Po.forEach(n),Bt=h(Rt),Ke=r(Rt,"SPAN",{});var Co=a(Ke);Kt=i(Co,"Intel\xAE oneCCL Bindings for PyTorch"),Co.forEach(n),Rt.forEach(n),ct=h(e),w=r(e,"P",{});var se=a(w);V=r(se,"A",{href:!0,rel:!0});var $o=a(V);jt=i($o,"Intel\xAE oneCCL"),$o.forEach(n),Gt=i(se," (collective communications library) is a library for efficient distributed deep learning training implementing such collectives like allreduce, allgather, alltoall. For more information on oneCCL, please refer to the "),X=r(se,"A",{href:!0,rel:!0});var ko=a(X);zt=i(ko,"oneCCL documentation"),ko.forEach(n),Vt=i(se," and "),F=r(se,"A",{href:!0,rel:!0});var Do=a(F);Xt=i(Do,"oneCCL specification"),Do.forEach(n),Ft=i(se,"."),se.forEach(n),pt=h(e),E=r(e,"P",{});var Oe=a(E);Jt=i(Oe,"Module "),je=r(Oe,"CODE",{});var Ao=a(je);Yt=i(Ao,"oneccl_bindings_for_pytorch"),Ao.forEach(n),Qt=i(Oe," ("),Ge=r(Oe,"CODE",{});var Io=a(Ge);Zt=i(Io,"torch_ccl"),Io.forEach(n),en=i(Oe," before version 1.12)  implements PyTorch C10D ProcessGroup API and can be dynamically loaded as external ProcessGroup and only works on Linux platform now"),Oe.forEach(n),ht=h(e),q=r(e,"P",{});var Mt=a(q);tn=i(Mt,"Check more detailed information for "),J=r(Mt,"A",{href:!0,rel:!0});var Ro=a(J);nn=i(Ro,"oneccl_bind_pt"),Ro.forEach(n),on=i(Mt,"."),Mt.forEach(n),ft=h(e),M=r(e,"H3",{class:!0});var Lt=a(M);H=r(Lt,"A",{id:!0,class:!0,href:!0});var Mo=a(H);ze=r(Mo,"SPAN",{});var Lo=a(ze);T(Y.$$.fragment,Lo),Lo.forEach(n),Mo.forEach(n),rn=h(Lt),Ve=r(Lt,"SPAN",{});var Uo=a(Ve);an=i(Uo,"Intel\xAE oneCCL Bindings for PyTorch installation:"),Uo.forEach(n),Lt.forEach(n),dt=h(e),pe=r(e,"P",{});var No=a(pe);ln=i(No,"Wheel files are available for the following Python versions:"),No.forEach(n),ut=h(e),W=r(e,"TABLE",{});var Ut=a(W);Xe=r(Ut,"THEAD",{});var Oo=a(Xe);d=r(Oo,"TR",{});var v=a(d);he=r(v,"TH",{align:!0});var So=a(he);sn=i(So,"Extension Version"),So.forEach(n),cn=h(v),fe=r(v,"TH",{align:!0});var qo=a(fe);pn=i(qo,"Python 3.6"),qo.forEach(n),hn=h(v),de=r(v,"TH",{align:!0});var Ho=a(de);fn=i(Ho,"Python 3.7"),Ho.forEach(n),dn=h(v),ue=r(v,"TH",{align:!0});var Wo=a(ue);un=i(Wo,"Python 3.8"),Wo.forEach(n),_n=h(v),_e=r(v,"TH",{align:!0});var Bo=a(_e);mn=i(Bo,"Python 3.9"),Bo.forEach(n),vn=h(v),me=r(v,"TH",{align:!0});var Ko=a(me);gn=i(Ko,"Python 3.10"),Ko.forEach(n),v.forEach(n),Oo.forEach(n),bn=h(Ut),L=r(Ut,"TBODY",{});var Se=a(L);u=r(Se,"TR",{});var g=a(u);ve=r(g,"TD",{align:!0});var jo=a(ve);xn=i(jo,"1.12.0"),jo.forEach(n),wn=h(g),Fe=r(g,"TD",{align:!0}),a(Fe).forEach(n),En=h(g),ge=r(g,"TD",{align:!0});var Go=a(ge);yn=i(Go,"\u221A"),Go.forEach(n),Pn=h(g),be=r(g,"TD",{align:!0});var zo=a(be);Tn=i(zo,"\u221A"),zo.forEach(n),Cn=h(g),xe=r(g,"TD",{align:!0});var Vo=a(xe);$n=i(Vo,"\u221A"),Vo.forEach(n),kn=h(g),we=r(g,"TD",{align:!0});var Xo=a(we);Dn=i(Xo,"\u221A"),Xo.forEach(n),g.forEach(n),An=h(Se),_=r(Se,"TR",{});var b=a(_);Ee=r(b,"TD",{align:!0});var Fo=a(Ee);In=i(Fo,"1.11.0"),Fo.forEach(n),Rn=h(b),Je=r(b,"TD",{align:!0}),a(Je).forEach(n),Mn=h(b),ye=r(b,"TD",{align:!0});var Jo=a(ye);Ln=i(Jo,"\u221A"),Jo.forEach(n),Un=h(b),Pe=r(b,"TD",{align:!0});var Yo=a(Pe);Nn=i(Yo,"\u221A"),Yo.forEach(n),On=h(b),Te=r(b,"TD",{align:!0});var Qo=a(Te);Sn=i(Qo,"\u221A"),Qo.forEach(n),qn=h(b),Ce=r(b,"TD",{align:!0});var Zo=a(Ce);Hn=i(Zo,"\u221A"),Zo.forEach(n),b.forEach(n),Wn=h(Se),m=r(Se,"TR",{});var x=a(m);$e=r(x,"TD",{align:!0});var er=a($e);Bn=i(er,"1.10.0"),er.forEach(n),Kn=h(x),ke=r(x,"TD",{align:!0});var tr=a(ke);jn=i(tr,"\u221A"),tr.forEach(n),Gn=h(x),De=r(x,"TD",{align:!0});var nr=a(De);zn=i(nr,"\u221A"),nr.forEach(n),Vn=h(x),Ae=r(x,"TD",{align:!0});var or=a(Ae);Xn=i(or,"\u221A"),or.forEach(n),Fn=h(x),Ie=r(x,"TD",{align:!0});var rr=a(Ie);Jn=i(rr,"\u221A"),rr.forEach(n),Yn=h(x),Ye=r(x,"TD",{align:!0}),a(Ye).forEach(n),x.forEach(n),Se.forEach(n),Ut.forEach(n),_t=h(e),T(Q.$$.fragment,e),mt=h(e),y=r(e,"P",{});var qe=a(y);Qn=i(qe,"where "),Qe=r(qe,"CODE",{});var ar=a(Qe);Zn=i(ar,"{pytorch_version}"),ar.forEach(n),eo=i(qe,` should be your PyTorch version, for instance 1.12.0.
Check more approaches for `),Z=r(qe,"A",{href:!0,rel:!0});var lr=a(Z);to=i(lr,"oneccl_bind_pt installation"),lr.forEach(n),no=i(qe,`.
Versions of oneCCL and PyTorch must match.`),qe.forEach(n),vt=h(e),U=r(e,"H2",{class:!0});var Nt=a(U);B=r(Nt,"A",{id:!0,class:!0,href:!0});var ir=a(B);Ze=r(ir,"SPAN",{});var sr=a(Ze);T(ee.$$.fragment,sr),sr.forEach(n),ir.forEach(n),oo=h(Nt),et=r(Nt,"SPAN",{});var cr=a(et);ro=i(cr,"Intel\xAE MPI library"),cr.forEach(n),Nt.forEach(n),gt=i(e,`

Use this standards-based MPI implementation to deliver flexible, efficient, scalable cluster messaging on Intel\xAE architecture. This component is part of the Intel\xAE oneAPI HPC Toolkit.
It can be installed via [MPI](https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#mpi).
`),Re=r(e,"P",{});var pr=a(Re);ao=i(pr,"Please set the environment by following command before using it."),pr.forEach(n),bt=h(e),T(te.$$.fragment,e),xt=h(e),Me=r(e,"P",{});var hr=a(Me);lo=i(hr,"The following \u201CUsage in Trainer\u201D takes mpirun in Intel\xAE MPI library as an example."),hr.forEach(n),wt=h(e),N=r(e,"H2",{class:!0});var Ot=a(N);K=r(Ot,"A",{id:!0,class:!0,href:!0});var fr=a(K);tt=r(fr,"SPAN",{});var dr=a(tt);T(ne.$$.fragment,dr),dr.forEach(n),fr.forEach(n),io=h(Ot),nt=r(Ot,"SPAN",{});var ur=a(nt);so=i(ur,"Usage in Trainer"),ur.forEach(n),Ot.forEach(n),Et=i(e,`

To enable multi CPU distributed training in the Trainer with the ccl backend, users should add **\`--xpu_backend ccl\`** in the command arguments.
`),oe=r(e,"P",{});var go=a(oe);co=i(go,"Let\u2019s see an example with the "),re=r(go,"A",{href:!0,rel:!0});var _r=a(re);po=i(_r,"question-answering example"),_r.forEach(n),go.forEach(n),yt=h(e),Le=r(e,"P",{});var mr=a(Le);ho=i(mr,"The following command enables training with 2 processes on one Xeon node, with one process running per one socket. The variables OMP_NUM_THREADS/CCL_WORKER_COUNT can be tuned for optimal performance."),mr.forEach(n),Pt=h(e),T(ae.$$.fragment,e),Tt=h(e),Ue=r(e,"P",{});var vr=a(Ue);fo=i(vr,"The following command enables training with a total of four processes on two Xeons (node0 and node1, taking node0 as the main process), ppn (processes per node) is set to 2, with one process running per one socket. The variables OMP_NUM_THREADS/CCL_WORKER_COUNT can be tuned for optimal performance."),vr.forEach(n),Ct=h(e),Ne=r(e,"P",{});var gr=a(Ne);uo=i(gr,"In node0, you need to create a configuration file which contains the IP addresses of each node (for example hostfile) and pass that configuration file path as an argument."),gr.forEach(n),$t=h(e),T(le.$$.fragment,e),kt=h(e),j=r(e,"P",{});var St=a(j);_o=i(St,"Now, run the following command in node0 and "),ot=r(St,"STRONG",{});var br=a(ot);mo=i(br,"4DDP"),br.forEach(n),vo=i(St," will be enabled in node0 and node1:"),St.forEach(n),Dt=h(e),T(ie.$$.fragment,e),this.h()},h(){s(A,"name","hf:doc:metadata"),s(A,"content",JSON.stringify($r)),s(O,"id","efficient-training-on-multiple-cpus"),s(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(O,"href","#efficient-training-on-multiple-cpus"),s(I,"class","relative group"),s(S,"id","intel-oneccl-bindings-for-pytorch"),s(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(S,"href","#intel-oneccl-bindings-for-pytorch"),s(R,"class","relative group"),s(V,"href","https://github.com/oneapi-src/oneCCL"),s(V,"rel","nofollow"),s(X,"href","https://spec.oneapi.com/versions/latest/elements/oneCCL/source/index.html"),s(X,"rel","nofollow"),s(F,"href","https://spec.oneapi.com/versions/latest/elements/oneCCL/source/index.html"),s(F,"rel","nofollow"),s(J,"href","https://github.com/intel/torch-ccl"),s(J,"rel","nofollow"),s(H,"id","intel-oneccl-bindings-for-pytorch-installation"),s(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(H,"href","#intel-oneccl-bindings-for-pytorch-installation"),s(M,"class","relative group"),s(he,"align","center"),s(fe,"align","center"),s(de,"align","center"),s(ue,"align","center"),s(_e,"align","center"),s(me,"align","center"),s(ve,"align","center"),s(Fe,"align","center"),s(ge,"align","center"),s(be,"align","center"),s(xe,"align","center"),s(we,"align","center"),s(Ee,"align","center"),s(Je,"align","center"),s(ye,"align","center"),s(Pe,"align","center"),s(Te,"align","center"),s(Ce,"align","center"),s($e,"align","center"),s(ke,"align","center"),s(De,"align","center"),s(Ae,"align","center"),s(Ie,"align","center"),s(Ye,"align","center"),s(Z,"href","https://github.com/intel/torch-ccl"),s(Z,"rel","nofollow"),s(B,"id","intel-mpi-library"),s(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(B,"href","#intel-mpi-library"),s(U,"class","relative group"),s(K,"id","usage-in-trainer"),s(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(K,"href","#usage-in-trainer"),s(N,"class","relative group"),s(re,"href","https://github.com/huggingface/transformers/tree/main/examples/pytorch/question-answering"),s(re,"rel","nofollow")},m(e,c){t(document.head,A),f(e,lt,c),f(e,I,c),t(I,O),t(O,He),C(G,He,null),t(I,qt),t(I,We),t(We,Ht),f(e,it,c),f(e,ce,c),t(ce,Wt),f(e,st,c),f(e,R,c),t(R,S),t(S,Be),C(z,Be,null),t(R,Bt),t(R,Ke),t(Ke,Kt),f(e,ct,c),f(e,w,c),t(w,V),t(V,jt),t(w,Gt),t(w,X),t(X,zt),t(w,Vt),t(w,F),t(F,Xt),t(w,Ft),f(e,pt,c),f(e,E,c),t(E,Jt),t(E,je),t(je,Yt),t(E,Qt),t(E,Ge),t(Ge,Zt),t(E,en),f(e,ht,c),f(e,q,c),t(q,tn),t(q,J),t(J,nn),t(q,on),f(e,ft,c),f(e,M,c),t(M,H),t(H,ze),C(Y,ze,null),t(M,rn),t(M,Ve),t(Ve,an),f(e,dt,c),f(e,pe,c),t(pe,ln),f(e,ut,c),f(e,W,c),t(W,Xe),t(Xe,d),t(d,he),t(he,sn),t(d,cn),t(d,fe),t(fe,pn),t(d,hn),t(d,de),t(de,fn),t(d,dn),t(d,ue),t(ue,un),t(d,_n),t(d,_e),t(_e,mn),t(d,vn),t(d,me),t(me,gn),t(W,bn),t(W,L),t(L,u),t(u,ve),t(ve,xn),t(u,wn),t(u,Fe),t(u,En),t(u,ge),t(ge,yn),t(u,Pn),t(u,be),t(be,Tn),t(u,Cn),t(u,xe),t(xe,$n),t(u,kn),t(u,we),t(we,Dn),t(L,An),t(L,_),t(_,Ee),t(Ee,In),t(_,Rn),t(_,Je),t(_,Mn),t(_,ye),t(ye,Ln),t(_,Un),t(_,Pe),t(Pe,Nn),t(_,On),t(_,Te),t(Te,Sn),t(_,qn),t(_,Ce),t(Ce,Hn),t(L,Wn),t(L,m),t(m,$e),t($e,Bn),t(m,Kn),t(m,ke),t(ke,jn),t(m,Gn),t(m,De),t(De,zn),t(m,Vn),t(m,Ae),t(Ae,Xn),t(m,Fn),t(m,Ie),t(Ie,Jn),t(m,Yn),t(m,Ye),f(e,_t,c),C(Q,e,c),f(e,mt,c),f(e,y,c),t(y,Qn),t(y,Qe),t(Qe,Zn),t(y,eo),t(y,Z),t(Z,to),t(y,no),f(e,vt,c),f(e,U,c),t(U,B),t(B,Ze),C(ee,Ze,null),t(U,oo),t(U,et),t(et,ro),f(e,gt,c),f(e,Re,c),t(Re,ao),f(e,bt,c),C(te,e,c),f(e,xt,c),f(e,Me,c),t(Me,lo),f(e,wt,c),f(e,N,c),t(N,K),t(K,tt),C(ne,tt,null),t(N,io),t(N,nt),t(nt,so),f(e,Et,c),f(e,oe,c),t(oe,co),t(oe,re),t(re,po),f(e,yt,c),f(e,Le,c),t(Le,ho),f(e,Pt,c),C(ae,e,c),f(e,Tt,c),f(e,Ue,c),t(Ue,fo),f(e,Ct,c),f(e,Ne,c),t(Ne,uo),f(e,$t,c),C(le,e,c),f(e,kt,c),f(e,j,c),t(j,_o),t(j,ot),t(ot,mo),t(j,vo),f(e,Dt,c),C(ie,e,c),At=!0},p:Pr,i(e){At||($(G.$$.fragment,e),$(z.$$.fragment,e),$(Y.$$.fragment,e),$(Q.$$.fragment,e),$(ee.$$.fragment,e),$(te.$$.fragment,e),$(ne.$$.fragment,e),$(ae.$$.fragment,e),$(le.$$.fragment,e),$(ie.$$.fragment,e),At=!0)},o(e){k(G.$$.fragment,e),k(z.$$.fragment,e),k(Y.$$.fragment,e),k(Q.$$.fragment,e),k(ee.$$.fragment,e),k(te.$$.fragment,e),k(ne.$$.fragment,e),k(ae.$$.fragment,e),k(le.$$.fragment,e),k(ie.$$.fragment,e),At=!1},d(e){n(A),e&&n(lt),e&&n(I),D(G),e&&n(it),e&&n(ce),e&&n(st),e&&n(R),D(z),e&&n(ct),e&&n(w),e&&n(pt),e&&n(E),e&&n(ht),e&&n(q),e&&n(ft),e&&n(M),D(Y),e&&n(dt),e&&n(pe),e&&n(ut),e&&n(W),e&&n(_t),D(Q,e),e&&n(mt),e&&n(y),e&&n(vt),e&&n(U),D(ee),e&&n(gt),e&&n(Re),e&&n(bt),D(te,e),e&&n(xt),e&&n(Me),e&&n(wt),e&&n(N),D(ne),e&&n(Et),e&&n(oe),e&&n(yt),e&&n(Le),e&&n(Pt),D(ae,e),e&&n(Tt),e&&n(Ue),e&&n(Ct),e&&n(Ne),e&&n($t),D(le,e),e&&n(kt),e&&n(j),e&&n(Dt),D(ie,e)}}}const $r={local:"efficient-training-on-multiple-cpus",sections:[{local:"intel-oneccl-bindings-for-pytorch",sections:[{local:"intel-oneccl-bindings-for-pytorch-installation",title:"Intel\xAE oneCCL Bindings for PyTorch installation:"}],title:"Intel\xAE oneCCL Bindings for PyTorch"},{local:"intel-mpi-library",title:"Intel\xAE MPI library"},{local:"usage-in-trainer",title:"Usage in Trainer"}],title:"Efficient Training on Multiple CPUs"};function kr(bo){return Tr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Rr extends xr{constructor(A){super();wr(this,A,kr,Cr,Er,{})}}export{Rr as default,$r as metadata};
