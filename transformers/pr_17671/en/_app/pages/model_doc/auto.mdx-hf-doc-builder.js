import{S as vUt,i as FUt,s as TUt,e as a,k as l,w as F,t as o,M as MUt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as EUt,L as j}from"../../chunks/vendor-hf-doc-builder.js";import{T as unt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as q}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function CUt($){let g,v,p,m,_,c,h,wo,xi,If,lt,$i,ki,gy,Nf,Oe,Qe,Si,Bn,hy,In,Nn,py,Ri,qn,_y,Pi,qf,Ra;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),xi=a("code"),If=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),$i=a("code"),ki=o('"new-model"'),gy=o(")."),Nf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Si=a("code"),Bn=o("NewModel"),hy=o(" is a subclass of "),In=a("a"),Nn=o("PreTrainedModel"),py=o(`, make sure its
`),Ri=a("code"),qn=o("config_class"),_y=o(` attribute is set to the same class you use when registering the model (here
`),Pi=a("code"),qf=o("NewModelConfig"),Ra=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var JS=s(p);m=r(JS,"NewModelConfig"),JS.forEach(t),_=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Bi=s(c);h=r(Bi,"PretrainedConfig"),Bi.forEach(t),wo=r(Ae,`, make sure its
`),xi=n(Ae,"CODE",{});var YS=s(xi);If=r(YS,"model_type"),YS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),$i=n(Ae,"CODE",{});var KS=s($i);ki=r(KS,'"new-model"'),KS.forEach(t),gy=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var Ao=s(Oe);Qe=r(Ao,"Likewise, if your "),Si=n(Ao,"CODE",{});var Pa=s(Si);Bn=r(Pa,"NewModel"),Pa.forEach(t),hy=r(Ao," is a subclass of "),In=n(Ao,"A",{href:!0});var ZS=s(In);Nn=r(ZS,"PreTrainedModel"),ZS.forEach(t),py=r(Ao,`, make sure its
`),Ri=n(Ao,"CODE",{});var jf=s(Ri);qn=r(jf,"config_class"),jf.forEach(t),_y=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Pi=n(Ao,"CODE",{});var eR=s(Pi);qf=r(eR,"NewModelConfig"),eR.forEach(t),Ra=r(Ao,")."),Ao.forEach(t),this.h()},h(){d(In,"href","/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,c),e(c,h),e(g,wo),e(g,xi),e(xi,If),e(g,lt),e(g,$i),e($i,ki),e(g,gy),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Si),e(Si,Bn),e(Oe,hy),e(Oe,In),e(In,Nn),e(Oe,py),e(Oe,Ri),e(Ri,qn),e(Oe,_y),e(Oe,Pi),e(Pi,qf),e(Oe,Ra)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function wUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LUt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function yUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xUt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function $Ut($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZUt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Jt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Jt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZJt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Yt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EYt($){let g,v,p,m,_,c,h,wo,xi,If,lt,$i,ki,gy,Nf,Oe,Qe,Si,Bn,hy,In,Nn,py,Ri,qn,_y,Pi,qf,Ra,He,Ae,JS,Bi,YS,KS,Ao,Pa,ZS,jf,eR,mUe,YXe,Ii,Df,one,uy,gUe,rne,hUe,KXe,jn,pUe,tne,_Ue,uUe,ane,bUe,vUe,ZXe,by,eze,oR,FUe,oze,Gf,rze,Ni,Of,nne,vy,TUe,sne,MUe,tze,Lo,Fy,EUe,Ty,CUe,rR,wUe,AUe,LUe,My,yUe,lne,xUe,$Ue,kUe,xr,Ey,SUe,ine,RUe,PUe,qi,BUe,dne,IUe,NUe,cne,qUe,jUe,DUe,A,Vf,fne,GUe,OUe,tR,VUe,XUe,zUe,Xf,mne,WUe,QUe,aR,HUe,UUe,JUe,zf,gne,YUe,KUe,nR,ZUe,eJe,oJe,Wf,hne,rJe,tJe,sR,aJe,nJe,sJe,Qf,pne,lJe,iJe,lR,dJe,cJe,fJe,Hf,_ne,mJe,gJe,iR,hJe,pJe,_Je,Uf,une,uJe,bJe,dR,vJe,FJe,TJe,Jf,bne,MJe,EJe,cR,CJe,wJe,AJe,Yf,vne,LJe,yJe,fR,xJe,$Je,kJe,Kf,Fne,SJe,RJe,mR,PJe,BJe,IJe,Zf,Tne,NJe,qJe,gR,jJe,DJe,GJe,em,Mne,OJe,VJe,hR,XJe,zJe,WJe,om,Ene,QJe,HJe,pR,UJe,JJe,YJe,rm,Cne,KJe,ZJe,_R,eYe,oYe,rYe,tm,wne,tYe,aYe,uR,nYe,sYe,lYe,am,Ane,iYe,dYe,bR,cYe,fYe,mYe,nm,Lne,gYe,hYe,vR,pYe,_Ye,uYe,sm,yne,bYe,vYe,FR,FYe,TYe,MYe,lm,xne,EYe,CYe,TR,wYe,AYe,LYe,im,$ne,yYe,xYe,MR,$Ye,kYe,SYe,dm,kne,RYe,PYe,ER,BYe,IYe,NYe,cm,Sne,qYe,jYe,CR,DYe,GYe,OYe,fm,Rne,VYe,XYe,wR,zYe,WYe,QYe,mm,Pne,HYe,UYe,AR,JYe,YYe,KYe,gm,Bne,ZYe,eKe,LR,oKe,rKe,tKe,hm,Ine,aKe,nKe,yR,sKe,lKe,iKe,pm,Nne,dKe,cKe,xR,fKe,mKe,gKe,_m,qne,hKe,pKe,$R,_Ke,uKe,bKe,um,jne,vKe,FKe,kR,TKe,MKe,EKe,bm,Dne,CKe,wKe,SR,AKe,LKe,yKe,vm,Gne,xKe,$Ke,RR,kKe,SKe,RKe,Fm,One,PKe,BKe,PR,IKe,NKe,qKe,Tm,Vne,jKe,DKe,BR,GKe,OKe,VKe,Mm,Xne,XKe,zKe,IR,WKe,QKe,HKe,Em,zne,UKe,JKe,NR,YKe,KKe,ZKe,Cm,Wne,eZe,oZe,qR,rZe,tZe,aZe,wm,Qne,nZe,sZe,jR,lZe,iZe,dZe,Am,Hne,cZe,fZe,DR,mZe,gZe,hZe,Lm,Une,pZe,_Ze,GR,uZe,bZe,vZe,ym,Jne,FZe,TZe,OR,MZe,EZe,CZe,xm,Yne,wZe,AZe,VR,LZe,yZe,xZe,$m,Kne,$Ze,kZe,XR,SZe,RZe,PZe,km,Zne,BZe,IZe,zR,NZe,qZe,jZe,Sm,ese,DZe,GZe,WR,OZe,VZe,XZe,Rm,ose,zZe,WZe,QR,QZe,HZe,UZe,Pm,rse,JZe,YZe,HR,KZe,ZZe,eeo,Bm,tse,oeo,reo,UR,teo,aeo,neo,Im,ase,seo,leo,JR,ieo,deo,ceo,Nm,nse,feo,meo,YR,geo,heo,peo,qm,sse,_eo,ueo,KR,beo,veo,Feo,jm,lse,Teo,Meo,ZR,Eeo,Ceo,weo,Dm,ise,Aeo,Leo,eP,yeo,xeo,$eo,Gm,dse,keo,Seo,oP,Reo,Peo,Beo,Om,cse,Ieo,Neo,rP,qeo,jeo,Deo,Vm,fse,Geo,Oeo,tP,Veo,Xeo,zeo,Xm,mse,Weo,Qeo,aP,Heo,Ueo,Jeo,zm,gse,Yeo,Keo,nP,Zeo,eoo,ooo,Wm,hse,roo,too,sP,aoo,noo,soo,Qm,pse,loo,ioo,lP,doo,coo,foo,Hm,_se,moo,goo,iP,hoo,poo,_oo,Um,use,uoo,boo,dP,voo,Foo,Too,Jm,bse,Moo,Eoo,cP,Coo,woo,Aoo,Ym,vse,Loo,yoo,fP,xoo,$oo,koo,Km,Fse,Soo,Roo,mP,Poo,Boo,Ioo,Zm,Tse,Noo,qoo,gP,joo,Doo,Goo,eg,Mse,Ooo,Voo,hP,Xoo,zoo,Woo,og,Ese,Qoo,Hoo,pP,Uoo,Joo,Yoo,rg,Cse,Koo,Zoo,_P,ero,oro,rro,tg,wse,tro,aro,uP,nro,sro,lro,ag,Ase,iro,dro,bP,cro,fro,mro,ng,Lse,gro,hro,vP,pro,_ro,uro,sg,yse,bro,vro,FP,Fro,Tro,Mro,lg,xse,Ero,Cro,TP,wro,Aro,Lro,ig,$se,yro,xro,MP,$ro,kro,Sro,dg,kse,Rro,Pro,EP,Bro,Iro,Nro,cg,Sse,qro,jro,CP,Dro,Gro,Oro,fg,Rse,Vro,Xro,wP,zro,Wro,Qro,mg,Pse,Hro,Uro,AP,Jro,Yro,Kro,gg,Bse,Zro,eto,LP,oto,rto,tto,hg,Ise,ato,nto,yP,sto,lto,ito,pg,Nse,dto,cto,xP,fto,mto,gto,_g,qse,hto,pto,$P,_to,uto,bto,ug,jse,vto,Fto,kP,Tto,Mto,Eto,bg,Dse,Cto,wto,SP,Ato,Lto,yto,vg,Gse,xto,$to,RP,kto,Sto,Rto,Fg,Ose,Pto,Bto,PP,Ito,Nto,qto,Tg,Vse,jto,Dto,BP,Gto,Oto,Vto,Mg,Xse,Xto,zto,IP,Wto,Qto,Hto,Eg,zse,Uto,Jto,NP,Yto,Kto,Zto,Cg,Wse,eao,oao,qP,rao,tao,aao,wg,Qse,nao,sao,jP,lao,iao,dao,Ag,Hse,cao,fao,DP,mao,gao,hao,Lg,Use,pao,_ao,GP,uao,bao,vao,yg,Jse,Fao,Tao,OP,Mao,Eao,Cao,xg,Yse,wao,Aao,VP,Lao,yao,xao,$g,Kse,$ao,kao,XP,Sao,Rao,Pao,kg,Zse,Bao,Iao,zP,Nao,qao,jao,Sg,ele,Dao,Gao,WP,Oao,Vao,Xao,Rg,ole,zao,Wao,QP,Qao,Hao,Uao,Pg,rle,Jao,Yao,HP,Kao,Zao,eno,Bg,tle,ono,rno,UP,tno,ano,nno,Ig,ale,sno,lno,JP,ino,dno,cno,Ng,nle,fno,mno,YP,gno,hno,pno,qg,sle,_no,uno,KP,bno,vno,Fno,jg,lle,Tno,Mno,ZP,Eno,Cno,wno,Dg,ile,Ano,Lno,eB,yno,xno,$no,Gg,dle,kno,Sno,oB,Rno,Pno,Bno,Og,cle,Ino,Nno,rB,qno,jno,Dno,Vg,fle,Gno,Ono,tB,Vno,Xno,zno,Xg,mle,Wno,Qno,aB,Hno,Uno,Jno,zg,gle,Yno,Kno,nB,Zno,eso,oso,Wg,hle,rso,tso,sB,aso,nso,sso,Qg,ple,lso,iso,lB,dso,cso,fso,Hg,_le,mso,gso,iB,hso,pso,_so,Ug,ule,uso,bso,dB,vso,Fso,Tso,Jg,ble,Mso,Eso,cB,Cso,wso,Aso,Yg,vle,Lso,yso,fB,xso,$so,kso,Kg,Fle,Sso,Rso,mB,Pso,Bso,Iso,Zg,Tle,Nso,qso,gB,jso,Dso,Gso,eh,Oso,oh,Cy,Vso,Mle,Xso,aze,ji,rh,Ele,wy,zso,Cle,Wso,nze,yo,Ay,Qso,Ly,Hso,hB,Uso,Jso,Yso,yy,Kso,wle,Zso,elo,olo,$r,xy,rlo,Ale,tlo,alo,Ba,nlo,Lle,slo,llo,yle,ilo,dlo,xle,clo,flo,mlo,k,Dn,$le,glo,hlo,pB,plo,_lo,_B,ulo,blo,vlo,Gn,kle,Flo,Tlo,uB,Mlo,Elo,bB,Clo,wlo,Alo,On,Sle,Llo,ylo,vB,xlo,$lo,FB,klo,Slo,Rlo,th,Rle,Plo,Blo,TB,Ilo,Nlo,qlo,Vn,Ple,jlo,Dlo,MB,Glo,Olo,EB,Vlo,Xlo,zlo,ah,Ble,Wlo,Qlo,CB,Hlo,Ulo,Jlo,nh,Ile,Ylo,Klo,wB,Zlo,eio,oio,sh,Nle,rio,tio,AB,aio,nio,sio,Xn,qle,lio,iio,LB,dio,cio,yB,fio,mio,gio,zn,jle,hio,pio,xB,_io,uio,$B,bio,vio,Fio,Wn,Dle,Tio,Mio,kB,Eio,Cio,SB,wio,Aio,Lio,lh,Gle,yio,xio,RB,$io,kio,Sio,ih,Ole,Rio,Pio,PB,Bio,Iio,Nio,dh,Vle,qio,jio,BB,Dio,Gio,Oio,Qn,Xle,Vio,Xio,IB,zio,Wio,NB,Qio,Hio,Uio,ch,zle,Jio,Yio,qB,Kio,Zio,edo,Hn,Wle,odo,rdo,jB,tdo,ado,DB,ndo,sdo,ldo,Un,Qle,ido,ddo,GB,cdo,fdo,OB,mdo,gdo,hdo,Jn,Hle,pdo,_do,VB,udo,bdo,XB,vdo,Fdo,Tdo,Yn,Ule,Mdo,Edo,zB,Cdo,wdo,WB,Ado,Ldo,ydo,fh,Jle,xdo,$do,QB,kdo,Sdo,Rdo,Kn,Yle,Pdo,Bdo,HB,Ido,Ndo,UB,qdo,jdo,Ddo,Zn,Kle,Gdo,Odo,JB,Vdo,Xdo,YB,zdo,Wdo,Qdo,es,Zle,Hdo,Udo,KB,Jdo,Ydo,ZB,Kdo,Zdo,eco,os,eie,oco,rco,eI,tco,aco,oI,nco,sco,lco,rs,oie,ico,dco,rI,cco,fco,tI,mco,gco,hco,ts,rie,pco,_co,aI,uco,bco,nI,vco,Fco,Tco,mh,tie,Mco,Eco,sI,Cco,wco,Aco,as,aie,Lco,yco,lI,xco,$co,iI,kco,Sco,Rco,gh,nie,Pco,Bco,dI,Ico,Nco,qco,ns,sie,jco,Dco,cI,Gco,Oco,fI,Vco,Xco,zco,ss,lie,Wco,Qco,mI,Hco,Uco,gI,Jco,Yco,Kco,ls,iie,Zco,efo,hI,ofo,rfo,pI,tfo,afo,nfo,hh,die,sfo,lfo,_I,ifo,dfo,cfo,is,cie,ffo,mfo,uI,gfo,hfo,bI,pfo,_fo,ufo,ds,fie,bfo,vfo,vI,Ffo,Tfo,FI,Mfo,Efo,Cfo,cs,mie,wfo,Afo,TI,Lfo,yfo,MI,xfo,$fo,kfo,ph,gie,Sfo,Rfo,EI,Pfo,Bfo,Ifo,fs,hie,Nfo,qfo,CI,jfo,Dfo,wI,Gfo,Ofo,Vfo,ms,pie,Xfo,zfo,AI,Wfo,Qfo,LI,Hfo,Ufo,Jfo,gs,_ie,Yfo,Kfo,yI,Zfo,emo,xI,omo,rmo,tmo,hs,uie,amo,nmo,$I,smo,lmo,kI,imo,dmo,cmo,ps,bie,fmo,mmo,SI,gmo,hmo,RI,pmo,_mo,umo,_s,vie,bmo,vmo,PI,Fmo,Tmo,BI,Mmo,Emo,Cmo,us,Fie,wmo,Amo,II,Lmo,ymo,NI,xmo,$mo,kmo,bs,Tie,Smo,Rmo,qI,Pmo,Bmo,jI,Imo,Nmo,qmo,_h,Mie,jmo,Dmo,DI,Gmo,Omo,Vmo,vs,Eie,Xmo,zmo,GI,Wmo,Qmo,OI,Hmo,Umo,Jmo,uh,Cie,Ymo,Kmo,VI,Zmo,ego,ogo,bh,wie,rgo,tgo,XI,ago,ngo,sgo,Fs,Aie,lgo,igo,zI,dgo,cgo,WI,fgo,mgo,ggo,Ts,Lie,hgo,pgo,QI,_go,ugo,HI,bgo,vgo,Fgo,Ms,yie,Tgo,Mgo,UI,Ego,Cgo,JI,wgo,Ago,Lgo,vh,xie,ygo,xgo,YI,$go,kgo,Sgo,Es,$ie,Rgo,Pgo,KI,Bgo,Igo,ZI,Ngo,qgo,jgo,Cs,kie,Dgo,Ggo,eN,Ogo,Vgo,oN,Xgo,zgo,Wgo,ws,Sie,Qgo,Hgo,rN,Ugo,Jgo,tN,Ygo,Kgo,Zgo,As,Rie,eho,oho,aN,rho,tho,nN,aho,nho,sho,Ls,Pie,lho,iho,sN,dho,cho,lN,fho,mho,gho,ys,Bie,hho,pho,iN,_ho,uho,dN,bho,vho,Fho,xs,Iie,Tho,Mho,cN,Eho,Cho,fN,who,Aho,Lho,$s,Nie,yho,xho,mN,$ho,kho,gN,Sho,Rho,Pho,Fh,qie,Bho,Iho,hN,Nho,qho,jho,ks,jie,Dho,Gho,pN,Oho,Vho,_N,Xho,zho,Who,Ss,Die,Qho,Hho,uN,Uho,Jho,bN,Yho,Kho,Zho,Th,Gie,epo,opo,vN,rpo,tpo,apo,Mh,Oie,npo,spo,FN,lpo,ipo,dpo,Eh,Vie,cpo,fpo,TN,mpo,gpo,hpo,Ch,Xie,ppo,_po,MN,upo,bpo,vpo,Rs,zie,Fpo,Tpo,EN,Mpo,Epo,CN,Cpo,wpo,Apo,wh,Wie,Lpo,ypo,wN,xpo,$po,kpo,Ps,Qie,Spo,Rpo,AN,Ppo,Bpo,LN,Ipo,Npo,qpo,Bs,Hie,jpo,Dpo,yN,Gpo,Opo,xN,Vpo,Xpo,zpo,Is,Uie,Wpo,Qpo,$N,Hpo,Upo,kN,Jpo,Ypo,Kpo,Ns,Jie,Zpo,e_o,SN,o_o,r_o,RN,t_o,a_o,n_o,qs,Yie,s_o,l_o,PN,i_o,d_o,BN,c_o,f_o,m_o,js,Kie,g_o,h_o,IN,p_o,__o,NN,u_o,b_o,v_o,Ah,Zie,F_o,T_o,qN,M_o,E_o,C_o,Lh,ede,w_o,A_o,jN,L_o,y_o,x_o,Ds,ode,$_o,k_o,DN,S_o,R_o,GN,P_o,B_o,I_o,Gs,rde,N_o,q_o,ON,j_o,D_o,VN,G_o,O_o,V_o,Os,tde,X_o,z_o,XN,W_o,Q_o,zN,H_o,U_o,J_o,yh,ade,Y_o,K_o,WN,Z_o,euo,ouo,xh,nde,ruo,tuo,QN,auo,nuo,suo,$h,sde,luo,iuo,HN,duo,cuo,fuo,Vs,lde,muo,guo,UN,huo,puo,JN,_uo,uuo,buo,Xs,ide,vuo,Fuo,YN,Tuo,Muo,KN,Euo,Cuo,wuo,kh,dde,Auo,Luo,ZN,yuo,xuo,$uo,Sh,cde,kuo,Suo,eq,Ruo,Puo,Buo,Rh,fde,Iuo,Nuo,oq,quo,juo,Duo,zs,mde,Guo,Ouo,rq,Vuo,Xuo,tq,zuo,Wuo,Quo,Ph,gde,Huo,Uuo,aq,Juo,Yuo,Kuo,Bh,hde,Zuo,e1o,nq,o1o,r1o,t1o,Ws,pde,a1o,n1o,sq,s1o,l1o,lq,i1o,d1o,c1o,Qs,_de,f1o,m1o,iq,g1o,h1o,dq,p1o,_1o,u1o,Hs,ude,b1o,v1o,cq,F1o,T1o,fq,M1o,E1o,C1o,Us,bde,w1o,A1o,mq,L1o,y1o,gq,x1o,$1o,k1o,Ih,S1o,Nh,$y,R1o,vde,P1o,sze,Di,qh,Fde,ky,B1o,Tde,I1o,lze,xo,Sy,N1o,Ry,q1o,hq,j1o,D1o,G1o,Py,O1o,Mde,V1o,X1o,z1o,Ue,By,W1o,Ede,Q1o,H1o,Ia,U1o,Cde,J1o,Y1o,wde,K1o,Z1o,Ade,e7o,o7o,r7o,J,jh,Lde,t7o,a7o,pq,n7o,s7o,l7o,Dh,yde,i7o,d7o,_q,c7o,f7o,m7o,Gh,xde,g7o,h7o,uq,p7o,_7o,u7o,Oh,$de,b7o,v7o,bq,F7o,T7o,M7o,Vh,kde,E7o,C7o,vq,w7o,A7o,L7o,Xh,Sde,y7o,x7o,Fq,$7o,k7o,S7o,zh,Rde,R7o,P7o,Tq,B7o,I7o,N7o,Wh,Pde,q7o,j7o,Mq,D7o,G7o,O7o,Qh,Bde,V7o,X7o,Eq,z7o,W7o,Q7o,Hh,Ide,H7o,U7o,Cq,J7o,Y7o,K7o,Uh,Nde,Z7o,e2o,wq,o2o,r2o,t2o,Jh,qde,a2o,n2o,Aq,s2o,l2o,i2o,Yh,jde,d2o,c2o,Lq,f2o,m2o,g2o,Kh,Dde,h2o,p2o,yq,_2o,u2o,b2o,Zh,Gde,v2o,F2o,xq,T2o,M2o,E2o,ep,Ode,C2o,w2o,$q,A2o,L2o,y2o,op,Vde,x2o,$2o,kq,k2o,S2o,R2o,rp,Xde,P2o,B2o,Sq,I2o,N2o,q2o,tp,zde,j2o,D2o,Rq,G2o,O2o,V2o,ap,Wde,X2o,z2o,Pq,W2o,Q2o,H2o,np,Qde,U2o,J2o,Bq,Y2o,K2o,Z2o,sp,Hde,ebo,obo,Iq,rbo,tbo,abo,lp,Ude,nbo,sbo,Nq,lbo,ibo,dbo,ip,Jde,cbo,fbo,qq,mbo,gbo,hbo,dp,Yde,pbo,_bo,jq,ubo,bbo,vbo,cp,Kde,Fbo,Tbo,Dq,Mbo,Ebo,Cbo,fp,Zde,wbo,Abo,Gq,Lbo,ybo,xbo,mp,ece,$bo,kbo,Oq,Sbo,Rbo,Pbo,gp,oce,Bbo,Ibo,Vq,Nbo,qbo,jbo,hp,rce,Dbo,Gbo,Xq,Obo,Vbo,Xbo,pp,tce,zbo,Wbo,zq,Qbo,Hbo,Ubo,_p,ace,Jbo,Ybo,Wq,Kbo,Zbo,evo,up,nce,ovo,rvo,Qq,tvo,avo,nvo,bp,sce,svo,lvo,Hq,ivo,dvo,cvo,vp,lce,fvo,mvo,Uq,gvo,hvo,pvo,Fp,_vo,Tp,uvo,Mp,Iy,bvo,ice,vvo,ize,Gi,Ep,dce,Ny,Fvo,cce,Tvo,dze,$o,qy,Mvo,jy,Evo,Jq,Cvo,wvo,Avo,Dy,Lvo,fce,yvo,xvo,$vo,Je,Gy,kvo,mce,Svo,Rvo,Oi,Pvo,gce,Bvo,Ivo,hce,Nvo,qvo,jvo,fe,Cp,pce,Dvo,Gvo,Yq,Ovo,Vvo,Xvo,wp,_ce,zvo,Wvo,Kq,Qvo,Hvo,Uvo,Ap,uce,Jvo,Yvo,Zq,Kvo,Zvo,eFo,Lp,bce,oFo,rFo,ej,tFo,aFo,nFo,yp,vce,sFo,lFo,oj,iFo,dFo,cFo,xp,Fce,fFo,mFo,rj,gFo,hFo,pFo,$p,Tce,_Fo,uFo,tj,bFo,vFo,FFo,kp,Mce,TFo,MFo,aj,EFo,CFo,wFo,Sp,Ece,AFo,LFo,nj,yFo,xFo,$Fo,Rp,Cce,kFo,SFo,sj,RFo,PFo,BFo,Pp,wce,IFo,NFo,lj,qFo,jFo,DFo,Bp,Ace,GFo,OFo,ij,VFo,XFo,zFo,Ip,Lce,WFo,QFo,dj,HFo,UFo,JFo,Np,yce,YFo,KFo,cj,ZFo,e6o,o6o,qp,xce,r6o,t6o,fj,a6o,n6o,s6o,jp,$ce,l6o,i6o,mj,d6o,c6o,f6o,Dp,kce,m6o,g6o,gj,h6o,p6o,_6o,Gp,Sce,u6o,b6o,hj,v6o,F6o,T6o,Op,Rce,M6o,E6o,pj,C6o,w6o,A6o,Vp,L6o,Xp,y6o,zp,Oy,x6o,Pce,$6o,cze,Vi,Wp,Bce,Vy,k6o,Ice,S6o,fze,ko,Xy,R6o,Xi,P6o,_j,B6o,I6o,uj,N6o,q6o,j6o,zy,D6o,Nce,G6o,O6o,V6o,it,Wy,X6o,qce,z6o,W6o,zi,Q6o,jce,H6o,U6o,bj,J6o,Y6o,K6o,Qp,Z6o,Ye,Qy,eTo,Dce,oTo,rTo,Na,tTo,Gce,aTo,nTo,Oce,sTo,lTo,Vce,iTo,dTo,cTo,y,Hp,Xce,fTo,mTo,vj,gTo,hTo,pTo,Up,zce,_To,uTo,Fj,bTo,vTo,FTo,Jp,Wce,TTo,MTo,Tj,ETo,CTo,wTo,Yp,Qce,ATo,LTo,Mj,yTo,xTo,$To,Kp,Hce,kTo,STo,Ej,RTo,PTo,BTo,Zp,Uce,ITo,NTo,Cj,qTo,jTo,DTo,e_,Jce,GTo,OTo,wj,VTo,XTo,zTo,o_,Yce,WTo,QTo,Aj,HTo,UTo,JTo,r_,Kce,YTo,KTo,Lj,ZTo,eMo,oMo,t_,Zce,rMo,tMo,yj,aMo,nMo,sMo,a_,efe,lMo,iMo,xj,dMo,cMo,fMo,n_,ofe,mMo,gMo,$j,hMo,pMo,_Mo,s_,rfe,uMo,bMo,kj,vMo,FMo,TMo,l_,tfe,MMo,EMo,Sj,CMo,wMo,AMo,i_,afe,LMo,yMo,Rj,xMo,$Mo,kMo,d_,nfe,SMo,RMo,Pj,PMo,BMo,IMo,c_,sfe,NMo,qMo,Bj,jMo,DMo,GMo,f_,lfe,OMo,VMo,Ij,XMo,zMo,WMo,m_,ife,QMo,HMo,Nj,UMo,JMo,YMo,g_,dfe,KMo,ZMo,qj,e4o,o4o,r4o,h_,cfe,t4o,a4o,jj,n4o,s4o,l4o,p_,ffe,i4o,d4o,Dj,c4o,f4o,m4o,__,mfe,g4o,h4o,Gj,p4o,_4o,u4o,u_,gfe,b4o,v4o,Oj,F4o,T4o,M4o,b_,hfe,E4o,C4o,Vj,w4o,A4o,L4o,v_,pfe,y4o,x4o,Xj,$4o,k4o,S4o,F_,_fe,R4o,P4o,zj,B4o,I4o,N4o,T_,ufe,q4o,j4o,Wj,D4o,G4o,O4o,M_,bfe,V4o,X4o,Qj,z4o,W4o,Q4o,E_,vfe,H4o,U4o,Hj,J4o,Y4o,K4o,C_,Ffe,Z4o,eEo,Uj,oEo,rEo,tEo,w_,Tfe,aEo,nEo,Jj,sEo,lEo,iEo,A_,Mfe,dEo,cEo,Yj,fEo,mEo,gEo,L_,Efe,hEo,pEo,Kj,_Eo,uEo,bEo,Js,Cfe,vEo,FEo,Zj,TEo,MEo,eD,EEo,CEo,wEo,y_,wfe,AEo,LEo,oD,yEo,xEo,$Eo,x_,Afe,kEo,SEo,rD,REo,PEo,BEo,$_,Lfe,IEo,NEo,tD,qEo,jEo,DEo,k_,yfe,GEo,OEo,aD,VEo,XEo,zEo,S_,xfe,WEo,QEo,nD,HEo,UEo,JEo,R_,$fe,YEo,KEo,sD,ZEo,eCo,oCo,P_,kfe,rCo,tCo,lD,aCo,nCo,sCo,B_,Sfe,lCo,iCo,iD,dCo,cCo,fCo,I_,Rfe,mCo,gCo,dD,hCo,pCo,_Co,N_,Pfe,uCo,bCo,cD,vCo,FCo,TCo,q_,Bfe,MCo,ECo,fD,CCo,wCo,ACo,j_,Ife,LCo,yCo,mD,xCo,$Co,kCo,D_,Nfe,SCo,RCo,gD,PCo,BCo,ICo,G_,qfe,NCo,qCo,hD,jCo,DCo,GCo,O_,jfe,OCo,VCo,pD,XCo,zCo,WCo,V_,Dfe,QCo,HCo,_D,UCo,JCo,YCo,X_,Gfe,KCo,ZCo,uD,e5o,o5o,r5o,z_,Ofe,t5o,a5o,bD,n5o,s5o,l5o,W_,Vfe,i5o,d5o,vD,c5o,f5o,m5o,Q_,Xfe,g5o,h5o,FD,p5o,_5o,u5o,H_,zfe,b5o,v5o,TD,F5o,T5o,M5o,U_,Wfe,E5o,C5o,MD,w5o,A5o,L5o,J_,Qfe,y5o,x5o,ED,$5o,k5o,S5o,Y_,Hfe,R5o,P5o,CD,B5o,I5o,N5o,K_,Ufe,q5o,j5o,wD,D5o,G5o,O5o,Z_,Jfe,V5o,X5o,AD,z5o,W5o,Q5o,eu,Yfe,H5o,U5o,LD,J5o,Y5o,K5o,ou,Kfe,Z5o,e3o,yD,o3o,r3o,t3o,ru,Zfe,a3o,n3o,xD,s3o,l3o,i3o,tu,eme,d3o,c3o,$D,f3o,m3o,g3o,au,ome,h3o,p3o,kD,_3o,u3o,b3o,nu,rme,v3o,F3o,SD,T3o,M3o,E3o,su,tme,C3o,w3o,RD,A3o,L3o,y3o,lu,ame,x3o,$3o,PD,k3o,S3o,R3o,iu,nme,P3o,B3o,BD,I3o,N3o,q3o,du,sme,j3o,D3o,ID,G3o,O3o,V3o,cu,lme,X3o,z3o,ND,W3o,Q3o,H3o,fu,ime,U3o,J3o,qD,Y3o,K3o,Z3o,mu,dme,e0o,o0o,jD,r0o,t0o,a0o,gu,cme,n0o,s0o,DD,l0o,i0o,d0o,hu,fme,c0o,f0o,GD,m0o,g0o,h0o,pu,mme,p0o,_0o,OD,u0o,b0o,v0o,_u,gme,F0o,T0o,VD,M0o,E0o,C0o,uu,hme,w0o,A0o,XD,L0o,y0o,x0o,bu,pme,$0o,k0o,zD,S0o,R0o,P0o,vu,_me,B0o,I0o,WD,N0o,q0o,j0o,Fu,ume,D0o,G0o,QD,O0o,V0o,X0o,Tu,bme,z0o,W0o,HD,Q0o,H0o,U0o,Mu,vme,J0o,Y0o,UD,K0o,Z0o,ewo,Eu,Fme,owo,rwo,JD,two,awo,nwo,Cu,Tme,swo,lwo,YD,iwo,dwo,cwo,wu,Mme,fwo,mwo,KD,gwo,hwo,pwo,Au,Eme,_wo,uwo,ZD,bwo,vwo,Fwo,Lu,Cme,Two,Mwo,eG,Ewo,Cwo,wwo,yu,wme,Awo,Lwo,oG,ywo,xwo,$wo,xu,Ame,kwo,Swo,rG,Rwo,Pwo,Bwo,$u,Lme,Iwo,Nwo,tG,qwo,jwo,Dwo,ku,yme,Gwo,Owo,aG,Vwo,Xwo,zwo,Su,xme,Wwo,Qwo,nG,Hwo,Uwo,Jwo,Ru,$me,Ywo,Kwo,sG,Zwo,eAo,oAo,Pu,kme,rAo,tAo,lG,aAo,nAo,sAo,Bu,Sme,lAo,iAo,iG,dAo,cAo,fAo,Iu,Rme,mAo,gAo,dG,hAo,pAo,_Ao,Nu,Pme,uAo,bAo,cG,vAo,FAo,TAo,qu,Bme,MAo,EAo,fG,CAo,wAo,AAo,ju,Ime,LAo,yAo,mG,xAo,$Ao,kAo,Du,Nme,SAo,RAo,gG,PAo,BAo,IAo,Gu,qme,NAo,qAo,hG,jAo,DAo,GAo,Ou,jme,OAo,VAo,pG,XAo,zAo,WAo,Vu,Dme,QAo,HAo,_G,UAo,JAo,YAo,Xu,Gme,KAo,ZAo,uG,eLo,oLo,rLo,zu,Ome,tLo,aLo,bG,nLo,sLo,lLo,Wu,Vme,iLo,dLo,vG,cLo,fLo,mLo,Qu,Xme,gLo,hLo,FG,pLo,_Lo,uLo,Hu,zme,bLo,vLo,TG,FLo,TLo,MLo,Uu,Wme,ELo,CLo,MG,wLo,ALo,LLo,Ju,Qme,yLo,xLo,EG,$Lo,kLo,SLo,Yu,Hme,RLo,PLo,CG,BLo,ILo,NLo,Ku,qLo,Ume,jLo,DLo,Jme,GLo,OLo,Zu,mze,Wi,e1,Yme,Hy,VLo,Kme,XLo,gze,So,Uy,zLo,Qi,WLo,wG,QLo,HLo,AG,ULo,JLo,YLo,Jy,KLo,Zme,ZLo,eyo,oyo,dt,Yy,ryo,ege,tyo,ayo,Hi,nyo,oge,syo,lyo,LG,iyo,dyo,cyo,o1,fyo,Ke,Ky,myo,rge,gyo,hyo,qa,pyo,tge,_yo,uyo,age,byo,vyo,nge,Fyo,Tyo,Myo,G,r1,sge,Eyo,Cyo,yG,wyo,Ayo,Lyo,t1,lge,yyo,xyo,xG,$yo,kyo,Syo,a1,ige,Ryo,Pyo,$G,Byo,Iyo,Nyo,n1,dge,qyo,jyo,kG,Dyo,Gyo,Oyo,s1,cge,Vyo,Xyo,SG,zyo,Wyo,Qyo,l1,fge,Hyo,Uyo,RG,Jyo,Yyo,Kyo,i1,mge,Zyo,e8o,PG,o8o,r8o,t8o,d1,gge,a8o,n8o,BG,s8o,l8o,i8o,c1,hge,d8o,c8o,IG,f8o,m8o,g8o,f1,pge,h8o,p8o,NG,_8o,u8o,b8o,m1,_ge,v8o,F8o,qG,T8o,M8o,E8o,g1,uge,C8o,w8o,jG,A8o,L8o,y8o,h1,bge,x8o,$8o,DG,k8o,S8o,R8o,p1,vge,P8o,B8o,GG,I8o,N8o,q8o,_1,Fge,j8o,D8o,OG,G8o,O8o,V8o,u1,Tge,X8o,z8o,VG,W8o,Q8o,H8o,b1,Mge,U8o,J8o,XG,Y8o,K8o,Z8o,v1,Ege,e9o,o9o,zG,r9o,t9o,a9o,F1,Cge,n9o,s9o,WG,l9o,i9o,d9o,T1,wge,c9o,f9o,QG,m9o,g9o,h9o,M1,Age,p9o,_9o,HG,u9o,b9o,v9o,E1,Lge,F9o,T9o,UG,M9o,E9o,C9o,C1,yge,w9o,A9o,JG,L9o,y9o,x9o,w1,xge,$9o,k9o,YG,S9o,R9o,P9o,A1,$ge,B9o,I9o,KG,N9o,q9o,j9o,L1,kge,D9o,G9o,ZG,O9o,V9o,X9o,y1,Sge,z9o,W9o,eO,Q9o,H9o,U9o,x1,Rge,J9o,Y9o,oO,K9o,Z9o,exo,$1,Pge,oxo,rxo,rO,txo,axo,nxo,k1,Bge,sxo,lxo,tO,ixo,dxo,cxo,S1,Ige,fxo,mxo,aO,gxo,hxo,pxo,R1,Nge,_xo,uxo,nO,bxo,vxo,Fxo,P1,qge,Txo,Mxo,sO,Exo,Cxo,wxo,B1,jge,Axo,Lxo,lO,yxo,xxo,$xo,I1,Dge,kxo,Sxo,iO,Rxo,Pxo,Bxo,N1,Gge,Ixo,Nxo,dO,qxo,jxo,Dxo,q1,Oge,Gxo,Oxo,cO,Vxo,Xxo,zxo,j1,Vge,Wxo,Qxo,fO,Hxo,Uxo,Jxo,D1,Xge,Yxo,Kxo,mO,Zxo,e$o,o$o,G1,zge,r$o,t$o,gO,a$o,n$o,s$o,O1,Wge,l$o,i$o,hO,d$o,c$o,f$o,V1,Qge,m$o,g$o,pO,h$o,p$o,_$o,X1,Hge,u$o,b$o,_O,v$o,F$o,T$o,z1,Uge,M$o,E$o,uO,C$o,w$o,A$o,W1,Jge,L$o,y$o,bO,x$o,$$o,k$o,Q1,S$o,Yge,R$o,P$o,Kge,B$o,I$o,H1,hze,Ui,U1,Zge,Zy,N$o,ehe,q$o,pze,Ro,e8,j$o,Ji,D$o,vO,G$o,O$o,FO,V$o,X$o,z$o,o8,W$o,ohe,Q$o,H$o,U$o,ct,r8,J$o,rhe,Y$o,K$o,Yi,Z$o,the,eko,oko,TO,rko,tko,ako,J1,nko,Ze,t8,sko,ahe,lko,iko,ja,dko,nhe,cko,fko,she,mko,gko,lhe,hko,pko,_ko,z,Y1,ihe,uko,bko,MO,vko,Fko,Tko,K1,dhe,Mko,Eko,EO,Cko,wko,Ako,Z1,che,Lko,yko,CO,xko,$ko,kko,e7,fhe,Sko,Rko,wO,Pko,Bko,Iko,o7,mhe,Nko,qko,AO,jko,Dko,Gko,r7,ghe,Oko,Vko,LO,Xko,zko,Wko,t7,hhe,Qko,Hko,yO,Uko,Jko,Yko,a7,phe,Kko,Zko,xO,eSo,oSo,rSo,n7,_he,tSo,aSo,$O,nSo,sSo,lSo,s7,uhe,iSo,dSo,kO,cSo,fSo,mSo,l7,bhe,gSo,hSo,SO,pSo,_So,uSo,i7,vhe,bSo,vSo,RO,FSo,TSo,MSo,d7,Fhe,ESo,CSo,PO,wSo,ASo,LSo,c7,The,ySo,xSo,BO,$So,kSo,SSo,f7,Mhe,RSo,PSo,IO,BSo,ISo,NSo,m7,Ehe,qSo,jSo,NO,DSo,GSo,OSo,g7,Che,VSo,XSo,qO,zSo,WSo,QSo,h7,whe,HSo,USo,jO,JSo,YSo,KSo,p7,Ahe,ZSo,eRo,DO,oRo,rRo,tRo,_7,Lhe,aRo,nRo,GO,sRo,lRo,iRo,u7,yhe,dRo,cRo,OO,fRo,mRo,gRo,b7,xhe,hRo,pRo,VO,_Ro,uRo,bRo,v7,$he,vRo,FRo,XO,TRo,MRo,ERo,F7,khe,CRo,wRo,zO,ARo,LRo,yRo,T7,She,xRo,$Ro,WO,kRo,SRo,RRo,M7,Rhe,PRo,BRo,QO,IRo,NRo,qRo,E7,Phe,jRo,DRo,HO,GRo,ORo,VRo,C7,Bhe,XRo,zRo,UO,WRo,QRo,HRo,w7,Ihe,URo,JRo,JO,YRo,KRo,ZRo,A7,Nhe,ePo,oPo,YO,rPo,tPo,aPo,L7,qhe,nPo,sPo,KO,lPo,iPo,dPo,y7,jhe,cPo,fPo,ZO,mPo,gPo,hPo,x7,Dhe,pPo,_Po,eV,uPo,bPo,vPo,$7,Ghe,FPo,TPo,oV,MPo,EPo,CPo,k7,Ohe,wPo,APo,rV,LPo,yPo,xPo,S7,Vhe,$Po,kPo,tV,SPo,RPo,PPo,R7,Xhe,BPo,IPo,aV,NPo,qPo,jPo,P7,zhe,DPo,GPo,nV,OPo,VPo,XPo,B7,Whe,zPo,WPo,sV,QPo,HPo,UPo,I7,Qhe,JPo,YPo,lV,KPo,ZPo,eBo,N7,oBo,Hhe,rBo,tBo,Uhe,aBo,nBo,q7,_ze,Ki,j7,Jhe,a8,sBo,Yhe,lBo,uze,Po,n8,iBo,Zi,dBo,iV,cBo,fBo,dV,mBo,gBo,hBo,s8,pBo,Khe,_Bo,uBo,bBo,ft,l8,vBo,Zhe,FBo,TBo,ed,MBo,epe,EBo,CBo,cV,wBo,ABo,LBo,D7,yBo,eo,i8,xBo,ope,$Bo,kBo,Da,SBo,rpe,RBo,PBo,tpe,BBo,IBo,ape,NBo,qBo,jBo,Q,G7,npe,DBo,GBo,fV,OBo,VBo,XBo,O7,spe,zBo,WBo,mV,QBo,HBo,UBo,V7,lpe,JBo,YBo,gV,KBo,ZBo,eIo,X7,ipe,oIo,rIo,hV,tIo,aIo,nIo,z7,dpe,sIo,lIo,pV,iIo,dIo,cIo,W7,cpe,fIo,mIo,_V,gIo,hIo,pIo,Q7,fpe,_Io,uIo,uV,bIo,vIo,FIo,H7,mpe,TIo,MIo,bV,EIo,CIo,wIo,U7,gpe,AIo,LIo,vV,yIo,xIo,$Io,J7,hpe,kIo,SIo,FV,RIo,PIo,BIo,Y7,ppe,IIo,NIo,TV,qIo,jIo,DIo,K7,_pe,GIo,OIo,MV,VIo,XIo,zIo,Z7,upe,WIo,QIo,EV,HIo,UIo,JIo,e2,bpe,YIo,KIo,CV,ZIo,eNo,oNo,o2,vpe,rNo,tNo,wV,aNo,nNo,sNo,r2,Fpe,lNo,iNo,AV,dNo,cNo,fNo,t2,Tpe,mNo,gNo,LV,hNo,pNo,_No,a2,Mpe,uNo,bNo,yV,vNo,FNo,TNo,n2,Epe,MNo,ENo,xV,CNo,wNo,ANo,s2,Cpe,LNo,yNo,$V,xNo,$No,kNo,l2,wpe,SNo,RNo,kV,PNo,BNo,INo,i2,Ape,NNo,qNo,SV,jNo,DNo,GNo,d2,Lpe,ONo,VNo,RV,XNo,zNo,WNo,c2,ype,QNo,HNo,PV,UNo,JNo,YNo,f2,xpe,KNo,ZNo,BV,eqo,oqo,rqo,m2,$pe,tqo,aqo,IV,nqo,sqo,lqo,g2,kpe,iqo,dqo,NV,cqo,fqo,mqo,h2,Spe,gqo,hqo,qV,pqo,_qo,uqo,p2,Rpe,bqo,vqo,jV,Fqo,Tqo,Mqo,_2,Ppe,Eqo,Cqo,DV,wqo,Aqo,Lqo,u2,Bpe,yqo,xqo,GV,$qo,kqo,Sqo,b2,Ipe,Rqo,Pqo,OV,Bqo,Iqo,Nqo,v2,Npe,qqo,jqo,VV,Dqo,Gqo,Oqo,F2,qpe,Vqo,Xqo,jpe,zqo,Wqo,Qqo,T2,Dpe,Hqo,Uqo,XV,Jqo,Yqo,Kqo,M2,Gpe,Zqo,ejo,zV,ojo,rjo,tjo,E2,Ope,ajo,njo,WV,sjo,ljo,ijo,C2,Vpe,djo,cjo,QV,fjo,mjo,gjo,w2,hjo,Xpe,pjo,_jo,zpe,ujo,bjo,A2,bze,od,L2,Wpe,d8,vjo,Qpe,Fjo,vze,Bo,c8,Tjo,rd,Mjo,HV,Ejo,Cjo,UV,wjo,Ajo,Ljo,f8,yjo,Hpe,xjo,$jo,kjo,mt,m8,Sjo,Upe,Rjo,Pjo,td,Bjo,Jpe,Ijo,Njo,JV,qjo,jjo,Djo,y2,Gjo,oo,g8,Ojo,Ype,Vjo,Xjo,Ga,zjo,Kpe,Wjo,Qjo,Zpe,Hjo,Ujo,e_e,Jjo,Yjo,Kjo,me,x2,o_e,Zjo,eDo,YV,oDo,rDo,tDo,$2,r_e,aDo,nDo,KV,sDo,lDo,iDo,k2,t_e,dDo,cDo,ZV,fDo,mDo,gDo,S2,a_e,hDo,pDo,eX,_Do,uDo,bDo,R2,n_e,vDo,FDo,oX,TDo,MDo,EDo,P2,s_e,CDo,wDo,rX,ADo,LDo,yDo,B2,l_e,xDo,$Do,tX,kDo,SDo,RDo,I2,i_e,PDo,BDo,aX,IDo,NDo,qDo,N2,d_e,jDo,DDo,nX,GDo,ODo,VDo,q2,c_e,XDo,zDo,sX,WDo,QDo,HDo,j2,f_e,UDo,JDo,lX,YDo,KDo,ZDo,D2,m_e,eGo,oGo,iX,rGo,tGo,aGo,G2,g_e,nGo,sGo,dX,lGo,iGo,dGo,O2,h_e,cGo,fGo,cX,mGo,gGo,hGo,V2,p_e,pGo,_Go,fX,uGo,bGo,vGo,X2,__e,FGo,TGo,mX,MGo,EGo,CGo,z2,u_e,wGo,AGo,gX,LGo,yGo,xGo,W2,b_e,$Go,kGo,hX,SGo,RGo,PGo,Q2,v_e,BGo,IGo,pX,NGo,qGo,jGo,H2,DGo,F_e,GGo,OGo,T_e,VGo,XGo,U2,Fze,ad,J2,M_e,h8,zGo,E_e,WGo,Tze,Io,p8,QGo,nd,HGo,_X,UGo,JGo,uX,YGo,KGo,ZGo,_8,eOo,C_e,oOo,rOo,tOo,gt,u8,aOo,w_e,nOo,sOo,sd,lOo,A_e,iOo,dOo,bX,cOo,fOo,mOo,Y2,gOo,ro,b8,hOo,L_e,pOo,_Oo,Oa,uOo,y_e,bOo,vOo,x_e,FOo,TOo,$_e,MOo,EOo,COo,P,K2,k_e,wOo,AOo,vX,LOo,yOo,xOo,Z2,S_e,$Oo,kOo,FX,SOo,ROo,POo,eb,R_e,BOo,IOo,TX,NOo,qOo,jOo,ob,P_e,DOo,GOo,MX,OOo,VOo,XOo,rb,B_e,zOo,WOo,EX,QOo,HOo,UOo,tb,I_e,JOo,YOo,CX,KOo,ZOo,eVo,ab,N_e,oVo,rVo,wX,tVo,aVo,nVo,nb,q_e,sVo,lVo,AX,iVo,dVo,cVo,sb,j_e,fVo,mVo,LX,gVo,hVo,pVo,lb,D_e,_Vo,uVo,yX,bVo,vVo,FVo,ib,G_e,TVo,MVo,xX,EVo,CVo,wVo,db,O_e,AVo,LVo,$X,yVo,xVo,$Vo,cb,V_e,kVo,SVo,kX,RVo,PVo,BVo,fb,X_e,IVo,NVo,SX,qVo,jVo,DVo,mb,z_e,GVo,OVo,RX,VVo,XVo,zVo,gb,W_e,WVo,QVo,PX,HVo,UVo,JVo,hb,Q_e,YVo,KVo,BX,ZVo,eXo,oXo,pb,H_e,rXo,tXo,IX,aXo,nXo,sXo,_b,U_e,lXo,iXo,NX,dXo,cXo,fXo,ub,J_e,mXo,gXo,qX,hXo,pXo,_Xo,bb,Y_e,uXo,bXo,jX,vXo,FXo,TXo,vb,K_e,MXo,EXo,DX,CXo,wXo,AXo,Fb,Z_e,LXo,yXo,GX,xXo,$Xo,kXo,Tb,eue,SXo,RXo,OX,PXo,BXo,IXo,Mb,oue,NXo,qXo,VX,jXo,DXo,GXo,Eb,rue,OXo,VXo,XX,XXo,zXo,WXo,Cb,tue,QXo,HXo,zX,UXo,JXo,YXo,wb,aue,KXo,ZXo,WX,ezo,ozo,rzo,Ab,nue,tzo,azo,QX,nzo,szo,lzo,Lb,sue,izo,dzo,HX,czo,fzo,mzo,yb,lue,gzo,hzo,UX,pzo,_zo,uzo,xb,iue,bzo,vzo,JX,Fzo,Tzo,Mzo,$b,due,Ezo,Czo,YX,wzo,Azo,Lzo,kb,cue,yzo,xzo,KX,$zo,kzo,Szo,Sb,fue,Rzo,Pzo,ZX,Bzo,Izo,Nzo,Rb,mue,qzo,jzo,ez,Dzo,Gzo,Ozo,Pb,gue,Vzo,Xzo,oz,zzo,Wzo,Qzo,Bb,hue,Hzo,Uzo,rz,Jzo,Yzo,Kzo,Ib,pue,Zzo,eWo,tz,oWo,rWo,tWo,Nb,_ue,aWo,nWo,az,sWo,lWo,iWo,qb,uue,dWo,cWo,nz,fWo,mWo,gWo,jb,bue,hWo,pWo,sz,_Wo,uWo,bWo,Db,vue,vWo,FWo,lz,TWo,MWo,EWo,Gb,Fue,CWo,wWo,iz,AWo,LWo,yWo,Ob,Tue,xWo,$Wo,dz,kWo,SWo,RWo,Vb,Mue,PWo,BWo,cz,IWo,NWo,qWo,Xb,Eue,jWo,DWo,fz,GWo,OWo,VWo,zb,Cue,XWo,zWo,mz,WWo,QWo,HWo,Wb,wue,UWo,JWo,gz,YWo,KWo,ZWo,Qb,Aue,eQo,oQo,hz,rQo,tQo,aQo,Hb,Lue,nQo,sQo,pz,lQo,iQo,dQo,Ub,yue,cQo,fQo,_z,mQo,gQo,hQo,Jb,pQo,xue,_Qo,uQo,$ue,bQo,vQo,Yb,Mze,ld,Kb,kue,v8,FQo,Sue,TQo,Eze,No,F8,MQo,id,EQo,uz,CQo,wQo,bz,AQo,LQo,yQo,T8,xQo,Rue,$Qo,kQo,SQo,ht,M8,RQo,Pue,PQo,BQo,dd,IQo,Bue,NQo,qQo,vz,jQo,DQo,GQo,Zb,OQo,to,E8,VQo,Iue,XQo,zQo,Va,WQo,Nue,QQo,HQo,que,UQo,JQo,jue,YQo,KQo,ZQo,Z,ev,Due,eHo,oHo,Fz,rHo,tHo,aHo,ov,Gue,nHo,sHo,Tz,lHo,iHo,dHo,rv,Oue,cHo,fHo,Mz,mHo,gHo,hHo,tv,Vue,pHo,_Ho,Ez,uHo,bHo,vHo,av,Xue,FHo,THo,Cz,MHo,EHo,CHo,nv,zue,wHo,AHo,wz,LHo,yHo,xHo,sv,Wue,$Ho,kHo,Az,SHo,RHo,PHo,lv,Que,BHo,IHo,Lz,NHo,qHo,jHo,iv,Hue,DHo,GHo,yz,OHo,VHo,XHo,dv,Uue,zHo,WHo,xz,QHo,HHo,UHo,cv,Jue,JHo,YHo,$z,KHo,ZHo,eUo,fv,Yue,oUo,rUo,kz,tUo,aUo,nUo,mv,Kue,sUo,lUo,Sz,iUo,dUo,cUo,gv,Zue,fUo,mUo,Rz,gUo,hUo,pUo,hv,e1e,_Uo,uUo,Pz,bUo,vUo,FUo,pv,o1e,TUo,MUo,Bz,EUo,CUo,wUo,_v,r1e,AUo,LUo,Iz,yUo,xUo,$Uo,uv,t1e,kUo,SUo,Nz,RUo,PUo,BUo,bv,a1e,IUo,NUo,qz,qUo,jUo,DUo,vv,n1e,GUo,OUo,jz,VUo,XUo,zUo,Fv,s1e,WUo,QUo,Dz,HUo,UUo,JUo,Tv,l1e,YUo,KUo,Gz,ZUo,eJo,oJo,Mv,i1e,rJo,tJo,Oz,aJo,nJo,sJo,Ev,d1e,lJo,iJo,Vz,dJo,cJo,fJo,Cv,c1e,mJo,gJo,Xz,hJo,pJo,_Jo,wv,f1e,uJo,bJo,zz,vJo,FJo,TJo,Av,m1e,MJo,EJo,Wz,CJo,wJo,AJo,Lv,g1e,LJo,yJo,Qz,xJo,$Jo,kJo,yv,h1e,SJo,RJo,Hz,PJo,BJo,IJo,xv,p1e,NJo,qJo,Uz,jJo,DJo,GJo,$v,OJo,_1e,VJo,XJo,u1e,zJo,WJo,kv,Cze,cd,Sv,b1e,C8,QJo,v1e,HJo,wze,qo,w8,UJo,fd,JJo,Jz,YJo,KJo,Yz,ZJo,eYo,oYo,A8,rYo,F1e,tYo,aYo,nYo,pt,L8,sYo,T1e,lYo,iYo,md,dYo,M1e,cYo,fYo,Kz,mYo,gYo,hYo,Rv,pYo,ao,y8,_Yo,E1e,uYo,bYo,Xa,vYo,C1e,FYo,TYo,w1e,MYo,EYo,A1e,CYo,wYo,AYo,jo,Pv,L1e,LYo,yYo,Zz,xYo,$Yo,kYo,Bv,y1e,SYo,RYo,eW,PYo,BYo,IYo,Iv,x1e,NYo,qYo,oW,jYo,DYo,GYo,Nv,$1e,OYo,VYo,rW,XYo,zYo,WYo,qv,k1e,QYo,HYo,tW,UYo,JYo,YYo,jv,S1e,KYo,ZYo,aW,eKo,oKo,rKo,Dv,tKo,R1e,aKo,nKo,P1e,sKo,lKo,Gv,Aze,gd,Ov,B1e,x8,iKo,I1e,dKo,Lze,Do,$8,cKo,hd,fKo,nW,mKo,gKo,sW,hKo,pKo,_Ko,k8,uKo,N1e,bKo,vKo,FKo,_t,S8,TKo,q1e,MKo,EKo,pd,CKo,j1e,wKo,AKo,lW,LKo,yKo,xKo,Vv,$Ko,no,R8,kKo,D1e,SKo,RKo,za,PKo,G1e,BKo,IKo,O1e,NKo,qKo,V1e,jKo,DKo,GKo,U,Xv,X1e,OKo,VKo,iW,XKo,zKo,WKo,zv,z1e,QKo,HKo,dW,UKo,JKo,YKo,Wv,W1e,KKo,ZKo,cW,eZo,oZo,rZo,Qv,Q1e,tZo,aZo,fW,nZo,sZo,lZo,Hv,H1e,iZo,dZo,mW,cZo,fZo,mZo,Uv,U1e,gZo,hZo,gW,pZo,_Zo,uZo,Jv,J1e,bZo,vZo,hW,FZo,TZo,MZo,Yv,Y1e,EZo,CZo,pW,wZo,AZo,LZo,Kv,K1e,yZo,xZo,_W,$Zo,kZo,SZo,Zv,Z1e,RZo,PZo,uW,BZo,IZo,NZo,eF,e7e,qZo,jZo,bW,DZo,GZo,OZo,oF,o7e,VZo,XZo,vW,zZo,WZo,QZo,rF,r7e,HZo,UZo,FW,JZo,YZo,KZo,tF,t7e,ZZo,eer,TW,oer,rer,ter,aF,a7e,aer,ner,MW,ser,ler,ier,nF,n7e,der,cer,EW,fer,mer,ger,sF,s7e,her,per,CW,_er,uer,ber,lF,l7e,ver,Fer,wW,Ter,Mer,Eer,iF,i7e,Cer,wer,AW,Aer,Ler,yer,dF,d7e,xer,$er,LW,ker,Ser,Rer,cF,c7e,Per,Ber,yW,Ier,Ner,qer,fF,f7e,jer,Der,xW,Ger,Oer,Ver,mF,m7e,Xer,zer,$W,Wer,Qer,Her,gF,g7e,Uer,Jer,kW,Yer,Ker,Zer,hF,h7e,eor,oor,SW,ror,tor,aor,pF,p7e,nor,sor,RW,lor,ior,dor,_F,_7e,cor,mor,PW,gor,hor,por,uF,u7e,_or,uor,BW,bor,vor,For,bF,b7e,Tor,Mor,IW,Eor,Cor,wor,vF,v7e,Aor,Lor,NW,yor,xor,$or,FF,F7e,kor,Sor,qW,Ror,Por,Bor,TF,T7e,Ior,Nor,jW,qor,jor,Dor,MF,M7e,Gor,Oor,DW,Vor,Xor,zor,EF,E7e,Wor,Qor,GW,Hor,Uor,Jor,CF,C7e,Yor,Kor,OW,Zor,err,orr,wF,w7e,rrr,trr,VW,arr,nrr,srr,AF,lrr,A7e,irr,drr,L7e,crr,frr,LF,yze,_d,yF,y7e,P8,mrr,x7e,grr,xze,Go,B8,hrr,ud,prr,XW,_rr,urr,zW,brr,vrr,Frr,I8,Trr,$7e,Mrr,Err,Crr,ut,N8,wrr,k7e,Arr,Lrr,bd,yrr,S7e,xrr,$rr,WW,krr,Srr,Rrr,xF,Prr,so,q8,Brr,R7e,Irr,Nrr,Wa,qrr,P7e,jrr,Drr,B7e,Grr,Orr,I7e,Vrr,Xrr,zrr,V,$F,N7e,Wrr,Qrr,QW,Hrr,Urr,Jrr,kF,q7e,Yrr,Krr,HW,Zrr,etr,otr,SF,j7e,rtr,ttr,UW,atr,ntr,str,RF,D7e,ltr,itr,JW,dtr,ctr,ftr,PF,G7e,mtr,gtr,YW,htr,ptr,_tr,BF,O7e,utr,btr,KW,vtr,Ftr,Ttr,IF,V7e,Mtr,Etr,ZW,Ctr,wtr,Atr,NF,X7e,Ltr,ytr,eQ,xtr,$tr,ktr,qF,z7e,Str,Rtr,oQ,Ptr,Btr,Itr,jF,W7e,Ntr,qtr,rQ,jtr,Dtr,Gtr,DF,Q7e,Otr,Vtr,tQ,Xtr,ztr,Wtr,GF,H7e,Qtr,Htr,aQ,Utr,Jtr,Ytr,OF,U7e,Ktr,Ztr,nQ,ear,oar,rar,VF,J7e,tar,aar,sQ,nar,sar,lar,XF,Y7e,iar,dar,lQ,car,far,mar,zF,K7e,gar,har,iQ,par,_ar,uar,WF,Z7e,bar,Far,dQ,Tar,Mar,Ear,QF,e2e,Car,war,cQ,Aar,Lar,yar,HF,o2e,xar,$ar,fQ,kar,Sar,Rar,UF,r2e,Par,Bar,mQ,Iar,Nar,qar,JF,t2e,jar,Dar,gQ,Gar,Oar,Var,YF,a2e,Xar,zar,hQ,War,Qar,Har,KF,n2e,Uar,Jar,pQ,Yar,Kar,Zar,ZF,s2e,enr,onr,_Q,rnr,tnr,anr,e6,l2e,nnr,snr,uQ,lnr,inr,dnr,o6,i2e,cnr,fnr,bQ,mnr,gnr,hnr,r6,d2e,pnr,_nr,vQ,unr,bnr,vnr,t6,c2e,Fnr,Tnr,FQ,Mnr,Enr,Cnr,a6,f2e,wnr,Anr,TQ,Lnr,ynr,xnr,n6,m2e,$nr,knr,MQ,Snr,Rnr,Pnr,s6,g2e,Bnr,Inr,EQ,Nnr,qnr,jnr,l6,h2e,Dnr,Gnr,CQ,Onr,Vnr,Xnr,i6,p2e,znr,Wnr,wQ,Qnr,Hnr,Unr,d6,_2e,Jnr,Ynr,AQ,Knr,Znr,esr,c6,u2e,osr,rsr,LQ,tsr,asr,nsr,f6,b2e,ssr,lsr,yQ,isr,dsr,csr,m6,v2e,fsr,msr,xQ,gsr,hsr,psr,g6,F2e,_sr,usr,$Q,bsr,vsr,Fsr,h6,T2e,Tsr,Msr,kQ,Esr,Csr,wsr,p6,M2e,Asr,Lsr,SQ,ysr,xsr,$sr,_6,E2e,ksr,Ssr,RQ,Rsr,Psr,Bsr,u6,C2e,Isr,Nsr,PQ,qsr,jsr,Dsr,b6,Gsr,w2e,Osr,Vsr,A2e,Xsr,zsr,v6,$ze,vd,F6,L2e,j8,Wsr,y2e,Qsr,kze,Oo,D8,Hsr,Fd,Usr,BQ,Jsr,Ysr,IQ,Ksr,Zsr,elr,G8,olr,x2e,rlr,tlr,alr,bt,O8,nlr,$2e,slr,llr,Td,ilr,k2e,dlr,clr,NQ,flr,mlr,glr,T6,hlr,lo,V8,plr,S2e,_lr,ulr,Qa,blr,R2e,vlr,Flr,P2e,Tlr,Mlr,B2e,Elr,Clr,wlr,I2e,M6,N2e,Alr,Llr,qQ,ylr,xlr,$lr,E6,klr,q2e,Slr,Rlr,j2e,Plr,Blr,C6,Sze,Md,w6,D2e,X8,Ilr,G2e,Nlr,Rze,Vo,z8,qlr,Ed,jlr,jQ,Dlr,Glr,DQ,Olr,Vlr,Xlr,W8,zlr,O2e,Wlr,Qlr,Hlr,vt,Q8,Ulr,V2e,Jlr,Ylr,Cd,Klr,X2e,Zlr,eir,GQ,oir,rir,tir,A6,air,io,H8,nir,z2e,sir,lir,Ha,iir,W2e,dir,cir,Q2e,fir,mir,H2e,gir,hir,pir,ve,L6,U2e,_ir,uir,OQ,bir,vir,Fir,y6,J2e,Tir,Mir,VQ,Eir,Cir,wir,x6,Y2e,Air,Lir,XQ,yir,xir,$ir,$6,K2e,kir,Sir,zQ,Rir,Pir,Bir,Ys,Z2e,Iir,Nir,WQ,qir,jir,QQ,Dir,Gir,Oir,k6,ebe,Vir,Xir,HQ,zir,Wir,Qir,Ks,obe,Hir,Uir,UQ,Jir,Yir,JQ,Kir,Zir,edr,S6,rbe,odr,rdr,YQ,tdr,adr,ndr,Ft,tbe,sdr,ldr,KQ,idr,ddr,ZQ,cdr,fdr,eH,mdr,gdr,hdr,R6,abe,pdr,_dr,oH,udr,bdr,vdr,P6,nbe,Fdr,Tdr,rH,Mdr,Edr,Cdr,B6,sbe,wdr,Adr,tH,Ldr,ydr,xdr,I6,lbe,$dr,kdr,aH,Sdr,Rdr,Pdr,N6,ibe,Bdr,Idr,nH,Ndr,qdr,jdr,q6,dbe,Ddr,Gdr,sH,Odr,Vdr,Xdr,j6,cbe,zdr,Wdr,lH,Qdr,Hdr,Udr,D6,Jdr,fbe,Ydr,Kdr,mbe,Zdr,ecr,G6,Pze,wd,O6,gbe,U8,ocr,hbe,rcr,Bze,Xo,J8,tcr,Ad,acr,iH,ncr,scr,dH,lcr,icr,dcr,Y8,ccr,pbe,fcr,mcr,gcr,Tt,K8,hcr,_be,pcr,_cr,Ld,ucr,ube,bcr,vcr,cH,Fcr,Tcr,Mcr,V6,Ecr,co,Z8,Ccr,bbe,wcr,Acr,Ua,Lcr,vbe,ycr,xcr,Fbe,$cr,kcr,Tbe,Scr,Rcr,Pcr,Mbe,X6,Ebe,Bcr,Icr,fH,Ncr,qcr,jcr,z6,Dcr,Cbe,Gcr,Ocr,wbe,Vcr,Xcr,W6,Ize,yd,Q6,Abe,e9,zcr,Lbe,Wcr,Nze,zo,o9,Qcr,xd,Hcr,mH,Ucr,Jcr,gH,Ycr,Kcr,Zcr,r9,efr,ybe,ofr,rfr,tfr,Mt,t9,afr,xbe,nfr,sfr,$d,lfr,$be,ifr,dfr,hH,cfr,ffr,mfr,H6,gfr,fo,a9,hfr,kbe,pfr,_fr,Ja,ufr,Sbe,bfr,vfr,Rbe,Ffr,Tfr,Pbe,Mfr,Efr,Cfr,Bbe,U6,Ibe,wfr,Afr,pH,Lfr,yfr,xfr,J6,$fr,Nbe,kfr,Sfr,qbe,Rfr,Pfr,Y6,qze,kd,K6,jbe,n9,Bfr,Dbe,Ifr,jze,Wo,s9,Nfr,Sd,qfr,_H,jfr,Dfr,uH,Gfr,Ofr,Vfr,l9,Xfr,Gbe,zfr,Wfr,Qfr,Et,i9,Hfr,Obe,Ufr,Jfr,Rd,Yfr,Vbe,Kfr,Zfr,bH,emr,omr,rmr,Z6,tmr,mo,d9,amr,Xbe,nmr,smr,Ya,lmr,zbe,imr,dmr,Wbe,cmr,fmr,Qbe,mmr,gmr,hmr,Pe,eT,Hbe,pmr,_mr,vH,umr,bmr,vmr,oT,Ube,Fmr,Tmr,FH,Mmr,Emr,Cmr,rT,Jbe,wmr,Amr,TH,Lmr,ymr,xmr,tT,Ybe,$mr,kmr,MH,Smr,Rmr,Pmr,aT,Kbe,Bmr,Imr,EH,Nmr,qmr,jmr,nT,Zbe,Dmr,Gmr,CH,Omr,Vmr,Xmr,sT,eve,zmr,Wmr,wH,Qmr,Hmr,Umr,lT,ove,Jmr,Ymr,AH,Kmr,Zmr,egr,iT,rve,ogr,rgr,LH,tgr,agr,ngr,dT,sgr,tve,lgr,igr,ave,dgr,cgr,cT,Dze,Pd,fT,nve,c9,fgr,sve,mgr,Gze,Qo,f9,ggr,Bd,hgr,yH,pgr,_gr,xH,ugr,bgr,vgr,m9,Fgr,lve,Tgr,Mgr,Egr,Ct,g9,Cgr,ive,wgr,Agr,Id,Lgr,dve,ygr,xgr,$H,$gr,kgr,Sgr,mT,Rgr,go,h9,Pgr,cve,Bgr,Igr,Ka,Ngr,fve,qgr,jgr,mve,Dgr,Ggr,gve,Ogr,Vgr,Xgr,Ho,gT,hve,zgr,Wgr,kH,Qgr,Hgr,Ugr,hT,pve,Jgr,Ygr,SH,Kgr,Zgr,ehr,pT,_ve,ohr,rhr,RH,thr,ahr,nhr,_T,uve,shr,lhr,PH,ihr,dhr,chr,uT,bve,fhr,mhr,BH,ghr,hhr,phr,bT,vve,_hr,uhr,IH,bhr,vhr,Fhr,vT,Thr,Fve,Mhr,Ehr,Tve,Chr,whr,FT,Oze,Nd,TT,Mve,p9,Ahr,Eve,Lhr,Vze,Uo,_9,yhr,qd,xhr,NH,$hr,khr,qH,Shr,Rhr,Phr,u9,Bhr,Cve,Ihr,Nhr,qhr,wt,b9,jhr,wve,Dhr,Ghr,jd,Ohr,Ave,Vhr,Xhr,jH,zhr,Whr,Qhr,MT,Hhr,ho,v9,Uhr,Lve,Jhr,Yhr,Za,Khr,yve,Zhr,epr,xve,opr,rpr,$ve,tpr,apr,npr,Le,ET,kve,spr,lpr,DH,ipr,dpr,cpr,CT,Sve,fpr,mpr,GH,gpr,hpr,ppr,wT,Rve,_pr,upr,OH,bpr,vpr,Fpr,AT,Pve,Tpr,Mpr,VH,Epr,Cpr,wpr,LT,Bve,Apr,Lpr,XH,ypr,xpr,$pr,yT,Ive,kpr,Spr,zH,Rpr,Ppr,Bpr,xT,Nve,Ipr,Npr,WH,qpr,jpr,Dpr,$T,qve,Gpr,Opr,QH,Vpr,Xpr,zpr,kT,jve,Wpr,Qpr,HH,Hpr,Upr,Jpr,ST,Dve,Ypr,Kpr,UH,Zpr,e_r,o_r,RT,r_r,Gve,t_r,a_r,Ove,n_r,s_r,PT,Xze,Dd,BT,Vve,F9,l_r,Xve,i_r,zze,Jo,T9,d_r,Gd,c_r,JH,f_r,m_r,YH,g_r,h_r,p_r,M9,__r,zve,u_r,b_r,v_r,At,E9,F_r,Wve,T_r,M_r,Od,E_r,Qve,C_r,w_r,KH,A_r,L_r,y_r,IT,x_r,po,C9,$_r,Hve,k_r,S_r,en,R_r,Uve,P_r,B_r,Jve,I_r,N_r,Yve,q_r,j_r,D_r,w9,NT,Kve,G_r,O_r,ZH,V_r,X_r,z_r,qT,Zve,W_r,Q_r,eU,H_r,U_r,J_r,jT,Y_r,eFe,K_r,Z_r,oFe,eur,our,DT,Wze,Vd,GT,rFe,A9,rur,tFe,tur,Qze,Yo,L9,aur,Xd,nur,oU,sur,lur,rU,iur,dur,cur,y9,fur,aFe,mur,gur,hur,Lt,x9,pur,nFe,_ur,uur,zd,bur,sFe,vur,Fur,tU,Tur,Mur,Eur,OT,Cur,_o,$9,wur,lFe,Aur,Lur,on,yur,iFe,xur,$ur,dFe,kur,Sur,cFe,Rur,Pur,Bur,tt,VT,fFe,Iur,Nur,aU,qur,jur,Dur,XT,mFe,Gur,Our,nU,Vur,Xur,zur,zT,gFe,Wur,Qur,sU,Hur,Uur,Jur,WT,hFe,Yur,Kur,lU,Zur,e1r,o1r,QT,pFe,r1r,t1r,iU,a1r,n1r,s1r,HT,l1r,_Fe,i1r,d1r,uFe,c1r,f1r,UT,Hze,Wd,JT,bFe,k9,m1r,vFe,g1r,Uze,Ko,S9,h1r,Qd,p1r,dU,_1r,u1r,cU,b1r,v1r,F1r,R9,T1r,FFe,M1r,E1r,C1r,yt,P9,w1r,TFe,A1r,L1r,Hd,y1r,MFe,x1r,$1r,fU,k1r,S1r,R1r,YT,P1r,uo,B9,B1r,EFe,I1r,N1r,rn,q1r,CFe,j1r,D1r,wFe,G1r,O1r,AFe,V1r,X1r,z1r,Ud,KT,LFe,W1r,Q1r,mU,H1r,U1r,J1r,ZT,yFe,Y1r,K1r,gU,Z1r,e7r,o7r,eM,xFe,r7r,t7r,hU,a7r,n7r,s7r,oM,l7r,$Fe,i7r,d7r,kFe,c7r,f7r,rM,Jze,Jd,tM,SFe,I9,m7r,RFe,g7r,Yze,Zo,N9,h7r,Yd,p7r,pU,_7r,u7r,_U,b7r,v7r,F7r,q9,T7r,PFe,M7r,E7r,C7r,xt,j9,w7r,BFe,A7r,L7r,Kd,y7r,IFe,x7r,$7r,uU,k7r,S7r,R7r,aM,P7r,bo,D9,B7r,NFe,I7r,N7r,tn,q7r,qFe,j7r,D7r,jFe,G7r,O7r,DFe,V7r,X7r,z7r,G9,nM,GFe,W7r,Q7r,bU,H7r,U7r,J7r,sM,OFe,Y7r,K7r,vU,Z7r,e2r,o2r,lM,r2r,VFe,t2r,a2r,XFe,n2r,s2r,iM,Kze,Zd,dM,zFe,O9,l2r,WFe,i2r,Zze,er,V9,d2r,ec,c2r,FU,f2r,m2r,TU,g2r,h2r,p2r,X9,_2r,QFe,u2r,b2r,v2r,$t,z9,F2r,HFe,T2r,M2r,oc,E2r,UFe,C2r,w2r,MU,A2r,L2r,y2r,cM,x2r,vo,W9,$2r,JFe,k2r,S2r,an,R2r,YFe,P2r,B2r,KFe,I2r,N2r,ZFe,q2r,j2r,D2r,e6e,fM,o6e,G2r,O2r,EU,V2r,X2r,z2r,mM,W2r,r6e,Q2r,H2r,t6e,U2r,J2r,gM,eWe,rc,hM,a6e,Q9,Y2r,n6e,K2r,oWe,or,H9,Z2r,tc,ebr,CU,obr,rbr,wU,tbr,abr,nbr,U9,sbr,s6e,lbr,ibr,dbr,kt,J9,cbr,l6e,fbr,mbr,ac,gbr,i6e,hbr,pbr,AU,_br,ubr,bbr,pM,vbr,Fo,Y9,Fbr,d6e,Tbr,Mbr,nn,Ebr,c6e,Cbr,wbr,f6e,Abr,Lbr,m6e,ybr,xbr,$br,at,_M,g6e,kbr,Sbr,LU,Rbr,Pbr,Bbr,uM,h6e,Ibr,Nbr,yU,qbr,jbr,Dbr,bM,p6e,Gbr,Obr,xU,Vbr,Xbr,zbr,vM,_6e,Wbr,Qbr,$U,Hbr,Ubr,Jbr,FM,u6e,Ybr,Kbr,kU,Zbr,evr,ovr,TM,rvr,b6e,tvr,avr,v6e,nvr,svr,MM,rWe,nc,EM,F6e,K9,lvr,T6e,ivr,tWe,rr,Z9,dvr,sc,cvr,SU,fvr,mvr,RU,gvr,hvr,pvr,ex,_vr,M6e,uvr,bvr,vvr,St,ox,Fvr,E6e,Tvr,Mvr,lc,Evr,C6e,Cvr,wvr,PU,Avr,Lvr,yvr,CM,xvr,To,rx,$vr,w6e,kvr,Svr,sn,Rvr,A6e,Pvr,Bvr,L6e,Ivr,Nvr,y6e,qvr,jvr,Dvr,x6e,wM,$6e,Gvr,Ovr,BU,Vvr,Xvr,zvr,AM,Wvr,k6e,Qvr,Hvr,S6e,Uvr,Jvr,LM,aWe,ic,yM,R6e,tx,Yvr,P6e,Kvr,nWe,tr,ax,Zvr,dc,eFr,IU,oFr,rFr,NU,tFr,aFr,nFr,nx,sFr,B6e,lFr,iFr,dFr,Rt,sx,cFr,I6e,fFr,mFr,cc,gFr,N6e,hFr,pFr,qU,_Fr,uFr,bFr,xM,vFr,kr,lx,FFr,q6e,TFr,MFr,ln,EFr,j6e,CFr,wFr,D6e,AFr,LFr,G6e,yFr,xFr,$Fr,I,$M,O6e,kFr,SFr,jU,RFr,PFr,BFr,kM,V6e,IFr,NFr,DU,qFr,jFr,DFr,SM,X6e,GFr,OFr,GU,VFr,XFr,zFr,RM,z6e,WFr,QFr,OU,HFr,UFr,JFr,PM,W6e,YFr,KFr,VU,ZFr,e6r,o6r,BM,Q6e,r6r,t6r,XU,a6r,n6r,s6r,IM,H6e,l6r,i6r,zU,d6r,c6r,f6r,NM,U6e,m6r,g6r,WU,h6r,p6r,_6r,qM,J6e,u6r,b6r,QU,v6r,F6r,T6r,jM,Y6e,M6r,E6r,HU,C6r,w6r,A6r,DM,K6e,L6r,y6r,UU,x6r,$6r,k6r,GM,Z6e,S6r,R6r,JU,P6r,B6r,I6r,OM,eTe,N6r,q6r,YU,j6r,D6r,G6r,VM,oTe,O6r,V6r,KU,X6r,z6r,W6r,XM,rTe,Q6r,H6r,ZU,U6r,J6r,Y6r,zM,tTe,K6r,Z6r,eJ,eTr,oTr,rTr,WM,aTe,tTr,aTr,oJ,nTr,sTr,lTr,QM,nTe,iTr,dTr,rJ,cTr,fTr,mTr,Zs,sTe,gTr,hTr,tJ,pTr,_Tr,aJ,uTr,bTr,vTr,HM,lTe,FTr,TTr,nJ,MTr,ETr,CTr,UM,iTe,wTr,ATr,sJ,LTr,yTr,xTr,JM,dTe,$Tr,kTr,lJ,STr,RTr,PTr,YM,cTe,BTr,ITr,iJ,NTr,qTr,jTr,KM,fTe,DTr,GTr,dJ,OTr,VTr,XTr,ZM,mTe,zTr,WTr,cJ,QTr,HTr,UTr,e4,gTe,JTr,YTr,fJ,KTr,ZTr,eMr,o4,hTe,oMr,rMr,mJ,tMr,aMr,nMr,r4,pTe,sMr,lMr,gJ,iMr,dMr,cMr,t4,_Te,fMr,mMr,hJ,gMr,hMr,pMr,a4,uTe,_Mr,uMr,pJ,bMr,vMr,FMr,n4,bTe,TMr,MMr,_J,EMr,CMr,wMr,s4,vTe,AMr,LMr,uJ,yMr,xMr,$Mr,l4,FTe,kMr,SMr,bJ,RMr,PMr,BMr,i4,TTe,IMr,NMr,vJ,qMr,jMr,DMr,d4,MTe,GMr,OMr,FJ,VMr,XMr,zMr,c4,ETe,WMr,QMr,TJ,HMr,UMr,JMr,f4,CTe,YMr,KMr,MJ,ZMr,e4r,o4r,m4,wTe,r4r,t4r,EJ,a4r,n4r,s4r,g4,ATe,l4r,i4r,CJ,d4r,c4r,f4r,h4,LTe,m4r,g4r,wJ,h4r,p4r,_4r,p4,yTe,u4r,b4r,AJ,v4r,F4r,T4r,_4,xTe,M4r,E4r,LJ,C4r,w4r,A4r,u4,$Te,L4r,y4r,yJ,x4r,$4r,k4r,b4,kTe,S4r,R4r,xJ,P4r,B4r,I4r,v4,STe,N4r,q4r,$J,j4r,D4r,G4r,F4,RTe,O4r,V4r,kJ,X4r,z4r,W4r,T4,PTe,Q4r,H4r,SJ,U4r,J4r,Y4r,M4,BTe,K4r,Z4r,RJ,eEr,oEr,rEr,E4,ITe,tEr,aEr,PJ,nEr,sEr,lEr,C4,NTe,iEr,dEr,BJ,cEr,fEr,mEr,w4,qTe,gEr,hEr,IJ,pEr,_Er,uEr,A4,sWe,fc,L4,jTe,ix,bEr,DTe,vEr,lWe,ar,dx,FEr,mc,TEr,NJ,MEr,EEr,qJ,CEr,wEr,AEr,cx,LEr,GTe,yEr,xEr,$Er,Pt,fx,kEr,OTe,SEr,REr,gc,PEr,VTe,BEr,IEr,jJ,NEr,qEr,jEr,y4,DEr,Sr,mx,GEr,XTe,OEr,VEr,dn,XEr,zTe,zEr,WEr,WTe,QEr,HEr,QTe,UEr,JEr,YEr,se,x4,HTe,KEr,ZEr,DJ,eCr,oCr,rCr,$4,UTe,tCr,aCr,GJ,nCr,sCr,lCr,k4,JTe,iCr,dCr,OJ,cCr,fCr,mCr,S4,YTe,gCr,hCr,VJ,pCr,_Cr,uCr,R4,KTe,bCr,vCr,XJ,FCr,TCr,MCr,P4,ZTe,ECr,CCr,zJ,wCr,ACr,LCr,B4,eMe,yCr,xCr,WJ,$Cr,kCr,SCr,I4,oMe,RCr,PCr,QJ,BCr,ICr,NCr,N4,rMe,qCr,jCr,HJ,DCr,GCr,OCr,q4,tMe,VCr,XCr,UJ,zCr,WCr,QCr,j4,aMe,HCr,UCr,JJ,JCr,YCr,KCr,D4,nMe,ZCr,e5r,YJ,o5r,r5r,t5r,G4,sMe,a5r,n5r,KJ,s5r,l5r,i5r,O4,lMe,d5r,c5r,ZJ,f5r,m5r,g5r,V4,iMe,h5r,p5r,eY,_5r,u5r,b5r,X4,dMe,v5r,F5r,oY,T5r,M5r,E5r,z4,cMe,C5r,w5r,rY,A5r,L5r,y5r,W4,fMe,x5r,$5r,tY,k5r,S5r,R5r,Q4,mMe,P5r,B5r,aY,I5r,N5r,q5r,H4,gMe,j5r,D5r,nY,G5r,O5r,V5r,U4,hMe,X5r,z5r,sY,W5r,Q5r,H5r,J4,pMe,U5r,J5r,lY,Y5r,K5r,Z5r,Y4,_Me,e3r,o3r,iY,r3r,t3r,a3r,K4,iWe,hc,Z4,uMe,gx,n3r,bMe,s3r,dWe,nr,hx,l3r,pc,i3r,dY,d3r,c3r,cY,f3r,m3r,g3r,px,h3r,vMe,p3r,_3r,u3r,Bt,_x,b3r,FMe,v3r,F3r,_c,T3r,TMe,M3r,E3r,fY,C3r,w3r,A3r,eE,L3r,Rr,ux,y3r,MMe,x3r,$3r,cn,k3r,EMe,S3r,R3r,CMe,P3r,B3r,wMe,I3r,N3r,q3r,Me,oE,AMe,j3r,D3r,mY,G3r,O3r,V3r,rE,LMe,X3r,z3r,gY,W3r,Q3r,H3r,tE,yMe,U3r,J3r,hY,Y3r,K3r,Z3r,aE,xMe,e0r,o0r,pY,r0r,t0r,a0r,nE,$Me,n0r,s0r,_Y,l0r,i0r,d0r,sE,kMe,c0r,f0r,uY,m0r,g0r,h0r,lE,SMe,p0r,_0r,bY,u0r,b0r,v0r,iE,RMe,F0r,T0r,vY,M0r,E0r,C0r,dE,PMe,w0r,A0r,FY,L0r,y0r,x0r,cE,BMe,$0r,k0r,TY,S0r,R0r,P0r,fE,IMe,B0r,I0r,MY,N0r,q0r,j0r,mE,NMe,D0r,G0r,EY,O0r,V0r,X0r,gE,qMe,z0r,W0r,CY,Q0r,H0r,U0r,hE,cWe,uc,pE,jMe,bx,J0r,DMe,Y0r,fWe,sr,vx,K0r,bc,Z0r,wY,ewr,owr,AY,rwr,twr,awr,Fx,nwr,GMe,swr,lwr,iwr,It,Tx,dwr,OMe,cwr,fwr,vc,mwr,VMe,gwr,hwr,LY,pwr,_wr,uwr,_E,bwr,Pr,Mx,vwr,XMe,Fwr,Twr,fn,Mwr,zMe,Ewr,Cwr,WMe,wwr,Awr,QMe,Lwr,ywr,xwr,Ve,uE,HMe,$wr,kwr,yY,Swr,Rwr,Pwr,bE,UMe,Bwr,Iwr,xY,Nwr,qwr,jwr,el,JMe,Dwr,Gwr,$Y,Owr,Vwr,kY,Xwr,zwr,Wwr,vE,YMe,Qwr,Hwr,SY,Uwr,Jwr,Ywr,FE,KMe,Kwr,Zwr,RY,eAr,oAr,rAr,TE,ZMe,tAr,aAr,PY,nAr,sAr,lAr,ME,e4e,iAr,dAr,BY,cAr,fAr,mAr,EE,o4e,gAr,hAr,IY,pAr,_Ar,uAr,CE,mWe,Fc,wE,r4e,Ex,bAr,t4e,vAr,gWe,lr,Cx,FAr,Tc,TAr,NY,MAr,EAr,qY,CAr,wAr,AAr,wx,LAr,a4e,yAr,xAr,$Ar,Nt,Ax,kAr,n4e,SAr,RAr,Mc,PAr,s4e,BAr,IAr,jY,NAr,qAr,jAr,AE,DAr,Br,Lx,GAr,l4e,OAr,VAr,mn,XAr,i4e,zAr,WAr,d4e,QAr,HAr,c4e,UAr,JAr,YAr,ie,LE,f4e,KAr,ZAr,DY,eLr,oLr,rLr,yE,m4e,tLr,aLr,GY,nLr,sLr,lLr,xE,g4e,iLr,dLr,OY,cLr,fLr,mLr,$E,h4e,gLr,hLr,VY,pLr,_Lr,uLr,kE,p4e,bLr,vLr,XY,FLr,TLr,MLr,SE,_4e,ELr,CLr,zY,wLr,ALr,LLr,RE,u4e,yLr,xLr,WY,$Lr,kLr,SLr,PE,b4e,RLr,PLr,QY,BLr,ILr,NLr,BE,v4e,qLr,jLr,HY,DLr,GLr,OLr,IE,F4e,VLr,XLr,UY,zLr,WLr,QLr,NE,T4e,HLr,ULr,JY,JLr,YLr,KLr,qE,M4e,ZLr,eyr,YY,oyr,ryr,tyr,jE,E4e,ayr,nyr,KY,syr,lyr,iyr,DE,C4e,dyr,cyr,ZY,fyr,myr,gyr,GE,w4e,hyr,pyr,eK,_yr,uyr,byr,OE,A4e,vyr,Fyr,oK,Tyr,Myr,Eyr,VE,L4e,Cyr,wyr,rK,Ayr,Lyr,yyr,XE,y4e,xyr,$yr,tK,kyr,Syr,Ryr,zE,x4e,Pyr,Byr,aK,Iyr,Nyr,qyr,WE,$4e,jyr,Dyr,nK,Gyr,Oyr,Vyr,QE,hWe,Ec,HE,k4e,yx,Xyr,S4e,zyr,pWe,ir,xx,Wyr,Cc,Qyr,sK,Hyr,Uyr,lK,Jyr,Yyr,Kyr,$x,Zyr,R4e,e8r,o8r,r8r,qt,kx,t8r,P4e,a8r,n8r,wc,s8r,B4e,l8r,i8r,iK,d8r,c8r,f8r,UE,m8r,Ir,Sx,g8r,I4e,h8r,p8r,gn,_8r,N4e,u8r,b8r,q4e,v8r,F8r,j4e,T8r,M8r,E8r,ye,JE,D4e,C8r,w8r,dK,A8r,L8r,y8r,YE,G4e,x8r,$8r,cK,k8r,S8r,R8r,KE,O4e,P8r,B8r,fK,I8r,N8r,q8r,ZE,V4e,j8r,D8r,mK,G8r,O8r,V8r,eC,X4e,X8r,z8r,gK,W8r,Q8r,H8r,oC,z4e,U8r,J8r,hK,Y8r,K8r,Z8r,rC,W4e,e9r,o9r,pK,r9r,t9r,a9r,tC,Q4e,n9r,s9r,_K,l9r,i9r,d9r,aC,H4e,c9r,f9r,uK,m9r,g9r,h9r,nC,U4e,p9r,_9r,bK,u9r,b9r,v9r,sC,_We,Ac,lC,J4e,Rx,F9r,Y4e,T9r,uWe,dr,Px,M9r,Lc,E9r,vK,C9r,w9r,FK,A9r,L9r,y9r,Bx,x9r,K4e,$9r,k9r,S9r,jt,Ix,R9r,Z4e,P9r,B9r,yc,I9r,eEe,N9r,q9r,TK,j9r,D9r,G9r,iC,O9r,Nr,Nx,V9r,oEe,X9r,z9r,hn,W9r,rEe,Q9r,H9r,tEe,U9r,J9r,aEe,Y9r,K9r,Z9r,te,dC,nEe,exr,oxr,MK,rxr,txr,axr,cC,sEe,nxr,sxr,EK,lxr,ixr,dxr,fC,lEe,cxr,fxr,CK,mxr,gxr,hxr,mC,iEe,pxr,_xr,wK,uxr,bxr,vxr,gC,dEe,Fxr,Txr,AK,Mxr,Exr,Cxr,hC,cEe,wxr,Axr,LK,Lxr,yxr,xxr,pC,fEe,$xr,kxr,yK,Sxr,Rxr,Pxr,_C,mEe,Bxr,Ixr,xK,Nxr,qxr,jxr,uC,gEe,Dxr,Gxr,$K,Oxr,Vxr,Xxr,bC,hEe,zxr,Wxr,kK,Qxr,Hxr,Uxr,vC,pEe,Jxr,Yxr,SK,Kxr,Zxr,e$r,FC,_Ee,o$r,r$r,RK,t$r,a$r,n$r,TC,uEe,s$r,l$r,PK,i$r,d$r,c$r,MC,bEe,f$r,m$r,BK,g$r,h$r,p$r,EC,vEe,_$r,u$r,IK,b$r,v$r,F$r,CC,FEe,T$r,M$r,NK,E$r,C$r,w$r,wC,TEe,A$r,L$r,qK,y$r,x$r,$$r,AC,MEe,k$r,S$r,jK,R$r,P$r,B$r,LC,EEe,I$r,N$r,DK,q$r,j$r,D$r,yC,CEe,G$r,O$r,GK,V$r,X$r,z$r,xC,wEe,W$r,Q$r,OK,H$r,U$r,J$r,$C,AEe,Y$r,K$r,VK,Z$r,ekr,okr,kC,LEe,rkr,tkr,XK,akr,nkr,skr,SC,yEe,lkr,ikr,zK,dkr,ckr,fkr,RC,xEe,mkr,gkr,WK,hkr,pkr,_kr,PC,$Ee,ukr,bkr,QK,vkr,Fkr,Tkr,BC,bWe,xc,IC,kEe,qx,Mkr,SEe,Ekr,vWe,cr,jx,Ckr,$c,wkr,HK,Akr,Lkr,UK,ykr,xkr,$kr,Dx,kkr,REe,Skr,Rkr,Pkr,Dt,Gx,Bkr,PEe,Ikr,Nkr,kc,qkr,BEe,jkr,Dkr,JK,Gkr,Okr,Vkr,NC,Xkr,qr,Ox,zkr,IEe,Wkr,Qkr,pn,Hkr,NEe,Ukr,Jkr,qEe,Ykr,Kkr,jEe,Zkr,eSr,oSr,be,qC,DEe,rSr,tSr,YK,aSr,nSr,sSr,jC,GEe,lSr,iSr,KK,dSr,cSr,fSr,DC,OEe,mSr,gSr,ZK,hSr,pSr,_Sr,GC,VEe,uSr,bSr,eZ,vSr,FSr,TSr,OC,XEe,MSr,ESr,oZ,CSr,wSr,ASr,VC,zEe,LSr,ySr,rZ,xSr,$Sr,kSr,XC,WEe,SSr,RSr,tZ,PSr,BSr,ISr,zC,QEe,NSr,qSr,aZ,jSr,DSr,GSr,WC,HEe,OSr,VSr,nZ,XSr,zSr,WSr,QC,UEe,QSr,HSr,sZ,USr,JSr,YSr,HC,JEe,KSr,ZSr,lZ,eRr,oRr,rRr,UC,YEe,tRr,aRr,iZ,nRr,sRr,lRr,JC,KEe,iRr,dRr,dZ,cRr,fRr,mRr,YC,ZEe,gRr,hRr,cZ,pRr,_Rr,uRr,KC,eCe,bRr,vRr,fZ,FRr,TRr,MRr,ZC,oCe,ERr,CRr,mZ,wRr,ARr,LRr,e5,rCe,yRr,xRr,gZ,$Rr,kRr,SRr,o5,FWe,Sc,r5,tCe,Vx,RRr,aCe,PRr,TWe,fr,Xx,BRr,Rc,IRr,hZ,NRr,qRr,pZ,jRr,DRr,GRr,zx,ORr,nCe,VRr,XRr,zRr,Gt,Wx,WRr,sCe,QRr,HRr,Pc,URr,lCe,JRr,YRr,_Z,KRr,ZRr,ePr,t5,oPr,jr,Qx,rPr,iCe,tPr,aPr,_n,nPr,dCe,sPr,lPr,cCe,iPr,dPr,fCe,cPr,fPr,mPr,Hx,a5,mCe,gPr,hPr,uZ,pPr,_Pr,uPr,n5,gCe,bPr,vPr,bZ,FPr,TPr,MPr,s5,MWe,Bc,l5,hCe,Ux,EPr,pCe,CPr,EWe,mr,Jx,wPr,Ic,APr,vZ,LPr,yPr,FZ,xPr,$Pr,kPr,Yx,SPr,_Ce,RPr,PPr,BPr,Ot,Kx,IPr,uCe,NPr,qPr,Nc,jPr,bCe,DPr,GPr,TZ,OPr,VPr,XPr,i5,zPr,Dr,Zx,WPr,vCe,QPr,HPr,un,UPr,FCe,JPr,YPr,TCe,KPr,ZPr,MCe,eBr,oBr,rBr,ECe,d5,CCe,tBr,aBr,MZ,nBr,sBr,lBr,c5,CWe,qc,f5,wCe,e$,iBr,ACe,dBr,wWe,gr,o$,cBr,jc,fBr,EZ,mBr,gBr,CZ,hBr,pBr,_Br,r$,uBr,LCe,bBr,vBr,FBr,Vt,t$,TBr,yCe,MBr,EBr,Dc,CBr,xCe,wBr,ABr,wZ,LBr,yBr,xBr,m5,$Br,Gr,a$,kBr,$Ce,SBr,RBr,bn,PBr,kCe,BBr,IBr,SCe,NBr,qBr,RCe,jBr,DBr,GBr,de,g5,PCe,OBr,VBr,AZ,XBr,zBr,WBr,h5,BCe,QBr,HBr,LZ,UBr,JBr,YBr,p5,ICe,KBr,ZBr,yZ,eIr,oIr,rIr,_5,NCe,tIr,aIr,xZ,nIr,sIr,lIr,u5,qCe,iIr,dIr,$Z,cIr,fIr,mIr,b5,jCe,gIr,hIr,kZ,pIr,_Ir,uIr,v5,DCe,bIr,vIr,SZ,FIr,TIr,MIr,F5,GCe,EIr,CIr,RZ,wIr,AIr,LIr,T5,OCe,yIr,xIr,PZ,$Ir,kIr,SIr,M5,VCe,RIr,PIr,BZ,BIr,IIr,NIr,E5,XCe,qIr,jIr,IZ,DIr,GIr,OIr,C5,zCe,VIr,XIr,NZ,zIr,WIr,QIr,w5,WCe,HIr,UIr,qZ,JIr,YIr,KIr,A5,QCe,ZIr,eNr,jZ,oNr,rNr,tNr,L5,HCe,aNr,nNr,DZ,sNr,lNr,iNr,y5,UCe,dNr,cNr,GZ,fNr,mNr,gNr,x5,JCe,hNr,pNr,OZ,_Nr,uNr,bNr,$5,YCe,vNr,FNr,VZ,TNr,MNr,ENr,k5,KCe,CNr,wNr,XZ,ANr,LNr,yNr,S5,ZCe,xNr,$Nr,zZ,kNr,SNr,RNr,R5,AWe,Gc,P5,e5e,n$,PNr,o5e,BNr,LWe,hr,s$,INr,Oc,NNr,WZ,qNr,jNr,QZ,DNr,GNr,ONr,l$,VNr,r5e,XNr,zNr,WNr,Xt,i$,QNr,t5e,HNr,UNr,Vc,JNr,a5e,YNr,KNr,HZ,ZNr,eqr,oqr,B5,rqr,Or,d$,tqr,n5e,aqr,nqr,vn,sqr,s5e,lqr,iqr,l5e,dqr,cqr,i5e,fqr,mqr,gqr,ce,I5,d5e,hqr,pqr,UZ,_qr,uqr,bqr,N5,c5e,vqr,Fqr,JZ,Tqr,Mqr,Eqr,q5,f5e,Cqr,wqr,YZ,Aqr,Lqr,yqr,j5,m5e,xqr,$qr,KZ,kqr,Sqr,Rqr,D5,g5e,Pqr,Bqr,ZZ,Iqr,Nqr,qqr,G5,h5e,jqr,Dqr,eee,Gqr,Oqr,Vqr,O5,p5e,Xqr,zqr,oee,Wqr,Qqr,Hqr,V5,_5e,Uqr,Jqr,ree,Yqr,Kqr,Zqr,X5,u5e,ejr,ojr,tee,rjr,tjr,ajr,z5,b5e,njr,sjr,aee,ljr,ijr,djr,W5,v5e,cjr,fjr,nee,mjr,gjr,hjr,Q5,F5e,pjr,_jr,see,ujr,bjr,vjr,H5,T5e,Fjr,Tjr,lee,Mjr,Ejr,Cjr,U5,M5e,wjr,Ajr,iee,Ljr,yjr,xjr,J5,E5e,$jr,kjr,dee,Sjr,Rjr,Pjr,Y5,C5e,Bjr,Ijr,cee,Njr,qjr,jjr,K5,w5e,Djr,Gjr,fee,Ojr,Vjr,Xjr,Z5,A5e,zjr,Wjr,mee,Qjr,Hjr,Ujr,e3,L5e,Jjr,Yjr,gee,Kjr,Zjr,eDr,o3,y5e,oDr,rDr,hee,tDr,aDr,nDr,r3,yWe,Xc,t3,x5e,c$,sDr,$5e,lDr,xWe,pr,f$,iDr,zc,dDr,pee,cDr,fDr,_ee,mDr,gDr,hDr,m$,pDr,k5e,_Dr,uDr,bDr,zt,g$,vDr,S5e,FDr,TDr,Wc,MDr,R5e,EDr,CDr,uee,wDr,ADr,LDr,a3,yDr,Vr,h$,xDr,P5e,$Dr,kDr,Fn,SDr,B5e,RDr,PDr,I5e,BDr,IDr,N5e,NDr,qDr,jDr,q5e,n3,j5e,DDr,GDr,bee,ODr,VDr,XDr,s3,$We,Qc,l3,D5e,p$,zDr,G5e,WDr,kWe,_r,_$,QDr,Hc,HDr,vee,UDr,JDr,Fee,YDr,KDr,ZDr,u$,eGr,O5e,oGr,rGr,tGr,Wt,b$,aGr,V5e,nGr,sGr,Uc,lGr,X5e,iGr,dGr,Tee,cGr,fGr,mGr,i3,gGr,Xr,v$,hGr,z5e,pGr,_Gr,Tn,uGr,W5e,bGr,vGr,Q5e,FGr,TGr,H5e,MGr,EGr,CGr,U5e,d3,J5e,wGr,AGr,Mee,LGr,yGr,xGr,c3,SWe,Jc,f3,Y5e,F$,$Gr,K5e,kGr,RWe,ur,T$,SGr,Yc,RGr,Eee,PGr,BGr,Cee,IGr,NGr,qGr,M$,jGr,Z5e,DGr,GGr,OGr,Qt,E$,VGr,e3e,XGr,zGr,Kc,WGr,o3e,QGr,HGr,wee,UGr,JGr,YGr,m3,KGr,zr,C$,ZGr,r3e,eOr,oOr,Mn,rOr,t3e,tOr,aOr,a3e,nOr,sOr,n3e,lOr,iOr,dOr,oe,g3,s3e,cOr,fOr,Aee,mOr,gOr,hOr,h3,l3e,pOr,_Or,Lee,uOr,bOr,vOr,p3,i3e,FOr,TOr,yee,MOr,EOr,COr,_3,d3e,wOr,AOr,xee,LOr,yOr,xOr,u3,c3e,$Or,kOr,$ee,SOr,ROr,POr,b3,f3e,BOr,IOr,kee,NOr,qOr,jOr,v3,m3e,DOr,GOr,See,OOr,VOr,XOr,F3,g3e,zOr,WOr,Ree,QOr,HOr,UOr,T3,h3e,JOr,YOr,Pee,KOr,ZOr,eVr,M3,p3e,oVr,rVr,Bee,tVr,aVr,nVr,E3,_3e,sVr,lVr,Iee,iVr,dVr,cVr,C3,u3e,fVr,mVr,Nee,gVr,hVr,pVr,w3,b3e,_Vr,uVr,qee,bVr,vVr,FVr,A3,v3e,TVr,MVr,jee,EVr,CVr,wVr,L3,F3e,AVr,LVr,Dee,yVr,xVr,$Vr,y3,T3e,kVr,SVr,Gee,RVr,PVr,BVr,x3,M3e,IVr,NVr,Oee,qVr,jVr,DVr,$3,E3e,GVr,OVr,Vee,VVr,XVr,zVr,k3,C3e,WVr,QVr,Xee,HVr,UVr,JVr,S3,w3e,YVr,KVr,zee,ZVr,eXr,oXr,R3,A3e,rXr,tXr,Wee,aXr,nXr,sXr,P3,L3e,lXr,iXr,Qee,dXr,cXr,fXr,B3,y3e,mXr,gXr,Hee,hXr,pXr,_Xr,I3,x3e,uXr,bXr,Uee,vXr,FXr,TXr,N3,$3e,MXr,EXr,Jee,CXr,wXr,AXr,q3,k3e,LXr,yXr,Yee,xXr,$Xr,kXr,j3,S3e,SXr,RXr,Kee,PXr,BXr,IXr,D3,PWe,Zc,G3,R3e,w$,NXr,P3e,qXr,BWe,br,A$,jXr,ef,DXr,Zee,GXr,OXr,eoe,VXr,XXr,zXr,L$,WXr,B3e,QXr,HXr,UXr,Ht,y$,JXr,I3e,YXr,KXr,of,ZXr,N3e,ezr,ozr,ooe,rzr,tzr,azr,O3,nzr,Wr,x$,szr,q3e,lzr,izr,En,dzr,j3e,czr,fzr,D3e,mzr,gzr,G3e,hzr,pzr,_zr,xe,V3,O3e,uzr,bzr,roe,vzr,Fzr,Tzr,X3,V3e,Mzr,Ezr,toe,Czr,wzr,Azr,z3,X3e,Lzr,yzr,aoe,xzr,$zr,kzr,W3,z3e,Szr,Rzr,noe,Pzr,Bzr,Izr,Q3,W3e,Nzr,qzr,soe,jzr,Dzr,Gzr,H3,Q3e,Ozr,Vzr,loe,Xzr,zzr,Wzr,U3,H3e,Qzr,Hzr,ioe,Uzr,Jzr,Yzr,J3,U3e,Kzr,Zzr,doe,eWr,oWr,rWr,Y3,J3e,tWr,aWr,coe,nWr,sWr,lWr,K3,Y3e,iWr,dWr,foe,cWr,fWr,mWr,Z3,IWe,rf,e0,K3e,$$,gWr,Z3e,hWr,NWe,vr,k$,pWr,tf,_Wr,moe,uWr,bWr,goe,vWr,FWr,TWr,S$,MWr,e0e,EWr,CWr,wWr,Ut,R$,AWr,o0e,LWr,yWr,af,xWr,r0e,$Wr,kWr,hoe,SWr,RWr,PWr,o0,BWr,Qr,P$,IWr,t0e,NWr,qWr,Cn,jWr,a0e,DWr,GWr,n0e,OWr,VWr,s0e,XWr,zWr,WWr,Ee,r0,l0e,QWr,HWr,poe,UWr,JWr,YWr,t0,i0e,KWr,ZWr,_oe,eQr,oQr,rQr,a0,d0e,tQr,aQr,uoe,nQr,sQr,lQr,n0,c0e,iQr,dQr,boe,cQr,fQr,mQr,s0,f0e,gQr,hQr,voe,pQr,_Qr,uQr,l0,m0e,bQr,vQr,Foe,FQr,TQr,MQr,i0,g0e,EQr,CQr,Toe,wQr,AQr,LQr,d0,h0e,yQr,xQr,Moe,$Qr,kQr,SQr,c0,p0e,RQr,PQr,Eoe,BQr,IQr,NQr,f0,_0e,qQr,jQr,Coe,DQr,GQr,OQr,m0,u0e,VQr,XQr,woe,zQr,WQr,QQr,g0,b0e,HQr,UQr,Aoe,JQr,YQr,KQr,h0,v0e,ZQr,eHr,Loe,oHr,rHr,tHr,p0,qWe,nf,_0,F0e,B$,aHr,T0e,nHr,jWe,Fr,I$,sHr,sf,lHr,yoe,iHr,dHr,xoe,cHr,fHr,mHr,N$,gHr,M0e,hHr,pHr,_Hr,Jt,q$,uHr,E0e,bHr,vHr,lf,FHr,C0e,THr,MHr,$oe,EHr,CHr,wHr,u0,AHr,Hr,j$,LHr,w0e,yHr,xHr,wn,$Hr,A0e,kHr,SHr,L0e,RHr,PHr,y0e,BHr,IHr,NHr,$e,b0,x0e,qHr,jHr,koe,DHr,GHr,OHr,v0,$0e,VHr,XHr,Soe,zHr,WHr,QHr,F0,k0e,HHr,UHr,Roe,JHr,YHr,KHr,T0,S0e,ZHr,eUr,Poe,oUr,rUr,tUr,M0,R0e,aUr,nUr,Boe,sUr,lUr,iUr,E0,P0e,dUr,cUr,Ioe,fUr,mUr,gUr,C0,B0e,hUr,pUr,Noe,_Ur,uUr,bUr,w0,I0e,vUr,FUr,qoe,TUr,MUr,EUr,A0,N0e,CUr,wUr,joe,AUr,LUr,yUr,L0,q0e,xUr,$Ur,Doe,kUr,SUr,RUr,y0,DWe,df,x0,j0e,D$,PUr,D0e,BUr,GWe,Tr,G$,IUr,cf,NUr,Goe,qUr,jUr,Ooe,DUr,GUr,OUr,O$,VUr,G0e,XUr,zUr,WUr,Yt,V$,QUr,O0e,HUr,UUr,ff,JUr,V0e,YUr,KUr,Voe,ZUr,eJr,oJr,$0,rJr,Ur,X$,tJr,X0e,aJr,nJr,An,sJr,z0e,lJr,iJr,W0e,dJr,cJr,Q0e,fJr,mJr,gJr,ke,k0,H0e,hJr,pJr,Xoe,_Jr,uJr,bJr,S0,U0e,vJr,FJr,zoe,TJr,MJr,EJr,R0,J0e,CJr,wJr,Woe,AJr,LJr,yJr,P0,Y0e,xJr,$Jr,Qoe,kJr,SJr,RJr,B0,K0e,PJr,BJr,Hoe,IJr,NJr,qJr,I0,Z0e,jJr,DJr,Uoe,GJr,OJr,VJr,N0,ewe,XJr,zJr,Joe,WJr,QJr,HJr,q0,owe,UJr,JJr,Yoe,YJr,KJr,ZJr,j0,rwe,eYr,oYr,Koe,rYr,tYr,aYr,D0,twe,nYr,sYr,Zoe,lYr,iYr,dYr,G0,OWe,mf,O0,awe,z$,cYr,nwe,fYr,VWe,Mr,W$,mYr,gf,gYr,ere,hYr,pYr,ore,_Yr,uYr,bYr,Q$,vYr,swe,FYr,TYr,MYr,Kt,H$,EYr,lwe,CYr,wYr,hf,AYr,iwe,LYr,yYr,rre,xYr,$Yr,kYr,V0,SYr,Jr,U$,RYr,dwe,PYr,BYr,Ln,IYr,cwe,NYr,qYr,fwe,jYr,DYr,mwe,GYr,OYr,VYr,Se,X0,gwe,XYr,zYr,tre,WYr,QYr,HYr,z0,hwe,UYr,JYr,are,YYr,KYr,ZYr,W0,pwe,eKr,oKr,nre,rKr,tKr,aKr,Q0,_we,nKr,sKr,sre,lKr,iKr,dKr,H0,uwe,cKr,fKr,lre,mKr,gKr,hKr,U0,bwe,pKr,_Kr,ire,uKr,bKr,vKr,J0,vwe,FKr,TKr,dre,MKr,EKr,CKr,Y0,Fwe,wKr,AKr,cre,LKr,yKr,xKr,K0,Twe,$Kr,kKr,fre,SKr,RKr,PKr,Z0,Mwe,BKr,IKr,mre,NKr,qKr,jKr,ew,XWe,pf,ow,Ewe,J$,DKr,Cwe,GKr,zWe,Er,Y$,OKr,_f,VKr,gre,XKr,zKr,hre,WKr,QKr,HKr,K$,UKr,wwe,JKr,YKr,KKr,Zt,Z$,ZKr,Awe,eZr,oZr,uf,rZr,Lwe,tZr,aZr,pre,nZr,sZr,lZr,rw,iZr,Yr,ek,dZr,ywe,cZr,fZr,yn,mZr,xwe,gZr,hZr,$we,pZr,_Zr,kwe,uZr,bZr,vZr,Re,tw,Swe,FZr,TZr,_re,MZr,EZr,CZr,aw,Rwe,wZr,AZr,ure,LZr,yZr,xZr,nw,Pwe,$Zr,kZr,bre,SZr,RZr,PZr,sw,Bwe,BZr,IZr,vre,NZr,qZr,jZr,lw,Iwe,DZr,GZr,Fre,OZr,VZr,XZr,iw,Nwe,zZr,WZr,Tre,QZr,HZr,UZr,dw,qwe,JZr,YZr,Mre,KZr,ZZr,eet,cw,jwe,oet,ret,Ere,tet,aet,net,fw,Dwe,set,iet,Cre,det,cet,fet,mw,Gwe,met,get,wre,het,pet,_et,gw,WWe,bf,hw,Owe,ok,uet,Vwe,bet,QWe,Cr,rk,vet,vf,Fet,Are,Tet,Met,Lre,Eet,Cet,wet,tk,Aet,Xwe,Let,yet,xet,ea,ak,$et,zwe,ket,Set,Ff,Ret,Wwe,Pet,Bet,yre,Iet,Net,qet,pw,jet,Kr,nk,Det,Qwe,Get,Oet,xn,Vet,Hwe,Xet,zet,Uwe,Wet,Qet,Jwe,Het,Uet,Jet,Xe,_w,Ywe,Yet,Ket,xre,Zet,eot,oot,uw,Kwe,rot,tot,$re,aot,not,sot,bw,Zwe,lot,iot,kre,dot,cot,fot,vw,eAe,mot,got,Sre,hot,pot,_ot,Fw,oAe,uot,bot,Rre,vot,Fot,Tot,Tw,rAe,Mot,Eot,Pre,Cot,wot,Aot,Mw,tAe,Lot,yot,Bre,xot,$ot,kot,Ew,aAe,Sot,Rot,Ire,Pot,Bot,Iot,Cw,HWe,Tf,ww,nAe,sk,Not,sAe,qot,UWe,wr,lk,jot,Mf,Dot,Nre,Got,Oot,qre,Vot,Xot,zot,ik,Wot,lAe,Qot,Hot,Uot,oa,dk,Jot,iAe,Yot,Kot,Ef,Zot,dAe,ert,ort,jre,rrt,trt,art,Aw,nrt,Zr,ck,srt,cAe,lrt,irt,$n,drt,fAe,crt,frt,mAe,mrt,grt,gAe,hrt,prt,_rt,ze,Lw,hAe,urt,brt,Dre,vrt,Frt,Trt,yw,pAe,Mrt,Ert,Gre,Crt,wrt,Art,xw,_Ae,Lrt,yrt,Ore,xrt,$rt,krt,$w,uAe,Srt,Rrt,Vre,Prt,Brt,Irt,kw,bAe,Nrt,qrt,Xre,jrt,Drt,Grt,Sw,vAe,Ort,Vrt,zre,Xrt,zrt,Wrt,Rw,FAe,Qrt,Hrt,Wre,Urt,Jrt,Yrt,Pw,TAe,Krt,Zrt,Qre,ett,ott,rtt,Bw,JWe,Cf,Iw,MAe,fk,ttt,EAe,att,YWe,Ar,mk,ntt,wf,stt,Hre,ltt,itt,Ure,dtt,ctt,ftt,gk,mtt,CAe,gtt,htt,ptt,ra,hk,_tt,wAe,utt,btt,Af,vtt,AAe,Ftt,Ttt,Jre,Mtt,Ett,Ctt,Nw,wtt,et,pk,Att,LAe,Ltt,ytt,kn,xtt,yAe,$tt,ktt,xAe,Stt,Rtt,$Ae,Ptt,Btt,Itt,kAe,qw,SAe,Ntt,qtt,Yre,jtt,Dtt,Gtt,jw,KWe,Lf,Dw,RAe,_k,Ott,PAe,Vtt,ZWe,Lr,uk,Xtt,yf,ztt,Kre,Wtt,Qtt,Zre,Htt,Utt,Jtt,bk,Ytt,BAe,Ktt,Ztt,eat,ta,vk,oat,IAe,rat,tat,xf,aat,NAe,nat,sat,ete,lat,iat,dat,Gw,cat,ot,Fk,fat,qAe,mat,gat,Sn,hat,jAe,pat,_at,DAe,uat,bat,GAe,vat,Fat,Tat,Tk,Ow,OAe,Mat,Eat,ote,Cat,wat,Aat,Vw,VAe,Lat,yat,rte,xat,$at,kat,Xw,eQe,$f,zw,XAe,Mk,Sat,zAe,Rat,oQe,yr,Ek,Pat,kf,Bat,tte,Iat,Nat,ate,qat,jat,Dat,Ck,Gat,WAe,Oat,Vat,Xat,aa,wk,zat,QAe,Wat,Qat,Sf,Hat,HAe,Uat,Jat,nte,Yat,Kat,Zat,Ww,ent,rt,Ak,ont,UAe,rnt,tnt,Rn,ant,JAe,nnt,snt,YAe,lnt,int,KAe,dnt,cnt,fnt,ZAe,Qw,eLe,mnt,gnt,ste,hnt,pnt,_nt,Hw,rQe;return c=new re({}),Ra=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),uy=new re({}),by=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new unt({props:{warning:!0,$$slots:{default:[CUt]},$$scope:{ctx:$}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/configuration_auto.py#L614"}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/configuration_auto.py#L637"}}),eh=new q({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/configuration_auto.py#L760"}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/tokenization_auto.py#L411"}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17671/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/tokenization_auto.py#L425"}}),Ih=new q({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),$y=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/tokenization_auto.py#L624"}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17671/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),Fp=new unt({props:{$$slots:{default:[LUt]},$$scope:{ctx:$}}}),Tp=new q({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/processing_auto.py#L90"}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/processing_auto.py#L104"}}),Vp=new unt({props:{$$slots:{default:[xUt]},$$scope:{ctx:$}}}),Xp=new q({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/processing_auto.py#L257"}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L789"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Qp=new q({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Zu=new q({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L796"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new q({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),H1=new q({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),Zy=new re({}),e8=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L811"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),J1=new q({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new q({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),a8=new re({}),n8=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L818"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new q({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),A2=new q({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),d8=new re({}),c8=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L825"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new q({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),U2=new q({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),h8=new re({}),p8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L834"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForSequenceClassification">MCTCTForSequenceClassification</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Y2=new q({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Yb=new q({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),v8=new re({}),F8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L879"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Zb=new q({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new q({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),C8=new re({}),w8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L886"}}),L8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new q({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Gv=new q({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),x8=new re({}),$8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L872"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Vv=new q({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new q({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),P8=new re({}),B8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L843"}}),N8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new q({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new q({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[JUt]},$$scope:{ctx:$}}}),j8=new re({}),D8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L850"}}),O8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new q({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[YUt]},$$scope:{ctx:$}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),C6=new q({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[KUt]},$$scope:{ctx:$}}}),X8=new re({}),z8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L895"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new q({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ZUt]},$$scope:{ctx:$}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),G6=new q({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[eJt]},$$scope:{ctx:$}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L934"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),V6=new q({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[oJt]},$$scope:{ctx:$}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),W6=new q({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[rJt]},$$scope:{ctx:$}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L861"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new q({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[tJt]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new q({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L941"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Z6=new q({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new q({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[sJt]},$$scope:{ctx:$}}}),c9=new re({}),f9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L964"}}),g9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForAudioFrameClassification">MCTCTForAudioFrameClassification</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new q({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[lJt]},$$scope:{ctx:$}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new q({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[iJt]},$$scope:{ctx:$}}}),p9=new re({}),_9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L948"}}),b9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new q({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[dJt]},$$scope:{ctx:$}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new q({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[cJt]},$$scope:{ctx:$}}}),F9=new re({}),T9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L955"}}),E9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new q({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[fJt]},$$scope:{ctx:$}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new q({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[mJt]},$$scope:{ctx:$}}}),A9=new re({}),L9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L973"}}),x9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new q({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[gJt]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new q({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[hJt]},$$scope:{ctx:$}}}),k9=new re({}),S9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L980"}}),P9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new q({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new q({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),I9=new re({}),N9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L927"}}),j9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new q({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[uJt]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new q({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),O9=new re({}),V9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L902"}}),z9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new q({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[vJt]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new q({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L909"}}),J9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new q({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new q({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[MJt]},$$scope:{ctx:$}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L918"}}),ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new q({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[EJt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new q({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[CJt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),xM=new q({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[wJt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new q({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[AJt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new q({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[LJt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new q({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yJt]},$$scope:{ctx:$}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new q({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[xJt]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new q({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$Jt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new q({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[kJt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new q({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[SJt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new q({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[RJt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new q({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[PJt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new q({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[BJt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new q({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[IJt]},$$scope:{ctx:$}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new q({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[NJt]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new q({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[qJt]},$$scope:{ctx:$}}}),qx=new re({}),jx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new q({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[jJt]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new q({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[DJt]},$$scope:{ctx:$}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new q({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[GJt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new q({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[OJt]},$$scope:{ctx:$}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new q({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[VJt]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new q({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[XJt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new q({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[zJt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new q({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[WJt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),i$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new q({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[QJt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new q({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[HJt]},$$scope:{ctx:$}}}),c$=new re({}),f$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),g$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new q({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[UJt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new q({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[JJt]},$$scope:{ctx:$}}}),p$=new re({}),_$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),b$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new q({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[YJt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),c3=new q({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[KJt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new q({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ZJt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new q({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[eYt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new q({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[oYt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new q({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rYt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new q({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[tYt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new q({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[aYt]},$$scope:{ctx:$}}}),B$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new q({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[nYt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new q({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sYt]},$$scope:{ctx:$}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new q({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lYt]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new q({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iYt]},$$scope:{ctx:$}}}),z$=new re({}),W$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new q({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dYt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new q({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cYt]},$$scope:{ctx:$}}}),J$=new re({}),Y$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new q({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fYt]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new q({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mYt]},$$scope:{ctx:$}}}),ok=new re({}),rk=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new q({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[gYt]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new q({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[hYt]},$$scope:{ctx:$}}}),sk=new re({}),lk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),dk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new q({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[pYt]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new q({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_Yt]},$$scope:{ctx:$}}}),fk=new re({}),mk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new q({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uYt]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new q({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bYt]},$$scope:{ctx:$}}}),_k=new re({}),uk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),vk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Gw=new q({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[vYt]},$$scope:{ctx:$}}}),Fk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new q({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[FYt]},$$scope:{ctx:$}}}),Mk=new re({}),Ek=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),wk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Ww=new q({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[TYt]},$$scope:{ctx:$}}}),Ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new q({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[MYt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(c.$$.fragment),h=l(),wo=a("span"),xi=o("Auto Classes"),If=l(),lt=a("p"),$i=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=a("code"),gy=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Si=o("Instantiating one of "),Bn=a("a"),hy=o("AutoConfig"),In=o(", "),Nn=a("a"),py=o("AutoModel"),Ri=o(`, and
`),qn=a("a"),_y=o("AutoTokenizer"),Pi=o(" will directly create a class of the relevant architecture. For instance"),qf=l(),F(Ra.$$.fragment),He=l(),Ae=a("p"),JS=o("will create a model that is an instance of "),Bi=a("a"),YS=o("BertModel"),KS=o("."),Ao=l(),Pa=a("p"),ZS=o("There is one class of "),jf=a("code"),eR=o("AutoModel"),mUe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),YXe=l(),Ii=a("h2"),Df=a("a"),one=a("span"),F(uy.$$.fragment),gUe=l(),rne=a("span"),hUe=o("Extending the Auto Classes"),KXe=l(),jn=a("p"),pUe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tne=a("code"),_Ue=o("NewModel"),uUe=o(", make sure you have a "),ane=a("code"),bUe=o("NewModelConfig"),vUe=o(` then you can add those to the auto
classes like this:`),ZXe=l(),F(by.$$.fragment),eze=l(),oR=a("p"),FUe=o("You will then be able to use the auto classes like you would usually do!"),oze=l(),F(Gf.$$.fragment),rze=l(),Ni=a("h2"),Of=a("a"),nne=a("span"),F(vy.$$.fragment),TUe=l(),sne=a("span"),MUe=o("AutoConfig"),tze=l(),Lo=a("div"),F(Fy.$$.fragment),EUe=l(),Ty=a("p"),CUe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rR=a("a"),wUe=o("from_pretrained()"),AUe=o(" class method."),LUe=l(),My=a("p"),yUe=o("This class cannot be instantiated directly using "),lne=a("code"),xUe=o("__init__()"),$Ue=o(" (throws an error)."),kUe=l(),xr=a("div"),F(Ey.$$.fragment),SUe=l(),ine=a("p"),RUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PUe=l(),qi=a("p"),BUe=o("The configuration class to instantiate is selected based on the "),dne=a("code"),IUe=o("model_type"),NUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cne=a("code"),qUe=o("pretrained_model_name_or_path"),jUe=o(":"),DUe=l(),A=a("ul"),Vf=a("li"),fne=a("strong"),GUe=o("albert"),OUe=o(" \u2014 "),tR=a("a"),VUe=o("AlbertConfig"),XUe=o(" (ALBERT model)"),zUe=l(),Xf=a("li"),mne=a("strong"),WUe=o("bart"),QUe=o(" \u2014 "),aR=a("a"),HUe=o("BartConfig"),UUe=o(" (BART model)"),JUe=l(),zf=a("li"),gne=a("strong"),YUe=o("beit"),KUe=o(" \u2014 "),nR=a("a"),ZUe=o("BeitConfig"),eJe=o(" (BEiT model)"),oJe=l(),Wf=a("li"),hne=a("strong"),rJe=o("bert"),tJe=o(" \u2014 "),sR=a("a"),aJe=o("BertConfig"),nJe=o(" (BERT model)"),sJe=l(),Qf=a("li"),pne=a("strong"),lJe=o("bert-generation"),iJe=o(" \u2014 "),lR=a("a"),dJe=o("BertGenerationConfig"),cJe=o(" (Bert Generation model)"),fJe=l(),Hf=a("li"),_ne=a("strong"),mJe=o("big_bird"),gJe=o(" \u2014 "),iR=a("a"),hJe=o("BigBirdConfig"),pJe=o(" (BigBird model)"),_Je=l(),Uf=a("li"),une=a("strong"),uJe=o("bigbird_pegasus"),bJe=o(" \u2014 "),dR=a("a"),vJe=o("BigBirdPegasusConfig"),FJe=o(" (BigBird-Pegasus model)"),TJe=l(),Jf=a("li"),bne=a("strong"),MJe=o("blenderbot"),EJe=o(" \u2014 "),cR=a("a"),CJe=o("BlenderbotConfig"),wJe=o(" (Blenderbot model)"),AJe=l(),Yf=a("li"),vne=a("strong"),LJe=o("blenderbot-small"),yJe=o(" \u2014 "),fR=a("a"),xJe=o("BlenderbotSmallConfig"),$Je=o(" (BlenderbotSmall model)"),kJe=l(),Kf=a("li"),Fne=a("strong"),SJe=o("bloom"),RJe=o(" \u2014 "),mR=a("a"),PJe=o("BloomConfig"),BJe=o(" (BLOOM model)"),IJe=l(),Zf=a("li"),Tne=a("strong"),NJe=o("camembert"),qJe=o(" \u2014 "),gR=a("a"),jJe=o("CamembertConfig"),DJe=o(" (CamemBERT model)"),GJe=l(),em=a("li"),Mne=a("strong"),OJe=o("canine"),VJe=o(" \u2014 "),hR=a("a"),XJe=o("CanineConfig"),zJe=o(" (CANINE model)"),WJe=l(),om=a("li"),Ene=a("strong"),QJe=o("clip"),HJe=o(" \u2014 "),pR=a("a"),UJe=o("CLIPConfig"),JJe=o(" (CLIP model)"),YJe=l(),rm=a("li"),Cne=a("strong"),KJe=o("codegen"),ZJe=o(" \u2014 "),_R=a("a"),eYe=o("CodeGenConfig"),oYe=o(" (CodeGen model)"),rYe=l(),tm=a("li"),wne=a("strong"),tYe=o("convbert"),aYe=o(" \u2014 "),uR=a("a"),nYe=o("ConvBertConfig"),sYe=o(" (ConvBERT model)"),lYe=l(),am=a("li"),Ane=a("strong"),iYe=o("convnext"),dYe=o(" \u2014 "),bR=a("a"),cYe=o("ConvNextConfig"),fYe=o(" (ConvNeXT model)"),mYe=l(),nm=a("li"),Lne=a("strong"),gYe=o("ctrl"),hYe=o(" \u2014 "),vR=a("a"),pYe=o("CTRLConfig"),_Ye=o(" (CTRL model)"),uYe=l(),sm=a("li"),yne=a("strong"),bYe=o("cvt"),vYe=o(" \u2014 "),FR=a("a"),FYe=o("CvtConfig"),TYe=o(" (CvT model)"),MYe=l(),lm=a("li"),xne=a("strong"),EYe=o("data2vec-audio"),CYe=o(" \u2014 "),TR=a("a"),wYe=o("Data2VecAudioConfig"),AYe=o(" (Data2VecAudio model)"),LYe=l(),im=a("li"),$ne=a("strong"),yYe=o("data2vec-text"),xYe=o(" \u2014 "),MR=a("a"),$Ye=o("Data2VecTextConfig"),kYe=o(" (Data2VecText model)"),SYe=l(),dm=a("li"),kne=a("strong"),RYe=o("data2vec-vision"),PYe=o(" \u2014 "),ER=a("a"),BYe=o("Data2VecVisionConfig"),IYe=o(" (Data2VecVision model)"),NYe=l(),cm=a("li"),Sne=a("strong"),qYe=o("deberta"),jYe=o(" \u2014 "),CR=a("a"),DYe=o("DebertaConfig"),GYe=o(" (DeBERTa model)"),OYe=l(),fm=a("li"),Rne=a("strong"),VYe=o("deberta-v2"),XYe=o(" \u2014 "),wR=a("a"),zYe=o("DebertaV2Config"),WYe=o(" (DeBERTa-v2 model)"),QYe=l(),mm=a("li"),Pne=a("strong"),HYe=o("decision_transformer"),UYe=o(" \u2014 "),AR=a("a"),JYe=o("DecisionTransformerConfig"),YYe=o(" (Decision Transformer model)"),KYe=l(),gm=a("li"),Bne=a("strong"),ZYe=o("deit"),eKe=o(" \u2014 "),LR=a("a"),oKe=o("DeiTConfig"),rKe=o(" (DeiT model)"),tKe=l(),hm=a("li"),Ine=a("strong"),aKe=o("detr"),nKe=o(" \u2014 "),yR=a("a"),sKe=o("DetrConfig"),lKe=o(" (DETR model)"),iKe=l(),pm=a("li"),Nne=a("strong"),dKe=o("distilbert"),cKe=o(" \u2014 "),xR=a("a"),fKe=o("DistilBertConfig"),mKe=o(" (DistilBERT model)"),gKe=l(),_m=a("li"),qne=a("strong"),hKe=o("dpr"),pKe=o(" \u2014 "),$R=a("a"),_Ke=o("DPRConfig"),uKe=o(" (DPR model)"),bKe=l(),um=a("li"),jne=a("strong"),vKe=o("dpt"),FKe=o(" \u2014 "),kR=a("a"),TKe=o("DPTConfig"),MKe=o(" (DPT model)"),EKe=l(),bm=a("li"),Dne=a("strong"),CKe=o("electra"),wKe=o(" \u2014 "),SR=a("a"),AKe=o("ElectraConfig"),LKe=o(" (ELECTRA model)"),yKe=l(),vm=a("li"),Gne=a("strong"),xKe=o("encoder-decoder"),$Ke=o(" \u2014 "),RR=a("a"),kKe=o("EncoderDecoderConfig"),SKe=o(" (Encoder decoder model)"),RKe=l(),Fm=a("li"),One=a("strong"),PKe=o("flaubert"),BKe=o(" \u2014 "),PR=a("a"),IKe=o("FlaubertConfig"),NKe=o(" (FlauBERT model)"),qKe=l(),Tm=a("li"),Vne=a("strong"),jKe=o("flava"),DKe=o(" \u2014 "),BR=a("a"),GKe=o("FlavaConfig"),OKe=o(" (FLAVA model)"),VKe=l(),Mm=a("li"),Xne=a("strong"),XKe=o("fnet"),zKe=o(" \u2014 "),IR=a("a"),WKe=o("FNetConfig"),QKe=o(" (FNet model)"),HKe=l(),Em=a("li"),zne=a("strong"),UKe=o("fsmt"),JKe=o(" \u2014 "),NR=a("a"),YKe=o("FSMTConfig"),KKe=o(" (FairSeq Machine-Translation model)"),ZKe=l(),Cm=a("li"),Wne=a("strong"),eZe=o("funnel"),oZe=o(" \u2014 "),qR=a("a"),rZe=o("FunnelConfig"),tZe=o(" (Funnel Transformer model)"),aZe=l(),wm=a("li"),Qne=a("strong"),nZe=o("glpn"),sZe=o(" \u2014 "),jR=a("a"),lZe=o("GLPNConfig"),iZe=o(" (GLPN model)"),dZe=l(),Am=a("li"),Hne=a("strong"),cZe=o("gpt2"),fZe=o(" \u2014 "),DR=a("a"),mZe=o("GPT2Config"),gZe=o(" (OpenAI GPT-2 model)"),hZe=l(),Lm=a("li"),Une=a("strong"),pZe=o("gpt_neo"),_Ze=o(" \u2014 "),GR=a("a"),uZe=o("GPTNeoConfig"),bZe=o(" (GPT Neo model)"),vZe=l(),ym=a("li"),Jne=a("strong"),FZe=o("gpt_neox"),TZe=o(" \u2014 "),OR=a("a"),MZe=o("GPTNeoXConfig"),EZe=o(" (GPT NeoX model)"),CZe=l(),xm=a("li"),Yne=a("strong"),wZe=o("gptj"),AZe=o(" \u2014 "),VR=a("a"),LZe=o("GPTJConfig"),yZe=o(" (GPT-J model)"),xZe=l(),$m=a("li"),Kne=a("strong"),$Ze=o("groupvit"),kZe=o(" \u2014 "),XR=a("a"),SZe=o("GroupViTConfig"),RZe=o(" (GroupViT model)"),PZe=l(),km=a("li"),Zne=a("strong"),BZe=o("hubert"),IZe=o(" \u2014 "),zR=a("a"),NZe=o("HubertConfig"),qZe=o(" (Hubert model)"),jZe=l(),Sm=a("li"),ese=a("strong"),DZe=o("ibert"),GZe=o(" \u2014 "),WR=a("a"),OZe=o("IBertConfig"),VZe=o(" (I-BERT model)"),XZe=l(),Rm=a("li"),ose=a("strong"),zZe=o("imagegpt"),WZe=o(" \u2014 "),QR=a("a"),QZe=o("ImageGPTConfig"),HZe=o(" (ImageGPT model)"),UZe=l(),Pm=a("li"),rse=a("strong"),JZe=o("layoutlm"),YZe=o(" \u2014 "),HR=a("a"),KZe=o("LayoutLMConfig"),ZZe=o(" (LayoutLM model)"),eeo=l(),Bm=a("li"),tse=a("strong"),oeo=o("layoutlmv2"),reo=o(" \u2014 "),UR=a("a"),teo=o("LayoutLMv2Config"),aeo=o(" (LayoutLMv2 model)"),neo=l(),Im=a("li"),ase=a("strong"),seo=o("layoutlmv3"),leo=o(" \u2014 "),JR=a("a"),ieo=o("LayoutLMv3Config"),deo=o(" (LayoutLMv3 model)"),ceo=l(),Nm=a("li"),nse=a("strong"),feo=o("led"),meo=o(" \u2014 "),YR=a("a"),geo=o("LEDConfig"),heo=o(" (LED model)"),peo=l(),qm=a("li"),sse=a("strong"),_eo=o("levit"),ueo=o(" \u2014 "),KR=a("a"),beo=o("LevitConfig"),veo=o(" (LeViT model)"),Feo=l(),jm=a("li"),lse=a("strong"),Teo=o("longformer"),Meo=o(" \u2014 "),ZR=a("a"),Eeo=o("LongformerConfig"),Ceo=o(" (Longformer model)"),weo=l(),Dm=a("li"),ise=a("strong"),Aeo=o("longt5"),Leo=o(" \u2014 "),eP=a("a"),yeo=o("LongT5Config"),xeo=o(" (LongT5 model)"),$eo=l(),Gm=a("li"),dse=a("strong"),keo=o("luke"),Seo=o(" \u2014 "),oP=a("a"),Reo=o("LukeConfig"),Peo=o(" (LUKE model)"),Beo=l(),Om=a("li"),cse=a("strong"),Ieo=o("lxmert"),Neo=o(" \u2014 "),rP=a("a"),qeo=o("LxmertConfig"),jeo=o(" (LXMERT model)"),Deo=l(),Vm=a("li"),fse=a("strong"),Geo=o("m2m_100"),Oeo=o(" \u2014 "),tP=a("a"),Veo=o("M2M100Config"),Xeo=o(" (M2M100 model)"),zeo=l(),Xm=a("li"),mse=a("strong"),Weo=o("marian"),Qeo=o(" \u2014 "),aP=a("a"),Heo=o("MarianConfig"),Ueo=o(" (Marian model)"),Jeo=l(),zm=a("li"),gse=a("strong"),Yeo=o("maskformer"),Keo=o(" \u2014 "),nP=a("a"),Zeo=o("MaskFormerConfig"),eoo=o(" (MaskFormer model)"),ooo=l(),Wm=a("li"),hse=a("strong"),roo=o("mbart"),too=o(" \u2014 "),sP=a("a"),aoo=o("MBartConfig"),noo=o(" (mBART model)"),soo=l(),Qm=a("li"),pse=a("strong"),loo=o("mctct"),ioo=o(" \u2014 "),lP=a("a"),doo=o("MCTCTConfig"),coo=o(" (M-CTC-T model)"),foo=l(),Hm=a("li"),_se=a("strong"),moo=o("megatron-bert"),goo=o(" \u2014 "),iP=a("a"),hoo=o("MegatronBertConfig"),poo=o(" (Megatron-BERT model)"),_oo=l(),Um=a("li"),use=a("strong"),uoo=o("mobilebert"),boo=o(" \u2014 "),dP=a("a"),voo=o("MobileBertConfig"),Foo=o(" (MobileBERT model)"),Too=l(),Jm=a("li"),bse=a("strong"),Moo=o("mobilevit"),Eoo=o(" \u2014 "),cP=a("a"),Coo=o("MobileViTConfig"),woo=o(" (MobileViT model)"),Aoo=l(),Ym=a("li"),vse=a("strong"),Loo=o("mpnet"),yoo=o(" \u2014 "),fP=a("a"),xoo=o("MPNetConfig"),$oo=o(" (MPNet model)"),koo=l(),Km=a("li"),Fse=a("strong"),Soo=o("mt5"),Roo=o(" \u2014 "),mP=a("a"),Poo=o("MT5Config"),Boo=o(" (MT5 model)"),Ioo=l(),Zm=a("li"),Tse=a("strong"),Noo=o("mvp"),qoo=o(" \u2014 "),gP=a("a"),joo=o("MvpConfig"),Doo=o(" (MVP model)"),Goo=l(),eg=a("li"),Mse=a("strong"),Ooo=o("nezha"),Voo=o(" \u2014 "),hP=a("a"),Xoo=o("NezhaConfig"),zoo=o(" (Nezha model)"),Woo=l(),og=a("li"),Ese=a("strong"),Qoo=o("nystromformer"),Hoo=o(" \u2014 "),pP=a("a"),Uoo=o("NystromformerConfig"),Joo=o(" (Nystr\xF6mformer model)"),Yoo=l(),rg=a("li"),Cse=a("strong"),Koo=o("openai-gpt"),Zoo=o(" \u2014 "),_P=a("a"),ero=o("OpenAIGPTConfig"),oro=o(" (OpenAI GPT model)"),rro=l(),tg=a("li"),wse=a("strong"),tro=o("opt"),aro=o(" \u2014 "),uP=a("a"),nro=o("OPTConfig"),sro=o(" (OPT model)"),lro=l(),ag=a("li"),Ase=a("strong"),iro=o("owlvit"),dro=o(" \u2014 "),bP=a("a"),cro=o("OwlViTConfig"),fro=o(" (OWL-ViT model)"),mro=l(),ng=a("li"),Lse=a("strong"),gro=o("pegasus"),hro=o(" \u2014 "),vP=a("a"),pro=o("PegasusConfig"),_ro=o(" (Pegasus model)"),uro=l(),sg=a("li"),yse=a("strong"),bro=o("perceiver"),vro=o(" \u2014 "),FP=a("a"),Fro=o("PerceiverConfig"),Tro=o(" (Perceiver model)"),Mro=l(),lg=a("li"),xse=a("strong"),Ero=o("plbart"),Cro=o(" \u2014 "),TP=a("a"),wro=o("PLBartConfig"),Aro=o(" (PLBart model)"),Lro=l(),ig=a("li"),$se=a("strong"),yro=o("poolformer"),xro=o(" \u2014 "),MP=a("a"),$ro=o("PoolFormerConfig"),kro=o(" (PoolFormer model)"),Sro=l(),dg=a("li"),kse=a("strong"),Rro=o("prophetnet"),Pro=o(" \u2014 "),EP=a("a"),Bro=o("ProphetNetConfig"),Iro=o(" (ProphetNet model)"),Nro=l(),cg=a("li"),Sse=a("strong"),qro=o("qdqbert"),jro=o(" \u2014 "),CP=a("a"),Dro=o("QDQBertConfig"),Gro=o(" (QDQBert model)"),Oro=l(),fg=a("li"),Rse=a("strong"),Vro=o("rag"),Xro=o(" \u2014 "),wP=a("a"),zro=o("RagConfig"),Wro=o(" (RAG model)"),Qro=l(),mg=a("li"),Pse=a("strong"),Hro=o("realm"),Uro=o(" \u2014 "),AP=a("a"),Jro=o("RealmConfig"),Yro=o(" (REALM model)"),Kro=l(),gg=a("li"),Bse=a("strong"),Zro=o("reformer"),eto=o(" \u2014 "),LP=a("a"),oto=o("ReformerConfig"),rto=o(" (Reformer model)"),tto=l(),hg=a("li"),Ise=a("strong"),ato=o("regnet"),nto=o(" \u2014 "),yP=a("a"),sto=o("RegNetConfig"),lto=o(" (RegNet model)"),ito=l(),pg=a("li"),Nse=a("strong"),dto=o("rembert"),cto=o(" \u2014 "),xP=a("a"),fto=o("RemBertConfig"),mto=o(" (RemBERT model)"),gto=l(),_g=a("li"),qse=a("strong"),hto=o("resnet"),pto=o(" \u2014 "),$P=a("a"),_to=o("ResNetConfig"),uto=o(" (ResNet model)"),bto=l(),ug=a("li"),jse=a("strong"),vto=o("retribert"),Fto=o(" \u2014 "),kP=a("a"),Tto=o("RetriBertConfig"),Mto=o(" (RetriBERT model)"),Eto=l(),bg=a("li"),Dse=a("strong"),Cto=o("roberta"),wto=o(" \u2014 "),SP=a("a"),Ato=o("RobertaConfig"),Lto=o(" (RoBERTa model)"),yto=l(),vg=a("li"),Gse=a("strong"),xto=o("roformer"),$to=o(" \u2014 "),RP=a("a"),kto=o("RoFormerConfig"),Sto=o(" (RoFormer model)"),Rto=l(),Fg=a("li"),Ose=a("strong"),Pto=o("segformer"),Bto=o(" \u2014 "),PP=a("a"),Ito=o("SegformerConfig"),Nto=o(" (SegFormer model)"),qto=l(),Tg=a("li"),Vse=a("strong"),jto=o("sew"),Dto=o(" \u2014 "),BP=a("a"),Gto=o("SEWConfig"),Oto=o(" (SEW model)"),Vto=l(),Mg=a("li"),Xse=a("strong"),Xto=o("sew-d"),zto=o(" \u2014 "),IP=a("a"),Wto=o("SEWDConfig"),Qto=o(" (SEW-D model)"),Hto=l(),Eg=a("li"),zse=a("strong"),Uto=o("speech-encoder-decoder"),Jto=o(" \u2014 "),NP=a("a"),Yto=o("SpeechEncoderDecoderConfig"),Kto=o(" (Speech Encoder decoder model)"),Zto=l(),Cg=a("li"),Wse=a("strong"),eao=o("speech_to_text"),oao=o(" \u2014 "),qP=a("a"),rao=o("Speech2TextConfig"),tao=o(" (Speech2Text model)"),aao=l(),wg=a("li"),Qse=a("strong"),nao=o("speech_to_text_2"),sao=o(" \u2014 "),jP=a("a"),lao=o("Speech2Text2Config"),iao=o(" (Speech2Text2 model)"),dao=l(),Ag=a("li"),Hse=a("strong"),cao=o("splinter"),fao=o(" \u2014 "),DP=a("a"),mao=o("SplinterConfig"),gao=o(" (Splinter model)"),hao=l(),Lg=a("li"),Use=a("strong"),pao=o("squeezebert"),_ao=o(" \u2014 "),GP=a("a"),uao=o("SqueezeBertConfig"),bao=o(" (SqueezeBERT model)"),vao=l(),yg=a("li"),Jse=a("strong"),Fao=o("swin"),Tao=o(" \u2014 "),OP=a("a"),Mao=o("SwinConfig"),Eao=o(" (Swin Transformer model)"),Cao=l(),xg=a("li"),Yse=a("strong"),wao=o("t5"),Aao=o(" \u2014 "),VP=a("a"),Lao=o("T5Config"),yao=o(" (T5 model)"),xao=l(),$g=a("li"),Kse=a("strong"),$ao=o("tapas"),kao=o(" \u2014 "),XP=a("a"),Sao=o("TapasConfig"),Rao=o(" (TAPAS model)"),Pao=l(),kg=a("li"),Zse=a("strong"),Bao=o("trajectory_transformer"),Iao=o(" \u2014 "),zP=a("a"),Nao=o("TrajectoryTransformerConfig"),qao=o(" (Trajectory Transformer model)"),jao=l(),Sg=a("li"),ele=a("strong"),Dao=o("transfo-xl"),Gao=o(" \u2014 "),WP=a("a"),Oao=o("TransfoXLConfig"),Vao=o(" (Transformer-XL model)"),Xao=l(),Rg=a("li"),ole=a("strong"),zao=o("trocr"),Wao=o(" \u2014 "),QP=a("a"),Qao=o("TrOCRConfig"),Hao=o(" (TrOCR model)"),Uao=l(),Pg=a("li"),rle=a("strong"),Jao=o("unispeech"),Yao=o(" \u2014 "),HP=a("a"),Kao=o("UniSpeechConfig"),Zao=o(" (UniSpeech model)"),eno=l(),Bg=a("li"),tle=a("strong"),ono=o("unispeech-sat"),rno=o(" \u2014 "),UP=a("a"),tno=o("UniSpeechSatConfig"),ano=o(" (UniSpeechSat model)"),nno=l(),Ig=a("li"),ale=a("strong"),sno=o("van"),lno=o(" \u2014 "),JP=a("a"),ino=o("VanConfig"),dno=o(" (VAN model)"),cno=l(),Ng=a("li"),nle=a("strong"),fno=o("vilt"),mno=o(" \u2014 "),YP=a("a"),gno=o("ViltConfig"),hno=o(" (ViLT model)"),pno=l(),qg=a("li"),sle=a("strong"),_no=o("vision-encoder-decoder"),uno=o(" \u2014 "),KP=a("a"),bno=o("VisionEncoderDecoderConfig"),vno=o(" (Vision Encoder decoder model)"),Fno=l(),jg=a("li"),lle=a("strong"),Tno=o("vision-text-dual-encoder"),Mno=o(" \u2014 "),ZP=a("a"),Eno=o("VisionTextDualEncoderConfig"),Cno=o(" (VisionTextDualEncoder model)"),wno=l(),Dg=a("li"),ile=a("strong"),Ano=o("visual_bert"),Lno=o(" \u2014 "),eB=a("a"),yno=o("VisualBertConfig"),xno=o(" (VisualBERT model)"),$no=l(),Gg=a("li"),dle=a("strong"),kno=o("vit"),Sno=o(" \u2014 "),oB=a("a"),Rno=o("ViTConfig"),Pno=o(" (ViT model)"),Bno=l(),Og=a("li"),cle=a("strong"),Ino=o("vit_mae"),Nno=o(" \u2014 "),rB=a("a"),qno=o("ViTMAEConfig"),jno=o(" (ViTMAE model)"),Dno=l(),Vg=a("li"),fle=a("strong"),Gno=o("wav2vec2"),Ono=o(" \u2014 "),tB=a("a"),Vno=o("Wav2Vec2Config"),Xno=o(" (Wav2Vec2 model)"),zno=l(),Xg=a("li"),mle=a("strong"),Wno=o("wav2vec2-conformer"),Qno=o(" \u2014 "),aB=a("a"),Hno=o("Wav2Vec2ConformerConfig"),Uno=o(" (Wav2Vec2-Conformer model)"),Jno=l(),zg=a("li"),gle=a("strong"),Yno=o("wavlm"),Kno=o(" \u2014 "),nB=a("a"),Zno=o("WavLMConfig"),eso=o(" (WavLM model)"),oso=l(),Wg=a("li"),hle=a("strong"),rso=o("xglm"),tso=o(" \u2014 "),sB=a("a"),aso=o("XGLMConfig"),nso=o(" (XGLM model)"),sso=l(),Qg=a("li"),ple=a("strong"),lso=o("xlm"),iso=o(" \u2014 "),lB=a("a"),dso=o("XLMConfig"),cso=o(" (XLM model)"),fso=l(),Hg=a("li"),_le=a("strong"),mso=o("xlm-prophetnet"),gso=o(" \u2014 "),iB=a("a"),hso=o("XLMProphetNetConfig"),pso=o(" (XLM-ProphetNet model)"),_so=l(),Ug=a("li"),ule=a("strong"),uso=o("xlm-roberta"),bso=o(" \u2014 "),dB=a("a"),vso=o("XLMRobertaConfig"),Fso=o(" (XLM-RoBERTa model)"),Tso=l(),Jg=a("li"),ble=a("strong"),Mso=o("xlm-roberta-xl"),Eso=o(" \u2014 "),cB=a("a"),Cso=o("XLMRobertaXLConfig"),wso=o(" (XLM-RoBERTa-XL model)"),Aso=l(),Yg=a("li"),vle=a("strong"),Lso=o("xlnet"),yso=o(" \u2014 "),fB=a("a"),xso=o("XLNetConfig"),$so=o(" (XLNet model)"),kso=l(),Kg=a("li"),Fle=a("strong"),Sso=o("yolos"),Rso=o(" \u2014 "),mB=a("a"),Pso=o("YolosConfig"),Bso=o(" (YOLOS model)"),Iso=l(),Zg=a("li"),Tle=a("strong"),Nso=o("yoso"),qso=o(" \u2014 "),gB=a("a"),jso=o("YosoConfig"),Dso=o(" (YOSO model)"),Gso=l(),F(eh.$$.fragment),Oso=l(),oh=a("div"),F(Cy.$$.fragment),Vso=l(),Mle=a("p"),Xso=o("Register a new configuration for this class."),aze=l(),ji=a("h2"),rh=a("a"),Ele=a("span"),F(wy.$$.fragment),zso=l(),Cle=a("span"),Wso=o("AutoTokenizer"),nze=l(),yo=a("div"),F(Ay.$$.fragment),Qso=l(),Ly=a("p"),Hso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),hB=a("a"),Uso=o("AutoTokenizer.from_pretrained()"),Jso=o(" class method."),Yso=l(),yy=a("p"),Kso=o("This class cannot be instantiated directly using "),wle=a("code"),Zso=o("__init__()"),elo=o(" (throws an error)."),olo=l(),$r=a("div"),F(xy.$$.fragment),rlo=l(),Ale=a("p"),tlo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),alo=l(),Ba=a("p"),nlo=o("The tokenizer class to instantiate is selected based on the "),Lle=a("code"),slo=o("model_type"),llo=o(` property of the config object (either
passed as an argument or loaded from `),yle=a("code"),ilo=o("pretrained_model_name_or_path"),dlo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=a("code"),clo=o("pretrained_model_name_or_path"),flo=o(":"),mlo=l(),k=a("ul"),Dn=a("li"),$le=a("strong"),glo=o("albert"),hlo=o(" \u2014 "),pB=a("a"),plo=o("AlbertTokenizer"),_lo=o(" or "),_B=a("a"),ulo=o("AlbertTokenizerFast"),blo=o(" (ALBERT model)"),vlo=l(),Gn=a("li"),kle=a("strong"),Flo=o("bart"),Tlo=o(" \u2014 "),uB=a("a"),Mlo=o("BartTokenizer"),Elo=o(" or "),bB=a("a"),Clo=o("BartTokenizerFast"),wlo=o(" (BART model)"),Alo=l(),On=a("li"),Sle=a("strong"),Llo=o("barthez"),ylo=o(" \u2014 "),vB=a("a"),xlo=o("BarthezTokenizer"),$lo=o(" or "),FB=a("a"),klo=o("BarthezTokenizerFast"),Slo=o(" (BARThez model)"),Rlo=l(),th=a("li"),Rle=a("strong"),Plo=o("bartpho"),Blo=o(" \u2014 "),TB=a("a"),Ilo=o("BartphoTokenizer"),Nlo=o(" (BARTpho model)"),qlo=l(),Vn=a("li"),Ple=a("strong"),jlo=o("bert"),Dlo=o(" \u2014 "),MB=a("a"),Glo=o("BertTokenizer"),Olo=o(" or "),EB=a("a"),Vlo=o("BertTokenizerFast"),Xlo=o(" (BERT model)"),zlo=l(),ah=a("li"),Ble=a("strong"),Wlo=o("bert-generation"),Qlo=o(" \u2014 "),CB=a("a"),Hlo=o("BertGenerationTokenizer"),Ulo=o(" (Bert Generation model)"),Jlo=l(),nh=a("li"),Ile=a("strong"),Ylo=o("bert-japanese"),Klo=o(" \u2014 "),wB=a("a"),Zlo=o("BertJapaneseTokenizer"),eio=o(" (BertJapanese model)"),oio=l(),sh=a("li"),Nle=a("strong"),rio=o("bertweet"),tio=o(" \u2014 "),AB=a("a"),aio=o("BertweetTokenizer"),nio=o(" (BERTweet model)"),sio=l(),Xn=a("li"),qle=a("strong"),lio=o("big_bird"),iio=o(" \u2014 "),LB=a("a"),dio=o("BigBirdTokenizer"),cio=o(" or "),yB=a("a"),fio=o("BigBirdTokenizerFast"),mio=o(" (BigBird model)"),gio=l(),zn=a("li"),jle=a("strong"),hio=o("bigbird_pegasus"),pio=o(" \u2014 "),xB=a("a"),_io=o("PegasusTokenizer"),uio=o(" or "),$B=a("a"),bio=o("PegasusTokenizerFast"),vio=o(" (BigBird-Pegasus model)"),Fio=l(),Wn=a("li"),Dle=a("strong"),Tio=o("blenderbot"),Mio=o(" \u2014 "),kB=a("a"),Eio=o("BlenderbotTokenizer"),Cio=o(" or "),SB=a("a"),wio=o("BlenderbotTokenizerFast"),Aio=o(" (Blenderbot model)"),Lio=l(),lh=a("li"),Gle=a("strong"),yio=o("blenderbot-small"),xio=o(" \u2014 "),RB=a("a"),$io=o("BlenderbotSmallTokenizer"),kio=o(" (BlenderbotSmall model)"),Sio=l(),ih=a("li"),Ole=a("strong"),Rio=o("bloom"),Pio=o(" \u2014 "),PB=a("a"),Bio=o("BloomTokenizerFast"),Iio=o(" (BLOOM model)"),Nio=l(),dh=a("li"),Vle=a("strong"),qio=o("byt5"),jio=o(" \u2014 "),BB=a("a"),Dio=o("ByT5Tokenizer"),Gio=o(" (ByT5 model)"),Oio=l(),Qn=a("li"),Xle=a("strong"),Vio=o("camembert"),Xio=o(" \u2014 "),IB=a("a"),zio=o("CamembertTokenizer"),Wio=o(" or "),NB=a("a"),Qio=o("CamembertTokenizerFast"),Hio=o(" (CamemBERT model)"),Uio=l(),ch=a("li"),zle=a("strong"),Jio=o("canine"),Yio=o(" \u2014 "),qB=a("a"),Kio=o("CanineTokenizer"),Zio=o(" (CANINE model)"),edo=l(),Hn=a("li"),Wle=a("strong"),odo=o("clip"),rdo=o(" \u2014 "),jB=a("a"),tdo=o("CLIPTokenizer"),ado=o(" or "),DB=a("a"),ndo=o("CLIPTokenizerFast"),sdo=o(" (CLIP model)"),ldo=l(),Un=a("li"),Qle=a("strong"),ido=o("codegen"),ddo=o(" \u2014 "),GB=a("a"),cdo=o("CodeGenTokenizer"),fdo=o(" or "),OB=a("a"),mdo=o("CodeGenTokenizerFast"),gdo=o(" (CodeGen model)"),hdo=l(),Jn=a("li"),Hle=a("strong"),pdo=o("convbert"),_do=o(" \u2014 "),VB=a("a"),udo=o("ConvBertTokenizer"),bdo=o(" or "),XB=a("a"),vdo=o("ConvBertTokenizerFast"),Fdo=o(" (ConvBERT model)"),Tdo=l(),Yn=a("li"),Ule=a("strong"),Mdo=o("cpm"),Edo=o(" \u2014 "),zB=a("a"),Cdo=o("CpmTokenizer"),wdo=o(" or "),WB=a("a"),Ado=o("CpmTokenizerFast"),Ldo=o(" (CPM model)"),ydo=l(),fh=a("li"),Jle=a("strong"),xdo=o("ctrl"),$do=o(" \u2014 "),QB=a("a"),kdo=o("CTRLTokenizer"),Sdo=o(" (CTRL model)"),Rdo=l(),Kn=a("li"),Yle=a("strong"),Pdo=o("data2vec-text"),Bdo=o(" \u2014 "),HB=a("a"),Ido=o("RobertaTokenizer"),Ndo=o(" or "),UB=a("a"),qdo=o("RobertaTokenizerFast"),jdo=o(" (Data2VecText model)"),Ddo=l(),Zn=a("li"),Kle=a("strong"),Gdo=o("deberta"),Odo=o(" \u2014 "),JB=a("a"),Vdo=o("DebertaTokenizer"),Xdo=o(" or "),YB=a("a"),zdo=o("DebertaTokenizerFast"),Wdo=o(" (DeBERTa model)"),Qdo=l(),es=a("li"),Zle=a("strong"),Hdo=o("deberta-v2"),Udo=o(" \u2014 "),KB=a("a"),Jdo=o("DebertaV2Tokenizer"),Ydo=o(" or "),ZB=a("a"),Kdo=o("DebertaV2TokenizerFast"),Zdo=o(" (DeBERTa-v2 model)"),eco=l(),os=a("li"),eie=a("strong"),oco=o("distilbert"),rco=o(" \u2014 "),eI=a("a"),tco=o("DistilBertTokenizer"),aco=o(" or "),oI=a("a"),nco=o("DistilBertTokenizerFast"),sco=o(" (DistilBERT model)"),lco=l(),rs=a("li"),oie=a("strong"),ico=o("dpr"),dco=o(" \u2014 "),rI=a("a"),cco=o("DPRQuestionEncoderTokenizer"),fco=o(" or "),tI=a("a"),mco=o("DPRQuestionEncoderTokenizerFast"),gco=o(" (DPR model)"),hco=l(),ts=a("li"),rie=a("strong"),pco=o("electra"),_co=o(" \u2014 "),aI=a("a"),uco=o("ElectraTokenizer"),bco=o(" or "),nI=a("a"),vco=o("ElectraTokenizerFast"),Fco=o(" (ELECTRA model)"),Tco=l(),mh=a("li"),tie=a("strong"),Mco=o("flaubert"),Eco=o(" \u2014 "),sI=a("a"),Cco=o("FlaubertTokenizer"),wco=o(" (FlauBERT model)"),Aco=l(),as=a("li"),aie=a("strong"),Lco=o("fnet"),yco=o(" \u2014 "),lI=a("a"),xco=o("FNetTokenizer"),$co=o(" or "),iI=a("a"),kco=o("FNetTokenizerFast"),Sco=o(" (FNet model)"),Rco=l(),gh=a("li"),nie=a("strong"),Pco=o("fsmt"),Bco=o(" \u2014 "),dI=a("a"),Ico=o("FSMTTokenizer"),Nco=o(" (FairSeq Machine-Translation model)"),qco=l(),ns=a("li"),sie=a("strong"),jco=o("funnel"),Dco=o(" \u2014 "),cI=a("a"),Gco=o("FunnelTokenizer"),Oco=o(" or "),fI=a("a"),Vco=o("FunnelTokenizerFast"),Xco=o(" (Funnel Transformer model)"),zco=l(),ss=a("li"),lie=a("strong"),Wco=o("gpt2"),Qco=o(" \u2014 "),mI=a("a"),Hco=o("GPT2Tokenizer"),Uco=o(" or "),gI=a("a"),Jco=o("GPT2TokenizerFast"),Yco=o(" (OpenAI GPT-2 model)"),Kco=l(),ls=a("li"),iie=a("strong"),Zco=o("gpt_neo"),efo=o(" \u2014 "),hI=a("a"),ofo=o("GPT2Tokenizer"),rfo=o(" or "),pI=a("a"),tfo=o("GPT2TokenizerFast"),afo=o(" (GPT Neo model)"),nfo=l(),hh=a("li"),die=a("strong"),sfo=o("gpt_neox"),lfo=o(" \u2014 "),_I=a("a"),ifo=o("GPTNeoXTokenizerFast"),dfo=o(" (GPT NeoX model)"),cfo=l(),is=a("li"),cie=a("strong"),ffo=o("gptj"),mfo=o(" \u2014 "),uI=a("a"),gfo=o("GPT2Tokenizer"),hfo=o(" or "),bI=a("a"),pfo=o("GPT2TokenizerFast"),_fo=o(" (GPT-J model)"),ufo=l(),ds=a("li"),fie=a("strong"),bfo=o("groupvit"),vfo=o(" \u2014 "),vI=a("a"),Ffo=o("CLIPTokenizer"),Tfo=o(" or "),FI=a("a"),Mfo=o("CLIPTokenizerFast"),Efo=o(" (GroupViT model)"),Cfo=l(),cs=a("li"),mie=a("strong"),wfo=o("herbert"),Afo=o(" \u2014 "),TI=a("a"),Lfo=o("HerbertTokenizer"),yfo=o(" or "),MI=a("a"),xfo=o("HerbertTokenizerFast"),$fo=o(" (HerBERT model)"),kfo=l(),ph=a("li"),gie=a("strong"),Sfo=o("hubert"),Rfo=o(" \u2014 "),EI=a("a"),Pfo=o("Wav2Vec2CTCTokenizer"),Bfo=o(" (Hubert model)"),Ifo=l(),fs=a("li"),hie=a("strong"),Nfo=o("ibert"),qfo=o(" \u2014 "),CI=a("a"),jfo=o("RobertaTokenizer"),Dfo=o(" or "),wI=a("a"),Gfo=o("RobertaTokenizerFast"),Ofo=o(" (I-BERT model)"),Vfo=l(),ms=a("li"),pie=a("strong"),Xfo=o("layoutlm"),zfo=o(" \u2014 "),AI=a("a"),Wfo=o("LayoutLMTokenizer"),Qfo=o(" or "),LI=a("a"),Hfo=o("LayoutLMTokenizerFast"),Ufo=o(" (LayoutLM model)"),Jfo=l(),gs=a("li"),_ie=a("strong"),Yfo=o("layoutlmv2"),Kfo=o(" \u2014 "),yI=a("a"),Zfo=o("LayoutLMv2Tokenizer"),emo=o(" or "),xI=a("a"),omo=o("LayoutLMv2TokenizerFast"),rmo=o(" (LayoutLMv2 model)"),tmo=l(),hs=a("li"),uie=a("strong"),amo=o("layoutlmv3"),nmo=o(" \u2014 "),$I=a("a"),smo=o("LayoutLMv3Tokenizer"),lmo=o(" or "),kI=a("a"),imo=o("LayoutLMv3TokenizerFast"),dmo=o(" (LayoutLMv3 model)"),cmo=l(),ps=a("li"),bie=a("strong"),fmo=o("layoutxlm"),mmo=o(" \u2014 "),SI=a("a"),gmo=o("LayoutXLMTokenizer"),hmo=o(" or "),RI=a("a"),pmo=o("LayoutXLMTokenizerFast"),_mo=o(" (LayoutXLM model)"),umo=l(),_s=a("li"),vie=a("strong"),bmo=o("led"),vmo=o(" \u2014 "),PI=a("a"),Fmo=o("LEDTokenizer"),Tmo=o(" or "),BI=a("a"),Mmo=o("LEDTokenizerFast"),Emo=o(" (LED model)"),Cmo=l(),us=a("li"),Fie=a("strong"),wmo=o("longformer"),Amo=o(" \u2014 "),II=a("a"),Lmo=o("LongformerTokenizer"),ymo=o(" or "),NI=a("a"),xmo=o("LongformerTokenizerFast"),$mo=o(" (Longformer model)"),kmo=l(),bs=a("li"),Tie=a("strong"),Smo=o("longt5"),Rmo=o(" \u2014 "),qI=a("a"),Pmo=o("T5Tokenizer"),Bmo=o(" or "),jI=a("a"),Imo=o("T5TokenizerFast"),Nmo=o(" (LongT5 model)"),qmo=l(),_h=a("li"),Mie=a("strong"),jmo=o("luke"),Dmo=o(" \u2014 "),DI=a("a"),Gmo=o("LukeTokenizer"),Omo=o(" (LUKE model)"),Vmo=l(),vs=a("li"),Eie=a("strong"),Xmo=o("lxmert"),zmo=o(" \u2014 "),GI=a("a"),Wmo=o("LxmertTokenizer"),Qmo=o(" or "),OI=a("a"),Hmo=o("LxmertTokenizerFast"),Umo=o(" (LXMERT model)"),Jmo=l(),uh=a("li"),Cie=a("strong"),Ymo=o("m2m_100"),Kmo=o(" \u2014 "),VI=a("a"),Zmo=o("M2M100Tokenizer"),ego=o(" (M2M100 model)"),ogo=l(),bh=a("li"),wie=a("strong"),rgo=o("marian"),tgo=o(" \u2014 "),XI=a("a"),ago=o("MarianTokenizer"),ngo=o(" (Marian model)"),sgo=l(),Fs=a("li"),Aie=a("strong"),lgo=o("mbart"),igo=o(" \u2014 "),zI=a("a"),dgo=o("MBartTokenizer"),cgo=o(" or "),WI=a("a"),fgo=o("MBartTokenizerFast"),mgo=o(" (mBART model)"),ggo=l(),Ts=a("li"),Lie=a("strong"),hgo=o("mbart50"),pgo=o(" \u2014 "),QI=a("a"),_go=o("MBart50Tokenizer"),ugo=o(" or "),HI=a("a"),bgo=o("MBart50TokenizerFast"),vgo=o(" (mBART-50 model)"),Fgo=l(),Ms=a("li"),yie=a("strong"),Tgo=o("megatron-bert"),Mgo=o(" \u2014 "),UI=a("a"),Ego=o("BertTokenizer"),Cgo=o(" or "),JI=a("a"),wgo=o("BertTokenizerFast"),Ago=o(" (Megatron-BERT model)"),Lgo=l(),vh=a("li"),xie=a("strong"),ygo=o("mluke"),xgo=o(" \u2014 "),YI=a("a"),$go=o("MLukeTokenizer"),kgo=o(" (mLUKE model)"),Sgo=l(),Es=a("li"),$ie=a("strong"),Rgo=o("mobilebert"),Pgo=o(" \u2014 "),KI=a("a"),Bgo=o("MobileBertTokenizer"),Igo=o(" or "),ZI=a("a"),Ngo=o("MobileBertTokenizerFast"),qgo=o(" (MobileBERT model)"),jgo=l(),Cs=a("li"),kie=a("strong"),Dgo=o("mpnet"),Ggo=o(" \u2014 "),eN=a("a"),Ogo=o("MPNetTokenizer"),Vgo=o(" or "),oN=a("a"),Xgo=o("MPNetTokenizerFast"),zgo=o(" (MPNet model)"),Wgo=l(),ws=a("li"),Sie=a("strong"),Qgo=o("mt5"),Hgo=o(" \u2014 "),rN=a("a"),Ugo=o("MT5Tokenizer"),Jgo=o(" or "),tN=a("a"),Ygo=o("MT5TokenizerFast"),Kgo=o(" (MT5 model)"),Zgo=l(),As=a("li"),Rie=a("strong"),eho=o("mvp"),oho=o(" \u2014 "),aN=a("a"),rho=o("MvpTokenizer"),tho=o(" or "),nN=a("a"),aho=o("MvpTokenizerFast"),nho=o(" (MVP model)"),sho=l(),Ls=a("li"),Pie=a("strong"),lho=o("nezha"),iho=o(" \u2014 "),sN=a("a"),dho=o("BertTokenizer"),cho=o(" or "),lN=a("a"),fho=o("BertTokenizerFast"),mho=o(" (Nezha model)"),gho=l(),ys=a("li"),Bie=a("strong"),hho=o("nllb"),pho=o(" \u2014 "),iN=a("a"),_ho=o("NllbTokenizer"),uho=o(" or "),dN=a("a"),bho=o("NllbTokenizerFast"),vho=o(" (NLLB model)"),Fho=l(),xs=a("li"),Iie=a("strong"),Tho=o("nystromformer"),Mho=o(" \u2014 "),cN=a("a"),Eho=o("AlbertTokenizer"),Cho=o(" or "),fN=a("a"),who=o("AlbertTokenizerFast"),Aho=o(" (Nystr\xF6mformer model)"),Lho=l(),$s=a("li"),Nie=a("strong"),yho=o("openai-gpt"),xho=o(" \u2014 "),mN=a("a"),$ho=o("OpenAIGPTTokenizer"),kho=o(" or "),gN=a("a"),Sho=o("OpenAIGPTTokenizerFast"),Rho=o(" (OpenAI GPT model)"),Pho=l(),Fh=a("li"),qie=a("strong"),Bho=o("opt"),Iho=o(" \u2014 "),hN=a("a"),Nho=o("GPT2Tokenizer"),qho=o(" (OPT model)"),jho=l(),ks=a("li"),jie=a("strong"),Dho=o("owlvit"),Gho=o(" \u2014 "),pN=a("a"),Oho=o("CLIPTokenizer"),Vho=o(" or "),_N=a("a"),Xho=o("CLIPTokenizerFast"),zho=o(" (OWL-ViT model)"),Who=l(),Ss=a("li"),Die=a("strong"),Qho=o("pegasus"),Hho=o(" \u2014 "),uN=a("a"),Uho=o("PegasusTokenizer"),Jho=o(" or "),bN=a("a"),Yho=o("PegasusTokenizerFast"),Kho=o(" (Pegasus model)"),Zho=l(),Th=a("li"),Gie=a("strong"),epo=o("perceiver"),opo=o(" \u2014 "),vN=a("a"),rpo=o("PerceiverTokenizer"),tpo=o(" (Perceiver model)"),apo=l(),Mh=a("li"),Oie=a("strong"),npo=o("phobert"),spo=o(" \u2014 "),FN=a("a"),lpo=o("PhobertTokenizer"),ipo=o(" (PhoBERT model)"),dpo=l(),Eh=a("li"),Vie=a("strong"),cpo=o("plbart"),fpo=o(" \u2014 "),TN=a("a"),mpo=o("PLBartTokenizer"),gpo=o(" (PLBart model)"),hpo=l(),Ch=a("li"),Xie=a("strong"),ppo=o("prophetnet"),_po=o(" \u2014 "),MN=a("a"),upo=o("ProphetNetTokenizer"),bpo=o(" (ProphetNet model)"),vpo=l(),Rs=a("li"),zie=a("strong"),Fpo=o("qdqbert"),Tpo=o(" \u2014 "),EN=a("a"),Mpo=o("BertTokenizer"),Epo=o(" or "),CN=a("a"),Cpo=o("BertTokenizerFast"),wpo=o(" (QDQBert model)"),Apo=l(),wh=a("li"),Wie=a("strong"),Lpo=o("rag"),ypo=o(" \u2014 "),wN=a("a"),xpo=o("RagTokenizer"),$po=o(" (RAG model)"),kpo=l(),Ps=a("li"),Qie=a("strong"),Spo=o("realm"),Rpo=o(" \u2014 "),AN=a("a"),Ppo=o("RealmTokenizer"),Bpo=o(" or "),LN=a("a"),Ipo=o("RealmTokenizerFast"),Npo=o(" (REALM model)"),qpo=l(),Bs=a("li"),Hie=a("strong"),jpo=o("reformer"),Dpo=o(" \u2014 "),yN=a("a"),Gpo=o("ReformerTokenizer"),Opo=o(" or "),xN=a("a"),Vpo=o("ReformerTokenizerFast"),Xpo=o(" (Reformer model)"),zpo=l(),Is=a("li"),Uie=a("strong"),Wpo=o("rembert"),Qpo=o(" \u2014 "),$N=a("a"),Hpo=o("RemBertTokenizer"),Upo=o(" or "),kN=a("a"),Jpo=o("RemBertTokenizerFast"),Ypo=o(" (RemBERT model)"),Kpo=l(),Ns=a("li"),Jie=a("strong"),Zpo=o("retribert"),e_o=o(" \u2014 "),SN=a("a"),o_o=o("RetriBertTokenizer"),r_o=o(" or "),RN=a("a"),t_o=o("RetriBertTokenizerFast"),a_o=o(" (RetriBERT model)"),n_o=l(),qs=a("li"),Yie=a("strong"),s_o=o("roberta"),l_o=o(" \u2014 "),PN=a("a"),i_o=o("RobertaTokenizer"),d_o=o(" or "),BN=a("a"),c_o=o("RobertaTokenizerFast"),f_o=o(" (RoBERTa model)"),m_o=l(),js=a("li"),Kie=a("strong"),g_o=o("roformer"),h_o=o(" \u2014 "),IN=a("a"),p_o=o("RoFormerTokenizer"),__o=o(" or "),NN=a("a"),u_o=o("RoFormerTokenizerFast"),b_o=o(" (RoFormer model)"),v_o=l(),Ah=a("li"),Zie=a("strong"),F_o=o("speech_to_text"),T_o=o(" \u2014 "),qN=a("a"),M_o=o("Speech2TextTokenizer"),E_o=o(" (Speech2Text model)"),C_o=l(),Lh=a("li"),ede=a("strong"),w_o=o("speech_to_text_2"),A_o=o(" \u2014 "),jN=a("a"),L_o=o("Speech2Text2Tokenizer"),y_o=o(" (Speech2Text2 model)"),x_o=l(),Ds=a("li"),ode=a("strong"),$_o=o("splinter"),k_o=o(" \u2014 "),DN=a("a"),S_o=o("SplinterTokenizer"),R_o=o(" or "),GN=a("a"),P_o=o("SplinterTokenizerFast"),B_o=o(" (Splinter model)"),I_o=l(),Gs=a("li"),rde=a("strong"),N_o=o("squeezebert"),q_o=o(" \u2014 "),ON=a("a"),j_o=o("SqueezeBertTokenizer"),D_o=o(" or "),VN=a("a"),G_o=o("SqueezeBertTokenizerFast"),O_o=o(" (SqueezeBERT model)"),V_o=l(),Os=a("li"),tde=a("strong"),X_o=o("t5"),z_o=o(" \u2014 "),XN=a("a"),W_o=o("T5Tokenizer"),Q_o=o(" or "),zN=a("a"),H_o=o("T5TokenizerFast"),U_o=o(" (T5 model)"),J_o=l(),yh=a("li"),ade=a("strong"),Y_o=o("tapas"),K_o=o(" \u2014 "),WN=a("a"),Z_o=o("TapasTokenizer"),euo=o(" (TAPAS model)"),ouo=l(),xh=a("li"),nde=a("strong"),ruo=o("tapex"),tuo=o(" \u2014 "),QN=a("a"),auo=o("TapexTokenizer"),nuo=o(" (TAPEX model)"),suo=l(),$h=a("li"),sde=a("strong"),luo=o("transfo-xl"),iuo=o(" \u2014 "),HN=a("a"),duo=o("TransfoXLTokenizer"),cuo=o(" (Transformer-XL model)"),fuo=l(),Vs=a("li"),lde=a("strong"),muo=o("vilt"),guo=o(" \u2014 "),UN=a("a"),huo=o("BertTokenizer"),puo=o(" or "),JN=a("a"),_uo=o("BertTokenizerFast"),uuo=o(" (ViLT model)"),buo=l(),Xs=a("li"),ide=a("strong"),vuo=o("visual_bert"),Fuo=o(" \u2014 "),YN=a("a"),Tuo=o("BertTokenizer"),Muo=o(" or "),KN=a("a"),Euo=o("BertTokenizerFast"),Cuo=o(" (VisualBERT model)"),wuo=l(),kh=a("li"),dde=a("strong"),Auo=o("wav2vec2"),Luo=o(" \u2014 "),ZN=a("a"),yuo=o("Wav2Vec2CTCTokenizer"),xuo=o(" (Wav2Vec2 model)"),$uo=l(),Sh=a("li"),cde=a("strong"),kuo=o("wav2vec2-conformer"),Suo=o(" \u2014 "),eq=a("a"),Ruo=o("Wav2Vec2CTCTokenizer"),Puo=o(" (Wav2Vec2-Conformer model)"),Buo=l(),Rh=a("li"),fde=a("strong"),Iuo=o("wav2vec2_phoneme"),Nuo=o(" \u2014 "),oq=a("a"),quo=o("Wav2Vec2PhonemeCTCTokenizer"),juo=o(" (Wav2Vec2Phoneme model)"),Duo=l(),zs=a("li"),mde=a("strong"),Guo=o("xglm"),Ouo=o(" \u2014 "),rq=a("a"),Vuo=o("XGLMTokenizer"),Xuo=o(" or "),tq=a("a"),zuo=o("XGLMTokenizerFast"),Wuo=o(" (XGLM model)"),Quo=l(),Ph=a("li"),gde=a("strong"),Huo=o("xlm"),Uuo=o(" \u2014 "),aq=a("a"),Juo=o("XLMTokenizer"),Yuo=o(" (XLM model)"),Kuo=l(),Bh=a("li"),hde=a("strong"),Zuo=o("xlm-prophetnet"),e1o=o(" \u2014 "),nq=a("a"),o1o=o("XLMProphetNetTokenizer"),r1o=o(" (XLM-ProphetNet model)"),t1o=l(),Ws=a("li"),pde=a("strong"),a1o=o("xlm-roberta"),n1o=o(" \u2014 "),sq=a("a"),s1o=o("XLMRobertaTokenizer"),l1o=o(" or "),lq=a("a"),i1o=o("XLMRobertaTokenizerFast"),d1o=o(" (XLM-RoBERTa model)"),c1o=l(),Qs=a("li"),_de=a("strong"),f1o=o("xlm-roberta-xl"),m1o=o(" \u2014 "),iq=a("a"),g1o=o("RobertaTokenizer"),h1o=o(" or "),dq=a("a"),p1o=o("RobertaTokenizerFast"),_1o=o(" (XLM-RoBERTa-XL model)"),u1o=l(),Hs=a("li"),ude=a("strong"),b1o=o("xlnet"),v1o=o(" \u2014 "),cq=a("a"),F1o=o("XLNetTokenizer"),T1o=o(" or "),fq=a("a"),M1o=o("XLNetTokenizerFast"),E1o=o(" (XLNet model)"),C1o=l(),Us=a("li"),bde=a("strong"),w1o=o("yoso"),A1o=o(" \u2014 "),mq=a("a"),L1o=o("AlbertTokenizer"),y1o=o(" or "),gq=a("a"),x1o=o("AlbertTokenizerFast"),$1o=o(" (YOSO model)"),k1o=l(),F(Ih.$$.fragment),S1o=l(),Nh=a("div"),F($y.$$.fragment),R1o=l(),vde=a("p"),P1o=o("Register a new tokenizer in this mapping."),sze=l(),Di=a("h2"),qh=a("a"),Fde=a("span"),F(ky.$$.fragment),B1o=l(),Tde=a("span"),I1o=o("AutoFeatureExtractor"),lze=l(),xo=a("div"),F(Sy.$$.fragment),N1o=l(),Ry=a("p"),q1o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hq=a("a"),j1o=o("AutoFeatureExtractor.from_pretrained()"),D1o=o(" class method."),G1o=l(),Py=a("p"),O1o=o("This class cannot be instantiated directly using "),Mde=a("code"),V1o=o("__init__()"),X1o=o(" (throws an error)."),z1o=l(),Ue=a("div"),F(By.$$.fragment),W1o=l(),Ede=a("p"),Q1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),H1o=l(),Ia=a("p"),U1o=o("The feature extractor class to instantiate is selected based on the "),Cde=a("code"),J1o=o("model_type"),Y1o=o(` property of the config object
(either passed as an argument or loaded from `),wde=a("code"),K1o=o("pretrained_model_name_or_path"),Z1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ade=a("code"),e7o=o("pretrained_model_name_or_path"),o7o=o(":"),r7o=l(),J=a("ul"),jh=a("li"),Lde=a("strong"),t7o=o("beit"),a7o=o(" \u2014 "),pq=a("a"),n7o=o("BeitFeatureExtractor"),s7o=o(" (BEiT model)"),l7o=l(),Dh=a("li"),yde=a("strong"),i7o=o("clip"),d7o=o(" \u2014 "),_q=a("a"),c7o=o("CLIPFeatureExtractor"),f7o=o(" (CLIP model)"),m7o=l(),Gh=a("li"),xde=a("strong"),g7o=o("convnext"),h7o=o(" \u2014 "),uq=a("a"),p7o=o("ConvNextFeatureExtractor"),_7o=o(" (ConvNeXT model)"),u7o=l(),Oh=a("li"),$de=a("strong"),b7o=o("cvt"),v7o=o(" \u2014 "),bq=a("a"),F7o=o("ConvNextFeatureExtractor"),T7o=o(" (CvT model)"),M7o=l(),Vh=a("li"),kde=a("strong"),E7o=o("data2vec-audio"),C7o=o(" \u2014 "),vq=a("a"),w7o=o("Wav2Vec2FeatureExtractor"),A7o=o(" (Data2VecAudio model)"),L7o=l(),Xh=a("li"),Sde=a("strong"),y7o=o("data2vec-vision"),x7o=o(" \u2014 "),Fq=a("a"),$7o=o("BeitFeatureExtractor"),k7o=o(" (Data2VecVision model)"),S7o=l(),zh=a("li"),Rde=a("strong"),R7o=o("deit"),P7o=o(" \u2014 "),Tq=a("a"),B7o=o("DeiTFeatureExtractor"),I7o=o(" (DeiT model)"),N7o=l(),Wh=a("li"),Pde=a("strong"),q7o=o("detr"),j7o=o(" \u2014 "),Mq=a("a"),D7o=o("DetrFeatureExtractor"),G7o=o(" (DETR model)"),O7o=l(),Qh=a("li"),Bde=a("strong"),V7o=o("dpt"),X7o=o(" \u2014 "),Eq=a("a"),z7o=o("DPTFeatureExtractor"),W7o=o(" (DPT model)"),Q7o=l(),Hh=a("li"),Ide=a("strong"),H7o=o("flava"),U7o=o(" \u2014 "),Cq=a("a"),J7o=o("FlavaFeatureExtractor"),Y7o=o(" (FLAVA model)"),K7o=l(),Uh=a("li"),Nde=a("strong"),Z7o=o("glpn"),e2o=o(" \u2014 "),wq=a("a"),o2o=o("GLPNFeatureExtractor"),r2o=o(" (GLPN model)"),t2o=l(),Jh=a("li"),qde=a("strong"),a2o=o("groupvit"),n2o=o(" \u2014 "),Aq=a("a"),s2o=o("CLIPFeatureExtractor"),l2o=o(" (GroupViT model)"),i2o=l(),Yh=a("li"),jde=a("strong"),d2o=o("hubert"),c2o=o(" \u2014 "),Lq=a("a"),f2o=o("Wav2Vec2FeatureExtractor"),m2o=o(" (Hubert model)"),g2o=l(),Kh=a("li"),Dde=a("strong"),h2o=o("imagegpt"),p2o=o(" \u2014 "),yq=a("a"),_2o=o("ImageGPTFeatureExtractor"),u2o=o(" (ImageGPT model)"),b2o=l(),Zh=a("li"),Gde=a("strong"),v2o=o("layoutlmv2"),F2o=o(" \u2014 "),xq=a("a"),T2o=o("LayoutLMv2FeatureExtractor"),M2o=o(" (LayoutLMv2 model)"),E2o=l(),ep=a("li"),Ode=a("strong"),C2o=o("layoutlmv3"),w2o=o(" \u2014 "),$q=a("a"),A2o=o("LayoutLMv3FeatureExtractor"),L2o=o(" (LayoutLMv3 model)"),y2o=l(),op=a("li"),Vde=a("strong"),x2o=o("levit"),$2o=o(" \u2014 "),kq=a("a"),k2o=o("LevitFeatureExtractor"),S2o=o(" (LeViT model)"),R2o=l(),rp=a("li"),Xde=a("strong"),P2o=o("maskformer"),B2o=o(" \u2014 "),Sq=a("a"),I2o=o("MaskFormerFeatureExtractor"),N2o=o(" (MaskFormer model)"),q2o=l(),tp=a("li"),zde=a("strong"),j2o=o("mctct"),D2o=o(" \u2014 "),Rq=a("a"),G2o=o("MCTCTFeatureExtractor"),O2o=o(" (M-CTC-T model)"),V2o=l(),ap=a("li"),Wde=a("strong"),X2o=o("mobilevit"),z2o=o(" \u2014 "),Pq=a("a"),W2o=o("MobileViTFeatureExtractor"),Q2o=o(" (MobileViT model)"),H2o=l(),np=a("li"),Qde=a("strong"),U2o=o("owlvit"),J2o=o(" \u2014 "),Bq=a("a"),Y2o=o("OwlViTFeatureExtractor"),K2o=o(" (OWL-ViT model)"),Z2o=l(),sp=a("li"),Hde=a("strong"),ebo=o("perceiver"),obo=o(" \u2014 "),Iq=a("a"),rbo=o("PerceiverFeatureExtractor"),tbo=o(" (Perceiver model)"),abo=l(),lp=a("li"),Ude=a("strong"),nbo=o("poolformer"),sbo=o(" \u2014 "),Nq=a("a"),lbo=o("PoolFormerFeatureExtractor"),ibo=o(" (PoolFormer model)"),dbo=l(),ip=a("li"),Jde=a("strong"),cbo=o("regnet"),fbo=o(" \u2014 "),qq=a("a"),mbo=o("ConvNextFeatureExtractor"),gbo=o(" (RegNet model)"),hbo=l(),dp=a("li"),Yde=a("strong"),pbo=o("resnet"),_bo=o(" \u2014 "),jq=a("a"),ubo=o("ConvNextFeatureExtractor"),bbo=o(" (ResNet model)"),vbo=l(),cp=a("li"),Kde=a("strong"),Fbo=o("segformer"),Tbo=o(" \u2014 "),Dq=a("a"),Mbo=o("SegformerFeatureExtractor"),Ebo=o(" (SegFormer model)"),Cbo=l(),fp=a("li"),Zde=a("strong"),wbo=o("speech_to_text"),Abo=o(" \u2014 "),Gq=a("a"),Lbo=o("Speech2TextFeatureExtractor"),ybo=o(" (Speech2Text model)"),xbo=l(),mp=a("li"),ece=a("strong"),$bo=o("swin"),kbo=o(" \u2014 "),Oq=a("a"),Sbo=o("ViTFeatureExtractor"),Rbo=o(" (Swin Transformer model)"),Pbo=l(),gp=a("li"),oce=a("strong"),Bbo=o("van"),Ibo=o(" \u2014 "),Vq=a("a"),Nbo=o("ConvNextFeatureExtractor"),qbo=o(" (VAN model)"),jbo=l(),hp=a("li"),rce=a("strong"),Dbo=o("vilt"),Gbo=o(" \u2014 "),Xq=a("a"),Obo=o("ViltFeatureExtractor"),Vbo=o(" (ViLT model)"),Xbo=l(),pp=a("li"),tce=a("strong"),zbo=o("vit"),Wbo=o(" \u2014 "),zq=a("a"),Qbo=o("ViTFeatureExtractor"),Hbo=o(" (ViT model)"),Ubo=l(),_p=a("li"),ace=a("strong"),Jbo=o("vit_mae"),Ybo=o(" \u2014 "),Wq=a("a"),Kbo=o("ViTFeatureExtractor"),Zbo=o(" (ViTMAE model)"),evo=l(),up=a("li"),nce=a("strong"),ovo=o("wav2vec2"),rvo=o(" \u2014 "),Qq=a("a"),tvo=o("Wav2Vec2FeatureExtractor"),avo=o(" (Wav2Vec2 model)"),nvo=l(),bp=a("li"),sce=a("strong"),svo=o("wav2vec2-conformer"),lvo=o(" \u2014 "),Hq=a("a"),ivo=o("Wav2Vec2FeatureExtractor"),dvo=o(" (Wav2Vec2-Conformer model)"),cvo=l(),vp=a("li"),lce=a("strong"),fvo=o("yolos"),mvo=o(" \u2014 "),Uq=a("a"),gvo=o("YolosFeatureExtractor"),hvo=o(" (YOLOS model)"),pvo=l(),F(Fp.$$.fragment),_vo=l(),F(Tp.$$.fragment),uvo=l(),Mp=a("div"),F(Iy.$$.fragment),bvo=l(),ice=a("p"),vvo=o("Register a new feature extractor for this class."),ize=l(),Gi=a("h2"),Ep=a("a"),dce=a("span"),F(Ny.$$.fragment),Fvo=l(),cce=a("span"),Tvo=o("AutoProcessor"),dze=l(),$o=a("div"),F(qy.$$.fragment),Mvo=l(),jy=a("p"),Evo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Jq=a("a"),Cvo=o("AutoProcessor.from_pretrained()"),wvo=o(" class method."),Avo=l(),Dy=a("p"),Lvo=o("This class cannot be instantiated directly using "),fce=a("code"),yvo=o("__init__()"),xvo=o(" (throws an error)."),$vo=l(),Je=a("div"),F(Gy.$$.fragment),kvo=l(),mce=a("p"),Svo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rvo=l(),Oi=a("p"),Pvo=o("The processor class to instantiate is selected based on the "),gce=a("code"),Bvo=o("model_type"),Ivo=o(` property of the config object (either
passed as an argument or loaded from `),hce=a("code"),Nvo=o("pretrained_model_name_or_path"),qvo=o(" if possible):"),jvo=l(),fe=a("ul"),Cp=a("li"),pce=a("strong"),Dvo=o("clip"),Gvo=o(" \u2014 "),Yq=a("a"),Ovo=o("CLIPProcessor"),Vvo=o(" (CLIP model)"),Xvo=l(),wp=a("li"),_ce=a("strong"),zvo=o("flava"),Wvo=o(" \u2014 "),Kq=a("a"),Qvo=o("FlavaProcessor"),Hvo=o(" (FLAVA model)"),Uvo=l(),Ap=a("li"),uce=a("strong"),Jvo=o("groupvit"),Yvo=o(" \u2014 "),Zq=a("a"),Kvo=o("CLIPProcessor"),Zvo=o(" (GroupViT model)"),eFo=l(),Lp=a("li"),bce=a("strong"),oFo=o("layoutlmv2"),rFo=o(" \u2014 "),ej=a("a"),tFo=o("LayoutLMv2Processor"),aFo=o(" (LayoutLMv2 model)"),nFo=l(),yp=a("li"),vce=a("strong"),sFo=o("layoutlmv3"),lFo=o(" \u2014 "),oj=a("a"),iFo=o("LayoutLMv3Processor"),dFo=o(" (LayoutLMv3 model)"),cFo=l(),xp=a("li"),Fce=a("strong"),fFo=o("layoutxlm"),mFo=o(" \u2014 "),rj=a("a"),gFo=o("LayoutXLMProcessor"),hFo=o(" (LayoutXLM model)"),pFo=l(),$p=a("li"),Tce=a("strong"),_Fo=o("owlvit"),uFo=o(" \u2014 "),tj=a("a"),bFo=o("OwlViTProcessor"),vFo=o(" (OWL-ViT model)"),FFo=l(),kp=a("li"),Mce=a("strong"),TFo=o("sew"),MFo=o(" \u2014 "),aj=a("a"),EFo=o("Wav2Vec2Processor"),CFo=o(" (SEW model)"),wFo=l(),Sp=a("li"),Ece=a("strong"),AFo=o("sew-d"),LFo=o(" \u2014 "),nj=a("a"),yFo=o("Wav2Vec2Processor"),xFo=o(" (SEW-D model)"),$Fo=l(),Rp=a("li"),Cce=a("strong"),kFo=o("speech_to_text"),SFo=o(" \u2014 "),sj=a("a"),RFo=o("Speech2TextProcessor"),PFo=o(" (Speech2Text model)"),BFo=l(),Pp=a("li"),wce=a("strong"),IFo=o("speech_to_text_2"),NFo=o(" \u2014 "),lj=a("a"),qFo=o("Speech2Text2Processor"),jFo=o(" (Speech2Text2 model)"),DFo=l(),Bp=a("li"),Ace=a("strong"),GFo=o("trocr"),OFo=o(" \u2014 "),ij=a("a"),VFo=o("TrOCRProcessor"),XFo=o(" (TrOCR model)"),zFo=l(),Ip=a("li"),Lce=a("strong"),WFo=o("unispeech"),QFo=o(" \u2014 "),dj=a("a"),HFo=o("Wav2Vec2Processor"),UFo=o(" (UniSpeech model)"),JFo=l(),Np=a("li"),yce=a("strong"),YFo=o("unispeech-sat"),KFo=o(" \u2014 "),cj=a("a"),ZFo=o("Wav2Vec2Processor"),e6o=o(" (UniSpeechSat model)"),o6o=l(),qp=a("li"),xce=a("strong"),r6o=o("vilt"),t6o=o(" \u2014 "),fj=a("a"),a6o=o("ViltProcessor"),n6o=o(" (ViLT model)"),s6o=l(),jp=a("li"),$ce=a("strong"),l6o=o("vision-text-dual-encoder"),i6o=o(" \u2014 "),mj=a("a"),d6o=o("VisionTextDualEncoderProcessor"),c6o=o(" (VisionTextDualEncoder model)"),f6o=l(),Dp=a("li"),kce=a("strong"),m6o=o("wav2vec2"),g6o=o(" \u2014 "),gj=a("a"),h6o=o("Wav2Vec2Processor"),p6o=o(" (Wav2Vec2 model)"),_6o=l(),Gp=a("li"),Sce=a("strong"),u6o=o("wav2vec2-conformer"),b6o=o(" \u2014 "),hj=a("a"),v6o=o("Wav2Vec2Processor"),F6o=o(" (Wav2Vec2-Conformer model)"),T6o=l(),Op=a("li"),Rce=a("strong"),M6o=o("wavlm"),E6o=o(" \u2014 "),pj=a("a"),C6o=o("Wav2Vec2Processor"),w6o=o(" (WavLM model)"),A6o=l(),F(Vp.$$.fragment),L6o=l(),F(Xp.$$.fragment),y6o=l(),zp=a("div"),F(Oy.$$.fragment),x6o=l(),Pce=a("p"),$6o=o("Register a new processor for this class."),cze=l(),Vi=a("h2"),Wp=a("a"),Bce=a("span"),F(Vy.$$.fragment),k6o=l(),Ice=a("span"),S6o=o("AutoModel"),fze=l(),ko=a("div"),F(Xy.$$.fragment),R6o=l(),Xi=a("p"),P6o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_j=a("a"),B6o=o("from_pretrained()"),I6o=o(" class method or the "),uj=a("a"),N6o=o("from_config()"),q6o=o(` class
method.`),j6o=l(),zy=a("p"),D6o=o("This class cannot be instantiated directly using "),Nce=a("code"),G6o=o("__init__()"),O6o=o(" (throws an error)."),V6o=l(),it=a("div"),F(Wy.$$.fragment),X6o=l(),qce=a("p"),z6o=o("Instantiates one of the base model classes of the library from a configuration."),W6o=l(),zi=a("p"),Q6o=o(`Note:
Loading a model from its configuration file does `),jce=a("strong"),H6o=o("not"),U6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bj=a("a"),J6o=o("from_pretrained()"),Y6o=o(" to load the model weights."),K6o=l(),F(Qp.$$.fragment),Z6o=l(),Ye=a("div"),F(Qy.$$.fragment),eTo=l(),Dce=a("p"),oTo=o("Instantiate one of the base model classes of the library from a pretrained model."),rTo=l(),Na=a("p"),tTo=o("The model class to instantiate is selected based on the "),Gce=a("code"),aTo=o("model_type"),nTo=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),sTo=o("pretrained_model_name_or_path"),lTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),iTo=o("pretrained_model_name_or_path"),dTo=o(":"),cTo=l(),y=a("ul"),Hp=a("li"),Xce=a("strong"),fTo=o("albert"),mTo=o(" \u2014 "),vj=a("a"),gTo=o("AlbertModel"),hTo=o(" (ALBERT model)"),pTo=l(),Up=a("li"),zce=a("strong"),_To=o("bart"),uTo=o(" \u2014 "),Fj=a("a"),bTo=o("BartModel"),vTo=o(" (BART model)"),FTo=l(),Jp=a("li"),Wce=a("strong"),TTo=o("beit"),MTo=o(" \u2014 "),Tj=a("a"),ETo=o("BeitModel"),CTo=o(" (BEiT model)"),wTo=l(),Yp=a("li"),Qce=a("strong"),ATo=o("bert"),LTo=o(" \u2014 "),Mj=a("a"),yTo=o("BertModel"),xTo=o(" (BERT model)"),$To=l(),Kp=a("li"),Hce=a("strong"),kTo=o("bert-generation"),STo=o(" \u2014 "),Ej=a("a"),RTo=o("BertGenerationEncoder"),PTo=o(" (Bert Generation model)"),BTo=l(),Zp=a("li"),Uce=a("strong"),ITo=o("big_bird"),NTo=o(" \u2014 "),Cj=a("a"),qTo=o("BigBirdModel"),jTo=o(" (BigBird model)"),DTo=l(),e_=a("li"),Jce=a("strong"),GTo=o("bigbird_pegasus"),OTo=o(" \u2014 "),wj=a("a"),VTo=o("BigBirdPegasusModel"),XTo=o(" (BigBird-Pegasus model)"),zTo=l(),o_=a("li"),Yce=a("strong"),WTo=o("blenderbot"),QTo=o(" \u2014 "),Aj=a("a"),HTo=o("BlenderbotModel"),UTo=o(" (Blenderbot model)"),JTo=l(),r_=a("li"),Kce=a("strong"),YTo=o("blenderbot-small"),KTo=o(" \u2014 "),Lj=a("a"),ZTo=o("BlenderbotSmallModel"),eMo=o(" (BlenderbotSmall model)"),oMo=l(),t_=a("li"),Zce=a("strong"),rMo=o("bloom"),tMo=o(" \u2014 "),yj=a("a"),aMo=o("BloomModel"),nMo=o(" (BLOOM model)"),sMo=l(),a_=a("li"),efe=a("strong"),lMo=o("camembert"),iMo=o(" \u2014 "),xj=a("a"),dMo=o("CamembertModel"),cMo=o(" (CamemBERT model)"),fMo=l(),n_=a("li"),ofe=a("strong"),mMo=o("canine"),gMo=o(" \u2014 "),$j=a("a"),hMo=o("CanineModel"),pMo=o(" (CANINE model)"),_Mo=l(),s_=a("li"),rfe=a("strong"),uMo=o("clip"),bMo=o(" \u2014 "),kj=a("a"),vMo=o("CLIPModel"),FMo=o(" (CLIP model)"),TMo=l(),l_=a("li"),tfe=a("strong"),MMo=o("codegen"),EMo=o(" \u2014 "),Sj=a("a"),CMo=o("CodeGenModel"),wMo=o(" (CodeGen model)"),AMo=l(),i_=a("li"),afe=a("strong"),LMo=o("convbert"),yMo=o(" \u2014 "),Rj=a("a"),xMo=o("ConvBertModel"),$Mo=o(" (ConvBERT model)"),kMo=l(),d_=a("li"),nfe=a("strong"),SMo=o("convnext"),RMo=o(" \u2014 "),Pj=a("a"),PMo=o("ConvNextModel"),BMo=o(" (ConvNeXT model)"),IMo=l(),c_=a("li"),sfe=a("strong"),NMo=o("ctrl"),qMo=o(" \u2014 "),Bj=a("a"),jMo=o("CTRLModel"),DMo=o(" (CTRL model)"),GMo=l(),f_=a("li"),lfe=a("strong"),OMo=o("cvt"),VMo=o(" \u2014 "),Ij=a("a"),XMo=o("CvtModel"),zMo=o(" (CvT model)"),WMo=l(),m_=a("li"),ife=a("strong"),QMo=o("data2vec-audio"),HMo=o(" \u2014 "),Nj=a("a"),UMo=o("Data2VecAudioModel"),JMo=o(" (Data2VecAudio model)"),YMo=l(),g_=a("li"),dfe=a("strong"),KMo=o("data2vec-text"),ZMo=o(" \u2014 "),qj=a("a"),e4o=o("Data2VecTextModel"),o4o=o(" (Data2VecText model)"),r4o=l(),h_=a("li"),cfe=a("strong"),t4o=o("data2vec-vision"),a4o=o(" \u2014 "),jj=a("a"),n4o=o("Data2VecVisionModel"),s4o=o(" (Data2VecVision model)"),l4o=l(),p_=a("li"),ffe=a("strong"),i4o=o("deberta"),d4o=o(" \u2014 "),Dj=a("a"),c4o=o("DebertaModel"),f4o=o(" (DeBERTa model)"),m4o=l(),__=a("li"),mfe=a("strong"),g4o=o("deberta-v2"),h4o=o(" \u2014 "),Gj=a("a"),p4o=o("DebertaV2Model"),_4o=o(" (DeBERTa-v2 model)"),u4o=l(),u_=a("li"),gfe=a("strong"),b4o=o("decision_transformer"),v4o=o(" \u2014 "),Oj=a("a"),F4o=o("DecisionTransformerModel"),T4o=o(" (Decision Transformer model)"),M4o=l(),b_=a("li"),hfe=a("strong"),E4o=o("deit"),C4o=o(" \u2014 "),Vj=a("a"),w4o=o("DeiTModel"),A4o=o(" (DeiT model)"),L4o=l(),v_=a("li"),pfe=a("strong"),y4o=o("detr"),x4o=o(" \u2014 "),Xj=a("a"),$4o=o("DetrModel"),k4o=o(" (DETR model)"),S4o=l(),F_=a("li"),_fe=a("strong"),R4o=o("distilbert"),P4o=o(" \u2014 "),zj=a("a"),B4o=o("DistilBertModel"),I4o=o(" (DistilBERT model)"),N4o=l(),T_=a("li"),ufe=a("strong"),q4o=o("dpr"),j4o=o(" \u2014 "),Wj=a("a"),D4o=o("DPRQuestionEncoder"),G4o=o(" (DPR model)"),O4o=l(),M_=a("li"),bfe=a("strong"),V4o=o("dpt"),X4o=o(" \u2014 "),Qj=a("a"),z4o=o("DPTModel"),W4o=o(" (DPT model)"),Q4o=l(),E_=a("li"),vfe=a("strong"),H4o=o("electra"),U4o=o(" \u2014 "),Hj=a("a"),J4o=o("ElectraModel"),Y4o=o(" (ELECTRA model)"),K4o=l(),C_=a("li"),Ffe=a("strong"),Z4o=o("flaubert"),eEo=o(" \u2014 "),Uj=a("a"),oEo=o("FlaubertModel"),rEo=o(" (FlauBERT model)"),tEo=l(),w_=a("li"),Tfe=a("strong"),aEo=o("flava"),nEo=o(" \u2014 "),Jj=a("a"),sEo=o("FlavaModel"),lEo=o(" (FLAVA model)"),iEo=l(),A_=a("li"),Mfe=a("strong"),dEo=o("fnet"),cEo=o(" \u2014 "),Yj=a("a"),fEo=o("FNetModel"),mEo=o(" (FNet model)"),gEo=l(),L_=a("li"),Efe=a("strong"),hEo=o("fsmt"),pEo=o(" \u2014 "),Kj=a("a"),_Eo=o("FSMTModel"),uEo=o(" (FairSeq Machine-Translation model)"),bEo=l(),Js=a("li"),Cfe=a("strong"),vEo=o("funnel"),FEo=o(" \u2014 "),Zj=a("a"),TEo=o("FunnelModel"),MEo=o(" or "),eD=a("a"),EEo=o("FunnelBaseModel"),CEo=o(" (Funnel Transformer model)"),wEo=l(),y_=a("li"),wfe=a("strong"),AEo=o("glpn"),LEo=o(" \u2014 "),oD=a("a"),yEo=o("GLPNModel"),xEo=o(" (GLPN model)"),$Eo=l(),x_=a("li"),Afe=a("strong"),kEo=o("gpt2"),SEo=o(" \u2014 "),rD=a("a"),REo=o("GPT2Model"),PEo=o(" (OpenAI GPT-2 model)"),BEo=l(),$_=a("li"),Lfe=a("strong"),IEo=o("gpt_neo"),NEo=o(" \u2014 "),tD=a("a"),qEo=o("GPTNeoModel"),jEo=o(" (GPT Neo model)"),DEo=l(),k_=a("li"),yfe=a("strong"),GEo=o("gpt_neox"),OEo=o(" \u2014 "),aD=a("a"),VEo=o("GPTNeoXModel"),XEo=o(" (GPT NeoX model)"),zEo=l(),S_=a("li"),xfe=a("strong"),WEo=o("gptj"),QEo=o(" \u2014 "),nD=a("a"),HEo=o("GPTJModel"),UEo=o(" (GPT-J model)"),JEo=l(),R_=a("li"),$fe=a("strong"),YEo=o("groupvit"),KEo=o(" \u2014 "),sD=a("a"),ZEo=o("GroupViTModel"),eCo=o(" (GroupViT model)"),oCo=l(),P_=a("li"),kfe=a("strong"),rCo=o("hubert"),tCo=o(" \u2014 "),lD=a("a"),aCo=o("HubertModel"),nCo=o(" (Hubert model)"),sCo=l(),B_=a("li"),Sfe=a("strong"),lCo=o("ibert"),iCo=o(" \u2014 "),iD=a("a"),dCo=o("IBertModel"),cCo=o(" (I-BERT model)"),fCo=l(),I_=a("li"),Rfe=a("strong"),mCo=o("imagegpt"),gCo=o(" \u2014 "),dD=a("a"),hCo=o("ImageGPTModel"),pCo=o(" (ImageGPT model)"),_Co=l(),N_=a("li"),Pfe=a("strong"),uCo=o("layoutlm"),bCo=o(" \u2014 "),cD=a("a"),vCo=o("LayoutLMModel"),FCo=o(" (LayoutLM model)"),TCo=l(),q_=a("li"),Bfe=a("strong"),MCo=o("layoutlmv2"),ECo=o(" \u2014 "),fD=a("a"),CCo=o("LayoutLMv2Model"),wCo=o(" (LayoutLMv2 model)"),ACo=l(),j_=a("li"),Ife=a("strong"),LCo=o("layoutlmv3"),yCo=o(" \u2014 "),mD=a("a"),xCo=o("LayoutLMv3Model"),$Co=o(" (LayoutLMv3 model)"),kCo=l(),D_=a("li"),Nfe=a("strong"),SCo=o("led"),RCo=o(" \u2014 "),gD=a("a"),PCo=o("LEDModel"),BCo=o(" (LED model)"),ICo=l(),G_=a("li"),qfe=a("strong"),NCo=o("levit"),qCo=o(" \u2014 "),hD=a("a"),jCo=o("LevitModel"),DCo=o(" (LeViT model)"),GCo=l(),O_=a("li"),jfe=a("strong"),OCo=o("longformer"),VCo=o(" \u2014 "),pD=a("a"),XCo=o("LongformerModel"),zCo=o(" (Longformer model)"),WCo=l(),V_=a("li"),Dfe=a("strong"),QCo=o("longt5"),HCo=o(" \u2014 "),_D=a("a"),UCo=o("LongT5Model"),JCo=o(" (LongT5 model)"),YCo=l(),X_=a("li"),Gfe=a("strong"),KCo=o("luke"),ZCo=o(" \u2014 "),uD=a("a"),e5o=o("LukeModel"),o5o=o(" (LUKE model)"),r5o=l(),z_=a("li"),Ofe=a("strong"),t5o=o("lxmert"),a5o=o(" \u2014 "),bD=a("a"),n5o=o("LxmertModel"),s5o=o(" (LXMERT model)"),l5o=l(),W_=a("li"),Vfe=a("strong"),i5o=o("m2m_100"),d5o=o(" \u2014 "),vD=a("a"),c5o=o("M2M100Model"),f5o=o(" (M2M100 model)"),m5o=l(),Q_=a("li"),Xfe=a("strong"),g5o=o("marian"),h5o=o(" \u2014 "),FD=a("a"),p5o=o("MarianModel"),_5o=o(" (Marian model)"),u5o=l(),H_=a("li"),zfe=a("strong"),b5o=o("maskformer"),v5o=o(" \u2014 "),TD=a("a"),F5o=o("MaskFormerModel"),T5o=o(" (MaskFormer model)"),M5o=l(),U_=a("li"),Wfe=a("strong"),E5o=o("mbart"),C5o=o(" \u2014 "),MD=a("a"),w5o=o("MBartModel"),A5o=o(" (mBART model)"),L5o=l(),J_=a("li"),Qfe=a("strong"),y5o=o("mctct"),x5o=o(" \u2014 "),ED=a("a"),$5o=o("MCTCTModel"),k5o=o(" (M-CTC-T model)"),S5o=l(),Y_=a("li"),Hfe=a("strong"),R5o=o("megatron-bert"),P5o=o(" \u2014 "),CD=a("a"),B5o=o("MegatronBertModel"),I5o=o(" (Megatron-BERT model)"),N5o=l(),K_=a("li"),Ufe=a("strong"),q5o=o("mobilebert"),j5o=o(" \u2014 "),wD=a("a"),D5o=o("MobileBertModel"),G5o=o(" (MobileBERT model)"),O5o=l(),Z_=a("li"),Jfe=a("strong"),V5o=o("mobilevit"),X5o=o(" \u2014 "),AD=a("a"),z5o=o("MobileViTModel"),W5o=o(" (MobileViT model)"),Q5o=l(),eu=a("li"),Yfe=a("strong"),H5o=o("mpnet"),U5o=o(" \u2014 "),LD=a("a"),J5o=o("MPNetModel"),Y5o=o(" (MPNet model)"),K5o=l(),ou=a("li"),Kfe=a("strong"),Z5o=o("mt5"),e3o=o(" \u2014 "),yD=a("a"),o3o=o("MT5Model"),r3o=o(" (MT5 model)"),t3o=l(),ru=a("li"),Zfe=a("strong"),a3o=o("mvp"),n3o=o(" \u2014 "),xD=a("a"),s3o=o("MvpModel"),l3o=o(" (MVP model)"),i3o=l(),tu=a("li"),eme=a("strong"),d3o=o("nezha"),c3o=o(" \u2014 "),$D=a("a"),f3o=o("NezhaModel"),m3o=o(" (Nezha model)"),g3o=l(),au=a("li"),ome=a("strong"),h3o=o("nllb"),p3o=o(" \u2014 "),kD=a("a"),_3o=o("M2M100Model"),u3o=o(" (NLLB model)"),b3o=l(),nu=a("li"),rme=a("strong"),v3o=o("nystromformer"),F3o=o(" \u2014 "),SD=a("a"),T3o=o("NystromformerModel"),M3o=o(" (Nystr\xF6mformer model)"),E3o=l(),su=a("li"),tme=a("strong"),C3o=o("openai-gpt"),w3o=o(" \u2014 "),RD=a("a"),A3o=o("OpenAIGPTModel"),L3o=o(" (OpenAI GPT model)"),y3o=l(),lu=a("li"),ame=a("strong"),x3o=o("opt"),$3o=o(" \u2014 "),PD=a("a"),k3o=o("OPTModel"),S3o=o(" (OPT model)"),R3o=l(),iu=a("li"),nme=a("strong"),P3o=o("owlvit"),B3o=o(" \u2014 "),BD=a("a"),I3o=o("OwlViTModel"),N3o=o(" (OWL-ViT model)"),q3o=l(),du=a("li"),sme=a("strong"),j3o=o("pegasus"),D3o=o(" \u2014 "),ID=a("a"),G3o=o("PegasusModel"),O3o=o(" (Pegasus model)"),V3o=l(),cu=a("li"),lme=a("strong"),X3o=o("perceiver"),z3o=o(" \u2014 "),ND=a("a"),W3o=o("PerceiverModel"),Q3o=o(" (Perceiver model)"),H3o=l(),fu=a("li"),ime=a("strong"),U3o=o("plbart"),J3o=o(" \u2014 "),qD=a("a"),Y3o=o("PLBartModel"),K3o=o(" (PLBart model)"),Z3o=l(),mu=a("li"),dme=a("strong"),e0o=o("poolformer"),o0o=o(" \u2014 "),jD=a("a"),r0o=o("PoolFormerModel"),t0o=o(" (PoolFormer model)"),a0o=l(),gu=a("li"),cme=a("strong"),n0o=o("prophetnet"),s0o=o(" \u2014 "),DD=a("a"),l0o=o("ProphetNetModel"),i0o=o(" (ProphetNet model)"),d0o=l(),hu=a("li"),fme=a("strong"),c0o=o("qdqbert"),f0o=o(" \u2014 "),GD=a("a"),m0o=o("QDQBertModel"),g0o=o(" (QDQBert model)"),h0o=l(),pu=a("li"),mme=a("strong"),p0o=o("reformer"),_0o=o(" \u2014 "),OD=a("a"),u0o=o("ReformerModel"),b0o=o(" (Reformer model)"),v0o=l(),_u=a("li"),gme=a("strong"),F0o=o("regnet"),T0o=o(" \u2014 "),VD=a("a"),M0o=o("RegNetModel"),E0o=o(" (RegNet model)"),C0o=l(),uu=a("li"),hme=a("strong"),w0o=o("rembert"),A0o=o(" \u2014 "),XD=a("a"),L0o=o("RemBertModel"),y0o=o(" (RemBERT model)"),x0o=l(),bu=a("li"),pme=a("strong"),$0o=o("resnet"),k0o=o(" \u2014 "),zD=a("a"),S0o=o("ResNetModel"),R0o=o(" (ResNet model)"),P0o=l(),vu=a("li"),_me=a("strong"),B0o=o("retribert"),I0o=o(" \u2014 "),WD=a("a"),N0o=o("RetriBertModel"),q0o=o(" (RetriBERT model)"),j0o=l(),Fu=a("li"),ume=a("strong"),D0o=o("roberta"),G0o=o(" \u2014 "),QD=a("a"),O0o=o("RobertaModel"),V0o=o(" (RoBERTa model)"),X0o=l(),Tu=a("li"),bme=a("strong"),z0o=o("roformer"),W0o=o(" \u2014 "),HD=a("a"),Q0o=o("RoFormerModel"),H0o=o(" (RoFormer model)"),U0o=l(),Mu=a("li"),vme=a("strong"),J0o=o("segformer"),Y0o=o(" \u2014 "),UD=a("a"),K0o=o("SegformerModel"),Z0o=o(" (SegFormer model)"),ewo=l(),Eu=a("li"),Fme=a("strong"),owo=o("sew"),rwo=o(" \u2014 "),JD=a("a"),two=o("SEWModel"),awo=o(" (SEW model)"),nwo=l(),Cu=a("li"),Tme=a("strong"),swo=o("sew-d"),lwo=o(" \u2014 "),YD=a("a"),iwo=o("SEWDModel"),dwo=o(" (SEW-D model)"),cwo=l(),wu=a("li"),Mme=a("strong"),fwo=o("speech_to_text"),mwo=o(" \u2014 "),KD=a("a"),gwo=o("Speech2TextModel"),hwo=o(" (Speech2Text model)"),pwo=l(),Au=a("li"),Eme=a("strong"),_wo=o("splinter"),uwo=o(" \u2014 "),ZD=a("a"),bwo=o("SplinterModel"),vwo=o(" (Splinter model)"),Fwo=l(),Lu=a("li"),Cme=a("strong"),Two=o("squeezebert"),Mwo=o(" \u2014 "),eG=a("a"),Ewo=o("SqueezeBertModel"),Cwo=o(" (SqueezeBERT model)"),wwo=l(),yu=a("li"),wme=a("strong"),Awo=o("swin"),Lwo=o(" \u2014 "),oG=a("a"),ywo=o("SwinModel"),xwo=o(" (Swin Transformer model)"),$wo=l(),xu=a("li"),Ame=a("strong"),kwo=o("t5"),Swo=o(" \u2014 "),rG=a("a"),Rwo=o("T5Model"),Pwo=o(" (T5 model)"),Bwo=l(),$u=a("li"),Lme=a("strong"),Iwo=o("tapas"),Nwo=o(" \u2014 "),tG=a("a"),qwo=o("TapasModel"),jwo=o(" (TAPAS model)"),Dwo=l(),ku=a("li"),yme=a("strong"),Gwo=o("trajectory_transformer"),Owo=o(" \u2014 "),aG=a("a"),Vwo=o("TrajectoryTransformerModel"),Xwo=o(" (Trajectory Transformer model)"),zwo=l(),Su=a("li"),xme=a("strong"),Wwo=o("transfo-xl"),Qwo=o(" \u2014 "),nG=a("a"),Hwo=o("TransfoXLModel"),Uwo=o(" (Transformer-XL model)"),Jwo=l(),Ru=a("li"),$me=a("strong"),Ywo=o("unispeech"),Kwo=o(" \u2014 "),sG=a("a"),Zwo=o("UniSpeechModel"),eAo=o(" (UniSpeech model)"),oAo=l(),Pu=a("li"),kme=a("strong"),rAo=o("unispeech-sat"),tAo=o(" \u2014 "),lG=a("a"),aAo=o("UniSpeechSatModel"),nAo=o(" (UniSpeechSat model)"),sAo=l(),Bu=a("li"),Sme=a("strong"),lAo=o("van"),iAo=o(" \u2014 "),iG=a("a"),dAo=o("VanModel"),cAo=o(" (VAN model)"),fAo=l(),Iu=a("li"),Rme=a("strong"),mAo=o("vilt"),gAo=o(" \u2014 "),dG=a("a"),hAo=o("ViltModel"),pAo=o(" (ViLT model)"),_Ao=l(),Nu=a("li"),Pme=a("strong"),uAo=o("vision-text-dual-encoder"),bAo=o(" \u2014 "),cG=a("a"),vAo=o("VisionTextDualEncoderModel"),FAo=o(" (VisionTextDualEncoder model)"),TAo=l(),qu=a("li"),Bme=a("strong"),MAo=o("visual_bert"),EAo=o(" \u2014 "),fG=a("a"),CAo=o("VisualBertModel"),wAo=o(" (VisualBERT model)"),AAo=l(),ju=a("li"),Ime=a("strong"),LAo=o("vit"),yAo=o(" \u2014 "),mG=a("a"),xAo=o("ViTModel"),$Ao=o(" (ViT model)"),kAo=l(),Du=a("li"),Nme=a("strong"),SAo=o("vit_mae"),RAo=o(" \u2014 "),gG=a("a"),PAo=o("ViTMAEModel"),BAo=o(" (ViTMAE model)"),IAo=l(),Gu=a("li"),qme=a("strong"),NAo=o("wav2vec2"),qAo=o(" \u2014 "),hG=a("a"),jAo=o("Wav2Vec2Model"),DAo=o(" (Wav2Vec2 model)"),GAo=l(),Ou=a("li"),jme=a("strong"),OAo=o("wav2vec2-conformer"),VAo=o(" \u2014 "),pG=a("a"),XAo=o("Wav2Vec2ConformerModel"),zAo=o(" (Wav2Vec2-Conformer model)"),WAo=l(),Vu=a("li"),Dme=a("strong"),QAo=o("wavlm"),HAo=o(" \u2014 "),_G=a("a"),UAo=o("WavLMModel"),JAo=o(" (WavLM model)"),YAo=l(),Xu=a("li"),Gme=a("strong"),KAo=o("xglm"),ZAo=o(" \u2014 "),uG=a("a"),eLo=o("XGLMModel"),oLo=o(" (XGLM model)"),rLo=l(),zu=a("li"),Ome=a("strong"),tLo=o("xlm"),aLo=o(" \u2014 "),bG=a("a"),nLo=o("XLMModel"),sLo=o(" (XLM model)"),lLo=l(),Wu=a("li"),Vme=a("strong"),iLo=o("xlm-prophetnet"),dLo=o(" \u2014 "),vG=a("a"),cLo=o("XLMProphetNetModel"),fLo=o(" (XLM-ProphetNet model)"),mLo=l(),Qu=a("li"),Xme=a("strong"),gLo=o("xlm-roberta"),hLo=o(" \u2014 "),FG=a("a"),pLo=o("XLMRobertaModel"),_Lo=o(" (XLM-RoBERTa model)"),uLo=l(),Hu=a("li"),zme=a("strong"),bLo=o("xlm-roberta-xl"),vLo=o(" \u2014 "),TG=a("a"),FLo=o("XLMRobertaXLModel"),TLo=o(" (XLM-RoBERTa-XL model)"),MLo=l(),Uu=a("li"),Wme=a("strong"),ELo=o("xlnet"),CLo=o(" \u2014 "),MG=a("a"),wLo=o("XLNetModel"),ALo=o(" (XLNet model)"),LLo=l(),Ju=a("li"),Qme=a("strong"),yLo=o("yolos"),xLo=o(" \u2014 "),EG=a("a"),$Lo=o("YolosModel"),kLo=o(" (YOLOS model)"),SLo=l(),Yu=a("li"),Hme=a("strong"),RLo=o("yoso"),PLo=o(" \u2014 "),CG=a("a"),BLo=o("YosoModel"),ILo=o(" (YOSO model)"),NLo=l(),Ku=a("p"),qLo=o("The model is set in evaluation mode by default using "),Ume=a("code"),jLo=o("model.eval()"),DLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=a("code"),GLo=o("model.train()"),OLo=l(),F(Zu.$$.fragment),mze=l(),Wi=a("h2"),e1=a("a"),Yme=a("span"),F(Hy.$$.fragment),VLo=l(),Kme=a("span"),XLo=o("AutoModelForPreTraining"),gze=l(),So=a("div"),F(Uy.$$.fragment),zLo=l(),Qi=a("p"),WLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wG=a("a"),QLo=o("from_pretrained()"),HLo=o(" class method or the "),AG=a("a"),ULo=o("from_config()"),JLo=o(` class
method.`),YLo=l(),Jy=a("p"),KLo=o("This class cannot be instantiated directly using "),Zme=a("code"),ZLo=o("__init__()"),eyo=o(" (throws an error)."),oyo=l(),dt=a("div"),F(Yy.$$.fragment),ryo=l(),ege=a("p"),tyo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ayo=l(),Hi=a("p"),nyo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),syo=o("not"),lyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),iyo=o("from_pretrained()"),dyo=o(" to load the model weights."),cyo=l(),F(o1.$$.fragment),fyo=l(),Ke=a("div"),F(Ky.$$.fragment),myo=l(),rge=a("p"),gyo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hyo=l(),qa=a("p"),pyo=o("The model class to instantiate is selected based on the "),tge=a("code"),_yo=o("model_type"),uyo=o(` property of the config object (either
passed as an argument or loaded from `),age=a("code"),byo=o("pretrained_model_name_or_path"),vyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=a("code"),Fyo=o("pretrained_model_name_or_path"),Tyo=o(":"),Myo=l(),G=a("ul"),r1=a("li"),sge=a("strong"),Eyo=o("albert"),Cyo=o(" \u2014 "),yG=a("a"),wyo=o("AlbertForPreTraining"),Ayo=o(" (ALBERT model)"),Lyo=l(),t1=a("li"),lge=a("strong"),yyo=o("bart"),xyo=o(" \u2014 "),xG=a("a"),$yo=o("BartForConditionalGeneration"),kyo=o(" (BART model)"),Syo=l(),a1=a("li"),ige=a("strong"),Ryo=o("bert"),Pyo=o(" \u2014 "),$G=a("a"),Byo=o("BertForPreTraining"),Iyo=o(" (BERT model)"),Nyo=l(),n1=a("li"),dge=a("strong"),qyo=o("big_bird"),jyo=o(" \u2014 "),kG=a("a"),Dyo=o("BigBirdForPreTraining"),Gyo=o(" (BigBird model)"),Oyo=l(),s1=a("li"),cge=a("strong"),Vyo=o("bloom"),Xyo=o(" \u2014 "),SG=a("a"),zyo=o("BloomForCausalLM"),Wyo=o(" (BLOOM model)"),Qyo=l(),l1=a("li"),fge=a("strong"),Hyo=o("camembert"),Uyo=o(" \u2014 "),RG=a("a"),Jyo=o("CamembertForMaskedLM"),Yyo=o(" (CamemBERT model)"),Kyo=l(),i1=a("li"),mge=a("strong"),Zyo=o("ctrl"),e8o=o(" \u2014 "),PG=a("a"),o8o=o("CTRLLMHeadModel"),r8o=o(" (CTRL model)"),t8o=l(),d1=a("li"),gge=a("strong"),a8o=o("data2vec-text"),n8o=o(" \u2014 "),BG=a("a"),s8o=o("Data2VecTextForMaskedLM"),l8o=o(" (Data2VecText model)"),i8o=l(),c1=a("li"),hge=a("strong"),d8o=o("deberta"),c8o=o(" \u2014 "),IG=a("a"),f8o=o("DebertaForMaskedLM"),m8o=o(" (DeBERTa model)"),g8o=l(),f1=a("li"),pge=a("strong"),h8o=o("deberta-v2"),p8o=o(" \u2014 "),NG=a("a"),_8o=o("DebertaV2ForMaskedLM"),u8o=o(" (DeBERTa-v2 model)"),b8o=l(),m1=a("li"),_ge=a("strong"),v8o=o("distilbert"),F8o=o(" \u2014 "),qG=a("a"),T8o=o("DistilBertForMaskedLM"),M8o=o(" (DistilBERT model)"),E8o=l(),g1=a("li"),uge=a("strong"),C8o=o("electra"),w8o=o(" \u2014 "),jG=a("a"),A8o=o("ElectraForPreTraining"),L8o=o(" (ELECTRA model)"),y8o=l(),h1=a("li"),bge=a("strong"),x8o=o("flaubert"),$8o=o(" \u2014 "),DG=a("a"),k8o=o("FlaubertWithLMHeadModel"),S8o=o(" (FlauBERT model)"),R8o=l(),p1=a("li"),vge=a("strong"),P8o=o("flava"),B8o=o(" \u2014 "),GG=a("a"),I8o=o("FlavaForPreTraining"),N8o=o(" (FLAVA model)"),q8o=l(),_1=a("li"),Fge=a("strong"),j8o=o("fnet"),D8o=o(" \u2014 "),OG=a("a"),G8o=o("FNetForPreTraining"),O8o=o(" (FNet model)"),V8o=l(),u1=a("li"),Tge=a("strong"),X8o=o("fsmt"),z8o=o(" \u2014 "),VG=a("a"),W8o=o("FSMTForConditionalGeneration"),Q8o=o(" (FairSeq Machine-Translation model)"),H8o=l(),b1=a("li"),Mge=a("strong"),U8o=o("funnel"),J8o=o(" \u2014 "),XG=a("a"),Y8o=o("FunnelForPreTraining"),K8o=o(" (Funnel Transformer model)"),Z8o=l(),v1=a("li"),Ege=a("strong"),e9o=o("gpt2"),o9o=o(" \u2014 "),zG=a("a"),r9o=o("GPT2LMHeadModel"),t9o=o(" (OpenAI GPT-2 model)"),a9o=l(),F1=a("li"),Cge=a("strong"),n9o=o("ibert"),s9o=o(" \u2014 "),WG=a("a"),l9o=o("IBertForMaskedLM"),i9o=o(" (I-BERT model)"),d9o=l(),T1=a("li"),wge=a("strong"),c9o=o("layoutlm"),f9o=o(" \u2014 "),QG=a("a"),m9o=o("LayoutLMForMaskedLM"),g9o=o(" (LayoutLM model)"),h9o=l(),M1=a("li"),Age=a("strong"),p9o=o("longformer"),_9o=o(" \u2014 "),HG=a("a"),u9o=o("LongformerForMaskedLM"),b9o=o(" (Longformer model)"),v9o=l(),E1=a("li"),Lge=a("strong"),F9o=o("lxmert"),T9o=o(" \u2014 "),UG=a("a"),M9o=o("LxmertForPreTraining"),E9o=o(" (LXMERT model)"),C9o=l(),C1=a("li"),yge=a("strong"),w9o=o("megatron-bert"),A9o=o(" \u2014 "),JG=a("a"),L9o=o("MegatronBertForPreTraining"),y9o=o(" (Megatron-BERT model)"),x9o=l(),w1=a("li"),xge=a("strong"),$9o=o("mobilebert"),k9o=o(" \u2014 "),YG=a("a"),S9o=o("MobileBertForPreTraining"),R9o=o(" (MobileBERT model)"),P9o=l(),A1=a("li"),$ge=a("strong"),B9o=o("mpnet"),I9o=o(" \u2014 "),KG=a("a"),N9o=o("MPNetForMaskedLM"),q9o=o(" (MPNet model)"),j9o=l(),L1=a("li"),kge=a("strong"),D9o=o("mvp"),G9o=o(" \u2014 "),ZG=a("a"),O9o=o("MvpForConditionalGeneration"),V9o=o(" (MVP model)"),X9o=l(),y1=a("li"),Sge=a("strong"),z9o=o("nezha"),W9o=o(" \u2014 "),eO=a("a"),Q9o=o("NezhaForPreTraining"),H9o=o(" (Nezha model)"),U9o=l(),x1=a("li"),Rge=a("strong"),J9o=o("openai-gpt"),Y9o=o(" \u2014 "),oO=a("a"),K9o=o("OpenAIGPTLMHeadModel"),Z9o=o(" (OpenAI GPT model)"),exo=l(),$1=a("li"),Pge=a("strong"),oxo=o("retribert"),rxo=o(" \u2014 "),rO=a("a"),txo=o("RetriBertModel"),axo=o(" (RetriBERT model)"),nxo=l(),k1=a("li"),Bge=a("strong"),sxo=o("roberta"),lxo=o(" \u2014 "),tO=a("a"),ixo=o("RobertaForMaskedLM"),dxo=o(" (RoBERTa model)"),cxo=l(),S1=a("li"),Ige=a("strong"),fxo=o("splinter"),mxo=o(" \u2014 "),aO=a("a"),gxo=o("SplinterForPreTraining"),hxo=o(" (Splinter model)"),pxo=l(),R1=a("li"),Nge=a("strong"),_xo=o("squeezebert"),uxo=o(" \u2014 "),nO=a("a"),bxo=o("SqueezeBertForMaskedLM"),vxo=o(" (SqueezeBERT model)"),Fxo=l(),P1=a("li"),qge=a("strong"),Txo=o("t5"),Mxo=o(" \u2014 "),sO=a("a"),Exo=o("T5ForConditionalGeneration"),Cxo=o(" (T5 model)"),wxo=l(),B1=a("li"),jge=a("strong"),Axo=o("tapas"),Lxo=o(" \u2014 "),lO=a("a"),yxo=o("TapasForMaskedLM"),xxo=o(" (TAPAS model)"),$xo=l(),I1=a("li"),Dge=a("strong"),kxo=o("transfo-xl"),Sxo=o(" \u2014 "),iO=a("a"),Rxo=o("TransfoXLLMHeadModel"),Pxo=o(" (Transformer-XL model)"),Bxo=l(),N1=a("li"),Gge=a("strong"),Ixo=o("unispeech"),Nxo=o(" \u2014 "),dO=a("a"),qxo=o("UniSpeechForPreTraining"),jxo=o(" (UniSpeech model)"),Dxo=l(),q1=a("li"),Oge=a("strong"),Gxo=o("unispeech-sat"),Oxo=o(" \u2014 "),cO=a("a"),Vxo=o("UniSpeechSatForPreTraining"),Xxo=o(" (UniSpeechSat model)"),zxo=l(),j1=a("li"),Vge=a("strong"),Wxo=o("visual_bert"),Qxo=o(" \u2014 "),fO=a("a"),Hxo=o("VisualBertForPreTraining"),Uxo=o(" (VisualBERT model)"),Jxo=l(),D1=a("li"),Xge=a("strong"),Yxo=o("vit_mae"),Kxo=o(" \u2014 "),mO=a("a"),Zxo=o("ViTMAEForPreTraining"),e$o=o(" (ViTMAE model)"),o$o=l(),G1=a("li"),zge=a("strong"),r$o=o("wav2vec2"),t$o=o(" \u2014 "),gO=a("a"),a$o=o("Wav2Vec2ForPreTraining"),n$o=o(" (Wav2Vec2 model)"),s$o=l(),O1=a("li"),Wge=a("strong"),l$o=o("wav2vec2-conformer"),i$o=o(" \u2014 "),hO=a("a"),d$o=o("Wav2Vec2ConformerForPreTraining"),c$o=o(" (Wav2Vec2-Conformer model)"),f$o=l(),V1=a("li"),Qge=a("strong"),m$o=o("xlm"),g$o=o(" \u2014 "),pO=a("a"),h$o=o("XLMWithLMHeadModel"),p$o=o(" (XLM model)"),_$o=l(),X1=a("li"),Hge=a("strong"),u$o=o("xlm-roberta"),b$o=o(" \u2014 "),_O=a("a"),v$o=o("XLMRobertaForMaskedLM"),F$o=o(" (XLM-RoBERTa model)"),T$o=l(),z1=a("li"),Uge=a("strong"),M$o=o("xlm-roberta-xl"),E$o=o(" \u2014 "),uO=a("a"),C$o=o("XLMRobertaXLForMaskedLM"),w$o=o(" (XLM-RoBERTa-XL model)"),A$o=l(),W1=a("li"),Jge=a("strong"),L$o=o("xlnet"),y$o=o(" \u2014 "),bO=a("a"),x$o=o("XLNetLMHeadModel"),$$o=o(" (XLNet model)"),k$o=l(),Q1=a("p"),S$o=o("The model is set in evaluation mode by default using "),Yge=a("code"),R$o=o("model.eval()"),P$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),B$o=o("model.train()"),I$o=l(),F(H1.$$.fragment),hze=l(),Ui=a("h2"),U1=a("a"),Zge=a("span"),F(Zy.$$.fragment),N$o=l(),ehe=a("span"),q$o=o("AutoModelForCausalLM"),pze=l(),Ro=a("div"),F(e8.$$.fragment),j$o=l(),Ji=a("p"),D$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vO=a("a"),G$o=o("from_pretrained()"),O$o=o(" class method or the "),FO=a("a"),V$o=o("from_config()"),X$o=o(` class
method.`),z$o=l(),o8=a("p"),W$o=o("This class cannot be instantiated directly using "),ohe=a("code"),Q$o=o("__init__()"),H$o=o(" (throws an error)."),U$o=l(),ct=a("div"),F(r8.$$.fragment),J$o=l(),rhe=a("p"),Y$o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K$o=l(),Yi=a("p"),Z$o=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),eko=o("not"),oko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),rko=o("from_pretrained()"),tko=o(" to load the model weights."),ako=l(),F(J1.$$.fragment),nko=l(),Ze=a("div"),F(t8.$$.fragment),sko=l(),ahe=a("p"),lko=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iko=l(),ja=a("p"),dko=o("The model class to instantiate is selected based on the "),nhe=a("code"),cko=o("model_type"),fko=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),mko=o("pretrained_model_name_or_path"),gko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),hko=o("pretrained_model_name_or_path"),pko=o(":"),_ko=l(),z=a("ul"),Y1=a("li"),ihe=a("strong"),uko=o("bart"),bko=o(" \u2014 "),MO=a("a"),vko=o("BartForCausalLM"),Fko=o(" (BART model)"),Tko=l(),K1=a("li"),dhe=a("strong"),Mko=o("bert"),Eko=o(" \u2014 "),EO=a("a"),Cko=o("BertLMHeadModel"),wko=o(" (BERT model)"),Ako=l(),Z1=a("li"),che=a("strong"),Lko=o("bert-generation"),yko=o(" \u2014 "),CO=a("a"),xko=o("BertGenerationDecoder"),$ko=o(" (Bert Generation model)"),kko=l(),e7=a("li"),fhe=a("strong"),Sko=o("big_bird"),Rko=o(" \u2014 "),wO=a("a"),Pko=o("BigBirdForCausalLM"),Bko=o(" (BigBird model)"),Iko=l(),o7=a("li"),mhe=a("strong"),Nko=o("bigbird_pegasus"),qko=o(" \u2014 "),AO=a("a"),jko=o("BigBirdPegasusForCausalLM"),Dko=o(" (BigBird-Pegasus model)"),Gko=l(),r7=a("li"),ghe=a("strong"),Oko=o("blenderbot"),Vko=o(" \u2014 "),LO=a("a"),Xko=o("BlenderbotForCausalLM"),zko=o(" (Blenderbot model)"),Wko=l(),t7=a("li"),hhe=a("strong"),Qko=o("blenderbot-small"),Hko=o(" \u2014 "),yO=a("a"),Uko=o("BlenderbotSmallForCausalLM"),Jko=o(" (BlenderbotSmall model)"),Yko=l(),a7=a("li"),phe=a("strong"),Kko=o("bloom"),Zko=o(" \u2014 "),xO=a("a"),eSo=o("BloomForCausalLM"),oSo=o(" (BLOOM model)"),rSo=l(),n7=a("li"),_he=a("strong"),tSo=o("camembert"),aSo=o(" \u2014 "),$O=a("a"),nSo=o("CamembertForCausalLM"),sSo=o(" (CamemBERT model)"),lSo=l(),s7=a("li"),uhe=a("strong"),iSo=o("codegen"),dSo=o(" \u2014 "),kO=a("a"),cSo=o("CodeGenForCausalLM"),fSo=o(" (CodeGen model)"),mSo=l(),l7=a("li"),bhe=a("strong"),gSo=o("ctrl"),hSo=o(" \u2014 "),SO=a("a"),pSo=o("CTRLLMHeadModel"),_So=o(" (CTRL model)"),uSo=l(),i7=a("li"),vhe=a("strong"),bSo=o("data2vec-text"),vSo=o(" \u2014 "),RO=a("a"),FSo=o("Data2VecTextForCausalLM"),TSo=o(" (Data2VecText model)"),MSo=l(),d7=a("li"),Fhe=a("strong"),ESo=o("electra"),CSo=o(" \u2014 "),PO=a("a"),wSo=o("ElectraForCausalLM"),ASo=o(" (ELECTRA model)"),LSo=l(),c7=a("li"),The=a("strong"),ySo=o("gpt2"),xSo=o(" \u2014 "),BO=a("a"),$So=o("GPT2LMHeadModel"),kSo=o(" (OpenAI GPT-2 model)"),SSo=l(),f7=a("li"),Mhe=a("strong"),RSo=o("gpt_neo"),PSo=o(" \u2014 "),IO=a("a"),BSo=o("GPTNeoForCausalLM"),ISo=o(" (GPT Neo model)"),NSo=l(),m7=a("li"),Ehe=a("strong"),qSo=o("gpt_neox"),jSo=o(" \u2014 "),NO=a("a"),DSo=o("GPTNeoXForCausalLM"),GSo=o(" (GPT NeoX model)"),OSo=l(),g7=a("li"),Che=a("strong"),VSo=o("gptj"),XSo=o(" \u2014 "),qO=a("a"),zSo=o("GPTJForCausalLM"),WSo=o(" (GPT-J model)"),QSo=l(),h7=a("li"),whe=a("strong"),HSo=o("marian"),USo=o(" \u2014 "),jO=a("a"),JSo=o("MarianForCausalLM"),YSo=o(" (Marian model)"),KSo=l(),p7=a("li"),Ahe=a("strong"),ZSo=o("mbart"),eRo=o(" \u2014 "),DO=a("a"),oRo=o("MBartForCausalLM"),rRo=o(" (mBART model)"),tRo=l(),_7=a("li"),Lhe=a("strong"),aRo=o("megatron-bert"),nRo=o(" \u2014 "),GO=a("a"),sRo=o("MegatronBertForCausalLM"),lRo=o(" (Megatron-BERT model)"),iRo=l(),u7=a("li"),yhe=a("strong"),dRo=o("mvp"),cRo=o(" \u2014 "),OO=a("a"),fRo=o("MvpForCausalLM"),mRo=o(" (MVP model)"),gRo=l(),b7=a("li"),xhe=a("strong"),hRo=o("openai-gpt"),pRo=o(" \u2014 "),VO=a("a"),_Ro=o("OpenAIGPTLMHeadModel"),uRo=o(" (OpenAI GPT model)"),bRo=l(),v7=a("li"),$he=a("strong"),vRo=o("opt"),FRo=o(" \u2014 "),XO=a("a"),TRo=o("OPTForCausalLM"),MRo=o(" (OPT model)"),ERo=l(),F7=a("li"),khe=a("strong"),CRo=o("pegasus"),wRo=o(" \u2014 "),zO=a("a"),ARo=o("PegasusForCausalLM"),LRo=o(" (Pegasus model)"),yRo=l(),T7=a("li"),She=a("strong"),xRo=o("plbart"),$Ro=o(" \u2014 "),WO=a("a"),kRo=o("PLBartForCausalLM"),SRo=o(" (PLBart model)"),RRo=l(),M7=a("li"),Rhe=a("strong"),PRo=o("prophetnet"),BRo=o(" \u2014 "),QO=a("a"),IRo=o("ProphetNetForCausalLM"),NRo=o(" (ProphetNet model)"),qRo=l(),E7=a("li"),Phe=a("strong"),jRo=o("qdqbert"),DRo=o(" \u2014 "),HO=a("a"),GRo=o("QDQBertLMHeadModel"),ORo=o(" (QDQBert model)"),VRo=l(),C7=a("li"),Bhe=a("strong"),XRo=o("reformer"),zRo=o(" \u2014 "),UO=a("a"),WRo=o("ReformerModelWithLMHead"),QRo=o(" (Reformer model)"),HRo=l(),w7=a("li"),Ihe=a("strong"),URo=o("rembert"),JRo=o(" \u2014 "),JO=a("a"),YRo=o("RemBertForCausalLM"),KRo=o(" (RemBERT model)"),ZRo=l(),A7=a("li"),Nhe=a("strong"),ePo=o("roberta"),oPo=o(" \u2014 "),YO=a("a"),rPo=o("RobertaForCausalLM"),tPo=o(" (RoBERTa model)"),aPo=l(),L7=a("li"),qhe=a("strong"),nPo=o("roformer"),sPo=o(" \u2014 "),KO=a("a"),lPo=o("RoFormerForCausalLM"),iPo=o(" (RoFormer model)"),dPo=l(),y7=a("li"),jhe=a("strong"),cPo=o("speech_to_text_2"),fPo=o(" \u2014 "),ZO=a("a"),mPo=o("Speech2Text2ForCausalLM"),gPo=o(" (Speech2Text2 model)"),hPo=l(),x7=a("li"),Dhe=a("strong"),pPo=o("transfo-xl"),_Po=o(" \u2014 "),eV=a("a"),uPo=o("TransfoXLLMHeadModel"),bPo=o(" (Transformer-XL model)"),vPo=l(),$7=a("li"),Ghe=a("strong"),FPo=o("trocr"),TPo=o(" \u2014 "),oV=a("a"),MPo=o("TrOCRForCausalLM"),EPo=o(" (TrOCR model)"),CPo=l(),k7=a("li"),Ohe=a("strong"),wPo=o("xglm"),APo=o(" \u2014 "),rV=a("a"),LPo=o("XGLMForCausalLM"),yPo=o(" (XGLM model)"),xPo=l(),S7=a("li"),Vhe=a("strong"),$Po=o("xlm"),kPo=o(" \u2014 "),tV=a("a"),SPo=o("XLMWithLMHeadModel"),RPo=o(" (XLM model)"),PPo=l(),R7=a("li"),Xhe=a("strong"),BPo=o("xlm-prophetnet"),IPo=o(" \u2014 "),aV=a("a"),NPo=o("XLMProphetNetForCausalLM"),qPo=o(" (XLM-ProphetNet model)"),jPo=l(),P7=a("li"),zhe=a("strong"),DPo=o("xlm-roberta"),GPo=o(" \u2014 "),nV=a("a"),OPo=o("XLMRobertaForCausalLM"),VPo=o(" (XLM-RoBERTa model)"),XPo=l(),B7=a("li"),Whe=a("strong"),zPo=o("xlm-roberta-xl"),WPo=o(" \u2014 "),sV=a("a"),QPo=o("XLMRobertaXLForCausalLM"),HPo=o(" (XLM-RoBERTa-XL model)"),UPo=l(),I7=a("li"),Qhe=a("strong"),JPo=o("xlnet"),YPo=o(" \u2014 "),lV=a("a"),KPo=o("XLNetLMHeadModel"),ZPo=o(" (XLNet model)"),eBo=l(),N7=a("p"),oBo=o("The model is set in evaluation mode by default using "),Hhe=a("code"),rBo=o("model.eval()"),tBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=a("code"),aBo=o("model.train()"),nBo=l(),F(q7.$$.fragment),_ze=l(),Ki=a("h2"),j7=a("a"),Jhe=a("span"),F(a8.$$.fragment),sBo=l(),Yhe=a("span"),lBo=o("AutoModelForMaskedLM"),uze=l(),Po=a("div"),F(n8.$$.fragment),iBo=l(),Zi=a("p"),dBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iV=a("a"),cBo=o("from_pretrained()"),fBo=o(" class method or the "),dV=a("a"),mBo=o("from_config()"),gBo=o(` class
method.`),hBo=l(),s8=a("p"),pBo=o("This class cannot be instantiated directly using "),Khe=a("code"),_Bo=o("__init__()"),uBo=o(" (throws an error)."),bBo=l(),ft=a("div"),F(l8.$$.fragment),vBo=l(),Zhe=a("p"),FBo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TBo=l(),ed=a("p"),MBo=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),EBo=o("not"),CBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),wBo=o("from_pretrained()"),ABo=o(" to load the model weights."),LBo=l(),F(D7.$$.fragment),yBo=l(),eo=a("div"),F(i8.$$.fragment),xBo=l(),ope=a("p"),$Bo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kBo=l(),Da=a("p"),SBo=o("The model class to instantiate is selected based on the "),rpe=a("code"),RBo=o("model_type"),PBo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),BBo=o("pretrained_model_name_or_path"),IBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),NBo=o("pretrained_model_name_or_path"),qBo=o(":"),jBo=l(),Q=a("ul"),G7=a("li"),npe=a("strong"),DBo=o("albert"),GBo=o(" \u2014 "),fV=a("a"),OBo=o("AlbertForMaskedLM"),VBo=o(" (ALBERT model)"),XBo=l(),O7=a("li"),spe=a("strong"),zBo=o("bart"),WBo=o(" \u2014 "),mV=a("a"),QBo=o("BartForConditionalGeneration"),HBo=o(" (BART model)"),UBo=l(),V7=a("li"),lpe=a("strong"),JBo=o("bert"),YBo=o(" \u2014 "),gV=a("a"),KBo=o("BertForMaskedLM"),ZBo=o(" (BERT model)"),eIo=l(),X7=a("li"),ipe=a("strong"),oIo=o("big_bird"),rIo=o(" \u2014 "),hV=a("a"),tIo=o("BigBirdForMaskedLM"),aIo=o(" (BigBird model)"),nIo=l(),z7=a("li"),dpe=a("strong"),sIo=o("camembert"),lIo=o(" \u2014 "),pV=a("a"),iIo=o("CamembertForMaskedLM"),dIo=o(" (CamemBERT model)"),cIo=l(),W7=a("li"),cpe=a("strong"),fIo=o("convbert"),mIo=o(" \u2014 "),_V=a("a"),gIo=o("ConvBertForMaskedLM"),hIo=o(" (ConvBERT model)"),pIo=l(),Q7=a("li"),fpe=a("strong"),_Io=o("data2vec-text"),uIo=o(" \u2014 "),uV=a("a"),bIo=o("Data2VecTextForMaskedLM"),vIo=o(" (Data2VecText model)"),FIo=l(),H7=a("li"),mpe=a("strong"),TIo=o("deberta"),MIo=o(" \u2014 "),bV=a("a"),EIo=o("DebertaForMaskedLM"),CIo=o(" (DeBERTa model)"),wIo=l(),U7=a("li"),gpe=a("strong"),AIo=o("deberta-v2"),LIo=o(" \u2014 "),vV=a("a"),yIo=o("DebertaV2ForMaskedLM"),xIo=o(" (DeBERTa-v2 model)"),$Io=l(),J7=a("li"),hpe=a("strong"),kIo=o("distilbert"),SIo=o(" \u2014 "),FV=a("a"),RIo=o("DistilBertForMaskedLM"),PIo=o(" (DistilBERT model)"),BIo=l(),Y7=a("li"),ppe=a("strong"),IIo=o("electra"),NIo=o(" \u2014 "),TV=a("a"),qIo=o("ElectraForMaskedLM"),jIo=o(" (ELECTRA model)"),DIo=l(),K7=a("li"),_pe=a("strong"),GIo=o("flaubert"),OIo=o(" \u2014 "),MV=a("a"),VIo=o("FlaubertWithLMHeadModel"),XIo=o(" (FlauBERT model)"),zIo=l(),Z7=a("li"),upe=a("strong"),WIo=o("fnet"),QIo=o(" \u2014 "),EV=a("a"),HIo=o("FNetForMaskedLM"),UIo=o(" (FNet model)"),JIo=l(),e2=a("li"),bpe=a("strong"),YIo=o("funnel"),KIo=o(" \u2014 "),CV=a("a"),ZIo=o("FunnelForMaskedLM"),eNo=o(" (Funnel Transformer model)"),oNo=l(),o2=a("li"),vpe=a("strong"),rNo=o("ibert"),tNo=o(" \u2014 "),wV=a("a"),aNo=o("IBertForMaskedLM"),nNo=o(" (I-BERT model)"),sNo=l(),r2=a("li"),Fpe=a("strong"),lNo=o("layoutlm"),iNo=o(" \u2014 "),AV=a("a"),dNo=o("LayoutLMForMaskedLM"),cNo=o(" (LayoutLM model)"),fNo=l(),t2=a("li"),Tpe=a("strong"),mNo=o("longformer"),gNo=o(" \u2014 "),LV=a("a"),hNo=o("LongformerForMaskedLM"),pNo=o(" (Longformer model)"),_No=l(),a2=a("li"),Mpe=a("strong"),uNo=o("luke"),bNo=o(" \u2014 "),yV=a("a"),vNo=o("LukeForMaskedLM"),FNo=o(" (LUKE model)"),TNo=l(),n2=a("li"),Epe=a("strong"),MNo=o("mbart"),ENo=o(" \u2014 "),xV=a("a"),CNo=o("MBartForConditionalGeneration"),wNo=o(" (mBART model)"),ANo=l(),s2=a("li"),Cpe=a("strong"),LNo=o("megatron-bert"),yNo=o(" \u2014 "),$V=a("a"),xNo=o("MegatronBertForMaskedLM"),$No=o(" (Megatron-BERT model)"),kNo=l(),l2=a("li"),wpe=a("strong"),SNo=o("mobilebert"),RNo=o(" \u2014 "),kV=a("a"),PNo=o("MobileBertForMaskedLM"),BNo=o(" (MobileBERT model)"),INo=l(),i2=a("li"),Ape=a("strong"),NNo=o("mpnet"),qNo=o(" \u2014 "),SV=a("a"),jNo=o("MPNetForMaskedLM"),DNo=o(" (MPNet model)"),GNo=l(),d2=a("li"),Lpe=a("strong"),ONo=o("mvp"),VNo=o(" \u2014 "),RV=a("a"),XNo=o("MvpForConditionalGeneration"),zNo=o(" (MVP model)"),WNo=l(),c2=a("li"),ype=a("strong"),QNo=o("nezha"),HNo=o(" \u2014 "),PV=a("a"),UNo=o("NezhaForMaskedLM"),JNo=o(" (Nezha model)"),YNo=l(),f2=a("li"),xpe=a("strong"),KNo=o("nystromformer"),ZNo=o(" \u2014 "),BV=a("a"),eqo=o("NystromformerForMaskedLM"),oqo=o(" (Nystr\xF6mformer model)"),rqo=l(),m2=a("li"),$pe=a("strong"),tqo=o("perceiver"),aqo=o(" \u2014 "),IV=a("a"),nqo=o("PerceiverForMaskedLM"),sqo=o(" (Perceiver model)"),lqo=l(),g2=a("li"),kpe=a("strong"),iqo=o("qdqbert"),dqo=o(" \u2014 "),NV=a("a"),cqo=o("QDQBertForMaskedLM"),fqo=o(" (QDQBert model)"),mqo=l(),h2=a("li"),Spe=a("strong"),gqo=o("reformer"),hqo=o(" \u2014 "),qV=a("a"),pqo=o("ReformerForMaskedLM"),_qo=o(" (Reformer model)"),uqo=l(),p2=a("li"),Rpe=a("strong"),bqo=o("rembert"),vqo=o(" \u2014 "),jV=a("a"),Fqo=o("RemBertForMaskedLM"),Tqo=o(" (RemBERT model)"),Mqo=l(),_2=a("li"),Ppe=a("strong"),Eqo=o("roberta"),Cqo=o(" \u2014 "),DV=a("a"),wqo=o("RobertaForMaskedLM"),Aqo=o(" (RoBERTa model)"),Lqo=l(),u2=a("li"),Bpe=a("strong"),yqo=o("roformer"),xqo=o(" \u2014 "),GV=a("a"),$qo=o("RoFormerForMaskedLM"),kqo=o(" (RoFormer model)"),Sqo=l(),b2=a("li"),Ipe=a("strong"),Rqo=o("squeezebert"),Pqo=o(" \u2014 "),OV=a("a"),Bqo=o("SqueezeBertForMaskedLM"),Iqo=o(" (SqueezeBERT model)"),Nqo=l(),v2=a("li"),Npe=a("strong"),qqo=o("tapas"),jqo=o(" \u2014 "),VV=a("a"),Dqo=o("TapasForMaskedLM"),Gqo=o(" (TAPAS model)"),Oqo=l(),F2=a("li"),qpe=a("strong"),Vqo=o("wav2vec2"),Xqo=o(" \u2014 "),jpe=a("code"),zqo=o("Wav2Vec2ForMaskedLM"),Wqo=o(" (Wav2Vec2 model)"),Qqo=l(),T2=a("li"),Dpe=a("strong"),Hqo=o("xlm"),Uqo=o(" \u2014 "),XV=a("a"),Jqo=o("XLMWithLMHeadModel"),Yqo=o(" (XLM model)"),Kqo=l(),M2=a("li"),Gpe=a("strong"),Zqo=o("xlm-roberta"),ejo=o(" \u2014 "),zV=a("a"),ojo=o("XLMRobertaForMaskedLM"),rjo=o(" (XLM-RoBERTa model)"),tjo=l(),E2=a("li"),Ope=a("strong"),ajo=o("xlm-roberta-xl"),njo=o(" \u2014 "),WV=a("a"),sjo=o("XLMRobertaXLForMaskedLM"),ljo=o(" (XLM-RoBERTa-XL model)"),ijo=l(),C2=a("li"),Vpe=a("strong"),djo=o("yoso"),cjo=o(" \u2014 "),QV=a("a"),fjo=o("YosoForMaskedLM"),mjo=o(" (YOSO model)"),gjo=l(),w2=a("p"),hjo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),pjo=o("model.eval()"),_jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),ujo=o("model.train()"),bjo=l(),F(A2.$$.fragment),bze=l(),od=a("h2"),L2=a("a"),Wpe=a("span"),F(d8.$$.fragment),vjo=l(),Qpe=a("span"),Fjo=o("AutoModelForSeq2SeqLM"),vze=l(),Bo=a("div"),F(c8.$$.fragment),Tjo=l(),rd=a("p"),Mjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HV=a("a"),Ejo=o("from_pretrained()"),Cjo=o(" class method or the "),UV=a("a"),wjo=o("from_config()"),Ajo=o(` class
method.`),Ljo=l(),f8=a("p"),yjo=o("This class cannot be instantiated directly using "),Hpe=a("code"),xjo=o("__init__()"),$jo=o(" (throws an error)."),kjo=l(),mt=a("div"),F(m8.$$.fragment),Sjo=l(),Upe=a("p"),Rjo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pjo=l(),td=a("p"),Bjo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),Ijo=o("not"),Njo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),qjo=o("from_pretrained()"),jjo=o(" to load the model weights."),Djo=l(),F(y2.$$.fragment),Gjo=l(),oo=a("div"),F(g8.$$.fragment),Ojo=l(),Ype=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xjo=l(),Ga=a("p"),zjo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),Wjo=o("model_type"),Qjo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),Hjo=o("pretrained_model_name_or_path"),Ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(":"),Kjo=l(),me=a("ul"),x2=a("li"),o_e=a("strong"),Zjo=o("bart"),eDo=o(" \u2014 "),YV=a("a"),oDo=o("BartForConditionalGeneration"),rDo=o(" (BART model)"),tDo=l(),$2=a("li"),r_e=a("strong"),aDo=o("bigbird_pegasus"),nDo=o(" \u2014 "),KV=a("a"),sDo=o("BigBirdPegasusForConditionalGeneration"),lDo=o(" (BigBird-Pegasus model)"),iDo=l(),k2=a("li"),t_e=a("strong"),dDo=o("blenderbot"),cDo=o(" \u2014 "),ZV=a("a"),fDo=o("BlenderbotForConditionalGeneration"),mDo=o(" (Blenderbot model)"),gDo=l(),S2=a("li"),a_e=a("strong"),hDo=o("blenderbot-small"),pDo=o(" \u2014 "),eX=a("a"),_Do=o("BlenderbotSmallForConditionalGeneration"),uDo=o(" (BlenderbotSmall model)"),bDo=l(),R2=a("li"),n_e=a("strong"),vDo=o("encoder-decoder"),FDo=o(" \u2014 "),oX=a("a"),TDo=o("EncoderDecoderModel"),MDo=o(" (Encoder decoder model)"),EDo=l(),P2=a("li"),s_e=a("strong"),CDo=o("fsmt"),wDo=o(" \u2014 "),rX=a("a"),ADo=o("FSMTForConditionalGeneration"),LDo=o(" (FairSeq Machine-Translation model)"),yDo=l(),B2=a("li"),l_e=a("strong"),xDo=o("led"),$Do=o(" \u2014 "),tX=a("a"),kDo=o("LEDForConditionalGeneration"),SDo=o(" (LED model)"),RDo=l(),I2=a("li"),i_e=a("strong"),PDo=o("longt5"),BDo=o(" \u2014 "),aX=a("a"),IDo=o("LongT5ForConditionalGeneration"),NDo=o(" (LongT5 model)"),qDo=l(),N2=a("li"),d_e=a("strong"),jDo=o("m2m_100"),DDo=o(" \u2014 "),nX=a("a"),GDo=o("M2M100ForConditionalGeneration"),ODo=o(" (M2M100 model)"),VDo=l(),q2=a("li"),c_e=a("strong"),XDo=o("marian"),zDo=o(" \u2014 "),sX=a("a"),WDo=o("MarianMTModel"),QDo=o(" (Marian model)"),HDo=l(),j2=a("li"),f_e=a("strong"),UDo=o("mbart"),JDo=o(" \u2014 "),lX=a("a"),YDo=o("MBartForConditionalGeneration"),KDo=o(" (mBART model)"),ZDo=l(),D2=a("li"),m_e=a("strong"),eGo=o("mt5"),oGo=o(" \u2014 "),iX=a("a"),rGo=o("MT5ForConditionalGeneration"),tGo=o(" (MT5 model)"),aGo=l(),G2=a("li"),g_e=a("strong"),nGo=o("mvp"),sGo=o(" \u2014 "),dX=a("a"),lGo=o("MvpForConditionalGeneration"),iGo=o(" (MVP model)"),dGo=l(),O2=a("li"),h_e=a("strong"),cGo=o("nllb"),fGo=o(" \u2014 "),cX=a("a"),mGo=o("M2M100ForConditionalGeneration"),gGo=o(" (NLLB model)"),hGo=l(),V2=a("li"),p_e=a("strong"),pGo=o("pegasus"),_Go=o(" \u2014 "),fX=a("a"),uGo=o("PegasusForConditionalGeneration"),bGo=o(" (Pegasus model)"),vGo=l(),X2=a("li"),__e=a("strong"),FGo=o("plbart"),TGo=o(" \u2014 "),mX=a("a"),MGo=o("PLBartForConditionalGeneration"),EGo=o(" (PLBart model)"),CGo=l(),z2=a("li"),u_e=a("strong"),wGo=o("prophetnet"),AGo=o(" \u2014 "),gX=a("a"),LGo=o("ProphetNetForConditionalGeneration"),yGo=o(" (ProphetNet model)"),xGo=l(),W2=a("li"),b_e=a("strong"),$Go=o("t5"),kGo=o(" \u2014 "),hX=a("a"),SGo=o("T5ForConditionalGeneration"),RGo=o(" (T5 model)"),PGo=l(),Q2=a("li"),v_e=a("strong"),BGo=o("xlm-prophetnet"),IGo=o(" \u2014 "),pX=a("a"),NGo=o("XLMProphetNetForConditionalGeneration"),qGo=o(" (XLM-ProphetNet model)"),jGo=l(),H2=a("p"),DGo=o("The model is set in evaluation mode by default using "),F_e=a("code"),GGo=o("model.eval()"),OGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),VGo=o("model.train()"),XGo=l(),F(U2.$$.fragment),Fze=l(),ad=a("h2"),J2=a("a"),M_e=a("span"),F(h8.$$.fragment),zGo=l(),E_e=a("span"),WGo=o("AutoModelForSequenceClassification"),Tze=l(),Io=a("div"),F(p8.$$.fragment),QGo=l(),nd=a("p"),HGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_X=a("a"),UGo=o("from_pretrained()"),JGo=o(" class method or the "),uX=a("a"),YGo=o("from_config()"),KGo=o(` class
method.`),ZGo=l(),_8=a("p"),eOo=o("This class cannot be instantiated directly using "),C_e=a("code"),oOo=o("__init__()"),rOo=o(" (throws an error)."),tOo=l(),gt=a("div"),F(u8.$$.fragment),aOo=l(),w_e=a("p"),nOo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sOo=l(),sd=a("p"),lOo=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),iOo=o("not"),dOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),cOo=o("from_pretrained()"),fOo=o(" to load the model weights."),mOo=l(),F(Y2.$$.fragment),gOo=l(),ro=a("div"),F(b8.$$.fragment),hOo=l(),L_e=a("p"),pOo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Oo=l(),Oa=a("p"),uOo=o("The model class to instantiate is selected based on the "),y_e=a("code"),bOo=o("model_type"),vOo=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),FOo=o("pretrained_model_name_or_path"),TOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),MOo=o("pretrained_model_name_or_path"),EOo=o(":"),COo=l(),P=a("ul"),K2=a("li"),k_e=a("strong"),wOo=o("albert"),AOo=o(" \u2014 "),vX=a("a"),LOo=o("AlbertForSequenceClassification"),yOo=o(" (ALBERT model)"),xOo=l(),Z2=a("li"),S_e=a("strong"),$Oo=o("bart"),kOo=o(" \u2014 "),FX=a("a"),SOo=o("BartForSequenceClassification"),ROo=o(" (BART model)"),POo=l(),eb=a("li"),R_e=a("strong"),BOo=o("bert"),IOo=o(" \u2014 "),TX=a("a"),NOo=o("BertForSequenceClassification"),qOo=o(" (BERT model)"),jOo=l(),ob=a("li"),P_e=a("strong"),DOo=o("big_bird"),GOo=o(" \u2014 "),MX=a("a"),OOo=o("BigBirdForSequenceClassification"),VOo=o(" (BigBird model)"),XOo=l(),rb=a("li"),B_e=a("strong"),zOo=o("bigbird_pegasus"),WOo=o(" \u2014 "),EX=a("a"),QOo=o("BigBirdPegasusForSequenceClassification"),HOo=o(" (BigBird-Pegasus model)"),UOo=l(),tb=a("li"),I_e=a("strong"),JOo=o("bloom"),YOo=o(" \u2014 "),CX=a("a"),KOo=o("BloomForSequenceClassification"),ZOo=o(" (BLOOM model)"),eVo=l(),ab=a("li"),N_e=a("strong"),oVo=o("camembert"),rVo=o(" \u2014 "),wX=a("a"),tVo=o("CamembertForSequenceClassification"),aVo=o(" (CamemBERT model)"),nVo=l(),nb=a("li"),q_e=a("strong"),sVo=o("canine"),lVo=o(" \u2014 "),AX=a("a"),iVo=o("CanineForSequenceClassification"),dVo=o(" (CANINE model)"),cVo=l(),sb=a("li"),j_e=a("strong"),fVo=o("convbert"),mVo=o(" \u2014 "),LX=a("a"),gVo=o("ConvBertForSequenceClassification"),hVo=o(" (ConvBERT model)"),pVo=l(),lb=a("li"),D_e=a("strong"),_Vo=o("ctrl"),uVo=o(" \u2014 "),yX=a("a"),bVo=o("CTRLForSequenceClassification"),vVo=o(" (CTRL model)"),FVo=l(),ib=a("li"),G_e=a("strong"),TVo=o("data2vec-text"),MVo=o(" \u2014 "),xX=a("a"),EVo=o("Data2VecTextForSequenceClassification"),CVo=o(" (Data2VecText model)"),wVo=l(),db=a("li"),O_e=a("strong"),AVo=o("deberta"),LVo=o(" \u2014 "),$X=a("a"),yVo=o("DebertaForSequenceClassification"),xVo=o(" (DeBERTa model)"),$Vo=l(),cb=a("li"),V_e=a("strong"),kVo=o("deberta-v2"),SVo=o(" \u2014 "),kX=a("a"),RVo=o("DebertaV2ForSequenceClassification"),PVo=o(" (DeBERTa-v2 model)"),BVo=l(),fb=a("li"),X_e=a("strong"),IVo=o("distilbert"),NVo=o(" \u2014 "),SX=a("a"),qVo=o("DistilBertForSequenceClassification"),jVo=o(" (DistilBERT model)"),DVo=l(),mb=a("li"),z_e=a("strong"),GVo=o("electra"),OVo=o(" \u2014 "),RX=a("a"),VVo=o("ElectraForSequenceClassification"),XVo=o(" (ELECTRA model)"),zVo=l(),gb=a("li"),W_e=a("strong"),WVo=o("flaubert"),QVo=o(" \u2014 "),PX=a("a"),HVo=o("FlaubertForSequenceClassification"),UVo=o(" (FlauBERT model)"),JVo=l(),hb=a("li"),Q_e=a("strong"),YVo=o("fnet"),KVo=o(" \u2014 "),BX=a("a"),ZVo=o("FNetForSequenceClassification"),eXo=o(" (FNet model)"),oXo=l(),pb=a("li"),H_e=a("strong"),rXo=o("funnel"),tXo=o(" \u2014 "),IX=a("a"),aXo=o("FunnelForSequenceClassification"),nXo=o(" (Funnel Transformer model)"),sXo=l(),_b=a("li"),U_e=a("strong"),lXo=o("gpt2"),iXo=o(" \u2014 "),NX=a("a"),dXo=o("GPT2ForSequenceClassification"),cXo=o(" (OpenAI GPT-2 model)"),fXo=l(),ub=a("li"),J_e=a("strong"),mXo=o("gpt_neo"),gXo=o(" \u2014 "),qX=a("a"),hXo=o("GPTNeoForSequenceClassification"),pXo=o(" (GPT Neo model)"),_Xo=l(),bb=a("li"),Y_e=a("strong"),uXo=o("gptj"),bXo=o(" \u2014 "),jX=a("a"),vXo=o("GPTJForSequenceClassification"),FXo=o(" (GPT-J model)"),TXo=l(),vb=a("li"),K_e=a("strong"),MXo=o("ibert"),EXo=o(" \u2014 "),DX=a("a"),CXo=o("IBertForSequenceClassification"),wXo=o(" (I-BERT model)"),AXo=l(),Fb=a("li"),Z_e=a("strong"),LXo=o("layoutlm"),yXo=o(" \u2014 "),GX=a("a"),xXo=o("LayoutLMForSequenceClassification"),$Xo=o(" (LayoutLM model)"),kXo=l(),Tb=a("li"),eue=a("strong"),SXo=o("layoutlmv2"),RXo=o(" \u2014 "),OX=a("a"),PXo=o("LayoutLMv2ForSequenceClassification"),BXo=o(" (LayoutLMv2 model)"),IXo=l(),Mb=a("li"),oue=a("strong"),NXo=o("layoutlmv3"),qXo=o(" \u2014 "),VX=a("a"),jXo=o("LayoutLMv3ForSequenceClassification"),DXo=o(" (LayoutLMv3 model)"),GXo=l(),Eb=a("li"),rue=a("strong"),OXo=o("led"),VXo=o(" \u2014 "),XX=a("a"),XXo=o("LEDForSequenceClassification"),zXo=o(" (LED model)"),WXo=l(),Cb=a("li"),tue=a("strong"),QXo=o("longformer"),HXo=o(" \u2014 "),zX=a("a"),UXo=o("LongformerForSequenceClassification"),JXo=o(" (Longformer model)"),YXo=l(),wb=a("li"),aue=a("strong"),KXo=o("mbart"),ZXo=o(" \u2014 "),WX=a("a"),ezo=o("MBartForSequenceClassification"),ozo=o(" (mBART model)"),rzo=l(),Ab=a("li"),nue=a("strong"),tzo=o("mctct"),azo=o(" \u2014 "),QX=a("a"),nzo=o("MCTCTForSequenceClassification"),szo=o(" (M-CTC-T model)"),lzo=l(),Lb=a("li"),sue=a("strong"),izo=o("megatron-bert"),dzo=o(" \u2014 "),HX=a("a"),czo=o("MegatronBertForSequenceClassification"),fzo=o(" (Megatron-BERT model)"),mzo=l(),yb=a("li"),lue=a("strong"),gzo=o("mobilebert"),hzo=o(" \u2014 "),UX=a("a"),pzo=o("MobileBertForSequenceClassification"),_zo=o(" (MobileBERT model)"),uzo=l(),xb=a("li"),iue=a("strong"),bzo=o("mpnet"),vzo=o(" \u2014 "),JX=a("a"),Fzo=o("MPNetForSequenceClassification"),Tzo=o(" (MPNet model)"),Mzo=l(),$b=a("li"),due=a("strong"),Ezo=o("mvp"),Czo=o(" \u2014 "),YX=a("a"),wzo=o("MvpForSequenceClassification"),Azo=o(" (MVP model)"),Lzo=l(),kb=a("li"),cue=a("strong"),yzo=o("nezha"),xzo=o(" \u2014 "),KX=a("a"),$zo=o("NezhaForSequenceClassification"),kzo=o(" (Nezha model)"),Szo=l(),Sb=a("li"),fue=a("strong"),Rzo=o("nystromformer"),Pzo=o(" \u2014 "),ZX=a("a"),Bzo=o("NystromformerForSequenceClassification"),Izo=o(" (Nystr\xF6mformer model)"),Nzo=l(),Rb=a("li"),mue=a("strong"),qzo=o("openai-gpt"),jzo=o(" \u2014 "),ez=a("a"),Dzo=o("OpenAIGPTForSequenceClassification"),Gzo=o(" (OpenAI GPT model)"),Ozo=l(),Pb=a("li"),gue=a("strong"),Vzo=o("opt"),Xzo=o(" \u2014 "),oz=a("a"),zzo=o("OPTForSequenceClassification"),Wzo=o(" (OPT model)"),Qzo=l(),Bb=a("li"),hue=a("strong"),Hzo=o("perceiver"),Uzo=o(" \u2014 "),rz=a("a"),Jzo=o("PerceiverForSequenceClassification"),Yzo=o(" (Perceiver model)"),Kzo=l(),Ib=a("li"),pue=a("strong"),Zzo=o("plbart"),eWo=o(" \u2014 "),tz=a("a"),oWo=o("PLBartForSequenceClassification"),rWo=o(" (PLBart model)"),tWo=l(),Nb=a("li"),_ue=a("strong"),aWo=o("qdqbert"),nWo=o(" \u2014 "),az=a("a"),sWo=o("QDQBertForSequenceClassification"),lWo=o(" (QDQBert model)"),iWo=l(),qb=a("li"),uue=a("strong"),dWo=o("reformer"),cWo=o(" \u2014 "),nz=a("a"),fWo=o("ReformerForSequenceClassification"),mWo=o(" (Reformer model)"),gWo=l(),jb=a("li"),bue=a("strong"),hWo=o("rembert"),pWo=o(" \u2014 "),sz=a("a"),_Wo=o("RemBertForSequenceClassification"),uWo=o(" (RemBERT model)"),bWo=l(),Db=a("li"),vue=a("strong"),vWo=o("roberta"),FWo=o(" \u2014 "),lz=a("a"),TWo=o("RobertaForSequenceClassification"),MWo=o(" (RoBERTa model)"),EWo=l(),Gb=a("li"),Fue=a("strong"),CWo=o("roformer"),wWo=o(" \u2014 "),iz=a("a"),AWo=o("RoFormerForSequenceClassification"),LWo=o(" (RoFormer model)"),yWo=l(),Ob=a("li"),Tue=a("strong"),xWo=o("squeezebert"),$Wo=o(" \u2014 "),dz=a("a"),kWo=o("SqueezeBertForSequenceClassification"),SWo=o(" (SqueezeBERT model)"),RWo=l(),Vb=a("li"),Mue=a("strong"),PWo=o("tapas"),BWo=o(" \u2014 "),cz=a("a"),IWo=o("TapasForSequenceClassification"),NWo=o(" (TAPAS model)"),qWo=l(),Xb=a("li"),Eue=a("strong"),jWo=o("transfo-xl"),DWo=o(" \u2014 "),fz=a("a"),GWo=o("TransfoXLForSequenceClassification"),OWo=o(" (Transformer-XL model)"),VWo=l(),zb=a("li"),Cue=a("strong"),XWo=o("xlm"),zWo=o(" \u2014 "),mz=a("a"),WWo=o("XLMForSequenceClassification"),QWo=o(" (XLM model)"),HWo=l(),Wb=a("li"),wue=a("strong"),UWo=o("xlm-roberta"),JWo=o(" \u2014 "),gz=a("a"),YWo=o("XLMRobertaForSequenceClassification"),KWo=o(" (XLM-RoBERTa model)"),ZWo=l(),Qb=a("li"),Aue=a("strong"),eQo=o("xlm-roberta-xl"),oQo=o(" \u2014 "),hz=a("a"),rQo=o("XLMRobertaXLForSequenceClassification"),tQo=o(" (XLM-RoBERTa-XL model)"),aQo=l(),Hb=a("li"),Lue=a("strong"),nQo=o("xlnet"),sQo=o(" \u2014 "),pz=a("a"),lQo=o("XLNetForSequenceClassification"),iQo=o(" (XLNet model)"),dQo=l(),Ub=a("li"),yue=a("strong"),cQo=o("yoso"),fQo=o(" \u2014 "),_z=a("a"),mQo=o("YosoForSequenceClassification"),gQo=o(" (YOSO model)"),hQo=l(),Jb=a("p"),pQo=o("The model is set in evaluation mode by default using "),xue=a("code"),_Qo=o("model.eval()"),uQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),bQo=o("model.train()"),vQo=l(),F(Yb.$$.fragment),Mze=l(),ld=a("h2"),Kb=a("a"),kue=a("span"),F(v8.$$.fragment),FQo=l(),Sue=a("span"),TQo=o("AutoModelForMultipleChoice"),Eze=l(),No=a("div"),F(F8.$$.fragment),MQo=l(),id=a("p"),EQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uz=a("a"),CQo=o("from_pretrained()"),wQo=o(" class method or the "),bz=a("a"),AQo=o("from_config()"),LQo=o(` class
method.`),yQo=l(),T8=a("p"),xQo=o("This class cannot be instantiated directly using "),Rue=a("code"),$Qo=o("__init__()"),kQo=o(" (throws an error)."),SQo=l(),ht=a("div"),F(M8.$$.fragment),RQo=l(),Pue=a("p"),PQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BQo=l(),dd=a("p"),IQo=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),NQo=o("not"),qQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),jQo=o("from_pretrained()"),DQo=o(" to load the model weights."),GQo=l(),F(Zb.$$.fragment),OQo=l(),to=a("div"),F(E8.$$.fragment),VQo=l(),Iue=a("p"),XQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zQo=l(),Va=a("p"),WQo=o("The model class to instantiate is selected based on the "),Nue=a("code"),QQo=o("model_type"),HQo=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),UQo=o("pretrained_model_name_or_path"),JQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),YQo=o("pretrained_model_name_or_path"),KQo=o(":"),ZQo=l(),Z=a("ul"),ev=a("li"),Due=a("strong"),eHo=o("albert"),oHo=o(" \u2014 "),Fz=a("a"),rHo=o("AlbertForMultipleChoice"),tHo=o(" (ALBERT model)"),aHo=l(),ov=a("li"),Gue=a("strong"),nHo=o("bert"),sHo=o(" \u2014 "),Tz=a("a"),lHo=o("BertForMultipleChoice"),iHo=o(" (BERT model)"),dHo=l(),rv=a("li"),Oue=a("strong"),cHo=o("big_bird"),fHo=o(" \u2014 "),Mz=a("a"),mHo=o("BigBirdForMultipleChoice"),gHo=o(" (BigBird model)"),hHo=l(),tv=a("li"),Vue=a("strong"),pHo=o("camembert"),_Ho=o(" \u2014 "),Ez=a("a"),uHo=o("CamembertForMultipleChoice"),bHo=o(" (CamemBERT model)"),vHo=l(),av=a("li"),Xue=a("strong"),FHo=o("canine"),THo=o(" \u2014 "),Cz=a("a"),MHo=o("CanineForMultipleChoice"),EHo=o(" (CANINE model)"),CHo=l(),nv=a("li"),zue=a("strong"),wHo=o("convbert"),AHo=o(" \u2014 "),wz=a("a"),LHo=o("ConvBertForMultipleChoice"),yHo=o(" (ConvBERT model)"),xHo=l(),sv=a("li"),Wue=a("strong"),$Ho=o("data2vec-text"),kHo=o(" \u2014 "),Az=a("a"),SHo=o("Data2VecTextForMultipleChoice"),RHo=o(" (Data2VecText model)"),PHo=l(),lv=a("li"),Que=a("strong"),BHo=o("deberta-v2"),IHo=o(" \u2014 "),Lz=a("a"),NHo=o("DebertaV2ForMultipleChoice"),qHo=o(" (DeBERTa-v2 model)"),jHo=l(),iv=a("li"),Hue=a("strong"),DHo=o("distilbert"),GHo=o(" \u2014 "),yz=a("a"),OHo=o("DistilBertForMultipleChoice"),VHo=o(" (DistilBERT model)"),XHo=l(),dv=a("li"),Uue=a("strong"),zHo=o("electra"),WHo=o(" \u2014 "),xz=a("a"),QHo=o("ElectraForMultipleChoice"),HHo=o(" (ELECTRA model)"),UHo=l(),cv=a("li"),Jue=a("strong"),JHo=o("flaubert"),YHo=o(" \u2014 "),$z=a("a"),KHo=o("FlaubertForMultipleChoice"),ZHo=o(" (FlauBERT model)"),eUo=l(),fv=a("li"),Yue=a("strong"),oUo=o("fnet"),rUo=o(" \u2014 "),kz=a("a"),tUo=o("FNetForMultipleChoice"),aUo=o(" (FNet model)"),nUo=l(),mv=a("li"),Kue=a("strong"),sUo=o("funnel"),lUo=o(" \u2014 "),Sz=a("a"),iUo=o("FunnelForMultipleChoice"),dUo=o(" (Funnel Transformer model)"),cUo=l(),gv=a("li"),Zue=a("strong"),fUo=o("ibert"),mUo=o(" \u2014 "),Rz=a("a"),gUo=o("IBertForMultipleChoice"),hUo=o(" (I-BERT model)"),pUo=l(),hv=a("li"),e1e=a("strong"),_Uo=o("longformer"),uUo=o(" \u2014 "),Pz=a("a"),bUo=o("LongformerForMultipleChoice"),vUo=o(" (Longformer model)"),FUo=l(),pv=a("li"),o1e=a("strong"),TUo=o("megatron-bert"),MUo=o(" \u2014 "),Bz=a("a"),EUo=o("MegatronBertForMultipleChoice"),CUo=o(" (Megatron-BERT model)"),wUo=l(),_v=a("li"),r1e=a("strong"),AUo=o("mobilebert"),LUo=o(" \u2014 "),Iz=a("a"),yUo=o("MobileBertForMultipleChoice"),xUo=o(" (MobileBERT model)"),$Uo=l(),uv=a("li"),t1e=a("strong"),kUo=o("mpnet"),SUo=o(" \u2014 "),Nz=a("a"),RUo=o("MPNetForMultipleChoice"),PUo=o(" (MPNet model)"),BUo=l(),bv=a("li"),a1e=a("strong"),IUo=o("nezha"),NUo=o(" \u2014 "),qz=a("a"),qUo=o("NezhaForMultipleChoice"),jUo=o(" (Nezha model)"),DUo=l(),vv=a("li"),n1e=a("strong"),GUo=o("nystromformer"),OUo=o(" \u2014 "),jz=a("a"),VUo=o("NystromformerForMultipleChoice"),XUo=o(" (Nystr\xF6mformer model)"),zUo=l(),Fv=a("li"),s1e=a("strong"),WUo=o("qdqbert"),QUo=o(" \u2014 "),Dz=a("a"),HUo=o("QDQBertForMultipleChoice"),UUo=o(" (QDQBert model)"),JUo=l(),Tv=a("li"),l1e=a("strong"),YUo=o("rembert"),KUo=o(" \u2014 "),Gz=a("a"),ZUo=o("RemBertForMultipleChoice"),eJo=o(" (RemBERT model)"),oJo=l(),Mv=a("li"),i1e=a("strong"),rJo=o("roberta"),tJo=o(" \u2014 "),Oz=a("a"),aJo=o("RobertaForMultipleChoice"),nJo=o(" (RoBERTa model)"),sJo=l(),Ev=a("li"),d1e=a("strong"),lJo=o("roformer"),iJo=o(" \u2014 "),Vz=a("a"),dJo=o("RoFormerForMultipleChoice"),cJo=o(" (RoFormer model)"),fJo=l(),Cv=a("li"),c1e=a("strong"),mJo=o("squeezebert"),gJo=o(" \u2014 "),Xz=a("a"),hJo=o("SqueezeBertForMultipleChoice"),pJo=o(" (SqueezeBERT model)"),_Jo=l(),wv=a("li"),f1e=a("strong"),uJo=o("xlm"),bJo=o(" \u2014 "),zz=a("a"),vJo=o("XLMForMultipleChoice"),FJo=o(" (XLM model)"),TJo=l(),Av=a("li"),m1e=a("strong"),MJo=o("xlm-roberta"),EJo=o(" \u2014 "),Wz=a("a"),CJo=o("XLMRobertaForMultipleChoice"),wJo=o(" (XLM-RoBERTa model)"),AJo=l(),Lv=a("li"),g1e=a("strong"),LJo=o("xlm-roberta-xl"),yJo=o(" \u2014 "),Qz=a("a"),xJo=o("XLMRobertaXLForMultipleChoice"),$Jo=o(" (XLM-RoBERTa-XL model)"),kJo=l(),yv=a("li"),h1e=a("strong"),SJo=o("xlnet"),RJo=o(" \u2014 "),Hz=a("a"),PJo=o("XLNetForMultipleChoice"),BJo=o(" (XLNet model)"),IJo=l(),xv=a("li"),p1e=a("strong"),NJo=o("yoso"),qJo=o(" \u2014 "),Uz=a("a"),jJo=o("YosoForMultipleChoice"),DJo=o(" (YOSO model)"),GJo=l(),$v=a("p"),OJo=o("The model is set in evaluation mode by default using "),_1e=a("code"),VJo=o("model.eval()"),XJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),zJo=o("model.train()"),WJo=l(),F(kv.$$.fragment),Cze=l(),cd=a("h2"),Sv=a("a"),b1e=a("span"),F(C8.$$.fragment),QJo=l(),v1e=a("span"),HJo=o("AutoModelForNextSentencePrediction"),wze=l(),qo=a("div"),F(w8.$$.fragment),UJo=l(),fd=a("p"),JJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jz=a("a"),YJo=o("from_pretrained()"),KJo=o(" class method or the "),Yz=a("a"),ZJo=o("from_config()"),eYo=o(` class
method.`),oYo=l(),A8=a("p"),rYo=o("This class cannot be instantiated directly using "),F1e=a("code"),tYo=o("__init__()"),aYo=o(" (throws an error)."),nYo=l(),pt=a("div"),F(L8.$$.fragment),sYo=l(),T1e=a("p"),lYo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iYo=l(),md=a("p"),dYo=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),cYo=o("not"),fYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),mYo=o("from_pretrained()"),gYo=o(" to load the model weights."),hYo=l(),F(Rv.$$.fragment),pYo=l(),ao=a("div"),F(y8.$$.fragment),_Yo=l(),E1e=a("p"),uYo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bYo=l(),Xa=a("p"),vYo=o("The model class to instantiate is selected based on the "),C1e=a("code"),FYo=o("model_type"),TYo=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),MYo=o("pretrained_model_name_or_path"),EYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(":"),AYo=l(),jo=a("ul"),Pv=a("li"),L1e=a("strong"),LYo=o("bert"),yYo=o(" \u2014 "),Zz=a("a"),xYo=o("BertForNextSentencePrediction"),$Yo=o(" (BERT model)"),kYo=l(),Bv=a("li"),y1e=a("strong"),SYo=o("fnet"),RYo=o(" \u2014 "),eW=a("a"),PYo=o("FNetForNextSentencePrediction"),BYo=o(" (FNet model)"),IYo=l(),Iv=a("li"),x1e=a("strong"),NYo=o("megatron-bert"),qYo=o(" \u2014 "),oW=a("a"),jYo=o("MegatronBertForNextSentencePrediction"),DYo=o(" (Megatron-BERT model)"),GYo=l(),Nv=a("li"),$1e=a("strong"),OYo=o("mobilebert"),VYo=o(" \u2014 "),rW=a("a"),XYo=o("MobileBertForNextSentencePrediction"),zYo=o(" (MobileBERT model)"),WYo=l(),qv=a("li"),k1e=a("strong"),QYo=o("nezha"),HYo=o(" \u2014 "),tW=a("a"),UYo=o("NezhaForNextSentencePrediction"),JYo=o(" (Nezha model)"),YYo=l(),jv=a("li"),S1e=a("strong"),KYo=o("qdqbert"),ZYo=o(" \u2014 "),aW=a("a"),eKo=o("QDQBertForNextSentencePrediction"),oKo=o(" (QDQBert model)"),rKo=l(),Dv=a("p"),tKo=o("The model is set in evaluation mode by default using "),R1e=a("code"),aKo=o("model.eval()"),nKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),sKo=o("model.train()"),lKo=l(),F(Gv.$$.fragment),Aze=l(),gd=a("h2"),Ov=a("a"),B1e=a("span"),F(x8.$$.fragment),iKo=l(),I1e=a("span"),dKo=o("AutoModelForTokenClassification"),Lze=l(),Do=a("div"),F($8.$$.fragment),cKo=l(),hd=a("p"),fKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nW=a("a"),mKo=o("from_pretrained()"),gKo=o(" class method or the "),sW=a("a"),hKo=o("from_config()"),pKo=o(` class
method.`),_Ko=l(),k8=a("p"),uKo=o("This class cannot be instantiated directly using "),N1e=a("code"),bKo=o("__init__()"),vKo=o(" (throws an error)."),FKo=l(),_t=a("div"),F(S8.$$.fragment),TKo=l(),q1e=a("p"),MKo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EKo=l(),pd=a("p"),CKo=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),wKo=o("not"),AKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),LKo=o("from_pretrained()"),yKo=o(" to load the model weights."),xKo=l(),F(Vv.$$.fragment),$Ko=l(),no=a("div"),F(R8.$$.fragment),kKo=l(),D1e=a("p"),SKo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RKo=l(),za=a("p"),PKo=o("The model class to instantiate is selected based on the "),G1e=a("code"),BKo=o("model_type"),IKo=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),NKo=o("pretrained_model_name_or_path"),qKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),jKo=o("pretrained_model_name_or_path"),DKo=o(":"),GKo=l(),U=a("ul"),Xv=a("li"),X1e=a("strong"),OKo=o("albert"),VKo=o(" \u2014 "),iW=a("a"),XKo=o("AlbertForTokenClassification"),zKo=o(" (ALBERT model)"),WKo=l(),zv=a("li"),z1e=a("strong"),QKo=o("bert"),HKo=o(" \u2014 "),dW=a("a"),UKo=o("BertForTokenClassification"),JKo=o(" (BERT model)"),YKo=l(),Wv=a("li"),W1e=a("strong"),KKo=o("big_bird"),ZKo=o(" \u2014 "),cW=a("a"),eZo=o("BigBirdForTokenClassification"),oZo=o(" (BigBird model)"),rZo=l(),Qv=a("li"),Q1e=a("strong"),tZo=o("bloom"),aZo=o(" \u2014 "),fW=a("a"),nZo=o("BloomForTokenClassification"),sZo=o(" (BLOOM model)"),lZo=l(),Hv=a("li"),H1e=a("strong"),iZo=o("camembert"),dZo=o(" \u2014 "),mW=a("a"),cZo=o("CamembertForTokenClassification"),fZo=o(" (CamemBERT model)"),mZo=l(),Uv=a("li"),U1e=a("strong"),gZo=o("canine"),hZo=o(" \u2014 "),gW=a("a"),pZo=o("CanineForTokenClassification"),_Zo=o(" (CANINE model)"),uZo=l(),Jv=a("li"),J1e=a("strong"),bZo=o("convbert"),vZo=o(" \u2014 "),hW=a("a"),FZo=o("ConvBertForTokenClassification"),TZo=o(" (ConvBERT model)"),MZo=l(),Yv=a("li"),Y1e=a("strong"),EZo=o("data2vec-text"),CZo=o(" \u2014 "),pW=a("a"),wZo=o("Data2VecTextForTokenClassification"),AZo=o(" (Data2VecText model)"),LZo=l(),Kv=a("li"),K1e=a("strong"),yZo=o("deberta"),xZo=o(" \u2014 "),_W=a("a"),$Zo=o("DebertaForTokenClassification"),kZo=o(" (DeBERTa model)"),SZo=l(),Zv=a("li"),Z1e=a("strong"),RZo=o("deberta-v2"),PZo=o(" \u2014 "),uW=a("a"),BZo=o("DebertaV2ForTokenClassification"),IZo=o(" (DeBERTa-v2 model)"),NZo=l(),eF=a("li"),e7e=a("strong"),qZo=o("distilbert"),jZo=o(" \u2014 "),bW=a("a"),DZo=o("DistilBertForTokenClassification"),GZo=o(" (DistilBERT model)"),OZo=l(),oF=a("li"),o7e=a("strong"),VZo=o("electra"),XZo=o(" \u2014 "),vW=a("a"),zZo=o("ElectraForTokenClassification"),WZo=o(" (ELECTRA model)"),QZo=l(),rF=a("li"),r7e=a("strong"),HZo=o("flaubert"),UZo=o(" \u2014 "),FW=a("a"),JZo=o("FlaubertForTokenClassification"),YZo=o(" (FlauBERT model)"),KZo=l(),tF=a("li"),t7e=a("strong"),ZZo=o("fnet"),eer=o(" \u2014 "),TW=a("a"),oer=o("FNetForTokenClassification"),rer=o(" (FNet model)"),ter=l(),aF=a("li"),a7e=a("strong"),aer=o("funnel"),ner=o(" \u2014 "),MW=a("a"),ser=o("FunnelForTokenClassification"),ler=o(" (Funnel Transformer model)"),ier=l(),nF=a("li"),n7e=a("strong"),der=o("gpt2"),cer=o(" \u2014 "),EW=a("a"),fer=o("GPT2ForTokenClassification"),mer=o(" (OpenAI GPT-2 model)"),ger=l(),sF=a("li"),s7e=a("strong"),her=o("ibert"),per=o(" \u2014 "),CW=a("a"),_er=o("IBertForTokenClassification"),uer=o(" (I-BERT model)"),ber=l(),lF=a("li"),l7e=a("strong"),ver=o("layoutlm"),Fer=o(" \u2014 "),wW=a("a"),Ter=o("LayoutLMForTokenClassification"),Mer=o(" (LayoutLM model)"),Eer=l(),iF=a("li"),i7e=a("strong"),Cer=o("layoutlmv2"),wer=o(" \u2014 "),AW=a("a"),Aer=o("LayoutLMv2ForTokenClassification"),Ler=o(" (LayoutLMv2 model)"),yer=l(),dF=a("li"),d7e=a("strong"),xer=o("layoutlmv3"),$er=o(" \u2014 "),LW=a("a"),ker=o("LayoutLMv3ForTokenClassification"),Ser=o(" (LayoutLMv3 model)"),Rer=l(),cF=a("li"),c7e=a("strong"),Per=o("longformer"),Ber=o(" \u2014 "),yW=a("a"),Ier=o("LongformerForTokenClassification"),Ner=o(" (Longformer model)"),qer=l(),fF=a("li"),f7e=a("strong"),jer=o("megatron-bert"),Der=o(" \u2014 "),xW=a("a"),Ger=o("MegatronBertForTokenClassification"),Oer=o(" (Megatron-BERT model)"),Ver=l(),mF=a("li"),m7e=a("strong"),Xer=o("mobilebert"),zer=o(" \u2014 "),$W=a("a"),Wer=o("MobileBertForTokenClassification"),Qer=o(" (MobileBERT model)"),Her=l(),gF=a("li"),g7e=a("strong"),Uer=o("mpnet"),Jer=o(" \u2014 "),kW=a("a"),Yer=o("MPNetForTokenClassification"),Ker=o(" (MPNet model)"),Zer=l(),hF=a("li"),h7e=a("strong"),eor=o("nezha"),oor=o(" \u2014 "),SW=a("a"),ror=o("NezhaForTokenClassification"),tor=o(" (Nezha model)"),aor=l(),pF=a("li"),p7e=a("strong"),nor=o("nystromformer"),sor=o(" \u2014 "),RW=a("a"),lor=o("NystromformerForTokenClassification"),ior=o(" (Nystr\xF6mformer model)"),dor=l(),_F=a("li"),_7e=a("strong"),cor=o("qdqbert"),mor=o(" \u2014 "),PW=a("a"),gor=o("QDQBertForTokenClassification"),hor=o(" (QDQBert model)"),por=l(),uF=a("li"),u7e=a("strong"),_or=o("rembert"),uor=o(" \u2014 "),BW=a("a"),bor=o("RemBertForTokenClassification"),vor=o(" (RemBERT model)"),For=l(),bF=a("li"),b7e=a("strong"),Tor=o("roberta"),Mor=o(" \u2014 "),IW=a("a"),Eor=o("RobertaForTokenClassification"),Cor=o(" (RoBERTa model)"),wor=l(),vF=a("li"),v7e=a("strong"),Aor=o("roformer"),Lor=o(" \u2014 "),NW=a("a"),yor=o("RoFormerForTokenClassification"),xor=o(" (RoFormer model)"),$or=l(),FF=a("li"),F7e=a("strong"),kor=o("squeezebert"),Sor=o(" \u2014 "),qW=a("a"),Ror=o("SqueezeBertForTokenClassification"),Por=o(" (SqueezeBERT model)"),Bor=l(),TF=a("li"),T7e=a("strong"),Ior=o("xlm"),Nor=o(" \u2014 "),jW=a("a"),qor=o("XLMForTokenClassification"),jor=o(" (XLM model)"),Dor=l(),MF=a("li"),M7e=a("strong"),Gor=o("xlm-roberta"),Oor=o(" \u2014 "),DW=a("a"),Vor=o("XLMRobertaForTokenClassification"),Xor=o(" (XLM-RoBERTa model)"),zor=l(),EF=a("li"),E7e=a("strong"),Wor=o("xlm-roberta-xl"),Qor=o(" \u2014 "),GW=a("a"),Hor=o("XLMRobertaXLForTokenClassification"),Uor=o(" (XLM-RoBERTa-XL model)"),Jor=l(),CF=a("li"),C7e=a("strong"),Yor=o("xlnet"),Kor=o(" \u2014 "),OW=a("a"),Zor=o("XLNetForTokenClassification"),err=o(" (XLNet model)"),orr=l(),wF=a("li"),w7e=a("strong"),rrr=o("yoso"),trr=o(" \u2014 "),VW=a("a"),arr=o("YosoForTokenClassification"),nrr=o(" (YOSO model)"),srr=l(),AF=a("p"),lrr=o("The model is set in evaluation mode by default using "),A7e=a("code"),irr=o("model.eval()"),drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L7e=a("code"),crr=o("model.train()"),frr=l(),F(LF.$$.fragment),yze=l(),_d=a("h2"),yF=a("a"),y7e=a("span"),F(P8.$$.fragment),mrr=l(),x7e=a("span"),grr=o("AutoModelForQuestionAnswering"),xze=l(),Go=a("div"),F(B8.$$.fragment),hrr=l(),ud=a("p"),prr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XW=a("a"),_rr=o("from_pretrained()"),urr=o(" class method or the "),zW=a("a"),brr=o("from_config()"),vrr=o(` class
method.`),Frr=l(),I8=a("p"),Trr=o("This class cannot be instantiated directly using "),$7e=a("code"),Mrr=o("__init__()"),Err=o(" (throws an error)."),Crr=l(),ut=a("div"),F(N8.$$.fragment),wrr=l(),k7e=a("p"),Arr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lrr=l(),bd=a("p"),yrr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),xrr=o("not"),$rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),krr=o("from_pretrained()"),Srr=o(" to load the model weights."),Rrr=l(),F(xF.$$.fragment),Prr=l(),so=a("div"),F(q8.$$.fragment),Brr=l(),R7e=a("p"),Irr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nrr=l(),Wa=a("p"),qrr=o("The model class to instantiate is selected based on the "),P7e=a("code"),jrr=o("model_type"),Drr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(":"),zrr=l(),V=a("ul"),$F=a("li"),N7e=a("strong"),Wrr=o("albert"),Qrr=o(" \u2014 "),QW=a("a"),Hrr=o("AlbertForQuestionAnswering"),Urr=o(" (ALBERT model)"),Jrr=l(),kF=a("li"),q7e=a("strong"),Yrr=o("bart"),Krr=o(" \u2014 "),HW=a("a"),Zrr=o("BartForQuestionAnswering"),etr=o(" (BART model)"),otr=l(),SF=a("li"),j7e=a("strong"),rtr=o("bert"),ttr=o(" \u2014 "),UW=a("a"),atr=o("BertForQuestionAnswering"),ntr=o(" (BERT model)"),str=l(),RF=a("li"),D7e=a("strong"),ltr=o("big_bird"),itr=o(" \u2014 "),JW=a("a"),dtr=o("BigBirdForQuestionAnswering"),ctr=o(" (BigBird model)"),ftr=l(),PF=a("li"),G7e=a("strong"),mtr=o("bigbird_pegasus"),gtr=o(" \u2014 "),YW=a("a"),htr=o("BigBirdPegasusForQuestionAnswering"),ptr=o(" (BigBird-Pegasus model)"),_tr=l(),BF=a("li"),O7e=a("strong"),utr=o("camembert"),btr=o(" \u2014 "),KW=a("a"),vtr=o("CamembertForQuestionAnswering"),Ftr=o(" (CamemBERT model)"),Ttr=l(),IF=a("li"),V7e=a("strong"),Mtr=o("canine"),Etr=o(" \u2014 "),ZW=a("a"),Ctr=o("CanineForQuestionAnswering"),wtr=o(" (CANINE model)"),Atr=l(),NF=a("li"),X7e=a("strong"),Ltr=o("convbert"),ytr=o(" \u2014 "),eQ=a("a"),xtr=o("ConvBertForQuestionAnswering"),$tr=o(" (ConvBERT model)"),ktr=l(),qF=a("li"),z7e=a("strong"),Str=o("data2vec-text"),Rtr=o(" \u2014 "),oQ=a("a"),Ptr=o("Data2VecTextForQuestionAnswering"),Btr=o(" (Data2VecText model)"),Itr=l(),jF=a("li"),W7e=a("strong"),Ntr=o("deberta"),qtr=o(" \u2014 "),rQ=a("a"),jtr=o("DebertaForQuestionAnswering"),Dtr=o(" (DeBERTa model)"),Gtr=l(),DF=a("li"),Q7e=a("strong"),Otr=o("deberta-v2"),Vtr=o(" \u2014 "),tQ=a("a"),Xtr=o("DebertaV2ForQuestionAnswering"),ztr=o(" (DeBERTa-v2 model)"),Wtr=l(),GF=a("li"),H7e=a("strong"),Qtr=o("distilbert"),Htr=o(" \u2014 "),aQ=a("a"),Utr=o("DistilBertForQuestionAnswering"),Jtr=o(" (DistilBERT model)"),Ytr=l(),OF=a("li"),U7e=a("strong"),Ktr=o("electra"),Ztr=o(" \u2014 "),nQ=a("a"),ear=o("ElectraForQuestionAnswering"),oar=o(" (ELECTRA model)"),rar=l(),VF=a("li"),J7e=a("strong"),tar=o("flaubert"),aar=o(" \u2014 "),sQ=a("a"),nar=o("FlaubertForQuestionAnsweringSimple"),sar=o(" (FlauBERT model)"),lar=l(),XF=a("li"),Y7e=a("strong"),iar=o("fnet"),dar=o(" \u2014 "),lQ=a("a"),car=o("FNetForQuestionAnswering"),far=o(" (FNet model)"),mar=l(),zF=a("li"),K7e=a("strong"),gar=o("funnel"),har=o(" \u2014 "),iQ=a("a"),par=o("FunnelForQuestionAnswering"),_ar=o(" (Funnel Transformer model)"),uar=l(),WF=a("li"),Z7e=a("strong"),bar=o("gptj"),Far=o(" \u2014 "),dQ=a("a"),Tar=o("GPTJForQuestionAnswering"),Mar=o(" (GPT-J model)"),Ear=l(),QF=a("li"),e2e=a("strong"),Car=o("ibert"),war=o(" \u2014 "),cQ=a("a"),Aar=o("IBertForQuestionAnswering"),Lar=o(" (I-BERT model)"),yar=l(),HF=a("li"),o2e=a("strong"),xar=o("layoutlmv2"),$ar=o(" \u2014 "),fQ=a("a"),kar=o("LayoutLMv2ForQuestionAnswering"),Sar=o(" (LayoutLMv2 model)"),Rar=l(),UF=a("li"),r2e=a("strong"),Par=o("layoutlmv3"),Bar=o(" \u2014 "),mQ=a("a"),Iar=o("LayoutLMv3ForQuestionAnswering"),Nar=o(" (LayoutLMv3 model)"),qar=l(),JF=a("li"),t2e=a("strong"),jar=o("led"),Dar=o(" \u2014 "),gQ=a("a"),Gar=o("LEDForQuestionAnswering"),Oar=o(" (LED model)"),Var=l(),YF=a("li"),a2e=a("strong"),Xar=o("longformer"),zar=o(" \u2014 "),hQ=a("a"),War=o("LongformerForQuestionAnswering"),Qar=o(" (Longformer model)"),Har=l(),KF=a("li"),n2e=a("strong"),Uar=o("lxmert"),Jar=o(" \u2014 "),pQ=a("a"),Yar=o("LxmertForQuestionAnswering"),Kar=o(" (LXMERT model)"),Zar=l(),ZF=a("li"),s2e=a("strong"),enr=o("mbart"),onr=o(" \u2014 "),_Q=a("a"),rnr=o("MBartForQuestionAnswering"),tnr=o(" (mBART model)"),anr=l(),e6=a("li"),l2e=a("strong"),nnr=o("megatron-bert"),snr=o(" \u2014 "),uQ=a("a"),lnr=o("MegatronBertForQuestionAnswering"),inr=o(" (Megatron-BERT model)"),dnr=l(),o6=a("li"),i2e=a("strong"),cnr=o("mobilebert"),fnr=o(" \u2014 "),bQ=a("a"),mnr=o("MobileBertForQuestionAnswering"),gnr=o(" (MobileBERT model)"),hnr=l(),r6=a("li"),d2e=a("strong"),pnr=o("mpnet"),_nr=o(" \u2014 "),vQ=a("a"),unr=o("MPNetForQuestionAnswering"),bnr=o(" (MPNet model)"),vnr=l(),t6=a("li"),c2e=a("strong"),Fnr=o("mvp"),Tnr=o(" \u2014 "),FQ=a("a"),Mnr=o("MvpForQuestionAnswering"),Enr=o(" (MVP model)"),Cnr=l(),a6=a("li"),f2e=a("strong"),wnr=o("nezha"),Anr=o(" \u2014 "),TQ=a("a"),Lnr=o("NezhaForQuestionAnswering"),ynr=o(" (Nezha model)"),xnr=l(),n6=a("li"),m2e=a("strong"),$nr=o("nystromformer"),knr=o(" \u2014 "),MQ=a("a"),Snr=o("NystromformerForQuestionAnswering"),Rnr=o(" (Nystr\xF6mformer model)"),Pnr=l(),s6=a("li"),g2e=a("strong"),Bnr=o("qdqbert"),Inr=o(" \u2014 "),EQ=a("a"),Nnr=o("QDQBertForQuestionAnswering"),qnr=o(" (QDQBert model)"),jnr=l(),l6=a("li"),h2e=a("strong"),Dnr=o("reformer"),Gnr=o(" \u2014 "),CQ=a("a"),Onr=o("ReformerForQuestionAnswering"),Vnr=o(" (Reformer model)"),Xnr=l(),i6=a("li"),p2e=a("strong"),znr=o("rembert"),Wnr=o(" \u2014 "),wQ=a("a"),Qnr=o("RemBertForQuestionAnswering"),Hnr=o(" (RemBERT model)"),Unr=l(),d6=a("li"),_2e=a("strong"),Jnr=o("roberta"),Ynr=o(" \u2014 "),AQ=a("a"),Knr=o("RobertaForQuestionAnswering"),Znr=o(" (RoBERTa model)"),esr=l(),c6=a("li"),u2e=a("strong"),osr=o("roformer"),rsr=o(" \u2014 "),LQ=a("a"),tsr=o("RoFormerForQuestionAnswering"),asr=o(" (RoFormer model)"),nsr=l(),f6=a("li"),b2e=a("strong"),ssr=o("splinter"),lsr=o(" \u2014 "),yQ=a("a"),isr=o("SplinterForQuestionAnswering"),dsr=o(" (Splinter model)"),csr=l(),m6=a("li"),v2e=a("strong"),fsr=o("squeezebert"),msr=o(" \u2014 "),xQ=a("a"),gsr=o("SqueezeBertForQuestionAnswering"),hsr=o(" (SqueezeBERT model)"),psr=l(),g6=a("li"),F2e=a("strong"),_sr=o("xlm"),usr=o(" \u2014 "),$Q=a("a"),bsr=o("XLMForQuestionAnsweringSimple"),vsr=o(" (XLM model)"),Fsr=l(),h6=a("li"),T2e=a("strong"),Tsr=o("xlm-roberta"),Msr=o(" \u2014 "),kQ=a("a"),Esr=o("XLMRobertaForQuestionAnswering"),Csr=o(" (XLM-RoBERTa model)"),wsr=l(),p6=a("li"),M2e=a("strong"),Asr=o("xlm-roberta-xl"),Lsr=o(" \u2014 "),SQ=a("a"),ysr=o("XLMRobertaXLForQuestionAnswering"),xsr=o(" (XLM-RoBERTa-XL model)"),$sr=l(),_6=a("li"),E2e=a("strong"),ksr=o("xlnet"),Ssr=o(" \u2014 "),RQ=a("a"),Rsr=o("XLNetForQuestionAnsweringSimple"),Psr=o(" (XLNet model)"),Bsr=l(),u6=a("li"),C2e=a("strong"),Isr=o("yoso"),Nsr=o(" \u2014 "),PQ=a("a"),qsr=o("YosoForQuestionAnswering"),jsr=o(" (YOSO model)"),Dsr=l(),b6=a("p"),Gsr=o("The model is set in evaluation mode by default using "),w2e=a("code"),Osr=o("model.eval()"),Vsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=a("code"),Xsr=o("model.train()"),zsr=l(),F(v6.$$.fragment),$ze=l(),vd=a("h2"),F6=a("a"),L2e=a("span"),F(j8.$$.fragment),Wsr=l(),y2e=a("span"),Qsr=o("AutoModelForTableQuestionAnswering"),kze=l(),Oo=a("div"),F(D8.$$.fragment),Hsr=l(),Fd=a("p"),Usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BQ=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" class method or the "),IQ=a("a"),Ksr=o("from_config()"),Zsr=o(` class
method.`),elr=l(),G8=a("p"),olr=o("This class cannot be instantiated directly using "),x2e=a("code"),rlr=o("__init__()"),tlr=o(" (throws an error)."),alr=l(),bt=a("div"),F(O8.$$.fragment),nlr=l(),$2e=a("p"),slr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),llr=l(),Td=a("p"),ilr=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),dlr=o("not"),clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),flr=o("from_pretrained()"),mlr=o(" to load the model weights."),glr=l(),F(T6.$$.fragment),hlr=l(),lo=a("div"),F(V8.$$.fragment),plr=l(),S2e=a("p"),_lr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ulr=l(),Qa=a("p"),blr=o("The model class to instantiate is selected based on the "),R2e=a("code"),vlr=o("model_type"),Flr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),Tlr=o("pretrained_model_name_or_path"),Mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),Elr=o("pretrained_model_name_or_path"),Clr=o(":"),wlr=l(),I2e=a("ul"),M6=a("li"),N2e=a("strong"),Alr=o("tapas"),Llr=o(" \u2014 "),qQ=a("a"),ylr=o("TapasForQuestionAnswering"),xlr=o(" (TAPAS model)"),$lr=l(),E6=a("p"),klr=o("The model is set in evaluation mode by default using "),q2e=a("code"),Slr=o("model.eval()"),Rlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j2e=a("code"),Plr=o("model.train()"),Blr=l(),F(C6.$$.fragment),Sze=l(),Md=a("h2"),w6=a("a"),D2e=a("span"),F(X8.$$.fragment),Ilr=l(),G2e=a("span"),Nlr=o("AutoModelForImageClassification"),Rze=l(),Vo=a("div"),F(z8.$$.fragment),qlr=l(),Ed=a("p"),jlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jQ=a("a"),Dlr=o("from_pretrained()"),Glr=o(" class method or the "),DQ=a("a"),Olr=o("from_config()"),Vlr=o(` class
method.`),Xlr=l(),W8=a("p"),zlr=o("This class cannot be instantiated directly using "),O2e=a("code"),Wlr=o("__init__()"),Qlr=o(" (throws an error)."),Hlr=l(),vt=a("div"),F(Q8.$$.fragment),Ulr=l(),V2e=a("p"),Jlr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ylr=l(),Cd=a("p"),Klr=o(`Note:
Loading a model from its configuration file does `),X2e=a("strong"),Zlr=o("not"),eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),oir=o("from_pretrained()"),rir=o(" to load the model weights."),tir=l(),F(A6.$$.fragment),air=l(),io=a("div"),F(H8.$$.fragment),nir=l(),z2e=a("p"),sir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lir=l(),Ha=a("p"),iir=o("The model class to instantiate is selected based on the "),W2e=a("code"),dir=o("model_type"),cir=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),fir=o("pretrained_model_name_or_path"),mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=a("code"),gir=o("pretrained_model_name_or_path"),hir=o(":"),pir=l(),ve=a("ul"),L6=a("li"),U2e=a("strong"),_ir=o("beit"),uir=o(" \u2014 "),OQ=a("a"),bir=o("BeitForImageClassification"),vir=o(" (BEiT model)"),Fir=l(),y6=a("li"),J2e=a("strong"),Tir=o("convnext"),Mir=o(" \u2014 "),VQ=a("a"),Eir=o("ConvNextForImageClassification"),Cir=o(" (ConvNeXT model)"),wir=l(),x6=a("li"),Y2e=a("strong"),Air=o("cvt"),Lir=o(" \u2014 "),XQ=a("a"),yir=o("CvtForImageClassification"),xir=o(" (CvT model)"),$ir=l(),$6=a("li"),K2e=a("strong"),kir=o("data2vec-vision"),Sir=o(" \u2014 "),zQ=a("a"),Rir=o("Data2VecVisionForImageClassification"),Pir=o(" (Data2VecVision model)"),Bir=l(),Ys=a("li"),Z2e=a("strong"),Iir=o("deit"),Nir=o(" \u2014 "),WQ=a("a"),qir=o("DeiTForImageClassification"),jir=o(" or "),QQ=a("a"),Dir=o("DeiTForImageClassificationWithTeacher"),Gir=o(" (DeiT model)"),Oir=l(),k6=a("li"),ebe=a("strong"),Vir=o("imagegpt"),Xir=o(" \u2014 "),HQ=a("a"),zir=o("ImageGPTForImageClassification"),Wir=o(" (ImageGPT model)"),Qir=l(),Ks=a("li"),obe=a("strong"),Hir=o("levit"),Uir=o(" \u2014 "),UQ=a("a"),Jir=o("LevitForImageClassification"),Yir=o(" or "),JQ=a("a"),Kir=o("LevitForImageClassificationWithTeacher"),Zir=o(" (LeViT model)"),edr=l(),S6=a("li"),rbe=a("strong"),odr=o("mobilevit"),rdr=o(" \u2014 "),YQ=a("a"),tdr=o("MobileViTForImageClassification"),adr=o(" (MobileViT model)"),ndr=l(),Ft=a("li"),tbe=a("strong"),sdr=o("perceiver"),ldr=o(" \u2014 "),KQ=a("a"),idr=o("PerceiverForImageClassificationLearned"),ddr=o(" or "),ZQ=a("a"),cdr=o("PerceiverForImageClassificationFourier"),fdr=o(" or "),eH=a("a"),mdr=o("PerceiverForImageClassificationConvProcessing"),gdr=o(" (Perceiver model)"),hdr=l(),R6=a("li"),abe=a("strong"),pdr=o("poolformer"),_dr=o(" \u2014 "),oH=a("a"),udr=o("PoolFormerForImageClassification"),bdr=o(" (PoolFormer model)"),vdr=l(),P6=a("li"),nbe=a("strong"),Fdr=o("regnet"),Tdr=o(" \u2014 "),rH=a("a"),Mdr=o("RegNetForImageClassification"),Edr=o(" (RegNet model)"),Cdr=l(),B6=a("li"),sbe=a("strong"),wdr=o("resnet"),Adr=o(" \u2014 "),tH=a("a"),Ldr=o("ResNetForImageClassification"),ydr=o(" (ResNet model)"),xdr=l(),I6=a("li"),lbe=a("strong"),$dr=o("segformer"),kdr=o(" \u2014 "),aH=a("a"),Sdr=o("SegformerForImageClassification"),Rdr=o(" (SegFormer model)"),Pdr=l(),N6=a("li"),ibe=a("strong"),Bdr=o("swin"),Idr=o(" \u2014 "),nH=a("a"),Ndr=o("SwinForImageClassification"),qdr=o(" (Swin Transformer model)"),jdr=l(),q6=a("li"),dbe=a("strong"),Ddr=o("van"),Gdr=o(" \u2014 "),sH=a("a"),Odr=o("VanForImageClassification"),Vdr=o(" (VAN model)"),Xdr=l(),j6=a("li"),cbe=a("strong"),zdr=o("vit"),Wdr=o(" \u2014 "),lH=a("a"),Qdr=o("ViTForImageClassification"),Hdr=o(" (ViT model)"),Udr=l(),D6=a("p"),Jdr=o("The model is set in evaluation mode by default using "),fbe=a("code"),Ydr=o("model.eval()"),Kdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=a("code"),Zdr=o("model.train()"),ecr=l(),F(G6.$$.fragment),Pze=l(),wd=a("h2"),O6=a("a"),gbe=a("span"),F(U8.$$.fragment),ocr=l(),hbe=a("span"),rcr=o("AutoModelForVision2Seq"),Bze=l(),Xo=a("div"),F(J8.$$.fragment),tcr=l(),Ad=a("p"),acr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iH=a("a"),ncr=o("from_pretrained()"),scr=o(" class method or the "),dH=a("a"),lcr=o("from_config()"),icr=o(` class
method.`),dcr=l(),Y8=a("p"),ccr=o("This class cannot be instantiated directly using "),pbe=a("code"),fcr=o("__init__()"),mcr=o(" (throws an error)."),gcr=l(),Tt=a("div"),F(K8.$$.fragment),hcr=l(),_be=a("p"),pcr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_cr=l(),Ld=a("p"),ucr=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),bcr=o("not"),vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),Fcr=o("from_pretrained()"),Tcr=o(" to load the model weights."),Mcr=l(),F(V6.$$.fragment),Ecr=l(),co=a("div"),F(Z8.$$.fragment),Ccr=l(),bbe=a("p"),wcr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Acr=l(),Ua=a("p"),Lcr=o("The model class to instantiate is selected based on the "),vbe=a("code"),ycr=o("model_type"),xcr=o(` property of the config object (either
passed as an argument or loaded from `),Fbe=a("code"),$cr=o("pretrained_model_name_or_path"),kcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(":"),Pcr=l(),Mbe=a("ul"),X6=a("li"),Ebe=a("strong"),Bcr=o("vision-encoder-decoder"),Icr=o(" \u2014 "),fH=a("a"),Ncr=o("VisionEncoderDecoderModel"),qcr=o(" (Vision Encoder decoder model)"),jcr=l(),z6=a("p"),Dcr=o("The model is set in evaluation mode by default using "),Cbe=a("code"),Gcr=o("model.eval()"),Ocr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wbe=a("code"),Vcr=o("model.train()"),Xcr=l(),F(W6.$$.fragment),Ize=l(),yd=a("h2"),Q6=a("a"),Abe=a("span"),F(e9.$$.fragment),zcr=l(),Lbe=a("span"),Wcr=o("AutoModelForVisualQuestionAnswering"),Nze=l(),zo=a("div"),F(o9.$$.fragment),Qcr=l(),xd=a("p"),Hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mH=a("a"),Ucr=o("from_pretrained()"),Jcr=o(" class method or the "),gH=a("a"),Ycr=o("from_config()"),Kcr=o(` class
method.`),Zcr=l(),r9=a("p"),efr=o("This class cannot be instantiated directly using "),ybe=a("code"),ofr=o("__init__()"),rfr=o(" (throws an error)."),tfr=l(),Mt=a("div"),F(t9.$$.fragment),afr=l(),xbe=a("p"),nfr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),sfr=l(),$d=a("p"),lfr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),ifr=o("not"),dfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),cfr=o("from_pretrained()"),ffr=o(" to load the model weights."),mfr=l(),F(H6.$$.fragment),gfr=l(),fo=a("div"),F(a9.$$.fragment),hfr=l(),kbe=a("p"),pfr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),_fr=l(),Ja=a("p"),ufr=o("The model class to instantiate is selected based on the "),Sbe=a("code"),bfr=o("model_type"),vfr=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),Ffr=o("pretrained_model_name_or_path"),Tfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(":"),Cfr=l(),Bbe=a("ul"),U6=a("li"),Ibe=a("strong"),wfr=o("vilt"),Afr=o(" \u2014 "),pH=a("a"),Lfr=o("ViltForQuestionAnswering"),yfr=o(" (ViLT model)"),xfr=l(),J6=a("p"),$fr=o("The model is set in evaluation mode by default using "),Nbe=a("code"),kfr=o("model.eval()"),Sfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=a("code"),Rfr=o("model.train()"),Pfr=l(),F(Y6.$$.fragment),qze=l(),kd=a("h2"),K6=a("a"),jbe=a("span"),F(n9.$$.fragment),Bfr=l(),Dbe=a("span"),Ifr=o("AutoModelForAudioClassification"),jze=l(),Wo=a("div"),F(s9.$$.fragment),Nfr=l(),Sd=a("p"),qfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_H=a("a"),jfr=o("from_pretrained()"),Dfr=o(" class method or the "),uH=a("a"),Gfr=o("from_config()"),Ofr=o(` class
method.`),Vfr=l(),l9=a("p"),Xfr=o("This class cannot be instantiated directly using "),Gbe=a("code"),zfr=o("__init__()"),Wfr=o(" (throws an error)."),Qfr=l(),Et=a("div"),F(i9.$$.fragment),Hfr=l(),Obe=a("p"),Ufr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Jfr=l(),Rd=a("p"),Yfr=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),Kfr=o("not"),Zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),emr=o("from_pretrained()"),omr=o(" to load the model weights."),rmr=l(),F(Z6.$$.fragment),tmr=l(),mo=a("div"),F(d9.$$.fragment),amr=l(),Xbe=a("p"),nmr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),smr=l(),Ya=a("p"),lmr=o("The model class to instantiate is selected based on the "),zbe=a("code"),imr=o("model_type"),dmr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),cmr=o("pretrained_model_name_or_path"),fmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),mmr=o("pretrained_model_name_or_path"),gmr=o(":"),hmr=l(),Pe=a("ul"),eT=a("li"),Hbe=a("strong"),pmr=o("data2vec-audio"),_mr=o(" \u2014 "),vH=a("a"),umr=o("Data2VecAudioForSequenceClassification"),bmr=o(" (Data2VecAudio model)"),vmr=l(),oT=a("li"),Ube=a("strong"),Fmr=o("hubert"),Tmr=o(" \u2014 "),FH=a("a"),Mmr=o("HubertForSequenceClassification"),Emr=o(" (Hubert model)"),Cmr=l(),rT=a("li"),Jbe=a("strong"),wmr=o("sew"),Amr=o(" \u2014 "),TH=a("a"),Lmr=o("SEWForSequenceClassification"),ymr=o(" (SEW model)"),xmr=l(),tT=a("li"),Ybe=a("strong"),$mr=o("sew-d"),kmr=o(" \u2014 "),MH=a("a"),Smr=o("SEWDForSequenceClassification"),Rmr=o(" (SEW-D model)"),Pmr=l(),aT=a("li"),Kbe=a("strong"),Bmr=o("unispeech"),Imr=o(" \u2014 "),EH=a("a"),Nmr=o("UniSpeechForSequenceClassification"),qmr=o(" (UniSpeech model)"),jmr=l(),nT=a("li"),Zbe=a("strong"),Dmr=o("unispeech-sat"),Gmr=o(" \u2014 "),CH=a("a"),Omr=o("UniSpeechSatForSequenceClassification"),Vmr=o(" (UniSpeechSat model)"),Xmr=l(),sT=a("li"),eve=a("strong"),zmr=o("wav2vec2"),Wmr=o(" \u2014 "),wH=a("a"),Qmr=o("Wav2Vec2ForSequenceClassification"),Hmr=o(" (Wav2Vec2 model)"),Umr=l(),lT=a("li"),ove=a("strong"),Jmr=o("wav2vec2-conformer"),Ymr=o(" \u2014 "),AH=a("a"),Kmr=o("Wav2Vec2ConformerForSequenceClassification"),Zmr=o(" (Wav2Vec2-Conformer model)"),egr=l(),iT=a("li"),rve=a("strong"),ogr=o("wavlm"),rgr=o(" \u2014 "),LH=a("a"),tgr=o("WavLMForSequenceClassification"),agr=o(" (WavLM model)"),ngr=l(),dT=a("p"),sgr=o("The model is set in evaluation mode by default using "),tve=a("code"),lgr=o("model.eval()"),igr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=a("code"),dgr=o("model.train()"),cgr=l(),F(cT.$$.fragment),Dze=l(),Pd=a("h2"),fT=a("a"),nve=a("span"),F(c9.$$.fragment),fgr=l(),sve=a("span"),mgr=o("AutoModelForAudioFrameClassification"),Gze=l(),Qo=a("div"),F(f9.$$.fragment),ggr=l(),Bd=a("p"),hgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yH=a("a"),pgr=o("from_pretrained()"),_gr=o(" class method or the "),xH=a("a"),ugr=o("from_config()"),bgr=o(` class
method.`),vgr=l(),m9=a("p"),Fgr=o("This class cannot be instantiated directly using "),lve=a("code"),Tgr=o("__init__()"),Mgr=o(" (throws an error)."),Egr=l(),Ct=a("div"),F(g9.$$.fragment),Cgr=l(),ive=a("p"),wgr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Agr=l(),Id=a("p"),Lgr=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),ygr=o("not"),xgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),$gr=o("from_pretrained()"),kgr=o(" to load the model weights."),Sgr=l(),F(mT.$$.fragment),Rgr=l(),go=a("div"),F(h9.$$.fragment),Pgr=l(),cve=a("p"),Bgr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Igr=l(),Ka=a("p"),Ngr=o("The model class to instantiate is selected based on the "),fve=a("code"),qgr=o("model_type"),jgr=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),Dgr=o("pretrained_model_name_or_path"),Ggr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),Ogr=o("pretrained_model_name_or_path"),Vgr=o(":"),Xgr=l(),Ho=a("ul"),gT=a("li"),hve=a("strong"),zgr=o("data2vec-audio"),Wgr=o(" \u2014 "),kH=a("a"),Qgr=o("Data2VecAudioForAudioFrameClassification"),Hgr=o(" (Data2VecAudio model)"),Ugr=l(),hT=a("li"),pve=a("strong"),Jgr=o("mctct"),Ygr=o(" \u2014 "),SH=a("a"),Kgr=o("MCTCTForAudioFrameClassification"),Zgr=o(" (M-CTC-T model)"),ehr=l(),pT=a("li"),_ve=a("strong"),ohr=o("unispeech-sat"),rhr=o(" \u2014 "),RH=a("a"),thr=o("UniSpeechSatForAudioFrameClassification"),ahr=o(" (UniSpeechSat model)"),nhr=l(),_T=a("li"),uve=a("strong"),shr=o("wav2vec2"),lhr=o(" \u2014 "),PH=a("a"),ihr=o("Wav2Vec2ForAudioFrameClassification"),dhr=o(" (Wav2Vec2 model)"),chr=l(),uT=a("li"),bve=a("strong"),fhr=o("wav2vec2-conformer"),mhr=o(" \u2014 "),BH=a("a"),ghr=o("Wav2Vec2ConformerForAudioFrameClassification"),hhr=o(" (Wav2Vec2-Conformer model)"),phr=l(),bT=a("li"),vve=a("strong"),_hr=o("wavlm"),uhr=o(" \u2014 "),IH=a("a"),bhr=o("WavLMForAudioFrameClassification"),vhr=o(" (WavLM model)"),Fhr=l(),vT=a("p"),Thr=o("The model is set in evaluation mode by default using "),Fve=a("code"),Mhr=o("model.eval()"),Ehr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=a("code"),Chr=o("model.train()"),whr=l(),F(FT.$$.fragment),Oze=l(),Nd=a("h2"),TT=a("a"),Mve=a("span"),F(p9.$$.fragment),Ahr=l(),Eve=a("span"),Lhr=o("AutoModelForCTC"),Vze=l(),Uo=a("div"),F(_9.$$.fragment),yhr=l(),qd=a("p"),xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NH=a("a"),$hr=o("from_pretrained()"),khr=o(" class method or the "),qH=a("a"),Shr=o("from_config()"),Rhr=o(` class
method.`),Phr=l(),u9=a("p"),Bhr=o("This class cannot be instantiated directly using "),Cve=a("code"),Ihr=o("__init__()"),Nhr=o(" (throws an error)."),qhr=l(),wt=a("div"),F(b9.$$.fragment),jhr=l(),wve=a("p"),Dhr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ghr=l(),jd=a("p"),Ohr=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),Vhr=o("not"),Xhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),zhr=o("from_pretrained()"),Whr=o(" to load the model weights."),Qhr=l(),F(MT.$$.fragment),Hhr=l(),ho=a("div"),F(v9.$$.fragment),Uhr=l(),Lve=a("p"),Jhr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Yhr=l(),Za=a("p"),Khr=o("The model class to instantiate is selected based on the "),yve=a("code"),Zhr=o("model_type"),epr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(":"),npr=l(),Le=a("ul"),ET=a("li"),kve=a("strong"),spr=o("data2vec-audio"),lpr=o(" \u2014 "),DH=a("a"),ipr=o("Data2VecAudioForCTC"),dpr=o(" (Data2VecAudio model)"),cpr=l(),CT=a("li"),Sve=a("strong"),fpr=o("hubert"),mpr=o(" \u2014 "),GH=a("a"),gpr=o("HubertForCTC"),hpr=o(" (Hubert model)"),ppr=l(),wT=a("li"),Rve=a("strong"),_pr=o("mctct"),upr=o(" \u2014 "),OH=a("a"),bpr=o("MCTCTForCTC"),vpr=o(" (M-CTC-T model)"),Fpr=l(),AT=a("li"),Pve=a("strong"),Tpr=o("sew"),Mpr=o(" \u2014 "),VH=a("a"),Epr=o("SEWForCTC"),Cpr=o(" (SEW model)"),wpr=l(),LT=a("li"),Bve=a("strong"),Apr=o("sew-d"),Lpr=o(" \u2014 "),XH=a("a"),ypr=o("SEWDForCTC"),xpr=o(" (SEW-D model)"),$pr=l(),yT=a("li"),Ive=a("strong"),kpr=o("unispeech"),Spr=o(" \u2014 "),zH=a("a"),Rpr=o("UniSpeechForCTC"),Ppr=o(" (UniSpeech model)"),Bpr=l(),xT=a("li"),Nve=a("strong"),Ipr=o("unispeech-sat"),Npr=o(" \u2014 "),WH=a("a"),qpr=o("UniSpeechSatForCTC"),jpr=o(" (UniSpeechSat model)"),Dpr=l(),$T=a("li"),qve=a("strong"),Gpr=o("wav2vec2"),Opr=o(" \u2014 "),QH=a("a"),Vpr=o("Wav2Vec2ForCTC"),Xpr=o(" (Wav2Vec2 model)"),zpr=l(),kT=a("li"),jve=a("strong"),Wpr=o("wav2vec2-conformer"),Qpr=o(" \u2014 "),HH=a("a"),Hpr=o("Wav2Vec2ConformerForCTC"),Upr=o(" (Wav2Vec2-Conformer model)"),Jpr=l(),ST=a("li"),Dve=a("strong"),Ypr=o("wavlm"),Kpr=o(" \u2014 "),UH=a("a"),Zpr=o("WavLMForCTC"),e_r=o(" (WavLM model)"),o_r=l(),RT=a("p"),r_r=o("The model is set in evaluation mode by default using "),Gve=a("code"),t_r=o("model.eval()"),a_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=a("code"),n_r=o("model.train()"),s_r=l(),F(PT.$$.fragment),Xze=l(),Dd=a("h2"),BT=a("a"),Vve=a("span"),F(F9.$$.fragment),l_r=l(),Xve=a("span"),i_r=o("AutoModelForSpeechSeq2Seq"),zze=l(),Jo=a("div"),F(T9.$$.fragment),d_r=l(),Gd=a("p"),c_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JH=a("a"),f_r=o("from_pretrained()"),m_r=o(" class method or the "),YH=a("a"),g_r=o("from_config()"),h_r=o(` class
method.`),p_r=l(),M9=a("p"),__r=o("This class cannot be instantiated directly using "),zve=a("code"),u_r=o("__init__()"),b_r=o(" (throws an error)."),v_r=l(),At=a("div"),F(E9.$$.fragment),F_r=l(),Wve=a("p"),T_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),M_r=l(),Od=a("p"),E_r=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),C_r=o("not"),w_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),A_r=o("from_pretrained()"),L_r=o(" to load the model weights."),y_r=l(),F(IT.$$.fragment),x_r=l(),po=a("div"),F(C9.$$.fragment),$_r=l(),Hve=a("p"),k_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),S_r=l(),en=a("p"),R_r=o("The model class to instantiate is selected based on the "),Uve=a("code"),P_r=o("model_type"),B_r=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),I_r=o("pretrained_model_name_or_path"),N_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),q_r=o("pretrained_model_name_or_path"),j_r=o(":"),D_r=l(),w9=a("ul"),NT=a("li"),Kve=a("strong"),G_r=o("speech-encoder-decoder"),O_r=o(" \u2014 "),ZH=a("a"),V_r=o("SpeechEncoderDecoderModel"),X_r=o(" (Speech Encoder decoder model)"),z_r=l(),qT=a("li"),Zve=a("strong"),W_r=o("speech_to_text"),Q_r=o(" \u2014 "),eU=a("a"),H_r=o("Speech2TextForConditionalGeneration"),U_r=o(" (Speech2Text model)"),J_r=l(),jT=a("p"),Y_r=o("The model is set in evaluation mode by default using "),eFe=a("code"),K_r=o("model.eval()"),Z_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=a("code"),eur=o("model.train()"),our=l(),F(DT.$$.fragment),Wze=l(),Vd=a("h2"),GT=a("a"),rFe=a("span"),F(A9.$$.fragment),rur=l(),tFe=a("span"),tur=o("AutoModelForAudioXVector"),Qze=l(),Yo=a("div"),F(L9.$$.fragment),aur=l(),Xd=a("p"),nur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oU=a("a"),sur=o("from_pretrained()"),lur=o(" class method or the "),rU=a("a"),iur=o("from_config()"),dur=o(` class
method.`),cur=l(),y9=a("p"),fur=o("This class cannot be instantiated directly using "),aFe=a("code"),mur=o("__init__()"),gur=o(" (throws an error)."),hur=l(),Lt=a("div"),F(x9.$$.fragment),pur=l(),nFe=a("p"),_ur=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),uur=l(),zd=a("p"),bur=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),vur=o("not"),Fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),Tur=o("from_pretrained()"),Mur=o(" to load the model weights."),Eur=l(),F(OT.$$.fragment),Cur=l(),_o=a("div"),F($9.$$.fragment),wur=l(),lFe=a("p"),Aur=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Lur=l(),on=a("p"),yur=o("The model class to instantiate is selected based on the "),iFe=a("code"),xur=o("model_type"),$ur=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),kur=o("pretrained_model_name_or_path"),Sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),Rur=o("pretrained_model_name_or_path"),Pur=o(":"),Bur=l(),tt=a("ul"),VT=a("li"),fFe=a("strong"),Iur=o("data2vec-audio"),Nur=o(" \u2014 "),aU=a("a"),qur=o("Data2VecAudioForXVector"),jur=o(" (Data2VecAudio model)"),Dur=l(),XT=a("li"),mFe=a("strong"),Gur=o("unispeech-sat"),Our=o(" \u2014 "),nU=a("a"),Vur=o("UniSpeechSatForXVector"),Xur=o(" (UniSpeechSat model)"),zur=l(),zT=a("li"),gFe=a("strong"),Wur=o("wav2vec2"),Qur=o(" \u2014 "),sU=a("a"),Hur=o("Wav2Vec2ForXVector"),Uur=o(" (Wav2Vec2 model)"),Jur=l(),WT=a("li"),hFe=a("strong"),Yur=o("wav2vec2-conformer"),Kur=o(" \u2014 "),lU=a("a"),Zur=o("Wav2Vec2ConformerForXVector"),e1r=o(" (Wav2Vec2-Conformer model)"),o1r=l(),QT=a("li"),pFe=a("strong"),r1r=o("wavlm"),t1r=o(" \u2014 "),iU=a("a"),a1r=o("WavLMForXVector"),n1r=o(" (WavLM model)"),s1r=l(),HT=a("p"),l1r=o("The model is set in evaluation mode by default using "),_Fe=a("code"),i1r=o("model.eval()"),d1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=a("code"),c1r=o("model.train()"),f1r=l(),F(UT.$$.fragment),Hze=l(),Wd=a("h2"),JT=a("a"),bFe=a("span"),F(k9.$$.fragment),m1r=l(),vFe=a("span"),g1r=o("AutoModelForMaskedImageModeling"),Uze=l(),Ko=a("div"),F(S9.$$.fragment),h1r=l(),Qd=a("p"),p1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dU=a("a"),_1r=o("from_pretrained()"),u1r=o(" class method or the "),cU=a("a"),b1r=o("from_config()"),v1r=o(` class
method.`),F1r=l(),R9=a("p"),T1r=o("This class cannot be instantiated directly using "),FFe=a("code"),M1r=o("__init__()"),E1r=o(" (throws an error)."),C1r=l(),yt=a("div"),F(P9.$$.fragment),w1r=l(),TFe=a("p"),A1r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),L1r=l(),Hd=a("p"),y1r=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),x1r=o("not"),$1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),k1r=o("from_pretrained()"),S1r=o(" to load the model weights."),R1r=l(),F(YT.$$.fragment),P1r=l(),uo=a("div"),F(B9.$$.fragment),B1r=l(),EFe=a("p"),I1r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),N1r=l(),rn=a("p"),q1r=o("The model class to instantiate is selected based on the "),CFe=a("code"),j1r=o("model_type"),D1r=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),G1r=o("pretrained_model_name_or_path"),O1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),V1r=o("pretrained_model_name_or_path"),X1r=o(":"),z1r=l(),Ud=a("ul"),KT=a("li"),LFe=a("strong"),W1r=o("deit"),Q1r=o(" \u2014 "),mU=a("a"),H1r=o("DeiTForMaskedImageModeling"),U1r=o(" (DeiT model)"),J1r=l(),ZT=a("li"),yFe=a("strong"),Y1r=o("swin"),K1r=o(" \u2014 "),gU=a("a"),Z1r=o("SwinForMaskedImageModeling"),e7r=o(" (Swin Transformer model)"),o7r=l(),eM=a("li"),xFe=a("strong"),r7r=o("vit"),t7r=o(" \u2014 "),hU=a("a"),a7r=o("ViTForMaskedImageModeling"),n7r=o(" (ViT model)"),s7r=l(),oM=a("p"),l7r=o("The model is set in evaluation mode by default using "),$Fe=a("code"),i7r=o("model.eval()"),d7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kFe=a("code"),c7r=o("model.train()"),f7r=l(),F(rM.$$.fragment),Jze=l(),Jd=a("h2"),tM=a("a"),SFe=a("span"),F(I9.$$.fragment),m7r=l(),RFe=a("span"),g7r=o("AutoModelForObjectDetection"),Yze=l(),Zo=a("div"),F(N9.$$.fragment),h7r=l(),Yd=a("p"),p7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pU=a("a"),_7r=o("from_pretrained()"),u7r=o(" class method or the "),_U=a("a"),b7r=o("from_config()"),v7r=o(` class
method.`),F7r=l(),q9=a("p"),T7r=o("This class cannot be instantiated directly using "),PFe=a("code"),M7r=o("__init__()"),E7r=o(" (throws an error)."),C7r=l(),xt=a("div"),F(j9.$$.fragment),w7r=l(),BFe=a("p"),A7r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),L7r=l(),Kd=a("p"),y7r=o(`Note:
Loading a model from its configuration file does `),IFe=a("strong"),x7r=o("not"),$7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),k7r=o("from_pretrained()"),S7r=o(" to load the model weights."),R7r=l(),F(aM.$$.fragment),P7r=l(),bo=a("div"),F(D9.$$.fragment),B7r=l(),NFe=a("p"),I7r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),N7r=l(),tn=a("p"),q7r=o("The model class to instantiate is selected based on the "),qFe=a("code"),j7r=o("model_type"),D7r=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),G7r=o("pretrained_model_name_or_path"),O7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(":"),z7r=l(),G9=a("ul"),nM=a("li"),GFe=a("strong"),W7r=o("detr"),Q7r=o(" \u2014 "),bU=a("a"),H7r=o("DetrForObjectDetection"),U7r=o(" (DETR model)"),J7r=l(),sM=a("li"),OFe=a("strong"),Y7r=o("yolos"),K7r=o(" \u2014 "),vU=a("a"),Z7r=o("YolosForObjectDetection"),e2r=o(" (YOLOS model)"),o2r=l(),lM=a("p"),r2r=o("The model is set in evaluation mode by default using "),VFe=a("code"),t2r=o("model.eval()"),a2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=a("code"),n2r=o("model.train()"),s2r=l(),F(iM.$$.fragment),Kze=l(),Zd=a("h2"),dM=a("a"),zFe=a("span"),F(O9.$$.fragment),l2r=l(),WFe=a("span"),i2r=o("AutoModelForImageSegmentation"),Zze=l(),er=a("div"),F(V9.$$.fragment),d2r=l(),ec=a("p"),c2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FU=a("a"),f2r=o("from_pretrained()"),m2r=o(" class method or the "),TU=a("a"),g2r=o("from_config()"),h2r=o(` class
method.`),p2r=l(),X9=a("p"),_2r=o("This class cannot be instantiated directly using "),QFe=a("code"),u2r=o("__init__()"),b2r=o(" (throws an error)."),v2r=l(),$t=a("div"),F(z9.$$.fragment),F2r=l(),HFe=a("p"),T2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),M2r=l(),oc=a("p"),E2r=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),C2r=o("not"),w2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),A2r=o("from_pretrained()"),L2r=o(" to load the model weights."),y2r=l(),F(cM.$$.fragment),x2r=l(),vo=a("div"),F(W9.$$.fragment),$2r=l(),JFe=a("p"),k2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),S2r=l(),an=a("p"),R2r=o("The model class to instantiate is selected based on the "),YFe=a("code"),P2r=o("model_type"),B2r=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),I2r=o("pretrained_model_name_or_path"),N2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),q2r=o("pretrained_model_name_or_path"),j2r=o(":"),D2r=l(),e6e=a("ul"),fM=a("li"),o6e=a("strong"),G2r=o("detr"),O2r=o(" \u2014 "),EU=a("a"),V2r=o("DetrForSegmentation"),X2r=o(" (DETR model)"),z2r=l(),mM=a("p"),W2r=o("The model is set in evaluation mode by default using "),r6e=a("code"),Q2r=o("model.eval()"),H2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t6e=a("code"),U2r=o("model.train()"),J2r=l(),F(gM.$$.fragment),eWe=l(),rc=a("h2"),hM=a("a"),a6e=a("span"),F(Q9.$$.fragment),Y2r=l(),n6e=a("span"),K2r=o("AutoModelForSemanticSegmentation"),oWe=l(),or=a("div"),F(H9.$$.fragment),Z2r=l(),tc=a("p"),ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CU=a("a"),obr=o("from_pretrained()"),rbr=o(" class method or the "),wU=a("a"),tbr=o("from_config()"),abr=o(` class
method.`),nbr=l(),U9=a("p"),sbr=o("This class cannot be instantiated directly using "),s6e=a("code"),lbr=o("__init__()"),ibr=o(" (throws an error)."),dbr=l(),kt=a("div"),F(J9.$$.fragment),cbr=l(),l6e=a("p"),fbr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),mbr=l(),ac=a("p"),gbr=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),hbr=o("not"),pbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),_br=o("from_pretrained()"),ubr=o(" to load the model weights."),bbr=l(),F(pM.$$.fragment),vbr=l(),Fo=a("div"),F(Y9.$$.fragment),Fbr=l(),d6e=a("p"),Tbr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Mbr=l(),nn=a("p"),Ebr=o("The model class to instantiate is selected based on the "),c6e=a("code"),Cbr=o("model_type"),wbr=o(` property of the config object (either
passed as an argument or loaded from `),f6e=a("code"),Abr=o("pretrained_model_name_or_path"),Lbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=a("code"),ybr=o("pretrained_model_name_or_path"),xbr=o(":"),$br=l(),at=a("ul"),_M=a("li"),g6e=a("strong"),kbr=o("beit"),Sbr=o(" \u2014 "),LU=a("a"),Rbr=o("BeitForSemanticSegmentation"),Pbr=o(" (BEiT model)"),Bbr=l(),uM=a("li"),h6e=a("strong"),Ibr=o("data2vec-vision"),Nbr=o(" \u2014 "),yU=a("a"),qbr=o("Data2VecVisionForSemanticSegmentation"),jbr=o(" (Data2VecVision model)"),Dbr=l(),bM=a("li"),p6e=a("strong"),Gbr=o("dpt"),Obr=o(" \u2014 "),xU=a("a"),Vbr=o("DPTForSemanticSegmentation"),Xbr=o(" (DPT model)"),zbr=l(),vM=a("li"),_6e=a("strong"),Wbr=o("mobilevit"),Qbr=o(" \u2014 "),$U=a("a"),Hbr=o("MobileViTForSemanticSegmentation"),Ubr=o(" (MobileViT model)"),Jbr=l(),FM=a("li"),u6e=a("strong"),Ybr=o("segformer"),Kbr=o(" \u2014 "),kU=a("a"),Zbr=o("SegformerForSemanticSegmentation"),evr=o(" (SegFormer model)"),ovr=l(),TM=a("p"),rvr=o("The model is set in evaluation mode by default using "),b6e=a("code"),tvr=o("model.eval()"),avr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v6e=a("code"),nvr=o("model.train()"),svr=l(),F(MM.$$.fragment),rWe=l(),nc=a("h2"),EM=a("a"),F6e=a("span"),F(K9.$$.fragment),lvr=l(),T6e=a("span"),ivr=o("AutoModelForInstanceSegmentation"),tWe=l(),rr=a("div"),F(Z9.$$.fragment),dvr=l(),sc=a("p"),cvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SU=a("a"),fvr=o("from_pretrained()"),mvr=o(" class method or the "),RU=a("a"),gvr=o("from_config()"),hvr=o(` class
method.`),pvr=l(),ex=a("p"),_vr=o("This class cannot be instantiated directly using "),M6e=a("code"),uvr=o("__init__()"),bvr=o(" (throws an error)."),vvr=l(),St=a("div"),F(ox.$$.fragment),Fvr=l(),E6e=a("p"),Tvr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Mvr=l(),lc=a("p"),Evr=o(`Note:
Loading a model from its configuration file does `),C6e=a("strong"),Cvr=o("not"),wvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),Avr=o("from_pretrained()"),Lvr=o(" to load the model weights."),yvr=l(),F(CM.$$.fragment),xvr=l(),To=a("div"),F(rx.$$.fragment),$vr=l(),w6e=a("p"),kvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Svr=l(),sn=a("p"),Rvr=o("The model class to instantiate is selected based on the "),A6e=a("code"),Pvr=o("model_type"),Bvr=o(` property of the config object (either
passed as an argument or loaded from `),L6e=a("code"),Ivr=o("pretrained_model_name_or_path"),Nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y6e=a("code"),qvr=o("pretrained_model_name_or_path"),jvr=o(":"),Dvr=l(),x6e=a("ul"),wM=a("li"),$6e=a("strong"),Gvr=o("maskformer"),Ovr=o(" \u2014 "),BU=a("a"),Vvr=o("MaskFormerForInstanceSegmentation"),Xvr=o(" (MaskFormer model)"),zvr=l(),AM=a("p"),Wvr=o("The model is set in evaluation mode by default using "),k6e=a("code"),Qvr=o("model.eval()"),Hvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S6e=a("code"),Uvr=o("model.train()"),Jvr=l(),F(LM.$$.fragment),aWe=l(),ic=a("h2"),yM=a("a"),R6e=a("span"),F(tx.$$.fragment),Yvr=l(),P6e=a("span"),Kvr=o("TFAutoModel"),nWe=l(),tr=a("div"),F(ax.$$.fragment),Zvr=l(),dc=a("p"),eFr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IU=a("a"),oFr=o("from_pretrained()"),rFr=o(" class method or the "),NU=a("a"),tFr=o("from_config()"),aFr=o(` class
method.`),nFr=l(),nx=a("p"),sFr=o("This class cannot be instantiated directly using "),B6e=a("code"),lFr=o("__init__()"),iFr=o(" (throws an error)."),dFr=l(),Rt=a("div"),F(sx.$$.fragment),cFr=l(),I6e=a("p"),fFr=o("Instantiates one of the base model classes of the library from a configuration."),mFr=l(),cc=a("p"),gFr=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),hFr=o("not"),pFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),_Fr=o("from_pretrained()"),uFr=o(" to load the model weights."),bFr=l(),F(xM.$$.fragment),vFr=l(),kr=a("div"),F(lx.$$.fragment),FFr=l(),q6e=a("p"),TFr=o("Instantiate one of the base model classes of the library from a pretrained model."),MFr=l(),ln=a("p"),EFr=o("The model class to instantiate is selected based on the "),j6e=a("code"),CFr=o("model_type"),wFr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),AFr=o("pretrained_model_name_or_path"),LFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),yFr=o("pretrained_model_name_or_path"),xFr=o(":"),$Fr=l(),I=a("ul"),$M=a("li"),O6e=a("strong"),kFr=o("albert"),SFr=o(" \u2014 "),jU=a("a"),RFr=o("TFAlbertModel"),PFr=o(" (ALBERT model)"),BFr=l(),kM=a("li"),V6e=a("strong"),IFr=o("bart"),NFr=o(" \u2014 "),DU=a("a"),qFr=o("TFBartModel"),jFr=o(" (BART model)"),DFr=l(),SM=a("li"),X6e=a("strong"),GFr=o("bert"),OFr=o(" \u2014 "),GU=a("a"),VFr=o("TFBertModel"),XFr=o(" (BERT model)"),zFr=l(),RM=a("li"),z6e=a("strong"),WFr=o("blenderbot"),QFr=o(" \u2014 "),OU=a("a"),HFr=o("TFBlenderbotModel"),UFr=o(" (Blenderbot model)"),JFr=l(),PM=a("li"),W6e=a("strong"),YFr=o("blenderbot-small"),KFr=o(" \u2014 "),VU=a("a"),ZFr=o("TFBlenderbotSmallModel"),e6r=o(" (BlenderbotSmall model)"),o6r=l(),BM=a("li"),Q6e=a("strong"),r6r=o("camembert"),t6r=o(" \u2014 "),XU=a("a"),a6r=o("TFCamembertModel"),n6r=o(" (CamemBERT model)"),s6r=l(),IM=a("li"),H6e=a("strong"),l6r=o("clip"),i6r=o(" \u2014 "),zU=a("a"),d6r=o("TFCLIPModel"),c6r=o(" (CLIP model)"),f6r=l(),NM=a("li"),U6e=a("strong"),m6r=o("convbert"),g6r=o(" \u2014 "),WU=a("a"),h6r=o("TFConvBertModel"),p6r=o(" (ConvBERT model)"),_6r=l(),qM=a("li"),J6e=a("strong"),u6r=o("convnext"),b6r=o(" \u2014 "),QU=a("a"),v6r=o("TFConvNextModel"),F6r=o(" (ConvNeXT model)"),T6r=l(),jM=a("li"),Y6e=a("strong"),M6r=o("ctrl"),E6r=o(" \u2014 "),HU=a("a"),C6r=o("TFCTRLModel"),w6r=o(" (CTRL model)"),A6r=l(),DM=a("li"),K6e=a("strong"),L6r=o("data2vec-vision"),y6r=o(" \u2014 "),UU=a("a"),x6r=o("TFData2VecVisionModel"),$6r=o(" (Data2VecVision model)"),k6r=l(),GM=a("li"),Z6e=a("strong"),S6r=o("deberta"),R6r=o(" \u2014 "),JU=a("a"),P6r=o("TFDebertaModel"),B6r=o(" (DeBERTa model)"),I6r=l(),OM=a("li"),eTe=a("strong"),N6r=o("deberta-v2"),q6r=o(" \u2014 "),YU=a("a"),j6r=o("TFDebertaV2Model"),D6r=o(" (DeBERTa-v2 model)"),G6r=l(),VM=a("li"),oTe=a("strong"),O6r=o("deit"),V6r=o(" \u2014 "),KU=a("a"),X6r=o("TFDeiTModel"),z6r=o(" (DeiT model)"),W6r=l(),XM=a("li"),rTe=a("strong"),Q6r=o("distilbert"),H6r=o(" \u2014 "),ZU=a("a"),U6r=o("TFDistilBertModel"),J6r=o(" (DistilBERT model)"),Y6r=l(),zM=a("li"),tTe=a("strong"),K6r=o("dpr"),Z6r=o(" \u2014 "),eJ=a("a"),eTr=o("TFDPRQuestionEncoder"),oTr=o(" (DPR model)"),rTr=l(),WM=a("li"),aTe=a("strong"),tTr=o("electra"),aTr=o(" \u2014 "),oJ=a("a"),nTr=o("TFElectraModel"),sTr=o(" (ELECTRA model)"),lTr=l(),QM=a("li"),nTe=a("strong"),iTr=o("flaubert"),dTr=o(" \u2014 "),rJ=a("a"),cTr=o("TFFlaubertModel"),fTr=o(" (FlauBERT model)"),mTr=l(),Zs=a("li"),sTe=a("strong"),gTr=o("funnel"),hTr=o(" \u2014 "),tJ=a("a"),pTr=o("TFFunnelModel"),_Tr=o(" or "),aJ=a("a"),uTr=o("TFFunnelBaseModel"),bTr=o(" (Funnel Transformer model)"),vTr=l(),HM=a("li"),lTe=a("strong"),FTr=o("gpt2"),TTr=o(" \u2014 "),nJ=a("a"),MTr=o("TFGPT2Model"),ETr=o(" (OpenAI GPT-2 model)"),CTr=l(),UM=a("li"),iTe=a("strong"),wTr=o("gptj"),ATr=o(" \u2014 "),sJ=a("a"),LTr=o("TFGPTJModel"),yTr=o(" (GPT-J model)"),xTr=l(),JM=a("li"),dTe=a("strong"),$Tr=o("hubert"),kTr=o(" \u2014 "),lJ=a("a"),STr=o("TFHubertModel"),RTr=o(" (Hubert model)"),PTr=l(),YM=a("li"),cTe=a("strong"),BTr=o("layoutlm"),ITr=o(" \u2014 "),iJ=a("a"),NTr=o("TFLayoutLMModel"),qTr=o(" (LayoutLM model)"),jTr=l(),KM=a("li"),fTe=a("strong"),DTr=o("led"),GTr=o(" \u2014 "),dJ=a("a"),OTr=o("TFLEDModel"),VTr=o(" (LED model)"),XTr=l(),ZM=a("li"),mTe=a("strong"),zTr=o("longformer"),WTr=o(" \u2014 "),cJ=a("a"),QTr=o("TFLongformerModel"),HTr=o(" (Longformer model)"),UTr=l(),e4=a("li"),gTe=a("strong"),JTr=o("lxmert"),YTr=o(" \u2014 "),fJ=a("a"),KTr=o("TFLxmertModel"),ZTr=o(" (LXMERT model)"),eMr=l(),o4=a("li"),hTe=a("strong"),oMr=o("marian"),rMr=o(" \u2014 "),mJ=a("a"),tMr=o("TFMarianModel"),aMr=o(" (Marian model)"),nMr=l(),r4=a("li"),pTe=a("strong"),sMr=o("mbart"),lMr=o(" \u2014 "),gJ=a("a"),iMr=o("TFMBartModel"),dMr=o(" (mBART model)"),cMr=l(),t4=a("li"),_Te=a("strong"),fMr=o("mobilebert"),mMr=o(" \u2014 "),hJ=a("a"),gMr=o("TFMobileBertModel"),hMr=o(" (MobileBERT model)"),pMr=l(),a4=a("li"),uTe=a("strong"),_Mr=o("mpnet"),uMr=o(" \u2014 "),pJ=a("a"),bMr=o("TFMPNetModel"),vMr=o(" (MPNet model)"),FMr=l(),n4=a("li"),bTe=a("strong"),TMr=o("mt5"),MMr=o(" \u2014 "),_J=a("a"),EMr=o("TFMT5Model"),CMr=o(" (MT5 model)"),wMr=l(),s4=a("li"),vTe=a("strong"),AMr=o("openai-gpt"),LMr=o(" \u2014 "),uJ=a("a"),yMr=o("TFOpenAIGPTModel"),xMr=o(" (OpenAI GPT model)"),$Mr=l(),l4=a("li"),FTe=a("strong"),kMr=o("opt"),SMr=o(" \u2014 "),bJ=a("a"),RMr=o("TFOPTModel"),PMr=o(" (OPT model)"),BMr=l(),i4=a("li"),TTe=a("strong"),IMr=o("pegasus"),NMr=o(" \u2014 "),vJ=a("a"),qMr=o("TFPegasusModel"),jMr=o(" (Pegasus model)"),DMr=l(),d4=a("li"),MTe=a("strong"),GMr=o("regnet"),OMr=o(" \u2014 "),FJ=a("a"),VMr=o("TFRegNetModel"),XMr=o(" (RegNet model)"),zMr=l(),c4=a("li"),ETe=a("strong"),WMr=o("rembert"),QMr=o(" \u2014 "),TJ=a("a"),HMr=o("TFRemBertModel"),UMr=o(" (RemBERT model)"),JMr=l(),f4=a("li"),CTe=a("strong"),YMr=o("resnet"),KMr=o(" \u2014 "),MJ=a("a"),ZMr=o("TFResNetModel"),e4r=o(" (ResNet model)"),o4r=l(),m4=a("li"),wTe=a("strong"),r4r=o("roberta"),t4r=o(" \u2014 "),EJ=a("a"),a4r=o("TFRobertaModel"),n4r=o(" (RoBERTa model)"),s4r=l(),g4=a("li"),ATe=a("strong"),l4r=o("roformer"),i4r=o(" \u2014 "),CJ=a("a"),d4r=o("TFRoFormerModel"),c4r=o(" (RoFormer model)"),f4r=l(),h4=a("li"),LTe=a("strong"),m4r=o("segformer"),g4r=o(" \u2014 "),wJ=a("a"),h4r=o("TFSegformerModel"),p4r=o(" (SegFormer model)"),_4r=l(),p4=a("li"),yTe=a("strong"),u4r=o("speech_to_text"),b4r=o(" \u2014 "),AJ=a("a"),v4r=o("TFSpeech2TextModel"),F4r=o(" (Speech2Text model)"),T4r=l(),_4=a("li"),xTe=a("strong"),M4r=o("swin"),E4r=o(" \u2014 "),LJ=a("a"),C4r=o("TFSwinModel"),w4r=o(" (Swin Transformer model)"),A4r=l(),u4=a("li"),$Te=a("strong"),L4r=o("t5"),y4r=o(" \u2014 "),yJ=a("a"),x4r=o("TFT5Model"),$4r=o(" (T5 model)"),k4r=l(),b4=a("li"),kTe=a("strong"),S4r=o("tapas"),R4r=o(" \u2014 "),xJ=a("a"),P4r=o("TFTapasModel"),B4r=o(" (TAPAS model)"),I4r=l(),v4=a("li"),STe=a("strong"),N4r=o("transfo-xl"),q4r=o(" \u2014 "),$J=a("a"),j4r=o("TFTransfoXLModel"),D4r=o(" (Transformer-XL model)"),G4r=l(),F4=a("li"),RTe=a("strong"),O4r=o("vit"),V4r=o(" \u2014 "),kJ=a("a"),X4r=o("TFViTModel"),z4r=o(" (ViT model)"),W4r=l(),T4=a("li"),PTe=a("strong"),Q4r=o("vit_mae"),H4r=o(" \u2014 "),SJ=a("a"),U4r=o("TFViTMAEModel"),J4r=o(" (ViTMAE model)"),Y4r=l(),M4=a("li"),BTe=a("strong"),K4r=o("wav2vec2"),Z4r=o(" \u2014 "),RJ=a("a"),eEr=o("TFWav2Vec2Model"),oEr=o(" (Wav2Vec2 model)"),rEr=l(),E4=a("li"),ITe=a("strong"),tEr=o("xlm"),aEr=o(" \u2014 "),PJ=a("a"),nEr=o("TFXLMModel"),sEr=o(" (XLM model)"),lEr=l(),C4=a("li"),NTe=a("strong"),iEr=o("xlm-roberta"),dEr=o(" \u2014 "),BJ=a("a"),cEr=o("TFXLMRobertaModel"),fEr=o(" (XLM-RoBERTa model)"),mEr=l(),w4=a("li"),qTe=a("strong"),gEr=o("xlnet"),hEr=o(" \u2014 "),IJ=a("a"),pEr=o("TFXLNetModel"),_Er=o(" (XLNet model)"),uEr=l(),F(A4.$$.fragment),sWe=l(),fc=a("h2"),L4=a("a"),jTe=a("span"),F(ix.$$.fragment),bEr=l(),DTe=a("span"),vEr=o("TFAutoModelForPreTraining"),lWe=l(),ar=a("div"),F(dx.$$.fragment),FEr=l(),mc=a("p"),TEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NJ=a("a"),MEr=o("from_pretrained()"),EEr=o(" class method or the "),qJ=a("a"),CEr=o("from_config()"),wEr=o(` class
method.`),AEr=l(),cx=a("p"),LEr=o("This class cannot be instantiated directly using "),GTe=a("code"),yEr=o("__init__()"),xEr=o(" (throws an error)."),$Er=l(),Pt=a("div"),F(fx.$$.fragment),kEr=l(),OTe=a("p"),SEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),REr=l(),gc=a("p"),PEr=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),BEr=o("not"),IEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),NEr=o("from_pretrained()"),qEr=o(" to load the model weights."),jEr=l(),F(y4.$$.fragment),DEr=l(),Sr=a("div"),F(mx.$$.fragment),GEr=l(),XTe=a("p"),OEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VEr=l(),dn=a("p"),XEr=o("The model class to instantiate is selected based on the "),zTe=a("code"),zEr=o("model_type"),WEr=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),QEr=o("pretrained_model_name_or_path"),HEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),UEr=o("pretrained_model_name_or_path"),JEr=o(":"),YEr=l(),se=a("ul"),x4=a("li"),HTe=a("strong"),KEr=o("albert"),ZEr=o(" \u2014 "),DJ=a("a"),eCr=o("TFAlbertForPreTraining"),oCr=o(" (ALBERT model)"),rCr=l(),$4=a("li"),UTe=a("strong"),tCr=o("bart"),aCr=o(" \u2014 "),GJ=a("a"),nCr=o("TFBartForConditionalGeneration"),sCr=o(" (BART model)"),lCr=l(),k4=a("li"),JTe=a("strong"),iCr=o("bert"),dCr=o(" \u2014 "),OJ=a("a"),cCr=o("TFBertForPreTraining"),fCr=o(" (BERT model)"),mCr=l(),S4=a("li"),YTe=a("strong"),gCr=o("camembert"),hCr=o(" \u2014 "),VJ=a("a"),pCr=o("TFCamembertForMaskedLM"),_Cr=o(" (CamemBERT model)"),uCr=l(),R4=a("li"),KTe=a("strong"),bCr=o("ctrl"),vCr=o(" \u2014 "),XJ=a("a"),FCr=o("TFCTRLLMHeadModel"),TCr=o(" (CTRL model)"),MCr=l(),P4=a("li"),ZTe=a("strong"),ECr=o("distilbert"),CCr=o(" \u2014 "),zJ=a("a"),wCr=o("TFDistilBertForMaskedLM"),ACr=o(" (DistilBERT model)"),LCr=l(),B4=a("li"),eMe=a("strong"),yCr=o("electra"),xCr=o(" \u2014 "),WJ=a("a"),$Cr=o("TFElectraForPreTraining"),kCr=o(" (ELECTRA model)"),SCr=l(),I4=a("li"),oMe=a("strong"),RCr=o("flaubert"),PCr=o(" \u2014 "),QJ=a("a"),BCr=o("TFFlaubertWithLMHeadModel"),ICr=o(" (FlauBERT model)"),NCr=l(),N4=a("li"),rMe=a("strong"),qCr=o("funnel"),jCr=o(" \u2014 "),HJ=a("a"),DCr=o("TFFunnelForPreTraining"),GCr=o(" (Funnel Transformer model)"),OCr=l(),q4=a("li"),tMe=a("strong"),VCr=o("gpt2"),XCr=o(" \u2014 "),UJ=a("a"),zCr=o("TFGPT2LMHeadModel"),WCr=o(" (OpenAI GPT-2 model)"),QCr=l(),j4=a("li"),aMe=a("strong"),HCr=o("layoutlm"),UCr=o(" \u2014 "),JJ=a("a"),JCr=o("TFLayoutLMForMaskedLM"),YCr=o(" (LayoutLM model)"),KCr=l(),D4=a("li"),nMe=a("strong"),ZCr=o("lxmert"),e5r=o(" \u2014 "),YJ=a("a"),o5r=o("TFLxmertForPreTraining"),r5r=o(" (LXMERT model)"),t5r=l(),G4=a("li"),sMe=a("strong"),a5r=o("mobilebert"),n5r=o(" \u2014 "),KJ=a("a"),s5r=o("TFMobileBertForPreTraining"),l5r=o(" (MobileBERT model)"),i5r=l(),O4=a("li"),lMe=a("strong"),d5r=o("mpnet"),c5r=o(" \u2014 "),ZJ=a("a"),f5r=o("TFMPNetForMaskedLM"),m5r=o(" (MPNet model)"),g5r=l(),V4=a("li"),iMe=a("strong"),h5r=o("openai-gpt"),p5r=o(" \u2014 "),eY=a("a"),_5r=o("TFOpenAIGPTLMHeadModel"),u5r=o(" (OpenAI GPT model)"),b5r=l(),X4=a("li"),dMe=a("strong"),v5r=o("roberta"),F5r=o(" \u2014 "),oY=a("a"),T5r=o("TFRobertaForMaskedLM"),M5r=o(" (RoBERTa model)"),E5r=l(),z4=a("li"),cMe=a("strong"),C5r=o("t5"),w5r=o(" \u2014 "),rY=a("a"),A5r=o("TFT5ForConditionalGeneration"),L5r=o(" (T5 model)"),y5r=l(),W4=a("li"),fMe=a("strong"),x5r=o("tapas"),$5r=o(" \u2014 "),tY=a("a"),k5r=o("TFTapasForMaskedLM"),S5r=o(" (TAPAS model)"),R5r=l(),Q4=a("li"),mMe=a("strong"),P5r=o("transfo-xl"),B5r=o(" \u2014 "),aY=a("a"),I5r=o("TFTransfoXLLMHeadModel"),N5r=o(" (Transformer-XL model)"),q5r=l(),H4=a("li"),gMe=a("strong"),j5r=o("vit_mae"),D5r=o(" \u2014 "),nY=a("a"),G5r=o("TFViTMAEForPreTraining"),O5r=o(" (ViTMAE model)"),V5r=l(),U4=a("li"),hMe=a("strong"),X5r=o("xlm"),z5r=o(" \u2014 "),sY=a("a"),W5r=o("TFXLMWithLMHeadModel"),Q5r=o(" (XLM model)"),H5r=l(),J4=a("li"),pMe=a("strong"),U5r=o("xlm-roberta"),J5r=o(" \u2014 "),lY=a("a"),Y5r=o("TFXLMRobertaForMaskedLM"),K5r=o(" (XLM-RoBERTa model)"),Z5r=l(),Y4=a("li"),_Me=a("strong"),e3r=o("xlnet"),o3r=o(" \u2014 "),iY=a("a"),r3r=o("TFXLNetLMHeadModel"),t3r=o(" (XLNet model)"),a3r=l(),F(K4.$$.fragment),iWe=l(),hc=a("h2"),Z4=a("a"),uMe=a("span"),F(gx.$$.fragment),n3r=l(),bMe=a("span"),s3r=o("TFAutoModelForCausalLM"),dWe=l(),nr=a("div"),F(hx.$$.fragment),l3r=l(),pc=a("p"),i3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=a("a"),d3r=o("from_pretrained()"),c3r=o(" class method or the "),cY=a("a"),f3r=o("from_config()"),m3r=o(` class
method.`),g3r=l(),px=a("p"),h3r=o("This class cannot be instantiated directly using "),vMe=a("code"),p3r=o("__init__()"),_3r=o(" (throws an error)."),u3r=l(),Bt=a("div"),F(_x.$$.fragment),b3r=l(),FMe=a("p"),v3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),F3r=l(),_c=a("p"),T3r=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),M3r=o("not"),E3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),C3r=o("from_pretrained()"),w3r=o(" to load the model weights."),A3r=l(),F(eE.$$.fragment),L3r=l(),Rr=a("div"),F(ux.$$.fragment),y3r=l(),MMe=a("p"),x3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$3r=l(),cn=a("p"),k3r=o("The model class to instantiate is selected based on the "),EMe=a("code"),S3r=o("model_type"),R3r=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),P3r=o("pretrained_model_name_or_path"),B3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),I3r=o("pretrained_model_name_or_path"),N3r=o(":"),q3r=l(),Me=a("ul"),oE=a("li"),AMe=a("strong"),j3r=o("bert"),D3r=o(" \u2014 "),mY=a("a"),G3r=o("TFBertLMHeadModel"),O3r=o(" (BERT model)"),V3r=l(),rE=a("li"),LMe=a("strong"),X3r=o("camembert"),z3r=o(" \u2014 "),gY=a("a"),W3r=o("TFCamembertForCausalLM"),Q3r=o(" (CamemBERT model)"),H3r=l(),tE=a("li"),yMe=a("strong"),U3r=o("ctrl"),J3r=o(" \u2014 "),hY=a("a"),Y3r=o("TFCTRLLMHeadModel"),K3r=o(" (CTRL model)"),Z3r=l(),aE=a("li"),xMe=a("strong"),e0r=o("gpt2"),o0r=o(" \u2014 "),pY=a("a"),r0r=o("TFGPT2LMHeadModel"),t0r=o(" (OpenAI GPT-2 model)"),a0r=l(),nE=a("li"),$Me=a("strong"),n0r=o("gptj"),s0r=o(" \u2014 "),_Y=a("a"),l0r=o("TFGPTJForCausalLM"),i0r=o(" (GPT-J model)"),d0r=l(),sE=a("li"),kMe=a("strong"),c0r=o("openai-gpt"),f0r=o(" \u2014 "),uY=a("a"),m0r=o("TFOpenAIGPTLMHeadModel"),g0r=o(" (OpenAI GPT model)"),h0r=l(),lE=a("li"),SMe=a("strong"),p0r=o("opt"),_0r=o(" \u2014 "),bY=a("a"),u0r=o("TFOPTForCausalLM"),b0r=o(" (OPT model)"),v0r=l(),iE=a("li"),RMe=a("strong"),F0r=o("rembert"),T0r=o(" \u2014 "),vY=a("a"),M0r=o("TFRemBertForCausalLM"),E0r=o(" (RemBERT model)"),C0r=l(),dE=a("li"),PMe=a("strong"),w0r=o("roberta"),A0r=o(" \u2014 "),FY=a("a"),L0r=o("TFRobertaForCausalLM"),y0r=o(" (RoBERTa model)"),x0r=l(),cE=a("li"),BMe=a("strong"),$0r=o("roformer"),k0r=o(" \u2014 "),TY=a("a"),S0r=o("TFRoFormerForCausalLM"),R0r=o(" (RoFormer model)"),P0r=l(),fE=a("li"),IMe=a("strong"),B0r=o("transfo-xl"),I0r=o(" \u2014 "),MY=a("a"),N0r=o("TFTransfoXLLMHeadModel"),q0r=o(" (Transformer-XL model)"),j0r=l(),mE=a("li"),NMe=a("strong"),D0r=o("xlm"),G0r=o(" \u2014 "),EY=a("a"),O0r=o("TFXLMWithLMHeadModel"),V0r=o(" (XLM model)"),X0r=l(),gE=a("li"),qMe=a("strong"),z0r=o("xlnet"),W0r=o(" \u2014 "),CY=a("a"),Q0r=o("TFXLNetLMHeadModel"),H0r=o(" (XLNet model)"),U0r=l(),F(hE.$$.fragment),cWe=l(),uc=a("h2"),pE=a("a"),jMe=a("span"),F(bx.$$.fragment),J0r=l(),DMe=a("span"),Y0r=o("TFAutoModelForImageClassification"),fWe=l(),sr=a("div"),F(vx.$$.fragment),K0r=l(),bc=a("p"),Z0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wY=a("a"),ewr=o("from_pretrained()"),owr=o(" class method or the "),AY=a("a"),rwr=o("from_config()"),twr=o(` class
method.`),awr=l(),Fx=a("p"),nwr=o("This class cannot be instantiated directly using "),GMe=a("code"),swr=o("__init__()"),lwr=o(" (throws an error)."),iwr=l(),It=a("div"),F(Tx.$$.fragment),dwr=l(),OMe=a("p"),cwr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fwr=l(),vc=a("p"),mwr=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),gwr=o("not"),hwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),pwr=o("from_pretrained()"),_wr=o(" to load the model weights."),uwr=l(),F(_E.$$.fragment),bwr=l(),Pr=a("div"),F(Mx.$$.fragment),vwr=l(),XMe=a("p"),Fwr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Twr=l(),fn=a("p"),Mwr=o("The model class to instantiate is selected based on the "),zMe=a("code"),Ewr=o("model_type"),Cwr=o(` property of the config object (either
passed as an argument or loaded from `),WMe=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),Lwr=o("pretrained_model_name_or_path"),ywr=o(":"),xwr=l(),Ve=a("ul"),uE=a("li"),HMe=a("strong"),$wr=o("convnext"),kwr=o(" \u2014 "),yY=a("a"),Swr=o("TFConvNextForImageClassification"),Rwr=o(" (ConvNeXT model)"),Pwr=l(),bE=a("li"),UMe=a("strong"),Bwr=o("data2vec-vision"),Iwr=o(" \u2014 "),xY=a("a"),Nwr=o("TFData2VecVisionForImageClassification"),qwr=o(" (Data2VecVision model)"),jwr=l(),el=a("li"),JMe=a("strong"),Dwr=o("deit"),Gwr=o(" \u2014 "),$Y=a("a"),Owr=o("TFDeiTForImageClassification"),Vwr=o(" or "),kY=a("a"),Xwr=o("TFDeiTForImageClassificationWithTeacher"),zwr=o(" (DeiT model)"),Wwr=l(),vE=a("li"),YMe=a("strong"),Qwr=o("regnet"),Hwr=o(" \u2014 "),SY=a("a"),Uwr=o("TFRegNetForImageClassification"),Jwr=o(" (RegNet model)"),Ywr=l(),FE=a("li"),KMe=a("strong"),Kwr=o("resnet"),Zwr=o(" \u2014 "),RY=a("a"),eAr=o("TFResNetForImageClassification"),oAr=o(" (ResNet model)"),rAr=l(),TE=a("li"),ZMe=a("strong"),tAr=o("segformer"),aAr=o(" \u2014 "),PY=a("a"),nAr=o("TFSegformerForImageClassification"),sAr=o(" (SegFormer model)"),lAr=l(),ME=a("li"),e4e=a("strong"),iAr=o("swin"),dAr=o(" \u2014 "),BY=a("a"),cAr=o("TFSwinForImageClassification"),fAr=o(" (Swin Transformer model)"),mAr=l(),EE=a("li"),o4e=a("strong"),gAr=o("vit"),hAr=o(" \u2014 "),IY=a("a"),pAr=o("TFViTForImageClassification"),_Ar=o(" (ViT model)"),uAr=l(),F(CE.$$.fragment),mWe=l(),Fc=a("h2"),wE=a("a"),r4e=a("span"),F(Ex.$$.fragment),bAr=l(),t4e=a("span"),vAr=o("TFAutoModelForMaskedLM"),gWe=l(),lr=a("div"),F(Cx.$$.fragment),FAr=l(),Tc=a("p"),TAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NY=a("a"),MAr=o("from_pretrained()"),EAr=o(" class method or the "),qY=a("a"),CAr=o("from_config()"),wAr=o(` class
method.`),AAr=l(),wx=a("p"),LAr=o("This class cannot be instantiated directly using "),a4e=a("code"),yAr=o("__init__()"),xAr=o(" (throws an error)."),$Ar=l(),Nt=a("div"),F(Ax.$$.fragment),kAr=l(),n4e=a("p"),SAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RAr=l(),Mc=a("p"),PAr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),BAr=o("not"),IAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),NAr=o("from_pretrained()"),qAr=o(" to load the model weights."),jAr=l(),F(AE.$$.fragment),DAr=l(),Br=a("div"),F(Lx.$$.fragment),GAr=l(),l4e=a("p"),OAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VAr=l(),mn=a("p"),XAr=o("The model class to instantiate is selected based on the "),i4e=a("code"),zAr=o("model_type"),WAr=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),QAr=o("pretrained_model_name_or_path"),HAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),UAr=o("pretrained_model_name_or_path"),JAr=o(":"),YAr=l(),ie=a("ul"),LE=a("li"),f4e=a("strong"),KAr=o("albert"),ZAr=o(" \u2014 "),DY=a("a"),eLr=o("TFAlbertForMaskedLM"),oLr=o(" (ALBERT model)"),rLr=l(),yE=a("li"),m4e=a("strong"),tLr=o("bert"),aLr=o(" \u2014 "),GY=a("a"),nLr=o("TFBertForMaskedLM"),sLr=o(" (BERT model)"),lLr=l(),xE=a("li"),g4e=a("strong"),iLr=o("camembert"),dLr=o(" \u2014 "),OY=a("a"),cLr=o("TFCamembertForMaskedLM"),fLr=o(" (CamemBERT model)"),mLr=l(),$E=a("li"),h4e=a("strong"),gLr=o("convbert"),hLr=o(" \u2014 "),VY=a("a"),pLr=o("TFConvBertForMaskedLM"),_Lr=o(" (ConvBERT model)"),uLr=l(),kE=a("li"),p4e=a("strong"),bLr=o("deberta"),vLr=o(" \u2014 "),XY=a("a"),FLr=o("TFDebertaForMaskedLM"),TLr=o(" (DeBERTa model)"),MLr=l(),SE=a("li"),_4e=a("strong"),ELr=o("deberta-v2"),CLr=o(" \u2014 "),zY=a("a"),wLr=o("TFDebertaV2ForMaskedLM"),ALr=o(" (DeBERTa-v2 model)"),LLr=l(),RE=a("li"),u4e=a("strong"),yLr=o("distilbert"),xLr=o(" \u2014 "),WY=a("a"),$Lr=o("TFDistilBertForMaskedLM"),kLr=o(" (DistilBERT model)"),SLr=l(),PE=a("li"),b4e=a("strong"),RLr=o("electra"),PLr=o(" \u2014 "),QY=a("a"),BLr=o("TFElectraForMaskedLM"),ILr=o(" (ELECTRA model)"),NLr=l(),BE=a("li"),v4e=a("strong"),qLr=o("flaubert"),jLr=o(" \u2014 "),HY=a("a"),DLr=o("TFFlaubertWithLMHeadModel"),GLr=o(" (FlauBERT model)"),OLr=l(),IE=a("li"),F4e=a("strong"),VLr=o("funnel"),XLr=o(" \u2014 "),UY=a("a"),zLr=o("TFFunnelForMaskedLM"),WLr=o(" (Funnel Transformer model)"),QLr=l(),NE=a("li"),T4e=a("strong"),HLr=o("layoutlm"),ULr=o(" \u2014 "),JY=a("a"),JLr=o("TFLayoutLMForMaskedLM"),YLr=o(" (LayoutLM model)"),KLr=l(),qE=a("li"),M4e=a("strong"),ZLr=o("longformer"),eyr=o(" \u2014 "),YY=a("a"),oyr=o("TFLongformerForMaskedLM"),ryr=o(" (Longformer model)"),tyr=l(),jE=a("li"),E4e=a("strong"),ayr=o("mobilebert"),nyr=o(" \u2014 "),KY=a("a"),syr=o("TFMobileBertForMaskedLM"),lyr=o(" (MobileBERT model)"),iyr=l(),DE=a("li"),C4e=a("strong"),dyr=o("mpnet"),cyr=o(" \u2014 "),ZY=a("a"),fyr=o("TFMPNetForMaskedLM"),myr=o(" (MPNet model)"),gyr=l(),GE=a("li"),w4e=a("strong"),hyr=o("rembert"),pyr=o(" \u2014 "),eK=a("a"),_yr=o("TFRemBertForMaskedLM"),uyr=o(" (RemBERT model)"),byr=l(),OE=a("li"),A4e=a("strong"),vyr=o("roberta"),Fyr=o(" \u2014 "),oK=a("a"),Tyr=o("TFRobertaForMaskedLM"),Myr=o(" (RoBERTa model)"),Eyr=l(),VE=a("li"),L4e=a("strong"),Cyr=o("roformer"),wyr=o(" \u2014 "),rK=a("a"),Ayr=o("TFRoFormerForMaskedLM"),Lyr=o(" (RoFormer model)"),yyr=l(),XE=a("li"),y4e=a("strong"),xyr=o("tapas"),$yr=o(" \u2014 "),tK=a("a"),kyr=o("TFTapasForMaskedLM"),Syr=o(" (TAPAS model)"),Ryr=l(),zE=a("li"),x4e=a("strong"),Pyr=o("xlm"),Byr=o(" \u2014 "),aK=a("a"),Iyr=o("TFXLMWithLMHeadModel"),Nyr=o(" (XLM model)"),qyr=l(),WE=a("li"),$4e=a("strong"),jyr=o("xlm-roberta"),Dyr=o(" \u2014 "),nK=a("a"),Gyr=o("TFXLMRobertaForMaskedLM"),Oyr=o(" (XLM-RoBERTa model)"),Vyr=l(),F(QE.$$.fragment),hWe=l(),Ec=a("h2"),HE=a("a"),k4e=a("span"),F(yx.$$.fragment),Xyr=l(),S4e=a("span"),zyr=o("TFAutoModelForSeq2SeqLM"),pWe=l(),ir=a("div"),F(xx.$$.fragment),Wyr=l(),Cc=a("p"),Qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sK=a("a"),Hyr=o("from_pretrained()"),Uyr=o(" class method or the "),lK=a("a"),Jyr=o("from_config()"),Yyr=o(` class
method.`),Kyr=l(),$x=a("p"),Zyr=o("This class cannot be instantiated directly using "),R4e=a("code"),e8r=o("__init__()"),o8r=o(" (throws an error)."),r8r=l(),qt=a("div"),F(kx.$$.fragment),t8r=l(),P4e=a("p"),a8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n8r=l(),wc=a("p"),s8r=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),l8r=o("not"),i8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),d8r=o("from_pretrained()"),c8r=o(" to load the model weights."),f8r=l(),F(UE.$$.fragment),m8r=l(),Ir=a("div"),F(Sx.$$.fragment),g8r=l(),I4e=a("p"),h8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p8r=l(),gn=a("p"),_8r=o("The model class to instantiate is selected based on the "),N4e=a("code"),u8r=o("model_type"),b8r=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),v8r=o("pretrained_model_name_or_path"),F8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),T8r=o("pretrained_model_name_or_path"),M8r=o(":"),E8r=l(),ye=a("ul"),JE=a("li"),D4e=a("strong"),C8r=o("bart"),w8r=o(" \u2014 "),dK=a("a"),A8r=o("TFBartForConditionalGeneration"),L8r=o(" (BART model)"),y8r=l(),YE=a("li"),G4e=a("strong"),x8r=o("blenderbot"),$8r=o(" \u2014 "),cK=a("a"),k8r=o("TFBlenderbotForConditionalGeneration"),S8r=o(" (Blenderbot model)"),R8r=l(),KE=a("li"),O4e=a("strong"),P8r=o("blenderbot-small"),B8r=o(" \u2014 "),fK=a("a"),I8r=o("TFBlenderbotSmallForConditionalGeneration"),N8r=o(" (BlenderbotSmall model)"),q8r=l(),ZE=a("li"),V4e=a("strong"),j8r=o("encoder-decoder"),D8r=o(" \u2014 "),mK=a("a"),G8r=o("TFEncoderDecoderModel"),O8r=o(" (Encoder decoder model)"),V8r=l(),eC=a("li"),X4e=a("strong"),X8r=o("led"),z8r=o(" \u2014 "),gK=a("a"),W8r=o("TFLEDForConditionalGeneration"),Q8r=o(" (LED model)"),H8r=l(),oC=a("li"),z4e=a("strong"),U8r=o("marian"),J8r=o(" \u2014 "),hK=a("a"),Y8r=o("TFMarianMTModel"),K8r=o(" (Marian model)"),Z8r=l(),rC=a("li"),W4e=a("strong"),e9r=o("mbart"),o9r=o(" \u2014 "),pK=a("a"),r9r=o("TFMBartForConditionalGeneration"),t9r=o(" (mBART model)"),a9r=l(),tC=a("li"),Q4e=a("strong"),n9r=o("mt5"),s9r=o(" \u2014 "),_K=a("a"),l9r=o("TFMT5ForConditionalGeneration"),i9r=o(" (MT5 model)"),d9r=l(),aC=a("li"),H4e=a("strong"),c9r=o("pegasus"),f9r=o(" \u2014 "),uK=a("a"),m9r=o("TFPegasusForConditionalGeneration"),g9r=o(" (Pegasus model)"),h9r=l(),nC=a("li"),U4e=a("strong"),p9r=o("t5"),_9r=o(" \u2014 "),bK=a("a"),u9r=o("TFT5ForConditionalGeneration"),b9r=o(" (T5 model)"),v9r=l(),F(sC.$$.fragment),_We=l(),Ac=a("h2"),lC=a("a"),J4e=a("span"),F(Rx.$$.fragment),F9r=l(),Y4e=a("span"),T9r=o("TFAutoModelForSequenceClassification"),uWe=l(),dr=a("div"),F(Px.$$.fragment),M9r=l(),Lc=a("p"),E9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vK=a("a"),C9r=o("from_pretrained()"),w9r=o(" class method or the "),FK=a("a"),A9r=o("from_config()"),L9r=o(` class
method.`),y9r=l(),Bx=a("p"),x9r=o("This class cannot be instantiated directly using "),K4e=a("code"),$9r=o("__init__()"),k9r=o(" (throws an error)."),S9r=l(),jt=a("div"),F(Ix.$$.fragment),R9r=l(),Z4e=a("p"),P9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B9r=l(),yc=a("p"),I9r=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),N9r=o("not"),q9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),j9r=o("from_pretrained()"),D9r=o(" to load the model weights."),G9r=l(),F(iC.$$.fragment),O9r=l(),Nr=a("div"),F(Nx.$$.fragment),V9r=l(),oEe=a("p"),X9r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z9r=l(),hn=a("p"),W9r=o("The model class to instantiate is selected based on the "),rEe=a("code"),Q9r=o("model_type"),H9r=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),U9r=o("pretrained_model_name_or_path"),J9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),Y9r=o("pretrained_model_name_or_path"),K9r=o(":"),Z9r=l(),te=a("ul"),dC=a("li"),nEe=a("strong"),exr=o("albert"),oxr=o(" \u2014 "),MK=a("a"),rxr=o("TFAlbertForSequenceClassification"),txr=o(" (ALBERT model)"),axr=l(),cC=a("li"),sEe=a("strong"),nxr=o("bert"),sxr=o(" \u2014 "),EK=a("a"),lxr=o("TFBertForSequenceClassification"),ixr=o(" (BERT model)"),dxr=l(),fC=a("li"),lEe=a("strong"),cxr=o("camembert"),fxr=o(" \u2014 "),CK=a("a"),mxr=o("TFCamembertForSequenceClassification"),gxr=o(" (CamemBERT model)"),hxr=l(),mC=a("li"),iEe=a("strong"),pxr=o("convbert"),_xr=o(" \u2014 "),wK=a("a"),uxr=o("TFConvBertForSequenceClassification"),bxr=o(" (ConvBERT model)"),vxr=l(),gC=a("li"),dEe=a("strong"),Fxr=o("ctrl"),Txr=o(" \u2014 "),AK=a("a"),Mxr=o("TFCTRLForSequenceClassification"),Exr=o(" (CTRL model)"),Cxr=l(),hC=a("li"),cEe=a("strong"),wxr=o("deberta"),Axr=o(" \u2014 "),LK=a("a"),Lxr=o("TFDebertaForSequenceClassification"),yxr=o(" (DeBERTa model)"),xxr=l(),pC=a("li"),fEe=a("strong"),$xr=o("deberta-v2"),kxr=o(" \u2014 "),yK=a("a"),Sxr=o("TFDebertaV2ForSequenceClassification"),Rxr=o(" (DeBERTa-v2 model)"),Pxr=l(),_C=a("li"),mEe=a("strong"),Bxr=o("distilbert"),Ixr=o(" \u2014 "),xK=a("a"),Nxr=o("TFDistilBertForSequenceClassification"),qxr=o(" (DistilBERT model)"),jxr=l(),uC=a("li"),gEe=a("strong"),Dxr=o("electra"),Gxr=o(" \u2014 "),$K=a("a"),Oxr=o("TFElectraForSequenceClassification"),Vxr=o(" (ELECTRA model)"),Xxr=l(),bC=a("li"),hEe=a("strong"),zxr=o("flaubert"),Wxr=o(" \u2014 "),kK=a("a"),Qxr=o("TFFlaubertForSequenceClassification"),Hxr=o(" (FlauBERT model)"),Uxr=l(),vC=a("li"),pEe=a("strong"),Jxr=o("funnel"),Yxr=o(" \u2014 "),SK=a("a"),Kxr=o("TFFunnelForSequenceClassification"),Zxr=o(" (Funnel Transformer model)"),e$r=l(),FC=a("li"),_Ee=a("strong"),o$r=o("gpt2"),r$r=o(" \u2014 "),RK=a("a"),t$r=o("TFGPT2ForSequenceClassification"),a$r=o(" (OpenAI GPT-2 model)"),n$r=l(),TC=a("li"),uEe=a("strong"),s$r=o("gptj"),l$r=o(" \u2014 "),PK=a("a"),i$r=o("TFGPTJForSequenceClassification"),d$r=o(" (GPT-J model)"),c$r=l(),MC=a("li"),bEe=a("strong"),f$r=o("layoutlm"),m$r=o(" \u2014 "),BK=a("a"),g$r=o("TFLayoutLMForSequenceClassification"),h$r=o(" (LayoutLM model)"),p$r=l(),EC=a("li"),vEe=a("strong"),_$r=o("longformer"),u$r=o(" \u2014 "),IK=a("a"),b$r=o("TFLongformerForSequenceClassification"),v$r=o(" (Longformer model)"),F$r=l(),CC=a("li"),FEe=a("strong"),T$r=o("mobilebert"),M$r=o(" \u2014 "),NK=a("a"),E$r=o("TFMobileBertForSequenceClassification"),C$r=o(" (MobileBERT model)"),w$r=l(),wC=a("li"),TEe=a("strong"),A$r=o("mpnet"),L$r=o(" \u2014 "),qK=a("a"),y$r=o("TFMPNetForSequenceClassification"),x$r=o(" (MPNet model)"),$$r=l(),AC=a("li"),MEe=a("strong"),k$r=o("openai-gpt"),S$r=o(" \u2014 "),jK=a("a"),R$r=o("TFOpenAIGPTForSequenceClassification"),P$r=o(" (OpenAI GPT model)"),B$r=l(),LC=a("li"),EEe=a("strong"),I$r=o("rembert"),N$r=o(" \u2014 "),DK=a("a"),q$r=o("TFRemBertForSequenceClassification"),j$r=o(" (RemBERT model)"),D$r=l(),yC=a("li"),CEe=a("strong"),G$r=o("roberta"),O$r=o(" \u2014 "),GK=a("a"),V$r=o("TFRobertaForSequenceClassification"),X$r=o(" (RoBERTa model)"),z$r=l(),xC=a("li"),wEe=a("strong"),W$r=o("roformer"),Q$r=o(" \u2014 "),OK=a("a"),H$r=o("TFRoFormerForSequenceClassification"),U$r=o(" (RoFormer model)"),J$r=l(),$C=a("li"),AEe=a("strong"),Y$r=o("tapas"),K$r=o(" \u2014 "),VK=a("a"),Z$r=o("TFTapasForSequenceClassification"),ekr=o(" (TAPAS model)"),okr=l(),kC=a("li"),LEe=a("strong"),rkr=o("transfo-xl"),tkr=o(" \u2014 "),XK=a("a"),akr=o("TFTransfoXLForSequenceClassification"),nkr=o(" (Transformer-XL model)"),skr=l(),SC=a("li"),yEe=a("strong"),lkr=o("xlm"),ikr=o(" \u2014 "),zK=a("a"),dkr=o("TFXLMForSequenceClassification"),ckr=o(" (XLM model)"),fkr=l(),RC=a("li"),xEe=a("strong"),mkr=o("xlm-roberta"),gkr=o(" \u2014 "),WK=a("a"),hkr=o("TFXLMRobertaForSequenceClassification"),pkr=o(" (XLM-RoBERTa model)"),_kr=l(),PC=a("li"),$Ee=a("strong"),ukr=o("xlnet"),bkr=o(" \u2014 "),QK=a("a"),vkr=o("TFXLNetForSequenceClassification"),Fkr=o(" (XLNet model)"),Tkr=l(),F(BC.$$.fragment),bWe=l(),xc=a("h2"),IC=a("a"),kEe=a("span"),F(qx.$$.fragment),Mkr=l(),SEe=a("span"),Ekr=o("TFAutoModelForMultipleChoice"),vWe=l(),cr=a("div"),F(jx.$$.fragment),Ckr=l(),$c=a("p"),wkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=a("a"),Akr=o("from_pretrained()"),Lkr=o(" class method or the "),UK=a("a"),ykr=o("from_config()"),xkr=o(` class
method.`),$kr=l(),Dx=a("p"),kkr=o("This class cannot be instantiated directly using "),REe=a("code"),Skr=o("__init__()"),Rkr=o(" (throws an error)."),Pkr=l(),Dt=a("div"),F(Gx.$$.fragment),Bkr=l(),PEe=a("p"),Ikr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nkr=l(),kc=a("p"),qkr=o(`Note:
Loading a model from its configuration file does `),BEe=a("strong"),jkr=o("not"),Dkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),Gkr=o("from_pretrained()"),Okr=o(" to load the model weights."),Vkr=l(),F(NC.$$.fragment),Xkr=l(),qr=a("div"),F(Ox.$$.fragment),zkr=l(),IEe=a("p"),Wkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qkr=l(),pn=a("p"),Hkr=o("The model class to instantiate is selected based on the "),NEe=a("code"),Ukr=o("model_type"),Jkr=o(` property of the config object (either
passed as an argument or loaded from `),qEe=a("code"),Ykr=o("pretrained_model_name_or_path"),Kkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(":"),oSr=l(),be=a("ul"),qC=a("li"),DEe=a("strong"),rSr=o("albert"),tSr=o(" \u2014 "),YK=a("a"),aSr=o("TFAlbertForMultipleChoice"),nSr=o(" (ALBERT model)"),sSr=l(),jC=a("li"),GEe=a("strong"),lSr=o("bert"),iSr=o(" \u2014 "),KK=a("a"),dSr=o("TFBertForMultipleChoice"),cSr=o(" (BERT model)"),fSr=l(),DC=a("li"),OEe=a("strong"),mSr=o("camembert"),gSr=o(" \u2014 "),ZK=a("a"),hSr=o("TFCamembertForMultipleChoice"),pSr=o(" (CamemBERT model)"),_Sr=l(),GC=a("li"),VEe=a("strong"),uSr=o("convbert"),bSr=o(" \u2014 "),eZ=a("a"),vSr=o("TFConvBertForMultipleChoice"),FSr=o(" (ConvBERT model)"),TSr=l(),OC=a("li"),XEe=a("strong"),MSr=o("distilbert"),ESr=o(" \u2014 "),oZ=a("a"),CSr=o("TFDistilBertForMultipleChoice"),wSr=o(" (DistilBERT model)"),ASr=l(),VC=a("li"),zEe=a("strong"),LSr=o("electra"),ySr=o(" \u2014 "),rZ=a("a"),xSr=o("TFElectraForMultipleChoice"),$Sr=o(" (ELECTRA model)"),kSr=l(),XC=a("li"),WEe=a("strong"),SSr=o("flaubert"),RSr=o(" \u2014 "),tZ=a("a"),PSr=o("TFFlaubertForMultipleChoice"),BSr=o(" (FlauBERT model)"),ISr=l(),zC=a("li"),QEe=a("strong"),NSr=o("funnel"),qSr=o(" \u2014 "),aZ=a("a"),jSr=o("TFFunnelForMultipleChoice"),DSr=o(" (Funnel Transformer model)"),GSr=l(),WC=a("li"),HEe=a("strong"),OSr=o("longformer"),VSr=o(" \u2014 "),nZ=a("a"),XSr=o("TFLongformerForMultipleChoice"),zSr=o(" (Longformer model)"),WSr=l(),QC=a("li"),UEe=a("strong"),QSr=o("mobilebert"),HSr=o(" \u2014 "),sZ=a("a"),USr=o("TFMobileBertForMultipleChoice"),JSr=o(" (MobileBERT model)"),YSr=l(),HC=a("li"),JEe=a("strong"),KSr=o("mpnet"),ZSr=o(" \u2014 "),lZ=a("a"),eRr=o("TFMPNetForMultipleChoice"),oRr=o(" (MPNet model)"),rRr=l(),UC=a("li"),YEe=a("strong"),tRr=o("rembert"),aRr=o(" \u2014 "),iZ=a("a"),nRr=o("TFRemBertForMultipleChoice"),sRr=o(" (RemBERT model)"),lRr=l(),JC=a("li"),KEe=a("strong"),iRr=o("roberta"),dRr=o(" \u2014 "),dZ=a("a"),cRr=o("TFRobertaForMultipleChoice"),fRr=o(" (RoBERTa model)"),mRr=l(),YC=a("li"),ZEe=a("strong"),gRr=o("roformer"),hRr=o(" \u2014 "),cZ=a("a"),pRr=o("TFRoFormerForMultipleChoice"),_Rr=o(" (RoFormer model)"),uRr=l(),KC=a("li"),eCe=a("strong"),bRr=o("xlm"),vRr=o(" \u2014 "),fZ=a("a"),FRr=o("TFXLMForMultipleChoice"),TRr=o(" (XLM model)"),MRr=l(),ZC=a("li"),oCe=a("strong"),ERr=o("xlm-roberta"),CRr=o(" \u2014 "),mZ=a("a"),wRr=o("TFXLMRobertaForMultipleChoice"),ARr=o(" (XLM-RoBERTa model)"),LRr=l(),e5=a("li"),rCe=a("strong"),yRr=o("xlnet"),xRr=o(" \u2014 "),gZ=a("a"),$Rr=o("TFXLNetForMultipleChoice"),kRr=o(" (XLNet model)"),SRr=l(),F(o5.$$.fragment),FWe=l(),Sc=a("h2"),r5=a("a"),tCe=a("span"),F(Vx.$$.fragment),RRr=l(),aCe=a("span"),PRr=o("TFAutoModelForNextSentencePrediction"),TWe=l(),fr=a("div"),F(Xx.$$.fragment),BRr=l(),Rc=a("p"),IRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hZ=a("a"),NRr=o("from_pretrained()"),qRr=o(" class method or the "),pZ=a("a"),jRr=o("from_config()"),DRr=o(` class
method.`),GRr=l(),zx=a("p"),ORr=o("This class cannot be instantiated directly using "),nCe=a("code"),VRr=o("__init__()"),XRr=o(" (throws an error)."),zRr=l(),Gt=a("div"),F(Wx.$$.fragment),WRr=l(),sCe=a("p"),QRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HRr=l(),Pc=a("p"),URr=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),JRr=o("not"),YRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),KRr=o("from_pretrained()"),ZRr=o(" to load the model weights."),ePr=l(),F(t5.$$.fragment),oPr=l(),jr=a("div"),F(Qx.$$.fragment),rPr=l(),iCe=a("p"),tPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aPr=l(),_n=a("p"),nPr=o("The model class to instantiate is selected based on the "),dCe=a("code"),sPr=o("model_type"),lPr=o(` property of the config object (either
passed as an argument or loaded from `),cCe=a("code"),iPr=o("pretrained_model_name_or_path"),dPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),cPr=o("pretrained_model_name_or_path"),fPr=o(":"),mPr=l(),Hx=a("ul"),a5=a("li"),mCe=a("strong"),gPr=o("bert"),hPr=o(" \u2014 "),uZ=a("a"),pPr=o("TFBertForNextSentencePrediction"),_Pr=o(" (BERT model)"),uPr=l(),n5=a("li"),gCe=a("strong"),bPr=o("mobilebert"),vPr=o(" \u2014 "),bZ=a("a"),FPr=o("TFMobileBertForNextSentencePrediction"),TPr=o(" (MobileBERT model)"),MPr=l(),F(s5.$$.fragment),MWe=l(),Bc=a("h2"),l5=a("a"),hCe=a("span"),F(Ux.$$.fragment),EPr=l(),pCe=a("span"),CPr=o("TFAutoModelForTableQuestionAnswering"),EWe=l(),mr=a("div"),F(Jx.$$.fragment),wPr=l(),Ic=a("p"),APr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vZ=a("a"),LPr=o("from_pretrained()"),yPr=o(" class method or the "),FZ=a("a"),xPr=o("from_config()"),$Pr=o(` class
method.`),kPr=l(),Yx=a("p"),SPr=o("This class cannot be instantiated directly using "),_Ce=a("code"),RPr=o("__init__()"),PPr=o(" (throws an error)."),BPr=l(),Ot=a("div"),F(Kx.$$.fragment),IPr=l(),uCe=a("p"),NPr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qPr=l(),Nc=a("p"),jPr=o(`Note:
Loading a model from its configuration file does `),bCe=a("strong"),DPr=o("not"),GPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),OPr=o("from_pretrained()"),VPr=o(" to load the model weights."),XPr=l(),F(i5.$$.fragment),zPr=l(),Dr=a("div"),F(Zx.$$.fragment),WPr=l(),vCe=a("p"),QPr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HPr=l(),un=a("p"),UPr=o("The model class to instantiate is selected based on the "),FCe=a("code"),JPr=o("model_type"),YPr=o(` property of the config object (either
passed as an argument or loaded from `),TCe=a("code"),KPr=o("pretrained_model_name_or_path"),ZPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=a("code"),eBr=o("pretrained_model_name_or_path"),oBr=o(":"),rBr=l(),ECe=a("ul"),d5=a("li"),CCe=a("strong"),tBr=o("tapas"),aBr=o(" \u2014 "),MZ=a("a"),nBr=o("TFTapasForQuestionAnswering"),sBr=o(" (TAPAS model)"),lBr=l(),F(c5.$$.fragment),CWe=l(),qc=a("h2"),f5=a("a"),wCe=a("span"),F(e$.$$.fragment),iBr=l(),ACe=a("span"),dBr=o("TFAutoModelForTokenClassification"),wWe=l(),gr=a("div"),F(o$.$$.fragment),cBr=l(),jc=a("p"),fBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EZ=a("a"),mBr=o("from_pretrained()"),gBr=o(" class method or the "),CZ=a("a"),hBr=o("from_config()"),pBr=o(` class
method.`),_Br=l(),r$=a("p"),uBr=o("This class cannot be instantiated directly using "),LCe=a("code"),bBr=o("__init__()"),vBr=o(" (throws an error)."),FBr=l(),Vt=a("div"),F(t$.$$.fragment),TBr=l(),yCe=a("p"),MBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EBr=l(),Dc=a("p"),CBr=o(`Note:
Loading a model from its configuration file does `),xCe=a("strong"),wBr=o("not"),ABr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),LBr=o("from_pretrained()"),yBr=o(" to load the model weights."),xBr=l(),F(m5.$$.fragment),$Br=l(),Gr=a("div"),F(a$.$$.fragment),kBr=l(),$Ce=a("p"),SBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RBr=l(),bn=a("p"),PBr=o("The model class to instantiate is selected based on the "),kCe=a("code"),BBr=o("model_type"),IBr=o(` property of the config object (either
passed as an argument or loaded from `),SCe=a("code"),NBr=o("pretrained_model_name_or_path"),qBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=a("code"),jBr=o("pretrained_model_name_or_path"),DBr=o(":"),GBr=l(),de=a("ul"),g5=a("li"),PCe=a("strong"),OBr=o("albert"),VBr=o(" \u2014 "),AZ=a("a"),XBr=o("TFAlbertForTokenClassification"),zBr=o(" (ALBERT model)"),WBr=l(),h5=a("li"),BCe=a("strong"),QBr=o("bert"),HBr=o(" \u2014 "),LZ=a("a"),UBr=o("TFBertForTokenClassification"),JBr=o(" (BERT model)"),YBr=l(),p5=a("li"),ICe=a("strong"),KBr=o("camembert"),ZBr=o(" \u2014 "),yZ=a("a"),eIr=o("TFCamembertForTokenClassification"),oIr=o(" (CamemBERT model)"),rIr=l(),_5=a("li"),NCe=a("strong"),tIr=o("convbert"),aIr=o(" \u2014 "),xZ=a("a"),nIr=o("TFConvBertForTokenClassification"),sIr=o(" (ConvBERT model)"),lIr=l(),u5=a("li"),qCe=a("strong"),iIr=o("deberta"),dIr=o(" \u2014 "),$Z=a("a"),cIr=o("TFDebertaForTokenClassification"),fIr=o(" (DeBERTa model)"),mIr=l(),b5=a("li"),jCe=a("strong"),gIr=o("deberta-v2"),hIr=o(" \u2014 "),kZ=a("a"),pIr=o("TFDebertaV2ForTokenClassification"),_Ir=o(" (DeBERTa-v2 model)"),uIr=l(),v5=a("li"),DCe=a("strong"),bIr=o("distilbert"),vIr=o(" \u2014 "),SZ=a("a"),FIr=o("TFDistilBertForTokenClassification"),TIr=o(" (DistilBERT model)"),MIr=l(),F5=a("li"),GCe=a("strong"),EIr=o("electra"),CIr=o(" \u2014 "),RZ=a("a"),wIr=o("TFElectraForTokenClassification"),AIr=o(" (ELECTRA model)"),LIr=l(),T5=a("li"),OCe=a("strong"),yIr=o("flaubert"),xIr=o(" \u2014 "),PZ=a("a"),$Ir=o("TFFlaubertForTokenClassification"),kIr=o(" (FlauBERT model)"),SIr=l(),M5=a("li"),VCe=a("strong"),RIr=o("funnel"),PIr=o(" \u2014 "),BZ=a("a"),BIr=o("TFFunnelForTokenClassification"),IIr=o(" (Funnel Transformer model)"),NIr=l(),E5=a("li"),XCe=a("strong"),qIr=o("layoutlm"),jIr=o(" \u2014 "),IZ=a("a"),DIr=o("TFLayoutLMForTokenClassification"),GIr=o(" (LayoutLM model)"),OIr=l(),C5=a("li"),zCe=a("strong"),VIr=o("longformer"),XIr=o(" \u2014 "),NZ=a("a"),zIr=o("TFLongformerForTokenClassification"),WIr=o(" (Longformer model)"),QIr=l(),w5=a("li"),WCe=a("strong"),HIr=o("mobilebert"),UIr=o(" \u2014 "),qZ=a("a"),JIr=o("TFMobileBertForTokenClassification"),YIr=o(" (MobileBERT model)"),KIr=l(),A5=a("li"),QCe=a("strong"),ZIr=o("mpnet"),eNr=o(" \u2014 "),jZ=a("a"),oNr=o("TFMPNetForTokenClassification"),rNr=o(" (MPNet model)"),tNr=l(),L5=a("li"),HCe=a("strong"),aNr=o("rembert"),nNr=o(" \u2014 "),DZ=a("a"),sNr=o("TFRemBertForTokenClassification"),lNr=o(" (RemBERT model)"),iNr=l(),y5=a("li"),UCe=a("strong"),dNr=o("roberta"),cNr=o(" \u2014 "),GZ=a("a"),fNr=o("TFRobertaForTokenClassification"),mNr=o(" (RoBERTa model)"),gNr=l(),x5=a("li"),JCe=a("strong"),hNr=o("roformer"),pNr=o(" \u2014 "),OZ=a("a"),_Nr=o("TFRoFormerForTokenClassification"),uNr=o(" (RoFormer model)"),bNr=l(),$5=a("li"),YCe=a("strong"),vNr=o("xlm"),FNr=o(" \u2014 "),VZ=a("a"),TNr=o("TFXLMForTokenClassification"),MNr=o(" (XLM model)"),ENr=l(),k5=a("li"),KCe=a("strong"),CNr=o("xlm-roberta"),wNr=o(" \u2014 "),XZ=a("a"),ANr=o("TFXLMRobertaForTokenClassification"),LNr=o(" (XLM-RoBERTa model)"),yNr=l(),S5=a("li"),ZCe=a("strong"),xNr=o("xlnet"),$Nr=o(" \u2014 "),zZ=a("a"),kNr=o("TFXLNetForTokenClassification"),SNr=o(" (XLNet model)"),RNr=l(),F(R5.$$.fragment),AWe=l(),Gc=a("h2"),P5=a("a"),e5e=a("span"),F(n$.$$.fragment),PNr=l(),o5e=a("span"),BNr=o("TFAutoModelForQuestionAnswering"),LWe=l(),hr=a("div"),F(s$.$$.fragment),INr=l(),Oc=a("p"),NNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WZ=a("a"),qNr=o("from_pretrained()"),jNr=o(" class method or the "),QZ=a("a"),DNr=o("from_config()"),GNr=o(` class
method.`),ONr=l(),l$=a("p"),VNr=o("This class cannot be instantiated directly using "),r5e=a("code"),XNr=o("__init__()"),zNr=o(" (throws an error)."),WNr=l(),Xt=a("div"),F(i$.$$.fragment),QNr=l(),t5e=a("p"),HNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UNr=l(),Vc=a("p"),JNr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),YNr=o("not"),KNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),ZNr=o("from_pretrained()"),eqr=o(" to load the model weights."),oqr=l(),F(B5.$$.fragment),rqr=l(),Or=a("div"),F(d$.$$.fragment),tqr=l(),n5e=a("p"),aqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nqr=l(),vn=a("p"),sqr=o("The model class to instantiate is selected based on the "),s5e=a("code"),lqr=o("model_type"),iqr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),dqr=o("pretrained_model_name_or_path"),cqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),fqr=o("pretrained_model_name_or_path"),mqr=o(":"),gqr=l(),ce=a("ul"),I5=a("li"),d5e=a("strong"),hqr=o("albert"),pqr=o(" \u2014 "),UZ=a("a"),_qr=o("TFAlbertForQuestionAnswering"),uqr=o(" (ALBERT model)"),bqr=l(),N5=a("li"),c5e=a("strong"),vqr=o("bert"),Fqr=o(" \u2014 "),JZ=a("a"),Tqr=o("TFBertForQuestionAnswering"),Mqr=o(" (BERT model)"),Eqr=l(),q5=a("li"),f5e=a("strong"),Cqr=o("camembert"),wqr=o(" \u2014 "),YZ=a("a"),Aqr=o("TFCamembertForQuestionAnswering"),Lqr=o(" (CamemBERT model)"),yqr=l(),j5=a("li"),m5e=a("strong"),xqr=o("convbert"),$qr=o(" \u2014 "),KZ=a("a"),kqr=o("TFConvBertForQuestionAnswering"),Sqr=o(" (ConvBERT model)"),Rqr=l(),D5=a("li"),g5e=a("strong"),Pqr=o("deberta"),Bqr=o(" \u2014 "),ZZ=a("a"),Iqr=o("TFDebertaForQuestionAnswering"),Nqr=o(" (DeBERTa model)"),qqr=l(),G5=a("li"),h5e=a("strong"),jqr=o("deberta-v2"),Dqr=o(" \u2014 "),eee=a("a"),Gqr=o("TFDebertaV2ForQuestionAnswering"),Oqr=o(" (DeBERTa-v2 model)"),Vqr=l(),O5=a("li"),p5e=a("strong"),Xqr=o("distilbert"),zqr=o(" \u2014 "),oee=a("a"),Wqr=o("TFDistilBertForQuestionAnswering"),Qqr=o(" (DistilBERT model)"),Hqr=l(),V5=a("li"),_5e=a("strong"),Uqr=o("electra"),Jqr=o(" \u2014 "),ree=a("a"),Yqr=o("TFElectraForQuestionAnswering"),Kqr=o(" (ELECTRA model)"),Zqr=l(),X5=a("li"),u5e=a("strong"),ejr=o("flaubert"),ojr=o(" \u2014 "),tee=a("a"),rjr=o("TFFlaubertForQuestionAnsweringSimple"),tjr=o(" (FlauBERT model)"),ajr=l(),z5=a("li"),b5e=a("strong"),njr=o("funnel"),sjr=o(" \u2014 "),aee=a("a"),ljr=o("TFFunnelForQuestionAnswering"),ijr=o(" (Funnel Transformer model)"),djr=l(),W5=a("li"),v5e=a("strong"),cjr=o("gptj"),fjr=o(" \u2014 "),nee=a("a"),mjr=o("TFGPTJForQuestionAnswering"),gjr=o(" (GPT-J model)"),hjr=l(),Q5=a("li"),F5e=a("strong"),pjr=o("longformer"),_jr=o(" \u2014 "),see=a("a"),ujr=o("TFLongformerForQuestionAnswering"),bjr=o(" (Longformer model)"),vjr=l(),H5=a("li"),T5e=a("strong"),Fjr=o("mobilebert"),Tjr=o(" \u2014 "),lee=a("a"),Mjr=o("TFMobileBertForQuestionAnswering"),Ejr=o(" (MobileBERT model)"),Cjr=l(),U5=a("li"),M5e=a("strong"),wjr=o("mpnet"),Ajr=o(" \u2014 "),iee=a("a"),Ljr=o("TFMPNetForQuestionAnswering"),yjr=o(" (MPNet model)"),xjr=l(),J5=a("li"),E5e=a("strong"),$jr=o("rembert"),kjr=o(" \u2014 "),dee=a("a"),Sjr=o("TFRemBertForQuestionAnswering"),Rjr=o(" (RemBERT model)"),Pjr=l(),Y5=a("li"),C5e=a("strong"),Bjr=o("roberta"),Ijr=o(" \u2014 "),cee=a("a"),Njr=o("TFRobertaForQuestionAnswering"),qjr=o(" (RoBERTa model)"),jjr=l(),K5=a("li"),w5e=a("strong"),Djr=o("roformer"),Gjr=o(" \u2014 "),fee=a("a"),Ojr=o("TFRoFormerForQuestionAnswering"),Vjr=o(" (RoFormer model)"),Xjr=l(),Z5=a("li"),A5e=a("strong"),zjr=o("xlm"),Wjr=o(" \u2014 "),mee=a("a"),Qjr=o("TFXLMForQuestionAnsweringSimple"),Hjr=o(" (XLM model)"),Ujr=l(),e3=a("li"),L5e=a("strong"),Jjr=o("xlm-roberta"),Yjr=o(" \u2014 "),gee=a("a"),Kjr=o("TFXLMRobertaForQuestionAnswering"),Zjr=o(" (XLM-RoBERTa model)"),eDr=l(),o3=a("li"),y5e=a("strong"),oDr=o("xlnet"),rDr=o(" \u2014 "),hee=a("a"),tDr=o("TFXLNetForQuestionAnsweringSimple"),aDr=o(" (XLNet model)"),nDr=l(),F(r3.$$.fragment),yWe=l(),Xc=a("h2"),t3=a("a"),x5e=a("span"),F(c$.$$.fragment),sDr=l(),$5e=a("span"),lDr=o("TFAutoModelForVision2Seq"),xWe=l(),pr=a("div"),F(f$.$$.fragment),iDr=l(),zc=a("p"),dDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pee=a("a"),cDr=o("from_pretrained()"),fDr=o(" class method or the "),_ee=a("a"),mDr=o("from_config()"),gDr=o(` class
method.`),hDr=l(),m$=a("p"),pDr=o("This class cannot be instantiated directly using "),k5e=a("code"),_Dr=o("__init__()"),uDr=o(" (throws an error)."),bDr=l(),zt=a("div"),F(g$.$$.fragment),vDr=l(),S5e=a("p"),FDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TDr=l(),Wc=a("p"),MDr=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),EDr=o("not"),CDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=a("a"),wDr=o("from_pretrained()"),ADr=o(" to load the model weights."),LDr=l(),F(a3.$$.fragment),yDr=l(),Vr=a("div"),F(h$.$$.fragment),xDr=l(),P5e=a("p"),$Dr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kDr=l(),Fn=a("p"),SDr=o("The model class to instantiate is selected based on the "),B5e=a("code"),RDr=o("model_type"),PDr=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),BDr=o("pretrained_model_name_or_path"),IDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),NDr=o("pretrained_model_name_or_path"),qDr=o(":"),jDr=l(),q5e=a("ul"),n3=a("li"),j5e=a("strong"),DDr=o("vision-encoder-decoder"),GDr=o(" \u2014 "),bee=a("a"),ODr=o("TFVisionEncoderDecoderModel"),VDr=o(" (Vision Encoder decoder model)"),XDr=l(),F(s3.$$.fragment),$We=l(),Qc=a("h2"),l3=a("a"),D5e=a("span"),F(p$.$$.fragment),zDr=l(),G5e=a("span"),WDr=o("TFAutoModelForSpeechSeq2Seq"),kWe=l(),_r=a("div"),F(_$.$$.fragment),QDr=l(),Hc=a("p"),HDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vee=a("a"),UDr=o("from_pretrained()"),JDr=o(" class method or the "),Fee=a("a"),YDr=o("from_config()"),KDr=o(` class
method.`),ZDr=l(),u$=a("p"),eGr=o("This class cannot be instantiated directly using "),O5e=a("code"),oGr=o("__init__()"),rGr=o(" (throws an error)."),tGr=l(),Wt=a("div"),F(b$.$$.fragment),aGr=l(),V5e=a("p"),nGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sGr=l(),Uc=a("p"),lGr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),iGr=o("not"),dGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=a("a"),cGr=o("from_pretrained()"),fGr=o(" to load the model weights."),mGr=l(),F(i3.$$.fragment),gGr=l(),Xr=a("div"),F(v$.$$.fragment),hGr=l(),z5e=a("p"),pGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Gr=l(),Tn=a("p"),uGr=o("The model class to instantiate is selected based on the "),W5e=a("code"),bGr=o("model_type"),vGr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),FGr=o("pretrained_model_name_or_path"),TGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),MGr=o("pretrained_model_name_or_path"),EGr=o(":"),CGr=l(),U5e=a("ul"),d3=a("li"),J5e=a("strong"),wGr=o("speech_to_text"),AGr=o(" \u2014 "),Mee=a("a"),LGr=o("TFSpeech2TextForConditionalGeneration"),yGr=o(" (Speech2Text model)"),xGr=l(),F(c3.$$.fragment),SWe=l(),Jc=a("h2"),f3=a("a"),Y5e=a("span"),F(F$.$$.fragment),$Gr=l(),K5e=a("span"),kGr=o("FlaxAutoModel"),RWe=l(),ur=a("div"),F(T$.$$.fragment),SGr=l(),Yc=a("p"),RGr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Eee=a("a"),PGr=o("from_pretrained()"),BGr=o(" class method or the "),Cee=a("a"),IGr=o("from_config()"),NGr=o(` class
method.`),qGr=l(),M$=a("p"),jGr=o("This class cannot be instantiated directly using "),Z5e=a("code"),DGr=o("__init__()"),GGr=o(" (throws an error)."),OGr=l(),Qt=a("div"),F(E$.$$.fragment),VGr=l(),e3e=a("p"),XGr=o("Instantiates one of the base model classes of the library from a configuration."),zGr=l(),Kc=a("p"),WGr=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),QGr=o("not"),HGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=a("a"),UGr=o("from_pretrained()"),JGr=o(" to load the model weights."),YGr=l(),F(m3.$$.fragment),KGr=l(),zr=a("div"),F(C$.$$.fragment),ZGr=l(),r3e=a("p"),eOr=o("Instantiate one of the base model classes of the library from a pretrained model."),oOr=l(),Mn=a("p"),rOr=o("The model class to instantiate is selected based on the "),t3e=a("code"),tOr=o("model_type"),aOr=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),nOr=o("pretrained_model_name_or_path"),sOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),lOr=o("pretrained_model_name_or_path"),iOr=o(":"),dOr=l(),oe=a("ul"),g3=a("li"),s3e=a("strong"),cOr=o("albert"),fOr=o(" \u2014 "),Aee=a("a"),mOr=o("FlaxAlbertModel"),gOr=o(" (ALBERT model)"),hOr=l(),h3=a("li"),l3e=a("strong"),pOr=o("bart"),_Or=o(" \u2014 "),Lee=a("a"),uOr=o("FlaxBartModel"),bOr=o(" (BART model)"),vOr=l(),p3=a("li"),i3e=a("strong"),FOr=o("beit"),TOr=o(" \u2014 "),yee=a("a"),MOr=o("FlaxBeitModel"),EOr=o(" (BEiT model)"),COr=l(),_3=a("li"),d3e=a("strong"),wOr=o("bert"),AOr=o(" \u2014 "),xee=a("a"),LOr=o("FlaxBertModel"),yOr=o(" (BERT model)"),xOr=l(),u3=a("li"),c3e=a("strong"),$Or=o("big_bird"),kOr=o(" \u2014 "),$ee=a("a"),SOr=o("FlaxBigBirdModel"),ROr=o(" (BigBird model)"),POr=l(),b3=a("li"),f3e=a("strong"),BOr=o("blenderbot"),IOr=o(" \u2014 "),kee=a("a"),NOr=o("FlaxBlenderbotModel"),qOr=o(" (Blenderbot model)"),jOr=l(),v3=a("li"),m3e=a("strong"),DOr=o("blenderbot-small"),GOr=o(" \u2014 "),See=a("a"),OOr=o("FlaxBlenderbotSmallModel"),VOr=o(" (BlenderbotSmall model)"),XOr=l(),F3=a("li"),g3e=a("strong"),zOr=o("clip"),WOr=o(" \u2014 "),Ree=a("a"),QOr=o("FlaxCLIPModel"),HOr=o(" (CLIP model)"),UOr=l(),T3=a("li"),h3e=a("strong"),JOr=o("distilbert"),YOr=o(" \u2014 "),Pee=a("a"),KOr=o("FlaxDistilBertModel"),ZOr=o(" (DistilBERT model)"),eVr=l(),M3=a("li"),p3e=a("strong"),oVr=o("electra"),rVr=o(" \u2014 "),Bee=a("a"),tVr=o("FlaxElectraModel"),aVr=o(" (ELECTRA model)"),nVr=l(),E3=a("li"),_3e=a("strong"),sVr=o("gpt2"),lVr=o(" \u2014 "),Iee=a("a"),iVr=o("FlaxGPT2Model"),dVr=o(" (OpenAI GPT-2 model)"),cVr=l(),C3=a("li"),u3e=a("strong"),fVr=o("gpt_neo"),mVr=o(" \u2014 "),Nee=a("a"),gVr=o("FlaxGPTNeoModel"),hVr=o(" (GPT Neo model)"),pVr=l(),w3=a("li"),b3e=a("strong"),_Vr=o("gptj"),uVr=o(" \u2014 "),qee=a("a"),bVr=o("FlaxGPTJModel"),vVr=o(" (GPT-J model)"),FVr=l(),A3=a("li"),v3e=a("strong"),TVr=o("longt5"),MVr=o(" \u2014 "),jee=a("a"),EVr=o("FlaxLongT5Model"),CVr=o(" (LongT5 model)"),wVr=l(),L3=a("li"),F3e=a("strong"),AVr=o("marian"),LVr=o(" \u2014 "),Dee=a("a"),yVr=o("FlaxMarianModel"),xVr=o(" (Marian model)"),$Vr=l(),y3=a("li"),T3e=a("strong"),kVr=o("mbart"),SVr=o(" \u2014 "),Gee=a("a"),RVr=o("FlaxMBartModel"),PVr=o(" (mBART model)"),BVr=l(),x3=a("li"),M3e=a("strong"),IVr=o("mt5"),NVr=o(" \u2014 "),Oee=a("a"),qVr=o("FlaxMT5Model"),jVr=o(" (MT5 model)"),DVr=l(),$3=a("li"),E3e=a("strong"),GVr=o("opt"),OVr=o(" \u2014 "),Vee=a("a"),VVr=o("FlaxOPTModel"),XVr=o(" (OPT model)"),zVr=l(),k3=a("li"),C3e=a("strong"),WVr=o("pegasus"),QVr=o(" \u2014 "),Xee=a("a"),HVr=o("FlaxPegasusModel"),UVr=o(" (Pegasus model)"),JVr=l(),S3=a("li"),w3e=a("strong"),YVr=o("roberta"),KVr=o(" \u2014 "),zee=a("a"),ZVr=o("FlaxRobertaModel"),eXr=o(" (RoBERTa model)"),oXr=l(),R3=a("li"),A3e=a("strong"),rXr=o("roformer"),tXr=o(" \u2014 "),Wee=a("a"),aXr=o("FlaxRoFormerModel"),nXr=o(" (RoFormer model)"),sXr=l(),P3=a("li"),L3e=a("strong"),lXr=o("t5"),iXr=o(" \u2014 "),Qee=a("a"),dXr=o("FlaxT5Model"),cXr=o(" (T5 model)"),fXr=l(),B3=a("li"),y3e=a("strong"),mXr=o("vision-text-dual-encoder"),gXr=o(" \u2014 "),Hee=a("a"),hXr=o("FlaxVisionTextDualEncoderModel"),pXr=o(" (VisionTextDualEncoder model)"),_Xr=l(),I3=a("li"),x3e=a("strong"),uXr=o("vit"),bXr=o(" \u2014 "),Uee=a("a"),vXr=o("FlaxViTModel"),FXr=o(" (ViT model)"),TXr=l(),N3=a("li"),$3e=a("strong"),MXr=o("wav2vec2"),EXr=o(" \u2014 "),Jee=a("a"),CXr=o("FlaxWav2Vec2Model"),wXr=o(" (Wav2Vec2 model)"),AXr=l(),q3=a("li"),k3e=a("strong"),LXr=o("xglm"),yXr=o(" \u2014 "),Yee=a("a"),xXr=o("FlaxXGLMModel"),$Xr=o(" (XGLM model)"),kXr=l(),j3=a("li"),S3e=a("strong"),SXr=o("xlm-roberta"),RXr=o(" \u2014 "),Kee=a("a"),PXr=o("FlaxXLMRobertaModel"),BXr=o(" (XLM-RoBERTa model)"),IXr=l(),F(D3.$$.fragment),PWe=l(),Zc=a("h2"),G3=a("a"),R3e=a("span"),F(w$.$$.fragment),NXr=l(),P3e=a("span"),qXr=o("FlaxAutoModelForCausalLM"),BWe=l(),br=a("div"),F(A$.$$.fragment),jXr=l(),ef=a("p"),DXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Zee=a("a"),GXr=o("from_pretrained()"),OXr=o(" class method or the "),eoe=a("a"),VXr=o("from_config()"),XXr=o(` class
method.`),zXr=l(),L$=a("p"),WXr=o("This class cannot be instantiated directly using "),B3e=a("code"),QXr=o("__init__()"),HXr=o(" (throws an error)."),UXr=l(),Ht=a("div"),F(y$.$$.fragment),JXr=l(),I3e=a("p"),YXr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KXr=l(),of=a("p"),ZXr=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),ezr=o("not"),ozr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=a("a"),rzr=o("from_pretrained()"),tzr=o(" to load the model weights."),azr=l(),F(O3.$$.fragment),nzr=l(),Wr=a("div"),F(x$.$$.fragment),szr=l(),q3e=a("p"),lzr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),izr=l(),En=a("p"),dzr=o("The model class to instantiate is selected based on the "),j3e=a("code"),czr=o("model_type"),fzr=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),mzr=o("pretrained_model_name_or_path"),gzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=a("code"),hzr=o("pretrained_model_name_or_path"),pzr=o(":"),_zr=l(),xe=a("ul"),V3=a("li"),O3e=a("strong"),uzr=o("bart"),bzr=o(" \u2014 "),roe=a("a"),vzr=o("FlaxBartForCausalLM"),Fzr=o(" (BART model)"),Tzr=l(),X3=a("li"),V3e=a("strong"),Mzr=o("bert"),Ezr=o(" \u2014 "),toe=a("a"),Czr=o("FlaxBertForCausalLM"),wzr=o(" (BERT model)"),Azr=l(),z3=a("li"),X3e=a("strong"),Lzr=o("big_bird"),yzr=o(" \u2014 "),aoe=a("a"),xzr=o("FlaxBigBirdForCausalLM"),$zr=o(" (BigBird model)"),kzr=l(),W3=a("li"),z3e=a("strong"),Szr=o("electra"),Rzr=o(" \u2014 "),noe=a("a"),Pzr=o("FlaxElectraForCausalLM"),Bzr=o(" (ELECTRA model)"),Izr=l(),Q3=a("li"),W3e=a("strong"),Nzr=o("gpt2"),qzr=o(" \u2014 "),soe=a("a"),jzr=o("FlaxGPT2LMHeadModel"),Dzr=o(" (OpenAI GPT-2 model)"),Gzr=l(),H3=a("li"),Q3e=a("strong"),Ozr=o("gpt_neo"),Vzr=o(" \u2014 "),loe=a("a"),Xzr=o("FlaxGPTNeoForCausalLM"),zzr=o(" (GPT Neo model)"),Wzr=l(),U3=a("li"),H3e=a("strong"),Qzr=o("gptj"),Hzr=o(" \u2014 "),ioe=a("a"),Uzr=o("FlaxGPTJForCausalLM"),Jzr=o(" (GPT-J model)"),Yzr=l(),J3=a("li"),U3e=a("strong"),Kzr=o("opt"),Zzr=o(" \u2014 "),doe=a("a"),eWr=o("FlaxOPTForCausalLM"),oWr=o(" (OPT model)"),rWr=l(),Y3=a("li"),J3e=a("strong"),tWr=o("roberta"),aWr=o(" \u2014 "),coe=a("a"),nWr=o("FlaxRobertaForCausalLM"),sWr=o(" (RoBERTa model)"),lWr=l(),K3=a("li"),Y3e=a("strong"),iWr=o("xglm"),dWr=o(" \u2014 "),foe=a("a"),cWr=o("FlaxXGLMForCausalLM"),fWr=o(" (XGLM model)"),mWr=l(),F(Z3.$$.fragment),IWe=l(),rf=a("h2"),e0=a("a"),K3e=a("span"),F($$.$$.fragment),gWr=l(),Z3e=a("span"),hWr=o("FlaxAutoModelForPreTraining"),NWe=l(),vr=a("div"),F(k$.$$.fragment),pWr=l(),tf=a("p"),_Wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),moe=a("a"),uWr=o("from_pretrained()"),bWr=o(" class method or the "),goe=a("a"),vWr=o("from_config()"),FWr=o(` class
method.`),TWr=l(),S$=a("p"),MWr=o("This class cannot be instantiated directly using "),e0e=a("code"),EWr=o("__init__()"),CWr=o(" (throws an error)."),wWr=l(),Ut=a("div"),F(R$.$$.fragment),AWr=l(),o0e=a("p"),LWr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yWr=l(),af=a("p"),xWr=o(`Note:
Loading a model from its configuration file does `),r0e=a("strong"),$Wr=o("not"),kWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),SWr=o("from_pretrained()"),RWr=o(" to load the model weights."),PWr=l(),F(o0.$$.fragment),BWr=l(),Qr=a("div"),F(P$.$$.fragment),IWr=l(),t0e=a("p"),NWr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qWr=l(),Cn=a("p"),jWr=o("The model class to instantiate is selected based on the "),a0e=a("code"),DWr=o("model_type"),GWr=o(` property of the config object (either
passed as an argument or loaded from `),n0e=a("code"),OWr=o("pretrained_model_name_or_path"),VWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=a("code"),XWr=o("pretrained_model_name_or_path"),zWr=o(":"),WWr=l(),Ee=a("ul"),r0=a("li"),l0e=a("strong"),QWr=o("albert"),HWr=o(" \u2014 "),poe=a("a"),UWr=o("FlaxAlbertForPreTraining"),JWr=o(" (ALBERT model)"),YWr=l(),t0=a("li"),i0e=a("strong"),KWr=o("bart"),ZWr=o(" \u2014 "),_oe=a("a"),eQr=o("FlaxBartForConditionalGeneration"),oQr=o(" (BART model)"),rQr=l(),a0=a("li"),d0e=a("strong"),tQr=o("bert"),aQr=o(" \u2014 "),uoe=a("a"),nQr=o("FlaxBertForPreTraining"),sQr=o(" (BERT model)"),lQr=l(),n0=a("li"),c0e=a("strong"),iQr=o("big_bird"),dQr=o(" \u2014 "),boe=a("a"),cQr=o("FlaxBigBirdForPreTraining"),fQr=o(" (BigBird model)"),mQr=l(),s0=a("li"),f0e=a("strong"),gQr=o("electra"),hQr=o(" \u2014 "),voe=a("a"),pQr=o("FlaxElectraForPreTraining"),_Qr=o(" (ELECTRA model)"),uQr=l(),l0=a("li"),m0e=a("strong"),bQr=o("longt5"),vQr=o(" \u2014 "),Foe=a("a"),FQr=o("FlaxLongT5ForConditionalGeneration"),TQr=o(" (LongT5 model)"),MQr=l(),i0=a("li"),g0e=a("strong"),EQr=o("mbart"),CQr=o(" \u2014 "),Toe=a("a"),wQr=o("FlaxMBartForConditionalGeneration"),AQr=o(" (mBART model)"),LQr=l(),d0=a("li"),h0e=a("strong"),yQr=o("mt5"),xQr=o(" \u2014 "),Moe=a("a"),$Qr=o("FlaxMT5ForConditionalGeneration"),kQr=o(" (MT5 model)"),SQr=l(),c0=a("li"),p0e=a("strong"),RQr=o("roberta"),PQr=o(" \u2014 "),Eoe=a("a"),BQr=o("FlaxRobertaForMaskedLM"),IQr=o(" (RoBERTa model)"),NQr=l(),f0=a("li"),_0e=a("strong"),qQr=o("roformer"),jQr=o(" \u2014 "),Coe=a("a"),DQr=o("FlaxRoFormerForMaskedLM"),GQr=o(" (RoFormer model)"),OQr=l(),m0=a("li"),u0e=a("strong"),VQr=o("t5"),XQr=o(" \u2014 "),woe=a("a"),zQr=o("FlaxT5ForConditionalGeneration"),WQr=o(" (T5 model)"),QQr=l(),g0=a("li"),b0e=a("strong"),HQr=o("wav2vec2"),UQr=o(" \u2014 "),Aoe=a("a"),JQr=o("FlaxWav2Vec2ForPreTraining"),YQr=o(" (Wav2Vec2 model)"),KQr=l(),h0=a("li"),v0e=a("strong"),ZQr=o("xlm-roberta"),eHr=o(" \u2014 "),Loe=a("a"),oHr=o("FlaxXLMRobertaForMaskedLM"),rHr=o(" (XLM-RoBERTa model)"),tHr=l(),F(p0.$$.fragment),qWe=l(),nf=a("h2"),_0=a("a"),F0e=a("span"),F(B$.$$.fragment),aHr=l(),T0e=a("span"),nHr=o("FlaxAutoModelForMaskedLM"),jWe=l(),Fr=a("div"),F(I$.$$.fragment),sHr=l(),sf=a("p"),lHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yoe=a("a"),iHr=o("from_pretrained()"),dHr=o(" class method or the "),xoe=a("a"),cHr=o("from_config()"),fHr=o(` class
method.`),mHr=l(),N$=a("p"),gHr=o("This class cannot be instantiated directly using "),M0e=a("code"),hHr=o("__init__()"),pHr=o(" (throws an error)."),_Hr=l(),Jt=a("div"),F(q$.$$.fragment),uHr=l(),E0e=a("p"),bHr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vHr=l(),lf=a("p"),FHr=o(`Note:
Loading a model from its configuration file does `),C0e=a("strong"),THr=o("not"),MHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=a("a"),EHr=o("from_pretrained()"),CHr=o(" to load the model weights."),wHr=l(),F(u0.$$.fragment),AHr=l(),Hr=a("div"),F(j$.$$.fragment),LHr=l(),w0e=a("p"),yHr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xHr=l(),wn=a("p"),$Hr=o("The model class to instantiate is selected based on the "),A0e=a("code"),kHr=o("model_type"),SHr=o(` property of the config object (either
passed as an argument or loaded from `),L0e=a("code"),RHr=o("pretrained_model_name_or_path"),PHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=a("code"),BHr=o("pretrained_model_name_or_path"),IHr=o(":"),NHr=l(),$e=a("ul"),b0=a("li"),x0e=a("strong"),qHr=o("albert"),jHr=o(" \u2014 "),koe=a("a"),DHr=o("FlaxAlbertForMaskedLM"),GHr=o(" (ALBERT model)"),OHr=l(),v0=a("li"),$0e=a("strong"),VHr=o("bart"),XHr=o(" \u2014 "),Soe=a("a"),zHr=o("FlaxBartForConditionalGeneration"),WHr=o(" (BART model)"),QHr=l(),F0=a("li"),k0e=a("strong"),HHr=o("bert"),UHr=o(" \u2014 "),Roe=a("a"),JHr=o("FlaxBertForMaskedLM"),YHr=o(" (BERT model)"),KHr=l(),T0=a("li"),S0e=a("strong"),ZHr=o("big_bird"),eUr=o(" \u2014 "),Poe=a("a"),oUr=o("FlaxBigBirdForMaskedLM"),rUr=o(" (BigBird model)"),tUr=l(),M0=a("li"),R0e=a("strong"),aUr=o("distilbert"),nUr=o(" \u2014 "),Boe=a("a"),sUr=o("FlaxDistilBertForMaskedLM"),lUr=o(" (DistilBERT model)"),iUr=l(),E0=a("li"),P0e=a("strong"),dUr=o("electra"),cUr=o(" \u2014 "),Ioe=a("a"),fUr=o("FlaxElectraForMaskedLM"),mUr=o(" (ELECTRA model)"),gUr=l(),C0=a("li"),B0e=a("strong"),hUr=o("mbart"),pUr=o(" \u2014 "),Noe=a("a"),_Ur=o("FlaxMBartForConditionalGeneration"),uUr=o(" (mBART model)"),bUr=l(),w0=a("li"),I0e=a("strong"),vUr=o("roberta"),FUr=o(" \u2014 "),qoe=a("a"),TUr=o("FlaxRobertaForMaskedLM"),MUr=o(" (RoBERTa model)"),EUr=l(),A0=a("li"),N0e=a("strong"),CUr=o("roformer"),wUr=o(" \u2014 "),joe=a("a"),AUr=o("FlaxRoFormerForMaskedLM"),LUr=o(" (RoFormer model)"),yUr=l(),L0=a("li"),q0e=a("strong"),xUr=o("xlm-roberta"),$Ur=o(" \u2014 "),Doe=a("a"),kUr=o("FlaxXLMRobertaForMaskedLM"),SUr=o(" (XLM-RoBERTa model)"),RUr=l(),F(y0.$$.fragment),DWe=l(),df=a("h2"),x0=a("a"),j0e=a("span"),F(D$.$$.fragment),PUr=l(),D0e=a("span"),BUr=o("FlaxAutoModelForSeq2SeqLM"),GWe=l(),Tr=a("div"),F(G$.$$.fragment),IUr=l(),cf=a("p"),NUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Goe=a("a"),qUr=o("from_pretrained()"),jUr=o(" class method or the "),Ooe=a("a"),DUr=o("from_config()"),GUr=o(` class
method.`),OUr=l(),O$=a("p"),VUr=o("This class cannot be instantiated directly using "),G0e=a("code"),XUr=o("__init__()"),zUr=o(" (throws an error)."),WUr=l(),Yt=a("div"),F(V$.$$.fragment),QUr=l(),O0e=a("p"),HUr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UUr=l(),ff=a("p"),JUr=o(`Note:
Loading a model from its configuration file does `),V0e=a("strong"),YUr=o("not"),KUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=a("a"),ZUr=o("from_pretrained()"),eJr=o(" to load the model weights."),oJr=l(),F($0.$$.fragment),rJr=l(),Ur=a("div"),F(X$.$$.fragment),tJr=l(),X0e=a("p"),aJr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nJr=l(),An=a("p"),sJr=o("The model class to instantiate is selected based on the "),z0e=a("code"),lJr=o("model_type"),iJr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),dJr=o("pretrained_model_name_or_path"),cJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=a("code"),fJr=o("pretrained_model_name_or_path"),mJr=o(":"),gJr=l(),ke=a("ul"),k0=a("li"),H0e=a("strong"),hJr=o("bart"),pJr=o(" \u2014 "),Xoe=a("a"),_Jr=o("FlaxBartForConditionalGeneration"),uJr=o(" (BART model)"),bJr=l(),S0=a("li"),U0e=a("strong"),vJr=o("blenderbot"),FJr=o(" \u2014 "),zoe=a("a"),TJr=o("FlaxBlenderbotForConditionalGeneration"),MJr=o(" (Blenderbot model)"),EJr=l(),R0=a("li"),J0e=a("strong"),CJr=o("blenderbot-small"),wJr=o(" \u2014 "),Woe=a("a"),AJr=o("FlaxBlenderbotSmallForConditionalGeneration"),LJr=o(" (BlenderbotSmall model)"),yJr=l(),P0=a("li"),Y0e=a("strong"),xJr=o("encoder-decoder"),$Jr=o(" \u2014 "),Qoe=a("a"),kJr=o("FlaxEncoderDecoderModel"),SJr=o(" (Encoder decoder model)"),RJr=l(),B0=a("li"),K0e=a("strong"),PJr=o("longt5"),BJr=o(" \u2014 "),Hoe=a("a"),IJr=o("FlaxLongT5ForConditionalGeneration"),NJr=o(" (LongT5 model)"),qJr=l(),I0=a("li"),Z0e=a("strong"),jJr=o("marian"),DJr=o(" \u2014 "),Uoe=a("a"),GJr=o("FlaxMarianMTModel"),OJr=o(" (Marian model)"),VJr=l(),N0=a("li"),ewe=a("strong"),XJr=o("mbart"),zJr=o(" \u2014 "),Joe=a("a"),WJr=o("FlaxMBartForConditionalGeneration"),QJr=o(" (mBART model)"),HJr=l(),q0=a("li"),owe=a("strong"),UJr=o("mt5"),JJr=o(" \u2014 "),Yoe=a("a"),YJr=o("FlaxMT5ForConditionalGeneration"),KJr=o(" (MT5 model)"),ZJr=l(),j0=a("li"),rwe=a("strong"),eYr=o("pegasus"),oYr=o(" \u2014 "),Koe=a("a"),rYr=o("FlaxPegasusForConditionalGeneration"),tYr=o(" (Pegasus model)"),aYr=l(),D0=a("li"),twe=a("strong"),nYr=o("t5"),sYr=o(" \u2014 "),Zoe=a("a"),lYr=o("FlaxT5ForConditionalGeneration"),iYr=o(" (T5 model)"),dYr=l(),F(G0.$$.fragment),OWe=l(),mf=a("h2"),O0=a("a"),awe=a("span"),F(z$.$$.fragment),cYr=l(),nwe=a("span"),fYr=o("FlaxAutoModelForSequenceClassification"),VWe=l(),Mr=a("div"),F(W$.$$.fragment),mYr=l(),gf=a("p"),gYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ere=a("a"),hYr=o("from_pretrained()"),pYr=o(" class method or the "),ore=a("a"),_Yr=o("from_config()"),uYr=o(` class
method.`),bYr=l(),Q$=a("p"),vYr=o("This class cannot be instantiated directly using "),swe=a("code"),FYr=o("__init__()"),TYr=o(" (throws an error)."),MYr=l(),Kt=a("div"),F(H$.$$.fragment),EYr=l(),lwe=a("p"),CYr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wYr=l(),hf=a("p"),AYr=o(`Note:
Loading a model from its configuration file does `),iwe=a("strong"),LYr=o("not"),yYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=a("a"),xYr=o("from_pretrained()"),$Yr=o(" to load the model weights."),kYr=l(),F(V0.$$.fragment),SYr=l(),Jr=a("div"),F(U$.$$.fragment),RYr=l(),dwe=a("p"),PYr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BYr=l(),Ln=a("p"),IYr=o("The model class to instantiate is selected based on the "),cwe=a("code"),NYr=o("model_type"),qYr=o(` property of the config object (either
passed as an argument or loaded from `),fwe=a("code"),jYr=o("pretrained_model_name_or_path"),DYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mwe=a("code"),GYr=o("pretrained_model_name_or_path"),OYr=o(":"),VYr=l(),Se=a("ul"),X0=a("li"),gwe=a("strong"),XYr=o("albert"),zYr=o(" \u2014 "),tre=a("a"),WYr=o("FlaxAlbertForSequenceClassification"),QYr=o(" (ALBERT model)"),HYr=l(),z0=a("li"),hwe=a("strong"),UYr=o("bart"),JYr=o(" \u2014 "),are=a("a"),YYr=o("FlaxBartForSequenceClassification"),KYr=o(" (BART model)"),ZYr=l(),W0=a("li"),pwe=a("strong"),eKr=o("bert"),oKr=o(" \u2014 "),nre=a("a"),rKr=o("FlaxBertForSequenceClassification"),tKr=o(" (BERT model)"),aKr=l(),Q0=a("li"),_we=a("strong"),nKr=o("big_bird"),sKr=o(" \u2014 "),sre=a("a"),lKr=o("FlaxBigBirdForSequenceClassification"),iKr=o(" (BigBird model)"),dKr=l(),H0=a("li"),uwe=a("strong"),cKr=o("distilbert"),fKr=o(" \u2014 "),lre=a("a"),mKr=o("FlaxDistilBertForSequenceClassification"),gKr=o(" (DistilBERT model)"),hKr=l(),U0=a("li"),bwe=a("strong"),pKr=o("electra"),_Kr=o(" \u2014 "),ire=a("a"),uKr=o("FlaxElectraForSequenceClassification"),bKr=o(" (ELECTRA model)"),vKr=l(),J0=a("li"),vwe=a("strong"),FKr=o("mbart"),TKr=o(" \u2014 "),dre=a("a"),MKr=o("FlaxMBartForSequenceClassification"),EKr=o(" (mBART model)"),CKr=l(),Y0=a("li"),Fwe=a("strong"),wKr=o("roberta"),AKr=o(" \u2014 "),cre=a("a"),LKr=o("FlaxRobertaForSequenceClassification"),yKr=o(" (RoBERTa model)"),xKr=l(),K0=a("li"),Twe=a("strong"),$Kr=o("roformer"),kKr=o(" \u2014 "),fre=a("a"),SKr=o("FlaxRoFormerForSequenceClassification"),RKr=o(" (RoFormer model)"),PKr=l(),Z0=a("li"),Mwe=a("strong"),BKr=o("xlm-roberta"),IKr=o(" \u2014 "),mre=a("a"),NKr=o("FlaxXLMRobertaForSequenceClassification"),qKr=o(" (XLM-RoBERTa model)"),jKr=l(),F(ew.$$.fragment),XWe=l(),pf=a("h2"),ow=a("a"),Ewe=a("span"),F(J$.$$.fragment),DKr=l(),Cwe=a("span"),GKr=o("FlaxAutoModelForQuestionAnswering"),zWe=l(),Er=a("div"),F(Y$.$$.fragment),OKr=l(),_f=a("p"),VKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gre=a("a"),XKr=o("from_pretrained()"),zKr=o(" class method or the "),hre=a("a"),WKr=o("from_config()"),QKr=o(` class
method.`),HKr=l(),K$=a("p"),UKr=o("This class cannot be instantiated directly using "),wwe=a("code"),JKr=o("__init__()"),YKr=o(" (throws an error)."),KKr=l(),Zt=a("div"),F(Z$.$$.fragment),ZKr=l(),Awe=a("p"),eZr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oZr=l(),uf=a("p"),rZr=o(`Note:
Loading a model from its configuration file does `),Lwe=a("strong"),tZr=o("not"),aZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=a("a"),nZr=o("from_pretrained()"),sZr=o(" to load the model weights."),lZr=l(),F(rw.$$.fragment),iZr=l(),Yr=a("div"),F(ek.$$.fragment),dZr=l(),ywe=a("p"),cZr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fZr=l(),yn=a("p"),mZr=o("The model class to instantiate is selected based on the "),xwe=a("code"),gZr=o("model_type"),hZr=o(` property of the config object (either
passed as an argument or loaded from `),$we=a("code"),pZr=o("pretrained_model_name_or_path"),_Zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=a("code"),uZr=o("pretrained_model_name_or_path"),bZr=o(":"),vZr=l(),Re=a("ul"),tw=a("li"),Swe=a("strong"),FZr=o("albert"),TZr=o(" \u2014 "),_re=a("a"),MZr=o("FlaxAlbertForQuestionAnswering"),EZr=o(" (ALBERT model)"),CZr=l(),aw=a("li"),Rwe=a("strong"),wZr=o("bart"),AZr=o(" \u2014 "),ure=a("a"),LZr=o("FlaxBartForQuestionAnswering"),yZr=o(" (BART model)"),xZr=l(),nw=a("li"),Pwe=a("strong"),$Zr=o("bert"),kZr=o(" \u2014 "),bre=a("a"),SZr=o("FlaxBertForQuestionAnswering"),RZr=o(" (BERT model)"),PZr=l(),sw=a("li"),Bwe=a("strong"),BZr=o("big_bird"),IZr=o(" \u2014 "),vre=a("a"),NZr=o("FlaxBigBirdForQuestionAnswering"),qZr=o(" (BigBird model)"),jZr=l(),lw=a("li"),Iwe=a("strong"),DZr=o("distilbert"),GZr=o(" \u2014 "),Fre=a("a"),OZr=o("FlaxDistilBertForQuestionAnswering"),VZr=o(" (DistilBERT model)"),XZr=l(),iw=a("li"),Nwe=a("strong"),zZr=o("electra"),WZr=o(" \u2014 "),Tre=a("a"),QZr=o("FlaxElectraForQuestionAnswering"),HZr=o(" (ELECTRA model)"),UZr=l(),dw=a("li"),qwe=a("strong"),JZr=o("mbart"),YZr=o(" \u2014 "),Mre=a("a"),KZr=o("FlaxMBartForQuestionAnswering"),ZZr=o(" (mBART model)"),eet=l(),cw=a("li"),jwe=a("strong"),oet=o("roberta"),ret=o(" \u2014 "),Ere=a("a"),tet=o("FlaxRobertaForQuestionAnswering"),aet=o(" (RoBERTa model)"),net=l(),fw=a("li"),Dwe=a("strong"),set=o("roformer"),iet=o(" \u2014 "),Cre=a("a"),det=o("FlaxRoFormerForQuestionAnswering"),cet=o(" (RoFormer model)"),fet=l(),mw=a("li"),Gwe=a("strong"),met=o("xlm-roberta"),get=o(" \u2014 "),wre=a("a"),het=o("FlaxXLMRobertaForQuestionAnswering"),pet=o(" (XLM-RoBERTa model)"),_et=l(),F(gw.$$.fragment),WWe=l(),bf=a("h2"),hw=a("a"),Owe=a("span"),F(ok.$$.fragment),uet=l(),Vwe=a("span"),bet=o("FlaxAutoModelForTokenClassification"),QWe=l(),Cr=a("div"),F(rk.$$.fragment),vet=l(),vf=a("p"),Fet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Are=a("a"),Tet=o("from_pretrained()"),Met=o(" class method or the "),Lre=a("a"),Eet=o("from_config()"),Cet=o(` class
method.`),wet=l(),tk=a("p"),Aet=o("This class cannot be instantiated directly using "),Xwe=a("code"),Let=o("__init__()"),yet=o(" (throws an error)."),xet=l(),ea=a("div"),F(ak.$$.fragment),$et=l(),zwe=a("p"),ket=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Set=l(),Ff=a("p"),Ret=o(`Note:
Loading a model from its configuration file does `),Wwe=a("strong"),Pet=o("not"),Bet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("a"),Iet=o("from_pretrained()"),Net=o(" to load the model weights."),qet=l(),F(pw.$$.fragment),jet=l(),Kr=a("div"),F(nk.$$.fragment),Det=l(),Qwe=a("p"),Get=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oet=l(),xn=a("p"),Vet=o("The model class to instantiate is selected based on the "),Hwe=a("code"),Xet=o("model_type"),zet=o(` property of the config object (either
passed as an argument or loaded from `),Uwe=a("code"),Wet=o("pretrained_model_name_or_path"),Qet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=a("code"),Het=o("pretrained_model_name_or_path"),Uet=o(":"),Jet=l(),Xe=a("ul"),_w=a("li"),Ywe=a("strong"),Yet=o("albert"),Ket=o(" \u2014 "),xre=a("a"),Zet=o("FlaxAlbertForTokenClassification"),eot=o(" (ALBERT model)"),oot=l(),uw=a("li"),Kwe=a("strong"),rot=o("bert"),tot=o(" \u2014 "),$re=a("a"),aot=o("FlaxBertForTokenClassification"),not=o(" (BERT model)"),sot=l(),bw=a("li"),Zwe=a("strong"),lot=o("big_bird"),iot=o(" \u2014 "),kre=a("a"),dot=o("FlaxBigBirdForTokenClassification"),cot=o(" (BigBird model)"),fot=l(),vw=a("li"),eAe=a("strong"),mot=o("distilbert"),got=o(" \u2014 "),Sre=a("a"),hot=o("FlaxDistilBertForTokenClassification"),pot=o(" (DistilBERT model)"),_ot=l(),Fw=a("li"),oAe=a("strong"),uot=o("electra"),bot=o(" \u2014 "),Rre=a("a"),vot=o("FlaxElectraForTokenClassification"),Fot=o(" (ELECTRA model)"),Tot=l(),Tw=a("li"),rAe=a("strong"),Mot=o("roberta"),Eot=o(" \u2014 "),Pre=a("a"),Cot=o("FlaxRobertaForTokenClassification"),wot=o(" (RoBERTa model)"),Aot=l(),Mw=a("li"),tAe=a("strong"),Lot=o("roformer"),yot=o(" \u2014 "),Bre=a("a"),xot=o("FlaxRoFormerForTokenClassification"),$ot=o(" (RoFormer model)"),kot=l(),Ew=a("li"),aAe=a("strong"),Sot=o("xlm-roberta"),Rot=o(" \u2014 "),Ire=a("a"),Pot=o("FlaxXLMRobertaForTokenClassification"),Bot=o(" (XLM-RoBERTa model)"),Iot=l(),F(Cw.$$.fragment),HWe=l(),Tf=a("h2"),ww=a("a"),nAe=a("span"),F(sk.$$.fragment),Not=l(),sAe=a("span"),qot=o("FlaxAutoModelForMultipleChoice"),UWe=l(),wr=a("div"),F(lk.$$.fragment),jot=l(),Mf=a("p"),Dot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Nre=a("a"),Got=o("from_pretrained()"),Oot=o(" class method or the "),qre=a("a"),Vot=o("from_config()"),Xot=o(` class
method.`),zot=l(),ik=a("p"),Wot=o("This class cannot be instantiated directly using "),lAe=a("code"),Qot=o("__init__()"),Hot=o(" (throws an error)."),Uot=l(),oa=a("div"),F(dk.$$.fragment),Jot=l(),iAe=a("p"),Yot=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kot=l(),Ef=a("p"),Zot=o(`Note:
Loading a model from its configuration file does `),dAe=a("strong"),ert=o("not"),ort=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=a("a"),rrt=o("from_pretrained()"),trt=o(" to load the model weights."),art=l(),F(Aw.$$.fragment),nrt=l(),Zr=a("div"),F(ck.$$.fragment),srt=l(),cAe=a("p"),lrt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),irt=l(),$n=a("p"),drt=o("The model class to instantiate is selected based on the "),fAe=a("code"),crt=o("model_type"),frt=o(` property of the config object (either
passed as an argument or loaded from `),mAe=a("code"),mrt=o("pretrained_model_name_or_path"),grt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=a("code"),hrt=o("pretrained_model_name_or_path"),prt=o(":"),_rt=l(),ze=a("ul"),Lw=a("li"),hAe=a("strong"),urt=o("albert"),brt=o(" \u2014 "),Dre=a("a"),vrt=o("FlaxAlbertForMultipleChoice"),Frt=o(" (ALBERT model)"),Trt=l(),yw=a("li"),pAe=a("strong"),Mrt=o("bert"),Ert=o(" \u2014 "),Gre=a("a"),Crt=o("FlaxBertForMultipleChoice"),wrt=o(" (BERT model)"),Art=l(),xw=a("li"),_Ae=a("strong"),Lrt=o("big_bird"),yrt=o(" \u2014 "),Ore=a("a"),xrt=o("FlaxBigBirdForMultipleChoice"),$rt=o(" (BigBird model)"),krt=l(),$w=a("li"),uAe=a("strong"),Srt=o("distilbert"),Rrt=o(" \u2014 "),Vre=a("a"),Prt=o("FlaxDistilBertForMultipleChoice"),Brt=o(" (DistilBERT model)"),Irt=l(),kw=a("li"),bAe=a("strong"),Nrt=o("electra"),qrt=o(" \u2014 "),Xre=a("a"),jrt=o("FlaxElectraForMultipleChoice"),Drt=o(" (ELECTRA model)"),Grt=l(),Sw=a("li"),vAe=a("strong"),Ort=o("roberta"),Vrt=o(" \u2014 "),zre=a("a"),Xrt=o("FlaxRobertaForMultipleChoice"),zrt=o(" (RoBERTa model)"),Wrt=l(),Rw=a("li"),FAe=a("strong"),Qrt=o("roformer"),Hrt=o(" \u2014 "),Wre=a("a"),Urt=o("FlaxRoFormerForMultipleChoice"),Jrt=o(" (RoFormer model)"),Yrt=l(),Pw=a("li"),TAe=a("strong"),Krt=o("xlm-roberta"),Zrt=o(" \u2014 "),Qre=a("a"),ett=o("FlaxXLMRobertaForMultipleChoice"),ott=o(" (XLM-RoBERTa model)"),rtt=l(),F(Bw.$$.fragment),JWe=l(),Cf=a("h2"),Iw=a("a"),MAe=a("span"),F(fk.$$.fragment),ttt=l(),EAe=a("span"),att=o("FlaxAutoModelForNextSentencePrediction"),YWe=l(),Ar=a("div"),F(mk.$$.fragment),ntt=l(),wf=a("p"),stt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Hre=a("a"),ltt=o("from_pretrained()"),itt=o(" class method or the "),Ure=a("a"),dtt=o("from_config()"),ctt=o(` class
method.`),ftt=l(),gk=a("p"),mtt=o("This class cannot be instantiated directly using "),CAe=a("code"),gtt=o("__init__()"),htt=o(" (throws an error)."),ptt=l(),ra=a("div"),F(hk.$$.fragment),_tt=l(),wAe=a("p"),utt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),btt=l(),Af=a("p"),vtt=o(`Note:
Loading a model from its configuration file does `),AAe=a("strong"),Ftt=o("not"),Ttt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=a("a"),Mtt=o("from_pretrained()"),Ett=o(" to load the model weights."),Ctt=l(),F(Nw.$$.fragment),wtt=l(),et=a("div"),F(pk.$$.fragment),Att=l(),LAe=a("p"),Ltt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ytt=l(),kn=a("p"),xtt=o("The model class to instantiate is selected based on the "),yAe=a("code"),$tt=o("model_type"),ktt=o(` property of the config object (either
passed as an argument or loaded from `),xAe=a("code"),Stt=o("pretrained_model_name_or_path"),Rtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ae=a("code"),Ptt=o("pretrained_model_name_or_path"),Btt=o(":"),Itt=l(),kAe=a("ul"),qw=a("li"),SAe=a("strong"),Ntt=o("bert"),qtt=o(" \u2014 "),Yre=a("a"),jtt=o("FlaxBertForNextSentencePrediction"),Dtt=o(" (BERT model)"),Gtt=l(),F(jw.$$.fragment),KWe=l(),Lf=a("h2"),Dw=a("a"),RAe=a("span"),F(_k.$$.fragment),Ott=l(),PAe=a("span"),Vtt=o("FlaxAutoModelForImageClassification"),ZWe=l(),Lr=a("div"),F(uk.$$.fragment),Xtt=l(),yf=a("p"),ztt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Kre=a("a"),Wtt=o("from_pretrained()"),Qtt=o(" class method or the "),Zre=a("a"),Htt=o("from_config()"),Utt=o(` class
method.`),Jtt=l(),bk=a("p"),Ytt=o("This class cannot be instantiated directly using "),BAe=a("code"),Ktt=o("__init__()"),Ztt=o(" (throws an error)."),eat=l(),ta=a("div"),F(vk.$$.fragment),oat=l(),IAe=a("p"),rat=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tat=l(),xf=a("p"),aat=o(`Note:
Loading a model from its configuration file does `),NAe=a("strong"),nat=o("not"),sat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=a("a"),lat=o("from_pretrained()"),iat=o(" to load the model weights."),dat=l(),F(Gw.$$.fragment),cat=l(),ot=a("div"),F(Fk.$$.fragment),fat=l(),qAe=a("p"),mat=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gat=l(),Sn=a("p"),hat=o("The model class to instantiate is selected based on the "),jAe=a("code"),pat=o("model_type"),_at=o(` property of the config object (either
passed as an argument or loaded from `),DAe=a("code"),uat=o("pretrained_model_name_or_path"),bat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GAe=a("code"),vat=o("pretrained_model_name_or_path"),Fat=o(":"),Tat=l(),Tk=a("ul"),Ow=a("li"),OAe=a("strong"),Mat=o("beit"),Eat=o(" \u2014 "),ote=a("a"),Cat=o("FlaxBeitForImageClassification"),wat=o(" (BEiT model)"),Aat=l(),Vw=a("li"),VAe=a("strong"),Lat=o("vit"),yat=o(" \u2014 "),rte=a("a"),xat=o("FlaxViTForImageClassification"),$at=o(" (ViT model)"),kat=l(),F(Xw.$$.fragment),eQe=l(),$f=a("h2"),zw=a("a"),XAe=a("span"),F(Mk.$$.fragment),Sat=l(),zAe=a("span"),Rat=o("FlaxAutoModelForVision2Seq"),oQe=l(),yr=a("div"),F(Ek.$$.fragment),Pat=l(),kf=a("p"),Bat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tte=a("a"),Iat=o("from_pretrained()"),Nat=o(" class method or the "),ate=a("a"),qat=o("from_config()"),jat=o(` class
method.`),Dat=l(),Ck=a("p"),Gat=o("This class cannot be instantiated directly using "),WAe=a("code"),Oat=o("__init__()"),Vat=o(" (throws an error)."),Xat=l(),aa=a("div"),F(wk.$$.fragment),zat=l(),QAe=a("p"),Wat=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qat=l(),Sf=a("p"),Hat=o(`Note:
Loading a model from its configuration file does `),HAe=a("strong"),Uat=o("not"),Jat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=a("a"),Yat=o("from_pretrained()"),Kat=o(" to load the model weights."),Zat=l(),F(Ww.$$.fragment),ent=l(),rt=a("div"),F(Ak.$$.fragment),ont=l(),UAe=a("p"),rnt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tnt=l(),Rn=a("p"),ant=o("The model class to instantiate is selected based on the "),JAe=a("code"),nnt=o("model_type"),snt=o(` property of the config object (either
passed as an argument or loaded from `),YAe=a("code"),lnt=o("pretrained_model_name_or_path"),int=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=a("code"),dnt=o("pretrained_model_name_or_path"),cnt=o(":"),fnt=l(),ZAe=a("ul"),Qw=a("li"),eLe=a("strong"),mnt=o("vision-encoder-decoder"),gnt=o(" \u2014 "),ste=a("a"),hnt=o("FlaxVisionEncoderDecoderModel"),pnt=o(" (Vision Encoder decoder model)"),_nt=l(),F(Hw.$$.fragment),this.h()},l(f){const u=MUt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Lk=s(p);m=n(Lk,"A",{id:!0,class:!0,href:!0});var oLe=s(m);_=n(oLe,"SPAN",{});var rLe=s(_);T(c.$$.fragment,rLe),rLe.forEach(t),oLe.forEach(t),h=i(Lk),wo=n(Lk,"SPAN",{});var tLe=s(wo);xi=r(tLe,"Auto Classes"),tLe.forEach(t),Lk.forEach(t),If=i(f),lt=n(f,"P",{});var yk=s(lt);$i=r(yk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=n(yk,"CODE",{});var aLe=s(ki);gy=r(aLe,"from_pretrained()"),aLe.forEach(t),Nf=r(yk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),yk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Pn=s(Qe);Si=r(Pn,"Instantiating one of "),Bn=n(Pn,"A",{href:!0});var nLe=s(Bn);hy=r(nLe,"AutoConfig"),nLe.forEach(t),In=r(Pn,", "),Nn=n(Pn,"A",{href:!0});var sLe=s(Nn);py=r(sLe,"AutoModel"),sLe.forEach(t),Ri=r(Pn,`, and
`),qn=n(Pn,"A",{href:!0});var lLe=s(qn);_y=r(lLe,"AutoTokenizer"),lLe.forEach(t),Pi=r(Pn," will directly create a class of the relevant architecture. For instance"),Pn.forEach(t),qf=i(f),T(Ra.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var xk=s(Ae);JS=r(xk,"will create a model that is an instance of "),Bi=n(xk,"A",{href:!0});var iLe=s(Bi);YS=r(iLe,"BertModel"),iLe.forEach(t),KS=r(xk,"."),xk.forEach(t),Ao=i(f),Pa=n(f,"P",{});var $k=s(Pa);ZS=r($k,"There is one class of "),jf=n($k,"CODE",{});var dLe=s(jf);eR=r(dLe,"AutoModel"),dLe.forEach(t),mUe=r($k," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$k.forEach(t),YXe=i(f),Ii=n(f,"H2",{class:!0});var kk=s(Ii);Df=n(kk,"A",{id:!0,class:!0,href:!0});var cLe=s(Df);one=n(cLe,"SPAN",{});var fLe=s(one);T(uy.$$.fragment,fLe),fLe.forEach(t),cLe.forEach(t),gUe=i(kk),rne=n(kk,"SPAN",{});var mLe=s(rne);hUe=r(mLe,"Extending the Auto Classes"),mLe.forEach(t),kk.forEach(t),KXe=i(f),jn=n(f,"P",{});var Rf=s(jn);pUe=r(Rf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tne=n(Rf,"CODE",{});var gLe=s(tne);_Ue=r(gLe,"NewModel"),gLe.forEach(t),uUe=r(Rf,", make sure you have a "),ane=n(Rf,"CODE",{});var hLe=s(ane);bUe=r(hLe,"NewModelConfig"),hLe.forEach(t),vUe=r(Rf,` then you can add those to the auto
classes like this:`),Rf.forEach(t),ZXe=i(f),T(by.$$.fragment,f),eze=i(f),oR=n(f,"P",{});var pLe=s(oR);FUe=r(pLe,"You will then be able to use the auto classes like you would usually do!"),pLe.forEach(t),oze=i(f),T(Gf.$$.fragment,f),rze=i(f),Ni=n(f,"H2",{class:!0});var Sk=s(Ni);Of=n(Sk,"A",{id:!0,class:!0,href:!0});var _Le=s(Of);nne=n(_Le,"SPAN",{});var uLe=s(nne);T(vy.$$.fragment,uLe),uLe.forEach(t),_Le.forEach(t),TUe=i(Sk),sne=n(Sk,"SPAN",{});var bLe=s(sne);MUe=r(bLe,"AutoConfig"),bLe.forEach(t),Sk.forEach(t),tze=i(f),Lo=n(f,"DIV",{class:!0});var nt=s(Lo);T(Fy.$$.fragment,nt),EUe=i(nt),Ty=n(nt,"P",{});var Rk=s(Ty);CUe=r(Rk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rR=n(Rk,"A",{href:!0});var vLe=s(rR);wUe=r(vLe,"from_pretrained()"),vLe.forEach(t),AUe=r(Rk," class method."),Rk.forEach(t),LUe=i(nt),My=n(nt,"P",{});var Pk=s(My);yUe=r(Pk,"This class cannot be instantiated directly using "),lne=n(Pk,"CODE",{});var FLe=s(lne);xUe=r(FLe,"__init__()"),FLe.forEach(t),$Ue=r(Pk," (throws an error)."),Pk.forEach(t),kUe=i(nt),xr=n(nt,"DIV",{class:!0});var st=s(xr);T(Ey.$$.fragment,st),SUe=i(st),ine=n(st,"P",{});var TLe=s(ine);RUe=r(TLe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),TLe.forEach(t),PUe=i(st),qi=n(st,"P",{});var Pf=s(qi);BUe=r(Pf,"The configuration class to instantiate is selected based on the "),dne=n(Pf,"CODE",{});var MLe=s(dne);IUe=r(MLe,"model_type"),MLe.forEach(t),NUe=r(Pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cne=n(Pf,"CODE",{});var ELe=s(cne);qUe=r(ELe,"pretrained_model_name_or_path"),ELe.forEach(t),jUe=r(Pf,":"),Pf.forEach(t),DUe=i(st),A=n(st,"UL",{});var L=s(A);Vf=n(L,"LI",{});var Uw=s(Vf);fne=n(Uw,"STRONG",{});var CLe=s(fne);GUe=r(CLe,"albert"),CLe.forEach(t),OUe=r(Uw," \u2014 "),tR=n(Uw,"A",{href:!0});var wLe=s(tR);VUe=r(wLe,"AlbertConfig"),wLe.forEach(t),XUe=r(Uw," (ALBERT model)"),Uw.forEach(t),zUe=i(L),Xf=n(L,"LI",{});var Jw=s(Xf);mne=n(Jw,"STRONG",{});var ALe=s(mne);WUe=r(ALe,"bart"),ALe.forEach(t),QUe=r(Jw," \u2014 "),aR=n(Jw,"A",{href:!0});var LLe=s(aR);HUe=r(LLe,"BartConfig"),LLe.forEach(t),UUe=r(Jw," (BART model)"),Jw.forEach(t),JUe=i(L),zf=n(L,"LI",{});var Yw=s(zf);gne=n(Yw,"STRONG",{});var yLe=s(gne);YUe=r(yLe,"beit"),yLe.forEach(t),KUe=r(Yw," \u2014 "),nR=n(Yw,"A",{href:!0});var xLe=s(nR);ZUe=r(xLe,"BeitConfig"),xLe.forEach(t),eJe=r(Yw," (BEiT model)"),Yw.forEach(t),oJe=i(L),Wf=n(L,"LI",{});var Kw=s(Wf);hne=n(Kw,"STRONG",{});var $Le=s(hne);rJe=r($Le,"bert"),$Le.forEach(t),tJe=r(Kw," \u2014 "),sR=n(Kw,"A",{href:!0});var kLe=s(sR);aJe=r(kLe,"BertConfig"),kLe.forEach(t),nJe=r(Kw," (BERT model)"),Kw.forEach(t),sJe=i(L),Qf=n(L,"LI",{});var Zw=s(Qf);pne=n(Zw,"STRONG",{});var SLe=s(pne);lJe=r(SLe,"bert-generation"),SLe.forEach(t),iJe=r(Zw," \u2014 "),lR=n(Zw,"A",{href:!0});var RLe=s(lR);dJe=r(RLe,"BertGenerationConfig"),RLe.forEach(t),cJe=r(Zw," (Bert Generation model)"),Zw.forEach(t),fJe=i(L),Hf=n(L,"LI",{});var eA=s(Hf);_ne=n(eA,"STRONG",{});var PLe=s(_ne);mJe=r(PLe,"big_bird"),PLe.forEach(t),gJe=r(eA," \u2014 "),iR=n(eA,"A",{href:!0});var BLe=s(iR);hJe=r(BLe,"BigBirdConfig"),BLe.forEach(t),pJe=r(eA," (BigBird model)"),eA.forEach(t),_Je=i(L),Uf=n(L,"LI",{});var oA=s(Uf);une=n(oA,"STRONG",{});var ILe=s(une);uJe=r(ILe,"bigbird_pegasus"),ILe.forEach(t),bJe=r(oA," \u2014 "),dR=n(oA,"A",{href:!0});var NLe=s(dR);vJe=r(NLe,"BigBirdPegasusConfig"),NLe.forEach(t),FJe=r(oA," (BigBird-Pegasus model)"),oA.forEach(t),TJe=i(L),Jf=n(L,"LI",{});var rA=s(Jf);bne=n(rA,"STRONG",{});var qLe=s(bne);MJe=r(qLe,"blenderbot"),qLe.forEach(t),EJe=r(rA," \u2014 "),cR=n(rA,"A",{href:!0});var jLe=s(cR);CJe=r(jLe,"BlenderbotConfig"),jLe.forEach(t),wJe=r(rA," (Blenderbot model)"),rA.forEach(t),AJe=i(L),Yf=n(L,"LI",{});var tA=s(Yf);vne=n(tA,"STRONG",{});var DLe=s(vne);LJe=r(DLe,"blenderbot-small"),DLe.forEach(t),yJe=r(tA," \u2014 "),fR=n(tA,"A",{href:!0});var GLe=s(fR);xJe=r(GLe,"BlenderbotSmallConfig"),GLe.forEach(t),$Je=r(tA," (BlenderbotSmall model)"),tA.forEach(t),kJe=i(L),Kf=n(L,"LI",{});var aA=s(Kf);Fne=n(aA,"STRONG",{});var OLe=s(Fne);SJe=r(OLe,"bloom"),OLe.forEach(t),RJe=r(aA," \u2014 "),mR=n(aA,"A",{href:!0});var VLe=s(mR);PJe=r(VLe,"BloomConfig"),VLe.forEach(t),BJe=r(aA," (BLOOM model)"),aA.forEach(t),IJe=i(L),Zf=n(L,"LI",{});var nA=s(Zf);Tne=n(nA,"STRONG",{});var XLe=s(Tne);NJe=r(XLe,"camembert"),XLe.forEach(t),qJe=r(nA," \u2014 "),gR=n(nA,"A",{href:!0});var zLe=s(gR);jJe=r(zLe,"CamembertConfig"),zLe.forEach(t),DJe=r(nA," (CamemBERT model)"),nA.forEach(t),GJe=i(L),em=n(L,"LI",{});var sA=s(em);Mne=n(sA,"STRONG",{});var WLe=s(Mne);OJe=r(WLe,"canine"),WLe.forEach(t),VJe=r(sA," \u2014 "),hR=n(sA,"A",{href:!0});var QLe=s(hR);XJe=r(QLe,"CanineConfig"),QLe.forEach(t),zJe=r(sA," (CANINE model)"),sA.forEach(t),WJe=i(L),om=n(L,"LI",{});var lA=s(om);Ene=n(lA,"STRONG",{});var HLe=s(Ene);QJe=r(HLe,"clip"),HLe.forEach(t),HJe=r(lA," \u2014 "),pR=n(lA,"A",{href:!0});var ULe=s(pR);UJe=r(ULe,"CLIPConfig"),ULe.forEach(t),JJe=r(lA," (CLIP model)"),lA.forEach(t),YJe=i(L),rm=n(L,"LI",{});var iA=s(rm);Cne=n(iA,"STRONG",{});var JLe=s(Cne);KJe=r(JLe,"codegen"),JLe.forEach(t),ZJe=r(iA," \u2014 "),_R=n(iA,"A",{href:!0});var YLe=s(_R);eYe=r(YLe,"CodeGenConfig"),YLe.forEach(t),oYe=r(iA," (CodeGen model)"),iA.forEach(t),rYe=i(L),tm=n(L,"LI",{});var dA=s(tm);wne=n(dA,"STRONG",{});var KLe=s(wne);tYe=r(KLe,"convbert"),KLe.forEach(t),aYe=r(dA," \u2014 "),uR=n(dA,"A",{href:!0});var ZLe=s(uR);nYe=r(ZLe,"ConvBertConfig"),ZLe.forEach(t),sYe=r(dA," (ConvBERT model)"),dA.forEach(t),lYe=i(L),am=n(L,"LI",{});var cA=s(am);Ane=n(cA,"STRONG",{});var eye=s(Ane);iYe=r(eye,"convnext"),eye.forEach(t),dYe=r(cA," \u2014 "),bR=n(cA,"A",{href:!0});var oye=s(bR);cYe=r(oye,"ConvNextConfig"),oye.forEach(t),fYe=r(cA," (ConvNeXT model)"),cA.forEach(t),mYe=i(L),nm=n(L,"LI",{});var fA=s(nm);Lne=n(fA,"STRONG",{});var rye=s(Lne);gYe=r(rye,"ctrl"),rye.forEach(t),hYe=r(fA," \u2014 "),vR=n(fA,"A",{href:!0});var tye=s(vR);pYe=r(tye,"CTRLConfig"),tye.forEach(t),_Ye=r(fA," (CTRL model)"),fA.forEach(t),uYe=i(L),sm=n(L,"LI",{});var mA=s(sm);yne=n(mA,"STRONG",{});var aye=s(yne);bYe=r(aye,"cvt"),aye.forEach(t),vYe=r(mA," \u2014 "),FR=n(mA,"A",{href:!0});var nye=s(FR);FYe=r(nye,"CvtConfig"),nye.forEach(t),TYe=r(mA," (CvT model)"),mA.forEach(t),MYe=i(L),lm=n(L,"LI",{});var gA=s(lm);xne=n(gA,"STRONG",{});var sye=s(xne);EYe=r(sye,"data2vec-audio"),sye.forEach(t),CYe=r(gA," \u2014 "),TR=n(gA,"A",{href:!0});var lye=s(TR);wYe=r(lye,"Data2VecAudioConfig"),lye.forEach(t),AYe=r(gA," (Data2VecAudio model)"),gA.forEach(t),LYe=i(L),im=n(L,"LI",{});var hA=s(im);$ne=n(hA,"STRONG",{});var iye=s($ne);yYe=r(iye,"data2vec-text"),iye.forEach(t),xYe=r(hA," \u2014 "),MR=n(hA,"A",{href:!0});var dye=s(MR);$Ye=r(dye,"Data2VecTextConfig"),dye.forEach(t),kYe=r(hA," (Data2VecText model)"),hA.forEach(t),SYe=i(L),dm=n(L,"LI",{});var pA=s(dm);kne=n(pA,"STRONG",{});var cye=s(kne);RYe=r(cye,"data2vec-vision"),cye.forEach(t),PYe=r(pA," \u2014 "),ER=n(pA,"A",{href:!0});var fye=s(ER);BYe=r(fye,"Data2VecVisionConfig"),fye.forEach(t),IYe=r(pA," (Data2VecVision model)"),pA.forEach(t),NYe=i(L),cm=n(L,"LI",{});var _A=s(cm);Sne=n(_A,"STRONG",{});var mye=s(Sne);qYe=r(mye,"deberta"),mye.forEach(t),jYe=r(_A," \u2014 "),CR=n(_A,"A",{href:!0});var gye=s(CR);DYe=r(gye,"DebertaConfig"),gye.forEach(t),GYe=r(_A," (DeBERTa model)"),_A.forEach(t),OYe=i(L),fm=n(L,"LI",{});var uA=s(fm);Rne=n(uA,"STRONG",{});var hye=s(Rne);VYe=r(hye,"deberta-v2"),hye.forEach(t),XYe=r(uA," \u2014 "),wR=n(uA,"A",{href:!0});var pye=s(wR);zYe=r(pye,"DebertaV2Config"),pye.forEach(t),WYe=r(uA," (DeBERTa-v2 model)"),uA.forEach(t),QYe=i(L),mm=n(L,"LI",{});var bA=s(mm);Pne=n(bA,"STRONG",{});var bnt=s(Pne);HYe=r(bnt,"decision_transformer"),bnt.forEach(t),UYe=r(bA," \u2014 "),AR=n(bA,"A",{href:!0});var vnt=s(AR);JYe=r(vnt,"DecisionTransformerConfig"),vnt.forEach(t),YYe=r(bA," (Decision Transformer model)"),bA.forEach(t),KYe=i(L),gm=n(L,"LI",{});var _ye=s(gm);Bne=n(_ye,"STRONG",{});var Fnt=s(Bne);ZYe=r(Fnt,"deit"),Fnt.forEach(t),eKe=r(_ye," \u2014 "),LR=n(_ye,"A",{href:!0});var Tnt=s(LR);oKe=r(Tnt,"DeiTConfig"),Tnt.forEach(t),rKe=r(_ye," (DeiT model)"),_ye.forEach(t),tKe=i(L),hm=n(L,"LI",{});var uye=s(hm);Ine=n(uye,"STRONG",{});var Mnt=s(Ine);aKe=r(Mnt,"detr"),Mnt.forEach(t),nKe=r(uye," \u2014 "),yR=n(uye,"A",{href:!0});var Ent=s(yR);sKe=r(Ent,"DetrConfig"),Ent.forEach(t),lKe=r(uye," (DETR model)"),uye.forEach(t),iKe=i(L),pm=n(L,"LI",{});var bye=s(pm);Nne=n(bye,"STRONG",{});var Cnt=s(Nne);dKe=r(Cnt,"distilbert"),Cnt.forEach(t),cKe=r(bye," \u2014 "),xR=n(bye,"A",{href:!0});var wnt=s(xR);fKe=r(wnt,"DistilBertConfig"),wnt.forEach(t),mKe=r(bye," (DistilBERT model)"),bye.forEach(t),gKe=i(L),_m=n(L,"LI",{});var vye=s(_m);qne=n(vye,"STRONG",{});var Ant=s(qne);hKe=r(Ant,"dpr"),Ant.forEach(t),pKe=r(vye," \u2014 "),$R=n(vye,"A",{href:!0});var Lnt=s($R);_Ke=r(Lnt,"DPRConfig"),Lnt.forEach(t),uKe=r(vye," (DPR model)"),vye.forEach(t),bKe=i(L),um=n(L,"LI",{});var Fye=s(um);jne=n(Fye,"STRONG",{});var ynt=s(jne);vKe=r(ynt,"dpt"),ynt.forEach(t),FKe=r(Fye," \u2014 "),kR=n(Fye,"A",{href:!0});var xnt=s(kR);TKe=r(xnt,"DPTConfig"),xnt.forEach(t),MKe=r(Fye," (DPT model)"),Fye.forEach(t),EKe=i(L),bm=n(L,"LI",{});var Tye=s(bm);Dne=n(Tye,"STRONG",{});var $nt=s(Dne);CKe=r($nt,"electra"),$nt.forEach(t),wKe=r(Tye," \u2014 "),SR=n(Tye,"A",{href:!0});var knt=s(SR);AKe=r(knt,"ElectraConfig"),knt.forEach(t),LKe=r(Tye," (ELECTRA model)"),Tye.forEach(t),yKe=i(L),vm=n(L,"LI",{});var Mye=s(vm);Gne=n(Mye,"STRONG",{});var Snt=s(Gne);xKe=r(Snt,"encoder-decoder"),Snt.forEach(t),$Ke=r(Mye," \u2014 "),RR=n(Mye,"A",{href:!0});var Rnt=s(RR);kKe=r(Rnt,"EncoderDecoderConfig"),Rnt.forEach(t),SKe=r(Mye," (Encoder decoder model)"),Mye.forEach(t),RKe=i(L),Fm=n(L,"LI",{});var Eye=s(Fm);One=n(Eye,"STRONG",{});var Pnt=s(One);PKe=r(Pnt,"flaubert"),Pnt.forEach(t),BKe=r(Eye," \u2014 "),PR=n(Eye,"A",{href:!0});var Bnt=s(PR);IKe=r(Bnt,"FlaubertConfig"),Bnt.forEach(t),NKe=r(Eye," (FlauBERT model)"),Eye.forEach(t),qKe=i(L),Tm=n(L,"LI",{});var Cye=s(Tm);Vne=n(Cye,"STRONG",{});var Int=s(Vne);jKe=r(Int,"flava"),Int.forEach(t),DKe=r(Cye," \u2014 "),BR=n(Cye,"A",{href:!0});var Nnt=s(BR);GKe=r(Nnt,"FlavaConfig"),Nnt.forEach(t),OKe=r(Cye," (FLAVA model)"),Cye.forEach(t),VKe=i(L),Mm=n(L,"LI",{});var wye=s(Mm);Xne=n(wye,"STRONG",{});var qnt=s(Xne);XKe=r(qnt,"fnet"),qnt.forEach(t),zKe=r(wye," \u2014 "),IR=n(wye,"A",{href:!0});var jnt=s(IR);WKe=r(jnt,"FNetConfig"),jnt.forEach(t),QKe=r(wye," (FNet model)"),wye.forEach(t),HKe=i(L),Em=n(L,"LI",{});var Aye=s(Em);zne=n(Aye,"STRONG",{});var Dnt=s(zne);UKe=r(Dnt,"fsmt"),Dnt.forEach(t),JKe=r(Aye," \u2014 "),NR=n(Aye,"A",{href:!0});var Gnt=s(NR);YKe=r(Gnt,"FSMTConfig"),Gnt.forEach(t),KKe=r(Aye," (FairSeq Machine-Translation model)"),Aye.forEach(t),ZKe=i(L),Cm=n(L,"LI",{});var Lye=s(Cm);Wne=n(Lye,"STRONG",{});var Ont=s(Wne);eZe=r(Ont,"funnel"),Ont.forEach(t),oZe=r(Lye," \u2014 "),qR=n(Lye,"A",{href:!0});var Vnt=s(qR);rZe=r(Vnt,"FunnelConfig"),Vnt.forEach(t),tZe=r(Lye," (Funnel Transformer model)"),Lye.forEach(t),aZe=i(L),wm=n(L,"LI",{});var yye=s(wm);Qne=n(yye,"STRONG",{});var Xnt=s(Qne);nZe=r(Xnt,"glpn"),Xnt.forEach(t),sZe=r(yye," \u2014 "),jR=n(yye,"A",{href:!0});var znt=s(jR);lZe=r(znt,"GLPNConfig"),znt.forEach(t),iZe=r(yye," (GLPN model)"),yye.forEach(t),dZe=i(L),Am=n(L,"LI",{});var xye=s(Am);Hne=n(xye,"STRONG",{});var Wnt=s(Hne);cZe=r(Wnt,"gpt2"),Wnt.forEach(t),fZe=r(xye," \u2014 "),DR=n(xye,"A",{href:!0});var Qnt=s(DR);mZe=r(Qnt,"GPT2Config"),Qnt.forEach(t),gZe=r(xye," (OpenAI GPT-2 model)"),xye.forEach(t),hZe=i(L),Lm=n(L,"LI",{});var $ye=s(Lm);Une=n($ye,"STRONG",{});var Hnt=s(Une);pZe=r(Hnt,"gpt_neo"),Hnt.forEach(t),_Ze=r($ye," \u2014 "),GR=n($ye,"A",{href:!0});var Unt=s(GR);uZe=r(Unt,"GPTNeoConfig"),Unt.forEach(t),bZe=r($ye," (GPT Neo model)"),$ye.forEach(t),vZe=i(L),ym=n(L,"LI",{});var kye=s(ym);Jne=n(kye,"STRONG",{});var Jnt=s(Jne);FZe=r(Jnt,"gpt_neox"),Jnt.forEach(t),TZe=r(kye," \u2014 "),OR=n(kye,"A",{href:!0});var Ynt=s(OR);MZe=r(Ynt,"GPTNeoXConfig"),Ynt.forEach(t),EZe=r(kye," (GPT NeoX model)"),kye.forEach(t),CZe=i(L),xm=n(L,"LI",{});var Sye=s(xm);Yne=n(Sye,"STRONG",{});var Knt=s(Yne);wZe=r(Knt,"gptj"),Knt.forEach(t),AZe=r(Sye," \u2014 "),VR=n(Sye,"A",{href:!0});var Znt=s(VR);LZe=r(Znt,"GPTJConfig"),Znt.forEach(t),yZe=r(Sye," (GPT-J model)"),Sye.forEach(t),xZe=i(L),$m=n(L,"LI",{});var Rye=s($m);Kne=n(Rye,"STRONG",{});var est=s(Kne);$Ze=r(est,"groupvit"),est.forEach(t),kZe=r(Rye," \u2014 "),XR=n(Rye,"A",{href:!0});var ost=s(XR);SZe=r(ost,"GroupViTConfig"),ost.forEach(t),RZe=r(Rye," (GroupViT model)"),Rye.forEach(t),PZe=i(L),km=n(L,"LI",{});var Pye=s(km);Zne=n(Pye,"STRONG",{});var rst=s(Zne);BZe=r(rst,"hubert"),rst.forEach(t),IZe=r(Pye," \u2014 "),zR=n(Pye,"A",{href:!0});var tst=s(zR);NZe=r(tst,"HubertConfig"),tst.forEach(t),qZe=r(Pye," (Hubert model)"),Pye.forEach(t),jZe=i(L),Sm=n(L,"LI",{});var Bye=s(Sm);ese=n(Bye,"STRONG",{});var ast=s(ese);DZe=r(ast,"ibert"),ast.forEach(t),GZe=r(Bye," \u2014 "),WR=n(Bye,"A",{href:!0});var nst=s(WR);OZe=r(nst,"IBertConfig"),nst.forEach(t),VZe=r(Bye," (I-BERT model)"),Bye.forEach(t),XZe=i(L),Rm=n(L,"LI",{});var Iye=s(Rm);ose=n(Iye,"STRONG",{});var sst=s(ose);zZe=r(sst,"imagegpt"),sst.forEach(t),WZe=r(Iye," \u2014 "),QR=n(Iye,"A",{href:!0});var lst=s(QR);QZe=r(lst,"ImageGPTConfig"),lst.forEach(t),HZe=r(Iye," (ImageGPT model)"),Iye.forEach(t),UZe=i(L),Pm=n(L,"LI",{});var Nye=s(Pm);rse=n(Nye,"STRONG",{});var ist=s(rse);JZe=r(ist,"layoutlm"),ist.forEach(t),YZe=r(Nye," \u2014 "),HR=n(Nye,"A",{href:!0});var dst=s(HR);KZe=r(dst,"LayoutLMConfig"),dst.forEach(t),ZZe=r(Nye," (LayoutLM model)"),Nye.forEach(t),eeo=i(L),Bm=n(L,"LI",{});var qye=s(Bm);tse=n(qye,"STRONG",{});var cst=s(tse);oeo=r(cst,"layoutlmv2"),cst.forEach(t),reo=r(qye," \u2014 "),UR=n(qye,"A",{href:!0});var fst=s(UR);teo=r(fst,"LayoutLMv2Config"),fst.forEach(t),aeo=r(qye," (LayoutLMv2 model)"),qye.forEach(t),neo=i(L),Im=n(L,"LI",{});var jye=s(Im);ase=n(jye,"STRONG",{});var mst=s(ase);seo=r(mst,"layoutlmv3"),mst.forEach(t),leo=r(jye," \u2014 "),JR=n(jye,"A",{href:!0});var gst=s(JR);ieo=r(gst,"LayoutLMv3Config"),gst.forEach(t),deo=r(jye," (LayoutLMv3 model)"),jye.forEach(t),ceo=i(L),Nm=n(L,"LI",{});var Dye=s(Nm);nse=n(Dye,"STRONG",{});var hst=s(nse);feo=r(hst,"led"),hst.forEach(t),meo=r(Dye," \u2014 "),YR=n(Dye,"A",{href:!0});var pst=s(YR);geo=r(pst,"LEDConfig"),pst.forEach(t),heo=r(Dye," (LED model)"),Dye.forEach(t),peo=i(L),qm=n(L,"LI",{});var Gye=s(qm);sse=n(Gye,"STRONG",{});var _st=s(sse);_eo=r(_st,"levit"),_st.forEach(t),ueo=r(Gye," \u2014 "),KR=n(Gye,"A",{href:!0});var ust=s(KR);beo=r(ust,"LevitConfig"),ust.forEach(t),veo=r(Gye," (LeViT model)"),Gye.forEach(t),Feo=i(L),jm=n(L,"LI",{});var Oye=s(jm);lse=n(Oye,"STRONG",{});var bst=s(lse);Teo=r(bst,"longformer"),bst.forEach(t),Meo=r(Oye," \u2014 "),ZR=n(Oye,"A",{href:!0});var vst=s(ZR);Eeo=r(vst,"LongformerConfig"),vst.forEach(t),Ceo=r(Oye," (Longformer model)"),Oye.forEach(t),weo=i(L),Dm=n(L,"LI",{});var Vye=s(Dm);ise=n(Vye,"STRONG",{});var Fst=s(ise);Aeo=r(Fst,"longt5"),Fst.forEach(t),Leo=r(Vye," \u2014 "),eP=n(Vye,"A",{href:!0});var Tst=s(eP);yeo=r(Tst,"LongT5Config"),Tst.forEach(t),xeo=r(Vye," (LongT5 model)"),Vye.forEach(t),$eo=i(L),Gm=n(L,"LI",{});var Xye=s(Gm);dse=n(Xye,"STRONG",{});var Mst=s(dse);keo=r(Mst,"luke"),Mst.forEach(t),Seo=r(Xye," \u2014 "),oP=n(Xye,"A",{href:!0});var Est=s(oP);Reo=r(Est,"LukeConfig"),Est.forEach(t),Peo=r(Xye," (LUKE model)"),Xye.forEach(t),Beo=i(L),Om=n(L,"LI",{});var zye=s(Om);cse=n(zye,"STRONG",{});var Cst=s(cse);Ieo=r(Cst,"lxmert"),Cst.forEach(t),Neo=r(zye," \u2014 "),rP=n(zye,"A",{href:!0});var wst=s(rP);qeo=r(wst,"LxmertConfig"),wst.forEach(t),jeo=r(zye," (LXMERT model)"),zye.forEach(t),Deo=i(L),Vm=n(L,"LI",{});var Wye=s(Vm);fse=n(Wye,"STRONG",{});var Ast=s(fse);Geo=r(Ast,"m2m_100"),Ast.forEach(t),Oeo=r(Wye," \u2014 "),tP=n(Wye,"A",{href:!0});var Lst=s(tP);Veo=r(Lst,"M2M100Config"),Lst.forEach(t),Xeo=r(Wye," (M2M100 model)"),Wye.forEach(t),zeo=i(L),Xm=n(L,"LI",{});var Qye=s(Xm);mse=n(Qye,"STRONG",{});var yst=s(mse);Weo=r(yst,"marian"),yst.forEach(t),Qeo=r(Qye," \u2014 "),aP=n(Qye,"A",{href:!0});var xst=s(aP);Heo=r(xst,"MarianConfig"),xst.forEach(t),Ueo=r(Qye," (Marian model)"),Qye.forEach(t),Jeo=i(L),zm=n(L,"LI",{});var Hye=s(zm);gse=n(Hye,"STRONG",{});var $st=s(gse);Yeo=r($st,"maskformer"),$st.forEach(t),Keo=r(Hye," \u2014 "),nP=n(Hye,"A",{href:!0});var kst=s(nP);Zeo=r(kst,"MaskFormerConfig"),kst.forEach(t),eoo=r(Hye," (MaskFormer model)"),Hye.forEach(t),ooo=i(L),Wm=n(L,"LI",{});var Uye=s(Wm);hse=n(Uye,"STRONG",{});var Sst=s(hse);roo=r(Sst,"mbart"),Sst.forEach(t),too=r(Uye," \u2014 "),sP=n(Uye,"A",{href:!0});var Rst=s(sP);aoo=r(Rst,"MBartConfig"),Rst.forEach(t),noo=r(Uye," (mBART model)"),Uye.forEach(t),soo=i(L),Qm=n(L,"LI",{});var Jye=s(Qm);pse=n(Jye,"STRONG",{});var Pst=s(pse);loo=r(Pst,"mctct"),Pst.forEach(t),ioo=r(Jye," \u2014 "),lP=n(Jye,"A",{href:!0});var Bst=s(lP);doo=r(Bst,"MCTCTConfig"),Bst.forEach(t),coo=r(Jye," (M-CTC-T model)"),Jye.forEach(t),foo=i(L),Hm=n(L,"LI",{});var Yye=s(Hm);_se=n(Yye,"STRONG",{});var Ist=s(_se);moo=r(Ist,"megatron-bert"),Ist.forEach(t),goo=r(Yye," \u2014 "),iP=n(Yye,"A",{href:!0});var Nst=s(iP);hoo=r(Nst,"MegatronBertConfig"),Nst.forEach(t),poo=r(Yye," (Megatron-BERT model)"),Yye.forEach(t),_oo=i(L),Um=n(L,"LI",{});var Kye=s(Um);use=n(Kye,"STRONG",{});var qst=s(use);uoo=r(qst,"mobilebert"),qst.forEach(t),boo=r(Kye," \u2014 "),dP=n(Kye,"A",{href:!0});var jst=s(dP);voo=r(jst,"MobileBertConfig"),jst.forEach(t),Foo=r(Kye," (MobileBERT model)"),Kye.forEach(t),Too=i(L),Jm=n(L,"LI",{});var Zye=s(Jm);bse=n(Zye,"STRONG",{});var Dst=s(bse);Moo=r(Dst,"mobilevit"),Dst.forEach(t),Eoo=r(Zye," \u2014 "),cP=n(Zye,"A",{href:!0});var Gst=s(cP);Coo=r(Gst,"MobileViTConfig"),Gst.forEach(t),woo=r(Zye," (MobileViT model)"),Zye.forEach(t),Aoo=i(L),Ym=n(L,"LI",{});var e8e=s(Ym);vse=n(e8e,"STRONG",{});var Ost=s(vse);Loo=r(Ost,"mpnet"),Ost.forEach(t),yoo=r(e8e," \u2014 "),fP=n(e8e,"A",{href:!0});var Vst=s(fP);xoo=r(Vst,"MPNetConfig"),Vst.forEach(t),$oo=r(e8e," (MPNet model)"),e8e.forEach(t),koo=i(L),Km=n(L,"LI",{});var o8e=s(Km);Fse=n(o8e,"STRONG",{});var Xst=s(Fse);Soo=r(Xst,"mt5"),Xst.forEach(t),Roo=r(o8e," \u2014 "),mP=n(o8e,"A",{href:!0});var zst=s(mP);Poo=r(zst,"MT5Config"),zst.forEach(t),Boo=r(o8e," (MT5 model)"),o8e.forEach(t),Ioo=i(L),Zm=n(L,"LI",{});var r8e=s(Zm);Tse=n(r8e,"STRONG",{});var Wst=s(Tse);Noo=r(Wst,"mvp"),Wst.forEach(t),qoo=r(r8e," \u2014 "),gP=n(r8e,"A",{href:!0});var Qst=s(gP);joo=r(Qst,"MvpConfig"),Qst.forEach(t),Doo=r(r8e," (MVP model)"),r8e.forEach(t),Goo=i(L),eg=n(L,"LI",{});var t8e=s(eg);Mse=n(t8e,"STRONG",{});var Hst=s(Mse);Ooo=r(Hst,"nezha"),Hst.forEach(t),Voo=r(t8e," \u2014 "),hP=n(t8e,"A",{href:!0});var Ust=s(hP);Xoo=r(Ust,"NezhaConfig"),Ust.forEach(t),zoo=r(t8e," (Nezha model)"),t8e.forEach(t),Woo=i(L),og=n(L,"LI",{});var a8e=s(og);Ese=n(a8e,"STRONG",{});var Jst=s(Ese);Qoo=r(Jst,"nystromformer"),Jst.forEach(t),Hoo=r(a8e," \u2014 "),pP=n(a8e,"A",{href:!0});var Yst=s(pP);Uoo=r(Yst,"NystromformerConfig"),Yst.forEach(t),Joo=r(a8e," (Nystr\xF6mformer model)"),a8e.forEach(t),Yoo=i(L),rg=n(L,"LI",{});var n8e=s(rg);Cse=n(n8e,"STRONG",{});var Kst=s(Cse);Koo=r(Kst,"openai-gpt"),Kst.forEach(t),Zoo=r(n8e," \u2014 "),_P=n(n8e,"A",{href:!0});var Zst=s(_P);ero=r(Zst,"OpenAIGPTConfig"),Zst.forEach(t),oro=r(n8e," (OpenAI GPT model)"),n8e.forEach(t),rro=i(L),tg=n(L,"LI",{});var s8e=s(tg);wse=n(s8e,"STRONG",{});var elt=s(wse);tro=r(elt,"opt"),elt.forEach(t),aro=r(s8e," \u2014 "),uP=n(s8e,"A",{href:!0});var olt=s(uP);nro=r(olt,"OPTConfig"),olt.forEach(t),sro=r(s8e," (OPT model)"),s8e.forEach(t),lro=i(L),ag=n(L,"LI",{});var l8e=s(ag);Ase=n(l8e,"STRONG",{});var rlt=s(Ase);iro=r(rlt,"owlvit"),rlt.forEach(t),dro=r(l8e," \u2014 "),bP=n(l8e,"A",{href:!0});var tlt=s(bP);cro=r(tlt,"OwlViTConfig"),tlt.forEach(t),fro=r(l8e," (OWL-ViT model)"),l8e.forEach(t),mro=i(L),ng=n(L,"LI",{});var i8e=s(ng);Lse=n(i8e,"STRONG",{});var alt=s(Lse);gro=r(alt,"pegasus"),alt.forEach(t),hro=r(i8e," \u2014 "),vP=n(i8e,"A",{href:!0});var nlt=s(vP);pro=r(nlt,"PegasusConfig"),nlt.forEach(t),_ro=r(i8e," (Pegasus model)"),i8e.forEach(t),uro=i(L),sg=n(L,"LI",{});var d8e=s(sg);yse=n(d8e,"STRONG",{});var slt=s(yse);bro=r(slt,"perceiver"),slt.forEach(t),vro=r(d8e," \u2014 "),FP=n(d8e,"A",{href:!0});var llt=s(FP);Fro=r(llt,"PerceiverConfig"),llt.forEach(t),Tro=r(d8e," (Perceiver model)"),d8e.forEach(t),Mro=i(L),lg=n(L,"LI",{});var c8e=s(lg);xse=n(c8e,"STRONG",{});var ilt=s(xse);Ero=r(ilt,"plbart"),ilt.forEach(t),Cro=r(c8e," \u2014 "),TP=n(c8e,"A",{href:!0});var dlt=s(TP);wro=r(dlt,"PLBartConfig"),dlt.forEach(t),Aro=r(c8e," (PLBart model)"),c8e.forEach(t),Lro=i(L),ig=n(L,"LI",{});var f8e=s(ig);$se=n(f8e,"STRONG",{});var clt=s($se);yro=r(clt,"poolformer"),clt.forEach(t),xro=r(f8e," \u2014 "),MP=n(f8e,"A",{href:!0});var flt=s(MP);$ro=r(flt,"PoolFormerConfig"),flt.forEach(t),kro=r(f8e," (PoolFormer model)"),f8e.forEach(t),Sro=i(L),dg=n(L,"LI",{});var m8e=s(dg);kse=n(m8e,"STRONG",{});var mlt=s(kse);Rro=r(mlt,"prophetnet"),mlt.forEach(t),Pro=r(m8e," \u2014 "),EP=n(m8e,"A",{href:!0});var glt=s(EP);Bro=r(glt,"ProphetNetConfig"),glt.forEach(t),Iro=r(m8e," (ProphetNet model)"),m8e.forEach(t),Nro=i(L),cg=n(L,"LI",{});var g8e=s(cg);Sse=n(g8e,"STRONG",{});var hlt=s(Sse);qro=r(hlt,"qdqbert"),hlt.forEach(t),jro=r(g8e," \u2014 "),CP=n(g8e,"A",{href:!0});var plt=s(CP);Dro=r(plt,"QDQBertConfig"),plt.forEach(t),Gro=r(g8e," (QDQBert model)"),g8e.forEach(t),Oro=i(L),fg=n(L,"LI",{});var h8e=s(fg);Rse=n(h8e,"STRONG",{});var _lt=s(Rse);Vro=r(_lt,"rag"),_lt.forEach(t),Xro=r(h8e," \u2014 "),wP=n(h8e,"A",{href:!0});var ult=s(wP);zro=r(ult,"RagConfig"),ult.forEach(t),Wro=r(h8e," (RAG model)"),h8e.forEach(t),Qro=i(L),mg=n(L,"LI",{});var p8e=s(mg);Pse=n(p8e,"STRONG",{});var blt=s(Pse);Hro=r(blt,"realm"),blt.forEach(t),Uro=r(p8e," \u2014 "),AP=n(p8e,"A",{href:!0});var vlt=s(AP);Jro=r(vlt,"RealmConfig"),vlt.forEach(t),Yro=r(p8e," (REALM model)"),p8e.forEach(t),Kro=i(L),gg=n(L,"LI",{});var _8e=s(gg);Bse=n(_8e,"STRONG",{});var Flt=s(Bse);Zro=r(Flt,"reformer"),Flt.forEach(t),eto=r(_8e," \u2014 "),LP=n(_8e,"A",{href:!0});var Tlt=s(LP);oto=r(Tlt,"ReformerConfig"),Tlt.forEach(t),rto=r(_8e," (Reformer model)"),_8e.forEach(t),tto=i(L),hg=n(L,"LI",{});var u8e=s(hg);Ise=n(u8e,"STRONG",{});var Mlt=s(Ise);ato=r(Mlt,"regnet"),Mlt.forEach(t),nto=r(u8e," \u2014 "),yP=n(u8e,"A",{href:!0});var Elt=s(yP);sto=r(Elt,"RegNetConfig"),Elt.forEach(t),lto=r(u8e," (RegNet model)"),u8e.forEach(t),ito=i(L),pg=n(L,"LI",{});var b8e=s(pg);Nse=n(b8e,"STRONG",{});var Clt=s(Nse);dto=r(Clt,"rembert"),Clt.forEach(t),cto=r(b8e," \u2014 "),xP=n(b8e,"A",{href:!0});var wlt=s(xP);fto=r(wlt,"RemBertConfig"),wlt.forEach(t),mto=r(b8e," (RemBERT model)"),b8e.forEach(t),gto=i(L),_g=n(L,"LI",{});var v8e=s(_g);qse=n(v8e,"STRONG",{});var Alt=s(qse);hto=r(Alt,"resnet"),Alt.forEach(t),pto=r(v8e," \u2014 "),$P=n(v8e,"A",{href:!0});var Llt=s($P);_to=r(Llt,"ResNetConfig"),Llt.forEach(t),uto=r(v8e," (ResNet model)"),v8e.forEach(t),bto=i(L),ug=n(L,"LI",{});var F8e=s(ug);jse=n(F8e,"STRONG",{});var ylt=s(jse);vto=r(ylt,"retribert"),ylt.forEach(t),Fto=r(F8e," \u2014 "),kP=n(F8e,"A",{href:!0});var xlt=s(kP);Tto=r(xlt,"RetriBertConfig"),xlt.forEach(t),Mto=r(F8e," (RetriBERT model)"),F8e.forEach(t),Eto=i(L),bg=n(L,"LI",{});var T8e=s(bg);Dse=n(T8e,"STRONG",{});var $lt=s(Dse);Cto=r($lt,"roberta"),$lt.forEach(t),wto=r(T8e," \u2014 "),SP=n(T8e,"A",{href:!0});var klt=s(SP);Ato=r(klt,"RobertaConfig"),klt.forEach(t),Lto=r(T8e," (RoBERTa model)"),T8e.forEach(t),yto=i(L),vg=n(L,"LI",{});var M8e=s(vg);Gse=n(M8e,"STRONG",{});var Slt=s(Gse);xto=r(Slt,"roformer"),Slt.forEach(t),$to=r(M8e," \u2014 "),RP=n(M8e,"A",{href:!0});var Rlt=s(RP);kto=r(Rlt,"RoFormerConfig"),Rlt.forEach(t),Sto=r(M8e," (RoFormer model)"),M8e.forEach(t),Rto=i(L),Fg=n(L,"LI",{});var E8e=s(Fg);Ose=n(E8e,"STRONG",{});var Plt=s(Ose);Pto=r(Plt,"segformer"),Plt.forEach(t),Bto=r(E8e," \u2014 "),PP=n(E8e,"A",{href:!0});var Blt=s(PP);Ito=r(Blt,"SegformerConfig"),Blt.forEach(t),Nto=r(E8e," (SegFormer model)"),E8e.forEach(t),qto=i(L),Tg=n(L,"LI",{});var C8e=s(Tg);Vse=n(C8e,"STRONG",{});var Ilt=s(Vse);jto=r(Ilt,"sew"),Ilt.forEach(t),Dto=r(C8e," \u2014 "),BP=n(C8e,"A",{href:!0});var Nlt=s(BP);Gto=r(Nlt,"SEWConfig"),Nlt.forEach(t),Oto=r(C8e," (SEW model)"),C8e.forEach(t),Vto=i(L),Mg=n(L,"LI",{});var w8e=s(Mg);Xse=n(w8e,"STRONG",{});var qlt=s(Xse);Xto=r(qlt,"sew-d"),qlt.forEach(t),zto=r(w8e," \u2014 "),IP=n(w8e,"A",{href:!0});var jlt=s(IP);Wto=r(jlt,"SEWDConfig"),jlt.forEach(t),Qto=r(w8e," (SEW-D model)"),w8e.forEach(t),Hto=i(L),Eg=n(L,"LI",{});var A8e=s(Eg);zse=n(A8e,"STRONG",{});var Dlt=s(zse);Uto=r(Dlt,"speech-encoder-decoder"),Dlt.forEach(t),Jto=r(A8e," \u2014 "),NP=n(A8e,"A",{href:!0});var Glt=s(NP);Yto=r(Glt,"SpeechEncoderDecoderConfig"),Glt.forEach(t),Kto=r(A8e," (Speech Encoder decoder model)"),A8e.forEach(t),Zto=i(L),Cg=n(L,"LI",{});var L8e=s(Cg);Wse=n(L8e,"STRONG",{});var Olt=s(Wse);eao=r(Olt,"speech_to_text"),Olt.forEach(t),oao=r(L8e," \u2014 "),qP=n(L8e,"A",{href:!0});var Vlt=s(qP);rao=r(Vlt,"Speech2TextConfig"),Vlt.forEach(t),tao=r(L8e," (Speech2Text model)"),L8e.forEach(t),aao=i(L),wg=n(L,"LI",{});var y8e=s(wg);Qse=n(y8e,"STRONG",{});var Xlt=s(Qse);nao=r(Xlt,"speech_to_text_2"),Xlt.forEach(t),sao=r(y8e," \u2014 "),jP=n(y8e,"A",{href:!0});var zlt=s(jP);lao=r(zlt,"Speech2Text2Config"),zlt.forEach(t),iao=r(y8e," (Speech2Text2 model)"),y8e.forEach(t),dao=i(L),Ag=n(L,"LI",{});var x8e=s(Ag);Hse=n(x8e,"STRONG",{});var Wlt=s(Hse);cao=r(Wlt,"splinter"),Wlt.forEach(t),fao=r(x8e," \u2014 "),DP=n(x8e,"A",{href:!0});var Qlt=s(DP);mao=r(Qlt,"SplinterConfig"),Qlt.forEach(t),gao=r(x8e," (Splinter model)"),x8e.forEach(t),hao=i(L),Lg=n(L,"LI",{});var $8e=s(Lg);Use=n($8e,"STRONG",{});var Hlt=s(Use);pao=r(Hlt,"squeezebert"),Hlt.forEach(t),_ao=r($8e," \u2014 "),GP=n($8e,"A",{href:!0});var Ult=s(GP);uao=r(Ult,"SqueezeBertConfig"),Ult.forEach(t),bao=r($8e," (SqueezeBERT model)"),$8e.forEach(t),vao=i(L),yg=n(L,"LI",{});var k8e=s(yg);Jse=n(k8e,"STRONG",{});var Jlt=s(Jse);Fao=r(Jlt,"swin"),Jlt.forEach(t),Tao=r(k8e," \u2014 "),OP=n(k8e,"A",{href:!0});var Ylt=s(OP);Mao=r(Ylt,"SwinConfig"),Ylt.forEach(t),Eao=r(k8e," (Swin Transformer model)"),k8e.forEach(t),Cao=i(L),xg=n(L,"LI",{});var S8e=s(xg);Yse=n(S8e,"STRONG",{});var Klt=s(Yse);wao=r(Klt,"t5"),Klt.forEach(t),Aao=r(S8e," \u2014 "),VP=n(S8e,"A",{href:!0});var Zlt=s(VP);Lao=r(Zlt,"T5Config"),Zlt.forEach(t),yao=r(S8e," (T5 model)"),S8e.forEach(t),xao=i(L),$g=n(L,"LI",{});var R8e=s($g);Kse=n(R8e,"STRONG",{});var eit=s(Kse);$ao=r(eit,"tapas"),eit.forEach(t),kao=r(R8e," \u2014 "),XP=n(R8e,"A",{href:!0});var oit=s(XP);Sao=r(oit,"TapasConfig"),oit.forEach(t),Rao=r(R8e," (TAPAS model)"),R8e.forEach(t),Pao=i(L),kg=n(L,"LI",{});var P8e=s(kg);Zse=n(P8e,"STRONG",{});var rit=s(Zse);Bao=r(rit,"trajectory_transformer"),rit.forEach(t),Iao=r(P8e," \u2014 "),zP=n(P8e,"A",{href:!0});var tit=s(zP);Nao=r(tit,"TrajectoryTransformerConfig"),tit.forEach(t),qao=r(P8e," (Trajectory Transformer model)"),P8e.forEach(t),jao=i(L),Sg=n(L,"LI",{});var B8e=s(Sg);ele=n(B8e,"STRONG",{});var ait=s(ele);Dao=r(ait,"transfo-xl"),ait.forEach(t),Gao=r(B8e," \u2014 "),WP=n(B8e,"A",{href:!0});var nit=s(WP);Oao=r(nit,"TransfoXLConfig"),nit.forEach(t),Vao=r(B8e," (Transformer-XL model)"),B8e.forEach(t),Xao=i(L),Rg=n(L,"LI",{});var I8e=s(Rg);ole=n(I8e,"STRONG",{});var sit=s(ole);zao=r(sit,"trocr"),sit.forEach(t),Wao=r(I8e," \u2014 "),QP=n(I8e,"A",{href:!0});var lit=s(QP);Qao=r(lit,"TrOCRConfig"),lit.forEach(t),Hao=r(I8e," (TrOCR model)"),I8e.forEach(t),Uao=i(L),Pg=n(L,"LI",{});var N8e=s(Pg);rle=n(N8e,"STRONG",{});var iit=s(rle);Jao=r(iit,"unispeech"),iit.forEach(t),Yao=r(N8e," \u2014 "),HP=n(N8e,"A",{href:!0});var dit=s(HP);Kao=r(dit,"UniSpeechConfig"),dit.forEach(t),Zao=r(N8e," (UniSpeech model)"),N8e.forEach(t),eno=i(L),Bg=n(L,"LI",{});var q8e=s(Bg);tle=n(q8e,"STRONG",{});var cit=s(tle);ono=r(cit,"unispeech-sat"),cit.forEach(t),rno=r(q8e," \u2014 "),UP=n(q8e,"A",{href:!0});var fit=s(UP);tno=r(fit,"UniSpeechSatConfig"),fit.forEach(t),ano=r(q8e," (UniSpeechSat model)"),q8e.forEach(t),nno=i(L),Ig=n(L,"LI",{});var j8e=s(Ig);ale=n(j8e,"STRONG",{});var mit=s(ale);sno=r(mit,"van"),mit.forEach(t),lno=r(j8e," \u2014 "),JP=n(j8e,"A",{href:!0});var git=s(JP);ino=r(git,"VanConfig"),git.forEach(t),dno=r(j8e," (VAN model)"),j8e.forEach(t),cno=i(L),Ng=n(L,"LI",{});var D8e=s(Ng);nle=n(D8e,"STRONG",{});var hit=s(nle);fno=r(hit,"vilt"),hit.forEach(t),mno=r(D8e," \u2014 "),YP=n(D8e,"A",{href:!0});var pit=s(YP);gno=r(pit,"ViltConfig"),pit.forEach(t),hno=r(D8e," (ViLT model)"),D8e.forEach(t),pno=i(L),qg=n(L,"LI",{});var G8e=s(qg);sle=n(G8e,"STRONG",{});var _it=s(sle);_no=r(_it,"vision-encoder-decoder"),_it.forEach(t),uno=r(G8e," \u2014 "),KP=n(G8e,"A",{href:!0});var uit=s(KP);bno=r(uit,"VisionEncoderDecoderConfig"),uit.forEach(t),vno=r(G8e," (Vision Encoder decoder model)"),G8e.forEach(t),Fno=i(L),jg=n(L,"LI",{});var O8e=s(jg);lle=n(O8e,"STRONG",{});var bit=s(lle);Tno=r(bit,"vision-text-dual-encoder"),bit.forEach(t),Mno=r(O8e," \u2014 "),ZP=n(O8e,"A",{href:!0});var vit=s(ZP);Eno=r(vit,"VisionTextDualEncoderConfig"),vit.forEach(t),Cno=r(O8e," (VisionTextDualEncoder model)"),O8e.forEach(t),wno=i(L),Dg=n(L,"LI",{});var V8e=s(Dg);ile=n(V8e,"STRONG",{});var Fit=s(ile);Ano=r(Fit,"visual_bert"),Fit.forEach(t),Lno=r(V8e," \u2014 "),eB=n(V8e,"A",{href:!0});var Tit=s(eB);yno=r(Tit,"VisualBertConfig"),Tit.forEach(t),xno=r(V8e," (VisualBERT model)"),V8e.forEach(t),$no=i(L),Gg=n(L,"LI",{});var X8e=s(Gg);dle=n(X8e,"STRONG",{});var Mit=s(dle);kno=r(Mit,"vit"),Mit.forEach(t),Sno=r(X8e," \u2014 "),oB=n(X8e,"A",{href:!0});var Eit=s(oB);Rno=r(Eit,"ViTConfig"),Eit.forEach(t),Pno=r(X8e," (ViT model)"),X8e.forEach(t),Bno=i(L),Og=n(L,"LI",{});var z8e=s(Og);cle=n(z8e,"STRONG",{});var Cit=s(cle);Ino=r(Cit,"vit_mae"),Cit.forEach(t),Nno=r(z8e," \u2014 "),rB=n(z8e,"A",{href:!0});var wit=s(rB);qno=r(wit,"ViTMAEConfig"),wit.forEach(t),jno=r(z8e," (ViTMAE model)"),z8e.forEach(t),Dno=i(L),Vg=n(L,"LI",{});var W8e=s(Vg);fle=n(W8e,"STRONG",{});var Ait=s(fle);Gno=r(Ait,"wav2vec2"),Ait.forEach(t),Ono=r(W8e," \u2014 "),tB=n(W8e,"A",{href:!0});var Lit=s(tB);Vno=r(Lit,"Wav2Vec2Config"),Lit.forEach(t),Xno=r(W8e," (Wav2Vec2 model)"),W8e.forEach(t),zno=i(L),Xg=n(L,"LI",{});var Q8e=s(Xg);mle=n(Q8e,"STRONG",{});var yit=s(mle);Wno=r(yit,"wav2vec2-conformer"),yit.forEach(t),Qno=r(Q8e," \u2014 "),aB=n(Q8e,"A",{href:!0});var xit=s(aB);Hno=r(xit,"Wav2Vec2ConformerConfig"),xit.forEach(t),Uno=r(Q8e," (Wav2Vec2-Conformer model)"),Q8e.forEach(t),Jno=i(L),zg=n(L,"LI",{});var H8e=s(zg);gle=n(H8e,"STRONG",{});var $it=s(gle);Yno=r($it,"wavlm"),$it.forEach(t),Kno=r(H8e," \u2014 "),nB=n(H8e,"A",{href:!0});var kit=s(nB);Zno=r(kit,"WavLMConfig"),kit.forEach(t),eso=r(H8e," (WavLM model)"),H8e.forEach(t),oso=i(L),Wg=n(L,"LI",{});var U8e=s(Wg);hle=n(U8e,"STRONG",{});var Sit=s(hle);rso=r(Sit,"xglm"),Sit.forEach(t),tso=r(U8e," \u2014 "),sB=n(U8e,"A",{href:!0});var Rit=s(sB);aso=r(Rit,"XGLMConfig"),Rit.forEach(t),nso=r(U8e," (XGLM model)"),U8e.forEach(t),sso=i(L),Qg=n(L,"LI",{});var J8e=s(Qg);ple=n(J8e,"STRONG",{});var Pit=s(ple);lso=r(Pit,"xlm"),Pit.forEach(t),iso=r(J8e," \u2014 "),lB=n(J8e,"A",{href:!0});var Bit=s(lB);dso=r(Bit,"XLMConfig"),Bit.forEach(t),cso=r(J8e," (XLM model)"),J8e.forEach(t),fso=i(L),Hg=n(L,"LI",{});var Y8e=s(Hg);_le=n(Y8e,"STRONG",{});var Iit=s(_le);mso=r(Iit,"xlm-prophetnet"),Iit.forEach(t),gso=r(Y8e," \u2014 "),iB=n(Y8e,"A",{href:!0});var Nit=s(iB);hso=r(Nit,"XLMProphetNetConfig"),Nit.forEach(t),pso=r(Y8e," (XLM-ProphetNet model)"),Y8e.forEach(t),_so=i(L),Ug=n(L,"LI",{});var K8e=s(Ug);ule=n(K8e,"STRONG",{});var qit=s(ule);uso=r(qit,"xlm-roberta"),qit.forEach(t),bso=r(K8e," \u2014 "),dB=n(K8e,"A",{href:!0});var jit=s(dB);vso=r(jit,"XLMRobertaConfig"),jit.forEach(t),Fso=r(K8e," (XLM-RoBERTa model)"),K8e.forEach(t),Tso=i(L),Jg=n(L,"LI",{});var Z8e=s(Jg);ble=n(Z8e,"STRONG",{});var Dit=s(ble);Mso=r(Dit,"xlm-roberta-xl"),Dit.forEach(t),Eso=r(Z8e," \u2014 "),cB=n(Z8e,"A",{href:!0});var Git=s(cB);Cso=r(Git,"XLMRobertaXLConfig"),Git.forEach(t),wso=r(Z8e," (XLM-RoBERTa-XL model)"),Z8e.forEach(t),Aso=i(L),Yg=n(L,"LI",{});var e9e=s(Yg);vle=n(e9e,"STRONG",{});var Oit=s(vle);Lso=r(Oit,"xlnet"),Oit.forEach(t),yso=r(e9e," \u2014 "),fB=n(e9e,"A",{href:!0});var Vit=s(fB);xso=r(Vit,"XLNetConfig"),Vit.forEach(t),$so=r(e9e," (XLNet model)"),e9e.forEach(t),kso=i(L),Kg=n(L,"LI",{});var o9e=s(Kg);Fle=n(o9e,"STRONG",{});var Xit=s(Fle);Sso=r(Xit,"yolos"),Xit.forEach(t),Rso=r(o9e," \u2014 "),mB=n(o9e,"A",{href:!0});var zit=s(mB);Pso=r(zit,"YolosConfig"),zit.forEach(t),Bso=r(o9e," (YOLOS model)"),o9e.forEach(t),Iso=i(L),Zg=n(L,"LI",{});var r9e=s(Zg);Tle=n(r9e,"STRONG",{});var Wit=s(Tle);Nso=r(Wit,"yoso"),Wit.forEach(t),qso=r(r9e," \u2014 "),gB=n(r9e,"A",{href:!0});var Qit=s(gB);jso=r(Qit,"YosoConfig"),Qit.forEach(t),Dso=r(r9e," (YOSO model)"),r9e.forEach(t),L.forEach(t),Gso=i(st),T(eh.$$.fragment,st),st.forEach(t),Oso=i(nt),oh=n(nt,"DIV",{class:!0});var tQe=s(oh);T(Cy.$$.fragment,tQe),Vso=i(tQe),Mle=n(tQe,"P",{});var Hit=s(Mle);Xso=r(Hit,"Register a new configuration for this class."),Hit.forEach(t),tQe.forEach(t),nt.forEach(t),aze=i(f),ji=n(f,"H2",{class:!0});var aQe=s(ji);rh=n(aQe,"A",{id:!0,class:!0,href:!0});var Uit=s(rh);Ele=n(Uit,"SPAN",{});var Jit=s(Ele);T(wy.$$.fragment,Jit),Jit.forEach(t),Uit.forEach(t),zso=i(aQe),Cle=n(aQe,"SPAN",{});var Yit=s(Cle);Wso=r(Yit,"AutoTokenizer"),Yit.forEach(t),aQe.forEach(t),nze=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(Ay.$$.fragment,ol),Qso=i(ol),Ly=n(ol,"P",{});var nQe=s(Ly);Hso=r(nQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),hB=n(nQe,"A",{href:!0});var Kit=s(hB);Uso=r(Kit,"AutoTokenizer.from_pretrained()"),Kit.forEach(t),Jso=r(nQe," class method."),nQe.forEach(t),Yso=i(ol),yy=n(ol,"P",{});var sQe=s(yy);Kso=r(sQe,"This class cannot be instantiated directly using "),wle=n(sQe,"CODE",{});var Zit=s(wle);Zso=r(Zit,"__init__()"),Zit.forEach(t),elo=r(sQe," (throws an error)."),sQe.forEach(t),olo=i(ol),$r=n(ol,"DIV",{class:!0});var rl=s($r);T(xy.$$.fragment,rl),rlo=i(rl),Ale=n(rl,"P",{});var edt=s(Ale);tlo=r(edt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),edt.forEach(t),alo=i(rl),Ba=n(rl,"P",{});var vA=s(Ba);nlo=r(vA,"The tokenizer class to instantiate is selected based on the "),Lle=n(vA,"CODE",{});var odt=s(Lle);slo=r(odt,"model_type"),odt.forEach(t),llo=r(vA,` property of the config object (either
passed as an argument or loaded from `),yle=n(vA,"CODE",{});var rdt=s(yle);ilo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),dlo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=n(vA,"CODE",{});var tdt=s(xle);clo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),flo=r(vA,":"),vA.forEach(t),mlo=i(rl),k=n(rl,"UL",{});var S=s(k);Dn=n(S,"LI",{});var Bk=s(Dn);$le=n(Bk,"STRONG",{});var adt=s($le);glo=r(adt,"albert"),adt.forEach(t),hlo=r(Bk," \u2014 "),pB=n(Bk,"A",{href:!0});var ndt=s(pB);plo=r(ndt,"AlbertTokenizer"),ndt.forEach(t),_lo=r(Bk," or "),_B=n(Bk,"A",{href:!0});var sdt=s(_B);ulo=r(sdt,"AlbertTokenizerFast"),sdt.forEach(t),blo=r(Bk," (ALBERT model)"),Bk.forEach(t),vlo=i(S),Gn=n(S,"LI",{});var Ik=s(Gn);kle=n(Ik,"STRONG",{});var ldt=s(kle);Flo=r(ldt,"bart"),ldt.forEach(t),Tlo=r(Ik," \u2014 "),uB=n(Ik,"A",{href:!0});var idt=s(uB);Mlo=r(idt,"BartTokenizer"),idt.forEach(t),Elo=r(Ik," or "),bB=n(Ik,"A",{href:!0});var ddt=s(bB);Clo=r(ddt,"BartTokenizerFast"),ddt.forEach(t),wlo=r(Ik," (BART model)"),Ik.forEach(t),Alo=i(S),On=n(S,"LI",{});var Nk=s(On);Sle=n(Nk,"STRONG",{});var cdt=s(Sle);Llo=r(cdt,"barthez"),cdt.forEach(t),ylo=r(Nk," \u2014 "),vB=n(Nk,"A",{href:!0});var fdt=s(vB);xlo=r(fdt,"BarthezTokenizer"),fdt.forEach(t),$lo=r(Nk," or "),FB=n(Nk,"A",{href:!0});var mdt=s(FB);klo=r(mdt,"BarthezTokenizerFast"),mdt.forEach(t),Slo=r(Nk," (BARThez model)"),Nk.forEach(t),Rlo=i(S),th=n(S,"LI",{});var t9e=s(th);Rle=n(t9e,"STRONG",{});var gdt=s(Rle);Plo=r(gdt,"bartpho"),gdt.forEach(t),Blo=r(t9e," \u2014 "),TB=n(t9e,"A",{href:!0});var hdt=s(TB);Ilo=r(hdt,"BartphoTokenizer"),hdt.forEach(t),Nlo=r(t9e," (BARTpho model)"),t9e.forEach(t),qlo=i(S),Vn=n(S,"LI",{});var qk=s(Vn);Ple=n(qk,"STRONG",{});var pdt=s(Ple);jlo=r(pdt,"bert"),pdt.forEach(t),Dlo=r(qk," \u2014 "),MB=n(qk,"A",{href:!0});var _dt=s(MB);Glo=r(_dt,"BertTokenizer"),_dt.forEach(t),Olo=r(qk," or "),EB=n(qk,"A",{href:!0});var udt=s(EB);Vlo=r(udt,"BertTokenizerFast"),udt.forEach(t),Xlo=r(qk," (BERT model)"),qk.forEach(t),zlo=i(S),ah=n(S,"LI",{});var a9e=s(ah);Ble=n(a9e,"STRONG",{});var bdt=s(Ble);Wlo=r(bdt,"bert-generation"),bdt.forEach(t),Qlo=r(a9e," \u2014 "),CB=n(a9e,"A",{href:!0});var vdt=s(CB);Hlo=r(vdt,"BertGenerationTokenizer"),vdt.forEach(t),Ulo=r(a9e," (Bert Generation model)"),a9e.forEach(t),Jlo=i(S),nh=n(S,"LI",{});var n9e=s(nh);Ile=n(n9e,"STRONG",{});var Fdt=s(Ile);Ylo=r(Fdt,"bert-japanese"),Fdt.forEach(t),Klo=r(n9e," \u2014 "),wB=n(n9e,"A",{href:!0});var Tdt=s(wB);Zlo=r(Tdt,"BertJapaneseTokenizer"),Tdt.forEach(t),eio=r(n9e," (BertJapanese model)"),n9e.forEach(t),oio=i(S),sh=n(S,"LI",{});var s9e=s(sh);Nle=n(s9e,"STRONG",{});var Mdt=s(Nle);rio=r(Mdt,"bertweet"),Mdt.forEach(t),tio=r(s9e," \u2014 "),AB=n(s9e,"A",{href:!0});var Edt=s(AB);aio=r(Edt,"BertweetTokenizer"),Edt.forEach(t),nio=r(s9e," (BERTweet model)"),s9e.forEach(t),sio=i(S),Xn=n(S,"LI",{});var jk=s(Xn);qle=n(jk,"STRONG",{});var Cdt=s(qle);lio=r(Cdt,"big_bird"),Cdt.forEach(t),iio=r(jk," \u2014 "),LB=n(jk,"A",{href:!0});var wdt=s(LB);dio=r(wdt,"BigBirdTokenizer"),wdt.forEach(t),cio=r(jk," or "),yB=n(jk,"A",{href:!0});var Adt=s(yB);fio=r(Adt,"BigBirdTokenizerFast"),Adt.forEach(t),mio=r(jk," (BigBird model)"),jk.forEach(t),gio=i(S),zn=n(S,"LI",{});var Dk=s(zn);jle=n(Dk,"STRONG",{});var Ldt=s(jle);hio=r(Ldt,"bigbird_pegasus"),Ldt.forEach(t),pio=r(Dk," \u2014 "),xB=n(Dk,"A",{href:!0});var ydt=s(xB);_io=r(ydt,"PegasusTokenizer"),ydt.forEach(t),uio=r(Dk," or "),$B=n(Dk,"A",{href:!0});var xdt=s($B);bio=r(xdt,"PegasusTokenizerFast"),xdt.forEach(t),vio=r(Dk," (BigBird-Pegasus model)"),Dk.forEach(t),Fio=i(S),Wn=n(S,"LI",{});var Gk=s(Wn);Dle=n(Gk,"STRONG",{});var $dt=s(Dle);Tio=r($dt,"blenderbot"),$dt.forEach(t),Mio=r(Gk," \u2014 "),kB=n(Gk,"A",{href:!0});var kdt=s(kB);Eio=r(kdt,"BlenderbotTokenizer"),kdt.forEach(t),Cio=r(Gk," or "),SB=n(Gk,"A",{href:!0});var Sdt=s(SB);wio=r(Sdt,"BlenderbotTokenizerFast"),Sdt.forEach(t),Aio=r(Gk," (Blenderbot model)"),Gk.forEach(t),Lio=i(S),lh=n(S,"LI",{});var l9e=s(lh);Gle=n(l9e,"STRONG",{});var Rdt=s(Gle);yio=r(Rdt,"blenderbot-small"),Rdt.forEach(t),xio=r(l9e," \u2014 "),RB=n(l9e,"A",{href:!0});var Pdt=s(RB);$io=r(Pdt,"BlenderbotSmallTokenizer"),Pdt.forEach(t),kio=r(l9e," (BlenderbotSmall model)"),l9e.forEach(t),Sio=i(S),ih=n(S,"LI",{});var i9e=s(ih);Ole=n(i9e,"STRONG",{});var Bdt=s(Ole);Rio=r(Bdt,"bloom"),Bdt.forEach(t),Pio=r(i9e," \u2014 "),PB=n(i9e,"A",{href:!0});var Idt=s(PB);Bio=r(Idt,"BloomTokenizerFast"),Idt.forEach(t),Iio=r(i9e," (BLOOM model)"),i9e.forEach(t),Nio=i(S),dh=n(S,"LI",{});var d9e=s(dh);Vle=n(d9e,"STRONG",{});var Ndt=s(Vle);qio=r(Ndt,"byt5"),Ndt.forEach(t),jio=r(d9e," \u2014 "),BB=n(d9e,"A",{href:!0});var qdt=s(BB);Dio=r(qdt,"ByT5Tokenizer"),qdt.forEach(t),Gio=r(d9e," (ByT5 model)"),d9e.forEach(t),Oio=i(S),Qn=n(S,"LI",{});var Ok=s(Qn);Xle=n(Ok,"STRONG",{});var jdt=s(Xle);Vio=r(jdt,"camembert"),jdt.forEach(t),Xio=r(Ok," \u2014 "),IB=n(Ok,"A",{href:!0});var Ddt=s(IB);zio=r(Ddt,"CamembertTokenizer"),Ddt.forEach(t),Wio=r(Ok," or "),NB=n(Ok,"A",{href:!0});var Gdt=s(NB);Qio=r(Gdt,"CamembertTokenizerFast"),Gdt.forEach(t),Hio=r(Ok," (CamemBERT model)"),Ok.forEach(t),Uio=i(S),ch=n(S,"LI",{});var c9e=s(ch);zle=n(c9e,"STRONG",{});var Odt=s(zle);Jio=r(Odt,"canine"),Odt.forEach(t),Yio=r(c9e," \u2014 "),qB=n(c9e,"A",{href:!0});var Vdt=s(qB);Kio=r(Vdt,"CanineTokenizer"),Vdt.forEach(t),Zio=r(c9e," (CANINE model)"),c9e.forEach(t),edo=i(S),Hn=n(S,"LI",{});var Vk=s(Hn);Wle=n(Vk,"STRONG",{});var Xdt=s(Wle);odo=r(Xdt,"clip"),Xdt.forEach(t),rdo=r(Vk," \u2014 "),jB=n(Vk,"A",{href:!0});var zdt=s(jB);tdo=r(zdt,"CLIPTokenizer"),zdt.forEach(t),ado=r(Vk," or "),DB=n(Vk,"A",{href:!0});var Wdt=s(DB);ndo=r(Wdt,"CLIPTokenizerFast"),Wdt.forEach(t),sdo=r(Vk," (CLIP model)"),Vk.forEach(t),ldo=i(S),Un=n(S,"LI",{});var Xk=s(Un);Qle=n(Xk,"STRONG",{});var Qdt=s(Qle);ido=r(Qdt,"codegen"),Qdt.forEach(t),ddo=r(Xk," \u2014 "),GB=n(Xk,"A",{href:!0});var Hdt=s(GB);cdo=r(Hdt,"CodeGenTokenizer"),Hdt.forEach(t),fdo=r(Xk," or "),OB=n(Xk,"A",{href:!0});var Udt=s(OB);mdo=r(Udt,"CodeGenTokenizerFast"),Udt.forEach(t),gdo=r(Xk," (CodeGen model)"),Xk.forEach(t),hdo=i(S),Jn=n(S,"LI",{});var zk=s(Jn);Hle=n(zk,"STRONG",{});var Jdt=s(Hle);pdo=r(Jdt,"convbert"),Jdt.forEach(t),_do=r(zk," \u2014 "),VB=n(zk,"A",{href:!0});var Ydt=s(VB);udo=r(Ydt,"ConvBertTokenizer"),Ydt.forEach(t),bdo=r(zk," or "),XB=n(zk,"A",{href:!0});var Kdt=s(XB);vdo=r(Kdt,"ConvBertTokenizerFast"),Kdt.forEach(t),Fdo=r(zk," (ConvBERT model)"),zk.forEach(t),Tdo=i(S),Yn=n(S,"LI",{});var Wk=s(Yn);Ule=n(Wk,"STRONG",{});var Zdt=s(Ule);Mdo=r(Zdt,"cpm"),Zdt.forEach(t),Edo=r(Wk," \u2014 "),zB=n(Wk,"A",{href:!0});var ect=s(zB);Cdo=r(ect,"CpmTokenizer"),ect.forEach(t),wdo=r(Wk," or "),WB=n(Wk,"A",{href:!0});var oct=s(WB);Ado=r(oct,"CpmTokenizerFast"),oct.forEach(t),Ldo=r(Wk," (CPM model)"),Wk.forEach(t),ydo=i(S),fh=n(S,"LI",{});var f9e=s(fh);Jle=n(f9e,"STRONG",{});var rct=s(Jle);xdo=r(rct,"ctrl"),rct.forEach(t),$do=r(f9e," \u2014 "),QB=n(f9e,"A",{href:!0});var tct=s(QB);kdo=r(tct,"CTRLTokenizer"),tct.forEach(t),Sdo=r(f9e," (CTRL model)"),f9e.forEach(t),Rdo=i(S),Kn=n(S,"LI",{});var Qk=s(Kn);Yle=n(Qk,"STRONG",{});var act=s(Yle);Pdo=r(act,"data2vec-text"),act.forEach(t),Bdo=r(Qk," \u2014 "),HB=n(Qk,"A",{href:!0});var nct=s(HB);Ido=r(nct,"RobertaTokenizer"),nct.forEach(t),Ndo=r(Qk," or "),UB=n(Qk,"A",{href:!0});var sct=s(UB);qdo=r(sct,"RobertaTokenizerFast"),sct.forEach(t),jdo=r(Qk," (Data2VecText model)"),Qk.forEach(t),Ddo=i(S),Zn=n(S,"LI",{});var Hk=s(Zn);Kle=n(Hk,"STRONG",{});var lct=s(Kle);Gdo=r(lct,"deberta"),lct.forEach(t),Odo=r(Hk," \u2014 "),JB=n(Hk,"A",{href:!0});var ict=s(JB);Vdo=r(ict,"DebertaTokenizer"),ict.forEach(t),Xdo=r(Hk," or "),YB=n(Hk,"A",{href:!0});var dct=s(YB);zdo=r(dct,"DebertaTokenizerFast"),dct.forEach(t),Wdo=r(Hk," (DeBERTa model)"),Hk.forEach(t),Qdo=i(S),es=n(S,"LI",{});var Uk=s(es);Zle=n(Uk,"STRONG",{});var cct=s(Zle);Hdo=r(cct,"deberta-v2"),cct.forEach(t),Udo=r(Uk," \u2014 "),KB=n(Uk,"A",{href:!0});var fct=s(KB);Jdo=r(fct,"DebertaV2Tokenizer"),fct.forEach(t),Ydo=r(Uk," or "),ZB=n(Uk,"A",{href:!0});var mct=s(ZB);Kdo=r(mct,"DebertaV2TokenizerFast"),mct.forEach(t),Zdo=r(Uk," (DeBERTa-v2 model)"),Uk.forEach(t),eco=i(S),os=n(S,"LI",{});var Jk=s(os);eie=n(Jk,"STRONG",{});var gct=s(eie);oco=r(gct,"distilbert"),gct.forEach(t),rco=r(Jk," \u2014 "),eI=n(Jk,"A",{href:!0});var hct=s(eI);tco=r(hct,"DistilBertTokenizer"),hct.forEach(t),aco=r(Jk," or "),oI=n(Jk,"A",{href:!0});var pct=s(oI);nco=r(pct,"DistilBertTokenizerFast"),pct.forEach(t),sco=r(Jk," (DistilBERT model)"),Jk.forEach(t),lco=i(S),rs=n(S,"LI",{});var Yk=s(rs);oie=n(Yk,"STRONG",{});var _ct=s(oie);ico=r(_ct,"dpr"),_ct.forEach(t),dco=r(Yk," \u2014 "),rI=n(Yk,"A",{href:!0});var uct=s(rI);cco=r(uct,"DPRQuestionEncoderTokenizer"),uct.forEach(t),fco=r(Yk," or "),tI=n(Yk,"A",{href:!0});var bct=s(tI);mco=r(bct,"DPRQuestionEncoderTokenizerFast"),bct.forEach(t),gco=r(Yk," (DPR model)"),Yk.forEach(t),hco=i(S),ts=n(S,"LI",{});var Kk=s(ts);rie=n(Kk,"STRONG",{});var vct=s(rie);pco=r(vct,"electra"),vct.forEach(t),_co=r(Kk," \u2014 "),aI=n(Kk,"A",{href:!0});var Fct=s(aI);uco=r(Fct,"ElectraTokenizer"),Fct.forEach(t),bco=r(Kk," or "),nI=n(Kk,"A",{href:!0});var Tct=s(nI);vco=r(Tct,"ElectraTokenizerFast"),Tct.forEach(t),Fco=r(Kk," (ELECTRA model)"),Kk.forEach(t),Tco=i(S),mh=n(S,"LI",{});var m9e=s(mh);tie=n(m9e,"STRONG",{});var Mct=s(tie);Mco=r(Mct,"flaubert"),Mct.forEach(t),Eco=r(m9e," \u2014 "),sI=n(m9e,"A",{href:!0});var Ect=s(sI);Cco=r(Ect,"FlaubertTokenizer"),Ect.forEach(t),wco=r(m9e," (FlauBERT model)"),m9e.forEach(t),Aco=i(S),as=n(S,"LI",{});var Zk=s(as);aie=n(Zk,"STRONG",{});var Cct=s(aie);Lco=r(Cct,"fnet"),Cct.forEach(t),yco=r(Zk," \u2014 "),lI=n(Zk,"A",{href:!0});var wct=s(lI);xco=r(wct,"FNetTokenizer"),wct.forEach(t),$co=r(Zk," or "),iI=n(Zk,"A",{href:!0});var Act=s(iI);kco=r(Act,"FNetTokenizerFast"),Act.forEach(t),Sco=r(Zk," (FNet model)"),Zk.forEach(t),Rco=i(S),gh=n(S,"LI",{});var g9e=s(gh);nie=n(g9e,"STRONG",{});var Lct=s(nie);Pco=r(Lct,"fsmt"),Lct.forEach(t),Bco=r(g9e," \u2014 "),dI=n(g9e,"A",{href:!0});var yct=s(dI);Ico=r(yct,"FSMTTokenizer"),yct.forEach(t),Nco=r(g9e," (FairSeq Machine-Translation model)"),g9e.forEach(t),qco=i(S),ns=n(S,"LI",{});var eS=s(ns);sie=n(eS,"STRONG",{});var xct=s(sie);jco=r(xct,"funnel"),xct.forEach(t),Dco=r(eS," \u2014 "),cI=n(eS,"A",{href:!0});var $ct=s(cI);Gco=r($ct,"FunnelTokenizer"),$ct.forEach(t),Oco=r(eS," or "),fI=n(eS,"A",{href:!0});var kct=s(fI);Vco=r(kct,"FunnelTokenizerFast"),kct.forEach(t),Xco=r(eS," (Funnel Transformer model)"),eS.forEach(t),zco=i(S),ss=n(S,"LI",{});var oS=s(ss);lie=n(oS,"STRONG",{});var Sct=s(lie);Wco=r(Sct,"gpt2"),Sct.forEach(t),Qco=r(oS," \u2014 "),mI=n(oS,"A",{href:!0});var Rct=s(mI);Hco=r(Rct,"GPT2Tokenizer"),Rct.forEach(t),Uco=r(oS," or "),gI=n(oS,"A",{href:!0});var Pct=s(gI);Jco=r(Pct,"GPT2TokenizerFast"),Pct.forEach(t),Yco=r(oS," (OpenAI GPT-2 model)"),oS.forEach(t),Kco=i(S),ls=n(S,"LI",{});var rS=s(ls);iie=n(rS,"STRONG",{});var Bct=s(iie);Zco=r(Bct,"gpt_neo"),Bct.forEach(t),efo=r(rS," \u2014 "),hI=n(rS,"A",{href:!0});var Ict=s(hI);ofo=r(Ict,"GPT2Tokenizer"),Ict.forEach(t),rfo=r(rS," or "),pI=n(rS,"A",{href:!0});var Nct=s(pI);tfo=r(Nct,"GPT2TokenizerFast"),Nct.forEach(t),afo=r(rS," (GPT Neo model)"),rS.forEach(t),nfo=i(S),hh=n(S,"LI",{});var h9e=s(hh);die=n(h9e,"STRONG",{});var qct=s(die);sfo=r(qct,"gpt_neox"),qct.forEach(t),lfo=r(h9e," \u2014 "),_I=n(h9e,"A",{href:!0});var jct=s(_I);ifo=r(jct,"GPTNeoXTokenizerFast"),jct.forEach(t),dfo=r(h9e," (GPT NeoX model)"),h9e.forEach(t),cfo=i(S),is=n(S,"LI",{});var tS=s(is);cie=n(tS,"STRONG",{});var Dct=s(cie);ffo=r(Dct,"gptj"),Dct.forEach(t),mfo=r(tS," \u2014 "),uI=n(tS,"A",{href:!0});var Gct=s(uI);gfo=r(Gct,"GPT2Tokenizer"),Gct.forEach(t),hfo=r(tS," or "),bI=n(tS,"A",{href:!0});var Oct=s(bI);pfo=r(Oct,"GPT2TokenizerFast"),Oct.forEach(t),_fo=r(tS," (GPT-J model)"),tS.forEach(t),ufo=i(S),ds=n(S,"LI",{});var aS=s(ds);fie=n(aS,"STRONG",{});var Vct=s(fie);bfo=r(Vct,"groupvit"),Vct.forEach(t),vfo=r(aS," \u2014 "),vI=n(aS,"A",{href:!0});var Xct=s(vI);Ffo=r(Xct,"CLIPTokenizer"),Xct.forEach(t),Tfo=r(aS," or "),FI=n(aS,"A",{href:!0});var zct=s(FI);Mfo=r(zct,"CLIPTokenizerFast"),zct.forEach(t),Efo=r(aS," (GroupViT model)"),aS.forEach(t),Cfo=i(S),cs=n(S,"LI",{});var nS=s(cs);mie=n(nS,"STRONG",{});var Wct=s(mie);wfo=r(Wct,"herbert"),Wct.forEach(t),Afo=r(nS," \u2014 "),TI=n(nS,"A",{href:!0});var Qct=s(TI);Lfo=r(Qct,"HerbertTokenizer"),Qct.forEach(t),yfo=r(nS," or "),MI=n(nS,"A",{href:!0});var Hct=s(MI);xfo=r(Hct,"HerbertTokenizerFast"),Hct.forEach(t),$fo=r(nS," (HerBERT model)"),nS.forEach(t),kfo=i(S),ph=n(S,"LI",{});var p9e=s(ph);gie=n(p9e,"STRONG",{});var Uct=s(gie);Sfo=r(Uct,"hubert"),Uct.forEach(t),Rfo=r(p9e," \u2014 "),EI=n(p9e,"A",{href:!0});var Jct=s(EI);Pfo=r(Jct,"Wav2Vec2CTCTokenizer"),Jct.forEach(t),Bfo=r(p9e," (Hubert model)"),p9e.forEach(t),Ifo=i(S),fs=n(S,"LI",{});var sS=s(fs);hie=n(sS,"STRONG",{});var Yct=s(hie);Nfo=r(Yct,"ibert"),Yct.forEach(t),qfo=r(sS," \u2014 "),CI=n(sS,"A",{href:!0});var Kct=s(CI);jfo=r(Kct,"RobertaTokenizer"),Kct.forEach(t),Dfo=r(sS," or "),wI=n(sS,"A",{href:!0});var Zct=s(wI);Gfo=r(Zct,"RobertaTokenizerFast"),Zct.forEach(t),Ofo=r(sS," (I-BERT model)"),sS.forEach(t),Vfo=i(S),ms=n(S,"LI",{});var lS=s(ms);pie=n(lS,"STRONG",{});var eft=s(pie);Xfo=r(eft,"layoutlm"),eft.forEach(t),zfo=r(lS," \u2014 "),AI=n(lS,"A",{href:!0});var oft=s(AI);Wfo=r(oft,"LayoutLMTokenizer"),oft.forEach(t),Qfo=r(lS," or "),LI=n(lS,"A",{href:!0});var rft=s(LI);Hfo=r(rft,"LayoutLMTokenizerFast"),rft.forEach(t),Ufo=r(lS," (LayoutLM model)"),lS.forEach(t),Jfo=i(S),gs=n(S,"LI",{});var iS=s(gs);_ie=n(iS,"STRONG",{});var tft=s(_ie);Yfo=r(tft,"layoutlmv2"),tft.forEach(t),Kfo=r(iS," \u2014 "),yI=n(iS,"A",{href:!0});var aft=s(yI);Zfo=r(aft,"LayoutLMv2Tokenizer"),aft.forEach(t),emo=r(iS," or "),xI=n(iS,"A",{href:!0});var nft=s(xI);omo=r(nft,"LayoutLMv2TokenizerFast"),nft.forEach(t),rmo=r(iS," (LayoutLMv2 model)"),iS.forEach(t),tmo=i(S),hs=n(S,"LI",{});var dS=s(hs);uie=n(dS,"STRONG",{});var sft=s(uie);amo=r(sft,"layoutlmv3"),sft.forEach(t),nmo=r(dS," \u2014 "),$I=n(dS,"A",{href:!0});var lft=s($I);smo=r(lft,"LayoutLMv3Tokenizer"),lft.forEach(t),lmo=r(dS," or "),kI=n(dS,"A",{href:!0});var ift=s(kI);imo=r(ift,"LayoutLMv3TokenizerFast"),ift.forEach(t),dmo=r(dS," (LayoutLMv3 model)"),dS.forEach(t),cmo=i(S),ps=n(S,"LI",{});var cS=s(ps);bie=n(cS,"STRONG",{});var dft=s(bie);fmo=r(dft,"layoutxlm"),dft.forEach(t),mmo=r(cS," \u2014 "),SI=n(cS,"A",{href:!0});var cft=s(SI);gmo=r(cft,"LayoutXLMTokenizer"),cft.forEach(t),hmo=r(cS," or "),RI=n(cS,"A",{href:!0});var fft=s(RI);pmo=r(fft,"LayoutXLMTokenizerFast"),fft.forEach(t),_mo=r(cS," (LayoutXLM model)"),cS.forEach(t),umo=i(S),_s=n(S,"LI",{});var fS=s(_s);vie=n(fS,"STRONG",{});var mft=s(vie);bmo=r(mft,"led"),mft.forEach(t),vmo=r(fS," \u2014 "),PI=n(fS,"A",{href:!0});var gft=s(PI);Fmo=r(gft,"LEDTokenizer"),gft.forEach(t),Tmo=r(fS," or "),BI=n(fS,"A",{href:!0});var hft=s(BI);Mmo=r(hft,"LEDTokenizerFast"),hft.forEach(t),Emo=r(fS," (LED model)"),fS.forEach(t),Cmo=i(S),us=n(S,"LI",{});var mS=s(us);Fie=n(mS,"STRONG",{});var pft=s(Fie);wmo=r(pft,"longformer"),pft.forEach(t),Amo=r(mS," \u2014 "),II=n(mS,"A",{href:!0});var _ft=s(II);Lmo=r(_ft,"LongformerTokenizer"),_ft.forEach(t),ymo=r(mS," or "),NI=n(mS,"A",{href:!0});var uft=s(NI);xmo=r(uft,"LongformerTokenizerFast"),uft.forEach(t),$mo=r(mS," (Longformer model)"),mS.forEach(t),kmo=i(S),bs=n(S,"LI",{});var gS=s(bs);Tie=n(gS,"STRONG",{});var bft=s(Tie);Smo=r(bft,"longt5"),bft.forEach(t),Rmo=r(gS," \u2014 "),qI=n(gS,"A",{href:!0});var vft=s(qI);Pmo=r(vft,"T5Tokenizer"),vft.forEach(t),Bmo=r(gS," or "),jI=n(gS,"A",{href:!0});var Fft=s(jI);Imo=r(Fft,"T5TokenizerFast"),Fft.forEach(t),Nmo=r(gS," (LongT5 model)"),gS.forEach(t),qmo=i(S),_h=n(S,"LI",{});var _9e=s(_h);Mie=n(_9e,"STRONG",{});var Tft=s(Mie);jmo=r(Tft,"luke"),Tft.forEach(t),Dmo=r(_9e," \u2014 "),DI=n(_9e,"A",{href:!0});var Mft=s(DI);Gmo=r(Mft,"LukeTokenizer"),Mft.forEach(t),Omo=r(_9e," (LUKE model)"),_9e.forEach(t),Vmo=i(S),vs=n(S,"LI",{});var hS=s(vs);Eie=n(hS,"STRONG",{});var Eft=s(Eie);Xmo=r(Eft,"lxmert"),Eft.forEach(t),zmo=r(hS," \u2014 "),GI=n(hS,"A",{href:!0});var Cft=s(GI);Wmo=r(Cft,"LxmertTokenizer"),Cft.forEach(t),Qmo=r(hS," or "),OI=n(hS,"A",{href:!0});var wft=s(OI);Hmo=r(wft,"LxmertTokenizerFast"),wft.forEach(t),Umo=r(hS," (LXMERT model)"),hS.forEach(t),Jmo=i(S),uh=n(S,"LI",{});var u9e=s(uh);Cie=n(u9e,"STRONG",{});var Aft=s(Cie);Ymo=r(Aft,"m2m_100"),Aft.forEach(t),Kmo=r(u9e," \u2014 "),VI=n(u9e,"A",{href:!0});var Lft=s(VI);Zmo=r(Lft,"M2M100Tokenizer"),Lft.forEach(t),ego=r(u9e," (M2M100 model)"),u9e.forEach(t),ogo=i(S),bh=n(S,"LI",{});var b9e=s(bh);wie=n(b9e,"STRONG",{});var yft=s(wie);rgo=r(yft,"marian"),yft.forEach(t),tgo=r(b9e," \u2014 "),XI=n(b9e,"A",{href:!0});var xft=s(XI);ago=r(xft,"MarianTokenizer"),xft.forEach(t),ngo=r(b9e," (Marian model)"),b9e.forEach(t),sgo=i(S),Fs=n(S,"LI",{});var pS=s(Fs);Aie=n(pS,"STRONG",{});var $ft=s(Aie);lgo=r($ft,"mbart"),$ft.forEach(t),igo=r(pS," \u2014 "),zI=n(pS,"A",{href:!0});var kft=s(zI);dgo=r(kft,"MBartTokenizer"),kft.forEach(t),cgo=r(pS," or "),WI=n(pS,"A",{href:!0});var Sft=s(WI);fgo=r(Sft,"MBartTokenizerFast"),Sft.forEach(t),mgo=r(pS," (mBART model)"),pS.forEach(t),ggo=i(S),Ts=n(S,"LI",{});var _S=s(Ts);Lie=n(_S,"STRONG",{});var Rft=s(Lie);hgo=r(Rft,"mbart50"),Rft.forEach(t),pgo=r(_S," \u2014 "),QI=n(_S,"A",{href:!0});var Pft=s(QI);_go=r(Pft,"MBart50Tokenizer"),Pft.forEach(t),ugo=r(_S," or "),HI=n(_S,"A",{href:!0});var Bft=s(HI);bgo=r(Bft,"MBart50TokenizerFast"),Bft.forEach(t),vgo=r(_S," (mBART-50 model)"),_S.forEach(t),Fgo=i(S),Ms=n(S,"LI",{});var uS=s(Ms);yie=n(uS,"STRONG",{});var Ift=s(yie);Tgo=r(Ift,"megatron-bert"),Ift.forEach(t),Mgo=r(uS," \u2014 "),UI=n(uS,"A",{href:!0});var Nft=s(UI);Ego=r(Nft,"BertTokenizer"),Nft.forEach(t),Cgo=r(uS," or "),JI=n(uS,"A",{href:!0});var qft=s(JI);wgo=r(qft,"BertTokenizerFast"),qft.forEach(t),Ago=r(uS," (Megatron-BERT model)"),uS.forEach(t),Lgo=i(S),vh=n(S,"LI",{});var v9e=s(vh);xie=n(v9e,"STRONG",{});var jft=s(xie);ygo=r(jft,"mluke"),jft.forEach(t),xgo=r(v9e," \u2014 "),YI=n(v9e,"A",{href:!0});var Dft=s(YI);$go=r(Dft,"MLukeTokenizer"),Dft.forEach(t),kgo=r(v9e," (mLUKE model)"),v9e.forEach(t),Sgo=i(S),Es=n(S,"LI",{});var bS=s(Es);$ie=n(bS,"STRONG",{});var Gft=s($ie);Rgo=r(Gft,"mobilebert"),Gft.forEach(t),Pgo=r(bS," \u2014 "),KI=n(bS,"A",{href:!0});var Oft=s(KI);Bgo=r(Oft,"MobileBertTokenizer"),Oft.forEach(t),Igo=r(bS," or "),ZI=n(bS,"A",{href:!0});var Vft=s(ZI);Ngo=r(Vft,"MobileBertTokenizerFast"),Vft.forEach(t),qgo=r(bS," (MobileBERT model)"),bS.forEach(t),jgo=i(S),Cs=n(S,"LI",{});var vS=s(Cs);kie=n(vS,"STRONG",{});var Xft=s(kie);Dgo=r(Xft,"mpnet"),Xft.forEach(t),Ggo=r(vS," \u2014 "),eN=n(vS,"A",{href:!0});var zft=s(eN);Ogo=r(zft,"MPNetTokenizer"),zft.forEach(t),Vgo=r(vS," or "),oN=n(vS,"A",{href:!0});var Wft=s(oN);Xgo=r(Wft,"MPNetTokenizerFast"),Wft.forEach(t),zgo=r(vS," (MPNet model)"),vS.forEach(t),Wgo=i(S),ws=n(S,"LI",{});var FS=s(ws);Sie=n(FS,"STRONG",{});var Qft=s(Sie);Qgo=r(Qft,"mt5"),Qft.forEach(t),Hgo=r(FS," \u2014 "),rN=n(FS,"A",{href:!0});var Hft=s(rN);Ugo=r(Hft,"MT5Tokenizer"),Hft.forEach(t),Jgo=r(FS," or "),tN=n(FS,"A",{href:!0});var Uft=s(tN);Ygo=r(Uft,"MT5TokenizerFast"),Uft.forEach(t),Kgo=r(FS," (MT5 model)"),FS.forEach(t),Zgo=i(S),As=n(S,"LI",{});var TS=s(As);Rie=n(TS,"STRONG",{});var Jft=s(Rie);eho=r(Jft,"mvp"),Jft.forEach(t),oho=r(TS," \u2014 "),aN=n(TS,"A",{href:!0});var Yft=s(aN);rho=r(Yft,"MvpTokenizer"),Yft.forEach(t),tho=r(TS," or "),nN=n(TS,"A",{href:!0});var Kft=s(nN);aho=r(Kft,"MvpTokenizerFast"),Kft.forEach(t),nho=r(TS," (MVP model)"),TS.forEach(t),sho=i(S),Ls=n(S,"LI",{});var MS=s(Ls);Pie=n(MS,"STRONG",{});var Zft=s(Pie);lho=r(Zft,"nezha"),Zft.forEach(t),iho=r(MS," \u2014 "),sN=n(MS,"A",{href:!0});var emt=s(sN);dho=r(emt,"BertTokenizer"),emt.forEach(t),cho=r(MS," or "),lN=n(MS,"A",{href:!0});var omt=s(lN);fho=r(omt,"BertTokenizerFast"),omt.forEach(t),mho=r(MS," (Nezha model)"),MS.forEach(t),gho=i(S),ys=n(S,"LI",{});var ES=s(ys);Bie=n(ES,"STRONG",{});var rmt=s(Bie);hho=r(rmt,"nllb"),rmt.forEach(t),pho=r(ES," \u2014 "),iN=n(ES,"A",{href:!0});var tmt=s(iN);_ho=r(tmt,"NllbTokenizer"),tmt.forEach(t),uho=r(ES," or "),dN=n(ES,"A",{href:!0});var amt=s(dN);bho=r(amt,"NllbTokenizerFast"),amt.forEach(t),vho=r(ES," (NLLB model)"),ES.forEach(t),Fho=i(S),xs=n(S,"LI",{});var CS=s(xs);Iie=n(CS,"STRONG",{});var nmt=s(Iie);Tho=r(nmt,"nystromformer"),nmt.forEach(t),Mho=r(CS," \u2014 "),cN=n(CS,"A",{href:!0});var smt=s(cN);Eho=r(smt,"AlbertTokenizer"),smt.forEach(t),Cho=r(CS," or "),fN=n(CS,"A",{href:!0});var lmt=s(fN);who=r(lmt,"AlbertTokenizerFast"),lmt.forEach(t),Aho=r(CS," (Nystr\xF6mformer model)"),CS.forEach(t),Lho=i(S),$s=n(S,"LI",{});var wS=s($s);Nie=n(wS,"STRONG",{});var imt=s(Nie);yho=r(imt,"openai-gpt"),imt.forEach(t),xho=r(wS," \u2014 "),mN=n(wS,"A",{href:!0});var dmt=s(mN);$ho=r(dmt,"OpenAIGPTTokenizer"),dmt.forEach(t),kho=r(wS," or "),gN=n(wS,"A",{href:!0});var cmt=s(gN);Sho=r(cmt,"OpenAIGPTTokenizerFast"),cmt.forEach(t),Rho=r(wS," (OpenAI GPT model)"),wS.forEach(t),Pho=i(S),Fh=n(S,"LI",{});var F9e=s(Fh);qie=n(F9e,"STRONG",{});var fmt=s(qie);Bho=r(fmt,"opt"),fmt.forEach(t),Iho=r(F9e," \u2014 "),hN=n(F9e,"A",{href:!0});var mmt=s(hN);Nho=r(mmt,"GPT2Tokenizer"),mmt.forEach(t),qho=r(F9e," (OPT model)"),F9e.forEach(t),jho=i(S),ks=n(S,"LI",{});var AS=s(ks);jie=n(AS,"STRONG",{});var gmt=s(jie);Dho=r(gmt,"owlvit"),gmt.forEach(t),Gho=r(AS," \u2014 "),pN=n(AS,"A",{href:!0});var hmt=s(pN);Oho=r(hmt,"CLIPTokenizer"),hmt.forEach(t),Vho=r(AS," or "),_N=n(AS,"A",{href:!0});var pmt=s(_N);Xho=r(pmt,"CLIPTokenizerFast"),pmt.forEach(t),zho=r(AS," (OWL-ViT model)"),AS.forEach(t),Who=i(S),Ss=n(S,"LI",{});var LS=s(Ss);Die=n(LS,"STRONG",{});var _mt=s(Die);Qho=r(_mt,"pegasus"),_mt.forEach(t),Hho=r(LS," \u2014 "),uN=n(LS,"A",{href:!0});var umt=s(uN);Uho=r(umt,"PegasusTokenizer"),umt.forEach(t),Jho=r(LS," or "),bN=n(LS,"A",{href:!0});var bmt=s(bN);Yho=r(bmt,"PegasusTokenizerFast"),bmt.forEach(t),Kho=r(LS," (Pegasus model)"),LS.forEach(t),Zho=i(S),Th=n(S,"LI",{});var T9e=s(Th);Gie=n(T9e,"STRONG",{});var vmt=s(Gie);epo=r(vmt,"perceiver"),vmt.forEach(t),opo=r(T9e," \u2014 "),vN=n(T9e,"A",{href:!0});var Fmt=s(vN);rpo=r(Fmt,"PerceiverTokenizer"),Fmt.forEach(t),tpo=r(T9e," (Perceiver model)"),T9e.forEach(t),apo=i(S),Mh=n(S,"LI",{});var M9e=s(Mh);Oie=n(M9e,"STRONG",{});var Tmt=s(Oie);npo=r(Tmt,"phobert"),Tmt.forEach(t),spo=r(M9e," \u2014 "),FN=n(M9e,"A",{href:!0});var Mmt=s(FN);lpo=r(Mmt,"PhobertTokenizer"),Mmt.forEach(t),ipo=r(M9e," (PhoBERT model)"),M9e.forEach(t),dpo=i(S),Eh=n(S,"LI",{});var E9e=s(Eh);Vie=n(E9e,"STRONG",{});var Emt=s(Vie);cpo=r(Emt,"plbart"),Emt.forEach(t),fpo=r(E9e," \u2014 "),TN=n(E9e,"A",{href:!0});var Cmt=s(TN);mpo=r(Cmt,"PLBartTokenizer"),Cmt.forEach(t),gpo=r(E9e," (PLBart model)"),E9e.forEach(t),hpo=i(S),Ch=n(S,"LI",{});var C9e=s(Ch);Xie=n(C9e,"STRONG",{});var wmt=s(Xie);ppo=r(wmt,"prophetnet"),wmt.forEach(t),_po=r(C9e," \u2014 "),MN=n(C9e,"A",{href:!0});var Amt=s(MN);upo=r(Amt,"ProphetNetTokenizer"),Amt.forEach(t),bpo=r(C9e," (ProphetNet model)"),C9e.forEach(t),vpo=i(S),Rs=n(S,"LI",{});var yS=s(Rs);zie=n(yS,"STRONG",{});var Lmt=s(zie);Fpo=r(Lmt,"qdqbert"),Lmt.forEach(t),Tpo=r(yS," \u2014 "),EN=n(yS,"A",{href:!0});var ymt=s(EN);Mpo=r(ymt,"BertTokenizer"),ymt.forEach(t),Epo=r(yS," or "),CN=n(yS,"A",{href:!0});var xmt=s(CN);Cpo=r(xmt,"BertTokenizerFast"),xmt.forEach(t),wpo=r(yS," (QDQBert model)"),yS.forEach(t),Apo=i(S),wh=n(S,"LI",{});var w9e=s(wh);Wie=n(w9e,"STRONG",{});var $mt=s(Wie);Lpo=r($mt,"rag"),$mt.forEach(t),ypo=r(w9e," \u2014 "),wN=n(w9e,"A",{href:!0});var kmt=s(wN);xpo=r(kmt,"RagTokenizer"),kmt.forEach(t),$po=r(w9e," (RAG model)"),w9e.forEach(t),kpo=i(S),Ps=n(S,"LI",{});var xS=s(Ps);Qie=n(xS,"STRONG",{});var Smt=s(Qie);Spo=r(Smt,"realm"),Smt.forEach(t),Rpo=r(xS," \u2014 "),AN=n(xS,"A",{href:!0});var Rmt=s(AN);Ppo=r(Rmt,"RealmTokenizer"),Rmt.forEach(t),Bpo=r(xS," or "),LN=n(xS,"A",{href:!0});var Pmt=s(LN);Ipo=r(Pmt,"RealmTokenizerFast"),Pmt.forEach(t),Npo=r(xS," (REALM model)"),xS.forEach(t),qpo=i(S),Bs=n(S,"LI",{});var $S=s(Bs);Hie=n($S,"STRONG",{});var Bmt=s(Hie);jpo=r(Bmt,"reformer"),Bmt.forEach(t),Dpo=r($S," \u2014 "),yN=n($S,"A",{href:!0});var Imt=s(yN);Gpo=r(Imt,"ReformerTokenizer"),Imt.forEach(t),Opo=r($S," or "),xN=n($S,"A",{href:!0});var Nmt=s(xN);Vpo=r(Nmt,"ReformerTokenizerFast"),Nmt.forEach(t),Xpo=r($S," (Reformer model)"),$S.forEach(t),zpo=i(S),Is=n(S,"LI",{});var kS=s(Is);Uie=n(kS,"STRONG",{});var qmt=s(Uie);Wpo=r(qmt,"rembert"),qmt.forEach(t),Qpo=r(kS," \u2014 "),$N=n(kS,"A",{href:!0});var jmt=s($N);Hpo=r(jmt,"RemBertTokenizer"),jmt.forEach(t),Upo=r(kS," or "),kN=n(kS,"A",{href:!0});var Dmt=s(kN);Jpo=r(Dmt,"RemBertTokenizerFast"),Dmt.forEach(t),Ypo=r(kS," (RemBERT model)"),kS.forEach(t),Kpo=i(S),Ns=n(S,"LI",{});var SS=s(Ns);Jie=n(SS,"STRONG",{});var Gmt=s(Jie);Zpo=r(Gmt,"retribert"),Gmt.forEach(t),e_o=r(SS," \u2014 "),SN=n(SS,"A",{href:!0});var Omt=s(SN);o_o=r(Omt,"RetriBertTokenizer"),Omt.forEach(t),r_o=r(SS," or "),RN=n(SS,"A",{href:!0});var Vmt=s(RN);t_o=r(Vmt,"RetriBertTokenizerFast"),Vmt.forEach(t),a_o=r(SS," (RetriBERT model)"),SS.forEach(t),n_o=i(S),qs=n(S,"LI",{});var RS=s(qs);Yie=n(RS,"STRONG",{});var Xmt=s(Yie);s_o=r(Xmt,"roberta"),Xmt.forEach(t),l_o=r(RS," \u2014 "),PN=n(RS,"A",{href:!0});var zmt=s(PN);i_o=r(zmt,"RobertaTokenizer"),zmt.forEach(t),d_o=r(RS," or "),BN=n(RS,"A",{href:!0});var Wmt=s(BN);c_o=r(Wmt,"RobertaTokenizerFast"),Wmt.forEach(t),f_o=r(RS," (RoBERTa model)"),RS.forEach(t),m_o=i(S),js=n(S,"LI",{});var PS=s(js);Kie=n(PS,"STRONG",{});var Qmt=s(Kie);g_o=r(Qmt,"roformer"),Qmt.forEach(t),h_o=r(PS," \u2014 "),IN=n(PS,"A",{href:!0});var Hmt=s(IN);p_o=r(Hmt,"RoFormerTokenizer"),Hmt.forEach(t),__o=r(PS," or "),NN=n(PS,"A",{href:!0});var Umt=s(NN);u_o=r(Umt,"RoFormerTokenizerFast"),Umt.forEach(t),b_o=r(PS," (RoFormer model)"),PS.forEach(t),v_o=i(S),Ah=n(S,"LI",{});var A9e=s(Ah);Zie=n(A9e,"STRONG",{});var Jmt=s(Zie);F_o=r(Jmt,"speech_to_text"),Jmt.forEach(t),T_o=r(A9e," \u2014 "),qN=n(A9e,"A",{href:!0});var Ymt=s(qN);M_o=r(Ymt,"Speech2TextTokenizer"),Ymt.forEach(t),E_o=r(A9e," (Speech2Text model)"),A9e.forEach(t),C_o=i(S),Lh=n(S,"LI",{});var L9e=s(Lh);ede=n(L9e,"STRONG",{});var Kmt=s(ede);w_o=r(Kmt,"speech_to_text_2"),Kmt.forEach(t),A_o=r(L9e," \u2014 "),jN=n(L9e,"A",{href:!0});var Zmt=s(jN);L_o=r(Zmt,"Speech2Text2Tokenizer"),Zmt.forEach(t),y_o=r(L9e," (Speech2Text2 model)"),L9e.forEach(t),x_o=i(S),Ds=n(S,"LI",{});var BS=s(Ds);ode=n(BS,"STRONG",{});var egt=s(ode);$_o=r(egt,"splinter"),egt.forEach(t),k_o=r(BS," \u2014 "),DN=n(BS,"A",{href:!0});var ogt=s(DN);S_o=r(ogt,"SplinterTokenizer"),ogt.forEach(t),R_o=r(BS," or "),GN=n(BS,"A",{href:!0});var rgt=s(GN);P_o=r(rgt,"SplinterTokenizerFast"),rgt.forEach(t),B_o=r(BS," (Splinter model)"),BS.forEach(t),I_o=i(S),Gs=n(S,"LI",{});var IS=s(Gs);rde=n(IS,"STRONG",{});var tgt=s(rde);N_o=r(tgt,"squeezebert"),tgt.forEach(t),q_o=r(IS," \u2014 "),ON=n(IS,"A",{href:!0});var agt=s(ON);j_o=r(agt,"SqueezeBertTokenizer"),agt.forEach(t),D_o=r(IS," or "),VN=n(IS,"A",{href:!0});var ngt=s(VN);G_o=r(ngt,"SqueezeBertTokenizerFast"),ngt.forEach(t),O_o=r(IS," (SqueezeBERT model)"),IS.forEach(t),V_o=i(S),Os=n(S,"LI",{});var NS=s(Os);tde=n(NS,"STRONG",{});var sgt=s(tde);X_o=r(sgt,"t5"),sgt.forEach(t),z_o=r(NS," \u2014 "),XN=n(NS,"A",{href:!0});var lgt=s(XN);W_o=r(lgt,"T5Tokenizer"),lgt.forEach(t),Q_o=r(NS," or "),zN=n(NS,"A",{href:!0});var igt=s(zN);H_o=r(igt,"T5TokenizerFast"),igt.forEach(t),U_o=r(NS," (T5 model)"),NS.forEach(t),J_o=i(S),yh=n(S,"LI",{});var y9e=s(yh);ade=n(y9e,"STRONG",{});var dgt=s(ade);Y_o=r(dgt,"tapas"),dgt.forEach(t),K_o=r(y9e," \u2014 "),WN=n(y9e,"A",{href:!0});var cgt=s(WN);Z_o=r(cgt,"TapasTokenizer"),cgt.forEach(t),euo=r(y9e," (TAPAS model)"),y9e.forEach(t),ouo=i(S),xh=n(S,"LI",{});var x9e=s(xh);nde=n(x9e,"STRONG",{});var fgt=s(nde);ruo=r(fgt,"tapex"),fgt.forEach(t),tuo=r(x9e," \u2014 "),QN=n(x9e,"A",{href:!0});var mgt=s(QN);auo=r(mgt,"TapexTokenizer"),mgt.forEach(t),nuo=r(x9e," (TAPEX model)"),x9e.forEach(t),suo=i(S),$h=n(S,"LI",{});var $9e=s($h);sde=n($9e,"STRONG",{});var ggt=s(sde);luo=r(ggt,"transfo-xl"),ggt.forEach(t),iuo=r($9e," \u2014 "),HN=n($9e,"A",{href:!0});var hgt=s(HN);duo=r(hgt,"TransfoXLTokenizer"),hgt.forEach(t),cuo=r($9e," (Transformer-XL model)"),$9e.forEach(t),fuo=i(S),Vs=n(S,"LI",{});var qS=s(Vs);lde=n(qS,"STRONG",{});var pgt=s(lde);muo=r(pgt,"vilt"),pgt.forEach(t),guo=r(qS," \u2014 "),UN=n(qS,"A",{href:!0});var _gt=s(UN);huo=r(_gt,"BertTokenizer"),_gt.forEach(t),puo=r(qS," or "),JN=n(qS,"A",{href:!0});var ugt=s(JN);_uo=r(ugt,"BertTokenizerFast"),ugt.forEach(t),uuo=r(qS," (ViLT model)"),qS.forEach(t),buo=i(S),Xs=n(S,"LI",{});var jS=s(Xs);ide=n(jS,"STRONG",{});var bgt=s(ide);vuo=r(bgt,"visual_bert"),bgt.forEach(t),Fuo=r(jS," \u2014 "),YN=n(jS,"A",{href:!0});var vgt=s(YN);Tuo=r(vgt,"BertTokenizer"),vgt.forEach(t),Muo=r(jS," or "),KN=n(jS,"A",{href:!0});var Fgt=s(KN);Euo=r(Fgt,"BertTokenizerFast"),Fgt.forEach(t),Cuo=r(jS," (VisualBERT model)"),jS.forEach(t),wuo=i(S),kh=n(S,"LI",{});var k9e=s(kh);dde=n(k9e,"STRONG",{});var Tgt=s(dde);Auo=r(Tgt,"wav2vec2"),Tgt.forEach(t),Luo=r(k9e," \u2014 "),ZN=n(k9e,"A",{href:!0});var Mgt=s(ZN);yuo=r(Mgt,"Wav2Vec2CTCTokenizer"),Mgt.forEach(t),xuo=r(k9e," (Wav2Vec2 model)"),k9e.forEach(t),$uo=i(S),Sh=n(S,"LI",{});var S9e=s(Sh);cde=n(S9e,"STRONG",{});var Egt=s(cde);kuo=r(Egt,"wav2vec2-conformer"),Egt.forEach(t),Suo=r(S9e," \u2014 "),eq=n(S9e,"A",{href:!0});var Cgt=s(eq);Ruo=r(Cgt,"Wav2Vec2CTCTokenizer"),Cgt.forEach(t),Puo=r(S9e," (Wav2Vec2-Conformer model)"),S9e.forEach(t),Buo=i(S),Rh=n(S,"LI",{});var R9e=s(Rh);fde=n(R9e,"STRONG",{});var wgt=s(fde);Iuo=r(wgt,"wav2vec2_phoneme"),wgt.forEach(t),Nuo=r(R9e," \u2014 "),oq=n(R9e,"A",{href:!0});var Agt=s(oq);quo=r(Agt,"Wav2Vec2PhonemeCTCTokenizer"),Agt.forEach(t),juo=r(R9e," (Wav2Vec2Phoneme model)"),R9e.forEach(t),Duo=i(S),zs=n(S,"LI",{});var DS=s(zs);mde=n(DS,"STRONG",{});var Lgt=s(mde);Guo=r(Lgt,"xglm"),Lgt.forEach(t),Ouo=r(DS," \u2014 "),rq=n(DS,"A",{href:!0});var ygt=s(rq);Vuo=r(ygt,"XGLMTokenizer"),ygt.forEach(t),Xuo=r(DS," or "),tq=n(DS,"A",{href:!0});var xgt=s(tq);zuo=r(xgt,"XGLMTokenizerFast"),xgt.forEach(t),Wuo=r(DS," (XGLM model)"),DS.forEach(t),Quo=i(S),Ph=n(S,"LI",{});var P9e=s(Ph);gde=n(P9e,"STRONG",{});var $gt=s(gde);Huo=r($gt,"xlm"),$gt.forEach(t),Uuo=r(P9e," \u2014 "),aq=n(P9e,"A",{href:!0});var kgt=s(aq);Juo=r(kgt,"XLMTokenizer"),kgt.forEach(t),Yuo=r(P9e," (XLM model)"),P9e.forEach(t),Kuo=i(S),Bh=n(S,"LI",{});var B9e=s(Bh);hde=n(B9e,"STRONG",{});var Sgt=s(hde);Zuo=r(Sgt,"xlm-prophetnet"),Sgt.forEach(t),e1o=r(B9e," \u2014 "),nq=n(B9e,"A",{href:!0});var Rgt=s(nq);o1o=r(Rgt,"XLMProphetNetTokenizer"),Rgt.forEach(t),r1o=r(B9e," (XLM-ProphetNet model)"),B9e.forEach(t),t1o=i(S),Ws=n(S,"LI",{});var GS=s(Ws);pde=n(GS,"STRONG",{});var Pgt=s(pde);a1o=r(Pgt,"xlm-roberta"),Pgt.forEach(t),n1o=r(GS," \u2014 "),sq=n(GS,"A",{href:!0});var Bgt=s(sq);s1o=r(Bgt,"XLMRobertaTokenizer"),Bgt.forEach(t),l1o=r(GS," or "),lq=n(GS,"A",{href:!0});var Igt=s(lq);i1o=r(Igt,"XLMRobertaTokenizerFast"),Igt.forEach(t),d1o=r(GS," (XLM-RoBERTa model)"),GS.forEach(t),c1o=i(S),Qs=n(S,"LI",{});var OS=s(Qs);_de=n(OS,"STRONG",{});var Ngt=s(_de);f1o=r(Ngt,"xlm-roberta-xl"),Ngt.forEach(t),m1o=r(OS," \u2014 "),iq=n(OS,"A",{href:!0});var qgt=s(iq);g1o=r(qgt,"RobertaTokenizer"),qgt.forEach(t),h1o=r(OS," or "),dq=n(OS,"A",{href:!0});var jgt=s(dq);p1o=r(jgt,"RobertaTokenizerFast"),jgt.forEach(t),_1o=r(OS," (XLM-RoBERTa-XL model)"),OS.forEach(t),u1o=i(S),Hs=n(S,"LI",{});var VS=s(Hs);ude=n(VS,"STRONG",{});var Dgt=s(ude);b1o=r(Dgt,"xlnet"),Dgt.forEach(t),v1o=r(VS," \u2014 "),cq=n(VS,"A",{href:!0});var Ggt=s(cq);F1o=r(Ggt,"XLNetTokenizer"),Ggt.forEach(t),T1o=r(VS," or "),fq=n(VS,"A",{href:!0});var Ogt=s(fq);M1o=r(Ogt,"XLNetTokenizerFast"),Ogt.forEach(t),E1o=r(VS," (XLNet model)"),VS.forEach(t),C1o=i(S),Us=n(S,"LI",{});var XS=s(Us);bde=n(XS,"STRONG",{});var Vgt=s(bde);w1o=r(Vgt,"yoso"),Vgt.forEach(t),A1o=r(XS," \u2014 "),mq=n(XS,"A",{href:!0});var Xgt=s(mq);L1o=r(Xgt,"AlbertTokenizer"),Xgt.forEach(t),y1o=r(XS," or "),gq=n(XS,"A",{href:!0});var zgt=s(gq);x1o=r(zgt,"AlbertTokenizerFast"),zgt.forEach(t),$1o=r(XS," (YOSO model)"),XS.forEach(t),S.forEach(t),k1o=i(rl),T(Ih.$$.fragment,rl),rl.forEach(t),S1o=i(ol),Nh=n(ol,"DIV",{class:!0});var lQe=s(Nh);T($y.$$.fragment,lQe),R1o=i(lQe),vde=n(lQe,"P",{});var Wgt=s(vde);P1o=r(Wgt,"Register a new tokenizer in this mapping."),Wgt.forEach(t),lQe.forEach(t),ol.forEach(t),sze=i(f),Di=n(f,"H2",{class:!0});var iQe=s(Di);qh=n(iQe,"A",{id:!0,class:!0,href:!0});var Qgt=s(qh);Fde=n(Qgt,"SPAN",{});var Hgt=s(Fde);T(ky.$$.fragment,Hgt),Hgt.forEach(t),Qgt.forEach(t),B1o=i(iQe),Tde=n(iQe,"SPAN",{});var Ugt=s(Tde);I1o=r(Ugt,"AutoFeatureExtractor"),Ugt.forEach(t),iQe.forEach(t),lze=i(f),xo=n(f,"DIV",{class:!0});var tl=s(xo);T(Sy.$$.fragment,tl),N1o=i(tl),Ry=n(tl,"P",{});var dQe=s(Ry);q1o=r(dQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hq=n(dQe,"A",{href:!0});var Jgt=s(hq);j1o=r(Jgt,"AutoFeatureExtractor.from_pretrained()"),Jgt.forEach(t),D1o=r(dQe," class method."),dQe.forEach(t),G1o=i(tl),Py=n(tl,"P",{});var cQe=s(Py);O1o=r(cQe,"This class cannot be instantiated directly using "),Mde=n(cQe,"CODE",{});var Ygt=s(Mde);V1o=r(Ygt,"__init__()"),Ygt.forEach(t),X1o=r(cQe," (throws an error)."),cQe.forEach(t),z1o=i(tl),Ue=n(tl,"DIV",{class:!0});var na=s(Ue);T(By.$$.fragment,na),W1o=i(na),Ede=n(na,"P",{});var Kgt=s(Ede);Q1o=r(Kgt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Kgt.forEach(t),H1o=i(na),Ia=n(na,"P",{});var FA=s(Ia);U1o=r(FA,"The feature extractor class to instantiate is selected based on the "),Cde=n(FA,"CODE",{});var Zgt=s(Cde);J1o=r(Zgt,"model_type"),Zgt.forEach(t),Y1o=r(FA,` property of the config object
(either passed as an argument or loaded from `),wde=n(FA,"CODE",{});var eht=s(wde);K1o=r(eht,"pretrained_model_name_or_path"),eht.forEach(t),Z1o=r(FA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ade=n(FA,"CODE",{});var oht=s(Ade);e7o=r(oht,"pretrained_model_name_or_path"),oht.forEach(t),o7o=r(FA,":"),FA.forEach(t),r7o=i(na),J=n(na,"UL",{});var K=s(J);jh=n(K,"LI",{});var I9e=s(jh);Lde=n(I9e,"STRONG",{});var rht=s(Lde);t7o=r(rht,"beit"),rht.forEach(t),a7o=r(I9e," \u2014 "),pq=n(I9e,"A",{href:!0});var tht=s(pq);n7o=r(tht,"BeitFeatureExtractor"),tht.forEach(t),s7o=r(I9e," (BEiT model)"),I9e.forEach(t),l7o=i(K),Dh=n(K,"LI",{});var N9e=s(Dh);yde=n(N9e,"STRONG",{});var aht=s(yde);i7o=r(aht,"clip"),aht.forEach(t),d7o=r(N9e," \u2014 "),_q=n(N9e,"A",{href:!0});var nht=s(_q);c7o=r(nht,"CLIPFeatureExtractor"),nht.forEach(t),f7o=r(N9e," (CLIP model)"),N9e.forEach(t),m7o=i(K),Gh=n(K,"LI",{});var q9e=s(Gh);xde=n(q9e,"STRONG",{});var sht=s(xde);g7o=r(sht,"convnext"),sht.forEach(t),h7o=r(q9e," \u2014 "),uq=n(q9e,"A",{href:!0});var lht=s(uq);p7o=r(lht,"ConvNextFeatureExtractor"),lht.forEach(t),_7o=r(q9e," (ConvNeXT model)"),q9e.forEach(t),u7o=i(K),Oh=n(K,"LI",{});var j9e=s(Oh);$de=n(j9e,"STRONG",{});var iht=s($de);b7o=r(iht,"cvt"),iht.forEach(t),v7o=r(j9e," \u2014 "),bq=n(j9e,"A",{href:!0});var dht=s(bq);F7o=r(dht,"ConvNextFeatureExtractor"),dht.forEach(t),T7o=r(j9e," (CvT model)"),j9e.forEach(t),M7o=i(K),Vh=n(K,"LI",{});var D9e=s(Vh);kde=n(D9e,"STRONG",{});var cht=s(kde);E7o=r(cht,"data2vec-audio"),cht.forEach(t),C7o=r(D9e," \u2014 "),vq=n(D9e,"A",{href:!0});var fht=s(vq);w7o=r(fht,"Wav2Vec2FeatureExtractor"),fht.forEach(t),A7o=r(D9e," (Data2VecAudio model)"),D9e.forEach(t),L7o=i(K),Xh=n(K,"LI",{});var G9e=s(Xh);Sde=n(G9e,"STRONG",{});var mht=s(Sde);y7o=r(mht,"data2vec-vision"),mht.forEach(t),x7o=r(G9e," \u2014 "),Fq=n(G9e,"A",{href:!0});var ght=s(Fq);$7o=r(ght,"BeitFeatureExtractor"),ght.forEach(t),k7o=r(G9e," (Data2VecVision model)"),G9e.forEach(t),S7o=i(K),zh=n(K,"LI",{});var O9e=s(zh);Rde=n(O9e,"STRONG",{});var hht=s(Rde);R7o=r(hht,"deit"),hht.forEach(t),P7o=r(O9e," \u2014 "),Tq=n(O9e,"A",{href:!0});var pht=s(Tq);B7o=r(pht,"DeiTFeatureExtractor"),pht.forEach(t),I7o=r(O9e," (DeiT model)"),O9e.forEach(t),N7o=i(K),Wh=n(K,"LI",{});var V9e=s(Wh);Pde=n(V9e,"STRONG",{});var _ht=s(Pde);q7o=r(_ht,"detr"),_ht.forEach(t),j7o=r(V9e," \u2014 "),Mq=n(V9e,"A",{href:!0});var uht=s(Mq);D7o=r(uht,"DetrFeatureExtractor"),uht.forEach(t),G7o=r(V9e," (DETR model)"),V9e.forEach(t),O7o=i(K),Qh=n(K,"LI",{});var X9e=s(Qh);Bde=n(X9e,"STRONG",{});var bht=s(Bde);V7o=r(bht,"dpt"),bht.forEach(t),X7o=r(X9e," \u2014 "),Eq=n(X9e,"A",{href:!0});var vht=s(Eq);z7o=r(vht,"DPTFeatureExtractor"),vht.forEach(t),W7o=r(X9e," (DPT model)"),X9e.forEach(t),Q7o=i(K),Hh=n(K,"LI",{});var z9e=s(Hh);Ide=n(z9e,"STRONG",{});var Fht=s(Ide);H7o=r(Fht,"flava"),Fht.forEach(t),U7o=r(z9e," \u2014 "),Cq=n(z9e,"A",{href:!0});var Tht=s(Cq);J7o=r(Tht,"FlavaFeatureExtractor"),Tht.forEach(t),Y7o=r(z9e," (FLAVA model)"),z9e.forEach(t),K7o=i(K),Uh=n(K,"LI",{});var W9e=s(Uh);Nde=n(W9e,"STRONG",{});var Mht=s(Nde);Z7o=r(Mht,"glpn"),Mht.forEach(t),e2o=r(W9e," \u2014 "),wq=n(W9e,"A",{href:!0});var Eht=s(wq);o2o=r(Eht,"GLPNFeatureExtractor"),Eht.forEach(t),r2o=r(W9e," (GLPN model)"),W9e.forEach(t),t2o=i(K),Jh=n(K,"LI",{});var Q9e=s(Jh);qde=n(Q9e,"STRONG",{});var Cht=s(qde);a2o=r(Cht,"groupvit"),Cht.forEach(t),n2o=r(Q9e," \u2014 "),Aq=n(Q9e,"A",{href:!0});var wht=s(Aq);s2o=r(wht,"CLIPFeatureExtractor"),wht.forEach(t),l2o=r(Q9e," (GroupViT model)"),Q9e.forEach(t),i2o=i(K),Yh=n(K,"LI",{});var H9e=s(Yh);jde=n(H9e,"STRONG",{});var Aht=s(jde);d2o=r(Aht,"hubert"),Aht.forEach(t),c2o=r(H9e," \u2014 "),Lq=n(H9e,"A",{href:!0});var Lht=s(Lq);f2o=r(Lht,"Wav2Vec2FeatureExtractor"),Lht.forEach(t),m2o=r(H9e," (Hubert model)"),H9e.forEach(t),g2o=i(K),Kh=n(K,"LI",{});var U9e=s(Kh);Dde=n(U9e,"STRONG",{});var yht=s(Dde);h2o=r(yht,"imagegpt"),yht.forEach(t),p2o=r(U9e," \u2014 "),yq=n(U9e,"A",{href:!0});var xht=s(yq);_2o=r(xht,"ImageGPTFeatureExtractor"),xht.forEach(t),u2o=r(U9e," (ImageGPT model)"),U9e.forEach(t),b2o=i(K),Zh=n(K,"LI",{});var J9e=s(Zh);Gde=n(J9e,"STRONG",{});var $ht=s(Gde);v2o=r($ht,"layoutlmv2"),$ht.forEach(t),F2o=r(J9e," \u2014 "),xq=n(J9e,"A",{href:!0});var kht=s(xq);T2o=r(kht,"LayoutLMv2FeatureExtractor"),kht.forEach(t),M2o=r(J9e," (LayoutLMv2 model)"),J9e.forEach(t),E2o=i(K),ep=n(K,"LI",{});var Y9e=s(ep);Ode=n(Y9e,"STRONG",{});var Sht=s(Ode);C2o=r(Sht,"layoutlmv3"),Sht.forEach(t),w2o=r(Y9e," \u2014 "),$q=n(Y9e,"A",{href:!0});var Rht=s($q);A2o=r(Rht,"LayoutLMv3FeatureExtractor"),Rht.forEach(t),L2o=r(Y9e," (LayoutLMv3 model)"),Y9e.forEach(t),y2o=i(K),op=n(K,"LI",{});var K9e=s(op);Vde=n(K9e,"STRONG",{});var Pht=s(Vde);x2o=r(Pht,"levit"),Pht.forEach(t),$2o=r(K9e," \u2014 "),kq=n(K9e,"A",{href:!0});var Bht=s(kq);k2o=r(Bht,"LevitFeatureExtractor"),Bht.forEach(t),S2o=r(K9e," (LeViT model)"),K9e.forEach(t),R2o=i(K),rp=n(K,"LI",{});var Z9e=s(rp);Xde=n(Z9e,"STRONG",{});var Iht=s(Xde);P2o=r(Iht,"maskformer"),Iht.forEach(t),B2o=r(Z9e," \u2014 "),Sq=n(Z9e,"A",{href:!0});var Nht=s(Sq);I2o=r(Nht,"MaskFormerFeatureExtractor"),Nht.forEach(t),N2o=r(Z9e," (MaskFormer model)"),Z9e.forEach(t),q2o=i(K),tp=n(K,"LI",{});var exe=s(tp);zde=n(exe,"STRONG",{});var qht=s(zde);j2o=r(qht,"mctct"),qht.forEach(t),D2o=r(exe," \u2014 "),Rq=n(exe,"A",{href:!0});var jht=s(Rq);G2o=r(jht,"MCTCTFeatureExtractor"),jht.forEach(t),O2o=r(exe," (M-CTC-T model)"),exe.forEach(t),V2o=i(K),ap=n(K,"LI",{});var oxe=s(ap);Wde=n(oxe,"STRONG",{});var Dht=s(Wde);X2o=r(Dht,"mobilevit"),Dht.forEach(t),z2o=r(oxe," \u2014 "),Pq=n(oxe,"A",{href:!0});var Ght=s(Pq);W2o=r(Ght,"MobileViTFeatureExtractor"),Ght.forEach(t),Q2o=r(oxe," (MobileViT model)"),oxe.forEach(t),H2o=i(K),np=n(K,"LI",{});var rxe=s(np);Qde=n(rxe,"STRONG",{});var Oht=s(Qde);U2o=r(Oht,"owlvit"),Oht.forEach(t),J2o=r(rxe," \u2014 "),Bq=n(rxe,"A",{href:!0});var Vht=s(Bq);Y2o=r(Vht,"OwlViTFeatureExtractor"),Vht.forEach(t),K2o=r(rxe," (OWL-ViT model)"),rxe.forEach(t),Z2o=i(K),sp=n(K,"LI",{});var txe=s(sp);Hde=n(txe,"STRONG",{});var Xht=s(Hde);ebo=r(Xht,"perceiver"),Xht.forEach(t),obo=r(txe," \u2014 "),Iq=n(txe,"A",{href:!0});var zht=s(Iq);rbo=r(zht,"PerceiverFeatureExtractor"),zht.forEach(t),tbo=r(txe," (Perceiver model)"),txe.forEach(t),abo=i(K),lp=n(K,"LI",{});var axe=s(lp);Ude=n(axe,"STRONG",{});var Wht=s(Ude);nbo=r(Wht,"poolformer"),Wht.forEach(t),sbo=r(axe," \u2014 "),Nq=n(axe,"A",{href:!0});var Qht=s(Nq);lbo=r(Qht,"PoolFormerFeatureExtractor"),Qht.forEach(t),ibo=r(axe," (PoolFormer model)"),axe.forEach(t),dbo=i(K),ip=n(K,"LI",{});var nxe=s(ip);Jde=n(nxe,"STRONG",{});var Hht=s(Jde);cbo=r(Hht,"regnet"),Hht.forEach(t),fbo=r(nxe," \u2014 "),qq=n(nxe,"A",{href:!0});var Uht=s(qq);mbo=r(Uht,"ConvNextFeatureExtractor"),Uht.forEach(t),gbo=r(nxe," (RegNet model)"),nxe.forEach(t),hbo=i(K),dp=n(K,"LI",{});var sxe=s(dp);Yde=n(sxe,"STRONG",{});var Jht=s(Yde);pbo=r(Jht,"resnet"),Jht.forEach(t),_bo=r(sxe," \u2014 "),jq=n(sxe,"A",{href:!0});var Yht=s(jq);ubo=r(Yht,"ConvNextFeatureExtractor"),Yht.forEach(t),bbo=r(sxe," (ResNet model)"),sxe.forEach(t),vbo=i(K),cp=n(K,"LI",{});var lxe=s(cp);Kde=n(lxe,"STRONG",{});var Kht=s(Kde);Fbo=r(Kht,"segformer"),Kht.forEach(t),Tbo=r(lxe," \u2014 "),Dq=n(lxe,"A",{href:!0});var Zht=s(Dq);Mbo=r(Zht,"SegformerFeatureExtractor"),Zht.forEach(t),Ebo=r(lxe," (SegFormer model)"),lxe.forEach(t),Cbo=i(K),fp=n(K,"LI",{});var ixe=s(fp);Zde=n(ixe,"STRONG",{});var ept=s(Zde);wbo=r(ept,"speech_to_text"),ept.forEach(t),Abo=r(ixe," \u2014 "),Gq=n(ixe,"A",{href:!0});var opt=s(Gq);Lbo=r(opt,"Speech2TextFeatureExtractor"),opt.forEach(t),ybo=r(ixe," (Speech2Text model)"),ixe.forEach(t),xbo=i(K),mp=n(K,"LI",{});var dxe=s(mp);ece=n(dxe,"STRONG",{});var rpt=s(ece);$bo=r(rpt,"swin"),rpt.forEach(t),kbo=r(dxe," \u2014 "),Oq=n(dxe,"A",{href:!0});var tpt=s(Oq);Sbo=r(tpt,"ViTFeatureExtractor"),tpt.forEach(t),Rbo=r(dxe," (Swin Transformer model)"),dxe.forEach(t),Pbo=i(K),gp=n(K,"LI",{});var cxe=s(gp);oce=n(cxe,"STRONG",{});var apt=s(oce);Bbo=r(apt,"van"),apt.forEach(t),Ibo=r(cxe," \u2014 "),Vq=n(cxe,"A",{href:!0});var npt=s(Vq);Nbo=r(npt,"ConvNextFeatureExtractor"),npt.forEach(t),qbo=r(cxe," (VAN model)"),cxe.forEach(t),jbo=i(K),hp=n(K,"LI",{});var fxe=s(hp);rce=n(fxe,"STRONG",{});var spt=s(rce);Dbo=r(spt,"vilt"),spt.forEach(t),Gbo=r(fxe," \u2014 "),Xq=n(fxe,"A",{href:!0});var lpt=s(Xq);Obo=r(lpt,"ViltFeatureExtractor"),lpt.forEach(t),Vbo=r(fxe," (ViLT model)"),fxe.forEach(t),Xbo=i(K),pp=n(K,"LI",{});var mxe=s(pp);tce=n(mxe,"STRONG",{});var ipt=s(tce);zbo=r(ipt,"vit"),ipt.forEach(t),Wbo=r(mxe," \u2014 "),zq=n(mxe,"A",{href:!0});var dpt=s(zq);Qbo=r(dpt,"ViTFeatureExtractor"),dpt.forEach(t),Hbo=r(mxe," (ViT model)"),mxe.forEach(t),Ubo=i(K),_p=n(K,"LI",{});var gxe=s(_p);ace=n(gxe,"STRONG",{});var cpt=s(ace);Jbo=r(cpt,"vit_mae"),cpt.forEach(t),Ybo=r(gxe," \u2014 "),Wq=n(gxe,"A",{href:!0});var fpt=s(Wq);Kbo=r(fpt,"ViTFeatureExtractor"),fpt.forEach(t),Zbo=r(gxe," (ViTMAE model)"),gxe.forEach(t),evo=i(K),up=n(K,"LI",{});var hxe=s(up);nce=n(hxe,"STRONG",{});var mpt=s(nce);ovo=r(mpt,"wav2vec2"),mpt.forEach(t),rvo=r(hxe," \u2014 "),Qq=n(hxe,"A",{href:!0});var gpt=s(Qq);tvo=r(gpt,"Wav2Vec2FeatureExtractor"),gpt.forEach(t),avo=r(hxe," (Wav2Vec2 model)"),hxe.forEach(t),nvo=i(K),bp=n(K,"LI",{});var pxe=s(bp);sce=n(pxe,"STRONG",{});var hpt=s(sce);svo=r(hpt,"wav2vec2-conformer"),hpt.forEach(t),lvo=r(pxe," \u2014 "),Hq=n(pxe,"A",{href:!0});var ppt=s(Hq);ivo=r(ppt,"Wav2Vec2FeatureExtractor"),ppt.forEach(t),dvo=r(pxe," (Wav2Vec2-Conformer model)"),pxe.forEach(t),cvo=i(K),vp=n(K,"LI",{});var _xe=s(vp);lce=n(_xe,"STRONG",{});var _pt=s(lce);fvo=r(_pt,"yolos"),_pt.forEach(t),mvo=r(_xe," \u2014 "),Uq=n(_xe,"A",{href:!0});var upt=s(Uq);gvo=r(upt,"YolosFeatureExtractor"),upt.forEach(t),hvo=r(_xe," (YOLOS model)"),_xe.forEach(t),K.forEach(t),pvo=i(na),T(Fp.$$.fragment,na),_vo=i(na),T(Tp.$$.fragment,na),na.forEach(t),uvo=i(tl),Mp=n(tl,"DIV",{class:!0});var fQe=s(Mp);T(Iy.$$.fragment,fQe),bvo=i(fQe),ice=n(fQe,"P",{});var bpt=s(ice);vvo=r(bpt,"Register a new feature extractor for this class."),bpt.forEach(t),fQe.forEach(t),tl.forEach(t),ize=i(f),Gi=n(f,"H2",{class:!0});var mQe=s(Gi);Ep=n(mQe,"A",{id:!0,class:!0,href:!0});var vpt=s(Ep);dce=n(vpt,"SPAN",{});var Fpt=s(dce);T(Ny.$$.fragment,Fpt),Fpt.forEach(t),vpt.forEach(t),Fvo=i(mQe),cce=n(mQe,"SPAN",{});var Tpt=s(cce);Tvo=r(Tpt,"AutoProcessor"),Tpt.forEach(t),mQe.forEach(t),dze=i(f),$o=n(f,"DIV",{class:!0});var al=s($o);T(qy.$$.fragment,al),Mvo=i(al),jy=n(al,"P",{});var gQe=s(jy);Evo=r(gQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Jq=n(gQe,"A",{href:!0});var Mpt=s(Jq);Cvo=r(Mpt,"AutoProcessor.from_pretrained()"),Mpt.forEach(t),wvo=r(gQe," class method."),gQe.forEach(t),Avo=i(al),Dy=n(al,"P",{});var hQe=s(Dy);Lvo=r(hQe,"This class cannot be instantiated directly using "),fce=n(hQe,"CODE",{});var Ept=s(fce);yvo=r(Ept,"__init__()"),Ept.forEach(t),xvo=r(hQe," (throws an error)."),hQe.forEach(t),$vo=i(al),Je=n(al,"DIV",{class:!0});var sa=s(Je);T(Gy.$$.fragment,sa),kvo=i(sa),mce=n(sa,"P",{});var Cpt=s(mce);Svo=r(Cpt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Cpt.forEach(t),Rvo=i(sa),Oi=n(sa,"P",{});var lte=s(Oi);Pvo=r(lte,"The processor class to instantiate is selected based on the "),gce=n(lte,"CODE",{});var wpt=s(gce);Bvo=r(wpt,"model_type"),wpt.forEach(t),Ivo=r(lte,` property of the config object (either
passed as an argument or loaded from `),hce=n(lte,"CODE",{});var Apt=s(hce);Nvo=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),qvo=r(lte," if possible):"),lte.forEach(t),jvo=i(sa),fe=n(sa,"UL",{});var _e=s(fe);Cp=n(_e,"LI",{});var uxe=s(Cp);pce=n(uxe,"STRONG",{});var Lpt=s(pce);Dvo=r(Lpt,"clip"),Lpt.forEach(t),Gvo=r(uxe," \u2014 "),Yq=n(uxe,"A",{href:!0});var ypt=s(Yq);Ovo=r(ypt,"CLIPProcessor"),ypt.forEach(t),Vvo=r(uxe," (CLIP model)"),uxe.forEach(t),Xvo=i(_e),wp=n(_e,"LI",{});var bxe=s(wp);_ce=n(bxe,"STRONG",{});var xpt=s(_ce);zvo=r(xpt,"flava"),xpt.forEach(t),Wvo=r(bxe," \u2014 "),Kq=n(bxe,"A",{href:!0});var $pt=s(Kq);Qvo=r($pt,"FlavaProcessor"),$pt.forEach(t),Hvo=r(bxe," (FLAVA model)"),bxe.forEach(t),Uvo=i(_e),Ap=n(_e,"LI",{});var vxe=s(Ap);uce=n(vxe,"STRONG",{});var kpt=s(uce);Jvo=r(kpt,"groupvit"),kpt.forEach(t),Yvo=r(vxe," \u2014 "),Zq=n(vxe,"A",{href:!0});var Spt=s(Zq);Kvo=r(Spt,"CLIPProcessor"),Spt.forEach(t),Zvo=r(vxe," (GroupViT model)"),vxe.forEach(t),eFo=i(_e),Lp=n(_e,"LI",{});var Fxe=s(Lp);bce=n(Fxe,"STRONG",{});var Rpt=s(bce);oFo=r(Rpt,"layoutlmv2"),Rpt.forEach(t),rFo=r(Fxe," \u2014 "),ej=n(Fxe,"A",{href:!0});var Ppt=s(ej);tFo=r(Ppt,"LayoutLMv2Processor"),Ppt.forEach(t),aFo=r(Fxe," (LayoutLMv2 model)"),Fxe.forEach(t),nFo=i(_e),yp=n(_e,"LI",{});var Txe=s(yp);vce=n(Txe,"STRONG",{});var Bpt=s(vce);sFo=r(Bpt,"layoutlmv3"),Bpt.forEach(t),lFo=r(Txe," \u2014 "),oj=n(Txe,"A",{href:!0});var Ipt=s(oj);iFo=r(Ipt,"LayoutLMv3Processor"),Ipt.forEach(t),dFo=r(Txe," (LayoutLMv3 model)"),Txe.forEach(t),cFo=i(_e),xp=n(_e,"LI",{});var Mxe=s(xp);Fce=n(Mxe,"STRONG",{});var Npt=s(Fce);fFo=r(Npt,"layoutxlm"),Npt.forEach(t),mFo=r(Mxe," \u2014 "),rj=n(Mxe,"A",{href:!0});var qpt=s(rj);gFo=r(qpt,"LayoutXLMProcessor"),qpt.forEach(t),hFo=r(Mxe," (LayoutXLM model)"),Mxe.forEach(t),pFo=i(_e),$p=n(_e,"LI",{});var Exe=s($p);Tce=n(Exe,"STRONG",{});var jpt=s(Tce);_Fo=r(jpt,"owlvit"),jpt.forEach(t),uFo=r(Exe," \u2014 "),tj=n(Exe,"A",{href:!0});var Dpt=s(tj);bFo=r(Dpt,"OwlViTProcessor"),Dpt.forEach(t),vFo=r(Exe," (OWL-ViT model)"),Exe.forEach(t),FFo=i(_e),kp=n(_e,"LI",{});var Cxe=s(kp);Mce=n(Cxe,"STRONG",{});var Gpt=s(Mce);TFo=r(Gpt,"sew"),Gpt.forEach(t),MFo=r(Cxe," \u2014 "),aj=n(Cxe,"A",{href:!0});var Opt=s(aj);EFo=r(Opt,"Wav2Vec2Processor"),Opt.forEach(t),CFo=r(Cxe," (SEW model)"),Cxe.forEach(t),wFo=i(_e),Sp=n(_e,"LI",{});var wxe=s(Sp);Ece=n(wxe,"STRONG",{});var Vpt=s(Ece);AFo=r(Vpt,"sew-d"),Vpt.forEach(t),LFo=r(wxe," \u2014 "),nj=n(wxe,"A",{href:!0});var Xpt=s(nj);yFo=r(Xpt,"Wav2Vec2Processor"),Xpt.forEach(t),xFo=r(wxe," (SEW-D model)"),wxe.forEach(t),$Fo=i(_e),Rp=n(_e,"LI",{});var Axe=s(Rp);Cce=n(Axe,"STRONG",{});var zpt=s(Cce);kFo=r(zpt,"speech_to_text"),zpt.forEach(t),SFo=r(Axe," \u2014 "),sj=n(Axe,"A",{href:!0});var Wpt=s(sj);RFo=r(Wpt,"Speech2TextProcessor"),Wpt.forEach(t),PFo=r(Axe," (Speech2Text model)"),Axe.forEach(t),BFo=i(_e),Pp=n(_e,"LI",{});var Lxe=s(Pp);wce=n(Lxe,"STRONG",{});var Qpt=s(wce);IFo=r(Qpt,"speech_to_text_2"),Qpt.forEach(t),NFo=r(Lxe," \u2014 "),lj=n(Lxe,"A",{href:!0});var Hpt=s(lj);qFo=r(Hpt,"Speech2Text2Processor"),Hpt.forEach(t),jFo=r(Lxe," (Speech2Text2 model)"),Lxe.forEach(t),DFo=i(_e),Bp=n(_e,"LI",{});var yxe=s(Bp);Ace=n(yxe,"STRONG",{});var Upt=s(Ace);GFo=r(Upt,"trocr"),Upt.forEach(t),OFo=r(yxe," \u2014 "),ij=n(yxe,"A",{href:!0});var Jpt=s(ij);VFo=r(Jpt,"TrOCRProcessor"),Jpt.forEach(t),XFo=r(yxe," (TrOCR model)"),yxe.forEach(t),zFo=i(_e),Ip=n(_e,"LI",{});var xxe=s(Ip);Lce=n(xxe,"STRONG",{});var Ypt=s(Lce);WFo=r(Ypt,"unispeech"),Ypt.forEach(t),QFo=r(xxe," \u2014 "),dj=n(xxe,"A",{href:!0});var Kpt=s(dj);HFo=r(Kpt,"Wav2Vec2Processor"),Kpt.forEach(t),UFo=r(xxe," (UniSpeech model)"),xxe.forEach(t),JFo=i(_e),Np=n(_e,"LI",{});var $xe=s(Np);yce=n($xe,"STRONG",{});var Zpt=s(yce);YFo=r(Zpt,"unispeech-sat"),Zpt.forEach(t),KFo=r($xe," \u2014 "),cj=n($xe,"A",{href:!0});var e_t=s(cj);ZFo=r(e_t,"Wav2Vec2Processor"),e_t.forEach(t),e6o=r($xe," (UniSpeechSat model)"),$xe.forEach(t),o6o=i(_e),qp=n(_e,"LI",{});var kxe=s(qp);xce=n(kxe,"STRONG",{});var o_t=s(xce);r6o=r(o_t,"vilt"),o_t.forEach(t),t6o=r(kxe," \u2014 "),fj=n(kxe,"A",{href:!0});var r_t=s(fj);a6o=r(r_t,"ViltProcessor"),r_t.forEach(t),n6o=r(kxe," (ViLT model)"),kxe.forEach(t),s6o=i(_e),jp=n(_e,"LI",{});var Sxe=s(jp);$ce=n(Sxe,"STRONG",{});var t_t=s($ce);l6o=r(t_t,"vision-text-dual-encoder"),t_t.forEach(t),i6o=r(Sxe," \u2014 "),mj=n(Sxe,"A",{href:!0});var a_t=s(mj);d6o=r(a_t,"VisionTextDualEncoderProcessor"),a_t.forEach(t),c6o=r(Sxe," (VisionTextDualEncoder model)"),Sxe.forEach(t),f6o=i(_e),Dp=n(_e,"LI",{});var Rxe=s(Dp);kce=n(Rxe,"STRONG",{});var n_t=s(kce);m6o=r(n_t,"wav2vec2"),n_t.forEach(t),g6o=r(Rxe," \u2014 "),gj=n(Rxe,"A",{href:!0});var s_t=s(gj);h6o=r(s_t,"Wav2Vec2Processor"),s_t.forEach(t),p6o=r(Rxe," (Wav2Vec2 model)"),Rxe.forEach(t),_6o=i(_e),Gp=n(_e,"LI",{});var Pxe=s(Gp);Sce=n(Pxe,"STRONG",{});var l_t=s(Sce);u6o=r(l_t,"wav2vec2-conformer"),l_t.forEach(t),b6o=r(Pxe," \u2014 "),hj=n(Pxe,"A",{href:!0});var i_t=s(hj);v6o=r(i_t,"Wav2Vec2Processor"),i_t.forEach(t),F6o=r(Pxe," (Wav2Vec2-Conformer model)"),Pxe.forEach(t),T6o=i(_e),Op=n(_e,"LI",{});var Bxe=s(Op);Rce=n(Bxe,"STRONG",{});var d_t=s(Rce);M6o=r(d_t,"wavlm"),d_t.forEach(t),E6o=r(Bxe," \u2014 "),pj=n(Bxe,"A",{href:!0});var c_t=s(pj);C6o=r(c_t,"Wav2Vec2Processor"),c_t.forEach(t),w6o=r(Bxe," (WavLM model)"),Bxe.forEach(t),_e.forEach(t),A6o=i(sa),T(Vp.$$.fragment,sa),L6o=i(sa),T(Xp.$$.fragment,sa),sa.forEach(t),y6o=i(al),zp=n(al,"DIV",{class:!0});var pQe=s(zp);T(Oy.$$.fragment,pQe),x6o=i(pQe),Pce=n(pQe,"P",{});var f_t=s(Pce);$6o=r(f_t,"Register a new processor for this class."),f_t.forEach(t),pQe.forEach(t),al.forEach(t),cze=i(f),Vi=n(f,"H2",{class:!0});var _Qe=s(Vi);Wp=n(_Qe,"A",{id:!0,class:!0,href:!0});var m_t=s(Wp);Bce=n(m_t,"SPAN",{});var g_t=s(Bce);T(Vy.$$.fragment,g_t),g_t.forEach(t),m_t.forEach(t),k6o=i(_Qe),Ice=n(_Qe,"SPAN",{});var h_t=s(Ice);S6o=r(h_t,"AutoModel"),h_t.forEach(t),_Qe.forEach(t),fze=i(f),ko=n(f,"DIV",{class:!0});var nl=s(ko);T(Xy.$$.fragment,nl),R6o=i(nl),Xi=n(nl,"P",{});var ite=s(Xi);P6o=r(ite,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_j=n(ite,"A",{href:!0});var p_t=s(_j);B6o=r(p_t,"from_pretrained()"),p_t.forEach(t),I6o=r(ite," class method or the "),uj=n(ite,"A",{href:!0});var __t=s(uj);N6o=r(__t,"from_config()"),__t.forEach(t),q6o=r(ite,` class
method.`),ite.forEach(t),j6o=i(nl),zy=n(nl,"P",{});var uQe=s(zy);D6o=r(uQe,"This class cannot be instantiated directly using "),Nce=n(uQe,"CODE",{});var u_t=s(Nce);G6o=r(u_t,"__init__()"),u_t.forEach(t),O6o=r(uQe," (throws an error)."),uQe.forEach(t),V6o=i(nl),it=n(nl,"DIV",{class:!0});var TA=s(it);T(Wy.$$.fragment,TA),X6o=i(TA),qce=n(TA,"P",{});var b_t=s(qce);z6o=r(b_t,"Instantiates one of the base model classes of the library from a configuration."),b_t.forEach(t),W6o=i(TA),zi=n(TA,"P",{});var dte=s(zi);Q6o=r(dte,`Note:
Loading a model from its configuration file does `),jce=n(dte,"STRONG",{});var v_t=s(jce);H6o=r(v_t,"not"),v_t.forEach(t),U6o=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bj=n(dte,"A",{href:!0});var F_t=s(bj);J6o=r(F_t,"from_pretrained()"),F_t.forEach(t),Y6o=r(dte," to load the model weights."),dte.forEach(t),K6o=i(TA),T(Qp.$$.fragment,TA),TA.forEach(t),Z6o=i(nl),Ye=n(nl,"DIV",{class:!0});var la=s(Ye);T(Qy.$$.fragment,la),eTo=i(la),Dce=n(la,"P",{});var T_t=s(Dce);oTo=r(T_t,"Instantiate one of the base model classes of the library from a pretrained model."),T_t.forEach(t),rTo=i(la),Na=n(la,"P",{});var MA=s(Na);tTo=r(MA,"The model class to instantiate is selected based on the "),Gce=n(MA,"CODE",{});var M_t=s(Gce);aTo=r(M_t,"model_type"),M_t.forEach(t),nTo=r(MA,` property of the config object (either
passed as an argument or loaded from `),Oce=n(MA,"CODE",{});var E_t=s(Oce);sTo=r(E_t,"pretrained_model_name_or_path"),E_t.forEach(t),lTo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(MA,"CODE",{});var C_t=s(Vce);iTo=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),dTo=r(MA,":"),MA.forEach(t),cTo=i(la),y=n(la,"UL",{});var x=s(y);Hp=n(x,"LI",{});var Ixe=s(Hp);Xce=n(Ixe,"STRONG",{});var w_t=s(Xce);fTo=r(w_t,"albert"),w_t.forEach(t),mTo=r(Ixe," \u2014 "),vj=n(Ixe,"A",{href:!0});var A_t=s(vj);gTo=r(A_t,"AlbertModel"),A_t.forEach(t),hTo=r(Ixe," (ALBERT model)"),Ixe.forEach(t),pTo=i(x),Up=n(x,"LI",{});var Nxe=s(Up);zce=n(Nxe,"STRONG",{});var L_t=s(zce);_To=r(L_t,"bart"),L_t.forEach(t),uTo=r(Nxe," \u2014 "),Fj=n(Nxe,"A",{href:!0});var y_t=s(Fj);bTo=r(y_t,"BartModel"),y_t.forEach(t),vTo=r(Nxe," (BART model)"),Nxe.forEach(t),FTo=i(x),Jp=n(x,"LI",{});var qxe=s(Jp);Wce=n(qxe,"STRONG",{});var x_t=s(Wce);TTo=r(x_t,"beit"),x_t.forEach(t),MTo=r(qxe," \u2014 "),Tj=n(qxe,"A",{href:!0});var $_t=s(Tj);ETo=r($_t,"BeitModel"),$_t.forEach(t),CTo=r(qxe," (BEiT model)"),qxe.forEach(t),wTo=i(x),Yp=n(x,"LI",{});var jxe=s(Yp);Qce=n(jxe,"STRONG",{});var k_t=s(Qce);ATo=r(k_t,"bert"),k_t.forEach(t),LTo=r(jxe," \u2014 "),Mj=n(jxe,"A",{href:!0});var S_t=s(Mj);yTo=r(S_t,"BertModel"),S_t.forEach(t),xTo=r(jxe," (BERT model)"),jxe.forEach(t),$To=i(x),Kp=n(x,"LI",{});var Dxe=s(Kp);Hce=n(Dxe,"STRONG",{});var R_t=s(Hce);kTo=r(R_t,"bert-generation"),R_t.forEach(t),STo=r(Dxe," \u2014 "),Ej=n(Dxe,"A",{href:!0});var P_t=s(Ej);RTo=r(P_t,"BertGenerationEncoder"),P_t.forEach(t),PTo=r(Dxe," (Bert Generation model)"),Dxe.forEach(t),BTo=i(x),Zp=n(x,"LI",{});var Gxe=s(Zp);Uce=n(Gxe,"STRONG",{});var B_t=s(Uce);ITo=r(B_t,"big_bird"),B_t.forEach(t),NTo=r(Gxe," \u2014 "),Cj=n(Gxe,"A",{href:!0});var I_t=s(Cj);qTo=r(I_t,"BigBirdModel"),I_t.forEach(t),jTo=r(Gxe," (BigBird model)"),Gxe.forEach(t),DTo=i(x),e_=n(x,"LI",{});var Oxe=s(e_);Jce=n(Oxe,"STRONG",{});var N_t=s(Jce);GTo=r(N_t,"bigbird_pegasus"),N_t.forEach(t),OTo=r(Oxe," \u2014 "),wj=n(Oxe,"A",{href:!0});var q_t=s(wj);VTo=r(q_t,"BigBirdPegasusModel"),q_t.forEach(t),XTo=r(Oxe," (BigBird-Pegasus model)"),Oxe.forEach(t),zTo=i(x),o_=n(x,"LI",{});var Vxe=s(o_);Yce=n(Vxe,"STRONG",{});var j_t=s(Yce);WTo=r(j_t,"blenderbot"),j_t.forEach(t),QTo=r(Vxe," \u2014 "),Aj=n(Vxe,"A",{href:!0});var D_t=s(Aj);HTo=r(D_t,"BlenderbotModel"),D_t.forEach(t),UTo=r(Vxe," (Blenderbot model)"),Vxe.forEach(t),JTo=i(x),r_=n(x,"LI",{});var Xxe=s(r_);Kce=n(Xxe,"STRONG",{});var G_t=s(Kce);YTo=r(G_t,"blenderbot-small"),G_t.forEach(t),KTo=r(Xxe," \u2014 "),Lj=n(Xxe,"A",{href:!0});var O_t=s(Lj);ZTo=r(O_t,"BlenderbotSmallModel"),O_t.forEach(t),eMo=r(Xxe," (BlenderbotSmall model)"),Xxe.forEach(t),oMo=i(x),t_=n(x,"LI",{});var zxe=s(t_);Zce=n(zxe,"STRONG",{});var V_t=s(Zce);rMo=r(V_t,"bloom"),V_t.forEach(t),tMo=r(zxe," \u2014 "),yj=n(zxe,"A",{href:!0});var X_t=s(yj);aMo=r(X_t,"BloomModel"),X_t.forEach(t),nMo=r(zxe," (BLOOM model)"),zxe.forEach(t),sMo=i(x),a_=n(x,"LI",{});var Wxe=s(a_);efe=n(Wxe,"STRONG",{});var z_t=s(efe);lMo=r(z_t,"camembert"),z_t.forEach(t),iMo=r(Wxe," \u2014 "),xj=n(Wxe,"A",{href:!0});var W_t=s(xj);dMo=r(W_t,"CamembertModel"),W_t.forEach(t),cMo=r(Wxe," (CamemBERT model)"),Wxe.forEach(t),fMo=i(x),n_=n(x,"LI",{});var Qxe=s(n_);ofe=n(Qxe,"STRONG",{});var Q_t=s(ofe);mMo=r(Q_t,"canine"),Q_t.forEach(t),gMo=r(Qxe," \u2014 "),$j=n(Qxe,"A",{href:!0});var H_t=s($j);hMo=r(H_t,"CanineModel"),H_t.forEach(t),pMo=r(Qxe," (CANINE model)"),Qxe.forEach(t),_Mo=i(x),s_=n(x,"LI",{});var Hxe=s(s_);rfe=n(Hxe,"STRONG",{});var U_t=s(rfe);uMo=r(U_t,"clip"),U_t.forEach(t),bMo=r(Hxe," \u2014 "),kj=n(Hxe,"A",{href:!0});var J_t=s(kj);vMo=r(J_t,"CLIPModel"),J_t.forEach(t),FMo=r(Hxe," (CLIP model)"),Hxe.forEach(t),TMo=i(x),l_=n(x,"LI",{});var Uxe=s(l_);tfe=n(Uxe,"STRONG",{});var Y_t=s(tfe);MMo=r(Y_t,"codegen"),Y_t.forEach(t),EMo=r(Uxe," \u2014 "),Sj=n(Uxe,"A",{href:!0});var K_t=s(Sj);CMo=r(K_t,"CodeGenModel"),K_t.forEach(t),wMo=r(Uxe," (CodeGen model)"),Uxe.forEach(t),AMo=i(x),i_=n(x,"LI",{});var Jxe=s(i_);afe=n(Jxe,"STRONG",{});var Z_t=s(afe);LMo=r(Z_t,"convbert"),Z_t.forEach(t),yMo=r(Jxe," \u2014 "),Rj=n(Jxe,"A",{href:!0});var eut=s(Rj);xMo=r(eut,"ConvBertModel"),eut.forEach(t),$Mo=r(Jxe," (ConvBERT model)"),Jxe.forEach(t),kMo=i(x),d_=n(x,"LI",{});var Yxe=s(d_);nfe=n(Yxe,"STRONG",{});var out=s(nfe);SMo=r(out,"convnext"),out.forEach(t),RMo=r(Yxe," \u2014 "),Pj=n(Yxe,"A",{href:!0});var rut=s(Pj);PMo=r(rut,"ConvNextModel"),rut.forEach(t),BMo=r(Yxe," (ConvNeXT model)"),Yxe.forEach(t),IMo=i(x),c_=n(x,"LI",{});var Kxe=s(c_);sfe=n(Kxe,"STRONG",{});var tut=s(sfe);NMo=r(tut,"ctrl"),tut.forEach(t),qMo=r(Kxe," \u2014 "),Bj=n(Kxe,"A",{href:!0});var aut=s(Bj);jMo=r(aut,"CTRLModel"),aut.forEach(t),DMo=r(Kxe," (CTRL model)"),Kxe.forEach(t),GMo=i(x),f_=n(x,"LI",{});var Zxe=s(f_);lfe=n(Zxe,"STRONG",{});var nut=s(lfe);OMo=r(nut,"cvt"),nut.forEach(t),VMo=r(Zxe," \u2014 "),Ij=n(Zxe,"A",{href:!0});var sut=s(Ij);XMo=r(sut,"CvtModel"),sut.forEach(t),zMo=r(Zxe," (CvT model)"),Zxe.forEach(t),WMo=i(x),m_=n(x,"LI",{});var e$e=s(m_);ife=n(e$e,"STRONG",{});var lut=s(ife);QMo=r(lut,"data2vec-audio"),lut.forEach(t),HMo=r(e$e," \u2014 "),Nj=n(e$e,"A",{href:!0});var iut=s(Nj);UMo=r(iut,"Data2VecAudioModel"),iut.forEach(t),JMo=r(e$e," (Data2VecAudio model)"),e$e.forEach(t),YMo=i(x),g_=n(x,"LI",{});var o$e=s(g_);dfe=n(o$e,"STRONG",{});var dut=s(dfe);KMo=r(dut,"data2vec-text"),dut.forEach(t),ZMo=r(o$e," \u2014 "),qj=n(o$e,"A",{href:!0});var cut=s(qj);e4o=r(cut,"Data2VecTextModel"),cut.forEach(t),o4o=r(o$e," (Data2VecText model)"),o$e.forEach(t),r4o=i(x),h_=n(x,"LI",{});var r$e=s(h_);cfe=n(r$e,"STRONG",{});var fut=s(cfe);t4o=r(fut,"data2vec-vision"),fut.forEach(t),a4o=r(r$e," \u2014 "),jj=n(r$e,"A",{href:!0});var mut=s(jj);n4o=r(mut,"Data2VecVisionModel"),mut.forEach(t),s4o=r(r$e," (Data2VecVision model)"),r$e.forEach(t),l4o=i(x),p_=n(x,"LI",{});var t$e=s(p_);ffe=n(t$e,"STRONG",{});var gut=s(ffe);i4o=r(gut,"deberta"),gut.forEach(t),d4o=r(t$e," \u2014 "),Dj=n(t$e,"A",{href:!0});var hut=s(Dj);c4o=r(hut,"DebertaModel"),hut.forEach(t),f4o=r(t$e," (DeBERTa model)"),t$e.forEach(t),m4o=i(x),__=n(x,"LI",{});var a$e=s(__);mfe=n(a$e,"STRONG",{});var put=s(mfe);g4o=r(put,"deberta-v2"),put.forEach(t),h4o=r(a$e," \u2014 "),Gj=n(a$e,"A",{href:!0});var _ut=s(Gj);p4o=r(_ut,"DebertaV2Model"),_ut.forEach(t),_4o=r(a$e," (DeBERTa-v2 model)"),a$e.forEach(t),u4o=i(x),u_=n(x,"LI",{});var n$e=s(u_);gfe=n(n$e,"STRONG",{});var uut=s(gfe);b4o=r(uut,"decision_transformer"),uut.forEach(t),v4o=r(n$e," \u2014 "),Oj=n(n$e,"A",{href:!0});var but=s(Oj);F4o=r(but,"DecisionTransformerModel"),but.forEach(t),T4o=r(n$e," (Decision Transformer model)"),n$e.forEach(t),M4o=i(x),b_=n(x,"LI",{});var s$e=s(b_);hfe=n(s$e,"STRONG",{});var vut=s(hfe);E4o=r(vut,"deit"),vut.forEach(t),C4o=r(s$e," \u2014 "),Vj=n(s$e,"A",{href:!0});var Fut=s(Vj);w4o=r(Fut,"DeiTModel"),Fut.forEach(t),A4o=r(s$e," (DeiT model)"),s$e.forEach(t),L4o=i(x),v_=n(x,"LI",{});var l$e=s(v_);pfe=n(l$e,"STRONG",{});var Tut=s(pfe);y4o=r(Tut,"detr"),Tut.forEach(t),x4o=r(l$e," \u2014 "),Xj=n(l$e,"A",{href:!0});var Mut=s(Xj);$4o=r(Mut,"DetrModel"),Mut.forEach(t),k4o=r(l$e," (DETR model)"),l$e.forEach(t),S4o=i(x),F_=n(x,"LI",{});var i$e=s(F_);_fe=n(i$e,"STRONG",{});var Eut=s(_fe);R4o=r(Eut,"distilbert"),Eut.forEach(t),P4o=r(i$e," \u2014 "),zj=n(i$e,"A",{href:!0});var Cut=s(zj);B4o=r(Cut,"DistilBertModel"),Cut.forEach(t),I4o=r(i$e," (DistilBERT model)"),i$e.forEach(t),N4o=i(x),T_=n(x,"LI",{});var d$e=s(T_);ufe=n(d$e,"STRONG",{});var wut=s(ufe);q4o=r(wut,"dpr"),wut.forEach(t),j4o=r(d$e," \u2014 "),Wj=n(d$e,"A",{href:!0});var Aut=s(Wj);D4o=r(Aut,"DPRQuestionEncoder"),Aut.forEach(t),G4o=r(d$e," (DPR model)"),d$e.forEach(t),O4o=i(x),M_=n(x,"LI",{});var c$e=s(M_);bfe=n(c$e,"STRONG",{});var Lut=s(bfe);V4o=r(Lut,"dpt"),Lut.forEach(t),X4o=r(c$e," \u2014 "),Qj=n(c$e,"A",{href:!0});var yut=s(Qj);z4o=r(yut,"DPTModel"),yut.forEach(t),W4o=r(c$e," (DPT model)"),c$e.forEach(t),Q4o=i(x),E_=n(x,"LI",{});var f$e=s(E_);vfe=n(f$e,"STRONG",{});var xut=s(vfe);H4o=r(xut,"electra"),xut.forEach(t),U4o=r(f$e," \u2014 "),Hj=n(f$e,"A",{href:!0});var $ut=s(Hj);J4o=r($ut,"ElectraModel"),$ut.forEach(t),Y4o=r(f$e," (ELECTRA model)"),f$e.forEach(t),K4o=i(x),C_=n(x,"LI",{});var m$e=s(C_);Ffe=n(m$e,"STRONG",{});var kut=s(Ffe);Z4o=r(kut,"flaubert"),kut.forEach(t),eEo=r(m$e," \u2014 "),Uj=n(m$e,"A",{href:!0});var Sut=s(Uj);oEo=r(Sut,"FlaubertModel"),Sut.forEach(t),rEo=r(m$e," (FlauBERT model)"),m$e.forEach(t),tEo=i(x),w_=n(x,"LI",{});var g$e=s(w_);Tfe=n(g$e,"STRONG",{});var Rut=s(Tfe);aEo=r(Rut,"flava"),Rut.forEach(t),nEo=r(g$e," \u2014 "),Jj=n(g$e,"A",{href:!0});var Put=s(Jj);sEo=r(Put,"FlavaModel"),Put.forEach(t),lEo=r(g$e," (FLAVA model)"),g$e.forEach(t),iEo=i(x),A_=n(x,"LI",{});var h$e=s(A_);Mfe=n(h$e,"STRONG",{});var But=s(Mfe);dEo=r(But,"fnet"),But.forEach(t),cEo=r(h$e," \u2014 "),Yj=n(h$e,"A",{href:!0});var Iut=s(Yj);fEo=r(Iut,"FNetModel"),Iut.forEach(t),mEo=r(h$e," (FNet model)"),h$e.forEach(t),gEo=i(x),L_=n(x,"LI",{});var p$e=s(L_);Efe=n(p$e,"STRONG",{});var Nut=s(Efe);hEo=r(Nut,"fsmt"),Nut.forEach(t),pEo=r(p$e," \u2014 "),Kj=n(p$e,"A",{href:!0});var qut=s(Kj);_Eo=r(qut,"FSMTModel"),qut.forEach(t),uEo=r(p$e," (FairSeq Machine-Translation model)"),p$e.forEach(t),bEo=i(x),Js=n(x,"LI",{});var zS=s(Js);Cfe=n(zS,"STRONG",{});var jut=s(Cfe);vEo=r(jut,"funnel"),jut.forEach(t),FEo=r(zS," \u2014 "),Zj=n(zS,"A",{href:!0});var Dut=s(Zj);TEo=r(Dut,"FunnelModel"),Dut.forEach(t),MEo=r(zS," or "),eD=n(zS,"A",{href:!0});var Gut=s(eD);EEo=r(Gut,"FunnelBaseModel"),Gut.forEach(t),CEo=r(zS," (Funnel Transformer model)"),zS.forEach(t),wEo=i(x),y_=n(x,"LI",{});var _$e=s(y_);wfe=n(_$e,"STRONG",{});var Out=s(wfe);AEo=r(Out,"glpn"),Out.forEach(t),LEo=r(_$e," \u2014 "),oD=n(_$e,"A",{href:!0});var Vut=s(oD);yEo=r(Vut,"GLPNModel"),Vut.forEach(t),xEo=r(_$e," (GLPN model)"),_$e.forEach(t),$Eo=i(x),x_=n(x,"LI",{});var u$e=s(x_);Afe=n(u$e,"STRONG",{});var Xut=s(Afe);kEo=r(Xut,"gpt2"),Xut.forEach(t),SEo=r(u$e," \u2014 "),rD=n(u$e,"A",{href:!0});var zut=s(rD);REo=r(zut,"GPT2Model"),zut.forEach(t),PEo=r(u$e," (OpenAI GPT-2 model)"),u$e.forEach(t),BEo=i(x),$_=n(x,"LI",{});var b$e=s($_);Lfe=n(b$e,"STRONG",{});var Wut=s(Lfe);IEo=r(Wut,"gpt_neo"),Wut.forEach(t),NEo=r(b$e," \u2014 "),tD=n(b$e,"A",{href:!0});var Qut=s(tD);qEo=r(Qut,"GPTNeoModel"),Qut.forEach(t),jEo=r(b$e," (GPT Neo model)"),b$e.forEach(t),DEo=i(x),k_=n(x,"LI",{});var v$e=s(k_);yfe=n(v$e,"STRONG",{});var Hut=s(yfe);GEo=r(Hut,"gpt_neox"),Hut.forEach(t),OEo=r(v$e," \u2014 "),aD=n(v$e,"A",{href:!0});var Uut=s(aD);VEo=r(Uut,"GPTNeoXModel"),Uut.forEach(t),XEo=r(v$e," (GPT NeoX model)"),v$e.forEach(t),zEo=i(x),S_=n(x,"LI",{});var F$e=s(S_);xfe=n(F$e,"STRONG",{});var Jut=s(xfe);WEo=r(Jut,"gptj"),Jut.forEach(t),QEo=r(F$e," \u2014 "),nD=n(F$e,"A",{href:!0});var Yut=s(nD);HEo=r(Yut,"GPTJModel"),Yut.forEach(t),UEo=r(F$e," (GPT-J model)"),F$e.forEach(t),JEo=i(x),R_=n(x,"LI",{});var T$e=s(R_);$fe=n(T$e,"STRONG",{});var Kut=s($fe);YEo=r(Kut,"groupvit"),Kut.forEach(t),KEo=r(T$e," \u2014 "),sD=n(T$e,"A",{href:!0});var Zut=s(sD);ZEo=r(Zut,"GroupViTModel"),Zut.forEach(t),eCo=r(T$e," (GroupViT model)"),T$e.forEach(t),oCo=i(x),P_=n(x,"LI",{});var M$e=s(P_);kfe=n(M$e,"STRONG",{});var e1t=s(kfe);rCo=r(e1t,"hubert"),e1t.forEach(t),tCo=r(M$e," \u2014 "),lD=n(M$e,"A",{href:!0});var o1t=s(lD);aCo=r(o1t,"HubertModel"),o1t.forEach(t),nCo=r(M$e," (Hubert model)"),M$e.forEach(t),sCo=i(x),B_=n(x,"LI",{});var E$e=s(B_);Sfe=n(E$e,"STRONG",{});var r1t=s(Sfe);lCo=r(r1t,"ibert"),r1t.forEach(t),iCo=r(E$e," \u2014 "),iD=n(E$e,"A",{href:!0});var t1t=s(iD);dCo=r(t1t,"IBertModel"),t1t.forEach(t),cCo=r(E$e," (I-BERT model)"),E$e.forEach(t),fCo=i(x),I_=n(x,"LI",{});var C$e=s(I_);Rfe=n(C$e,"STRONG",{});var a1t=s(Rfe);mCo=r(a1t,"imagegpt"),a1t.forEach(t),gCo=r(C$e," \u2014 "),dD=n(C$e,"A",{href:!0});var n1t=s(dD);hCo=r(n1t,"ImageGPTModel"),n1t.forEach(t),pCo=r(C$e," (ImageGPT model)"),C$e.forEach(t),_Co=i(x),N_=n(x,"LI",{});var w$e=s(N_);Pfe=n(w$e,"STRONG",{});var s1t=s(Pfe);uCo=r(s1t,"layoutlm"),s1t.forEach(t),bCo=r(w$e," \u2014 "),cD=n(w$e,"A",{href:!0});var l1t=s(cD);vCo=r(l1t,"LayoutLMModel"),l1t.forEach(t),FCo=r(w$e," (LayoutLM model)"),w$e.forEach(t),TCo=i(x),q_=n(x,"LI",{});var A$e=s(q_);Bfe=n(A$e,"STRONG",{});var i1t=s(Bfe);MCo=r(i1t,"layoutlmv2"),i1t.forEach(t),ECo=r(A$e," \u2014 "),fD=n(A$e,"A",{href:!0});var d1t=s(fD);CCo=r(d1t,"LayoutLMv2Model"),d1t.forEach(t),wCo=r(A$e," (LayoutLMv2 model)"),A$e.forEach(t),ACo=i(x),j_=n(x,"LI",{});var L$e=s(j_);Ife=n(L$e,"STRONG",{});var c1t=s(Ife);LCo=r(c1t,"layoutlmv3"),c1t.forEach(t),yCo=r(L$e," \u2014 "),mD=n(L$e,"A",{href:!0});var f1t=s(mD);xCo=r(f1t,"LayoutLMv3Model"),f1t.forEach(t),$Co=r(L$e," (LayoutLMv3 model)"),L$e.forEach(t),kCo=i(x),D_=n(x,"LI",{});var y$e=s(D_);Nfe=n(y$e,"STRONG",{});var m1t=s(Nfe);SCo=r(m1t,"led"),m1t.forEach(t),RCo=r(y$e," \u2014 "),gD=n(y$e,"A",{href:!0});var g1t=s(gD);PCo=r(g1t,"LEDModel"),g1t.forEach(t),BCo=r(y$e," (LED model)"),y$e.forEach(t),ICo=i(x),G_=n(x,"LI",{});var x$e=s(G_);qfe=n(x$e,"STRONG",{});var h1t=s(qfe);NCo=r(h1t,"levit"),h1t.forEach(t),qCo=r(x$e," \u2014 "),hD=n(x$e,"A",{href:!0});var p1t=s(hD);jCo=r(p1t,"LevitModel"),p1t.forEach(t),DCo=r(x$e," (LeViT model)"),x$e.forEach(t),GCo=i(x),O_=n(x,"LI",{});var $$e=s(O_);jfe=n($$e,"STRONG",{});var _1t=s(jfe);OCo=r(_1t,"longformer"),_1t.forEach(t),VCo=r($$e," \u2014 "),pD=n($$e,"A",{href:!0});var u1t=s(pD);XCo=r(u1t,"LongformerModel"),u1t.forEach(t),zCo=r($$e," (Longformer model)"),$$e.forEach(t),WCo=i(x),V_=n(x,"LI",{});var k$e=s(V_);Dfe=n(k$e,"STRONG",{});var b1t=s(Dfe);QCo=r(b1t,"longt5"),b1t.forEach(t),HCo=r(k$e," \u2014 "),_D=n(k$e,"A",{href:!0});var v1t=s(_D);UCo=r(v1t,"LongT5Model"),v1t.forEach(t),JCo=r(k$e," (LongT5 model)"),k$e.forEach(t),YCo=i(x),X_=n(x,"LI",{});var S$e=s(X_);Gfe=n(S$e,"STRONG",{});var F1t=s(Gfe);KCo=r(F1t,"luke"),F1t.forEach(t),ZCo=r(S$e," \u2014 "),uD=n(S$e,"A",{href:!0});var T1t=s(uD);e5o=r(T1t,"LukeModel"),T1t.forEach(t),o5o=r(S$e," (LUKE model)"),S$e.forEach(t),r5o=i(x),z_=n(x,"LI",{});var R$e=s(z_);Ofe=n(R$e,"STRONG",{});var M1t=s(Ofe);t5o=r(M1t,"lxmert"),M1t.forEach(t),a5o=r(R$e," \u2014 "),bD=n(R$e,"A",{href:!0});var E1t=s(bD);n5o=r(E1t,"LxmertModel"),E1t.forEach(t),s5o=r(R$e," (LXMERT model)"),R$e.forEach(t),l5o=i(x),W_=n(x,"LI",{});var P$e=s(W_);Vfe=n(P$e,"STRONG",{});var C1t=s(Vfe);i5o=r(C1t,"m2m_100"),C1t.forEach(t),d5o=r(P$e," \u2014 "),vD=n(P$e,"A",{href:!0});var w1t=s(vD);c5o=r(w1t,"M2M100Model"),w1t.forEach(t),f5o=r(P$e," (M2M100 model)"),P$e.forEach(t),m5o=i(x),Q_=n(x,"LI",{});var B$e=s(Q_);Xfe=n(B$e,"STRONG",{});var A1t=s(Xfe);g5o=r(A1t,"marian"),A1t.forEach(t),h5o=r(B$e," \u2014 "),FD=n(B$e,"A",{href:!0});var L1t=s(FD);p5o=r(L1t,"MarianModel"),L1t.forEach(t),_5o=r(B$e," (Marian model)"),B$e.forEach(t),u5o=i(x),H_=n(x,"LI",{});var I$e=s(H_);zfe=n(I$e,"STRONG",{});var y1t=s(zfe);b5o=r(y1t,"maskformer"),y1t.forEach(t),v5o=r(I$e," \u2014 "),TD=n(I$e,"A",{href:!0});var x1t=s(TD);F5o=r(x1t,"MaskFormerModel"),x1t.forEach(t),T5o=r(I$e," (MaskFormer model)"),I$e.forEach(t),M5o=i(x),U_=n(x,"LI",{});var N$e=s(U_);Wfe=n(N$e,"STRONG",{});var $1t=s(Wfe);E5o=r($1t,"mbart"),$1t.forEach(t),C5o=r(N$e," \u2014 "),MD=n(N$e,"A",{href:!0});var k1t=s(MD);w5o=r(k1t,"MBartModel"),k1t.forEach(t),A5o=r(N$e," (mBART model)"),N$e.forEach(t),L5o=i(x),J_=n(x,"LI",{});var q$e=s(J_);Qfe=n(q$e,"STRONG",{});var S1t=s(Qfe);y5o=r(S1t,"mctct"),S1t.forEach(t),x5o=r(q$e," \u2014 "),ED=n(q$e,"A",{href:!0});var R1t=s(ED);$5o=r(R1t,"MCTCTModel"),R1t.forEach(t),k5o=r(q$e," (M-CTC-T model)"),q$e.forEach(t),S5o=i(x),Y_=n(x,"LI",{});var j$e=s(Y_);Hfe=n(j$e,"STRONG",{});var P1t=s(Hfe);R5o=r(P1t,"megatron-bert"),P1t.forEach(t),P5o=r(j$e," \u2014 "),CD=n(j$e,"A",{href:!0});var B1t=s(CD);B5o=r(B1t,"MegatronBertModel"),B1t.forEach(t),I5o=r(j$e," (Megatron-BERT model)"),j$e.forEach(t),N5o=i(x),K_=n(x,"LI",{});var D$e=s(K_);Ufe=n(D$e,"STRONG",{});var I1t=s(Ufe);q5o=r(I1t,"mobilebert"),I1t.forEach(t),j5o=r(D$e," \u2014 "),wD=n(D$e,"A",{href:!0});var N1t=s(wD);D5o=r(N1t,"MobileBertModel"),N1t.forEach(t),G5o=r(D$e," (MobileBERT model)"),D$e.forEach(t),O5o=i(x),Z_=n(x,"LI",{});var G$e=s(Z_);Jfe=n(G$e,"STRONG",{});var q1t=s(Jfe);V5o=r(q1t,"mobilevit"),q1t.forEach(t),X5o=r(G$e," \u2014 "),AD=n(G$e,"A",{href:!0});var j1t=s(AD);z5o=r(j1t,"MobileViTModel"),j1t.forEach(t),W5o=r(G$e," (MobileViT model)"),G$e.forEach(t),Q5o=i(x),eu=n(x,"LI",{});var O$e=s(eu);Yfe=n(O$e,"STRONG",{});var D1t=s(Yfe);H5o=r(D1t,"mpnet"),D1t.forEach(t),U5o=r(O$e," \u2014 "),LD=n(O$e,"A",{href:!0});var G1t=s(LD);J5o=r(G1t,"MPNetModel"),G1t.forEach(t),Y5o=r(O$e," (MPNet model)"),O$e.forEach(t),K5o=i(x),ou=n(x,"LI",{});var V$e=s(ou);Kfe=n(V$e,"STRONG",{});var O1t=s(Kfe);Z5o=r(O1t,"mt5"),O1t.forEach(t),e3o=r(V$e," \u2014 "),yD=n(V$e,"A",{href:!0});var V1t=s(yD);o3o=r(V1t,"MT5Model"),V1t.forEach(t),r3o=r(V$e," (MT5 model)"),V$e.forEach(t),t3o=i(x),ru=n(x,"LI",{});var X$e=s(ru);Zfe=n(X$e,"STRONG",{});var X1t=s(Zfe);a3o=r(X1t,"mvp"),X1t.forEach(t),n3o=r(X$e," \u2014 "),xD=n(X$e,"A",{href:!0});var z1t=s(xD);s3o=r(z1t,"MvpModel"),z1t.forEach(t),l3o=r(X$e," (MVP model)"),X$e.forEach(t),i3o=i(x),tu=n(x,"LI",{});var z$e=s(tu);eme=n(z$e,"STRONG",{});var W1t=s(eme);d3o=r(W1t,"nezha"),W1t.forEach(t),c3o=r(z$e," \u2014 "),$D=n(z$e,"A",{href:!0});var Q1t=s($D);f3o=r(Q1t,"NezhaModel"),Q1t.forEach(t),m3o=r(z$e," (Nezha model)"),z$e.forEach(t),g3o=i(x),au=n(x,"LI",{});var W$e=s(au);ome=n(W$e,"STRONG",{});var H1t=s(ome);h3o=r(H1t,"nllb"),H1t.forEach(t),p3o=r(W$e," \u2014 "),kD=n(W$e,"A",{href:!0});var U1t=s(kD);_3o=r(U1t,"M2M100Model"),U1t.forEach(t),u3o=r(W$e," (NLLB model)"),W$e.forEach(t),b3o=i(x),nu=n(x,"LI",{});var Q$e=s(nu);rme=n(Q$e,"STRONG",{});var J1t=s(rme);v3o=r(J1t,"nystromformer"),J1t.forEach(t),F3o=r(Q$e," \u2014 "),SD=n(Q$e,"A",{href:!0});var Y1t=s(SD);T3o=r(Y1t,"NystromformerModel"),Y1t.forEach(t),M3o=r(Q$e," (Nystr\xF6mformer model)"),Q$e.forEach(t),E3o=i(x),su=n(x,"LI",{});var H$e=s(su);tme=n(H$e,"STRONG",{});var K1t=s(tme);C3o=r(K1t,"openai-gpt"),K1t.forEach(t),w3o=r(H$e," \u2014 "),RD=n(H$e,"A",{href:!0});var Z1t=s(RD);A3o=r(Z1t,"OpenAIGPTModel"),Z1t.forEach(t),L3o=r(H$e," (OpenAI GPT model)"),H$e.forEach(t),y3o=i(x),lu=n(x,"LI",{});var U$e=s(lu);ame=n(U$e,"STRONG",{});var e7t=s(ame);x3o=r(e7t,"opt"),e7t.forEach(t),$3o=r(U$e," \u2014 "),PD=n(U$e,"A",{href:!0});var o7t=s(PD);k3o=r(o7t,"OPTModel"),o7t.forEach(t),S3o=r(U$e," (OPT model)"),U$e.forEach(t),R3o=i(x),iu=n(x,"LI",{});var J$e=s(iu);nme=n(J$e,"STRONG",{});var r7t=s(nme);P3o=r(r7t,"owlvit"),r7t.forEach(t),B3o=r(J$e," \u2014 "),BD=n(J$e,"A",{href:!0});var t7t=s(BD);I3o=r(t7t,"OwlViTModel"),t7t.forEach(t),N3o=r(J$e," (OWL-ViT model)"),J$e.forEach(t),q3o=i(x),du=n(x,"LI",{});var Y$e=s(du);sme=n(Y$e,"STRONG",{});var a7t=s(sme);j3o=r(a7t,"pegasus"),a7t.forEach(t),D3o=r(Y$e," \u2014 "),ID=n(Y$e,"A",{href:!0});var n7t=s(ID);G3o=r(n7t,"PegasusModel"),n7t.forEach(t),O3o=r(Y$e," (Pegasus model)"),Y$e.forEach(t),V3o=i(x),cu=n(x,"LI",{});var K$e=s(cu);lme=n(K$e,"STRONG",{});var s7t=s(lme);X3o=r(s7t,"perceiver"),s7t.forEach(t),z3o=r(K$e," \u2014 "),ND=n(K$e,"A",{href:!0});var l7t=s(ND);W3o=r(l7t,"PerceiverModel"),l7t.forEach(t),Q3o=r(K$e," (Perceiver model)"),K$e.forEach(t),H3o=i(x),fu=n(x,"LI",{});var Z$e=s(fu);ime=n(Z$e,"STRONG",{});var i7t=s(ime);U3o=r(i7t,"plbart"),i7t.forEach(t),J3o=r(Z$e," \u2014 "),qD=n(Z$e,"A",{href:!0});var d7t=s(qD);Y3o=r(d7t,"PLBartModel"),d7t.forEach(t),K3o=r(Z$e," (PLBart model)"),Z$e.forEach(t),Z3o=i(x),mu=n(x,"LI",{});var eke=s(mu);dme=n(eke,"STRONG",{});var c7t=s(dme);e0o=r(c7t,"poolformer"),c7t.forEach(t),o0o=r(eke," \u2014 "),jD=n(eke,"A",{href:!0});var f7t=s(jD);r0o=r(f7t,"PoolFormerModel"),f7t.forEach(t),t0o=r(eke," (PoolFormer model)"),eke.forEach(t),a0o=i(x),gu=n(x,"LI",{});var oke=s(gu);cme=n(oke,"STRONG",{});var m7t=s(cme);n0o=r(m7t,"prophetnet"),m7t.forEach(t),s0o=r(oke," \u2014 "),DD=n(oke,"A",{href:!0});var g7t=s(DD);l0o=r(g7t,"ProphetNetModel"),g7t.forEach(t),i0o=r(oke," (ProphetNet model)"),oke.forEach(t),d0o=i(x),hu=n(x,"LI",{});var rke=s(hu);fme=n(rke,"STRONG",{});var h7t=s(fme);c0o=r(h7t,"qdqbert"),h7t.forEach(t),f0o=r(rke," \u2014 "),GD=n(rke,"A",{href:!0});var p7t=s(GD);m0o=r(p7t,"QDQBertModel"),p7t.forEach(t),g0o=r(rke," (QDQBert model)"),rke.forEach(t),h0o=i(x),pu=n(x,"LI",{});var tke=s(pu);mme=n(tke,"STRONG",{});var _7t=s(mme);p0o=r(_7t,"reformer"),_7t.forEach(t),_0o=r(tke," \u2014 "),OD=n(tke,"A",{href:!0});var u7t=s(OD);u0o=r(u7t,"ReformerModel"),u7t.forEach(t),b0o=r(tke," (Reformer model)"),tke.forEach(t),v0o=i(x),_u=n(x,"LI",{});var ake=s(_u);gme=n(ake,"STRONG",{});var b7t=s(gme);F0o=r(b7t,"regnet"),b7t.forEach(t),T0o=r(ake," \u2014 "),VD=n(ake,"A",{href:!0});var v7t=s(VD);M0o=r(v7t,"RegNetModel"),v7t.forEach(t),E0o=r(ake," (RegNet model)"),ake.forEach(t),C0o=i(x),uu=n(x,"LI",{});var nke=s(uu);hme=n(nke,"STRONG",{});var F7t=s(hme);w0o=r(F7t,"rembert"),F7t.forEach(t),A0o=r(nke," \u2014 "),XD=n(nke,"A",{href:!0});var T7t=s(XD);L0o=r(T7t,"RemBertModel"),T7t.forEach(t),y0o=r(nke," (RemBERT model)"),nke.forEach(t),x0o=i(x),bu=n(x,"LI",{});var ske=s(bu);pme=n(ske,"STRONG",{});var M7t=s(pme);$0o=r(M7t,"resnet"),M7t.forEach(t),k0o=r(ske," \u2014 "),zD=n(ske,"A",{href:!0});var E7t=s(zD);S0o=r(E7t,"ResNetModel"),E7t.forEach(t),R0o=r(ske," (ResNet model)"),ske.forEach(t),P0o=i(x),vu=n(x,"LI",{});var lke=s(vu);_me=n(lke,"STRONG",{});var C7t=s(_me);B0o=r(C7t,"retribert"),C7t.forEach(t),I0o=r(lke," \u2014 "),WD=n(lke,"A",{href:!0});var w7t=s(WD);N0o=r(w7t,"RetriBertModel"),w7t.forEach(t),q0o=r(lke," (RetriBERT model)"),lke.forEach(t),j0o=i(x),Fu=n(x,"LI",{});var ike=s(Fu);ume=n(ike,"STRONG",{});var A7t=s(ume);D0o=r(A7t,"roberta"),A7t.forEach(t),G0o=r(ike," \u2014 "),QD=n(ike,"A",{href:!0});var L7t=s(QD);O0o=r(L7t,"RobertaModel"),L7t.forEach(t),V0o=r(ike," (RoBERTa model)"),ike.forEach(t),X0o=i(x),Tu=n(x,"LI",{});var dke=s(Tu);bme=n(dke,"STRONG",{});var y7t=s(bme);z0o=r(y7t,"roformer"),y7t.forEach(t),W0o=r(dke," \u2014 "),HD=n(dke,"A",{href:!0});var x7t=s(HD);Q0o=r(x7t,"RoFormerModel"),x7t.forEach(t),H0o=r(dke," (RoFormer model)"),dke.forEach(t),U0o=i(x),Mu=n(x,"LI",{});var cke=s(Mu);vme=n(cke,"STRONG",{});var $7t=s(vme);J0o=r($7t,"segformer"),$7t.forEach(t),Y0o=r(cke," \u2014 "),UD=n(cke,"A",{href:!0});var k7t=s(UD);K0o=r(k7t,"SegformerModel"),k7t.forEach(t),Z0o=r(cke," (SegFormer model)"),cke.forEach(t),ewo=i(x),Eu=n(x,"LI",{});var fke=s(Eu);Fme=n(fke,"STRONG",{});var S7t=s(Fme);owo=r(S7t,"sew"),S7t.forEach(t),rwo=r(fke," \u2014 "),JD=n(fke,"A",{href:!0});var R7t=s(JD);two=r(R7t,"SEWModel"),R7t.forEach(t),awo=r(fke," (SEW model)"),fke.forEach(t),nwo=i(x),Cu=n(x,"LI",{});var mke=s(Cu);Tme=n(mke,"STRONG",{});var P7t=s(Tme);swo=r(P7t,"sew-d"),P7t.forEach(t),lwo=r(mke," \u2014 "),YD=n(mke,"A",{href:!0});var B7t=s(YD);iwo=r(B7t,"SEWDModel"),B7t.forEach(t),dwo=r(mke," (SEW-D model)"),mke.forEach(t),cwo=i(x),wu=n(x,"LI",{});var gke=s(wu);Mme=n(gke,"STRONG",{});var I7t=s(Mme);fwo=r(I7t,"speech_to_text"),I7t.forEach(t),mwo=r(gke," \u2014 "),KD=n(gke,"A",{href:!0});var N7t=s(KD);gwo=r(N7t,"Speech2TextModel"),N7t.forEach(t),hwo=r(gke," (Speech2Text model)"),gke.forEach(t),pwo=i(x),Au=n(x,"LI",{});var hke=s(Au);Eme=n(hke,"STRONG",{});var q7t=s(Eme);_wo=r(q7t,"splinter"),q7t.forEach(t),uwo=r(hke," \u2014 "),ZD=n(hke,"A",{href:!0});var j7t=s(ZD);bwo=r(j7t,"SplinterModel"),j7t.forEach(t),vwo=r(hke," (Splinter model)"),hke.forEach(t),Fwo=i(x),Lu=n(x,"LI",{});var pke=s(Lu);Cme=n(pke,"STRONG",{});var D7t=s(Cme);Two=r(D7t,"squeezebert"),D7t.forEach(t),Mwo=r(pke," \u2014 "),eG=n(pke,"A",{href:!0});var G7t=s(eG);Ewo=r(G7t,"SqueezeBertModel"),G7t.forEach(t),Cwo=r(pke," (SqueezeBERT model)"),pke.forEach(t),wwo=i(x),yu=n(x,"LI",{});var _ke=s(yu);wme=n(_ke,"STRONG",{});var O7t=s(wme);Awo=r(O7t,"swin"),O7t.forEach(t),Lwo=r(_ke," \u2014 "),oG=n(_ke,"A",{href:!0});var V7t=s(oG);ywo=r(V7t,"SwinModel"),V7t.forEach(t),xwo=r(_ke," (Swin Transformer model)"),_ke.forEach(t),$wo=i(x),xu=n(x,"LI",{});var uke=s(xu);Ame=n(uke,"STRONG",{});var X7t=s(Ame);kwo=r(X7t,"t5"),X7t.forEach(t),Swo=r(uke," \u2014 "),rG=n(uke,"A",{href:!0});var z7t=s(rG);Rwo=r(z7t,"T5Model"),z7t.forEach(t),Pwo=r(uke," (T5 model)"),uke.forEach(t),Bwo=i(x),$u=n(x,"LI",{});var bke=s($u);Lme=n(bke,"STRONG",{});var W7t=s(Lme);Iwo=r(W7t,"tapas"),W7t.forEach(t),Nwo=r(bke," \u2014 "),tG=n(bke,"A",{href:!0});var Q7t=s(tG);qwo=r(Q7t,"TapasModel"),Q7t.forEach(t),jwo=r(bke," (TAPAS model)"),bke.forEach(t),Dwo=i(x),ku=n(x,"LI",{});var vke=s(ku);yme=n(vke,"STRONG",{});var H7t=s(yme);Gwo=r(H7t,"trajectory_transformer"),H7t.forEach(t),Owo=r(vke," \u2014 "),aG=n(vke,"A",{href:!0});var U7t=s(aG);Vwo=r(U7t,"TrajectoryTransformerModel"),U7t.forEach(t),Xwo=r(vke," (Trajectory Transformer model)"),vke.forEach(t),zwo=i(x),Su=n(x,"LI",{});var Fke=s(Su);xme=n(Fke,"STRONG",{});var J7t=s(xme);Wwo=r(J7t,"transfo-xl"),J7t.forEach(t),Qwo=r(Fke," \u2014 "),nG=n(Fke,"A",{href:!0});var Y7t=s(nG);Hwo=r(Y7t,"TransfoXLModel"),Y7t.forEach(t),Uwo=r(Fke," (Transformer-XL model)"),Fke.forEach(t),Jwo=i(x),Ru=n(x,"LI",{});var Tke=s(Ru);$me=n(Tke,"STRONG",{});var K7t=s($me);Ywo=r(K7t,"unispeech"),K7t.forEach(t),Kwo=r(Tke," \u2014 "),sG=n(Tke,"A",{href:!0});var Z7t=s(sG);Zwo=r(Z7t,"UniSpeechModel"),Z7t.forEach(t),eAo=r(Tke," (UniSpeech model)"),Tke.forEach(t),oAo=i(x),Pu=n(x,"LI",{});var Mke=s(Pu);kme=n(Mke,"STRONG",{});var e2t=s(kme);rAo=r(e2t,"unispeech-sat"),e2t.forEach(t),tAo=r(Mke," \u2014 "),lG=n(Mke,"A",{href:!0});var o2t=s(lG);aAo=r(o2t,"UniSpeechSatModel"),o2t.forEach(t),nAo=r(Mke," (UniSpeechSat model)"),Mke.forEach(t),sAo=i(x),Bu=n(x,"LI",{});var Eke=s(Bu);Sme=n(Eke,"STRONG",{});var r2t=s(Sme);lAo=r(r2t,"van"),r2t.forEach(t),iAo=r(Eke," \u2014 "),iG=n(Eke,"A",{href:!0});var t2t=s(iG);dAo=r(t2t,"VanModel"),t2t.forEach(t),cAo=r(Eke," (VAN model)"),Eke.forEach(t),fAo=i(x),Iu=n(x,"LI",{});var Cke=s(Iu);Rme=n(Cke,"STRONG",{});var a2t=s(Rme);mAo=r(a2t,"vilt"),a2t.forEach(t),gAo=r(Cke," \u2014 "),dG=n(Cke,"A",{href:!0});var n2t=s(dG);hAo=r(n2t,"ViltModel"),n2t.forEach(t),pAo=r(Cke," (ViLT model)"),Cke.forEach(t),_Ao=i(x),Nu=n(x,"LI",{});var wke=s(Nu);Pme=n(wke,"STRONG",{});var s2t=s(Pme);uAo=r(s2t,"vision-text-dual-encoder"),s2t.forEach(t),bAo=r(wke," \u2014 "),cG=n(wke,"A",{href:!0});var l2t=s(cG);vAo=r(l2t,"VisionTextDualEncoderModel"),l2t.forEach(t),FAo=r(wke," (VisionTextDualEncoder model)"),wke.forEach(t),TAo=i(x),qu=n(x,"LI",{});var Ake=s(qu);Bme=n(Ake,"STRONG",{});var i2t=s(Bme);MAo=r(i2t,"visual_bert"),i2t.forEach(t),EAo=r(Ake," \u2014 "),fG=n(Ake,"A",{href:!0});var d2t=s(fG);CAo=r(d2t,"VisualBertModel"),d2t.forEach(t),wAo=r(Ake," (VisualBERT model)"),Ake.forEach(t),AAo=i(x),ju=n(x,"LI",{});var Lke=s(ju);Ime=n(Lke,"STRONG",{});var c2t=s(Ime);LAo=r(c2t,"vit"),c2t.forEach(t),yAo=r(Lke," \u2014 "),mG=n(Lke,"A",{href:!0});var f2t=s(mG);xAo=r(f2t,"ViTModel"),f2t.forEach(t),$Ao=r(Lke," (ViT model)"),Lke.forEach(t),kAo=i(x),Du=n(x,"LI",{});var yke=s(Du);Nme=n(yke,"STRONG",{});var m2t=s(Nme);SAo=r(m2t,"vit_mae"),m2t.forEach(t),RAo=r(yke," \u2014 "),gG=n(yke,"A",{href:!0});var g2t=s(gG);PAo=r(g2t,"ViTMAEModel"),g2t.forEach(t),BAo=r(yke," (ViTMAE model)"),yke.forEach(t),IAo=i(x),Gu=n(x,"LI",{});var xke=s(Gu);qme=n(xke,"STRONG",{});var h2t=s(qme);NAo=r(h2t,"wav2vec2"),h2t.forEach(t),qAo=r(xke," \u2014 "),hG=n(xke,"A",{href:!0});var p2t=s(hG);jAo=r(p2t,"Wav2Vec2Model"),p2t.forEach(t),DAo=r(xke," (Wav2Vec2 model)"),xke.forEach(t),GAo=i(x),Ou=n(x,"LI",{});var $ke=s(Ou);jme=n($ke,"STRONG",{});var _2t=s(jme);OAo=r(_2t,"wav2vec2-conformer"),_2t.forEach(t),VAo=r($ke," \u2014 "),pG=n($ke,"A",{href:!0});var u2t=s(pG);XAo=r(u2t,"Wav2Vec2ConformerModel"),u2t.forEach(t),zAo=r($ke," (Wav2Vec2-Conformer model)"),$ke.forEach(t),WAo=i(x),Vu=n(x,"LI",{});var kke=s(Vu);Dme=n(kke,"STRONG",{});var b2t=s(Dme);QAo=r(b2t,"wavlm"),b2t.forEach(t),HAo=r(kke," \u2014 "),_G=n(kke,"A",{href:!0});var v2t=s(_G);UAo=r(v2t,"WavLMModel"),v2t.forEach(t),JAo=r(kke," (WavLM model)"),kke.forEach(t),YAo=i(x),Xu=n(x,"LI",{});var Ske=s(Xu);Gme=n(Ske,"STRONG",{});var F2t=s(Gme);KAo=r(F2t,"xglm"),F2t.forEach(t),ZAo=r(Ske," \u2014 "),uG=n(Ske,"A",{href:!0});var T2t=s(uG);eLo=r(T2t,"XGLMModel"),T2t.forEach(t),oLo=r(Ske," (XGLM model)"),Ske.forEach(t),rLo=i(x),zu=n(x,"LI",{});var Rke=s(zu);Ome=n(Rke,"STRONG",{});var M2t=s(Ome);tLo=r(M2t,"xlm"),M2t.forEach(t),aLo=r(Rke," \u2014 "),bG=n(Rke,"A",{href:!0});var E2t=s(bG);nLo=r(E2t,"XLMModel"),E2t.forEach(t),sLo=r(Rke," (XLM model)"),Rke.forEach(t),lLo=i(x),Wu=n(x,"LI",{});var Pke=s(Wu);Vme=n(Pke,"STRONG",{});var C2t=s(Vme);iLo=r(C2t,"xlm-prophetnet"),C2t.forEach(t),dLo=r(Pke," \u2014 "),vG=n(Pke,"A",{href:!0});var w2t=s(vG);cLo=r(w2t,"XLMProphetNetModel"),w2t.forEach(t),fLo=r(Pke," (XLM-ProphetNet model)"),Pke.forEach(t),mLo=i(x),Qu=n(x,"LI",{});var Bke=s(Qu);Xme=n(Bke,"STRONG",{});var A2t=s(Xme);gLo=r(A2t,"xlm-roberta"),A2t.forEach(t),hLo=r(Bke," \u2014 "),FG=n(Bke,"A",{href:!0});var L2t=s(FG);pLo=r(L2t,"XLMRobertaModel"),L2t.forEach(t),_Lo=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),uLo=i(x),Hu=n(x,"LI",{});var Ike=s(Hu);zme=n(Ike,"STRONG",{});var y2t=s(zme);bLo=r(y2t,"xlm-roberta-xl"),y2t.forEach(t),vLo=r(Ike," \u2014 "),TG=n(Ike,"A",{href:!0});var x2t=s(TG);FLo=r(x2t,"XLMRobertaXLModel"),x2t.forEach(t),TLo=r(Ike," (XLM-RoBERTa-XL model)"),Ike.forEach(t),MLo=i(x),Uu=n(x,"LI",{});var Nke=s(Uu);Wme=n(Nke,"STRONG",{});var $2t=s(Wme);ELo=r($2t,"xlnet"),$2t.forEach(t),CLo=r(Nke," \u2014 "),MG=n(Nke,"A",{href:!0});var k2t=s(MG);wLo=r(k2t,"XLNetModel"),k2t.forEach(t),ALo=r(Nke," (XLNet model)"),Nke.forEach(t),LLo=i(x),Ju=n(x,"LI",{});var qke=s(Ju);Qme=n(qke,"STRONG",{});var S2t=s(Qme);yLo=r(S2t,"yolos"),S2t.forEach(t),xLo=r(qke," \u2014 "),EG=n(qke,"A",{href:!0});var R2t=s(EG);$Lo=r(R2t,"YolosModel"),R2t.forEach(t),kLo=r(qke," (YOLOS model)"),qke.forEach(t),SLo=i(x),Yu=n(x,"LI",{});var jke=s(Yu);Hme=n(jke,"STRONG",{});var P2t=s(Hme);RLo=r(P2t,"yoso"),P2t.forEach(t),PLo=r(jke," \u2014 "),CG=n(jke,"A",{href:!0});var B2t=s(CG);BLo=r(B2t,"YosoModel"),B2t.forEach(t),ILo=r(jke," (YOSO model)"),jke.forEach(t),x.forEach(t),NLo=i(la),Ku=n(la,"P",{});var Dke=s(Ku);qLo=r(Dke,"The model is set in evaluation mode by default using "),Ume=n(Dke,"CODE",{});var I2t=s(Ume);jLo=r(I2t,"model.eval()"),I2t.forEach(t),DLo=r(Dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=n(Dke,"CODE",{});var N2t=s(Jme);GLo=r(N2t,"model.train()"),N2t.forEach(t),Dke.forEach(t),OLo=i(la),T(Zu.$$.fragment,la),la.forEach(t),nl.forEach(t),mze=i(f),Wi=n(f,"H2",{class:!0});var bQe=s(Wi);e1=n(bQe,"A",{id:!0,class:!0,href:!0});var q2t=s(e1);Yme=n(q2t,"SPAN",{});var j2t=s(Yme);T(Hy.$$.fragment,j2t),j2t.forEach(t),q2t.forEach(t),VLo=i(bQe),Kme=n(bQe,"SPAN",{});var D2t=s(Kme);XLo=r(D2t,"AutoModelForPreTraining"),D2t.forEach(t),bQe.forEach(t),gze=i(f),So=n(f,"DIV",{class:!0});var sl=s(So);T(Uy.$$.fragment,sl),zLo=i(sl),Qi=n(sl,"P",{});var cte=s(Qi);WLo=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wG=n(cte,"A",{href:!0});var G2t=s(wG);QLo=r(G2t,"from_pretrained()"),G2t.forEach(t),HLo=r(cte," class method or the "),AG=n(cte,"A",{href:!0});var O2t=s(AG);ULo=r(O2t,"from_config()"),O2t.forEach(t),JLo=r(cte,` class
method.`),cte.forEach(t),YLo=i(sl),Jy=n(sl,"P",{});var vQe=s(Jy);KLo=r(vQe,"This class cannot be instantiated directly using "),Zme=n(vQe,"CODE",{});var V2t=s(Zme);ZLo=r(V2t,"__init__()"),V2t.forEach(t),eyo=r(vQe," (throws an error)."),vQe.forEach(t),oyo=i(sl),dt=n(sl,"DIV",{class:!0});var EA=s(dt);T(Yy.$$.fragment,EA),ryo=i(EA),ege=n(EA,"P",{});var X2t=s(ege);tyo=r(X2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),X2t.forEach(t),ayo=i(EA),Hi=n(EA,"P",{});var fte=s(Hi);nyo=r(fte,`Note:
Loading a model from its configuration file does `),oge=n(fte,"STRONG",{});var z2t=s(oge);syo=r(z2t,"not"),z2t.forEach(t),lyo=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(fte,"A",{href:!0});var W2t=s(LG);iyo=r(W2t,"from_pretrained()"),W2t.forEach(t),dyo=r(fte," to load the model weights."),fte.forEach(t),cyo=i(EA),T(o1.$$.fragment,EA),EA.forEach(t),fyo=i(sl),Ke=n(sl,"DIV",{class:!0});var ia=s(Ke);T(Ky.$$.fragment,ia),myo=i(ia),rge=n(ia,"P",{});var Q2t=s(rge);gyo=r(Q2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Q2t.forEach(t),hyo=i(ia),qa=n(ia,"P",{});var CA=s(qa);pyo=r(CA,"The model class to instantiate is selected based on the "),tge=n(CA,"CODE",{});var H2t=s(tge);_yo=r(H2t,"model_type"),H2t.forEach(t),uyo=r(CA,` property of the config object (either
passed as an argument or loaded from `),age=n(CA,"CODE",{});var U2t=s(age);byo=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),vyo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=n(CA,"CODE",{});var J2t=s(nge);Fyo=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),Tyo=r(CA,":"),CA.forEach(t),Myo=i(ia),G=n(ia,"UL",{});var O=s(G);r1=n(O,"LI",{});var Gke=s(r1);sge=n(Gke,"STRONG",{});var Y2t=s(sge);Eyo=r(Y2t,"albert"),Y2t.forEach(t),Cyo=r(Gke," \u2014 "),yG=n(Gke,"A",{href:!0});var K2t=s(yG);wyo=r(K2t,"AlbertForPreTraining"),K2t.forEach(t),Ayo=r(Gke," (ALBERT model)"),Gke.forEach(t),Lyo=i(O),t1=n(O,"LI",{});var Oke=s(t1);lge=n(Oke,"STRONG",{});var Z2t=s(lge);yyo=r(Z2t,"bart"),Z2t.forEach(t),xyo=r(Oke," \u2014 "),xG=n(Oke,"A",{href:!0});var ebt=s(xG);$yo=r(ebt,"BartForConditionalGeneration"),ebt.forEach(t),kyo=r(Oke," (BART model)"),Oke.forEach(t),Syo=i(O),a1=n(O,"LI",{});var Vke=s(a1);ige=n(Vke,"STRONG",{});var obt=s(ige);Ryo=r(obt,"bert"),obt.forEach(t),Pyo=r(Vke," \u2014 "),$G=n(Vke,"A",{href:!0});var rbt=s($G);Byo=r(rbt,"BertForPreTraining"),rbt.forEach(t),Iyo=r(Vke," (BERT model)"),Vke.forEach(t),Nyo=i(O),n1=n(O,"LI",{});var Xke=s(n1);dge=n(Xke,"STRONG",{});var tbt=s(dge);qyo=r(tbt,"big_bird"),tbt.forEach(t),jyo=r(Xke," \u2014 "),kG=n(Xke,"A",{href:!0});var abt=s(kG);Dyo=r(abt,"BigBirdForPreTraining"),abt.forEach(t),Gyo=r(Xke," (BigBird model)"),Xke.forEach(t),Oyo=i(O),s1=n(O,"LI",{});var zke=s(s1);cge=n(zke,"STRONG",{});var nbt=s(cge);Vyo=r(nbt,"bloom"),nbt.forEach(t),Xyo=r(zke," \u2014 "),SG=n(zke,"A",{href:!0});var sbt=s(SG);zyo=r(sbt,"BloomForCausalLM"),sbt.forEach(t),Wyo=r(zke," (BLOOM model)"),zke.forEach(t),Qyo=i(O),l1=n(O,"LI",{});var Wke=s(l1);fge=n(Wke,"STRONG",{});var lbt=s(fge);Hyo=r(lbt,"camembert"),lbt.forEach(t),Uyo=r(Wke," \u2014 "),RG=n(Wke,"A",{href:!0});var ibt=s(RG);Jyo=r(ibt,"CamembertForMaskedLM"),ibt.forEach(t),Yyo=r(Wke," (CamemBERT model)"),Wke.forEach(t),Kyo=i(O),i1=n(O,"LI",{});var Qke=s(i1);mge=n(Qke,"STRONG",{});var dbt=s(mge);Zyo=r(dbt,"ctrl"),dbt.forEach(t),e8o=r(Qke," \u2014 "),PG=n(Qke,"A",{href:!0});var cbt=s(PG);o8o=r(cbt,"CTRLLMHeadModel"),cbt.forEach(t),r8o=r(Qke," (CTRL model)"),Qke.forEach(t),t8o=i(O),d1=n(O,"LI",{});var Hke=s(d1);gge=n(Hke,"STRONG",{});var fbt=s(gge);a8o=r(fbt,"data2vec-text"),fbt.forEach(t),n8o=r(Hke," \u2014 "),BG=n(Hke,"A",{href:!0});var mbt=s(BG);s8o=r(mbt,"Data2VecTextForMaskedLM"),mbt.forEach(t),l8o=r(Hke," (Data2VecText model)"),Hke.forEach(t),i8o=i(O),c1=n(O,"LI",{});var Uke=s(c1);hge=n(Uke,"STRONG",{});var gbt=s(hge);d8o=r(gbt,"deberta"),gbt.forEach(t),c8o=r(Uke," \u2014 "),IG=n(Uke,"A",{href:!0});var hbt=s(IG);f8o=r(hbt,"DebertaForMaskedLM"),hbt.forEach(t),m8o=r(Uke," (DeBERTa model)"),Uke.forEach(t),g8o=i(O),f1=n(O,"LI",{});var Jke=s(f1);pge=n(Jke,"STRONG",{});var pbt=s(pge);h8o=r(pbt,"deberta-v2"),pbt.forEach(t),p8o=r(Jke," \u2014 "),NG=n(Jke,"A",{href:!0});var _bt=s(NG);_8o=r(_bt,"DebertaV2ForMaskedLM"),_bt.forEach(t),u8o=r(Jke," (DeBERTa-v2 model)"),Jke.forEach(t),b8o=i(O),m1=n(O,"LI",{});var Yke=s(m1);_ge=n(Yke,"STRONG",{});var ubt=s(_ge);v8o=r(ubt,"distilbert"),ubt.forEach(t),F8o=r(Yke," \u2014 "),qG=n(Yke,"A",{href:!0});var bbt=s(qG);T8o=r(bbt,"DistilBertForMaskedLM"),bbt.forEach(t),M8o=r(Yke," (DistilBERT model)"),Yke.forEach(t),E8o=i(O),g1=n(O,"LI",{});var Kke=s(g1);uge=n(Kke,"STRONG",{});var vbt=s(uge);C8o=r(vbt,"electra"),vbt.forEach(t),w8o=r(Kke," \u2014 "),jG=n(Kke,"A",{href:!0});var Fbt=s(jG);A8o=r(Fbt,"ElectraForPreTraining"),Fbt.forEach(t),L8o=r(Kke," (ELECTRA model)"),Kke.forEach(t),y8o=i(O),h1=n(O,"LI",{});var Zke=s(h1);bge=n(Zke,"STRONG",{});var Tbt=s(bge);x8o=r(Tbt,"flaubert"),Tbt.forEach(t),$8o=r(Zke," \u2014 "),DG=n(Zke,"A",{href:!0});var Mbt=s(DG);k8o=r(Mbt,"FlaubertWithLMHeadModel"),Mbt.forEach(t),S8o=r(Zke," (FlauBERT model)"),Zke.forEach(t),R8o=i(O),p1=n(O,"LI",{});var eSe=s(p1);vge=n(eSe,"STRONG",{});var Ebt=s(vge);P8o=r(Ebt,"flava"),Ebt.forEach(t),B8o=r(eSe," \u2014 "),GG=n(eSe,"A",{href:!0});var Cbt=s(GG);I8o=r(Cbt,"FlavaForPreTraining"),Cbt.forEach(t),N8o=r(eSe," (FLAVA model)"),eSe.forEach(t),q8o=i(O),_1=n(O,"LI",{});var oSe=s(_1);Fge=n(oSe,"STRONG",{});var wbt=s(Fge);j8o=r(wbt,"fnet"),wbt.forEach(t),D8o=r(oSe," \u2014 "),OG=n(oSe,"A",{href:!0});var Abt=s(OG);G8o=r(Abt,"FNetForPreTraining"),Abt.forEach(t),O8o=r(oSe," (FNet model)"),oSe.forEach(t),V8o=i(O),u1=n(O,"LI",{});var rSe=s(u1);Tge=n(rSe,"STRONG",{});var Lbt=s(Tge);X8o=r(Lbt,"fsmt"),Lbt.forEach(t),z8o=r(rSe," \u2014 "),VG=n(rSe,"A",{href:!0});var ybt=s(VG);W8o=r(ybt,"FSMTForConditionalGeneration"),ybt.forEach(t),Q8o=r(rSe," (FairSeq Machine-Translation model)"),rSe.forEach(t),H8o=i(O),b1=n(O,"LI",{});var tSe=s(b1);Mge=n(tSe,"STRONG",{});var xbt=s(Mge);U8o=r(xbt,"funnel"),xbt.forEach(t),J8o=r(tSe," \u2014 "),XG=n(tSe,"A",{href:!0});var $bt=s(XG);Y8o=r($bt,"FunnelForPreTraining"),$bt.forEach(t),K8o=r(tSe," (Funnel Transformer model)"),tSe.forEach(t),Z8o=i(O),v1=n(O,"LI",{});var aSe=s(v1);Ege=n(aSe,"STRONG",{});var kbt=s(Ege);e9o=r(kbt,"gpt2"),kbt.forEach(t),o9o=r(aSe," \u2014 "),zG=n(aSe,"A",{href:!0});var Sbt=s(zG);r9o=r(Sbt,"GPT2LMHeadModel"),Sbt.forEach(t),t9o=r(aSe," (OpenAI GPT-2 model)"),aSe.forEach(t),a9o=i(O),F1=n(O,"LI",{});var nSe=s(F1);Cge=n(nSe,"STRONG",{});var Rbt=s(Cge);n9o=r(Rbt,"ibert"),Rbt.forEach(t),s9o=r(nSe," \u2014 "),WG=n(nSe,"A",{href:!0});var Pbt=s(WG);l9o=r(Pbt,"IBertForMaskedLM"),Pbt.forEach(t),i9o=r(nSe," (I-BERT model)"),nSe.forEach(t),d9o=i(O),T1=n(O,"LI",{});var sSe=s(T1);wge=n(sSe,"STRONG",{});var Bbt=s(wge);c9o=r(Bbt,"layoutlm"),Bbt.forEach(t),f9o=r(sSe," \u2014 "),QG=n(sSe,"A",{href:!0});var Ibt=s(QG);m9o=r(Ibt,"LayoutLMForMaskedLM"),Ibt.forEach(t),g9o=r(sSe," (LayoutLM model)"),sSe.forEach(t),h9o=i(O),M1=n(O,"LI",{});var lSe=s(M1);Age=n(lSe,"STRONG",{});var Nbt=s(Age);p9o=r(Nbt,"longformer"),Nbt.forEach(t),_9o=r(lSe," \u2014 "),HG=n(lSe,"A",{href:!0});var qbt=s(HG);u9o=r(qbt,"LongformerForMaskedLM"),qbt.forEach(t),b9o=r(lSe," (Longformer model)"),lSe.forEach(t),v9o=i(O),E1=n(O,"LI",{});var iSe=s(E1);Lge=n(iSe,"STRONG",{});var jbt=s(Lge);F9o=r(jbt,"lxmert"),jbt.forEach(t),T9o=r(iSe," \u2014 "),UG=n(iSe,"A",{href:!0});var Dbt=s(UG);M9o=r(Dbt,"LxmertForPreTraining"),Dbt.forEach(t),E9o=r(iSe," (LXMERT model)"),iSe.forEach(t),C9o=i(O),C1=n(O,"LI",{});var dSe=s(C1);yge=n(dSe,"STRONG",{});var Gbt=s(yge);w9o=r(Gbt,"megatron-bert"),Gbt.forEach(t),A9o=r(dSe," \u2014 "),JG=n(dSe,"A",{href:!0});var Obt=s(JG);L9o=r(Obt,"MegatronBertForPreTraining"),Obt.forEach(t),y9o=r(dSe," (Megatron-BERT model)"),dSe.forEach(t),x9o=i(O),w1=n(O,"LI",{});var cSe=s(w1);xge=n(cSe,"STRONG",{});var Vbt=s(xge);$9o=r(Vbt,"mobilebert"),Vbt.forEach(t),k9o=r(cSe," \u2014 "),YG=n(cSe,"A",{href:!0});var Xbt=s(YG);S9o=r(Xbt,"MobileBertForPreTraining"),Xbt.forEach(t),R9o=r(cSe," (MobileBERT model)"),cSe.forEach(t),P9o=i(O),A1=n(O,"LI",{});var fSe=s(A1);$ge=n(fSe,"STRONG",{});var zbt=s($ge);B9o=r(zbt,"mpnet"),zbt.forEach(t),I9o=r(fSe," \u2014 "),KG=n(fSe,"A",{href:!0});var Wbt=s(KG);N9o=r(Wbt,"MPNetForMaskedLM"),Wbt.forEach(t),q9o=r(fSe," (MPNet model)"),fSe.forEach(t),j9o=i(O),L1=n(O,"LI",{});var mSe=s(L1);kge=n(mSe,"STRONG",{});var Qbt=s(kge);D9o=r(Qbt,"mvp"),Qbt.forEach(t),G9o=r(mSe," \u2014 "),ZG=n(mSe,"A",{href:!0});var Hbt=s(ZG);O9o=r(Hbt,"MvpForConditionalGeneration"),Hbt.forEach(t),V9o=r(mSe," (MVP model)"),mSe.forEach(t),X9o=i(O),y1=n(O,"LI",{});var gSe=s(y1);Sge=n(gSe,"STRONG",{});var Ubt=s(Sge);z9o=r(Ubt,"nezha"),Ubt.forEach(t),W9o=r(gSe," \u2014 "),eO=n(gSe,"A",{href:!0});var Jbt=s(eO);Q9o=r(Jbt,"NezhaForPreTraining"),Jbt.forEach(t),H9o=r(gSe," (Nezha model)"),gSe.forEach(t),U9o=i(O),x1=n(O,"LI",{});var hSe=s(x1);Rge=n(hSe,"STRONG",{});var Ybt=s(Rge);J9o=r(Ybt,"openai-gpt"),Ybt.forEach(t),Y9o=r(hSe," \u2014 "),oO=n(hSe,"A",{href:!0});var Kbt=s(oO);K9o=r(Kbt,"OpenAIGPTLMHeadModel"),Kbt.forEach(t),Z9o=r(hSe," (OpenAI GPT model)"),hSe.forEach(t),exo=i(O),$1=n(O,"LI",{});var pSe=s($1);Pge=n(pSe,"STRONG",{});var Zbt=s(Pge);oxo=r(Zbt,"retribert"),Zbt.forEach(t),rxo=r(pSe," \u2014 "),rO=n(pSe,"A",{href:!0});var evt=s(rO);txo=r(evt,"RetriBertModel"),evt.forEach(t),axo=r(pSe," (RetriBERT model)"),pSe.forEach(t),nxo=i(O),k1=n(O,"LI",{});var _Se=s(k1);Bge=n(_Se,"STRONG",{});var ovt=s(Bge);sxo=r(ovt,"roberta"),ovt.forEach(t),lxo=r(_Se," \u2014 "),tO=n(_Se,"A",{href:!0});var rvt=s(tO);ixo=r(rvt,"RobertaForMaskedLM"),rvt.forEach(t),dxo=r(_Se," (RoBERTa model)"),_Se.forEach(t),cxo=i(O),S1=n(O,"LI",{});var uSe=s(S1);Ige=n(uSe,"STRONG",{});var tvt=s(Ige);fxo=r(tvt,"splinter"),tvt.forEach(t),mxo=r(uSe," \u2014 "),aO=n(uSe,"A",{href:!0});var avt=s(aO);gxo=r(avt,"SplinterForPreTraining"),avt.forEach(t),hxo=r(uSe," (Splinter model)"),uSe.forEach(t),pxo=i(O),R1=n(O,"LI",{});var bSe=s(R1);Nge=n(bSe,"STRONG",{});var nvt=s(Nge);_xo=r(nvt,"squeezebert"),nvt.forEach(t),uxo=r(bSe," \u2014 "),nO=n(bSe,"A",{href:!0});var svt=s(nO);bxo=r(svt,"SqueezeBertForMaskedLM"),svt.forEach(t),vxo=r(bSe," (SqueezeBERT model)"),bSe.forEach(t),Fxo=i(O),P1=n(O,"LI",{});var vSe=s(P1);qge=n(vSe,"STRONG",{});var lvt=s(qge);Txo=r(lvt,"t5"),lvt.forEach(t),Mxo=r(vSe," \u2014 "),sO=n(vSe,"A",{href:!0});var ivt=s(sO);Exo=r(ivt,"T5ForConditionalGeneration"),ivt.forEach(t),Cxo=r(vSe," (T5 model)"),vSe.forEach(t),wxo=i(O),B1=n(O,"LI",{});var FSe=s(B1);jge=n(FSe,"STRONG",{});var dvt=s(jge);Axo=r(dvt,"tapas"),dvt.forEach(t),Lxo=r(FSe," \u2014 "),lO=n(FSe,"A",{href:!0});var cvt=s(lO);yxo=r(cvt,"TapasForMaskedLM"),cvt.forEach(t),xxo=r(FSe," (TAPAS model)"),FSe.forEach(t),$xo=i(O),I1=n(O,"LI",{});var TSe=s(I1);Dge=n(TSe,"STRONG",{});var fvt=s(Dge);kxo=r(fvt,"transfo-xl"),fvt.forEach(t),Sxo=r(TSe," \u2014 "),iO=n(TSe,"A",{href:!0});var mvt=s(iO);Rxo=r(mvt,"TransfoXLLMHeadModel"),mvt.forEach(t),Pxo=r(TSe," (Transformer-XL model)"),TSe.forEach(t),Bxo=i(O),N1=n(O,"LI",{});var MSe=s(N1);Gge=n(MSe,"STRONG",{});var gvt=s(Gge);Ixo=r(gvt,"unispeech"),gvt.forEach(t),Nxo=r(MSe," \u2014 "),dO=n(MSe,"A",{href:!0});var hvt=s(dO);qxo=r(hvt,"UniSpeechForPreTraining"),hvt.forEach(t),jxo=r(MSe," (UniSpeech model)"),MSe.forEach(t),Dxo=i(O),q1=n(O,"LI",{});var ESe=s(q1);Oge=n(ESe,"STRONG",{});var pvt=s(Oge);Gxo=r(pvt,"unispeech-sat"),pvt.forEach(t),Oxo=r(ESe," \u2014 "),cO=n(ESe,"A",{href:!0});var _vt=s(cO);Vxo=r(_vt,"UniSpeechSatForPreTraining"),_vt.forEach(t),Xxo=r(ESe," (UniSpeechSat model)"),ESe.forEach(t),zxo=i(O),j1=n(O,"LI",{});var CSe=s(j1);Vge=n(CSe,"STRONG",{});var uvt=s(Vge);Wxo=r(uvt,"visual_bert"),uvt.forEach(t),Qxo=r(CSe," \u2014 "),fO=n(CSe,"A",{href:!0});var bvt=s(fO);Hxo=r(bvt,"VisualBertForPreTraining"),bvt.forEach(t),Uxo=r(CSe," (VisualBERT model)"),CSe.forEach(t),Jxo=i(O),D1=n(O,"LI",{});var wSe=s(D1);Xge=n(wSe,"STRONG",{});var vvt=s(Xge);Yxo=r(vvt,"vit_mae"),vvt.forEach(t),Kxo=r(wSe," \u2014 "),mO=n(wSe,"A",{href:!0});var Fvt=s(mO);Zxo=r(Fvt,"ViTMAEForPreTraining"),Fvt.forEach(t),e$o=r(wSe," (ViTMAE model)"),wSe.forEach(t),o$o=i(O),G1=n(O,"LI",{});var ASe=s(G1);zge=n(ASe,"STRONG",{});var Tvt=s(zge);r$o=r(Tvt,"wav2vec2"),Tvt.forEach(t),t$o=r(ASe," \u2014 "),gO=n(ASe,"A",{href:!0});var Mvt=s(gO);a$o=r(Mvt,"Wav2Vec2ForPreTraining"),Mvt.forEach(t),n$o=r(ASe," (Wav2Vec2 model)"),ASe.forEach(t),s$o=i(O),O1=n(O,"LI",{});var LSe=s(O1);Wge=n(LSe,"STRONG",{});var Evt=s(Wge);l$o=r(Evt,"wav2vec2-conformer"),Evt.forEach(t),i$o=r(LSe," \u2014 "),hO=n(LSe,"A",{href:!0});var Cvt=s(hO);d$o=r(Cvt,"Wav2Vec2ConformerForPreTraining"),Cvt.forEach(t),c$o=r(LSe," (Wav2Vec2-Conformer model)"),LSe.forEach(t),f$o=i(O),V1=n(O,"LI",{});var ySe=s(V1);Qge=n(ySe,"STRONG",{});var wvt=s(Qge);m$o=r(wvt,"xlm"),wvt.forEach(t),g$o=r(ySe," \u2014 "),pO=n(ySe,"A",{href:!0});var Avt=s(pO);h$o=r(Avt,"XLMWithLMHeadModel"),Avt.forEach(t),p$o=r(ySe," (XLM model)"),ySe.forEach(t),_$o=i(O),X1=n(O,"LI",{});var xSe=s(X1);Hge=n(xSe,"STRONG",{});var Lvt=s(Hge);u$o=r(Lvt,"xlm-roberta"),Lvt.forEach(t),b$o=r(xSe," \u2014 "),_O=n(xSe,"A",{href:!0});var yvt=s(_O);v$o=r(yvt,"XLMRobertaForMaskedLM"),yvt.forEach(t),F$o=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),T$o=i(O),z1=n(O,"LI",{});var $Se=s(z1);Uge=n($Se,"STRONG",{});var xvt=s(Uge);M$o=r(xvt,"xlm-roberta-xl"),xvt.forEach(t),E$o=r($Se," \u2014 "),uO=n($Se,"A",{href:!0});var $vt=s(uO);C$o=r($vt,"XLMRobertaXLForMaskedLM"),$vt.forEach(t),w$o=r($Se," (XLM-RoBERTa-XL model)"),$Se.forEach(t),A$o=i(O),W1=n(O,"LI",{});var kSe=s(W1);Jge=n(kSe,"STRONG",{});var kvt=s(Jge);L$o=r(kvt,"xlnet"),kvt.forEach(t),y$o=r(kSe," \u2014 "),bO=n(kSe,"A",{href:!0});var Svt=s(bO);x$o=r(Svt,"XLNetLMHeadModel"),Svt.forEach(t),$$o=r(kSe," (XLNet model)"),kSe.forEach(t),O.forEach(t),k$o=i(ia),Q1=n(ia,"P",{});var SSe=s(Q1);S$o=r(SSe,"The model is set in evaluation mode by default using "),Yge=n(SSe,"CODE",{});var Rvt=s(Yge);R$o=r(Rvt,"model.eval()"),Rvt.forEach(t),P$o=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(SSe,"CODE",{});var Pvt=s(Kge);B$o=r(Pvt,"model.train()"),Pvt.forEach(t),SSe.forEach(t),I$o=i(ia),T(H1.$$.fragment,ia),ia.forEach(t),sl.forEach(t),hze=i(f),Ui=n(f,"H2",{class:!0});var FQe=s(Ui);U1=n(FQe,"A",{id:!0,class:!0,href:!0});var Bvt=s(U1);Zge=n(Bvt,"SPAN",{});var Ivt=s(Zge);T(Zy.$$.fragment,Ivt),Ivt.forEach(t),Bvt.forEach(t),N$o=i(FQe),ehe=n(FQe,"SPAN",{});var Nvt=s(ehe);q$o=r(Nvt,"AutoModelForCausalLM"),Nvt.forEach(t),FQe.forEach(t),pze=i(f),Ro=n(f,"DIV",{class:!0});var ll=s(Ro);T(e8.$$.fragment,ll),j$o=i(ll),Ji=n(ll,"P",{});var mte=s(Ji);D$o=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vO=n(mte,"A",{href:!0});var qvt=s(vO);G$o=r(qvt,"from_pretrained()"),qvt.forEach(t),O$o=r(mte," class method or the "),FO=n(mte,"A",{href:!0});var jvt=s(FO);V$o=r(jvt,"from_config()"),jvt.forEach(t),X$o=r(mte,` class
method.`),mte.forEach(t),z$o=i(ll),o8=n(ll,"P",{});var TQe=s(o8);W$o=r(TQe,"This class cannot be instantiated directly using "),ohe=n(TQe,"CODE",{});var Dvt=s(ohe);Q$o=r(Dvt,"__init__()"),Dvt.forEach(t),H$o=r(TQe," (throws an error)."),TQe.forEach(t),U$o=i(ll),ct=n(ll,"DIV",{class:!0});var wA=s(ct);T(r8.$$.fragment,wA),J$o=i(wA),rhe=n(wA,"P",{});var Gvt=s(rhe);Y$o=r(Gvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gvt.forEach(t),K$o=i(wA),Yi=n(wA,"P",{});var gte=s(Yi);Z$o=r(gte,`Note:
Loading a model from its configuration file does `),the=n(gte,"STRONG",{});var Ovt=s(the);eko=r(Ovt,"not"),Ovt.forEach(t),oko=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(gte,"A",{href:!0});var Vvt=s(TO);rko=r(Vvt,"from_pretrained()"),Vvt.forEach(t),tko=r(gte," to load the model weights."),gte.forEach(t),ako=i(wA),T(J1.$$.fragment,wA),wA.forEach(t),nko=i(ll),Ze=n(ll,"DIV",{class:!0});var da=s(Ze);T(t8.$$.fragment,da),sko=i(da),ahe=n(da,"P",{});var Xvt=s(ahe);lko=r(Xvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xvt.forEach(t),iko=i(da),ja=n(da,"P",{});var AA=s(ja);dko=r(AA,"The model class to instantiate is selected based on the "),nhe=n(AA,"CODE",{});var zvt=s(nhe);cko=r(zvt,"model_type"),zvt.forEach(t),fko=r(AA,` property of the config object (either
passed as an argument or loaded from `),she=n(AA,"CODE",{});var Wvt=s(she);mko=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),gko=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(AA,"CODE",{});var Qvt=s(lhe);hko=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),pko=r(AA,":"),AA.forEach(t),_ko=i(da),z=n(da,"UL",{});var W=s(z);Y1=n(W,"LI",{});var RSe=s(Y1);ihe=n(RSe,"STRONG",{});var Hvt=s(ihe);uko=r(Hvt,"bart"),Hvt.forEach(t),bko=r(RSe," \u2014 "),MO=n(RSe,"A",{href:!0});var Uvt=s(MO);vko=r(Uvt,"BartForCausalLM"),Uvt.forEach(t),Fko=r(RSe," (BART model)"),RSe.forEach(t),Tko=i(W),K1=n(W,"LI",{});var PSe=s(K1);dhe=n(PSe,"STRONG",{});var Jvt=s(dhe);Mko=r(Jvt,"bert"),Jvt.forEach(t),Eko=r(PSe," \u2014 "),EO=n(PSe,"A",{href:!0});var Yvt=s(EO);Cko=r(Yvt,"BertLMHeadModel"),Yvt.forEach(t),wko=r(PSe," (BERT model)"),PSe.forEach(t),Ako=i(W),Z1=n(W,"LI",{});var BSe=s(Z1);che=n(BSe,"STRONG",{});var Kvt=s(che);Lko=r(Kvt,"bert-generation"),Kvt.forEach(t),yko=r(BSe," \u2014 "),CO=n(BSe,"A",{href:!0});var Zvt=s(CO);xko=r(Zvt,"BertGenerationDecoder"),Zvt.forEach(t),$ko=r(BSe," (Bert Generation model)"),BSe.forEach(t),kko=i(W),e7=n(W,"LI",{});var ISe=s(e7);fhe=n(ISe,"STRONG",{});var eFt=s(fhe);Sko=r(eFt,"big_bird"),eFt.forEach(t),Rko=r(ISe," \u2014 "),wO=n(ISe,"A",{href:!0});var oFt=s(wO);Pko=r(oFt,"BigBirdForCausalLM"),oFt.forEach(t),Bko=r(ISe," (BigBird model)"),ISe.forEach(t),Iko=i(W),o7=n(W,"LI",{});var NSe=s(o7);mhe=n(NSe,"STRONG",{});var rFt=s(mhe);Nko=r(rFt,"bigbird_pegasus"),rFt.forEach(t),qko=r(NSe," \u2014 "),AO=n(NSe,"A",{href:!0});var tFt=s(AO);jko=r(tFt,"BigBirdPegasusForCausalLM"),tFt.forEach(t),Dko=r(NSe," (BigBird-Pegasus model)"),NSe.forEach(t),Gko=i(W),r7=n(W,"LI",{});var qSe=s(r7);ghe=n(qSe,"STRONG",{});var aFt=s(ghe);Oko=r(aFt,"blenderbot"),aFt.forEach(t),Vko=r(qSe," \u2014 "),LO=n(qSe,"A",{href:!0});var nFt=s(LO);Xko=r(nFt,"BlenderbotForCausalLM"),nFt.forEach(t),zko=r(qSe," (Blenderbot model)"),qSe.forEach(t),Wko=i(W),t7=n(W,"LI",{});var jSe=s(t7);hhe=n(jSe,"STRONG",{});var sFt=s(hhe);Qko=r(sFt,"blenderbot-small"),sFt.forEach(t),Hko=r(jSe," \u2014 "),yO=n(jSe,"A",{href:!0});var lFt=s(yO);Uko=r(lFt,"BlenderbotSmallForCausalLM"),lFt.forEach(t),Jko=r(jSe," (BlenderbotSmall model)"),jSe.forEach(t),Yko=i(W),a7=n(W,"LI",{});var DSe=s(a7);phe=n(DSe,"STRONG",{});var iFt=s(phe);Kko=r(iFt,"bloom"),iFt.forEach(t),Zko=r(DSe," \u2014 "),xO=n(DSe,"A",{href:!0});var dFt=s(xO);eSo=r(dFt,"BloomForCausalLM"),dFt.forEach(t),oSo=r(DSe," (BLOOM model)"),DSe.forEach(t),rSo=i(W),n7=n(W,"LI",{});var GSe=s(n7);_he=n(GSe,"STRONG",{});var cFt=s(_he);tSo=r(cFt,"camembert"),cFt.forEach(t),aSo=r(GSe," \u2014 "),$O=n(GSe,"A",{href:!0});var fFt=s($O);nSo=r(fFt,"CamembertForCausalLM"),fFt.forEach(t),sSo=r(GSe," (CamemBERT model)"),GSe.forEach(t),lSo=i(W),s7=n(W,"LI",{});var OSe=s(s7);uhe=n(OSe,"STRONG",{});var mFt=s(uhe);iSo=r(mFt,"codegen"),mFt.forEach(t),dSo=r(OSe," \u2014 "),kO=n(OSe,"A",{href:!0});var gFt=s(kO);cSo=r(gFt,"CodeGenForCausalLM"),gFt.forEach(t),fSo=r(OSe," (CodeGen model)"),OSe.forEach(t),mSo=i(W),l7=n(W,"LI",{});var VSe=s(l7);bhe=n(VSe,"STRONG",{});var hFt=s(bhe);gSo=r(hFt,"ctrl"),hFt.forEach(t),hSo=r(VSe," \u2014 "),SO=n(VSe,"A",{href:!0});var pFt=s(SO);pSo=r(pFt,"CTRLLMHeadModel"),pFt.forEach(t),_So=r(VSe," (CTRL model)"),VSe.forEach(t),uSo=i(W),i7=n(W,"LI",{});var XSe=s(i7);vhe=n(XSe,"STRONG",{});var _Ft=s(vhe);bSo=r(_Ft,"data2vec-text"),_Ft.forEach(t),vSo=r(XSe," \u2014 "),RO=n(XSe,"A",{href:!0});var uFt=s(RO);FSo=r(uFt,"Data2VecTextForCausalLM"),uFt.forEach(t),TSo=r(XSe," (Data2VecText model)"),XSe.forEach(t),MSo=i(W),d7=n(W,"LI",{});var zSe=s(d7);Fhe=n(zSe,"STRONG",{});var bFt=s(Fhe);ESo=r(bFt,"electra"),bFt.forEach(t),CSo=r(zSe," \u2014 "),PO=n(zSe,"A",{href:!0});var vFt=s(PO);wSo=r(vFt,"ElectraForCausalLM"),vFt.forEach(t),ASo=r(zSe," (ELECTRA model)"),zSe.forEach(t),LSo=i(W),c7=n(W,"LI",{});var WSe=s(c7);The=n(WSe,"STRONG",{});var FFt=s(The);ySo=r(FFt,"gpt2"),FFt.forEach(t),xSo=r(WSe," \u2014 "),BO=n(WSe,"A",{href:!0});var TFt=s(BO);$So=r(TFt,"GPT2LMHeadModel"),TFt.forEach(t),kSo=r(WSe," (OpenAI GPT-2 model)"),WSe.forEach(t),SSo=i(W),f7=n(W,"LI",{});var QSe=s(f7);Mhe=n(QSe,"STRONG",{});var MFt=s(Mhe);RSo=r(MFt,"gpt_neo"),MFt.forEach(t),PSo=r(QSe," \u2014 "),IO=n(QSe,"A",{href:!0});var EFt=s(IO);BSo=r(EFt,"GPTNeoForCausalLM"),EFt.forEach(t),ISo=r(QSe," (GPT Neo model)"),QSe.forEach(t),NSo=i(W),m7=n(W,"LI",{});var HSe=s(m7);Ehe=n(HSe,"STRONG",{});var CFt=s(Ehe);qSo=r(CFt,"gpt_neox"),CFt.forEach(t),jSo=r(HSe," \u2014 "),NO=n(HSe,"A",{href:!0});var wFt=s(NO);DSo=r(wFt,"GPTNeoXForCausalLM"),wFt.forEach(t),GSo=r(HSe," (GPT NeoX model)"),HSe.forEach(t),OSo=i(W),g7=n(W,"LI",{});var USe=s(g7);Che=n(USe,"STRONG",{});var AFt=s(Che);VSo=r(AFt,"gptj"),AFt.forEach(t),XSo=r(USe," \u2014 "),qO=n(USe,"A",{href:!0});var LFt=s(qO);zSo=r(LFt,"GPTJForCausalLM"),LFt.forEach(t),WSo=r(USe," (GPT-J model)"),USe.forEach(t),QSo=i(W),h7=n(W,"LI",{});var JSe=s(h7);whe=n(JSe,"STRONG",{});var yFt=s(whe);HSo=r(yFt,"marian"),yFt.forEach(t),USo=r(JSe," \u2014 "),jO=n(JSe,"A",{href:!0});var xFt=s(jO);JSo=r(xFt,"MarianForCausalLM"),xFt.forEach(t),YSo=r(JSe," (Marian model)"),JSe.forEach(t),KSo=i(W),p7=n(W,"LI",{});var YSe=s(p7);Ahe=n(YSe,"STRONG",{});var $Ft=s(Ahe);ZSo=r($Ft,"mbart"),$Ft.forEach(t),eRo=r(YSe," \u2014 "),DO=n(YSe,"A",{href:!0});var kFt=s(DO);oRo=r(kFt,"MBartForCausalLM"),kFt.forEach(t),rRo=r(YSe," (mBART model)"),YSe.forEach(t),tRo=i(W),_7=n(W,"LI",{});var KSe=s(_7);Lhe=n(KSe,"STRONG",{});var SFt=s(Lhe);aRo=r(SFt,"megatron-bert"),SFt.forEach(t),nRo=r(KSe," \u2014 "),GO=n(KSe,"A",{href:!0});var RFt=s(GO);sRo=r(RFt,"MegatronBertForCausalLM"),RFt.forEach(t),lRo=r(KSe," (Megatron-BERT model)"),KSe.forEach(t),iRo=i(W),u7=n(W,"LI",{});var ZSe=s(u7);yhe=n(ZSe,"STRONG",{});var PFt=s(yhe);dRo=r(PFt,"mvp"),PFt.forEach(t),cRo=r(ZSe," \u2014 "),OO=n(ZSe,"A",{href:!0});var BFt=s(OO);fRo=r(BFt,"MvpForCausalLM"),BFt.forEach(t),mRo=r(ZSe," (MVP model)"),ZSe.forEach(t),gRo=i(W),b7=n(W,"LI",{});var eRe=s(b7);xhe=n(eRe,"STRONG",{});var IFt=s(xhe);hRo=r(IFt,"openai-gpt"),IFt.forEach(t),pRo=r(eRe," \u2014 "),VO=n(eRe,"A",{href:!0});var NFt=s(VO);_Ro=r(NFt,"OpenAIGPTLMHeadModel"),NFt.forEach(t),uRo=r(eRe," (OpenAI GPT model)"),eRe.forEach(t),bRo=i(W),v7=n(W,"LI",{});var oRe=s(v7);$he=n(oRe,"STRONG",{});var qFt=s($he);vRo=r(qFt,"opt"),qFt.forEach(t),FRo=r(oRe," \u2014 "),XO=n(oRe,"A",{href:!0});var jFt=s(XO);TRo=r(jFt,"OPTForCausalLM"),jFt.forEach(t),MRo=r(oRe," (OPT model)"),oRe.forEach(t),ERo=i(W),F7=n(W,"LI",{});var rRe=s(F7);khe=n(rRe,"STRONG",{});var DFt=s(khe);CRo=r(DFt,"pegasus"),DFt.forEach(t),wRo=r(rRe," \u2014 "),zO=n(rRe,"A",{href:!0});var GFt=s(zO);ARo=r(GFt,"PegasusForCausalLM"),GFt.forEach(t),LRo=r(rRe," (Pegasus model)"),rRe.forEach(t),yRo=i(W),T7=n(W,"LI",{});var tRe=s(T7);She=n(tRe,"STRONG",{});var OFt=s(She);xRo=r(OFt,"plbart"),OFt.forEach(t),$Ro=r(tRe," \u2014 "),WO=n(tRe,"A",{href:!0});var VFt=s(WO);kRo=r(VFt,"PLBartForCausalLM"),VFt.forEach(t),SRo=r(tRe," (PLBart model)"),tRe.forEach(t),RRo=i(W),M7=n(W,"LI",{});var aRe=s(M7);Rhe=n(aRe,"STRONG",{});var XFt=s(Rhe);PRo=r(XFt,"prophetnet"),XFt.forEach(t),BRo=r(aRe," \u2014 "),QO=n(aRe,"A",{href:!0});var zFt=s(QO);IRo=r(zFt,"ProphetNetForCausalLM"),zFt.forEach(t),NRo=r(aRe," (ProphetNet model)"),aRe.forEach(t),qRo=i(W),E7=n(W,"LI",{});var nRe=s(E7);Phe=n(nRe,"STRONG",{});var WFt=s(Phe);jRo=r(WFt,"qdqbert"),WFt.forEach(t),DRo=r(nRe," \u2014 "),HO=n(nRe,"A",{href:!0});var QFt=s(HO);GRo=r(QFt,"QDQBertLMHeadModel"),QFt.forEach(t),ORo=r(nRe," (QDQBert model)"),nRe.forEach(t),VRo=i(W),C7=n(W,"LI",{});var sRe=s(C7);Bhe=n(sRe,"STRONG",{});var HFt=s(Bhe);XRo=r(HFt,"reformer"),HFt.forEach(t),zRo=r(sRe," \u2014 "),UO=n(sRe,"A",{href:!0});var UFt=s(UO);WRo=r(UFt,"ReformerModelWithLMHead"),UFt.forEach(t),QRo=r(sRe," (Reformer model)"),sRe.forEach(t),HRo=i(W),w7=n(W,"LI",{});var lRe=s(w7);Ihe=n(lRe,"STRONG",{});var JFt=s(Ihe);URo=r(JFt,"rembert"),JFt.forEach(t),JRo=r(lRe," \u2014 "),JO=n(lRe,"A",{href:!0});var YFt=s(JO);YRo=r(YFt,"RemBertForCausalLM"),YFt.forEach(t),KRo=r(lRe," (RemBERT model)"),lRe.forEach(t),ZRo=i(W),A7=n(W,"LI",{});var iRe=s(A7);Nhe=n(iRe,"STRONG",{});var KFt=s(Nhe);ePo=r(KFt,"roberta"),KFt.forEach(t),oPo=r(iRe," \u2014 "),YO=n(iRe,"A",{href:!0});var ZFt=s(YO);rPo=r(ZFt,"RobertaForCausalLM"),ZFt.forEach(t),tPo=r(iRe," (RoBERTa model)"),iRe.forEach(t),aPo=i(W),L7=n(W,"LI",{});var dRe=s(L7);qhe=n(dRe,"STRONG",{});var e6t=s(qhe);nPo=r(e6t,"roformer"),e6t.forEach(t),sPo=r(dRe," \u2014 "),KO=n(dRe,"A",{href:!0});var o6t=s(KO);lPo=r(o6t,"RoFormerForCausalLM"),o6t.forEach(t),iPo=r(dRe," (RoFormer model)"),dRe.forEach(t),dPo=i(W),y7=n(W,"LI",{});var cRe=s(y7);jhe=n(cRe,"STRONG",{});var r6t=s(jhe);cPo=r(r6t,"speech_to_text_2"),r6t.forEach(t),fPo=r(cRe," \u2014 "),ZO=n(cRe,"A",{href:!0});var t6t=s(ZO);mPo=r(t6t,"Speech2Text2ForCausalLM"),t6t.forEach(t),gPo=r(cRe," (Speech2Text2 model)"),cRe.forEach(t),hPo=i(W),x7=n(W,"LI",{});var fRe=s(x7);Dhe=n(fRe,"STRONG",{});var a6t=s(Dhe);pPo=r(a6t,"transfo-xl"),a6t.forEach(t),_Po=r(fRe," \u2014 "),eV=n(fRe,"A",{href:!0});var n6t=s(eV);uPo=r(n6t,"TransfoXLLMHeadModel"),n6t.forEach(t),bPo=r(fRe," (Transformer-XL model)"),fRe.forEach(t),vPo=i(W),$7=n(W,"LI",{});var mRe=s($7);Ghe=n(mRe,"STRONG",{});var s6t=s(Ghe);FPo=r(s6t,"trocr"),s6t.forEach(t),TPo=r(mRe," \u2014 "),oV=n(mRe,"A",{href:!0});var l6t=s(oV);MPo=r(l6t,"TrOCRForCausalLM"),l6t.forEach(t),EPo=r(mRe," (TrOCR model)"),mRe.forEach(t),CPo=i(W),k7=n(W,"LI",{});var gRe=s(k7);Ohe=n(gRe,"STRONG",{});var i6t=s(Ohe);wPo=r(i6t,"xglm"),i6t.forEach(t),APo=r(gRe," \u2014 "),rV=n(gRe,"A",{href:!0});var d6t=s(rV);LPo=r(d6t,"XGLMForCausalLM"),d6t.forEach(t),yPo=r(gRe," (XGLM model)"),gRe.forEach(t),xPo=i(W),S7=n(W,"LI",{});var hRe=s(S7);Vhe=n(hRe,"STRONG",{});var c6t=s(Vhe);$Po=r(c6t,"xlm"),c6t.forEach(t),kPo=r(hRe," \u2014 "),tV=n(hRe,"A",{href:!0});var f6t=s(tV);SPo=r(f6t,"XLMWithLMHeadModel"),f6t.forEach(t),RPo=r(hRe," (XLM model)"),hRe.forEach(t),PPo=i(W),R7=n(W,"LI",{});var pRe=s(R7);Xhe=n(pRe,"STRONG",{});var m6t=s(Xhe);BPo=r(m6t,"xlm-prophetnet"),m6t.forEach(t),IPo=r(pRe," \u2014 "),aV=n(pRe,"A",{href:!0});var g6t=s(aV);NPo=r(g6t,"XLMProphetNetForCausalLM"),g6t.forEach(t),qPo=r(pRe," (XLM-ProphetNet model)"),pRe.forEach(t),jPo=i(W),P7=n(W,"LI",{});var _Re=s(P7);zhe=n(_Re,"STRONG",{});var h6t=s(zhe);DPo=r(h6t,"xlm-roberta"),h6t.forEach(t),GPo=r(_Re," \u2014 "),nV=n(_Re,"A",{href:!0});var p6t=s(nV);OPo=r(p6t,"XLMRobertaForCausalLM"),p6t.forEach(t),VPo=r(_Re," (XLM-RoBERTa model)"),_Re.forEach(t),XPo=i(W),B7=n(W,"LI",{});var uRe=s(B7);Whe=n(uRe,"STRONG",{});var _6t=s(Whe);zPo=r(_6t,"xlm-roberta-xl"),_6t.forEach(t),WPo=r(uRe," \u2014 "),sV=n(uRe,"A",{href:!0});var u6t=s(sV);QPo=r(u6t,"XLMRobertaXLForCausalLM"),u6t.forEach(t),HPo=r(uRe," (XLM-RoBERTa-XL model)"),uRe.forEach(t),UPo=i(W),I7=n(W,"LI",{});var bRe=s(I7);Qhe=n(bRe,"STRONG",{});var b6t=s(Qhe);JPo=r(b6t,"xlnet"),b6t.forEach(t),YPo=r(bRe," \u2014 "),lV=n(bRe,"A",{href:!0});var v6t=s(lV);KPo=r(v6t,"XLNetLMHeadModel"),v6t.forEach(t),ZPo=r(bRe," (XLNet model)"),bRe.forEach(t),W.forEach(t),eBo=i(da),N7=n(da,"P",{});var vRe=s(N7);oBo=r(vRe,"The model is set in evaluation mode by default using "),Hhe=n(vRe,"CODE",{});var F6t=s(Hhe);rBo=r(F6t,"model.eval()"),F6t.forEach(t),tBo=r(vRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=n(vRe,"CODE",{});var T6t=s(Uhe);aBo=r(T6t,"model.train()"),T6t.forEach(t),vRe.forEach(t),nBo=i(da),T(q7.$$.fragment,da),da.forEach(t),ll.forEach(t),_ze=i(f),Ki=n(f,"H2",{class:!0});var MQe=s(Ki);j7=n(MQe,"A",{id:!0,class:!0,href:!0});var M6t=s(j7);Jhe=n(M6t,"SPAN",{});var E6t=s(Jhe);T(a8.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),sBo=i(MQe),Yhe=n(MQe,"SPAN",{});var C6t=s(Yhe);lBo=r(C6t,"AutoModelForMaskedLM"),C6t.forEach(t),MQe.forEach(t),uze=i(f),Po=n(f,"DIV",{class:!0});var il=s(Po);T(n8.$$.fragment,il),iBo=i(il),Zi=n(il,"P",{});var hte=s(Zi);dBo=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iV=n(hte,"A",{href:!0});var w6t=s(iV);cBo=r(w6t,"from_pretrained()"),w6t.forEach(t),fBo=r(hte," class method or the "),dV=n(hte,"A",{href:!0});var A6t=s(dV);mBo=r(A6t,"from_config()"),A6t.forEach(t),gBo=r(hte,` class
method.`),hte.forEach(t),hBo=i(il),s8=n(il,"P",{});var EQe=s(s8);pBo=r(EQe,"This class cannot be instantiated directly using "),Khe=n(EQe,"CODE",{});var L6t=s(Khe);_Bo=r(L6t,"__init__()"),L6t.forEach(t),uBo=r(EQe," (throws an error)."),EQe.forEach(t),bBo=i(il),ft=n(il,"DIV",{class:!0});var LA=s(ft);T(l8.$$.fragment,LA),vBo=i(LA),Zhe=n(LA,"P",{});var y6t=s(Zhe);FBo=r(y6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y6t.forEach(t),TBo=i(LA),ed=n(LA,"P",{});var pte=s(ed);MBo=r(pte,`Note:
Loading a model from its configuration file does `),epe=n(pte,"STRONG",{});var x6t=s(epe);EBo=r(x6t,"not"),x6t.forEach(t),CBo=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(pte,"A",{href:!0});var $6t=s(cV);wBo=r($6t,"from_pretrained()"),$6t.forEach(t),ABo=r(pte," to load the model weights."),pte.forEach(t),LBo=i(LA),T(D7.$$.fragment,LA),LA.forEach(t),yBo=i(il),eo=n(il,"DIV",{class:!0});var ca=s(eo);T(i8.$$.fragment,ca),xBo=i(ca),ope=n(ca,"P",{});var k6t=s(ope);$Bo=r(k6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k6t.forEach(t),kBo=i(ca),Da=n(ca,"P",{});var yA=s(Da);SBo=r(yA,"The model class to instantiate is selected based on the "),rpe=n(yA,"CODE",{});var S6t=s(rpe);RBo=r(S6t,"model_type"),S6t.forEach(t),PBo=r(yA,` property of the config object (either
passed as an argument or loaded from `),tpe=n(yA,"CODE",{});var R6t=s(tpe);BBo=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),IBo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(yA,"CODE",{});var P6t=s(ape);NBo=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),qBo=r(yA,":"),yA.forEach(t),jBo=i(ca),Q=n(ca,"UL",{});var H=s(Q);G7=n(H,"LI",{});var FRe=s(G7);npe=n(FRe,"STRONG",{});var B6t=s(npe);DBo=r(B6t,"albert"),B6t.forEach(t),GBo=r(FRe," \u2014 "),fV=n(FRe,"A",{href:!0});var I6t=s(fV);OBo=r(I6t,"AlbertForMaskedLM"),I6t.forEach(t),VBo=r(FRe," (ALBERT model)"),FRe.forEach(t),XBo=i(H),O7=n(H,"LI",{});var TRe=s(O7);spe=n(TRe,"STRONG",{});var N6t=s(spe);zBo=r(N6t,"bart"),N6t.forEach(t),WBo=r(TRe," \u2014 "),mV=n(TRe,"A",{href:!0});var q6t=s(mV);QBo=r(q6t,"BartForConditionalGeneration"),q6t.forEach(t),HBo=r(TRe," (BART model)"),TRe.forEach(t),UBo=i(H),V7=n(H,"LI",{});var MRe=s(V7);lpe=n(MRe,"STRONG",{});var j6t=s(lpe);JBo=r(j6t,"bert"),j6t.forEach(t),YBo=r(MRe," \u2014 "),gV=n(MRe,"A",{href:!0});var D6t=s(gV);KBo=r(D6t,"BertForMaskedLM"),D6t.forEach(t),ZBo=r(MRe," (BERT model)"),MRe.forEach(t),eIo=i(H),X7=n(H,"LI",{});var ERe=s(X7);ipe=n(ERe,"STRONG",{});var G6t=s(ipe);oIo=r(G6t,"big_bird"),G6t.forEach(t),rIo=r(ERe," \u2014 "),hV=n(ERe,"A",{href:!0});var O6t=s(hV);tIo=r(O6t,"BigBirdForMaskedLM"),O6t.forEach(t),aIo=r(ERe," (BigBird model)"),ERe.forEach(t),nIo=i(H),z7=n(H,"LI",{});var CRe=s(z7);dpe=n(CRe,"STRONG",{});var V6t=s(dpe);sIo=r(V6t,"camembert"),V6t.forEach(t),lIo=r(CRe," \u2014 "),pV=n(CRe,"A",{href:!0});var X6t=s(pV);iIo=r(X6t,"CamembertForMaskedLM"),X6t.forEach(t),dIo=r(CRe," (CamemBERT model)"),CRe.forEach(t),cIo=i(H),W7=n(H,"LI",{});var wRe=s(W7);cpe=n(wRe,"STRONG",{});var z6t=s(cpe);fIo=r(z6t,"convbert"),z6t.forEach(t),mIo=r(wRe," \u2014 "),_V=n(wRe,"A",{href:!0});var W6t=s(_V);gIo=r(W6t,"ConvBertForMaskedLM"),W6t.forEach(t),hIo=r(wRe," (ConvBERT model)"),wRe.forEach(t),pIo=i(H),Q7=n(H,"LI",{});var ARe=s(Q7);fpe=n(ARe,"STRONG",{});var Q6t=s(fpe);_Io=r(Q6t,"data2vec-text"),Q6t.forEach(t),uIo=r(ARe," \u2014 "),uV=n(ARe,"A",{href:!0});var H6t=s(uV);bIo=r(H6t,"Data2VecTextForMaskedLM"),H6t.forEach(t),vIo=r(ARe," (Data2VecText model)"),ARe.forEach(t),FIo=i(H),H7=n(H,"LI",{});var LRe=s(H7);mpe=n(LRe,"STRONG",{});var U6t=s(mpe);TIo=r(U6t,"deberta"),U6t.forEach(t),MIo=r(LRe," \u2014 "),bV=n(LRe,"A",{href:!0});var J6t=s(bV);EIo=r(J6t,"DebertaForMaskedLM"),J6t.forEach(t),CIo=r(LRe," (DeBERTa model)"),LRe.forEach(t),wIo=i(H),U7=n(H,"LI",{});var yRe=s(U7);gpe=n(yRe,"STRONG",{});var Y6t=s(gpe);AIo=r(Y6t,"deberta-v2"),Y6t.forEach(t),LIo=r(yRe," \u2014 "),vV=n(yRe,"A",{href:!0});var K6t=s(vV);yIo=r(K6t,"DebertaV2ForMaskedLM"),K6t.forEach(t),xIo=r(yRe," (DeBERTa-v2 model)"),yRe.forEach(t),$Io=i(H),J7=n(H,"LI",{});var xRe=s(J7);hpe=n(xRe,"STRONG",{});var Z6t=s(hpe);kIo=r(Z6t,"distilbert"),Z6t.forEach(t),SIo=r(xRe," \u2014 "),FV=n(xRe,"A",{href:!0});var eTt=s(FV);RIo=r(eTt,"DistilBertForMaskedLM"),eTt.forEach(t),PIo=r(xRe," (DistilBERT model)"),xRe.forEach(t),BIo=i(H),Y7=n(H,"LI",{});var $Re=s(Y7);ppe=n($Re,"STRONG",{});var oTt=s(ppe);IIo=r(oTt,"electra"),oTt.forEach(t),NIo=r($Re," \u2014 "),TV=n($Re,"A",{href:!0});var rTt=s(TV);qIo=r(rTt,"ElectraForMaskedLM"),rTt.forEach(t),jIo=r($Re," (ELECTRA model)"),$Re.forEach(t),DIo=i(H),K7=n(H,"LI",{});var kRe=s(K7);_pe=n(kRe,"STRONG",{});var tTt=s(_pe);GIo=r(tTt,"flaubert"),tTt.forEach(t),OIo=r(kRe," \u2014 "),MV=n(kRe,"A",{href:!0});var aTt=s(MV);VIo=r(aTt,"FlaubertWithLMHeadModel"),aTt.forEach(t),XIo=r(kRe," (FlauBERT model)"),kRe.forEach(t),zIo=i(H),Z7=n(H,"LI",{});var SRe=s(Z7);upe=n(SRe,"STRONG",{});var nTt=s(upe);WIo=r(nTt,"fnet"),nTt.forEach(t),QIo=r(SRe," \u2014 "),EV=n(SRe,"A",{href:!0});var sTt=s(EV);HIo=r(sTt,"FNetForMaskedLM"),sTt.forEach(t),UIo=r(SRe," (FNet model)"),SRe.forEach(t),JIo=i(H),e2=n(H,"LI",{});var RRe=s(e2);bpe=n(RRe,"STRONG",{});var lTt=s(bpe);YIo=r(lTt,"funnel"),lTt.forEach(t),KIo=r(RRe," \u2014 "),CV=n(RRe,"A",{href:!0});var iTt=s(CV);ZIo=r(iTt,"FunnelForMaskedLM"),iTt.forEach(t),eNo=r(RRe," (Funnel Transformer model)"),RRe.forEach(t),oNo=i(H),o2=n(H,"LI",{});var PRe=s(o2);vpe=n(PRe,"STRONG",{});var dTt=s(vpe);rNo=r(dTt,"ibert"),dTt.forEach(t),tNo=r(PRe," \u2014 "),wV=n(PRe,"A",{href:!0});var cTt=s(wV);aNo=r(cTt,"IBertForMaskedLM"),cTt.forEach(t),nNo=r(PRe," (I-BERT model)"),PRe.forEach(t),sNo=i(H),r2=n(H,"LI",{});var BRe=s(r2);Fpe=n(BRe,"STRONG",{});var fTt=s(Fpe);lNo=r(fTt,"layoutlm"),fTt.forEach(t),iNo=r(BRe," \u2014 "),AV=n(BRe,"A",{href:!0});var mTt=s(AV);dNo=r(mTt,"LayoutLMForMaskedLM"),mTt.forEach(t),cNo=r(BRe," (LayoutLM model)"),BRe.forEach(t),fNo=i(H),t2=n(H,"LI",{});var IRe=s(t2);Tpe=n(IRe,"STRONG",{});var gTt=s(Tpe);mNo=r(gTt,"longformer"),gTt.forEach(t),gNo=r(IRe," \u2014 "),LV=n(IRe,"A",{href:!0});var hTt=s(LV);hNo=r(hTt,"LongformerForMaskedLM"),hTt.forEach(t),pNo=r(IRe," (Longformer model)"),IRe.forEach(t),_No=i(H),a2=n(H,"LI",{});var NRe=s(a2);Mpe=n(NRe,"STRONG",{});var pTt=s(Mpe);uNo=r(pTt,"luke"),pTt.forEach(t),bNo=r(NRe," \u2014 "),yV=n(NRe,"A",{href:!0});var _Tt=s(yV);vNo=r(_Tt,"LukeForMaskedLM"),_Tt.forEach(t),FNo=r(NRe," (LUKE model)"),NRe.forEach(t),TNo=i(H),n2=n(H,"LI",{});var qRe=s(n2);Epe=n(qRe,"STRONG",{});var uTt=s(Epe);MNo=r(uTt,"mbart"),uTt.forEach(t),ENo=r(qRe," \u2014 "),xV=n(qRe,"A",{href:!0});var bTt=s(xV);CNo=r(bTt,"MBartForConditionalGeneration"),bTt.forEach(t),wNo=r(qRe," (mBART model)"),qRe.forEach(t),ANo=i(H),s2=n(H,"LI",{});var jRe=s(s2);Cpe=n(jRe,"STRONG",{});var vTt=s(Cpe);LNo=r(vTt,"megatron-bert"),vTt.forEach(t),yNo=r(jRe," \u2014 "),$V=n(jRe,"A",{href:!0});var FTt=s($V);xNo=r(FTt,"MegatronBertForMaskedLM"),FTt.forEach(t),$No=r(jRe," (Megatron-BERT model)"),jRe.forEach(t),kNo=i(H),l2=n(H,"LI",{});var DRe=s(l2);wpe=n(DRe,"STRONG",{});var TTt=s(wpe);SNo=r(TTt,"mobilebert"),TTt.forEach(t),RNo=r(DRe," \u2014 "),kV=n(DRe,"A",{href:!0});var MTt=s(kV);PNo=r(MTt,"MobileBertForMaskedLM"),MTt.forEach(t),BNo=r(DRe," (MobileBERT model)"),DRe.forEach(t),INo=i(H),i2=n(H,"LI",{});var GRe=s(i2);Ape=n(GRe,"STRONG",{});var ETt=s(Ape);NNo=r(ETt,"mpnet"),ETt.forEach(t),qNo=r(GRe," \u2014 "),SV=n(GRe,"A",{href:!0});var CTt=s(SV);jNo=r(CTt,"MPNetForMaskedLM"),CTt.forEach(t),DNo=r(GRe," (MPNet model)"),GRe.forEach(t),GNo=i(H),d2=n(H,"LI",{});var ORe=s(d2);Lpe=n(ORe,"STRONG",{});var wTt=s(Lpe);ONo=r(wTt,"mvp"),wTt.forEach(t),VNo=r(ORe," \u2014 "),RV=n(ORe,"A",{href:!0});var ATt=s(RV);XNo=r(ATt,"MvpForConditionalGeneration"),ATt.forEach(t),zNo=r(ORe," (MVP model)"),ORe.forEach(t),WNo=i(H),c2=n(H,"LI",{});var VRe=s(c2);ype=n(VRe,"STRONG",{});var LTt=s(ype);QNo=r(LTt,"nezha"),LTt.forEach(t),HNo=r(VRe," \u2014 "),PV=n(VRe,"A",{href:!0});var yTt=s(PV);UNo=r(yTt,"NezhaForMaskedLM"),yTt.forEach(t),JNo=r(VRe," (Nezha model)"),VRe.forEach(t),YNo=i(H),f2=n(H,"LI",{});var XRe=s(f2);xpe=n(XRe,"STRONG",{});var xTt=s(xpe);KNo=r(xTt,"nystromformer"),xTt.forEach(t),ZNo=r(XRe," \u2014 "),BV=n(XRe,"A",{href:!0});var $Tt=s(BV);eqo=r($Tt,"NystromformerForMaskedLM"),$Tt.forEach(t),oqo=r(XRe," (Nystr\xF6mformer model)"),XRe.forEach(t),rqo=i(H),m2=n(H,"LI",{});var zRe=s(m2);$pe=n(zRe,"STRONG",{});var kTt=s($pe);tqo=r(kTt,"perceiver"),kTt.forEach(t),aqo=r(zRe," \u2014 "),IV=n(zRe,"A",{href:!0});var STt=s(IV);nqo=r(STt,"PerceiverForMaskedLM"),STt.forEach(t),sqo=r(zRe," (Perceiver model)"),zRe.forEach(t),lqo=i(H),g2=n(H,"LI",{});var WRe=s(g2);kpe=n(WRe,"STRONG",{});var RTt=s(kpe);iqo=r(RTt,"qdqbert"),RTt.forEach(t),dqo=r(WRe," \u2014 "),NV=n(WRe,"A",{href:!0});var PTt=s(NV);cqo=r(PTt,"QDQBertForMaskedLM"),PTt.forEach(t),fqo=r(WRe," (QDQBert model)"),WRe.forEach(t),mqo=i(H),h2=n(H,"LI",{});var QRe=s(h2);Spe=n(QRe,"STRONG",{});var BTt=s(Spe);gqo=r(BTt,"reformer"),BTt.forEach(t),hqo=r(QRe," \u2014 "),qV=n(QRe,"A",{href:!0});var ITt=s(qV);pqo=r(ITt,"ReformerForMaskedLM"),ITt.forEach(t),_qo=r(QRe," (Reformer model)"),QRe.forEach(t),uqo=i(H),p2=n(H,"LI",{});var HRe=s(p2);Rpe=n(HRe,"STRONG",{});var NTt=s(Rpe);bqo=r(NTt,"rembert"),NTt.forEach(t),vqo=r(HRe," \u2014 "),jV=n(HRe,"A",{href:!0});var qTt=s(jV);Fqo=r(qTt,"RemBertForMaskedLM"),qTt.forEach(t),Tqo=r(HRe," (RemBERT model)"),HRe.forEach(t),Mqo=i(H),_2=n(H,"LI",{});var URe=s(_2);Ppe=n(URe,"STRONG",{});var jTt=s(Ppe);Eqo=r(jTt,"roberta"),jTt.forEach(t),Cqo=r(URe," \u2014 "),DV=n(URe,"A",{href:!0});var DTt=s(DV);wqo=r(DTt,"RobertaForMaskedLM"),DTt.forEach(t),Aqo=r(URe," (RoBERTa model)"),URe.forEach(t),Lqo=i(H),u2=n(H,"LI",{});var JRe=s(u2);Bpe=n(JRe,"STRONG",{});var GTt=s(Bpe);yqo=r(GTt,"roformer"),GTt.forEach(t),xqo=r(JRe," \u2014 "),GV=n(JRe,"A",{href:!0});var OTt=s(GV);$qo=r(OTt,"RoFormerForMaskedLM"),OTt.forEach(t),kqo=r(JRe," (RoFormer model)"),JRe.forEach(t),Sqo=i(H),b2=n(H,"LI",{});var YRe=s(b2);Ipe=n(YRe,"STRONG",{});var VTt=s(Ipe);Rqo=r(VTt,"squeezebert"),VTt.forEach(t),Pqo=r(YRe," \u2014 "),OV=n(YRe,"A",{href:!0});var XTt=s(OV);Bqo=r(XTt,"SqueezeBertForMaskedLM"),XTt.forEach(t),Iqo=r(YRe," (SqueezeBERT model)"),YRe.forEach(t),Nqo=i(H),v2=n(H,"LI",{});var KRe=s(v2);Npe=n(KRe,"STRONG",{});var zTt=s(Npe);qqo=r(zTt,"tapas"),zTt.forEach(t),jqo=r(KRe," \u2014 "),VV=n(KRe,"A",{href:!0});var WTt=s(VV);Dqo=r(WTt,"TapasForMaskedLM"),WTt.forEach(t),Gqo=r(KRe," (TAPAS model)"),KRe.forEach(t),Oqo=i(H),F2=n(H,"LI",{});var ZRe=s(F2);qpe=n(ZRe,"STRONG",{});var QTt=s(qpe);Vqo=r(QTt,"wav2vec2"),QTt.forEach(t),Xqo=r(ZRe," \u2014 "),jpe=n(ZRe,"CODE",{});var HTt=s(jpe);zqo=r(HTt,"Wav2Vec2ForMaskedLM"),HTt.forEach(t),Wqo=r(ZRe," (Wav2Vec2 model)"),ZRe.forEach(t),Qqo=i(H),T2=n(H,"LI",{});var ePe=s(T2);Dpe=n(ePe,"STRONG",{});var UTt=s(Dpe);Hqo=r(UTt,"xlm"),UTt.forEach(t),Uqo=r(ePe," \u2014 "),XV=n(ePe,"A",{href:!0});var JTt=s(XV);Jqo=r(JTt,"XLMWithLMHeadModel"),JTt.forEach(t),Yqo=r(ePe," (XLM model)"),ePe.forEach(t),Kqo=i(H),M2=n(H,"LI",{});var oPe=s(M2);Gpe=n(oPe,"STRONG",{});var YTt=s(Gpe);Zqo=r(YTt,"xlm-roberta"),YTt.forEach(t),ejo=r(oPe," \u2014 "),zV=n(oPe,"A",{href:!0});var KTt=s(zV);ojo=r(KTt,"XLMRobertaForMaskedLM"),KTt.forEach(t),rjo=r(oPe," (XLM-RoBERTa model)"),oPe.forEach(t),tjo=i(H),E2=n(H,"LI",{});var rPe=s(E2);Ope=n(rPe,"STRONG",{});var ZTt=s(Ope);ajo=r(ZTt,"xlm-roberta-xl"),ZTt.forEach(t),njo=r(rPe," \u2014 "),WV=n(rPe,"A",{href:!0});var eMt=s(WV);sjo=r(eMt,"XLMRobertaXLForMaskedLM"),eMt.forEach(t),ljo=r(rPe," (XLM-RoBERTa-XL model)"),rPe.forEach(t),ijo=i(H),C2=n(H,"LI",{});var tPe=s(C2);Vpe=n(tPe,"STRONG",{});var oMt=s(Vpe);djo=r(oMt,"yoso"),oMt.forEach(t),cjo=r(tPe," \u2014 "),QV=n(tPe,"A",{href:!0});var rMt=s(QV);fjo=r(rMt,"YosoForMaskedLM"),rMt.forEach(t),mjo=r(tPe," (YOSO model)"),tPe.forEach(t),H.forEach(t),gjo=i(ca),w2=n(ca,"P",{});var aPe=s(w2);hjo=r(aPe,"The model is set in evaluation mode by default using "),Xpe=n(aPe,"CODE",{});var tMt=s(Xpe);pjo=r(tMt,"model.eval()"),tMt.forEach(t),_jo=r(aPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(aPe,"CODE",{});var aMt=s(zpe);ujo=r(aMt,"model.train()"),aMt.forEach(t),aPe.forEach(t),bjo=i(ca),T(A2.$$.fragment,ca),ca.forEach(t),il.forEach(t),bze=i(f),od=n(f,"H2",{class:!0});var CQe=s(od);L2=n(CQe,"A",{id:!0,class:!0,href:!0});var nMt=s(L2);Wpe=n(nMt,"SPAN",{});var sMt=s(Wpe);T(d8.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),vjo=i(CQe),Qpe=n(CQe,"SPAN",{});var lMt=s(Qpe);Fjo=r(lMt,"AutoModelForSeq2SeqLM"),lMt.forEach(t),CQe.forEach(t),vze=i(f),Bo=n(f,"DIV",{class:!0});var dl=s(Bo);T(c8.$$.fragment,dl),Tjo=i(dl),rd=n(dl,"P",{});var _te=s(rd);Mjo=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HV=n(_te,"A",{href:!0});var iMt=s(HV);Ejo=r(iMt,"from_pretrained()"),iMt.forEach(t),Cjo=r(_te," class method or the "),UV=n(_te,"A",{href:!0});var dMt=s(UV);wjo=r(dMt,"from_config()"),dMt.forEach(t),Ajo=r(_te,` class
method.`),_te.forEach(t),Ljo=i(dl),f8=n(dl,"P",{});var wQe=s(f8);yjo=r(wQe,"This class cannot be instantiated directly using "),Hpe=n(wQe,"CODE",{});var cMt=s(Hpe);xjo=r(cMt,"__init__()"),cMt.forEach(t),$jo=r(wQe," (throws an error)."),wQe.forEach(t),kjo=i(dl),mt=n(dl,"DIV",{class:!0});var xA=s(mt);T(m8.$$.fragment,xA),Sjo=i(xA),Upe=n(xA,"P",{});var fMt=s(Upe);Rjo=r(fMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fMt.forEach(t),Pjo=i(xA),td=n(xA,"P",{});var ute=s(td);Bjo=r(ute,`Note:
Loading a model from its configuration file does `),Jpe=n(ute,"STRONG",{});var mMt=s(Jpe);Ijo=r(mMt,"not"),mMt.forEach(t),Njo=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(ute,"A",{href:!0});var gMt=s(JV);qjo=r(gMt,"from_pretrained()"),gMt.forEach(t),jjo=r(ute," to load the model weights."),ute.forEach(t),Djo=i(xA),T(y2.$$.fragment,xA),xA.forEach(t),Gjo=i(dl),oo=n(dl,"DIV",{class:!0});var fa=s(oo);T(g8.$$.fragment,fa),Ojo=i(fa),Ype=n(fa,"P",{});var hMt=s(Ype);Vjo=r(hMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hMt.forEach(t),Xjo=i(fa),Ga=n(fa,"P",{});var $A=s(Ga);zjo=r($A,"The model class to instantiate is selected based on the "),Kpe=n($A,"CODE",{});var pMt=s(Kpe);Wjo=r(pMt,"model_type"),pMt.forEach(t),Qjo=r($A,` property of the config object (either
passed as an argument or loaded from `),Zpe=n($A,"CODE",{});var _Mt=s(Zpe);Hjo=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),Ujo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n($A,"CODE",{});var uMt=s(e_e);Jjo=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),Yjo=r($A,":"),$A.forEach(t),Kjo=i(fa),me=n(fa,"UL",{});var ue=s(me);x2=n(ue,"LI",{});var nPe=s(x2);o_e=n(nPe,"STRONG",{});var bMt=s(o_e);Zjo=r(bMt,"bart"),bMt.forEach(t),eDo=r(nPe," \u2014 "),YV=n(nPe,"A",{href:!0});var vMt=s(YV);oDo=r(vMt,"BartForConditionalGeneration"),vMt.forEach(t),rDo=r(nPe," (BART model)"),nPe.forEach(t),tDo=i(ue),$2=n(ue,"LI",{});var sPe=s($2);r_e=n(sPe,"STRONG",{});var FMt=s(r_e);aDo=r(FMt,"bigbird_pegasus"),FMt.forEach(t),nDo=r(sPe," \u2014 "),KV=n(sPe,"A",{href:!0});var TMt=s(KV);sDo=r(TMt,"BigBirdPegasusForConditionalGeneration"),TMt.forEach(t),lDo=r(sPe," (BigBird-Pegasus model)"),sPe.forEach(t),iDo=i(ue),k2=n(ue,"LI",{});var lPe=s(k2);t_e=n(lPe,"STRONG",{});var MMt=s(t_e);dDo=r(MMt,"blenderbot"),MMt.forEach(t),cDo=r(lPe," \u2014 "),ZV=n(lPe,"A",{href:!0});var EMt=s(ZV);fDo=r(EMt,"BlenderbotForConditionalGeneration"),EMt.forEach(t),mDo=r(lPe," (Blenderbot model)"),lPe.forEach(t),gDo=i(ue),S2=n(ue,"LI",{});var iPe=s(S2);a_e=n(iPe,"STRONG",{});var CMt=s(a_e);hDo=r(CMt,"blenderbot-small"),CMt.forEach(t),pDo=r(iPe," \u2014 "),eX=n(iPe,"A",{href:!0});var wMt=s(eX);_Do=r(wMt,"BlenderbotSmallForConditionalGeneration"),wMt.forEach(t),uDo=r(iPe," (BlenderbotSmall model)"),iPe.forEach(t),bDo=i(ue),R2=n(ue,"LI",{});var dPe=s(R2);n_e=n(dPe,"STRONG",{});var AMt=s(n_e);vDo=r(AMt,"encoder-decoder"),AMt.forEach(t),FDo=r(dPe," \u2014 "),oX=n(dPe,"A",{href:!0});var LMt=s(oX);TDo=r(LMt,"EncoderDecoderModel"),LMt.forEach(t),MDo=r(dPe," (Encoder decoder model)"),dPe.forEach(t),EDo=i(ue),P2=n(ue,"LI",{});var cPe=s(P2);s_e=n(cPe,"STRONG",{});var yMt=s(s_e);CDo=r(yMt,"fsmt"),yMt.forEach(t),wDo=r(cPe," \u2014 "),rX=n(cPe,"A",{href:!0});var xMt=s(rX);ADo=r(xMt,"FSMTForConditionalGeneration"),xMt.forEach(t),LDo=r(cPe," (FairSeq Machine-Translation model)"),cPe.forEach(t),yDo=i(ue),B2=n(ue,"LI",{});var fPe=s(B2);l_e=n(fPe,"STRONG",{});var $Mt=s(l_e);xDo=r($Mt,"led"),$Mt.forEach(t),$Do=r(fPe," \u2014 "),tX=n(fPe,"A",{href:!0});var kMt=s(tX);kDo=r(kMt,"LEDForConditionalGeneration"),kMt.forEach(t),SDo=r(fPe," (LED model)"),fPe.forEach(t),RDo=i(ue),I2=n(ue,"LI",{});var mPe=s(I2);i_e=n(mPe,"STRONG",{});var SMt=s(i_e);PDo=r(SMt,"longt5"),SMt.forEach(t),BDo=r(mPe," \u2014 "),aX=n(mPe,"A",{href:!0});var RMt=s(aX);IDo=r(RMt,"LongT5ForConditionalGeneration"),RMt.forEach(t),NDo=r(mPe," (LongT5 model)"),mPe.forEach(t),qDo=i(ue),N2=n(ue,"LI",{});var gPe=s(N2);d_e=n(gPe,"STRONG",{});var PMt=s(d_e);jDo=r(PMt,"m2m_100"),PMt.forEach(t),DDo=r(gPe," \u2014 "),nX=n(gPe,"A",{href:!0});var BMt=s(nX);GDo=r(BMt,"M2M100ForConditionalGeneration"),BMt.forEach(t),ODo=r(gPe," (M2M100 model)"),gPe.forEach(t),VDo=i(ue),q2=n(ue,"LI",{});var hPe=s(q2);c_e=n(hPe,"STRONG",{});var IMt=s(c_e);XDo=r(IMt,"marian"),IMt.forEach(t),zDo=r(hPe," \u2014 "),sX=n(hPe,"A",{href:!0});var NMt=s(sX);WDo=r(NMt,"MarianMTModel"),NMt.forEach(t),QDo=r(hPe," (Marian model)"),hPe.forEach(t),HDo=i(ue),j2=n(ue,"LI",{});var pPe=s(j2);f_e=n(pPe,"STRONG",{});var qMt=s(f_e);UDo=r(qMt,"mbart"),qMt.forEach(t),JDo=r(pPe," \u2014 "),lX=n(pPe,"A",{href:!0});var jMt=s(lX);YDo=r(jMt,"MBartForConditionalGeneration"),jMt.forEach(t),KDo=r(pPe," (mBART model)"),pPe.forEach(t),ZDo=i(ue),D2=n(ue,"LI",{});var _Pe=s(D2);m_e=n(_Pe,"STRONG",{});var DMt=s(m_e);eGo=r(DMt,"mt5"),DMt.forEach(t),oGo=r(_Pe," \u2014 "),iX=n(_Pe,"A",{href:!0});var GMt=s(iX);rGo=r(GMt,"MT5ForConditionalGeneration"),GMt.forEach(t),tGo=r(_Pe," (MT5 model)"),_Pe.forEach(t),aGo=i(ue),G2=n(ue,"LI",{});var uPe=s(G2);g_e=n(uPe,"STRONG",{});var OMt=s(g_e);nGo=r(OMt,"mvp"),OMt.forEach(t),sGo=r(uPe," \u2014 "),dX=n(uPe,"A",{href:!0});var VMt=s(dX);lGo=r(VMt,"MvpForConditionalGeneration"),VMt.forEach(t),iGo=r(uPe," (MVP model)"),uPe.forEach(t),dGo=i(ue),O2=n(ue,"LI",{});var bPe=s(O2);h_e=n(bPe,"STRONG",{});var XMt=s(h_e);cGo=r(XMt,"nllb"),XMt.forEach(t),fGo=r(bPe," \u2014 "),cX=n(bPe,"A",{href:!0});var zMt=s(cX);mGo=r(zMt,"M2M100ForConditionalGeneration"),zMt.forEach(t),gGo=r(bPe," (NLLB model)"),bPe.forEach(t),hGo=i(ue),V2=n(ue,"LI",{});var vPe=s(V2);p_e=n(vPe,"STRONG",{});var WMt=s(p_e);pGo=r(WMt,"pegasus"),WMt.forEach(t),_Go=r(vPe," \u2014 "),fX=n(vPe,"A",{href:!0});var QMt=s(fX);uGo=r(QMt,"PegasusForConditionalGeneration"),QMt.forEach(t),bGo=r(vPe," (Pegasus model)"),vPe.forEach(t),vGo=i(ue),X2=n(ue,"LI",{});var FPe=s(X2);__e=n(FPe,"STRONG",{});var HMt=s(__e);FGo=r(HMt,"plbart"),HMt.forEach(t),TGo=r(FPe," \u2014 "),mX=n(FPe,"A",{href:!0});var UMt=s(mX);MGo=r(UMt,"PLBartForConditionalGeneration"),UMt.forEach(t),EGo=r(FPe," (PLBart model)"),FPe.forEach(t),CGo=i(ue),z2=n(ue,"LI",{});var TPe=s(z2);u_e=n(TPe,"STRONG",{});var JMt=s(u_e);wGo=r(JMt,"prophetnet"),JMt.forEach(t),AGo=r(TPe," \u2014 "),gX=n(TPe,"A",{href:!0});var YMt=s(gX);LGo=r(YMt,"ProphetNetForConditionalGeneration"),YMt.forEach(t),yGo=r(TPe," (ProphetNet model)"),TPe.forEach(t),xGo=i(ue),W2=n(ue,"LI",{});var MPe=s(W2);b_e=n(MPe,"STRONG",{});var KMt=s(b_e);$Go=r(KMt,"t5"),KMt.forEach(t),kGo=r(MPe," \u2014 "),hX=n(MPe,"A",{href:!0});var ZMt=s(hX);SGo=r(ZMt,"T5ForConditionalGeneration"),ZMt.forEach(t),RGo=r(MPe," (T5 model)"),MPe.forEach(t),PGo=i(ue),Q2=n(ue,"LI",{});var EPe=s(Q2);v_e=n(EPe,"STRONG",{});var e4t=s(v_e);BGo=r(e4t,"xlm-prophetnet"),e4t.forEach(t),IGo=r(EPe," \u2014 "),pX=n(EPe,"A",{href:!0});var o4t=s(pX);NGo=r(o4t,"XLMProphetNetForConditionalGeneration"),o4t.forEach(t),qGo=r(EPe," (XLM-ProphetNet model)"),EPe.forEach(t),ue.forEach(t),jGo=i(fa),H2=n(fa,"P",{});var CPe=s(H2);DGo=r(CPe,"The model is set in evaluation mode by default using "),F_e=n(CPe,"CODE",{});var r4t=s(F_e);GGo=r(r4t,"model.eval()"),r4t.forEach(t),OGo=r(CPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(CPe,"CODE",{});var t4t=s(T_e);VGo=r(t4t,"model.train()"),t4t.forEach(t),CPe.forEach(t),XGo=i(fa),T(U2.$$.fragment,fa),fa.forEach(t),dl.forEach(t),Fze=i(f),ad=n(f,"H2",{class:!0});var AQe=s(ad);J2=n(AQe,"A",{id:!0,class:!0,href:!0});var a4t=s(J2);M_e=n(a4t,"SPAN",{});var n4t=s(M_e);T(h8.$$.fragment,n4t),n4t.forEach(t),a4t.forEach(t),zGo=i(AQe),E_e=n(AQe,"SPAN",{});var s4t=s(E_e);WGo=r(s4t,"AutoModelForSequenceClassification"),s4t.forEach(t),AQe.forEach(t),Tze=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(p8.$$.fragment,cl),QGo=i(cl),nd=n(cl,"P",{});var bte=s(nd);HGo=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_X=n(bte,"A",{href:!0});var l4t=s(_X);UGo=r(l4t,"from_pretrained()"),l4t.forEach(t),JGo=r(bte," class method or the "),uX=n(bte,"A",{href:!0});var i4t=s(uX);YGo=r(i4t,"from_config()"),i4t.forEach(t),KGo=r(bte,` class
method.`),bte.forEach(t),ZGo=i(cl),_8=n(cl,"P",{});var LQe=s(_8);eOo=r(LQe,"This class cannot be instantiated directly using "),C_e=n(LQe,"CODE",{});var d4t=s(C_e);oOo=r(d4t,"__init__()"),d4t.forEach(t),rOo=r(LQe," (throws an error)."),LQe.forEach(t),tOo=i(cl),gt=n(cl,"DIV",{class:!0});var kA=s(gt);T(u8.$$.fragment,kA),aOo=i(kA),w_e=n(kA,"P",{});var c4t=s(w_e);nOo=r(c4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c4t.forEach(t),sOo=i(kA),sd=n(kA,"P",{});var vte=s(sd);lOo=r(vte,`Note:
Loading a model from its configuration file does `),A_e=n(vte,"STRONG",{});var f4t=s(A_e);iOo=r(f4t,"not"),f4t.forEach(t),dOo=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(vte,"A",{href:!0});var m4t=s(bX);cOo=r(m4t,"from_pretrained()"),m4t.forEach(t),fOo=r(vte," to load the model weights."),vte.forEach(t),mOo=i(kA),T(Y2.$$.fragment,kA),kA.forEach(t),gOo=i(cl),ro=n(cl,"DIV",{class:!0});var ma=s(ro);T(b8.$$.fragment,ma),hOo=i(ma),L_e=n(ma,"P",{});var g4t=s(L_e);pOo=r(g4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g4t.forEach(t),_Oo=i(ma),Oa=n(ma,"P",{});var SA=s(Oa);uOo=r(SA,"The model class to instantiate is selected based on the "),y_e=n(SA,"CODE",{});var h4t=s(y_e);bOo=r(h4t,"model_type"),h4t.forEach(t),vOo=r(SA,` property of the config object (either
passed as an argument or loaded from `),x_e=n(SA,"CODE",{});var p4t=s(x_e);FOo=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),TOo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(SA,"CODE",{});var _4t=s($_e);MOo=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),EOo=r(SA,":"),SA.forEach(t),COo=i(ma),P=n(ma,"UL",{});var N=s(P);K2=n(N,"LI",{});var wPe=s(K2);k_e=n(wPe,"STRONG",{});var u4t=s(k_e);wOo=r(u4t,"albert"),u4t.forEach(t),AOo=r(wPe," \u2014 "),vX=n(wPe,"A",{href:!0});var b4t=s(vX);LOo=r(b4t,"AlbertForSequenceClassification"),b4t.forEach(t),yOo=r(wPe," (ALBERT model)"),wPe.forEach(t),xOo=i(N),Z2=n(N,"LI",{});var APe=s(Z2);S_e=n(APe,"STRONG",{});var v4t=s(S_e);$Oo=r(v4t,"bart"),v4t.forEach(t),kOo=r(APe," \u2014 "),FX=n(APe,"A",{href:!0});var F4t=s(FX);SOo=r(F4t,"BartForSequenceClassification"),F4t.forEach(t),ROo=r(APe," (BART model)"),APe.forEach(t),POo=i(N),eb=n(N,"LI",{});var LPe=s(eb);R_e=n(LPe,"STRONG",{});var T4t=s(R_e);BOo=r(T4t,"bert"),T4t.forEach(t),IOo=r(LPe," \u2014 "),TX=n(LPe,"A",{href:!0});var M4t=s(TX);NOo=r(M4t,"BertForSequenceClassification"),M4t.forEach(t),qOo=r(LPe," (BERT model)"),LPe.forEach(t),jOo=i(N),ob=n(N,"LI",{});var yPe=s(ob);P_e=n(yPe,"STRONG",{});var E4t=s(P_e);DOo=r(E4t,"big_bird"),E4t.forEach(t),GOo=r(yPe," \u2014 "),MX=n(yPe,"A",{href:!0});var C4t=s(MX);OOo=r(C4t,"BigBirdForSequenceClassification"),C4t.forEach(t),VOo=r(yPe," (BigBird model)"),yPe.forEach(t),XOo=i(N),rb=n(N,"LI",{});var xPe=s(rb);B_e=n(xPe,"STRONG",{});var w4t=s(B_e);zOo=r(w4t,"bigbird_pegasus"),w4t.forEach(t),WOo=r(xPe," \u2014 "),EX=n(xPe,"A",{href:!0});var A4t=s(EX);QOo=r(A4t,"BigBirdPegasusForSequenceClassification"),A4t.forEach(t),HOo=r(xPe," (BigBird-Pegasus model)"),xPe.forEach(t),UOo=i(N),tb=n(N,"LI",{});var $Pe=s(tb);I_e=n($Pe,"STRONG",{});var L4t=s(I_e);JOo=r(L4t,"bloom"),L4t.forEach(t),YOo=r($Pe," \u2014 "),CX=n($Pe,"A",{href:!0});var y4t=s(CX);KOo=r(y4t,"BloomForSequenceClassification"),y4t.forEach(t),ZOo=r($Pe," (BLOOM model)"),$Pe.forEach(t),eVo=i(N),ab=n(N,"LI",{});var kPe=s(ab);N_e=n(kPe,"STRONG",{});var x4t=s(N_e);oVo=r(x4t,"camembert"),x4t.forEach(t),rVo=r(kPe," \u2014 "),wX=n(kPe,"A",{href:!0});var $4t=s(wX);tVo=r($4t,"CamembertForSequenceClassification"),$4t.forEach(t),aVo=r(kPe," (CamemBERT model)"),kPe.forEach(t),nVo=i(N),nb=n(N,"LI",{});var SPe=s(nb);q_e=n(SPe,"STRONG",{});var k4t=s(q_e);sVo=r(k4t,"canine"),k4t.forEach(t),lVo=r(SPe," \u2014 "),AX=n(SPe,"A",{href:!0});var S4t=s(AX);iVo=r(S4t,"CanineForSequenceClassification"),S4t.forEach(t),dVo=r(SPe," (CANINE model)"),SPe.forEach(t),cVo=i(N),sb=n(N,"LI",{});var RPe=s(sb);j_e=n(RPe,"STRONG",{});var R4t=s(j_e);fVo=r(R4t,"convbert"),R4t.forEach(t),mVo=r(RPe," \u2014 "),LX=n(RPe,"A",{href:!0});var P4t=s(LX);gVo=r(P4t,"ConvBertForSequenceClassification"),P4t.forEach(t),hVo=r(RPe," (ConvBERT model)"),RPe.forEach(t),pVo=i(N),lb=n(N,"LI",{});var PPe=s(lb);D_e=n(PPe,"STRONG",{});var B4t=s(D_e);_Vo=r(B4t,"ctrl"),B4t.forEach(t),uVo=r(PPe," \u2014 "),yX=n(PPe,"A",{href:!0});var I4t=s(yX);bVo=r(I4t,"CTRLForSequenceClassification"),I4t.forEach(t),vVo=r(PPe," (CTRL model)"),PPe.forEach(t),FVo=i(N),ib=n(N,"LI",{});var BPe=s(ib);G_e=n(BPe,"STRONG",{});var N4t=s(G_e);TVo=r(N4t,"data2vec-text"),N4t.forEach(t),MVo=r(BPe," \u2014 "),xX=n(BPe,"A",{href:!0});var q4t=s(xX);EVo=r(q4t,"Data2VecTextForSequenceClassification"),q4t.forEach(t),CVo=r(BPe," (Data2VecText model)"),BPe.forEach(t),wVo=i(N),db=n(N,"LI",{});var IPe=s(db);O_e=n(IPe,"STRONG",{});var j4t=s(O_e);AVo=r(j4t,"deberta"),j4t.forEach(t),LVo=r(IPe," \u2014 "),$X=n(IPe,"A",{href:!0});var D4t=s($X);yVo=r(D4t,"DebertaForSequenceClassification"),D4t.forEach(t),xVo=r(IPe," (DeBERTa model)"),IPe.forEach(t),$Vo=i(N),cb=n(N,"LI",{});var NPe=s(cb);V_e=n(NPe,"STRONG",{});var G4t=s(V_e);kVo=r(G4t,"deberta-v2"),G4t.forEach(t),SVo=r(NPe," \u2014 "),kX=n(NPe,"A",{href:!0});var O4t=s(kX);RVo=r(O4t,"DebertaV2ForSequenceClassification"),O4t.forEach(t),PVo=r(NPe," (DeBERTa-v2 model)"),NPe.forEach(t),BVo=i(N),fb=n(N,"LI",{});var qPe=s(fb);X_e=n(qPe,"STRONG",{});var V4t=s(X_e);IVo=r(V4t,"distilbert"),V4t.forEach(t),NVo=r(qPe," \u2014 "),SX=n(qPe,"A",{href:!0});var X4t=s(SX);qVo=r(X4t,"DistilBertForSequenceClassification"),X4t.forEach(t),jVo=r(qPe," (DistilBERT model)"),qPe.forEach(t),DVo=i(N),mb=n(N,"LI",{});var jPe=s(mb);z_e=n(jPe,"STRONG",{});var z4t=s(z_e);GVo=r(z4t,"electra"),z4t.forEach(t),OVo=r(jPe," \u2014 "),RX=n(jPe,"A",{href:!0});var W4t=s(RX);VVo=r(W4t,"ElectraForSequenceClassification"),W4t.forEach(t),XVo=r(jPe," (ELECTRA model)"),jPe.forEach(t),zVo=i(N),gb=n(N,"LI",{});var DPe=s(gb);W_e=n(DPe,"STRONG",{});var Q4t=s(W_e);WVo=r(Q4t,"flaubert"),Q4t.forEach(t),QVo=r(DPe," \u2014 "),PX=n(DPe,"A",{href:!0});var H4t=s(PX);HVo=r(H4t,"FlaubertForSequenceClassification"),H4t.forEach(t),UVo=r(DPe," (FlauBERT model)"),DPe.forEach(t),JVo=i(N),hb=n(N,"LI",{});var GPe=s(hb);Q_e=n(GPe,"STRONG",{});var U4t=s(Q_e);YVo=r(U4t,"fnet"),U4t.forEach(t),KVo=r(GPe," \u2014 "),BX=n(GPe,"A",{href:!0});var J4t=s(BX);ZVo=r(J4t,"FNetForSequenceClassification"),J4t.forEach(t),eXo=r(GPe," (FNet model)"),GPe.forEach(t),oXo=i(N),pb=n(N,"LI",{});var OPe=s(pb);H_e=n(OPe,"STRONG",{});var Y4t=s(H_e);rXo=r(Y4t,"funnel"),Y4t.forEach(t),tXo=r(OPe," \u2014 "),IX=n(OPe,"A",{href:!0});var K4t=s(IX);aXo=r(K4t,"FunnelForSequenceClassification"),K4t.forEach(t),nXo=r(OPe," (Funnel Transformer model)"),OPe.forEach(t),sXo=i(N),_b=n(N,"LI",{});var VPe=s(_b);U_e=n(VPe,"STRONG",{});var Z4t=s(U_e);lXo=r(Z4t,"gpt2"),Z4t.forEach(t),iXo=r(VPe," \u2014 "),NX=n(VPe,"A",{href:!0});var eEt=s(NX);dXo=r(eEt,"GPT2ForSequenceClassification"),eEt.forEach(t),cXo=r(VPe," (OpenAI GPT-2 model)"),VPe.forEach(t),fXo=i(N),ub=n(N,"LI",{});var XPe=s(ub);J_e=n(XPe,"STRONG",{});var oEt=s(J_e);mXo=r(oEt,"gpt_neo"),oEt.forEach(t),gXo=r(XPe," \u2014 "),qX=n(XPe,"A",{href:!0});var rEt=s(qX);hXo=r(rEt,"GPTNeoForSequenceClassification"),rEt.forEach(t),pXo=r(XPe," (GPT Neo model)"),XPe.forEach(t),_Xo=i(N),bb=n(N,"LI",{});var zPe=s(bb);Y_e=n(zPe,"STRONG",{});var tEt=s(Y_e);uXo=r(tEt,"gptj"),tEt.forEach(t),bXo=r(zPe," \u2014 "),jX=n(zPe,"A",{href:!0});var aEt=s(jX);vXo=r(aEt,"GPTJForSequenceClassification"),aEt.forEach(t),FXo=r(zPe," (GPT-J model)"),zPe.forEach(t),TXo=i(N),vb=n(N,"LI",{});var WPe=s(vb);K_e=n(WPe,"STRONG",{});var nEt=s(K_e);MXo=r(nEt,"ibert"),nEt.forEach(t),EXo=r(WPe," \u2014 "),DX=n(WPe,"A",{href:!0});var sEt=s(DX);CXo=r(sEt,"IBertForSequenceClassification"),sEt.forEach(t),wXo=r(WPe," (I-BERT model)"),WPe.forEach(t),AXo=i(N),Fb=n(N,"LI",{});var QPe=s(Fb);Z_e=n(QPe,"STRONG",{});var lEt=s(Z_e);LXo=r(lEt,"layoutlm"),lEt.forEach(t),yXo=r(QPe," \u2014 "),GX=n(QPe,"A",{href:!0});var iEt=s(GX);xXo=r(iEt,"LayoutLMForSequenceClassification"),iEt.forEach(t),$Xo=r(QPe," (LayoutLM model)"),QPe.forEach(t),kXo=i(N),Tb=n(N,"LI",{});var HPe=s(Tb);eue=n(HPe,"STRONG",{});var dEt=s(eue);SXo=r(dEt,"layoutlmv2"),dEt.forEach(t),RXo=r(HPe," \u2014 "),OX=n(HPe,"A",{href:!0});var cEt=s(OX);PXo=r(cEt,"LayoutLMv2ForSequenceClassification"),cEt.forEach(t),BXo=r(HPe," (LayoutLMv2 model)"),HPe.forEach(t),IXo=i(N),Mb=n(N,"LI",{});var UPe=s(Mb);oue=n(UPe,"STRONG",{});var fEt=s(oue);NXo=r(fEt,"layoutlmv3"),fEt.forEach(t),qXo=r(UPe," \u2014 "),VX=n(UPe,"A",{href:!0});var mEt=s(VX);jXo=r(mEt,"LayoutLMv3ForSequenceClassification"),mEt.forEach(t),DXo=r(UPe," (LayoutLMv3 model)"),UPe.forEach(t),GXo=i(N),Eb=n(N,"LI",{});var JPe=s(Eb);rue=n(JPe,"STRONG",{});var gEt=s(rue);OXo=r(gEt,"led"),gEt.forEach(t),VXo=r(JPe," \u2014 "),XX=n(JPe,"A",{href:!0});var hEt=s(XX);XXo=r(hEt,"LEDForSequenceClassification"),hEt.forEach(t),zXo=r(JPe," (LED model)"),JPe.forEach(t),WXo=i(N),Cb=n(N,"LI",{});var YPe=s(Cb);tue=n(YPe,"STRONG",{});var pEt=s(tue);QXo=r(pEt,"longformer"),pEt.forEach(t),HXo=r(YPe," \u2014 "),zX=n(YPe,"A",{href:!0});var _Et=s(zX);UXo=r(_Et,"LongformerForSequenceClassification"),_Et.forEach(t),JXo=r(YPe," (Longformer model)"),YPe.forEach(t),YXo=i(N),wb=n(N,"LI",{});var KPe=s(wb);aue=n(KPe,"STRONG",{});var uEt=s(aue);KXo=r(uEt,"mbart"),uEt.forEach(t),ZXo=r(KPe," \u2014 "),WX=n(KPe,"A",{href:!0});var bEt=s(WX);ezo=r(bEt,"MBartForSequenceClassification"),bEt.forEach(t),ozo=r(KPe," (mBART model)"),KPe.forEach(t),rzo=i(N),Ab=n(N,"LI",{});var ZPe=s(Ab);nue=n(ZPe,"STRONG",{});var vEt=s(nue);tzo=r(vEt,"mctct"),vEt.forEach(t),azo=r(ZPe," \u2014 "),QX=n(ZPe,"A",{href:!0});var FEt=s(QX);nzo=r(FEt,"MCTCTForSequenceClassification"),FEt.forEach(t),szo=r(ZPe," (M-CTC-T model)"),ZPe.forEach(t),lzo=i(N),Lb=n(N,"LI",{});var eBe=s(Lb);sue=n(eBe,"STRONG",{});var TEt=s(sue);izo=r(TEt,"megatron-bert"),TEt.forEach(t),dzo=r(eBe," \u2014 "),HX=n(eBe,"A",{href:!0});var MEt=s(HX);czo=r(MEt,"MegatronBertForSequenceClassification"),MEt.forEach(t),fzo=r(eBe," (Megatron-BERT model)"),eBe.forEach(t),mzo=i(N),yb=n(N,"LI",{});var oBe=s(yb);lue=n(oBe,"STRONG",{});var EEt=s(lue);gzo=r(EEt,"mobilebert"),EEt.forEach(t),hzo=r(oBe," \u2014 "),UX=n(oBe,"A",{href:!0});var CEt=s(UX);pzo=r(CEt,"MobileBertForSequenceClassification"),CEt.forEach(t),_zo=r(oBe," (MobileBERT model)"),oBe.forEach(t),uzo=i(N),xb=n(N,"LI",{});var rBe=s(xb);iue=n(rBe,"STRONG",{});var wEt=s(iue);bzo=r(wEt,"mpnet"),wEt.forEach(t),vzo=r(rBe," \u2014 "),JX=n(rBe,"A",{href:!0});var AEt=s(JX);Fzo=r(AEt,"MPNetForSequenceClassification"),AEt.forEach(t),Tzo=r(rBe," (MPNet model)"),rBe.forEach(t),Mzo=i(N),$b=n(N,"LI",{});var tBe=s($b);due=n(tBe,"STRONG",{});var LEt=s(due);Ezo=r(LEt,"mvp"),LEt.forEach(t),Czo=r(tBe," \u2014 "),YX=n(tBe,"A",{href:!0});var yEt=s(YX);wzo=r(yEt,"MvpForSequenceClassification"),yEt.forEach(t),Azo=r(tBe," (MVP model)"),tBe.forEach(t),Lzo=i(N),kb=n(N,"LI",{});var aBe=s(kb);cue=n(aBe,"STRONG",{});var xEt=s(cue);yzo=r(xEt,"nezha"),xEt.forEach(t),xzo=r(aBe," \u2014 "),KX=n(aBe,"A",{href:!0});var $Et=s(KX);$zo=r($Et,"NezhaForSequenceClassification"),$Et.forEach(t),kzo=r(aBe," (Nezha model)"),aBe.forEach(t),Szo=i(N),Sb=n(N,"LI",{});var nBe=s(Sb);fue=n(nBe,"STRONG",{});var kEt=s(fue);Rzo=r(kEt,"nystromformer"),kEt.forEach(t),Pzo=r(nBe," \u2014 "),ZX=n(nBe,"A",{href:!0});var SEt=s(ZX);Bzo=r(SEt,"NystromformerForSequenceClassification"),SEt.forEach(t),Izo=r(nBe," (Nystr\xF6mformer model)"),nBe.forEach(t),Nzo=i(N),Rb=n(N,"LI",{});var sBe=s(Rb);mue=n(sBe,"STRONG",{});var REt=s(mue);qzo=r(REt,"openai-gpt"),REt.forEach(t),jzo=r(sBe," \u2014 "),ez=n(sBe,"A",{href:!0});var PEt=s(ez);Dzo=r(PEt,"OpenAIGPTForSequenceClassification"),PEt.forEach(t),Gzo=r(sBe," (OpenAI GPT model)"),sBe.forEach(t),Ozo=i(N),Pb=n(N,"LI",{});var lBe=s(Pb);gue=n(lBe,"STRONG",{});var BEt=s(gue);Vzo=r(BEt,"opt"),BEt.forEach(t),Xzo=r(lBe," \u2014 "),oz=n(lBe,"A",{href:!0});var IEt=s(oz);zzo=r(IEt,"OPTForSequenceClassification"),IEt.forEach(t),Wzo=r(lBe," (OPT model)"),lBe.forEach(t),Qzo=i(N),Bb=n(N,"LI",{});var iBe=s(Bb);hue=n(iBe,"STRONG",{});var NEt=s(hue);Hzo=r(NEt,"perceiver"),NEt.forEach(t),Uzo=r(iBe," \u2014 "),rz=n(iBe,"A",{href:!0});var qEt=s(rz);Jzo=r(qEt,"PerceiverForSequenceClassification"),qEt.forEach(t),Yzo=r(iBe," (Perceiver model)"),iBe.forEach(t),Kzo=i(N),Ib=n(N,"LI",{});var dBe=s(Ib);pue=n(dBe,"STRONG",{});var jEt=s(pue);Zzo=r(jEt,"plbart"),jEt.forEach(t),eWo=r(dBe," \u2014 "),tz=n(dBe,"A",{href:!0});var DEt=s(tz);oWo=r(DEt,"PLBartForSequenceClassification"),DEt.forEach(t),rWo=r(dBe," (PLBart model)"),dBe.forEach(t),tWo=i(N),Nb=n(N,"LI",{});var cBe=s(Nb);_ue=n(cBe,"STRONG",{});var GEt=s(_ue);aWo=r(GEt,"qdqbert"),GEt.forEach(t),nWo=r(cBe," \u2014 "),az=n(cBe,"A",{href:!0});var OEt=s(az);sWo=r(OEt,"QDQBertForSequenceClassification"),OEt.forEach(t),lWo=r(cBe," (QDQBert model)"),cBe.forEach(t),iWo=i(N),qb=n(N,"LI",{});var fBe=s(qb);uue=n(fBe,"STRONG",{});var VEt=s(uue);dWo=r(VEt,"reformer"),VEt.forEach(t),cWo=r(fBe," \u2014 "),nz=n(fBe,"A",{href:!0});var XEt=s(nz);fWo=r(XEt,"ReformerForSequenceClassification"),XEt.forEach(t),mWo=r(fBe," (Reformer model)"),fBe.forEach(t),gWo=i(N),jb=n(N,"LI",{});var mBe=s(jb);bue=n(mBe,"STRONG",{});var zEt=s(bue);hWo=r(zEt,"rembert"),zEt.forEach(t),pWo=r(mBe," \u2014 "),sz=n(mBe,"A",{href:!0});var WEt=s(sz);_Wo=r(WEt,"RemBertForSequenceClassification"),WEt.forEach(t),uWo=r(mBe," (RemBERT model)"),mBe.forEach(t),bWo=i(N),Db=n(N,"LI",{});var gBe=s(Db);vue=n(gBe,"STRONG",{});var QEt=s(vue);vWo=r(QEt,"roberta"),QEt.forEach(t),FWo=r(gBe," \u2014 "),lz=n(gBe,"A",{href:!0});var HEt=s(lz);TWo=r(HEt,"RobertaForSequenceClassification"),HEt.forEach(t),MWo=r(gBe," (RoBERTa model)"),gBe.forEach(t),EWo=i(N),Gb=n(N,"LI",{});var hBe=s(Gb);Fue=n(hBe,"STRONG",{});var UEt=s(Fue);CWo=r(UEt,"roformer"),UEt.forEach(t),wWo=r(hBe," \u2014 "),iz=n(hBe,"A",{href:!0});var JEt=s(iz);AWo=r(JEt,"RoFormerForSequenceClassification"),JEt.forEach(t),LWo=r(hBe," (RoFormer model)"),hBe.forEach(t),yWo=i(N),Ob=n(N,"LI",{});var pBe=s(Ob);Tue=n(pBe,"STRONG",{});var YEt=s(Tue);xWo=r(YEt,"squeezebert"),YEt.forEach(t),$Wo=r(pBe," \u2014 "),dz=n(pBe,"A",{href:!0});var KEt=s(dz);kWo=r(KEt,"SqueezeBertForSequenceClassification"),KEt.forEach(t),SWo=r(pBe," (SqueezeBERT model)"),pBe.forEach(t),RWo=i(N),Vb=n(N,"LI",{});var _Be=s(Vb);Mue=n(_Be,"STRONG",{});var ZEt=s(Mue);PWo=r(ZEt,"tapas"),ZEt.forEach(t),BWo=r(_Be," \u2014 "),cz=n(_Be,"A",{href:!0});var eCt=s(cz);IWo=r(eCt,"TapasForSequenceClassification"),eCt.forEach(t),NWo=r(_Be," (TAPAS model)"),_Be.forEach(t),qWo=i(N),Xb=n(N,"LI",{});var uBe=s(Xb);Eue=n(uBe,"STRONG",{});var oCt=s(Eue);jWo=r(oCt,"transfo-xl"),oCt.forEach(t),DWo=r(uBe," \u2014 "),fz=n(uBe,"A",{href:!0});var rCt=s(fz);GWo=r(rCt,"TransfoXLForSequenceClassification"),rCt.forEach(t),OWo=r(uBe," (Transformer-XL model)"),uBe.forEach(t),VWo=i(N),zb=n(N,"LI",{});var bBe=s(zb);Cue=n(bBe,"STRONG",{});var tCt=s(Cue);XWo=r(tCt,"xlm"),tCt.forEach(t),zWo=r(bBe," \u2014 "),mz=n(bBe,"A",{href:!0});var aCt=s(mz);WWo=r(aCt,"XLMForSequenceClassification"),aCt.forEach(t),QWo=r(bBe," (XLM model)"),bBe.forEach(t),HWo=i(N),Wb=n(N,"LI",{});var vBe=s(Wb);wue=n(vBe,"STRONG",{});var nCt=s(wue);UWo=r(nCt,"xlm-roberta"),nCt.forEach(t),JWo=r(vBe," \u2014 "),gz=n(vBe,"A",{href:!0});var sCt=s(gz);YWo=r(sCt,"XLMRobertaForSequenceClassification"),sCt.forEach(t),KWo=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),ZWo=i(N),Qb=n(N,"LI",{});var FBe=s(Qb);Aue=n(FBe,"STRONG",{});var lCt=s(Aue);eQo=r(lCt,"xlm-roberta-xl"),lCt.forEach(t),oQo=r(FBe," \u2014 "),hz=n(FBe,"A",{href:!0});var iCt=s(hz);rQo=r(iCt,"XLMRobertaXLForSequenceClassification"),iCt.forEach(t),tQo=r(FBe," (XLM-RoBERTa-XL model)"),FBe.forEach(t),aQo=i(N),Hb=n(N,"LI",{});var TBe=s(Hb);Lue=n(TBe,"STRONG",{});var dCt=s(Lue);nQo=r(dCt,"xlnet"),dCt.forEach(t),sQo=r(TBe," \u2014 "),pz=n(TBe,"A",{href:!0});var cCt=s(pz);lQo=r(cCt,"XLNetForSequenceClassification"),cCt.forEach(t),iQo=r(TBe," (XLNet model)"),TBe.forEach(t),dQo=i(N),Ub=n(N,"LI",{});var MBe=s(Ub);yue=n(MBe,"STRONG",{});var fCt=s(yue);cQo=r(fCt,"yoso"),fCt.forEach(t),fQo=r(MBe," \u2014 "),_z=n(MBe,"A",{href:!0});var mCt=s(_z);mQo=r(mCt,"YosoForSequenceClassification"),mCt.forEach(t),gQo=r(MBe," (YOSO model)"),MBe.forEach(t),N.forEach(t),hQo=i(ma),Jb=n(ma,"P",{});var EBe=s(Jb);pQo=r(EBe,"The model is set in evaluation mode by default using "),xue=n(EBe,"CODE",{});var gCt=s(xue);_Qo=r(gCt,"model.eval()"),gCt.forEach(t),uQo=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(EBe,"CODE",{});var hCt=s($ue);bQo=r(hCt,"model.train()"),hCt.forEach(t),EBe.forEach(t),vQo=i(ma),T(Yb.$$.fragment,ma),ma.forEach(t),cl.forEach(t),Mze=i(f),ld=n(f,"H2",{class:!0});var yQe=s(ld);Kb=n(yQe,"A",{id:!0,class:!0,href:!0});var pCt=s(Kb);kue=n(pCt,"SPAN",{});var _Ct=s(kue);T(v8.$$.fragment,_Ct),_Ct.forEach(t),pCt.forEach(t),FQo=i(yQe),Sue=n(yQe,"SPAN",{});var uCt=s(Sue);TQo=r(uCt,"AutoModelForMultipleChoice"),uCt.forEach(t),yQe.forEach(t),Eze=i(f),No=n(f,"DIV",{class:!0});var fl=s(No);T(F8.$$.fragment,fl),MQo=i(fl),id=n(fl,"P",{});var Fte=s(id);EQo=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uz=n(Fte,"A",{href:!0});var bCt=s(uz);CQo=r(bCt,"from_pretrained()"),bCt.forEach(t),wQo=r(Fte," class method or the "),bz=n(Fte,"A",{href:!0});var vCt=s(bz);AQo=r(vCt,"from_config()"),vCt.forEach(t),LQo=r(Fte,` class
method.`),Fte.forEach(t),yQo=i(fl),T8=n(fl,"P",{});var xQe=s(T8);xQo=r(xQe,"This class cannot be instantiated directly using "),Rue=n(xQe,"CODE",{});var FCt=s(Rue);$Qo=r(FCt,"__init__()"),FCt.forEach(t),kQo=r(xQe," (throws an error)."),xQe.forEach(t),SQo=i(fl),ht=n(fl,"DIV",{class:!0});var RA=s(ht);T(M8.$$.fragment,RA),RQo=i(RA),Pue=n(RA,"P",{});var TCt=s(Pue);PQo=r(TCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TCt.forEach(t),BQo=i(RA),dd=n(RA,"P",{});var Tte=s(dd);IQo=r(Tte,`Note:
Loading a model from its configuration file does `),Bue=n(Tte,"STRONG",{});var MCt=s(Bue);NQo=r(MCt,"not"),MCt.forEach(t),qQo=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(Tte,"A",{href:!0});var ECt=s(vz);jQo=r(ECt,"from_pretrained()"),ECt.forEach(t),DQo=r(Tte," to load the model weights."),Tte.forEach(t),GQo=i(RA),T(Zb.$$.fragment,RA),RA.forEach(t),OQo=i(fl),to=n(fl,"DIV",{class:!0});var ga=s(to);T(E8.$$.fragment,ga),VQo=i(ga),Iue=n(ga,"P",{});var CCt=s(Iue);XQo=r(CCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CCt.forEach(t),zQo=i(ga),Va=n(ga,"P",{});var PA=s(Va);WQo=r(PA,"The model class to instantiate is selected based on the "),Nue=n(PA,"CODE",{});var wCt=s(Nue);QQo=r(wCt,"model_type"),wCt.forEach(t),HQo=r(PA,` property of the config object (either
passed as an argument or loaded from `),que=n(PA,"CODE",{});var ACt=s(que);UQo=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),JQo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(PA,"CODE",{});var LCt=s(jue);YQo=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),KQo=r(PA,":"),PA.forEach(t),ZQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);ev=n(ee,"LI",{});var CBe=s(ev);Due=n(CBe,"STRONG",{});var yCt=s(Due);eHo=r(yCt,"albert"),yCt.forEach(t),oHo=r(CBe," \u2014 "),Fz=n(CBe,"A",{href:!0});var xCt=s(Fz);rHo=r(xCt,"AlbertForMultipleChoice"),xCt.forEach(t),tHo=r(CBe," (ALBERT model)"),CBe.forEach(t),aHo=i(ee),ov=n(ee,"LI",{});var wBe=s(ov);Gue=n(wBe,"STRONG",{});var $Ct=s(Gue);nHo=r($Ct,"bert"),$Ct.forEach(t),sHo=r(wBe," \u2014 "),Tz=n(wBe,"A",{href:!0});var kCt=s(Tz);lHo=r(kCt,"BertForMultipleChoice"),kCt.forEach(t),iHo=r(wBe," (BERT model)"),wBe.forEach(t),dHo=i(ee),rv=n(ee,"LI",{});var ABe=s(rv);Oue=n(ABe,"STRONG",{});var SCt=s(Oue);cHo=r(SCt,"big_bird"),SCt.forEach(t),fHo=r(ABe," \u2014 "),Mz=n(ABe,"A",{href:!0});var RCt=s(Mz);mHo=r(RCt,"BigBirdForMultipleChoice"),RCt.forEach(t),gHo=r(ABe," (BigBird model)"),ABe.forEach(t),hHo=i(ee),tv=n(ee,"LI",{});var LBe=s(tv);Vue=n(LBe,"STRONG",{});var PCt=s(Vue);pHo=r(PCt,"camembert"),PCt.forEach(t),_Ho=r(LBe," \u2014 "),Ez=n(LBe,"A",{href:!0});var BCt=s(Ez);uHo=r(BCt,"CamembertForMultipleChoice"),BCt.forEach(t),bHo=r(LBe," (CamemBERT model)"),LBe.forEach(t),vHo=i(ee),av=n(ee,"LI",{});var yBe=s(av);Xue=n(yBe,"STRONG",{});var ICt=s(Xue);FHo=r(ICt,"canine"),ICt.forEach(t),THo=r(yBe," \u2014 "),Cz=n(yBe,"A",{href:!0});var NCt=s(Cz);MHo=r(NCt,"CanineForMultipleChoice"),NCt.forEach(t),EHo=r(yBe," (CANINE model)"),yBe.forEach(t),CHo=i(ee),nv=n(ee,"LI",{});var xBe=s(nv);zue=n(xBe,"STRONG",{});var qCt=s(zue);wHo=r(qCt,"convbert"),qCt.forEach(t),AHo=r(xBe," \u2014 "),wz=n(xBe,"A",{href:!0});var jCt=s(wz);LHo=r(jCt,"ConvBertForMultipleChoice"),jCt.forEach(t),yHo=r(xBe," (ConvBERT model)"),xBe.forEach(t),xHo=i(ee),sv=n(ee,"LI",{});var $Be=s(sv);Wue=n($Be,"STRONG",{});var DCt=s(Wue);$Ho=r(DCt,"data2vec-text"),DCt.forEach(t),kHo=r($Be," \u2014 "),Az=n($Be,"A",{href:!0});var GCt=s(Az);SHo=r(GCt,"Data2VecTextForMultipleChoice"),GCt.forEach(t),RHo=r($Be," (Data2VecText model)"),$Be.forEach(t),PHo=i(ee),lv=n(ee,"LI",{});var kBe=s(lv);Que=n(kBe,"STRONG",{});var OCt=s(Que);BHo=r(OCt,"deberta-v2"),OCt.forEach(t),IHo=r(kBe," \u2014 "),Lz=n(kBe,"A",{href:!0});var VCt=s(Lz);NHo=r(VCt,"DebertaV2ForMultipleChoice"),VCt.forEach(t),qHo=r(kBe," (DeBERTa-v2 model)"),kBe.forEach(t),jHo=i(ee),iv=n(ee,"LI",{});var SBe=s(iv);Hue=n(SBe,"STRONG",{});var XCt=s(Hue);DHo=r(XCt,"distilbert"),XCt.forEach(t),GHo=r(SBe," \u2014 "),yz=n(SBe,"A",{href:!0});var zCt=s(yz);OHo=r(zCt,"DistilBertForMultipleChoice"),zCt.forEach(t),VHo=r(SBe," (DistilBERT model)"),SBe.forEach(t),XHo=i(ee),dv=n(ee,"LI",{});var RBe=s(dv);Uue=n(RBe,"STRONG",{});var WCt=s(Uue);zHo=r(WCt,"electra"),WCt.forEach(t),WHo=r(RBe," \u2014 "),xz=n(RBe,"A",{href:!0});var QCt=s(xz);QHo=r(QCt,"ElectraForMultipleChoice"),QCt.forEach(t),HHo=r(RBe," (ELECTRA model)"),RBe.forEach(t),UHo=i(ee),cv=n(ee,"LI",{});var PBe=s(cv);Jue=n(PBe,"STRONG",{});var HCt=s(Jue);JHo=r(HCt,"flaubert"),HCt.forEach(t),YHo=r(PBe," \u2014 "),$z=n(PBe,"A",{href:!0});var UCt=s($z);KHo=r(UCt,"FlaubertForMultipleChoice"),UCt.forEach(t),ZHo=r(PBe," (FlauBERT model)"),PBe.forEach(t),eUo=i(ee),fv=n(ee,"LI",{});var BBe=s(fv);Yue=n(BBe,"STRONG",{});var JCt=s(Yue);oUo=r(JCt,"fnet"),JCt.forEach(t),rUo=r(BBe," \u2014 "),kz=n(BBe,"A",{href:!0});var YCt=s(kz);tUo=r(YCt,"FNetForMultipleChoice"),YCt.forEach(t),aUo=r(BBe," (FNet model)"),BBe.forEach(t),nUo=i(ee),mv=n(ee,"LI",{});var IBe=s(mv);Kue=n(IBe,"STRONG",{});var KCt=s(Kue);sUo=r(KCt,"funnel"),KCt.forEach(t),lUo=r(IBe," \u2014 "),Sz=n(IBe,"A",{href:!0});var ZCt=s(Sz);iUo=r(ZCt,"FunnelForMultipleChoice"),ZCt.forEach(t),dUo=r(IBe," (Funnel Transformer model)"),IBe.forEach(t),cUo=i(ee),gv=n(ee,"LI",{});var NBe=s(gv);Zue=n(NBe,"STRONG",{});var e5t=s(Zue);fUo=r(e5t,"ibert"),e5t.forEach(t),mUo=r(NBe," \u2014 "),Rz=n(NBe,"A",{href:!0});var o5t=s(Rz);gUo=r(o5t,"IBertForMultipleChoice"),o5t.forEach(t),hUo=r(NBe," (I-BERT model)"),NBe.forEach(t),pUo=i(ee),hv=n(ee,"LI",{});var qBe=s(hv);e1e=n(qBe,"STRONG",{});var r5t=s(e1e);_Uo=r(r5t,"longformer"),r5t.forEach(t),uUo=r(qBe," \u2014 "),Pz=n(qBe,"A",{href:!0});var t5t=s(Pz);bUo=r(t5t,"LongformerForMultipleChoice"),t5t.forEach(t),vUo=r(qBe," (Longformer model)"),qBe.forEach(t),FUo=i(ee),pv=n(ee,"LI",{});var jBe=s(pv);o1e=n(jBe,"STRONG",{});var a5t=s(o1e);TUo=r(a5t,"megatron-bert"),a5t.forEach(t),MUo=r(jBe," \u2014 "),Bz=n(jBe,"A",{href:!0});var n5t=s(Bz);EUo=r(n5t,"MegatronBertForMultipleChoice"),n5t.forEach(t),CUo=r(jBe," (Megatron-BERT model)"),jBe.forEach(t),wUo=i(ee),_v=n(ee,"LI",{});var DBe=s(_v);r1e=n(DBe,"STRONG",{});var s5t=s(r1e);AUo=r(s5t,"mobilebert"),s5t.forEach(t),LUo=r(DBe," \u2014 "),Iz=n(DBe,"A",{href:!0});var l5t=s(Iz);yUo=r(l5t,"MobileBertForMultipleChoice"),l5t.forEach(t),xUo=r(DBe," (MobileBERT model)"),DBe.forEach(t),$Uo=i(ee),uv=n(ee,"LI",{});var GBe=s(uv);t1e=n(GBe,"STRONG",{});var i5t=s(t1e);kUo=r(i5t,"mpnet"),i5t.forEach(t),SUo=r(GBe," \u2014 "),Nz=n(GBe,"A",{href:!0});var d5t=s(Nz);RUo=r(d5t,"MPNetForMultipleChoice"),d5t.forEach(t),PUo=r(GBe," (MPNet model)"),GBe.forEach(t),BUo=i(ee),bv=n(ee,"LI",{});var OBe=s(bv);a1e=n(OBe,"STRONG",{});var c5t=s(a1e);IUo=r(c5t,"nezha"),c5t.forEach(t),NUo=r(OBe," \u2014 "),qz=n(OBe,"A",{href:!0});var f5t=s(qz);qUo=r(f5t,"NezhaForMultipleChoice"),f5t.forEach(t),jUo=r(OBe," (Nezha model)"),OBe.forEach(t),DUo=i(ee),vv=n(ee,"LI",{});var VBe=s(vv);n1e=n(VBe,"STRONG",{});var m5t=s(n1e);GUo=r(m5t,"nystromformer"),m5t.forEach(t),OUo=r(VBe," \u2014 "),jz=n(VBe,"A",{href:!0});var g5t=s(jz);VUo=r(g5t,"NystromformerForMultipleChoice"),g5t.forEach(t),XUo=r(VBe," (Nystr\xF6mformer model)"),VBe.forEach(t),zUo=i(ee),Fv=n(ee,"LI",{});var XBe=s(Fv);s1e=n(XBe,"STRONG",{});var h5t=s(s1e);WUo=r(h5t,"qdqbert"),h5t.forEach(t),QUo=r(XBe," \u2014 "),Dz=n(XBe,"A",{href:!0});var p5t=s(Dz);HUo=r(p5t,"QDQBertForMultipleChoice"),p5t.forEach(t),UUo=r(XBe," (QDQBert model)"),XBe.forEach(t),JUo=i(ee),Tv=n(ee,"LI",{});var zBe=s(Tv);l1e=n(zBe,"STRONG",{});var _5t=s(l1e);YUo=r(_5t,"rembert"),_5t.forEach(t),KUo=r(zBe," \u2014 "),Gz=n(zBe,"A",{href:!0});var u5t=s(Gz);ZUo=r(u5t,"RemBertForMultipleChoice"),u5t.forEach(t),eJo=r(zBe," (RemBERT model)"),zBe.forEach(t),oJo=i(ee),Mv=n(ee,"LI",{});var WBe=s(Mv);i1e=n(WBe,"STRONG",{});var b5t=s(i1e);rJo=r(b5t,"roberta"),b5t.forEach(t),tJo=r(WBe," \u2014 "),Oz=n(WBe,"A",{href:!0});var v5t=s(Oz);aJo=r(v5t,"RobertaForMultipleChoice"),v5t.forEach(t),nJo=r(WBe," (RoBERTa model)"),WBe.forEach(t),sJo=i(ee),Ev=n(ee,"LI",{});var QBe=s(Ev);d1e=n(QBe,"STRONG",{});var F5t=s(d1e);lJo=r(F5t,"roformer"),F5t.forEach(t),iJo=r(QBe," \u2014 "),Vz=n(QBe,"A",{href:!0});var T5t=s(Vz);dJo=r(T5t,"RoFormerForMultipleChoice"),T5t.forEach(t),cJo=r(QBe," (RoFormer model)"),QBe.forEach(t),fJo=i(ee),Cv=n(ee,"LI",{});var HBe=s(Cv);c1e=n(HBe,"STRONG",{});var M5t=s(c1e);mJo=r(M5t,"squeezebert"),M5t.forEach(t),gJo=r(HBe," \u2014 "),Xz=n(HBe,"A",{href:!0});var E5t=s(Xz);hJo=r(E5t,"SqueezeBertForMultipleChoice"),E5t.forEach(t),pJo=r(HBe," (SqueezeBERT model)"),HBe.forEach(t),_Jo=i(ee),wv=n(ee,"LI",{});var UBe=s(wv);f1e=n(UBe,"STRONG",{});var C5t=s(f1e);uJo=r(C5t,"xlm"),C5t.forEach(t),bJo=r(UBe," \u2014 "),zz=n(UBe,"A",{href:!0});var w5t=s(zz);vJo=r(w5t,"XLMForMultipleChoice"),w5t.forEach(t),FJo=r(UBe," (XLM model)"),UBe.forEach(t),TJo=i(ee),Av=n(ee,"LI",{});var JBe=s(Av);m1e=n(JBe,"STRONG",{});var A5t=s(m1e);MJo=r(A5t,"xlm-roberta"),A5t.forEach(t),EJo=r(JBe," \u2014 "),Wz=n(JBe,"A",{href:!0});var L5t=s(Wz);CJo=r(L5t,"XLMRobertaForMultipleChoice"),L5t.forEach(t),wJo=r(JBe," (XLM-RoBERTa model)"),JBe.forEach(t),AJo=i(ee),Lv=n(ee,"LI",{});var YBe=s(Lv);g1e=n(YBe,"STRONG",{});var y5t=s(g1e);LJo=r(y5t,"xlm-roberta-xl"),y5t.forEach(t),yJo=r(YBe," \u2014 "),Qz=n(YBe,"A",{href:!0});var x5t=s(Qz);xJo=r(x5t,"XLMRobertaXLForMultipleChoice"),x5t.forEach(t),$Jo=r(YBe," (XLM-RoBERTa-XL model)"),YBe.forEach(t),kJo=i(ee),yv=n(ee,"LI",{});var KBe=s(yv);h1e=n(KBe,"STRONG",{});var $5t=s(h1e);SJo=r($5t,"xlnet"),$5t.forEach(t),RJo=r(KBe," \u2014 "),Hz=n(KBe,"A",{href:!0});var k5t=s(Hz);PJo=r(k5t,"XLNetForMultipleChoice"),k5t.forEach(t),BJo=r(KBe," (XLNet model)"),KBe.forEach(t),IJo=i(ee),xv=n(ee,"LI",{});var ZBe=s(xv);p1e=n(ZBe,"STRONG",{});var S5t=s(p1e);NJo=r(S5t,"yoso"),S5t.forEach(t),qJo=r(ZBe," \u2014 "),Uz=n(ZBe,"A",{href:!0});var R5t=s(Uz);jJo=r(R5t,"YosoForMultipleChoice"),R5t.forEach(t),DJo=r(ZBe," (YOSO model)"),ZBe.forEach(t),ee.forEach(t),GJo=i(ga),$v=n(ga,"P",{});var eIe=s($v);OJo=r(eIe,"The model is set in evaluation mode by default using "),_1e=n(eIe,"CODE",{});var P5t=s(_1e);VJo=r(P5t,"model.eval()"),P5t.forEach(t),XJo=r(eIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(eIe,"CODE",{});var B5t=s(u1e);zJo=r(B5t,"model.train()"),B5t.forEach(t),eIe.forEach(t),WJo=i(ga),T(kv.$$.fragment,ga),ga.forEach(t),fl.forEach(t),Cze=i(f),cd=n(f,"H2",{class:!0});var $Qe=s(cd);Sv=n($Qe,"A",{id:!0,class:!0,href:!0});var I5t=s(Sv);b1e=n(I5t,"SPAN",{});var N5t=s(b1e);T(C8.$$.fragment,N5t),N5t.forEach(t),I5t.forEach(t),QJo=i($Qe),v1e=n($Qe,"SPAN",{});var q5t=s(v1e);HJo=r(q5t,"AutoModelForNextSentencePrediction"),q5t.forEach(t),$Qe.forEach(t),wze=i(f),qo=n(f,"DIV",{class:!0});var ml=s(qo);T(w8.$$.fragment,ml),UJo=i(ml),fd=n(ml,"P",{});var Mte=s(fd);JJo=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jz=n(Mte,"A",{href:!0});var j5t=s(Jz);YJo=r(j5t,"from_pretrained()"),j5t.forEach(t),KJo=r(Mte," class method or the "),Yz=n(Mte,"A",{href:!0});var D5t=s(Yz);ZJo=r(D5t,"from_config()"),D5t.forEach(t),eYo=r(Mte,` class
method.`),Mte.forEach(t),oYo=i(ml),A8=n(ml,"P",{});var kQe=s(A8);rYo=r(kQe,"This class cannot be instantiated directly using "),F1e=n(kQe,"CODE",{});var G5t=s(F1e);tYo=r(G5t,"__init__()"),G5t.forEach(t),aYo=r(kQe," (throws an error)."),kQe.forEach(t),nYo=i(ml),pt=n(ml,"DIV",{class:!0});var BA=s(pt);T(L8.$$.fragment,BA),sYo=i(BA),T1e=n(BA,"P",{});var O5t=s(T1e);lYo=r(O5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),O5t.forEach(t),iYo=i(BA),md=n(BA,"P",{});var Ete=s(md);dYo=r(Ete,`Note:
Loading a model from its configuration file does `),M1e=n(Ete,"STRONG",{});var V5t=s(M1e);cYo=r(V5t,"not"),V5t.forEach(t),fYo=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(Ete,"A",{href:!0});var X5t=s(Kz);mYo=r(X5t,"from_pretrained()"),X5t.forEach(t),gYo=r(Ete," to load the model weights."),Ete.forEach(t),hYo=i(BA),T(Rv.$$.fragment,BA),BA.forEach(t),pYo=i(ml),ao=n(ml,"DIV",{class:!0});var ha=s(ao);T(y8.$$.fragment,ha),_Yo=i(ha),E1e=n(ha,"P",{});var z5t=s(E1e);uYo=r(z5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z5t.forEach(t),bYo=i(ha),Xa=n(ha,"P",{});var IA=s(Xa);vYo=r(IA,"The model class to instantiate is selected based on the "),C1e=n(IA,"CODE",{});var W5t=s(C1e);FYo=r(W5t,"model_type"),W5t.forEach(t),TYo=r(IA,` property of the config object (either
passed as an argument or loaded from `),w1e=n(IA,"CODE",{});var Q5t=s(w1e);MYo=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),EYo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(IA,"CODE",{});var H5t=s(A1e);CYo=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),wYo=r(IA,":"),IA.forEach(t),AYo=i(ha),jo=n(ha,"UL",{});var pa=s(jo);Pv=n(pa,"LI",{});var oIe=s(Pv);L1e=n(oIe,"STRONG",{});var U5t=s(L1e);LYo=r(U5t,"bert"),U5t.forEach(t),yYo=r(oIe," \u2014 "),Zz=n(oIe,"A",{href:!0});var J5t=s(Zz);xYo=r(J5t,"BertForNextSentencePrediction"),J5t.forEach(t),$Yo=r(oIe," (BERT model)"),oIe.forEach(t),kYo=i(pa),Bv=n(pa,"LI",{});var rIe=s(Bv);y1e=n(rIe,"STRONG",{});var Y5t=s(y1e);SYo=r(Y5t,"fnet"),Y5t.forEach(t),RYo=r(rIe," \u2014 "),eW=n(rIe,"A",{href:!0});var K5t=s(eW);PYo=r(K5t,"FNetForNextSentencePrediction"),K5t.forEach(t),BYo=r(rIe," (FNet model)"),rIe.forEach(t),IYo=i(pa),Iv=n(pa,"LI",{});var tIe=s(Iv);x1e=n(tIe,"STRONG",{});var Z5t=s(x1e);NYo=r(Z5t,"megatron-bert"),Z5t.forEach(t),qYo=r(tIe," \u2014 "),oW=n(tIe,"A",{href:!0});var e3t=s(oW);jYo=r(e3t,"MegatronBertForNextSentencePrediction"),e3t.forEach(t),DYo=r(tIe," (Megatron-BERT model)"),tIe.forEach(t),GYo=i(pa),Nv=n(pa,"LI",{});var aIe=s(Nv);$1e=n(aIe,"STRONG",{});var o3t=s($1e);OYo=r(o3t,"mobilebert"),o3t.forEach(t),VYo=r(aIe," \u2014 "),rW=n(aIe,"A",{href:!0});var r3t=s(rW);XYo=r(r3t,"MobileBertForNextSentencePrediction"),r3t.forEach(t),zYo=r(aIe," (MobileBERT model)"),aIe.forEach(t),WYo=i(pa),qv=n(pa,"LI",{});var nIe=s(qv);k1e=n(nIe,"STRONG",{});var t3t=s(k1e);QYo=r(t3t,"nezha"),t3t.forEach(t),HYo=r(nIe," \u2014 "),tW=n(nIe,"A",{href:!0});var a3t=s(tW);UYo=r(a3t,"NezhaForNextSentencePrediction"),a3t.forEach(t),JYo=r(nIe," (Nezha model)"),nIe.forEach(t),YYo=i(pa),jv=n(pa,"LI",{});var sIe=s(jv);S1e=n(sIe,"STRONG",{});var n3t=s(S1e);KYo=r(n3t,"qdqbert"),n3t.forEach(t),ZYo=r(sIe," \u2014 "),aW=n(sIe,"A",{href:!0});var s3t=s(aW);eKo=r(s3t,"QDQBertForNextSentencePrediction"),s3t.forEach(t),oKo=r(sIe," (QDQBert model)"),sIe.forEach(t),pa.forEach(t),rKo=i(ha),Dv=n(ha,"P",{});var lIe=s(Dv);tKo=r(lIe,"The model is set in evaluation mode by default using "),R1e=n(lIe,"CODE",{});var l3t=s(R1e);aKo=r(l3t,"model.eval()"),l3t.forEach(t),nKo=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(lIe,"CODE",{});var i3t=s(P1e);sKo=r(i3t,"model.train()"),i3t.forEach(t),lIe.forEach(t),lKo=i(ha),T(Gv.$$.fragment,ha),ha.forEach(t),ml.forEach(t),Aze=i(f),gd=n(f,"H2",{class:!0});var SQe=s(gd);Ov=n(SQe,"A",{id:!0,class:!0,href:!0});var d3t=s(Ov);B1e=n(d3t,"SPAN",{});var c3t=s(B1e);T(x8.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),iKo=i(SQe),I1e=n(SQe,"SPAN",{});var f3t=s(I1e);dKo=r(f3t,"AutoModelForTokenClassification"),f3t.forEach(t),SQe.forEach(t),Lze=i(f),Do=n(f,"DIV",{class:!0});var gl=s(Do);T($8.$$.fragment,gl),cKo=i(gl),hd=n(gl,"P",{});var Cte=s(hd);fKo=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nW=n(Cte,"A",{href:!0});var m3t=s(nW);mKo=r(m3t,"from_pretrained()"),m3t.forEach(t),gKo=r(Cte," class method or the "),sW=n(Cte,"A",{href:!0});var g3t=s(sW);hKo=r(g3t,"from_config()"),g3t.forEach(t),pKo=r(Cte,` class
method.`),Cte.forEach(t),_Ko=i(gl),k8=n(gl,"P",{});var RQe=s(k8);uKo=r(RQe,"This class cannot be instantiated directly using "),N1e=n(RQe,"CODE",{});var h3t=s(N1e);bKo=r(h3t,"__init__()"),h3t.forEach(t),vKo=r(RQe," (throws an error)."),RQe.forEach(t),FKo=i(gl),_t=n(gl,"DIV",{class:!0});var NA=s(_t);T(S8.$$.fragment,NA),TKo=i(NA),q1e=n(NA,"P",{});var p3t=s(q1e);MKo=r(p3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),p3t.forEach(t),EKo=i(NA),pd=n(NA,"P",{});var wte=s(pd);CKo=r(wte,`Note:
Loading a model from its configuration file does `),j1e=n(wte,"STRONG",{});var _3t=s(j1e);wKo=r(_3t,"not"),_3t.forEach(t),AKo=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(wte,"A",{href:!0});var u3t=s(lW);LKo=r(u3t,"from_pretrained()"),u3t.forEach(t),yKo=r(wte," to load the model weights."),wte.forEach(t),xKo=i(NA),T(Vv.$$.fragment,NA),NA.forEach(t),$Ko=i(gl),no=n(gl,"DIV",{class:!0});var _a=s(no);T(R8.$$.fragment,_a),kKo=i(_a),D1e=n(_a,"P",{});var b3t=s(D1e);SKo=r(b3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b3t.forEach(t),RKo=i(_a),za=n(_a,"P",{});var qA=s(za);PKo=r(qA,"The model class to instantiate is selected based on the "),G1e=n(qA,"CODE",{});var v3t=s(G1e);BKo=r(v3t,"model_type"),v3t.forEach(t),IKo=r(qA,` property of the config object (either
passed as an argument or loaded from `),O1e=n(qA,"CODE",{});var F3t=s(O1e);NKo=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),qKo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(qA,"CODE",{});var T3t=s(V1e);jKo=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),DKo=r(qA,":"),qA.forEach(t),GKo=i(_a),U=n(_a,"UL",{});var Y=s(U);Xv=n(Y,"LI",{});var iIe=s(Xv);X1e=n(iIe,"STRONG",{});var M3t=s(X1e);OKo=r(M3t,"albert"),M3t.forEach(t),VKo=r(iIe," \u2014 "),iW=n(iIe,"A",{href:!0});var E3t=s(iW);XKo=r(E3t,"AlbertForTokenClassification"),E3t.forEach(t),zKo=r(iIe," (ALBERT model)"),iIe.forEach(t),WKo=i(Y),zv=n(Y,"LI",{});var dIe=s(zv);z1e=n(dIe,"STRONG",{});var C3t=s(z1e);QKo=r(C3t,"bert"),C3t.forEach(t),HKo=r(dIe," \u2014 "),dW=n(dIe,"A",{href:!0});var w3t=s(dW);UKo=r(w3t,"BertForTokenClassification"),w3t.forEach(t),JKo=r(dIe," (BERT model)"),dIe.forEach(t),YKo=i(Y),Wv=n(Y,"LI",{});var cIe=s(Wv);W1e=n(cIe,"STRONG",{});var A3t=s(W1e);KKo=r(A3t,"big_bird"),A3t.forEach(t),ZKo=r(cIe," \u2014 "),cW=n(cIe,"A",{href:!0});var L3t=s(cW);eZo=r(L3t,"BigBirdForTokenClassification"),L3t.forEach(t),oZo=r(cIe," (BigBird model)"),cIe.forEach(t),rZo=i(Y),Qv=n(Y,"LI",{});var fIe=s(Qv);Q1e=n(fIe,"STRONG",{});var y3t=s(Q1e);tZo=r(y3t,"bloom"),y3t.forEach(t),aZo=r(fIe," \u2014 "),fW=n(fIe,"A",{href:!0});var x3t=s(fW);nZo=r(x3t,"BloomForTokenClassification"),x3t.forEach(t),sZo=r(fIe," (BLOOM model)"),fIe.forEach(t),lZo=i(Y),Hv=n(Y,"LI",{});var mIe=s(Hv);H1e=n(mIe,"STRONG",{});var $3t=s(H1e);iZo=r($3t,"camembert"),$3t.forEach(t),dZo=r(mIe," \u2014 "),mW=n(mIe,"A",{href:!0});var k3t=s(mW);cZo=r(k3t,"CamembertForTokenClassification"),k3t.forEach(t),fZo=r(mIe," (CamemBERT model)"),mIe.forEach(t),mZo=i(Y),Uv=n(Y,"LI",{});var gIe=s(Uv);U1e=n(gIe,"STRONG",{});var S3t=s(U1e);gZo=r(S3t,"canine"),S3t.forEach(t),hZo=r(gIe," \u2014 "),gW=n(gIe,"A",{href:!0});var R3t=s(gW);pZo=r(R3t,"CanineForTokenClassification"),R3t.forEach(t),_Zo=r(gIe," (CANINE model)"),gIe.forEach(t),uZo=i(Y),Jv=n(Y,"LI",{});var hIe=s(Jv);J1e=n(hIe,"STRONG",{});var P3t=s(J1e);bZo=r(P3t,"convbert"),P3t.forEach(t),vZo=r(hIe," \u2014 "),hW=n(hIe,"A",{href:!0});var B3t=s(hW);FZo=r(B3t,"ConvBertForTokenClassification"),B3t.forEach(t),TZo=r(hIe," (ConvBERT model)"),hIe.forEach(t),MZo=i(Y),Yv=n(Y,"LI",{});var pIe=s(Yv);Y1e=n(pIe,"STRONG",{});var I3t=s(Y1e);EZo=r(I3t,"data2vec-text"),I3t.forEach(t),CZo=r(pIe," \u2014 "),pW=n(pIe,"A",{href:!0});var N3t=s(pW);wZo=r(N3t,"Data2VecTextForTokenClassification"),N3t.forEach(t),AZo=r(pIe," (Data2VecText model)"),pIe.forEach(t),LZo=i(Y),Kv=n(Y,"LI",{});var _Ie=s(Kv);K1e=n(_Ie,"STRONG",{});var q3t=s(K1e);yZo=r(q3t,"deberta"),q3t.forEach(t),xZo=r(_Ie," \u2014 "),_W=n(_Ie,"A",{href:!0});var j3t=s(_W);$Zo=r(j3t,"DebertaForTokenClassification"),j3t.forEach(t),kZo=r(_Ie," (DeBERTa model)"),_Ie.forEach(t),SZo=i(Y),Zv=n(Y,"LI",{});var uIe=s(Zv);Z1e=n(uIe,"STRONG",{});var D3t=s(Z1e);RZo=r(D3t,"deberta-v2"),D3t.forEach(t),PZo=r(uIe," \u2014 "),uW=n(uIe,"A",{href:!0});var G3t=s(uW);BZo=r(G3t,"DebertaV2ForTokenClassification"),G3t.forEach(t),IZo=r(uIe," (DeBERTa-v2 model)"),uIe.forEach(t),NZo=i(Y),eF=n(Y,"LI",{});var bIe=s(eF);e7e=n(bIe,"STRONG",{});var O3t=s(e7e);qZo=r(O3t,"distilbert"),O3t.forEach(t),jZo=r(bIe," \u2014 "),bW=n(bIe,"A",{href:!0});var V3t=s(bW);DZo=r(V3t,"DistilBertForTokenClassification"),V3t.forEach(t),GZo=r(bIe," (DistilBERT model)"),bIe.forEach(t),OZo=i(Y),oF=n(Y,"LI",{});var vIe=s(oF);o7e=n(vIe,"STRONG",{});var X3t=s(o7e);VZo=r(X3t,"electra"),X3t.forEach(t),XZo=r(vIe," \u2014 "),vW=n(vIe,"A",{href:!0});var z3t=s(vW);zZo=r(z3t,"ElectraForTokenClassification"),z3t.forEach(t),WZo=r(vIe," (ELECTRA model)"),vIe.forEach(t),QZo=i(Y),rF=n(Y,"LI",{});var FIe=s(rF);r7e=n(FIe,"STRONG",{});var W3t=s(r7e);HZo=r(W3t,"flaubert"),W3t.forEach(t),UZo=r(FIe," \u2014 "),FW=n(FIe,"A",{href:!0});var Q3t=s(FW);JZo=r(Q3t,"FlaubertForTokenClassification"),Q3t.forEach(t),YZo=r(FIe," (FlauBERT model)"),FIe.forEach(t),KZo=i(Y),tF=n(Y,"LI",{});var TIe=s(tF);t7e=n(TIe,"STRONG",{});var H3t=s(t7e);ZZo=r(H3t,"fnet"),H3t.forEach(t),eer=r(TIe," \u2014 "),TW=n(TIe,"A",{href:!0});var U3t=s(TW);oer=r(U3t,"FNetForTokenClassification"),U3t.forEach(t),rer=r(TIe," (FNet model)"),TIe.forEach(t),ter=i(Y),aF=n(Y,"LI",{});var MIe=s(aF);a7e=n(MIe,"STRONG",{});var J3t=s(a7e);aer=r(J3t,"funnel"),J3t.forEach(t),ner=r(MIe," \u2014 "),MW=n(MIe,"A",{href:!0});var Y3t=s(MW);ser=r(Y3t,"FunnelForTokenClassification"),Y3t.forEach(t),ler=r(MIe," (Funnel Transformer model)"),MIe.forEach(t),ier=i(Y),nF=n(Y,"LI",{});var EIe=s(nF);n7e=n(EIe,"STRONG",{});var K3t=s(n7e);der=r(K3t,"gpt2"),K3t.forEach(t),cer=r(EIe," \u2014 "),EW=n(EIe,"A",{href:!0});var Z3t=s(EW);fer=r(Z3t,"GPT2ForTokenClassification"),Z3t.forEach(t),mer=r(EIe," (OpenAI GPT-2 model)"),EIe.forEach(t),ger=i(Y),sF=n(Y,"LI",{});var CIe=s(sF);s7e=n(CIe,"STRONG",{});var e0t=s(s7e);her=r(e0t,"ibert"),e0t.forEach(t),per=r(CIe," \u2014 "),CW=n(CIe,"A",{href:!0});var o0t=s(CW);_er=r(o0t,"IBertForTokenClassification"),o0t.forEach(t),uer=r(CIe," (I-BERT model)"),CIe.forEach(t),ber=i(Y),lF=n(Y,"LI",{});var wIe=s(lF);l7e=n(wIe,"STRONG",{});var r0t=s(l7e);ver=r(r0t,"layoutlm"),r0t.forEach(t),Fer=r(wIe," \u2014 "),wW=n(wIe,"A",{href:!0});var t0t=s(wW);Ter=r(t0t,"LayoutLMForTokenClassification"),t0t.forEach(t),Mer=r(wIe," (LayoutLM model)"),wIe.forEach(t),Eer=i(Y),iF=n(Y,"LI",{});var AIe=s(iF);i7e=n(AIe,"STRONG",{});var a0t=s(i7e);Cer=r(a0t,"layoutlmv2"),a0t.forEach(t),wer=r(AIe," \u2014 "),AW=n(AIe,"A",{href:!0});var n0t=s(AW);Aer=r(n0t,"LayoutLMv2ForTokenClassification"),n0t.forEach(t),Ler=r(AIe," (LayoutLMv2 model)"),AIe.forEach(t),yer=i(Y),dF=n(Y,"LI",{});var LIe=s(dF);d7e=n(LIe,"STRONG",{});var s0t=s(d7e);xer=r(s0t,"layoutlmv3"),s0t.forEach(t),$er=r(LIe," \u2014 "),LW=n(LIe,"A",{href:!0});var l0t=s(LW);ker=r(l0t,"LayoutLMv3ForTokenClassification"),l0t.forEach(t),Ser=r(LIe," (LayoutLMv3 model)"),LIe.forEach(t),Rer=i(Y),cF=n(Y,"LI",{});var yIe=s(cF);c7e=n(yIe,"STRONG",{});var i0t=s(c7e);Per=r(i0t,"longformer"),i0t.forEach(t),Ber=r(yIe," \u2014 "),yW=n(yIe,"A",{href:!0});var d0t=s(yW);Ier=r(d0t,"LongformerForTokenClassification"),d0t.forEach(t),Ner=r(yIe," (Longformer model)"),yIe.forEach(t),qer=i(Y),fF=n(Y,"LI",{});var xIe=s(fF);f7e=n(xIe,"STRONG",{});var c0t=s(f7e);jer=r(c0t,"megatron-bert"),c0t.forEach(t),Der=r(xIe," \u2014 "),xW=n(xIe,"A",{href:!0});var f0t=s(xW);Ger=r(f0t,"MegatronBertForTokenClassification"),f0t.forEach(t),Oer=r(xIe," (Megatron-BERT model)"),xIe.forEach(t),Ver=i(Y),mF=n(Y,"LI",{});var $Ie=s(mF);m7e=n($Ie,"STRONG",{});var m0t=s(m7e);Xer=r(m0t,"mobilebert"),m0t.forEach(t),zer=r($Ie," \u2014 "),$W=n($Ie,"A",{href:!0});var g0t=s($W);Wer=r(g0t,"MobileBertForTokenClassification"),g0t.forEach(t),Qer=r($Ie," (MobileBERT model)"),$Ie.forEach(t),Her=i(Y),gF=n(Y,"LI",{});var kIe=s(gF);g7e=n(kIe,"STRONG",{});var h0t=s(g7e);Uer=r(h0t,"mpnet"),h0t.forEach(t),Jer=r(kIe," \u2014 "),kW=n(kIe,"A",{href:!0});var p0t=s(kW);Yer=r(p0t,"MPNetForTokenClassification"),p0t.forEach(t),Ker=r(kIe," (MPNet model)"),kIe.forEach(t),Zer=i(Y),hF=n(Y,"LI",{});var SIe=s(hF);h7e=n(SIe,"STRONG",{});var _0t=s(h7e);eor=r(_0t,"nezha"),_0t.forEach(t),oor=r(SIe," \u2014 "),SW=n(SIe,"A",{href:!0});var u0t=s(SW);ror=r(u0t,"NezhaForTokenClassification"),u0t.forEach(t),tor=r(SIe," (Nezha model)"),SIe.forEach(t),aor=i(Y),pF=n(Y,"LI",{});var RIe=s(pF);p7e=n(RIe,"STRONG",{});var b0t=s(p7e);nor=r(b0t,"nystromformer"),b0t.forEach(t),sor=r(RIe," \u2014 "),RW=n(RIe,"A",{href:!0});var v0t=s(RW);lor=r(v0t,"NystromformerForTokenClassification"),v0t.forEach(t),ior=r(RIe," (Nystr\xF6mformer model)"),RIe.forEach(t),dor=i(Y),_F=n(Y,"LI",{});var PIe=s(_F);_7e=n(PIe,"STRONG",{});var F0t=s(_7e);cor=r(F0t,"qdqbert"),F0t.forEach(t),mor=r(PIe," \u2014 "),PW=n(PIe,"A",{href:!0});var T0t=s(PW);gor=r(T0t,"QDQBertForTokenClassification"),T0t.forEach(t),hor=r(PIe," (QDQBert model)"),PIe.forEach(t),por=i(Y),uF=n(Y,"LI",{});var BIe=s(uF);u7e=n(BIe,"STRONG",{});var M0t=s(u7e);_or=r(M0t,"rembert"),M0t.forEach(t),uor=r(BIe," \u2014 "),BW=n(BIe,"A",{href:!0});var E0t=s(BW);bor=r(E0t,"RemBertForTokenClassification"),E0t.forEach(t),vor=r(BIe," (RemBERT model)"),BIe.forEach(t),For=i(Y),bF=n(Y,"LI",{});var IIe=s(bF);b7e=n(IIe,"STRONG",{});var C0t=s(b7e);Tor=r(C0t,"roberta"),C0t.forEach(t),Mor=r(IIe," \u2014 "),IW=n(IIe,"A",{href:!0});var w0t=s(IW);Eor=r(w0t,"RobertaForTokenClassification"),w0t.forEach(t),Cor=r(IIe," (RoBERTa model)"),IIe.forEach(t),wor=i(Y),vF=n(Y,"LI",{});var NIe=s(vF);v7e=n(NIe,"STRONG",{});var A0t=s(v7e);Aor=r(A0t,"roformer"),A0t.forEach(t),Lor=r(NIe," \u2014 "),NW=n(NIe,"A",{href:!0});var L0t=s(NW);yor=r(L0t,"RoFormerForTokenClassification"),L0t.forEach(t),xor=r(NIe," (RoFormer model)"),NIe.forEach(t),$or=i(Y),FF=n(Y,"LI",{});var qIe=s(FF);F7e=n(qIe,"STRONG",{});var y0t=s(F7e);kor=r(y0t,"squeezebert"),y0t.forEach(t),Sor=r(qIe," \u2014 "),qW=n(qIe,"A",{href:!0});var x0t=s(qW);Ror=r(x0t,"SqueezeBertForTokenClassification"),x0t.forEach(t),Por=r(qIe," (SqueezeBERT model)"),qIe.forEach(t),Bor=i(Y),TF=n(Y,"LI",{});var jIe=s(TF);T7e=n(jIe,"STRONG",{});var $0t=s(T7e);Ior=r($0t,"xlm"),$0t.forEach(t),Nor=r(jIe," \u2014 "),jW=n(jIe,"A",{href:!0});var k0t=s(jW);qor=r(k0t,"XLMForTokenClassification"),k0t.forEach(t),jor=r(jIe," (XLM model)"),jIe.forEach(t),Dor=i(Y),MF=n(Y,"LI",{});var DIe=s(MF);M7e=n(DIe,"STRONG",{});var S0t=s(M7e);Gor=r(S0t,"xlm-roberta"),S0t.forEach(t),Oor=r(DIe," \u2014 "),DW=n(DIe,"A",{href:!0});var R0t=s(DW);Vor=r(R0t,"XLMRobertaForTokenClassification"),R0t.forEach(t),Xor=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),zor=i(Y),EF=n(Y,"LI",{});var GIe=s(EF);E7e=n(GIe,"STRONG",{});var P0t=s(E7e);Wor=r(P0t,"xlm-roberta-xl"),P0t.forEach(t),Qor=r(GIe," \u2014 "),GW=n(GIe,"A",{href:!0});var B0t=s(GW);Hor=r(B0t,"XLMRobertaXLForTokenClassification"),B0t.forEach(t),Uor=r(GIe," (XLM-RoBERTa-XL model)"),GIe.forEach(t),Jor=i(Y),CF=n(Y,"LI",{});var OIe=s(CF);C7e=n(OIe,"STRONG",{});var I0t=s(C7e);Yor=r(I0t,"xlnet"),I0t.forEach(t),Kor=r(OIe," \u2014 "),OW=n(OIe,"A",{href:!0});var N0t=s(OW);Zor=r(N0t,"XLNetForTokenClassification"),N0t.forEach(t),err=r(OIe," (XLNet model)"),OIe.forEach(t),orr=i(Y),wF=n(Y,"LI",{});var VIe=s(wF);w7e=n(VIe,"STRONG",{});var q0t=s(w7e);rrr=r(q0t,"yoso"),q0t.forEach(t),trr=r(VIe," \u2014 "),VW=n(VIe,"A",{href:!0});var j0t=s(VW);arr=r(j0t,"YosoForTokenClassification"),j0t.forEach(t),nrr=r(VIe," (YOSO model)"),VIe.forEach(t),Y.forEach(t),srr=i(_a),AF=n(_a,"P",{});var XIe=s(AF);lrr=r(XIe,"The model is set in evaluation mode by default using "),A7e=n(XIe,"CODE",{});var D0t=s(A7e);irr=r(D0t,"model.eval()"),D0t.forEach(t),drr=r(XIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L7e=n(XIe,"CODE",{});var G0t=s(L7e);crr=r(G0t,"model.train()"),G0t.forEach(t),XIe.forEach(t),frr=i(_a),T(LF.$$.fragment,_a),_a.forEach(t),gl.forEach(t),yze=i(f),_d=n(f,"H2",{class:!0});var PQe=s(_d);yF=n(PQe,"A",{id:!0,class:!0,href:!0});var O0t=s(yF);y7e=n(O0t,"SPAN",{});var V0t=s(y7e);T(P8.$$.fragment,V0t),V0t.forEach(t),O0t.forEach(t),mrr=i(PQe),x7e=n(PQe,"SPAN",{});var X0t=s(x7e);grr=r(X0t,"AutoModelForQuestionAnswering"),X0t.forEach(t),PQe.forEach(t),xze=i(f),Go=n(f,"DIV",{class:!0});var hl=s(Go);T(B8.$$.fragment,hl),hrr=i(hl),ud=n(hl,"P",{});var Ate=s(ud);prr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XW=n(Ate,"A",{href:!0});var z0t=s(XW);_rr=r(z0t,"from_pretrained()"),z0t.forEach(t),urr=r(Ate," class method or the "),zW=n(Ate,"A",{href:!0});var W0t=s(zW);brr=r(W0t,"from_config()"),W0t.forEach(t),vrr=r(Ate,` class
method.`),Ate.forEach(t),Frr=i(hl),I8=n(hl,"P",{});var BQe=s(I8);Trr=r(BQe,"This class cannot be instantiated directly using "),$7e=n(BQe,"CODE",{});var Q0t=s($7e);Mrr=r(Q0t,"__init__()"),Q0t.forEach(t),Err=r(BQe," (throws an error)."),BQe.forEach(t),Crr=i(hl),ut=n(hl,"DIV",{class:!0});var jA=s(ut);T(N8.$$.fragment,jA),wrr=i(jA),k7e=n(jA,"P",{});var H0t=s(k7e);Arr=r(H0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),H0t.forEach(t),Lrr=i(jA),bd=n(jA,"P",{});var Lte=s(bd);yrr=r(Lte,`Note:
Loading a model from its configuration file does `),S7e=n(Lte,"STRONG",{});var U0t=s(S7e);xrr=r(U0t,"not"),U0t.forEach(t),$rr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(Lte,"A",{href:!0});var J0t=s(WW);krr=r(J0t,"from_pretrained()"),J0t.forEach(t),Srr=r(Lte," to load the model weights."),Lte.forEach(t),Rrr=i(jA),T(xF.$$.fragment,jA),jA.forEach(t),Prr=i(hl),so=n(hl,"DIV",{class:!0});var ua=s(so);T(q8.$$.fragment,ua),Brr=i(ua),R7e=n(ua,"P",{});var Y0t=s(R7e);Irr=r(Y0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Y0t.forEach(t),Nrr=i(ua),Wa=n(ua,"P",{});var DA=s(Wa);qrr=r(DA,"The model class to instantiate is selected based on the "),P7e=n(DA,"CODE",{});var K0t=s(P7e);jrr=r(K0t,"model_type"),K0t.forEach(t),Drr=r(DA,` property of the config object (either
passed as an argument or loaded from `),B7e=n(DA,"CODE",{});var Z0t=s(B7e);Grr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),Orr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(DA,"CODE",{});var ewt=s(I7e);Vrr=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),Xrr=r(DA,":"),DA.forEach(t),zrr=i(ua),V=n(ua,"UL",{});var X=s(V);$F=n(X,"LI",{});var zIe=s($F);N7e=n(zIe,"STRONG",{});var owt=s(N7e);Wrr=r(owt,"albert"),owt.forEach(t),Qrr=r(zIe," \u2014 "),QW=n(zIe,"A",{href:!0});var rwt=s(QW);Hrr=r(rwt,"AlbertForQuestionAnswering"),rwt.forEach(t),Urr=r(zIe," (ALBERT model)"),zIe.forEach(t),Jrr=i(X),kF=n(X,"LI",{});var WIe=s(kF);q7e=n(WIe,"STRONG",{});var twt=s(q7e);Yrr=r(twt,"bart"),twt.forEach(t),Krr=r(WIe," \u2014 "),HW=n(WIe,"A",{href:!0});var awt=s(HW);Zrr=r(awt,"BartForQuestionAnswering"),awt.forEach(t),etr=r(WIe," (BART model)"),WIe.forEach(t),otr=i(X),SF=n(X,"LI",{});var QIe=s(SF);j7e=n(QIe,"STRONG",{});var nwt=s(j7e);rtr=r(nwt,"bert"),nwt.forEach(t),ttr=r(QIe," \u2014 "),UW=n(QIe,"A",{href:!0});var swt=s(UW);atr=r(swt,"BertForQuestionAnswering"),swt.forEach(t),ntr=r(QIe," (BERT model)"),QIe.forEach(t),str=i(X),RF=n(X,"LI",{});var HIe=s(RF);D7e=n(HIe,"STRONG",{});var lwt=s(D7e);ltr=r(lwt,"big_bird"),lwt.forEach(t),itr=r(HIe," \u2014 "),JW=n(HIe,"A",{href:!0});var iwt=s(JW);dtr=r(iwt,"BigBirdForQuestionAnswering"),iwt.forEach(t),ctr=r(HIe," (BigBird model)"),HIe.forEach(t),ftr=i(X),PF=n(X,"LI",{});var UIe=s(PF);G7e=n(UIe,"STRONG",{});var dwt=s(G7e);mtr=r(dwt,"bigbird_pegasus"),dwt.forEach(t),gtr=r(UIe," \u2014 "),YW=n(UIe,"A",{href:!0});var cwt=s(YW);htr=r(cwt,"BigBirdPegasusForQuestionAnswering"),cwt.forEach(t),ptr=r(UIe," (BigBird-Pegasus model)"),UIe.forEach(t),_tr=i(X),BF=n(X,"LI",{});var JIe=s(BF);O7e=n(JIe,"STRONG",{});var fwt=s(O7e);utr=r(fwt,"camembert"),fwt.forEach(t),btr=r(JIe," \u2014 "),KW=n(JIe,"A",{href:!0});var mwt=s(KW);vtr=r(mwt,"CamembertForQuestionAnswering"),mwt.forEach(t),Ftr=r(JIe," (CamemBERT model)"),JIe.forEach(t),Ttr=i(X),IF=n(X,"LI",{});var YIe=s(IF);V7e=n(YIe,"STRONG",{});var gwt=s(V7e);Mtr=r(gwt,"canine"),gwt.forEach(t),Etr=r(YIe," \u2014 "),ZW=n(YIe,"A",{href:!0});var hwt=s(ZW);Ctr=r(hwt,"CanineForQuestionAnswering"),hwt.forEach(t),wtr=r(YIe," (CANINE model)"),YIe.forEach(t),Atr=i(X),NF=n(X,"LI",{});var KIe=s(NF);X7e=n(KIe,"STRONG",{});var pwt=s(X7e);Ltr=r(pwt,"convbert"),pwt.forEach(t),ytr=r(KIe," \u2014 "),eQ=n(KIe,"A",{href:!0});var _wt=s(eQ);xtr=r(_wt,"ConvBertForQuestionAnswering"),_wt.forEach(t),$tr=r(KIe," (ConvBERT model)"),KIe.forEach(t),ktr=i(X),qF=n(X,"LI",{});var ZIe=s(qF);z7e=n(ZIe,"STRONG",{});var uwt=s(z7e);Str=r(uwt,"data2vec-text"),uwt.forEach(t),Rtr=r(ZIe," \u2014 "),oQ=n(ZIe,"A",{href:!0});var bwt=s(oQ);Ptr=r(bwt,"Data2VecTextForQuestionAnswering"),bwt.forEach(t),Btr=r(ZIe," (Data2VecText model)"),ZIe.forEach(t),Itr=i(X),jF=n(X,"LI",{});var eNe=s(jF);W7e=n(eNe,"STRONG",{});var vwt=s(W7e);Ntr=r(vwt,"deberta"),vwt.forEach(t),qtr=r(eNe," \u2014 "),rQ=n(eNe,"A",{href:!0});var Fwt=s(rQ);jtr=r(Fwt,"DebertaForQuestionAnswering"),Fwt.forEach(t),Dtr=r(eNe," (DeBERTa model)"),eNe.forEach(t),Gtr=i(X),DF=n(X,"LI",{});var oNe=s(DF);Q7e=n(oNe,"STRONG",{});var Twt=s(Q7e);Otr=r(Twt,"deberta-v2"),Twt.forEach(t),Vtr=r(oNe," \u2014 "),tQ=n(oNe,"A",{href:!0});var Mwt=s(tQ);Xtr=r(Mwt,"DebertaV2ForQuestionAnswering"),Mwt.forEach(t),ztr=r(oNe," (DeBERTa-v2 model)"),oNe.forEach(t),Wtr=i(X),GF=n(X,"LI",{});var rNe=s(GF);H7e=n(rNe,"STRONG",{});var Ewt=s(H7e);Qtr=r(Ewt,"distilbert"),Ewt.forEach(t),Htr=r(rNe," \u2014 "),aQ=n(rNe,"A",{href:!0});var Cwt=s(aQ);Utr=r(Cwt,"DistilBertForQuestionAnswering"),Cwt.forEach(t),Jtr=r(rNe," (DistilBERT model)"),rNe.forEach(t),Ytr=i(X),OF=n(X,"LI",{});var tNe=s(OF);U7e=n(tNe,"STRONG",{});var wwt=s(U7e);Ktr=r(wwt,"electra"),wwt.forEach(t),Ztr=r(tNe," \u2014 "),nQ=n(tNe,"A",{href:!0});var Awt=s(nQ);ear=r(Awt,"ElectraForQuestionAnswering"),Awt.forEach(t),oar=r(tNe," (ELECTRA model)"),tNe.forEach(t),rar=i(X),VF=n(X,"LI",{});var aNe=s(VF);J7e=n(aNe,"STRONG",{});var Lwt=s(J7e);tar=r(Lwt,"flaubert"),Lwt.forEach(t),aar=r(aNe," \u2014 "),sQ=n(aNe,"A",{href:!0});var ywt=s(sQ);nar=r(ywt,"FlaubertForQuestionAnsweringSimple"),ywt.forEach(t),sar=r(aNe," (FlauBERT model)"),aNe.forEach(t),lar=i(X),XF=n(X,"LI",{});var nNe=s(XF);Y7e=n(nNe,"STRONG",{});var xwt=s(Y7e);iar=r(xwt,"fnet"),xwt.forEach(t),dar=r(nNe," \u2014 "),lQ=n(nNe,"A",{href:!0});var $wt=s(lQ);car=r($wt,"FNetForQuestionAnswering"),$wt.forEach(t),far=r(nNe," (FNet model)"),nNe.forEach(t),mar=i(X),zF=n(X,"LI",{});var sNe=s(zF);K7e=n(sNe,"STRONG",{});var kwt=s(K7e);gar=r(kwt,"funnel"),kwt.forEach(t),har=r(sNe," \u2014 "),iQ=n(sNe,"A",{href:!0});var Swt=s(iQ);par=r(Swt,"FunnelForQuestionAnswering"),Swt.forEach(t),_ar=r(sNe," (Funnel Transformer model)"),sNe.forEach(t),uar=i(X),WF=n(X,"LI",{});var lNe=s(WF);Z7e=n(lNe,"STRONG",{});var Rwt=s(Z7e);bar=r(Rwt,"gptj"),Rwt.forEach(t),Far=r(lNe," \u2014 "),dQ=n(lNe,"A",{href:!0});var Pwt=s(dQ);Tar=r(Pwt,"GPTJForQuestionAnswering"),Pwt.forEach(t),Mar=r(lNe," (GPT-J model)"),lNe.forEach(t),Ear=i(X),QF=n(X,"LI",{});var iNe=s(QF);e2e=n(iNe,"STRONG",{});var Bwt=s(e2e);Car=r(Bwt,"ibert"),Bwt.forEach(t),war=r(iNe," \u2014 "),cQ=n(iNe,"A",{href:!0});var Iwt=s(cQ);Aar=r(Iwt,"IBertForQuestionAnswering"),Iwt.forEach(t),Lar=r(iNe," (I-BERT model)"),iNe.forEach(t),yar=i(X),HF=n(X,"LI",{});var dNe=s(HF);o2e=n(dNe,"STRONG",{});var Nwt=s(o2e);xar=r(Nwt,"layoutlmv2"),Nwt.forEach(t),$ar=r(dNe," \u2014 "),fQ=n(dNe,"A",{href:!0});var qwt=s(fQ);kar=r(qwt,"LayoutLMv2ForQuestionAnswering"),qwt.forEach(t),Sar=r(dNe," (LayoutLMv2 model)"),dNe.forEach(t),Rar=i(X),UF=n(X,"LI",{});var cNe=s(UF);r2e=n(cNe,"STRONG",{});var jwt=s(r2e);Par=r(jwt,"layoutlmv3"),jwt.forEach(t),Bar=r(cNe," \u2014 "),mQ=n(cNe,"A",{href:!0});var Dwt=s(mQ);Iar=r(Dwt,"LayoutLMv3ForQuestionAnswering"),Dwt.forEach(t),Nar=r(cNe," (LayoutLMv3 model)"),cNe.forEach(t),qar=i(X),JF=n(X,"LI",{});var fNe=s(JF);t2e=n(fNe,"STRONG",{});var Gwt=s(t2e);jar=r(Gwt,"led"),Gwt.forEach(t),Dar=r(fNe," \u2014 "),gQ=n(fNe,"A",{href:!0});var Owt=s(gQ);Gar=r(Owt,"LEDForQuestionAnswering"),Owt.forEach(t),Oar=r(fNe," (LED model)"),fNe.forEach(t),Var=i(X),YF=n(X,"LI",{});var mNe=s(YF);a2e=n(mNe,"STRONG",{});var Vwt=s(a2e);Xar=r(Vwt,"longformer"),Vwt.forEach(t),zar=r(mNe," \u2014 "),hQ=n(mNe,"A",{href:!0});var Xwt=s(hQ);War=r(Xwt,"LongformerForQuestionAnswering"),Xwt.forEach(t),Qar=r(mNe," (Longformer model)"),mNe.forEach(t),Har=i(X),KF=n(X,"LI",{});var gNe=s(KF);n2e=n(gNe,"STRONG",{});var zwt=s(n2e);Uar=r(zwt,"lxmert"),zwt.forEach(t),Jar=r(gNe," \u2014 "),pQ=n(gNe,"A",{href:!0});var Wwt=s(pQ);Yar=r(Wwt,"LxmertForQuestionAnswering"),Wwt.forEach(t),Kar=r(gNe," (LXMERT model)"),gNe.forEach(t),Zar=i(X),ZF=n(X,"LI",{});var hNe=s(ZF);s2e=n(hNe,"STRONG",{});var Qwt=s(s2e);enr=r(Qwt,"mbart"),Qwt.forEach(t),onr=r(hNe," \u2014 "),_Q=n(hNe,"A",{href:!0});var Hwt=s(_Q);rnr=r(Hwt,"MBartForQuestionAnswering"),Hwt.forEach(t),tnr=r(hNe," (mBART model)"),hNe.forEach(t),anr=i(X),e6=n(X,"LI",{});var pNe=s(e6);l2e=n(pNe,"STRONG",{});var Uwt=s(l2e);nnr=r(Uwt,"megatron-bert"),Uwt.forEach(t),snr=r(pNe," \u2014 "),uQ=n(pNe,"A",{href:!0});var Jwt=s(uQ);lnr=r(Jwt,"MegatronBertForQuestionAnswering"),Jwt.forEach(t),inr=r(pNe," (Megatron-BERT model)"),pNe.forEach(t),dnr=i(X),o6=n(X,"LI",{});var _Ne=s(o6);i2e=n(_Ne,"STRONG",{});var Ywt=s(i2e);cnr=r(Ywt,"mobilebert"),Ywt.forEach(t),fnr=r(_Ne," \u2014 "),bQ=n(_Ne,"A",{href:!0});var Kwt=s(bQ);mnr=r(Kwt,"MobileBertForQuestionAnswering"),Kwt.forEach(t),gnr=r(_Ne," (MobileBERT model)"),_Ne.forEach(t),hnr=i(X),r6=n(X,"LI",{});var uNe=s(r6);d2e=n(uNe,"STRONG",{});var Zwt=s(d2e);pnr=r(Zwt,"mpnet"),Zwt.forEach(t),_nr=r(uNe," \u2014 "),vQ=n(uNe,"A",{href:!0});var eAt=s(vQ);unr=r(eAt,"MPNetForQuestionAnswering"),eAt.forEach(t),bnr=r(uNe," (MPNet model)"),uNe.forEach(t),vnr=i(X),t6=n(X,"LI",{});var bNe=s(t6);c2e=n(bNe,"STRONG",{});var oAt=s(c2e);Fnr=r(oAt,"mvp"),oAt.forEach(t),Tnr=r(bNe," \u2014 "),FQ=n(bNe,"A",{href:!0});var rAt=s(FQ);Mnr=r(rAt,"MvpForQuestionAnswering"),rAt.forEach(t),Enr=r(bNe," (MVP model)"),bNe.forEach(t),Cnr=i(X),a6=n(X,"LI",{});var vNe=s(a6);f2e=n(vNe,"STRONG",{});var tAt=s(f2e);wnr=r(tAt,"nezha"),tAt.forEach(t),Anr=r(vNe," \u2014 "),TQ=n(vNe,"A",{href:!0});var aAt=s(TQ);Lnr=r(aAt,"NezhaForQuestionAnswering"),aAt.forEach(t),ynr=r(vNe," (Nezha model)"),vNe.forEach(t),xnr=i(X),n6=n(X,"LI",{});var FNe=s(n6);m2e=n(FNe,"STRONG",{});var nAt=s(m2e);$nr=r(nAt,"nystromformer"),nAt.forEach(t),knr=r(FNe," \u2014 "),MQ=n(FNe,"A",{href:!0});var sAt=s(MQ);Snr=r(sAt,"NystromformerForQuestionAnswering"),sAt.forEach(t),Rnr=r(FNe," (Nystr\xF6mformer model)"),FNe.forEach(t),Pnr=i(X),s6=n(X,"LI",{});var TNe=s(s6);g2e=n(TNe,"STRONG",{});var lAt=s(g2e);Bnr=r(lAt,"qdqbert"),lAt.forEach(t),Inr=r(TNe," \u2014 "),EQ=n(TNe,"A",{href:!0});var iAt=s(EQ);Nnr=r(iAt,"QDQBertForQuestionAnswering"),iAt.forEach(t),qnr=r(TNe," (QDQBert model)"),TNe.forEach(t),jnr=i(X),l6=n(X,"LI",{});var MNe=s(l6);h2e=n(MNe,"STRONG",{});var dAt=s(h2e);Dnr=r(dAt,"reformer"),dAt.forEach(t),Gnr=r(MNe," \u2014 "),CQ=n(MNe,"A",{href:!0});var cAt=s(CQ);Onr=r(cAt,"ReformerForQuestionAnswering"),cAt.forEach(t),Vnr=r(MNe," (Reformer model)"),MNe.forEach(t),Xnr=i(X),i6=n(X,"LI",{});var ENe=s(i6);p2e=n(ENe,"STRONG",{});var fAt=s(p2e);znr=r(fAt,"rembert"),fAt.forEach(t),Wnr=r(ENe," \u2014 "),wQ=n(ENe,"A",{href:!0});var mAt=s(wQ);Qnr=r(mAt,"RemBertForQuestionAnswering"),mAt.forEach(t),Hnr=r(ENe," (RemBERT model)"),ENe.forEach(t),Unr=i(X),d6=n(X,"LI",{});var CNe=s(d6);_2e=n(CNe,"STRONG",{});var gAt=s(_2e);Jnr=r(gAt,"roberta"),gAt.forEach(t),Ynr=r(CNe," \u2014 "),AQ=n(CNe,"A",{href:!0});var hAt=s(AQ);Knr=r(hAt,"RobertaForQuestionAnswering"),hAt.forEach(t),Znr=r(CNe," (RoBERTa model)"),CNe.forEach(t),esr=i(X),c6=n(X,"LI",{});var wNe=s(c6);u2e=n(wNe,"STRONG",{});var pAt=s(u2e);osr=r(pAt,"roformer"),pAt.forEach(t),rsr=r(wNe," \u2014 "),LQ=n(wNe,"A",{href:!0});var _At=s(LQ);tsr=r(_At,"RoFormerForQuestionAnswering"),_At.forEach(t),asr=r(wNe," (RoFormer model)"),wNe.forEach(t),nsr=i(X),f6=n(X,"LI",{});var ANe=s(f6);b2e=n(ANe,"STRONG",{});var uAt=s(b2e);ssr=r(uAt,"splinter"),uAt.forEach(t),lsr=r(ANe," \u2014 "),yQ=n(ANe,"A",{href:!0});var bAt=s(yQ);isr=r(bAt,"SplinterForQuestionAnswering"),bAt.forEach(t),dsr=r(ANe," (Splinter model)"),ANe.forEach(t),csr=i(X),m6=n(X,"LI",{});var LNe=s(m6);v2e=n(LNe,"STRONG",{});var vAt=s(v2e);fsr=r(vAt,"squeezebert"),vAt.forEach(t),msr=r(LNe," \u2014 "),xQ=n(LNe,"A",{href:!0});var FAt=s(xQ);gsr=r(FAt,"SqueezeBertForQuestionAnswering"),FAt.forEach(t),hsr=r(LNe," (SqueezeBERT model)"),LNe.forEach(t),psr=i(X),g6=n(X,"LI",{});var yNe=s(g6);F2e=n(yNe,"STRONG",{});var TAt=s(F2e);_sr=r(TAt,"xlm"),TAt.forEach(t),usr=r(yNe," \u2014 "),$Q=n(yNe,"A",{href:!0});var MAt=s($Q);bsr=r(MAt,"XLMForQuestionAnsweringSimple"),MAt.forEach(t),vsr=r(yNe," (XLM model)"),yNe.forEach(t),Fsr=i(X),h6=n(X,"LI",{});var xNe=s(h6);T2e=n(xNe,"STRONG",{});var EAt=s(T2e);Tsr=r(EAt,"xlm-roberta"),EAt.forEach(t),Msr=r(xNe," \u2014 "),kQ=n(xNe,"A",{href:!0});var CAt=s(kQ);Esr=r(CAt,"XLMRobertaForQuestionAnswering"),CAt.forEach(t),Csr=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),wsr=i(X),p6=n(X,"LI",{});var $Ne=s(p6);M2e=n($Ne,"STRONG",{});var wAt=s(M2e);Asr=r(wAt,"xlm-roberta-xl"),wAt.forEach(t),Lsr=r($Ne," \u2014 "),SQ=n($Ne,"A",{href:!0});var AAt=s(SQ);ysr=r(AAt,"XLMRobertaXLForQuestionAnswering"),AAt.forEach(t),xsr=r($Ne," (XLM-RoBERTa-XL model)"),$Ne.forEach(t),$sr=i(X),_6=n(X,"LI",{});var kNe=s(_6);E2e=n(kNe,"STRONG",{});var LAt=s(E2e);ksr=r(LAt,"xlnet"),LAt.forEach(t),Ssr=r(kNe," \u2014 "),RQ=n(kNe,"A",{href:!0});var yAt=s(RQ);Rsr=r(yAt,"XLNetForQuestionAnsweringSimple"),yAt.forEach(t),Psr=r(kNe," (XLNet model)"),kNe.forEach(t),Bsr=i(X),u6=n(X,"LI",{});var SNe=s(u6);C2e=n(SNe,"STRONG",{});var xAt=s(C2e);Isr=r(xAt,"yoso"),xAt.forEach(t),Nsr=r(SNe," \u2014 "),PQ=n(SNe,"A",{href:!0});var $At=s(PQ);qsr=r($At,"YosoForQuestionAnswering"),$At.forEach(t),jsr=r(SNe," (YOSO model)"),SNe.forEach(t),X.forEach(t),Dsr=i(ua),b6=n(ua,"P",{});var RNe=s(b6);Gsr=r(RNe,"The model is set in evaluation mode by default using "),w2e=n(RNe,"CODE",{});var kAt=s(w2e);Osr=r(kAt,"model.eval()"),kAt.forEach(t),Vsr=r(RNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=n(RNe,"CODE",{});var SAt=s(A2e);Xsr=r(SAt,"model.train()"),SAt.forEach(t),RNe.forEach(t),zsr=i(ua),T(v6.$$.fragment,ua),ua.forEach(t),hl.forEach(t),$ze=i(f),vd=n(f,"H2",{class:!0});var IQe=s(vd);F6=n(IQe,"A",{id:!0,class:!0,href:!0});var RAt=s(F6);L2e=n(RAt,"SPAN",{});var PAt=s(L2e);T(j8.$$.fragment,PAt),PAt.forEach(t),RAt.forEach(t),Wsr=i(IQe),y2e=n(IQe,"SPAN",{});var BAt=s(y2e);Qsr=r(BAt,"AutoModelForTableQuestionAnswering"),BAt.forEach(t),IQe.forEach(t),kze=i(f),Oo=n(f,"DIV",{class:!0});var pl=s(Oo);T(D8.$$.fragment,pl),Hsr=i(pl),Fd=n(pl,"P",{});var yte=s(Fd);Usr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BQ=n(yte,"A",{href:!0});var IAt=s(BQ);Jsr=r(IAt,"from_pretrained()"),IAt.forEach(t),Ysr=r(yte," class method or the "),IQ=n(yte,"A",{href:!0});var NAt=s(IQ);Ksr=r(NAt,"from_config()"),NAt.forEach(t),Zsr=r(yte,` class
method.`),yte.forEach(t),elr=i(pl),G8=n(pl,"P",{});var NQe=s(G8);olr=r(NQe,"This class cannot be instantiated directly using "),x2e=n(NQe,"CODE",{});var qAt=s(x2e);rlr=r(qAt,"__init__()"),qAt.forEach(t),tlr=r(NQe," (throws an error)."),NQe.forEach(t),alr=i(pl),bt=n(pl,"DIV",{class:!0});var GA=s(bt);T(O8.$$.fragment,GA),nlr=i(GA),$2e=n(GA,"P",{});var jAt=s($2e);slr=r(jAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jAt.forEach(t),llr=i(GA),Td=n(GA,"P",{});var xte=s(Td);ilr=r(xte,`Note:
Loading a model from its configuration file does `),k2e=n(xte,"STRONG",{});var DAt=s(k2e);dlr=r(DAt,"not"),DAt.forEach(t),clr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(xte,"A",{href:!0});var GAt=s(NQ);flr=r(GAt,"from_pretrained()"),GAt.forEach(t),mlr=r(xte," to load the model weights."),xte.forEach(t),glr=i(GA),T(T6.$$.fragment,GA),GA.forEach(t),hlr=i(pl),lo=n(pl,"DIV",{class:!0});var ba=s(lo);T(V8.$$.fragment,ba),plr=i(ba),S2e=n(ba,"P",{});var OAt=s(S2e);_lr=r(OAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),OAt.forEach(t),ulr=i(ba),Qa=n(ba,"P",{});var OA=s(Qa);blr=r(OA,"The model class to instantiate is selected based on the "),R2e=n(OA,"CODE",{});var VAt=s(R2e);vlr=r(VAt,"model_type"),VAt.forEach(t),Flr=r(OA,` property of the config object (either
passed as an argument or loaded from `),P2e=n(OA,"CODE",{});var XAt=s(P2e);Tlr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),Mlr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(OA,"CODE",{});var zAt=s(B2e);Elr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),Clr=r(OA,":"),OA.forEach(t),wlr=i(ba),I2e=n(ba,"UL",{});var WAt=s(I2e);M6=n(WAt,"LI",{});var PNe=s(M6);N2e=n(PNe,"STRONG",{});var QAt=s(N2e);Alr=r(QAt,"tapas"),QAt.forEach(t),Llr=r(PNe," \u2014 "),qQ=n(PNe,"A",{href:!0});var HAt=s(qQ);ylr=r(HAt,"TapasForQuestionAnswering"),HAt.forEach(t),xlr=r(PNe," (TAPAS model)"),PNe.forEach(t),WAt.forEach(t),$lr=i(ba),E6=n(ba,"P",{});var BNe=s(E6);klr=r(BNe,"The model is set in evaluation mode by default using "),q2e=n(BNe,"CODE",{});var UAt=s(q2e);Slr=r(UAt,"model.eval()"),UAt.forEach(t),Rlr=r(BNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j2e=n(BNe,"CODE",{});var JAt=s(j2e);Plr=r(JAt,"model.train()"),JAt.forEach(t),BNe.forEach(t),Blr=i(ba),T(C6.$$.fragment,ba),ba.forEach(t),pl.forEach(t),Sze=i(f),Md=n(f,"H2",{class:!0});var qQe=s(Md);w6=n(qQe,"A",{id:!0,class:!0,href:!0});var YAt=s(w6);D2e=n(YAt,"SPAN",{});var KAt=s(D2e);T(X8.$$.fragment,KAt),KAt.forEach(t),YAt.forEach(t),Ilr=i(qQe),G2e=n(qQe,"SPAN",{});var ZAt=s(G2e);Nlr=r(ZAt,"AutoModelForImageClassification"),ZAt.forEach(t),qQe.forEach(t),Rze=i(f),Vo=n(f,"DIV",{class:!0});var _l=s(Vo);T(z8.$$.fragment,_l),qlr=i(_l),Ed=n(_l,"P",{});var $te=s(Ed);jlr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jQ=n($te,"A",{href:!0});var eLt=s(jQ);Dlr=r(eLt,"from_pretrained()"),eLt.forEach(t),Glr=r($te," class method or the "),DQ=n($te,"A",{href:!0});var oLt=s(DQ);Olr=r(oLt,"from_config()"),oLt.forEach(t),Vlr=r($te,` class
method.`),$te.forEach(t),Xlr=i(_l),W8=n(_l,"P",{});var jQe=s(W8);zlr=r(jQe,"This class cannot be instantiated directly using "),O2e=n(jQe,"CODE",{});var rLt=s(O2e);Wlr=r(rLt,"__init__()"),rLt.forEach(t),Qlr=r(jQe," (throws an error)."),jQe.forEach(t),Hlr=i(_l),vt=n(_l,"DIV",{class:!0});var VA=s(vt);T(Q8.$$.fragment,VA),Ulr=i(VA),V2e=n(VA,"P",{});var tLt=s(V2e);Jlr=r(tLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tLt.forEach(t),Ylr=i(VA),Cd=n(VA,"P",{});var kte=s(Cd);Klr=r(kte,`Note:
Loading a model from its configuration file does `),X2e=n(kte,"STRONG",{});var aLt=s(X2e);Zlr=r(aLt,"not"),aLt.forEach(t),eir=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(kte,"A",{href:!0});var nLt=s(GQ);oir=r(nLt,"from_pretrained()"),nLt.forEach(t),rir=r(kte," to load the model weights."),kte.forEach(t),tir=i(VA),T(A6.$$.fragment,VA),VA.forEach(t),air=i(_l),io=n(_l,"DIV",{class:!0});var va=s(io);T(H8.$$.fragment,va),nir=i(va),z2e=n(va,"P",{});var sLt=s(z2e);sir=r(sLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sLt.forEach(t),lir=i(va),Ha=n(va,"P",{});var XA=s(Ha);iir=r(XA,"The model class to instantiate is selected based on the "),W2e=n(XA,"CODE",{});var lLt=s(W2e);dir=r(lLt,"model_type"),lLt.forEach(t),cir=r(XA,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(XA,"CODE",{});var iLt=s(Q2e);fir=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),mir=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=n(XA,"CODE",{});var dLt=s(H2e);gir=r(dLt,"pretrained_model_name_or_path"),dLt.forEach(t),hir=r(XA,":"),XA.forEach(t),pir=i(va),ve=n(va,"UL",{});var Te=s(ve);L6=n(Te,"LI",{});var INe=s(L6);U2e=n(INe,"STRONG",{});var cLt=s(U2e);_ir=r(cLt,"beit"),cLt.forEach(t),uir=r(INe," \u2014 "),OQ=n(INe,"A",{href:!0});var fLt=s(OQ);bir=r(fLt,"BeitForImageClassification"),fLt.forEach(t),vir=r(INe," (BEiT model)"),INe.forEach(t),Fir=i(Te),y6=n(Te,"LI",{});var NNe=s(y6);J2e=n(NNe,"STRONG",{});var mLt=s(J2e);Tir=r(mLt,"convnext"),mLt.forEach(t),Mir=r(NNe," \u2014 "),VQ=n(NNe,"A",{href:!0});var gLt=s(VQ);Eir=r(gLt,"ConvNextForImageClassification"),gLt.forEach(t),Cir=r(NNe," (ConvNeXT model)"),NNe.forEach(t),wir=i(Te),x6=n(Te,"LI",{});var qNe=s(x6);Y2e=n(qNe,"STRONG",{});var hLt=s(Y2e);Air=r(hLt,"cvt"),hLt.forEach(t),Lir=r(qNe," \u2014 "),XQ=n(qNe,"A",{href:!0});var pLt=s(XQ);yir=r(pLt,"CvtForImageClassification"),pLt.forEach(t),xir=r(qNe," (CvT model)"),qNe.forEach(t),$ir=i(Te),$6=n(Te,"LI",{});var jNe=s($6);K2e=n(jNe,"STRONG",{});var _Lt=s(K2e);kir=r(_Lt,"data2vec-vision"),_Lt.forEach(t),Sir=r(jNe," \u2014 "),zQ=n(jNe,"A",{href:!0});var uLt=s(zQ);Rir=r(uLt,"Data2VecVisionForImageClassification"),uLt.forEach(t),Pir=r(jNe," (Data2VecVision model)"),jNe.forEach(t),Bir=i(Te),Ys=n(Te,"LI",{});var WS=s(Ys);Z2e=n(WS,"STRONG",{});var bLt=s(Z2e);Iir=r(bLt,"deit"),bLt.forEach(t),Nir=r(WS," \u2014 "),WQ=n(WS,"A",{href:!0});var vLt=s(WQ);qir=r(vLt,"DeiTForImageClassification"),vLt.forEach(t),jir=r(WS," or "),QQ=n(WS,"A",{href:!0});var FLt=s(QQ);Dir=r(FLt,"DeiTForImageClassificationWithTeacher"),FLt.forEach(t),Gir=r(WS," (DeiT model)"),WS.forEach(t),Oir=i(Te),k6=n(Te,"LI",{});var DNe=s(k6);ebe=n(DNe,"STRONG",{});var TLt=s(ebe);Vir=r(TLt,"imagegpt"),TLt.forEach(t),Xir=r(DNe," \u2014 "),HQ=n(DNe,"A",{href:!0});var MLt=s(HQ);zir=r(MLt,"ImageGPTForImageClassification"),MLt.forEach(t),Wir=r(DNe," (ImageGPT model)"),DNe.forEach(t),Qir=i(Te),Ks=n(Te,"LI",{});var QS=s(Ks);obe=n(QS,"STRONG",{});var ELt=s(obe);Hir=r(ELt,"levit"),ELt.forEach(t),Uir=r(QS," \u2014 "),UQ=n(QS,"A",{href:!0});var CLt=s(UQ);Jir=r(CLt,"LevitForImageClassification"),CLt.forEach(t),Yir=r(QS," or "),JQ=n(QS,"A",{href:!0});var wLt=s(JQ);Kir=r(wLt,"LevitForImageClassificationWithTeacher"),wLt.forEach(t),Zir=r(QS," (LeViT model)"),QS.forEach(t),edr=i(Te),S6=n(Te,"LI",{});var GNe=s(S6);rbe=n(GNe,"STRONG",{});var ALt=s(rbe);odr=r(ALt,"mobilevit"),ALt.forEach(t),rdr=r(GNe," \u2014 "),YQ=n(GNe,"A",{href:!0});var LLt=s(YQ);tdr=r(LLt,"MobileViTForImageClassification"),LLt.forEach(t),adr=r(GNe," (MobileViT model)"),GNe.forEach(t),ndr=i(Te),Ft=n(Te,"LI",{});var Bf=s(Ft);tbe=n(Bf,"STRONG",{});var yLt=s(tbe);sdr=r(yLt,"perceiver"),yLt.forEach(t),ldr=r(Bf," \u2014 "),KQ=n(Bf,"A",{href:!0});var xLt=s(KQ);idr=r(xLt,"PerceiverForImageClassificationLearned"),xLt.forEach(t),ddr=r(Bf," or "),ZQ=n(Bf,"A",{href:!0});var $Lt=s(ZQ);cdr=r($Lt,"PerceiverForImageClassificationFourier"),$Lt.forEach(t),fdr=r(Bf," or "),eH=n(Bf,"A",{href:!0});var kLt=s(eH);mdr=r(kLt,"PerceiverForImageClassificationConvProcessing"),kLt.forEach(t),gdr=r(Bf," (Perceiver model)"),Bf.forEach(t),hdr=i(Te),R6=n(Te,"LI",{});var ONe=s(R6);abe=n(ONe,"STRONG",{});var SLt=s(abe);pdr=r(SLt,"poolformer"),SLt.forEach(t),_dr=r(ONe," \u2014 "),oH=n(ONe,"A",{href:!0});var RLt=s(oH);udr=r(RLt,"PoolFormerForImageClassification"),RLt.forEach(t),bdr=r(ONe," (PoolFormer model)"),ONe.forEach(t),vdr=i(Te),P6=n(Te,"LI",{});var VNe=s(P6);nbe=n(VNe,"STRONG",{});var PLt=s(nbe);Fdr=r(PLt,"regnet"),PLt.forEach(t),Tdr=r(VNe," \u2014 "),rH=n(VNe,"A",{href:!0});var BLt=s(rH);Mdr=r(BLt,"RegNetForImageClassification"),BLt.forEach(t),Edr=r(VNe," (RegNet model)"),VNe.forEach(t),Cdr=i(Te),B6=n(Te,"LI",{});var XNe=s(B6);sbe=n(XNe,"STRONG",{});var ILt=s(sbe);wdr=r(ILt,"resnet"),ILt.forEach(t),Adr=r(XNe," \u2014 "),tH=n(XNe,"A",{href:!0});var NLt=s(tH);Ldr=r(NLt,"ResNetForImageClassification"),NLt.forEach(t),ydr=r(XNe," (ResNet model)"),XNe.forEach(t),xdr=i(Te),I6=n(Te,"LI",{});var zNe=s(I6);lbe=n(zNe,"STRONG",{});var qLt=s(lbe);$dr=r(qLt,"segformer"),qLt.forEach(t),kdr=r(zNe," \u2014 "),aH=n(zNe,"A",{href:!0});var jLt=s(aH);Sdr=r(jLt,"SegformerForImageClassification"),jLt.forEach(t),Rdr=r(zNe," (SegFormer model)"),zNe.forEach(t),Pdr=i(Te),N6=n(Te,"LI",{});var WNe=s(N6);ibe=n(WNe,"STRONG",{});var DLt=s(ibe);Bdr=r(DLt,"swin"),DLt.forEach(t),Idr=r(WNe," \u2014 "),nH=n(WNe,"A",{href:!0});var GLt=s(nH);Ndr=r(GLt,"SwinForImageClassification"),GLt.forEach(t),qdr=r(WNe," (Swin Transformer model)"),WNe.forEach(t),jdr=i(Te),q6=n(Te,"LI",{});var QNe=s(q6);dbe=n(QNe,"STRONG",{});var OLt=s(dbe);Ddr=r(OLt,"van"),OLt.forEach(t),Gdr=r(QNe," \u2014 "),sH=n(QNe,"A",{href:!0});var VLt=s(sH);Odr=r(VLt,"VanForImageClassification"),VLt.forEach(t),Vdr=r(QNe," (VAN model)"),QNe.forEach(t),Xdr=i(Te),j6=n(Te,"LI",{});var HNe=s(j6);cbe=n(HNe,"STRONG",{});var XLt=s(cbe);zdr=r(XLt,"vit"),XLt.forEach(t),Wdr=r(HNe," \u2014 "),lH=n(HNe,"A",{href:!0});var zLt=s(lH);Qdr=r(zLt,"ViTForImageClassification"),zLt.forEach(t),Hdr=r(HNe," (ViT model)"),HNe.forEach(t),Te.forEach(t),Udr=i(va),D6=n(va,"P",{});var UNe=s(D6);Jdr=r(UNe,"The model is set in evaluation mode by default using "),fbe=n(UNe,"CODE",{});var WLt=s(fbe);Ydr=r(WLt,"model.eval()"),WLt.forEach(t),Kdr=r(UNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=n(UNe,"CODE",{});var QLt=s(mbe);Zdr=r(QLt,"model.train()"),QLt.forEach(t),UNe.forEach(t),ecr=i(va),T(G6.$$.fragment,va),va.forEach(t),_l.forEach(t),Pze=i(f),wd=n(f,"H2",{class:!0});var DQe=s(wd);O6=n(DQe,"A",{id:!0,class:!0,href:!0});var HLt=s(O6);gbe=n(HLt,"SPAN",{});var ULt=s(gbe);T(U8.$$.fragment,ULt),ULt.forEach(t),HLt.forEach(t),ocr=i(DQe),hbe=n(DQe,"SPAN",{});var JLt=s(hbe);rcr=r(JLt,"AutoModelForVision2Seq"),JLt.forEach(t),DQe.forEach(t),Bze=i(f),Xo=n(f,"DIV",{class:!0});var ul=s(Xo);T(J8.$$.fragment,ul),tcr=i(ul),Ad=n(ul,"P",{});var Ste=s(Ad);acr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iH=n(Ste,"A",{href:!0});var YLt=s(iH);ncr=r(YLt,"from_pretrained()"),YLt.forEach(t),scr=r(Ste," class method or the "),dH=n(Ste,"A",{href:!0});var KLt=s(dH);lcr=r(KLt,"from_config()"),KLt.forEach(t),icr=r(Ste,` class
method.`),Ste.forEach(t),dcr=i(ul),Y8=n(ul,"P",{});var GQe=s(Y8);ccr=r(GQe,"This class cannot be instantiated directly using "),pbe=n(GQe,"CODE",{});var ZLt=s(pbe);fcr=r(ZLt,"__init__()"),ZLt.forEach(t),mcr=r(GQe," (throws an error)."),GQe.forEach(t),gcr=i(ul),Tt=n(ul,"DIV",{class:!0});var zA=s(Tt);T(K8.$$.fragment,zA),hcr=i(zA),_be=n(zA,"P",{});var eyt=s(_be);pcr=r(eyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eyt.forEach(t),_cr=i(zA),Ld=n(zA,"P",{});var Rte=s(Ld);ucr=r(Rte,`Note:
Loading a model from its configuration file does `),ube=n(Rte,"STRONG",{});var oyt=s(ube);bcr=r(oyt,"not"),oyt.forEach(t),vcr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(Rte,"A",{href:!0});var ryt=s(cH);Fcr=r(ryt,"from_pretrained()"),ryt.forEach(t),Tcr=r(Rte," to load the model weights."),Rte.forEach(t),Mcr=i(zA),T(V6.$$.fragment,zA),zA.forEach(t),Ecr=i(ul),co=n(ul,"DIV",{class:!0});var Fa=s(co);T(Z8.$$.fragment,Fa),Ccr=i(Fa),bbe=n(Fa,"P",{});var tyt=s(bbe);wcr=r(tyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tyt.forEach(t),Acr=i(Fa),Ua=n(Fa,"P",{});var WA=s(Ua);Lcr=r(WA,"The model class to instantiate is selected based on the "),vbe=n(WA,"CODE",{});var ayt=s(vbe);ycr=r(ayt,"model_type"),ayt.forEach(t),xcr=r(WA,` property of the config object (either
passed as an argument or loaded from `),Fbe=n(WA,"CODE",{});var nyt=s(Fbe);$cr=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),kcr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(WA,"CODE",{});var syt=s(Tbe);Scr=r(syt,"pretrained_model_name_or_path"),syt.forEach(t),Rcr=r(WA,":"),WA.forEach(t),Pcr=i(Fa),Mbe=n(Fa,"UL",{});var lyt=s(Mbe);X6=n(lyt,"LI",{});var JNe=s(X6);Ebe=n(JNe,"STRONG",{});var iyt=s(Ebe);Bcr=r(iyt,"vision-encoder-decoder"),iyt.forEach(t),Icr=r(JNe," \u2014 "),fH=n(JNe,"A",{href:!0});var dyt=s(fH);Ncr=r(dyt,"VisionEncoderDecoderModel"),dyt.forEach(t),qcr=r(JNe," (Vision Encoder decoder model)"),JNe.forEach(t),lyt.forEach(t),jcr=i(Fa),z6=n(Fa,"P",{});var YNe=s(z6);Dcr=r(YNe,"The model is set in evaluation mode by default using "),Cbe=n(YNe,"CODE",{});var cyt=s(Cbe);Gcr=r(cyt,"model.eval()"),cyt.forEach(t),Ocr=r(YNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wbe=n(YNe,"CODE",{});var fyt=s(wbe);Vcr=r(fyt,"model.train()"),fyt.forEach(t),YNe.forEach(t),Xcr=i(Fa),T(W6.$$.fragment,Fa),Fa.forEach(t),ul.forEach(t),Ize=i(f),yd=n(f,"H2",{class:!0});var OQe=s(yd);Q6=n(OQe,"A",{id:!0,class:!0,href:!0});var myt=s(Q6);Abe=n(myt,"SPAN",{});var gyt=s(Abe);T(e9.$$.fragment,gyt),gyt.forEach(t),myt.forEach(t),zcr=i(OQe),Lbe=n(OQe,"SPAN",{});var hyt=s(Lbe);Wcr=r(hyt,"AutoModelForVisualQuestionAnswering"),hyt.forEach(t),OQe.forEach(t),Nze=i(f),zo=n(f,"DIV",{class:!0});var bl=s(zo);T(o9.$$.fragment,bl),Qcr=i(bl),xd=n(bl,"P",{});var Pte=s(xd);Hcr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mH=n(Pte,"A",{href:!0});var pyt=s(mH);Ucr=r(pyt,"from_pretrained()"),pyt.forEach(t),Jcr=r(Pte," class method or the "),gH=n(Pte,"A",{href:!0});var _yt=s(gH);Ycr=r(_yt,"from_config()"),_yt.forEach(t),Kcr=r(Pte,` class
method.`),Pte.forEach(t),Zcr=i(bl),r9=n(bl,"P",{});var VQe=s(r9);efr=r(VQe,"This class cannot be instantiated directly using "),ybe=n(VQe,"CODE",{});var uyt=s(ybe);ofr=r(uyt,"__init__()"),uyt.forEach(t),rfr=r(VQe," (throws an error)."),VQe.forEach(t),tfr=i(bl),Mt=n(bl,"DIV",{class:!0});var QA=s(Mt);T(t9.$$.fragment,QA),afr=i(QA),xbe=n(QA,"P",{});var byt=s(xbe);nfr=r(byt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),byt.forEach(t),sfr=i(QA),$d=n(QA,"P",{});var Bte=s($d);lfr=r(Bte,`Note:
Loading a model from its configuration file does `),$be=n(Bte,"STRONG",{});var vyt=s($be);ifr=r(vyt,"not"),vyt.forEach(t),dfr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(Bte,"A",{href:!0});var Fyt=s(hH);cfr=r(Fyt,"from_pretrained()"),Fyt.forEach(t),ffr=r(Bte," to load the model weights."),Bte.forEach(t),mfr=i(QA),T(H6.$$.fragment,QA),QA.forEach(t),gfr=i(bl),fo=n(bl,"DIV",{class:!0});var Ta=s(fo);T(a9.$$.fragment,Ta),hfr=i(Ta),kbe=n(Ta,"P",{});var Tyt=s(kbe);pfr=r(Tyt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Tyt.forEach(t),_fr=i(Ta),Ja=n(Ta,"P",{});var HA=s(Ja);ufr=r(HA,"The model class to instantiate is selected based on the "),Sbe=n(HA,"CODE",{});var Myt=s(Sbe);bfr=r(Myt,"model_type"),Myt.forEach(t),vfr=r(HA,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(HA,"CODE",{});var Eyt=s(Rbe);Ffr=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),Tfr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(HA,"CODE",{});var Cyt=s(Pbe);Mfr=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),Efr=r(HA,":"),HA.forEach(t),Cfr=i(Ta),Bbe=n(Ta,"UL",{});var wyt=s(Bbe);U6=n(wyt,"LI",{});var KNe=s(U6);Ibe=n(KNe,"STRONG",{});var Ayt=s(Ibe);wfr=r(Ayt,"vilt"),Ayt.forEach(t),Afr=r(KNe," \u2014 "),pH=n(KNe,"A",{href:!0});var Lyt=s(pH);Lfr=r(Lyt,"ViltForQuestionAnswering"),Lyt.forEach(t),yfr=r(KNe," (ViLT model)"),KNe.forEach(t),wyt.forEach(t),xfr=i(Ta),J6=n(Ta,"P",{});var ZNe=s(J6);$fr=r(ZNe,"The model is set in evaluation mode by default using "),Nbe=n(ZNe,"CODE",{});var yyt=s(Nbe);kfr=r(yyt,"model.eval()"),yyt.forEach(t),Sfr=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=n(ZNe,"CODE",{});var xyt=s(qbe);Rfr=r(xyt,"model.train()"),xyt.forEach(t),ZNe.forEach(t),Pfr=i(Ta),T(Y6.$$.fragment,Ta),Ta.forEach(t),bl.forEach(t),qze=i(f),kd=n(f,"H2",{class:!0});var XQe=s(kd);K6=n(XQe,"A",{id:!0,class:!0,href:!0});var $yt=s(K6);jbe=n($yt,"SPAN",{});var kyt=s(jbe);T(n9.$$.fragment,kyt),kyt.forEach(t),$yt.forEach(t),Bfr=i(XQe),Dbe=n(XQe,"SPAN",{});var Syt=s(Dbe);Ifr=r(Syt,"AutoModelForAudioClassification"),Syt.forEach(t),XQe.forEach(t),jze=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(s9.$$.fragment,vl),Nfr=i(vl),Sd=n(vl,"P",{});var Ite=s(Sd);qfr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_H=n(Ite,"A",{href:!0});var Ryt=s(_H);jfr=r(Ryt,"from_pretrained()"),Ryt.forEach(t),Dfr=r(Ite," class method or the "),uH=n(Ite,"A",{href:!0});var Pyt=s(uH);Gfr=r(Pyt,"from_config()"),Pyt.forEach(t),Ofr=r(Ite,` class
method.`),Ite.forEach(t),Vfr=i(vl),l9=n(vl,"P",{});var zQe=s(l9);Xfr=r(zQe,"This class cannot be instantiated directly using "),Gbe=n(zQe,"CODE",{});var Byt=s(Gbe);zfr=r(Byt,"__init__()"),Byt.forEach(t),Wfr=r(zQe," (throws an error)."),zQe.forEach(t),Qfr=i(vl),Et=n(vl,"DIV",{class:!0});var UA=s(Et);T(i9.$$.fragment,UA),Hfr=i(UA),Obe=n(UA,"P",{});var Iyt=s(Obe);Ufr=r(Iyt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Iyt.forEach(t),Jfr=i(UA),Rd=n(UA,"P",{});var Nte=s(Rd);Yfr=r(Nte,`Note:
Loading a model from its configuration file does `),Vbe=n(Nte,"STRONG",{});var Nyt=s(Vbe);Kfr=r(Nyt,"not"),Nyt.forEach(t),Zfr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(Nte,"A",{href:!0});var qyt=s(bH);emr=r(qyt,"from_pretrained()"),qyt.forEach(t),omr=r(Nte," to load the model weights."),Nte.forEach(t),rmr=i(UA),T(Z6.$$.fragment,UA),UA.forEach(t),tmr=i(vl),mo=n(vl,"DIV",{class:!0});var Ma=s(mo);T(d9.$$.fragment,Ma),amr=i(Ma),Xbe=n(Ma,"P",{});var jyt=s(Xbe);nmr=r(jyt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jyt.forEach(t),smr=i(Ma),Ya=n(Ma,"P",{});var JA=s(Ya);lmr=r(JA,"The model class to instantiate is selected based on the "),zbe=n(JA,"CODE",{});var Dyt=s(zbe);imr=r(Dyt,"model_type"),Dyt.forEach(t),dmr=r(JA,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(JA,"CODE",{});var Gyt=s(Wbe);cmr=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),fmr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(JA,"CODE",{});var Oyt=s(Qbe);mmr=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),gmr=r(JA,":"),JA.forEach(t),hmr=i(Ma),Pe=n(Ma,"UL",{});var We=s(Pe);eT=n(We,"LI",{});var eqe=s(eT);Hbe=n(eqe,"STRONG",{});var Vyt=s(Hbe);pmr=r(Vyt,"data2vec-audio"),Vyt.forEach(t),_mr=r(eqe," \u2014 "),vH=n(eqe,"A",{href:!0});var Xyt=s(vH);umr=r(Xyt,"Data2VecAudioForSequenceClassification"),Xyt.forEach(t),bmr=r(eqe," (Data2VecAudio model)"),eqe.forEach(t),vmr=i(We),oT=n(We,"LI",{});var oqe=s(oT);Ube=n(oqe,"STRONG",{});var zyt=s(Ube);Fmr=r(zyt,"hubert"),zyt.forEach(t),Tmr=r(oqe," \u2014 "),FH=n(oqe,"A",{href:!0});var Wyt=s(FH);Mmr=r(Wyt,"HubertForSequenceClassification"),Wyt.forEach(t),Emr=r(oqe," (Hubert model)"),oqe.forEach(t),Cmr=i(We),rT=n(We,"LI",{});var rqe=s(rT);Jbe=n(rqe,"STRONG",{});var Qyt=s(Jbe);wmr=r(Qyt,"sew"),Qyt.forEach(t),Amr=r(rqe," \u2014 "),TH=n(rqe,"A",{href:!0});var Hyt=s(TH);Lmr=r(Hyt,"SEWForSequenceClassification"),Hyt.forEach(t),ymr=r(rqe," (SEW model)"),rqe.forEach(t),xmr=i(We),tT=n(We,"LI",{});var tqe=s(tT);Ybe=n(tqe,"STRONG",{});var Uyt=s(Ybe);$mr=r(Uyt,"sew-d"),Uyt.forEach(t),kmr=r(tqe," \u2014 "),MH=n(tqe,"A",{href:!0});var Jyt=s(MH);Smr=r(Jyt,"SEWDForSequenceClassification"),Jyt.forEach(t),Rmr=r(tqe," (SEW-D model)"),tqe.forEach(t),Pmr=i(We),aT=n(We,"LI",{});var aqe=s(aT);Kbe=n(aqe,"STRONG",{});var Yyt=s(Kbe);Bmr=r(Yyt,"unispeech"),Yyt.forEach(t),Imr=r(aqe," \u2014 "),EH=n(aqe,"A",{href:!0});var Kyt=s(EH);Nmr=r(Kyt,"UniSpeechForSequenceClassification"),Kyt.forEach(t),qmr=r(aqe," (UniSpeech model)"),aqe.forEach(t),jmr=i(We),nT=n(We,"LI",{});var nqe=s(nT);Zbe=n(nqe,"STRONG",{});var Zyt=s(Zbe);Dmr=r(Zyt,"unispeech-sat"),Zyt.forEach(t),Gmr=r(nqe," \u2014 "),CH=n(nqe,"A",{href:!0});var e8t=s(CH);Omr=r(e8t,"UniSpeechSatForSequenceClassification"),e8t.forEach(t),Vmr=r(nqe," (UniSpeechSat model)"),nqe.forEach(t),Xmr=i(We),sT=n(We,"LI",{});var sqe=s(sT);eve=n(sqe,"STRONG",{});var o8t=s(eve);zmr=r(o8t,"wav2vec2"),o8t.forEach(t),Wmr=r(sqe," \u2014 "),wH=n(sqe,"A",{href:!0});var r8t=s(wH);Qmr=r(r8t,"Wav2Vec2ForSequenceClassification"),r8t.forEach(t),Hmr=r(sqe," (Wav2Vec2 model)"),sqe.forEach(t),Umr=i(We),lT=n(We,"LI",{});var lqe=s(lT);ove=n(lqe,"STRONG",{});var t8t=s(ove);Jmr=r(t8t,"wav2vec2-conformer"),t8t.forEach(t),Ymr=r(lqe," \u2014 "),AH=n(lqe,"A",{href:!0});var a8t=s(AH);Kmr=r(a8t,"Wav2Vec2ConformerForSequenceClassification"),a8t.forEach(t),Zmr=r(lqe," (Wav2Vec2-Conformer model)"),lqe.forEach(t),egr=i(We),iT=n(We,"LI",{});var iqe=s(iT);rve=n(iqe,"STRONG",{});var n8t=s(rve);ogr=r(n8t,"wavlm"),n8t.forEach(t),rgr=r(iqe," \u2014 "),LH=n(iqe,"A",{href:!0});var s8t=s(LH);tgr=r(s8t,"WavLMForSequenceClassification"),s8t.forEach(t),agr=r(iqe," (WavLM model)"),iqe.forEach(t),We.forEach(t),ngr=i(Ma),dT=n(Ma,"P",{});var dqe=s(dT);sgr=r(dqe,"The model is set in evaluation mode by default using "),tve=n(dqe,"CODE",{});var l8t=s(tve);lgr=r(l8t,"model.eval()"),l8t.forEach(t),igr=r(dqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=n(dqe,"CODE",{});var i8t=s(ave);dgr=r(i8t,"model.train()"),i8t.forEach(t),dqe.forEach(t),cgr=i(Ma),T(cT.$$.fragment,Ma),Ma.forEach(t),vl.forEach(t),Dze=i(f),Pd=n(f,"H2",{class:!0});var WQe=s(Pd);fT=n(WQe,"A",{id:!0,class:!0,href:!0});var d8t=s(fT);nve=n(d8t,"SPAN",{});var c8t=s(nve);T(c9.$$.fragment,c8t),c8t.forEach(t),d8t.forEach(t),fgr=i(WQe),sve=n(WQe,"SPAN",{});var f8t=s(sve);mgr=r(f8t,"AutoModelForAudioFrameClassification"),f8t.forEach(t),WQe.forEach(t),Gze=i(f),Qo=n(f,"DIV",{class:!0});var Fl=s(Qo);T(f9.$$.fragment,Fl),ggr=i(Fl),Bd=n(Fl,"P",{});var qte=s(Bd);hgr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yH=n(qte,"A",{href:!0});var m8t=s(yH);pgr=r(m8t,"from_pretrained()"),m8t.forEach(t),_gr=r(qte," class method or the "),xH=n(qte,"A",{href:!0});var g8t=s(xH);ugr=r(g8t,"from_config()"),g8t.forEach(t),bgr=r(qte,` class
method.`),qte.forEach(t),vgr=i(Fl),m9=n(Fl,"P",{});var QQe=s(m9);Fgr=r(QQe,"This class cannot be instantiated directly using "),lve=n(QQe,"CODE",{});var h8t=s(lve);Tgr=r(h8t,"__init__()"),h8t.forEach(t),Mgr=r(QQe," (throws an error)."),QQe.forEach(t),Egr=i(Fl),Ct=n(Fl,"DIV",{class:!0});var YA=s(Ct);T(g9.$$.fragment,YA),Cgr=i(YA),ive=n(YA,"P",{});var p8t=s(ive);wgr=r(p8t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),p8t.forEach(t),Agr=i(YA),Id=n(YA,"P",{});var jte=s(Id);Lgr=r(jte,`Note:
Loading a model from its configuration file does `),dve=n(jte,"STRONG",{});var _8t=s(dve);ygr=r(_8t,"not"),_8t.forEach(t),xgr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(jte,"A",{href:!0});var u8t=s($H);$gr=r(u8t,"from_pretrained()"),u8t.forEach(t),kgr=r(jte," to load the model weights."),jte.forEach(t),Sgr=i(YA),T(mT.$$.fragment,YA),YA.forEach(t),Rgr=i(Fl),go=n(Fl,"DIV",{class:!0});var Ea=s(go);T(h9.$$.fragment,Ea),Pgr=i(Ea),cve=n(Ea,"P",{});var b8t=s(cve);Bgr=r(b8t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),b8t.forEach(t),Igr=i(Ea),Ka=n(Ea,"P",{});var KA=s(Ka);Ngr=r(KA,"The model class to instantiate is selected based on the "),fve=n(KA,"CODE",{});var v8t=s(fve);qgr=r(v8t,"model_type"),v8t.forEach(t),jgr=r(KA,` property of the config object (either
passed as an argument or loaded from `),mve=n(KA,"CODE",{});var F8t=s(mve);Dgr=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),Ggr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(KA,"CODE",{});var T8t=s(gve);Ogr=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),Vgr=r(KA,":"),KA.forEach(t),Xgr=i(Ea),Ho=n(Ea,"UL",{});var Ca=s(Ho);gT=n(Ca,"LI",{});var cqe=s(gT);hve=n(cqe,"STRONG",{});var M8t=s(hve);zgr=r(M8t,"data2vec-audio"),M8t.forEach(t),Wgr=r(cqe," \u2014 "),kH=n(cqe,"A",{href:!0});var E8t=s(kH);Qgr=r(E8t,"Data2VecAudioForAudioFrameClassification"),E8t.forEach(t),Hgr=r(cqe," (Data2VecAudio model)"),cqe.forEach(t),Ugr=i(Ca),hT=n(Ca,"LI",{});var fqe=s(hT);pve=n(fqe,"STRONG",{});var C8t=s(pve);Jgr=r(C8t,"mctct"),C8t.forEach(t),Ygr=r(fqe," \u2014 "),SH=n(fqe,"A",{href:!0});var w8t=s(SH);Kgr=r(w8t,"MCTCTForAudioFrameClassification"),w8t.forEach(t),Zgr=r(fqe," (M-CTC-T model)"),fqe.forEach(t),ehr=i(Ca),pT=n(Ca,"LI",{});var mqe=s(pT);_ve=n(mqe,"STRONG",{});var A8t=s(_ve);ohr=r(A8t,"unispeech-sat"),A8t.forEach(t),rhr=r(mqe," \u2014 "),RH=n(mqe,"A",{href:!0});var L8t=s(RH);thr=r(L8t,"UniSpeechSatForAudioFrameClassification"),L8t.forEach(t),ahr=r(mqe," (UniSpeechSat model)"),mqe.forEach(t),nhr=i(Ca),_T=n(Ca,"LI",{});var gqe=s(_T);uve=n(gqe,"STRONG",{});var y8t=s(uve);shr=r(y8t,"wav2vec2"),y8t.forEach(t),lhr=r(gqe," \u2014 "),PH=n(gqe,"A",{href:!0});var x8t=s(PH);ihr=r(x8t,"Wav2Vec2ForAudioFrameClassification"),x8t.forEach(t),dhr=r(gqe," (Wav2Vec2 model)"),gqe.forEach(t),chr=i(Ca),uT=n(Ca,"LI",{});var hqe=s(uT);bve=n(hqe,"STRONG",{});var $8t=s(bve);fhr=r($8t,"wav2vec2-conformer"),$8t.forEach(t),mhr=r(hqe," \u2014 "),BH=n(hqe,"A",{href:!0});var k8t=s(BH);ghr=r(k8t,"Wav2Vec2ConformerForAudioFrameClassification"),k8t.forEach(t),hhr=r(hqe," (Wav2Vec2-Conformer model)"),hqe.forEach(t),phr=i(Ca),bT=n(Ca,"LI",{});var pqe=s(bT);vve=n(pqe,"STRONG",{});var S8t=s(vve);_hr=r(S8t,"wavlm"),S8t.forEach(t),uhr=r(pqe," \u2014 "),IH=n(pqe,"A",{href:!0});var R8t=s(IH);bhr=r(R8t,"WavLMForAudioFrameClassification"),R8t.forEach(t),vhr=r(pqe," (WavLM model)"),pqe.forEach(t),Ca.forEach(t),Fhr=i(Ea),vT=n(Ea,"P",{});var _qe=s(vT);Thr=r(_qe,"The model is set in evaluation mode by default using "),Fve=n(_qe,"CODE",{});var P8t=s(Fve);Mhr=r(P8t,"model.eval()"),P8t.forEach(t),Ehr=r(_qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=n(_qe,"CODE",{});var B8t=s(Tve);Chr=r(B8t,"model.train()"),B8t.forEach(t),_qe.forEach(t),whr=i(Ea),T(FT.$$.fragment,Ea),Ea.forEach(t),Fl.forEach(t),Oze=i(f),Nd=n(f,"H2",{class:!0});var HQe=s(Nd);TT=n(HQe,"A",{id:!0,class:!0,href:!0});var I8t=s(TT);Mve=n(I8t,"SPAN",{});var N8t=s(Mve);T(p9.$$.fragment,N8t),N8t.forEach(t),I8t.forEach(t),Ahr=i(HQe),Eve=n(HQe,"SPAN",{});var q8t=s(Eve);Lhr=r(q8t,"AutoModelForCTC"),q8t.forEach(t),HQe.forEach(t),Vze=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(_9.$$.fragment,Tl),yhr=i(Tl),qd=n(Tl,"P",{});var Dte=s(qd);xhr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NH=n(Dte,"A",{href:!0});var j8t=s(NH);$hr=r(j8t,"from_pretrained()"),j8t.forEach(t),khr=r(Dte," class method or the "),qH=n(Dte,"A",{href:!0});var D8t=s(qH);Shr=r(D8t,"from_config()"),D8t.forEach(t),Rhr=r(Dte,` class
method.`),Dte.forEach(t),Phr=i(Tl),u9=n(Tl,"P",{});var UQe=s(u9);Bhr=r(UQe,"This class cannot be instantiated directly using "),Cve=n(UQe,"CODE",{});var G8t=s(Cve);Ihr=r(G8t,"__init__()"),G8t.forEach(t),Nhr=r(UQe," (throws an error)."),UQe.forEach(t),qhr=i(Tl),wt=n(Tl,"DIV",{class:!0});var ZA=s(wt);T(b9.$$.fragment,ZA),jhr=i(ZA),wve=n(ZA,"P",{});var O8t=s(wve);Dhr=r(O8t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),O8t.forEach(t),Ghr=i(ZA),jd=n(ZA,"P",{});var Gte=s(jd);Ohr=r(Gte,`Note:
Loading a model from its configuration file does `),Ave=n(Gte,"STRONG",{});var V8t=s(Ave);Vhr=r(V8t,"not"),V8t.forEach(t),Xhr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(Gte,"A",{href:!0});var X8t=s(jH);zhr=r(X8t,"from_pretrained()"),X8t.forEach(t),Whr=r(Gte," to load the model weights."),Gte.forEach(t),Qhr=i(ZA),T(MT.$$.fragment,ZA),ZA.forEach(t),Hhr=i(Tl),ho=n(Tl,"DIV",{class:!0});var wa=s(ho);T(v9.$$.fragment,wa),Uhr=i(wa),Lve=n(wa,"P",{});var z8t=s(Lve);Jhr=r(z8t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),z8t.forEach(t),Yhr=i(wa),Za=n(wa,"P",{});var eL=s(Za);Khr=r(eL,"The model class to instantiate is selected based on the "),yve=n(eL,"CODE",{});var W8t=s(yve);Zhr=r(W8t,"model_type"),W8t.forEach(t),epr=r(eL,` property of the config object (either
passed as an argument or loaded from `),xve=n(eL,"CODE",{});var Q8t=s(xve);opr=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),rpr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(eL,"CODE",{});var H8t=s($ve);tpr=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),apr=r(eL,":"),eL.forEach(t),npr=i(wa),Le=n(wa,"UL",{});var Be=s(Le);ET=n(Be,"LI",{});var uqe=s(ET);kve=n(uqe,"STRONG",{});var U8t=s(kve);spr=r(U8t,"data2vec-audio"),U8t.forEach(t),lpr=r(uqe," \u2014 "),DH=n(uqe,"A",{href:!0});var J8t=s(DH);ipr=r(J8t,"Data2VecAudioForCTC"),J8t.forEach(t),dpr=r(uqe," (Data2VecAudio model)"),uqe.forEach(t),cpr=i(Be),CT=n(Be,"LI",{});var bqe=s(CT);Sve=n(bqe,"STRONG",{});var Y8t=s(Sve);fpr=r(Y8t,"hubert"),Y8t.forEach(t),mpr=r(bqe," \u2014 "),GH=n(bqe,"A",{href:!0});var K8t=s(GH);gpr=r(K8t,"HubertForCTC"),K8t.forEach(t),hpr=r(bqe," (Hubert model)"),bqe.forEach(t),ppr=i(Be),wT=n(Be,"LI",{});var vqe=s(wT);Rve=n(vqe,"STRONG",{});var Z8t=s(Rve);_pr=r(Z8t,"mctct"),Z8t.forEach(t),upr=r(vqe," \u2014 "),OH=n(vqe,"A",{href:!0});var e9t=s(OH);bpr=r(e9t,"MCTCTForCTC"),e9t.forEach(t),vpr=r(vqe," (M-CTC-T model)"),vqe.forEach(t),Fpr=i(Be),AT=n(Be,"LI",{});var Fqe=s(AT);Pve=n(Fqe,"STRONG",{});var o9t=s(Pve);Tpr=r(o9t,"sew"),o9t.forEach(t),Mpr=r(Fqe," \u2014 "),VH=n(Fqe,"A",{href:!0});var r9t=s(VH);Epr=r(r9t,"SEWForCTC"),r9t.forEach(t),Cpr=r(Fqe," (SEW model)"),Fqe.forEach(t),wpr=i(Be),LT=n(Be,"LI",{});var Tqe=s(LT);Bve=n(Tqe,"STRONG",{});var t9t=s(Bve);Apr=r(t9t,"sew-d"),t9t.forEach(t),Lpr=r(Tqe," \u2014 "),XH=n(Tqe,"A",{href:!0});var a9t=s(XH);ypr=r(a9t,"SEWDForCTC"),a9t.forEach(t),xpr=r(Tqe," (SEW-D model)"),Tqe.forEach(t),$pr=i(Be),yT=n(Be,"LI",{});var Mqe=s(yT);Ive=n(Mqe,"STRONG",{});var n9t=s(Ive);kpr=r(n9t,"unispeech"),n9t.forEach(t),Spr=r(Mqe," \u2014 "),zH=n(Mqe,"A",{href:!0});var s9t=s(zH);Rpr=r(s9t,"UniSpeechForCTC"),s9t.forEach(t),Ppr=r(Mqe," (UniSpeech model)"),Mqe.forEach(t),Bpr=i(Be),xT=n(Be,"LI",{});var Eqe=s(xT);Nve=n(Eqe,"STRONG",{});var l9t=s(Nve);Ipr=r(l9t,"unispeech-sat"),l9t.forEach(t),Npr=r(Eqe," \u2014 "),WH=n(Eqe,"A",{href:!0});var i9t=s(WH);qpr=r(i9t,"UniSpeechSatForCTC"),i9t.forEach(t),jpr=r(Eqe," (UniSpeechSat model)"),Eqe.forEach(t),Dpr=i(Be),$T=n(Be,"LI",{});var Cqe=s($T);qve=n(Cqe,"STRONG",{});var d9t=s(qve);Gpr=r(d9t,"wav2vec2"),d9t.forEach(t),Opr=r(Cqe," \u2014 "),QH=n(Cqe,"A",{href:!0});var c9t=s(QH);Vpr=r(c9t,"Wav2Vec2ForCTC"),c9t.forEach(t),Xpr=r(Cqe," (Wav2Vec2 model)"),Cqe.forEach(t),zpr=i(Be),kT=n(Be,"LI",{});var wqe=s(kT);jve=n(wqe,"STRONG",{});var f9t=s(jve);Wpr=r(f9t,"wav2vec2-conformer"),f9t.forEach(t),Qpr=r(wqe," \u2014 "),HH=n(wqe,"A",{href:!0});var m9t=s(HH);Hpr=r(m9t,"Wav2Vec2ConformerForCTC"),m9t.forEach(t),Upr=r(wqe," (Wav2Vec2-Conformer model)"),wqe.forEach(t),Jpr=i(Be),ST=n(Be,"LI",{});var Aqe=s(ST);Dve=n(Aqe,"STRONG",{});var g9t=s(Dve);Ypr=r(g9t,"wavlm"),g9t.forEach(t),Kpr=r(Aqe," \u2014 "),UH=n(Aqe,"A",{href:!0});var h9t=s(UH);Zpr=r(h9t,"WavLMForCTC"),h9t.forEach(t),e_r=r(Aqe," (WavLM model)"),Aqe.forEach(t),Be.forEach(t),o_r=i(wa),RT=n(wa,"P",{});var Lqe=s(RT);r_r=r(Lqe,"The model is set in evaluation mode by default using "),Gve=n(Lqe,"CODE",{});var p9t=s(Gve);t_r=r(p9t,"model.eval()"),p9t.forEach(t),a_r=r(Lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=n(Lqe,"CODE",{});var _9t=s(Ove);n_r=r(_9t,"model.train()"),_9t.forEach(t),Lqe.forEach(t),s_r=i(wa),T(PT.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),Xze=i(f),Dd=n(f,"H2",{class:!0});var JQe=s(Dd);BT=n(JQe,"A",{id:!0,class:!0,href:!0});var u9t=s(BT);Vve=n(u9t,"SPAN",{});var b9t=s(Vve);T(F9.$$.fragment,b9t),b9t.forEach(t),u9t.forEach(t),l_r=i(JQe),Xve=n(JQe,"SPAN",{});var v9t=s(Xve);i_r=r(v9t,"AutoModelForSpeechSeq2Seq"),v9t.forEach(t),JQe.forEach(t),zze=i(f),Jo=n(f,"DIV",{class:!0});var Ml=s(Jo);T(T9.$$.fragment,Ml),d_r=i(Ml),Gd=n(Ml,"P",{});var Ote=s(Gd);c_r=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JH=n(Ote,"A",{href:!0});var F9t=s(JH);f_r=r(F9t,"from_pretrained()"),F9t.forEach(t),m_r=r(Ote," class method or the "),YH=n(Ote,"A",{href:!0});var T9t=s(YH);g_r=r(T9t,"from_config()"),T9t.forEach(t),h_r=r(Ote,` class
method.`),Ote.forEach(t),p_r=i(Ml),M9=n(Ml,"P",{});var YQe=s(M9);__r=r(YQe,"This class cannot be instantiated directly using "),zve=n(YQe,"CODE",{});var M9t=s(zve);u_r=r(M9t,"__init__()"),M9t.forEach(t),b_r=r(YQe," (throws an error)."),YQe.forEach(t),v_r=i(Ml),At=n(Ml,"DIV",{class:!0});var oL=s(At);T(E9.$$.fragment,oL),F_r=i(oL),Wve=n(oL,"P",{});var E9t=s(Wve);T_r=r(E9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),E9t.forEach(t),M_r=i(oL),Od=n(oL,"P",{});var Vte=s(Od);E_r=r(Vte,`Note:
Loading a model from its configuration file does `),Qve=n(Vte,"STRONG",{});var C9t=s(Qve);C_r=r(C9t,"not"),C9t.forEach(t),w_r=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(Vte,"A",{href:!0});var w9t=s(KH);A_r=r(w9t,"from_pretrained()"),w9t.forEach(t),L_r=r(Vte," to load the model weights."),Vte.forEach(t),y_r=i(oL),T(IT.$$.fragment,oL),oL.forEach(t),x_r=i(Ml),po=n(Ml,"DIV",{class:!0});var Aa=s(po);T(C9.$$.fragment,Aa),$_r=i(Aa),Hve=n(Aa,"P",{});var A9t=s(Hve);k_r=r(A9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),A9t.forEach(t),S_r=i(Aa),en=n(Aa,"P",{});var rL=s(en);R_r=r(rL,"The model class to instantiate is selected based on the "),Uve=n(rL,"CODE",{});var L9t=s(Uve);P_r=r(L9t,"model_type"),L9t.forEach(t),B_r=r(rL,` property of the config object (either
passed as an argument or loaded from `),Jve=n(rL,"CODE",{});var y9t=s(Jve);I_r=r(y9t,"pretrained_model_name_or_path"),y9t.forEach(t),N_r=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(rL,"CODE",{});var x9t=s(Yve);q_r=r(x9t,"pretrained_model_name_or_path"),x9t.forEach(t),j_r=r(rL,":"),rL.forEach(t),D_r=i(Aa),w9=n(Aa,"UL",{});var KQe=s(w9);NT=n(KQe,"LI",{});var yqe=s(NT);Kve=n(yqe,"STRONG",{});var $9t=s(Kve);G_r=r($9t,"speech-encoder-decoder"),$9t.forEach(t),O_r=r(yqe," \u2014 "),ZH=n(yqe,"A",{href:!0});var k9t=s(ZH);V_r=r(k9t,"SpeechEncoderDecoderModel"),k9t.forEach(t),X_r=r(yqe," (Speech Encoder decoder model)"),yqe.forEach(t),z_r=i(KQe),qT=n(KQe,"LI",{});var xqe=s(qT);Zve=n(xqe,"STRONG",{});var S9t=s(Zve);W_r=r(S9t,"speech_to_text"),S9t.forEach(t),Q_r=r(xqe," \u2014 "),eU=n(xqe,"A",{href:!0});var R9t=s(eU);H_r=r(R9t,"Speech2TextForConditionalGeneration"),R9t.forEach(t),U_r=r(xqe," (Speech2Text model)"),xqe.forEach(t),KQe.forEach(t),J_r=i(Aa),jT=n(Aa,"P",{});var $qe=s(jT);Y_r=r($qe,"The model is set in evaluation mode by default using "),eFe=n($qe,"CODE",{});var P9t=s(eFe);K_r=r(P9t,"model.eval()"),P9t.forEach(t),Z_r=r($qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=n($qe,"CODE",{});var B9t=s(oFe);eur=r(B9t,"model.train()"),B9t.forEach(t),$qe.forEach(t),our=i(Aa),T(DT.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),Wze=i(f),Vd=n(f,"H2",{class:!0});var ZQe=s(Vd);GT=n(ZQe,"A",{id:!0,class:!0,href:!0});var I9t=s(GT);rFe=n(I9t,"SPAN",{});var N9t=s(rFe);T(A9.$$.fragment,N9t),N9t.forEach(t),I9t.forEach(t),rur=i(ZQe),tFe=n(ZQe,"SPAN",{});var q9t=s(tFe);tur=r(q9t,"AutoModelForAudioXVector"),q9t.forEach(t),ZQe.forEach(t),Qze=i(f),Yo=n(f,"DIV",{class:!0});var El=s(Yo);T(L9.$$.fragment,El),aur=i(El),Xd=n(El,"P",{});var Xte=s(Xd);nur=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oU=n(Xte,"A",{href:!0});var j9t=s(oU);sur=r(j9t,"from_pretrained()"),j9t.forEach(t),lur=r(Xte," class method or the "),rU=n(Xte,"A",{href:!0});var D9t=s(rU);iur=r(D9t,"from_config()"),D9t.forEach(t),dur=r(Xte,` class
method.`),Xte.forEach(t),cur=i(El),y9=n(El,"P",{});var eHe=s(y9);fur=r(eHe,"This class cannot be instantiated directly using "),aFe=n(eHe,"CODE",{});var G9t=s(aFe);mur=r(G9t,"__init__()"),G9t.forEach(t),gur=r(eHe," (throws an error)."),eHe.forEach(t),hur=i(El),Lt=n(El,"DIV",{class:!0});var tL=s(Lt);T(x9.$$.fragment,tL),pur=i(tL),nFe=n(tL,"P",{});var O9t=s(nFe);_ur=r(O9t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),O9t.forEach(t),uur=i(tL),zd=n(tL,"P",{});var zte=s(zd);bur=r(zte,`Note:
Loading a model from its configuration file does `),sFe=n(zte,"STRONG",{});var V9t=s(sFe);vur=r(V9t,"not"),V9t.forEach(t),Fur=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(zte,"A",{href:!0});var X9t=s(tU);Tur=r(X9t,"from_pretrained()"),X9t.forEach(t),Mur=r(zte," to load the model weights."),zte.forEach(t),Eur=i(tL),T(OT.$$.fragment,tL),tL.forEach(t),Cur=i(El),_o=n(El,"DIV",{class:!0});var La=s(_o);T($9.$$.fragment,La),wur=i(La),lFe=n(La,"P",{});var z9t=s(lFe);Aur=r(z9t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),z9t.forEach(t),Lur=i(La),on=n(La,"P",{});var aL=s(on);yur=r(aL,"The model class to instantiate is selected based on the "),iFe=n(aL,"CODE",{});var W9t=s(iFe);xur=r(W9t,"model_type"),W9t.forEach(t),$ur=r(aL,` property of the config object (either
passed as an argument or loaded from `),dFe=n(aL,"CODE",{});var Q9t=s(dFe);kur=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),Sur=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(aL,"CODE",{});var H9t=s(cFe);Rur=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),Pur=r(aL,":"),aL.forEach(t),Bur=i(La),tt=n(La,"UL",{});var Cl=s(tt);VT=n(Cl,"LI",{});var kqe=s(VT);fFe=n(kqe,"STRONG",{});var U9t=s(fFe);Iur=r(U9t,"data2vec-audio"),U9t.forEach(t),Nur=r(kqe," \u2014 "),aU=n(kqe,"A",{href:!0});var J9t=s(aU);qur=r(J9t,"Data2VecAudioForXVector"),J9t.forEach(t),jur=r(kqe," (Data2VecAudio model)"),kqe.forEach(t),Dur=i(Cl),XT=n(Cl,"LI",{});var Sqe=s(XT);mFe=n(Sqe,"STRONG",{});var Y9t=s(mFe);Gur=r(Y9t,"unispeech-sat"),Y9t.forEach(t),Our=r(Sqe," \u2014 "),nU=n(Sqe,"A",{href:!0});var K9t=s(nU);Vur=r(K9t,"UniSpeechSatForXVector"),K9t.forEach(t),Xur=r(Sqe," (UniSpeechSat model)"),Sqe.forEach(t),zur=i(Cl),zT=n(Cl,"LI",{});var Rqe=s(zT);gFe=n(Rqe,"STRONG",{});var Z9t=s(gFe);Wur=r(Z9t,"wav2vec2"),Z9t.forEach(t),Qur=r(Rqe," \u2014 "),sU=n(Rqe,"A",{href:!0});var ext=s(sU);Hur=r(ext,"Wav2Vec2ForXVector"),ext.forEach(t),Uur=r(Rqe," (Wav2Vec2 model)"),Rqe.forEach(t),Jur=i(Cl),WT=n(Cl,"LI",{});var Pqe=s(WT);hFe=n(Pqe,"STRONG",{});var oxt=s(hFe);Yur=r(oxt,"wav2vec2-conformer"),oxt.forEach(t),Kur=r(Pqe," \u2014 "),lU=n(Pqe,"A",{href:!0});var rxt=s(lU);Zur=r(rxt,"Wav2Vec2ConformerForXVector"),rxt.forEach(t),e1r=r(Pqe," (Wav2Vec2-Conformer model)"),Pqe.forEach(t),o1r=i(Cl),QT=n(Cl,"LI",{});var Bqe=s(QT);pFe=n(Bqe,"STRONG",{});var txt=s(pFe);r1r=r(txt,"wavlm"),txt.forEach(t),t1r=r(Bqe," \u2014 "),iU=n(Bqe,"A",{href:!0});var axt=s(iU);a1r=r(axt,"WavLMForXVector"),axt.forEach(t),n1r=r(Bqe," (WavLM model)"),Bqe.forEach(t),Cl.forEach(t),s1r=i(La),HT=n(La,"P",{});var Iqe=s(HT);l1r=r(Iqe,"The model is set in evaluation mode by default using "),_Fe=n(Iqe,"CODE",{});var nxt=s(_Fe);i1r=r(nxt,"model.eval()"),nxt.forEach(t),d1r=r(Iqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=n(Iqe,"CODE",{});var sxt=s(uFe);c1r=r(sxt,"model.train()"),sxt.forEach(t),Iqe.forEach(t),f1r=i(La),T(UT.$$.fragment,La),La.forEach(t),El.forEach(t),Hze=i(f),Wd=n(f,"H2",{class:!0});var oHe=s(Wd);JT=n(oHe,"A",{id:!0,class:!0,href:!0});var lxt=s(JT);bFe=n(lxt,"SPAN",{});var ixt=s(bFe);T(k9.$$.fragment,ixt),ixt.forEach(t),lxt.forEach(t),m1r=i(oHe),vFe=n(oHe,"SPAN",{});var dxt=s(vFe);g1r=r(dxt,"AutoModelForMaskedImageModeling"),dxt.forEach(t),oHe.forEach(t),Uze=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(S9.$$.fragment,wl),h1r=i(wl),Qd=n(wl,"P",{});var Wte=s(Qd);p1r=r(Wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dU=n(Wte,"A",{href:!0});var cxt=s(dU);_1r=r(cxt,"from_pretrained()"),cxt.forEach(t),u1r=r(Wte," class method or the "),cU=n(Wte,"A",{href:!0});var fxt=s(cU);b1r=r(fxt,"from_config()"),fxt.forEach(t),v1r=r(Wte,` class
method.`),Wte.forEach(t),F1r=i(wl),R9=n(wl,"P",{});var rHe=s(R9);T1r=r(rHe,"This class cannot be instantiated directly using "),FFe=n(rHe,"CODE",{});var mxt=s(FFe);M1r=r(mxt,"__init__()"),mxt.forEach(t),E1r=r(rHe," (throws an error)."),rHe.forEach(t),C1r=i(wl),yt=n(wl,"DIV",{class:!0});var nL=s(yt);T(P9.$$.fragment,nL),w1r=i(nL),TFe=n(nL,"P",{});var gxt=s(TFe);A1r=r(gxt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),gxt.forEach(t),L1r=i(nL),Hd=n(nL,"P",{});var Qte=s(Hd);y1r=r(Qte,`Note:
Loading a model from its configuration file does `),MFe=n(Qte,"STRONG",{});var hxt=s(MFe);x1r=r(hxt,"not"),hxt.forEach(t),$1r=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(Qte,"A",{href:!0});var pxt=s(fU);k1r=r(pxt,"from_pretrained()"),pxt.forEach(t),S1r=r(Qte," to load the model weights."),Qte.forEach(t),R1r=i(nL),T(YT.$$.fragment,nL),nL.forEach(t),P1r=i(wl),uo=n(wl,"DIV",{class:!0});var ya=s(uo);T(B9.$$.fragment,ya),B1r=i(ya),EFe=n(ya,"P",{});var _xt=s(EFe);I1r=r(_xt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_xt.forEach(t),N1r=i(ya),rn=n(ya,"P",{});var sL=s(rn);q1r=r(sL,"The model class to instantiate is selected based on the "),CFe=n(sL,"CODE",{});var uxt=s(CFe);j1r=r(uxt,"model_type"),uxt.forEach(t),D1r=r(sL,` property of the config object (either
passed as an argument or loaded from `),wFe=n(sL,"CODE",{});var bxt=s(wFe);G1r=r(bxt,"pretrained_model_name_or_path"),bxt.forEach(t),O1r=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(sL,"CODE",{});var vxt=s(AFe);V1r=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),X1r=r(sL,":"),sL.forEach(t),z1r=i(ya),Ud=n(ya,"UL",{});var Hte=s(Ud);KT=n(Hte,"LI",{});var Nqe=s(KT);LFe=n(Nqe,"STRONG",{});var Fxt=s(LFe);W1r=r(Fxt,"deit"),Fxt.forEach(t),Q1r=r(Nqe," \u2014 "),mU=n(Nqe,"A",{href:!0});var Txt=s(mU);H1r=r(Txt,"DeiTForMaskedImageModeling"),Txt.forEach(t),U1r=r(Nqe," (DeiT model)"),Nqe.forEach(t),J1r=i(Hte),ZT=n(Hte,"LI",{});var qqe=s(ZT);yFe=n(qqe,"STRONG",{});var Mxt=s(yFe);Y1r=r(Mxt,"swin"),Mxt.forEach(t),K1r=r(qqe," \u2014 "),gU=n(qqe,"A",{href:!0});var Ext=s(gU);Z1r=r(Ext,"SwinForMaskedImageModeling"),Ext.forEach(t),e7r=r(qqe," (Swin Transformer model)"),qqe.forEach(t),o7r=i(Hte),eM=n(Hte,"LI",{});var jqe=s(eM);xFe=n(jqe,"STRONG",{});var Cxt=s(xFe);r7r=r(Cxt,"vit"),Cxt.forEach(t),t7r=r(jqe," \u2014 "),hU=n(jqe,"A",{href:!0});var wxt=s(hU);a7r=r(wxt,"ViTForMaskedImageModeling"),wxt.forEach(t),n7r=r(jqe," (ViT model)"),jqe.forEach(t),Hte.forEach(t),s7r=i(ya),oM=n(ya,"P",{});var Dqe=s(oM);l7r=r(Dqe,"The model is set in evaluation mode by default using "),$Fe=n(Dqe,"CODE",{});var Axt=s($Fe);i7r=r(Axt,"model.eval()"),Axt.forEach(t),d7r=r(Dqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kFe=n(Dqe,"CODE",{});var Lxt=s(kFe);c7r=r(Lxt,"model.train()"),Lxt.forEach(t),Dqe.forEach(t),f7r=i(ya),T(rM.$$.fragment,ya),ya.forEach(t),wl.forEach(t),Jze=i(f),Jd=n(f,"H2",{class:!0});var tHe=s(Jd);tM=n(tHe,"A",{id:!0,class:!0,href:!0});var yxt=s(tM);SFe=n(yxt,"SPAN",{});var xxt=s(SFe);T(I9.$$.fragment,xxt),xxt.forEach(t),yxt.forEach(t),m7r=i(tHe),RFe=n(tHe,"SPAN",{});var $xt=s(RFe);g7r=r($xt,"AutoModelForObjectDetection"),$xt.forEach(t),tHe.forEach(t),Yze=i(f),Zo=n(f,"DIV",{class:!0});var Al=s(Zo);T(N9.$$.fragment,Al),h7r=i(Al),Yd=n(Al,"P",{});var Ute=s(Yd);p7r=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pU=n(Ute,"A",{href:!0});var kxt=s(pU);_7r=r(kxt,"from_pretrained()"),kxt.forEach(t),u7r=r(Ute," class method or the "),_U=n(Ute,"A",{href:!0});var Sxt=s(_U);b7r=r(Sxt,"from_config()"),Sxt.forEach(t),v7r=r(Ute,` class
method.`),Ute.forEach(t),F7r=i(Al),q9=n(Al,"P",{});var aHe=s(q9);T7r=r(aHe,"This class cannot be instantiated directly using "),PFe=n(aHe,"CODE",{});var Rxt=s(PFe);M7r=r(Rxt,"__init__()"),Rxt.forEach(t),E7r=r(aHe," (throws an error)."),aHe.forEach(t),C7r=i(Al),xt=n(Al,"DIV",{class:!0});var lL=s(xt);T(j9.$$.fragment,lL),w7r=i(lL),BFe=n(lL,"P",{});var Pxt=s(BFe);A7r=r(Pxt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Pxt.forEach(t),L7r=i(lL),Kd=n(lL,"P",{});var Jte=s(Kd);y7r=r(Jte,`Note:
Loading a model from its configuration file does `),IFe=n(Jte,"STRONG",{});var Bxt=s(IFe);x7r=r(Bxt,"not"),Bxt.forEach(t),$7r=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(Jte,"A",{href:!0});var Ixt=s(uU);k7r=r(Ixt,"from_pretrained()"),Ixt.forEach(t),S7r=r(Jte," to load the model weights."),Jte.forEach(t),R7r=i(lL),T(aM.$$.fragment,lL),lL.forEach(t),P7r=i(Al),bo=n(Al,"DIV",{class:!0});var xa=s(bo);T(D9.$$.fragment,xa),B7r=i(xa),NFe=n(xa,"P",{});var Nxt=s(NFe);I7r=r(Nxt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Nxt.forEach(t),N7r=i(xa),tn=n(xa,"P",{});var iL=s(tn);q7r=r(iL,"The model class to instantiate is selected based on the "),qFe=n(iL,"CODE",{});var qxt=s(qFe);j7r=r(qxt,"model_type"),qxt.forEach(t),D7r=r(iL,` property of the config object (either
passed as an argument or loaded from `),jFe=n(iL,"CODE",{});var jxt=s(jFe);G7r=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),O7r=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(iL,"CODE",{});var Dxt=s(DFe);V7r=r(Dxt,"pretrained_model_name_or_path"),Dxt.forEach(t),X7r=r(iL,":"),iL.forEach(t),z7r=i(xa),G9=n(xa,"UL",{});var nHe=s(G9);nM=n(nHe,"LI",{});var Gqe=s(nM);GFe=n(Gqe,"STRONG",{});var Gxt=s(GFe);W7r=r(Gxt,"detr"),Gxt.forEach(t),Q7r=r(Gqe," \u2014 "),bU=n(Gqe,"A",{href:!0});var Oxt=s(bU);H7r=r(Oxt,"DetrForObjectDetection"),Oxt.forEach(t),U7r=r(Gqe," (DETR model)"),Gqe.forEach(t),J7r=i(nHe),sM=n(nHe,"LI",{});var Oqe=s(sM);OFe=n(Oqe,"STRONG",{});var Vxt=s(OFe);Y7r=r(Vxt,"yolos"),Vxt.forEach(t),K7r=r(Oqe," \u2014 "),vU=n(Oqe,"A",{href:!0});var Xxt=s(vU);Z7r=r(Xxt,"YolosForObjectDetection"),Xxt.forEach(t),e2r=r(Oqe," (YOLOS model)"),Oqe.forEach(t),nHe.forEach(t),o2r=i(xa),lM=n(xa,"P",{});var Vqe=s(lM);r2r=r(Vqe,"The model is set in evaluation mode by default using "),VFe=n(Vqe,"CODE",{});var zxt=s(VFe);t2r=r(zxt,"model.eval()"),zxt.forEach(t),a2r=r(Vqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=n(Vqe,"CODE",{});var Wxt=s(XFe);n2r=r(Wxt,"model.train()"),Wxt.forEach(t),Vqe.forEach(t),s2r=i(xa),T(iM.$$.fragment,xa),xa.forEach(t),Al.forEach(t),Kze=i(f),Zd=n(f,"H2",{class:!0});var sHe=s(Zd);dM=n(sHe,"A",{id:!0,class:!0,href:!0});var Qxt=s(dM);zFe=n(Qxt,"SPAN",{});var Hxt=s(zFe);T(O9.$$.fragment,Hxt),Hxt.forEach(t),Qxt.forEach(t),l2r=i(sHe),WFe=n(sHe,"SPAN",{});var Uxt=s(WFe);i2r=r(Uxt,"AutoModelForImageSegmentation"),Uxt.forEach(t),sHe.forEach(t),Zze=i(f),er=n(f,"DIV",{class:!0});var Ll=s(er);T(V9.$$.fragment,Ll),d2r=i(Ll),ec=n(Ll,"P",{});var Yte=s(ec);c2r=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FU=n(Yte,"A",{href:!0});var Jxt=s(FU);f2r=r(Jxt,"from_pretrained()"),Jxt.forEach(t),m2r=r(Yte," class method or the "),TU=n(Yte,"A",{href:!0});var Yxt=s(TU);g2r=r(Yxt,"from_config()"),Yxt.forEach(t),h2r=r(Yte,` class
method.`),Yte.forEach(t),p2r=i(Ll),X9=n(Ll,"P",{});var lHe=s(X9);_2r=r(lHe,"This class cannot be instantiated directly using "),QFe=n(lHe,"CODE",{});var Kxt=s(QFe);u2r=r(Kxt,"__init__()"),Kxt.forEach(t),b2r=r(lHe," (throws an error)."),lHe.forEach(t),v2r=i(Ll),$t=n(Ll,"DIV",{class:!0});var dL=s($t);T(z9.$$.fragment,dL),F2r=i(dL),HFe=n(dL,"P",{});var Zxt=s(HFe);T2r=r(Zxt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Zxt.forEach(t),M2r=i(dL),oc=n(dL,"P",{});var Kte=s(oc);E2r=r(Kte,`Note:
Loading a model from its configuration file does `),UFe=n(Kte,"STRONG",{});var e$t=s(UFe);C2r=r(e$t,"not"),e$t.forEach(t),w2r=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(Kte,"A",{href:!0});var o$t=s(MU);A2r=r(o$t,"from_pretrained()"),o$t.forEach(t),L2r=r(Kte," to load the model weights."),Kte.forEach(t),y2r=i(dL),T(cM.$$.fragment,dL),dL.forEach(t),x2r=i(Ll),vo=n(Ll,"DIV",{class:!0});var $a=s(vo);T(W9.$$.fragment,$a),$2r=i($a),JFe=n($a,"P",{});var r$t=s(JFe);k2r=r(r$t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),r$t.forEach(t),S2r=i($a),an=n($a,"P",{});var cL=s(an);R2r=r(cL,"The model class to instantiate is selected based on the "),YFe=n(cL,"CODE",{});var t$t=s(YFe);P2r=r(t$t,"model_type"),t$t.forEach(t),B2r=r(cL,` property of the config object (either
passed as an argument or loaded from `),KFe=n(cL,"CODE",{});var a$t=s(KFe);I2r=r(a$t,"pretrained_model_name_or_path"),a$t.forEach(t),N2r=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(cL,"CODE",{});var n$t=s(ZFe);q2r=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),j2r=r(cL,":"),cL.forEach(t),D2r=i($a),e6e=n($a,"UL",{});var s$t=s(e6e);fM=n(s$t,"LI",{});var Xqe=s(fM);o6e=n(Xqe,"STRONG",{});var l$t=s(o6e);G2r=r(l$t,"detr"),l$t.forEach(t),O2r=r(Xqe," \u2014 "),EU=n(Xqe,"A",{href:!0});var i$t=s(EU);V2r=r(i$t,"DetrForSegmentation"),i$t.forEach(t),X2r=r(Xqe," (DETR model)"),Xqe.forEach(t),s$t.forEach(t),z2r=i($a),mM=n($a,"P",{});var zqe=s(mM);W2r=r(zqe,"The model is set in evaluation mode by default using "),r6e=n(zqe,"CODE",{});var d$t=s(r6e);Q2r=r(d$t,"model.eval()"),d$t.forEach(t),H2r=r(zqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t6e=n(zqe,"CODE",{});var c$t=s(t6e);U2r=r(c$t,"model.train()"),c$t.forEach(t),zqe.forEach(t),J2r=i($a),T(gM.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),eWe=i(f),rc=n(f,"H2",{class:!0});var iHe=s(rc);hM=n(iHe,"A",{id:!0,class:!0,href:!0});var f$t=s(hM);a6e=n(f$t,"SPAN",{});var m$t=s(a6e);T(Q9.$$.fragment,m$t),m$t.forEach(t),f$t.forEach(t),Y2r=i(iHe),n6e=n(iHe,"SPAN",{});var g$t=s(n6e);K2r=r(g$t,"AutoModelForSemanticSegmentation"),g$t.forEach(t),iHe.forEach(t),oWe=i(f),or=n(f,"DIV",{class:!0});var yl=s(or);T(H9.$$.fragment,yl),Z2r=i(yl),tc=n(yl,"P",{});var Zte=s(tc);ebr=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CU=n(Zte,"A",{href:!0});var h$t=s(CU);obr=r(h$t,"from_pretrained()"),h$t.forEach(t),rbr=r(Zte," class method or the "),wU=n(Zte,"A",{href:!0});var p$t=s(wU);tbr=r(p$t,"from_config()"),p$t.forEach(t),abr=r(Zte,` class
method.`),Zte.forEach(t),nbr=i(yl),U9=n(yl,"P",{});var dHe=s(U9);sbr=r(dHe,"This class cannot be instantiated directly using "),s6e=n(dHe,"CODE",{});var _$t=s(s6e);lbr=r(_$t,"__init__()"),_$t.forEach(t),ibr=r(dHe," (throws an error)."),dHe.forEach(t),dbr=i(yl),kt=n(yl,"DIV",{class:!0});var fL=s(kt);T(J9.$$.fragment,fL),cbr=i(fL),l6e=n(fL,"P",{});var u$t=s(l6e);fbr=r(u$t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),u$t.forEach(t),mbr=i(fL),ac=n(fL,"P",{});var eae=s(ac);gbr=r(eae,`Note:
Loading a model from its configuration file does `),i6e=n(eae,"STRONG",{});var b$t=s(i6e);hbr=r(b$t,"not"),b$t.forEach(t),pbr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(eae,"A",{href:!0});var v$t=s(AU);_br=r(v$t,"from_pretrained()"),v$t.forEach(t),ubr=r(eae," to load the model weights."),eae.forEach(t),bbr=i(fL),T(pM.$$.fragment,fL),fL.forEach(t),vbr=i(yl),Fo=n(yl,"DIV",{class:!0});var ka=s(Fo);T(Y9.$$.fragment,ka),Fbr=i(ka),d6e=n(ka,"P",{});var F$t=s(d6e);Tbr=r(F$t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),F$t.forEach(t),Mbr=i(ka),nn=n(ka,"P",{});var mL=s(nn);Ebr=r(mL,"The model class to instantiate is selected based on the "),c6e=n(mL,"CODE",{});var T$t=s(c6e);Cbr=r(T$t,"model_type"),T$t.forEach(t),wbr=r(mL,` property of the config object (either
passed as an argument or loaded from `),f6e=n(mL,"CODE",{});var M$t=s(f6e);Abr=r(M$t,"pretrained_model_name_or_path"),M$t.forEach(t),Lbr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=n(mL,"CODE",{});var E$t=s(m6e);ybr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),xbr=r(mL,":"),mL.forEach(t),$br=i(ka),at=n(ka,"UL",{});var xl=s(at);_M=n(xl,"LI",{});var Wqe=s(_M);g6e=n(Wqe,"STRONG",{});var C$t=s(g6e);kbr=r(C$t,"beit"),C$t.forEach(t),Sbr=r(Wqe," \u2014 "),LU=n(Wqe,"A",{href:!0});var w$t=s(LU);Rbr=r(w$t,"BeitForSemanticSegmentation"),w$t.forEach(t),Pbr=r(Wqe," (BEiT model)"),Wqe.forEach(t),Bbr=i(xl),uM=n(xl,"LI",{});var Qqe=s(uM);h6e=n(Qqe,"STRONG",{});var A$t=s(h6e);Ibr=r(A$t,"data2vec-vision"),A$t.forEach(t),Nbr=r(Qqe," \u2014 "),yU=n(Qqe,"A",{href:!0});var L$t=s(yU);qbr=r(L$t,"Data2VecVisionForSemanticSegmentation"),L$t.forEach(t),jbr=r(Qqe," (Data2VecVision model)"),Qqe.forEach(t),Dbr=i(xl),bM=n(xl,"LI",{});var Hqe=s(bM);p6e=n(Hqe,"STRONG",{});var y$t=s(p6e);Gbr=r(y$t,"dpt"),y$t.forEach(t),Obr=r(Hqe," \u2014 "),xU=n(Hqe,"A",{href:!0});var x$t=s(xU);Vbr=r(x$t,"DPTForSemanticSegmentation"),x$t.forEach(t),Xbr=r(Hqe," (DPT model)"),Hqe.forEach(t),zbr=i(xl),vM=n(xl,"LI",{});var Uqe=s(vM);_6e=n(Uqe,"STRONG",{});var $$t=s(_6e);Wbr=r($$t,"mobilevit"),$$t.forEach(t),Qbr=r(Uqe," \u2014 "),$U=n(Uqe,"A",{href:!0});var k$t=s($U);Hbr=r(k$t,"MobileViTForSemanticSegmentation"),k$t.forEach(t),Ubr=r(Uqe," (MobileViT model)"),Uqe.forEach(t),Jbr=i(xl),FM=n(xl,"LI",{});var Jqe=s(FM);u6e=n(Jqe,"STRONG",{});var S$t=s(u6e);Ybr=r(S$t,"segformer"),S$t.forEach(t),Kbr=r(Jqe," \u2014 "),kU=n(Jqe,"A",{href:!0});var R$t=s(kU);Zbr=r(R$t,"SegformerForSemanticSegmentation"),R$t.forEach(t),evr=r(Jqe," (SegFormer model)"),Jqe.forEach(t),xl.forEach(t),ovr=i(ka),TM=n(ka,"P",{});var Yqe=s(TM);rvr=r(Yqe,"The model is set in evaluation mode by default using "),b6e=n(Yqe,"CODE",{});var P$t=s(b6e);tvr=r(P$t,"model.eval()"),P$t.forEach(t),avr=r(Yqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v6e=n(Yqe,"CODE",{});var B$t=s(v6e);nvr=r(B$t,"model.train()"),B$t.forEach(t),Yqe.forEach(t),svr=i(ka),T(MM.$$.fragment,ka),ka.forEach(t),yl.forEach(t),rWe=i(f),nc=n(f,"H2",{class:!0});var cHe=s(nc);EM=n(cHe,"A",{id:!0,class:!0,href:!0});var I$t=s(EM);F6e=n(I$t,"SPAN",{});var N$t=s(F6e);T(K9.$$.fragment,N$t),N$t.forEach(t),I$t.forEach(t),lvr=i(cHe),T6e=n(cHe,"SPAN",{});var q$t=s(T6e);ivr=r(q$t,"AutoModelForInstanceSegmentation"),q$t.forEach(t),cHe.forEach(t),tWe=i(f),rr=n(f,"DIV",{class:!0});var $l=s(rr);T(Z9.$$.fragment,$l),dvr=i($l),sc=n($l,"P",{});var oae=s(sc);cvr=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SU=n(oae,"A",{href:!0});var j$t=s(SU);fvr=r(j$t,"from_pretrained()"),j$t.forEach(t),mvr=r(oae," class method or the "),RU=n(oae,"A",{href:!0});var D$t=s(RU);gvr=r(D$t,"from_config()"),D$t.forEach(t),hvr=r(oae,` class
method.`),oae.forEach(t),pvr=i($l),ex=n($l,"P",{});var fHe=s(ex);_vr=r(fHe,"This class cannot be instantiated directly using "),M6e=n(fHe,"CODE",{});var G$t=s(M6e);uvr=r(G$t,"__init__()"),G$t.forEach(t),bvr=r(fHe," (throws an error)."),fHe.forEach(t),vvr=i($l),St=n($l,"DIV",{class:!0});var gL=s(St);T(ox.$$.fragment,gL),Fvr=i(gL),E6e=n(gL,"P",{});var O$t=s(E6e);Tvr=r(O$t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),O$t.forEach(t),Mvr=i(gL),lc=n(gL,"P",{});var rae=s(lc);Evr=r(rae,`Note:
Loading a model from its configuration file does `),C6e=n(rae,"STRONG",{});var V$t=s(C6e);Cvr=r(V$t,"not"),V$t.forEach(t),wvr=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(rae,"A",{href:!0});var X$t=s(PU);Avr=r(X$t,"from_pretrained()"),X$t.forEach(t),Lvr=r(rae," to load the model weights."),rae.forEach(t),yvr=i(gL),T(CM.$$.fragment,gL),gL.forEach(t),xvr=i($l),To=n($l,"DIV",{class:!0});var Sa=s(To);T(rx.$$.fragment,Sa),$vr=i(Sa),w6e=n(Sa,"P",{});var z$t=s(w6e);kvr=r(z$t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),z$t.forEach(t),Svr=i(Sa),sn=n(Sa,"P",{});var hL=s(sn);Rvr=r(hL,"The model class to instantiate is selected based on the "),A6e=n(hL,"CODE",{});var W$t=s(A6e);Pvr=r(W$t,"model_type"),W$t.forEach(t),Bvr=r(hL,` property of the config object (either
passed as an argument or loaded from `),L6e=n(hL,"CODE",{});var Q$t=s(L6e);Ivr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),Nvr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y6e=n(hL,"CODE",{});var H$t=s(y6e);qvr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),jvr=r(hL,":"),hL.forEach(t),Dvr=i(Sa),x6e=n(Sa,"UL",{});var U$t=s(x6e);wM=n(U$t,"LI",{});var Kqe=s(wM);$6e=n(Kqe,"STRONG",{});var J$t=s($6e);Gvr=r(J$t,"maskformer"),J$t.forEach(t),Ovr=r(Kqe," \u2014 "),BU=n(Kqe,"A",{href:!0});var Y$t=s(BU);Vvr=r(Y$t,"MaskFormerForInstanceSegmentation"),Y$t.forEach(t),Xvr=r(Kqe," (MaskFormer model)"),Kqe.forEach(t),U$t.forEach(t),zvr=i(Sa),AM=n(Sa,"P",{});var Zqe=s(AM);Wvr=r(Zqe,"The model is set in evaluation mode by default using "),k6e=n(Zqe,"CODE",{});var K$t=s(k6e);Qvr=r(K$t,"model.eval()"),K$t.forEach(t),Hvr=r(Zqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S6e=n(Zqe,"CODE",{});var Z$t=s(S6e);Uvr=r(Z$t,"model.train()"),Z$t.forEach(t),Zqe.forEach(t),Jvr=i(Sa),T(LM.$$.fragment,Sa),Sa.forEach(t),$l.forEach(t),aWe=i(f),ic=n(f,"H2",{class:!0});var mHe=s(ic);yM=n(mHe,"A",{id:!0,class:!0,href:!0});var ekt=s(yM);R6e=n(ekt,"SPAN",{});var okt=s(R6e);T(tx.$$.fragment,okt),okt.forEach(t),ekt.forEach(t),Yvr=i(mHe),P6e=n(mHe,"SPAN",{});var rkt=s(P6e);Kvr=r(rkt,"TFAutoModel"),rkt.forEach(t),mHe.forEach(t),nWe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(ax.$$.fragment,kl),Zvr=i(kl),dc=n(kl,"P",{});var tae=s(dc);eFr=r(tae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IU=n(tae,"A",{href:!0});var tkt=s(IU);oFr=r(tkt,"from_pretrained()"),tkt.forEach(t),rFr=r(tae," class method or the "),NU=n(tae,"A",{href:!0});var akt=s(NU);tFr=r(akt,"from_config()"),akt.forEach(t),aFr=r(tae,` class
method.`),tae.forEach(t),nFr=i(kl),nx=n(kl,"P",{});var gHe=s(nx);sFr=r(gHe,"This class cannot be instantiated directly using "),B6e=n(gHe,"CODE",{});var nkt=s(B6e);lFr=r(nkt,"__init__()"),nkt.forEach(t),iFr=r(gHe," (throws an error)."),gHe.forEach(t),dFr=i(kl),Rt=n(kl,"DIV",{class:!0});var pL=s(Rt);T(sx.$$.fragment,pL),cFr=i(pL),I6e=n(pL,"P",{});var skt=s(I6e);fFr=r(skt,"Instantiates one of the base model classes of the library from a configuration."),skt.forEach(t),mFr=i(pL),cc=n(pL,"P",{});var aae=s(cc);gFr=r(aae,`Note:
Loading a model from its configuration file does `),N6e=n(aae,"STRONG",{});var lkt=s(N6e);hFr=r(lkt,"not"),lkt.forEach(t),pFr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(aae,"A",{href:!0});var ikt=s(qU);_Fr=r(ikt,"from_pretrained()"),ikt.forEach(t),uFr=r(aae," to load the model weights."),aae.forEach(t),bFr=i(pL),T(xM.$$.fragment,pL),pL.forEach(t),vFr=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(lx.$$.fragment,Sl),FFr=i(Sl),q6e=n(Sl,"P",{});var dkt=s(q6e);TFr=r(dkt,"Instantiate one of the base model classes of the library from a pretrained model."),dkt.forEach(t),MFr=i(Sl),ln=n(Sl,"P",{});var _L=s(ln);EFr=r(_L,"The model class to instantiate is selected based on the "),j6e=n(_L,"CODE",{});var ckt=s(j6e);CFr=r(ckt,"model_type"),ckt.forEach(t),wFr=r(_L,` property of the config object (either
passed as an argument or loaded from `),D6e=n(_L,"CODE",{});var fkt=s(D6e);AFr=r(fkt,"pretrained_model_name_or_path"),fkt.forEach(t),LFr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(_L,"CODE",{});var mkt=s(G6e);yFr=r(mkt,"pretrained_model_name_or_path"),mkt.forEach(t),xFr=r(_L,":"),_L.forEach(t),$Fr=i(Sl),I=n(Sl,"UL",{});var D=s(I);$M=n(D,"LI",{});var eje=s($M);O6e=n(eje,"STRONG",{});var gkt=s(O6e);kFr=r(gkt,"albert"),gkt.forEach(t),SFr=r(eje," \u2014 "),jU=n(eje,"A",{href:!0});var hkt=s(jU);RFr=r(hkt,"TFAlbertModel"),hkt.forEach(t),PFr=r(eje," (ALBERT model)"),eje.forEach(t),BFr=i(D),kM=n(D,"LI",{});var oje=s(kM);V6e=n(oje,"STRONG",{});var pkt=s(V6e);IFr=r(pkt,"bart"),pkt.forEach(t),NFr=r(oje," \u2014 "),DU=n(oje,"A",{href:!0});var _kt=s(DU);qFr=r(_kt,"TFBartModel"),_kt.forEach(t),jFr=r(oje," (BART model)"),oje.forEach(t),DFr=i(D),SM=n(D,"LI",{});var rje=s(SM);X6e=n(rje,"STRONG",{});var ukt=s(X6e);GFr=r(ukt,"bert"),ukt.forEach(t),OFr=r(rje," \u2014 "),GU=n(rje,"A",{href:!0});var bkt=s(GU);VFr=r(bkt,"TFBertModel"),bkt.forEach(t),XFr=r(rje," (BERT model)"),rje.forEach(t),zFr=i(D),RM=n(D,"LI",{});var tje=s(RM);z6e=n(tje,"STRONG",{});var vkt=s(z6e);WFr=r(vkt,"blenderbot"),vkt.forEach(t),QFr=r(tje," \u2014 "),OU=n(tje,"A",{href:!0});var Fkt=s(OU);HFr=r(Fkt,"TFBlenderbotModel"),Fkt.forEach(t),UFr=r(tje," (Blenderbot model)"),tje.forEach(t),JFr=i(D),PM=n(D,"LI",{});var aje=s(PM);W6e=n(aje,"STRONG",{});var Tkt=s(W6e);YFr=r(Tkt,"blenderbot-small"),Tkt.forEach(t),KFr=r(aje," \u2014 "),VU=n(aje,"A",{href:!0});var Mkt=s(VU);ZFr=r(Mkt,"TFBlenderbotSmallModel"),Mkt.forEach(t),e6r=r(aje," (BlenderbotSmall model)"),aje.forEach(t),o6r=i(D),BM=n(D,"LI",{});var nje=s(BM);Q6e=n(nje,"STRONG",{});var Ekt=s(Q6e);r6r=r(Ekt,"camembert"),Ekt.forEach(t),t6r=r(nje," \u2014 "),XU=n(nje,"A",{href:!0});var Ckt=s(XU);a6r=r(Ckt,"TFCamembertModel"),Ckt.forEach(t),n6r=r(nje," (CamemBERT model)"),nje.forEach(t),s6r=i(D),IM=n(D,"LI",{});var sje=s(IM);H6e=n(sje,"STRONG",{});var wkt=s(H6e);l6r=r(wkt,"clip"),wkt.forEach(t),i6r=r(sje," \u2014 "),zU=n(sje,"A",{href:!0});var Akt=s(zU);d6r=r(Akt,"TFCLIPModel"),Akt.forEach(t),c6r=r(sje," (CLIP model)"),sje.forEach(t),f6r=i(D),NM=n(D,"LI",{});var lje=s(NM);U6e=n(lje,"STRONG",{});var Lkt=s(U6e);m6r=r(Lkt,"convbert"),Lkt.forEach(t),g6r=r(lje," \u2014 "),WU=n(lje,"A",{href:!0});var ykt=s(WU);h6r=r(ykt,"TFConvBertModel"),ykt.forEach(t),p6r=r(lje," (ConvBERT model)"),lje.forEach(t),_6r=i(D),qM=n(D,"LI",{});var ije=s(qM);J6e=n(ije,"STRONG",{});var xkt=s(J6e);u6r=r(xkt,"convnext"),xkt.forEach(t),b6r=r(ije," \u2014 "),QU=n(ije,"A",{href:!0});var $kt=s(QU);v6r=r($kt,"TFConvNextModel"),$kt.forEach(t),F6r=r(ije," (ConvNeXT model)"),ije.forEach(t),T6r=i(D),jM=n(D,"LI",{});var dje=s(jM);Y6e=n(dje,"STRONG",{});var kkt=s(Y6e);M6r=r(kkt,"ctrl"),kkt.forEach(t),E6r=r(dje," \u2014 "),HU=n(dje,"A",{href:!0});var Skt=s(HU);C6r=r(Skt,"TFCTRLModel"),Skt.forEach(t),w6r=r(dje," (CTRL model)"),dje.forEach(t),A6r=i(D),DM=n(D,"LI",{});var cje=s(DM);K6e=n(cje,"STRONG",{});var Rkt=s(K6e);L6r=r(Rkt,"data2vec-vision"),Rkt.forEach(t),y6r=r(cje," \u2014 "),UU=n(cje,"A",{href:!0});var Pkt=s(UU);x6r=r(Pkt,"TFData2VecVisionModel"),Pkt.forEach(t),$6r=r(cje," (Data2VecVision model)"),cje.forEach(t),k6r=i(D),GM=n(D,"LI",{});var fje=s(GM);Z6e=n(fje,"STRONG",{});var Bkt=s(Z6e);S6r=r(Bkt,"deberta"),Bkt.forEach(t),R6r=r(fje," \u2014 "),JU=n(fje,"A",{href:!0});var Ikt=s(JU);P6r=r(Ikt,"TFDebertaModel"),Ikt.forEach(t),B6r=r(fje," (DeBERTa model)"),fje.forEach(t),I6r=i(D),OM=n(D,"LI",{});var mje=s(OM);eTe=n(mje,"STRONG",{});var Nkt=s(eTe);N6r=r(Nkt,"deberta-v2"),Nkt.forEach(t),q6r=r(mje," \u2014 "),YU=n(mje,"A",{href:!0});var qkt=s(YU);j6r=r(qkt,"TFDebertaV2Model"),qkt.forEach(t),D6r=r(mje," (DeBERTa-v2 model)"),mje.forEach(t),G6r=i(D),VM=n(D,"LI",{});var gje=s(VM);oTe=n(gje,"STRONG",{});var jkt=s(oTe);O6r=r(jkt,"deit"),jkt.forEach(t),V6r=r(gje," \u2014 "),KU=n(gje,"A",{href:!0});var Dkt=s(KU);X6r=r(Dkt,"TFDeiTModel"),Dkt.forEach(t),z6r=r(gje," (DeiT model)"),gje.forEach(t),W6r=i(D),XM=n(D,"LI",{});var hje=s(XM);rTe=n(hje,"STRONG",{});var Gkt=s(rTe);Q6r=r(Gkt,"distilbert"),Gkt.forEach(t),H6r=r(hje," \u2014 "),ZU=n(hje,"A",{href:!0});var Okt=s(ZU);U6r=r(Okt,"TFDistilBertModel"),Okt.forEach(t),J6r=r(hje," (DistilBERT model)"),hje.forEach(t),Y6r=i(D),zM=n(D,"LI",{});var pje=s(zM);tTe=n(pje,"STRONG",{});var Vkt=s(tTe);K6r=r(Vkt,"dpr"),Vkt.forEach(t),Z6r=r(pje," \u2014 "),eJ=n(pje,"A",{href:!0});var Xkt=s(eJ);eTr=r(Xkt,"TFDPRQuestionEncoder"),Xkt.forEach(t),oTr=r(pje," (DPR model)"),pje.forEach(t),rTr=i(D),WM=n(D,"LI",{});var _je=s(WM);aTe=n(_je,"STRONG",{});var zkt=s(aTe);tTr=r(zkt,"electra"),zkt.forEach(t),aTr=r(_je," \u2014 "),oJ=n(_je,"A",{href:!0});var Wkt=s(oJ);nTr=r(Wkt,"TFElectraModel"),Wkt.forEach(t),sTr=r(_je," (ELECTRA model)"),_je.forEach(t),lTr=i(D),QM=n(D,"LI",{});var uje=s(QM);nTe=n(uje,"STRONG",{});var Qkt=s(nTe);iTr=r(Qkt,"flaubert"),Qkt.forEach(t),dTr=r(uje," \u2014 "),rJ=n(uje,"A",{href:!0});var Hkt=s(rJ);cTr=r(Hkt,"TFFlaubertModel"),Hkt.forEach(t),fTr=r(uje," (FlauBERT model)"),uje.forEach(t),mTr=i(D),Zs=n(D,"LI",{});var HS=s(Zs);sTe=n(HS,"STRONG",{});var Ukt=s(sTe);gTr=r(Ukt,"funnel"),Ukt.forEach(t),hTr=r(HS," \u2014 "),tJ=n(HS,"A",{href:!0});var Jkt=s(tJ);pTr=r(Jkt,"TFFunnelModel"),Jkt.forEach(t),_Tr=r(HS," or "),aJ=n(HS,"A",{href:!0});var Ykt=s(aJ);uTr=r(Ykt,"TFFunnelBaseModel"),Ykt.forEach(t),bTr=r(HS," (Funnel Transformer model)"),HS.forEach(t),vTr=i(D),HM=n(D,"LI",{});var bje=s(HM);lTe=n(bje,"STRONG",{});var Kkt=s(lTe);FTr=r(Kkt,"gpt2"),Kkt.forEach(t),TTr=r(bje," \u2014 "),nJ=n(bje,"A",{href:!0});var Zkt=s(nJ);MTr=r(Zkt,"TFGPT2Model"),Zkt.forEach(t),ETr=r(bje," (OpenAI GPT-2 model)"),bje.forEach(t),CTr=i(D),UM=n(D,"LI",{});var vje=s(UM);iTe=n(vje,"STRONG",{});var eSt=s(iTe);wTr=r(eSt,"gptj"),eSt.forEach(t),ATr=r(vje," \u2014 "),sJ=n(vje,"A",{href:!0});var oSt=s(sJ);LTr=r(oSt,"TFGPTJModel"),oSt.forEach(t),yTr=r(vje," (GPT-J model)"),vje.forEach(t),xTr=i(D),JM=n(D,"LI",{});var Fje=s(JM);dTe=n(Fje,"STRONG",{});var rSt=s(dTe);$Tr=r(rSt,"hubert"),rSt.forEach(t),kTr=r(Fje," \u2014 "),lJ=n(Fje,"A",{href:!0});var tSt=s(lJ);STr=r(tSt,"TFHubertModel"),tSt.forEach(t),RTr=r(Fje," (Hubert model)"),Fje.forEach(t),PTr=i(D),YM=n(D,"LI",{});var Tje=s(YM);cTe=n(Tje,"STRONG",{});var aSt=s(cTe);BTr=r(aSt,"layoutlm"),aSt.forEach(t),ITr=r(Tje," \u2014 "),iJ=n(Tje,"A",{href:!0});var nSt=s(iJ);NTr=r(nSt,"TFLayoutLMModel"),nSt.forEach(t),qTr=r(Tje," (LayoutLM model)"),Tje.forEach(t),jTr=i(D),KM=n(D,"LI",{});var Mje=s(KM);fTe=n(Mje,"STRONG",{});var sSt=s(fTe);DTr=r(sSt,"led"),sSt.forEach(t),GTr=r(Mje," \u2014 "),dJ=n(Mje,"A",{href:!0});var lSt=s(dJ);OTr=r(lSt,"TFLEDModel"),lSt.forEach(t),VTr=r(Mje," (LED model)"),Mje.forEach(t),XTr=i(D),ZM=n(D,"LI",{});var Eje=s(ZM);mTe=n(Eje,"STRONG",{});var iSt=s(mTe);zTr=r(iSt,"longformer"),iSt.forEach(t),WTr=r(Eje," \u2014 "),cJ=n(Eje,"A",{href:!0});var dSt=s(cJ);QTr=r(dSt,"TFLongformerModel"),dSt.forEach(t),HTr=r(Eje," (Longformer model)"),Eje.forEach(t),UTr=i(D),e4=n(D,"LI",{});var Cje=s(e4);gTe=n(Cje,"STRONG",{});var cSt=s(gTe);JTr=r(cSt,"lxmert"),cSt.forEach(t),YTr=r(Cje," \u2014 "),fJ=n(Cje,"A",{href:!0});var fSt=s(fJ);KTr=r(fSt,"TFLxmertModel"),fSt.forEach(t),ZTr=r(Cje," (LXMERT model)"),Cje.forEach(t),eMr=i(D),o4=n(D,"LI",{});var wje=s(o4);hTe=n(wje,"STRONG",{});var mSt=s(hTe);oMr=r(mSt,"marian"),mSt.forEach(t),rMr=r(wje," \u2014 "),mJ=n(wje,"A",{href:!0});var gSt=s(mJ);tMr=r(gSt,"TFMarianModel"),gSt.forEach(t),aMr=r(wje," (Marian model)"),wje.forEach(t),nMr=i(D),r4=n(D,"LI",{});var Aje=s(r4);pTe=n(Aje,"STRONG",{});var hSt=s(pTe);sMr=r(hSt,"mbart"),hSt.forEach(t),lMr=r(Aje," \u2014 "),gJ=n(Aje,"A",{href:!0});var pSt=s(gJ);iMr=r(pSt,"TFMBartModel"),pSt.forEach(t),dMr=r(Aje," (mBART model)"),Aje.forEach(t),cMr=i(D),t4=n(D,"LI",{});var Lje=s(t4);_Te=n(Lje,"STRONG",{});var _St=s(_Te);fMr=r(_St,"mobilebert"),_St.forEach(t),mMr=r(Lje," \u2014 "),hJ=n(Lje,"A",{href:!0});var uSt=s(hJ);gMr=r(uSt,"TFMobileBertModel"),uSt.forEach(t),hMr=r(Lje," (MobileBERT model)"),Lje.forEach(t),pMr=i(D),a4=n(D,"LI",{});var yje=s(a4);uTe=n(yje,"STRONG",{});var bSt=s(uTe);_Mr=r(bSt,"mpnet"),bSt.forEach(t),uMr=r(yje," \u2014 "),pJ=n(yje,"A",{href:!0});var vSt=s(pJ);bMr=r(vSt,"TFMPNetModel"),vSt.forEach(t),vMr=r(yje," (MPNet model)"),yje.forEach(t),FMr=i(D),n4=n(D,"LI",{});var xje=s(n4);bTe=n(xje,"STRONG",{});var FSt=s(bTe);TMr=r(FSt,"mt5"),FSt.forEach(t),MMr=r(xje," \u2014 "),_J=n(xje,"A",{href:!0});var TSt=s(_J);EMr=r(TSt,"TFMT5Model"),TSt.forEach(t),CMr=r(xje," (MT5 model)"),xje.forEach(t),wMr=i(D),s4=n(D,"LI",{});var $je=s(s4);vTe=n($je,"STRONG",{});var MSt=s(vTe);AMr=r(MSt,"openai-gpt"),MSt.forEach(t),LMr=r($je," \u2014 "),uJ=n($je,"A",{href:!0});var ESt=s(uJ);yMr=r(ESt,"TFOpenAIGPTModel"),ESt.forEach(t),xMr=r($je," (OpenAI GPT model)"),$je.forEach(t),$Mr=i(D),l4=n(D,"LI",{});var kje=s(l4);FTe=n(kje,"STRONG",{});var CSt=s(FTe);kMr=r(CSt,"opt"),CSt.forEach(t),SMr=r(kje," \u2014 "),bJ=n(kje,"A",{href:!0});var wSt=s(bJ);RMr=r(wSt,"TFOPTModel"),wSt.forEach(t),PMr=r(kje," (OPT model)"),kje.forEach(t),BMr=i(D),i4=n(D,"LI",{});var Sje=s(i4);TTe=n(Sje,"STRONG",{});var ASt=s(TTe);IMr=r(ASt,"pegasus"),ASt.forEach(t),NMr=r(Sje," \u2014 "),vJ=n(Sje,"A",{href:!0});var LSt=s(vJ);qMr=r(LSt,"TFPegasusModel"),LSt.forEach(t),jMr=r(Sje," (Pegasus model)"),Sje.forEach(t),DMr=i(D),d4=n(D,"LI",{});var Rje=s(d4);MTe=n(Rje,"STRONG",{});var ySt=s(MTe);GMr=r(ySt,"regnet"),ySt.forEach(t),OMr=r(Rje," \u2014 "),FJ=n(Rje,"A",{href:!0});var xSt=s(FJ);VMr=r(xSt,"TFRegNetModel"),xSt.forEach(t),XMr=r(Rje," (RegNet model)"),Rje.forEach(t),zMr=i(D),c4=n(D,"LI",{});var Pje=s(c4);ETe=n(Pje,"STRONG",{});var $St=s(ETe);WMr=r($St,"rembert"),$St.forEach(t),QMr=r(Pje," \u2014 "),TJ=n(Pje,"A",{href:!0});var kSt=s(TJ);HMr=r(kSt,"TFRemBertModel"),kSt.forEach(t),UMr=r(Pje," (RemBERT model)"),Pje.forEach(t),JMr=i(D),f4=n(D,"LI",{});var Bje=s(f4);CTe=n(Bje,"STRONG",{});var SSt=s(CTe);YMr=r(SSt,"resnet"),SSt.forEach(t),KMr=r(Bje," \u2014 "),MJ=n(Bje,"A",{href:!0});var RSt=s(MJ);ZMr=r(RSt,"TFResNetModel"),RSt.forEach(t),e4r=r(Bje," (ResNet model)"),Bje.forEach(t),o4r=i(D),m4=n(D,"LI",{});var Ije=s(m4);wTe=n(Ije,"STRONG",{});var PSt=s(wTe);r4r=r(PSt,"roberta"),PSt.forEach(t),t4r=r(Ije," \u2014 "),EJ=n(Ije,"A",{href:!0});var BSt=s(EJ);a4r=r(BSt,"TFRobertaModel"),BSt.forEach(t),n4r=r(Ije," (RoBERTa model)"),Ije.forEach(t),s4r=i(D),g4=n(D,"LI",{});var Nje=s(g4);ATe=n(Nje,"STRONG",{});var ISt=s(ATe);l4r=r(ISt,"roformer"),ISt.forEach(t),i4r=r(Nje," \u2014 "),CJ=n(Nje,"A",{href:!0});var NSt=s(CJ);d4r=r(NSt,"TFRoFormerModel"),NSt.forEach(t),c4r=r(Nje," (RoFormer model)"),Nje.forEach(t),f4r=i(D),h4=n(D,"LI",{});var qje=s(h4);LTe=n(qje,"STRONG",{});var qSt=s(LTe);m4r=r(qSt,"segformer"),qSt.forEach(t),g4r=r(qje," \u2014 "),wJ=n(qje,"A",{href:!0});var jSt=s(wJ);h4r=r(jSt,"TFSegformerModel"),jSt.forEach(t),p4r=r(qje," (SegFormer model)"),qje.forEach(t),_4r=i(D),p4=n(D,"LI",{});var jje=s(p4);yTe=n(jje,"STRONG",{});var DSt=s(yTe);u4r=r(DSt,"speech_to_text"),DSt.forEach(t),b4r=r(jje," \u2014 "),AJ=n(jje,"A",{href:!0});var GSt=s(AJ);v4r=r(GSt,"TFSpeech2TextModel"),GSt.forEach(t),F4r=r(jje," (Speech2Text model)"),jje.forEach(t),T4r=i(D),_4=n(D,"LI",{});var Dje=s(_4);xTe=n(Dje,"STRONG",{});var OSt=s(xTe);M4r=r(OSt,"swin"),OSt.forEach(t),E4r=r(Dje," \u2014 "),LJ=n(Dje,"A",{href:!0});var VSt=s(LJ);C4r=r(VSt,"TFSwinModel"),VSt.forEach(t),w4r=r(Dje," (Swin Transformer model)"),Dje.forEach(t),A4r=i(D),u4=n(D,"LI",{});var Gje=s(u4);$Te=n(Gje,"STRONG",{});var XSt=s($Te);L4r=r(XSt,"t5"),XSt.forEach(t),y4r=r(Gje," \u2014 "),yJ=n(Gje,"A",{href:!0});var zSt=s(yJ);x4r=r(zSt,"TFT5Model"),zSt.forEach(t),$4r=r(Gje," (T5 model)"),Gje.forEach(t),k4r=i(D),b4=n(D,"LI",{});var Oje=s(b4);kTe=n(Oje,"STRONG",{});var WSt=s(kTe);S4r=r(WSt,"tapas"),WSt.forEach(t),R4r=r(Oje," \u2014 "),xJ=n(Oje,"A",{href:!0});var QSt=s(xJ);P4r=r(QSt,"TFTapasModel"),QSt.forEach(t),B4r=r(Oje," (TAPAS model)"),Oje.forEach(t),I4r=i(D),v4=n(D,"LI",{});var Vje=s(v4);STe=n(Vje,"STRONG",{});var HSt=s(STe);N4r=r(HSt,"transfo-xl"),HSt.forEach(t),q4r=r(Vje," \u2014 "),$J=n(Vje,"A",{href:!0});var USt=s($J);j4r=r(USt,"TFTransfoXLModel"),USt.forEach(t),D4r=r(Vje," (Transformer-XL model)"),Vje.forEach(t),G4r=i(D),F4=n(D,"LI",{});var Xje=s(F4);RTe=n(Xje,"STRONG",{});var JSt=s(RTe);O4r=r(JSt,"vit"),JSt.forEach(t),V4r=r(Xje," \u2014 "),kJ=n(Xje,"A",{href:!0});var YSt=s(kJ);X4r=r(YSt,"TFViTModel"),YSt.forEach(t),z4r=r(Xje," (ViT model)"),Xje.forEach(t),W4r=i(D),T4=n(D,"LI",{});var zje=s(T4);PTe=n(zje,"STRONG",{});var KSt=s(PTe);Q4r=r(KSt,"vit_mae"),KSt.forEach(t),H4r=r(zje," \u2014 "),SJ=n(zje,"A",{href:!0});var ZSt=s(SJ);U4r=r(ZSt,"TFViTMAEModel"),ZSt.forEach(t),J4r=r(zje," (ViTMAE model)"),zje.forEach(t),Y4r=i(D),M4=n(D,"LI",{});var Wje=s(M4);BTe=n(Wje,"STRONG",{});var eRt=s(BTe);K4r=r(eRt,"wav2vec2"),eRt.forEach(t),Z4r=r(Wje," \u2014 "),RJ=n(Wje,"A",{href:!0});var oRt=s(RJ);eEr=r(oRt,"TFWav2Vec2Model"),oRt.forEach(t),oEr=r(Wje," (Wav2Vec2 model)"),Wje.forEach(t),rEr=i(D),E4=n(D,"LI",{});var Qje=s(E4);ITe=n(Qje,"STRONG",{});var rRt=s(ITe);tEr=r(rRt,"xlm"),rRt.forEach(t),aEr=r(Qje," \u2014 "),PJ=n(Qje,"A",{href:!0});var tRt=s(PJ);nEr=r(tRt,"TFXLMModel"),tRt.forEach(t),sEr=r(Qje," (XLM model)"),Qje.forEach(t),lEr=i(D),C4=n(D,"LI",{});var Hje=s(C4);NTe=n(Hje,"STRONG",{});var aRt=s(NTe);iEr=r(aRt,"xlm-roberta"),aRt.forEach(t),dEr=r(Hje," \u2014 "),BJ=n(Hje,"A",{href:!0});var nRt=s(BJ);cEr=r(nRt,"TFXLMRobertaModel"),nRt.forEach(t),fEr=r(Hje," (XLM-RoBERTa model)"),Hje.forEach(t),mEr=i(D),w4=n(D,"LI",{});var Uje=s(w4);qTe=n(Uje,"STRONG",{});var sRt=s(qTe);gEr=r(sRt,"xlnet"),sRt.forEach(t),hEr=r(Uje," \u2014 "),IJ=n(Uje,"A",{href:!0});var lRt=s(IJ);pEr=r(lRt,"TFXLNetModel"),lRt.forEach(t),_Er=r(Uje," (XLNet model)"),Uje.forEach(t),D.forEach(t),uEr=i(Sl),T(A4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),sWe=i(f),fc=n(f,"H2",{class:!0});var hHe=s(fc);L4=n(hHe,"A",{id:!0,class:!0,href:!0});var iRt=s(L4);jTe=n(iRt,"SPAN",{});var dRt=s(jTe);T(ix.$$.fragment,dRt),dRt.forEach(t),iRt.forEach(t),bEr=i(hHe),DTe=n(hHe,"SPAN",{});var cRt=s(DTe);vEr=r(cRt,"TFAutoModelForPreTraining"),cRt.forEach(t),hHe.forEach(t),lWe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(dx.$$.fragment,Rl),FEr=i(Rl),mc=n(Rl,"P",{});var nae=s(mc);TEr=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NJ=n(nae,"A",{href:!0});var fRt=s(NJ);MEr=r(fRt,"from_pretrained()"),fRt.forEach(t),EEr=r(nae," class method or the "),qJ=n(nae,"A",{href:!0});var mRt=s(qJ);CEr=r(mRt,"from_config()"),mRt.forEach(t),wEr=r(nae,` class
method.`),nae.forEach(t),AEr=i(Rl),cx=n(Rl,"P",{});var pHe=s(cx);LEr=r(pHe,"This class cannot be instantiated directly using "),GTe=n(pHe,"CODE",{});var gRt=s(GTe);yEr=r(gRt,"__init__()"),gRt.forEach(t),xEr=r(pHe," (throws an error)."),pHe.forEach(t),$Er=i(Rl),Pt=n(Rl,"DIV",{class:!0});var uL=s(Pt);T(fx.$$.fragment,uL),kEr=i(uL),OTe=n(uL,"P",{});var hRt=s(OTe);SEr=r(hRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hRt.forEach(t),REr=i(uL),gc=n(uL,"P",{});var sae=s(gc);PEr=r(sae,`Note:
Loading a model from its configuration file does `),VTe=n(sae,"STRONG",{});var pRt=s(VTe);BEr=r(pRt,"not"),pRt.forEach(t),IEr=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(sae,"A",{href:!0});var _Rt=s(jJ);NEr=r(_Rt,"from_pretrained()"),_Rt.forEach(t),qEr=r(sae," to load the model weights."),sae.forEach(t),jEr=i(uL),T(y4.$$.fragment,uL),uL.forEach(t),DEr=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(mx.$$.fragment,Pl),GEr=i(Pl),XTe=n(Pl,"P",{});var uRt=s(XTe);OEr=r(uRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uRt.forEach(t),VEr=i(Pl),dn=n(Pl,"P",{});var bL=s(dn);XEr=r(bL,"The model class to instantiate is selected based on the "),zTe=n(bL,"CODE",{});var bRt=s(zTe);zEr=r(bRt,"model_type"),bRt.forEach(t),WEr=r(bL,` property of the config object (either
passed as an argument or loaded from `),WTe=n(bL,"CODE",{});var vRt=s(WTe);QEr=r(vRt,"pretrained_model_name_or_path"),vRt.forEach(t),HEr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(bL,"CODE",{});var FRt=s(QTe);UEr=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),JEr=r(bL,":"),bL.forEach(t),YEr=i(Pl),se=n(Pl,"UL",{});var le=s(se);x4=n(le,"LI",{});var Jje=s(x4);HTe=n(Jje,"STRONG",{});var TRt=s(HTe);KEr=r(TRt,"albert"),TRt.forEach(t),ZEr=r(Jje," \u2014 "),DJ=n(Jje,"A",{href:!0});var MRt=s(DJ);eCr=r(MRt,"TFAlbertForPreTraining"),MRt.forEach(t),oCr=r(Jje," (ALBERT model)"),Jje.forEach(t),rCr=i(le),$4=n(le,"LI",{});var Yje=s($4);UTe=n(Yje,"STRONG",{});var ERt=s(UTe);tCr=r(ERt,"bart"),ERt.forEach(t),aCr=r(Yje," \u2014 "),GJ=n(Yje,"A",{href:!0});var CRt=s(GJ);nCr=r(CRt,"TFBartForConditionalGeneration"),CRt.forEach(t),sCr=r(Yje," (BART model)"),Yje.forEach(t),lCr=i(le),k4=n(le,"LI",{});var Kje=s(k4);JTe=n(Kje,"STRONG",{});var wRt=s(JTe);iCr=r(wRt,"bert"),wRt.forEach(t),dCr=r(Kje," \u2014 "),OJ=n(Kje,"A",{href:!0});var ARt=s(OJ);cCr=r(ARt,"TFBertForPreTraining"),ARt.forEach(t),fCr=r(Kje," (BERT model)"),Kje.forEach(t),mCr=i(le),S4=n(le,"LI",{});var Zje=s(S4);YTe=n(Zje,"STRONG",{});var LRt=s(YTe);gCr=r(LRt,"camembert"),LRt.forEach(t),hCr=r(Zje," \u2014 "),VJ=n(Zje,"A",{href:!0});var yRt=s(VJ);pCr=r(yRt,"TFCamembertForMaskedLM"),yRt.forEach(t),_Cr=r(Zje," (CamemBERT model)"),Zje.forEach(t),uCr=i(le),R4=n(le,"LI",{});var eDe=s(R4);KTe=n(eDe,"STRONG",{});var xRt=s(KTe);bCr=r(xRt,"ctrl"),xRt.forEach(t),vCr=r(eDe," \u2014 "),XJ=n(eDe,"A",{href:!0});var $Rt=s(XJ);FCr=r($Rt,"TFCTRLLMHeadModel"),$Rt.forEach(t),TCr=r(eDe," (CTRL model)"),eDe.forEach(t),MCr=i(le),P4=n(le,"LI",{});var oDe=s(P4);ZTe=n(oDe,"STRONG",{});var kRt=s(ZTe);ECr=r(kRt,"distilbert"),kRt.forEach(t),CCr=r(oDe," \u2014 "),zJ=n(oDe,"A",{href:!0});var SRt=s(zJ);wCr=r(SRt,"TFDistilBertForMaskedLM"),SRt.forEach(t),ACr=r(oDe," (DistilBERT model)"),oDe.forEach(t),LCr=i(le),B4=n(le,"LI",{});var rDe=s(B4);eMe=n(rDe,"STRONG",{});var RRt=s(eMe);yCr=r(RRt,"electra"),RRt.forEach(t),xCr=r(rDe," \u2014 "),WJ=n(rDe,"A",{href:!0});var PRt=s(WJ);$Cr=r(PRt,"TFElectraForPreTraining"),PRt.forEach(t),kCr=r(rDe," (ELECTRA model)"),rDe.forEach(t),SCr=i(le),I4=n(le,"LI",{});var tDe=s(I4);oMe=n(tDe,"STRONG",{});var BRt=s(oMe);RCr=r(BRt,"flaubert"),BRt.forEach(t),PCr=r(tDe," \u2014 "),QJ=n(tDe,"A",{href:!0});var IRt=s(QJ);BCr=r(IRt,"TFFlaubertWithLMHeadModel"),IRt.forEach(t),ICr=r(tDe," (FlauBERT model)"),tDe.forEach(t),NCr=i(le),N4=n(le,"LI",{});var aDe=s(N4);rMe=n(aDe,"STRONG",{});var NRt=s(rMe);qCr=r(NRt,"funnel"),NRt.forEach(t),jCr=r(aDe," \u2014 "),HJ=n(aDe,"A",{href:!0});var qRt=s(HJ);DCr=r(qRt,"TFFunnelForPreTraining"),qRt.forEach(t),GCr=r(aDe," (Funnel Transformer model)"),aDe.forEach(t),OCr=i(le),q4=n(le,"LI",{});var nDe=s(q4);tMe=n(nDe,"STRONG",{});var jRt=s(tMe);VCr=r(jRt,"gpt2"),jRt.forEach(t),XCr=r(nDe," \u2014 "),UJ=n(nDe,"A",{href:!0});var DRt=s(UJ);zCr=r(DRt,"TFGPT2LMHeadModel"),DRt.forEach(t),WCr=r(nDe," (OpenAI GPT-2 model)"),nDe.forEach(t),QCr=i(le),j4=n(le,"LI",{});var sDe=s(j4);aMe=n(sDe,"STRONG",{});var GRt=s(aMe);HCr=r(GRt,"layoutlm"),GRt.forEach(t),UCr=r(sDe," \u2014 "),JJ=n(sDe,"A",{href:!0});var ORt=s(JJ);JCr=r(ORt,"TFLayoutLMForMaskedLM"),ORt.forEach(t),YCr=r(sDe," (LayoutLM model)"),sDe.forEach(t),KCr=i(le),D4=n(le,"LI",{});var lDe=s(D4);nMe=n(lDe,"STRONG",{});var VRt=s(nMe);ZCr=r(VRt,"lxmert"),VRt.forEach(t),e5r=r(lDe," \u2014 "),YJ=n(lDe,"A",{href:!0});var XRt=s(YJ);o5r=r(XRt,"TFLxmertForPreTraining"),XRt.forEach(t),r5r=r(lDe," (LXMERT model)"),lDe.forEach(t),t5r=i(le),G4=n(le,"LI",{});var iDe=s(G4);sMe=n(iDe,"STRONG",{});var zRt=s(sMe);a5r=r(zRt,"mobilebert"),zRt.forEach(t),n5r=r(iDe," \u2014 "),KJ=n(iDe,"A",{href:!0});var WRt=s(KJ);s5r=r(WRt,"TFMobileBertForPreTraining"),WRt.forEach(t),l5r=r(iDe," (MobileBERT model)"),iDe.forEach(t),i5r=i(le),O4=n(le,"LI",{});var dDe=s(O4);lMe=n(dDe,"STRONG",{});var QRt=s(lMe);d5r=r(QRt,"mpnet"),QRt.forEach(t),c5r=r(dDe," \u2014 "),ZJ=n(dDe,"A",{href:!0});var HRt=s(ZJ);f5r=r(HRt,"TFMPNetForMaskedLM"),HRt.forEach(t),m5r=r(dDe," (MPNet model)"),dDe.forEach(t),g5r=i(le),V4=n(le,"LI",{});var cDe=s(V4);iMe=n(cDe,"STRONG",{});var URt=s(iMe);h5r=r(URt,"openai-gpt"),URt.forEach(t),p5r=r(cDe," \u2014 "),eY=n(cDe,"A",{href:!0});var JRt=s(eY);_5r=r(JRt,"TFOpenAIGPTLMHeadModel"),JRt.forEach(t),u5r=r(cDe," (OpenAI GPT model)"),cDe.forEach(t),b5r=i(le),X4=n(le,"LI",{});var fDe=s(X4);dMe=n(fDe,"STRONG",{});var YRt=s(dMe);v5r=r(YRt,"roberta"),YRt.forEach(t),F5r=r(fDe," \u2014 "),oY=n(fDe,"A",{href:!0});var KRt=s(oY);T5r=r(KRt,"TFRobertaForMaskedLM"),KRt.forEach(t),M5r=r(fDe," (RoBERTa model)"),fDe.forEach(t),E5r=i(le),z4=n(le,"LI",{});var mDe=s(z4);cMe=n(mDe,"STRONG",{});var ZRt=s(cMe);C5r=r(ZRt,"t5"),ZRt.forEach(t),w5r=r(mDe," \u2014 "),rY=n(mDe,"A",{href:!0});var ePt=s(rY);A5r=r(ePt,"TFT5ForConditionalGeneration"),ePt.forEach(t),L5r=r(mDe," (T5 model)"),mDe.forEach(t),y5r=i(le),W4=n(le,"LI",{});var gDe=s(W4);fMe=n(gDe,"STRONG",{});var oPt=s(fMe);x5r=r(oPt,"tapas"),oPt.forEach(t),$5r=r(gDe," \u2014 "),tY=n(gDe,"A",{href:!0});var rPt=s(tY);k5r=r(rPt,"TFTapasForMaskedLM"),rPt.forEach(t),S5r=r(gDe," (TAPAS model)"),gDe.forEach(t),R5r=i(le),Q4=n(le,"LI",{});var hDe=s(Q4);mMe=n(hDe,"STRONG",{});var tPt=s(mMe);P5r=r(tPt,"transfo-xl"),tPt.forEach(t),B5r=r(hDe," \u2014 "),aY=n(hDe,"A",{href:!0});var aPt=s(aY);I5r=r(aPt,"TFTransfoXLLMHeadModel"),aPt.forEach(t),N5r=r(hDe," (Transformer-XL model)"),hDe.forEach(t),q5r=i(le),H4=n(le,"LI",{});var pDe=s(H4);gMe=n(pDe,"STRONG",{});var nPt=s(gMe);j5r=r(nPt,"vit_mae"),nPt.forEach(t),D5r=r(pDe," \u2014 "),nY=n(pDe,"A",{href:!0});var sPt=s(nY);G5r=r(sPt,"TFViTMAEForPreTraining"),sPt.forEach(t),O5r=r(pDe," (ViTMAE model)"),pDe.forEach(t),V5r=i(le),U4=n(le,"LI",{});var _De=s(U4);hMe=n(_De,"STRONG",{});var lPt=s(hMe);X5r=r(lPt,"xlm"),lPt.forEach(t),z5r=r(_De," \u2014 "),sY=n(_De,"A",{href:!0});var iPt=s(sY);W5r=r(iPt,"TFXLMWithLMHeadModel"),iPt.forEach(t),Q5r=r(_De," (XLM model)"),_De.forEach(t),H5r=i(le),J4=n(le,"LI",{});var uDe=s(J4);pMe=n(uDe,"STRONG",{});var dPt=s(pMe);U5r=r(dPt,"xlm-roberta"),dPt.forEach(t),J5r=r(uDe," \u2014 "),lY=n(uDe,"A",{href:!0});var cPt=s(lY);Y5r=r(cPt,"TFXLMRobertaForMaskedLM"),cPt.forEach(t),K5r=r(uDe," (XLM-RoBERTa model)"),uDe.forEach(t),Z5r=i(le),Y4=n(le,"LI",{});var bDe=s(Y4);_Me=n(bDe,"STRONG",{});var fPt=s(_Me);e3r=r(fPt,"xlnet"),fPt.forEach(t),o3r=r(bDe," \u2014 "),iY=n(bDe,"A",{href:!0});var mPt=s(iY);r3r=r(mPt,"TFXLNetLMHeadModel"),mPt.forEach(t),t3r=r(bDe," (XLNet model)"),bDe.forEach(t),le.forEach(t),a3r=i(Pl),T(K4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),iWe=i(f),hc=n(f,"H2",{class:!0});var _He=s(hc);Z4=n(_He,"A",{id:!0,class:!0,href:!0});var gPt=s(Z4);uMe=n(gPt,"SPAN",{});var hPt=s(uMe);T(gx.$$.fragment,hPt),hPt.forEach(t),gPt.forEach(t),n3r=i(_He),bMe=n(_He,"SPAN",{});var pPt=s(bMe);s3r=r(pPt,"TFAutoModelForCausalLM"),pPt.forEach(t),_He.forEach(t),dWe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(hx.$$.fragment,Bl),l3r=i(Bl),pc=n(Bl,"P",{});var lae=s(pc);i3r=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=n(lae,"A",{href:!0});var _Pt=s(dY);d3r=r(_Pt,"from_pretrained()"),_Pt.forEach(t),c3r=r(lae," class method or the "),cY=n(lae,"A",{href:!0});var uPt=s(cY);f3r=r(uPt,"from_config()"),uPt.forEach(t),m3r=r(lae,` class
method.`),lae.forEach(t),g3r=i(Bl),px=n(Bl,"P",{});var uHe=s(px);h3r=r(uHe,"This class cannot be instantiated directly using "),vMe=n(uHe,"CODE",{});var bPt=s(vMe);p3r=r(bPt,"__init__()"),bPt.forEach(t),_3r=r(uHe," (throws an error)."),uHe.forEach(t),u3r=i(Bl),Bt=n(Bl,"DIV",{class:!0});var vL=s(Bt);T(_x.$$.fragment,vL),b3r=i(vL),FMe=n(vL,"P",{});var vPt=s(FMe);v3r=r(vPt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vPt.forEach(t),F3r=i(vL),_c=n(vL,"P",{});var iae=s(_c);T3r=r(iae,`Note:
Loading a model from its configuration file does `),TMe=n(iae,"STRONG",{});var FPt=s(TMe);M3r=r(FPt,"not"),FPt.forEach(t),E3r=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(iae,"A",{href:!0});var TPt=s(fY);C3r=r(TPt,"from_pretrained()"),TPt.forEach(t),w3r=r(iae," to load the model weights."),iae.forEach(t),A3r=i(vL),T(eE.$$.fragment,vL),vL.forEach(t),L3r=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(ux.$$.fragment,Il),y3r=i(Il),MMe=n(Il,"P",{});var MPt=s(MMe);x3r=r(MPt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),MPt.forEach(t),$3r=i(Il),cn=n(Il,"P",{});var FL=s(cn);k3r=r(FL,"The model class to instantiate is selected based on the "),EMe=n(FL,"CODE",{});var EPt=s(EMe);S3r=r(EPt,"model_type"),EPt.forEach(t),R3r=r(FL,` property of the config object (either
passed as an argument or loaded from `),CMe=n(FL,"CODE",{});var CPt=s(CMe);P3r=r(CPt,"pretrained_model_name_or_path"),CPt.forEach(t),B3r=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(FL,"CODE",{});var wPt=s(wMe);I3r=r(wPt,"pretrained_model_name_or_path"),wPt.forEach(t),N3r=r(FL,":"),FL.forEach(t),q3r=i(Il),Me=n(Il,"UL",{});var Ce=s(Me);oE=n(Ce,"LI",{});var vDe=s(oE);AMe=n(vDe,"STRONG",{});var APt=s(AMe);j3r=r(APt,"bert"),APt.forEach(t),D3r=r(vDe," \u2014 "),mY=n(vDe,"A",{href:!0});var LPt=s(mY);G3r=r(LPt,"TFBertLMHeadModel"),LPt.forEach(t),O3r=r(vDe," (BERT model)"),vDe.forEach(t),V3r=i(Ce),rE=n(Ce,"LI",{});var FDe=s(rE);LMe=n(FDe,"STRONG",{});var yPt=s(LMe);X3r=r(yPt,"camembert"),yPt.forEach(t),z3r=r(FDe," \u2014 "),gY=n(FDe,"A",{href:!0});var xPt=s(gY);W3r=r(xPt,"TFCamembertForCausalLM"),xPt.forEach(t),Q3r=r(FDe," (CamemBERT model)"),FDe.forEach(t),H3r=i(Ce),tE=n(Ce,"LI",{});var TDe=s(tE);yMe=n(TDe,"STRONG",{});var $Pt=s(yMe);U3r=r($Pt,"ctrl"),$Pt.forEach(t),J3r=r(TDe," \u2014 "),hY=n(TDe,"A",{href:!0});var kPt=s(hY);Y3r=r(kPt,"TFCTRLLMHeadModel"),kPt.forEach(t),K3r=r(TDe," (CTRL model)"),TDe.forEach(t),Z3r=i(Ce),aE=n(Ce,"LI",{});var MDe=s(aE);xMe=n(MDe,"STRONG",{});var SPt=s(xMe);e0r=r(SPt,"gpt2"),SPt.forEach(t),o0r=r(MDe," \u2014 "),pY=n(MDe,"A",{href:!0});var RPt=s(pY);r0r=r(RPt,"TFGPT2LMHeadModel"),RPt.forEach(t),t0r=r(MDe," (OpenAI GPT-2 model)"),MDe.forEach(t),a0r=i(Ce),nE=n(Ce,"LI",{});var EDe=s(nE);$Me=n(EDe,"STRONG",{});var PPt=s($Me);n0r=r(PPt,"gptj"),PPt.forEach(t),s0r=r(EDe," \u2014 "),_Y=n(EDe,"A",{href:!0});var BPt=s(_Y);l0r=r(BPt,"TFGPTJForCausalLM"),BPt.forEach(t),i0r=r(EDe," (GPT-J model)"),EDe.forEach(t),d0r=i(Ce),sE=n(Ce,"LI",{});var CDe=s(sE);kMe=n(CDe,"STRONG",{});var IPt=s(kMe);c0r=r(IPt,"openai-gpt"),IPt.forEach(t),f0r=r(CDe," \u2014 "),uY=n(CDe,"A",{href:!0});var NPt=s(uY);m0r=r(NPt,"TFOpenAIGPTLMHeadModel"),NPt.forEach(t),g0r=r(CDe," (OpenAI GPT model)"),CDe.forEach(t),h0r=i(Ce),lE=n(Ce,"LI",{});var wDe=s(lE);SMe=n(wDe,"STRONG",{});var qPt=s(SMe);p0r=r(qPt,"opt"),qPt.forEach(t),_0r=r(wDe," \u2014 "),bY=n(wDe,"A",{href:!0});var jPt=s(bY);u0r=r(jPt,"TFOPTForCausalLM"),jPt.forEach(t),b0r=r(wDe," (OPT model)"),wDe.forEach(t),v0r=i(Ce),iE=n(Ce,"LI",{});var ADe=s(iE);RMe=n(ADe,"STRONG",{});var DPt=s(RMe);F0r=r(DPt,"rembert"),DPt.forEach(t),T0r=r(ADe," \u2014 "),vY=n(ADe,"A",{href:!0});var GPt=s(vY);M0r=r(GPt,"TFRemBertForCausalLM"),GPt.forEach(t),E0r=r(ADe," (RemBERT model)"),ADe.forEach(t),C0r=i(Ce),dE=n(Ce,"LI",{});var LDe=s(dE);PMe=n(LDe,"STRONG",{});var OPt=s(PMe);w0r=r(OPt,"roberta"),OPt.forEach(t),A0r=r(LDe," \u2014 "),FY=n(LDe,"A",{href:!0});var VPt=s(FY);L0r=r(VPt,"TFRobertaForCausalLM"),VPt.forEach(t),y0r=r(LDe," (RoBERTa model)"),LDe.forEach(t),x0r=i(Ce),cE=n(Ce,"LI",{});var yDe=s(cE);BMe=n(yDe,"STRONG",{});var XPt=s(BMe);$0r=r(XPt,"roformer"),XPt.forEach(t),k0r=r(yDe," \u2014 "),TY=n(yDe,"A",{href:!0});var zPt=s(TY);S0r=r(zPt,"TFRoFormerForCausalLM"),zPt.forEach(t),R0r=r(yDe," (RoFormer model)"),yDe.forEach(t),P0r=i(Ce),fE=n(Ce,"LI",{});var xDe=s(fE);IMe=n(xDe,"STRONG",{});var WPt=s(IMe);B0r=r(WPt,"transfo-xl"),WPt.forEach(t),I0r=r(xDe," \u2014 "),MY=n(xDe,"A",{href:!0});var QPt=s(MY);N0r=r(QPt,"TFTransfoXLLMHeadModel"),QPt.forEach(t),q0r=r(xDe," (Transformer-XL model)"),xDe.forEach(t),j0r=i(Ce),mE=n(Ce,"LI",{});var $De=s(mE);NMe=n($De,"STRONG",{});var HPt=s(NMe);D0r=r(HPt,"xlm"),HPt.forEach(t),G0r=r($De," \u2014 "),EY=n($De,"A",{href:!0});var UPt=s(EY);O0r=r(UPt,"TFXLMWithLMHeadModel"),UPt.forEach(t),V0r=r($De," (XLM model)"),$De.forEach(t),X0r=i(Ce),gE=n(Ce,"LI",{});var kDe=s(gE);qMe=n(kDe,"STRONG",{});var JPt=s(qMe);z0r=r(JPt,"xlnet"),JPt.forEach(t),W0r=r(kDe," \u2014 "),CY=n(kDe,"A",{href:!0});var YPt=s(CY);Q0r=r(YPt,"TFXLNetLMHeadModel"),YPt.forEach(t),H0r=r(kDe," (XLNet model)"),kDe.forEach(t),Ce.forEach(t),U0r=i(Il),T(hE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),cWe=i(f),uc=n(f,"H2",{class:!0});var bHe=s(uc);pE=n(bHe,"A",{id:!0,class:!0,href:!0});var KPt=s(pE);jMe=n(KPt,"SPAN",{});var ZPt=s(jMe);T(bx.$$.fragment,ZPt),ZPt.forEach(t),KPt.forEach(t),J0r=i(bHe),DMe=n(bHe,"SPAN",{});var eBt=s(DMe);Y0r=r(eBt,"TFAutoModelForImageClassification"),eBt.forEach(t),bHe.forEach(t),fWe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(vx.$$.fragment,Nl),K0r=i(Nl),bc=n(Nl,"P",{});var dae=s(bc);Z0r=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wY=n(dae,"A",{href:!0});var oBt=s(wY);ewr=r(oBt,"from_pretrained()"),oBt.forEach(t),owr=r(dae," class method or the "),AY=n(dae,"A",{href:!0});var rBt=s(AY);rwr=r(rBt,"from_config()"),rBt.forEach(t),twr=r(dae,` class
method.`),dae.forEach(t),awr=i(Nl),Fx=n(Nl,"P",{});var vHe=s(Fx);nwr=r(vHe,"This class cannot be instantiated directly using "),GMe=n(vHe,"CODE",{});var tBt=s(GMe);swr=r(tBt,"__init__()"),tBt.forEach(t),lwr=r(vHe," (throws an error)."),vHe.forEach(t),iwr=i(Nl),It=n(Nl,"DIV",{class:!0});var TL=s(It);T(Tx.$$.fragment,TL),dwr=i(TL),OMe=n(TL,"P",{});var aBt=s(OMe);cwr=r(aBt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aBt.forEach(t),fwr=i(TL),vc=n(TL,"P",{});var cae=s(vc);mwr=r(cae,`Note:
Loading a model from its configuration file does `),VMe=n(cae,"STRONG",{});var nBt=s(VMe);gwr=r(nBt,"not"),nBt.forEach(t),hwr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(cae,"A",{href:!0});var sBt=s(LY);pwr=r(sBt,"from_pretrained()"),sBt.forEach(t),_wr=r(cae," to load the model weights."),cae.forEach(t),uwr=i(TL),T(_E.$$.fragment,TL),TL.forEach(t),bwr=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(Mx.$$.fragment,ql),vwr=i(ql),XMe=n(ql,"P",{});var lBt=s(XMe);Fwr=r(lBt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lBt.forEach(t),Twr=i(ql),fn=n(ql,"P",{});var ML=s(fn);Mwr=r(ML,"The model class to instantiate is selected based on the "),zMe=n(ML,"CODE",{});var iBt=s(zMe);Ewr=r(iBt,"model_type"),iBt.forEach(t),Cwr=r(ML,` property of the config object (either
passed as an argument or loaded from `),WMe=n(ML,"CODE",{});var dBt=s(WMe);wwr=r(dBt,"pretrained_model_name_or_path"),dBt.forEach(t),Awr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(ML,"CODE",{});var cBt=s(QMe);Lwr=r(cBt,"pretrained_model_name_or_path"),cBt.forEach(t),ywr=r(ML,":"),ML.forEach(t),xwr=i(ql),Ve=n(ql,"UL",{});var Mo=s(Ve);uE=n(Mo,"LI",{});var SDe=s(uE);HMe=n(SDe,"STRONG",{});var fBt=s(HMe);$wr=r(fBt,"convnext"),fBt.forEach(t),kwr=r(SDe," \u2014 "),yY=n(SDe,"A",{href:!0});var mBt=s(yY);Swr=r(mBt,"TFConvNextForImageClassification"),mBt.forEach(t),Rwr=r(SDe," (ConvNeXT model)"),SDe.forEach(t),Pwr=i(Mo),bE=n(Mo,"LI",{});var RDe=s(bE);UMe=n(RDe,"STRONG",{});var gBt=s(UMe);Bwr=r(gBt,"data2vec-vision"),gBt.forEach(t),Iwr=r(RDe," \u2014 "),xY=n(RDe,"A",{href:!0});var hBt=s(xY);Nwr=r(hBt,"TFData2VecVisionForImageClassification"),hBt.forEach(t),qwr=r(RDe," (Data2VecVision model)"),RDe.forEach(t),jwr=i(Mo),el=n(Mo,"LI",{});var US=s(el);JMe=n(US,"STRONG",{});var pBt=s(JMe);Dwr=r(pBt,"deit"),pBt.forEach(t),Gwr=r(US," \u2014 "),$Y=n(US,"A",{href:!0});var _Bt=s($Y);Owr=r(_Bt,"TFDeiTForImageClassification"),_Bt.forEach(t),Vwr=r(US," or "),kY=n(US,"A",{href:!0});var uBt=s(kY);Xwr=r(uBt,"TFDeiTForImageClassificationWithTeacher"),uBt.forEach(t),zwr=r(US," (DeiT model)"),US.forEach(t),Wwr=i(Mo),vE=n(Mo,"LI",{});var PDe=s(vE);YMe=n(PDe,"STRONG",{});var bBt=s(YMe);Qwr=r(bBt,"regnet"),bBt.forEach(t),Hwr=r(PDe," \u2014 "),SY=n(PDe,"A",{href:!0});var vBt=s(SY);Uwr=r(vBt,"TFRegNetForImageClassification"),vBt.forEach(t),Jwr=r(PDe," (RegNet model)"),PDe.forEach(t),Ywr=i(Mo),FE=n(Mo,"LI",{});var BDe=s(FE);KMe=n(BDe,"STRONG",{});var FBt=s(KMe);Kwr=r(FBt,"resnet"),FBt.forEach(t),Zwr=r(BDe," \u2014 "),RY=n(BDe,"A",{href:!0});var TBt=s(RY);eAr=r(TBt,"TFResNetForImageClassification"),TBt.forEach(t),oAr=r(BDe," (ResNet model)"),BDe.forEach(t),rAr=i(Mo),TE=n(Mo,"LI",{});var IDe=s(TE);ZMe=n(IDe,"STRONG",{});var MBt=s(ZMe);tAr=r(MBt,"segformer"),MBt.forEach(t),aAr=r(IDe," \u2014 "),PY=n(IDe,"A",{href:!0});var EBt=s(PY);nAr=r(EBt,"TFSegformerForImageClassification"),EBt.forEach(t),sAr=r(IDe," (SegFormer model)"),IDe.forEach(t),lAr=i(Mo),ME=n(Mo,"LI",{});var NDe=s(ME);e4e=n(NDe,"STRONG",{});var CBt=s(e4e);iAr=r(CBt,"swin"),CBt.forEach(t),dAr=r(NDe," \u2014 "),BY=n(NDe,"A",{href:!0});var wBt=s(BY);cAr=r(wBt,"TFSwinForImageClassification"),wBt.forEach(t),fAr=r(NDe," (Swin Transformer model)"),NDe.forEach(t),mAr=i(Mo),EE=n(Mo,"LI",{});var qDe=s(EE);o4e=n(qDe,"STRONG",{});var ABt=s(o4e);gAr=r(ABt,"vit"),ABt.forEach(t),hAr=r(qDe," \u2014 "),IY=n(qDe,"A",{href:!0});var LBt=s(IY);pAr=r(LBt,"TFViTForImageClassification"),LBt.forEach(t),_Ar=r(qDe," (ViT model)"),qDe.forEach(t),Mo.forEach(t),uAr=i(ql),T(CE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),mWe=i(f),Fc=n(f,"H2",{class:!0});var FHe=s(Fc);wE=n(FHe,"A",{id:!0,class:!0,href:!0});var yBt=s(wE);r4e=n(yBt,"SPAN",{});var xBt=s(r4e);T(Ex.$$.fragment,xBt),xBt.forEach(t),yBt.forEach(t),bAr=i(FHe),t4e=n(FHe,"SPAN",{});var $Bt=s(t4e);vAr=r($Bt,"TFAutoModelForMaskedLM"),$Bt.forEach(t),FHe.forEach(t),gWe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(Cx.$$.fragment,jl),FAr=i(jl),Tc=n(jl,"P",{});var fae=s(Tc);TAr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NY=n(fae,"A",{href:!0});var kBt=s(NY);MAr=r(kBt,"from_pretrained()"),kBt.forEach(t),EAr=r(fae," class method or the "),qY=n(fae,"A",{href:!0});var SBt=s(qY);CAr=r(SBt,"from_config()"),SBt.forEach(t),wAr=r(fae,` class
method.`),fae.forEach(t),AAr=i(jl),wx=n(jl,"P",{});var THe=s(wx);LAr=r(THe,"This class cannot be instantiated directly using "),a4e=n(THe,"CODE",{});var RBt=s(a4e);yAr=r(RBt,"__init__()"),RBt.forEach(t),xAr=r(THe," (throws an error)."),THe.forEach(t),$Ar=i(jl),Nt=n(jl,"DIV",{class:!0});var EL=s(Nt);T(Ax.$$.fragment,EL),kAr=i(EL),n4e=n(EL,"P",{});var PBt=s(n4e);SAr=r(PBt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PBt.forEach(t),RAr=i(EL),Mc=n(EL,"P",{});var mae=s(Mc);PAr=r(mae,`Note:
Loading a model from its configuration file does `),s4e=n(mae,"STRONG",{});var BBt=s(s4e);BAr=r(BBt,"not"),BBt.forEach(t),IAr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(mae,"A",{href:!0});var IBt=s(jY);NAr=r(IBt,"from_pretrained()"),IBt.forEach(t),qAr=r(mae," to load the model weights."),mae.forEach(t),jAr=i(EL),T(AE.$$.fragment,EL),EL.forEach(t),DAr=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(Lx.$$.fragment,Dl),GAr=i(Dl),l4e=n(Dl,"P",{});var NBt=s(l4e);OAr=r(NBt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NBt.forEach(t),VAr=i(Dl),mn=n(Dl,"P",{});var CL=s(mn);XAr=r(CL,"The model class to instantiate is selected based on the "),i4e=n(CL,"CODE",{});var qBt=s(i4e);zAr=r(qBt,"model_type"),qBt.forEach(t),WAr=r(CL,` property of the config object (either
passed as an argument or loaded from `),d4e=n(CL,"CODE",{});var jBt=s(d4e);QAr=r(jBt,"pretrained_model_name_or_path"),jBt.forEach(t),HAr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(CL,"CODE",{});var DBt=s(c4e);UAr=r(DBt,"pretrained_model_name_or_path"),DBt.forEach(t),JAr=r(CL,":"),CL.forEach(t),YAr=i(Dl),ie=n(Dl,"UL",{});var ge=s(ie);LE=n(ge,"LI",{});var jDe=s(LE);f4e=n(jDe,"STRONG",{});var GBt=s(f4e);KAr=r(GBt,"albert"),GBt.forEach(t),ZAr=r(jDe," \u2014 "),DY=n(jDe,"A",{href:!0});var OBt=s(DY);eLr=r(OBt,"TFAlbertForMaskedLM"),OBt.forEach(t),oLr=r(jDe," (ALBERT model)"),jDe.forEach(t),rLr=i(ge),yE=n(ge,"LI",{});var DDe=s(yE);m4e=n(DDe,"STRONG",{});var VBt=s(m4e);tLr=r(VBt,"bert"),VBt.forEach(t),aLr=r(DDe," \u2014 "),GY=n(DDe,"A",{href:!0});var XBt=s(GY);nLr=r(XBt,"TFBertForMaskedLM"),XBt.forEach(t),sLr=r(DDe," (BERT model)"),DDe.forEach(t),lLr=i(ge),xE=n(ge,"LI",{});var GDe=s(xE);g4e=n(GDe,"STRONG",{});var zBt=s(g4e);iLr=r(zBt,"camembert"),zBt.forEach(t),dLr=r(GDe," \u2014 "),OY=n(GDe,"A",{href:!0});var WBt=s(OY);cLr=r(WBt,"TFCamembertForMaskedLM"),WBt.forEach(t),fLr=r(GDe," (CamemBERT model)"),GDe.forEach(t),mLr=i(ge),$E=n(ge,"LI",{});var ODe=s($E);h4e=n(ODe,"STRONG",{});var QBt=s(h4e);gLr=r(QBt,"convbert"),QBt.forEach(t),hLr=r(ODe," \u2014 "),VY=n(ODe,"A",{href:!0});var HBt=s(VY);pLr=r(HBt,"TFConvBertForMaskedLM"),HBt.forEach(t),_Lr=r(ODe," (ConvBERT model)"),ODe.forEach(t),uLr=i(ge),kE=n(ge,"LI",{});var VDe=s(kE);p4e=n(VDe,"STRONG",{});var UBt=s(p4e);bLr=r(UBt,"deberta"),UBt.forEach(t),vLr=r(VDe," \u2014 "),XY=n(VDe,"A",{href:!0});var JBt=s(XY);FLr=r(JBt,"TFDebertaForMaskedLM"),JBt.forEach(t),TLr=r(VDe," (DeBERTa model)"),VDe.forEach(t),MLr=i(ge),SE=n(ge,"LI",{});var XDe=s(SE);_4e=n(XDe,"STRONG",{});var YBt=s(_4e);ELr=r(YBt,"deberta-v2"),YBt.forEach(t),CLr=r(XDe," \u2014 "),zY=n(XDe,"A",{href:!0});var KBt=s(zY);wLr=r(KBt,"TFDebertaV2ForMaskedLM"),KBt.forEach(t),ALr=r(XDe," (DeBERTa-v2 model)"),XDe.forEach(t),LLr=i(ge),RE=n(ge,"LI",{});var zDe=s(RE);u4e=n(zDe,"STRONG",{});var ZBt=s(u4e);yLr=r(ZBt,"distilbert"),ZBt.forEach(t),xLr=r(zDe," \u2014 "),WY=n(zDe,"A",{href:!0});var eIt=s(WY);$Lr=r(eIt,"TFDistilBertForMaskedLM"),eIt.forEach(t),kLr=r(zDe," (DistilBERT model)"),zDe.forEach(t),SLr=i(ge),PE=n(ge,"LI",{});var WDe=s(PE);b4e=n(WDe,"STRONG",{});var oIt=s(b4e);RLr=r(oIt,"electra"),oIt.forEach(t),PLr=r(WDe," \u2014 "),QY=n(WDe,"A",{href:!0});var rIt=s(QY);BLr=r(rIt,"TFElectraForMaskedLM"),rIt.forEach(t),ILr=r(WDe," (ELECTRA model)"),WDe.forEach(t),NLr=i(ge),BE=n(ge,"LI",{});var QDe=s(BE);v4e=n(QDe,"STRONG",{});var tIt=s(v4e);qLr=r(tIt,"flaubert"),tIt.forEach(t),jLr=r(QDe," \u2014 "),HY=n(QDe,"A",{href:!0});var aIt=s(HY);DLr=r(aIt,"TFFlaubertWithLMHeadModel"),aIt.forEach(t),GLr=r(QDe," (FlauBERT model)"),QDe.forEach(t),OLr=i(ge),IE=n(ge,"LI",{});var HDe=s(IE);F4e=n(HDe,"STRONG",{});var nIt=s(F4e);VLr=r(nIt,"funnel"),nIt.forEach(t),XLr=r(HDe," \u2014 "),UY=n(HDe,"A",{href:!0});var sIt=s(UY);zLr=r(sIt,"TFFunnelForMaskedLM"),sIt.forEach(t),WLr=r(HDe," (Funnel Transformer model)"),HDe.forEach(t),QLr=i(ge),NE=n(ge,"LI",{});var UDe=s(NE);T4e=n(UDe,"STRONG",{});var lIt=s(T4e);HLr=r(lIt,"layoutlm"),lIt.forEach(t),ULr=r(UDe," \u2014 "),JY=n(UDe,"A",{href:!0});var iIt=s(JY);JLr=r(iIt,"TFLayoutLMForMaskedLM"),iIt.forEach(t),YLr=r(UDe," (LayoutLM model)"),UDe.forEach(t),KLr=i(ge),qE=n(ge,"LI",{});var JDe=s(qE);M4e=n(JDe,"STRONG",{});var dIt=s(M4e);ZLr=r(dIt,"longformer"),dIt.forEach(t),eyr=r(JDe," \u2014 "),YY=n(JDe,"A",{href:!0});var cIt=s(YY);oyr=r(cIt,"TFLongformerForMaskedLM"),cIt.forEach(t),ryr=r(JDe," (Longformer model)"),JDe.forEach(t),tyr=i(ge),jE=n(ge,"LI",{});var YDe=s(jE);E4e=n(YDe,"STRONG",{});var fIt=s(E4e);ayr=r(fIt,"mobilebert"),fIt.forEach(t),nyr=r(YDe," \u2014 "),KY=n(YDe,"A",{href:!0});var mIt=s(KY);syr=r(mIt,"TFMobileBertForMaskedLM"),mIt.forEach(t),lyr=r(YDe," (MobileBERT model)"),YDe.forEach(t),iyr=i(ge),DE=n(ge,"LI",{});var KDe=s(DE);C4e=n(KDe,"STRONG",{});var gIt=s(C4e);dyr=r(gIt,"mpnet"),gIt.forEach(t),cyr=r(KDe," \u2014 "),ZY=n(KDe,"A",{href:!0});var hIt=s(ZY);fyr=r(hIt,"TFMPNetForMaskedLM"),hIt.forEach(t),myr=r(KDe," (MPNet model)"),KDe.forEach(t),gyr=i(ge),GE=n(ge,"LI",{});var ZDe=s(GE);w4e=n(ZDe,"STRONG",{});var pIt=s(w4e);hyr=r(pIt,"rembert"),pIt.forEach(t),pyr=r(ZDe," \u2014 "),eK=n(ZDe,"A",{href:!0});var _It=s(eK);_yr=r(_It,"TFRemBertForMaskedLM"),_It.forEach(t),uyr=r(ZDe," (RemBERT model)"),ZDe.forEach(t),byr=i(ge),OE=n(ge,"LI",{});var eGe=s(OE);A4e=n(eGe,"STRONG",{});var uIt=s(A4e);vyr=r(uIt,"roberta"),uIt.forEach(t),Fyr=r(eGe," \u2014 "),oK=n(eGe,"A",{href:!0});var bIt=s(oK);Tyr=r(bIt,"TFRobertaForMaskedLM"),bIt.forEach(t),Myr=r(eGe," (RoBERTa model)"),eGe.forEach(t),Eyr=i(ge),VE=n(ge,"LI",{});var oGe=s(VE);L4e=n(oGe,"STRONG",{});var vIt=s(L4e);Cyr=r(vIt,"roformer"),vIt.forEach(t),wyr=r(oGe," \u2014 "),rK=n(oGe,"A",{href:!0});var FIt=s(rK);Ayr=r(FIt,"TFRoFormerForMaskedLM"),FIt.forEach(t),Lyr=r(oGe," (RoFormer model)"),oGe.forEach(t),yyr=i(ge),XE=n(ge,"LI",{});var rGe=s(XE);y4e=n(rGe,"STRONG",{});var TIt=s(y4e);xyr=r(TIt,"tapas"),TIt.forEach(t),$yr=r(rGe," \u2014 "),tK=n(rGe,"A",{href:!0});var MIt=s(tK);kyr=r(MIt,"TFTapasForMaskedLM"),MIt.forEach(t),Syr=r(rGe," (TAPAS model)"),rGe.forEach(t),Ryr=i(ge),zE=n(ge,"LI",{});var tGe=s(zE);x4e=n(tGe,"STRONG",{});var EIt=s(x4e);Pyr=r(EIt,"xlm"),EIt.forEach(t),Byr=r(tGe," \u2014 "),aK=n(tGe,"A",{href:!0});var CIt=s(aK);Iyr=r(CIt,"TFXLMWithLMHeadModel"),CIt.forEach(t),Nyr=r(tGe," (XLM model)"),tGe.forEach(t),qyr=i(ge),WE=n(ge,"LI",{});var aGe=s(WE);$4e=n(aGe,"STRONG",{});var wIt=s($4e);jyr=r(wIt,"xlm-roberta"),wIt.forEach(t),Dyr=r(aGe," \u2014 "),nK=n(aGe,"A",{href:!0});var AIt=s(nK);Gyr=r(AIt,"TFXLMRobertaForMaskedLM"),AIt.forEach(t),Oyr=r(aGe," (XLM-RoBERTa model)"),aGe.forEach(t),ge.forEach(t),Vyr=i(Dl),T(QE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),hWe=i(f),Ec=n(f,"H2",{class:!0});var MHe=s(Ec);HE=n(MHe,"A",{id:!0,class:!0,href:!0});var LIt=s(HE);k4e=n(LIt,"SPAN",{});var yIt=s(k4e);T(yx.$$.fragment,yIt),yIt.forEach(t),LIt.forEach(t),Xyr=i(MHe),S4e=n(MHe,"SPAN",{});var xIt=s(S4e);zyr=r(xIt,"TFAutoModelForSeq2SeqLM"),xIt.forEach(t),MHe.forEach(t),pWe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(xx.$$.fragment,Gl),Wyr=i(Gl),Cc=n(Gl,"P",{});var gae=s(Cc);Qyr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sK=n(gae,"A",{href:!0});var $It=s(sK);Hyr=r($It,"from_pretrained()"),$It.forEach(t),Uyr=r(gae," class method or the "),lK=n(gae,"A",{href:!0});var kIt=s(lK);Jyr=r(kIt,"from_config()"),kIt.forEach(t),Yyr=r(gae,` class
method.`),gae.forEach(t),Kyr=i(Gl),$x=n(Gl,"P",{});var EHe=s($x);Zyr=r(EHe,"This class cannot be instantiated directly using "),R4e=n(EHe,"CODE",{});var SIt=s(R4e);e8r=r(SIt,"__init__()"),SIt.forEach(t),o8r=r(EHe," (throws an error)."),EHe.forEach(t),r8r=i(Gl),qt=n(Gl,"DIV",{class:!0});var wL=s(qt);T(kx.$$.fragment,wL),t8r=i(wL),P4e=n(wL,"P",{});var RIt=s(P4e);a8r=r(RIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RIt.forEach(t),n8r=i(wL),wc=n(wL,"P",{});var hae=s(wc);s8r=r(hae,`Note:
Loading a model from its configuration file does `),B4e=n(hae,"STRONG",{});var PIt=s(B4e);l8r=r(PIt,"not"),PIt.forEach(t),i8r=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(hae,"A",{href:!0});var BIt=s(iK);d8r=r(BIt,"from_pretrained()"),BIt.forEach(t),c8r=r(hae," to load the model weights."),hae.forEach(t),f8r=i(wL),T(UE.$$.fragment,wL),wL.forEach(t),m8r=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(Sx.$$.fragment,Ol),g8r=i(Ol),I4e=n(Ol,"P",{});var IIt=s(I4e);h8r=r(IIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),IIt.forEach(t),p8r=i(Ol),gn=n(Ol,"P",{});var AL=s(gn);_8r=r(AL,"The model class to instantiate is selected based on the "),N4e=n(AL,"CODE",{});var NIt=s(N4e);u8r=r(NIt,"model_type"),NIt.forEach(t),b8r=r(AL,` property of the config object (either
passed as an argument or loaded from `),q4e=n(AL,"CODE",{});var qIt=s(q4e);v8r=r(qIt,"pretrained_model_name_or_path"),qIt.forEach(t),F8r=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(AL,"CODE",{});var jIt=s(j4e);T8r=r(jIt,"pretrained_model_name_or_path"),jIt.forEach(t),M8r=r(AL,":"),AL.forEach(t),E8r=i(Ol),ye=n(Ol,"UL",{});var Ie=s(ye);JE=n(Ie,"LI",{});var nGe=s(JE);D4e=n(nGe,"STRONG",{});var DIt=s(D4e);C8r=r(DIt,"bart"),DIt.forEach(t),w8r=r(nGe," \u2014 "),dK=n(nGe,"A",{href:!0});var GIt=s(dK);A8r=r(GIt,"TFBartForConditionalGeneration"),GIt.forEach(t),L8r=r(nGe," (BART model)"),nGe.forEach(t),y8r=i(Ie),YE=n(Ie,"LI",{});var sGe=s(YE);G4e=n(sGe,"STRONG",{});var OIt=s(G4e);x8r=r(OIt,"blenderbot"),OIt.forEach(t),$8r=r(sGe," \u2014 "),cK=n(sGe,"A",{href:!0});var VIt=s(cK);k8r=r(VIt,"TFBlenderbotForConditionalGeneration"),VIt.forEach(t),S8r=r(sGe," (Blenderbot model)"),sGe.forEach(t),R8r=i(Ie),KE=n(Ie,"LI",{});var lGe=s(KE);O4e=n(lGe,"STRONG",{});var XIt=s(O4e);P8r=r(XIt,"blenderbot-small"),XIt.forEach(t),B8r=r(lGe," \u2014 "),fK=n(lGe,"A",{href:!0});var zIt=s(fK);I8r=r(zIt,"TFBlenderbotSmallForConditionalGeneration"),zIt.forEach(t),N8r=r(lGe," (BlenderbotSmall model)"),lGe.forEach(t),q8r=i(Ie),ZE=n(Ie,"LI",{});var iGe=s(ZE);V4e=n(iGe,"STRONG",{});var WIt=s(V4e);j8r=r(WIt,"encoder-decoder"),WIt.forEach(t),D8r=r(iGe," \u2014 "),mK=n(iGe,"A",{href:!0});var QIt=s(mK);G8r=r(QIt,"TFEncoderDecoderModel"),QIt.forEach(t),O8r=r(iGe," (Encoder decoder model)"),iGe.forEach(t),V8r=i(Ie),eC=n(Ie,"LI",{});var dGe=s(eC);X4e=n(dGe,"STRONG",{});var HIt=s(X4e);X8r=r(HIt,"led"),HIt.forEach(t),z8r=r(dGe," \u2014 "),gK=n(dGe,"A",{href:!0});var UIt=s(gK);W8r=r(UIt,"TFLEDForConditionalGeneration"),UIt.forEach(t),Q8r=r(dGe," (LED model)"),dGe.forEach(t),H8r=i(Ie),oC=n(Ie,"LI",{});var cGe=s(oC);z4e=n(cGe,"STRONG",{});var JIt=s(z4e);U8r=r(JIt,"marian"),JIt.forEach(t),J8r=r(cGe," \u2014 "),hK=n(cGe,"A",{href:!0});var YIt=s(hK);Y8r=r(YIt,"TFMarianMTModel"),YIt.forEach(t),K8r=r(cGe," (Marian model)"),cGe.forEach(t),Z8r=i(Ie),rC=n(Ie,"LI",{});var fGe=s(rC);W4e=n(fGe,"STRONG",{});var KIt=s(W4e);e9r=r(KIt,"mbart"),KIt.forEach(t),o9r=r(fGe," \u2014 "),pK=n(fGe,"A",{href:!0});var ZIt=s(pK);r9r=r(ZIt,"TFMBartForConditionalGeneration"),ZIt.forEach(t),t9r=r(fGe," (mBART model)"),fGe.forEach(t),a9r=i(Ie),tC=n(Ie,"LI",{});var mGe=s(tC);Q4e=n(mGe,"STRONG",{});var eNt=s(Q4e);n9r=r(eNt,"mt5"),eNt.forEach(t),s9r=r(mGe," \u2014 "),_K=n(mGe,"A",{href:!0});var oNt=s(_K);l9r=r(oNt,"TFMT5ForConditionalGeneration"),oNt.forEach(t),i9r=r(mGe," (MT5 model)"),mGe.forEach(t),d9r=i(Ie),aC=n(Ie,"LI",{});var gGe=s(aC);H4e=n(gGe,"STRONG",{});var rNt=s(H4e);c9r=r(rNt,"pegasus"),rNt.forEach(t),f9r=r(gGe," \u2014 "),uK=n(gGe,"A",{href:!0});var tNt=s(uK);m9r=r(tNt,"TFPegasusForConditionalGeneration"),tNt.forEach(t),g9r=r(gGe," (Pegasus model)"),gGe.forEach(t),h9r=i(Ie),nC=n(Ie,"LI",{});var hGe=s(nC);U4e=n(hGe,"STRONG",{});var aNt=s(U4e);p9r=r(aNt,"t5"),aNt.forEach(t),_9r=r(hGe," \u2014 "),bK=n(hGe,"A",{href:!0});var nNt=s(bK);u9r=r(nNt,"TFT5ForConditionalGeneration"),nNt.forEach(t),b9r=r(hGe," (T5 model)"),hGe.forEach(t),Ie.forEach(t),v9r=i(Ol),T(sC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),_We=i(f),Ac=n(f,"H2",{class:!0});var CHe=s(Ac);lC=n(CHe,"A",{id:!0,class:!0,href:!0});var sNt=s(lC);J4e=n(sNt,"SPAN",{});var lNt=s(J4e);T(Rx.$$.fragment,lNt),lNt.forEach(t),sNt.forEach(t),F9r=i(CHe),Y4e=n(CHe,"SPAN",{});var iNt=s(Y4e);T9r=r(iNt,"TFAutoModelForSequenceClassification"),iNt.forEach(t),CHe.forEach(t),uWe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(Px.$$.fragment,Vl),M9r=i(Vl),Lc=n(Vl,"P",{});var pae=s(Lc);E9r=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vK=n(pae,"A",{href:!0});var dNt=s(vK);C9r=r(dNt,"from_pretrained()"),dNt.forEach(t),w9r=r(pae," class method or the "),FK=n(pae,"A",{href:!0});var cNt=s(FK);A9r=r(cNt,"from_config()"),cNt.forEach(t),L9r=r(pae,` class
method.`),pae.forEach(t),y9r=i(Vl),Bx=n(Vl,"P",{});var wHe=s(Bx);x9r=r(wHe,"This class cannot be instantiated directly using "),K4e=n(wHe,"CODE",{});var fNt=s(K4e);$9r=r(fNt,"__init__()"),fNt.forEach(t),k9r=r(wHe," (throws an error)."),wHe.forEach(t),S9r=i(Vl),jt=n(Vl,"DIV",{class:!0});var LL=s(jt);T(Ix.$$.fragment,LL),R9r=i(LL),Z4e=n(LL,"P",{});var mNt=s(Z4e);P9r=r(mNt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mNt.forEach(t),B9r=i(LL),yc=n(LL,"P",{});var _ae=s(yc);I9r=r(_ae,`Note:
Loading a model from its configuration file does `),eEe=n(_ae,"STRONG",{});var gNt=s(eEe);N9r=r(gNt,"not"),gNt.forEach(t),q9r=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(_ae,"A",{href:!0});var hNt=s(TK);j9r=r(hNt,"from_pretrained()"),hNt.forEach(t),D9r=r(_ae," to load the model weights."),_ae.forEach(t),G9r=i(LL),T(iC.$$.fragment,LL),LL.forEach(t),O9r=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(Nx.$$.fragment,Xl),V9r=i(Xl),oEe=n(Xl,"P",{});var pNt=s(oEe);X9r=r(pNt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pNt.forEach(t),z9r=i(Xl),hn=n(Xl,"P",{});var yL=s(hn);W9r=r(yL,"The model class to instantiate is selected based on the "),rEe=n(yL,"CODE",{});var _Nt=s(rEe);Q9r=r(_Nt,"model_type"),_Nt.forEach(t),H9r=r(yL,` property of the config object (either
passed as an argument or loaded from `),tEe=n(yL,"CODE",{});var uNt=s(tEe);U9r=r(uNt,"pretrained_model_name_or_path"),uNt.forEach(t),J9r=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(yL,"CODE",{});var bNt=s(aEe);Y9r=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),K9r=r(yL,":"),yL.forEach(t),Z9r=i(Xl),te=n(Xl,"UL",{});var ne=s(te);dC=n(ne,"LI",{});var pGe=s(dC);nEe=n(pGe,"STRONG",{});var vNt=s(nEe);exr=r(vNt,"albert"),vNt.forEach(t),oxr=r(pGe," \u2014 "),MK=n(pGe,"A",{href:!0});var FNt=s(MK);rxr=r(FNt,"TFAlbertForSequenceClassification"),FNt.forEach(t),txr=r(pGe," (ALBERT model)"),pGe.forEach(t),axr=i(ne),cC=n(ne,"LI",{});var _Ge=s(cC);sEe=n(_Ge,"STRONG",{});var TNt=s(sEe);nxr=r(TNt,"bert"),TNt.forEach(t),sxr=r(_Ge," \u2014 "),EK=n(_Ge,"A",{href:!0});var MNt=s(EK);lxr=r(MNt,"TFBertForSequenceClassification"),MNt.forEach(t),ixr=r(_Ge," (BERT model)"),_Ge.forEach(t),dxr=i(ne),fC=n(ne,"LI",{});var uGe=s(fC);lEe=n(uGe,"STRONG",{});var ENt=s(lEe);cxr=r(ENt,"camembert"),ENt.forEach(t),fxr=r(uGe," \u2014 "),CK=n(uGe,"A",{href:!0});var CNt=s(CK);mxr=r(CNt,"TFCamembertForSequenceClassification"),CNt.forEach(t),gxr=r(uGe," (CamemBERT model)"),uGe.forEach(t),hxr=i(ne),mC=n(ne,"LI",{});var bGe=s(mC);iEe=n(bGe,"STRONG",{});var wNt=s(iEe);pxr=r(wNt,"convbert"),wNt.forEach(t),_xr=r(bGe," \u2014 "),wK=n(bGe,"A",{href:!0});var ANt=s(wK);uxr=r(ANt,"TFConvBertForSequenceClassification"),ANt.forEach(t),bxr=r(bGe," (ConvBERT model)"),bGe.forEach(t),vxr=i(ne),gC=n(ne,"LI",{});var vGe=s(gC);dEe=n(vGe,"STRONG",{});var LNt=s(dEe);Fxr=r(LNt,"ctrl"),LNt.forEach(t),Txr=r(vGe," \u2014 "),AK=n(vGe,"A",{href:!0});var yNt=s(AK);Mxr=r(yNt,"TFCTRLForSequenceClassification"),yNt.forEach(t),Exr=r(vGe," (CTRL model)"),vGe.forEach(t),Cxr=i(ne),hC=n(ne,"LI",{});var FGe=s(hC);cEe=n(FGe,"STRONG",{});var xNt=s(cEe);wxr=r(xNt,"deberta"),xNt.forEach(t),Axr=r(FGe," \u2014 "),LK=n(FGe,"A",{href:!0});var $Nt=s(LK);Lxr=r($Nt,"TFDebertaForSequenceClassification"),$Nt.forEach(t),yxr=r(FGe," (DeBERTa model)"),FGe.forEach(t),xxr=i(ne),pC=n(ne,"LI",{});var TGe=s(pC);fEe=n(TGe,"STRONG",{});var kNt=s(fEe);$xr=r(kNt,"deberta-v2"),kNt.forEach(t),kxr=r(TGe," \u2014 "),yK=n(TGe,"A",{href:!0});var SNt=s(yK);Sxr=r(SNt,"TFDebertaV2ForSequenceClassification"),SNt.forEach(t),Rxr=r(TGe," (DeBERTa-v2 model)"),TGe.forEach(t),Pxr=i(ne),_C=n(ne,"LI",{});var MGe=s(_C);mEe=n(MGe,"STRONG",{});var RNt=s(mEe);Bxr=r(RNt,"distilbert"),RNt.forEach(t),Ixr=r(MGe," \u2014 "),xK=n(MGe,"A",{href:!0});var PNt=s(xK);Nxr=r(PNt,"TFDistilBertForSequenceClassification"),PNt.forEach(t),qxr=r(MGe," (DistilBERT model)"),MGe.forEach(t),jxr=i(ne),uC=n(ne,"LI",{});var EGe=s(uC);gEe=n(EGe,"STRONG",{});var BNt=s(gEe);Dxr=r(BNt,"electra"),BNt.forEach(t),Gxr=r(EGe," \u2014 "),$K=n(EGe,"A",{href:!0});var INt=s($K);Oxr=r(INt,"TFElectraForSequenceClassification"),INt.forEach(t),Vxr=r(EGe," (ELECTRA model)"),EGe.forEach(t),Xxr=i(ne),bC=n(ne,"LI",{});var CGe=s(bC);hEe=n(CGe,"STRONG",{});var NNt=s(hEe);zxr=r(NNt,"flaubert"),NNt.forEach(t),Wxr=r(CGe," \u2014 "),kK=n(CGe,"A",{href:!0});var qNt=s(kK);Qxr=r(qNt,"TFFlaubertForSequenceClassification"),qNt.forEach(t),Hxr=r(CGe," (FlauBERT model)"),CGe.forEach(t),Uxr=i(ne),vC=n(ne,"LI",{});var wGe=s(vC);pEe=n(wGe,"STRONG",{});var jNt=s(pEe);Jxr=r(jNt,"funnel"),jNt.forEach(t),Yxr=r(wGe," \u2014 "),SK=n(wGe,"A",{href:!0});var DNt=s(SK);Kxr=r(DNt,"TFFunnelForSequenceClassification"),DNt.forEach(t),Zxr=r(wGe," (Funnel Transformer model)"),wGe.forEach(t),e$r=i(ne),FC=n(ne,"LI",{});var AGe=s(FC);_Ee=n(AGe,"STRONG",{});var GNt=s(_Ee);o$r=r(GNt,"gpt2"),GNt.forEach(t),r$r=r(AGe," \u2014 "),RK=n(AGe,"A",{href:!0});var ONt=s(RK);t$r=r(ONt,"TFGPT2ForSequenceClassification"),ONt.forEach(t),a$r=r(AGe," (OpenAI GPT-2 model)"),AGe.forEach(t),n$r=i(ne),TC=n(ne,"LI",{});var LGe=s(TC);uEe=n(LGe,"STRONG",{});var VNt=s(uEe);s$r=r(VNt,"gptj"),VNt.forEach(t),l$r=r(LGe," \u2014 "),PK=n(LGe,"A",{href:!0});var XNt=s(PK);i$r=r(XNt,"TFGPTJForSequenceClassification"),XNt.forEach(t),d$r=r(LGe," (GPT-J model)"),LGe.forEach(t),c$r=i(ne),MC=n(ne,"LI",{});var yGe=s(MC);bEe=n(yGe,"STRONG",{});var zNt=s(bEe);f$r=r(zNt,"layoutlm"),zNt.forEach(t),m$r=r(yGe," \u2014 "),BK=n(yGe,"A",{href:!0});var WNt=s(BK);g$r=r(WNt,"TFLayoutLMForSequenceClassification"),WNt.forEach(t),h$r=r(yGe," (LayoutLM model)"),yGe.forEach(t),p$r=i(ne),EC=n(ne,"LI",{});var xGe=s(EC);vEe=n(xGe,"STRONG",{});var QNt=s(vEe);_$r=r(QNt,"longformer"),QNt.forEach(t),u$r=r(xGe," \u2014 "),IK=n(xGe,"A",{href:!0});var HNt=s(IK);b$r=r(HNt,"TFLongformerForSequenceClassification"),HNt.forEach(t),v$r=r(xGe," (Longformer model)"),xGe.forEach(t),F$r=i(ne),CC=n(ne,"LI",{});var $Ge=s(CC);FEe=n($Ge,"STRONG",{});var UNt=s(FEe);T$r=r(UNt,"mobilebert"),UNt.forEach(t),M$r=r($Ge," \u2014 "),NK=n($Ge,"A",{href:!0});var JNt=s(NK);E$r=r(JNt,"TFMobileBertForSequenceClassification"),JNt.forEach(t),C$r=r($Ge," (MobileBERT model)"),$Ge.forEach(t),w$r=i(ne),wC=n(ne,"LI",{});var kGe=s(wC);TEe=n(kGe,"STRONG",{});var YNt=s(TEe);A$r=r(YNt,"mpnet"),YNt.forEach(t),L$r=r(kGe," \u2014 "),qK=n(kGe,"A",{href:!0});var KNt=s(qK);y$r=r(KNt,"TFMPNetForSequenceClassification"),KNt.forEach(t),x$r=r(kGe," (MPNet model)"),kGe.forEach(t),$$r=i(ne),AC=n(ne,"LI",{});var SGe=s(AC);MEe=n(SGe,"STRONG",{});var ZNt=s(MEe);k$r=r(ZNt,"openai-gpt"),ZNt.forEach(t),S$r=r(SGe," \u2014 "),jK=n(SGe,"A",{href:!0});var eqt=s(jK);R$r=r(eqt,"TFOpenAIGPTForSequenceClassification"),eqt.forEach(t),P$r=r(SGe," (OpenAI GPT model)"),SGe.forEach(t),B$r=i(ne),LC=n(ne,"LI",{});var RGe=s(LC);EEe=n(RGe,"STRONG",{});var oqt=s(EEe);I$r=r(oqt,"rembert"),oqt.forEach(t),N$r=r(RGe," \u2014 "),DK=n(RGe,"A",{href:!0});var rqt=s(DK);q$r=r(rqt,"TFRemBertForSequenceClassification"),rqt.forEach(t),j$r=r(RGe," (RemBERT model)"),RGe.forEach(t),D$r=i(ne),yC=n(ne,"LI",{});var PGe=s(yC);CEe=n(PGe,"STRONG",{});var tqt=s(CEe);G$r=r(tqt,"roberta"),tqt.forEach(t),O$r=r(PGe," \u2014 "),GK=n(PGe,"A",{href:!0});var aqt=s(GK);V$r=r(aqt,"TFRobertaForSequenceClassification"),aqt.forEach(t),X$r=r(PGe," (RoBERTa model)"),PGe.forEach(t),z$r=i(ne),xC=n(ne,"LI",{});var BGe=s(xC);wEe=n(BGe,"STRONG",{});var nqt=s(wEe);W$r=r(nqt,"roformer"),nqt.forEach(t),Q$r=r(BGe," \u2014 "),OK=n(BGe,"A",{href:!0});var sqt=s(OK);H$r=r(sqt,"TFRoFormerForSequenceClassification"),sqt.forEach(t),U$r=r(BGe," (RoFormer model)"),BGe.forEach(t),J$r=i(ne),$C=n(ne,"LI",{});var IGe=s($C);AEe=n(IGe,"STRONG",{});var lqt=s(AEe);Y$r=r(lqt,"tapas"),lqt.forEach(t),K$r=r(IGe," \u2014 "),VK=n(IGe,"A",{href:!0});var iqt=s(VK);Z$r=r(iqt,"TFTapasForSequenceClassification"),iqt.forEach(t),ekr=r(IGe," (TAPAS model)"),IGe.forEach(t),okr=i(ne),kC=n(ne,"LI",{});var NGe=s(kC);LEe=n(NGe,"STRONG",{});var dqt=s(LEe);rkr=r(dqt,"transfo-xl"),dqt.forEach(t),tkr=r(NGe," \u2014 "),XK=n(NGe,"A",{href:!0});var cqt=s(XK);akr=r(cqt,"TFTransfoXLForSequenceClassification"),cqt.forEach(t),nkr=r(NGe," (Transformer-XL model)"),NGe.forEach(t),skr=i(ne),SC=n(ne,"LI",{});var qGe=s(SC);yEe=n(qGe,"STRONG",{});var fqt=s(yEe);lkr=r(fqt,"xlm"),fqt.forEach(t),ikr=r(qGe," \u2014 "),zK=n(qGe,"A",{href:!0});var mqt=s(zK);dkr=r(mqt,"TFXLMForSequenceClassification"),mqt.forEach(t),ckr=r(qGe," (XLM model)"),qGe.forEach(t),fkr=i(ne),RC=n(ne,"LI",{});var jGe=s(RC);xEe=n(jGe,"STRONG",{});var gqt=s(xEe);mkr=r(gqt,"xlm-roberta"),gqt.forEach(t),gkr=r(jGe," \u2014 "),WK=n(jGe,"A",{href:!0});var hqt=s(WK);hkr=r(hqt,"TFXLMRobertaForSequenceClassification"),hqt.forEach(t),pkr=r(jGe," (XLM-RoBERTa model)"),jGe.forEach(t),_kr=i(ne),PC=n(ne,"LI",{});var DGe=s(PC);$Ee=n(DGe,"STRONG",{});var pqt=s($Ee);ukr=r(pqt,"xlnet"),pqt.forEach(t),bkr=r(DGe," \u2014 "),QK=n(DGe,"A",{href:!0});var _qt=s(QK);vkr=r(_qt,"TFXLNetForSequenceClassification"),_qt.forEach(t),Fkr=r(DGe," (XLNet model)"),DGe.forEach(t),ne.forEach(t),Tkr=i(Xl),T(BC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),bWe=i(f),xc=n(f,"H2",{class:!0});var AHe=s(xc);IC=n(AHe,"A",{id:!0,class:!0,href:!0});var uqt=s(IC);kEe=n(uqt,"SPAN",{});var bqt=s(kEe);T(qx.$$.fragment,bqt),bqt.forEach(t),uqt.forEach(t),Mkr=i(AHe),SEe=n(AHe,"SPAN",{});var vqt=s(SEe);Ekr=r(vqt,"TFAutoModelForMultipleChoice"),vqt.forEach(t),AHe.forEach(t),vWe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(jx.$$.fragment,zl),Ckr=i(zl),$c=n(zl,"P",{});var uae=s($c);wkr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=n(uae,"A",{href:!0});var Fqt=s(HK);Akr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),Lkr=r(uae," class method or the "),UK=n(uae,"A",{href:!0});var Tqt=s(UK);ykr=r(Tqt,"from_config()"),Tqt.forEach(t),xkr=r(uae,` class
method.`),uae.forEach(t),$kr=i(zl),Dx=n(zl,"P",{});var LHe=s(Dx);kkr=r(LHe,"This class cannot be instantiated directly using "),REe=n(LHe,"CODE",{});var Mqt=s(REe);Skr=r(Mqt,"__init__()"),Mqt.forEach(t),Rkr=r(LHe," (throws an error)."),LHe.forEach(t),Pkr=i(zl),Dt=n(zl,"DIV",{class:!0});var xL=s(Dt);T(Gx.$$.fragment,xL),Bkr=i(xL),PEe=n(xL,"P",{});var Eqt=s(PEe);Ikr=r(Eqt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Eqt.forEach(t),Nkr=i(xL),kc=n(xL,"P",{});var bae=s(kc);qkr=r(bae,`Note:
Loading a model from its configuration file does `),BEe=n(bae,"STRONG",{});var Cqt=s(BEe);jkr=r(Cqt,"not"),Cqt.forEach(t),Dkr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(bae,"A",{href:!0});var wqt=s(JK);Gkr=r(wqt,"from_pretrained()"),wqt.forEach(t),Okr=r(bae," to load the model weights."),bae.forEach(t),Vkr=i(xL),T(NC.$$.fragment,xL),xL.forEach(t),Xkr=i(zl),qr=n(zl,"DIV",{class:!0});var Wl=s(qr);T(Ox.$$.fragment,Wl),zkr=i(Wl),IEe=n(Wl,"P",{});var Aqt=s(IEe);Wkr=r(Aqt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Aqt.forEach(t),Qkr=i(Wl),pn=n(Wl,"P",{});var $L=s(pn);Hkr=r($L,"The model class to instantiate is selected based on the "),NEe=n($L,"CODE",{});var Lqt=s(NEe);Ukr=r(Lqt,"model_type"),Lqt.forEach(t),Jkr=r($L,` property of the config object (either
passed as an argument or loaded from `),qEe=n($L,"CODE",{});var yqt=s(qEe);Ykr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),Kkr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=n($L,"CODE",{});var xqt=s(jEe);Zkr=r(xqt,"pretrained_model_name_or_path"),xqt.forEach(t),eSr=r($L,":"),$L.forEach(t),oSr=i(Wl),be=n(Wl,"UL",{});var Fe=s(be);qC=n(Fe,"LI",{});var GGe=s(qC);DEe=n(GGe,"STRONG",{});var $qt=s(DEe);rSr=r($qt,"albert"),$qt.forEach(t),tSr=r(GGe," \u2014 "),YK=n(GGe,"A",{href:!0});var kqt=s(YK);aSr=r(kqt,"TFAlbertForMultipleChoice"),kqt.forEach(t),nSr=r(GGe," (ALBERT model)"),GGe.forEach(t),sSr=i(Fe),jC=n(Fe,"LI",{});var OGe=s(jC);GEe=n(OGe,"STRONG",{});var Sqt=s(GEe);lSr=r(Sqt,"bert"),Sqt.forEach(t),iSr=r(OGe," \u2014 "),KK=n(OGe,"A",{href:!0});var Rqt=s(KK);dSr=r(Rqt,"TFBertForMultipleChoice"),Rqt.forEach(t),cSr=r(OGe," (BERT model)"),OGe.forEach(t),fSr=i(Fe),DC=n(Fe,"LI",{});var VGe=s(DC);OEe=n(VGe,"STRONG",{});var Pqt=s(OEe);mSr=r(Pqt,"camembert"),Pqt.forEach(t),gSr=r(VGe," \u2014 "),ZK=n(VGe,"A",{href:!0});var Bqt=s(ZK);hSr=r(Bqt,"TFCamembertForMultipleChoice"),Bqt.forEach(t),pSr=r(VGe," (CamemBERT model)"),VGe.forEach(t),_Sr=i(Fe),GC=n(Fe,"LI",{});var XGe=s(GC);VEe=n(XGe,"STRONG",{});var Iqt=s(VEe);uSr=r(Iqt,"convbert"),Iqt.forEach(t),bSr=r(XGe," \u2014 "),eZ=n(XGe,"A",{href:!0});var Nqt=s(eZ);vSr=r(Nqt,"TFConvBertForMultipleChoice"),Nqt.forEach(t),FSr=r(XGe," (ConvBERT model)"),XGe.forEach(t),TSr=i(Fe),OC=n(Fe,"LI",{});var zGe=s(OC);XEe=n(zGe,"STRONG",{});var qqt=s(XEe);MSr=r(qqt,"distilbert"),qqt.forEach(t),ESr=r(zGe," \u2014 "),oZ=n(zGe,"A",{href:!0});var jqt=s(oZ);CSr=r(jqt,"TFDistilBertForMultipleChoice"),jqt.forEach(t),wSr=r(zGe," (DistilBERT model)"),zGe.forEach(t),ASr=i(Fe),VC=n(Fe,"LI",{});var WGe=s(VC);zEe=n(WGe,"STRONG",{});var Dqt=s(zEe);LSr=r(Dqt,"electra"),Dqt.forEach(t),ySr=r(WGe," \u2014 "),rZ=n(WGe,"A",{href:!0});var Gqt=s(rZ);xSr=r(Gqt,"TFElectraForMultipleChoice"),Gqt.forEach(t),$Sr=r(WGe," (ELECTRA model)"),WGe.forEach(t),kSr=i(Fe),XC=n(Fe,"LI",{});var QGe=s(XC);WEe=n(QGe,"STRONG",{});var Oqt=s(WEe);SSr=r(Oqt,"flaubert"),Oqt.forEach(t),RSr=r(QGe," \u2014 "),tZ=n(QGe,"A",{href:!0});var Vqt=s(tZ);PSr=r(Vqt,"TFFlaubertForMultipleChoice"),Vqt.forEach(t),BSr=r(QGe," (FlauBERT model)"),QGe.forEach(t),ISr=i(Fe),zC=n(Fe,"LI",{});var HGe=s(zC);QEe=n(HGe,"STRONG",{});var Xqt=s(QEe);NSr=r(Xqt,"funnel"),Xqt.forEach(t),qSr=r(HGe," \u2014 "),aZ=n(HGe,"A",{href:!0});var zqt=s(aZ);jSr=r(zqt,"TFFunnelForMultipleChoice"),zqt.forEach(t),DSr=r(HGe," (Funnel Transformer model)"),HGe.forEach(t),GSr=i(Fe),WC=n(Fe,"LI",{});var UGe=s(WC);HEe=n(UGe,"STRONG",{});var Wqt=s(HEe);OSr=r(Wqt,"longformer"),Wqt.forEach(t),VSr=r(UGe," \u2014 "),nZ=n(UGe,"A",{href:!0});var Qqt=s(nZ);XSr=r(Qqt,"TFLongformerForMultipleChoice"),Qqt.forEach(t),zSr=r(UGe," (Longformer model)"),UGe.forEach(t),WSr=i(Fe),QC=n(Fe,"LI",{});var JGe=s(QC);UEe=n(JGe,"STRONG",{});var Hqt=s(UEe);QSr=r(Hqt,"mobilebert"),Hqt.forEach(t),HSr=r(JGe," \u2014 "),sZ=n(JGe,"A",{href:!0});var Uqt=s(sZ);USr=r(Uqt,"TFMobileBertForMultipleChoice"),Uqt.forEach(t),JSr=r(JGe," (MobileBERT model)"),JGe.forEach(t),YSr=i(Fe),HC=n(Fe,"LI",{});var YGe=s(HC);JEe=n(YGe,"STRONG",{});var Jqt=s(JEe);KSr=r(Jqt,"mpnet"),Jqt.forEach(t),ZSr=r(YGe," \u2014 "),lZ=n(YGe,"A",{href:!0});var Yqt=s(lZ);eRr=r(Yqt,"TFMPNetForMultipleChoice"),Yqt.forEach(t),oRr=r(YGe," (MPNet model)"),YGe.forEach(t),rRr=i(Fe),UC=n(Fe,"LI",{});var KGe=s(UC);YEe=n(KGe,"STRONG",{});var Kqt=s(YEe);tRr=r(Kqt,"rembert"),Kqt.forEach(t),aRr=r(KGe," \u2014 "),iZ=n(KGe,"A",{href:!0});var Zqt=s(iZ);nRr=r(Zqt,"TFRemBertForMultipleChoice"),Zqt.forEach(t),sRr=r(KGe," (RemBERT model)"),KGe.forEach(t),lRr=i(Fe),JC=n(Fe,"LI",{});var ZGe=s(JC);KEe=n(ZGe,"STRONG",{});var ejt=s(KEe);iRr=r(ejt,"roberta"),ejt.forEach(t),dRr=r(ZGe," \u2014 "),dZ=n(ZGe,"A",{href:!0});var ojt=s(dZ);cRr=r(ojt,"TFRobertaForMultipleChoice"),ojt.forEach(t),fRr=r(ZGe," (RoBERTa model)"),ZGe.forEach(t),mRr=i(Fe),YC=n(Fe,"LI",{});var eOe=s(YC);ZEe=n(eOe,"STRONG",{});var rjt=s(ZEe);gRr=r(rjt,"roformer"),rjt.forEach(t),hRr=r(eOe," \u2014 "),cZ=n(eOe,"A",{href:!0});var tjt=s(cZ);pRr=r(tjt,"TFRoFormerForMultipleChoice"),tjt.forEach(t),_Rr=r(eOe," (RoFormer model)"),eOe.forEach(t),uRr=i(Fe),KC=n(Fe,"LI",{});var oOe=s(KC);eCe=n(oOe,"STRONG",{});var ajt=s(eCe);bRr=r(ajt,"xlm"),ajt.forEach(t),vRr=r(oOe," \u2014 "),fZ=n(oOe,"A",{href:!0});var njt=s(fZ);FRr=r(njt,"TFXLMForMultipleChoice"),njt.forEach(t),TRr=r(oOe," (XLM model)"),oOe.forEach(t),MRr=i(Fe),ZC=n(Fe,"LI",{});var rOe=s(ZC);oCe=n(rOe,"STRONG",{});var sjt=s(oCe);ERr=r(sjt,"xlm-roberta"),sjt.forEach(t),CRr=r(rOe," \u2014 "),mZ=n(rOe,"A",{href:!0});var ljt=s(mZ);wRr=r(ljt,"TFXLMRobertaForMultipleChoice"),ljt.forEach(t),ARr=r(rOe," (XLM-RoBERTa model)"),rOe.forEach(t),LRr=i(Fe),e5=n(Fe,"LI",{});var tOe=s(e5);rCe=n(tOe,"STRONG",{});var ijt=s(rCe);yRr=r(ijt,"xlnet"),ijt.forEach(t),xRr=r(tOe," \u2014 "),gZ=n(tOe,"A",{href:!0});var djt=s(gZ);$Rr=r(djt,"TFXLNetForMultipleChoice"),djt.forEach(t),kRr=r(tOe," (XLNet model)"),tOe.forEach(t),Fe.forEach(t),SRr=i(Wl),T(o5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),FWe=i(f),Sc=n(f,"H2",{class:!0});var yHe=s(Sc);r5=n(yHe,"A",{id:!0,class:!0,href:!0});var cjt=s(r5);tCe=n(cjt,"SPAN",{});var fjt=s(tCe);T(Vx.$$.fragment,fjt),fjt.forEach(t),cjt.forEach(t),RRr=i(yHe),aCe=n(yHe,"SPAN",{});var mjt=s(aCe);PRr=r(mjt,"TFAutoModelForNextSentencePrediction"),mjt.forEach(t),yHe.forEach(t),TWe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(Xx.$$.fragment,Ql),BRr=i(Ql),Rc=n(Ql,"P",{});var vae=s(Rc);IRr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hZ=n(vae,"A",{href:!0});var gjt=s(hZ);NRr=r(gjt,"from_pretrained()"),gjt.forEach(t),qRr=r(vae," class method or the "),pZ=n(vae,"A",{href:!0});var hjt=s(pZ);jRr=r(hjt,"from_config()"),hjt.forEach(t),DRr=r(vae,` class
method.`),vae.forEach(t),GRr=i(Ql),zx=n(Ql,"P",{});var xHe=s(zx);ORr=r(xHe,"This class cannot be instantiated directly using "),nCe=n(xHe,"CODE",{});var pjt=s(nCe);VRr=r(pjt,"__init__()"),pjt.forEach(t),XRr=r(xHe," (throws an error)."),xHe.forEach(t),zRr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var kL=s(Gt);T(Wx.$$.fragment,kL),WRr=i(kL),sCe=n(kL,"P",{});var _jt=s(sCe);QRr=r(_jt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_jt.forEach(t),HRr=i(kL),Pc=n(kL,"P",{});var Fae=s(Pc);URr=r(Fae,`Note:
Loading a model from its configuration file does `),lCe=n(Fae,"STRONG",{});var ujt=s(lCe);JRr=r(ujt,"not"),ujt.forEach(t),YRr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(Fae,"A",{href:!0});var bjt=s(_Z);KRr=r(bjt,"from_pretrained()"),bjt.forEach(t),ZRr=r(Fae," to load the model weights."),Fae.forEach(t),ePr=i(kL),T(t5.$$.fragment,kL),kL.forEach(t),oPr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Hl=s(jr);T(Qx.$$.fragment,Hl),rPr=i(Hl),iCe=n(Hl,"P",{});var vjt=s(iCe);tPr=r(vjt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vjt.forEach(t),aPr=i(Hl),_n=n(Hl,"P",{});var SL=s(_n);nPr=r(SL,"The model class to instantiate is selected based on the "),dCe=n(SL,"CODE",{});var Fjt=s(dCe);sPr=r(Fjt,"model_type"),Fjt.forEach(t),lPr=r(SL,` property of the config object (either
passed as an argument or loaded from `),cCe=n(SL,"CODE",{});var Tjt=s(cCe);iPr=r(Tjt,"pretrained_model_name_or_path"),Tjt.forEach(t),dPr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n(SL,"CODE",{});var Mjt=s(fCe);cPr=r(Mjt,"pretrained_model_name_or_path"),Mjt.forEach(t),fPr=r(SL,":"),SL.forEach(t),mPr=i(Hl),Hx=n(Hl,"UL",{});var $He=s(Hx);a5=n($He,"LI",{});var aOe=s(a5);mCe=n(aOe,"STRONG",{});var Ejt=s(mCe);gPr=r(Ejt,"bert"),Ejt.forEach(t),hPr=r(aOe," \u2014 "),uZ=n(aOe,"A",{href:!0});var Cjt=s(uZ);pPr=r(Cjt,"TFBertForNextSentencePrediction"),Cjt.forEach(t),_Pr=r(aOe," (BERT model)"),aOe.forEach(t),uPr=i($He),n5=n($He,"LI",{});var nOe=s(n5);gCe=n(nOe,"STRONG",{});var wjt=s(gCe);bPr=r(wjt,"mobilebert"),wjt.forEach(t),vPr=r(nOe," \u2014 "),bZ=n(nOe,"A",{href:!0});var Ajt=s(bZ);FPr=r(Ajt,"TFMobileBertForNextSentencePrediction"),Ajt.forEach(t),TPr=r(nOe," (MobileBERT model)"),nOe.forEach(t),$He.forEach(t),MPr=i(Hl),T(s5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),MWe=i(f),Bc=n(f,"H2",{class:!0});var kHe=s(Bc);l5=n(kHe,"A",{id:!0,class:!0,href:!0});var Ljt=s(l5);hCe=n(Ljt,"SPAN",{});var yjt=s(hCe);T(Ux.$$.fragment,yjt),yjt.forEach(t),Ljt.forEach(t),EPr=i(kHe),pCe=n(kHe,"SPAN",{});var xjt=s(pCe);CPr=r(xjt,"TFAutoModelForTableQuestionAnswering"),xjt.forEach(t),kHe.forEach(t),EWe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(Jx.$$.fragment,Ul),wPr=i(Ul),Ic=n(Ul,"P",{});var Tae=s(Ic);APr=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vZ=n(Tae,"A",{href:!0});var $jt=s(vZ);LPr=r($jt,"from_pretrained()"),$jt.forEach(t),yPr=r(Tae," class method or the "),FZ=n(Tae,"A",{href:!0});var kjt=s(FZ);xPr=r(kjt,"from_config()"),kjt.forEach(t),$Pr=r(Tae,` class
method.`),Tae.forEach(t),kPr=i(Ul),Yx=n(Ul,"P",{});var SHe=s(Yx);SPr=r(SHe,"This class cannot be instantiated directly using "),_Ce=n(SHe,"CODE",{});var Sjt=s(_Ce);RPr=r(Sjt,"__init__()"),Sjt.forEach(t),PPr=r(SHe," (throws an error)."),SHe.forEach(t),BPr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var RL=s(Ot);T(Kx.$$.fragment,RL),IPr=i(RL),uCe=n(RL,"P",{});var Rjt=s(uCe);NPr=r(Rjt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rjt.forEach(t),qPr=i(RL),Nc=n(RL,"P",{});var Mae=s(Nc);jPr=r(Mae,`Note:
Loading a model from its configuration file does `),bCe=n(Mae,"STRONG",{});var Pjt=s(bCe);DPr=r(Pjt,"not"),Pjt.forEach(t),GPr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Mae,"A",{href:!0});var Bjt=s(TZ);OPr=r(Bjt,"from_pretrained()"),Bjt.forEach(t),VPr=r(Mae," to load the model weights."),Mae.forEach(t),XPr=i(RL),T(i5.$$.fragment,RL),RL.forEach(t),zPr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(Zx.$$.fragment,Jl),WPr=i(Jl),vCe=n(Jl,"P",{});var Ijt=s(vCe);QPr=r(Ijt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ijt.forEach(t),HPr=i(Jl),un=n(Jl,"P",{});var PL=s(un);UPr=r(PL,"The model class to instantiate is selected based on the "),FCe=n(PL,"CODE",{});var Njt=s(FCe);JPr=r(Njt,"model_type"),Njt.forEach(t),YPr=r(PL,` property of the config object (either
passed as an argument or loaded from `),TCe=n(PL,"CODE",{});var qjt=s(TCe);KPr=r(qjt,"pretrained_model_name_or_path"),qjt.forEach(t),ZPr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=n(PL,"CODE",{});var jjt=s(MCe);eBr=r(jjt,"pretrained_model_name_or_path"),jjt.forEach(t),oBr=r(PL,":"),PL.forEach(t),rBr=i(Jl),ECe=n(Jl,"UL",{});var Djt=s(ECe);d5=n(Djt,"LI",{});var sOe=s(d5);CCe=n(sOe,"STRONG",{});var Gjt=s(CCe);tBr=r(Gjt,"tapas"),Gjt.forEach(t),aBr=r(sOe," \u2014 "),MZ=n(sOe,"A",{href:!0});var Ojt=s(MZ);nBr=r(Ojt,"TFTapasForQuestionAnswering"),Ojt.forEach(t),sBr=r(sOe," (TAPAS model)"),sOe.forEach(t),Djt.forEach(t),lBr=i(Jl),T(c5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),CWe=i(f),qc=n(f,"H2",{class:!0});var RHe=s(qc);f5=n(RHe,"A",{id:!0,class:!0,href:!0});var Vjt=s(f5);wCe=n(Vjt,"SPAN",{});var Xjt=s(wCe);T(e$.$$.fragment,Xjt),Xjt.forEach(t),Vjt.forEach(t),iBr=i(RHe),ACe=n(RHe,"SPAN",{});var zjt=s(ACe);dBr=r(zjt,"TFAutoModelForTokenClassification"),zjt.forEach(t),RHe.forEach(t),wWe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(o$.$$.fragment,Yl),cBr=i(Yl),jc=n(Yl,"P",{});var Eae=s(jc);fBr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EZ=n(Eae,"A",{href:!0});var Wjt=s(EZ);mBr=r(Wjt,"from_pretrained()"),Wjt.forEach(t),gBr=r(Eae," class method or the "),CZ=n(Eae,"A",{href:!0});var Qjt=s(CZ);hBr=r(Qjt,"from_config()"),Qjt.forEach(t),pBr=r(Eae,` class
method.`),Eae.forEach(t),_Br=i(Yl),r$=n(Yl,"P",{});var PHe=s(r$);uBr=r(PHe,"This class cannot be instantiated directly using "),LCe=n(PHe,"CODE",{});var Hjt=s(LCe);bBr=r(Hjt,"__init__()"),Hjt.forEach(t),vBr=r(PHe," (throws an error)."),PHe.forEach(t),FBr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var BL=s(Vt);T(t$.$$.fragment,BL),TBr=i(BL),yCe=n(BL,"P",{});var Ujt=s(yCe);MBr=r(Ujt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ujt.forEach(t),EBr=i(BL),Dc=n(BL,"P",{});var Cae=s(Dc);CBr=r(Cae,`Note:
Loading a model from its configuration file does `),xCe=n(Cae,"STRONG",{});var Jjt=s(xCe);wBr=r(Jjt,"not"),Jjt.forEach(t),ABr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(Cae,"A",{href:!0});var Yjt=s(wZ);LBr=r(Yjt,"from_pretrained()"),Yjt.forEach(t),yBr=r(Cae," to load the model weights."),Cae.forEach(t),xBr=i(BL),T(m5.$$.fragment,BL),BL.forEach(t),$Br=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(a$.$$.fragment,Kl),kBr=i(Kl),$Ce=n(Kl,"P",{});var Kjt=s($Ce);SBr=r(Kjt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Kjt.forEach(t),RBr=i(Kl),bn=n(Kl,"P",{});var IL=s(bn);PBr=r(IL,"The model class to instantiate is selected based on the "),kCe=n(IL,"CODE",{});var Zjt=s(kCe);BBr=r(Zjt,"model_type"),Zjt.forEach(t),IBr=r(IL,` property of the config object (either
passed as an argument or loaded from `),SCe=n(IL,"CODE",{});var eDt=s(SCe);NBr=r(eDt,"pretrained_model_name_or_path"),eDt.forEach(t),qBr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=n(IL,"CODE",{});var oDt=s(RCe);jBr=r(oDt,"pretrained_model_name_or_path"),oDt.forEach(t),DBr=r(IL,":"),IL.forEach(t),GBr=i(Kl),de=n(Kl,"UL",{});var he=s(de);g5=n(he,"LI",{});var lOe=s(g5);PCe=n(lOe,"STRONG",{});var rDt=s(PCe);OBr=r(rDt,"albert"),rDt.forEach(t),VBr=r(lOe," \u2014 "),AZ=n(lOe,"A",{href:!0});var tDt=s(AZ);XBr=r(tDt,"TFAlbertForTokenClassification"),tDt.forEach(t),zBr=r(lOe," (ALBERT model)"),lOe.forEach(t),WBr=i(he),h5=n(he,"LI",{});var iOe=s(h5);BCe=n(iOe,"STRONG",{});var aDt=s(BCe);QBr=r(aDt,"bert"),aDt.forEach(t),HBr=r(iOe," \u2014 "),LZ=n(iOe,"A",{href:!0});var nDt=s(LZ);UBr=r(nDt,"TFBertForTokenClassification"),nDt.forEach(t),JBr=r(iOe," (BERT model)"),iOe.forEach(t),YBr=i(he),p5=n(he,"LI",{});var dOe=s(p5);ICe=n(dOe,"STRONG",{});var sDt=s(ICe);KBr=r(sDt,"camembert"),sDt.forEach(t),ZBr=r(dOe," \u2014 "),yZ=n(dOe,"A",{href:!0});var lDt=s(yZ);eIr=r(lDt,"TFCamembertForTokenClassification"),lDt.forEach(t),oIr=r(dOe," (CamemBERT model)"),dOe.forEach(t),rIr=i(he),_5=n(he,"LI",{});var cOe=s(_5);NCe=n(cOe,"STRONG",{});var iDt=s(NCe);tIr=r(iDt,"convbert"),iDt.forEach(t),aIr=r(cOe," \u2014 "),xZ=n(cOe,"A",{href:!0});var dDt=s(xZ);nIr=r(dDt,"TFConvBertForTokenClassification"),dDt.forEach(t),sIr=r(cOe," (ConvBERT model)"),cOe.forEach(t),lIr=i(he),u5=n(he,"LI",{});var fOe=s(u5);qCe=n(fOe,"STRONG",{});var cDt=s(qCe);iIr=r(cDt,"deberta"),cDt.forEach(t),dIr=r(fOe," \u2014 "),$Z=n(fOe,"A",{href:!0});var fDt=s($Z);cIr=r(fDt,"TFDebertaForTokenClassification"),fDt.forEach(t),fIr=r(fOe," (DeBERTa model)"),fOe.forEach(t),mIr=i(he),b5=n(he,"LI",{});var mOe=s(b5);jCe=n(mOe,"STRONG",{});var mDt=s(jCe);gIr=r(mDt,"deberta-v2"),mDt.forEach(t),hIr=r(mOe," \u2014 "),kZ=n(mOe,"A",{href:!0});var gDt=s(kZ);pIr=r(gDt,"TFDebertaV2ForTokenClassification"),gDt.forEach(t),_Ir=r(mOe," (DeBERTa-v2 model)"),mOe.forEach(t),uIr=i(he),v5=n(he,"LI",{});var gOe=s(v5);DCe=n(gOe,"STRONG",{});var hDt=s(DCe);bIr=r(hDt,"distilbert"),hDt.forEach(t),vIr=r(gOe," \u2014 "),SZ=n(gOe,"A",{href:!0});var pDt=s(SZ);FIr=r(pDt,"TFDistilBertForTokenClassification"),pDt.forEach(t),TIr=r(gOe," (DistilBERT model)"),gOe.forEach(t),MIr=i(he),F5=n(he,"LI",{});var hOe=s(F5);GCe=n(hOe,"STRONG",{});var _Dt=s(GCe);EIr=r(_Dt,"electra"),_Dt.forEach(t),CIr=r(hOe," \u2014 "),RZ=n(hOe,"A",{href:!0});var uDt=s(RZ);wIr=r(uDt,"TFElectraForTokenClassification"),uDt.forEach(t),AIr=r(hOe," (ELECTRA model)"),hOe.forEach(t),LIr=i(he),T5=n(he,"LI",{});var pOe=s(T5);OCe=n(pOe,"STRONG",{});var bDt=s(OCe);yIr=r(bDt,"flaubert"),bDt.forEach(t),xIr=r(pOe," \u2014 "),PZ=n(pOe,"A",{href:!0});var vDt=s(PZ);$Ir=r(vDt,"TFFlaubertForTokenClassification"),vDt.forEach(t),kIr=r(pOe," (FlauBERT model)"),pOe.forEach(t),SIr=i(he),M5=n(he,"LI",{});var _Oe=s(M5);VCe=n(_Oe,"STRONG",{});var FDt=s(VCe);RIr=r(FDt,"funnel"),FDt.forEach(t),PIr=r(_Oe," \u2014 "),BZ=n(_Oe,"A",{href:!0});var TDt=s(BZ);BIr=r(TDt,"TFFunnelForTokenClassification"),TDt.forEach(t),IIr=r(_Oe," (Funnel Transformer model)"),_Oe.forEach(t),NIr=i(he),E5=n(he,"LI",{});var uOe=s(E5);XCe=n(uOe,"STRONG",{});var MDt=s(XCe);qIr=r(MDt,"layoutlm"),MDt.forEach(t),jIr=r(uOe," \u2014 "),IZ=n(uOe,"A",{href:!0});var EDt=s(IZ);DIr=r(EDt,"TFLayoutLMForTokenClassification"),EDt.forEach(t),GIr=r(uOe," (LayoutLM model)"),uOe.forEach(t),OIr=i(he),C5=n(he,"LI",{});var bOe=s(C5);zCe=n(bOe,"STRONG",{});var CDt=s(zCe);VIr=r(CDt,"longformer"),CDt.forEach(t),XIr=r(bOe," \u2014 "),NZ=n(bOe,"A",{href:!0});var wDt=s(NZ);zIr=r(wDt,"TFLongformerForTokenClassification"),wDt.forEach(t),WIr=r(bOe," (Longformer model)"),bOe.forEach(t),QIr=i(he),w5=n(he,"LI",{});var vOe=s(w5);WCe=n(vOe,"STRONG",{});var ADt=s(WCe);HIr=r(ADt,"mobilebert"),ADt.forEach(t),UIr=r(vOe," \u2014 "),qZ=n(vOe,"A",{href:!0});var LDt=s(qZ);JIr=r(LDt,"TFMobileBertForTokenClassification"),LDt.forEach(t),YIr=r(vOe," (MobileBERT model)"),vOe.forEach(t),KIr=i(he),A5=n(he,"LI",{});var FOe=s(A5);QCe=n(FOe,"STRONG",{});var yDt=s(QCe);ZIr=r(yDt,"mpnet"),yDt.forEach(t),eNr=r(FOe," \u2014 "),jZ=n(FOe,"A",{href:!0});var xDt=s(jZ);oNr=r(xDt,"TFMPNetForTokenClassification"),xDt.forEach(t),rNr=r(FOe," (MPNet model)"),FOe.forEach(t),tNr=i(he),L5=n(he,"LI",{});var TOe=s(L5);HCe=n(TOe,"STRONG",{});var $Dt=s(HCe);aNr=r($Dt,"rembert"),$Dt.forEach(t),nNr=r(TOe," \u2014 "),DZ=n(TOe,"A",{href:!0});var kDt=s(DZ);sNr=r(kDt,"TFRemBertForTokenClassification"),kDt.forEach(t),lNr=r(TOe," (RemBERT model)"),TOe.forEach(t),iNr=i(he),y5=n(he,"LI",{});var MOe=s(y5);UCe=n(MOe,"STRONG",{});var SDt=s(UCe);dNr=r(SDt,"roberta"),SDt.forEach(t),cNr=r(MOe," \u2014 "),GZ=n(MOe,"A",{href:!0});var RDt=s(GZ);fNr=r(RDt,"TFRobertaForTokenClassification"),RDt.forEach(t),mNr=r(MOe," (RoBERTa model)"),MOe.forEach(t),gNr=i(he),x5=n(he,"LI",{});var EOe=s(x5);JCe=n(EOe,"STRONG",{});var PDt=s(JCe);hNr=r(PDt,"roformer"),PDt.forEach(t),pNr=r(EOe," \u2014 "),OZ=n(EOe,"A",{href:!0});var BDt=s(OZ);_Nr=r(BDt,"TFRoFormerForTokenClassification"),BDt.forEach(t),uNr=r(EOe," (RoFormer model)"),EOe.forEach(t),bNr=i(he),$5=n(he,"LI",{});var COe=s($5);YCe=n(COe,"STRONG",{});var IDt=s(YCe);vNr=r(IDt,"xlm"),IDt.forEach(t),FNr=r(COe," \u2014 "),VZ=n(COe,"A",{href:!0});var NDt=s(VZ);TNr=r(NDt,"TFXLMForTokenClassification"),NDt.forEach(t),MNr=r(COe," (XLM model)"),COe.forEach(t),ENr=i(he),k5=n(he,"LI",{});var wOe=s(k5);KCe=n(wOe,"STRONG",{});var qDt=s(KCe);CNr=r(qDt,"xlm-roberta"),qDt.forEach(t),wNr=r(wOe," \u2014 "),XZ=n(wOe,"A",{href:!0});var jDt=s(XZ);ANr=r(jDt,"TFXLMRobertaForTokenClassification"),jDt.forEach(t),LNr=r(wOe," (XLM-RoBERTa model)"),wOe.forEach(t),yNr=i(he),S5=n(he,"LI",{});var AOe=s(S5);ZCe=n(AOe,"STRONG",{});var DDt=s(ZCe);xNr=r(DDt,"xlnet"),DDt.forEach(t),$Nr=r(AOe," \u2014 "),zZ=n(AOe,"A",{href:!0});var GDt=s(zZ);kNr=r(GDt,"TFXLNetForTokenClassification"),GDt.forEach(t),SNr=r(AOe," (XLNet model)"),AOe.forEach(t),he.forEach(t),RNr=i(Kl),T(R5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),AWe=i(f),Gc=n(f,"H2",{class:!0});var BHe=s(Gc);P5=n(BHe,"A",{id:!0,class:!0,href:!0});var ODt=s(P5);e5e=n(ODt,"SPAN",{});var VDt=s(e5e);T(n$.$$.fragment,VDt),VDt.forEach(t),ODt.forEach(t),PNr=i(BHe),o5e=n(BHe,"SPAN",{});var XDt=s(o5e);BNr=r(XDt,"TFAutoModelForQuestionAnswering"),XDt.forEach(t),BHe.forEach(t),LWe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(s$.$$.fragment,Zl),INr=i(Zl),Oc=n(Zl,"P",{});var wae=s(Oc);NNr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WZ=n(wae,"A",{href:!0});var zDt=s(WZ);qNr=r(zDt,"from_pretrained()"),zDt.forEach(t),jNr=r(wae," class method or the "),QZ=n(wae,"A",{href:!0});var WDt=s(QZ);DNr=r(WDt,"from_config()"),WDt.forEach(t),GNr=r(wae,` class
method.`),wae.forEach(t),ONr=i(Zl),l$=n(Zl,"P",{});var IHe=s(l$);VNr=r(IHe,"This class cannot be instantiated directly using "),r5e=n(IHe,"CODE",{});var QDt=s(r5e);XNr=r(QDt,"__init__()"),QDt.forEach(t),zNr=r(IHe," (throws an error)."),IHe.forEach(t),WNr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var NL=s(Xt);T(i$.$$.fragment,NL),QNr=i(NL),t5e=n(NL,"P",{});var HDt=s(t5e);HNr=r(HDt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HDt.forEach(t),UNr=i(NL),Vc=n(NL,"P",{});var Aae=s(Vc);JNr=r(Aae,`Note:
Loading a model from its configuration file does `),a5e=n(Aae,"STRONG",{});var UDt=s(a5e);YNr=r(UDt,"not"),UDt.forEach(t),KNr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(Aae,"A",{href:!0});var JDt=s(HZ);ZNr=r(JDt,"from_pretrained()"),JDt.forEach(t),eqr=r(Aae," to load the model weights."),Aae.forEach(t),oqr=i(NL),T(B5.$$.fragment,NL),NL.forEach(t),rqr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(d$.$$.fragment,ei),tqr=i(ei),n5e=n(ei,"P",{});var YDt=s(n5e);aqr=r(YDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YDt.forEach(t),nqr=i(ei),vn=n(ei,"P",{});var qL=s(vn);sqr=r(qL,"The model class to instantiate is selected based on the "),s5e=n(qL,"CODE",{});var KDt=s(s5e);lqr=r(KDt,"model_type"),KDt.forEach(t),iqr=r(qL,` property of the config object (either
passed as an argument or loaded from `),l5e=n(qL,"CODE",{});var ZDt=s(l5e);dqr=r(ZDt,"pretrained_model_name_or_path"),ZDt.forEach(t),cqr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(qL,"CODE",{});var eGt=s(i5e);fqr=r(eGt,"pretrained_model_name_or_path"),eGt.forEach(t),mqr=r(qL,":"),qL.forEach(t),gqr=i(ei),ce=n(ei,"UL",{});var pe=s(ce);I5=n(pe,"LI",{});var LOe=s(I5);d5e=n(LOe,"STRONG",{});var oGt=s(d5e);hqr=r(oGt,"albert"),oGt.forEach(t),pqr=r(LOe," \u2014 "),UZ=n(LOe,"A",{href:!0});var rGt=s(UZ);_qr=r(rGt,"TFAlbertForQuestionAnswering"),rGt.forEach(t),uqr=r(LOe," (ALBERT model)"),LOe.forEach(t),bqr=i(pe),N5=n(pe,"LI",{});var yOe=s(N5);c5e=n(yOe,"STRONG",{});var tGt=s(c5e);vqr=r(tGt,"bert"),tGt.forEach(t),Fqr=r(yOe," \u2014 "),JZ=n(yOe,"A",{href:!0});var aGt=s(JZ);Tqr=r(aGt,"TFBertForQuestionAnswering"),aGt.forEach(t),Mqr=r(yOe," (BERT model)"),yOe.forEach(t),Eqr=i(pe),q5=n(pe,"LI",{});var xOe=s(q5);f5e=n(xOe,"STRONG",{});var nGt=s(f5e);Cqr=r(nGt,"camembert"),nGt.forEach(t),wqr=r(xOe," \u2014 "),YZ=n(xOe,"A",{href:!0});var sGt=s(YZ);Aqr=r(sGt,"TFCamembertForQuestionAnswering"),sGt.forEach(t),Lqr=r(xOe," (CamemBERT model)"),xOe.forEach(t),yqr=i(pe),j5=n(pe,"LI",{});var $Oe=s(j5);m5e=n($Oe,"STRONG",{});var lGt=s(m5e);xqr=r(lGt,"convbert"),lGt.forEach(t),$qr=r($Oe," \u2014 "),KZ=n($Oe,"A",{href:!0});var iGt=s(KZ);kqr=r(iGt,"TFConvBertForQuestionAnswering"),iGt.forEach(t),Sqr=r($Oe," (ConvBERT model)"),$Oe.forEach(t),Rqr=i(pe),D5=n(pe,"LI",{});var kOe=s(D5);g5e=n(kOe,"STRONG",{});var dGt=s(g5e);Pqr=r(dGt,"deberta"),dGt.forEach(t),Bqr=r(kOe," \u2014 "),ZZ=n(kOe,"A",{href:!0});var cGt=s(ZZ);Iqr=r(cGt,"TFDebertaForQuestionAnswering"),cGt.forEach(t),Nqr=r(kOe," (DeBERTa model)"),kOe.forEach(t),qqr=i(pe),G5=n(pe,"LI",{});var SOe=s(G5);h5e=n(SOe,"STRONG",{});var fGt=s(h5e);jqr=r(fGt,"deberta-v2"),fGt.forEach(t),Dqr=r(SOe," \u2014 "),eee=n(SOe,"A",{href:!0});var mGt=s(eee);Gqr=r(mGt,"TFDebertaV2ForQuestionAnswering"),mGt.forEach(t),Oqr=r(SOe," (DeBERTa-v2 model)"),SOe.forEach(t),Vqr=i(pe),O5=n(pe,"LI",{});var ROe=s(O5);p5e=n(ROe,"STRONG",{});var gGt=s(p5e);Xqr=r(gGt,"distilbert"),gGt.forEach(t),zqr=r(ROe," \u2014 "),oee=n(ROe,"A",{href:!0});var hGt=s(oee);Wqr=r(hGt,"TFDistilBertForQuestionAnswering"),hGt.forEach(t),Qqr=r(ROe," (DistilBERT model)"),ROe.forEach(t),Hqr=i(pe),V5=n(pe,"LI",{});var POe=s(V5);_5e=n(POe,"STRONG",{});var pGt=s(_5e);Uqr=r(pGt,"electra"),pGt.forEach(t),Jqr=r(POe," \u2014 "),ree=n(POe,"A",{href:!0});var _Gt=s(ree);Yqr=r(_Gt,"TFElectraForQuestionAnswering"),_Gt.forEach(t),Kqr=r(POe," (ELECTRA model)"),POe.forEach(t),Zqr=i(pe),X5=n(pe,"LI",{});var BOe=s(X5);u5e=n(BOe,"STRONG",{});var uGt=s(u5e);ejr=r(uGt,"flaubert"),uGt.forEach(t),ojr=r(BOe," \u2014 "),tee=n(BOe,"A",{href:!0});var bGt=s(tee);rjr=r(bGt,"TFFlaubertForQuestionAnsweringSimple"),bGt.forEach(t),tjr=r(BOe," (FlauBERT model)"),BOe.forEach(t),ajr=i(pe),z5=n(pe,"LI",{});var IOe=s(z5);b5e=n(IOe,"STRONG",{});var vGt=s(b5e);njr=r(vGt,"funnel"),vGt.forEach(t),sjr=r(IOe," \u2014 "),aee=n(IOe,"A",{href:!0});var FGt=s(aee);ljr=r(FGt,"TFFunnelForQuestionAnswering"),FGt.forEach(t),ijr=r(IOe," (Funnel Transformer model)"),IOe.forEach(t),djr=i(pe),W5=n(pe,"LI",{});var NOe=s(W5);v5e=n(NOe,"STRONG",{});var TGt=s(v5e);cjr=r(TGt,"gptj"),TGt.forEach(t),fjr=r(NOe," \u2014 "),nee=n(NOe,"A",{href:!0});var MGt=s(nee);mjr=r(MGt,"TFGPTJForQuestionAnswering"),MGt.forEach(t),gjr=r(NOe," (GPT-J model)"),NOe.forEach(t),hjr=i(pe),Q5=n(pe,"LI",{});var qOe=s(Q5);F5e=n(qOe,"STRONG",{});var EGt=s(F5e);pjr=r(EGt,"longformer"),EGt.forEach(t),_jr=r(qOe," \u2014 "),see=n(qOe,"A",{href:!0});var CGt=s(see);ujr=r(CGt,"TFLongformerForQuestionAnswering"),CGt.forEach(t),bjr=r(qOe," (Longformer model)"),qOe.forEach(t),vjr=i(pe),H5=n(pe,"LI",{});var jOe=s(H5);T5e=n(jOe,"STRONG",{});var wGt=s(T5e);Fjr=r(wGt,"mobilebert"),wGt.forEach(t),Tjr=r(jOe," \u2014 "),lee=n(jOe,"A",{href:!0});var AGt=s(lee);Mjr=r(AGt,"TFMobileBertForQuestionAnswering"),AGt.forEach(t),Ejr=r(jOe," (MobileBERT model)"),jOe.forEach(t),Cjr=i(pe),U5=n(pe,"LI",{});var DOe=s(U5);M5e=n(DOe,"STRONG",{});var LGt=s(M5e);wjr=r(LGt,"mpnet"),LGt.forEach(t),Ajr=r(DOe," \u2014 "),iee=n(DOe,"A",{href:!0});var yGt=s(iee);Ljr=r(yGt,"TFMPNetForQuestionAnswering"),yGt.forEach(t),yjr=r(DOe," (MPNet model)"),DOe.forEach(t),xjr=i(pe),J5=n(pe,"LI",{});var GOe=s(J5);E5e=n(GOe,"STRONG",{});var xGt=s(E5e);$jr=r(xGt,"rembert"),xGt.forEach(t),kjr=r(GOe," \u2014 "),dee=n(GOe,"A",{href:!0});var $Gt=s(dee);Sjr=r($Gt,"TFRemBertForQuestionAnswering"),$Gt.forEach(t),Rjr=r(GOe," (RemBERT model)"),GOe.forEach(t),Pjr=i(pe),Y5=n(pe,"LI",{});var OOe=s(Y5);C5e=n(OOe,"STRONG",{});var kGt=s(C5e);Bjr=r(kGt,"roberta"),kGt.forEach(t),Ijr=r(OOe," \u2014 "),cee=n(OOe,"A",{href:!0});var SGt=s(cee);Njr=r(SGt,"TFRobertaForQuestionAnswering"),SGt.forEach(t),qjr=r(OOe," (RoBERTa model)"),OOe.forEach(t),jjr=i(pe),K5=n(pe,"LI",{});var VOe=s(K5);w5e=n(VOe,"STRONG",{});var RGt=s(w5e);Djr=r(RGt,"roformer"),RGt.forEach(t),Gjr=r(VOe," \u2014 "),fee=n(VOe,"A",{href:!0});var PGt=s(fee);Ojr=r(PGt,"TFRoFormerForQuestionAnswering"),PGt.forEach(t),Vjr=r(VOe," (RoFormer model)"),VOe.forEach(t),Xjr=i(pe),Z5=n(pe,"LI",{});var XOe=s(Z5);A5e=n(XOe,"STRONG",{});var BGt=s(A5e);zjr=r(BGt,"xlm"),BGt.forEach(t),Wjr=r(XOe," \u2014 "),mee=n(XOe,"A",{href:!0});var IGt=s(mee);Qjr=r(IGt,"TFXLMForQuestionAnsweringSimple"),IGt.forEach(t),Hjr=r(XOe," (XLM model)"),XOe.forEach(t),Ujr=i(pe),e3=n(pe,"LI",{});var zOe=s(e3);L5e=n(zOe,"STRONG",{});var NGt=s(L5e);Jjr=r(NGt,"xlm-roberta"),NGt.forEach(t),Yjr=r(zOe," \u2014 "),gee=n(zOe,"A",{href:!0});var qGt=s(gee);Kjr=r(qGt,"TFXLMRobertaForQuestionAnswering"),qGt.forEach(t),Zjr=r(zOe," (XLM-RoBERTa model)"),zOe.forEach(t),eDr=i(pe),o3=n(pe,"LI",{});var WOe=s(o3);y5e=n(WOe,"STRONG",{});var jGt=s(y5e);oDr=r(jGt,"xlnet"),jGt.forEach(t),rDr=r(WOe," \u2014 "),hee=n(WOe,"A",{href:!0});var DGt=s(hee);tDr=r(DGt,"TFXLNetForQuestionAnsweringSimple"),DGt.forEach(t),aDr=r(WOe," (XLNet model)"),WOe.forEach(t),pe.forEach(t),nDr=i(ei),T(r3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),yWe=i(f),Xc=n(f,"H2",{class:!0});var NHe=s(Xc);t3=n(NHe,"A",{id:!0,class:!0,href:!0});var GGt=s(t3);x5e=n(GGt,"SPAN",{});var OGt=s(x5e);T(c$.$$.fragment,OGt),OGt.forEach(t),GGt.forEach(t),sDr=i(NHe),$5e=n(NHe,"SPAN",{});var VGt=s($5e);lDr=r(VGt,"TFAutoModelForVision2Seq"),VGt.forEach(t),NHe.forEach(t),xWe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(f$.$$.fragment,oi),iDr=i(oi),zc=n(oi,"P",{});var Lae=s(zc);dDr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pee=n(Lae,"A",{href:!0});var XGt=s(pee);cDr=r(XGt,"from_pretrained()"),XGt.forEach(t),fDr=r(Lae," class method or the "),_ee=n(Lae,"A",{href:!0});var zGt=s(_ee);mDr=r(zGt,"from_config()"),zGt.forEach(t),gDr=r(Lae,` class
method.`),Lae.forEach(t),hDr=i(oi),m$=n(oi,"P",{});var qHe=s(m$);pDr=r(qHe,"This class cannot be instantiated directly using "),k5e=n(qHe,"CODE",{});var WGt=s(k5e);_Dr=r(WGt,"__init__()"),WGt.forEach(t),uDr=r(qHe," (throws an error)."),qHe.forEach(t),bDr=i(oi),zt=n(oi,"DIV",{class:!0});var jL=s(zt);T(g$.$$.fragment,jL),vDr=i(jL),S5e=n(jL,"P",{});var QGt=s(S5e);FDr=r(QGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QGt.forEach(t),TDr=i(jL),Wc=n(jL,"P",{});var yae=s(Wc);MDr=r(yae,`Note:
Loading a model from its configuration file does `),R5e=n(yae,"STRONG",{});var HGt=s(R5e);EDr=r(HGt,"not"),HGt.forEach(t),CDr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=n(yae,"A",{href:!0});var UGt=s(uee);wDr=r(UGt,"from_pretrained()"),UGt.forEach(t),ADr=r(yae," to load the model weights."),yae.forEach(t),LDr=i(jL),T(a3.$$.fragment,jL),jL.forEach(t),yDr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(h$.$$.fragment,ri),xDr=i(ri),P5e=n(ri,"P",{});var JGt=s(P5e);$Dr=r(JGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JGt.forEach(t),kDr=i(ri),Fn=n(ri,"P",{});var DL=s(Fn);SDr=r(DL,"The model class to instantiate is selected based on the "),B5e=n(DL,"CODE",{});var YGt=s(B5e);RDr=r(YGt,"model_type"),YGt.forEach(t),PDr=r(DL,` property of the config object (either
passed as an argument or loaded from `),I5e=n(DL,"CODE",{});var KGt=s(I5e);BDr=r(KGt,"pretrained_model_name_or_path"),KGt.forEach(t),IDr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(DL,"CODE",{});var ZGt=s(N5e);NDr=r(ZGt,"pretrained_model_name_or_path"),ZGt.forEach(t),qDr=r(DL,":"),DL.forEach(t),jDr=i(ri),q5e=n(ri,"UL",{});var eOt=s(q5e);n3=n(eOt,"LI",{});var QOe=s(n3);j5e=n(QOe,"STRONG",{});var oOt=s(j5e);DDr=r(oOt,"vision-encoder-decoder"),oOt.forEach(t),GDr=r(QOe," \u2014 "),bee=n(QOe,"A",{href:!0});var rOt=s(bee);ODr=r(rOt,"TFVisionEncoderDecoderModel"),rOt.forEach(t),VDr=r(QOe," (Vision Encoder decoder model)"),QOe.forEach(t),eOt.forEach(t),XDr=i(ri),T(s3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),$We=i(f),Qc=n(f,"H2",{class:!0});var jHe=s(Qc);l3=n(jHe,"A",{id:!0,class:!0,href:!0});var tOt=s(l3);D5e=n(tOt,"SPAN",{});var aOt=s(D5e);T(p$.$$.fragment,aOt),aOt.forEach(t),tOt.forEach(t),zDr=i(jHe),G5e=n(jHe,"SPAN",{});var nOt=s(G5e);WDr=r(nOt,"TFAutoModelForSpeechSeq2Seq"),nOt.forEach(t),jHe.forEach(t),kWe=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(_$.$$.fragment,ti),QDr=i(ti),Hc=n(ti,"P",{});var xae=s(Hc);HDr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vee=n(xae,"A",{href:!0});var sOt=s(vee);UDr=r(sOt,"from_pretrained()"),sOt.forEach(t),JDr=r(xae," class method or the "),Fee=n(xae,"A",{href:!0});var lOt=s(Fee);YDr=r(lOt,"from_config()"),lOt.forEach(t),KDr=r(xae,` class
method.`),xae.forEach(t),ZDr=i(ti),u$=n(ti,"P",{});var DHe=s(u$);eGr=r(DHe,"This class cannot be instantiated directly using "),O5e=n(DHe,"CODE",{});var iOt=s(O5e);oGr=r(iOt,"__init__()"),iOt.forEach(t),rGr=r(DHe," (throws an error)."),DHe.forEach(t),tGr=i(ti),Wt=n(ti,"DIV",{class:!0});var GL=s(Wt);T(b$.$$.fragment,GL),aGr=i(GL),V5e=n(GL,"P",{});var dOt=s(V5e);nGr=r(dOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dOt.forEach(t),sGr=i(GL),Uc=n(GL,"P",{});var $ae=s(Uc);lGr=r($ae,`Note:
Loading a model from its configuration file does `),X5e=n($ae,"STRONG",{});var cOt=s(X5e);iGr=r(cOt,"not"),cOt.forEach(t),dGr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=n($ae,"A",{href:!0});var fOt=s(Tee);cGr=r(fOt,"from_pretrained()"),fOt.forEach(t),fGr=r($ae," to load the model weights."),$ae.forEach(t),mGr=i(GL),T(i3.$$.fragment,GL),GL.forEach(t),gGr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(v$.$$.fragment,ai),hGr=i(ai),z5e=n(ai,"P",{});var mOt=s(z5e);pGr=r(mOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mOt.forEach(t),_Gr=i(ai),Tn=n(ai,"P",{});var OL=s(Tn);uGr=r(OL,"The model class to instantiate is selected based on the "),W5e=n(OL,"CODE",{});var gOt=s(W5e);bGr=r(gOt,"model_type"),gOt.forEach(t),vGr=r(OL,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(OL,"CODE",{});var hOt=s(Q5e);FGr=r(hOt,"pretrained_model_name_or_path"),hOt.forEach(t),TGr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(OL,"CODE",{});var pOt=s(H5e);MGr=r(pOt,"pretrained_model_name_or_path"),pOt.forEach(t),EGr=r(OL,":"),OL.forEach(t),CGr=i(ai),U5e=n(ai,"UL",{});var _Ot=s(U5e);d3=n(_Ot,"LI",{});var HOe=s(d3);J5e=n(HOe,"STRONG",{});var uOt=s(J5e);wGr=r(uOt,"speech_to_text"),uOt.forEach(t),AGr=r(HOe," \u2014 "),Mee=n(HOe,"A",{href:!0});var bOt=s(Mee);LGr=r(bOt,"TFSpeech2TextForConditionalGeneration"),bOt.forEach(t),yGr=r(HOe," (Speech2Text model)"),HOe.forEach(t),_Ot.forEach(t),xGr=i(ai),T(c3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),SWe=i(f),Jc=n(f,"H2",{class:!0});var GHe=s(Jc);f3=n(GHe,"A",{id:!0,class:!0,href:!0});var vOt=s(f3);Y5e=n(vOt,"SPAN",{});var FOt=s(Y5e);T(F$.$$.fragment,FOt),FOt.forEach(t),vOt.forEach(t),$Gr=i(GHe),K5e=n(GHe,"SPAN",{});var TOt=s(K5e);kGr=r(TOt,"FlaxAutoModel"),TOt.forEach(t),GHe.forEach(t),RWe=i(f),ur=n(f,"DIV",{class:!0});var ni=s(ur);T(T$.$$.fragment,ni),SGr=i(ni),Yc=n(ni,"P",{});var kae=s(Yc);RGr=r(kae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Eee=n(kae,"A",{href:!0});var MOt=s(Eee);PGr=r(MOt,"from_pretrained()"),MOt.forEach(t),BGr=r(kae," class method or the "),Cee=n(kae,"A",{href:!0});var EOt=s(Cee);IGr=r(EOt,"from_config()"),EOt.forEach(t),NGr=r(kae,` class
method.`),kae.forEach(t),qGr=i(ni),M$=n(ni,"P",{});var OHe=s(M$);jGr=r(OHe,"This class cannot be instantiated directly using "),Z5e=n(OHe,"CODE",{});var COt=s(Z5e);DGr=r(COt,"__init__()"),COt.forEach(t),GGr=r(OHe," (throws an error)."),OHe.forEach(t),OGr=i(ni),Qt=n(ni,"DIV",{class:!0});var VL=s(Qt);T(E$.$$.fragment,VL),VGr=i(VL),e3e=n(VL,"P",{});var wOt=s(e3e);XGr=r(wOt,"Instantiates one of the base model classes of the library from a configuration."),wOt.forEach(t),zGr=i(VL),Kc=n(VL,"P",{});var Sae=s(Kc);WGr=r(Sae,`Note:
Loading a model from its configuration file does `),o3e=n(Sae,"STRONG",{});var AOt=s(o3e);QGr=r(AOt,"not"),AOt.forEach(t),HGr=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=n(Sae,"A",{href:!0});var LOt=s(wee);UGr=r(LOt,"from_pretrained()"),LOt.forEach(t),JGr=r(Sae," to load the model weights."),Sae.forEach(t),YGr=i(VL),T(m3.$$.fragment,VL),VL.forEach(t),KGr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(C$.$$.fragment,si),ZGr=i(si),r3e=n(si,"P",{});var yOt=s(r3e);eOr=r(yOt,"Instantiate one of the base model classes of the library from a pretrained model."),yOt.forEach(t),oOr=i(si),Mn=n(si,"P",{});var XL=s(Mn);rOr=r(XL,"The model class to instantiate is selected based on the "),t3e=n(XL,"CODE",{});var xOt=s(t3e);tOr=r(xOt,"model_type"),xOt.forEach(t),aOr=r(XL,` property of the config object (either
passed as an argument or loaded from `),a3e=n(XL,"CODE",{});var $Ot=s(a3e);nOr=r($Ot,"pretrained_model_name_or_path"),$Ot.forEach(t),sOr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(XL,"CODE",{});var kOt=s(n3e);lOr=r(kOt,"pretrained_model_name_or_path"),kOt.forEach(t),iOr=r(XL,":"),XL.forEach(t),dOr=i(si),oe=n(si,"UL",{});var ae=s(oe);g3=n(ae,"LI",{});var UOe=s(g3);s3e=n(UOe,"STRONG",{});var SOt=s(s3e);cOr=r(SOt,"albert"),SOt.forEach(t),fOr=r(UOe," \u2014 "),Aee=n(UOe,"A",{href:!0});var ROt=s(Aee);mOr=r(ROt,"FlaxAlbertModel"),ROt.forEach(t),gOr=r(UOe," (ALBERT model)"),UOe.forEach(t),hOr=i(ae),h3=n(ae,"LI",{});var JOe=s(h3);l3e=n(JOe,"STRONG",{});var POt=s(l3e);pOr=r(POt,"bart"),POt.forEach(t),_Or=r(JOe," \u2014 "),Lee=n(JOe,"A",{href:!0});var BOt=s(Lee);uOr=r(BOt,"FlaxBartModel"),BOt.forEach(t),bOr=r(JOe," (BART model)"),JOe.forEach(t),vOr=i(ae),p3=n(ae,"LI",{});var YOe=s(p3);i3e=n(YOe,"STRONG",{});var IOt=s(i3e);FOr=r(IOt,"beit"),IOt.forEach(t),TOr=r(YOe," \u2014 "),yee=n(YOe,"A",{href:!0});var NOt=s(yee);MOr=r(NOt,"FlaxBeitModel"),NOt.forEach(t),EOr=r(YOe," (BEiT model)"),YOe.forEach(t),COr=i(ae),_3=n(ae,"LI",{});var KOe=s(_3);d3e=n(KOe,"STRONG",{});var qOt=s(d3e);wOr=r(qOt,"bert"),qOt.forEach(t),AOr=r(KOe," \u2014 "),xee=n(KOe,"A",{href:!0});var jOt=s(xee);LOr=r(jOt,"FlaxBertModel"),jOt.forEach(t),yOr=r(KOe," (BERT model)"),KOe.forEach(t),xOr=i(ae),u3=n(ae,"LI",{});var ZOe=s(u3);c3e=n(ZOe,"STRONG",{});var DOt=s(c3e);$Or=r(DOt,"big_bird"),DOt.forEach(t),kOr=r(ZOe," \u2014 "),$ee=n(ZOe,"A",{href:!0});var GOt=s($ee);SOr=r(GOt,"FlaxBigBirdModel"),GOt.forEach(t),ROr=r(ZOe," (BigBird model)"),ZOe.forEach(t),POr=i(ae),b3=n(ae,"LI",{});var eVe=s(b3);f3e=n(eVe,"STRONG",{});var OOt=s(f3e);BOr=r(OOt,"blenderbot"),OOt.forEach(t),IOr=r(eVe," \u2014 "),kee=n(eVe,"A",{href:!0});var VOt=s(kee);NOr=r(VOt,"FlaxBlenderbotModel"),VOt.forEach(t),qOr=r(eVe," (Blenderbot model)"),eVe.forEach(t),jOr=i(ae),v3=n(ae,"LI",{});var oVe=s(v3);m3e=n(oVe,"STRONG",{});var XOt=s(m3e);DOr=r(XOt,"blenderbot-small"),XOt.forEach(t),GOr=r(oVe," \u2014 "),See=n(oVe,"A",{href:!0});var zOt=s(See);OOr=r(zOt,"FlaxBlenderbotSmallModel"),zOt.forEach(t),VOr=r(oVe," (BlenderbotSmall model)"),oVe.forEach(t),XOr=i(ae),F3=n(ae,"LI",{});var rVe=s(F3);g3e=n(rVe,"STRONG",{});var WOt=s(g3e);zOr=r(WOt,"clip"),WOt.forEach(t),WOr=r(rVe," \u2014 "),Ree=n(rVe,"A",{href:!0});var QOt=s(Ree);QOr=r(QOt,"FlaxCLIPModel"),QOt.forEach(t),HOr=r(rVe," (CLIP model)"),rVe.forEach(t),UOr=i(ae),T3=n(ae,"LI",{});var tVe=s(T3);h3e=n(tVe,"STRONG",{});var HOt=s(h3e);JOr=r(HOt,"distilbert"),HOt.forEach(t),YOr=r(tVe," \u2014 "),Pee=n(tVe,"A",{href:!0});var UOt=s(Pee);KOr=r(UOt,"FlaxDistilBertModel"),UOt.forEach(t),ZOr=r(tVe," (DistilBERT model)"),tVe.forEach(t),eVr=i(ae),M3=n(ae,"LI",{});var aVe=s(M3);p3e=n(aVe,"STRONG",{});var JOt=s(p3e);oVr=r(JOt,"electra"),JOt.forEach(t),rVr=r(aVe," \u2014 "),Bee=n(aVe,"A",{href:!0});var YOt=s(Bee);tVr=r(YOt,"FlaxElectraModel"),YOt.forEach(t),aVr=r(aVe," (ELECTRA model)"),aVe.forEach(t),nVr=i(ae),E3=n(ae,"LI",{});var nVe=s(E3);_3e=n(nVe,"STRONG",{});var KOt=s(_3e);sVr=r(KOt,"gpt2"),KOt.forEach(t),lVr=r(nVe," \u2014 "),Iee=n(nVe,"A",{href:!0});var ZOt=s(Iee);iVr=r(ZOt,"FlaxGPT2Model"),ZOt.forEach(t),dVr=r(nVe," (OpenAI GPT-2 model)"),nVe.forEach(t),cVr=i(ae),C3=n(ae,"LI",{});var sVe=s(C3);u3e=n(sVe,"STRONG",{});var eVt=s(u3e);fVr=r(eVt,"gpt_neo"),eVt.forEach(t),mVr=r(sVe," \u2014 "),Nee=n(sVe,"A",{href:!0});var oVt=s(Nee);gVr=r(oVt,"FlaxGPTNeoModel"),oVt.forEach(t),hVr=r(sVe," (GPT Neo model)"),sVe.forEach(t),pVr=i(ae),w3=n(ae,"LI",{});var lVe=s(w3);b3e=n(lVe,"STRONG",{});var rVt=s(b3e);_Vr=r(rVt,"gptj"),rVt.forEach(t),uVr=r(lVe," \u2014 "),qee=n(lVe,"A",{href:!0});var tVt=s(qee);bVr=r(tVt,"FlaxGPTJModel"),tVt.forEach(t),vVr=r(lVe," (GPT-J model)"),lVe.forEach(t),FVr=i(ae),A3=n(ae,"LI",{});var iVe=s(A3);v3e=n(iVe,"STRONG",{});var aVt=s(v3e);TVr=r(aVt,"longt5"),aVt.forEach(t),MVr=r(iVe," \u2014 "),jee=n(iVe,"A",{href:!0});var nVt=s(jee);EVr=r(nVt,"FlaxLongT5Model"),nVt.forEach(t),CVr=r(iVe," (LongT5 model)"),iVe.forEach(t),wVr=i(ae),L3=n(ae,"LI",{});var dVe=s(L3);F3e=n(dVe,"STRONG",{});var sVt=s(F3e);AVr=r(sVt,"marian"),sVt.forEach(t),LVr=r(dVe," \u2014 "),Dee=n(dVe,"A",{href:!0});var lVt=s(Dee);yVr=r(lVt,"FlaxMarianModel"),lVt.forEach(t),xVr=r(dVe," (Marian model)"),dVe.forEach(t),$Vr=i(ae),y3=n(ae,"LI",{});var cVe=s(y3);T3e=n(cVe,"STRONG",{});var iVt=s(T3e);kVr=r(iVt,"mbart"),iVt.forEach(t),SVr=r(cVe," \u2014 "),Gee=n(cVe,"A",{href:!0});var dVt=s(Gee);RVr=r(dVt,"FlaxMBartModel"),dVt.forEach(t),PVr=r(cVe," (mBART model)"),cVe.forEach(t),BVr=i(ae),x3=n(ae,"LI",{});var fVe=s(x3);M3e=n(fVe,"STRONG",{});var cVt=s(M3e);IVr=r(cVt,"mt5"),cVt.forEach(t),NVr=r(fVe," \u2014 "),Oee=n(fVe,"A",{href:!0});var fVt=s(Oee);qVr=r(fVt,"FlaxMT5Model"),fVt.forEach(t),jVr=r(fVe," (MT5 model)"),fVe.forEach(t),DVr=i(ae),$3=n(ae,"LI",{});var mVe=s($3);E3e=n(mVe,"STRONG",{});var mVt=s(E3e);GVr=r(mVt,"opt"),mVt.forEach(t),OVr=r(mVe," \u2014 "),Vee=n(mVe,"A",{href:!0});var gVt=s(Vee);VVr=r(gVt,"FlaxOPTModel"),gVt.forEach(t),XVr=r(mVe," (OPT model)"),mVe.forEach(t),zVr=i(ae),k3=n(ae,"LI",{});var gVe=s(k3);C3e=n(gVe,"STRONG",{});var hVt=s(C3e);WVr=r(hVt,"pegasus"),hVt.forEach(t),QVr=r(gVe," \u2014 "),Xee=n(gVe,"A",{href:!0});var pVt=s(Xee);HVr=r(pVt,"FlaxPegasusModel"),pVt.forEach(t),UVr=r(gVe," (Pegasus model)"),gVe.forEach(t),JVr=i(ae),S3=n(ae,"LI",{});var hVe=s(S3);w3e=n(hVe,"STRONG",{});var _Vt=s(w3e);YVr=r(_Vt,"roberta"),_Vt.forEach(t),KVr=r(hVe," \u2014 "),zee=n(hVe,"A",{href:!0});var uVt=s(zee);ZVr=r(uVt,"FlaxRobertaModel"),uVt.forEach(t),eXr=r(hVe," (RoBERTa model)"),hVe.forEach(t),oXr=i(ae),R3=n(ae,"LI",{});var pVe=s(R3);A3e=n(pVe,"STRONG",{});var bVt=s(A3e);rXr=r(bVt,"roformer"),bVt.forEach(t),tXr=r(pVe," \u2014 "),Wee=n(pVe,"A",{href:!0});var vVt=s(Wee);aXr=r(vVt,"FlaxRoFormerModel"),vVt.forEach(t),nXr=r(pVe," (RoFormer model)"),pVe.forEach(t),sXr=i(ae),P3=n(ae,"LI",{});var _Ve=s(P3);L3e=n(_Ve,"STRONG",{});var FVt=s(L3e);lXr=r(FVt,"t5"),FVt.forEach(t),iXr=r(_Ve," \u2014 "),Qee=n(_Ve,"A",{href:!0});var TVt=s(Qee);dXr=r(TVt,"FlaxT5Model"),TVt.forEach(t),cXr=r(_Ve," (T5 model)"),_Ve.forEach(t),fXr=i(ae),B3=n(ae,"LI",{});var uVe=s(B3);y3e=n(uVe,"STRONG",{});var MVt=s(y3e);mXr=r(MVt,"vision-text-dual-encoder"),MVt.forEach(t),gXr=r(uVe," \u2014 "),Hee=n(uVe,"A",{href:!0});var EVt=s(Hee);hXr=r(EVt,"FlaxVisionTextDualEncoderModel"),EVt.forEach(t),pXr=r(uVe," (VisionTextDualEncoder model)"),uVe.forEach(t),_Xr=i(ae),I3=n(ae,"LI",{});var bVe=s(I3);x3e=n(bVe,"STRONG",{});var CVt=s(x3e);uXr=r(CVt,"vit"),CVt.forEach(t),bXr=r(bVe," \u2014 "),Uee=n(bVe,"A",{href:!0});var wVt=s(Uee);vXr=r(wVt,"FlaxViTModel"),wVt.forEach(t),FXr=r(bVe," (ViT model)"),bVe.forEach(t),TXr=i(ae),N3=n(ae,"LI",{});var vVe=s(N3);$3e=n(vVe,"STRONG",{});var AVt=s($3e);MXr=r(AVt,"wav2vec2"),AVt.forEach(t),EXr=r(vVe," \u2014 "),Jee=n(vVe,"A",{href:!0});var LVt=s(Jee);CXr=r(LVt,"FlaxWav2Vec2Model"),LVt.forEach(t),wXr=r(vVe," (Wav2Vec2 model)"),vVe.forEach(t),AXr=i(ae),q3=n(ae,"LI",{});var FVe=s(q3);k3e=n(FVe,"STRONG",{});var yVt=s(k3e);LXr=r(yVt,"xglm"),yVt.forEach(t),yXr=r(FVe," \u2014 "),Yee=n(FVe,"A",{href:!0});var xVt=s(Yee);xXr=r(xVt,"FlaxXGLMModel"),xVt.forEach(t),$Xr=r(FVe," (XGLM model)"),FVe.forEach(t),kXr=i(ae),j3=n(ae,"LI",{});var TVe=s(j3);S3e=n(TVe,"STRONG",{});var $Vt=s(S3e);SXr=r($Vt,"xlm-roberta"),$Vt.forEach(t),RXr=r(TVe," \u2014 "),Kee=n(TVe,"A",{href:!0});var kVt=s(Kee);PXr=r(kVt,"FlaxXLMRobertaModel"),kVt.forEach(t),BXr=r(TVe," (XLM-RoBERTa model)"),TVe.forEach(t),ae.forEach(t),IXr=i(si),T(D3.$$.fragment,si),si.forEach(t),ni.forEach(t),PWe=i(f),Zc=n(f,"H2",{class:!0});var VHe=s(Zc);G3=n(VHe,"A",{id:!0,class:!0,href:!0});var SVt=s(G3);R3e=n(SVt,"SPAN",{});var RVt=s(R3e);T(w$.$$.fragment,RVt),RVt.forEach(t),SVt.forEach(t),NXr=i(VHe),P3e=n(VHe,"SPAN",{});var PVt=s(P3e);qXr=r(PVt,"FlaxAutoModelForCausalLM"),PVt.forEach(t),VHe.forEach(t),BWe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(A$.$$.fragment,li),jXr=i(li),ef=n(li,"P",{});var Rae=s(ef);DXr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Zee=n(Rae,"A",{href:!0});var BVt=s(Zee);GXr=r(BVt,"from_pretrained()"),BVt.forEach(t),OXr=r(Rae," class method or the "),eoe=n(Rae,"A",{href:!0});var IVt=s(eoe);VXr=r(IVt,"from_config()"),IVt.forEach(t),XXr=r(Rae,` class
method.`),Rae.forEach(t),zXr=i(li),L$=n(li,"P",{});var XHe=s(L$);WXr=r(XHe,"This class cannot be instantiated directly using "),B3e=n(XHe,"CODE",{});var NVt=s(B3e);QXr=r(NVt,"__init__()"),NVt.forEach(t),HXr=r(XHe," (throws an error)."),XHe.forEach(t),UXr=i(li),Ht=n(li,"DIV",{class:!0});var zL=s(Ht);T(y$.$$.fragment,zL),JXr=i(zL),I3e=n(zL,"P",{});var qVt=s(I3e);YXr=r(qVt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qVt.forEach(t),KXr=i(zL),of=n(zL,"P",{});var Pae=s(of);ZXr=r(Pae,`Note:
Loading a model from its configuration file does `),N3e=n(Pae,"STRONG",{});var jVt=s(N3e);ezr=r(jVt,"not"),jVt.forEach(t),ozr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=n(Pae,"A",{href:!0});var DVt=s(ooe);rzr=r(DVt,"from_pretrained()"),DVt.forEach(t),tzr=r(Pae," to load the model weights."),Pae.forEach(t),azr=i(zL),T(O3.$$.fragment,zL),zL.forEach(t),nzr=i(li),Wr=n(li,"DIV",{class:!0});var ii=s(Wr);T(x$.$$.fragment,ii),szr=i(ii),q3e=n(ii,"P",{});var GVt=s(q3e);lzr=r(GVt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GVt.forEach(t),izr=i(ii),En=n(ii,"P",{});var WL=s(En);dzr=r(WL,"The model class to instantiate is selected based on the "),j3e=n(WL,"CODE",{});var OVt=s(j3e);czr=r(OVt,"model_type"),OVt.forEach(t),fzr=r(WL,` property of the config object (either
passed as an argument or loaded from `),D3e=n(WL,"CODE",{});var VVt=s(D3e);mzr=r(VVt,"pretrained_model_name_or_path"),VVt.forEach(t),gzr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=n(WL,"CODE",{});var XVt=s(G3e);hzr=r(XVt,"pretrained_model_name_or_path"),XVt.forEach(t),pzr=r(WL,":"),WL.forEach(t),_zr=i(ii),xe=n(ii,"UL",{});var Ne=s(xe);V3=n(Ne,"LI",{});var MVe=s(V3);O3e=n(MVe,"STRONG",{});var zVt=s(O3e);uzr=r(zVt,"bart"),zVt.forEach(t),bzr=r(MVe," \u2014 "),roe=n(MVe,"A",{href:!0});var WVt=s(roe);vzr=r(WVt,"FlaxBartForCausalLM"),WVt.forEach(t),Fzr=r(MVe," (BART model)"),MVe.forEach(t),Tzr=i(Ne),X3=n(Ne,"LI",{});var EVe=s(X3);V3e=n(EVe,"STRONG",{});var QVt=s(V3e);Mzr=r(QVt,"bert"),QVt.forEach(t),Ezr=r(EVe," \u2014 "),toe=n(EVe,"A",{href:!0});var HVt=s(toe);Czr=r(HVt,"FlaxBertForCausalLM"),HVt.forEach(t),wzr=r(EVe," (BERT model)"),EVe.forEach(t),Azr=i(Ne),z3=n(Ne,"LI",{});var CVe=s(z3);X3e=n(CVe,"STRONG",{});var UVt=s(X3e);Lzr=r(UVt,"big_bird"),UVt.forEach(t),yzr=r(CVe," \u2014 "),aoe=n(CVe,"A",{href:!0});var JVt=s(aoe);xzr=r(JVt,"FlaxBigBirdForCausalLM"),JVt.forEach(t),$zr=r(CVe," (BigBird model)"),CVe.forEach(t),kzr=i(Ne),W3=n(Ne,"LI",{});var wVe=s(W3);z3e=n(wVe,"STRONG",{});var YVt=s(z3e);Szr=r(YVt,"electra"),YVt.forEach(t),Rzr=r(wVe," \u2014 "),noe=n(wVe,"A",{href:!0});var KVt=s(noe);Pzr=r(KVt,"FlaxElectraForCausalLM"),KVt.forEach(t),Bzr=r(wVe," (ELECTRA model)"),wVe.forEach(t),Izr=i(Ne),Q3=n(Ne,"LI",{});var AVe=s(Q3);W3e=n(AVe,"STRONG",{});var ZVt=s(W3e);Nzr=r(ZVt,"gpt2"),ZVt.forEach(t),qzr=r(AVe," \u2014 "),soe=n(AVe,"A",{href:!0});var eXt=s(soe);jzr=r(eXt,"FlaxGPT2LMHeadModel"),eXt.forEach(t),Dzr=r(AVe," (OpenAI GPT-2 model)"),AVe.forEach(t),Gzr=i(Ne),H3=n(Ne,"LI",{});var LVe=s(H3);Q3e=n(LVe,"STRONG",{});var oXt=s(Q3e);Ozr=r(oXt,"gpt_neo"),oXt.forEach(t),Vzr=r(LVe," \u2014 "),loe=n(LVe,"A",{href:!0});var rXt=s(loe);Xzr=r(rXt,"FlaxGPTNeoForCausalLM"),rXt.forEach(t),zzr=r(LVe," (GPT Neo model)"),LVe.forEach(t),Wzr=i(Ne),U3=n(Ne,"LI",{});var yVe=s(U3);H3e=n(yVe,"STRONG",{});var tXt=s(H3e);Qzr=r(tXt,"gptj"),tXt.forEach(t),Hzr=r(yVe," \u2014 "),ioe=n(yVe,"A",{href:!0});var aXt=s(ioe);Uzr=r(aXt,"FlaxGPTJForCausalLM"),aXt.forEach(t),Jzr=r(yVe," (GPT-J model)"),yVe.forEach(t),Yzr=i(Ne),J3=n(Ne,"LI",{});var xVe=s(J3);U3e=n(xVe,"STRONG",{});var nXt=s(U3e);Kzr=r(nXt,"opt"),nXt.forEach(t),Zzr=r(xVe," \u2014 "),doe=n(xVe,"A",{href:!0});var sXt=s(doe);eWr=r(sXt,"FlaxOPTForCausalLM"),sXt.forEach(t),oWr=r(xVe," (OPT model)"),xVe.forEach(t),rWr=i(Ne),Y3=n(Ne,"LI",{});var $Ve=s(Y3);J3e=n($Ve,"STRONG",{});var lXt=s(J3e);tWr=r(lXt,"roberta"),lXt.forEach(t),aWr=r($Ve," \u2014 "),coe=n($Ve,"A",{href:!0});var iXt=s(coe);nWr=r(iXt,"FlaxRobertaForCausalLM"),iXt.forEach(t),sWr=r($Ve," (RoBERTa model)"),$Ve.forEach(t),lWr=i(Ne),K3=n(Ne,"LI",{});var kVe=s(K3);Y3e=n(kVe,"STRONG",{});var dXt=s(Y3e);iWr=r(dXt,"xglm"),dXt.forEach(t),dWr=r(kVe," \u2014 "),foe=n(kVe,"A",{href:!0});var cXt=s(foe);cWr=r(cXt,"FlaxXGLMForCausalLM"),cXt.forEach(t),fWr=r(kVe," (XGLM model)"),kVe.forEach(t),Ne.forEach(t),mWr=i(ii),T(Z3.$$.fragment,ii),ii.forEach(t),li.forEach(t),IWe=i(f),rf=n(f,"H2",{class:!0});var zHe=s(rf);e0=n(zHe,"A",{id:!0,class:!0,href:!0});var fXt=s(e0);K3e=n(fXt,"SPAN",{});var mXt=s(K3e);T($$.$$.fragment,mXt),mXt.forEach(t),fXt.forEach(t),gWr=i(zHe),Z3e=n(zHe,"SPAN",{});var gXt=s(Z3e);hWr=r(gXt,"FlaxAutoModelForPreTraining"),gXt.forEach(t),zHe.forEach(t),NWe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(k$.$$.fragment,di),pWr=i(di),tf=n(di,"P",{});var Bae=s(tf);_Wr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),moe=n(Bae,"A",{href:!0});var hXt=s(moe);uWr=r(hXt,"from_pretrained()"),hXt.forEach(t),bWr=r(Bae," class method or the "),goe=n(Bae,"A",{href:!0});var pXt=s(goe);vWr=r(pXt,"from_config()"),pXt.forEach(t),FWr=r(Bae,` class
method.`),Bae.forEach(t),TWr=i(di),S$=n(di,"P",{});var WHe=s(S$);MWr=r(WHe,"This class cannot be instantiated directly using "),e0e=n(WHe,"CODE",{});var _Xt=s(e0e);EWr=r(_Xt,"__init__()"),_Xt.forEach(t),CWr=r(WHe," (throws an error)."),WHe.forEach(t),wWr=i(di),Ut=n(di,"DIV",{class:!0});var QL=s(Ut);T(R$.$$.fragment,QL),AWr=i(QL),o0e=n(QL,"P",{});var uXt=s(o0e);LWr=r(uXt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uXt.forEach(t),yWr=i(QL),af=n(QL,"P",{});var Iae=s(af);xWr=r(Iae,`Note:
Loading a model from its configuration file does `),r0e=n(Iae,"STRONG",{});var bXt=s(r0e);$Wr=r(bXt,"not"),bXt.forEach(t),kWr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(Iae,"A",{href:!0});var vXt=s(hoe);SWr=r(vXt,"from_pretrained()"),vXt.forEach(t),RWr=r(Iae," to load the model weights."),Iae.forEach(t),PWr=i(QL),T(o0.$$.fragment,QL),QL.forEach(t),BWr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(P$.$$.fragment,ci),IWr=i(ci),t0e=n(ci,"P",{});var FXt=s(t0e);NWr=r(FXt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FXt.forEach(t),qWr=i(ci),Cn=n(ci,"P",{});var HL=s(Cn);jWr=r(HL,"The model class to instantiate is selected based on the "),a0e=n(HL,"CODE",{});var TXt=s(a0e);DWr=r(TXt,"model_type"),TXt.forEach(t),GWr=r(HL,` property of the config object (either
passed as an argument or loaded from `),n0e=n(HL,"CODE",{});var MXt=s(n0e);OWr=r(MXt,"pretrained_model_name_or_path"),MXt.forEach(t),VWr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=n(HL,"CODE",{});var EXt=s(s0e);XWr=r(EXt,"pretrained_model_name_or_path"),EXt.forEach(t),zWr=r(HL,":"),HL.forEach(t),WWr=i(ci),Ee=n(ci,"UL",{});var we=s(Ee);r0=n(we,"LI",{});var SVe=s(r0);l0e=n(SVe,"STRONG",{});var CXt=s(l0e);QWr=r(CXt,"albert"),CXt.forEach(t),HWr=r(SVe," \u2014 "),poe=n(SVe,"A",{href:!0});var wXt=s(poe);UWr=r(wXt,"FlaxAlbertForPreTraining"),wXt.forEach(t),JWr=r(SVe," (ALBERT model)"),SVe.forEach(t),YWr=i(we),t0=n(we,"LI",{});var RVe=s(t0);i0e=n(RVe,"STRONG",{});var AXt=s(i0e);KWr=r(AXt,"bart"),AXt.forEach(t),ZWr=r(RVe," \u2014 "),_oe=n(RVe,"A",{href:!0});var LXt=s(_oe);eQr=r(LXt,"FlaxBartForConditionalGeneration"),LXt.forEach(t),oQr=r(RVe," (BART model)"),RVe.forEach(t),rQr=i(we),a0=n(we,"LI",{});var PVe=s(a0);d0e=n(PVe,"STRONG",{});var yXt=s(d0e);tQr=r(yXt,"bert"),yXt.forEach(t),aQr=r(PVe," \u2014 "),uoe=n(PVe,"A",{href:!0});var xXt=s(uoe);nQr=r(xXt,"FlaxBertForPreTraining"),xXt.forEach(t),sQr=r(PVe," (BERT model)"),PVe.forEach(t),lQr=i(we),n0=n(we,"LI",{});var BVe=s(n0);c0e=n(BVe,"STRONG",{});var $Xt=s(c0e);iQr=r($Xt,"big_bird"),$Xt.forEach(t),dQr=r(BVe," \u2014 "),boe=n(BVe,"A",{href:!0});var kXt=s(boe);cQr=r(kXt,"FlaxBigBirdForPreTraining"),kXt.forEach(t),fQr=r(BVe," (BigBird model)"),BVe.forEach(t),mQr=i(we),s0=n(we,"LI",{});var IVe=s(s0);f0e=n(IVe,"STRONG",{});var SXt=s(f0e);gQr=r(SXt,"electra"),SXt.forEach(t),hQr=r(IVe," \u2014 "),voe=n(IVe,"A",{href:!0});var RXt=s(voe);pQr=r(RXt,"FlaxElectraForPreTraining"),RXt.forEach(t),_Qr=r(IVe," (ELECTRA model)"),IVe.forEach(t),uQr=i(we),l0=n(we,"LI",{});var NVe=s(l0);m0e=n(NVe,"STRONG",{});var PXt=s(m0e);bQr=r(PXt,"longt5"),PXt.forEach(t),vQr=r(NVe," \u2014 "),Foe=n(NVe,"A",{href:!0});var BXt=s(Foe);FQr=r(BXt,"FlaxLongT5ForConditionalGeneration"),BXt.forEach(t),TQr=r(NVe," (LongT5 model)"),NVe.forEach(t),MQr=i(we),i0=n(we,"LI",{});var qVe=s(i0);g0e=n(qVe,"STRONG",{});var IXt=s(g0e);EQr=r(IXt,"mbart"),IXt.forEach(t),CQr=r(qVe," \u2014 "),Toe=n(qVe,"A",{href:!0});var NXt=s(Toe);wQr=r(NXt,"FlaxMBartForConditionalGeneration"),NXt.forEach(t),AQr=r(qVe," (mBART model)"),qVe.forEach(t),LQr=i(we),d0=n(we,"LI",{});var jVe=s(d0);h0e=n(jVe,"STRONG",{});var qXt=s(h0e);yQr=r(qXt,"mt5"),qXt.forEach(t),xQr=r(jVe," \u2014 "),Moe=n(jVe,"A",{href:!0});var jXt=s(Moe);$Qr=r(jXt,"FlaxMT5ForConditionalGeneration"),jXt.forEach(t),kQr=r(jVe," (MT5 model)"),jVe.forEach(t),SQr=i(we),c0=n(we,"LI",{});var DVe=s(c0);p0e=n(DVe,"STRONG",{});var DXt=s(p0e);RQr=r(DXt,"roberta"),DXt.forEach(t),PQr=r(DVe," \u2014 "),Eoe=n(DVe,"A",{href:!0});var GXt=s(Eoe);BQr=r(GXt,"FlaxRobertaForMaskedLM"),GXt.forEach(t),IQr=r(DVe," (RoBERTa model)"),DVe.forEach(t),NQr=i(we),f0=n(we,"LI",{});var GVe=s(f0);_0e=n(GVe,"STRONG",{});var OXt=s(_0e);qQr=r(OXt,"roformer"),OXt.forEach(t),jQr=r(GVe," \u2014 "),Coe=n(GVe,"A",{href:!0});var VXt=s(Coe);DQr=r(VXt,"FlaxRoFormerForMaskedLM"),VXt.forEach(t),GQr=r(GVe," (RoFormer model)"),GVe.forEach(t),OQr=i(we),m0=n(we,"LI",{});var OVe=s(m0);u0e=n(OVe,"STRONG",{});var XXt=s(u0e);VQr=r(XXt,"t5"),XXt.forEach(t),XQr=r(OVe," \u2014 "),woe=n(OVe,"A",{href:!0});var zXt=s(woe);zQr=r(zXt,"FlaxT5ForConditionalGeneration"),zXt.forEach(t),WQr=r(OVe," (T5 model)"),OVe.forEach(t),QQr=i(we),g0=n(we,"LI",{});var VVe=s(g0);b0e=n(VVe,"STRONG",{});var WXt=s(b0e);HQr=r(WXt,"wav2vec2"),WXt.forEach(t),UQr=r(VVe," \u2014 "),Aoe=n(VVe,"A",{href:!0});var QXt=s(Aoe);JQr=r(QXt,"FlaxWav2Vec2ForPreTraining"),QXt.forEach(t),YQr=r(VVe," (Wav2Vec2 model)"),VVe.forEach(t),KQr=i(we),h0=n(we,"LI",{});var XVe=s(h0);v0e=n(XVe,"STRONG",{});var HXt=s(v0e);ZQr=r(HXt,"xlm-roberta"),HXt.forEach(t),eHr=r(XVe," \u2014 "),Loe=n(XVe,"A",{href:!0});var UXt=s(Loe);oHr=r(UXt,"FlaxXLMRobertaForMaskedLM"),UXt.forEach(t),rHr=r(XVe," (XLM-RoBERTa model)"),XVe.forEach(t),we.forEach(t),tHr=i(ci),T(p0.$$.fragment,ci),ci.forEach(t),di.forEach(t),qWe=i(f),nf=n(f,"H2",{class:!0});var QHe=s(nf);_0=n(QHe,"A",{id:!0,class:!0,href:!0});var JXt=s(_0);F0e=n(JXt,"SPAN",{});var YXt=s(F0e);T(B$.$$.fragment,YXt),YXt.forEach(t),JXt.forEach(t),aHr=i(QHe),T0e=n(QHe,"SPAN",{});var KXt=s(T0e);nHr=r(KXt,"FlaxAutoModelForMaskedLM"),KXt.forEach(t),QHe.forEach(t),jWe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(I$.$$.fragment,fi),sHr=i(fi),sf=n(fi,"P",{});var Nae=s(sf);lHr=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yoe=n(Nae,"A",{href:!0});var ZXt=s(yoe);iHr=r(ZXt,"from_pretrained()"),ZXt.forEach(t),dHr=r(Nae," class method or the "),xoe=n(Nae,"A",{href:!0});var ezt=s(xoe);cHr=r(ezt,"from_config()"),ezt.forEach(t),fHr=r(Nae,` class
method.`),Nae.forEach(t),mHr=i(fi),N$=n(fi,"P",{});var HHe=s(N$);gHr=r(HHe,"This class cannot be instantiated directly using "),M0e=n(HHe,"CODE",{});var ozt=s(M0e);hHr=r(ozt,"__init__()"),ozt.forEach(t),pHr=r(HHe," (throws an error)."),HHe.forEach(t),_Hr=i(fi),Jt=n(fi,"DIV",{class:!0});var UL=s(Jt);T(q$.$$.fragment,UL),uHr=i(UL),E0e=n(UL,"P",{});var rzt=s(E0e);bHr=r(rzt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rzt.forEach(t),vHr=i(UL),lf=n(UL,"P",{});var qae=s(lf);FHr=r(qae,`Note:
Loading a model from its configuration file does `),C0e=n(qae,"STRONG",{});var tzt=s(C0e);THr=r(tzt,"not"),tzt.forEach(t),MHr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=n(qae,"A",{href:!0});var azt=s($oe);EHr=r(azt,"from_pretrained()"),azt.forEach(t),CHr=r(qae," to load the model weights."),qae.forEach(t),wHr=i(UL),T(u0.$$.fragment,UL),UL.forEach(t),AHr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(j$.$$.fragment,mi),LHr=i(mi),w0e=n(mi,"P",{});var nzt=s(w0e);yHr=r(nzt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nzt.forEach(t),xHr=i(mi),wn=n(mi,"P",{});var JL=s(wn);$Hr=r(JL,"The model class to instantiate is selected based on the "),A0e=n(JL,"CODE",{});var szt=s(A0e);kHr=r(szt,"model_type"),szt.forEach(t),SHr=r(JL,` property of the config object (either
passed as an argument or loaded from `),L0e=n(JL,"CODE",{});var lzt=s(L0e);RHr=r(lzt,"pretrained_model_name_or_path"),lzt.forEach(t),PHr=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=n(JL,"CODE",{});var izt=s(y0e);BHr=r(izt,"pretrained_model_name_or_path"),izt.forEach(t),IHr=r(JL,":"),JL.forEach(t),NHr=i(mi),$e=n(mi,"UL",{});var qe=s($e);b0=n(qe,"LI",{});var zVe=s(b0);x0e=n(zVe,"STRONG",{});var dzt=s(x0e);qHr=r(dzt,"albert"),dzt.forEach(t),jHr=r(zVe," \u2014 "),koe=n(zVe,"A",{href:!0});var czt=s(koe);DHr=r(czt,"FlaxAlbertForMaskedLM"),czt.forEach(t),GHr=r(zVe," (ALBERT model)"),zVe.forEach(t),OHr=i(qe),v0=n(qe,"LI",{});var WVe=s(v0);$0e=n(WVe,"STRONG",{});var fzt=s($0e);VHr=r(fzt,"bart"),fzt.forEach(t),XHr=r(WVe," \u2014 "),Soe=n(WVe,"A",{href:!0});var mzt=s(Soe);zHr=r(mzt,"FlaxBartForConditionalGeneration"),mzt.forEach(t),WHr=r(WVe," (BART model)"),WVe.forEach(t),QHr=i(qe),F0=n(qe,"LI",{});var QVe=s(F0);k0e=n(QVe,"STRONG",{});var gzt=s(k0e);HHr=r(gzt,"bert"),gzt.forEach(t),UHr=r(QVe," \u2014 "),Roe=n(QVe,"A",{href:!0});var hzt=s(Roe);JHr=r(hzt,"FlaxBertForMaskedLM"),hzt.forEach(t),YHr=r(QVe," (BERT model)"),QVe.forEach(t),KHr=i(qe),T0=n(qe,"LI",{});var HVe=s(T0);S0e=n(HVe,"STRONG",{});var pzt=s(S0e);ZHr=r(pzt,"big_bird"),pzt.forEach(t),eUr=r(HVe," \u2014 "),Poe=n(HVe,"A",{href:!0});var _zt=s(Poe);oUr=r(_zt,"FlaxBigBirdForMaskedLM"),_zt.forEach(t),rUr=r(HVe," (BigBird model)"),HVe.forEach(t),tUr=i(qe),M0=n(qe,"LI",{});var UVe=s(M0);R0e=n(UVe,"STRONG",{});var uzt=s(R0e);aUr=r(uzt,"distilbert"),uzt.forEach(t),nUr=r(UVe," \u2014 "),Boe=n(UVe,"A",{href:!0});var bzt=s(Boe);sUr=r(bzt,"FlaxDistilBertForMaskedLM"),bzt.forEach(t),lUr=r(UVe," (DistilBERT model)"),UVe.forEach(t),iUr=i(qe),E0=n(qe,"LI",{});var JVe=s(E0);P0e=n(JVe,"STRONG",{});var vzt=s(P0e);dUr=r(vzt,"electra"),vzt.forEach(t),cUr=r(JVe," \u2014 "),Ioe=n(JVe,"A",{href:!0});var Fzt=s(Ioe);fUr=r(Fzt,"FlaxElectraForMaskedLM"),Fzt.forEach(t),mUr=r(JVe," (ELECTRA model)"),JVe.forEach(t),gUr=i(qe),C0=n(qe,"LI",{});var YVe=s(C0);B0e=n(YVe,"STRONG",{});var Tzt=s(B0e);hUr=r(Tzt,"mbart"),Tzt.forEach(t),pUr=r(YVe," \u2014 "),Noe=n(YVe,"A",{href:!0});var Mzt=s(Noe);_Ur=r(Mzt,"FlaxMBartForConditionalGeneration"),Mzt.forEach(t),uUr=r(YVe," (mBART model)"),YVe.forEach(t),bUr=i(qe),w0=n(qe,"LI",{});var KVe=s(w0);I0e=n(KVe,"STRONG",{});var Ezt=s(I0e);vUr=r(Ezt,"roberta"),Ezt.forEach(t),FUr=r(KVe," \u2014 "),qoe=n(KVe,"A",{href:!0});var Czt=s(qoe);TUr=r(Czt,"FlaxRobertaForMaskedLM"),Czt.forEach(t),MUr=r(KVe," (RoBERTa model)"),KVe.forEach(t),EUr=i(qe),A0=n(qe,"LI",{});var ZVe=s(A0);N0e=n(ZVe,"STRONG",{});var wzt=s(N0e);CUr=r(wzt,"roformer"),wzt.forEach(t),wUr=r(ZVe," \u2014 "),joe=n(ZVe,"A",{href:!0});var Azt=s(joe);AUr=r(Azt,"FlaxRoFormerForMaskedLM"),Azt.forEach(t),LUr=r(ZVe," (RoFormer model)"),ZVe.forEach(t),yUr=i(qe),L0=n(qe,"LI",{});var eXe=s(L0);q0e=n(eXe,"STRONG",{});var Lzt=s(q0e);xUr=r(Lzt,"xlm-roberta"),Lzt.forEach(t),$Ur=r(eXe," \u2014 "),Doe=n(eXe,"A",{href:!0});var yzt=s(Doe);kUr=r(yzt,"FlaxXLMRobertaForMaskedLM"),yzt.forEach(t),SUr=r(eXe," (XLM-RoBERTa model)"),eXe.forEach(t),qe.forEach(t),RUr=i(mi),T(y0.$$.fragment,mi),mi.forEach(t),fi.forEach(t),DWe=i(f),df=n(f,"H2",{class:!0});var UHe=s(df);x0=n(UHe,"A",{id:!0,class:!0,href:!0});var xzt=s(x0);j0e=n(xzt,"SPAN",{});var $zt=s(j0e);T(D$.$$.fragment,$zt),$zt.forEach(t),xzt.forEach(t),PUr=i(UHe),D0e=n(UHe,"SPAN",{});var kzt=s(D0e);BUr=r(kzt,"FlaxAutoModelForSeq2SeqLM"),kzt.forEach(t),UHe.forEach(t),GWe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(G$.$$.fragment,gi),IUr=i(gi),cf=n(gi,"P",{});var jae=s(cf);NUr=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Goe=n(jae,"A",{href:!0});var Szt=s(Goe);qUr=r(Szt,"from_pretrained()"),Szt.forEach(t),jUr=r(jae," class method or the "),Ooe=n(jae,"A",{href:!0});var Rzt=s(Ooe);DUr=r(Rzt,"from_config()"),Rzt.forEach(t),GUr=r(jae,` class
method.`),jae.forEach(t),OUr=i(gi),O$=n(gi,"P",{});var JHe=s(O$);VUr=r(JHe,"This class cannot be instantiated directly using "),G0e=n(JHe,"CODE",{});var Pzt=s(G0e);XUr=r(Pzt,"__init__()"),Pzt.forEach(t),zUr=r(JHe," (throws an error)."),JHe.forEach(t),WUr=i(gi),Yt=n(gi,"DIV",{class:!0});var YL=s(Yt);T(V$.$$.fragment,YL),QUr=i(YL),O0e=n(YL,"P",{});var Bzt=s(O0e);HUr=r(Bzt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bzt.forEach(t),UUr=i(YL),ff=n(YL,"P",{});var Dae=s(ff);JUr=r(Dae,`Note:
Loading a model from its configuration file does `),V0e=n(Dae,"STRONG",{});var Izt=s(V0e);YUr=r(Izt,"not"),Izt.forEach(t),KUr=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=n(Dae,"A",{href:!0});var Nzt=s(Voe);ZUr=r(Nzt,"from_pretrained()"),Nzt.forEach(t),eJr=r(Dae," to load the model weights."),Dae.forEach(t),oJr=i(YL),T($0.$$.fragment,YL),YL.forEach(t),rJr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(X$.$$.fragment,hi),tJr=i(hi),X0e=n(hi,"P",{});var qzt=s(X0e);aJr=r(qzt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qzt.forEach(t),nJr=i(hi),An=n(hi,"P",{});var KL=s(An);sJr=r(KL,"The model class to instantiate is selected based on the "),z0e=n(KL,"CODE",{});var jzt=s(z0e);lJr=r(jzt,"model_type"),jzt.forEach(t),iJr=r(KL,` property of the config object (either
passed as an argument or loaded from `),W0e=n(KL,"CODE",{});var Dzt=s(W0e);dJr=r(Dzt,"pretrained_model_name_or_path"),Dzt.forEach(t),cJr=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=n(KL,"CODE",{});var Gzt=s(Q0e);fJr=r(Gzt,"pretrained_model_name_or_path"),Gzt.forEach(t),mJr=r(KL,":"),KL.forEach(t),gJr=i(hi),ke=n(hi,"UL",{});var je=s(ke);k0=n(je,"LI",{});var oXe=s(k0);H0e=n(oXe,"STRONG",{});var Ozt=s(H0e);hJr=r(Ozt,"bart"),Ozt.forEach(t),pJr=r(oXe," \u2014 "),Xoe=n(oXe,"A",{href:!0});var Vzt=s(Xoe);_Jr=r(Vzt,"FlaxBartForConditionalGeneration"),Vzt.forEach(t),uJr=r(oXe," (BART model)"),oXe.forEach(t),bJr=i(je),S0=n(je,"LI",{});var rXe=s(S0);U0e=n(rXe,"STRONG",{});var Xzt=s(U0e);vJr=r(Xzt,"blenderbot"),Xzt.forEach(t),FJr=r(rXe," \u2014 "),zoe=n(rXe,"A",{href:!0});var zzt=s(zoe);TJr=r(zzt,"FlaxBlenderbotForConditionalGeneration"),zzt.forEach(t),MJr=r(rXe," (Blenderbot model)"),rXe.forEach(t),EJr=i(je),R0=n(je,"LI",{});var tXe=s(R0);J0e=n(tXe,"STRONG",{});var Wzt=s(J0e);CJr=r(Wzt,"blenderbot-small"),Wzt.forEach(t),wJr=r(tXe," \u2014 "),Woe=n(tXe,"A",{href:!0});var Qzt=s(Woe);AJr=r(Qzt,"FlaxBlenderbotSmallForConditionalGeneration"),Qzt.forEach(t),LJr=r(tXe," (BlenderbotSmall model)"),tXe.forEach(t),yJr=i(je),P0=n(je,"LI",{});var aXe=s(P0);Y0e=n(aXe,"STRONG",{});var Hzt=s(Y0e);xJr=r(Hzt,"encoder-decoder"),Hzt.forEach(t),$Jr=r(aXe," \u2014 "),Qoe=n(aXe,"A",{href:!0});var Uzt=s(Qoe);kJr=r(Uzt,"FlaxEncoderDecoderModel"),Uzt.forEach(t),SJr=r(aXe," (Encoder decoder model)"),aXe.forEach(t),RJr=i(je),B0=n(je,"LI",{});var nXe=s(B0);K0e=n(nXe,"STRONG",{});var Jzt=s(K0e);PJr=r(Jzt,"longt5"),Jzt.forEach(t),BJr=r(nXe," \u2014 "),Hoe=n(nXe,"A",{href:!0});var Yzt=s(Hoe);IJr=r(Yzt,"FlaxLongT5ForConditionalGeneration"),Yzt.forEach(t),NJr=r(nXe," (LongT5 model)"),nXe.forEach(t),qJr=i(je),I0=n(je,"LI",{});var sXe=s(I0);Z0e=n(sXe,"STRONG",{});var Kzt=s(Z0e);jJr=r(Kzt,"marian"),Kzt.forEach(t),DJr=r(sXe," \u2014 "),Uoe=n(sXe,"A",{href:!0});var Zzt=s(Uoe);GJr=r(Zzt,"FlaxMarianMTModel"),Zzt.forEach(t),OJr=r(sXe," (Marian model)"),sXe.forEach(t),VJr=i(je),N0=n(je,"LI",{});var lXe=s(N0);ewe=n(lXe,"STRONG",{});var eWt=s(ewe);XJr=r(eWt,"mbart"),eWt.forEach(t),zJr=r(lXe," \u2014 "),Joe=n(lXe,"A",{href:!0});var oWt=s(Joe);WJr=r(oWt,"FlaxMBartForConditionalGeneration"),oWt.forEach(t),QJr=r(lXe," (mBART model)"),lXe.forEach(t),HJr=i(je),q0=n(je,"LI",{});var iXe=s(q0);owe=n(iXe,"STRONG",{});var rWt=s(owe);UJr=r(rWt,"mt5"),rWt.forEach(t),JJr=r(iXe," \u2014 "),Yoe=n(iXe,"A",{href:!0});var tWt=s(Yoe);YJr=r(tWt,"FlaxMT5ForConditionalGeneration"),tWt.forEach(t),KJr=r(iXe," (MT5 model)"),iXe.forEach(t),ZJr=i(je),j0=n(je,"LI",{});var dXe=s(j0);rwe=n(dXe,"STRONG",{});var aWt=s(rwe);eYr=r(aWt,"pegasus"),aWt.forEach(t),oYr=r(dXe," \u2014 "),Koe=n(dXe,"A",{href:!0});var nWt=s(Koe);rYr=r(nWt,"FlaxPegasusForConditionalGeneration"),nWt.forEach(t),tYr=r(dXe," (Pegasus model)"),dXe.forEach(t),aYr=i(je),D0=n(je,"LI",{});var cXe=s(D0);twe=n(cXe,"STRONG",{});var sWt=s(twe);nYr=r(sWt,"t5"),sWt.forEach(t),sYr=r(cXe," \u2014 "),Zoe=n(cXe,"A",{href:!0});var lWt=s(Zoe);lYr=r(lWt,"FlaxT5ForConditionalGeneration"),lWt.forEach(t),iYr=r(cXe," (T5 model)"),cXe.forEach(t),je.forEach(t),dYr=i(hi),T(G0.$$.fragment,hi),hi.forEach(t),gi.forEach(t),OWe=i(f),mf=n(f,"H2",{class:!0});var YHe=s(mf);O0=n(YHe,"A",{id:!0,class:!0,href:!0});var iWt=s(O0);awe=n(iWt,"SPAN",{});var dWt=s(awe);T(z$.$$.fragment,dWt),dWt.forEach(t),iWt.forEach(t),cYr=i(YHe),nwe=n(YHe,"SPAN",{});var cWt=s(nwe);fYr=r(cWt,"FlaxAutoModelForSequenceClassification"),cWt.forEach(t),YHe.forEach(t),VWe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(W$.$$.fragment,pi),mYr=i(pi),gf=n(pi,"P",{});var Gae=s(gf);gYr=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ere=n(Gae,"A",{href:!0});var fWt=s(ere);hYr=r(fWt,"from_pretrained()"),fWt.forEach(t),pYr=r(Gae," class method or the "),ore=n(Gae,"A",{href:!0});var mWt=s(ore);_Yr=r(mWt,"from_config()"),mWt.forEach(t),uYr=r(Gae,` class
method.`),Gae.forEach(t),bYr=i(pi),Q$=n(pi,"P",{});var KHe=s(Q$);vYr=r(KHe,"This class cannot be instantiated directly using "),swe=n(KHe,"CODE",{});var gWt=s(swe);FYr=r(gWt,"__init__()"),gWt.forEach(t),TYr=r(KHe," (throws an error)."),KHe.forEach(t),MYr=i(pi),Kt=n(pi,"DIV",{class:!0});var ZL=s(Kt);T(H$.$$.fragment,ZL),EYr=i(ZL),lwe=n(ZL,"P",{});var hWt=s(lwe);CYr=r(hWt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hWt.forEach(t),wYr=i(ZL),hf=n(ZL,"P",{});var Oae=s(hf);AYr=r(Oae,`Note:
Loading a model from its configuration file does `),iwe=n(Oae,"STRONG",{});var pWt=s(iwe);LYr=r(pWt,"not"),pWt.forEach(t),yYr=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=n(Oae,"A",{href:!0});var _Wt=s(rre);xYr=r(_Wt,"from_pretrained()"),_Wt.forEach(t),$Yr=r(Oae," to load the model weights."),Oae.forEach(t),kYr=i(ZL),T(V0.$$.fragment,ZL),ZL.forEach(t),SYr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(U$.$$.fragment,_i),RYr=i(_i),dwe=n(_i,"P",{});var uWt=s(dwe);PYr=r(uWt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uWt.forEach(t),BYr=i(_i),Ln=n(_i,"P",{});var ey=s(Ln);IYr=r(ey,"The model class to instantiate is selected based on the "),cwe=n(ey,"CODE",{});var bWt=s(cwe);NYr=r(bWt,"model_type"),bWt.forEach(t),qYr=r(ey,` property of the config object (either
passed as an argument or loaded from `),fwe=n(ey,"CODE",{});var vWt=s(fwe);jYr=r(vWt,"pretrained_model_name_or_path"),vWt.forEach(t),DYr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mwe=n(ey,"CODE",{});var FWt=s(mwe);GYr=r(FWt,"pretrained_model_name_or_path"),FWt.forEach(t),OYr=r(ey,":"),ey.forEach(t),VYr=i(_i),Se=n(_i,"UL",{});var De=s(Se);X0=n(De,"LI",{});var fXe=s(X0);gwe=n(fXe,"STRONG",{});var TWt=s(gwe);XYr=r(TWt,"albert"),TWt.forEach(t),zYr=r(fXe," \u2014 "),tre=n(fXe,"A",{href:!0});var MWt=s(tre);WYr=r(MWt,"FlaxAlbertForSequenceClassification"),MWt.forEach(t),QYr=r(fXe," (ALBERT model)"),fXe.forEach(t),HYr=i(De),z0=n(De,"LI",{});var mXe=s(z0);hwe=n(mXe,"STRONG",{});var EWt=s(hwe);UYr=r(EWt,"bart"),EWt.forEach(t),JYr=r(mXe," \u2014 "),are=n(mXe,"A",{href:!0});var CWt=s(are);YYr=r(CWt,"FlaxBartForSequenceClassification"),CWt.forEach(t),KYr=r(mXe," (BART model)"),mXe.forEach(t),ZYr=i(De),W0=n(De,"LI",{});var gXe=s(W0);pwe=n(gXe,"STRONG",{});var wWt=s(pwe);eKr=r(wWt,"bert"),wWt.forEach(t),oKr=r(gXe," \u2014 "),nre=n(gXe,"A",{href:!0});var AWt=s(nre);rKr=r(AWt,"FlaxBertForSequenceClassification"),AWt.forEach(t),tKr=r(gXe," (BERT model)"),gXe.forEach(t),aKr=i(De),Q0=n(De,"LI",{});var hXe=s(Q0);_we=n(hXe,"STRONG",{});var LWt=s(_we);nKr=r(LWt,"big_bird"),LWt.forEach(t),sKr=r(hXe," \u2014 "),sre=n(hXe,"A",{href:!0});var yWt=s(sre);lKr=r(yWt,"FlaxBigBirdForSequenceClassification"),yWt.forEach(t),iKr=r(hXe," (BigBird model)"),hXe.forEach(t),dKr=i(De),H0=n(De,"LI",{});var pXe=s(H0);uwe=n(pXe,"STRONG",{});var xWt=s(uwe);cKr=r(xWt,"distilbert"),xWt.forEach(t),fKr=r(pXe," \u2014 "),lre=n(pXe,"A",{href:!0});var $Wt=s(lre);mKr=r($Wt,"FlaxDistilBertForSequenceClassification"),$Wt.forEach(t),gKr=r(pXe," (DistilBERT model)"),pXe.forEach(t),hKr=i(De),U0=n(De,"LI",{});var _Xe=s(U0);bwe=n(_Xe,"STRONG",{});var kWt=s(bwe);pKr=r(kWt,"electra"),kWt.forEach(t),_Kr=r(_Xe," \u2014 "),ire=n(_Xe,"A",{href:!0});var SWt=s(ire);uKr=r(SWt,"FlaxElectraForSequenceClassification"),SWt.forEach(t),bKr=r(_Xe," (ELECTRA model)"),_Xe.forEach(t),vKr=i(De),J0=n(De,"LI",{});var uXe=s(J0);vwe=n(uXe,"STRONG",{});var RWt=s(vwe);FKr=r(RWt,"mbart"),RWt.forEach(t),TKr=r(uXe," \u2014 "),dre=n(uXe,"A",{href:!0});var PWt=s(dre);MKr=r(PWt,"FlaxMBartForSequenceClassification"),PWt.forEach(t),EKr=r(uXe," (mBART model)"),uXe.forEach(t),CKr=i(De),Y0=n(De,"LI",{});var bXe=s(Y0);Fwe=n(bXe,"STRONG",{});var BWt=s(Fwe);wKr=r(BWt,"roberta"),BWt.forEach(t),AKr=r(bXe," \u2014 "),cre=n(bXe,"A",{href:!0});var IWt=s(cre);LKr=r(IWt,"FlaxRobertaForSequenceClassification"),IWt.forEach(t),yKr=r(bXe," (RoBERTa model)"),bXe.forEach(t),xKr=i(De),K0=n(De,"LI",{});var vXe=s(K0);Twe=n(vXe,"STRONG",{});var NWt=s(Twe);$Kr=r(NWt,"roformer"),NWt.forEach(t),kKr=r(vXe," \u2014 "),fre=n(vXe,"A",{href:!0});var qWt=s(fre);SKr=r(qWt,"FlaxRoFormerForSequenceClassification"),qWt.forEach(t),RKr=r(vXe," (RoFormer model)"),vXe.forEach(t),PKr=i(De),Z0=n(De,"LI",{});var FXe=s(Z0);Mwe=n(FXe,"STRONG",{});var jWt=s(Mwe);BKr=r(jWt,"xlm-roberta"),jWt.forEach(t),IKr=r(FXe," \u2014 "),mre=n(FXe,"A",{href:!0});var DWt=s(mre);NKr=r(DWt,"FlaxXLMRobertaForSequenceClassification"),DWt.forEach(t),qKr=r(FXe," (XLM-RoBERTa model)"),FXe.forEach(t),De.forEach(t),jKr=i(_i),T(ew.$$.fragment,_i),_i.forEach(t),pi.forEach(t),XWe=i(f),pf=n(f,"H2",{class:!0});var ZHe=s(pf);ow=n(ZHe,"A",{id:!0,class:!0,href:!0});var GWt=s(ow);Ewe=n(GWt,"SPAN",{});var OWt=s(Ewe);T(J$.$$.fragment,OWt),OWt.forEach(t),GWt.forEach(t),DKr=i(ZHe),Cwe=n(ZHe,"SPAN",{});var VWt=s(Cwe);GKr=r(VWt,"FlaxAutoModelForQuestionAnswering"),VWt.forEach(t),ZHe.forEach(t),zWe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(Y$.$$.fragment,ui),OKr=i(ui),_f=n(ui,"P",{});var Vae=s(_f);VKr=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gre=n(Vae,"A",{href:!0});var XWt=s(gre);XKr=r(XWt,"from_pretrained()"),XWt.forEach(t),zKr=r(Vae," class method or the "),hre=n(Vae,"A",{href:!0});var zWt=s(hre);WKr=r(zWt,"from_config()"),zWt.forEach(t),QKr=r(Vae,` class
method.`),Vae.forEach(t),HKr=i(ui),K$=n(ui,"P",{});var eUe=s(K$);UKr=r(eUe,"This class cannot be instantiated directly using "),wwe=n(eUe,"CODE",{});var WWt=s(wwe);JKr=r(WWt,"__init__()"),WWt.forEach(t),YKr=r(eUe," (throws an error)."),eUe.forEach(t),KKr=i(ui),Zt=n(ui,"DIV",{class:!0});var oy=s(Zt);T(Z$.$$.fragment,oy),ZKr=i(oy),Awe=n(oy,"P",{});var QWt=s(Awe);eZr=r(QWt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QWt.forEach(t),oZr=i(oy),uf=n(oy,"P",{});var Xae=s(uf);rZr=r(Xae,`Note:
Loading a model from its configuration file does `),Lwe=n(Xae,"STRONG",{});var HWt=s(Lwe);tZr=r(HWt,"not"),HWt.forEach(t),aZr=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=n(Xae,"A",{href:!0});var UWt=s(pre);nZr=r(UWt,"from_pretrained()"),UWt.forEach(t),sZr=r(Xae," to load the model weights."),Xae.forEach(t),lZr=i(oy),T(rw.$$.fragment,oy),oy.forEach(t),iZr=i(ui),Yr=n(ui,"DIV",{class:!0});var bi=s(Yr);T(ek.$$.fragment,bi),dZr=i(bi),ywe=n(bi,"P",{});var JWt=s(ywe);cZr=r(JWt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JWt.forEach(t),fZr=i(bi),yn=n(bi,"P",{});var ry=s(yn);mZr=r(ry,"The model class to instantiate is selected based on the "),xwe=n(ry,"CODE",{});var YWt=s(xwe);gZr=r(YWt,"model_type"),YWt.forEach(t),hZr=r(ry,` property of the config object (either
passed as an argument or loaded from `),$we=n(ry,"CODE",{});var KWt=s($we);pZr=r(KWt,"pretrained_model_name_or_path"),KWt.forEach(t),_Zr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=n(ry,"CODE",{});var ZWt=s(kwe);uZr=r(ZWt,"pretrained_model_name_or_path"),ZWt.forEach(t),bZr=r(ry,":"),ry.forEach(t),vZr=i(bi),Re=n(bi,"UL",{});var Ge=s(Re);tw=n(Ge,"LI",{});var TXe=s(tw);Swe=n(TXe,"STRONG",{});var eQt=s(Swe);FZr=r(eQt,"albert"),eQt.forEach(t),TZr=r(TXe," \u2014 "),_re=n(TXe,"A",{href:!0});var oQt=s(_re);MZr=r(oQt,"FlaxAlbertForQuestionAnswering"),oQt.forEach(t),EZr=r(TXe," (ALBERT model)"),TXe.forEach(t),CZr=i(Ge),aw=n(Ge,"LI",{});var MXe=s(aw);Rwe=n(MXe,"STRONG",{});var rQt=s(Rwe);wZr=r(rQt,"bart"),rQt.forEach(t),AZr=r(MXe," \u2014 "),ure=n(MXe,"A",{href:!0});var tQt=s(ure);LZr=r(tQt,"FlaxBartForQuestionAnswering"),tQt.forEach(t),yZr=r(MXe," (BART model)"),MXe.forEach(t),xZr=i(Ge),nw=n(Ge,"LI",{});var EXe=s(nw);Pwe=n(EXe,"STRONG",{});var aQt=s(Pwe);$Zr=r(aQt,"bert"),aQt.forEach(t),kZr=r(EXe," \u2014 "),bre=n(EXe,"A",{href:!0});var nQt=s(bre);SZr=r(nQt,"FlaxBertForQuestionAnswering"),nQt.forEach(t),RZr=r(EXe," (BERT model)"),EXe.forEach(t),PZr=i(Ge),sw=n(Ge,"LI",{});var CXe=s(sw);Bwe=n(CXe,"STRONG",{});var sQt=s(Bwe);BZr=r(sQt,"big_bird"),sQt.forEach(t),IZr=r(CXe," \u2014 "),vre=n(CXe,"A",{href:!0});var lQt=s(vre);NZr=r(lQt,"FlaxBigBirdForQuestionAnswering"),lQt.forEach(t),qZr=r(CXe," (BigBird model)"),CXe.forEach(t),jZr=i(Ge),lw=n(Ge,"LI",{});var wXe=s(lw);Iwe=n(wXe,"STRONG",{});var iQt=s(Iwe);DZr=r(iQt,"distilbert"),iQt.forEach(t),GZr=r(wXe," \u2014 "),Fre=n(wXe,"A",{href:!0});var dQt=s(Fre);OZr=r(dQt,"FlaxDistilBertForQuestionAnswering"),dQt.forEach(t),VZr=r(wXe," (DistilBERT model)"),wXe.forEach(t),XZr=i(Ge),iw=n(Ge,"LI",{});var AXe=s(iw);Nwe=n(AXe,"STRONG",{});var cQt=s(Nwe);zZr=r(cQt,"electra"),cQt.forEach(t),WZr=r(AXe," \u2014 "),Tre=n(AXe,"A",{href:!0});var fQt=s(Tre);QZr=r(fQt,"FlaxElectraForQuestionAnswering"),fQt.forEach(t),HZr=r(AXe," (ELECTRA model)"),AXe.forEach(t),UZr=i(Ge),dw=n(Ge,"LI",{});var LXe=s(dw);qwe=n(LXe,"STRONG",{});var mQt=s(qwe);JZr=r(mQt,"mbart"),mQt.forEach(t),YZr=r(LXe," \u2014 "),Mre=n(LXe,"A",{href:!0});var gQt=s(Mre);KZr=r(gQt,"FlaxMBartForQuestionAnswering"),gQt.forEach(t),ZZr=r(LXe," (mBART model)"),LXe.forEach(t),eet=i(Ge),cw=n(Ge,"LI",{});var yXe=s(cw);jwe=n(yXe,"STRONG",{});var hQt=s(jwe);oet=r(hQt,"roberta"),hQt.forEach(t),ret=r(yXe," \u2014 "),Ere=n(yXe,"A",{href:!0});var pQt=s(Ere);tet=r(pQt,"FlaxRobertaForQuestionAnswering"),pQt.forEach(t),aet=r(yXe," (RoBERTa model)"),yXe.forEach(t),net=i(Ge),fw=n(Ge,"LI",{});var xXe=s(fw);Dwe=n(xXe,"STRONG",{});var _Qt=s(Dwe);set=r(_Qt,"roformer"),_Qt.forEach(t),iet=r(xXe," \u2014 "),Cre=n(xXe,"A",{href:!0});var uQt=s(Cre);det=r(uQt,"FlaxRoFormerForQuestionAnswering"),uQt.forEach(t),cet=r(xXe," (RoFormer model)"),xXe.forEach(t),fet=i(Ge),mw=n(Ge,"LI",{});var $Xe=s(mw);Gwe=n($Xe,"STRONG",{});var bQt=s(Gwe);met=r(bQt,"xlm-roberta"),bQt.forEach(t),get=r($Xe," \u2014 "),wre=n($Xe,"A",{href:!0});var vQt=s(wre);het=r(vQt,"FlaxXLMRobertaForQuestionAnswering"),vQt.forEach(t),pet=r($Xe," (XLM-RoBERTa model)"),$Xe.forEach(t),Ge.forEach(t),_et=i(bi),T(gw.$$.fragment,bi),bi.forEach(t),ui.forEach(t),WWe=i(f),bf=n(f,"H2",{class:!0});var oUe=s(bf);hw=n(oUe,"A",{id:!0,class:!0,href:!0});var FQt=s(hw);Owe=n(FQt,"SPAN",{});var TQt=s(Owe);T(ok.$$.fragment,TQt),TQt.forEach(t),FQt.forEach(t),uet=i(oUe),Vwe=n(oUe,"SPAN",{});var MQt=s(Vwe);bet=r(MQt,"FlaxAutoModelForTokenClassification"),MQt.forEach(t),oUe.forEach(t),QWe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(rk.$$.fragment,vi),vet=i(vi),vf=n(vi,"P",{});var zae=s(vf);Fet=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Are=n(zae,"A",{href:!0});var EQt=s(Are);Tet=r(EQt,"from_pretrained()"),EQt.forEach(t),Met=r(zae," class method or the "),Lre=n(zae,"A",{href:!0});var CQt=s(Lre);Eet=r(CQt,"from_config()"),CQt.forEach(t),Cet=r(zae,` class
method.`),zae.forEach(t),wet=i(vi),tk=n(vi,"P",{});var rUe=s(tk);Aet=r(rUe,"This class cannot be instantiated directly using "),Xwe=n(rUe,"CODE",{});var wQt=s(Xwe);Let=r(wQt,"__init__()"),wQt.forEach(t),yet=r(rUe," (throws an error)."),rUe.forEach(t),xet=i(vi),ea=n(vi,"DIV",{class:!0});var ty=s(ea);T(ak.$$.fragment,ty),$et=i(ty),zwe=n(ty,"P",{});var AQt=s(zwe);ket=r(AQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AQt.forEach(t),Set=i(ty),Ff=n(ty,"P",{});var Wae=s(Ff);Ret=r(Wae,`Note:
Loading a model from its configuration file does `),Wwe=n(Wae,"STRONG",{});var LQt=s(Wwe);Pet=r(LQt,"not"),LQt.forEach(t),Bet=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(Wae,"A",{href:!0});var yQt=s(yre);Iet=r(yQt,"from_pretrained()"),yQt.forEach(t),Net=r(Wae," to load the model weights."),Wae.forEach(t),qet=i(ty),T(pw.$$.fragment,ty),ty.forEach(t),jet=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(nk.$$.fragment,Fi),Det=i(Fi),Qwe=n(Fi,"P",{});var xQt=s(Qwe);Get=r(xQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xQt.forEach(t),Oet=i(Fi),xn=n(Fi,"P",{});var ay=s(xn);Vet=r(ay,"The model class to instantiate is selected based on the "),Hwe=n(ay,"CODE",{});var $Qt=s(Hwe);Xet=r($Qt,"model_type"),$Qt.forEach(t),zet=r(ay,` property of the config object (either
passed as an argument or loaded from `),Uwe=n(ay,"CODE",{});var kQt=s(Uwe);Wet=r(kQt,"pretrained_model_name_or_path"),kQt.forEach(t),Qet=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=n(ay,"CODE",{});var SQt=s(Jwe);Het=r(SQt,"pretrained_model_name_or_path"),SQt.forEach(t),Uet=r(ay,":"),ay.forEach(t),Jet=i(Fi),Xe=n(Fi,"UL",{});var Eo=s(Xe);_w=n(Eo,"LI",{});var kXe=s(_w);Ywe=n(kXe,"STRONG",{});var RQt=s(Ywe);Yet=r(RQt,"albert"),RQt.forEach(t),Ket=r(kXe," \u2014 "),xre=n(kXe,"A",{href:!0});var PQt=s(xre);Zet=r(PQt,"FlaxAlbertForTokenClassification"),PQt.forEach(t),eot=r(kXe," (ALBERT model)"),kXe.forEach(t),oot=i(Eo),uw=n(Eo,"LI",{});var SXe=s(uw);Kwe=n(SXe,"STRONG",{});var BQt=s(Kwe);rot=r(BQt,"bert"),BQt.forEach(t),tot=r(SXe," \u2014 "),$re=n(SXe,"A",{href:!0});var IQt=s($re);aot=r(IQt,"FlaxBertForTokenClassification"),IQt.forEach(t),not=r(SXe," (BERT model)"),SXe.forEach(t),sot=i(Eo),bw=n(Eo,"LI",{});var RXe=s(bw);Zwe=n(RXe,"STRONG",{});var NQt=s(Zwe);lot=r(NQt,"big_bird"),NQt.forEach(t),iot=r(RXe," \u2014 "),kre=n(RXe,"A",{href:!0});var qQt=s(kre);dot=r(qQt,"FlaxBigBirdForTokenClassification"),qQt.forEach(t),cot=r(RXe," (BigBird model)"),RXe.forEach(t),fot=i(Eo),vw=n(Eo,"LI",{});var PXe=s(vw);eAe=n(PXe,"STRONG",{});var jQt=s(eAe);mot=r(jQt,"distilbert"),jQt.forEach(t),got=r(PXe," \u2014 "),Sre=n(PXe,"A",{href:!0});var DQt=s(Sre);hot=r(DQt,"FlaxDistilBertForTokenClassification"),DQt.forEach(t),pot=r(PXe," (DistilBERT model)"),PXe.forEach(t),_ot=i(Eo),Fw=n(Eo,"LI",{});var BXe=s(Fw);oAe=n(BXe,"STRONG",{});var GQt=s(oAe);uot=r(GQt,"electra"),GQt.forEach(t),bot=r(BXe," \u2014 "),Rre=n(BXe,"A",{href:!0});var OQt=s(Rre);vot=r(OQt,"FlaxElectraForTokenClassification"),OQt.forEach(t),Fot=r(BXe," (ELECTRA model)"),BXe.forEach(t),Tot=i(Eo),Tw=n(Eo,"LI",{});var IXe=s(Tw);rAe=n(IXe,"STRONG",{});var VQt=s(rAe);Mot=r(VQt,"roberta"),VQt.forEach(t),Eot=r(IXe," \u2014 "),Pre=n(IXe,"A",{href:!0});var XQt=s(Pre);Cot=r(XQt,"FlaxRobertaForTokenClassification"),XQt.forEach(t),wot=r(IXe," (RoBERTa model)"),IXe.forEach(t),Aot=i(Eo),Mw=n(Eo,"LI",{});var NXe=s(Mw);tAe=n(NXe,"STRONG",{});var zQt=s(tAe);Lot=r(zQt,"roformer"),zQt.forEach(t),yot=r(NXe," \u2014 "),Bre=n(NXe,"A",{href:!0});var WQt=s(Bre);xot=r(WQt,"FlaxRoFormerForTokenClassification"),WQt.forEach(t),$ot=r(NXe," (RoFormer model)"),NXe.forEach(t),kot=i(Eo),Ew=n(Eo,"LI",{});var qXe=s(Ew);aAe=n(qXe,"STRONG",{});var QQt=s(aAe);Sot=r(QQt,"xlm-roberta"),QQt.forEach(t),Rot=r(qXe," \u2014 "),Ire=n(qXe,"A",{href:!0});var HQt=s(Ire);Pot=r(HQt,"FlaxXLMRobertaForTokenClassification"),HQt.forEach(t),Bot=r(qXe," (XLM-RoBERTa model)"),qXe.forEach(t),Eo.forEach(t),Iot=i(Fi),T(Cw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),HWe=i(f),Tf=n(f,"H2",{class:!0});var tUe=s(Tf);ww=n(tUe,"A",{id:!0,class:!0,href:!0});var UQt=s(ww);nAe=n(UQt,"SPAN",{});var JQt=s(nAe);T(sk.$$.fragment,JQt),JQt.forEach(t),UQt.forEach(t),Not=i(tUe),sAe=n(tUe,"SPAN",{});var YQt=s(sAe);qot=r(YQt,"FlaxAutoModelForMultipleChoice"),YQt.forEach(t),tUe.forEach(t),UWe=i(f),wr=n(f,"DIV",{class:!0});var Ti=s(wr);T(lk.$$.fragment,Ti),jot=i(Ti),Mf=n(Ti,"P",{});var Qae=s(Mf);Dot=r(Qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Nre=n(Qae,"A",{href:!0});var KQt=s(Nre);Got=r(KQt,"from_pretrained()"),KQt.forEach(t),Oot=r(Qae," class method or the "),qre=n(Qae,"A",{href:!0});var ZQt=s(qre);Vot=r(ZQt,"from_config()"),ZQt.forEach(t),Xot=r(Qae,` class
method.`),Qae.forEach(t),zot=i(Ti),ik=n(Ti,"P",{});var aUe=s(ik);Wot=r(aUe,"This class cannot be instantiated directly using "),lAe=n(aUe,"CODE",{});var eHt=s(lAe);Qot=r(eHt,"__init__()"),eHt.forEach(t),Hot=r(aUe," (throws an error)."),aUe.forEach(t),Uot=i(Ti),oa=n(Ti,"DIV",{class:!0});var ny=s(oa);T(dk.$$.fragment,ny),Jot=i(ny),iAe=n(ny,"P",{});var oHt=s(iAe);Yot=r(oHt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oHt.forEach(t),Kot=i(ny),Ef=n(ny,"P",{});var Hae=s(Ef);Zot=r(Hae,`Note:
Loading a model from its configuration file does `),dAe=n(Hae,"STRONG",{});var rHt=s(dAe);ert=r(rHt,"not"),rHt.forEach(t),ort=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=n(Hae,"A",{href:!0});var tHt=s(jre);rrt=r(tHt,"from_pretrained()"),tHt.forEach(t),trt=r(Hae," to load the model weights."),Hae.forEach(t),art=i(ny),T(Aw.$$.fragment,ny),ny.forEach(t),nrt=i(Ti),Zr=n(Ti,"DIV",{class:!0});var Mi=s(Zr);T(ck.$$.fragment,Mi),srt=i(Mi),cAe=n(Mi,"P",{});var aHt=s(cAe);lrt=r(aHt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aHt.forEach(t),irt=i(Mi),$n=n(Mi,"P",{});var sy=s($n);drt=r(sy,"The model class to instantiate is selected based on the "),fAe=n(sy,"CODE",{});var nHt=s(fAe);crt=r(nHt,"model_type"),nHt.forEach(t),frt=r(sy,` property of the config object (either
passed as an argument or loaded from `),mAe=n(sy,"CODE",{});var sHt=s(mAe);mrt=r(sHt,"pretrained_model_name_or_path"),sHt.forEach(t),grt=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=n(sy,"CODE",{});var lHt=s(gAe);hrt=r(lHt,"pretrained_model_name_or_path"),lHt.forEach(t),prt=r(sy,":"),sy.forEach(t),_rt=i(Mi),ze=n(Mi,"UL",{});var Co=s(ze);Lw=n(Co,"LI",{});var jXe=s(Lw);hAe=n(jXe,"STRONG",{});var iHt=s(hAe);urt=r(iHt,"albert"),iHt.forEach(t),brt=r(jXe," \u2014 "),Dre=n(jXe,"A",{href:!0});var dHt=s(Dre);vrt=r(dHt,"FlaxAlbertForMultipleChoice"),dHt.forEach(t),Frt=r(jXe," (ALBERT model)"),jXe.forEach(t),Trt=i(Co),yw=n(Co,"LI",{});var DXe=s(yw);pAe=n(DXe,"STRONG",{});var cHt=s(pAe);Mrt=r(cHt,"bert"),cHt.forEach(t),Ert=r(DXe," \u2014 "),Gre=n(DXe,"A",{href:!0});var fHt=s(Gre);Crt=r(fHt,"FlaxBertForMultipleChoice"),fHt.forEach(t),wrt=r(DXe," (BERT model)"),DXe.forEach(t),Art=i(Co),xw=n(Co,"LI",{});var GXe=s(xw);_Ae=n(GXe,"STRONG",{});var mHt=s(_Ae);Lrt=r(mHt,"big_bird"),mHt.forEach(t),yrt=r(GXe," \u2014 "),Ore=n(GXe,"A",{href:!0});var gHt=s(Ore);xrt=r(gHt,"FlaxBigBirdForMultipleChoice"),gHt.forEach(t),$rt=r(GXe," (BigBird model)"),GXe.forEach(t),krt=i(Co),$w=n(Co,"LI",{});var OXe=s($w);uAe=n(OXe,"STRONG",{});var hHt=s(uAe);Srt=r(hHt,"distilbert"),hHt.forEach(t),Rrt=r(OXe," \u2014 "),Vre=n(OXe,"A",{href:!0});var pHt=s(Vre);Prt=r(pHt,"FlaxDistilBertForMultipleChoice"),pHt.forEach(t),Brt=r(OXe," (DistilBERT model)"),OXe.forEach(t),Irt=i(Co),kw=n(Co,"LI",{});var VXe=s(kw);bAe=n(VXe,"STRONG",{});var _Ht=s(bAe);Nrt=r(_Ht,"electra"),_Ht.forEach(t),qrt=r(VXe," \u2014 "),Xre=n(VXe,"A",{href:!0});var uHt=s(Xre);jrt=r(uHt,"FlaxElectraForMultipleChoice"),uHt.forEach(t),Drt=r(VXe," (ELECTRA model)"),VXe.forEach(t),Grt=i(Co),Sw=n(Co,"LI",{});var XXe=s(Sw);vAe=n(XXe,"STRONG",{});var bHt=s(vAe);Ort=r(bHt,"roberta"),bHt.forEach(t),Vrt=r(XXe," \u2014 "),zre=n(XXe,"A",{href:!0});var vHt=s(zre);Xrt=r(vHt,"FlaxRobertaForMultipleChoice"),vHt.forEach(t),zrt=r(XXe," (RoBERTa model)"),XXe.forEach(t),Wrt=i(Co),Rw=n(Co,"LI",{});var zXe=s(Rw);FAe=n(zXe,"STRONG",{});var FHt=s(FAe);Qrt=r(FHt,"roformer"),FHt.forEach(t),Hrt=r(zXe," \u2014 "),Wre=n(zXe,"A",{href:!0});var THt=s(Wre);Urt=r(THt,"FlaxRoFormerForMultipleChoice"),THt.forEach(t),Jrt=r(zXe," (RoFormer model)"),zXe.forEach(t),Yrt=i(Co),Pw=n(Co,"LI",{});var WXe=s(Pw);TAe=n(WXe,"STRONG",{});var MHt=s(TAe);Krt=r(MHt,"xlm-roberta"),MHt.forEach(t),Zrt=r(WXe," \u2014 "),Qre=n(WXe,"A",{href:!0});var EHt=s(Qre);ett=r(EHt,"FlaxXLMRobertaForMultipleChoice"),EHt.forEach(t),ott=r(WXe," (XLM-RoBERTa model)"),WXe.forEach(t),Co.forEach(t),rtt=i(Mi),T(Bw.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),JWe=i(f),Cf=n(f,"H2",{class:!0});var nUe=s(Cf);Iw=n(nUe,"A",{id:!0,class:!0,href:!0});var CHt=s(Iw);MAe=n(CHt,"SPAN",{});var wHt=s(MAe);T(fk.$$.fragment,wHt),wHt.forEach(t),CHt.forEach(t),ttt=i(nUe),EAe=n(nUe,"SPAN",{});var AHt=s(EAe);att=r(AHt,"FlaxAutoModelForNextSentencePrediction"),AHt.forEach(t),nUe.forEach(t),YWe=i(f),Ar=n(f,"DIV",{class:!0});var Ei=s(Ar);T(mk.$$.fragment,Ei),ntt=i(Ei),wf=n(Ei,"P",{});var Uae=s(wf);stt=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Hre=n(Uae,"A",{href:!0});var LHt=s(Hre);ltt=r(LHt,"from_pretrained()"),LHt.forEach(t),itt=r(Uae," class method or the "),Ure=n(Uae,"A",{href:!0});var yHt=s(Ure);dtt=r(yHt,"from_config()"),yHt.forEach(t),ctt=r(Uae,` class
method.`),Uae.forEach(t),ftt=i(Ei),gk=n(Ei,"P",{});var sUe=s(gk);mtt=r(sUe,"This class cannot be instantiated directly using "),CAe=n(sUe,"CODE",{});var xHt=s(CAe);gtt=r(xHt,"__init__()"),xHt.forEach(t),htt=r(sUe," (throws an error)."),sUe.forEach(t),ptt=i(Ei),ra=n(Ei,"DIV",{class:!0});var ly=s(ra);T(hk.$$.fragment,ly),_tt=i(ly),wAe=n(ly,"P",{});var $Ht=s(wAe);utt=r($Ht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Ht.forEach(t),btt=i(ly),Af=n(ly,"P",{});var Jae=s(Af);vtt=r(Jae,`Note:
Loading a model from its configuration file does `),AAe=n(Jae,"STRONG",{});var kHt=s(AAe);Ftt=r(kHt,"not"),kHt.forEach(t),Ttt=r(Jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=n(Jae,"A",{href:!0});var SHt=s(Jre);Mtt=r(SHt,"from_pretrained()"),SHt.forEach(t),Ett=r(Jae," to load the model weights."),Jae.forEach(t),Ctt=i(ly),T(Nw.$$.fragment,ly),ly.forEach(t),wtt=i(Ei),et=n(Ei,"DIV",{class:!0});var Ci=s(et);T(pk.$$.fragment,Ci),Att=i(Ci),LAe=n(Ci,"P",{});var RHt=s(LAe);Ltt=r(RHt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RHt.forEach(t),ytt=i(Ci),kn=n(Ci,"P",{});var iy=s(kn);xtt=r(iy,"The model class to instantiate is selected based on the "),yAe=n(iy,"CODE",{});var PHt=s(yAe);$tt=r(PHt,"model_type"),PHt.forEach(t),ktt=r(iy,` property of the config object (either
passed as an argument or loaded from `),xAe=n(iy,"CODE",{});var BHt=s(xAe);Stt=r(BHt,"pretrained_model_name_or_path"),BHt.forEach(t),Rtt=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ae=n(iy,"CODE",{});var IHt=s($Ae);Ptt=r(IHt,"pretrained_model_name_or_path"),IHt.forEach(t),Btt=r(iy,":"),iy.forEach(t),Itt=i(Ci),kAe=n(Ci,"UL",{});var NHt=s(kAe);qw=n(NHt,"LI",{});var QXe=s(qw);SAe=n(QXe,"STRONG",{});var qHt=s(SAe);Ntt=r(qHt,"bert"),qHt.forEach(t),qtt=r(QXe," \u2014 "),Yre=n(QXe,"A",{href:!0});var jHt=s(Yre);jtt=r(jHt,"FlaxBertForNextSentencePrediction"),jHt.forEach(t),Dtt=r(QXe," (BERT model)"),QXe.forEach(t),NHt.forEach(t),Gtt=i(Ci),T(jw.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),KWe=i(f),Lf=n(f,"H2",{class:!0});var lUe=s(Lf);Dw=n(lUe,"A",{id:!0,class:!0,href:!0});var DHt=s(Dw);RAe=n(DHt,"SPAN",{});var GHt=s(RAe);T(_k.$$.fragment,GHt),GHt.forEach(t),DHt.forEach(t),Ott=i(lUe),PAe=n(lUe,"SPAN",{});var OHt=s(PAe);Vtt=r(OHt,"FlaxAutoModelForImageClassification"),OHt.forEach(t),lUe.forEach(t),ZWe=i(f),Lr=n(f,"DIV",{class:!0});var wi=s(Lr);T(uk.$$.fragment,wi),Xtt=i(wi),yf=n(wi,"P",{});var Yae=s(yf);ztt=r(Yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Kre=n(Yae,"A",{href:!0});var VHt=s(Kre);Wtt=r(VHt,"from_pretrained()"),VHt.forEach(t),Qtt=r(Yae," class method or the "),Zre=n(Yae,"A",{href:!0});var XHt=s(Zre);Htt=r(XHt,"from_config()"),XHt.forEach(t),Utt=r(Yae,` class
method.`),Yae.forEach(t),Jtt=i(wi),bk=n(wi,"P",{});var iUe=s(bk);Ytt=r(iUe,"This class cannot be instantiated directly using "),BAe=n(iUe,"CODE",{});var zHt=s(BAe);Ktt=r(zHt,"__init__()"),zHt.forEach(t),Ztt=r(iUe," (throws an error)."),iUe.forEach(t),eat=i(wi),ta=n(wi,"DIV",{class:!0});var dy=s(ta);T(vk.$$.fragment,dy),oat=i(dy),IAe=n(dy,"P",{});var WHt=s(IAe);rat=r(WHt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WHt.forEach(t),tat=i(dy),xf=n(dy,"P",{});var Kae=s(xf);aat=r(Kae,`Note:
Loading a model from its configuration file does `),NAe=n(Kae,"STRONG",{});var QHt=s(NAe);nat=r(QHt,"not"),QHt.forEach(t),sat=r(Kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=n(Kae,"A",{href:!0});var HHt=s(ete);lat=r(HHt,"from_pretrained()"),HHt.forEach(t),iat=r(Kae," to load the model weights."),Kae.forEach(t),dat=i(dy),T(Gw.$$.fragment,dy),dy.forEach(t),cat=i(wi),ot=n(wi,"DIV",{class:!0});var Ai=s(ot);T(Fk.$$.fragment,Ai),fat=i(Ai),qAe=n(Ai,"P",{});var UHt=s(qAe);mat=r(UHt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),UHt.forEach(t),gat=i(Ai),Sn=n(Ai,"P",{});var cy=s(Sn);hat=r(cy,"The model class to instantiate is selected based on the "),jAe=n(cy,"CODE",{});var JHt=s(jAe);pat=r(JHt,"model_type"),JHt.forEach(t),_at=r(cy,` property of the config object (either
passed as an argument or loaded from `),DAe=n(cy,"CODE",{});var YHt=s(DAe);uat=r(YHt,"pretrained_model_name_or_path"),YHt.forEach(t),bat=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GAe=n(cy,"CODE",{});var KHt=s(GAe);vat=r(KHt,"pretrained_model_name_or_path"),KHt.forEach(t),Fat=r(cy,":"),cy.forEach(t),Tat=i(Ai),Tk=n(Ai,"UL",{});var dUe=s(Tk);Ow=n(dUe,"LI",{});var HXe=s(Ow);OAe=n(HXe,"STRONG",{});var ZHt=s(OAe);Mat=r(ZHt,"beit"),ZHt.forEach(t),Eat=r(HXe," \u2014 "),ote=n(HXe,"A",{href:!0});var eUt=s(ote);Cat=r(eUt,"FlaxBeitForImageClassification"),eUt.forEach(t),wat=r(HXe," (BEiT model)"),HXe.forEach(t),Aat=i(dUe),Vw=n(dUe,"LI",{});var UXe=s(Vw);VAe=n(UXe,"STRONG",{});var oUt=s(VAe);Lat=r(oUt,"vit"),oUt.forEach(t),yat=r(UXe," \u2014 "),rte=n(UXe,"A",{href:!0});var rUt=s(rte);xat=r(rUt,"FlaxViTForImageClassification"),rUt.forEach(t),$at=r(UXe," (ViT model)"),UXe.forEach(t),dUe.forEach(t),kat=i(Ai),T(Xw.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),eQe=i(f),$f=n(f,"H2",{class:!0});var cUe=s($f);zw=n(cUe,"A",{id:!0,class:!0,href:!0});var tUt=s(zw);XAe=n(tUt,"SPAN",{});var aUt=s(XAe);T(Mk.$$.fragment,aUt),aUt.forEach(t),tUt.forEach(t),Sat=i(cUe),zAe=n(cUe,"SPAN",{});var nUt=s(zAe);Rat=r(nUt,"FlaxAutoModelForVision2Seq"),nUt.forEach(t),cUe.forEach(t),oQe=i(f),yr=n(f,"DIV",{class:!0});var Li=s(yr);T(Ek.$$.fragment,Li),Pat=i(Li),kf=n(Li,"P",{});var Zae=s(kf);Bat=r(Zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tte=n(Zae,"A",{href:!0});var sUt=s(tte);Iat=r(sUt,"from_pretrained()"),sUt.forEach(t),Nat=r(Zae," class method or the "),ate=n(Zae,"A",{href:!0});var lUt=s(ate);qat=r(lUt,"from_config()"),lUt.forEach(t),jat=r(Zae,` class
method.`),Zae.forEach(t),Dat=i(Li),Ck=n(Li,"P",{});var fUe=s(Ck);Gat=r(fUe,"This class cannot be instantiated directly using "),WAe=n(fUe,"CODE",{});var iUt=s(WAe);Oat=r(iUt,"__init__()"),iUt.forEach(t),Vat=r(fUe," (throws an error)."),fUe.forEach(t),Xat=i(Li),aa=n(Li,"DIV",{class:!0});var fy=s(aa);T(wk.$$.fragment,fy),zat=i(fy),QAe=n(fy,"P",{});var dUt=s(QAe);Wat=r(dUt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dUt.forEach(t),Qat=i(fy),Sf=n(fy,"P",{});var ene=s(Sf);Hat=r(ene,`Note:
Loading a model from its configuration file does `),HAe=n(ene,"STRONG",{});var cUt=s(HAe);Uat=r(cUt,"not"),cUt.forEach(t),Jat=r(ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=n(ene,"A",{href:!0});var fUt=s(nte);Yat=r(fUt,"from_pretrained()"),fUt.forEach(t),Kat=r(ene," to load the model weights."),ene.forEach(t),Zat=i(fy),T(Ww.$$.fragment,fy),fy.forEach(t),ent=i(Li),rt=n(Li,"DIV",{class:!0});var yi=s(rt);T(Ak.$$.fragment,yi),ont=i(yi),UAe=n(yi,"P",{});var mUt=s(UAe);rnt=r(mUt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mUt.forEach(t),tnt=i(yi),Rn=n(yi,"P",{});var my=s(Rn);ant=r(my,"The model class to instantiate is selected based on the "),JAe=n(my,"CODE",{});var gUt=s(JAe);nnt=r(gUt,"model_type"),gUt.forEach(t),snt=r(my,` property of the config object (either
passed as an argument or loaded from `),YAe=n(my,"CODE",{});var hUt=s(YAe);lnt=r(hUt,"pretrained_model_name_or_path"),hUt.forEach(t),int=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=n(my,"CODE",{});var pUt=s(KAe);dnt=r(pUt,"pretrained_model_name_or_path"),pUt.forEach(t),cnt=r(my,":"),my.forEach(t),fnt=i(yi),ZAe=n(yi,"UL",{});var _Ut=s(ZAe);Qw=n(_Ut,"LI",{});var JXe=s(Qw);eLe=n(JXe,"STRONG",{});var uUt=s(eLe);mnt=r(uUt,"vision-encoder-decoder"),uUt.forEach(t),gnt=r(JXe," \u2014 "),ste=n(JXe,"A",{href:!0});var bUt=s(ste);hnt=r(bUt,"FlaxVisionEncoderDecoderModel"),bUt.forEach(t),pnt=r(JXe," (Vision Encoder decoder model)"),JXe.forEach(t),_Ut.forEach(t),_nt=i(yi),T(Hw.$$.fragment,yi),yi.forEach(t),Li.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(CYt)),d(m,"id","auto-classes"),d(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m,"href","#auto-classes"),d(p,"class","relative group"),d(Bn,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoConfig"),d(Nn,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoModel"),d(qn,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoTokenizer"),d(Bi,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertModel"),d(Df,"id","extending-the-auto-classes"),d(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Df,"href","#extending-the-auto-classes"),d(Ii,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(Ni,"class","relative group"),d(rR,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(tR,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig"),d(aR,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig"),d(nR,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig"),d(sR,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig"),d(lR,"href","/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(iR,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig"),d(dR,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(cR,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(fR,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(mR,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig"),d(gR,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig"),d(hR,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig"),d(pR,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPConfig"),d(_R,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenConfig"),d(uR,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig"),d(bR,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig"),d(vR,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig"),d(FR,"href","/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtConfig"),d(TR,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(MR,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(ER,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(CR,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig"),d(wR,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(AR,"href","/docs/transformers/pr_17671/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(LR,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig"),d(yR,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrConfig"),d(xR,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig"),d($R,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRConfig"),d(kR,"href","/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTConfig"),d(SR,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig"),d(RR,"href","/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(PR,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig"),d(BR,"href","/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaConfig"),d(IR,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig"),d(NR,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTConfig"),d(qR,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig"),d(jR,"href","/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNConfig"),d(DR,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config"),d(GR,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(OR,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(VR,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig"),d(XR,"href","/docs/transformers/pr_17671/en/model_doc/groupvit#transformers.GroupViTConfig"),d(zR,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig"),d(WR,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig"),d(QR,"href","/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(HR,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(UR,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(JR,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(YR,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig"),d(KR,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitConfig"),d(ZR,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig"),d(eP,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config"),d(oP,"href","/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeConfig"),d(rP,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig"),d(tP,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Config"),d(aP,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig"),d(nP,"href","/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(sP,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig"),d(lP,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig"),d(iP,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(dP,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(cP,"href","/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(fP,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig"),d(mP,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config"),d(gP,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpConfig"),d(hP,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig"),d(pP,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(_P,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(uP,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig"),d(bP,"href","/docs/transformers/pr_17671/en/model_doc/owlvit#transformers.OwlViTConfig"),d(vP,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig"),d(FP,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig"),d(TP,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig"),d(MP,"href","/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(EP,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(CP,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(wP,"href","/docs/transformers/pr_17671/en/model_doc/rag#transformers.RagConfig"),d(AP,"href","/docs/transformers/pr_17671/en/model_doc/realm#transformers.RealmConfig"),d(LP,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig"),d(yP,"href","/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetConfig"),d(xP,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig"),d($P,"href","/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetConfig"),d(kP,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertConfig"),d(SP,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig"),d(RP,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig"),d(PP,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig"),d(BP,"href","/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWConfig"),d(IP,"href","/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDConfig"),d(NP,"href","/docs/transformers/pr_17671/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(qP,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(jP,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(DP,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterConfig"),d(GP,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(OP,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig"),d(VP,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config"),d(XP,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig"),d(zP,"href","/docs/transformers/pr_17671/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(WP,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(QP,"href","/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRConfig"),d(HP,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(UP,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(JP,"href","/docs/transformers/pr_17671/en/model_doc/van#transformers.VanConfig"),d(YP,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltConfig"),d(KP,"href","/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(ZP,"href","/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(eB,"href","/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(oB,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig"),d(rB,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(tB,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(aB,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(nB,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig"),d(sB,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig"),d(lB,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig"),d(iB,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(dB,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(cB,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(fB,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig"),d(mB,"href","/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosConfig"),d(gB,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"id","transformers.AutoTokenizer"),d(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rh,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(hB,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(pB,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizer"),d(_B,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(uB,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartTokenizer"),d(bB,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartTokenizerFast"),d(vB,"href","/docs/transformers/pr_17671/en/model_doc/barthez#transformers.BarthezTokenizer"),d(FB,"href","/docs/transformers/pr_17671/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(TB,"href","/docs/transformers/pr_17671/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(MB,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),d(EB,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),d(CB,"href","/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(wB,"href","/docs/transformers/pr_17671/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(AB,"href","/docs/transformers/pr_17671/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(LB,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(yB,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(xB,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusTokenizer"),d($B,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(kB,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(SB,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(RB,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(PB,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(BB,"href","/docs/transformers/pr_17671/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(IB,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertTokenizer"),d(NB,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(qB,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineTokenizer"),d(jB,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizer"),d(DB,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(GB,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(OB,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(VB,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(XB,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(zB,"href","/docs/transformers/pr_17671/en/model_doc/cpm#transformers.CpmTokenizer"),d(WB,"href","/docs/transformers/pr_17671/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(QB,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(HB,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizer"),d(UB,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(JB,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaTokenizer"),d(YB,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(KB,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(ZB,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(eI,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(oI,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(rI,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(tI,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(aI,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraTokenizer"),d(nI,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(sI,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(lI,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetTokenizer"),d(iI,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(dI,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(cI,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelTokenizer"),d(fI,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(mI,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(gI,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(hI,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(pI,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(_I,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(uI,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(bI,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(vI,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizer"),d(FI,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(TI,"href","/docs/transformers/pr_17671/en/model_doc/herbert#transformers.HerbertTokenizer"),d(MI,"href","/docs/transformers/pr_17671/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(EI,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(CI,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizer"),d(wI,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(AI,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(LI,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(yI,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(xI,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d($I,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(kI,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(SI,"href","/docs/transformers/pr_17671/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(RI,"href","/docs/transformers/pr_17671/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(PI,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDTokenizer"),d(BI,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDTokenizerFast"),d(II,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerTokenizer"),d(NI,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(qI,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.T5Tokenizer"),d(jI,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.T5TokenizerFast"),d(DI,"href","/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeTokenizer"),d(GI,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(OI,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(VI,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(XI,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianTokenizer"),d(zI,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartTokenizer"),d(WI,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(QI,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(HI,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(UI,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),d(JI,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),d(YI,"href","/docs/transformers/pr_17671/en/model_doc/mluke#transformers.MLukeTokenizer"),d(KI,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(ZI,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(eN,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(oN,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(rN,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.T5Tokenizer"),d(tN,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.T5TokenizerFast"),d(aN,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpTokenizer"),d(nN,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(sN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),d(lN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),d(iN,"href","/docs/transformers/pr_17671/en/model_doc/nllb#transformers.NllbTokenizer"),d(dN,"href","/docs/transformers/pr_17671/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(cN,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizer"),d(fN,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(mN,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(gN,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(hN,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(pN,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizer"),d(_N,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(uN,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(bN,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(vN,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(FN,"href","/docs/transformers/pr_17671/en/model_doc/phobert#transformers.PhobertTokenizer"),d(TN,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartTokenizer"),d(MN,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(EN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),d(CN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),d(wN,"href","/docs/transformers/pr_17671/en/model_doc/rag#transformers.RagTokenizer"),d(AN,"href","/docs/transformers/pr_17671/en/model_doc/realm#transformers.RealmTokenizer"),d(LN,"href","/docs/transformers/pr_17671/en/model_doc/realm#transformers.RealmTokenizerFast"),d(yN,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerTokenizer"),d(xN,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d($N,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertTokenizer"),d(kN,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(SN,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(RN,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(PN,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizer"),d(BN,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(IN,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(NN,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(qN,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(jN,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(DN,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterTokenizer"),d(GN,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(ON,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(VN,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(XN,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.T5Tokenizer"),d(zN,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.T5TokenizerFast"),d(WN,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasTokenizer"),d(QN,"href","/docs/transformers/pr_17671/en/model_doc/tapex#transformers.TapexTokenizer"),d(HN,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(UN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),d(JN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),d(YN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),d(KN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),d(ZN,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(eq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(oq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(rq,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMTokenizer"),d(tq,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(aq,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMTokenizer"),d(nq,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(sq,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(lq,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(iq,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizer"),d(dq,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(cq,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(fq,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(mq,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizer"),d(gq,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizerFast"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"id","transformers.AutoFeatureExtractor"),d(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qh,"href","#transformers.AutoFeatureExtractor"),d(Di,"class","relative group"),d(hq,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(pq,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(_q,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(uq,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(bq,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(vq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Fq,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Tq,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Mq,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Eq,"href","/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(Cq,"href","/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d(wq,"href","/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(Aq,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Lq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(yq,"href","/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(xq,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d($q,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(kq,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitFeatureExtractor"),d(Sq,"href","/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(Rq,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(Pq,"href","/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(Bq,"href","/docs/transformers/pr_17671/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Iq,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Nq,"href","/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(qq,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(jq,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Dq,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Gq,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Oq,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Vq,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Xq,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(zq,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Wq,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Qq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Hq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Uq,"href","/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ep,"id","transformers.AutoProcessor"),d(Ep,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ep,"href","#transformers.AutoProcessor"),d(Gi,"class","relative group"),d(Jq,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Yq,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPProcessor"),d(Kq,"href","/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaProcessor"),d(Zq,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPProcessor"),d(ej,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(oj,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(rj,"href","/docs/transformers/pr_17671/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(tj,"href","/docs/transformers/pr_17671/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(aj,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(nj,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(sj,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(lj,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(ij,"href","/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRProcessor"),d(dj,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(cj,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(fj,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltProcessor"),d(mj,"href","/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(gj,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(hj,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(pj,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wp,"id","transformers.AutoModel"),d(Wp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wp,"href","#transformers.AutoModel"),d(Vi,"class","relative group"),d(_j,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uj,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bj,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vj,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertModel"),d(Fj,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartModel"),d(Tj,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitModel"),d(Mj,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertModel"),d(Ej,"href","/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Cj,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdModel"),d(wj,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Aj,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Lj,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(yj,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomModel"),d(xj,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertModel"),d($j,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineModel"),d(kj,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPModel"),d(Sj,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenModel"),d(Rj,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertModel"),d(Pj,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextModel"),d(Bj,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLModel"),d(Ij,"href","/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtModel"),d(Nj,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(qj,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(jj,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(Dj,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaModel"),d(Gj,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(Oj,"href","/docs/transformers/pr_17671/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(Vj,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTModel"),d(Xj,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrModel"),d(zj,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertModel"),d(Wj,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(Qj,"href","/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTModel"),d(Hj,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraModel"),d(Uj,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertModel"),d(Jj,"href","/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaModel"),d(Yj,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetModel"),d(Kj,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTModel"),d(Zj,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelModel"),d(eD,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelBaseModel"),d(oD,"href","/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNModel"),d(rD,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Model"),d(tD,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(aD,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(nD,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJModel"),d(sD,"href","/docs/transformers/pr_17671/en/model_doc/groupvit#transformers.GroupViTModel"),d(lD,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertModel"),d(iD,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertModel"),d(dD,"href","/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(cD,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(fD,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(mD,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(gD,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDModel"),d(hD,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitModel"),d(pD,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerModel"),d(_D,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Model"),d(uD,"href","/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeModel"),d(bD,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertModel"),d(vD,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Model"),d(FD,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianModel"),d(TD,"href","/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerModel"),d(MD,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartModel"),d(ED,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTModel"),d(CD,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(wD,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertModel"),d(AD,"href","/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTModel"),d(LD,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetModel"),d(yD,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Model"),d(xD,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpModel"),d($D,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaModel"),d(kD,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Model"),d(SD,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerModel"),d(RD,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(PD,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTModel"),d(BD,"href","/docs/transformers/pr_17671/en/model_doc/owlvit#transformers.OwlViTModel"),d(ID,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusModel"),d(ND,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverModel"),d(qD,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartModel"),d(jD,"href","/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerModel"),d(DD,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(GD,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertModel"),d(OD,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerModel"),d(VD,"href","/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetModel"),d(XD,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertModel"),d(zD,"href","/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetModel"),d(WD,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertModel"),d(QD,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaModel"),d(HD,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerModel"),d(UD,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerModel"),d(JD,"href","/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWModel"),d(YD,"href","/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDModel"),d(KD,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(ZD,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterModel"),d(eG,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(oG,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinModel"),d(rG,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Model"),d(tG,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasModel"),d(aG,"href","/docs/transformers/pr_17671/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(nG,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(sG,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechModel"),d(lG,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(iG,"href","/docs/transformers/pr_17671/en/model_doc/van#transformers.VanModel"),d(dG,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltModel"),d(cG,"href","/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(fG,"href","/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertModel"),d(mG,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTModel"),d(gG,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(hG,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(pG,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(_G,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMModel"),d(uG,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMModel"),d(bG,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMModel"),d(vG,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(FG,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(TG,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(MG,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetModel"),d(EG,"href","/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosModel"),d(CG,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e1,"id","transformers.AutoModelForPreTraining"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForPreTraining"),d(Wi,"class","relative group"),d(wG,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AG,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LG,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yG,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForPreTraining"),d(xG,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration"),d($G,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForPreTraining"),d(kG,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(SG,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForCausalLM"),d(RG,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(PG,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(BG,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(IG,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(NG,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(qG,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(jG,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForPreTraining"),d(DG,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(GG,"href","/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaForPreTraining"),d(OG,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForPreTraining"),d(VG,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(XG,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(zG,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(WG,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(QG,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(HG,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(UG,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(JG,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(YG,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(KG,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(ZG,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(eO,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(oO,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(rO,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertModel"),d(tO,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(aO,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(nO,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(sO,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(lO,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(iO,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(dO,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(cO,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(fO,"href","/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(mO,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(gO,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(hO,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(pO,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(_O,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(uO,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(bO,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U1,"id","transformers.AutoModelForCausalLM"),d(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U1,"href","#transformers.AutoModelForCausalLM"),d(Ui,"class","relative group"),d(vO,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FO,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TO,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MO,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForCausalLM"),d(EO,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertLMHeadModel"),d(CO,"href","/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(wO,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(AO,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(LO,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(yO,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(xO,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForCausalLM"),d($O,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(kO,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(SO,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(RO,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(PO,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForCausalLM"),d(BO,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(IO,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(NO,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(qO,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(jO,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianForCausalLM"),d(DO,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForCausalLM"),d(GO,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(OO,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForCausalLM"),d(VO,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(XO,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTForCausalLM"),d(zO,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(WO,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(QO,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(HO,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(UO,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(JO,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(YO,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(KO,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(ZO,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(eV,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(oV,"href","/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(rV,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(tV,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aV,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(nV,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(sV,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(lV,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j7,"id","transformers.AutoModelForMaskedLM"),d(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j7,"href","#transformers.AutoModelForMaskedLM"),d(Ki,"class","relative group"),d(iV,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dV,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cV,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fV,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(mV,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(gV,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForMaskedLM"),d(hV,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(pV,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(_V,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(uV,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(bV,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(vV,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(FV,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(TV,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(MV,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(EV,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(CV,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(wV,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(AV,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(LV,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(yV,"href","/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeForMaskedLM"),d(xV,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d($V,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(kV,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(SV,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(RV,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(PV,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(BV,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(IV,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(NV,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(qV,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(jV,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(DV,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(GV,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(OV,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(VV,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(XV,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(zV,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(WV,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(QV,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L2,"id","transformers.AutoModelForSeq2SeqLM"),d(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L2,"href","#transformers.AutoModelForSeq2SeqLM"),d(od,"class","relative group"),d(HV,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UV,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JV,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YV,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(KV,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(ZV,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(eX,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(oX,"href","/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(rX,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(tX,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(aX,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(nX,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(sX,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianMTModel"),d(lX,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(iX,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(dX,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(cX,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(hX,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(pX,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J2,"id","transformers.AutoModelForSequenceClassification"),d(J2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J2,"href","#transformers.AutoModelForSequenceClassification"),d(ad,"class","relative group"),d(_X,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uX,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bX,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vX,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(FX,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForSequenceClassification"),d(TX,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForSequenceClassification"),d(MX,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(EX,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(CX,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(wX,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(AX,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(LX,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(yX,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(xX,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d($X,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(kX,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(SX,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(RX,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(PX,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(BX,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(IX,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(NX,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(qX,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(jX,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(DX,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(GX,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(OX,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(VX,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(XX,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForSequenceClassification"),d(zX,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(WX,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(QX,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForSequenceClassification"),d(HX,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(JX,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(YX,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(KX,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(ez,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(oz,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(rz,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(tz,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(az,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(nz,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(sz,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(lz,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(iz,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(dz,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(cz,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(fz,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(mz,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(gz,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(hz,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(pz,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(_z,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kb,"id","transformers.AutoModelForMultipleChoice"),d(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kb,"href","#transformers.AutoModelForMultipleChoice"),d(ld,"class","relative group"),d(uz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fz,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(wz,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(yz,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d($z,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(qz,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(jz,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(zz,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sv,"id","transformers.AutoModelForNextSentencePrediction"),d(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sv,"href","#transformers.AutoModelForNextSentencePrediction"),d(cd,"class","relative group"),d(Jz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Kz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zz,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(eW,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(oW,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(rW,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(tW,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(aW,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ov,"id","transformers.AutoModelForTokenClassification"),d(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ov,"href","#transformers.AutoModelForTokenClassification"),d(gd,"class","relative group"),d(nW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iW,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(dW,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForTokenClassification"),d(cW,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(fW,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(mW,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(gW,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForTokenClassification"),d(hW,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(pW,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(_W,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(uW,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(bW,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(vW,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(FW,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(TW,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(MW,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(EW,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(CW,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(wW,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(AW,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(LW,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(yW,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(xW,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d($W,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(kW,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(SW,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(RW,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(PW,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(BW,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(IW,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(NW,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(qW,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(jW,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(DW,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(GW,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(OW,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(VW,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yF,"id","transformers.AutoModelForQuestionAnswering"),d(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yF,"href","#transformers.AutoModelForQuestionAnswering"),d(_d,"class","relative group"),d(XW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QW,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(HW,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(UW,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(JW,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(YW,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(KW,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(ZW,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(lQ,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_17671/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(kQ,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(PQ,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F6,"id","transformers.AutoModelForTableQuestionAnswering"),d(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F6,"href","#transformers.AutoModelForTableQuestionAnswering"),d(vd,"class","relative group"),d(BQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qQ,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w6,"id","transformers.AutoModelForImageClassification"),d(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w6,"href","#transformers.AutoModelForImageClassification"),d(Md,"class","relative group"),d(jQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OQ,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitForImageClassification"),d(VQ,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(XQ,"href","/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtForImageClassification"),d(zQ,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(WQ,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForImageClassification"),d(QQ,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(HQ,"href","/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(UQ,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitForImageClassification"),d(JQ,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(YQ,"href","/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(KQ,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(ZQ,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(eH,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(oH,"href","/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(rH,"href","/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(tH,"href","/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(aH,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(nH,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinForImageClassification"),d(sH,"href","/docs/transformers/pr_17671/en/model_doc/van#transformers.VanForImageClassification"),d(lH,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O6,"id","transformers.AutoModelForVision2Seq"),d(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O6,"href","#transformers.AutoModelForVision2Seq"),d(wd,"class","relative group"),d(iH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fH,"href","/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q6,"id","transformers.AutoModelForVisualQuestionAnswering"),d(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q6,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(yd,"class","relative group"),d(mH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pH,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K6,"id","transformers.AutoModelForAudioClassification"),d(K6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K6,"href","#transformers.AutoModelForAudioClassification"),d(kd,"class","relative group"),d(_H,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vH,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(FH,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(TH,"href","/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(MH,"href","/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(EH,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(CH,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(wH,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(AH,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(LH,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fT,"id","transformers.AutoModelForAudioFrameClassification"),d(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fT,"href","#transformers.AutoModelForAudioFrameClassification"),d(Pd,"class","relative group"),d(yH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($H,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kH,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(SH,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForAudioFrameClassification"),d(RH,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(PH,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(BH,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(IH,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TT,"id","transformers.AutoModelForCTC"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.AutoModelForCTC"),d(Nd,"class","relative group"),d(NH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DH,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(GH,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertForCTC"),d(OH,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForCTC"),d(VH,"href","/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWForCTC"),d(XH,"href","/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDForCTC"),d(zH,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(WH,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(QH,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(HH,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(UH,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Dd,"class","relative group"),d(JH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZH,"href","/docs/transformers/pr_17671/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(eU,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GT,"id","transformers.AutoModelForAudioXVector"),d(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GT,"href","#transformers.AutoModelForAudioXVector"),d(Vd,"class","relative group"),d(oU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aU,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(nU,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(sU,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(lU,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(iU,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForXVector"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JT,"id","transformers.AutoModelForMaskedImageModeling"),d(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JT,"href","#transformers.AutoModelForMaskedImageModeling"),d(Wd,"class","relative group"),d(dU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mU,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(gU,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(hU,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tM,"id","transformers.AutoModelForObjectDetection"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(pU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_U,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bU,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrForObjectDetection"),d(vU,"href","/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dM,"id","transformers.AutoModelForImageSegmentation"),d(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dM,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(FU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EU,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hM,"id","transformers.AutoModelForSemanticSegmentation"),d(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hM,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(CU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LU,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(yU,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(xU,"href","/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d($U,"href","/docs/transformers/pr_17671/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(kU,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EM,"id","transformers.AutoModelForInstanceSegmentation"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(SU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BU,"href","/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yM,"id","transformers.TFAutoModel"),d(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yM,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d(IU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jU,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertModel"),d(DU,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartModel"),d(GU,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertModel"),d(OU,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(VU,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(XU,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertModel"),d(zU,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.TFCLIPModel"),d(WU,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertModel"),d(QU,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.TFConvNextModel"),d(HU,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLModel"),d(UU,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(JU,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaModel"),d(YU,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(KU,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.TFDeiTModel"),d(ZU,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(eJ,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(oJ,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraModel"),d(rJ,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(tJ,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelModel"),d(aJ,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(nJ,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2Model"),d(sJ,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJModel"),d(lJ,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.TFHubertModel"),d(iJ,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(dJ,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.TFLEDModel"),d(cJ,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerModel"),d(fJ,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.TFLxmertModel"),d(mJ,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.TFMarianModel"),d(gJ,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.TFMBartModel"),d(hJ,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(pJ,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetModel"),d(_J,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.TFMT5Model"),d(uJ,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(bJ,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.TFOPTModel"),d(vJ,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.TFPegasusModel"),d(FJ,"href","/docs/transformers/pr_17671/en/model_doc/regnet#transformers.TFRegNetModel"),d(TJ,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertModel"),d(MJ,"href","/docs/transformers/pr_17671/en/model_doc/resnet#transformers.TFResNetModel"),d(EJ,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaModel"),d(CJ,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerModel"),d(wJ,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.TFSegformerModel"),d(AJ,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(LJ,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.TFSwinModel"),d(yJ,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5Model"),d(xJ,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasModel"),d($J,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(kJ,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.TFViTModel"),d(SJ,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(RJ,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(PJ,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMModel"),d(BJ,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(IJ,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L4,"id","transformers.TFAutoModelForPreTraining"),d(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L4,"href","#transformers.TFAutoModelForPreTraining"),d(fc,"class","relative group"),d(NJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DJ,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(GJ,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(OJ,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForPreTraining"),d(VJ,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(XJ,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(zJ,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(WJ,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(QJ,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(HJ,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(UJ,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(JJ,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(YJ,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(KJ,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(ZJ,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(eY,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(oY,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(rY,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(tY,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(aY,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(nY,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(sY,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(lY,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(iY,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z4,"id","transformers.TFAutoModelForCausalLM"),d(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z4,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(dY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mY,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(gY,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(hY,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(pY,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(_Y,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(uY,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(bY,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(vY,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(FY,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(TY,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(MY,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(EY,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(CY,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pE,"id","transformers.TFAutoModelForImageClassification"),d(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pE,"href","#transformers.TFAutoModelForImageClassification"),d(uc,"class","relative group"),d(wY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yY,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(xY,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d($Y,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(kY,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(SY,"href","/docs/transformers/pr_17671/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(RY,"href","/docs/transformers/pr_17671/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(PY,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(BY,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(IY,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wE,"id","transformers.TFAutoModelForMaskedLM"),d(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wE,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(NY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DY,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(GY,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(OY,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(VY,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(XY,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(zY,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(WY,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(QY,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(HY,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(UY,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(JY,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(YY,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(KY,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(ZY,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(eK,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(oK,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(rK,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(tK,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(aK,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(nK,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HE,"id","transformers.TFAutoModelForSeq2SeqLM"),d(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HE,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(sK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dK,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(cK,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(fK,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(mK,"href","/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(gK,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(hK,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.TFMarianMTModel"),d(pK,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(_K,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(uK,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(bK,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lC,"id","transformers.TFAutoModelForSequenceClassification"),d(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lC,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(vK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MK,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(EK,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(CK,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(wK,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(AK,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(LK,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(yK,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(xK,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d($K,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(kK,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(SK,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(RK,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(PK,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(BK,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(IK,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(NK,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(qK,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(jK,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(DK,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(GK,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(OK,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(VK,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(XK,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(zK,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(WK,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(QK,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IC,"id","transformers.TFAutoModelForMultipleChoice"),d(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IC,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(HK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YK,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(KK,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(ZK,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(eZ,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(oZ,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(rZ,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(tZ,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(aZ,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(nZ,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(sZ,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(lZ,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(iZ,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(dZ,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(cZ,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(fZ,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(mZ,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(gZ,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r5,"id","transformers.TFAutoModelForNextSentencePrediction"),d(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r5,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(hZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_Z,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uZ,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(bZ,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l5,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(vZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MZ,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f5,"id","transformers.TFAutoModelForTokenClassification"),d(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f5,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(EZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AZ,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(LZ,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(yZ,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(xZ,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d($Z,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(kZ,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(SZ,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(RZ,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(PZ,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(BZ,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(IZ,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(NZ,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(qZ,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(jZ,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(DZ,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(GZ,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(OZ,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(VZ,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(XZ,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(zZ,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P5,"id","transformers.TFAutoModelForQuestionAnswering"),d(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P5,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(WZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UZ,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(JZ,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(YZ,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(KZ,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(ZZ,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(eee,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(oee,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(ree,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(tee,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(aee,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(nee,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(see,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(lee,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(iee,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(dee,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(cee,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(fee,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(mee,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(gee,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(hee,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t3,"id","transformers.TFAutoModelForVision2Seq"),d(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t3,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(pee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_ee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bee,"href","/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(vee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Tee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mee,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f3,"id","transformers.FlaxAutoModel"),d(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f3,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d(Eee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Cee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Aee,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertModel"),d(Lee,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartModel"),d(yee,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.FlaxBeitModel"),d(xee,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertModel"),d($ee,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(kee,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(See,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(Ree,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.FlaxCLIPModel"),d(Pee,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(Bee,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraModel"),d(Iee,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(Nee,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(qee,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(jee,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(Dee,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.FlaxMarianModel"),d(Gee,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartModel"),d(Oee,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5Model"),d(Vee,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.FlaxOPTModel"),d(Xee,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(zee,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(Wee,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(Qee,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5Model"),d(Hee,"href","/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(Uee,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.FlaxViTModel"),d(Jee,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(Yee,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(Kee,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G3,"id","transformers.FlaxAutoModelForCausalLM"),d(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G3,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(Zee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eoe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ooe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(roe,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(toe,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(aoe,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(noe,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(soe,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(loe,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(ioe,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(doe,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(coe,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(foe,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e0,"id","transformers.FlaxAutoModelForPreTraining"),d(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e0,"href","#transformers.FlaxAutoModelForPreTraining"),d(rf,"class","relative group"),d(moe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(goe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hoe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(poe,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(_oe,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(uoe,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(boe,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(voe,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(Foe,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(Toe,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Moe,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Eoe,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Coe,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(woe,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Aoe,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Loe,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_0,"id","transformers.FlaxAutoModelForMaskedLM"),d(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_0,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nf,"class","relative group"),d(yoe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xoe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($oe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(koe,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(Soe,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Roe,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(Poe,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(Boe,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(Ioe,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(Noe,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(qoe,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(joe,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Doe,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(df,"class","relative group"),d(Goe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ooe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Voe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xoe,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(zoe,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(Woe,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(Qoe,"href","/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(Hoe,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(Uoe,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(Joe,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Yoe,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Koe,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(Zoe,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O0,"id","transformers.FlaxAutoModelForSequenceClassification"),d(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O0,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mf,"class","relative group"),d(ere,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ore,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tre,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(are,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(nre,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(sre,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(lre,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(ire,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(dre,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(cre,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(fre,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(mre,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ow,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ow,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pf,"class","relative group"),d(gre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_re,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(ure,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(bre,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(vre,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Fre,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Tre,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Mre,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Ere,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Cre,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(wre,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hw,"id","transformers.FlaxAutoModelForTokenClassification"),d(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hw,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bf,"class","relative group"),d(Are,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xre,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d($re,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(kre,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Sre,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Rre,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Pre,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Bre,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Ire,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ww,"id","transformers.FlaxAutoModelForMultipleChoice"),d(ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ww,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Tf,"class","relative group"),d(Nre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dre,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Gre,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Ore,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Vre,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Xre,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(zre,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Wre,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Qre,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Iw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Iw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Cf,"class","relative group"),d(Hre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ure,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yre,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dw,"id","transformers.FlaxAutoModelForImageClassification"),d(Dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dw,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(Kre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zre,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ete,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ote,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(rte,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zw,"id","transformers.FlaxAutoModelForVision2Seq"),d(zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zw,"href","#transformers.FlaxAutoModelForVision2Seq"),d($f,"class","relative group"),d(tte,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ate,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nte,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ste,"href","/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(c,_,null),e(p,h),e(p,wo),e(wo,xi),b(f,If,u),b(f,lt,u),e(lt,$i),e(lt,ki),e(ki,gy),e(lt,Nf),b(f,Oe,u),b(f,Qe,u),e(Qe,Si),e(Qe,Bn),e(Bn,hy),e(Qe,In),e(Qe,Nn),e(Nn,py),e(Qe,Ri),e(Qe,qn),e(qn,_y),e(Qe,Pi),b(f,qf,u),M(Ra,f,u),b(f,He,u),b(f,Ae,u),e(Ae,JS),e(Ae,Bi),e(Bi,YS),e(Ae,KS),b(f,Ao,u),b(f,Pa,u),e(Pa,ZS),e(Pa,jf),e(jf,eR),e(Pa,mUe),b(f,YXe,u),b(f,Ii,u),e(Ii,Df),e(Df,one),M(uy,one,null),e(Ii,gUe),e(Ii,rne),e(rne,hUe),b(f,KXe,u),b(f,jn,u),e(jn,pUe),e(jn,tne),e(tne,_Ue),e(jn,uUe),e(jn,ane),e(ane,bUe),e(jn,vUe),b(f,ZXe,u),M(by,f,u),b(f,eze,u),b(f,oR,u),e(oR,FUe),b(f,oze,u),M(Gf,f,u),b(f,rze,u),b(f,Ni,u),e(Ni,Of),e(Of,nne),M(vy,nne,null),e(Ni,TUe),e(Ni,sne),e(sne,MUe),b(f,tze,u),b(f,Lo,u),M(Fy,Lo,null),e(Lo,EUe),e(Lo,Ty),e(Ty,CUe),e(Ty,rR),e(rR,wUe),e(Ty,AUe),e(Lo,LUe),e(Lo,My),e(My,yUe),e(My,lne),e(lne,xUe),e(My,$Ue),e(Lo,kUe),e(Lo,xr),M(Ey,xr,null),e(xr,SUe),e(xr,ine),e(ine,RUe),e(xr,PUe),e(xr,qi),e(qi,BUe),e(qi,dne),e(dne,IUe),e(qi,NUe),e(qi,cne),e(cne,qUe),e(qi,jUe),e(xr,DUe),e(xr,A),e(A,Vf),e(Vf,fne),e(fne,GUe),e(Vf,OUe),e(Vf,tR),e(tR,VUe),e(Vf,XUe),e(A,zUe),e(A,Xf),e(Xf,mne),e(mne,WUe),e(Xf,QUe),e(Xf,aR),e(aR,HUe),e(Xf,UUe),e(A,JUe),e(A,zf),e(zf,gne),e(gne,YUe),e(zf,KUe),e(zf,nR),e(nR,ZUe),e(zf,eJe),e(A,oJe),e(A,Wf),e(Wf,hne),e(hne,rJe),e(Wf,tJe),e(Wf,sR),e(sR,aJe),e(Wf,nJe),e(A,sJe),e(A,Qf),e(Qf,pne),e(pne,lJe),e(Qf,iJe),e(Qf,lR),e(lR,dJe),e(Qf,cJe),e(A,fJe),e(A,Hf),e(Hf,_ne),e(_ne,mJe),e(Hf,gJe),e(Hf,iR),e(iR,hJe),e(Hf,pJe),e(A,_Je),e(A,Uf),e(Uf,une),e(une,uJe),e(Uf,bJe),e(Uf,dR),e(dR,vJe),e(Uf,FJe),e(A,TJe),e(A,Jf),e(Jf,bne),e(bne,MJe),e(Jf,EJe),e(Jf,cR),e(cR,CJe),e(Jf,wJe),e(A,AJe),e(A,Yf),e(Yf,vne),e(vne,LJe),e(Yf,yJe),e(Yf,fR),e(fR,xJe),e(Yf,$Je),e(A,kJe),e(A,Kf),e(Kf,Fne),e(Fne,SJe),e(Kf,RJe),e(Kf,mR),e(mR,PJe),e(Kf,BJe),e(A,IJe),e(A,Zf),e(Zf,Tne),e(Tne,NJe),e(Zf,qJe),e(Zf,gR),e(gR,jJe),e(Zf,DJe),e(A,GJe),e(A,em),e(em,Mne),e(Mne,OJe),e(em,VJe),e(em,hR),e(hR,XJe),e(em,zJe),e(A,WJe),e(A,om),e(om,Ene),e(Ene,QJe),e(om,HJe),e(om,pR),e(pR,UJe),e(om,JJe),e(A,YJe),e(A,rm),e(rm,Cne),e(Cne,KJe),e(rm,ZJe),e(rm,_R),e(_R,eYe),e(rm,oYe),e(A,rYe),e(A,tm),e(tm,wne),e(wne,tYe),e(tm,aYe),e(tm,uR),e(uR,nYe),e(tm,sYe),e(A,lYe),e(A,am),e(am,Ane),e(Ane,iYe),e(am,dYe),e(am,bR),e(bR,cYe),e(am,fYe),e(A,mYe),e(A,nm),e(nm,Lne),e(Lne,gYe),e(nm,hYe),e(nm,vR),e(vR,pYe),e(nm,_Ye),e(A,uYe),e(A,sm),e(sm,yne),e(yne,bYe),e(sm,vYe),e(sm,FR),e(FR,FYe),e(sm,TYe),e(A,MYe),e(A,lm),e(lm,xne),e(xne,EYe),e(lm,CYe),e(lm,TR),e(TR,wYe),e(lm,AYe),e(A,LYe),e(A,im),e(im,$ne),e($ne,yYe),e(im,xYe),e(im,MR),e(MR,$Ye),e(im,kYe),e(A,SYe),e(A,dm),e(dm,kne),e(kne,RYe),e(dm,PYe),e(dm,ER),e(ER,BYe),e(dm,IYe),e(A,NYe),e(A,cm),e(cm,Sne),e(Sne,qYe),e(cm,jYe),e(cm,CR),e(CR,DYe),e(cm,GYe),e(A,OYe),e(A,fm),e(fm,Rne),e(Rne,VYe),e(fm,XYe),e(fm,wR),e(wR,zYe),e(fm,WYe),e(A,QYe),e(A,mm),e(mm,Pne),e(Pne,HYe),e(mm,UYe),e(mm,AR),e(AR,JYe),e(mm,YYe),e(A,KYe),e(A,gm),e(gm,Bne),e(Bne,ZYe),e(gm,eKe),e(gm,LR),e(LR,oKe),e(gm,rKe),e(A,tKe),e(A,hm),e(hm,Ine),e(Ine,aKe),e(hm,nKe),e(hm,yR),e(yR,sKe),e(hm,lKe),e(A,iKe),e(A,pm),e(pm,Nne),e(Nne,dKe),e(pm,cKe),e(pm,xR),e(xR,fKe),e(pm,mKe),e(A,gKe),e(A,_m),e(_m,qne),e(qne,hKe),e(_m,pKe),e(_m,$R),e($R,_Ke),e(_m,uKe),e(A,bKe),e(A,um),e(um,jne),e(jne,vKe),e(um,FKe),e(um,kR),e(kR,TKe),e(um,MKe),e(A,EKe),e(A,bm),e(bm,Dne),e(Dne,CKe),e(bm,wKe),e(bm,SR),e(SR,AKe),e(bm,LKe),e(A,yKe),e(A,vm),e(vm,Gne),e(Gne,xKe),e(vm,$Ke),e(vm,RR),e(RR,kKe),e(vm,SKe),e(A,RKe),e(A,Fm),e(Fm,One),e(One,PKe),e(Fm,BKe),e(Fm,PR),e(PR,IKe),e(Fm,NKe),e(A,qKe),e(A,Tm),e(Tm,Vne),e(Vne,jKe),e(Tm,DKe),e(Tm,BR),e(BR,GKe),e(Tm,OKe),e(A,VKe),e(A,Mm),e(Mm,Xne),e(Xne,XKe),e(Mm,zKe),e(Mm,IR),e(IR,WKe),e(Mm,QKe),e(A,HKe),e(A,Em),e(Em,zne),e(zne,UKe),e(Em,JKe),e(Em,NR),e(NR,YKe),e(Em,KKe),e(A,ZKe),e(A,Cm),e(Cm,Wne),e(Wne,eZe),e(Cm,oZe),e(Cm,qR),e(qR,rZe),e(Cm,tZe),e(A,aZe),e(A,wm),e(wm,Qne),e(Qne,nZe),e(wm,sZe),e(wm,jR),e(jR,lZe),e(wm,iZe),e(A,dZe),e(A,Am),e(Am,Hne),e(Hne,cZe),e(Am,fZe),e(Am,DR),e(DR,mZe),e(Am,gZe),e(A,hZe),e(A,Lm),e(Lm,Une),e(Une,pZe),e(Lm,_Ze),e(Lm,GR),e(GR,uZe),e(Lm,bZe),e(A,vZe),e(A,ym),e(ym,Jne),e(Jne,FZe),e(ym,TZe),e(ym,OR),e(OR,MZe),e(ym,EZe),e(A,CZe),e(A,xm),e(xm,Yne),e(Yne,wZe),e(xm,AZe),e(xm,VR),e(VR,LZe),e(xm,yZe),e(A,xZe),e(A,$m),e($m,Kne),e(Kne,$Ze),e($m,kZe),e($m,XR),e(XR,SZe),e($m,RZe),e(A,PZe),e(A,km),e(km,Zne),e(Zne,BZe),e(km,IZe),e(km,zR),e(zR,NZe),e(km,qZe),e(A,jZe),e(A,Sm),e(Sm,ese),e(ese,DZe),e(Sm,GZe),e(Sm,WR),e(WR,OZe),e(Sm,VZe),e(A,XZe),e(A,Rm),e(Rm,ose),e(ose,zZe),e(Rm,WZe),e(Rm,QR),e(QR,QZe),e(Rm,HZe),e(A,UZe),e(A,Pm),e(Pm,rse),e(rse,JZe),e(Pm,YZe),e(Pm,HR),e(HR,KZe),e(Pm,ZZe),e(A,eeo),e(A,Bm),e(Bm,tse),e(tse,oeo),e(Bm,reo),e(Bm,UR),e(UR,teo),e(Bm,aeo),e(A,neo),e(A,Im),e(Im,ase),e(ase,seo),e(Im,leo),e(Im,JR),e(JR,ieo),e(Im,deo),e(A,ceo),e(A,Nm),e(Nm,nse),e(nse,feo),e(Nm,meo),e(Nm,YR),e(YR,geo),e(Nm,heo),e(A,peo),e(A,qm),e(qm,sse),e(sse,_eo),e(qm,ueo),e(qm,KR),e(KR,beo),e(qm,veo),e(A,Feo),e(A,jm),e(jm,lse),e(lse,Teo),e(jm,Meo),e(jm,ZR),e(ZR,Eeo),e(jm,Ceo),e(A,weo),e(A,Dm),e(Dm,ise),e(ise,Aeo),e(Dm,Leo),e(Dm,eP),e(eP,yeo),e(Dm,xeo),e(A,$eo),e(A,Gm),e(Gm,dse),e(dse,keo),e(Gm,Seo),e(Gm,oP),e(oP,Reo),e(Gm,Peo),e(A,Beo),e(A,Om),e(Om,cse),e(cse,Ieo),e(Om,Neo),e(Om,rP),e(rP,qeo),e(Om,jeo),e(A,Deo),e(A,Vm),e(Vm,fse),e(fse,Geo),e(Vm,Oeo),e(Vm,tP),e(tP,Veo),e(Vm,Xeo),e(A,zeo),e(A,Xm),e(Xm,mse),e(mse,Weo),e(Xm,Qeo),e(Xm,aP),e(aP,Heo),e(Xm,Ueo),e(A,Jeo),e(A,zm),e(zm,gse),e(gse,Yeo),e(zm,Keo),e(zm,nP),e(nP,Zeo),e(zm,eoo),e(A,ooo),e(A,Wm),e(Wm,hse),e(hse,roo),e(Wm,too),e(Wm,sP),e(sP,aoo),e(Wm,noo),e(A,soo),e(A,Qm),e(Qm,pse),e(pse,loo),e(Qm,ioo),e(Qm,lP),e(lP,doo),e(Qm,coo),e(A,foo),e(A,Hm),e(Hm,_se),e(_se,moo),e(Hm,goo),e(Hm,iP),e(iP,hoo),e(Hm,poo),e(A,_oo),e(A,Um),e(Um,use),e(use,uoo),e(Um,boo),e(Um,dP),e(dP,voo),e(Um,Foo),e(A,Too),e(A,Jm),e(Jm,bse),e(bse,Moo),e(Jm,Eoo),e(Jm,cP),e(cP,Coo),e(Jm,woo),e(A,Aoo),e(A,Ym),e(Ym,vse),e(vse,Loo),e(Ym,yoo),e(Ym,fP),e(fP,xoo),e(Ym,$oo),e(A,koo),e(A,Km),e(Km,Fse),e(Fse,Soo),e(Km,Roo),e(Km,mP),e(mP,Poo),e(Km,Boo),e(A,Ioo),e(A,Zm),e(Zm,Tse),e(Tse,Noo),e(Zm,qoo),e(Zm,gP),e(gP,joo),e(Zm,Doo),e(A,Goo),e(A,eg),e(eg,Mse),e(Mse,Ooo),e(eg,Voo),e(eg,hP),e(hP,Xoo),e(eg,zoo),e(A,Woo),e(A,og),e(og,Ese),e(Ese,Qoo),e(og,Hoo),e(og,pP),e(pP,Uoo),e(og,Joo),e(A,Yoo),e(A,rg),e(rg,Cse),e(Cse,Koo),e(rg,Zoo),e(rg,_P),e(_P,ero),e(rg,oro),e(A,rro),e(A,tg),e(tg,wse),e(wse,tro),e(tg,aro),e(tg,uP),e(uP,nro),e(tg,sro),e(A,lro),e(A,ag),e(ag,Ase),e(Ase,iro),e(ag,dro),e(ag,bP),e(bP,cro),e(ag,fro),e(A,mro),e(A,ng),e(ng,Lse),e(Lse,gro),e(ng,hro),e(ng,vP),e(vP,pro),e(ng,_ro),e(A,uro),e(A,sg),e(sg,yse),e(yse,bro),e(sg,vro),e(sg,FP),e(FP,Fro),e(sg,Tro),e(A,Mro),e(A,lg),e(lg,xse),e(xse,Ero),e(lg,Cro),e(lg,TP),e(TP,wro),e(lg,Aro),e(A,Lro),e(A,ig),e(ig,$se),e($se,yro),e(ig,xro),e(ig,MP),e(MP,$ro),e(ig,kro),e(A,Sro),e(A,dg),e(dg,kse),e(kse,Rro),e(dg,Pro),e(dg,EP),e(EP,Bro),e(dg,Iro),e(A,Nro),e(A,cg),e(cg,Sse),e(Sse,qro),e(cg,jro),e(cg,CP),e(CP,Dro),e(cg,Gro),e(A,Oro),e(A,fg),e(fg,Rse),e(Rse,Vro),e(fg,Xro),e(fg,wP),e(wP,zro),e(fg,Wro),e(A,Qro),e(A,mg),e(mg,Pse),e(Pse,Hro),e(mg,Uro),e(mg,AP),e(AP,Jro),e(mg,Yro),e(A,Kro),e(A,gg),e(gg,Bse),e(Bse,Zro),e(gg,eto),e(gg,LP),e(LP,oto),e(gg,rto),e(A,tto),e(A,hg),e(hg,Ise),e(Ise,ato),e(hg,nto),e(hg,yP),e(yP,sto),e(hg,lto),e(A,ito),e(A,pg),e(pg,Nse),e(Nse,dto),e(pg,cto),e(pg,xP),e(xP,fto),e(pg,mto),e(A,gto),e(A,_g),e(_g,qse),e(qse,hto),e(_g,pto),e(_g,$P),e($P,_to),e(_g,uto),e(A,bto),e(A,ug),e(ug,jse),e(jse,vto),e(ug,Fto),e(ug,kP),e(kP,Tto),e(ug,Mto),e(A,Eto),e(A,bg),e(bg,Dse),e(Dse,Cto),e(bg,wto),e(bg,SP),e(SP,Ato),e(bg,Lto),e(A,yto),e(A,vg),e(vg,Gse),e(Gse,xto),e(vg,$to),e(vg,RP),e(RP,kto),e(vg,Sto),e(A,Rto),e(A,Fg),e(Fg,Ose),e(Ose,Pto),e(Fg,Bto),e(Fg,PP),e(PP,Ito),e(Fg,Nto),e(A,qto),e(A,Tg),e(Tg,Vse),e(Vse,jto),e(Tg,Dto),e(Tg,BP),e(BP,Gto),e(Tg,Oto),e(A,Vto),e(A,Mg),e(Mg,Xse),e(Xse,Xto),e(Mg,zto),e(Mg,IP),e(IP,Wto),e(Mg,Qto),e(A,Hto),e(A,Eg),e(Eg,zse),e(zse,Uto),e(Eg,Jto),e(Eg,NP),e(NP,Yto),e(Eg,Kto),e(A,Zto),e(A,Cg),e(Cg,Wse),e(Wse,eao),e(Cg,oao),e(Cg,qP),e(qP,rao),e(Cg,tao),e(A,aao),e(A,wg),e(wg,Qse),e(Qse,nao),e(wg,sao),e(wg,jP),e(jP,lao),e(wg,iao),e(A,dao),e(A,Ag),e(Ag,Hse),e(Hse,cao),e(Ag,fao),e(Ag,DP),e(DP,mao),e(Ag,gao),e(A,hao),e(A,Lg),e(Lg,Use),e(Use,pao),e(Lg,_ao),e(Lg,GP),e(GP,uao),e(Lg,bao),e(A,vao),e(A,yg),e(yg,Jse),e(Jse,Fao),e(yg,Tao),e(yg,OP),e(OP,Mao),e(yg,Eao),e(A,Cao),e(A,xg),e(xg,Yse),e(Yse,wao),e(xg,Aao),e(xg,VP),e(VP,Lao),e(xg,yao),e(A,xao),e(A,$g),e($g,Kse),e(Kse,$ao),e($g,kao),e($g,XP),e(XP,Sao),e($g,Rao),e(A,Pao),e(A,kg),e(kg,Zse),e(Zse,Bao),e(kg,Iao),e(kg,zP),e(zP,Nao),e(kg,qao),e(A,jao),e(A,Sg),e(Sg,ele),e(ele,Dao),e(Sg,Gao),e(Sg,WP),e(WP,Oao),e(Sg,Vao),e(A,Xao),e(A,Rg),e(Rg,ole),e(ole,zao),e(Rg,Wao),e(Rg,QP),e(QP,Qao),e(Rg,Hao),e(A,Uao),e(A,Pg),e(Pg,rle),e(rle,Jao),e(Pg,Yao),e(Pg,HP),e(HP,Kao),e(Pg,Zao),e(A,eno),e(A,Bg),e(Bg,tle),e(tle,ono),e(Bg,rno),e(Bg,UP),e(UP,tno),e(Bg,ano),e(A,nno),e(A,Ig),e(Ig,ale),e(ale,sno),e(Ig,lno),e(Ig,JP),e(JP,ino),e(Ig,dno),e(A,cno),e(A,Ng),e(Ng,nle),e(nle,fno),e(Ng,mno),e(Ng,YP),e(YP,gno),e(Ng,hno),e(A,pno),e(A,qg),e(qg,sle),e(sle,_no),e(qg,uno),e(qg,KP),e(KP,bno),e(qg,vno),e(A,Fno),e(A,jg),e(jg,lle),e(lle,Tno),e(jg,Mno),e(jg,ZP),e(ZP,Eno),e(jg,Cno),e(A,wno),e(A,Dg),e(Dg,ile),e(ile,Ano),e(Dg,Lno),e(Dg,eB),e(eB,yno),e(Dg,xno),e(A,$no),e(A,Gg),e(Gg,dle),e(dle,kno),e(Gg,Sno),e(Gg,oB),e(oB,Rno),e(Gg,Pno),e(A,Bno),e(A,Og),e(Og,cle),e(cle,Ino),e(Og,Nno),e(Og,rB),e(rB,qno),e(Og,jno),e(A,Dno),e(A,Vg),e(Vg,fle),e(fle,Gno),e(Vg,Ono),e(Vg,tB),e(tB,Vno),e(Vg,Xno),e(A,zno),e(A,Xg),e(Xg,mle),e(mle,Wno),e(Xg,Qno),e(Xg,aB),e(aB,Hno),e(Xg,Uno),e(A,Jno),e(A,zg),e(zg,gle),e(gle,Yno),e(zg,Kno),e(zg,nB),e(nB,Zno),e(zg,eso),e(A,oso),e(A,Wg),e(Wg,hle),e(hle,rso),e(Wg,tso),e(Wg,sB),e(sB,aso),e(Wg,nso),e(A,sso),e(A,Qg),e(Qg,ple),e(ple,lso),e(Qg,iso),e(Qg,lB),e(lB,dso),e(Qg,cso),e(A,fso),e(A,Hg),e(Hg,_le),e(_le,mso),e(Hg,gso),e(Hg,iB),e(iB,hso),e(Hg,pso),e(A,_so),e(A,Ug),e(Ug,ule),e(ule,uso),e(Ug,bso),e(Ug,dB),e(dB,vso),e(Ug,Fso),e(A,Tso),e(A,Jg),e(Jg,ble),e(ble,Mso),e(Jg,Eso),e(Jg,cB),e(cB,Cso),e(Jg,wso),e(A,Aso),e(A,Yg),e(Yg,vle),e(vle,Lso),e(Yg,yso),e(Yg,fB),e(fB,xso),e(Yg,$so),e(A,kso),e(A,Kg),e(Kg,Fle),e(Fle,Sso),e(Kg,Rso),e(Kg,mB),e(mB,Pso),e(Kg,Bso),e(A,Iso),e(A,Zg),e(Zg,Tle),e(Tle,Nso),e(Zg,qso),e(Zg,gB),e(gB,jso),e(Zg,Dso),e(xr,Gso),M(eh,xr,null),e(Lo,Oso),e(Lo,oh),M(Cy,oh,null),e(oh,Vso),e(oh,Mle),e(Mle,Xso),b(f,aze,u),b(f,ji,u),e(ji,rh),e(rh,Ele),M(wy,Ele,null),e(ji,zso),e(ji,Cle),e(Cle,Wso),b(f,nze,u),b(f,yo,u),M(Ay,yo,null),e(yo,Qso),e(yo,Ly),e(Ly,Hso),e(Ly,hB),e(hB,Uso),e(Ly,Jso),e(yo,Yso),e(yo,yy),e(yy,Kso),e(yy,wle),e(wle,Zso),e(yy,elo),e(yo,olo),e(yo,$r),M(xy,$r,null),e($r,rlo),e($r,Ale),e(Ale,tlo),e($r,alo),e($r,Ba),e(Ba,nlo),e(Ba,Lle),e(Lle,slo),e(Ba,llo),e(Ba,yle),e(yle,ilo),e(Ba,dlo),e(Ba,xle),e(xle,clo),e(Ba,flo),e($r,mlo),e($r,k),e(k,Dn),e(Dn,$le),e($le,glo),e(Dn,hlo),e(Dn,pB),e(pB,plo),e(Dn,_lo),e(Dn,_B),e(_B,ulo),e(Dn,blo),e(k,vlo),e(k,Gn),e(Gn,kle),e(kle,Flo),e(Gn,Tlo),e(Gn,uB),e(uB,Mlo),e(Gn,Elo),e(Gn,bB),e(bB,Clo),e(Gn,wlo),e(k,Alo),e(k,On),e(On,Sle),e(Sle,Llo),e(On,ylo),e(On,vB),e(vB,xlo),e(On,$lo),e(On,FB),e(FB,klo),e(On,Slo),e(k,Rlo),e(k,th),e(th,Rle),e(Rle,Plo),e(th,Blo),e(th,TB),e(TB,Ilo),e(th,Nlo),e(k,qlo),e(k,Vn),e(Vn,Ple),e(Ple,jlo),e(Vn,Dlo),e(Vn,MB),e(MB,Glo),e(Vn,Olo),e(Vn,EB),e(EB,Vlo),e(Vn,Xlo),e(k,zlo),e(k,ah),e(ah,Ble),e(Ble,Wlo),e(ah,Qlo),e(ah,CB),e(CB,Hlo),e(ah,Ulo),e(k,Jlo),e(k,nh),e(nh,Ile),e(Ile,Ylo),e(nh,Klo),e(nh,wB),e(wB,Zlo),e(nh,eio),e(k,oio),e(k,sh),e(sh,Nle),e(Nle,rio),e(sh,tio),e(sh,AB),e(AB,aio),e(sh,nio),e(k,sio),e(k,Xn),e(Xn,qle),e(qle,lio),e(Xn,iio),e(Xn,LB),e(LB,dio),e(Xn,cio),e(Xn,yB),e(yB,fio),e(Xn,mio),e(k,gio),e(k,zn),e(zn,jle),e(jle,hio),e(zn,pio),e(zn,xB),e(xB,_io),e(zn,uio),e(zn,$B),e($B,bio),e(zn,vio),e(k,Fio),e(k,Wn),e(Wn,Dle),e(Dle,Tio),e(Wn,Mio),e(Wn,kB),e(kB,Eio),e(Wn,Cio),e(Wn,SB),e(SB,wio),e(Wn,Aio),e(k,Lio),e(k,lh),e(lh,Gle),e(Gle,yio),e(lh,xio),e(lh,RB),e(RB,$io),e(lh,kio),e(k,Sio),e(k,ih),e(ih,Ole),e(Ole,Rio),e(ih,Pio),e(ih,PB),e(PB,Bio),e(ih,Iio),e(k,Nio),e(k,dh),e(dh,Vle),e(Vle,qio),e(dh,jio),e(dh,BB),e(BB,Dio),e(dh,Gio),e(k,Oio),e(k,Qn),e(Qn,Xle),e(Xle,Vio),e(Qn,Xio),e(Qn,IB),e(IB,zio),e(Qn,Wio),e(Qn,NB),e(NB,Qio),e(Qn,Hio),e(k,Uio),e(k,ch),e(ch,zle),e(zle,Jio),e(ch,Yio),e(ch,qB),e(qB,Kio),e(ch,Zio),e(k,edo),e(k,Hn),e(Hn,Wle),e(Wle,odo),e(Hn,rdo),e(Hn,jB),e(jB,tdo),e(Hn,ado),e(Hn,DB),e(DB,ndo),e(Hn,sdo),e(k,ldo),e(k,Un),e(Un,Qle),e(Qle,ido),e(Un,ddo),e(Un,GB),e(GB,cdo),e(Un,fdo),e(Un,OB),e(OB,mdo),e(Un,gdo),e(k,hdo),e(k,Jn),e(Jn,Hle),e(Hle,pdo),e(Jn,_do),e(Jn,VB),e(VB,udo),e(Jn,bdo),e(Jn,XB),e(XB,vdo),e(Jn,Fdo),e(k,Tdo),e(k,Yn),e(Yn,Ule),e(Ule,Mdo),e(Yn,Edo),e(Yn,zB),e(zB,Cdo),e(Yn,wdo),e(Yn,WB),e(WB,Ado),e(Yn,Ldo),e(k,ydo),e(k,fh),e(fh,Jle),e(Jle,xdo),e(fh,$do),e(fh,QB),e(QB,kdo),e(fh,Sdo),e(k,Rdo),e(k,Kn),e(Kn,Yle),e(Yle,Pdo),e(Kn,Bdo),e(Kn,HB),e(HB,Ido),e(Kn,Ndo),e(Kn,UB),e(UB,qdo),e(Kn,jdo),e(k,Ddo),e(k,Zn),e(Zn,Kle),e(Kle,Gdo),e(Zn,Odo),e(Zn,JB),e(JB,Vdo),e(Zn,Xdo),e(Zn,YB),e(YB,zdo),e(Zn,Wdo),e(k,Qdo),e(k,es),e(es,Zle),e(Zle,Hdo),e(es,Udo),e(es,KB),e(KB,Jdo),e(es,Ydo),e(es,ZB),e(ZB,Kdo),e(es,Zdo),e(k,eco),e(k,os),e(os,eie),e(eie,oco),e(os,rco),e(os,eI),e(eI,tco),e(os,aco),e(os,oI),e(oI,nco),e(os,sco),e(k,lco),e(k,rs),e(rs,oie),e(oie,ico),e(rs,dco),e(rs,rI),e(rI,cco),e(rs,fco),e(rs,tI),e(tI,mco),e(rs,gco),e(k,hco),e(k,ts),e(ts,rie),e(rie,pco),e(ts,_co),e(ts,aI),e(aI,uco),e(ts,bco),e(ts,nI),e(nI,vco),e(ts,Fco),e(k,Tco),e(k,mh),e(mh,tie),e(tie,Mco),e(mh,Eco),e(mh,sI),e(sI,Cco),e(mh,wco),e(k,Aco),e(k,as),e(as,aie),e(aie,Lco),e(as,yco),e(as,lI),e(lI,xco),e(as,$co),e(as,iI),e(iI,kco),e(as,Sco),e(k,Rco),e(k,gh),e(gh,nie),e(nie,Pco),e(gh,Bco),e(gh,dI),e(dI,Ico),e(gh,Nco),e(k,qco),e(k,ns),e(ns,sie),e(sie,jco),e(ns,Dco),e(ns,cI),e(cI,Gco),e(ns,Oco),e(ns,fI),e(fI,Vco),e(ns,Xco),e(k,zco),e(k,ss),e(ss,lie),e(lie,Wco),e(ss,Qco),e(ss,mI),e(mI,Hco),e(ss,Uco),e(ss,gI),e(gI,Jco),e(ss,Yco),e(k,Kco),e(k,ls),e(ls,iie),e(iie,Zco),e(ls,efo),e(ls,hI),e(hI,ofo),e(ls,rfo),e(ls,pI),e(pI,tfo),e(ls,afo),e(k,nfo),e(k,hh),e(hh,die),e(die,sfo),e(hh,lfo),e(hh,_I),e(_I,ifo),e(hh,dfo),e(k,cfo),e(k,is),e(is,cie),e(cie,ffo),e(is,mfo),e(is,uI),e(uI,gfo),e(is,hfo),e(is,bI),e(bI,pfo),e(is,_fo),e(k,ufo),e(k,ds),e(ds,fie),e(fie,bfo),e(ds,vfo),e(ds,vI),e(vI,Ffo),e(ds,Tfo),e(ds,FI),e(FI,Mfo),e(ds,Efo),e(k,Cfo),e(k,cs),e(cs,mie),e(mie,wfo),e(cs,Afo),e(cs,TI),e(TI,Lfo),e(cs,yfo),e(cs,MI),e(MI,xfo),e(cs,$fo),e(k,kfo),e(k,ph),e(ph,gie),e(gie,Sfo),e(ph,Rfo),e(ph,EI),e(EI,Pfo),e(ph,Bfo),e(k,Ifo),e(k,fs),e(fs,hie),e(hie,Nfo),e(fs,qfo),e(fs,CI),e(CI,jfo),e(fs,Dfo),e(fs,wI),e(wI,Gfo),e(fs,Ofo),e(k,Vfo),e(k,ms),e(ms,pie),e(pie,Xfo),e(ms,zfo),e(ms,AI),e(AI,Wfo),e(ms,Qfo),e(ms,LI),e(LI,Hfo),e(ms,Ufo),e(k,Jfo),e(k,gs),e(gs,_ie),e(_ie,Yfo),e(gs,Kfo),e(gs,yI),e(yI,Zfo),e(gs,emo),e(gs,xI),e(xI,omo),e(gs,rmo),e(k,tmo),e(k,hs),e(hs,uie),e(uie,amo),e(hs,nmo),e(hs,$I),e($I,smo),e(hs,lmo),e(hs,kI),e(kI,imo),e(hs,dmo),e(k,cmo),e(k,ps),e(ps,bie),e(bie,fmo),e(ps,mmo),e(ps,SI),e(SI,gmo),e(ps,hmo),e(ps,RI),e(RI,pmo),e(ps,_mo),e(k,umo),e(k,_s),e(_s,vie),e(vie,bmo),e(_s,vmo),e(_s,PI),e(PI,Fmo),e(_s,Tmo),e(_s,BI),e(BI,Mmo),e(_s,Emo),e(k,Cmo),e(k,us),e(us,Fie),e(Fie,wmo),e(us,Amo),e(us,II),e(II,Lmo),e(us,ymo),e(us,NI),e(NI,xmo),e(us,$mo),e(k,kmo),e(k,bs),e(bs,Tie),e(Tie,Smo),e(bs,Rmo),e(bs,qI),e(qI,Pmo),e(bs,Bmo),e(bs,jI),e(jI,Imo),e(bs,Nmo),e(k,qmo),e(k,_h),e(_h,Mie),e(Mie,jmo),e(_h,Dmo),e(_h,DI),e(DI,Gmo),e(_h,Omo),e(k,Vmo),e(k,vs),e(vs,Eie),e(Eie,Xmo),e(vs,zmo),e(vs,GI),e(GI,Wmo),e(vs,Qmo),e(vs,OI),e(OI,Hmo),e(vs,Umo),e(k,Jmo),e(k,uh),e(uh,Cie),e(Cie,Ymo),e(uh,Kmo),e(uh,VI),e(VI,Zmo),e(uh,ego),e(k,ogo),e(k,bh),e(bh,wie),e(wie,rgo),e(bh,tgo),e(bh,XI),e(XI,ago),e(bh,ngo),e(k,sgo),e(k,Fs),e(Fs,Aie),e(Aie,lgo),e(Fs,igo),e(Fs,zI),e(zI,dgo),e(Fs,cgo),e(Fs,WI),e(WI,fgo),e(Fs,mgo),e(k,ggo),e(k,Ts),e(Ts,Lie),e(Lie,hgo),e(Ts,pgo),e(Ts,QI),e(QI,_go),e(Ts,ugo),e(Ts,HI),e(HI,bgo),e(Ts,vgo),e(k,Fgo),e(k,Ms),e(Ms,yie),e(yie,Tgo),e(Ms,Mgo),e(Ms,UI),e(UI,Ego),e(Ms,Cgo),e(Ms,JI),e(JI,wgo),e(Ms,Ago),e(k,Lgo),e(k,vh),e(vh,xie),e(xie,ygo),e(vh,xgo),e(vh,YI),e(YI,$go),e(vh,kgo),e(k,Sgo),e(k,Es),e(Es,$ie),e($ie,Rgo),e(Es,Pgo),e(Es,KI),e(KI,Bgo),e(Es,Igo),e(Es,ZI),e(ZI,Ngo),e(Es,qgo),e(k,jgo),e(k,Cs),e(Cs,kie),e(kie,Dgo),e(Cs,Ggo),e(Cs,eN),e(eN,Ogo),e(Cs,Vgo),e(Cs,oN),e(oN,Xgo),e(Cs,zgo),e(k,Wgo),e(k,ws),e(ws,Sie),e(Sie,Qgo),e(ws,Hgo),e(ws,rN),e(rN,Ugo),e(ws,Jgo),e(ws,tN),e(tN,Ygo),e(ws,Kgo),e(k,Zgo),e(k,As),e(As,Rie),e(Rie,eho),e(As,oho),e(As,aN),e(aN,rho),e(As,tho),e(As,nN),e(nN,aho),e(As,nho),e(k,sho),e(k,Ls),e(Ls,Pie),e(Pie,lho),e(Ls,iho),e(Ls,sN),e(sN,dho),e(Ls,cho),e(Ls,lN),e(lN,fho),e(Ls,mho),e(k,gho),e(k,ys),e(ys,Bie),e(Bie,hho),e(ys,pho),e(ys,iN),e(iN,_ho),e(ys,uho),e(ys,dN),e(dN,bho),e(ys,vho),e(k,Fho),e(k,xs),e(xs,Iie),e(Iie,Tho),e(xs,Mho),e(xs,cN),e(cN,Eho),e(xs,Cho),e(xs,fN),e(fN,who),e(xs,Aho),e(k,Lho),e(k,$s),e($s,Nie),e(Nie,yho),e($s,xho),e($s,mN),e(mN,$ho),e($s,kho),e($s,gN),e(gN,Sho),e($s,Rho),e(k,Pho),e(k,Fh),e(Fh,qie),e(qie,Bho),e(Fh,Iho),e(Fh,hN),e(hN,Nho),e(Fh,qho),e(k,jho),e(k,ks),e(ks,jie),e(jie,Dho),e(ks,Gho),e(ks,pN),e(pN,Oho),e(ks,Vho),e(ks,_N),e(_N,Xho),e(ks,zho),e(k,Who),e(k,Ss),e(Ss,Die),e(Die,Qho),e(Ss,Hho),e(Ss,uN),e(uN,Uho),e(Ss,Jho),e(Ss,bN),e(bN,Yho),e(Ss,Kho),e(k,Zho),e(k,Th),e(Th,Gie),e(Gie,epo),e(Th,opo),e(Th,vN),e(vN,rpo),e(Th,tpo),e(k,apo),e(k,Mh),e(Mh,Oie),e(Oie,npo),e(Mh,spo),e(Mh,FN),e(FN,lpo),e(Mh,ipo),e(k,dpo),e(k,Eh),e(Eh,Vie),e(Vie,cpo),e(Eh,fpo),e(Eh,TN),e(TN,mpo),e(Eh,gpo),e(k,hpo),e(k,Ch),e(Ch,Xie),e(Xie,ppo),e(Ch,_po),e(Ch,MN),e(MN,upo),e(Ch,bpo),e(k,vpo),e(k,Rs),e(Rs,zie),e(zie,Fpo),e(Rs,Tpo),e(Rs,EN),e(EN,Mpo),e(Rs,Epo),e(Rs,CN),e(CN,Cpo),e(Rs,wpo),e(k,Apo),e(k,wh),e(wh,Wie),e(Wie,Lpo),e(wh,ypo),e(wh,wN),e(wN,xpo),e(wh,$po),e(k,kpo),e(k,Ps),e(Ps,Qie),e(Qie,Spo),e(Ps,Rpo),e(Ps,AN),e(AN,Ppo),e(Ps,Bpo),e(Ps,LN),e(LN,Ipo),e(Ps,Npo),e(k,qpo),e(k,Bs),e(Bs,Hie),e(Hie,jpo),e(Bs,Dpo),e(Bs,yN),e(yN,Gpo),e(Bs,Opo),e(Bs,xN),e(xN,Vpo),e(Bs,Xpo),e(k,zpo),e(k,Is),e(Is,Uie),e(Uie,Wpo),e(Is,Qpo),e(Is,$N),e($N,Hpo),e(Is,Upo),e(Is,kN),e(kN,Jpo),e(Is,Ypo),e(k,Kpo),e(k,Ns),e(Ns,Jie),e(Jie,Zpo),e(Ns,e_o),e(Ns,SN),e(SN,o_o),e(Ns,r_o),e(Ns,RN),e(RN,t_o),e(Ns,a_o),e(k,n_o),e(k,qs),e(qs,Yie),e(Yie,s_o),e(qs,l_o),e(qs,PN),e(PN,i_o),e(qs,d_o),e(qs,BN),e(BN,c_o),e(qs,f_o),e(k,m_o),e(k,js),e(js,Kie),e(Kie,g_o),e(js,h_o),e(js,IN),e(IN,p_o),e(js,__o),e(js,NN),e(NN,u_o),e(js,b_o),e(k,v_o),e(k,Ah),e(Ah,Zie),e(Zie,F_o),e(Ah,T_o),e(Ah,qN),e(qN,M_o),e(Ah,E_o),e(k,C_o),e(k,Lh),e(Lh,ede),e(ede,w_o),e(Lh,A_o),e(Lh,jN),e(jN,L_o),e(Lh,y_o),e(k,x_o),e(k,Ds),e(Ds,ode),e(ode,$_o),e(Ds,k_o),e(Ds,DN),e(DN,S_o),e(Ds,R_o),e(Ds,GN),e(GN,P_o),e(Ds,B_o),e(k,I_o),e(k,Gs),e(Gs,rde),e(rde,N_o),e(Gs,q_o),e(Gs,ON),e(ON,j_o),e(Gs,D_o),e(Gs,VN),e(VN,G_o),e(Gs,O_o),e(k,V_o),e(k,Os),e(Os,tde),e(tde,X_o),e(Os,z_o),e(Os,XN),e(XN,W_o),e(Os,Q_o),e(Os,zN),e(zN,H_o),e(Os,U_o),e(k,J_o),e(k,yh),e(yh,ade),e(ade,Y_o),e(yh,K_o),e(yh,WN),e(WN,Z_o),e(yh,euo),e(k,ouo),e(k,xh),e(xh,nde),e(nde,ruo),e(xh,tuo),e(xh,QN),e(QN,auo),e(xh,nuo),e(k,suo),e(k,$h),e($h,sde),e(sde,luo),e($h,iuo),e($h,HN),e(HN,duo),e($h,cuo),e(k,fuo),e(k,Vs),e(Vs,lde),e(lde,muo),e(Vs,guo),e(Vs,UN),e(UN,huo),e(Vs,puo),e(Vs,JN),e(JN,_uo),e(Vs,uuo),e(k,buo),e(k,Xs),e(Xs,ide),e(ide,vuo),e(Xs,Fuo),e(Xs,YN),e(YN,Tuo),e(Xs,Muo),e(Xs,KN),e(KN,Euo),e(Xs,Cuo),e(k,wuo),e(k,kh),e(kh,dde),e(dde,Auo),e(kh,Luo),e(kh,ZN),e(ZN,yuo),e(kh,xuo),e(k,$uo),e(k,Sh),e(Sh,cde),e(cde,kuo),e(Sh,Suo),e(Sh,eq),e(eq,Ruo),e(Sh,Puo),e(k,Buo),e(k,Rh),e(Rh,fde),e(fde,Iuo),e(Rh,Nuo),e(Rh,oq),e(oq,quo),e(Rh,juo),e(k,Duo),e(k,zs),e(zs,mde),e(mde,Guo),e(zs,Ouo),e(zs,rq),e(rq,Vuo),e(zs,Xuo),e(zs,tq),e(tq,zuo),e(zs,Wuo),e(k,Quo),e(k,Ph),e(Ph,gde),e(gde,Huo),e(Ph,Uuo),e(Ph,aq),e(aq,Juo),e(Ph,Yuo),e(k,Kuo),e(k,Bh),e(Bh,hde),e(hde,Zuo),e(Bh,e1o),e(Bh,nq),e(nq,o1o),e(Bh,r1o),e(k,t1o),e(k,Ws),e(Ws,pde),e(pde,a1o),e(Ws,n1o),e(Ws,sq),e(sq,s1o),e(Ws,l1o),e(Ws,lq),e(lq,i1o),e(Ws,d1o),e(k,c1o),e(k,Qs),e(Qs,_de),e(_de,f1o),e(Qs,m1o),e(Qs,iq),e(iq,g1o),e(Qs,h1o),e(Qs,dq),e(dq,p1o),e(Qs,_1o),e(k,u1o),e(k,Hs),e(Hs,ude),e(ude,b1o),e(Hs,v1o),e(Hs,cq),e(cq,F1o),e(Hs,T1o),e(Hs,fq),e(fq,M1o),e(Hs,E1o),e(k,C1o),e(k,Us),e(Us,bde),e(bde,w1o),e(Us,A1o),e(Us,mq),e(mq,L1o),e(Us,y1o),e(Us,gq),e(gq,x1o),e(Us,$1o),e($r,k1o),M(Ih,$r,null),e(yo,S1o),e(yo,Nh),M($y,Nh,null),e(Nh,R1o),e(Nh,vde),e(vde,P1o),b(f,sze,u),b(f,Di,u),e(Di,qh),e(qh,Fde),M(ky,Fde,null),e(Di,B1o),e(Di,Tde),e(Tde,I1o),b(f,lze,u),b(f,xo,u),M(Sy,xo,null),e(xo,N1o),e(xo,Ry),e(Ry,q1o),e(Ry,hq),e(hq,j1o),e(Ry,D1o),e(xo,G1o),e(xo,Py),e(Py,O1o),e(Py,Mde),e(Mde,V1o),e(Py,X1o),e(xo,z1o),e(xo,Ue),M(By,Ue,null),e(Ue,W1o),e(Ue,Ede),e(Ede,Q1o),e(Ue,H1o),e(Ue,Ia),e(Ia,U1o),e(Ia,Cde),e(Cde,J1o),e(Ia,Y1o),e(Ia,wde),e(wde,K1o),e(Ia,Z1o),e(Ia,Ade),e(Ade,e7o),e(Ia,o7o),e(Ue,r7o),e(Ue,J),e(J,jh),e(jh,Lde),e(Lde,t7o),e(jh,a7o),e(jh,pq),e(pq,n7o),e(jh,s7o),e(J,l7o),e(J,Dh),e(Dh,yde),e(yde,i7o),e(Dh,d7o),e(Dh,_q),e(_q,c7o),e(Dh,f7o),e(J,m7o),e(J,Gh),e(Gh,xde),e(xde,g7o),e(Gh,h7o),e(Gh,uq),e(uq,p7o),e(Gh,_7o),e(J,u7o),e(J,Oh),e(Oh,$de),e($de,b7o),e(Oh,v7o),e(Oh,bq),e(bq,F7o),e(Oh,T7o),e(J,M7o),e(J,Vh),e(Vh,kde),e(kde,E7o),e(Vh,C7o),e(Vh,vq),e(vq,w7o),e(Vh,A7o),e(J,L7o),e(J,Xh),e(Xh,Sde),e(Sde,y7o),e(Xh,x7o),e(Xh,Fq),e(Fq,$7o),e(Xh,k7o),e(J,S7o),e(J,zh),e(zh,Rde),e(Rde,R7o),e(zh,P7o),e(zh,Tq),e(Tq,B7o),e(zh,I7o),e(J,N7o),e(J,Wh),e(Wh,Pde),e(Pde,q7o),e(Wh,j7o),e(Wh,Mq),e(Mq,D7o),e(Wh,G7o),e(J,O7o),e(J,Qh),e(Qh,Bde),e(Bde,V7o),e(Qh,X7o),e(Qh,Eq),e(Eq,z7o),e(Qh,W7o),e(J,Q7o),e(J,Hh),e(Hh,Ide),e(Ide,H7o),e(Hh,U7o),e(Hh,Cq),e(Cq,J7o),e(Hh,Y7o),e(J,K7o),e(J,Uh),e(Uh,Nde),e(Nde,Z7o),e(Uh,e2o),e(Uh,wq),e(wq,o2o),e(Uh,r2o),e(J,t2o),e(J,Jh),e(Jh,qde),e(qde,a2o),e(Jh,n2o),e(Jh,Aq),e(Aq,s2o),e(Jh,l2o),e(J,i2o),e(J,Yh),e(Yh,jde),e(jde,d2o),e(Yh,c2o),e(Yh,Lq),e(Lq,f2o),e(Yh,m2o),e(J,g2o),e(J,Kh),e(Kh,Dde),e(Dde,h2o),e(Kh,p2o),e(Kh,yq),e(yq,_2o),e(Kh,u2o),e(J,b2o),e(J,Zh),e(Zh,Gde),e(Gde,v2o),e(Zh,F2o),e(Zh,xq),e(xq,T2o),e(Zh,M2o),e(J,E2o),e(J,ep),e(ep,Ode),e(Ode,C2o),e(ep,w2o),e(ep,$q),e($q,A2o),e(ep,L2o),e(J,y2o),e(J,op),e(op,Vde),e(Vde,x2o),e(op,$2o),e(op,kq),e(kq,k2o),e(op,S2o),e(J,R2o),e(J,rp),e(rp,Xde),e(Xde,P2o),e(rp,B2o),e(rp,Sq),e(Sq,I2o),e(rp,N2o),e(J,q2o),e(J,tp),e(tp,zde),e(zde,j2o),e(tp,D2o),e(tp,Rq),e(Rq,G2o),e(tp,O2o),e(J,V2o),e(J,ap),e(ap,Wde),e(Wde,X2o),e(ap,z2o),e(ap,Pq),e(Pq,W2o),e(ap,Q2o),e(J,H2o),e(J,np),e(np,Qde),e(Qde,U2o),e(np,J2o),e(np,Bq),e(Bq,Y2o),e(np,K2o),e(J,Z2o),e(J,sp),e(sp,Hde),e(Hde,ebo),e(sp,obo),e(sp,Iq),e(Iq,rbo),e(sp,tbo),e(J,abo),e(J,lp),e(lp,Ude),e(Ude,nbo),e(lp,sbo),e(lp,Nq),e(Nq,lbo),e(lp,ibo),e(J,dbo),e(J,ip),e(ip,Jde),e(Jde,cbo),e(ip,fbo),e(ip,qq),e(qq,mbo),e(ip,gbo),e(J,hbo),e(J,dp),e(dp,Yde),e(Yde,pbo),e(dp,_bo),e(dp,jq),e(jq,ubo),e(dp,bbo),e(J,vbo),e(J,cp),e(cp,Kde),e(Kde,Fbo),e(cp,Tbo),e(cp,Dq),e(Dq,Mbo),e(cp,Ebo),e(J,Cbo),e(J,fp),e(fp,Zde),e(Zde,wbo),e(fp,Abo),e(fp,Gq),e(Gq,Lbo),e(fp,ybo),e(J,xbo),e(J,mp),e(mp,ece),e(ece,$bo),e(mp,kbo),e(mp,Oq),e(Oq,Sbo),e(mp,Rbo),e(J,Pbo),e(J,gp),e(gp,oce),e(oce,Bbo),e(gp,Ibo),e(gp,Vq),e(Vq,Nbo),e(gp,qbo),e(J,jbo),e(J,hp),e(hp,rce),e(rce,Dbo),e(hp,Gbo),e(hp,Xq),e(Xq,Obo),e(hp,Vbo),e(J,Xbo),e(J,pp),e(pp,tce),e(tce,zbo),e(pp,Wbo),e(pp,zq),e(zq,Qbo),e(pp,Hbo),e(J,Ubo),e(J,_p),e(_p,ace),e(ace,Jbo),e(_p,Ybo),e(_p,Wq),e(Wq,Kbo),e(_p,Zbo),e(J,evo),e(J,up),e(up,nce),e(nce,ovo),e(up,rvo),e(up,Qq),e(Qq,tvo),e(up,avo),e(J,nvo),e(J,bp),e(bp,sce),e(sce,svo),e(bp,lvo),e(bp,Hq),e(Hq,ivo),e(bp,dvo),e(J,cvo),e(J,vp),e(vp,lce),e(lce,fvo),e(vp,mvo),e(vp,Uq),e(Uq,gvo),e(vp,hvo),e(Ue,pvo),M(Fp,Ue,null),e(Ue,_vo),M(Tp,Ue,null),e(xo,uvo),e(xo,Mp),M(Iy,Mp,null),e(Mp,bvo),e(Mp,ice),e(ice,vvo),b(f,ize,u),b(f,Gi,u),e(Gi,Ep),e(Ep,dce),M(Ny,dce,null),e(Gi,Fvo),e(Gi,cce),e(cce,Tvo),b(f,dze,u),b(f,$o,u),M(qy,$o,null),e($o,Mvo),e($o,jy),e(jy,Evo),e(jy,Jq),e(Jq,Cvo),e(jy,wvo),e($o,Avo),e($o,Dy),e(Dy,Lvo),e(Dy,fce),e(fce,yvo),e(Dy,xvo),e($o,$vo),e($o,Je),M(Gy,Je,null),e(Je,kvo),e(Je,mce),e(mce,Svo),e(Je,Rvo),e(Je,Oi),e(Oi,Pvo),e(Oi,gce),e(gce,Bvo),e(Oi,Ivo),e(Oi,hce),e(hce,Nvo),e(Oi,qvo),e(Je,jvo),e(Je,fe),e(fe,Cp),e(Cp,pce),e(pce,Dvo),e(Cp,Gvo),e(Cp,Yq),e(Yq,Ovo),e(Cp,Vvo),e(fe,Xvo),e(fe,wp),e(wp,_ce),e(_ce,zvo),e(wp,Wvo),e(wp,Kq),e(Kq,Qvo),e(wp,Hvo),e(fe,Uvo),e(fe,Ap),e(Ap,uce),e(uce,Jvo),e(Ap,Yvo),e(Ap,Zq),e(Zq,Kvo),e(Ap,Zvo),e(fe,eFo),e(fe,Lp),e(Lp,bce),e(bce,oFo),e(Lp,rFo),e(Lp,ej),e(ej,tFo),e(Lp,aFo),e(fe,nFo),e(fe,yp),e(yp,vce),e(vce,sFo),e(yp,lFo),e(yp,oj),e(oj,iFo),e(yp,dFo),e(fe,cFo),e(fe,xp),e(xp,Fce),e(Fce,fFo),e(xp,mFo),e(xp,rj),e(rj,gFo),e(xp,hFo),e(fe,pFo),e(fe,$p),e($p,Tce),e(Tce,_Fo),e($p,uFo),e($p,tj),e(tj,bFo),e($p,vFo),e(fe,FFo),e(fe,kp),e(kp,Mce),e(Mce,TFo),e(kp,MFo),e(kp,aj),e(aj,EFo),e(kp,CFo),e(fe,wFo),e(fe,Sp),e(Sp,Ece),e(Ece,AFo),e(Sp,LFo),e(Sp,nj),e(nj,yFo),e(Sp,xFo),e(fe,$Fo),e(fe,Rp),e(Rp,Cce),e(Cce,kFo),e(Rp,SFo),e(Rp,sj),e(sj,RFo),e(Rp,PFo),e(fe,BFo),e(fe,Pp),e(Pp,wce),e(wce,IFo),e(Pp,NFo),e(Pp,lj),e(lj,qFo),e(Pp,jFo),e(fe,DFo),e(fe,Bp),e(Bp,Ace),e(Ace,GFo),e(Bp,OFo),e(Bp,ij),e(ij,VFo),e(Bp,XFo),e(fe,zFo),e(fe,Ip),e(Ip,Lce),e(Lce,WFo),e(Ip,QFo),e(Ip,dj),e(dj,HFo),e(Ip,UFo),e(fe,JFo),e(fe,Np),e(Np,yce),e(yce,YFo),e(Np,KFo),e(Np,cj),e(cj,ZFo),e(Np,e6o),e(fe,o6o),e(fe,qp),e(qp,xce),e(xce,r6o),e(qp,t6o),e(qp,fj),e(fj,a6o),e(qp,n6o),e(fe,s6o),e(fe,jp),e(jp,$ce),e($ce,l6o),e(jp,i6o),e(jp,mj),e(mj,d6o),e(jp,c6o),e(fe,f6o),e(fe,Dp),e(Dp,kce),e(kce,m6o),e(Dp,g6o),e(Dp,gj),e(gj,h6o),e(Dp,p6o),e(fe,_6o),e(fe,Gp),e(Gp,Sce),e(Sce,u6o),e(Gp,b6o),e(Gp,hj),e(hj,v6o),e(Gp,F6o),e(fe,T6o),e(fe,Op),e(Op,Rce),e(Rce,M6o),e(Op,E6o),e(Op,pj),e(pj,C6o),e(Op,w6o),e(Je,A6o),M(Vp,Je,null),e(Je,L6o),M(Xp,Je,null),e($o,y6o),e($o,zp),M(Oy,zp,null),e(zp,x6o),e(zp,Pce),e(Pce,$6o),b(f,cze,u),b(f,Vi,u),e(Vi,Wp),e(Wp,Bce),M(Vy,Bce,null),e(Vi,k6o),e(Vi,Ice),e(Ice,S6o),b(f,fze,u),b(f,ko,u),M(Xy,ko,null),e(ko,R6o),e(ko,Xi),e(Xi,P6o),e(Xi,_j),e(_j,B6o),e(Xi,I6o),e(Xi,uj),e(uj,N6o),e(Xi,q6o),e(ko,j6o),e(ko,zy),e(zy,D6o),e(zy,Nce),e(Nce,G6o),e(zy,O6o),e(ko,V6o),e(ko,it),M(Wy,it,null),e(it,X6o),e(it,qce),e(qce,z6o),e(it,W6o),e(it,zi),e(zi,Q6o),e(zi,jce),e(jce,H6o),e(zi,U6o),e(zi,bj),e(bj,J6o),e(zi,Y6o),e(it,K6o),M(Qp,it,null),e(ko,Z6o),e(ko,Ye),M(Qy,Ye,null),e(Ye,eTo),e(Ye,Dce),e(Dce,oTo),e(Ye,rTo),e(Ye,Na),e(Na,tTo),e(Na,Gce),e(Gce,aTo),e(Na,nTo),e(Na,Oce),e(Oce,sTo),e(Na,lTo),e(Na,Vce),e(Vce,iTo),e(Na,dTo),e(Ye,cTo),e(Ye,y),e(y,Hp),e(Hp,Xce),e(Xce,fTo),e(Hp,mTo),e(Hp,vj),e(vj,gTo),e(Hp,hTo),e(y,pTo),e(y,Up),e(Up,zce),e(zce,_To),e(Up,uTo),e(Up,Fj),e(Fj,bTo),e(Up,vTo),e(y,FTo),e(y,Jp),e(Jp,Wce),e(Wce,TTo),e(Jp,MTo),e(Jp,Tj),e(Tj,ETo),e(Jp,CTo),e(y,wTo),e(y,Yp),e(Yp,Qce),e(Qce,ATo),e(Yp,LTo),e(Yp,Mj),e(Mj,yTo),e(Yp,xTo),e(y,$To),e(y,Kp),e(Kp,Hce),e(Hce,kTo),e(Kp,STo),e(Kp,Ej),e(Ej,RTo),e(Kp,PTo),e(y,BTo),e(y,Zp),e(Zp,Uce),e(Uce,ITo),e(Zp,NTo),e(Zp,Cj),e(Cj,qTo),e(Zp,jTo),e(y,DTo),e(y,e_),e(e_,Jce),e(Jce,GTo),e(e_,OTo),e(e_,wj),e(wj,VTo),e(e_,XTo),e(y,zTo),e(y,o_),e(o_,Yce),e(Yce,WTo),e(o_,QTo),e(o_,Aj),e(Aj,HTo),e(o_,UTo),e(y,JTo),e(y,r_),e(r_,Kce),e(Kce,YTo),e(r_,KTo),e(r_,Lj),e(Lj,ZTo),e(r_,eMo),e(y,oMo),e(y,t_),e(t_,Zce),e(Zce,rMo),e(t_,tMo),e(t_,yj),e(yj,aMo),e(t_,nMo),e(y,sMo),e(y,a_),e(a_,efe),e(efe,lMo),e(a_,iMo),e(a_,xj),e(xj,dMo),e(a_,cMo),e(y,fMo),e(y,n_),e(n_,ofe),e(ofe,mMo),e(n_,gMo),e(n_,$j),e($j,hMo),e(n_,pMo),e(y,_Mo),e(y,s_),e(s_,rfe),e(rfe,uMo),e(s_,bMo),e(s_,kj),e(kj,vMo),e(s_,FMo),e(y,TMo),e(y,l_),e(l_,tfe),e(tfe,MMo),e(l_,EMo),e(l_,Sj),e(Sj,CMo),e(l_,wMo),e(y,AMo),e(y,i_),e(i_,afe),e(afe,LMo),e(i_,yMo),e(i_,Rj),e(Rj,xMo),e(i_,$Mo),e(y,kMo),e(y,d_),e(d_,nfe),e(nfe,SMo),e(d_,RMo),e(d_,Pj),e(Pj,PMo),e(d_,BMo),e(y,IMo),e(y,c_),e(c_,sfe),e(sfe,NMo),e(c_,qMo),e(c_,Bj),e(Bj,jMo),e(c_,DMo),e(y,GMo),e(y,f_),e(f_,lfe),e(lfe,OMo),e(f_,VMo),e(f_,Ij),e(Ij,XMo),e(f_,zMo),e(y,WMo),e(y,m_),e(m_,ife),e(ife,QMo),e(m_,HMo),e(m_,Nj),e(Nj,UMo),e(m_,JMo),e(y,YMo),e(y,g_),e(g_,dfe),e(dfe,KMo),e(g_,ZMo),e(g_,qj),e(qj,e4o),e(g_,o4o),e(y,r4o),e(y,h_),e(h_,cfe),e(cfe,t4o),e(h_,a4o),e(h_,jj),e(jj,n4o),e(h_,s4o),e(y,l4o),e(y,p_),e(p_,ffe),e(ffe,i4o),e(p_,d4o),e(p_,Dj),e(Dj,c4o),e(p_,f4o),e(y,m4o),e(y,__),e(__,mfe),e(mfe,g4o),e(__,h4o),e(__,Gj),e(Gj,p4o),e(__,_4o),e(y,u4o),e(y,u_),e(u_,gfe),e(gfe,b4o),e(u_,v4o),e(u_,Oj),e(Oj,F4o),e(u_,T4o),e(y,M4o),e(y,b_),e(b_,hfe),e(hfe,E4o),e(b_,C4o),e(b_,Vj),e(Vj,w4o),e(b_,A4o),e(y,L4o),e(y,v_),e(v_,pfe),e(pfe,y4o),e(v_,x4o),e(v_,Xj),e(Xj,$4o),e(v_,k4o),e(y,S4o),e(y,F_),e(F_,_fe),e(_fe,R4o),e(F_,P4o),e(F_,zj),e(zj,B4o),e(F_,I4o),e(y,N4o),e(y,T_),e(T_,ufe),e(ufe,q4o),e(T_,j4o),e(T_,Wj),e(Wj,D4o),e(T_,G4o),e(y,O4o),e(y,M_),e(M_,bfe),e(bfe,V4o),e(M_,X4o),e(M_,Qj),e(Qj,z4o),e(M_,W4o),e(y,Q4o),e(y,E_),e(E_,vfe),e(vfe,H4o),e(E_,U4o),e(E_,Hj),e(Hj,J4o),e(E_,Y4o),e(y,K4o),e(y,C_),e(C_,Ffe),e(Ffe,Z4o),e(C_,eEo),e(C_,Uj),e(Uj,oEo),e(C_,rEo),e(y,tEo),e(y,w_),e(w_,Tfe),e(Tfe,aEo),e(w_,nEo),e(w_,Jj),e(Jj,sEo),e(w_,lEo),e(y,iEo),e(y,A_),e(A_,Mfe),e(Mfe,dEo),e(A_,cEo),e(A_,Yj),e(Yj,fEo),e(A_,mEo),e(y,gEo),e(y,L_),e(L_,Efe),e(Efe,hEo),e(L_,pEo),e(L_,Kj),e(Kj,_Eo),e(L_,uEo),e(y,bEo),e(y,Js),e(Js,Cfe),e(Cfe,vEo),e(Js,FEo),e(Js,Zj),e(Zj,TEo),e(Js,MEo),e(Js,eD),e(eD,EEo),e(Js,CEo),e(y,wEo),e(y,y_),e(y_,wfe),e(wfe,AEo),e(y_,LEo),e(y_,oD),e(oD,yEo),e(y_,xEo),e(y,$Eo),e(y,x_),e(x_,Afe),e(Afe,kEo),e(x_,SEo),e(x_,rD),e(rD,REo),e(x_,PEo),e(y,BEo),e(y,$_),e($_,Lfe),e(Lfe,IEo),e($_,NEo),e($_,tD),e(tD,qEo),e($_,jEo),e(y,DEo),e(y,k_),e(k_,yfe),e(yfe,GEo),e(k_,OEo),e(k_,aD),e(aD,VEo),e(k_,XEo),e(y,zEo),e(y,S_),e(S_,xfe),e(xfe,WEo),e(S_,QEo),e(S_,nD),e(nD,HEo),e(S_,UEo),e(y,JEo),e(y,R_),e(R_,$fe),e($fe,YEo),e(R_,KEo),e(R_,sD),e(sD,ZEo),e(R_,eCo),e(y,oCo),e(y,P_),e(P_,kfe),e(kfe,rCo),e(P_,tCo),e(P_,lD),e(lD,aCo),e(P_,nCo),e(y,sCo),e(y,B_),e(B_,Sfe),e(Sfe,lCo),e(B_,iCo),e(B_,iD),e(iD,dCo),e(B_,cCo),e(y,fCo),e(y,I_),e(I_,Rfe),e(Rfe,mCo),e(I_,gCo),e(I_,dD),e(dD,hCo),e(I_,pCo),e(y,_Co),e(y,N_),e(N_,Pfe),e(Pfe,uCo),e(N_,bCo),e(N_,cD),e(cD,vCo),e(N_,FCo),e(y,TCo),e(y,q_),e(q_,Bfe),e(Bfe,MCo),e(q_,ECo),e(q_,fD),e(fD,CCo),e(q_,wCo),e(y,ACo),e(y,j_),e(j_,Ife),e(Ife,LCo),e(j_,yCo),e(j_,mD),e(mD,xCo),e(j_,$Co),e(y,kCo),e(y,D_),e(D_,Nfe),e(Nfe,SCo),e(D_,RCo),e(D_,gD),e(gD,PCo),e(D_,BCo),e(y,ICo),e(y,G_),e(G_,qfe),e(qfe,NCo),e(G_,qCo),e(G_,hD),e(hD,jCo),e(G_,DCo),e(y,GCo),e(y,O_),e(O_,jfe),e(jfe,OCo),e(O_,VCo),e(O_,pD),e(pD,XCo),e(O_,zCo),e(y,WCo),e(y,V_),e(V_,Dfe),e(Dfe,QCo),e(V_,HCo),e(V_,_D),e(_D,UCo),e(V_,JCo),e(y,YCo),e(y,X_),e(X_,Gfe),e(Gfe,KCo),e(X_,ZCo),e(X_,uD),e(uD,e5o),e(X_,o5o),e(y,r5o),e(y,z_),e(z_,Ofe),e(Ofe,t5o),e(z_,a5o),e(z_,bD),e(bD,n5o),e(z_,s5o),e(y,l5o),e(y,W_),e(W_,Vfe),e(Vfe,i5o),e(W_,d5o),e(W_,vD),e(vD,c5o),e(W_,f5o),e(y,m5o),e(y,Q_),e(Q_,Xfe),e(Xfe,g5o),e(Q_,h5o),e(Q_,FD),e(FD,p5o),e(Q_,_5o),e(y,u5o),e(y,H_),e(H_,zfe),e(zfe,b5o),e(H_,v5o),e(H_,TD),e(TD,F5o),e(H_,T5o),e(y,M5o),e(y,U_),e(U_,Wfe),e(Wfe,E5o),e(U_,C5o),e(U_,MD),e(MD,w5o),e(U_,A5o),e(y,L5o),e(y,J_),e(J_,Qfe),e(Qfe,y5o),e(J_,x5o),e(J_,ED),e(ED,$5o),e(J_,k5o),e(y,S5o),e(y,Y_),e(Y_,Hfe),e(Hfe,R5o),e(Y_,P5o),e(Y_,CD),e(CD,B5o),e(Y_,I5o),e(y,N5o),e(y,K_),e(K_,Ufe),e(Ufe,q5o),e(K_,j5o),e(K_,wD),e(wD,D5o),e(K_,G5o),e(y,O5o),e(y,Z_),e(Z_,Jfe),e(Jfe,V5o),e(Z_,X5o),e(Z_,AD),e(AD,z5o),e(Z_,W5o),e(y,Q5o),e(y,eu),e(eu,Yfe),e(Yfe,H5o),e(eu,U5o),e(eu,LD),e(LD,J5o),e(eu,Y5o),e(y,K5o),e(y,ou),e(ou,Kfe),e(Kfe,Z5o),e(ou,e3o),e(ou,yD),e(yD,o3o),e(ou,r3o),e(y,t3o),e(y,ru),e(ru,Zfe),e(Zfe,a3o),e(ru,n3o),e(ru,xD),e(xD,s3o),e(ru,l3o),e(y,i3o),e(y,tu),e(tu,eme),e(eme,d3o),e(tu,c3o),e(tu,$D),e($D,f3o),e(tu,m3o),e(y,g3o),e(y,au),e(au,ome),e(ome,h3o),e(au,p3o),e(au,kD),e(kD,_3o),e(au,u3o),e(y,b3o),e(y,nu),e(nu,rme),e(rme,v3o),e(nu,F3o),e(nu,SD),e(SD,T3o),e(nu,M3o),e(y,E3o),e(y,su),e(su,tme),e(tme,C3o),e(su,w3o),e(su,RD),e(RD,A3o),e(su,L3o),e(y,y3o),e(y,lu),e(lu,ame),e(ame,x3o),e(lu,$3o),e(lu,PD),e(PD,k3o),e(lu,S3o),e(y,R3o),e(y,iu),e(iu,nme),e(nme,P3o),e(iu,B3o),e(iu,BD),e(BD,I3o),e(iu,N3o),e(y,q3o),e(y,du),e(du,sme),e(sme,j3o),e(du,D3o),e(du,ID),e(ID,G3o),e(du,O3o),e(y,V3o),e(y,cu),e(cu,lme),e(lme,X3o),e(cu,z3o),e(cu,ND),e(ND,W3o),e(cu,Q3o),e(y,H3o),e(y,fu),e(fu,ime),e(ime,U3o),e(fu,J3o),e(fu,qD),e(qD,Y3o),e(fu,K3o),e(y,Z3o),e(y,mu),e(mu,dme),e(dme,e0o),e(mu,o0o),e(mu,jD),e(jD,r0o),e(mu,t0o),e(y,a0o),e(y,gu),e(gu,cme),e(cme,n0o),e(gu,s0o),e(gu,DD),e(DD,l0o),e(gu,i0o),e(y,d0o),e(y,hu),e(hu,fme),e(fme,c0o),e(hu,f0o),e(hu,GD),e(GD,m0o),e(hu,g0o),e(y,h0o),e(y,pu),e(pu,mme),e(mme,p0o),e(pu,_0o),e(pu,OD),e(OD,u0o),e(pu,b0o),e(y,v0o),e(y,_u),e(_u,gme),e(gme,F0o),e(_u,T0o),e(_u,VD),e(VD,M0o),e(_u,E0o),e(y,C0o),e(y,uu),e(uu,hme),e(hme,w0o),e(uu,A0o),e(uu,XD),e(XD,L0o),e(uu,y0o),e(y,x0o),e(y,bu),e(bu,pme),e(pme,$0o),e(bu,k0o),e(bu,zD),e(zD,S0o),e(bu,R0o),e(y,P0o),e(y,vu),e(vu,_me),e(_me,B0o),e(vu,I0o),e(vu,WD),e(WD,N0o),e(vu,q0o),e(y,j0o),e(y,Fu),e(Fu,ume),e(ume,D0o),e(Fu,G0o),e(Fu,QD),e(QD,O0o),e(Fu,V0o),e(y,X0o),e(y,Tu),e(Tu,bme),e(bme,z0o),e(Tu,W0o),e(Tu,HD),e(HD,Q0o),e(Tu,H0o),e(y,U0o),e(y,Mu),e(Mu,vme),e(vme,J0o),e(Mu,Y0o),e(Mu,UD),e(UD,K0o),e(Mu,Z0o),e(y,ewo),e(y,Eu),e(Eu,Fme),e(Fme,owo),e(Eu,rwo),e(Eu,JD),e(JD,two),e(Eu,awo),e(y,nwo),e(y,Cu),e(Cu,Tme),e(Tme,swo),e(Cu,lwo),e(Cu,YD),e(YD,iwo),e(Cu,dwo),e(y,cwo),e(y,wu),e(wu,Mme),e(Mme,fwo),e(wu,mwo),e(wu,KD),e(KD,gwo),e(wu,hwo),e(y,pwo),e(y,Au),e(Au,Eme),e(Eme,_wo),e(Au,uwo),e(Au,ZD),e(ZD,bwo),e(Au,vwo),e(y,Fwo),e(y,Lu),e(Lu,Cme),e(Cme,Two),e(Lu,Mwo),e(Lu,eG),e(eG,Ewo),e(Lu,Cwo),e(y,wwo),e(y,yu),e(yu,wme),e(wme,Awo),e(yu,Lwo),e(yu,oG),e(oG,ywo),e(yu,xwo),e(y,$wo),e(y,xu),e(xu,Ame),e(Ame,kwo),e(xu,Swo),e(xu,rG),e(rG,Rwo),e(xu,Pwo),e(y,Bwo),e(y,$u),e($u,Lme),e(Lme,Iwo),e($u,Nwo),e($u,tG),e(tG,qwo),e($u,jwo),e(y,Dwo),e(y,ku),e(ku,yme),e(yme,Gwo),e(ku,Owo),e(ku,aG),e(aG,Vwo),e(ku,Xwo),e(y,zwo),e(y,Su),e(Su,xme),e(xme,Wwo),e(Su,Qwo),e(Su,nG),e(nG,Hwo),e(Su,Uwo),e(y,Jwo),e(y,Ru),e(Ru,$me),e($me,Ywo),e(Ru,Kwo),e(Ru,sG),e(sG,Zwo),e(Ru,eAo),e(y,oAo),e(y,Pu),e(Pu,kme),e(kme,rAo),e(Pu,tAo),e(Pu,lG),e(lG,aAo),e(Pu,nAo),e(y,sAo),e(y,Bu),e(Bu,Sme),e(Sme,lAo),e(Bu,iAo),e(Bu,iG),e(iG,dAo),e(Bu,cAo),e(y,fAo),e(y,Iu),e(Iu,Rme),e(Rme,mAo),e(Iu,gAo),e(Iu,dG),e(dG,hAo),e(Iu,pAo),e(y,_Ao),e(y,Nu),e(Nu,Pme),e(Pme,uAo),e(Nu,bAo),e(Nu,cG),e(cG,vAo),e(Nu,FAo),e(y,TAo),e(y,qu),e(qu,Bme),e(Bme,MAo),e(qu,EAo),e(qu,fG),e(fG,CAo),e(qu,wAo),e(y,AAo),e(y,ju),e(ju,Ime),e(Ime,LAo),e(ju,yAo),e(ju,mG),e(mG,xAo),e(ju,$Ao),e(y,kAo),e(y,Du),e(Du,Nme),e(Nme,SAo),e(Du,RAo),e(Du,gG),e(gG,PAo),e(Du,BAo),e(y,IAo),e(y,Gu),e(Gu,qme),e(qme,NAo),e(Gu,qAo),e(Gu,hG),e(hG,jAo),e(Gu,DAo),e(y,GAo),e(y,Ou),e(Ou,jme),e(jme,OAo),e(Ou,VAo),e(Ou,pG),e(pG,XAo),e(Ou,zAo),e(y,WAo),e(y,Vu),e(Vu,Dme),e(Dme,QAo),e(Vu,HAo),e(Vu,_G),e(_G,UAo),e(Vu,JAo),e(y,YAo),e(y,Xu),e(Xu,Gme),e(Gme,KAo),e(Xu,ZAo),e(Xu,uG),e(uG,eLo),e(Xu,oLo),e(y,rLo),e(y,zu),e(zu,Ome),e(Ome,tLo),e(zu,aLo),e(zu,bG),e(bG,nLo),e(zu,sLo),e(y,lLo),e(y,Wu),e(Wu,Vme),e(Vme,iLo),e(Wu,dLo),e(Wu,vG),e(vG,cLo),e(Wu,fLo),e(y,mLo),e(y,Qu),e(Qu,Xme),e(Xme,gLo),e(Qu,hLo),e(Qu,FG),e(FG,pLo),e(Qu,_Lo),e(y,uLo),e(y,Hu),e(Hu,zme),e(zme,bLo),e(Hu,vLo),e(Hu,TG),e(TG,FLo),e(Hu,TLo),e(y,MLo),e(y,Uu),e(Uu,Wme),e(Wme,ELo),e(Uu,CLo),e(Uu,MG),e(MG,wLo),e(Uu,ALo),e(y,LLo),e(y,Ju),e(Ju,Qme),e(Qme,yLo),e(Ju,xLo),e(Ju,EG),e(EG,$Lo),e(Ju,kLo),e(y,SLo),e(y,Yu),e(Yu,Hme),e(Hme,RLo),e(Yu,PLo),e(Yu,CG),e(CG,BLo),e(Yu,ILo),e(Ye,NLo),e(Ye,Ku),e(Ku,qLo),e(Ku,Ume),e(Ume,jLo),e(Ku,DLo),e(Ku,Jme),e(Jme,GLo),e(Ye,OLo),M(Zu,Ye,null),b(f,mze,u),b(f,Wi,u),e(Wi,e1),e(e1,Yme),M(Hy,Yme,null),e(Wi,VLo),e(Wi,Kme),e(Kme,XLo),b(f,gze,u),b(f,So,u),M(Uy,So,null),e(So,zLo),e(So,Qi),e(Qi,WLo),e(Qi,wG),e(wG,QLo),e(Qi,HLo),e(Qi,AG),e(AG,ULo),e(Qi,JLo),e(So,YLo),e(So,Jy),e(Jy,KLo),e(Jy,Zme),e(Zme,ZLo),e(Jy,eyo),e(So,oyo),e(So,dt),M(Yy,dt,null),e(dt,ryo),e(dt,ege),e(ege,tyo),e(dt,ayo),e(dt,Hi),e(Hi,nyo),e(Hi,oge),e(oge,syo),e(Hi,lyo),e(Hi,LG),e(LG,iyo),e(Hi,dyo),e(dt,cyo),M(o1,dt,null),e(So,fyo),e(So,Ke),M(Ky,Ke,null),e(Ke,myo),e(Ke,rge),e(rge,gyo),e(Ke,hyo),e(Ke,qa),e(qa,pyo),e(qa,tge),e(tge,_yo),e(qa,uyo),e(qa,age),e(age,byo),e(qa,vyo),e(qa,nge),e(nge,Fyo),e(qa,Tyo),e(Ke,Myo),e(Ke,G),e(G,r1),e(r1,sge),e(sge,Eyo),e(r1,Cyo),e(r1,yG),e(yG,wyo),e(r1,Ayo),e(G,Lyo),e(G,t1),e(t1,lge),e(lge,yyo),e(t1,xyo),e(t1,xG),e(xG,$yo),e(t1,kyo),e(G,Syo),e(G,a1),e(a1,ige),e(ige,Ryo),e(a1,Pyo),e(a1,$G),e($G,Byo),e(a1,Iyo),e(G,Nyo),e(G,n1),e(n1,dge),e(dge,qyo),e(n1,jyo),e(n1,kG),e(kG,Dyo),e(n1,Gyo),e(G,Oyo),e(G,s1),e(s1,cge),e(cge,Vyo),e(s1,Xyo),e(s1,SG),e(SG,zyo),e(s1,Wyo),e(G,Qyo),e(G,l1),e(l1,fge),e(fge,Hyo),e(l1,Uyo),e(l1,RG),e(RG,Jyo),e(l1,Yyo),e(G,Kyo),e(G,i1),e(i1,mge),e(mge,Zyo),e(i1,e8o),e(i1,PG),e(PG,o8o),e(i1,r8o),e(G,t8o),e(G,d1),e(d1,gge),e(gge,a8o),e(d1,n8o),e(d1,BG),e(BG,s8o),e(d1,l8o),e(G,i8o),e(G,c1),e(c1,hge),e(hge,d8o),e(c1,c8o),e(c1,IG),e(IG,f8o),e(c1,m8o),e(G,g8o),e(G,f1),e(f1,pge),e(pge,h8o),e(f1,p8o),e(f1,NG),e(NG,_8o),e(f1,u8o),e(G,b8o),e(G,m1),e(m1,_ge),e(_ge,v8o),e(m1,F8o),e(m1,qG),e(qG,T8o),e(m1,M8o),e(G,E8o),e(G,g1),e(g1,uge),e(uge,C8o),e(g1,w8o),e(g1,jG),e(jG,A8o),e(g1,L8o),e(G,y8o),e(G,h1),e(h1,bge),e(bge,x8o),e(h1,$8o),e(h1,DG),e(DG,k8o),e(h1,S8o),e(G,R8o),e(G,p1),e(p1,vge),e(vge,P8o),e(p1,B8o),e(p1,GG),e(GG,I8o),e(p1,N8o),e(G,q8o),e(G,_1),e(_1,Fge),e(Fge,j8o),e(_1,D8o),e(_1,OG),e(OG,G8o),e(_1,O8o),e(G,V8o),e(G,u1),e(u1,Tge),e(Tge,X8o),e(u1,z8o),e(u1,VG),e(VG,W8o),e(u1,Q8o),e(G,H8o),e(G,b1),e(b1,Mge),e(Mge,U8o),e(b1,J8o),e(b1,XG),e(XG,Y8o),e(b1,K8o),e(G,Z8o),e(G,v1),e(v1,Ege),e(Ege,e9o),e(v1,o9o),e(v1,zG),e(zG,r9o),e(v1,t9o),e(G,a9o),e(G,F1),e(F1,Cge),e(Cge,n9o),e(F1,s9o),e(F1,WG),e(WG,l9o),e(F1,i9o),e(G,d9o),e(G,T1),e(T1,wge),e(wge,c9o),e(T1,f9o),e(T1,QG),e(QG,m9o),e(T1,g9o),e(G,h9o),e(G,M1),e(M1,Age),e(Age,p9o),e(M1,_9o),e(M1,HG),e(HG,u9o),e(M1,b9o),e(G,v9o),e(G,E1),e(E1,Lge),e(Lge,F9o),e(E1,T9o),e(E1,UG),e(UG,M9o),e(E1,E9o),e(G,C9o),e(G,C1),e(C1,yge),e(yge,w9o),e(C1,A9o),e(C1,JG),e(JG,L9o),e(C1,y9o),e(G,x9o),e(G,w1),e(w1,xge),e(xge,$9o),e(w1,k9o),e(w1,YG),e(YG,S9o),e(w1,R9o),e(G,P9o),e(G,A1),e(A1,$ge),e($ge,B9o),e(A1,I9o),e(A1,KG),e(KG,N9o),e(A1,q9o),e(G,j9o),e(G,L1),e(L1,kge),e(kge,D9o),e(L1,G9o),e(L1,ZG),e(ZG,O9o),e(L1,V9o),e(G,X9o),e(G,y1),e(y1,Sge),e(Sge,z9o),e(y1,W9o),e(y1,eO),e(eO,Q9o),e(y1,H9o),e(G,U9o),e(G,x1),e(x1,Rge),e(Rge,J9o),e(x1,Y9o),e(x1,oO),e(oO,K9o),e(x1,Z9o),e(G,exo),e(G,$1),e($1,Pge),e(Pge,oxo),e($1,rxo),e($1,rO),e(rO,txo),e($1,axo),e(G,nxo),e(G,k1),e(k1,Bge),e(Bge,sxo),e(k1,lxo),e(k1,tO),e(tO,ixo),e(k1,dxo),e(G,cxo),e(G,S1),e(S1,Ige),e(Ige,fxo),e(S1,mxo),e(S1,aO),e(aO,gxo),e(S1,hxo),e(G,pxo),e(G,R1),e(R1,Nge),e(Nge,_xo),e(R1,uxo),e(R1,nO),e(nO,bxo),e(R1,vxo),e(G,Fxo),e(G,P1),e(P1,qge),e(qge,Txo),e(P1,Mxo),e(P1,sO),e(sO,Exo),e(P1,Cxo),e(G,wxo),e(G,B1),e(B1,jge),e(jge,Axo),e(B1,Lxo),e(B1,lO),e(lO,yxo),e(B1,xxo),e(G,$xo),e(G,I1),e(I1,Dge),e(Dge,kxo),e(I1,Sxo),e(I1,iO),e(iO,Rxo),e(I1,Pxo),e(G,Bxo),e(G,N1),e(N1,Gge),e(Gge,Ixo),e(N1,Nxo),e(N1,dO),e(dO,qxo),e(N1,jxo),e(G,Dxo),e(G,q1),e(q1,Oge),e(Oge,Gxo),e(q1,Oxo),e(q1,cO),e(cO,Vxo),e(q1,Xxo),e(G,zxo),e(G,j1),e(j1,Vge),e(Vge,Wxo),e(j1,Qxo),e(j1,fO),e(fO,Hxo),e(j1,Uxo),e(G,Jxo),e(G,D1),e(D1,Xge),e(Xge,Yxo),e(D1,Kxo),e(D1,mO),e(mO,Zxo),e(D1,e$o),e(G,o$o),e(G,G1),e(G1,zge),e(zge,r$o),e(G1,t$o),e(G1,gO),e(gO,a$o),e(G1,n$o),e(G,s$o),e(G,O1),e(O1,Wge),e(Wge,l$o),e(O1,i$o),e(O1,hO),e(hO,d$o),e(O1,c$o),e(G,f$o),e(G,V1),e(V1,Qge),e(Qge,m$o),e(V1,g$o),e(V1,pO),e(pO,h$o),e(V1,p$o),e(G,_$o),e(G,X1),e(X1,Hge),e(Hge,u$o),e(X1,b$o),e(X1,_O),e(_O,v$o),e(X1,F$o),e(G,T$o),e(G,z1),e(z1,Uge),e(Uge,M$o),e(z1,E$o),e(z1,uO),e(uO,C$o),e(z1,w$o),e(G,A$o),e(G,W1),e(W1,Jge),e(Jge,L$o),e(W1,y$o),e(W1,bO),e(bO,x$o),e(W1,$$o),e(Ke,k$o),e(Ke,Q1),e(Q1,S$o),e(Q1,Yge),e(Yge,R$o),e(Q1,P$o),e(Q1,Kge),e(Kge,B$o),e(Ke,I$o),M(H1,Ke,null),b(f,hze,u),b(f,Ui,u),e(Ui,U1),e(U1,Zge),M(Zy,Zge,null),e(Ui,N$o),e(Ui,ehe),e(ehe,q$o),b(f,pze,u),b(f,Ro,u),M(e8,Ro,null),e(Ro,j$o),e(Ro,Ji),e(Ji,D$o),e(Ji,vO),e(vO,G$o),e(Ji,O$o),e(Ji,FO),e(FO,V$o),e(Ji,X$o),e(Ro,z$o),e(Ro,o8),e(o8,W$o),e(o8,ohe),e(ohe,Q$o),e(o8,H$o),e(Ro,U$o),e(Ro,ct),M(r8,ct,null),e(ct,J$o),e(ct,rhe),e(rhe,Y$o),e(ct,K$o),e(ct,Yi),e(Yi,Z$o),e(Yi,the),e(the,eko),e(Yi,oko),e(Yi,TO),e(TO,rko),e(Yi,tko),e(ct,ako),M(J1,ct,null),e(Ro,nko),e(Ro,Ze),M(t8,Ze,null),e(Ze,sko),e(Ze,ahe),e(ahe,lko),e(Ze,iko),e(Ze,ja),e(ja,dko),e(ja,nhe),e(nhe,cko),e(ja,fko),e(ja,she),e(she,mko),e(ja,gko),e(ja,lhe),e(lhe,hko),e(ja,pko),e(Ze,_ko),e(Ze,z),e(z,Y1),e(Y1,ihe),e(ihe,uko),e(Y1,bko),e(Y1,MO),e(MO,vko),e(Y1,Fko),e(z,Tko),e(z,K1),e(K1,dhe),e(dhe,Mko),e(K1,Eko),e(K1,EO),e(EO,Cko),e(K1,wko),e(z,Ako),e(z,Z1),e(Z1,che),e(che,Lko),e(Z1,yko),e(Z1,CO),e(CO,xko),e(Z1,$ko),e(z,kko),e(z,e7),e(e7,fhe),e(fhe,Sko),e(e7,Rko),e(e7,wO),e(wO,Pko),e(e7,Bko),e(z,Iko),e(z,o7),e(o7,mhe),e(mhe,Nko),e(o7,qko),e(o7,AO),e(AO,jko),e(o7,Dko),e(z,Gko),e(z,r7),e(r7,ghe),e(ghe,Oko),e(r7,Vko),e(r7,LO),e(LO,Xko),e(r7,zko),e(z,Wko),e(z,t7),e(t7,hhe),e(hhe,Qko),e(t7,Hko),e(t7,yO),e(yO,Uko),e(t7,Jko),e(z,Yko),e(z,a7),e(a7,phe),e(phe,Kko),e(a7,Zko),e(a7,xO),e(xO,eSo),e(a7,oSo),e(z,rSo),e(z,n7),e(n7,_he),e(_he,tSo),e(n7,aSo),e(n7,$O),e($O,nSo),e(n7,sSo),e(z,lSo),e(z,s7),e(s7,uhe),e(uhe,iSo),e(s7,dSo),e(s7,kO),e(kO,cSo),e(s7,fSo),e(z,mSo),e(z,l7),e(l7,bhe),e(bhe,gSo),e(l7,hSo),e(l7,SO),e(SO,pSo),e(l7,_So),e(z,uSo),e(z,i7),e(i7,vhe),e(vhe,bSo),e(i7,vSo),e(i7,RO),e(RO,FSo),e(i7,TSo),e(z,MSo),e(z,d7),e(d7,Fhe),e(Fhe,ESo),e(d7,CSo),e(d7,PO),e(PO,wSo),e(d7,ASo),e(z,LSo),e(z,c7),e(c7,The),e(The,ySo),e(c7,xSo),e(c7,BO),e(BO,$So),e(c7,kSo),e(z,SSo),e(z,f7),e(f7,Mhe),e(Mhe,RSo),e(f7,PSo),e(f7,IO),e(IO,BSo),e(f7,ISo),e(z,NSo),e(z,m7),e(m7,Ehe),e(Ehe,qSo),e(m7,jSo),e(m7,NO),e(NO,DSo),e(m7,GSo),e(z,OSo),e(z,g7),e(g7,Che),e(Che,VSo),e(g7,XSo),e(g7,qO),e(qO,zSo),e(g7,WSo),e(z,QSo),e(z,h7),e(h7,whe),e(whe,HSo),e(h7,USo),e(h7,jO),e(jO,JSo),e(h7,YSo),e(z,KSo),e(z,p7),e(p7,Ahe),e(Ahe,ZSo),e(p7,eRo),e(p7,DO),e(DO,oRo),e(p7,rRo),e(z,tRo),e(z,_7),e(_7,Lhe),e(Lhe,aRo),e(_7,nRo),e(_7,GO),e(GO,sRo),e(_7,lRo),e(z,iRo),e(z,u7),e(u7,yhe),e(yhe,dRo),e(u7,cRo),e(u7,OO),e(OO,fRo),e(u7,mRo),e(z,gRo),e(z,b7),e(b7,xhe),e(xhe,hRo),e(b7,pRo),e(b7,VO),e(VO,_Ro),e(b7,uRo),e(z,bRo),e(z,v7),e(v7,$he),e($he,vRo),e(v7,FRo),e(v7,XO),e(XO,TRo),e(v7,MRo),e(z,ERo),e(z,F7),e(F7,khe),e(khe,CRo),e(F7,wRo),e(F7,zO),e(zO,ARo),e(F7,LRo),e(z,yRo),e(z,T7),e(T7,She),e(She,xRo),e(T7,$Ro),e(T7,WO),e(WO,kRo),e(T7,SRo),e(z,RRo),e(z,M7),e(M7,Rhe),e(Rhe,PRo),e(M7,BRo),e(M7,QO),e(QO,IRo),e(M7,NRo),e(z,qRo),e(z,E7),e(E7,Phe),e(Phe,jRo),e(E7,DRo),e(E7,HO),e(HO,GRo),e(E7,ORo),e(z,VRo),e(z,C7),e(C7,Bhe),e(Bhe,XRo),e(C7,zRo),e(C7,UO),e(UO,WRo),e(C7,QRo),e(z,HRo),e(z,w7),e(w7,Ihe),e(Ihe,URo),e(w7,JRo),e(w7,JO),e(JO,YRo),e(w7,KRo),e(z,ZRo),e(z,A7),e(A7,Nhe),e(Nhe,ePo),e(A7,oPo),e(A7,YO),e(YO,rPo),e(A7,tPo),e(z,aPo),e(z,L7),e(L7,qhe),e(qhe,nPo),e(L7,sPo),e(L7,KO),e(KO,lPo),e(L7,iPo),e(z,dPo),e(z,y7),e(y7,jhe),e(jhe,cPo),e(y7,fPo),e(y7,ZO),e(ZO,mPo),e(y7,gPo),e(z,hPo),e(z,x7),e(x7,Dhe),e(Dhe,pPo),e(x7,_Po),e(x7,eV),e(eV,uPo),e(x7,bPo),e(z,vPo),e(z,$7),e($7,Ghe),e(Ghe,FPo),e($7,TPo),e($7,oV),e(oV,MPo),e($7,EPo),e(z,CPo),e(z,k7),e(k7,Ohe),e(Ohe,wPo),e(k7,APo),e(k7,rV),e(rV,LPo),e(k7,yPo),e(z,xPo),e(z,S7),e(S7,Vhe),e(Vhe,$Po),e(S7,kPo),e(S7,tV),e(tV,SPo),e(S7,RPo),e(z,PPo),e(z,R7),e(R7,Xhe),e(Xhe,BPo),e(R7,IPo),e(R7,aV),e(aV,NPo),e(R7,qPo),e(z,jPo),e(z,P7),e(P7,zhe),e(zhe,DPo),e(P7,GPo),e(P7,nV),e(nV,OPo),e(P7,VPo),e(z,XPo),e(z,B7),e(B7,Whe),e(Whe,zPo),e(B7,WPo),e(B7,sV),e(sV,QPo),e(B7,HPo),e(z,UPo),e(z,I7),e(I7,Qhe),e(Qhe,JPo),e(I7,YPo),e(I7,lV),e(lV,KPo),e(I7,ZPo),e(Ze,eBo),e(Ze,N7),e(N7,oBo),e(N7,Hhe),e(Hhe,rBo),e(N7,tBo),e(N7,Uhe),e(Uhe,aBo),e(Ze,nBo),M(q7,Ze,null),b(f,_ze,u),b(f,Ki,u),e(Ki,j7),e(j7,Jhe),M(a8,Jhe,null),e(Ki,sBo),e(Ki,Yhe),e(Yhe,lBo),b(f,uze,u),b(f,Po,u),M(n8,Po,null),e(Po,iBo),e(Po,Zi),e(Zi,dBo),e(Zi,iV),e(iV,cBo),e(Zi,fBo),e(Zi,dV),e(dV,mBo),e(Zi,gBo),e(Po,hBo),e(Po,s8),e(s8,pBo),e(s8,Khe),e(Khe,_Bo),e(s8,uBo),e(Po,bBo),e(Po,ft),M(l8,ft,null),e(ft,vBo),e(ft,Zhe),e(Zhe,FBo),e(ft,TBo),e(ft,ed),e(ed,MBo),e(ed,epe),e(epe,EBo),e(ed,CBo),e(ed,cV),e(cV,wBo),e(ed,ABo),e(ft,LBo),M(D7,ft,null),e(Po,yBo),e(Po,eo),M(i8,eo,null),e(eo,xBo),e(eo,ope),e(ope,$Bo),e(eo,kBo),e(eo,Da),e(Da,SBo),e(Da,rpe),e(rpe,RBo),e(Da,PBo),e(Da,tpe),e(tpe,BBo),e(Da,IBo),e(Da,ape),e(ape,NBo),e(Da,qBo),e(eo,jBo),e(eo,Q),e(Q,G7),e(G7,npe),e(npe,DBo),e(G7,GBo),e(G7,fV),e(fV,OBo),e(G7,VBo),e(Q,XBo),e(Q,O7),e(O7,spe),e(spe,zBo),e(O7,WBo),e(O7,mV),e(mV,QBo),e(O7,HBo),e(Q,UBo),e(Q,V7),e(V7,lpe),e(lpe,JBo),e(V7,YBo),e(V7,gV),e(gV,KBo),e(V7,ZBo),e(Q,eIo),e(Q,X7),e(X7,ipe),e(ipe,oIo),e(X7,rIo),e(X7,hV),e(hV,tIo),e(X7,aIo),e(Q,nIo),e(Q,z7),e(z7,dpe),e(dpe,sIo),e(z7,lIo),e(z7,pV),e(pV,iIo),e(z7,dIo),e(Q,cIo),e(Q,W7),e(W7,cpe),e(cpe,fIo),e(W7,mIo),e(W7,_V),e(_V,gIo),e(W7,hIo),e(Q,pIo),e(Q,Q7),e(Q7,fpe),e(fpe,_Io),e(Q7,uIo),e(Q7,uV),e(uV,bIo),e(Q7,vIo),e(Q,FIo),e(Q,H7),e(H7,mpe),e(mpe,TIo),e(H7,MIo),e(H7,bV),e(bV,EIo),e(H7,CIo),e(Q,wIo),e(Q,U7),e(U7,gpe),e(gpe,AIo),e(U7,LIo),e(U7,vV),e(vV,yIo),e(U7,xIo),e(Q,$Io),e(Q,J7),e(J7,hpe),e(hpe,kIo),e(J7,SIo),e(J7,FV),e(FV,RIo),e(J7,PIo),e(Q,BIo),e(Q,Y7),e(Y7,ppe),e(ppe,IIo),e(Y7,NIo),e(Y7,TV),e(TV,qIo),e(Y7,jIo),e(Q,DIo),e(Q,K7),e(K7,_pe),e(_pe,GIo),e(K7,OIo),e(K7,MV),e(MV,VIo),e(K7,XIo),e(Q,zIo),e(Q,Z7),e(Z7,upe),e(upe,WIo),e(Z7,QIo),e(Z7,EV),e(EV,HIo),e(Z7,UIo),e(Q,JIo),e(Q,e2),e(e2,bpe),e(bpe,YIo),e(e2,KIo),e(e2,CV),e(CV,ZIo),e(e2,eNo),e(Q,oNo),e(Q,o2),e(o2,vpe),e(vpe,rNo),e(o2,tNo),e(o2,wV),e(wV,aNo),e(o2,nNo),e(Q,sNo),e(Q,r2),e(r2,Fpe),e(Fpe,lNo),e(r2,iNo),e(r2,AV),e(AV,dNo),e(r2,cNo),e(Q,fNo),e(Q,t2),e(t2,Tpe),e(Tpe,mNo),e(t2,gNo),e(t2,LV),e(LV,hNo),e(t2,pNo),e(Q,_No),e(Q,a2),e(a2,Mpe),e(Mpe,uNo),e(a2,bNo),e(a2,yV),e(yV,vNo),e(a2,FNo),e(Q,TNo),e(Q,n2),e(n2,Epe),e(Epe,MNo),e(n2,ENo),e(n2,xV),e(xV,CNo),e(n2,wNo),e(Q,ANo),e(Q,s2),e(s2,Cpe),e(Cpe,LNo),e(s2,yNo),e(s2,$V),e($V,xNo),e(s2,$No),e(Q,kNo),e(Q,l2),e(l2,wpe),e(wpe,SNo),e(l2,RNo),e(l2,kV),e(kV,PNo),e(l2,BNo),e(Q,INo),e(Q,i2),e(i2,Ape),e(Ape,NNo),e(i2,qNo),e(i2,SV),e(SV,jNo),e(i2,DNo),e(Q,GNo),e(Q,d2),e(d2,Lpe),e(Lpe,ONo),e(d2,VNo),e(d2,RV),e(RV,XNo),e(d2,zNo),e(Q,WNo),e(Q,c2),e(c2,ype),e(ype,QNo),e(c2,HNo),e(c2,PV),e(PV,UNo),e(c2,JNo),e(Q,YNo),e(Q,f2),e(f2,xpe),e(xpe,KNo),e(f2,ZNo),e(f2,BV),e(BV,eqo),e(f2,oqo),e(Q,rqo),e(Q,m2),e(m2,$pe),e($pe,tqo),e(m2,aqo),e(m2,IV),e(IV,nqo),e(m2,sqo),e(Q,lqo),e(Q,g2),e(g2,kpe),e(kpe,iqo),e(g2,dqo),e(g2,NV),e(NV,cqo),e(g2,fqo),e(Q,mqo),e(Q,h2),e(h2,Spe),e(Spe,gqo),e(h2,hqo),e(h2,qV),e(qV,pqo),e(h2,_qo),e(Q,uqo),e(Q,p2),e(p2,Rpe),e(Rpe,bqo),e(p2,vqo),e(p2,jV),e(jV,Fqo),e(p2,Tqo),e(Q,Mqo),e(Q,_2),e(_2,Ppe),e(Ppe,Eqo),e(_2,Cqo),e(_2,DV),e(DV,wqo),e(_2,Aqo),e(Q,Lqo),e(Q,u2),e(u2,Bpe),e(Bpe,yqo),e(u2,xqo),e(u2,GV),e(GV,$qo),e(u2,kqo),e(Q,Sqo),e(Q,b2),e(b2,Ipe),e(Ipe,Rqo),e(b2,Pqo),e(b2,OV),e(OV,Bqo),e(b2,Iqo),e(Q,Nqo),e(Q,v2),e(v2,Npe),e(Npe,qqo),e(v2,jqo),e(v2,VV),e(VV,Dqo),e(v2,Gqo),e(Q,Oqo),e(Q,F2),e(F2,qpe),e(qpe,Vqo),e(F2,Xqo),e(F2,jpe),e(jpe,zqo),e(F2,Wqo),e(Q,Qqo),e(Q,T2),e(T2,Dpe),e(Dpe,Hqo),e(T2,Uqo),e(T2,XV),e(XV,Jqo),e(T2,Yqo),e(Q,Kqo),e(Q,M2),e(M2,Gpe),e(Gpe,Zqo),e(M2,ejo),e(M2,zV),e(zV,ojo),e(M2,rjo),e(Q,tjo),e(Q,E2),e(E2,Ope),e(Ope,ajo),e(E2,njo),e(E2,WV),e(WV,sjo),e(E2,ljo),e(Q,ijo),e(Q,C2),e(C2,Vpe),e(Vpe,djo),e(C2,cjo),e(C2,QV),e(QV,fjo),e(C2,mjo),e(eo,gjo),e(eo,w2),e(w2,hjo),e(w2,Xpe),e(Xpe,pjo),e(w2,_jo),e(w2,zpe),e(zpe,ujo),e(eo,bjo),M(A2,eo,null),b(f,bze,u),b(f,od,u),e(od,L2),e(L2,Wpe),M(d8,Wpe,null),e(od,vjo),e(od,Qpe),e(Qpe,Fjo),b(f,vze,u),b(f,Bo,u),M(c8,Bo,null),e(Bo,Tjo),e(Bo,rd),e(rd,Mjo),e(rd,HV),e(HV,Ejo),e(rd,Cjo),e(rd,UV),e(UV,wjo),e(rd,Ajo),e(Bo,Ljo),e(Bo,f8),e(f8,yjo),e(f8,Hpe),e(Hpe,xjo),e(f8,$jo),e(Bo,kjo),e(Bo,mt),M(m8,mt,null),e(mt,Sjo),e(mt,Upe),e(Upe,Rjo),e(mt,Pjo),e(mt,td),e(td,Bjo),e(td,Jpe),e(Jpe,Ijo),e(td,Njo),e(td,JV),e(JV,qjo),e(td,jjo),e(mt,Djo),M(y2,mt,null),e(Bo,Gjo),e(Bo,oo),M(g8,oo,null),e(oo,Ojo),e(oo,Ype),e(Ype,Vjo),e(oo,Xjo),e(oo,Ga),e(Ga,zjo),e(Ga,Kpe),e(Kpe,Wjo),e(Ga,Qjo),e(Ga,Zpe),e(Zpe,Hjo),e(Ga,Ujo),e(Ga,e_e),e(e_e,Jjo),e(Ga,Yjo),e(oo,Kjo),e(oo,me),e(me,x2),e(x2,o_e),e(o_e,Zjo),e(x2,eDo),e(x2,YV),e(YV,oDo),e(x2,rDo),e(me,tDo),e(me,$2),e($2,r_e),e(r_e,aDo),e($2,nDo),e($2,KV),e(KV,sDo),e($2,lDo),e(me,iDo),e(me,k2),e(k2,t_e),e(t_e,dDo),e(k2,cDo),e(k2,ZV),e(ZV,fDo),e(k2,mDo),e(me,gDo),e(me,S2),e(S2,a_e),e(a_e,hDo),e(S2,pDo),e(S2,eX),e(eX,_Do),e(S2,uDo),e(me,bDo),e(me,R2),e(R2,n_e),e(n_e,vDo),e(R2,FDo),e(R2,oX),e(oX,TDo),e(R2,MDo),e(me,EDo),e(me,P2),e(P2,s_e),e(s_e,CDo),e(P2,wDo),e(P2,rX),e(rX,ADo),e(P2,LDo),e(me,yDo),e(me,B2),e(B2,l_e),e(l_e,xDo),e(B2,$Do),e(B2,tX),e(tX,kDo),e(B2,SDo),e(me,RDo),e(me,I2),e(I2,i_e),e(i_e,PDo),e(I2,BDo),e(I2,aX),e(aX,IDo),e(I2,NDo),e(me,qDo),e(me,N2),e(N2,d_e),e(d_e,jDo),e(N2,DDo),e(N2,nX),e(nX,GDo),e(N2,ODo),e(me,VDo),e(me,q2),e(q2,c_e),e(c_e,XDo),e(q2,zDo),e(q2,sX),e(sX,WDo),e(q2,QDo),e(me,HDo),e(me,j2),e(j2,f_e),e(f_e,UDo),e(j2,JDo),e(j2,lX),e(lX,YDo),e(j2,KDo),e(me,ZDo),e(me,D2),e(D2,m_e),e(m_e,eGo),e(D2,oGo),e(D2,iX),e(iX,rGo),e(D2,tGo),e(me,aGo),e(me,G2),e(G2,g_e),e(g_e,nGo),e(G2,sGo),e(G2,dX),e(dX,lGo),e(G2,iGo),e(me,dGo),e(me,O2),e(O2,h_e),e(h_e,cGo),e(O2,fGo),e(O2,cX),e(cX,mGo),e(O2,gGo),e(me,hGo),e(me,V2),e(V2,p_e),e(p_e,pGo),e(V2,_Go),e(V2,fX),e(fX,uGo),e(V2,bGo),e(me,vGo),e(me,X2),e(X2,__e),e(__e,FGo),e(X2,TGo),e(X2,mX),e(mX,MGo),e(X2,EGo),e(me,CGo),e(me,z2),e(z2,u_e),e(u_e,wGo),e(z2,AGo),e(z2,gX),e(gX,LGo),e(z2,yGo),e(me,xGo),e(me,W2),e(W2,b_e),e(b_e,$Go),e(W2,kGo),e(W2,hX),e(hX,SGo),e(W2,RGo),e(me,PGo),e(me,Q2),e(Q2,v_e),e(v_e,BGo),e(Q2,IGo),e(Q2,pX),e(pX,NGo),e(Q2,qGo),e(oo,jGo),e(oo,H2),e(H2,DGo),e(H2,F_e),e(F_e,GGo),e(H2,OGo),e(H2,T_e),e(T_e,VGo),e(oo,XGo),M(U2,oo,null),b(f,Fze,u),b(f,ad,u),e(ad,J2),e(J2,M_e),M(h8,M_e,null),e(ad,zGo),e(ad,E_e),e(E_e,WGo),b(f,Tze,u),b(f,Io,u),M(p8,Io,null),e(Io,QGo),e(Io,nd),e(nd,HGo),e(nd,_X),e(_X,UGo),e(nd,JGo),e(nd,uX),e(uX,YGo),e(nd,KGo),e(Io,ZGo),e(Io,_8),e(_8,eOo),e(_8,C_e),e(C_e,oOo),e(_8,rOo),e(Io,tOo),e(Io,gt),M(u8,gt,null),e(gt,aOo),e(gt,w_e),e(w_e,nOo),e(gt,sOo),e(gt,sd),e(sd,lOo),e(sd,A_e),e(A_e,iOo),e(sd,dOo),e(sd,bX),e(bX,cOo),e(sd,fOo),e(gt,mOo),M(Y2,gt,null),e(Io,gOo),e(Io,ro),M(b8,ro,null),e(ro,hOo),e(ro,L_e),e(L_e,pOo),e(ro,_Oo),e(ro,Oa),e(Oa,uOo),e(Oa,y_e),e(y_e,bOo),e(Oa,vOo),e(Oa,x_e),e(x_e,FOo),e(Oa,TOo),e(Oa,$_e),e($_e,MOo),e(Oa,EOo),e(ro,COo),e(ro,P),e(P,K2),e(K2,k_e),e(k_e,wOo),e(K2,AOo),e(K2,vX),e(vX,LOo),e(K2,yOo),e(P,xOo),e(P,Z2),e(Z2,S_e),e(S_e,$Oo),e(Z2,kOo),e(Z2,FX),e(FX,SOo),e(Z2,ROo),e(P,POo),e(P,eb),e(eb,R_e),e(R_e,BOo),e(eb,IOo),e(eb,TX),e(TX,NOo),e(eb,qOo),e(P,jOo),e(P,ob),e(ob,P_e),e(P_e,DOo),e(ob,GOo),e(ob,MX),e(MX,OOo),e(ob,VOo),e(P,XOo),e(P,rb),e(rb,B_e),e(B_e,zOo),e(rb,WOo),e(rb,EX),e(EX,QOo),e(rb,HOo),e(P,UOo),e(P,tb),e(tb,I_e),e(I_e,JOo),e(tb,YOo),e(tb,CX),e(CX,KOo),e(tb,ZOo),e(P,eVo),e(P,ab),e(ab,N_e),e(N_e,oVo),e(ab,rVo),e(ab,wX),e(wX,tVo),e(ab,aVo),e(P,nVo),e(P,nb),e(nb,q_e),e(q_e,sVo),e(nb,lVo),e(nb,AX),e(AX,iVo),e(nb,dVo),e(P,cVo),e(P,sb),e(sb,j_e),e(j_e,fVo),e(sb,mVo),e(sb,LX),e(LX,gVo),e(sb,hVo),e(P,pVo),e(P,lb),e(lb,D_e),e(D_e,_Vo),e(lb,uVo),e(lb,yX),e(yX,bVo),e(lb,vVo),e(P,FVo),e(P,ib),e(ib,G_e),e(G_e,TVo),e(ib,MVo),e(ib,xX),e(xX,EVo),e(ib,CVo),e(P,wVo),e(P,db),e(db,O_e),e(O_e,AVo),e(db,LVo),e(db,$X),e($X,yVo),e(db,xVo),e(P,$Vo),e(P,cb),e(cb,V_e),e(V_e,kVo),e(cb,SVo),e(cb,kX),e(kX,RVo),e(cb,PVo),e(P,BVo),e(P,fb),e(fb,X_e),e(X_e,IVo),e(fb,NVo),e(fb,SX),e(SX,qVo),e(fb,jVo),e(P,DVo),e(P,mb),e(mb,z_e),e(z_e,GVo),e(mb,OVo),e(mb,RX),e(RX,VVo),e(mb,XVo),e(P,zVo),e(P,gb),e(gb,W_e),e(W_e,WVo),e(gb,QVo),e(gb,PX),e(PX,HVo),e(gb,UVo),e(P,JVo),e(P,hb),e(hb,Q_e),e(Q_e,YVo),e(hb,KVo),e(hb,BX),e(BX,ZVo),e(hb,eXo),e(P,oXo),e(P,pb),e(pb,H_e),e(H_e,rXo),e(pb,tXo),e(pb,IX),e(IX,aXo),e(pb,nXo),e(P,sXo),e(P,_b),e(_b,U_e),e(U_e,lXo),e(_b,iXo),e(_b,NX),e(NX,dXo),e(_b,cXo),e(P,fXo),e(P,ub),e(ub,J_e),e(J_e,mXo),e(ub,gXo),e(ub,qX),e(qX,hXo),e(ub,pXo),e(P,_Xo),e(P,bb),e(bb,Y_e),e(Y_e,uXo),e(bb,bXo),e(bb,jX),e(jX,vXo),e(bb,FXo),e(P,TXo),e(P,vb),e(vb,K_e),e(K_e,MXo),e(vb,EXo),e(vb,DX),e(DX,CXo),e(vb,wXo),e(P,AXo),e(P,Fb),e(Fb,Z_e),e(Z_e,LXo),e(Fb,yXo),e(Fb,GX),e(GX,xXo),e(Fb,$Xo),e(P,kXo),e(P,Tb),e(Tb,eue),e(eue,SXo),e(Tb,RXo),e(Tb,OX),e(OX,PXo),e(Tb,BXo),e(P,IXo),e(P,Mb),e(Mb,oue),e(oue,NXo),e(Mb,qXo),e(Mb,VX),e(VX,jXo),e(Mb,DXo),e(P,GXo),e(P,Eb),e(Eb,rue),e(rue,OXo),e(Eb,VXo),e(Eb,XX),e(XX,XXo),e(Eb,zXo),e(P,WXo),e(P,Cb),e(Cb,tue),e(tue,QXo),e(Cb,HXo),e(Cb,zX),e(zX,UXo),e(Cb,JXo),e(P,YXo),e(P,wb),e(wb,aue),e(aue,KXo),e(wb,ZXo),e(wb,WX),e(WX,ezo),e(wb,ozo),e(P,rzo),e(P,Ab),e(Ab,nue),e(nue,tzo),e(Ab,azo),e(Ab,QX),e(QX,nzo),e(Ab,szo),e(P,lzo),e(P,Lb),e(Lb,sue),e(sue,izo),e(Lb,dzo),e(Lb,HX),e(HX,czo),e(Lb,fzo),e(P,mzo),e(P,yb),e(yb,lue),e(lue,gzo),e(yb,hzo),e(yb,UX),e(UX,pzo),e(yb,_zo),e(P,uzo),e(P,xb),e(xb,iue),e(iue,bzo),e(xb,vzo),e(xb,JX),e(JX,Fzo),e(xb,Tzo),e(P,Mzo),e(P,$b),e($b,due),e(due,Ezo),e($b,Czo),e($b,YX),e(YX,wzo),e($b,Azo),e(P,Lzo),e(P,kb),e(kb,cue),e(cue,yzo),e(kb,xzo),e(kb,KX),e(KX,$zo),e(kb,kzo),e(P,Szo),e(P,Sb),e(Sb,fue),e(fue,Rzo),e(Sb,Pzo),e(Sb,ZX),e(ZX,Bzo),e(Sb,Izo),e(P,Nzo),e(P,Rb),e(Rb,mue),e(mue,qzo),e(Rb,jzo),e(Rb,ez),e(ez,Dzo),e(Rb,Gzo),e(P,Ozo),e(P,Pb),e(Pb,gue),e(gue,Vzo),e(Pb,Xzo),e(Pb,oz),e(oz,zzo),e(Pb,Wzo),e(P,Qzo),e(P,Bb),e(Bb,hue),e(hue,Hzo),e(Bb,Uzo),e(Bb,rz),e(rz,Jzo),e(Bb,Yzo),e(P,Kzo),e(P,Ib),e(Ib,pue),e(pue,Zzo),e(Ib,eWo),e(Ib,tz),e(tz,oWo),e(Ib,rWo),e(P,tWo),e(P,Nb),e(Nb,_ue),e(_ue,aWo),e(Nb,nWo),e(Nb,az),e(az,sWo),e(Nb,lWo),e(P,iWo),e(P,qb),e(qb,uue),e(uue,dWo),e(qb,cWo),e(qb,nz),e(nz,fWo),e(qb,mWo),e(P,gWo),e(P,jb),e(jb,bue),e(bue,hWo),e(jb,pWo),e(jb,sz),e(sz,_Wo),e(jb,uWo),e(P,bWo),e(P,Db),e(Db,vue),e(vue,vWo),e(Db,FWo),e(Db,lz),e(lz,TWo),e(Db,MWo),e(P,EWo),e(P,Gb),e(Gb,Fue),e(Fue,CWo),e(Gb,wWo),e(Gb,iz),e(iz,AWo),e(Gb,LWo),e(P,yWo),e(P,Ob),e(Ob,Tue),e(Tue,xWo),e(Ob,$Wo),e(Ob,dz),e(dz,kWo),e(Ob,SWo),e(P,RWo),e(P,Vb),e(Vb,Mue),e(Mue,PWo),e(Vb,BWo),e(Vb,cz),e(cz,IWo),e(Vb,NWo),e(P,qWo),e(P,Xb),e(Xb,Eue),e(Eue,jWo),e(Xb,DWo),e(Xb,fz),e(fz,GWo),e(Xb,OWo),e(P,VWo),e(P,zb),e(zb,Cue),e(Cue,XWo),e(zb,zWo),e(zb,mz),e(mz,WWo),e(zb,QWo),e(P,HWo),e(P,Wb),e(Wb,wue),e(wue,UWo),e(Wb,JWo),e(Wb,gz),e(gz,YWo),e(Wb,KWo),e(P,ZWo),e(P,Qb),e(Qb,Aue),e(Aue,eQo),e(Qb,oQo),e(Qb,hz),e(hz,rQo),e(Qb,tQo),e(P,aQo),e(P,Hb),e(Hb,Lue),e(Lue,nQo),e(Hb,sQo),e(Hb,pz),e(pz,lQo),e(Hb,iQo),e(P,dQo),e(P,Ub),e(Ub,yue),e(yue,cQo),e(Ub,fQo),e(Ub,_z),e(_z,mQo),e(Ub,gQo),e(ro,hQo),e(ro,Jb),e(Jb,pQo),e(Jb,xue),e(xue,_Qo),e(Jb,uQo),e(Jb,$ue),e($ue,bQo),e(ro,vQo),M(Yb,ro,null),b(f,Mze,u),b(f,ld,u),e(ld,Kb),e(Kb,kue),M(v8,kue,null),e(ld,FQo),e(ld,Sue),e(Sue,TQo),b(f,Eze,u),b(f,No,u),M(F8,No,null),e(No,MQo),e(No,id),e(id,EQo),e(id,uz),e(uz,CQo),e(id,wQo),e(id,bz),e(bz,AQo),e(id,LQo),e(No,yQo),e(No,T8),e(T8,xQo),e(T8,Rue),e(Rue,$Qo),e(T8,kQo),e(No,SQo),e(No,ht),M(M8,ht,null),e(ht,RQo),e(ht,Pue),e(Pue,PQo),e(ht,BQo),e(ht,dd),e(dd,IQo),e(dd,Bue),e(Bue,NQo),e(dd,qQo),e(dd,vz),e(vz,jQo),e(dd,DQo),e(ht,GQo),M(Zb,ht,null),e(No,OQo),e(No,to),M(E8,to,null),e(to,VQo),e(to,Iue),e(Iue,XQo),e(to,zQo),e(to,Va),e(Va,WQo),e(Va,Nue),e(Nue,QQo),e(Va,HQo),e(Va,que),e(que,UQo),e(Va,JQo),e(Va,jue),e(jue,YQo),e(Va,KQo),e(to,ZQo),e(to,Z),e(Z,ev),e(ev,Due),e(Due,eHo),e(ev,oHo),e(ev,Fz),e(Fz,rHo),e(ev,tHo),e(Z,aHo),e(Z,ov),e(ov,Gue),e(Gue,nHo),e(ov,sHo),e(ov,Tz),e(Tz,lHo),e(ov,iHo),e(Z,dHo),e(Z,rv),e(rv,Oue),e(Oue,cHo),e(rv,fHo),e(rv,Mz),e(Mz,mHo),e(rv,gHo),e(Z,hHo),e(Z,tv),e(tv,Vue),e(Vue,pHo),e(tv,_Ho),e(tv,Ez),e(Ez,uHo),e(tv,bHo),e(Z,vHo),e(Z,av),e(av,Xue),e(Xue,FHo),e(av,THo),e(av,Cz),e(Cz,MHo),e(av,EHo),e(Z,CHo),e(Z,nv),e(nv,zue),e(zue,wHo),e(nv,AHo),e(nv,wz),e(wz,LHo),e(nv,yHo),e(Z,xHo),e(Z,sv),e(sv,Wue),e(Wue,$Ho),e(sv,kHo),e(sv,Az),e(Az,SHo),e(sv,RHo),e(Z,PHo),e(Z,lv),e(lv,Que),e(Que,BHo),e(lv,IHo),e(lv,Lz),e(Lz,NHo),e(lv,qHo),e(Z,jHo),e(Z,iv),e(iv,Hue),e(Hue,DHo),e(iv,GHo),e(iv,yz),e(yz,OHo),e(iv,VHo),e(Z,XHo),e(Z,dv),e(dv,Uue),e(Uue,zHo),e(dv,WHo),e(dv,xz),e(xz,QHo),e(dv,HHo),e(Z,UHo),e(Z,cv),e(cv,Jue),e(Jue,JHo),e(cv,YHo),e(cv,$z),e($z,KHo),e(cv,ZHo),e(Z,eUo),e(Z,fv),e(fv,Yue),e(Yue,oUo),e(fv,rUo),e(fv,kz),e(kz,tUo),e(fv,aUo),e(Z,nUo),e(Z,mv),e(mv,Kue),e(Kue,sUo),e(mv,lUo),e(mv,Sz),e(Sz,iUo),e(mv,dUo),e(Z,cUo),e(Z,gv),e(gv,Zue),e(Zue,fUo),e(gv,mUo),e(gv,Rz),e(Rz,gUo),e(gv,hUo),e(Z,pUo),e(Z,hv),e(hv,e1e),e(e1e,_Uo),e(hv,uUo),e(hv,Pz),e(Pz,bUo),e(hv,vUo),e(Z,FUo),e(Z,pv),e(pv,o1e),e(o1e,TUo),e(pv,MUo),e(pv,Bz),e(Bz,EUo),e(pv,CUo),e(Z,wUo),e(Z,_v),e(_v,r1e),e(r1e,AUo),e(_v,LUo),e(_v,Iz),e(Iz,yUo),e(_v,xUo),e(Z,$Uo),e(Z,uv),e(uv,t1e),e(t1e,kUo),e(uv,SUo),e(uv,Nz),e(Nz,RUo),e(uv,PUo),e(Z,BUo),e(Z,bv),e(bv,a1e),e(a1e,IUo),e(bv,NUo),e(bv,qz),e(qz,qUo),e(bv,jUo),e(Z,DUo),e(Z,vv),e(vv,n1e),e(n1e,GUo),e(vv,OUo),e(vv,jz),e(jz,VUo),e(vv,XUo),e(Z,zUo),e(Z,Fv),e(Fv,s1e),e(s1e,WUo),e(Fv,QUo),e(Fv,Dz),e(Dz,HUo),e(Fv,UUo),e(Z,JUo),e(Z,Tv),e(Tv,l1e),e(l1e,YUo),e(Tv,KUo),e(Tv,Gz),e(Gz,ZUo),e(Tv,eJo),e(Z,oJo),e(Z,Mv),e(Mv,i1e),e(i1e,rJo),e(Mv,tJo),e(Mv,Oz),e(Oz,aJo),e(Mv,nJo),e(Z,sJo),e(Z,Ev),e(Ev,d1e),e(d1e,lJo),e(Ev,iJo),e(Ev,Vz),e(Vz,dJo),e(Ev,cJo),e(Z,fJo),e(Z,Cv),e(Cv,c1e),e(c1e,mJo),e(Cv,gJo),e(Cv,Xz),e(Xz,hJo),e(Cv,pJo),e(Z,_Jo),e(Z,wv),e(wv,f1e),e(f1e,uJo),e(wv,bJo),e(wv,zz),e(zz,vJo),e(wv,FJo),e(Z,TJo),e(Z,Av),e(Av,m1e),e(m1e,MJo),e(Av,EJo),e(Av,Wz),e(Wz,CJo),e(Av,wJo),e(Z,AJo),e(Z,Lv),e(Lv,g1e),e(g1e,LJo),e(Lv,yJo),e(Lv,Qz),e(Qz,xJo),e(Lv,$Jo),e(Z,kJo),e(Z,yv),e(yv,h1e),e(h1e,SJo),e(yv,RJo),e(yv,Hz),e(Hz,PJo),e(yv,BJo),e(Z,IJo),e(Z,xv),e(xv,p1e),e(p1e,NJo),e(xv,qJo),e(xv,Uz),e(Uz,jJo),e(xv,DJo),e(to,GJo),e(to,$v),e($v,OJo),e($v,_1e),e(_1e,VJo),e($v,XJo),e($v,u1e),e(u1e,zJo),e(to,WJo),M(kv,to,null),b(f,Cze,u),b(f,cd,u),e(cd,Sv),e(Sv,b1e),M(C8,b1e,null),e(cd,QJo),e(cd,v1e),e(v1e,HJo),b(f,wze,u),b(f,qo,u),M(w8,qo,null),e(qo,UJo),e(qo,fd),e(fd,JJo),e(fd,Jz),e(Jz,YJo),e(fd,KJo),e(fd,Yz),e(Yz,ZJo),e(fd,eYo),e(qo,oYo),e(qo,A8),e(A8,rYo),e(A8,F1e),e(F1e,tYo),e(A8,aYo),e(qo,nYo),e(qo,pt),M(L8,pt,null),e(pt,sYo),e(pt,T1e),e(T1e,lYo),e(pt,iYo),e(pt,md),e(md,dYo),e(md,M1e),e(M1e,cYo),e(md,fYo),e(md,Kz),e(Kz,mYo),e(md,gYo),e(pt,hYo),M(Rv,pt,null),e(qo,pYo),e(qo,ao),M(y8,ao,null),e(ao,_Yo),e(ao,E1e),e(E1e,uYo),e(ao,bYo),e(ao,Xa),e(Xa,vYo),e(Xa,C1e),e(C1e,FYo),e(Xa,TYo),e(Xa,w1e),e(w1e,MYo),e(Xa,EYo),e(Xa,A1e),e(A1e,CYo),e(Xa,wYo),e(ao,AYo),e(ao,jo),e(jo,Pv),e(Pv,L1e),e(L1e,LYo),e(Pv,yYo),e(Pv,Zz),e(Zz,xYo),e(Pv,$Yo),e(jo,kYo),e(jo,Bv),e(Bv,y1e),e(y1e,SYo),e(Bv,RYo),e(Bv,eW),e(eW,PYo),e(Bv,BYo),e(jo,IYo),e(jo,Iv),e(Iv,x1e),e(x1e,NYo),e(Iv,qYo),e(Iv,oW),e(oW,jYo),e(Iv,DYo),e(jo,GYo),e(jo,Nv),e(Nv,$1e),e($1e,OYo),e(Nv,VYo),e(Nv,rW),e(rW,XYo),e(Nv,zYo),e(jo,WYo),e(jo,qv),e(qv,k1e),e(k1e,QYo),e(qv,HYo),e(qv,tW),e(tW,UYo),e(qv,JYo),e(jo,YYo),e(jo,jv),e(jv,S1e),e(S1e,KYo),e(jv,ZYo),e(jv,aW),e(aW,eKo),e(jv,oKo),e(ao,rKo),e(ao,Dv),e(Dv,tKo),e(Dv,R1e),e(R1e,aKo),e(Dv,nKo),e(Dv,P1e),e(P1e,sKo),e(ao,lKo),M(Gv,ao,null),b(f,Aze,u),b(f,gd,u),e(gd,Ov),e(Ov,B1e),M(x8,B1e,null),e(gd,iKo),e(gd,I1e),e(I1e,dKo),b(f,Lze,u),b(f,Do,u),M($8,Do,null),e(Do,cKo),e(Do,hd),e(hd,fKo),e(hd,nW),e(nW,mKo),e(hd,gKo),e(hd,sW),e(sW,hKo),e(hd,pKo),e(Do,_Ko),e(Do,k8),e(k8,uKo),e(k8,N1e),e(N1e,bKo),e(k8,vKo),e(Do,FKo),e(Do,_t),M(S8,_t,null),e(_t,TKo),e(_t,q1e),e(q1e,MKo),e(_t,EKo),e(_t,pd),e(pd,CKo),e(pd,j1e),e(j1e,wKo),e(pd,AKo),e(pd,lW),e(lW,LKo),e(pd,yKo),e(_t,xKo),M(Vv,_t,null),e(Do,$Ko),e(Do,no),M(R8,no,null),e(no,kKo),e(no,D1e),e(D1e,SKo),e(no,RKo),e(no,za),e(za,PKo),e(za,G1e),e(G1e,BKo),e(za,IKo),e(za,O1e),e(O1e,NKo),e(za,qKo),e(za,V1e),e(V1e,jKo),e(za,DKo),e(no,GKo),e(no,U),e(U,Xv),e(Xv,X1e),e(X1e,OKo),e(Xv,VKo),e(Xv,iW),e(iW,XKo),e(Xv,zKo),e(U,WKo),e(U,zv),e(zv,z1e),e(z1e,QKo),e(zv,HKo),e(zv,dW),e(dW,UKo),e(zv,JKo),e(U,YKo),e(U,Wv),e(Wv,W1e),e(W1e,KKo),e(Wv,ZKo),e(Wv,cW),e(cW,eZo),e(Wv,oZo),e(U,rZo),e(U,Qv),e(Qv,Q1e),e(Q1e,tZo),e(Qv,aZo),e(Qv,fW),e(fW,nZo),e(Qv,sZo),e(U,lZo),e(U,Hv),e(Hv,H1e),e(H1e,iZo),e(Hv,dZo),e(Hv,mW),e(mW,cZo),e(Hv,fZo),e(U,mZo),e(U,Uv),e(Uv,U1e),e(U1e,gZo),e(Uv,hZo),e(Uv,gW),e(gW,pZo),e(Uv,_Zo),e(U,uZo),e(U,Jv),e(Jv,J1e),e(J1e,bZo),e(Jv,vZo),e(Jv,hW),e(hW,FZo),e(Jv,TZo),e(U,MZo),e(U,Yv),e(Yv,Y1e),e(Y1e,EZo),e(Yv,CZo),e(Yv,pW),e(pW,wZo),e(Yv,AZo),e(U,LZo),e(U,Kv),e(Kv,K1e),e(K1e,yZo),e(Kv,xZo),e(Kv,_W),e(_W,$Zo),e(Kv,kZo),e(U,SZo),e(U,Zv),e(Zv,Z1e),e(Z1e,RZo),e(Zv,PZo),e(Zv,uW),e(uW,BZo),e(Zv,IZo),e(U,NZo),e(U,eF),e(eF,e7e),e(e7e,qZo),e(eF,jZo),e(eF,bW),e(bW,DZo),e(eF,GZo),e(U,OZo),e(U,oF),e(oF,o7e),e(o7e,VZo),e(oF,XZo),e(oF,vW),e(vW,zZo),e(oF,WZo),e(U,QZo),e(U,rF),e(rF,r7e),e(r7e,HZo),e(rF,UZo),e(rF,FW),e(FW,JZo),e(rF,YZo),e(U,KZo),e(U,tF),e(tF,t7e),e(t7e,ZZo),e(tF,eer),e(tF,TW),e(TW,oer),e(tF,rer),e(U,ter),e(U,aF),e(aF,a7e),e(a7e,aer),e(aF,ner),e(aF,MW),e(MW,ser),e(aF,ler),e(U,ier),e(U,nF),e(nF,n7e),e(n7e,der),e(nF,cer),e(nF,EW),e(EW,fer),e(nF,mer),e(U,ger),e(U,sF),e(sF,s7e),e(s7e,her),e(sF,per),e(sF,CW),e(CW,_er),e(sF,uer),e(U,ber),e(U,lF),e(lF,l7e),e(l7e,ver),e(lF,Fer),e(lF,wW),e(wW,Ter),e(lF,Mer),e(U,Eer),e(U,iF),e(iF,i7e),e(i7e,Cer),e(iF,wer),e(iF,AW),e(AW,Aer),e(iF,Ler),e(U,yer),e(U,dF),e(dF,d7e),e(d7e,xer),e(dF,$er),e(dF,LW),e(LW,ker),e(dF,Ser),e(U,Rer),e(U,cF),e(cF,c7e),e(c7e,Per),e(cF,Ber),e(cF,yW),e(yW,Ier),e(cF,Ner),e(U,qer),e(U,fF),e(fF,f7e),e(f7e,jer),e(fF,Der),e(fF,xW),e(xW,Ger),e(fF,Oer),e(U,Ver),e(U,mF),e(mF,m7e),e(m7e,Xer),e(mF,zer),e(mF,$W),e($W,Wer),e(mF,Qer),e(U,Her),e(U,gF),e(gF,g7e),e(g7e,Uer),e(gF,Jer),e(gF,kW),e(kW,Yer),e(gF,Ker),e(U,Zer),e(U,hF),e(hF,h7e),e(h7e,eor),e(hF,oor),e(hF,SW),e(SW,ror),e(hF,tor),e(U,aor),e(U,pF),e(pF,p7e),e(p7e,nor),e(pF,sor),e(pF,RW),e(RW,lor),e(pF,ior),e(U,dor),e(U,_F),e(_F,_7e),e(_7e,cor),e(_F,mor),e(_F,PW),e(PW,gor),e(_F,hor),e(U,por),e(U,uF),e(uF,u7e),e(u7e,_or),e(uF,uor),e(uF,BW),e(BW,bor),e(uF,vor),e(U,For),e(U,bF),e(bF,b7e),e(b7e,Tor),e(bF,Mor),e(bF,IW),e(IW,Eor),e(bF,Cor),e(U,wor),e(U,vF),e(vF,v7e),e(v7e,Aor),e(vF,Lor),e(vF,NW),e(NW,yor),e(vF,xor),e(U,$or),e(U,FF),e(FF,F7e),e(F7e,kor),e(FF,Sor),e(FF,qW),e(qW,Ror),e(FF,Por),e(U,Bor),e(U,TF),e(TF,T7e),e(T7e,Ior),e(TF,Nor),e(TF,jW),e(jW,qor),e(TF,jor),e(U,Dor),e(U,MF),e(MF,M7e),e(M7e,Gor),e(MF,Oor),e(MF,DW),e(DW,Vor),e(MF,Xor),e(U,zor),e(U,EF),e(EF,E7e),e(E7e,Wor),e(EF,Qor),e(EF,GW),e(GW,Hor),e(EF,Uor),e(U,Jor),e(U,CF),e(CF,C7e),e(C7e,Yor),e(CF,Kor),e(CF,OW),e(OW,Zor),e(CF,err),e(U,orr),e(U,wF),e(wF,w7e),e(w7e,rrr),e(wF,trr),e(wF,VW),e(VW,arr),e(wF,nrr),e(no,srr),e(no,AF),e(AF,lrr),e(AF,A7e),e(A7e,irr),e(AF,drr),e(AF,L7e),e(L7e,crr),e(no,frr),M(LF,no,null),b(f,yze,u),b(f,_d,u),e(_d,yF),e(yF,y7e),M(P8,y7e,null),e(_d,mrr),e(_d,x7e),e(x7e,grr),b(f,xze,u),b(f,Go,u),M(B8,Go,null),e(Go,hrr),e(Go,ud),e(ud,prr),e(ud,XW),e(XW,_rr),e(ud,urr),e(ud,zW),e(zW,brr),e(ud,vrr),e(Go,Frr),e(Go,I8),e(I8,Trr),e(I8,$7e),e($7e,Mrr),e(I8,Err),e(Go,Crr),e(Go,ut),M(N8,ut,null),e(ut,wrr),e(ut,k7e),e(k7e,Arr),e(ut,Lrr),e(ut,bd),e(bd,yrr),e(bd,S7e),e(S7e,xrr),e(bd,$rr),e(bd,WW),e(WW,krr),e(bd,Srr),e(ut,Rrr),M(xF,ut,null),e(Go,Prr),e(Go,so),M(q8,so,null),e(so,Brr),e(so,R7e),e(R7e,Irr),e(so,Nrr),e(so,Wa),e(Wa,qrr),e(Wa,P7e),e(P7e,jrr),e(Wa,Drr),e(Wa,B7e),e(B7e,Grr),e(Wa,Orr),e(Wa,I7e),e(I7e,Vrr),e(Wa,Xrr),e(so,zrr),e(so,V),e(V,$F),e($F,N7e),e(N7e,Wrr),e($F,Qrr),e($F,QW),e(QW,Hrr),e($F,Urr),e(V,Jrr),e(V,kF),e(kF,q7e),e(q7e,Yrr),e(kF,Krr),e(kF,HW),e(HW,Zrr),e(kF,etr),e(V,otr),e(V,SF),e(SF,j7e),e(j7e,rtr),e(SF,ttr),e(SF,UW),e(UW,atr),e(SF,ntr),e(V,str),e(V,RF),e(RF,D7e),e(D7e,ltr),e(RF,itr),e(RF,JW),e(JW,dtr),e(RF,ctr),e(V,ftr),e(V,PF),e(PF,G7e),e(G7e,mtr),e(PF,gtr),e(PF,YW),e(YW,htr),e(PF,ptr),e(V,_tr),e(V,BF),e(BF,O7e),e(O7e,utr),e(BF,btr),e(BF,KW),e(KW,vtr),e(BF,Ftr),e(V,Ttr),e(V,IF),e(IF,V7e),e(V7e,Mtr),e(IF,Etr),e(IF,ZW),e(ZW,Ctr),e(IF,wtr),e(V,Atr),e(V,NF),e(NF,X7e),e(X7e,Ltr),e(NF,ytr),e(NF,eQ),e(eQ,xtr),e(NF,$tr),e(V,ktr),e(V,qF),e(qF,z7e),e(z7e,Str),e(qF,Rtr),e(qF,oQ),e(oQ,Ptr),e(qF,Btr),e(V,Itr),e(V,jF),e(jF,W7e),e(W7e,Ntr),e(jF,qtr),e(jF,rQ),e(rQ,jtr),e(jF,Dtr),e(V,Gtr),e(V,DF),e(DF,Q7e),e(Q7e,Otr),e(DF,Vtr),e(DF,tQ),e(tQ,Xtr),e(DF,ztr),e(V,Wtr),e(V,GF),e(GF,H7e),e(H7e,Qtr),e(GF,Htr),e(GF,aQ),e(aQ,Utr),e(GF,Jtr),e(V,Ytr),e(V,OF),e(OF,U7e),e(U7e,Ktr),e(OF,Ztr),e(OF,nQ),e(nQ,ear),e(OF,oar),e(V,rar),e(V,VF),e(VF,J7e),e(J7e,tar),e(VF,aar),e(VF,sQ),e(sQ,nar),e(VF,sar),e(V,lar),e(V,XF),e(XF,Y7e),e(Y7e,iar),e(XF,dar),e(XF,lQ),e(lQ,car),e(XF,far),e(V,mar),e(V,zF),e(zF,K7e),e(K7e,gar),e(zF,har),e(zF,iQ),e(iQ,par),e(zF,_ar),e(V,uar),e(V,WF),e(WF,Z7e),e(Z7e,bar),e(WF,Far),e(WF,dQ),e(dQ,Tar),e(WF,Mar),e(V,Ear),e(V,QF),e(QF,e2e),e(e2e,Car),e(QF,war),e(QF,cQ),e(cQ,Aar),e(QF,Lar),e(V,yar),e(V,HF),e(HF,o2e),e(o2e,xar),e(HF,$ar),e(HF,fQ),e(fQ,kar),e(HF,Sar),e(V,Rar),e(V,UF),e(UF,r2e),e(r2e,Par),e(UF,Bar),e(UF,mQ),e(mQ,Iar),e(UF,Nar),e(V,qar),e(V,JF),e(JF,t2e),e(t2e,jar),e(JF,Dar),e(JF,gQ),e(gQ,Gar),e(JF,Oar),e(V,Var),e(V,YF),e(YF,a2e),e(a2e,Xar),e(YF,zar),e(YF,hQ),e(hQ,War),e(YF,Qar),e(V,Har),e(V,KF),e(KF,n2e),e(n2e,Uar),e(KF,Jar),e(KF,pQ),e(pQ,Yar),e(KF,Kar),e(V,Zar),e(V,ZF),e(ZF,s2e),e(s2e,enr),e(ZF,onr),e(ZF,_Q),e(_Q,rnr),e(ZF,tnr),e(V,anr),e(V,e6),e(e6,l2e),e(l2e,nnr),e(e6,snr),e(e6,uQ),e(uQ,lnr),e(e6,inr),e(V,dnr),e(V,o6),e(o6,i2e),e(i2e,cnr),e(o6,fnr),e(o6,bQ),e(bQ,mnr),e(o6,gnr),e(V,hnr),e(V,r6),e(r6,d2e),e(d2e,pnr),e(r6,_nr),e(r6,vQ),e(vQ,unr),e(r6,bnr),e(V,vnr),e(V,t6),e(t6,c2e),e(c2e,Fnr),e(t6,Tnr),e(t6,FQ),e(FQ,Mnr),e(t6,Enr),e(V,Cnr),e(V,a6),e(a6,f2e),e(f2e,wnr),e(a6,Anr),e(a6,TQ),e(TQ,Lnr),e(a6,ynr),e(V,xnr),e(V,n6),e(n6,m2e),e(m2e,$nr),e(n6,knr),e(n6,MQ),e(MQ,Snr),e(n6,Rnr),e(V,Pnr),e(V,s6),e(s6,g2e),e(g2e,Bnr),e(s6,Inr),e(s6,EQ),e(EQ,Nnr),e(s6,qnr),e(V,jnr),e(V,l6),e(l6,h2e),e(h2e,Dnr),e(l6,Gnr),e(l6,CQ),e(CQ,Onr),e(l6,Vnr),e(V,Xnr),e(V,i6),e(i6,p2e),e(p2e,znr),e(i6,Wnr),e(i6,wQ),e(wQ,Qnr),e(i6,Hnr),e(V,Unr),e(V,d6),e(d6,_2e),e(_2e,Jnr),e(d6,Ynr),e(d6,AQ),e(AQ,Knr),e(d6,Znr),e(V,esr),e(V,c6),e(c6,u2e),e(u2e,osr),e(c6,rsr),e(c6,LQ),e(LQ,tsr),e(c6,asr),e(V,nsr),e(V,f6),e(f6,b2e),e(b2e,ssr),e(f6,lsr),e(f6,yQ),e(yQ,isr),e(f6,dsr),e(V,csr),e(V,m6),e(m6,v2e),e(v2e,fsr),e(m6,msr),e(m6,xQ),e(xQ,gsr),e(m6,hsr),e(V,psr),e(V,g6),e(g6,F2e),e(F2e,_sr),e(g6,usr),e(g6,$Q),e($Q,bsr),e(g6,vsr),e(V,Fsr),e(V,h6),e(h6,T2e),e(T2e,Tsr),e(h6,Msr),e(h6,kQ),e(kQ,Esr),e(h6,Csr),e(V,wsr),e(V,p6),e(p6,M2e),e(M2e,Asr),e(p6,Lsr),e(p6,SQ),e(SQ,ysr),e(p6,xsr),e(V,$sr),e(V,_6),e(_6,E2e),e(E2e,ksr),e(_6,Ssr),e(_6,RQ),e(RQ,Rsr),e(_6,Psr),e(V,Bsr),e(V,u6),e(u6,C2e),e(C2e,Isr),e(u6,Nsr),e(u6,PQ),e(PQ,qsr),e(u6,jsr),e(so,Dsr),e(so,b6),e(b6,Gsr),e(b6,w2e),e(w2e,Osr),e(b6,Vsr),e(b6,A2e),e(A2e,Xsr),e(so,zsr),M(v6,so,null),b(f,$ze,u),b(f,vd,u),e(vd,F6),e(F6,L2e),M(j8,L2e,null),e(vd,Wsr),e(vd,y2e),e(y2e,Qsr),b(f,kze,u),b(f,Oo,u),M(D8,Oo,null),e(Oo,Hsr),e(Oo,Fd),e(Fd,Usr),e(Fd,BQ),e(BQ,Jsr),e(Fd,Ysr),e(Fd,IQ),e(IQ,Ksr),e(Fd,Zsr),e(Oo,elr),e(Oo,G8),e(G8,olr),e(G8,x2e),e(x2e,rlr),e(G8,tlr),e(Oo,alr),e(Oo,bt),M(O8,bt,null),e(bt,nlr),e(bt,$2e),e($2e,slr),e(bt,llr),e(bt,Td),e(Td,ilr),e(Td,k2e),e(k2e,dlr),e(Td,clr),e(Td,NQ),e(NQ,flr),e(Td,mlr),e(bt,glr),M(T6,bt,null),e(Oo,hlr),e(Oo,lo),M(V8,lo,null),e(lo,plr),e(lo,S2e),e(S2e,_lr),e(lo,ulr),e(lo,Qa),e(Qa,blr),e(Qa,R2e),e(R2e,vlr),e(Qa,Flr),e(Qa,P2e),e(P2e,Tlr),e(Qa,Mlr),e(Qa,B2e),e(B2e,Elr),e(Qa,Clr),e(lo,wlr),e(lo,I2e),e(I2e,M6),e(M6,N2e),e(N2e,Alr),e(M6,Llr),e(M6,qQ),e(qQ,ylr),e(M6,xlr),e(lo,$lr),e(lo,E6),e(E6,klr),e(E6,q2e),e(q2e,Slr),e(E6,Rlr),e(E6,j2e),e(j2e,Plr),e(lo,Blr),M(C6,lo,null),b(f,Sze,u),b(f,Md,u),e(Md,w6),e(w6,D2e),M(X8,D2e,null),e(Md,Ilr),e(Md,G2e),e(G2e,Nlr),b(f,Rze,u),b(f,Vo,u),M(z8,Vo,null),e(Vo,qlr),e(Vo,Ed),e(Ed,jlr),e(Ed,jQ),e(jQ,Dlr),e(Ed,Glr),e(Ed,DQ),e(DQ,Olr),e(Ed,Vlr),e(Vo,Xlr),e(Vo,W8),e(W8,zlr),e(W8,O2e),e(O2e,Wlr),e(W8,Qlr),e(Vo,Hlr),e(Vo,vt),M(Q8,vt,null),e(vt,Ulr),e(vt,V2e),e(V2e,Jlr),e(vt,Ylr),e(vt,Cd),e(Cd,Klr),e(Cd,X2e),e(X2e,Zlr),e(Cd,eir),e(Cd,GQ),e(GQ,oir),e(Cd,rir),e(vt,tir),M(A6,vt,null),e(Vo,air),e(Vo,io),M(H8,io,null),e(io,nir),e(io,z2e),e(z2e,sir),e(io,lir),e(io,Ha),e(Ha,iir),e(Ha,W2e),e(W2e,dir),e(Ha,cir),e(Ha,Q2e),e(Q2e,fir),e(Ha,mir),e(Ha,H2e),e(H2e,gir),e(Ha,hir),e(io,pir),e(io,ve),e(ve,L6),e(L6,U2e),e(U2e,_ir),e(L6,uir),e(L6,OQ),e(OQ,bir),e(L6,vir),e(ve,Fir),e(ve,y6),e(y6,J2e),e(J2e,Tir),e(y6,Mir),e(y6,VQ),e(VQ,Eir),e(y6,Cir),e(ve,wir),e(ve,x6),e(x6,Y2e),e(Y2e,Air),e(x6,Lir),e(x6,XQ),e(XQ,yir),e(x6,xir),e(ve,$ir),e(ve,$6),e($6,K2e),e(K2e,kir),e($6,Sir),e($6,zQ),e(zQ,Rir),e($6,Pir),e(ve,Bir),e(ve,Ys),e(Ys,Z2e),e(Z2e,Iir),e(Ys,Nir),e(Ys,WQ),e(WQ,qir),e(Ys,jir),e(Ys,QQ),e(QQ,Dir),e(Ys,Gir),e(ve,Oir),e(ve,k6),e(k6,ebe),e(ebe,Vir),e(k6,Xir),e(k6,HQ),e(HQ,zir),e(k6,Wir),e(ve,Qir),e(ve,Ks),e(Ks,obe),e(obe,Hir),e(Ks,Uir),e(Ks,UQ),e(UQ,Jir),e(Ks,Yir),e(Ks,JQ),e(JQ,Kir),e(Ks,Zir),e(ve,edr),e(ve,S6),e(S6,rbe),e(rbe,odr),e(S6,rdr),e(S6,YQ),e(YQ,tdr),e(S6,adr),e(ve,ndr),e(ve,Ft),e(Ft,tbe),e(tbe,sdr),e(Ft,ldr),e(Ft,KQ),e(KQ,idr),e(Ft,ddr),e(Ft,ZQ),e(ZQ,cdr),e(Ft,fdr),e(Ft,eH),e(eH,mdr),e(Ft,gdr),e(ve,hdr),e(ve,R6),e(R6,abe),e(abe,pdr),e(R6,_dr),e(R6,oH),e(oH,udr),e(R6,bdr),e(ve,vdr),e(ve,P6),e(P6,nbe),e(nbe,Fdr),e(P6,Tdr),e(P6,rH),e(rH,Mdr),e(P6,Edr),e(ve,Cdr),e(ve,B6),e(B6,sbe),e(sbe,wdr),e(B6,Adr),e(B6,tH),e(tH,Ldr),e(B6,ydr),e(ve,xdr),e(ve,I6),e(I6,lbe),e(lbe,$dr),e(I6,kdr),e(I6,aH),e(aH,Sdr),e(I6,Rdr),e(ve,Pdr),e(ve,N6),e(N6,ibe),e(ibe,Bdr),e(N6,Idr),e(N6,nH),e(nH,Ndr),e(N6,qdr),e(ve,jdr),e(ve,q6),e(q6,dbe),e(dbe,Ddr),e(q6,Gdr),e(q6,sH),e(sH,Odr),e(q6,Vdr),e(ve,Xdr),e(ve,j6),e(j6,cbe),e(cbe,zdr),e(j6,Wdr),e(j6,lH),e(lH,Qdr),e(j6,Hdr),e(io,Udr),e(io,D6),e(D6,Jdr),e(D6,fbe),e(fbe,Ydr),e(D6,Kdr),e(D6,mbe),e(mbe,Zdr),e(io,ecr),M(G6,io,null),b(f,Pze,u),b(f,wd,u),e(wd,O6),e(O6,gbe),M(U8,gbe,null),e(wd,ocr),e(wd,hbe),e(hbe,rcr),b(f,Bze,u),b(f,Xo,u),M(J8,Xo,null),e(Xo,tcr),e(Xo,Ad),e(Ad,acr),e(Ad,iH),e(iH,ncr),e(Ad,scr),e(Ad,dH),e(dH,lcr),e(Ad,icr),e(Xo,dcr),e(Xo,Y8),e(Y8,ccr),e(Y8,pbe),e(pbe,fcr),e(Y8,mcr),e(Xo,gcr),e(Xo,Tt),M(K8,Tt,null),e(Tt,hcr),e(Tt,_be),e(_be,pcr),e(Tt,_cr),e(Tt,Ld),e(Ld,ucr),e(Ld,ube),e(ube,bcr),e(Ld,vcr),e(Ld,cH),e(cH,Fcr),e(Ld,Tcr),e(Tt,Mcr),M(V6,Tt,null),e(Xo,Ecr),e(Xo,co),M(Z8,co,null),e(co,Ccr),e(co,bbe),e(bbe,wcr),e(co,Acr),e(co,Ua),e(Ua,Lcr),e(Ua,vbe),e(vbe,ycr),e(Ua,xcr),e(Ua,Fbe),e(Fbe,$cr),e(Ua,kcr),e(Ua,Tbe),e(Tbe,Scr),e(Ua,Rcr),e(co,Pcr),e(co,Mbe),e(Mbe,X6),e(X6,Ebe),e(Ebe,Bcr),e(X6,Icr),e(X6,fH),e(fH,Ncr),e(X6,qcr),e(co,jcr),e(co,z6),e(z6,Dcr),e(z6,Cbe),e(Cbe,Gcr),e(z6,Ocr),e(z6,wbe),e(wbe,Vcr),e(co,Xcr),M(W6,co,null),b(f,Ize,u),b(f,yd,u),e(yd,Q6),e(Q6,Abe),M(e9,Abe,null),e(yd,zcr),e(yd,Lbe),e(Lbe,Wcr),b(f,Nze,u),b(f,zo,u),M(o9,zo,null),e(zo,Qcr),e(zo,xd),e(xd,Hcr),e(xd,mH),e(mH,Ucr),e(xd,Jcr),e(xd,gH),e(gH,Ycr),e(xd,Kcr),e(zo,Zcr),e(zo,r9),e(r9,efr),e(r9,ybe),e(ybe,ofr),e(r9,rfr),e(zo,tfr),e(zo,Mt),M(t9,Mt,null),e(Mt,afr),e(Mt,xbe),e(xbe,nfr),e(Mt,sfr),e(Mt,$d),e($d,lfr),e($d,$be),e($be,ifr),e($d,dfr),e($d,hH),e(hH,cfr),e($d,ffr),e(Mt,mfr),M(H6,Mt,null),e(zo,gfr),e(zo,fo),M(a9,fo,null),e(fo,hfr),e(fo,kbe),e(kbe,pfr),e(fo,_fr),e(fo,Ja),e(Ja,ufr),e(Ja,Sbe),e(Sbe,bfr),e(Ja,vfr),e(Ja,Rbe),e(Rbe,Ffr),e(Ja,Tfr),e(Ja,Pbe),e(Pbe,Mfr),e(Ja,Efr),e(fo,Cfr),e(fo,Bbe),e(Bbe,U6),e(U6,Ibe),e(Ibe,wfr),e(U6,Afr),e(U6,pH),e(pH,Lfr),e(U6,yfr),e(fo,xfr),e(fo,J6),e(J6,$fr),e(J6,Nbe),e(Nbe,kfr),e(J6,Sfr),e(J6,qbe),e(qbe,Rfr),e(fo,Pfr),M(Y6,fo,null),b(f,qze,u),b(f,kd,u),e(kd,K6),e(K6,jbe),M(n9,jbe,null),e(kd,Bfr),e(kd,Dbe),e(Dbe,Ifr),b(f,jze,u),b(f,Wo,u),M(s9,Wo,null),e(Wo,Nfr),e(Wo,Sd),e(Sd,qfr),e(Sd,_H),e(_H,jfr),e(Sd,Dfr),e(Sd,uH),e(uH,Gfr),e(Sd,Ofr),e(Wo,Vfr),e(Wo,l9),e(l9,Xfr),e(l9,Gbe),e(Gbe,zfr),e(l9,Wfr),e(Wo,Qfr),e(Wo,Et),M(i9,Et,null),e(Et,Hfr),e(Et,Obe),e(Obe,Ufr),e(Et,Jfr),e(Et,Rd),e(Rd,Yfr),e(Rd,Vbe),e(Vbe,Kfr),e(Rd,Zfr),e(Rd,bH),e(bH,emr),e(Rd,omr),e(Et,rmr),M(Z6,Et,null),e(Wo,tmr),e(Wo,mo),M(d9,mo,null),e(mo,amr),e(mo,Xbe),e(Xbe,nmr),e(mo,smr),e(mo,Ya),e(Ya,lmr),e(Ya,zbe),e(zbe,imr),e(Ya,dmr),e(Ya,Wbe),e(Wbe,cmr),e(Ya,fmr),e(Ya,Qbe),e(Qbe,mmr),e(Ya,gmr),e(mo,hmr),e(mo,Pe),e(Pe,eT),e(eT,Hbe),e(Hbe,pmr),e(eT,_mr),e(eT,vH),e(vH,umr),e(eT,bmr),e(Pe,vmr),e(Pe,oT),e(oT,Ube),e(Ube,Fmr),e(oT,Tmr),e(oT,FH),e(FH,Mmr),e(oT,Emr),e(Pe,Cmr),e(Pe,rT),e(rT,Jbe),e(Jbe,wmr),e(rT,Amr),e(rT,TH),e(TH,Lmr),e(rT,ymr),e(Pe,xmr),e(Pe,tT),e(tT,Ybe),e(Ybe,$mr),e(tT,kmr),e(tT,MH),e(MH,Smr),e(tT,Rmr),e(Pe,Pmr),e(Pe,aT),e(aT,Kbe),e(Kbe,Bmr),e(aT,Imr),e(aT,EH),e(EH,Nmr),e(aT,qmr),e(Pe,jmr),e(Pe,nT),e(nT,Zbe),e(Zbe,Dmr),e(nT,Gmr),e(nT,CH),e(CH,Omr),e(nT,Vmr),e(Pe,Xmr),e(Pe,sT),e(sT,eve),e(eve,zmr),e(sT,Wmr),e(sT,wH),e(wH,Qmr),e(sT,Hmr),e(Pe,Umr),e(Pe,lT),e(lT,ove),e(ove,Jmr),e(lT,Ymr),e(lT,AH),e(AH,Kmr),e(lT,Zmr),e(Pe,egr),e(Pe,iT),e(iT,rve),e(rve,ogr),e(iT,rgr),e(iT,LH),e(LH,tgr),e(iT,agr),e(mo,ngr),e(mo,dT),e(dT,sgr),e(dT,tve),e(tve,lgr),e(dT,igr),e(dT,ave),e(ave,dgr),e(mo,cgr),M(cT,mo,null),b(f,Dze,u),b(f,Pd,u),e(Pd,fT),e(fT,nve),M(c9,nve,null),e(Pd,fgr),e(Pd,sve),e(sve,mgr),b(f,Gze,u),b(f,Qo,u),M(f9,Qo,null),e(Qo,ggr),e(Qo,Bd),e(Bd,hgr),e(Bd,yH),e(yH,pgr),e(Bd,_gr),e(Bd,xH),e(xH,ugr),e(Bd,bgr),e(Qo,vgr),e(Qo,m9),e(m9,Fgr),e(m9,lve),e(lve,Tgr),e(m9,Mgr),e(Qo,Egr),e(Qo,Ct),M(g9,Ct,null),e(Ct,Cgr),e(Ct,ive),e(ive,wgr),e(Ct,Agr),e(Ct,Id),e(Id,Lgr),e(Id,dve),e(dve,ygr),e(Id,xgr),e(Id,$H),e($H,$gr),e(Id,kgr),e(Ct,Sgr),M(mT,Ct,null),e(Qo,Rgr),e(Qo,go),M(h9,go,null),e(go,Pgr),e(go,cve),e(cve,Bgr),e(go,Igr),e(go,Ka),e(Ka,Ngr),e(Ka,fve),e(fve,qgr),e(Ka,jgr),e(Ka,mve),e(mve,Dgr),e(Ka,Ggr),e(Ka,gve),e(gve,Ogr),e(Ka,Vgr),e(go,Xgr),e(go,Ho),e(Ho,gT),e(gT,hve),e(hve,zgr),e(gT,Wgr),e(gT,kH),e(kH,Qgr),e(gT,Hgr),e(Ho,Ugr),e(Ho,hT),e(hT,pve),e(pve,Jgr),e(hT,Ygr),e(hT,SH),e(SH,Kgr),e(hT,Zgr),e(Ho,ehr),e(Ho,pT),e(pT,_ve),e(_ve,ohr),e(pT,rhr),e(pT,RH),e(RH,thr),e(pT,ahr),e(Ho,nhr),e(Ho,_T),e(_T,uve),e(uve,shr),e(_T,lhr),e(_T,PH),e(PH,ihr),e(_T,dhr),e(Ho,chr),e(Ho,uT),e(uT,bve),e(bve,fhr),e(uT,mhr),e(uT,BH),e(BH,ghr),e(uT,hhr),e(Ho,phr),e(Ho,bT),e(bT,vve),e(vve,_hr),e(bT,uhr),e(bT,IH),e(IH,bhr),e(bT,vhr),e(go,Fhr),e(go,vT),e(vT,Thr),e(vT,Fve),e(Fve,Mhr),e(vT,Ehr),e(vT,Tve),e(Tve,Chr),e(go,whr),M(FT,go,null),b(f,Oze,u),b(f,Nd,u),e(Nd,TT),e(TT,Mve),M(p9,Mve,null),e(Nd,Ahr),e(Nd,Eve),e(Eve,Lhr),b(f,Vze,u),b(f,Uo,u),M(_9,Uo,null),e(Uo,yhr),e(Uo,qd),e(qd,xhr),e(qd,NH),e(NH,$hr),e(qd,khr),e(qd,qH),e(qH,Shr),e(qd,Rhr),e(Uo,Phr),e(Uo,u9),e(u9,Bhr),e(u9,Cve),e(Cve,Ihr),e(u9,Nhr),e(Uo,qhr),e(Uo,wt),M(b9,wt,null),e(wt,jhr),e(wt,wve),e(wve,Dhr),e(wt,Ghr),e(wt,jd),e(jd,Ohr),e(jd,Ave),e(Ave,Vhr),e(jd,Xhr),e(jd,jH),e(jH,zhr),e(jd,Whr),e(wt,Qhr),M(MT,wt,null),e(Uo,Hhr),e(Uo,ho),M(v9,ho,null),e(ho,Uhr),e(ho,Lve),e(Lve,Jhr),e(ho,Yhr),e(ho,Za),e(Za,Khr),e(Za,yve),e(yve,Zhr),e(Za,epr),e(Za,xve),e(xve,opr),e(Za,rpr),e(Za,$ve),e($ve,tpr),e(Za,apr),e(ho,npr),e(ho,Le),e(Le,ET),e(ET,kve),e(kve,spr),e(ET,lpr),e(ET,DH),e(DH,ipr),e(ET,dpr),e(Le,cpr),e(Le,CT),e(CT,Sve),e(Sve,fpr),e(CT,mpr),e(CT,GH),e(GH,gpr),e(CT,hpr),e(Le,ppr),e(Le,wT),e(wT,Rve),e(Rve,_pr),e(wT,upr),e(wT,OH),e(OH,bpr),e(wT,vpr),e(Le,Fpr),e(Le,AT),e(AT,Pve),e(Pve,Tpr),e(AT,Mpr),e(AT,VH),e(VH,Epr),e(AT,Cpr),e(Le,wpr),e(Le,LT),e(LT,Bve),e(Bve,Apr),e(LT,Lpr),e(LT,XH),e(XH,ypr),e(LT,xpr),e(Le,$pr),e(Le,yT),e(yT,Ive),e(Ive,kpr),e(yT,Spr),e(yT,zH),e(zH,Rpr),e(yT,Ppr),e(Le,Bpr),e(Le,xT),e(xT,Nve),e(Nve,Ipr),e(xT,Npr),e(xT,WH),e(WH,qpr),e(xT,jpr),e(Le,Dpr),e(Le,$T),e($T,qve),e(qve,Gpr),e($T,Opr),e($T,QH),e(QH,Vpr),e($T,Xpr),e(Le,zpr),e(Le,kT),e(kT,jve),e(jve,Wpr),e(kT,Qpr),e(kT,HH),e(HH,Hpr),e(kT,Upr),e(Le,Jpr),e(Le,ST),e(ST,Dve),e(Dve,Ypr),e(ST,Kpr),e(ST,UH),e(UH,Zpr),e(ST,e_r),e(ho,o_r),e(ho,RT),e(RT,r_r),e(RT,Gve),e(Gve,t_r),e(RT,a_r),e(RT,Ove),e(Ove,n_r),e(ho,s_r),M(PT,ho,null),b(f,Xze,u),b(f,Dd,u),e(Dd,BT),e(BT,Vve),M(F9,Vve,null),e(Dd,l_r),e(Dd,Xve),e(Xve,i_r),b(f,zze,u),b(f,Jo,u),M(T9,Jo,null),e(Jo,d_r),e(Jo,Gd),e(Gd,c_r),e(Gd,JH),e(JH,f_r),e(Gd,m_r),e(Gd,YH),e(YH,g_r),e(Gd,h_r),e(Jo,p_r),e(Jo,M9),e(M9,__r),e(M9,zve),e(zve,u_r),e(M9,b_r),e(Jo,v_r),e(Jo,At),M(E9,At,null),e(At,F_r),e(At,Wve),e(Wve,T_r),e(At,M_r),e(At,Od),e(Od,E_r),e(Od,Qve),e(Qve,C_r),e(Od,w_r),e(Od,KH),e(KH,A_r),e(Od,L_r),e(At,y_r),M(IT,At,null),e(Jo,x_r),e(Jo,po),M(C9,po,null),e(po,$_r),e(po,Hve),e(Hve,k_r),e(po,S_r),e(po,en),e(en,R_r),e(en,Uve),e(Uve,P_r),e(en,B_r),e(en,Jve),e(Jve,I_r),e(en,N_r),e(en,Yve),e(Yve,q_r),e(en,j_r),e(po,D_r),e(po,w9),e(w9,NT),e(NT,Kve),e(Kve,G_r),e(NT,O_r),e(NT,ZH),e(ZH,V_r),e(NT,X_r),e(w9,z_r),e(w9,qT),e(qT,Zve),e(Zve,W_r),e(qT,Q_r),e(qT,eU),e(eU,H_r),e(qT,U_r),e(po,J_r),e(po,jT),e(jT,Y_r),e(jT,eFe),e(eFe,K_r),e(jT,Z_r),e(jT,oFe),e(oFe,eur),e(po,our),M(DT,po,null),b(f,Wze,u),b(f,Vd,u),e(Vd,GT),e(GT,rFe),M(A9,rFe,null),e(Vd,rur),e(Vd,tFe),e(tFe,tur),b(f,Qze,u),b(f,Yo,u),M(L9,Yo,null),e(Yo,aur),e(Yo,Xd),e(Xd,nur),e(Xd,oU),e(oU,sur),e(Xd,lur),e(Xd,rU),e(rU,iur),e(Xd,dur),e(Yo,cur),e(Yo,y9),e(y9,fur),e(y9,aFe),e(aFe,mur),e(y9,gur),e(Yo,hur),e(Yo,Lt),M(x9,Lt,null),e(Lt,pur),e(Lt,nFe),e(nFe,_ur),e(Lt,uur),e(Lt,zd),e(zd,bur),e(zd,sFe),e(sFe,vur),e(zd,Fur),e(zd,tU),e(tU,Tur),e(zd,Mur),e(Lt,Eur),M(OT,Lt,null),e(Yo,Cur),e(Yo,_o),M($9,_o,null),e(_o,wur),e(_o,lFe),e(lFe,Aur),e(_o,Lur),e(_o,on),e(on,yur),e(on,iFe),e(iFe,xur),e(on,$ur),e(on,dFe),e(dFe,kur),e(on,Sur),e(on,cFe),e(cFe,Rur),e(on,Pur),e(_o,Bur),e(_o,tt),e(tt,VT),e(VT,fFe),e(fFe,Iur),e(VT,Nur),e(VT,aU),e(aU,qur),e(VT,jur),e(tt,Dur),e(tt,XT),e(XT,mFe),e(mFe,Gur),e(XT,Our),e(XT,nU),e(nU,Vur),e(XT,Xur),e(tt,zur),e(tt,zT),e(zT,gFe),e(gFe,Wur),e(zT,Qur),e(zT,sU),e(sU,Hur),e(zT,Uur),e(tt,Jur),e(tt,WT),e(WT,hFe),e(hFe,Yur),e(WT,Kur),e(WT,lU),e(lU,Zur),e(WT,e1r),e(tt,o1r),e(tt,QT),e(QT,pFe),e(pFe,r1r),e(QT,t1r),e(QT,iU),e(iU,a1r),e(QT,n1r),e(_o,s1r),e(_o,HT),e(HT,l1r),e(HT,_Fe),e(_Fe,i1r),e(HT,d1r),e(HT,uFe),e(uFe,c1r),e(_o,f1r),M(UT,_o,null),b(f,Hze,u),b(f,Wd,u),e(Wd,JT),e(JT,bFe),M(k9,bFe,null),e(Wd,m1r),e(Wd,vFe),e(vFe,g1r),b(f,Uze,u),b(f,Ko,u),M(S9,Ko,null),e(Ko,h1r),e(Ko,Qd),e(Qd,p1r),e(Qd,dU),e(dU,_1r),e(Qd,u1r),e(Qd,cU),e(cU,b1r),e(Qd,v1r),e(Ko,F1r),e(Ko,R9),e(R9,T1r),e(R9,FFe),e(FFe,M1r),e(R9,E1r),e(Ko,C1r),e(Ko,yt),M(P9,yt,null),e(yt,w1r),e(yt,TFe),e(TFe,A1r),e(yt,L1r),e(yt,Hd),e(Hd,y1r),e(Hd,MFe),e(MFe,x1r),e(Hd,$1r),e(Hd,fU),e(fU,k1r),e(Hd,S1r),e(yt,R1r),M(YT,yt,null),e(Ko,P1r),e(Ko,uo),M(B9,uo,null),e(uo,B1r),e(uo,EFe),e(EFe,I1r),e(uo,N1r),e(uo,rn),e(rn,q1r),e(rn,CFe),e(CFe,j1r),e(rn,D1r),e(rn,wFe),e(wFe,G1r),e(rn,O1r),e(rn,AFe),e(AFe,V1r),e(rn,X1r),e(uo,z1r),e(uo,Ud),e(Ud,KT),e(KT,LFe),e(LFe,W1r),e(KT,Q1r),e(KT,mU),e(mU,H1r),e(KT,U1r),e(Ud,J1r),e(Ud,ZT),e(ZT,yFe),e(yFe,Y1r),e(ZT,K1r),e(ZT,gU),e(gU,Z1r),e(ZT,e7r),e(Ud,o7r),e(Ud,eM),e(eM,xFe),e(xFe,r7r),e(eM,t7r),e(eM,hU),e(hU,a7r),e(eM,n7r),e(uo,s7r),e(uo,oM),e(oM,l7r),e(oM,$Fe),e($Fe,i7r),e(oM,d7r),e(oM,kFe),e(kFe,c7r),e(uo,f7r),M(rM,uo,null),b(f,Jze,u),b(f,Jd,u),e(Jd,tM),e(tM,SFe),M(I9,SFe,null),e(Jd,m7r),e(Jd,RFe),e(RFe,g7r),b(f,Yze,u),b(f,Zo,u),M(N9,Zo,null),e(Zo,h7r),e(Zo,Yd),e(Yd,p7r),e(Yd,pU),e(pU,_7r),e(Yd,u7r),e(Yd,_U),e(_U,b7r),e(Yd,v7r),e(Zo,F7r),e(Zo,q9),e(q9,T7r),e(q9,PFe),e(PFe,M7r),e(q9,E7r),e(Zo,C7r),e(Zo,xt),M(j9,xt,null),e(xt,w7r),e(xt,BFe),e(BFe,A7r),e(xt,L7r),e(xt,Kd),e(Kd,y7r),e(Kd,IFe),e(IFe,x7r),e(Kd,$7r),e(Kd,uU),e(uU,k7r),e(Kd,S7r),e(xt,R7r),M(aM,xt,null),e(Zo,P7r),e(Zo,bo),M(D9,bo,null),e(bo,B7r),e(bo,NFe),e(NFe,I7r),e(bo,N7r),e(bo,tn),e(tn,q7r),e(tn,qFe),e(qFe,j7r),e(tn,D7r),e(tn,jFe),e(jFe,G7r),e(tn,O7r),e(tn,DFe),e(DFe,V7r),e(tn,X7r),e(bo,z7r),e(bo,G9),e(G9,nM),e(nM,GFe),e(GFe,W7r),e(nM,Q7r),e(nM,bU),e(bU,H7r),e(nM,U7r),e(G9,J7r),e(G9,sM),e(sM,OFe),e(OFe,Y7r),e(sM,K7r),e(sM,vU),e(vU,Z7r),e(sM,e2r),e(bo,o2r),e(bo,lM),e(lM,r2r),e(lM,VFe),e(VFe,t2r),e(lM,a2r),e(lM,XFe),e(XFe,n2r),e(bo,s2r),M(iM,bo,null),b(f,Kze,u),b(f,Zd,u),e(Zd,dM),e(dM,zFe),M(O9,zFe,null),e(Zd,l2r),e(Zd,WFe),e(WFe,i2r),b(f,Zze,u),b(f,er,u),M(V9,er,null),e(er,d2r),e(er,ec),e(ec,c2r),e(ec,FU),e(FU,f2r),e(ec,m2r),e(ec,TU),e(TU,g2r),e(ec,h2r),e(er,p2r),e(er,X9),e(X9,_2r),e(X9,QFe),e(QFe,u2r),e(X9,b2r),e(er,v2r),e(er,$t),M(z9,$t,null),e($t,F2r),e($t,HFe),e(HFe,T2r),e($t,M2r),e($t,oc),e(oc,E2r),e(oc,UFe),e(UFe,C2r),e(oc,w2r),e(oc,MU),e(MU,A2r),e(oc,L2r),e($t,y2r),M(cM,$t,null),e(er,x2r),e(er,vo),M(W9,vo,null),e(vo,$2r),e(vo,JFe),e(JFe,k2r),e(vo,S2r),e(vo,an),e(an,R2r),e(an,YFe),e(YFe,P2r),e(an,B2r),e(an,KFe),e(KFe,I2r),e(an,N2r),e(an,ZFe),e(ZFe,q2r),e(an,j2r),e(vo,D2r),e(vo,e6e),e(e6e,fM),e(fM,o6e),e(o6e,G2r),e(fM,O2r),e(fM,EU),e(EU,V2r),e(fM,X2r),e(vo,z2r),e(vo,mM),e(mM,W2r),e(mM,r6e),e(r6e,Q2r),e(mM,H2r),e(mM,t6e),e(t6e,U2r),e(vo,J2r),M(gM,vo,null),b(f,eWe,u),b(f,rc,u),e(rc,hM),e(hM,a6e),M(Q9,a6e,null),e(rc,Y2r),e(rc,n6e),e(n6e,K2r),b(f,oWe,u),b(f,or,u),M(H9,or,null),e(or,Z2r),e(or,tc),e(tc,ebr),e(tc,CU),e(CU,obr),e(tc,rbr),e(tc,wU),e(wU,tbr),e(tc,abr),e(or,nbr),e(or,U9),e(U9,sbr),e(U9,s6e),e(s6e,lbr),e(U9,ibr),e(or,dbr),e(or,kt),M(J9,kt,null),e(kt,cbr),e(kt,l6e),e(l6e,fbr),e(kt,mbr),e(kt,ac),e(ac,gbr),e(ac,i6e),e(i6e,hbr),e(ac,pbr),e(ac,AU),e(AU,_br),e(ac,ubr),e(kt,bbr),M(pM,kt,null),e(or,vbr),e(or,Fo),M(Y9,Fo,null),e(Fo,Fbr),e(Fo,d6e),e(d6e,Tbr),e(Fo,Mbr),e(Fo,nn),e(nn,Ebr),e(nn,c6e),e(c6e,Cbr),e(nn,wbr),e(nn,f6e),e(f6e,Abr),e(nn,Lbr),e(nn,m6e),e(m6e,ybr),e(nn,xbr),e(Fo,$br),e(Fo,at),e(at,_M),e(_M,g6e),e(g6e,kbr),e(_M,Sbr),e(_M,LU),e(LU,Rbr),e(_M,Pbr),e(at,Bbr),e(at,uM),e(uM,h6e),e(h6e,Ibr),e(uM,Nbr),e(uM,yU),e(yU,qbr),e(uM,jbr),e(at,Dbr),e(at,bM),e(bM,p6e),e(p6e,Gbr),e(bM,Obr),e(bM,xU),e(xU,Vbr),e(bM,Xbr),e(at,zbr),e(at,vM),e(vM,_6e),e(_6e,Wbr),e(vM,Qbr),e(vM,$U),e($U,Hbr),e(vM,Ubr),e(at,Jbr),e(at,FM),e(FM,u6e),e(u6e,Ybr),e(FM,Kbr),e(FM,kU),e(kU,Zbr),e(FM,evr),e(Fo,ovr),e(Fo,TM),e(TM,rvr),e(TM,b6e),e(b6e,tvr),e(TM,avr),e(TM,v6e),e(v6e,nvr),e(Fo,svr),M(MM,Fo,null),b(f,rWe,u),b(f,nc,u),e(nc,EM),e(EM,F6e),M(K9,F6e,null),e(nc,lvr),e(nc,T6e),e(T6e,ivr),b(f,tWe,u),b(f,rr,u),M(Z9,rr,null),e(rr,dvr),e(rr,sc),e(sc,cvr),e(sc,SU),e(SU,fvr),e(sc,mvr),e(sc,RU),e(RU,gvr),e(sc,hvr),e(rr,pvr),e(rr,ex),e(ex,_vr),e(ex,M6e),e(M6e,uvr),e(ex,bvr),e(rr,vvr),e(rr,St),M(ox,St,null),e(St,Fvr),e(St,E6e),e(E6e,Tvr),e(St,Mvr),e(St,lc),e(lc,Evr),e(lc,C6e),e(C6e,Cvr),e(lc,wvr),e(lc,PU),e(PU,Avr),e(lc,Lvr),e(St,yvr),M(CM,St,null),e(rr,xvr),e(rr,To),M(rx,To,null),e(To,$vr),e(To,w6e),e(w6e,kvr),e(To,Svr),e(To,sn),e(sn,Rvr),e(sn,A6e),e(A6e,Pvr),e(sn,Bvr),e(sn,L6e),e(L6e,Ivr),e(sn,Nvr),e(sn,y6e),e(y6e,qvr),e(sn,jvr),e(To,Dvr),e(To,x6e),e(x6e,wM),e(wM,$6e),e($6e,Gvr),e(wM,Ovr),e(wM,BU),e(BU,Vvr),e(wM,Xvr),e(To,zvr),e(To,AM),e(AM,Wvr),e(AM,k6e),e(k6e,Qvr),e(AM,Hvr),e(AM,S6e),e(S6e,Uvr),e(To,Jvr),M(LM,To,null),b(f,aWe,u),b(f,ic,u),e(ic,yM),e(yM,R6e),M(tx,R6e,null),e(ic,Yvr),e(ic,P6e),e(P6e,Kvr),b(f,nWe,u),b(f,tr,u),M(ax,tr,null),e(tr,Zvr),e(tr,dc),e(dc,eFr),e(dc,IU),e(IU,oFr),e(dc,rFr),e(dc,NU),e(NU,tFr),e(dc,aFr),e(tr,nFr),e(tr,nx),e(nx,sFr),e(nx,B6e),e(B6e,lFr),e(nx,iFr),e(tr,dFr),e(tr,Rt),M(sx,Rt,null),e(Rt,cFr),e(Rt,I6e),e(I6e,fFr),e(Rt,mFr),e(Rt,cc),e(cc,gFr),e(cc,N6e),e(N6e,hFr),e(cc,pFr),e(cc,qU),e(qU,_Fr),e(cc,uFr),e(Rt,bFr),M(xM,Rt,null),e(tr,vFr),e(tr,kr),M(lx,kr,null),e(kr,FFr),e(kr,q6e),e(q6e,TFr),e(kr,MFr),e(kr,ln),e(ln,EFr),e(ln,j6e),e(j6e,CFr),e(ln,wFr),e(ln,D6e),e(D6e,AFr),e(ln,LFr),e(ln,G6e),e(G6e,yFr),e(ln,xFr),e(kr,$Fr),e(kr,I),e(I,$M),e($M,O6e),e(O6e,kFr),e($M,SFr),e($M,jU),e(jU,RFr),e($M,PFr),e(I,BFr),e(I,kM),e(kM,V6e),e(V6e,IFr),e(kM,NFr),e(kM,DU),e(DU,qFr),e(kM,jFr),e(I,DFr),e(I,SM),e(SM,X6e),e(X6e,GFr),e(SM,OFr),e(SM,GU),e(GU,VFr),e(SM,XFr),e(I,zFr),e(I,RM),e(RM,z6e),e(z6e,WFr),e(RM,QFr),e(RM,OU),e(OU,HFr),e(RM,UFr),e(I,JFr),e(I,PM),e(PM,W6e),e(W6e,YFr),e(PM,KFr),e(PM,VU),e(VU,ZFr),e(PM,e6r),e(I,o6r),e(I,BM),e(BM,Q6e),e(Q6e,r6r),e(BM,t6r),e(BM,XU),e(XU,a6r),e(BM,n6r),e(I,s6r),e(I,IM),e(IM,H6e),e(H6e,l6r),e(IM,i6r),e(IM,zU),e(zU,d6r),e(IM,c6r),e(I,f6r),e(I,NM),e(NM,U6e),e(U6e,m6r),e(NM,g6r),e(NM,WU),e(WU,h6r),e(NM,p6r),e(I,_6r),e(I,qM),e(qM,J6e),e(J6e,u6r),e(qM,b6r),e(qM,QU),e(QU,v6r),e(qM,F6r),e(I,T6r),e(I,jM),e(jM,Y6e),e(Y6e,M6r),e(jM,E6r),e(jM,HU),e(HU,C6r),e(jM,w6r),e(I,A6r),e(I,DM),e(DM,K6e),e(K6e,L6r),e(DM,y6r),e(DM,UU),e(UU,x6r),e(DM,$6r),e(I,k6r),e(I,GM),e(GM,Z6e),e(Z6e,S6r),e(GM,R6r),e(GM,JU),e(JU,P6r),e(GM,B6r),e(I,I6r),e(I,OM),e(OM,eTe),e(eTe,N6r),e(OM,q6r),e(OM,YU),e(YU,j6r),e(OM,D6r),e(I,G6r),e(I,VM),e(VM,oTe),e(oTe,O6r),e(VM,V6r),e(VM,KU),e(KU,X6r),e(VM,z6r),e(I,W6r),e(I,XM),e(XM,rTe),e(rTe,Q6r),e(XM,H6r),e(XM,ZU),e(ZU,U6r),e(XM,J6r),e(I,Y6r),e(I,zM),e(zM,tTe),e(tTe,K6r),e(zM,Z6r),e(zM,eJ),e(eJ,eTr),e(zM,oTr),e(I,rTr),e(I,WM),e(WM,aTe),e(aTe,tTr),e(WM,aTr),e(WM,oJ),e(oJ,nTr),e(WM,sTr),e(I,lTr),e(I,QM),e(QM,nTe),e(nTe,iTr),e(QM,dTr),e(QM,rJ),e(rJ,cTr),e(QM,fTr),e(I,mTr),e(I,Zs),e(Zs,sTe),e(sTe,gTr),e(Zs,hTr),e(Zs,tJ),e(tJ,pTr),e(Zs,_Tr),e(Zs,aJ),e(aJ,uTr),e(Zs,bTr),e(I,vTr),e(I,HM),e(HM,lTe),e(lTe,FTr),e(HM,TTr),e(HM,nJ),e(nJ,MTr),e(HM,ETr),e(I,CTr),e(I,UM),e(UM,iTe),e(iTe,wTr),e(UM,ATr),e(UM,sJ),e(sJ,LTr),e(UM,yTr),e(I,xTr),e(I,JM),e(JM,dTe),e(dTe,$Tr),e(JM,kTr),e(JM,lJ),e(lJ,STr),e(JM,RTr),e(I,PTr),e(I,YM),e(YM,cTe),e(cTe,BTr),e(YM,ITr),e(YM,iJ),e(iJ,NTr),e(YM,qTr),e(I,jTr),e(I,KM),e(KM,fTe),e(fTe,DTr),e(KM,GTr),e(KM,dJ),e(dJ,OTr),e(KM,VTr),e(I,XTr),e(I,ZM),e(ZM,mTe),e(mTe,zTr),e(ZM,WTr),e(ZM,cJ),e(cJ,QTr),e(ZM,HTr),e(I,UTr),e(I,e4),e(e4,gTe),e(gTe,JTr),e(e4,YTr),e(e4,fJ),e(fJ,KTr),e(e4,ZTr),e(I,eMr),e(I,o4),e(o4,hTe),e(hTe,oMr),e(o4,rMr),e(o4,mJ),e(mJ,tMr),e(o4,aMr),e(I,nMr),e(I,r4),e(r4,pTe),e(pTe,sMr),e(r4,lMr),e(r4,gJ),e(gJ,iMr),e(r4,dMr),e(I,cMr),e(I,t4),e(t4,_Te),e(_Te,fMr),e(t4,mMr),e(t4,hJ),e(hJ,gMr),e(t4,hMr),e(I,pMr),e(I,a4),e(a4,uTe),e(uTe,_Mr),e(a4,uMr),e(a4,pJ),e(pJ,bMr),e(a4,vMr),e(I,FMr),e(I,n4),e(n4,bTe),e(bTe,TMr),e(n4,MMr),e(n4,_J),e(_J,EMr),e(n4,CMr),e(I,wMr),e(I,s4),e(s4,vTe),e(vTe,AMr),e(s4,LMr),e(s4,uJ),e(uJ,yMr),e(s4,xMr),e(I,$Mr),e(I,l4),e(l4,FTe),e(FTe,kMr),e(l4,SMr),e(l4,bJ),e(bJ,RMr),e(l4,PMr),e(I,BMr),e(I,i4),e(i4,TTe),e(TTe,IMr),e(i4,NMr),e(i4,vJ),e(vJ,qMr),e(i4,jMr),e(I,DMr),e(I,d4),e(d4,MTe),e(MTe,GMr),e(d4,OMr),e(d4,FJ),e(FJ,VMr),e(d4,XMr),e(I,zMr),e(I,c4),e(c4,ETe),e(ETe,WMr),e(c4,QMr),e(c4,TJ),e(TJ,HMr),e(c4,UMr),e(I,JMr),e(I,f4),e(f4,CTe),e(CTe,YMr),e(f4,KMr),e(f4,MJ),e(MJ,ZMr),e(f4,e4r),e(I,o4r),e(I,m4),e(m4,wTe),e(wTe,r4r),e(m4,t4r),e(m4,EJ),e(EJ,a4r),e(m4,n4r),e(I,s4r),e(I,g4),e(g4,ATe),e(ATe,l4r),e(g4,i4r),e(g4,CJ),e(CJ,d4r),e(g4,c4r),e(I,f4r),e(I,h4),e(h4,LTe),e(LTe,m4r),e(h4,g4r),e(h4,wJ),e(wJ,h4r),e(h4,p4r),e(I,_4r),e(I,p4),e(p4,yTe),e(yTe,u4r),e(p4,b4r),e(p4,AJ),e(AJ,v4r),e(p4,F4r),e(I,T4r),e(I,_4),e(_4,xTe),e(xTe,M4r),e(_4,E4r),e(_4,LJ),e(LJ,C4r),e(_4,w4r),e(I,A4r),e(I,u4),e(u4,$Te),e($Te,L4r),e(u4,y4r),e(u4,yJ),e(yJ,x4r),e(u4,$4r),e(I,k4r),e(I,b4),e(b4,kTe),e(kTe,S4r),e(b4,R4r),e(b4,xJ),e(xJ,P4r),e(b4,B4r),e(I,I4r),e(I,v4),e(v4,STe),e(STe,N4r),e(v4,q4r),e(v4,$J),e($J,j4r),e(v4,D4r),e(I,G4r),e(I,F4),e(F4,RTe),e(RTe,O4r),e(F4,V4r),e(F4,kJ),e(kJ,X4r),e(F4,z4r),e(I,W4r),e(I,T4),e(T4,PTe),e(PTe,Q4r),e(T4,H4r),e(T4,SJ),e(SJ,U4r),e(T4,J4r),e(I,Y4r),e(I,M4),e(M4,BTe),e(BTe,K4r),e(M4,Z4r),e(M4,RJ),e(RJ,eEr),e(M4,oEr),e(I,rEr),e(I,E4),e(E4,ITe),e(ITe,tEr),e(E4,aEr),e(E4,PJ),e(PJ,nEr),e(E4,sEr),e(I,lEr),e(I,C4),e(C4,NTe),e(NTe,iEr),e(C4,dEr),e(C4,BJ),e(BJ,cEr),e(C4,fEr),e(I,mEr),e(I,w4),e(w4,qTe),e(qTe,gEr),e(w4,hEr),e(w4,IJ),e(IJ,pEr),e(w4,_Er),e(kr,uEr),M(A4,kr,null),b(f,sWe,u),b(f,fc,u),e(fc,L4),e(L4,jTe),M(ix,jTe,null),e(fc,bEr),e(fc,DTe),e(DTe,vEr),b(f,lWe,u),b(f,ar,u),M(dx,ar,null),e(ar,FEr),e(ar,mc),e(mc,TEr),e(mc,NJ),e(NJ,MEr),e(mc,EEr),e(mc,qJ),e(qJ,CEr),e(mc,wEr),e(ar,AEr),e(ar,cx),e(cx,LEr),e(cx,GTe),e(GTe,yEr),e(cx,xEr),e(ar,$Er),e(ar,Pt),M(fx,Pt,null),e(Pt,kEr),e(Pt,OTe),e(OTe,SEr),e(Pt,REr),e(Pt,gc),e(gc,PEr),e(gc,VTe),e(VTe,BEr),e(gc,IEr),e(gc,jJ),e(jJ,NEr),e(gc,qEr),e(Pt,jEr),M(y4,Pt,null),e(ar,DEr),e(ar,Sr),M(mx,Sr,null),e(Sr,GEr),e(Sr,XTe),e(XTe,OEr),e(Sr,VEr),e(Sr,dn),e(dn,XEr),e(dn,zTe),e(zTe,zEr),e(dn,WEr),e(dn,WTe),e(WTe,QEr),e(dn,HEr),e(dn,QTe),e(QTe,UEr),e(dn,JEr),e(Sr,YEr),e(Sr,se),e(se,x4),e(x4,HTe),e(HTe,KEr),e(x4,ZEr),e(x4,DJ),e(DJ,eCr),e(x4,oCr),e(se,rCr),e(se,$4),e($4,UTe),e(UTe,tCr),e($4,aCr),e($4,GJ),e(GJ,nCr),e($4,sCr),e(se,lCr),e(se,k4),e(k4,JTe),e(JTe,iCr),e(k4,dCr),e(k4,OJ),e(OJ,cCr),e(k4,fCr),e(se,mCr),e(se,S4),e(S4,YTe),e(YTe,gCr),e(S4,hCr),e(S4,VJ),e(VJ,pCr),e(S4,_Cr),e(se,uCr),e(se,R4),e(R4,KTe),e(KTe,bCr),e(R4,vCr),e(R4,XJ),e(XJ,FCr),e(R4,TCr),e(se,MCr),e(se,P4),e(P4,ZTe),e(ZTe,ECr),e(P4,CCr),e(P4,zJ),e(zJ,wCr),e(P4,ACr),e(se,LCr),e(se,B4),e(B4,eMe),e(eMe,yCr),e(B4,xCr),e(B4,WJ),e(WJ,$Cr),e(B4,kCr),e(se,SCr),e(se,I4),e(I4,oMe),e(oMe,RCr),e(I4,PCr),e(I4,QJ),e(QJ,BCr),e(I4,ICr),e(se,NCr),e(se,N4),e(N4,rMe),e(rMe,qCr),e(N4,jCr),e(N4,HJ),e(HJ,DCr),e(N4,GCr),e(se,OCr),e(se,q4),e(q4,tMe),e(tMe,VCr),e(q4,XCr),e(q4,UJ),e(UJ,zCr),e(q4,WCr),e(se,QCr),e(se,j4),e(j4,aMe),e(aMe,HCr),e(j4,UCr),e(j4,JJ),e(JJ,JCr),e(j4,YCr),e(se,KCr),e(se,D4),e(D4,nMe),e(nMe,ZCr),e(D4,e5r),e(D4,YJ),e(YJ,o5r),e(D4,r5r),e(se,t5r),e(se,G4),e(G4,sMe),e(sMe,a5r),e(G4,n5r),e(G4,KJ),e(KJ,s5r),e(G4,l5r),e(se,i5r),e(se,O4),e(O4,lMe),e(lMe,d5r),e(O4,c5r),e(O4,ZJ),e(ZJ,f5r),e(O4,m5r),e(se,g5r),e(se,V4),e(V4,iMe),e(iMe,h5r),e(V4,p5r),e(V4,eY),e(eY,_5r),e(V4,u5r),e(se,b5r),e(se,X4),e(X4,dMe),e(dMe,v5r),e(X4,F5r),e(X4,oY),e(oY,T5r),e(X4,M5r),e(se,E5r),e(se,z4),e(z4,cMe),e(cMe,C5r),e(z4,w5r),e(z4,rY),e(rY,A5r),e(z4,L5r),e(se,y5r),e(se,W4),e(W4,fMe),e(fMe,x5r),e(W4,$5r),e(W4,tY),e(tY,k5r),e(W4,S5r),e(se,R5r),e(se,Q4),e(Q4,mMe),e(mMe,P5r),e(Q4,B5r),e(Q4,aY),e(aY,I5r),e(Q4,N5r),e(se,q5r),e(se,H4),e(H4,gMe),e(gMe,j5r),e(H4,D5r),e(H4,nY),e(nY,G5r),e(H4,O5r),e(se,V5r),e(se,U4),e(U4,hMe),e(hMe,X5r),e(U4,z5r),e(U4,sY),e(sY,W5r),e(U4,Q5r),e(se,H5r),e(se,J4),e(J4,pMe),e(pMe,U5r),e(J4,J5r),e(J4,lY),e(lY,Y5r),e(J4,K5r),e(se,Z5r),e(se,Y4),e(Y4,_Me),e(_Me,e3r),e(Y4,o3r),e(Y4,iY),e(iY,r3r),e(Y4,t3r),e(Sr,a3r),M(K4,Sr,null),b(f,iWe,u),b(f,hc,u),e(hc,Z4),e(Z4,uMe),M(gx,uMe,null),e(hc,n3r),e(hc,bMe),e(bMe,s3r),b(f,dWe,u),b(f,nr,u),M(hx,nr,null),e(nr,l3r),e(nr,pc),e(pc,i3r),e(pc,dY),e(dY,d3r),e(pc,c3r),e(pc,cY),e(cY,f3r),e(pc,m3r),e(nr,g3r),e(nr,px),e(px,h3r),e(px,vMe),e(vMe,p3r),e(px,_3r),e(nr,u3r),e(nr,Bt),M(_x,Bt,null),e(Bt,b3r),e(Bt,FMe),e(FMe,v3r),e(Bt,F3r),e(Bt,_c),e(_c,T3r),e(_c,TMe),e(TMe,M3r),e(_c,E3r),e(_c,fY),e(fY,C3r),e(_c,w3r),e(Bt,A3r),M(eE,Bt,null),e(nr,L3r),e(nr,Rr),M(ux,Rr,null),e(Rr,y3r),e(Rr,MMe),e(MMe,x3r),e(Rr,$3r),e(Rr,cn),e(cn,k3r),e(cn,EMe),e(EMe,S3r),e(cn,R3r),e(cn,CMe),e(CMe,P3r),e(cn,B3r),e(cn,wMe),e(wMe,I3r),e(cn,N3r),e(Rr,q3r),e(Rr,Me),e(Me,oE),e(oE,AMe),e(AMe,j3r),e(oE,D3r),e(oE,mY),e(mY,G3r),e(oE,O3r),e(Me,V3r),e(Me,rE),e(rE,LMe),e(LMe,X3r),e(rE,z3r),e(rE,gY),e(gY,W3r),e(rE,Q3r),e(Me,H3r),e(Me,tE),e(tE,yMe),e(yMe,U3r),e(tE,J3r),e(tE,hY),e(hY,Y3r),e(tE,K3r),e(Me,Z3r),e(Me,aE),e(aE,xMe),e(xMe,e0r),e(aE,o0r),e(aE,pY),e(pY,r0r),e(aE,t0r),e(Me,a0r),e(Me,nE),e(nE,$Me),e($Me,n0r),e(nE,s0r),e(nE,_Y),e(_Y,l0r),e(nE,i0r),e(Me,d0r),e(Me,sE),e(sE,kMe),e(kMe,c0r),e(sE,f0r),e(sE,uY),e(uY,m0r),e(sE,g0r),e(Me,h0r),e(Me,lE),e(lE,SMe),e(SMe,p0r),e(lE,_0r),e(lE,bY),e(bY,u0r),e(lE,b0r),e(Me,v0r),e(Me,iE),e(iE,RMe),e(RMe,F0r),e(iE,T0r),e(iE,vY),e(vY,M0r),e(iE,E0r),e(Me,C0r),e(Me,dE),e(dE,PMe),e(PMe,w0r),e(dE,A0r),e(dE,FY),e(FY,L0r),e(dE,y0r),e(Me,x0r),e(Me,cE),e(cE,BMe),e(BMe,$0r),e(cE,k0r),e(cE,TY),e(TY,S0r),e(cE,R0r),e(Me,P0r),e(Me,fE),e(fE,IMe),e(IMe,B0r),e(fE,I0r),e(fE,MY),e(MY,N0r),e(fE,q0r),e(Me,j0r),e(Me,mE),e(mE,NMe),e(NMe,D0r),e(mE,G0r),e(mE,EY),e(EY,O0r),e(mE,V0r),e(Me,X0r),e(Me,gE),e(gE,qMe),e(qMe,z0r),e(gE,W0r),e(gE,CY),e(CY,Q0r),e(gE,H0r),e(Rr,U0r),M(hE,Rr,null),b(f,cWe,u),b(f,uc,u),e(uc,pE),e(pE,jMe),M(bx,jMe,null),e(uc,J0r),e(uc,DMe),e(DMe,Y0r),b(f,fWe,u),b(f,sr,u),M(vx,sr,null),e(sr,K0r),e(sr,bc),e(bc,Z0r),e(bc,wY),e(wY,ewr),e(bc,owr),e(bc,AY),e(AY,rwr),e(bc,twr),e(sr,awr),e(sr,Fx),e(Fx,nwr),e(Fx,GMe),e(GMe,swr),e(Fx,lwr),e(sr,iwr),e(sr,It),M(Tx,It,null),e(It,dwr),e(It,OMe),e(OMe,cwr),e(It,fwr),e(It,vc),e(vc,mwr),e(vc,VMe),e(VMe,gwr),e(vc,hwr),e(vc,LY),e(LY,pwr),e(vc,_wr),e(It,uwr),M(_E,It,null),e(sr,bwr),e(sr,Pr),M(Mx,Pr,null),e(Pr,vwr),e(Pr,XMe),e(XMe,Fwr),e(Pr,Twr),e(Pr,fn),e(fn,Mwr),e(fn,zMe),e(zMe,Ewr),e(fn,Cwr),e(fn,WMe),e(WMe,wwr),e(fn,Awr),e(fn,QMe),e(QMe,Lwr),e(fn,ywr),e(Pr,xwr),e(Pr,Ve),e(Ve,uE),e(uE,HMe),e(HMe,$wr),e(uE,kwr),e(uE,yY),e(yY,Swr),e(uE,Rwr),e(Ve,Pwr),e(Ve,bE),e(bE,UMe),e(UMe,Bwr),e(bE,Iwr),e(bE,xY),e(xY,Nwr),e(bE,qwr),e(Ve,jwr),e(Ve,el),e(el,JMe),e(JMe,Dwr),e(el,Gwr),e(el,$Y),e($Y,Owr),e(el,Vwr),e(el,kY),e(kY,Xwr),e(el,zwr),e(Ve,Wwr),e(Ve,vE),e(vE,YMe),e(YMe,Qwr),e(vE,Hwr),e(vE,SY),e(SY,Uwr),e(vE,Jwr),e(Ve,Ywr),e(Ve,FE),e(FE,KMe),e(KMe,Kwr),e(FE,Zwr),e(FE,RY),e(RY,eAr),e(FE,oAr),e(Ve,rAr),e(Ve,TE),e(TE,ZMe),e(ZMe,tAr),e(TE,aAr),e(TE,PY),e(PY,nAr),e(TE,sAr),e(Ve,lAr),e(Ve,ME),e(ME,e4e),e(e4e,iAr),e(ME,dAr),e(ME,BY),e(BY,cAr),e(ME,fAr),e(Ve,mAr),e(Ve,EE),e(EE,o4e),e(o4e,gAr),e(EE,hAr),e(EE,IY),e(IY,pAr),e(EE,_Ar),e(Pr,uAr),M(CE,Pr,null),b(f,mWe,u),b(f,Fc,u),e(Fc,wE),e(wE,r4e),M(Ex,r4e,null),e(Fc,bAr),e(Fc,t4e),e(t4e,vAr),b(f,gWe,u),b(f,lr,u),M(Cx,lr,null),e(lr,FAr),e(lr,Tc),e(Tc,TAr),e(Tc,NY),e(NY,MAr),e(Tc,EAr),e(Tc,qY),e(qY,CAr),e(Tc,wAr),e(lr,AAr),e(lr,wx),e(wx,LAr),e(wx,a4e),e(a4e,yAr),e(wx,xAr),e(lr,$Ar),e(lr,Nt),M(Ax,Nt,null),e(Nt,kAr),e(Nt,n4e),e(n4e,SAr),e(Nt,RAr),e(Nt,Mc),e(Mc,PAr),e(Mc,s4e),e(s4e,BAr),e(Mc,IAr),e(Mc,jY),e(jY,NAr),e(Mc,qAr),e(Nt,jAr),M(AE,Nt,null),e(lr,DAr),e(lr,Br),M(Lx,Br,null),e(Br,GAr),e(Br,l4e),e(l4e,OAr),e(Br,VAr),e(Br,mn),e(mn,XAr),e(mn,i4e),e(i4e,zAr),e(mn,WAr),e(mn,d4e),e(d4e,QAr),e(mn,HAr),e(mn,c4e),e(c4e,UAr),e(mn,JAr),e(Br,YAr),e(Br,ie),e(ie,LE),e(LE,f4e),e(f4e,KAr),e(LE,ZAr),e(LE,DY),e(DY,eLr),e(LE,oLr),e(ie,rLr),e(ie,yE),e(yE,m4e),e(m4e,tLr),e(yE,aLr),e(yE,GY),e(GY,nLr),e(yE,sLr),e(ie,lLr),e(ie,xE),e(xE,g4e),e(g4e,iLr),e(xE,dLr),e(xE,OY),e(OY,cLr),e(xE,fLr),e(ie,mLr),e(ie,$E),e($E,h4e),e(h4e,gLr),e($E,hLr),e($E,VY),e(VY,pLr),e($E,_Lr),e(ie,uLr),e(ie,kE),e(kE,p4e),e(p4e,bLr),e(kE,vLr),e(kE,XY),e(XY,FLr),e(kE,TLr),e(ie,MLr),e(ie,SE),e(SE,_4e),e(_4e,ELr),e(SE,CLr),e(SE,zY),e(zY,wLr),e(SE,ALr),e(ie,LLr),e(ie,RE),e(RE,u4e),e(u4e,yLr),e(RE,xLr),e(RE,WY),e(WY,$Lr),e(RE,kLr),e(ie,SLr),e(ie,PE),e(PE,b4e),e(b4e,RLr),e(PE,PLr),e(PE,QY),e(QY,BLr),e(PE,ILr),e(ie,NLr),e(ie,BE),e(BE,v4e),e(v4e,qLr),e(BE,jLr),e(BE,HY),e(HY,DLr),e(BE,GLr),e(ie,OLr),e(ie,IE),e(IE,F4e),e(F4e,VLr),e(IE,XLr),e(IE,UY),e(UY,zLr),e(IE,WLr),e(ie,QLr),e(ie,NE),e(NE,T4e),e(T4e,HLr),e(NE,ULr),e(NE,JY),e(JY,JLr),e(NE,YLr),e(ie,KLr),e(ie,qE),e(qE,M4e),e(M4e,ZLr),e(qE,eyr),e(qE,YY),e(YY,oyr),e(qE,ryr),e(ie,tyr),e(ie,jE),e(jE,E4e),e(E4e,ayr),e(jE,nyr),e(jE,KY),e(KY,syr),e(jE,lyr),e(ie,iyr),e(ie,DE),e(DE,C4e),e(C4e,dyr),e(DE,cyr),e(DE,ZY),e(ZY,fyr),e(DE,myr),e(ie,gyr),e(ie,GE),e(GE,w4e),e(w4e,hyr),e(GE,pyr),e(GE,eK),e(eK,_yr),e(GE,uyr),e(ie,byr),e(ie,OE),e(OE,A4e),e(A4e,vyr),e(OE,Fyr),e(OE,oK),e(oK,Tyr),e(OE,Myr),e(ie,Eyr),e(ie,VE),e(VE,L4e),e(L4e,Cyr),e(VE,wyr),e(VE,rK),e(rK,Ayr),e(VE,Lyr),e(ie,yyr),e(ie,XE),e(XE,y4e),e(y4e,xyr),e(XE,$yr),e(XE,tK),e(tK,kyr),e(XE,Syr),e(ie,Ryr),e(ie,zE),e(zE,x4e),e(x4e,Pyr),e(zE,Byr),e(zE,aK),e(aK,Iyr),e(zE,Nyr),e(ie,qyr),e(ie,WE),e(WE,$4e),e($4e,jyr),e(WE,Dyr),e(WE,nK),e(nK,Gyr),e(WE,Oyr),e(Br,Vyr),M(QE,Br,null),b(f,hWe,u),b(f,Ec,u),e(Ec,HE),e(HE,k4e),M(yx,k4e,null),e(Ec,Xyr),e(Ec,S4e),e(S4e,zyr),b(f,pWe,u),b(f,ir,u),M(xx,ir,null),e(ir,Wyr),e(ir,Cc),e(Cc,Qyr),e(Cc,sK),e(sK,Hyr),e(Cc,Uyr),e(Cc,lK),e(lK,Jyr),e(Cc,Yyr),e(ir,Kyr),e(ir,$x),e($x,Zyr),e($x,R4e),e(R4e,e8r),e($x,o8r),e(ir,r8r),e(ir,qt),M(kx,qt,null),e(qt,t8r),e(qt,P4e),e(P4e,a8r),e(qt,n8r),e(qt,wc),e(wc,s8r),e(wc,B4e),e(B4e,l8r),e(wc,i8r),e(wc,iK),e(iK,d8r),e(wc,c8r),e(qt,f8r),M(UE,qt,null),e(ir,m8r),e(ir,Ir),M(Sx,Ir,null),e(Ir,g8r),e(Ir,I4e),e(I4e,h8r),e(Ir,p8r),e(Ir,gn),e(gn,_8r),e(gn,N4e),e(N4e,u8r),e(gn,b8r),e(gn,q4e),e(q4e,v8r),e(gn,F8r),e(gn,j4e),e(j4e,T8r),e(gn,M8r),e(Ir,E8r),e(Ir,ye),e(ye,JE),e(JE,D4e),e(D4e,C8r),e(JE,w8r),e(JE,dK),e(dK,A8r),e(JE,L8r),e(ye,y8r),e(ye,YE),e(YE,G4e),e(G4e,x8r),e(YE,$8r),e(YE,cK),e(cK,k8r),e(YE,S8r),e(ye,R8r),e(ye,KE),e(KE,O4e),e(O4e,P8r),e(KE,B8r),e(KE,fK),e(fK,I8r),e(KE,N8r),e(ye,q8r),e(ye,ZE),e(ZE,V4e),e(V4e,j8r),e(ZE,D8r),e(ZE,mK),e(mK,G8r),e(ZE,O8r),e(ye,V8r),e(ye,eC),e(eC,X4e),e(X4e,X8r),e(eC,z8r),e(eC,gK),e(gK,W8r),e(eC,Q8r),e(ye,H8r),e(ye,oC),e(oC,z4e),e(z4e,U8r),e(oC,J8r),e(oC,hK),e(hK,Y8r),e(oC,K8r),e(ye,Z8r),e(ye,rC),e(rC,W4e),e(W4e,e9r),e(rC,o9r),e(rC,pK),e(pK,r9r),e(rC,t9r),e(ye,a9r),e(ye,tC),e(tC,Q4e),e(Q4e,n9r),e(tC,s9r),e(tC,_K),e(_K,l9r),e(tC,i9r),e(ye,d9r),e(ye,aC),e(aC,H4e),e(H4e,c9r),e(aC,f9r),e(aC,uK),e(uK,m9r),e(aC,g9r),e(ye,h9r),e(ye,nC),e(nC,U4e),e(U4e,p9r),e(nC,_9r),e(nC,bK),e(bK,u9r),e(nC,b9r),e(Ir,v9r),M(sC,Ir,null),b(f,_We,u),b(f,Ac,u),e(Ac,lC),e(lC,J4e),M(Rx,J4e,null),e(Ac,F9r),e(Ac,Y4e),e(Y4e,T9r),b(f,uWe,u),b(f,dr,u),M(Px,dr,null),e(dr,M9r),e(dr,Lc),e(Lc,E9r),e(Lc,vK),e(vK,C9r),e(Lc,w9r),e(Lc,FK),e(FK,A9r),e(Lc,L9r),e(dr,y9r),e(dr,Bx),e(Bx,x9r),e(Bx,K4e),e(K4e,$9r),e(Bx,k9r),e(dr,S9r),e(dr,jt),M(Ix,jt,null),e(jt,R9r),e(jt,Z4e),e(Z4e,P9r),e(jt,B9r),e(jt,yc),e(yc,I9r),e(yc,eEe),e(eEe,N9r),e(yc,q9r),e(yc,TK),e(TK,j9r),e(yc,D9r),e(jt,G9r),M(iC,jt,null),e(dr,O9r),e(dr,Nr),M(Nx,Nr,null),e(Nr,V9r),e(Nr,oEe),e(oEe,X9r),e(Nr,z9r),e(Nr,hn),e(hn,W9r),e(hn,rEe),e(rEe,Q9r),e(hn,H9r),e(hn,tEe),e(tEe,U9r),e(hn,J9r),e(hn,aEe),e(aEe,Y9r),e(hn,K9r),e(Nr,Z9r),e(Nr,te),e(te,dC),e(dC,nEe),e(nEe,exr),e(dC,oxr),e(dC,MK),e(MK,rxr),e(dC,txr),e(te,axr),e(te,cC),e(cC,sEe),e(sEe,nxr),e(cC,sxr),e(cC,EK),e(EK,lxr),e(cC,ixr),e(te,dxr),e(te,fC),e(fC,lEe),e(lEe,cxr),e(fC,fxr),e(fC,CK),e(CK,mxr),e(fC,gxr),e(te,hxr),e(te,mC),e(mC,iEe),e(iEe,pxr),e(mC,_xr),e(mC,wK),e(wK,uxr),e(mC,bxr),e(te,vxr),e(te,gC),e(gC,dEe),e(dEe,Fxr),e(gC,Txr),e(gC,AK),e(AK,Mxr),e(gC,Exr),e(te,Cxr),e(te,hC),e(hC,cEe),e(cEe,wxr),e(hC,Axr),e(hC,LK),e(LK,Lxr),e(hC,yxr),e(te,xxr),e(te,pC),e(pC,fEe),e(fEe,$xr),e(pC,kxr),e(pC,yK),e(yK,Sxr),e(pC,Rxr),e(te,Pxr),e(te,_C),e(_C,mEe),e(mEe,Bxr),e(_C,Ixr),e(_C,xK),e(xK,Nxr),e(_C,qxr),e(te,jxr),e(te,uC),e(uC,gEe),e(gEe,Dxr),e(uC,Gxr),e(uC,$K),e($K,Oxr),e(uC,Vxr),e(te,Xxr),e(te,bC),e(bC,hEe),e(hEe,zxr),e(bC,Wxr),e(bC,kK),e(kK,Qxr),e(bC,Hxr),e(te,Uxr),e(te,vC),e(vC,pEe),e(pEe,Jxr),e(vC,Yxr),e(vC,SK),e(SK,Kxr),e(vC,Zxr),e(te,e$r),e(te,FC),e(FC,_Ee),e(_Ee,o$r),e(FC,r$r),e(FC,RK),e(RK,t$r),e(FC,a$r),e(te,n$r),e(te,TC),e(TC,uEe),e(uEe,s$r),e(TC,l$r),e(TC,PK),e(PK,i$r),e(TC,d$r),e(te,c$r),e(te,MC),e(MC,bEe),e(bEe,f$r),e(MC,m$r),e(MC,BK),e(BK,g$r),e(MC,h$r),e(te,p$r),e(te,EC),e(EC,vEe),e(vEe,_$r),e(EC,u$r),e(EC,IK),e(IK,b$r),e(EC,v$r),e(te,F$r),e(te,CC),e(CC,FEe),e(FEe,T$r),e(CC,M$r),e(CC,NK),e(NK,E$r),e(CC,C$r),e(te,w$r),e(te,wC),e(wC,TEe),e(TEe,A$r),e(wC,L$r),e(wC,qK),e(qK,y$r),e(wC,x$r),e(te,$$r),e(te,AC),e(AC,MEe),e(MEe,k$r),e(AC,S$r),e(AC,jK),e(jK,R$r),e(AC,P$r),e(te,B$r),e(te,LC),e(LC,EEe),e(EEe,I$r),e(LC,N$r),e(LC,DK),e(DK,q$r),e(LC,j$r),e(te,D$r),e(te,yC),e(yC,CEe),e(CEe,G$r),e(yC,O$r),e(yC,GK),e(GK,V$r),e(yC,X$r),e(te,z$r),e(te,xC),e(xC,wEe),e(wEe,W$r),e(xC,Q$r),e(xC,OK),e(OK,H$r),e(xC,U$r),e(te,J$r),e(te,$C),e($C,AEe),e(AEe,Y$r),e($C,K$r),e($C,VK),e(VK,Z$r),e($C,ekr),e(te,okr),e(te,kC),e(kC,LEe),e(LEe,rkr),e(kC,tkr),e(kC,XK),e(XK,akr),e(kC,nkr),e(te,skr),e(te,SC),e(SC,yEe),e(yEe,lkr),e(SC,ikr),e(SC,zK),e(zK,dkr),e(SC,ckr),e(te,fkr),e(te,RC),e(RC,xEe),e(xEe,mkr),e(RC,gkr),e(RC,WK),e(WK,hkr),e(RC,pkr),e(te,_kr),e(te,PC),e(PC,$Ee),e($Ee,ukr),e(PC,bkr),e(PC,QK),e(QK,vkr),e(PC,Fkr),e(Nr,Tkr),M(BC,Nr,null),b(f,bWe,u),b(f,xc,u),e(xc,IC),e(IC,kEe),M(qx,kEe,null),e(xc,Mkr),e(xc,SEe),e(SEe,Ekr),b(f,vWe,u),b(f,cr,u),M(jx,cr,null),e(cr,Ckr),e(cr,$c),e($c,wkr),e($c,HK),e(HK,Akr),e($c,Lkr),e($c,UK),e(UK,ykr),e($c,xkr),e(cr,$kr),e(cr,Dx),e(Dx,kkr),e(Dx,REe),e(REe,Skr),e(Dx,Rkr),e(cr,Pkr),e(cr,Dt),M(Gx,Dt,null),e(Dt,Bkr),e(Dt,PEe),e(PEe,Ikr),e(Dt,Nkr),e(Dt,kc),e(kc,qkr),e(kc,BEe),e(BEe,jkr),e(kc,Dkr),e(kc,JK),e(JK,Gkr),e(kc,Okr),e(Dt,Vkr),M(NC,Dt,null),e(cr,Xkr),e(cr,qr),M(Ox,qr,null),e(qr,zkr),e(qr,IEe),e(IEe,Wkr),e(qr,Qkr),e(qr,pn),e(pn,Hkr),e(pn,NEe),e(NEe,Ukr),e(pn,Jkr),e(pn,qEe),e(qEe,Ykr),e(pn,Kkr),e(pn,jEe),e(jEe,Zkr),e(pn,eSr),e(qr,oSr),e(qr,be),e(be,qC),e(qC,DEe),e(DEe,rSr),e(qC,tSr),e(qC,YK),e(YK,aSr),e(qC,nSr),e(be,sSr),e(be,jC),e(jC,GEe),e(GEe,lSr),e(jC,iSr),e(jC,KK),e(KK,dSr),e(jC,cSr),e(be,fSr),e(be,DC),e(DC,OEe),e(OEe,mSr),e(DC,gSr),e(DC,ZK),e(ZK,hSr),e(DC,pSr),e(be,_Sr),e(be,GC),e(GC,VEe),e(VEe,uSr),e(GC,bSr),e(GC,eZ),e(eZ,vSr),e(GC,FSr),e(be,TSr),e(be,OC),e(OC,XEe),e(XEe,MSr),e(OC,ESr),e(OC,oZ),e(oZ,CSr),e(OC,wSr),e(be,ASr),e(be,VC),e(VC,zEe),e(zEe,LSr),e(VC,ySr),e(VC,rZ),e(rZ,xSr),e(VC,$Sr),e(be,kSr),e(be,XC),e(XC,WEe),e(WEe,SSr),e(XC,RSr),e(XC,tZ),e(tZ,PSr),e(XC,BSr),e(be,ISr),e(be,zC),e(zC,QEe),e(QEe,NSr),e(zC,qSr),e(zC,aZ),e(aZ,jSr),e(zC,DSr),e(be,GSr),e(be,WC),e(WC,HEe),e(HEe,OSr),e(WC,VSr),e(WC,nZ),e(nZ,XSr),e(WC,zSr),e(be,WSr),e(be,QC),e(QC,UEe),e(UEe,QSr),e(QC,HSr),e(QC,sZ),e(sZ,USr),e(QC,JSr),e(be,YSr),e(be,HC),e(HC,JEe),e(JEe,KSr),e(HC,ZSr),e(HC,lZ),e(lZ,eRr),e(HC,oRr),e(be,rRr),e(be,UC),e(UC,YEe),e(YEe,tRr),e(UC,aRr),e(UC,iZ),e(iZ,nRr),e(UC,sRr),e(be,lRr),e(be,JC),e(JC,KEe),e(KEe,iRr),e(JC,dRr),e(JC,dZ),e(dZ,cRr),e(JC,fRr),e(be,mRr),e(be,YC),e(YC,ZEe),e(ZEe,gRr),e(YC,hRr),e(YC,cZ),e(cZ,pRr),e(YC,_Rr),e(be,uRr),e(be,KC),e(KC,eCe),e(eCe,bRr),e(KC,vRr),e(KC,fZ),e(fZ,FRr),e(KC,TRr),e(be,MRr),e(be,ZC),e(ZC,oCe),e(oCe,ERr),e(ZC,CRr),e(ZC,mZ),e(mZ,wRr),e(ZC,ARr),e(be,LRr),e(be,e5),e(e5,rCe),e(rCe,yRr),e(e5,xRr),e(e5,gZ),e(gZ,$Rr),e(e5,kRr),e(qr,SRr),M(o5,qr,null),b(f,FWe,u),b(f,Sc,u),e(Sc,r5),e(r5,tCe),M(Vx,tCe,null),e(Sc,RRr),e(Sc,aCe),e(aCe,PRr),b(f,TWe,u),b(f,fr,u),M(Xx,fr,null),e(fr,BRr),e(fr,Rc),e(Rc,IRr),e(Rc,hZ),e(hZ,NRr),e(Rc,qRr),e(Rc,pZ),e(pZ,jRr),e(Rc,DRr),e(fr,GRr),e(fr,zx),e(zx,ORr),e(zx,nCe),e(nCe,VRr),e(zx,XRr),e(fr,zRr),e(fr,Gt),M(Wx,Gt,null),e(Gt,WRr),e(Gt,sCe),e(sCe,QRr),e(Gt,HRr),e(Gt,Pc),e(Pc,URr),e(Pc,lCe),e(lCe,JRr),e(Pc,YRr),e(Pc,_Z),e(_Z,KRr),e(Pc,ZRr),e(Gt,ePr),M(t5,Gt,null),e(fr,oPr),e(fr,jr),M(Qx,jr,null),e(jr,rPr),e(jr,iCe),e(iCe,tPr),e(jr,aPr),e(jr,_n),e(_n,nPr),e(_n,dCe),e(dCe,sPr),e(_n,lPr),e(_n,cCe),e(cCe,iPr),e(_n,dPr),e(_n,fCe),e(fCe,cPr),e(_n,fPr),e(jr,mPr),e(jr,Hx),e(Hx,a5),e(a5,mCe),e(mCe,gPr),e(a5,hPr),e(a5,uZ),e(uZ,pPr),e(a5,_Pr),e(Hx,uPr),e(Hx,n5),e(n5,gCe),e(gCe,bPr),e(n5,vPr),e(n5,bZ),e(bZ,FPr),e(n5,TPr),e(jr,MPr),M(s5,jr,null),b(f,MWe,u),b(f,Bc,u),e(Bc,l5),e(l5,hCe),M(Ux,hCe,null),e(Bc,EPr),e(Bc,pCe),e(pCe,CPr),b(f,EWe,u),b(f,mr,u),M(Jx,mr,null),e(mr,wPr),e(mr,Ic),e(Ic,APr),e(Ic,vZ),e(vZ,LPr),e(Ic,yPr),e(Ic,FZ),e(FZ,xPr),e(Ic,$Pr),e(mr,kPr),e(mr,Yx),e(Yx,SPr),e(Yx,_Ce),e(_Ce,RPr),e(Yx,PPr),e(mr,BPr),e(mr,Ot),M(Kx,Ot,null),e(Ot,IPr),e(Ot,uCe),e(uCe,NPr),e(Ot,qPr),e(Ot,Nc),e(Nc,jPr),e(Nc,bCe),e(bCe,DPr),e(Nc,GPr),e(Nc,TZ),e(TZ,OPr),e(Nc,VPr),e(Ot,XPr),M(i5,Ot,null),e(mr,zPr),e(mr,Dr),M(Zx,Dr,null),e(Dr,WPr),e(Dr,vCe),e(vCe,QPr),e(Dr,HPr),e(Dr,un),e(un,UPr),e(un,FCe),e(FCe,JPr),e(un,YPr),e(un,TCe),e(TCe,KPr),e(un,ZPr),e(un,MCe),e(MCe,eBr),e(un,oBr),e(Dr,rBr),e(Dr,ECe),e(ECe,d5),e(d5,CCe),e(CCe,tBr),e(d5,aBr),e(d5,MZ),e(MZ,nBr),e(d5,sBr),e(Dr,lBr),M(c5,Dr,null),b(f,CWe,u),b(f,qc,u),e(qc,f5),e(f5,wCe),M(e$,wCe,null),e(qc,iBr),e(qc,ACe),e(ACe,dBr),b(f,wWe,u),b(f,gr,u),M(o$,gr,null),e(gr,cBr),e(gr,jc),e(jc,fBr),e(jc,EZ),e(EZ,mBr),e(jc,gBr),e(jc,CZ),e(CZ,hBr),e(jc,pBr),e(gr,_Br),e(gr,r$),e(r$,uBr),e(r$,LCe),e(LCe,bBr),e(r$,vBr),e(gr,FBr),e(gr,Vt),M(t$,Vt,null),e(Vt,TBr),e(Vt,yCe),e(yCe,MBr),e(Vt,EBr),e(Vt,Dc),e(Dc,CBr),e(Dc,xCe),e(xCe,wBr),e(Dc,ABr),e(Dc,wZ),e(wZ,LBr),e(Dc,yBr),e(Vt,xBr),M(m5,Vt,null),e(gr,$Br),e(gr,Gr),M(a$,Gr,null),e(Gr,kBr),e(Gr,$Ce),e($Ce,SBr),e(Gr,RBr),e(Gr,bn),e(bn,PBr),e(bn,kCe),e(kCe,BBr),e(bn,IBr),e(bn,SCe),e(SCe,NBr),e(bn,qBr),e(bn,RCe),e(RCe,jBr),e(bn,DBr),e(Gr,GBr),e(Gr,de),e(de,g5),e(g5,PCe),e(PCe,OBr),e(g5,VBr),e(g5,AZ),e(AZ,XBr),e(g5,zBr),e(de,WBr),e(de,h5),e(h5,BCe),e(BCe,QBr),e(h5,HBr),e(h5,LZ),e(LZ,UBr),e(h5,JBr),e(de,YBr),e(de,p5),e(p5,ICe),e(ICe,KBr),e(p5,ZBr),e(p5,yZ),e(yZ,eIr),e(p5,oIr),e(de,rIr),e(de,_5),e(_5,NCe),e(NCe,tIr),e(_5,aIr),e(_5,xZ),e(xZ,nIr),e(_5,sIr),e(de,lIr),e(de,u5),e(u5,qCe),e(qCe,iIr),e(u5,dIr),e(u5,$Z),e($Z,cIr),e(u5,fIr),e(de,mIr),e(de,b5),e(b5,jCe),e(jCe,gIr),e(b5,hIr),e(b5,kZ),e(kZ,pIr),e(b5,_Ir),e(de,uIr),e(de,v5),e(v5,DCe),e(DCe,bIr),e(v5,vIr),e(v5,SZ),e(SZ,FIr),e(v5,TIr),e(de,MIr),e(de,F5),e(F5,GCe),e(GCe,EIr),e(F5,CIr),e(F5,RZ),e(RZ,wIr),e(F5,AIr),e(de,LIr),e(de,T5),e(T5,OCe),e(OCe,yIr),e(T5,xIr),e(T5,PZ),e(PZ,$Ir),e(T5,kIr),e(de,SIr),e(de,M5),e(M5,VCe),e(VCe,RIr),e(M5,PIr),e(M5,BZ),e(BZ,BIr),e(M5,IIr),e(de,NIr),e(de,E5),e(E5,XCe),e(XCe,qIr),e(E5,jIr),e(E5,IZ),e(IZ,DIr),e(E5,GIr),e(de,OIr),e(de,C5),e(C5,zCe),e(zCe,VIr),e(C5,XIr),e(C5,NZ),e(NZ,zIr),e(C5,WIr),e(de,QIr),e(de,w5),e(w5,WCe),e(WCe,HIr),e(w5,UIr),e(w5,qZ),e(qZ,JIr),e(w5,YIr),e(de,KIr),e(de,A5),e(A5,QCe),e(QCe,ZIr),e(A5,eNr),e(A5,jZ),e(jZ,oNr),e(A5,rNr),e(de,tNr),e(de,L5),e(L5,HCe),e(HCe,aNr),e(L5,nNr),e(L5,DZ),e(DZ,sNr),e(L5,lNr),e(de,iNr),e(de,y5),e(y5,UCe),e(UCe,dNr),e(y5,cNr),e(y5,GZ),e(GZ,fNr),e(y5,mNr),e(de,gNr),e(de,x5),e(x5,JCe),e(JCe,hNr),e(x5,pNr),e(x5,OZ),e(OZ,_Nr),e(x5,uNr),e(de,bNr),e(de,$5),e($5,YCe),e(YCe,vNr),e($5,FNr),e($5,VZ),e(VZ,TNr),e($5,MNr),e(de,ENr),e(de,k5),e(k5,KCe),e(KCe,CNr),e(k5,wNr),e(k5,XZ),e(XZ,ANr),e(k5,LNr),e(de,yNr),e(de,S5),e(S5,ZCe),e(ZCe,xNr),e(S5,$Nr),e(S5,zZ),e(zZ,kNr),e(S5,SNr),e(Gr,RNr),M(R5,Gr,null),b(f,AWe,u),b(f,Gc,u),e(Gc,P5),e(P5,e5e),M(n$,e5e,null),e(Gc,PNr),e(Gc,o5e),e(o5e,BNr),b(f,LWe,u),b(f,hr,u),M(s$,hr,null),e(hr,INr),e(hr,Oc),e(Oc,NNr),e(Oc,WZ),e(WZ,qNr),e(Oc,jNr),e(Oc,QZ),e(QZ,DNr),e(Oc,GNr),e(hr,ONr),e(hr,l$),e(l$,VNr),e(l$,r5e),e(r5e,XNr),e(l$,zNr),e(hr,WNr),e(hr,Xt),M(i$,Xt,null),e(Xt,QNr),e(Xt,t5e),e(t5e,HNr),e(Xt,UNr),e(Xt,Vc),e(Vc,JNr),e(Vc,a5e),e(a5e,YNr),e(Vc,KNr),e(Vc,HZ),e(HZ,ZNr),e(Vc,eqr),e(Xt,oqr),M(B5,Xt,null),e(hr,rqr),e(hr,Or),M(d$,Or,null),e(Or,tqr),e(Or,n5e),e(n5e,aqr),e(Or,nqr),e(Or,vn),e(vn,sqr),e(vn,s5e),e(s5e,lqr),e(vn,iqr),e(vn,l5e),e(l5e,dqr),e(vn,cqr),e(vn,i5e),e(i5e,fqr),e(vn,mqr),e(Or,gqr),e(Or,ce),e(ce,I5),e(I5,d5e),e(d5e,hqr),e(I5,pqr),e(I5,UZ),e(UZ,_qr),e(I5,uqr),e(ce,bqr),e(ce,N5),e(N5,c5e),e(c5e,vqr),e(N5,Fqr),e(N5,JZ),e(JZ,Tqr),e(N5,Mqr),e(ce,Eqr),e(ce,q5),e(q5,f5e),e(f5e,Cqr),e(q5,wqr),e(q5,YZ),e(YZ,Aqr),e(q5,Lqr),e(ce,yqr),e(ce,j5),e(j5,m5e),e(m5e,xqr),e(j5,$qr),e(j5,KZ),e(KZ,kqr),e(j5,Sqr),e(ce,Rqr),e(ce,D5),e(D5,g5e),e(g5e,Pqr),e(D5,Bqr),e(D5,ZZ),e(ZZ,Iqr),e(D5,Nqr),e(ce,qqr),e(ce,G5),e(G5,h5e),e(h5e,jqr),e(G5,Dqr),e(G5,eee),e(eee,Gqr),e(G5,Oqr),e(ce,Vqr),e(ce,O5),e(O5,p5e),e(p5e,Xqr),e(O5,zqr),e(O5,oee),e(oee,Wqr),e(O5,Qqr),e(ce,Hqr),e(ce,V5),e(V5,_5e),e(_5e,Uqr),e(V5,Jqr),e(V5,ree),e(ree,Yqr),e(V5,Kqr),e(ce,Zqr),e(ce,X5),e(X5,u5e),e(u5e,ejr),e(X5,ojr),e(X5,tee),e(tee,rjr),e(X5,tjr),e(ce,ajr),e(ce,z5),e(z5,b5e),e(b5e,njr),e(z5,sjr),e(z5,aee),e(aee,ljr),e(z5,ijr),e(ce,djr),e(ce,W5),e(W5,v5e),e(v5e,cjr),e(W5,fjr),e(W5,nee),e(nee,mjr),e(W5,gjr),e(ce,hjr),e(ce,Q5),e(Q5,F5e),e(F5e,pjr),e(Q5,_jr),e(Q5,see),e(see,ujr),e(Q5,bjr),e(ce,vjr),e(ce,H5),e(H5,T5e),e(T5e,Fjr),e(H5,Tjr),e(H5,lee),e(lee,Mjr),e(H5,Ejr),e(ce,Cjr),e(ce,U5),e(U5,M5e),e(M5e,wjr),e(U5,Ajr),e(U5,iee),e(iee,Ljr),e(U5,yjr),e(ce,xjr),e(ce,J5),e(J5,E5e),e(E5e,$jr),e(J5,kjr),e(J5,dee),e(dee,Sjr),e(J5,Rjr),e(ce,Pjr),e(ce,Y5),e(Y5,C5e),e(C5e,Bjr),e(Y5,Ijr),e(Y5,cee),e(cee,Njr),e(Y5,qjr),e(ce,jjr),e(ce,K5),e(K5,w5e),e(w5e,Djr),e(K5,Gjr),e(K5,fee),e(fee,Ojr),e(K5,Vjr),e(ce,Xjr),e(ce,Z5),e(Z5,A5e),e(A5e,zjr),e(Z5,Wjr),e(Z5,mee),e(mee,Qjr),e(Z5,Hjr),e(ce,Ujr),e(ce,e3),e(e3,L5e),e(L5e,Jjr),e(e3,Yjr),e(e3,gee),e(gee,Kjr),e(e3,Zjr),e(ce,eDr),e(ce,o3),e(o3,y5e),e(y5e,oDr),e(o3,rDr),e(o3,hee),e(hee,tDr),e(o3,aDr),e(Or,nDr),M(r3,Or,null),b(f,yWe,u),b(f,Xc,u),e(Xc,t3),e(t3,x5e),M(c$,x5e,null),e(Xc,sDr),e(Xc,$5e),e($5e,lDr),b(f,xWe,u),b(f,pr,u),M(f$,pr,null),e(pr,iDr),e(pr,zc),e(zc,dDr),e(zc,pee),e(pee,cDr),e(zc,fDr),e(zc,_ee),e(_ee,mDr),e(zc,gDr),e(pr,hDr),e(pr,m$),e(m$,pDr),e(m$,k5e),e(k5e,_Dr),e(m$,uDr),e(pr,bDr),e(pr,zt),M(g$,zt,null),e(zt,vDr),e(zt,S5e),e(S5e,FDr),e(zt,TDr),e(zt,Wc),e(Wc,MDr),e(Wc,R5e),e(R5e,EDr),e(Wc,CDr),e(Wc,uee),e(uee,wDr),e(Wc,ADr),e(zt,LDr),M(a3,zt,null),e(pr,yDr),e(pr,Vr),M(h$,Vr,null),e(Vr,xDr),e(Vr,P5e),e(P5e,$Dr),e(Vr,kDr),e(Vr,Fn),e(Fn,SDr),e(Fn,B5e),e(B5e,RDr),e(Fn,PDr),e(Fn,I5e),e(I5e,BDr),e(Fn,IDr),e(Fn,N5e),e(N5e,NDr),e(Fn,qDr),e(Vr,jDr),e(Vr,q5e),e(q5e,n3),e(n3,j5e),e(j5e,DDr),e(n3,GDr),e(n3,bee),e(bee,ODr),e(n3,VDr),e(Vr,XDr),M(s3,Vr,null),b(f,$We,u),b(f,Qc,u),e(Qc,l3),e(l3,D5e),M(p$,D5e,null),e(Qc,zDr),e(Qc,G5e),e(G5e,WDr),b(f,kWe,u),b(f,_r,u),M(_$,_r,null),e(_r,QDr),e(_r,Hc),e(Hc,HDr),e(Hc,vee),e(vee,UDr),e(Hc,JDr),e(Hc,Fee),e(Fee,YDr),e(Hc,KDr),e(_r,ZDr),e(_r,u$),e(u$,eGr),e(u$,O5e),e(O5e,oGr),e(u$,rGr),e(_r,tGr),e(_r,Wt),M(b$,Wt,null),e(Wt,aGr),e(Wt,V5e),e(V5e,nGr),e(Wt,sGr),e(Wt,Uc),e(Uc,lGr),e(Uc,X5e),e(X5e,iGr),e(Uc,dGr),e(Uc,Tee),e(Tee,cGr),e(Uc,fGr),e(Wt,mGr),M(i3,Wt,null),e(_r,gGr),e(_r,Xr),M(v$,Xr,null),e(Xr,hGr),e(Xr,z5e),e(z5e,pGr),e(Xr,_Gr),e(Xr,Tn),e(Tn,uGr),e(Tn,W5e),e(W5e,bGr),e(Tn,vGr),e(Tn,Q5e),e(Q5e,FGr),e(Tn,TGr),e(Tn,H5e),e(H5e,MGr),e(Tn,EGr),e(Xr,CGr),e(Xr,U5e),e(U5e,d3),e(d3,J5e),e(J5e,wGr),e(d3,AGr),e(d3,Mee),e(Mee,LGr),e(d3,yGr),e(Xr,xGr),M(c3,Xr,null),b(f,SWe,u),b(f,Jc,u),e(Jc,f3),e(f3,Y5e),M(F$,Y5e,null),e(Jc,$Gr),e(Jc,K5e),e(K5e,kGr),b(f,RWe,u),b(f,ur,u),M(T$,ur,null),e(ur,SGr),e(ur,Yc),e(Yc,RGr),e(Yc,Eee),e(Eee,PGr),e(Yc,BGr),e(Yc,Cee),e(Cee,IGr),e(Yc,NGr),e(ur,qGr),e(ur,M$),e(M$,jGr),e(M$,Z5e),e(Z5e,DGr),e(M$,GGr),e(ur,OGr),e(ur,Qt),M(E$,Qt,null),e(Qt,VGr),e(Qt,e3e),e(e3e,XGr),e(Qt,zGr),e(Qt,Kc),e(Kc,WGr),e(Kc,o3e),e(o3e,QGr),e(Kc,HGr),e(Kc,wee),e(wee,UGr),e(Kc,JGr),e(Qt,YGr),M(m3,Qt,null),e(ur,KGr),e(ur,zr),M(C$,zr,null),e(zr,ZGr),e(zr,r3e),e(r3e,eOr),e(zr,oOr),e(zr,Mn),e(Mn,rOr),e(Mn,t3e),e(t3e,tOr),e(Mn,aOr),e(Mn,a3e),e(a3e,nOr),e(Mn,sOr),e(Mn,n3e),e(n3e,lOr),e(Mn,iOr),e(zr,dOr),e(zr,oe),e(oe,g3),e(g3,s3e),e(s3e,cOr),e(g3,fOr),e(g3,Aee),e(Aee,mOr),e(g3,gOr),e(oe,hOr),e(oe,h3),e(h3,l3e),e(l3e,pOr),e(h3,_Or),e(h3,Lee),e(Lee,uOr),e(h3,bOr),e(oe,vOr),e(oe,p3),e(p3,i3e),e(i3e,FOr),e(p3,TOr),e(p3,yee),e(yee,MOr),e(p3,EOr),e(oe,COr),e(oe,_3),e(_3,d3e),e(d3e,wOr),e(_3,AOr),e(_3,xee),e(xee,LOr),e(_3,yOr),e(oe,xOr),e(oe,u3),e(u3,c3e),e(c3e,$Or),e(u3,kOr),e(u3,$ee),e($ee,SOr),e(u3,ROr),e(oe,POr),e(oe,b3),e(b3,f3e),e(f3e,BOr),e(b3,IOr),e(b3,kee),e(kee,NOr),e(b3,qOr),e(oe,jOr),e(oe,v3),e(v3,m3e),e(m3e,DOr),e(v3,GOr),e(v3,See),e(See,OOr),e(v3,VOr),e(oe,XOr),e(oe,F3),e(F3,g3e),e(g3e,zOr),e(F3,WOr),e(F3,Ree),e(Ree,QOr),e(F3,HOr),e(oe,UOr),e(oe,T3),e(T3,h3e),e(h3e,JOr),e(T3,YOr),e(T3,Pee),e(Pee,KOr),e(T3,ZOr),e(oe,eVr),e(oe,M3),e(M3,p3e),e(p3e,oVr),e(M3,rVr),e(M3,Bee),e(Bee,tVr),e(M3,aVr),e(oe,nVr),e(oe,E3),e(E3,_3e),e(_3e,sVr),e(E3,lVr),e(E3,Iee),e(Iee,iVr),e(E3,dVr),e(oe,cVr),e(oe,C3),e(C3,u3e),e(u3e,fVr),e(C3,mVr),e(C3,Nee),e(Nee,gVr),e(C3,hVr),e(oe,pVr),e(oe,w3),e(w3,b3e),e(b3e,_Vr),e(w3,uVr),e(w3,qee),e(qee,bVr),e(w3,vVr),e(oe,FVr),e(oe,A3),e(A3,v3e),e(v3e,TVr),e(A3,MVr),e(A3,jee),e(jee,EVr),e(A3,CVr),e(oe,wVr),e(oe,L3),e(L3,F3e),e(F3e,AVr),e(L3,LVr),e(L3,Dee),e(Dee,yVr),e(L3,xVr),e(oe,$Vr),e(oe,y3),e(y3,T3e),e(T3e,kVr),e(y3,SVr),e(y3,Gee),e(Gee,RVr),e(y3,PVr),e(oe,BVr),e(oe,x3),e(x3,M3e),e(M3e,IVr),e(x3,NVr),e(x3,Oee),e(Oee,qVr),e(x3,jVr),e(oe,DVr),e(oe,$3),e($3,E3e),e(E3e,GVr),e($3,OVr),e($3,Vee),e(Vee,VVr),e($3,XVr),e(oe,zVr),e(oe,k3),e(k3,C3e),e(C3e,WVr),e(k3,QVr),e(k3,Xee),e(Xee,HVr),e(k3,UVr),e(oe,JVr),e(oe,S3),e(S3,w3e),e(w3e,YVr),e(S3,KVr),e(S3,zee),e(zee,ZVr),e(S3,eXr),e(oe,oXr),e(oe,R3),e(R3,A3e),e(A3e,rXr),e(R3,tXr),e(R3,Wee),e(Wee,aXr),e(R3,nXr),e(oe,sXr),e(oe,P3),e(P3,L3e),e(L3e,lXr),e(P3,iXr),e(P3,Qee),e(Qee,dXr),e(P3,cXr),e(oe,fXr),e(oe,B3),e(B3,y3e),e(y3e,mXr),e(B3,gXr),e(B3,Hee),e(Hee,hXr),e(B3,pXr),e(oe,_Xr),e(oe,I3),e(I3,x3e),e(x3e,uXr),e(I3,bXr),e(I3,Uee),e(Uee,vXr),e(I3,FXr),e(oe,TXr),e(oe,N3),e(N3,$3e),e($3e,MXr),e(N3,EXr),e(N3,Jee),e(Jee,CXr),e(N3,wXr),e(oe,AXr),e(oe,q3),e(q3,k3e),e(k3e,LXr),e(q3,yXr),e(q3,Yee),e(Yee,xXr),e(q3,$Xr),e(oe,kXr),e(oe,j3),e(j3,S3e),e(S3e,SXr),e(j3,RXr),e(j3,Kee),e(Kee,PXr),e(j3,BXr),e(zr,IXr),M(D3,zr,null),b(f,PWe,u),b(f,Zc,u),e(Zc,G3),e(G3,R3e),M(w$,R3e,null),e(Zc,NXr),e(Zc,P3e),e(P3e,qXr),b(f,BWe,u),b(f,br,u),M(A$,br,null),e(br,jXr),e(br,ef),e(ef,DXr),e(ef,Zee),e(Zee,GXr),e(ef,OXr),e(ef,eoe),e(eoe,VXr),e(ef,XXr),e(br,zXr),e(br,L$),e(L$,WXr),e(L$,B3e),e(B3e,QXr),e(L$,HXr),e(br,UXr),e(br,Ht),M(y$,Ht,null),e(Ht,JXr),e(Ht,I3e),e(I3e,YXr),e(Ht,KXr),e(Ht,of),e(of,ZXr),e(of,N3e),e(N3e,ezr),e(of,ozr),e(of,ooe),e(ooe,rzr),e(of,tzr),e(Ht,azr),M(O3,Ht,null),e(br,nzr),e(br,Wr),M(x$,Wr,null),e(Wr,szr),e(Wr,q3e),e(q3e,lzr),e(Wr,izr),e(Wr,En),e(En,dzr),e(En,j3e),e(j3e,czr),e(En,fzr),e(En,D3e),e(D3e,mzr),e(En,gzr),e(En,G3e),e(G3e,hzr),e(En,pzr),e(Wr,_zr),e(Wr,xe),e(xe,V3),e(V3,O3e),e(O3e,uzr),e(V3,bzr),e(V3,roe),e(roe,vzr),e(V3,Fzr),e(xe,Tzr),e(xe,X3),e(X3,V3e),e(V3e,Mzr),e(X3,Ezr),e(X3,toe),e(toe,Czr),e(X3,wzr),e(xe,Azr),e(xe,z3),e(z3,X3e),e(X3e,Lzr),e(z3,yzr),e(z3,aoe),e(aoe,xzr),e(z3,$zr),e(xe,kzr),e(xe,W3),e(W3,z3e),e(z3e,Szr),e(W3,Rzr),e(W3,noe),e(noe,Pzr),e(W3,Bzr),e(xe,Izr),e(xe,Q3),e(Q3,W3e),e(W3e,Nzr),e(Q3,qzr),e(Q3,soe),e(soe,jzr),e(Q3,Dzr),e(xe,Gzr),e(xe,H3),e(H3,Q3e),e(Q3e,Ozr),e(H3,Vzr),e(H3,loe),e(loe,Xzr),e(H3,zzr),e(xe,Wzr),e(xe,U3),e(U3,H3e),e(H3e,Qzr),e(U3,Hzr),e(U3,ioe),e(ioe,Uzr),e(U3,Jzr),e(xe,Yzr),e(xe,J3),e(J3,U3e),e(U3e,Kzr),e(J3,Zzr),e(J3,doe),e(doe,eWr),e(J3,oWr),e(xe,rWr),e(xe,Y3),e(Y3,J3e),e(J3e,tWr),e(Y3,aWr),e(Y3,coe),e(coe,nWr),e(Y3,sWr),e(xe,lWr),e(xe,K3),e(K3,Y3e),e(Y3e,iWr),e(K3,dWr),e(K3,foe),e(foe,cWr),e(K3,fWr),e(Wr,mWr),M(Z3,Wr,null),b(f,IWe,u),b(f,rf,u),e(rf,e0),e(e0,K3e),M($$,K3e,null),e(rf,gWr),e(rf,Z3e),e(Z3e,hWr),b(f,NWe,u),b(f,vr,u),M(k$,vr,null),e(vr,pWr),e(vr,tf),e(tf,_Wr),e(tf,moe),e(moe,uWr),e(tf,bWr),e(tf,goe),e(goe,vWr),e(tf,FWr),e(vr,TWr),e(vr,S$),e(S$,MWr),e(S$,e0e),e(e0e,EWr),e(S$,CWr),e(vr,wWr),e(vr,Ut),M(R$,Ut,null),e(Ut,AWr),e(Ut,o0e),e(o0e,LWr),e(Ut,yWr),e(Ut,af),e(af,xWr),e(af,r0e),e(r0e,$Wr),e(af,kWr),e(af,hoe),e(hoe,SWr),e(af,RWr),e(Ut,PWr),M(o0,Ut,null),e(vr,BWr),e(vr,Qr),M(P$,Qr,null),e(Qr,IWr),e(Qr,t0e),e(t0e,NWr),e(Qr,qWr),e(Qr,Cn),e(Cn,jWr),e(Cn,a0e),e(a0e,DWr),e(Cn,GWr),e(Cn,n0e),e(n0e,OWr),e(Cn,VWr),e(Cn,s0e),e(s0e,XWr),e(Cn,zWr),e(Qr,WWr),e(Qr,Ee),e(Ee,r0),e(r0,l0e),e(l0e,QWr),e(r0,HWr),e(r0,poe),e(poe,UWr),e(r0,JWr),e(Ee,YWr),e(Ee,t0),e(t0,i0e),e(i0e,KWr),e(t0,ZWr),e(t0,_oe),e(_oe,eQr),e(t0,oQr),e(Ee,rQr),e(Ee,a0),e(a0,d0e),e(d0e,tQr),e(a0,aQr),e(a0,uoe),e(uoe,nQr),e(a0,sQr),e(Ee,lQr),e(Ee,n0),e(n0,c0e),e(c0e,iQr),e(n0,dQr),e(n0,boe),e(boe,cQr),e(n0,fQr),e(Ee,mQr),e(Ee,s0),e(s0,f0e),e(f0e,gQr),e(s0,hQr),e(s0,voe),e(voe,pQr),e(s0,_Qr),e(Ee,uQr),e(Ee,l0),e(l0,m0e),e(m0e,bQr),e(l0,vQr),e(l0,Foe),e(Foe,FQr),e(l0,TQr),e(Ee,MQr),e(Ee,i0),e(i0,g0e),e(g0e,EQr),e(i0,CQr),e(i0,Toe),e(Toe,wQr),e(i0,AQr),e(Ee,LQr),e(Ee,d0),e(d0,h0e),e(h0e,yQr),e(d0,xQr),e(d0,Moe),e(Moe,$Qr),e(d0,kQr),e(Ee,SQr),e(Ee,c0),e(c0,p0e),e(p0e,RQr),e(c0,PQr),e(c0,Eoe),e(Eoe,BQr),e(c0,IQr),e(Ee,NQr),e(Ee,f0),e(f0,_0e),e(_0e,qQr),e(f0,jQr),e(f0,Coe),e(Coe,DQr),e(f0,GQr),e(Ee,OQr),e(Ee,m0),e(m0,u0e),e(u0e,VQr),e(m0,XQr),e(m0,woe),e(woe,zQr),e(m0,WQr),e(Ee,QQr),e(Ee,g0),e(g0,b0e),e(b0e,HQr),e(g0,UQr),e(g0,Aoe),e(Aoe,JQr),e(g0,YQr),e(Ee,KQr),e(Ee,h0),e(h0,v0e),e(v0e,ZQr),e(h0,eHr),e(h0,Loe),e(Loe,oHr),e(h0,rHr),e(Qr,tHr),M(p0,Qr,null),b(f,qWe,u),b(f,nf,u),e(nf,_0),e(_0,F0e),M(B$,F0e,null),e(nf,aHr),e(nf,T0e),e(T0e,nHr),b(f,jWe,u),b(f,Fr,u),M(I$,Fr,null),e(Fr,sHr),e(Fr,sf),e(sf,lHr),e(sf,yoe),e(yoe,iHr),e(sf,dHr),e(sf,xoe),e(xoe,cHr),e(sf,fHr),e(Fr,mHr),e(Fr,N$),e(N$,gHr),e(N$,M0e),e(M0e,hHr),e(N$,pHr),e(Fr,_Hr),e(Fr,Jt),M(q$,Jt,null),e(Jt,uHr),e(Jt,E0e),e(E0e,bHr),e(Jt,vHr),e(Jt,lf),e(lf,FHr),e(lf,C0e),e(C0e,THr),e(lf,MHr),e(lf,$oe),e($oe,EHr),e(lf,CHr),e(Jt,wHr),M(u0,Jt,null),e(Fr,AHr),e(Fr,Hr),M(j$,Hr,null),e(Hr,LHr),e(Hr,w0e),e(w0e,yHr),e(Hr,xHr),e(Hr,wn),e(wn,$Hr),e(wn,A0e),e(A0e,kHr),e(wn,SHr),e(wn,L0e),e(L0e,RHr),e(wn,PHr),e(wn,y0e),e(y0e,BHr),e(wn,IHr),e(Hr,NHr),e(Hr,$e),e($e,b0),e(b0,x0e),e(x0e,qHr),e(b0,jHr),e(b0,koe),e(koe,DHr),e(b0,GHr),e($e,OHr),e($e,v0),e(v0,$0e),e($0e,VHr),e(v0,XHr),e(v0,Soe),e(Soe,zHr),e(v0,WHr),e($e,QHr),e($e,F0),e(F0,k0e),e(k0e,HHr),e(F0,UHr),e(F0,Roe),e(Roe,JHr),e(F0,YHr),e($e,KHr),e($e,T0),e(T0,S0e),e(S0e,ZHr),e(T0,eUr),e(T0,Poe),e(Poe,oUr),e(T0,rUr),e($e,tUr),e($e,M0),e(M0,R0e),e(R0e,aUr),e(M0,nUr),e(M0,Boe),e(Boe,sUr),e(M0,lUr),e($e,iUr),e($e,E0),e(E0,P0e),e(P0e,dUr),e(E0,cUr),e(E0,Ioe),e(Ioe,fUr),e(E0,mUr),e($e,gUr),e($e,C0),e(C0,B0e),e(B0e,hUr),e(C0,pUr),e(C0,Noe),e(Noe,_Ur),e(C0,uUr),e($e,bUr),e($e,w0),e(w0,I0e),e(I0e,vUr),e(w0,FUr),e(w0,qoe),e(qoe,TUr),e(w0,MUr),e($e,EUr),e($e,A0),e(A0,N0e),e(N0e,CUr),e(A0,wUr),e(A0,joe),e(joe,AUr),e(A0,LUr),e($e,yUr),e($e,L0),e(L0,q0e),e(q0e,xUr),e(L0,$Ur),e(L0,Doe),e(Doe,kUr),e(L0,SUr),e(Hr,RUr),M(y0,Hr,null),b(f,DWe,u),b(f,df,u),e(df,x0),e(x0,j0e),M(D$,j0e,null),e(df,PUr),e(df,D0e),e(D0e,BUr),b(f,GWe,u),b(f,Tr,u),M(G$,Tr,null),e(Tr,IUr),e(Tr,cf),e(cf,NUr),e(cf,Goe),e(Goe,qUr),e(cf,jUr),e(cf,Ooe),e(Ooe,DUr),e(cf,GUr),e(Tr,OUr),e(Tr,O$),e(O$,VUr),e(O$,G0e),e(G0e,XUr),e(O$,zUr),e(Tr,WUr),e(Tr,Yt),M(V$,Yt,null),e(Yt,QUr),e(Yt,O0e),e(O0e,HUr),e(Yt,UUr),e(Yt,ff),e(ff,JUr),e(ff,V0e),e(V0e,YUr),e(ff,KUr),e(ff,Voe),e(Voe,ZUr),e(ff,eJr),e(Yt,oJr),M($0,Yt,null),e(Tr,rJr),e(Tr,Ur),M(X$,Ur,null),e(Ur,tJr),e(Ur,X0e),e(X0e,aJr),e(Ur,nJr),e(Ur,An),e(An,sJr),e(An,z0e),e(z0e,lJr),e(An,iJr),e(An,W0e),e(W0e,dJr),e(An,cJr),e(An,Q0e),e(Q0e,fJr),e(An,mJr),e(Ur,gJr),e(Ur,ke),e(ke,k0),e(k0,H0e),e(H0e,hJr),e(k0,pJr),e(k0,Xoe),e(Xoe,_Jr),e(k0,uJr),e(ke,bJr),e(ke,S0),e(S0,U0e),e(U0e,vJr),e(S0,FJr),e(S0,zoe),e(zoe,TJr),e(S0,MJr),e(ke,EJr),e(ke,R0),e(R0,J0e),e(J0e,CJr),e(R0,wJr),e(R0,Woe),e(Woe,AJr),e(R0,LJr),e(ke,yJr),e(ke,P0),e(P0,Y0e),e(Y0e,xJr),e(P0,$Jr),e(P0,Qoe),e(Qoe,kJr),e(P0,SJr),e(ke,RJr),e(ke,B0),e(B0,K0e),e(K0e,PJr),e(B0,BJr),e(B0,Hoe),e(Hoe,IJr),e(B0,NJr),e(ke,qJr),e(ke,I0),e(I0,Z0e),e(Z0e,jJr),e(I0,DJr),e(I0,Uoe),e(Uoe,GJr),e(I0,OJr),e(ke,VJr),e(ke,N0),e(N0,ewe),e(ewe,XJr),e(N0,zJr),e(N0,Joe),e(Joe,WJr),e(N0,QJr),e(ke,HJr),e(ke,q0),e(q0,owe),e(owe,UJr),e(q0,JJr),e(q0,Yoe),e(Yoe,YJr),e(q0,KJr),e(ke,ZJr),e(ke,j0),e(j0,rwe),e(rwe,eYr),e(j0,oYr),e(j0,Koe),e(Koe,rYr),e(j0,tYr),e(ke,aYr),e(ke,D0),e(D0,twe),e(twe,nYr),e(D0,sYr),e(D0,Zoe),e(Zoe,lYr),e(D0,iYr),e(Ur,dYr),M(G0,Ur,null),b(f,OWe,u),b(f,mf,u),e(mf,O0),e(O0,awe),M(z$,awe,null),e(mf,cYr),e(mf,nwe),e(nwe,fYr),b(f,VWe,u),b(f,Mr,u),M(W$,Mr,null),e(Mr,mYr),e(Mr,gf),e(gf,gYr),e(gf,ere),e(ere,hYr),e(gf,pYr),e(gf,ore),e(ore,_Yr),e(gf,uYr),e(Mr,bYr),e(Mr,Q$),e(Q$,vYr),e(Q$,swe),e(swe,FYr),e(Q$,TYr),e(Mr,MYr),e(Mr,Kt),M(H$,Kt,null),e(Kt,EYr),e(Kt,lwe),e(lwe,CYr),e(Kt,wYr),e(Kt,hf),e(hf,AYr),e(hf,iwe),e(iwe,LYr),e(hf,yYr),e(hf,rre),e(rre,xYr),e(hf,$Yr),e(Kt,kYr),M(V0,Kt,null),e(Mr,SYr),e(Mr,Jr),M(U$,Jr,null),e(Jr,RYr),e(Jr,dwe),e(dwe,PYr),e(Jr,BYr),e(Jr,Ln),e(Ln,IYr),e(Ln,cwe),e(cwe,NYr),e(Ln,qYr),e(Ln,fwe),e(fwe,jYr),e(Ln,DYr),e(Ln,mwe),e(mwe,GYr),e(Ln,OYr),e(Jr,VYr),e(Jr,Se),e(Se,X0),e(X0,gwe),e(gwe,XYr),e(X0,zYr),e(X0,tre),e(tre,WYr),e(X0,QYr),e(Se,HYr),e(Se,z0),e(z0,hwe),e(hwe,UYr),e(z0,JYr),e(z0,are),e(are,YYr),e(z0,KYr),e(Se,ZYr),e(Se,W0),e(W0,pwe),e(pwe,eKr),e(W0,oKr),e(W0,nre),e(nre,rKr),e(W0,tKr),e(Se,aKr),e(Se,Q0),e(Q0,_we),e(_we,nKr),e(Q0,sKr),e(Q0,sre),e(sre,lKr),e(Q0,iKr),e(Se,dKr),e(Se,H0),e(H0,uwe),e(uwe,cKr),e(H0,fKr),e(H0,lre),e(lre,mKr),e(H0,gKr),e(Se,hKr),e(Se,U0),e(U0,bwe),e(bwe,pKr),e(U0,_Kr),e(U0,ire),e(ire,uKr),e(U0,bKr),e(Se,vKr),e(Se,J0),e(J0,vwe),e(vwe,FKr),e(J0,TKr),e(J0,dre),e(dre,MKr),e(J0,EKr),e(Se,CKr),e(Se,Y0),e(Y0,Fwe),e(Fwe,wKr),e(Y0,AKr),e(Y0,cre),e(cre,LKr),e(Y0,yKr),e(Se,xKr),e(Se,K0),e(K0,Twe),e(Twe,$Kr),e(K0,kKr),e(K0,fre),e(fre,SKr),e(K0,RKr),e(Se,PKr),e(Se,Z0),e(Z0,Mwe),e(Mwe,BKr),e(Z0,IKr),e(Z0,mre),e(mre,NKr),e(Z0,qKr),e(Jr,jKr),M(ew,Jr,null),b(f,XWe,u),b(f,pf,u),e(pf,ow),e(ow,Ewe),M(J$,Ewe,null),e(pf,DKr),e(pf,Cwe),e(Cwe,GKr),b(f,zWe,u),b(f,Er,u),M(Y$,Er,null),e(Er,OKr),e(Er,_f),e(_f,VKr),e(_f,gre),e(gre,XKr),e(_f,zKr),e(_f,hre),e(hre,WKr),e(_f,QKr),e(Er,HKr),e(Er,K$),e(K$,UKr),e(K$,wwe),e(wwe,JKr),e(K$,YKr),e(Er,KKr),e(Er,Zt),M(Z$,Zt,null),e(Zt,ZKr),e(Zt,Awe),e(Awe,eZr),e(Zt,oZr),e(Zt,uf),e(uf,rZr),e(uf,Lwe),e(Lwe,tZr),e(uf,aZr),e(uf,pre),e(pre,nZr),e(uf,sZr),e(Zt,lZr),M(rw,Zt,null),e(Er,iZr),e(Er,Yr),M(ek,Yr,null),e(Yr,dZr),e(Yr,ywe),e(ywe,cZr),e(Yr,fZr),e(Yr,yn),e(yn,mZr),e(yn,xwe),e(xwe,gZr),e(yn,hZr),e(yn,$we),e($we,pZr),e(yn,_Zr),e(yn,kwe),e(kwe,uZr),e(yn,bZr),e(Yr,vZr),e(Yr,Re),e(Re,tw),e(tw,Swe),e(Swe,FZr),e(tw,TZr),e(tw,_re),e(_re,MZr),e(tw,EZr),e(Re,CZr),e(Re,aw),e(aw,Rwe),e(Rwe,wZr),e(aw,AZr),e(aw,ure),e(ure,LZr),e(aw,yZr),e(Re,xZr),e(Re,nw),e(nw,Pwe),e(Pwe,$Zr),e(nw,kZr),e(nw,bre),e(bre,SZr),e(nw,RZr),e(Re,PZr),e(Re,sw),e(sw,Bwe),e(Bwe,BZr),e(sw,IZr),e(sw,vre),e(vre,NZr),e(sw,qZr),e(Re,jZr),e(Re,lw),e(lw,Iwe),e(Iwe,DZr),e(lw,GZr),e(lw,Fre),e(Fre,OZr),e(lw,VZr),e(Re,XZr),e(Re,iw),e(iw,Nwe),e(Nwe,zZr),e(iw,WZr),e(iw,Tre),e(Tre,QZr),e(iw,HZr),e(Re,UZr),e(Re,dw),e(dw,qwe),e(qwe,JZr),e(dw,YZr),e(dw,Mre),e(Mre,KZr),e(dw,ZZr),e(Re,eet),e(Re,cw),e(cw,jwe),e(jwe,oet),e(cw,ret),e(cw,Ere),e(Ere,tet),e(cw,aet),e(Re,net),e(Re,fw),e(fw,Dwe),e(Dwe,set),e(fw,iet),e(fw,Cre),e(Cre,det),e(fw,cet),e(Re,fet),e(Re,mw),e(mw,Gwe),e(Gwe,met),e(mw,get),e(mw,wre),e(wre,het),e(mw,pet),e(Yr,_et),M(gw,Yr,null),b(f,WWe,u),b(f,bf,u),e(bf,hw),e(hw,Owe),M(ok,Owe,null),e(bf,uet),e(bf,Vwe),e(Vwe,bet),b(f,QWe,u),b(f,Cr,u),M(rk,Cr,null),e(Cr,vet),e(Cr,vf),e(vf,Fet),e(vf,Are),e(Are,Tet),e(vf,Met),e(vf,Lre),e(Lre,Eet),e(vf,Cet),e(Cr,wet),e(Cr,tk),e(tk,Aet),e(tk,Xwe),e(Xwe,Let),e(tk,yet),e(Cr,xet),e(Cr,ea),M(ak,ea,null),e(ea,$et),e(ea,zwe),e(zwe,ket),e(ea,Set),e(ea,Ff),e(Ff,Ret),e(Ff,Wwe),e(Wwe,Pet),e(Ff,Bet),e(Ff,yre),e(yre,Iet),e(Ff,Net),e(ea,qet),M(pw,ea,null),e(Cr,jet),e(Cr,Kr),M(nk,Kr,null),e(Kr,Det),e(Kr,Qwe),e(Qwe,Get),e(Kr,Oet),e(Kr,xn),e(xn,Vet),e(xn,Hwe),e(Hwe,Xet),e(xn,zet),e(xn,Uwe),e(Uwe,Wet),e(xn,Qet),e(xn,Jwe),e(Jwe,Het),e(xn,Uet),e(Kr,Jet),e(Kr,Xe),e(Xe,_w),e(_w,Ywe),e(Ywe,Yet),e(_w,Ket),e(_w,xre),e(xre,Zet),e(_w,eot),e(Xe,oot),e(Xe,uw),e(uw,Kwe),e(Kwe,rot),e(uw,tot),e(uw,$re),e($re,aot),e(uw,not),e(Xe,sot),e(Xe,bw),e(bw,Zwe),e(Zwe,lot),e(bw,iot),e(bw,kre),e(kre,dot),e(bw,cot),e(Xe,fot),e(Xe,vw),e(vw,eAe),e(eAe,mot),e(vw,got),e(vw,Sre),e(Sre,hot),e(vw,pot),e(Xe,_ot),e(Xe,Fw),e(Fw,oAe),e(oAe,uot),e(Fw,bot),e(Fw,Rre),e(Rre,vot),e(Fw,Fot),e(Xe,Tot),e(Xe,Tw),e(Tw,rAe),e(rAe,Mot),e(Tw,Eot),e(Tw,Pre),e(Pre,Cot),e(Tw,wot),e(Xe,Aot),e(Xe,Mw),e(Mw,tAe),e(tAe,Lot),e(Mw,yot),e(Mw,Bre),e(Bre,xot),e(Mw,$ot),e(Xe,kot),e(Xe,Ew),e(Ew,aAe),e(aAe,Sot),e(Ew,Rot),e(Ew,Ire),e(Ire,Pot),e(Ew,Bot),e(Kr,Iot),M(Cw,Kr,null),b(f,HWe,u),b(f,Tf,u),e(Tf,ww),e(ww,nAe),M(sk,nAe,null),e(Tf,Not),e(Tf,sAe),e(sAe,qot),b(f,UWe,u),b(f,wr,u),M(lk,wr,null),e(wr,jot),e(wr,Mf),e(Mf,Dot),e(Mf,Nre),e(Nre,Got),e(Mf,Oot),e(Mf,qre),e(qre,Vot),e(Mf,Xot),e(wr,zot),e(wr,ik),e(ik,Wot),e(ik,lAe),e(lAe,Qot),e(ik,Hot),e(wr,Uot),e(wr,oa),M(dk,oa,null),e(oa,Jot),e(oa,iAe),e(iAe,Yot),e(oa,Kot),e(oa,Ef),e(Ef,Zot),e(Ef,dAe),e(dAe,ert),e(Ef,ort),e(Ef,jre),e(jre,rrt),e(Ef,trt),e(oa,art),M(Aw,oa,null),e(wr,nrt),e(wr,Zr),M(ck,Zr,null),e(Zr,srt),e(Zr,cAe),e(cAe,lrt),e(Zr,irt),e(Zr,$n),e($n,drt),e($n,fAe),e(fAe,crt),e($n,frt),e($n,mAe),e(mAe,mrt),e($n,grt),e($n,gAe),e(gAe,hrt),e($n,prt),e(Zr,_rt),e(Zr,ze),e(ze,Lw),e(Lw,hAe),e(hAe,urt),e(Lw,brt),e(Lw,Dre),e(Dre,vrt),e(Lw,Frt),e(ze,Trt),e(ze,yw),e(yw,pAe),e(pAe,Mrt),e(yw,Ert),e(yw,Gre),e(Gre,Crt),e(yw,wrt),e(ze,Art),e(ze,xw),e(xw,_Ae),e(_Ae,Lrt),e(xw,yrt),e(xw,Ore),e(Ore,xrt),e(xw,$rt),e(ze,krt),e(ze,$w),e($w,uAe),e(uAe,Srt),e($w,Rrt),e($w,Vre),e(Vre,Prt),e($w,Brt),e(ze,Irt),e(ze,kw),e(kw,bAe),e(bAe,Nrt),e(kw,qrt),e(kw,Xre),e(Xre,jrt),e(kw,Drt),e(ze,Grt),e(ze,Sw),e(Sw,vAe),e(vAe,Ort),e(Sw,Vrt),e(Sw,zre),e(zre,Xrt),e(Sw,zrt),e(ze,Wrt),e(ze,Rw),e(Rw,FAe),e(FAe,Qrt),e(Rw,Hrt),e(Rw,Wre),e(Wre,Urt),e(Rw,Jrt),e(ze,Yrt),e(ze,Pw),e(Pw,TAe),e(TAe,Krt),e(Pw,Zrt),e(Pw,Qre),e(Qre,ett),e(Pw,ott),e(Zr,rtt),M(Bw,Zr,null),b(f,JWe,u),b(f,Cf,u),e(Cf,Iw),e(Iw,MAe),M(fk,MAe,null),e(Cf,ttt),e(Cf,EAe),e(EAe,att),b(f,YWe,u),b(f,Ar,u),M(mk,Ar,null),e(Ar,ntt),e(Ar,wf),e(wf,stt),e(wf,Hre),e(Hre,ltt),e(wf,itt),e(wf,Ure),e(Ure,dtt),e(wf,ctt),e(Ar,ftt),e(Ar,gk),e(gk,mtt),e(gk,CAe),e(CAe,gtt),e(gk,htt),e(Ar,ptt),e(Ar,ra),M(hk,ra,null),e(ra,_tt),e(ra,wAe),e(wAe,utt),e(ra,btt),e(ra,Af),e(Af,vtt),e(Af,AAe),e(AAe,Ftt),e(Af,Ttt),e(Af,Jre),e(Jre,Mtt),e(Af,Ett),e(ra,Ctt),M(Nw,ra,null),e(Ar,wtt),e(Ar,et),M(pk,et,null),e(et,Att),e(et,LAe),e(LAe,Ltt),e(et,ytt),e(et,kn),e(kn,xtt),e(kn,yAe),e(yAe,$tt),e(kn,ktt),e(kn,xAe),e(xAe,Stt),e(kn,Rtt),e(kn,$Ae),e($Ae,Ptt),e(kn,Btt),e(et,Itt),e(et,kAe),e(kAe,qw),e(qw,SAe),e(SAe,Ntt),e(qw,qtt),e(qw,Yre),e(Yre,jtt),e(qw,Dtt),e(et,Gtt),M(jw,et,null),b(f,KWe,u),b(f,Lf,u),e(Lf,Dw),e(Dw,RAe),M(_k,RAe,null),e(Lf,Ott),e(Lf,PAe),e(PAe,Vtt),b(f,ZWe,u),b(f,Lr,u),M(uk,Lr,null),e(Lr,Xtt),e(Lr,yf),e(yf,ztt),e(yf,Kre),e(Kre,Wtt),e(yf,Qtt),e(yf,Zre),e(Zre,Htt),e(yf,Utt),e(Lr,Jtt),e(Lr,bk),e(bk,Ytt),e(bk,BAe),e(BAe,Ktt),e(bk,Ztt),e(Lr,eat),e(Lr,ta),M(vk,ta,null),e(ta,oat),e(ta,IAe),e(IAe,rat),e(ta,tat),e(ta,xf),e(xf,aat),e(xf,NAe),e(NAe,nat),e(xf,sat),e(xf,ete),e(ete,lat),e(xf,iat),e(ta,dat),M(Gw,ta,null),e(Lr,cat),e(Lr,ot),M(Fk,ot,null),e(ot,fat),e(ot,qAe),e(qAe,mat),e(ot,gat),e(ot,Sn),e(Sn,hat),e(Sn,jAe),e(jAe,pat),e(Sn,_at),e(Sn,DAe),e(DAe,uat),e(Sn,bat),e(Sn,GAe),e(GAe,vat),e(Sn,Fat),e(ot,Tat),e(ot,Tk),e(Tk,Ow),e(Ow,OAe),e(OAe,Mat),e(Ow,Eat),e(Ow,ote),e(ote,Cat),e(Ow,wat),e(Tk,Aat),e(Tk,Vw),e(Vw,VAe),e(VAe,Lat),e(Vw,yat),e(Vw,rte),e(rte,xat),e(Vw,$at),e(ot,kat),M(Xw,ot,null),b(f,eQe,u),b(f,$f,u),e($f,zw),e(zw,XAe),M(Mk,XAe,null),e($f,Sat),e($f,zAe),e(zAe,Rat),b(f,oQe,u),b(f,yr,u),M(Ek,yr,null),e(yr,Pat),e(yr,kf),e(kf,Bat),e(kf,tte),e(tte,Iat),e(kf,Nat),e(kf,ate),e(ate,qat),e(kf,jat),e(yr,Dat),e(yr,Ck),e(Ck,Gat),e(Ck,WAe),e(WAe,Oat),e(Ck,Vat),e(yr,Xat),e(yr,aa),M(wk,aa,null),e(aa,zat),e(aa,QAe),e(QAe,Wat),e(aa,Qat),e(aa,Sf),e(Sf,Hat),e(Sf,HAe),e(HAe,Uat),e(Sf,Jat),e(Sf,nte),e(nte,Yat),e(Sf,Kat),e(aa,Zat),M(Ww,aa,null),e(yr,ent),e(yr,rt),M(Ak,rt,null),e(rt,ont),e(rt,UAe),e(UAe,rnt),e(rt,tnt),e(rt,Rn),e(Rn,ant),e(Rn,JAe),e(JAe,nnt),e(Rn,snt),e(Rn,YAe),e(YAe,lnt),e(Rn,int),e(Rn,KAe),e(KAe,dnt),e(Rn,cnt),e(rt,fnt),e(rt,ZAe),e(ZAe,Qw),e(Qw,eLe),e(eLe,mnt),e(Qw,gnt),e(Qw,ste),e(ste,hnt),e(Qw,pnt),e(rt,_nt),M(Hw,rt,null),rQe=!0},p(f,[u]){const Lk={};u&2&&(Lk.$$scope={dirty:u,ctx:f}),Gf.$set(Lk);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),eh.$set(oLe);const rLe={};u&2&&(rLe.$$scope={dirty:u,ctx:f}),Ih.$set(rLe);const tLe={};u&2&&(tLe.$$scope={dirty:u,ctx:f}),Fp.$set(tLe);const yk={};u&2&&(yk.$$scope={dirty:u,ctx:f}),Tp.$set(yk);const aLe={};u&2&&(aLe.$$scope={dirty:u,ctx:f}),Vp.$set(aLe);const Pn={};u&2&&(Pn.$$scope={dirty:u,ctx:f}),Xp.$set(Pn);const nLe={};u&2&&(nLe.$$scope={dirty:u,ctx:f}),Qp.$set(nLe);const sLe={};u&2&&(sLe.$$scope={dirty:u,ctx:f}),Zu.$set(sLe);const lLe={};u&2&&(lLe.$$scope={dirty:u,ctx:f}),o1.$set(lLe);const xk={};u&2&&(xk.$$scope={dirty:u,ctx:f}),H1.$set(xk);const iLe={};u&2&&(iLe.$$scope={dirty:u,ctx:f}),J1.$set(iLe);const $k={};u&2&&($k.$$scope={dirty:u,ctx:f}),q7.$set($k);const dLe={};u&2&&(dLe.$$scope={dirty:u,ctx:f}),D7.$set(dLe);const kk={};u&2&&(kk.$$scope={dirty:u,ctx:f}),A2.$set(kk);const cLe={};u&2&&(cLe.$$scope={dirty:u,ctx:f}),y2.$set(cLe);const fLe={};u&2&&(fLe.$$scope={dirty:u,ctx:f}),U2.$set(fLe);const mLe={};u&2&&(mLe.$$scope={dirty:u,ctx:f}),Y2.$set(mLe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),Yb.$set(Rf);const gLe={};u&2&&(gLe.$$scope={dirty:u,ctx:f}),Zb.$set(gLe);const hLe={};u&2&&(hLe.$$scope={dirty:u,ctx:f}),kv.$set(hLe);const pLe={};u&2&&(pLe.$$scope={dirty:u,ctx:f}),Rv.$set(pLe);const Sk={};u&2&&(Sk.$$scope={dirty:u,ctx:f}),Gv.$set(Sk);const _Le={};u&2&&(_Le.$$scope={dirty:u,ctx:f}),Vv.$set(_Le);const uLe={};u&2&&(uLe.$$scope={dirty:u,ctx:f}),LF.$set(uLe);const bLe={};u&2&&(bLe.$$scope={dirty:u,ctx:f}),xF.$set(bLe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),v6.$set(nt);const Rk={};u&2&&(Rk.$$scope={dirty:u,ctx:f}),T6.$set(Rk);const vLe={};u&2&&(vLe.$$scope={dirty:u,ctx:f}),C6.$set(vLe);const Pk={};u&2&&(Pk.$$scope={dirty:u,ctx:f}),A6.$set(Pk);const FLe={};u&2&&(FLe.$$scope={dirty:u,ctx:f}),G6.$set(FLe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),V6.$set(st);const TLe={};u&2&&(TLe.$$scope={dirty:u,ctx:f}),W6.$set(TLe);const Pf={};u&2&&(Pf.$$scope={dirty:u,ctx:f}),H6.$set(Pf);const MLe={};u&2&&(MLe.$$scope={dirty:u,ctx:f}),Y6.$set(MLe);const ELe={};u&2&&(ELe.$$scope={dirty:u,ctx:f}),Z6.$set(ELe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),cT.$set(L);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),mT.$set(Uw);const CLe={};u&2&&(CLe.$$scope={dirty:u,ctx:f}),FT.$set(CLe);const wLe={};u&2&&(wLe.$$scope={dirty:u,ctx:f}),MT.$set(wLe);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),PT.$set(Jw);const ALe={};u&2&&(ALe.$$scope={dirty:u,ctx:f}),IT.$set(ALe);const LLe={};u&2&&(LLe.$$scope={dirty:u,ctx:f}),DT.$set(LLe);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),OT.$set(Yw);const yLe={};u&2&&(yLe.$$scope={dirty:u,ctx:f}),UT.$set(yLe);const xLe={};u&2&&(xLe.$$scope={dirty:u,ctx:f}),YT.$set(xLe);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),rM.$set(Kw);const $Le={};u&2&&($Le.$$scope={dirty:u,ctx:f}),aM.$set($Le);const kLe={};u&2&&(kLe.$$scope={dirty:u,ctx:f}),iM.$set(kLe);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),cM.$set(Zw);const SLe={};u&2&&(SLe.$$scope={dirty:u,ctx:f}),gM.$set(SLe);const RLe={};u&2&&(RLe.$$scope={dirty:u,ctx:f}),pM.$set(RLe);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),MM.$set(eA);const PLe={};u&2&&(PLe.$$scope={dirty:u,ctx:f}),CM.$set(PLe);const BLe={};u&2&&(BLe.$$scope={dirty:u,ctx:f}),LM.$set(BLe);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),xM.$set(oA);const ILe={};u&2&&(ILe.$$scope={dirty:u,ctx:f}),A4.$set(ILe);const NLe={};u&2&&(NLe.$$scope={dirty:u,ctx:f}),y4.$set(NLe);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),K4.$set(rA);const qLe={};u&2&&(qLe.$$scope={dirty:u,ctx:f}),eE.$set(qLe);const jLe={};u&2&&(jLe.$$scope={dirty:u,ctx:f}),hE.$set(jLe);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),_E.$set(tA);const DLe={};u&2&&(DLe.$$scope={dirty:u,ctx:f}),CE.$set(DLe);const GLe={};u&2&&(GLe.$$scope={dirty:u,ctx:f}),AE.$set(GLe);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),QE.$set(aA);const OLe={};u&2&&(OLe.$$scope={dirty:u,ctx:f}),UE.$set(OLe);const VLe={};u&2&&(VLe.$$scope={dirty:u,ctx:f}),sC.$set(VLe);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),iC.$set(nA);const XLe={};u&2&&(XLe.$$scope={dirty:u,ctx:f}),BC.$set(XLe);const zLe={};u&2&&(zLe.$$scope={dirty:u,ctx:f}),NC.$set(zLe);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),o5.$set(sA);const WLe={};u&2&&(WLe.$$scope={dirty:u,ctx:f}),t5.$set(WLe);const QLe={};u&2&&(QLe.$$scope={dirty:u,ctx:f}),s5.$set(QLe);const lA={};u&2&&(lA.$$scope={dirty:u,ctx:f}),i5.$set(lA);const HLe={};u&2&&(HLe.$$scope={dirty:u,ctx:f}),c5.$set(HLe);const ULe={};u&2&&(ULe.$$scope={dirty:u,ctx:f}),m5.$set(ULe);const iA={};u&2&&(iA.$$scope={dirty:u,ctx:f}),R5.$set(iA);const JLe={};u&2&&(JLe.$$scope={dirty:u,ctx:f}),B5.$set(JLe);const YLe={};u&2&&(YLe.$$scope={dirty:u,ctx:f}),r3.$set(YLe);const dA={};u&2&&(dA.$$scope={dirty:u,ctx:f}),a3.$set(dA);const KLe={};u&2&&(KLe.$$scope={dirty:u,ctx:f}),s3.$set(KLe);const ZLe={};u&2&&(ZLe.$$scope={dirty:u,ctx:f}),i3.$set(ZLe);const cA={};u&2&&(cA.$$scope={dirty:u,ctx:f}),c3.$set(cA);const eye={};u&2&&(eye.$$scope={dirty:u,ctx:f}),m3.$set(eye);const oye={};u&2&&(oye.$$scope={dirty:u,ctx:f}),D3.$set(oye);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),O3.$set(fA);const rye={};u&2&&(rye.$$scope={dirty:u,ctx:f}),Z3.$set(rye);const tye={};u&2&&(tye.$$scope={dirty:u,ctx:f}),o0.$set(tye);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),p0.$set(mA);const aye={};u&2&&(aye.$$scope={dirty:u,ctx:f}),u0.$set(aye);const nye={};u&2&&(nye.$$scope={dirty:u,ctx:f}),y0.$set(nye);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),$0.$set(gA);const sye={};u&2&&(sye.$$scope={dirty:u,ctx:f}),G0.$set(sye);const lye={};u&2&&(lye.$$scope={dirty:u,ctx:f}),V0.$set(lye);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),ew.$set(hA);const iye={};u&2&&(iye.$$scope={dirty:u,ctx:f}),rw.$set(iye);const dye={};u&2&&(dye.$$scope={dirty:u,ctx:f}),gw.$set(dye);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),pw.$set(pA);const cye={};u&2&&(cye.$$scope={dirty:u,ctx:f}),Cw.$set(cye);const fye={};u&2&&(fye.$$scope={dirty:u,ctx:f}),Aw.$set(fye);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),Bw.$set(_A);const mye={};u&2&&(mye.$$scope={dirty:u,ctx:f}),Nw.$set(mye);const gye={};u&2&&(gye.$$scope={dirty:u,ctx:f}),jw.$set(gye);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),Gw.$set(uA);const hye={};u&2&&(hye.$$scope={dirty:u,ctx:f}),Xw.$set(hye);const pye={};u&2&&(pye.$$scope={dirty:u,ctx:f}),Ww.$set(pye);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),Hw.$set(bA)},i(f){rQe||(E(c.$$.fragment,f),E(Ra.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Gf.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(Ey.$$.fragment,f),E(eh.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(xy.$$.fragment,f),E(Ih.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Fp.$$.fragment,f),E(Tp.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vp.$$.fragment,f),E(Xp.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(Qp.$$.fragment,f),E(Qy.$$.fragment,f),E(Zu.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(o1.$$.fragment,f),E(Ky.$$.fragment,f),E(H1.$$.fragment,f),E(Zy.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(J1.$$.fragment,f),E(t8.$$.fragment,f),E(q7.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(D7.$$.fragment,f),E(i8.$$.fragment,f),E(A2.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(y2.$$.fragment,f),E(g8.$$.fragment,f),E(U2.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(Y2.$$.fragment,f),E(b8.$$.fragment,f),E(Yb.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(Zb.$$.fragment,f),E(E8.$$.fragment,f),E(kv.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(L8.$$.fragment,f),E(Rv.$$.fragment,f),E(y8.$$.fragment,f),E(Gv.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(Vv.$$.fragment,f),E(R8.$$.fragment,f),E(LF.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(N8.$$.fragment,f),E(xF.$$.fragment,f),E(q8.$$.fragment,f),E(v6.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(T6.$$.fragment,f),E(V8.$$.fragment,f),E(C6.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(A6.$$.fragment,f),E(H8.$$.fragment,f),E(G6.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(V6.$$.fragment,f),E(Z8.$$.fragment,f),E(W6.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(H6.$$.fragment,f),E(a9.$$.fragment,f),E(Y6.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(Z6.$$.fragment,f),E(d9.$$.fragment,f),E(cT.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(mT.$$.fragment,f),E(h9.$$.fragment,f),E(FT.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(MT.$$.fragment,f),E(v9.$$.fragment,f),E(PT.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(IT.$$.fragment,f),E(C9.$$.fragment,f),E(DT.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(OT.$$.fragment,f),E($9.$$.fragment,f),E(UT.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(YT.$$.fragment,f),E(B9.$$.fragment,f),E(rM.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(aM.$$.fragment,f),E(D9.$$.fragment,f),E(iM.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(cM.$$.fragment,f),E(W9.$$.fragment,f),E(gM.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(pM.$$.fragment,f),E(Y9.$$.fragment,f),E(MM.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(CM.$$.fragment,f),E(rx.$$.fragment,f),E(LM.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(xM.$$.fragment,f),E(lx.$$.fragment,f),E(A4.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(y4.$$.fragment,f),E(mx.$$.fragment,f),E(K4.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(eE.$$.fragment,f),E(ux.$$.fragment,f),E(hE.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(_E.$$.fragment,f),E(Mx.$$.fragment,f),E(CE.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(AE.$$.fragment,f),E(Lx.$$.fragment,f),E(QE.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(UE.$$.fragment,f),E(Sx.$$.fragment,f),E(sC.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(iC.$$.fragment,f),E(Nx.$$.fragment,f),E(BC.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(NC.$$.fragment,f),E(Ox.$$.fragment,f),E(o5.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(t5.$$.fragment,f),E(Qx.$$.fragment,f),E(s5.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(i5.$$.fragment,f),E(Zx.$$.fragment,f),E(c5.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(m5.$$.fragment,f),E(a$.$$.fragment,f),E(R5.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(B5.$$.fragment,f),E(d$.$$.fragment,f),E(r3.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(a3.$$.fragment,f),E(h$.$$.fragment,f),E(s3.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(i3.$$.fragment,f),E(v$.$$.fragment,f),E(c3.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(m3.$$.fragment,f),E(C$.$$.fragment,f),E(D3.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(O3.$$.fragment,f),E(x$.$$.fragment,f),E(Z3.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(o0.$$.fragment,f),E(P$.$$.fragment,f),E(p0.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(u0.$$.fragment,f),E(j$.$$.fragment,f),E(y0.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E($0.$$.fragment,f),E(X$.$$.fragment,f),E(G0.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(V0.$$.fragment,f),E(U$.$$.fragment,f),E(ew.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(rw.$$.fragment,f),E(ek.$$.fragment,f),E(gw.$$.fragment,f),E(ok.$$.fragment,f),E(rk.$$.fragment,f),E(ak.$$.fragment,f),E(pw.$$.fragment,f),E(nk.$$.fragment,f),E(Cw.$$.fragment,f),E(sk.$$.fragment,f),E(lk.$$.fragment,f),E(dk.$$.fragment,f),E(Aw.$$.fragment,f),E(ck.$$.fragment,f),E(Bw.$$.fragment,f),E(fk.$$.fragment,f),E(mk.$$.fragment,f),E(hk.$$.fragment,f),E(Nw.$$.fragment,f),E(pk.$$.fragment,f),E(jw.$$.fragment,f),E(_k.$$.fragment,f),E(uk.$$.fragment,f),E(vk.$$.fragment,f),E(Gw.$$.fragment,f),E(Fk.$$.fragment,f),E(Xw.$$.fragment,f),E(Mk.$$.fragment,f),E(Ek.$$.fragment,f),E(wk.$$.fragment,f),E(Ww.$$.fragment,f),E(Ak.$$.fragment,f),E(Hw.$$.fragment,f),rQe=!0)},o(f){C(c.$$.fragment,f),C(Ra.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Gf.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(Ey.$$.fragment,f),C(eh.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(xy.$$.fragment,f),C(Ih.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Fp.$$.fragment,f),C(Tp.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vp.$$.fragment,f),C(Xp.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(Qp.$$.fragment,f),C(Qy.$$.fragment,f),C(Zu.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(o1.$$.fragment,f),C(Ky.$$.fragment,f),C(H1.$$.fragment,f),C(Zy.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(J1.$$.fragment,f),C(t8.$$.fragment,f),C(q7.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(D7.$$.fragment,f),C(i8.$$.fragment,f),C(A2.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(y2.$$.fragment,f),C(g8.$$.fragment,f),C(U2.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(Y2.$$.fragment,f),C(b8.$$.fragment,f),C(Yb.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(Zb.$$.fragment,f),C(E8.$$.fragment,f),C(kv.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(L8.$$.fragment,f),C(Rv.$$.fragment,f),C(y8.$$.fragment,f),C(Gv.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(Vv.$$.fragment,f),C(R8.$$.fragment,f),C(LF.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(N8.$$.fragment,f),C(xF.$$.fragment,f),C(q8.$$.fragment,f),C(v6.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(T6.$$.fragment,f),C(V8.$$.fragment,f),C(C6.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(A6.$$.fragment,f),C(H8.$$.fragment,f),C(G6.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(V6.$$.fragment,f),C(Z8.$$.fragment,f),C(W6.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(H6.$$.fragment,f),C(a9.$$.fragment,f),C(Y6.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(Z6.$$.fragment,f),C(d9.$$.fragment,f),C(cT.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(mT.$$.fragment,f),C(h9.$$.fragment,f),C(FT.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(MT.$$.fragment,f),C(v9.$$.fragment,f),C(PT.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(IT.$$.fragment,f),C(C9.$$.fragment,f),C(DT.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(OT.$$.fragment,f),C($9.$$.fragment,f),C(UT.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(YT.$$.fragment,f),C(B9.$$.fragment,f),C(rM.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(aM.$$.fragment,f),C(D9.$$.fragment,f),C(iM.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(cM.$$.fragment,f),C(W9.$$.fragment,f),C(gM.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(pM.$$.fragment,f),C(Y9.$$.fragment,f),C(MM.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(CM.$$.fragment,f),C(rx.$$.fragment,f),C(LM.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(xM.$$.fragment,f),C(lx.$$.fragment,f),C(A4.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(y4.$$.fragment,f),C(mx.$$.fragment,f),C(K4.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(eE.$$.fragment,f),C(ux.$$.fragment,f),C(hE.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(_E.$$.fragment,f),C(Mx.$$.fragment,f),C(CE.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(AE.$$.fragment,f),C(Lx.$$.fragment,f),C(QE.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(UE.$$.fragment,f),C(Sx.$$.fragment,f),C(sC.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(iC.$$.fragment,f),C(Nx.$$.fragment,f),C(BC.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(NC.$$.fragment,f),C(Ox.$$.fragment,f),C(o5.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(t5.$$.fragment,f),C(Qx.$$.fragment,f),C(s5.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(i5.$$.fragment,f),C(Zx.$$.fragment,f),C(c5.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(m5.$$.fragment,f),C(a$.$$.fragment,f),C(R5.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(B5.$$.fragment,f),C(d$.$$.fragment,f),C(r3.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(a3.$$.fragment,f),C(h$.$$.fragment,f),C(s3.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(i3.$$.fragment,f),C(v$.$$.fragment,f),C(c3.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(m3.$$.fragment,f),C(C$.$$.fragment,f),C(D3.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(O3.$$.fragment,f),C(x$.$$.fragment,f),C(Z3.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(o0.$$.fragment,f),C(P$.$$.fragment,f),C(p0.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(u0.$$.fragment,f),C(j$.$$.fragment,f),C(y0.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C($0.$$.fragment,f),C(X$.$$.fragment,f),C(G0.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(V0.$$.fragment,f),C(U$.$$.fragment,f),C(ew.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(rw.$$.fragment,f),C(ek.$$.fragment,f),C(gw.$$.fragment,f),C(ok.$$.fragment,f),C(rk.$$.fragment,f),C(ak.$$.fragment,f),C(pw.$$.fragment,f),C(nk.$$.fragment,f),C(Cw.$$.fragment,f),C(sk.$$.fragment,f),C(lk.$$.fragment,f),C(dk.$$.fragment,f),C(Aw.$$.fragment,f),C(ck.$$.fragment,f),C(Bw.$$.fragment,f),C(fk.$$.fragment,f),C(mk.$$.fragment,f),C(hk.$$.fragment,f),C(Nw.$$.fragment,f),C(pk.$$.fragment,f),C(jw.$$.fragment,f),C(_k.$$.fragment,f),C(uk.$$.fragment,f),C(vk.$$.fragment,f),C(Gw.$$.fragment,f),C(Fk.$$.fragment,f),C(Xw.$$.fragment,f),C(Mk.$$.fragment,f),C(Ek.$$.fragment,f),C(wk.$$.fragment,f),C(Ww.$$.fragment,f),C(Ak.$$.fragment,f),C(Hw.$$.fragment,f),rQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(c),f&&t(If),f&&t(lt),f&&t(Oe),f&&t(Qe),f&&t(qf),w(Ra,f),f&&t(He),f&&t(Ae),f&&t(Ao),f&&t(Pa),f&&t(YXe),f&&t(Ii),w(uy),f&&t(KXe),f&&t(jn),f&&t(ZXe),w(by,f),f&&t(eze),f&&t(oR),f&&t(oze),w(Gf,f),f&&t(rze),f&&t(Ni),w(vy),f&&t(tze),f&&t(Lo),w(Fy),w(Ey),w(eh),w(Cy),f&&t(aze),f&&t(ji),w(wy),f&&t(nze),f&&t(yo),w(Ay),w(xy),w(Ih),w($y),f&&t(sze),f&&t(Di),w(ky),f&&t(lze),f&&t(xo),w(Sy),w(By),w(Fp),w(Tp),w(Iy),f&&t(ize),f&&t(Gi),w(Ny),f&&t(dze),f&&t($o),w(qy),w(Gy),w(Vp),w(Xp),w(Oy),f&&t(cze),f&&t(Vi),w(Vy),f&&t(fze),f&&t(ko),w(Xy),w(Wy),w(Qp),w(Qy),w(Zu),f&&t(mze),f&&t(Wi),w(Hy),f&&t(gze),f&&t(So),w(Uy),w(Yy),w(o1),w(Ky),w(H1),f&&t(hze),f&&t(Ui),w(Zy),f&&t(pze),f&&t(Ro),w(e8),w(r8),w(J1),w(t8),w(q7),f&&t(_ze),f&&t(Ki),w(a8),f&&t(uze),f&&t(Po),w(n8),w(l8),w(D7),w(i8),w(A2),f&&t(bze),f&&t(od),w(d8),f&&t(vze),f&&t(Bo),w(c8),w(m8),w(y2),w(g8),w(U2),f&&t(Fze),f&&t(ad),w(h8),f&&t(Tze),f&&t(Io),w(p8),w(u8),w(Y2),w(b8),w(Yb),f&&t(Mze),f&&t(ld),w(v8),f&&t(Eze),f&&t(No),w(F8),w(M8),w(Zb),w(E8),w(kv),f&&t(Cze),f&&t(cd),w(C8),f&&t(wze),f&&t(qo),w(w8),w(L8),w(Rv),w(y8),w(Gv),f&&t(Aze),f&&t(gd),w(x8),f&&t(Lze),f&&t(Do),w($8),w(S8),w(Vv),w(R8),w(LF),f&&t(yze),f&&t(_d),w(P8),f&&t(xze),f&&t(Go),w(B8),w(N8),w(xF),w(q8),w(v6),f&&t($ze),f&&t(vd),w(j8),f&&t(kze),f&&t(Oo),w(D8),w(O8),w(T6),w(V8),w(C6),f&&t(Sze),f&&t(Md),w(X8),f&&t(Rze),f&&t(Vo),w(z8),w(Q8),w(A6),w(H8),w(G6),f&&t(Pze),f&&t(wd),w(U8),f&&t(Bze),f&&t(Xo),w(J8),w(K8),w(V6),w(Z8),w(W6),f&&t(Ize),f&&t(yd),w(e9),f&&t(Nze),f&&t(zo),w(o9),w(t9),w(H6),w(a9),w(Y6),f&&t(qze),f&&t(kd),w(n9),f&&t(jze),f&&t(Wo),w(s9),w(i9),w(Z6),w(d9),w(cT),f&&t(Dze),f&&t(Pd),w(c9),f&&t(Gze),f&&t(Qo),w(f9),w(g9),w(mT),w(h9),w(FT),f&&t(Oze),f&&t(Nd),w(p9),f&&t(Vze),f&&t(Uo),w(_9),w(b9),w(MT),w(v9),w(PT),f&&t(Xze),f&&t(Dd),w(F9),f&&t(zze),f&&t(Jo),w(T9),w(E9),w(IT),w(C9),w(DT),f&&t(Wze),f&&t(Vd),w(A9),f&&t(Qze),f&&t(Yo),w(L9),w(x9),w(OT),w($9),w(UT),f&&t(Hze),f&&t(Wd),w(k9),f&&t(Uze),f&&t(Ko),w(S9),w(P9),w(YT),w(B9),w(rM),f&&t(Jze),f&&t(Jd),w(I9),f&&t(Yze),f&&t(Zo),w(N9),w(j9),w(aM),w(D9),w(iM),f&&t(Kze),f&&t(Zd),w(O9),f&&t(Zze),f&&t(er),w(V9),w(z9),w(cM),w(W9),w(gM),f&&t(eWe),f&&t(rc),w(Q9),f&&t(oWe),f&&t(or),w(H9),w(J9),w(pM),w(Y9),w(MM),f&&t(rWe),f&&t(nc),w(K9),f&&t(tWe),f&&t(rr),w(Z9),w(ox),w(CM),w(rx),w(LM),f&&t(aWe),f&&t(ic),w(tx),f&&t(nWe),f&&t(tr),w(ax),w(sx),w(xM),w(lx),w(A4),f&&t(sWe),f&&t(fc),w(ix),f&&t(lWe),f&&t(ar),w(dx),w(fx),w(y4),w(mx),w(K4),f&&t(iWe),f&&t(hc),w(gx),f&&t(dWe),f&&t(nr),w(hx),w(_x),w(eE),w(ux),w(hE),f&&t(cWe),f&&t(uc),w(bx),f&&t(fWe),f&&t(sr),w(vx),w(Tx),w(_E),w(Mx),w(CE),f&&t(mWe),f&&t(Fc),w(Ex),f&&t(gWe),f&&t(lr),w(Cx),w(Ax),w(AE),w(Lx),w(QE),f&&t(hWe),f&&t(Ec),w(yx),f&&t(pWe),f&&t(ir),w(xx),w(kx),w(UE),w(Sx),w(sC),f&&t(_We),f&&t(Ac),w(Rx),f&&t(uWe),f&&t(dr),w(Px),w(Ix),w(iC),w(Nx),w(BC),f&&t(bWe),f&&t(xc),w(qx),f&&t(vWe),f&&t(cr),w(jx),w(Gx),w(NC),w(Ox),w(o5),f&&t(FWe),f&&t(Sc),w(Vx),f&&t(TWe),f&&t(fr),w(Xx),w(Wx),w(t5),w(Qx),w(s5),f&&t(MWe),f&&t(Bc),w(Ux),f&&t(EWe),f&&t(mr),w(Jx),w(Kx),w(i5),w(Zx),w(c5),f&&t(CWe),f&&t(qc),w(e$),f&&t(wWe),f&&t(gr),w(o$),w(t$),w(m5),w(a$),w(R5),f&&t(AWe),f&&t(Gc),w(n$),f&&t(LWe),f&&t(hr),w(s$),w(i$),w(B5),w(d$),w(r3),f&&t(yWe),f&&t(Xc),w(c$),f&&t(xWe),f&&t(pr),w(f$),w(g$),w(a3),w(h$),w(s3),f&&t($We),f&&t(Qc),w(p$),f&&t(kWe),f&&t(_r),w(_$),w(b$),w(i3),w(v$),w(c3),f&&t(SWe),f&&t(Jc),w(F$),f&&t(RWe),f&&t(ur),w(T$),w(E$),w(m3),w(C$),w(D3),f&&t(PWe),f&&t(Zc),w(w$),f&&t(BWe),f&&t(br),w(A$),w(y$),w(O3),w(x$),w(Z3),f&&t(IWe),f&&t(rf),w($$),f&&t(NWe),f&&t(vr),w(k$),w(R$),w(o0),w(P$),w(p0),f&&t(qWe),f&&t(nf),w(B$),f&&t(jWe),f&&t(Fr),w(I$),w(q$),w(u0),w(j$),w(y0),f&&t(DWe),f&&t(df),w(D$),f&&t(GWe),f&&t(Tr),w(G$),w(V$),w($0),w(X$),w(G0),f&&t(OWe),f&&t(mf),w(z$),f&&t(VWe),f&&t(Mr),w(W$),w(H$),w(V0),w(U$),w(ew),f&&t(XWe),f&&t(pf),w(J$),f&&t(zWe),f&&t(Er),w(Y$),w(Z$),w(rw),w(ek),w(gw),f&&t(WWe),f&&t(bf),w(ok),f&&t(QWe),f&&t(Cr),w(rk),w(ak),w(pw),w(nk),w(Cw),f&&t(HWe),f&&t(Tf),w(sk),f&&t(UWe),f&&t(wr),w(lk),w(dk),w(Aw),w(ck),w(Bw),f&&t(JWe),f&&t(Cf),w(fk),f&&t(YWe),f&&t(Ar),w(mk),w(hk),w(Nw),w(pk),w(jw),f&&t(KWe),f&&t(Lf),w(_k),f&&t(ZWe),f&&t(Lr),w(uk),w(vk),w(Gw),w(Fk),w(Xw),f&&t(eQe),f&&t($f),w(Mk),f&&t(oQe),f&&t(yr),w(Ek),w(wk),w(Ww),w(Ak),w(Hw)}}}const CYt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function wYt($){return EUt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class SYt extends vUt{constructor(g){super();FUt(this,g,wYt,EYt,TUt,{})}}export{SYt as default,CYt as metadata};
