import{S as Eta,i as Cta,s as wta,e as a,k as l,w as F,t as o,M as Ata,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Lta,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as tmt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function yta($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,gy,om,Oe,Qe,zi,Xn,hy,zn,Wn,py,Wi,Qn,_y,Qi,rm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),em=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),gy=o(")."),om=l(),Oe=a("p"),Qe=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),hy=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),py=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),_y=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rm=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var lP=s(p);m=r(lP,"NewModelConfig"),lP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var iP=s(Oi);em=r(iP,"model_type"),iP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var dP=s(Vi);Xi=r(dP,'"new-model"'),dP.forEach(t),gy=r(Ae,")."),Ae.forEach(t),om=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),hy=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var cP=s(zn);Wn=r(cP,"PreTrainedModel"),cP.forEach(t),py=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tm=s(Wi);Qn=r(tm,"config_class"),tm.forEach(t),_y=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var fP=s(Qi);rm=r(fP,"NewModelConfig"),fP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,em),e(g,ft),e(g,Vi),e(Vi,Xi),e(g,gy),b(Ue,om,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,zi),e(zi,Xn),e(Oe,hy),e(Oe,zn),e(zn,Wn),e(Oe,py),e(Oe,Wi),e(Wi,Qn),e(Oe,_y),e(Oe,Qi),e(Qi,rm),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(om),Ue&&t(Oe)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ena($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ona($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ana($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ina($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _na($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function una($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ena($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ana($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $na($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kna($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,gy,om,Oe,Qe,zi,Xn,hy,zn,Wn,py,Wi,Qn,_y,Qi,rm,ja,Ue,Ae,lP,Ui,iP,dP,Lo,Da,cP,tm,fP,AKe,rUe,Hi,am,Xse,uy,LKe,zse,yKe,tUe,Un,xKe,Wse,$Ke,kKe,Qse,SKe,RKe,aUe,by,nUe,mP,PKe,sUe,nm,lUe,Ji,sm,Use,vy,BKe,Hse,IKe,iUe,yo,Fy,NKe,Ty,qKe,gP,jKe,DKe,GKe,My,OKe,Jse,VKe,XKe,zKe,kr,Ey,WKe,Yse,QKe,UKe,Yi,HKe,Kse,JKe,YKe,Zse,KKe,ZKe,eZe,A,lm,ele,oZe,rZe,hP,tZe,aZe,nZe,im,ole,sZe,lZe,pP,iZe,dZe,cZe,dm,rle,fZe,mZe,_P,gZe,hZe,pZe,cm,tle,_Ze,uZe,uP,bZe,vZe,FZe,fm,ale,TZe,MZe,bP,EZe,CZe,wZe,mm,nle,AZe,LZe,vP,yZe,xZe,$Ze,gm,sle,kZe,SZe,FP,RZe,PZe,BZe,hm,lle,IZe,NZe,TP,qZe,jZe,DZe,pm,ile,GZe,OZe,MP,VZe,XZe,zZe,_m,dle,WZe,QZe,EP,UZe,HZe,JZe,um,cle,YZe,KZe,CP,ZZe,eeo,oeo,bm,fle,reo,teo,wP,aeo,neo,seo,vm,mle,leo,ieo,AP,deo,ceo,feo,Fm,gle,meo,geo,LP,heo,peo,_eo,Tm,hle,ueo,beo,yP,veo,Feo,Teo,Mm,ple,Meo,Eeo,xP,Ceo,weo,Aeo,Em,_le,Leo,yeo,$P,xeo,$eo,keo,Cm,ule,Seo,Reo,kP,Peo,Beo,Ieo,wm,ble,Neo,qeo,SP,jeo,Deo,Geo,Am,vle,Oeo,Veo,RP,Xeo,zeo,Weo,Lm,Fle,Qeo,Ueo,PP,Heo,Jeo,Yeo,ym,Tle,Keo,Zeo,BP,eoo,ooo,roo,xm,Mle,too,aoo,IP,noo,soo,loo,$m,Ele,ioo,doo,NP,coo,foo,moo,km,Cle,goo,hoo,qP,poo,_oo,uoo,Sm,wle,boo,voo,jP,Foo,Too,Moo,Rm,Ale,Eoo,Coo,DP,woo,Aoo,Loo,Pm,Lle,yoo,xoo,GP,$oo,koo,Soo,Bm,yle,Roo,Poo,OP,Boo,Ioo,Noo,Im,xle,qoo,joo,VP,Doo,Goo,Ooo,Nm,$le,Voo,Xoo,XP,zoo,Woo,Qoo,qm,kle,Uoo,Hoo,zP,Joo,Yoo,Koo,jm,Sle,Zoo,ero,WP,oro,rro,tro,Dm,Rle,aro,nro,QP,sro,lro,iro,Gm,Ple,dro,cro,UP,fro,mro,gro,Om,Ble,hro,pro,HP,_ro,uro,bro,Vm,Ile,vro,Fro,JP,Tro,Mro,Ero,Xm,Nle,Cro,wro,YP,Aro,Lro,yro,zm,qle,xro,$ro,KP,kro,Sro,Rro,Wm,jle,Pro,Bro,ZP,Iro,Nro,qro,Qm,Dle,jro,Dro,eB,Gro,Oro,Vro,Um,Gle,Xro,zro,oB,Wro,Qro,Uro,Hm,Ole,Hro,Jro,rB,Yro,Kro,Zro,Jm,Vle,eto,oto,tB,rto,tto,ato,Ym,Xle,nto,sto,aB,lto,ito,dto,Km,zle,cto,fto,nB,mto,gto,hto,Zm,Wle,pto,_to,sB,uto,bto,vto,eg,Qle,Fto,Tto,lB,Mto,Eto,Cto,og,Ule,wto,Ato,iB,Lto,yto,xto,rg,Hle,$to,kto,dB,Sto,Rto,Pto,tg,Jle,Bto,Ito,cB,Nto,qto,jto,ag,Yle,Dto,Gto,fB,Oto,Vto,Xto,ng,Kle,zto,Wto,mB,Qto,Uto,Hto,sg,Zle,Jto,Yto,gB,Kto,Zto,eao,lg,eie,oao,rao,hB,tao,aao,nao,ig,oie,sao,lao,pB,iao,dao,cao,dg,rie,fao,mao,_B,gao,hao,pao,cg,tie,_ao,uao,uB,bao,vao,Fao,fg,aie,Tao,Mao,bB,Eao,Cao,wao,mg,nie,Aao,Lao,vB,yao,xao,$ao,gg,sie,kao,Sao,FB,Rao,Pao,Bao,hg,lie,Iao,Nao,TB,qao,jao,Dao,pg,iie,Gao,Oao,MB,Vao,Xao,zao,_g,die,Wao,Qao,EB,Uao,Hao,Jao,ug,cie,Yao,Kao,CB,Zao,eno,ono,bg,fie,rno,tno,wB,ano,nno,sno,vg,mie,lno,ino,AB,dno,cno,fno,Fg,gie,mno,gno,LB,hno,pno,_no,Tg,hie,uno,bno,yB,vno,Fno,Tno,Mg,pie,Mno,Eno,xB,Cno,wno,Ano,Eg,_ie,Lno,yno,$B,xno,$no,kno,Cg,uie,Sno,Rno,kB,Pno,Bno,Ino,wg,bie,Nno,qno,SB,jno,Dno,Gno,Ag,vie,Ono,Vno,RB,Xno,zno,Wno,Lg,Fie,Qno,Uno,PB,Hno,Jno,Yno,yg,Tie,Kno,Zno,BB,eso,oso,rso,xg,Mie,tso,aso,IB,nso,sso,lso,$g,Eie,iso,dso,NB,cso,fso,mso,kg,Cie,gso,hso,qB,pso,_so,uso,Sg,wie,bso,vso,jB,Fso,Tso,Mso,Rg,Aie,Eso,Cso,DB,wso,Aso,Lso,Pg,Lie,yso,xso,GB,$so,kso,Sso,Bg,yie,Rso,Pso,OB,Bso,Iso,Nso,Ig,xie,qso,jso,VB,Dso,Gso,Oso,Ng,$ie,Vso,Xso,XB,zso,Wso,Qso,qg,kie,Uso,Hso,zB,Jso,Yso,Kso,jg,Sie,Zso,elo,WB,olo,rlo,tlo,Dg,Rie,alo,nlo,QB,slo,llo,ilo,Gg,Pie,dlo,clo,UB,flo,mlo,glo,Og,Bie,hlo,plo,HB,_lo,ulo,blo,Vg,Iie,vlo,Flo,JB,Tlo,Mlo,Elo,Xg,Nie,Clo,wlo,YB,Alo,Llo,ylo,zg,qie,xlo,$lo,KB,klo,Slo,Rlo,Wg,jie,Plo,Blo,ZB,Ilo,Nlo,qlo,Qg,Die,jlo,Dlo,eI,Glo,Olo,Vlo,Ug,Gie,Xlo,zlo,oI,Wlo,Qlo,Ulo,Hg,Oie,Hlo,Jlo,rI,Ylo,Klo,Zlo,Jg,Vie,eio,oio,tI,rio,tio,aio,Yg,Xie,nio,sio,aI,lio,iio,dio,Kg,zie,cio,fio,nI,mio,gio,hio,Zg,Wie,pio,_io,sI,uio,bio,vio,eh,Qie,Fio,Tio,lI,Mio,Eio,Cio,oh,Uie,wio,Aio,iI,Lio,yio,xio,rh,Hie,$io,kio,dI,Sio,Rio,Pio,th,Jie,Bio,Iio,cI,Nio,qio,jio,ah,Yie,Dio,Gio,fI,Oio,Vio,Xio,nh,Kie,zio,Wio,mI,Qio,Uio,Hio,sh,Zie,Jio,Yio,gI,Kio,Zio,edo,lh,ede,odo,rdo,hI,tdo,ado,ndo,ih,ode,sdo,ldo,pI,ido,ddo,cdo,dh,rde,fdo,mdo,_I,gdo,hdo,pdo,ch,tde,_do,udo,uI,bdo,vdo,Fdo,fh,ade,Tdo,Mdo,bI,Edo,Cdo,wdo,mh,nde,Ado,Ldo,vI,ydo,xdo,$do,gh,sde,kdo,Sdo,FI,Rdo,Pdo,Bdo,hh,lde,Ido,Ndo,TI,qdo,jdo,Ddo,ph,ide,Gdo,Odo,MI,Vdo,Xdo,zdo,_h,dde,Wdo,Qdo,EI,Udo,Hdo,Jdo,uh,cde,Ydo,Kdo,CI,Zdo,eco,oco,bh,fde,rco,tco,wI,aco,nco,sco,vh,mde,lco,ico,AI,dco,cco,fco,Fh,gde,mco,gco,LI,hco,pco,_co,Th,uco,Mh,Cy,bco,hde,vco,dUe,Ki,Eh,pde,wy,Fco,_de,Tco,cUe,xo,Ay,Mco,Ly,Eco,yI,Cco,wco,Aco,yy,Lco,ude,yco,xco,$co,Sr,xy,kco,bde,Sco,Rco,Ga,Pco,vde,Bco,Ico,Fde,Nco,qco,Tde,jco,Dco,Gco,k,Hn,Mde,Oco,Vco,xI,Xco,zco,$I,Wco,Qco,Uco,Jn,Ede,Hco,Jco,kI,Yco,Kco,SI,Zco,efo,ofo,Yn,Cde,rfo,tfo,RI,afo,nfo,PI,sfo,lfo,ifo,Ch,wde,dfo,cfo,BI,ffo,mfo,gfo,Kn,Ade,hfo,pfo,II,_fo,ufo,NI,bfo,vfo,Ffo,wh,Lde,Tfo,Mfo,qI,Efo,Cfo,wfo,Ah,yde,Afo,Lfo,jI,yfo,xfo,$fo,Lh,xde,kfo,Sfo,DI,Rfo,Pfo,Bfo,Zn,$de,Ifo,Nfo,GI,qfo,jfo,OI,Dfo,Gfo,Ofo,es,kde,Vfo,Xfo,VI,zfo,Wfo,XI,Qfo,Ufo,Hfo,os,Sde,Jfo,Yfo,zI,Kfo,Zfo,WI,emo,omo,rmo,yh,Rde,tmo,amo,QI,nmo,smo,lmo,xh,Pde,imo,dmo,UI,cmo,fmo,mmo,$h,Bde,gmo,hmo,HI,pmo,_mo,umo,rs,Ide,bmo,vmo,JI,Fmo,Tmo,YI,Mmo,Emo,Cmo,kh,Nde,wmo,Amo,KI,Lmo,ymo,xmo,ts,qde,$mo,kmo,ZI,Smo,Rmo,eN,Pmo,Bmo,Imo,as,jde,Nmo,qmo,oN,jmo,Dmo,rN,Gmo,Omo,Vmo,ns,Dde,Xmo,zmo,tN,Wmo,Qmo,aN,Umo,Hmo,Jmo,ss,Gde,Ymo,Kmo,nN,Zmo,ego,sN,ogo,rgo,tgo,Sh,Ode,ago,ngo,lN,sgo,lgo,igo,ls,Vde,dgo,cgo,iN,fgo,mgo,dN,ggo,hgo,pgo,is,Xde,_go,ugo,cN,bgo,vgo,fN,Fgo,Tgo,Mgo,ds,zde,Ego,Cgo,mN,wgo,Ago,gN,Lgo,ygo,xgo,cs,Wde,$go,kgo,hN,Sgo,Rgo,pN,Pgo,Bgo,Igo,fs,Qde,Ngo,qgo,_N,jgo,Dgo,uN,Ggo,Ogo,Vgo,ms,Ude,Xgo,zgo,bN,Wgo,Qgo,vN,Ugo,Hgo,Jgo,Rh,Hde,Ygo,Kgo,FN,Zgo,eho,oho,gs,Jde,rho,tho,TN,aho,nho,MN,sho,lho,iho,Ph,Yde,dho,cho,EN,fho,mho,gho,hs,Kde,hho,pho,CN,_ho,uho,wN,bho,vho,Fho,ps,Zde,Tho,Mho,AN,Eho,Cho,LN,who,Aho,Lho,_s,ece,yho,xho,yN,$ho,kho,xN,Sho,Rho,Pho,Bh,oce,Bho,Iho,$N,Nho,qho,jho,us,rce,Dho,Gho,kN,Oho,Vho,SN,Xho,zho,Who,bs,tce,Qho,Uho,RN,Hho,Jho,PN,Yho,Kho,Zho,vs,ace,epo,opo,BN,rpo,tpo,IN,apo,npo,spo,Ih,nce,lpo,ipo,NN,dpo,cpo,fpo,Fs,sce,mpo,gpo,qN,hpo,ppo,jN,_po,upo,bpo,Ts,lce,vpo,Fpo,DN,Tpo,Mpo,GN,Epo,Cpo,wpo,Ms,ice,Apo,Lpo,ON,ypo,xpo,VN,$po,kpo,Spo,Es,dce,Rpo,Ppo,XN,Bpo,Ipo,zN,Npo,qpo,jpo,Cs,cce,Dpo,Gpo,WN,Opo,Vpo,QN,Xpo,zpo,Wpo,ws,fce,Qpo,Upo,UN,Hpo,Jpo,HN,Ypo,Kpo,Zpo,As,mce,e_o,o_o,JN,r_o,t_o,YN,a_o,n_o,s_o,Ls,gce,l_o,i_o,KN,d_o,c_o,ZN,f_o,m_o,g_o,Nh,hce,h_o,p_o,eq,__o,u_o,b_o,ys,pce,v_o,F_o,oq,T_o,M_o,rq,E_o,C_o,w_o,qh,_ce,A_o,L_o,tq,y_o,x_o,$_o,jh,uce,k_o,S_o,aq,R_o,P_o,B_o,xs,bce,I_o,N_o,nq,q_o,j_o,sq,D_o,G_o,O_o,$s,vce,V_o,X_o,lq,z_o,W_o,iq,Q_o,U_o,H_o,ks,Fce,J_o,Y_o,dq,K_o,Z_o,cq,euo,ouo,ruo,Dh,Tce,tuo,auo,fq,nuo,suo,luo,Ss,Mce,iuo,duo,mq,cuo,fuo,gq,muo,guo,huo,Rs,Ece,puo,_uo,hq,uuo,buo,pq,vuo,Fuo,Tuo,Ps,Cce,Muo,Euo,_q,Cuo,wuo,uq,Auo,Luo,yuo,Bs,wce,xuo,$uo,bq,kuo,Suo,vq,Ruo,Puo,Buo,Is,Ace,Iuo,Nuo,Fq,quo,juo,Tq,Duo,Guo,Ouo,Ns,Lce,Vuo,Xuo,Mq,zuo,Wuo,Eq,Quo,Uuo,Huo,qs,yce,Juo,Yuo,Cq,Kuo,Zuo,wq,e1o,o1o,r1o,js,xce,t1o,a1o,Aq,n1o,s1o,Lq,l1o,i1o,d1o,Gh,$ce,c1o,f1o,yq,m1o,g1o,h1o,Ds,kce,p1o,_1o,xq,u1o,b1o,$q,v1o,F1o,T1o,Gs,Sce,M1o,E1o,kq,C1o,w1o,Sq,A1o,L1o,y1o,Oh,Rce,x1o,$1o,Rq,k1o,S1o,R1o,Vh,Pce,P1o,B1o,Pq,I1o,N1o,q1o,Xh,Bce,j1o,D1o,Bq,G1o,O1o,V1o,zh,Ice,X1o,z1o,Iq,W1o,Q1o,U1o,Os,Nce,H1o,J1o,Nq,Y1o,K1o,qq,Z1o,e8o,o8o,Wh,qce,r8o,t8o,jq,a8o,n8o,s8o,Vs,jce,l8o,i8o,Dq,d8o,c8o,Gq,f8o,m8o,g8o,Xs,Dce,h8o,p8o,Oq,_8o,u8o,Vq,b8o,v8o,F8o,zs,Gce,T8o,M8o,Xq,E8o,C8o,zq,w8o,A8o,L8o,Ws,Oce,y8o,x8o,Wq,$8o,k8o,Qq,S8o,R8o,P8o,Qs,Vce,B8o,I8o,Uq,N8o,q8o,Hq,j8o,D8o,G8o,Us,Xce,O8o,V8o,Jq,X8o,z8o,Yq,W8o,Q8o,U8o,Qh,zce,H8o,J8o,Kq,Y8o,K8o,Z8o,Uh,Wce,e2o,o2o,Zq,r2o,t2o,a2o,Hs,Qce,n2o,s2o,ej,l2o,i2o,oj,d2o,c2o,f2o,Js,Uce,m2o,g2o,rj,h2o,p2o,tj,_2o,u2o,b2o,Ys,Hce,v2o,F2o,aj,T2o,M2o,nj,E2o,C2o,w2o,Hh,Jce,A2o,L2o,sj,y2o,x2o,$2o,Jh,Yce,k2o,S2o,lj,R2o,P2o,B2o,Yh,Kce,I2o,N2o,ij,q2o,j2o,D2o,Ks,Zce,G2o,O2o,dj,V2o,X2o,cj,z2o,W2o,Q2o,Zs,efe,U2o,H2o,fj,J2o,Y2o,mj,K2o,Z2o,ebo,Kh,ofe,obo,rbo,gj,tbo,abo,nbo,Zh,rfe,sbo,lbo,hj,ibo,dbo,cbo,ep,tfe,fbo,mbo,pj,gbo,hbo,pbo,el,afe,_bo,ubo,_j,bbo,vbo,uj,Fbo,Tbo,Mbo,op,nfe,Ebo,Cbo,bj,wbo,Abo,Lbo,rp,sfe,ybo,xbo,vj,$bo,kbo,Sbo,ol,lfe,Rbo,Pbo,Fj,Bbo,Ibo,Tj,Nbo,qbo,jbo,rl,ife,Dbo,Gbo,Mj,Obo,Vbo,Ej,Xbo,zbo,Wbo,tl,dfe,Qbo,Ubo,Cj,Hbo,Jbo,wj,Ybo,Kbo,Zbo,al,cfe,evo,ovo,Aj,rvo,tvo,Lj,avo,nvo,svo,tp,lvo,ap,$y,ivo,ffe,dvo,fUe,Zi,np,mfe,ky,cvo,gfe,fvo,mUe,$o,Sy,mvo,Ry,gvo,yj,hvo,pvo,_vo,Py,uvo,hfe,bvo,vvo,Fvo,He,By,Tvo,pfe,Mvo,Evo,Oa,Cvo,_fe,wvo,Avo,ufe,Lvo,yvo,bfe,xvo,$vo,kvo,Q,sp,vfe,Svo,Rvo,xj,Pvo,Bvo,Ivo,lp,Ffe,Nvo,qvo,$j,jvo,Dvo,Gvo,ip,Tfe,Ovo,Vvo,kj,Xvo,zvo,Wvo,dp,Mfe,Qvo,Uvo,Sj,Hvo,Jvo,Yvo,cp,Efe,Kvo,Zvo,Rj,eFo,oFo,rFo,fp,Cfe,tFo,aFo,Pj,nFo,sFo,lFo,mp,wfe,iFo,dFo,Bj,cFo,fFo,mFo,gp,Afe,gFo,hFo,Ij,pFo,_Fo,uFo,hp,Lfe,bFo,vFo,Nj,FFo,TFo,MFo,pp,yfe,EFo,CFo,qj,wFo,AFo,LFo,_p,xfe,yFo,xFo,jj,$Fo,kFo,SFo,up,$fe,RFo,PFo,Dj,BFo,IFo,NFo,bp,kfe,qFo,jFo,Gj,DFo,GFo,OFo,vp,Sfe,VFo,XFo,Oj,zFo,WFo,QFo,Fp,Rfe,UFo,HFo,Vj,JFo,YFo,KFo,Tp,Pfe,ZFo,e6o,Xj,o6o,r6o,t6o,Mp,Bfe,a6o,n6o,zj,s6o,l6o,i6o,Ep,Ife,d6o,c6o,Wj,f6o,m6o,g6o,Cp,Nfe,h6o,p6o,Qj,_6o,u6o,b6o,wp,qfe,v6o,F6o,Uj,T6o,M6o,E6o,Ap,jfe,C6o,w6o,Hj,A6o,L6o,y6o,Lp,Dfe,x6o,$6o,Jj,k6o,S6o,R6o,yp,Gfe,P6o,B6o,Yj,I6o,N6o,q6o,xp,Ofe,j6o,D6o,Kj,G6o,O6o,V6o,$p,Vfe,X6o,z6o,Zj,W6o,Q6o,U6o,kp,Xfe,H6o,J6o,eD,Y6o,K6o,Z6o,Sp,zfe,eTo,oTo,oD,rTo,tTo,aTo,Rp,Wfe,nTo,sTo,rD,lTo,iTo,dTo,Pp,Qfe,cTo,fTo,tD,mTo,gTo,hTo,Bp,Ufe,pTo,_To,aD,uTo,bTo,vTo,Ip,Hfe,FTo,TTo,nD,MTo,ETo,CTo,Np,Jfe,wTo,ATo,sD,LTo,yTo,xTo,qp,Yfe,$To,kTo,lD,STo,RTo,PTo,jp,Kfe,BTo,ITo,iD,NTo,qTo,jTo,Dp,Zfe,DTo,GTo,dD,OTo,VTo,XTo,Gp,eme,zTo,WTo,cD,QTo,UTo,HTo,Op,ome,JTo,YTo,fD,KTo,ZTo,e7o,Vp,rme,o7o,r7o,mD,t7o,a7o,n7o,Xp,s7o,zp,l7o,Wp,Iy,i7o,tme,d7o,gUe,ed,Qp,ame,Ny,c7o,nme,f7o,hUe,ko,qy,m7o,jy,g7o,gD,h7o,p7o,_7o,Dy,u7o,sme,b7o,v7o,F7o,Je,Gy,T7o,lme,M7o,E7o,od,C7o,ime,w7o,A7o,dme,L7o,y7o,x7o,ce,Up,cme,$7o,k7o,hD,S7o,R7o,P7o,Hp,fme,B7o,I7o,pD,N7o,q7o,j7o,Jp,mme,D7o,G7o,_D,O7o,V7o,X7o,Yp,gme,z7o,W7o,uD,Q7o,U7o,H7o,Kp,hme,J7o,Y7o,bD,K7o,Z7o,eMo,Zp,pme,oMo,rMo,vD,tMo,aMo,nMo,e_,_me,sMo,lMo,FD,iMo,dMo,cMo,o_,ume,fMo,mMo,TD,gMo,hMo,pMo,r_,bme,_Mo,uMo,MD,bMo,vMo,FMo,t_,vme,TMo,MMo,ED,EMo,CMo,wMo,a_,Fme,AMo,LMo,CD,yMo,xMo,$Mo,n_,Tme,kMo,SMo,wD,RMo,PMo,BMo,s_,Mme,IMo,NMo,AD,qMo,jMo,DMo,l_,Eme,GMo,OMo,LD,VMo,XMo,zMo,i_,Cme,WMo,QMo,yD,UMo,HMo,JMo,d_,wme,YMo,KMo,xD,ZMo,eEo,oEo,c_,Ame,rEo,tEo,$D,aEo,nEo,sEo,f_,Lme,lEo,iEo,kD,dEo,cEo,fEo,m_,yme,mEo,gEo,SD,hEo,pEo,_Eo,g_,xme,uEo,bEo,RD,vEo,FEo,TEo,h_,MEo,p_,EEo,__,Oy,CEo,$me,wEo,pUe,rd,u_,kme,Vy,AEo,Sme,LEo,_Ue,So,Xy,yEo,td,xEo,PD,$Eo,kEo,BD,SEo,REo,PEo,zy,BEo,Rme,IEo,NEo,qEo,mt,Wy,jEo,Pme,DEo,GEo,ad,OEo,Bme,VEo,XEo,ID,zEo,WEo,QEo,b_,UEo,Ye,Qy,HEo,Ime,JEo,YEo,Va,KEo,Nme,ZEo,e4o,qme,o4o,r4o,jme,t4o,a4o,n4o,y,v_,Dme,s4o,l4o,ND,i4o,d4o,c4o,F_,Gme,f4o,m4o,qD,g4o,h4o,p4o,T_,Ome,_4o,u4o,jD,b4o,v4o,F4o,M_,Vme,T4o,M4o,DD,E4o,C4o,w4o,E_,Xme,A4o,L4o,GD,y4o,x4o,$4o,C_,zme,k4o,S4o,OD,R4o,P4o,B4o,w_,Wme,I4o,N4o,VD,q4o,j4o,D4o,A_,Qme,G4o,O4o,XD,V4o,X4o,z4o,L_,Ume,W4o,Q4o,zD,U4o,H4o,J4o,y_,Hme,Y4o,K4o,WD,Z4o,eCo,oCo,x_,Jme,rCo,tCo,QD,aCo,nCo,sCo,$_,Yme,lCo,iCo,UD,dCo,cCo,fCo,k_,Kme,mCo,gCo,HD,hCo,pCo,_Co,S_,Zme,uCo,bCo,JD,vCo,FCo,TCo,R_,ege,MCo,ECo,YD,CCo,wCo,ACo,P_,oge,LCo,yCo,KD,xCo,$Co,kCo,B_,rge,SCo,RCo,ZD,PCo,BCo,ICo,I_,tge,NCo,qCo,eG,jCo,DCo,GCo,N_,age,OCo,VCo,oG,XCo,zCo,WCo,q_,nge,QCo,UCo,rG,HCo,JCo,YCo,j_,sge,KCo,ZCo,tG,e3o,o3o,r3o,D_,lge,t3o,a3o,aG,n3o,s3o,l3o,G_,ige,i3o,d3o,nG,c3o,f3o,m3o,O_,dge,g3o,h3o,sG,p3o,_3o,u3o,V_,cge,b3o,v3o,lG,F3o,T3o,M3o,X_,fge,E3o,C3o,iG,w3o,A3o,L3o,z_,mge,y3o,x3o,dG,$3o,k3o,S3o,W_,gge,R3o,P3o,cG,B3o,I3o,N3o,Q_,hge,q3o,j3o,fG,D3o,G3o,O3o,U_,pge,V3o,X3o,mG,z3o,W3o,Q3o,H_,_ge,U3o,H3o,gG,J3o,Y3o,K3o,J_,uge,Z3o,e5o,hG,o5o,r5o,t5o,Y_,bge,a5o,n5o,pG,s5o,l5o,i5o,K_,vge,d5o,c5o,_G,f5o,m5o,g5o,Z_,Fge,h5o,p5o,uG,_5o,u5o,b5o,nl,Tge,v5o,F5o,bG,T5o,M5o,vG,E5o,C5o,w5o,eu,Mge,A5o,L5o,FG,y5o,x5o,$5o,ou,Ege,k5o,S5o,TG,R5o,P5o,B5o,ru,Cge,I5o,N5o,MG,q5o,j5o,D5o,tu,wge,G5o,O5o,EG,V5o,X5o,z5o,au,Age,W5o,Q5o,CG,U5o,H5o,J5o,nu,Lge,Y5o,K5o,wG,Z5o,e0o,o0o,su,yge,r0o,t0o,AG,a0o,n0o,s0o,lu,xge,l0o,i0o,LG,d0o,c0o,f0o,iu,$ge,m0o,g0o,yG,h0o,p0o,_0o,du,kge,u0o,b0o,xG,v0o,F0o,T0o,cu,Sge,M0o,E0o,$G,C0o,w0o,A0o,fu,Rge,L0o,y0o,kG,x0o,$0o,k0o,mu,Pge,S0o,R0o,SG,P0o,B0o,I0o,gu,Bge,N0o,q0o,RG,j0o,D0o,G0o,hu,Ige,O0o,V0o,PG,X0o,z0o,W0o,pu,Nge,Q0o,U0o,BG,H0o,J0o,Y0o,_u,qge,K0o,Z0o,IG,ewo,owo,rwo,uu,jge,two,awo,NG,nwo,swo,lwo,bu,Dge,iwo,dwo,qG,cwo,fwo,mwo,vu,Gge,gwo,hwo,jG,pwo,_wo,uwo,Fu,Oge,bwo,vwo,DG,Fwo,Two,Mwo,Tu,Vge,Ewo,Cwo,GG,wwo,Awo,Lwo,Mu,Xge,ywo,xwo,OG,$wo,kwo,Swo,Eu,zge,Rwo,Pwo,VG,Bwo,Iwo,Nwo,Cu,Wge,qwo,jwo,XG,Dwo,Gwo,Owo,wu,Qge,Vwo,Xwo,zG,zwo,Wwo,Qwo,Au,Uge,Uwo,Hwo,WG,Jwo,Ywo,Kwo,Lu,Hge,Zwo,eAo,QG,oAo,rAo,tAo,yu,Jge,aAo,nAo,UG,sAo,lAo,iAo,xu,Yge,dAo,cAo,HG,fAo,mAo,gAo,$u,Kge,hAo,pAo,JG,_Ao,uAo,bAo,ku,Zge,vAo,FAo,YG,TAo,MAo,EAo,Su,ehe,CAo,wAo,KG,AAo,LAo,yAo,Ru,ohe,xAo,$Ao,ZG,kAo,SAo,RAo,Pu,rhe,PAo,BAo,eO,IAo,NAo,qAo,Bu,the,jAo,DAo,oO,GAo,OAo,VAo,Iu,ahe,XAo,zAo,rO,WAo,QAo,UAo,Nu,nhe,HAo,JAo,tO,YAo,KAo,ZAo,qu,she,eLo,oLo,aO,rLo,tLo,aLo,ju,lhe,nLo,sLo,nO,lLo,iLo,dLo,Du,ihe,cLo,fLo,sO,mLo,gLo,hLo,Gu,dhe,pLo,_Lo,lO,uLo,bLo,vLo,Ou,che,FLo,TLo,iO,MLo,ELo,CLo,Vu,fhe,wLo,ALo,dO,LLo,yLo,xLo,Xu,mhe,$Lo,kLo,cO,SLo,RLo,PLo,zu,ghe,BLo,ILo,fO,NLo,qLo,jLo,Wu,hhe,DLo,GLo,mO,OLo,VLo,XLo,Qu,phe,zLo,WLo,gO,QLo,ULo,HLo,Uu,_he,JLo,YLo,hO,KLo,ZLo,eyo,Hu,uhe,oyo,ryo,pO,tyo,ayo,nyo,Ju,bhe,syo,lyo,_O,iyo,dyo,cyo,Yu,vhe,fyo,myo,uO,gyo,hyo,pyo,Ku,Fhe,_yo,uyo,bO,byo,vyo,Fyo,Zu,The,Tyo,Myo,vO,Eyo,Cyo,wyo,e1,Mhe,Ayo,Lyo,FO,yyo,xyo,$yo,o1,Ehe,kyo,Syo,TO,Ryo,Pyo,Byo,r1,Che,Iyo,Nyo,MO,qyo,jyo,Dyo,t1,whe,Gyo,Oyo,EO,Vyo,Xyo,zyo,a1,Ahe,Wyo,Qyo,CO,Uyo,Hyo,Jyo,n1,Lhe,Yyo,Kyo,wO,Zyo,e9o,o9o,s1,yhe,r9o,t9o,AO,a9o,n9o,s9o,l1,xhe,l9o,i9o,LO,d9o,c9o,f9o,i1,$he,m9o,g9o,yO,h9o,p9o,_9o,d1,khe,u9o,b9o,xO,v9o,F9o,T9o,c1,She,M9o,E9o,$O,C9o,w9o,A9o,f1,Rhe,L9o,y9o,kO,x9o,$9o,k9o,m1,Phe,S9o,R9o,SO,P9o,B9o,I9o,g1,Bhe,N9o,q9o,RO,j9o,D9o,G9o,h1,Ihe,O9o,V9o,PO,X9o,z9o,W9o,p1,Nhe,Q9o,U9o,BO,H9o,J9o,Y9o,_1,qhe,K9o,Z9o,IO,exo,oxo,rxo,u1,jhe,txo,axo,NO,nxo,sxo,lxo,b1,Dhe,ixo,dxo,qO,cxo,fxo,mxo,v1,Ghe,gxo,hxo,jO,pxo,_xo,uxo,F1,Ohe,bxo,vxo,DO,Fxo,Txo,Mxo,T1,Vhe,Exo,Cxo,GO,wxo,Axo,Lxo,M1,Xhe,yxo,xxo,OO,$xo,kxo,Sxo,E1,zhe,Rxo,Pxo,VO,Bxo,Ixo,Nxo,C1,Whe,qxo,jxo,XO,Dxo,Gxo,Oxo,w1,Qhe,Vxo,Xxo,zO,zxo,Wxo,Qxo,A1,Uxo,Uhe,Hxo,Jxo,Hhe,Yxo,Kxo,L1,uUe,nd,y1,Jhe,Uy,Zxo,Yhe,e$o,bUe,Ro,Hy,o$o,sd,r$o,WO,t$o,a$o,QO,n$o,s$o,l$o,Jy,i$o,Khe,d$o,c$o,f$o,gt,Yy,m$o,Zhe,g$o,h$o,ld,p$o,epe,_$o,u$o,UO,b$o,v$o,F$o,x1,T$o,Ke,Ky,M$o,ope,E$o,C$o,Xa,w$o,rpe,A$o,L$o,tpe,y$o,x$o,ape,$$o,k$o,S$o,G,$1,npe,R$o,P$o,HO,B$o,I$o,N$o,k1,spe,q$o,j$o,JO,D$o,G$o,O$o,S1,lpe,V$o,X$o,YO,z$o,W$o,Q$o,R1,ipe,U$o,H$o,KO,J$o,Y$o,K$o,P1,dpe,Z$o,eko,ZO,oko,rko,tko,B1,cpe,ako,nko,eV,sko,lko,iko,I1,fpe,dko,cko,oV,fko,mko,gko,N1,mpe,hko,pko,rV,_ko,uko,bko,q1,gpe,vko,Fko,tV,Tko,Mko,Eko,j1,hpe,Cko,wko,aV,Ako,Lko,yko,D1,ppe,xko,$ko,nV,kko,Sko,Rko,G1,_pe,Pko,Bko,sV,Iko,Nko,qko,O1,upe,jko,Dko,lV,Gko,Oko,Vko,V1,bpe,Xko,zko,iV,Wko,Qko,Uko,X1,vpe,Hko,Jko,dV,Yko,Kko,Zko,z1,Fpe,eSo,oSo,cV,rSo,tSo,aSo,W1,Tpe,nSo,sSo,fV,lSo,iSo,dSo,Q1,Mpe,cSo,fSo,mV,mSo,gSo,hSo,U1,Epe,pSo,_So,gV,uSo,bSo,vSo,H1,Cpe,FSo,TSo,hV,MSo,ESo,CSo,J1,wpe,wSo,ASo,pV,LSo,ySo,xSo,Y1,Ape,$So,kSo,_V,SSo,RSo,PSo,K1,Lpe,BSo,ISo,uV,NSo,qSo,jSo,Z1,ype,DSo,GSo,bV,OSo,VSo,XSo,e8,xpe,zSo,WSo,vV,QSo,USo,HSo,o8,$pe,JSo,YSo,FV,KSo,ZSo,eRo,r8,kpe,oRo,rRo,TV,tRo,aRo,nRo,t8,Spe,sRo,lRo,MV,iRo,dRo,cRo,a8,Rpe,fRo,mRo,EV,gRo,hRo,pRo,n8,Ppe,_Ro,uRo,CV,bRo,vRo,FRo,s8,Bpe,TRo,MRo,wV,ERo,CRo,wRo,l8,Ipe,ARo,LRo,AV,yRo,xRo,$Ro,i8,Npe,kRo,SRo,LV,RRo,PRo,BRo,d8,qpe,IRo,NRo,yV,qRo,jRo,DRo,c8,jpe,GRo,ORo,xV,VRo,XRo,zRo,f8,Dpe,WRo,QRo,$V,URo,HRo,JRo,m8,Gpe,YRo,KRo,kV,ZRo,ePo,oPo,g8,Ope,rPo,tPo,SV,aPo,nPo,sPo,h8,Vpe,lPo,iPo,RV,dPo,cPo,fPo,p8,Xpe,mPo,gPo,PV,hPo,pPo,_Po,_8,zpe,uPo,bPo,BV,vPo,FPo,TPo,u8,Wpe,MPo,EPo,IV,CPo,wPo,APo,b8,Qpe,LPo,yPo,NV,xPo,$Po,kPo,v8,Upe,SPo,RPo,qV,PPo,BPo,IPo,F8,Hpe,NPo,qPo,jV,jPo,DPo,GPo,T8,Jpe,OPo,VPo,DV,XPo,zPo,WPo,M8,Ype,QPo,UPo,GV,HPo,JPo,YPo,E8,KPo,Kpe,ZPo,eBo,Zpe,oBo,rBo,C8,vUe,id,w8,e_e,Zy,tBo,o_e,aBo,FUe,Po,e9,nBo,dd,sBo,OV,lBo,iBo,VV,dBo,cBo,fBo,o9,mBo,r_e,gBo,hBo,pBo,ht,r9,_Bo,t_e,uBo,bBo,cd,vBo,a_e,FBo,TBo,XV,MBo,EBo,CBo,A8,wBo,Ze,t9,ABo,n_e,LBo,yBo,za,xBo,s_e,$Bo,kBo,l_e,SBo,RBo,i_e,PBo,BBo,IBo,z,L8,d_e,NBo,qBo,zV,jBo,DBo,GBo,y8,c_e,OBo,VBo,WV,XBo,zBo,WBo,x8,f_e,QBo,UBo,QV,HBo,JBo,YBo,$8,m_e,KBo,ZBo,UV,eIo,oIo,rIo,k8,g_e,tIo,aIo,HV,nIo,sIo,lIo,S8,h_e,iIo,dIo,JV,cIo,fIo,mIo,R8,p_e,gIo,hIo,YV,pIo,_Io,uIo,P8,__e,bIo,vIo,KV,FIo,TIo,MIo,B8,u_e,EIo,CIo,ZV,wIo,AIo,LIo,I8,b_e,yIo,xIo,eX,$Io,kIo,SIo,N8,v_e,RIo,PIo,oX,BIo,IIo,NIo,q8,F_e,qIo,jIo,rX,DIo,GIo,OIo,j8,T_e,VIo,XIo,tX,zIo,WIo,QIo,D8,M_e,UIo,HIo,aX,JIo,YIo,KIo,G8,E_e,ZIo,eNo,nX,oNo,rNo,tNo,O8,C_e,aNo,nNo,sX,sNo,lNo,iNo,V8,w_e,dNo,cNo,lX,fNo,mNo,gNo,X8,A_e,hNo,pNo,iX,_No,uNo,bNo,z8,L_e,vNo,FNo,dX,TNo,MNo,ENo,W8,y_e,CNo,wNo,cX,ANo,LNo,yNo,Q8,x_e,xNo,$No,fX,kNo,SNo,RNo,U8,$_e,PNo,BNo,mX,INo,NNo,qNo,H8,k_e,jNo,DNo,gX,GNo,ONo,VNo,J8,S_e,XNo,zNo,hX,WNo,QNo,UNo,Y8,R_e,HNo,JNo,pX,YNo,KNo,ZNo,K8,P_e,eqo,oqo,_X,rqo,tqo,aqo,Z8,B_e,nqo,sqo,uX,lqo,iqo,dqo,e2,I_e,cqo,fqo,bX,mqo,gqo,hqo,o2,N_e,pqo,_qo,vX,uqo,bqo,vqo,r2,q_e,Fqo,Tqo,FX,Mqo,Eqo,Cqo,t2,j_e,wqo,Aqo,TX,Lqo,yqo,xqo,a2,D_e,$qo,kqo,MX,Sqo,Rqo,Pqo,n2,G_e,Bqo,Iqo,EX,Nqo,qqo,jqo,s2,O_e,Dqo,Gqo,CX,Oqo,Vqo,Xqo,l2,V_e,zqo,Wqo,wX,Qqo,Uqo,Hqo,i2,X_e,Jqo,Yqo,AX,Kqo,Zqo,ejo,d2,z_e,ojo,rjo,LX,tjo,ajo,njo,c2,W_e,sjo,ljo,yX,ijo,djo,cjo,f2,Q_e,fjo,mjo,xX,gjo,hjo,pjo,m2,U_e,_jo,ujo,$X,bjo,vjo,Fjo,g2,Tjo,H_e,Mjo,Ejo,J_e,Cjo,wjo,h2,TUe,fd,p2,Y_e,a9,Ajo,K_e,Ljo,MUe,Bo,n9,yjo,md,xjo,kX,$jo,kjo,SX,Sjo,Rjo,Pjo,s9,Bjo,Z_e,Ijo,Njo,qjo,pt,l9,jjo,eue,Djo,Gjo,gd,Ojo,oue,Vjo,Xjo,RX,zjo,Wjo,Qjo,_2,Ujo,eo,i9,Hjo,rue,Jjo,Yjo,Wa,Kjo,tue,Zjo,eDo,aue,oDo,rDo,nue,tDo,aDo,nDo,U,u2,sue,sDo,lDo,PX,iDo,dDo,cDo,b2,lue,fDo,mDo,BX,gDo,hDo,pDo,v2,iue,_Do,uDo,IX,bDo,vDo,FDo,F2,due,TDo,MDo,NX,EDo,CDo,wDo,T2,cue,ADo,LDo,qX,yDo,xDo,$Do,M2,fue,kDo,SDo,jX,RDo,PDo,BDo,E2,mue,IDo,NDo,DX,qDo,jDo,DDo,C2,gue,GDo,ODo,GX,VDo,XDo,zDo,w2,hue,WDo,QDo,OX,UDo,HDo,JDo,A2,pue,YDo,KDo,VX,ZDo,eGo,oGo,L2,_ue,rGo,tGo,XX,aGo,nGo,sGo,y2,uue,lGo,iGo,zX,dGo,cGo,fGo,x2,bue,mGo,gGo,WX,hGo,pGo,_Go,$2,vue,uGo,bGo,QX,vGo,FGo,TGo,k2,Fue,MGo,EGo,UX,CGo,wGo,AGo,S2,Tue,LGo,yGo,HX,xGo,$Go,kGo,R2,Mue,SGo,RGo,JX,PGo,BGo,IGo,P2,Eue,NGo,qGo,YX,jGo,DGo,GGo,B2,Cue,OGo,VGo,KX,XGo,zGo,WGo,I2,wue,QGo,UGo,ZX,HGo,JGo,YGo,N2,Aue,KGo,ZGo,ez,eOo,oOo,rOo,q2,Lue,tOo,aOo,oz,nOo,sOo,lOo,j2,yue,iOo,dOo,rz,cOo,fOo,mOo,D2,xue,gOo,hOo,tz,pOo,_Oo,uOo,G2,$ue,bOo,vOo,az,FOo,TOo,MOo,O2,kue,EOo,COo,nz,wOo,AOo,LOo,V2,Sue,yOo,xOo,sz,$Oo,kOo,SOo,X2,Rue,ROo,POo,lz,BOo,IOo,NOo,z2,Pue,qOo,jOo,iz,DOo,GOo,OOo,W2,Bue,VOo,XOo,dz,zOo,WOo,QOo,Q2,Iue,UOo,HOo,cz,JOo,YOo,KOo,U2,Nue,ZOo,eVo,fz,oVo,rVo,tVo,H2,que,aVo,nVo,mz,sVo,lVo,iVo,J2,jue,dVo,cVo,Due,fVo,mVo,gVo,Y2,Gue,hVo,pVo,gz,_Vo,uVo,bVo,K2,Oue,vVo,FVo,hz,TVo,MVo,EVo,Z2,Vue,CVo,wVo,pz,AVo,LVo,yVo,eb,Xue,xVo,$Vo,_z,kVo,SVo,RVo,ob,PVo,zue,BVo,IVo,Wue,NVo,qVo,rb,EUe,hd,tb,Que,d9,jVo,Uue,DVo,CUe,Io,c9,GVo,pd,OVo,uz,VVo,XVo,bz,zVo,WVo,QVo,f9,UVo,Hue,HVo,JVo,YVo,_t,m9,KVo,Jue,ZVo,eXo,_d,oXo,Yue,rXo,tXo,vz,aXo,nXo,sXo,ab,lXo,oo,g9,iXo,Kue,dXo,cXo,Qa,fXo,Zue,mXo,gXo,e1e,hXo,pXo,o1e,_Xo,uXo,bXo,he,nb,r1e,vXo,FXo,Fz,TXo,MXo,EXo,sb,t1e,CXo,wXo,Tz,AXo,LXo,yXo,lb,a1e,xXo,$Xo,Mz,kXo,SXo,RXo,ib,n1e,PXo,BXo,Ez,IXo,NXo,qXo,db,s1e,jXo,DXo,Cz,GXo,OXo,VXo,cb,l1e,XXo,zXo,wz,WXo,QXo,UXo,fb,i1e,HXo,JXo,Az,YXo,KXo,ZXo,mb,d1e,ezo,ozo,Lz,rzo,tzo,azo,gb,c1e,nzo,szo,yz,lzo,izo,dzo,hb,f1e,czo,fzo,xz,mzo,gzo,hzo,pb,m1e,pzo,_zo,$z,uzo,bzo,vzo,_b,g1e,Fzo,Tzo,kz,Mzo,Ezo,Czo,ub,h1e,wzo,Azo,Sz,Lzo,yzo,xzo,bb,p1e,$zo,kzo,Rz,Szo,Rzo,Pzo,vb,_1e,Bzo,Izo,Pz,Nzo,qzo,jzo,Fb,u1e,Dzo,Gzo,Bz,Ozo,Vzo,Xzo,Tb,b1e,zzo,Wzo,Iz,Qzo,Uzo,Hzo,Mb,v1e,Jzo,Yzo,Nz,Kzo,Zzo,eWo,Eb,F1e,oWo,rWo,qz,tWo,aWo,nWo,Cb,sWo,T1e,lWo,iWo,M1e,dWo,cWo,wb,wUe,ud,Ab,E1e,h9,fWo,C1e,mWo,AUe,No,p9,gWo,bd,hWo,jz,pWo,_Wo,Dz,uWo,bWo,vWo,_9,FWo,w1e,TWo,MWo,EWo,ut,u9,CWo,A1e,wWo,AWo,vd,LWo,L1e,yWo,xWo,Gz,$Wo,kWo,SWo,Lb,RWo,ro,b9,PWo,y1e,BWo,IWo,Ua,NWo,x1e,qWo,jWo,$1e,DWo,GWo,k1e,OWo,VWo,XWo,N,yb,S1e,zWo,WWo,Oz,QWo,UWo,HWo,xb,R1e,JWo,YWo,Vz,KWo,ZWo,eQo,$b,P1e,oQo,rQo,Xz,tQo,aQo,nQo,kb,B1e,sQo,lQo,zz,iQo,dQo,cQo,Sb,I1e,fQo,mQo,Wz,gQo,hQo,pQo,Rb,N1e,_Qo,uQo,Qz,bQo,vQo,FQo,Pb,q1e,TQo,MQo,Uz,EQo,CQo,wQo,Bb,j1e,AQo,LQo,Hz,yQo,xQo,$Qo,Ib,D1e,kQo,SQo,Jz,RQo,PQo,BQo,Nb,G1e,IQo,NQo,Yz,qQo,jQo,DQo,qb,O1e,GQo,OQo,Kz,VQo,XQo,zQo,jb,V1e,WQo,QQo,Zz,UQo,HQo,JQo,Db,X1e,YQo,KQo,eW,ZQo,eUo,oUo,Gb,z1e,rUo,tUo,oW,aUo,nUo,sUo,Ob,W1e,lUo,iUo,rW,dUo,cUo,fUo,Vb,Q1e,mUo,gUo,tW,hUo,pUo,_Uo,Xb,U1e,uUo,bUo,aW,vUo,FUo,TUo,zb,H1e,MUo,EUo,nW,CUo,wUo,AUo,Wb,J1e,LUo,yUo,sW,xUo,$Uo,kUo,Qb,Y1e,SUo,RUo,lW,PUo,BUo,IUo,Ub,K1e,NUo,qUo,iW,jUo,DUo,GUo,Hb,Z1e,OUo,VUo,dW,XUo,zUo,WUo,Jb,e8e,QUo,UUo,cW,HUo,JUo,YUo,Yb,o8e,KUo,ZUo,fW,eHo,oHo,rHo,Kb,r8e,tHo,aHo,mW,nHo,sHo,lHo,Zb,t8e,iHo,dHo,gW,cHo,fHo,mHo,ev,a8e,gHo,hHo,hW,pHo,_Ho,uHo,ov,n8e,bHo,vHo,pW,FHo,THo,MHo,rv,s8e,EHo,CHo,_W,wHo,AHo,LHo,tv,l8e,yHo,xHo,uW,$Ho,kHo,SHo,av,i8e,RHo,PHo,bW,BHo,IHo,NHo,nv,d8e,qHo,jHo,vW,DHo,GHo,OHo,sv,c8e,VHo,XHo,FW,zHo,WHo,QHo,lv,f8e,UHo,HHo,TW,JHo,YHo,KHo,iv,m8e,ZHo,eJo,MW,oJo,rJo,tJo,dv,g8e,aJo,nJo,EW,sJo,lJo,iJo,cv,h8e,dJo,cJo,CW,fJo,mJo,gJo,fv,p8e,hJo,pJo,wW,_Jo,uJo,bJo,mv,_8e,vJo,FJo,AW,TJo,MJo,EJo,gv,u8e,CJo,wJo,LW,AJo,LJo,yJo,hv,b8e,xJo,$Jo,yW,kJo,SJo,RJo,pv,v8e,PJo,BJo,xW,IJo,NJo,qJo,_v,F8e,jJo,DJo,$W,GJo,OJo,VJo,uv,T8e,XJo,zJo,kW,WJo,QJo,UJo,bv,M8e,HJo,JJo,SW,YJo,KJo,ZJo,vv,E8e,eYo,oYo,RW,rYo,tYo,aYo,Fv,C8e,nYo,sYo,PW,lYo,iYo,dYo,Tv,w8e,cYo,fYo,BW,mYo,gYo,hYo,Mv,A8e,pYo,_Yo,IW,uYo,bYo,vYo,Ev,L8e,FYo,TYo,NW,MYo,EYo,CYo,Cv,y8e,wYo,AYo,qW,LYo,yYo,xYo,wv,x8e,$Yo,kYo,jW,SYo,RYo,PYo,Av,BYo,$8e,IYo,NYo,k8e,qYo,jYo,Lv,LUe,Fd,yv,S8e,v9,DYo,R8e,GYo,yUe,qo,F9,OYo,Td,VYo,DW,XYo,zYo,GW,WYo,QYo,UYo,T9,HYo,P8e,JYo,YYo,KYo,bt,M9,ZYo,B8e,eKo,oKo,Md,rKo,I8e,tKo,aKo,OW,nKo,sKo,lKo,xv,iKo,to,E9,dKo,N8e,cKo,fKo,Ha,mKo,q8e,gKo,hKo,j8e,pKo,_Ko,D8e,uKo,bKo,vKo,Z,$v,G8e,FKo,TKo,VW,MKo,EKo,CKo,kv,O8e,wKo,AKo,XW,LKo,yKo,xKo,Sv,V8e,$Ko,kKo,zW,SKo,RKo,PKo,Rv,X8e,BKo,IKo,WW,NKo,qKo,jKo,Pv,z8e,DKo,GKo,QW,OKo,VKo,XKo,Bv,W8e,zKo,WKo,UW,QKo,UKo,HKo,Iv,Q8e,JKo,YKo,HW,KKo,ZKo,eZo,Nv,U8e,oZo,rZo,JW,tZo,aZo,nZo,qv,H8e,sZo,lZo,YW,iZo,dZo,cZo,jv,J8e,fZo,mZo,KW,gZo,hZo,pZo,Dv,Y8e,_Zo,uZo,ZW,bZo,vZo,FZo,Gv,K8e,TZo,MZo,eQ,EZo,CZo,wZo,Ov,Z8e,AZo,LZo,oQ,yZo,xZo,$Zo,Vv,e2e,kZo,SZo,rQ,RZo,PZo,BZo,Xv,o2e,IZo,NZo,tQ,qZo,jZo,DZo,zv,r2e,GZo,OZo,aQ,VZo,XZo,zZo,Wv,t2e,WZo,QZo,nQ,UZo,HZo,JZo,Qv,a2e,YZo,KZo,sQ,ZZo,eer,oer,Uv,n2e,rer,ter,lQ,aer,ner,ser,Hv,s2e,ler,ier,iQ,der,cer,fer,Jv,l2e,mer,ger,dQ,her,per,_er,Yv,i2e,uer,ber,cQ,ver,Fer,Ter,Kv,d2e,Mer,Eer,fQ,Cer,wer,Aer,Zv,c2e,Ler,yer,mQ,xer,$er,ker,eF,f2e,Ser,Rer,gQ,Per,Ber,Ier,oF,m2e,Ner,qer,hQ,jer,Der,Ger,rF,g2e,Oer,Ver,pQ,Xer,zer,Wer,tF,h2e,Qer,Uer,_Q,Her,Jer,Yer,aF,p2e,Ker,Zer,uQ,eor,oor,ror,nF,_2e,tor,aor,bQ,nor,sor,lor,sF,u2e,ior,dor,vQ,cor,mor,gor,lF,hor,b2e,por,_or,v2e,uor,bor,iF,xUe,Ed,dF,F2e,C9,vor,T2e,For,$Ue,jo,w9,Tor,Cd,Mor,FQ,Eor,Cor,TQ,wor,Aor,Lor,A9,yor,M2e,xor,$or,kor,vt,L9,Sor,E2e,Ror,Por,wd,Bor,C2e,Ior,Nor,MQ,qor,jor,Dor,cF,Gor,ao,y9,Oor,w2e,Vor,Xor,Ja,zor,A2e,Wor,Qor,L2e,Uor,Hor,y2e,Jor,Yor,Kor,Do,fF,x2e,Zor,err,EQ,orr,rrr,trr,mF,$2e,arr,nrr,CQ,srr,lrr,irr,gF,k2e,drr,crr,wQ,frr,mrr,grr,hF,S2e,hrr,prr,AQ,_rr,urr,brr,pF,R2e,vrr,Frr,LQ,Trr,Mrr,Err,_F,P2e,Crr,wrr,yQ,Arr,Lrr,yrr,uF,xrr,B2e,$rr,krr,I2e,Srr,Rrr,bF,kUe,Ad,vF,N2e,x9,Prr,q2e,Brr,SUe,Go,$9,Irr,Ld,Nrr,xQ,qrr,jrr,$Q,Drr,Grr,Orr,k9,Vrr,j2e,Xrr,zrr,Wrr,Ft,S9,Qrr,D2e,Urr,Hrr,yd,Jrr,G2e,Yrr,Krr,kQ,Zrr,etr,otr,FF,rtr,no,R9,ttr,O2e,atr,ntr,Ya,str,V2e,ltr,itr,X2e,dtr,ctr,z2e,ftr,mtr,gtr,H,TF,W2e,htr,ptr,SQ,_tr,utr,btr,MF,Q2e,vtr,Ftr,RQ,Ttr,Mtr,Etr,EF,U2e,Ctr,wtr,PQ,Atr,Ltr,ytr,CF,H2e,xtr,$tr,BQ,ktr,Str,Rtr,wF,J2e,Ptr,Btr,IQ,Itr,Ntr,qtr,AF,Y2e,jtr,Dtr,NQ,Gtr,Otr,Vtr,LF,K2e,Xtr,ztr,qQ,Wtr,Qtr,Utr,yF,Z2e,Htr,Jtr,jQ,Ytr,Ktr,Ztr,xF,ebe,ear,oar,DQ,rar,tar,aar,$F,obe,nar,sar,GQ,lar,iar,dar,kF,rbe,car,far,OQ,mar,gar,har,SF,tbe,par,_ar,VQ,uar,bar,Far,RF,abe,Tar,Mar,XQ,Ear,Car,war,PF,nbe,Aar,Lar,zQ,yar,xar,$ar,BF,sbe,kar,Sar,WQ,Rar,Par,Bar,IF,lbe,Iar,Nar,QQ,qar,jar,Dar,NF,ibe,Gar,Oar,UQ,Var,Xar,zar,qF,dbe,War,Qar,HQ,Uar,Har,Jar,jF,cbe,Yar,Kar,JQ,Zar,enr,onr,DF,fbe,rnr,tnr,YQ,anr,nnr,snr,GF,mbe,lnr,inr,KQ,dnr,cnr,fnr,OF,gbe,mnr,gnr,ZQ,hnr,pnr,_nr,VF,hbe,unr,bnr,eU,vnr,Fnr,Tnr,XF,pbe,Mnr,Enr,oU,Cnr,wnr,Anr,zF,_be,Lnr,ynr,rU,xnr,$nr,knr,WF,ube,Snr,Rnr,tU,Pnr,Bnr,Inr,QF,bbe,Nnr,qnr,aU,jnr,Dnr,Gnr,UF,vbe,Onr,Vnr,nU,Xnr,znr,Wnr,HF,Fbe,Qnr,Unr,sU,Hnr,Jnr,Ynr,JF,Tbe,Knr,Znr,lU,esr,osr,rsr,YF,Mbe,tsr,asr,iU,nsr,ssr,lsr,KF,Ebe,isr,dsr,dU,csr,fsr,msr,ZF,Cbe,gsr,hsr,cU,psr,_sr,usr,e6,wbe,bsr,vsr,fU,Fsr,Tsr,Msr,o6,Abe,Esr,Csr,mU,wsr,Asr,Lsr,r6,Lbe,ysr,xsr,gU,$sr,ksr,Ssr,t6,ybe,Rsr,Psr,hU,Bsr,Isr,Nsr,a6,qsr,xbe,jsr,Dsr,$be,Gsr,Osr,n6,RUe,xd,s6,kbe,P9,Vsr,Sbe,Xsr,PUe,Oo,B9,zsr,$d,Wsr,pU,Qsr,Usr,_U,Hsr,Jsr,Ysr,I9,Ksr,Rbe,Zsr,elr,olr,Tt,N9,rlr,Pbe,tlr,alr,kd,nlr,Bbe,slr,llr,uU,ilr,dlr,clr,l6,flr,so,q9,mlr,Ibe,glr,hlr,Ka,plr,Nbe,_lr,ulr,qbe,blr,vlr,jbe,Flr,Tlr,Mlr,V,i6,Dbe,Elr,Clr,bU,wlr,Alr,Llr,d6,Gbe,ylr,xlr,vU,$lr,klr,Slr,c6,Obe,Rlr,Plr,FU,Blr,Ilr,Nlr,f6,Vbe,qlr,jlr,TU,Dlr,Glr,Olr,m6,Xbe,Vlr,Xlr,MU,zlr,Wlr,Qlr,g6,zbe,Ulr,Hlr,EU,Jlr,Ylr,Klr,h6,Wbe,Zlr,eir,CU,oir,rir,tir,p6,Qbe,air,nir,wU,sir,lir,iir,_6,Ube,dir,cir,AU,fir,mir,gir,u6,Hbe,hir,pir,LU,_ir,uir,bir,b6,Jbe,vir,Fir,yU,Tir,Mir,Eir,v6,Ybe,Cir,wir,xU,Air,Lir,yir,F6,Kbe,xir,$ir,$U,kir,Sir,Rir,T6,Zbe,Pir,Bir,kU,Iir,Nir,qir,M6,eve,jir,Dir,SU,Gir,Oir,Vir,E6,ove,Xir,zir,RU,Wir,Qir,Uir,C6,rve,Hir,Jir,PU,Yir,Kir,Zir,w6,tve,edr,odr,BU,rdr,tdr,adr,A6,ave,ndr,sdr,IU,ldr,idr,ddr,L6,nve,cdr,fdr,NU,mdr,gdr,hdr,y6,sve,pdr,_dr,qU,udr,bdr,vdr,x6,lve,Fdr,Tdr,jU,Mdr,Edr,Cdr,$6,ive,wdr,Adr,DU,Ldr,ydr,xdr,k6,dve,$dr,kdr,GU,Sdr,Rdr,Pdr,S6,cve,Bdr,Idr,OU,Ndr,qdr,jdr,R6,fve,Ddr,Gdr,VU,Odr,Vdr,Xdr,P6,mve,zdr,Wdr,XU,Qdr,Udr,Hdr,B6,gve,Jdr,Ydr,zU,Kdr,Zdr,ecr,I6,hve,ocr,rcr,WU,tcr,acr,ncr,N6,pve,scr,lcr,QU,icr,dcr,ccr,q6,_ve,fcr,mcr,UU,gcr,hcr,pcr,j6,uve,_cr,ucr,HU,bcr,vcr,Fcr,D6,bve,Tcr,Mcr,JU,Ecr,Ccr,wcr,G6,vve,Acr,Lcr,YU,ycr,xcr,$cr,O6,Fve,kcr,Scr,KU,Rcr,Pcr,Bcr,V6,Tve,Icr,Ncr,ZU,qcr,jcr,Dcr,X6,Mve,Gcr,Ocr,eH,Vcr,Xcr,zcr,z6,Eve,Wcr,Qcr,oH,Ucr,Hcr,Jcr,W6,Cve,Ycr,Kcr,rH,Zcr,efr,ofr,Q6,wve,rfr,tfr,tH,afr,nfr,sfr,U6,Ave,lfr,ifr,aH,dfr,cfr,ffr,H6,Lve,mfr,gfr,nH,hfr,pfr,_fr,J6,yve,ufr,bfr,sH,vfr,Ffr,Tfr,Y6,Mfr,xve,Efr,Cfr,$ve,wfr,Afr,K6,BUe,Sd,Z6,kve,j9,Lfr,Sve,yfr,IUe,Vo,D9,xfr,Rd,$fr,lH,kfr,Sfr,iH,Rfr,Pfr,Bfr,G9,Ifr,Rve,Nfr,qfr,jfr,Mt,O9,Dfr,Pve,Gfr,Ofr,Pd,Vfr,Bve,Xfr,zfr,dH,Wfr,Qfr,Ufr,eT,Hfr,lo,V9,Jfr,Ive,Yfr,Kfr,Za,Zfr,Nve,emr,omr,qve,rmr,tmr,jve,amr,nmr,smr,Dve,oT,Gve,lmr,imr,cH,dmr,cmr,fmr,rT,mmr,Ove,gmr,hmr,Vve,pmr,_mr,tT,NUe,Bd,aT,Xve,X9,umr,zve,bmr,qUe,Xo,z9,vmr,Id,Fmr,fH,Tmr,Mmr,mH,Emr,Cmr,wmr,W9,Amr,Wve,Lmr,ymr,xmr,Et,Q9,$mr,Qve,kmr,Smr,Nd,Rmr,Uve,Pmr,Bmr,gH,Imr,Nmr,qmr,nT,jmr,io,U9,Dmr,Hve,Gmr,Omr,en,Vmr,Jve,Xmr,zmr,Yve,Wmr,Qmr,Kve,Umr,Hmr,Jmr,be,sT,Zve,Ymr,Kmr,hH,Zmr,egr,ogr,lT,eFe,rgr,tgr,pH,agr,ngr,sgr,iT,oFe,lgr,igr,_H,dgr,cgr,fgr,dT,rFe,mgr,ggr,uH,hgr,pgr,_gr,sl,tFe,ugr,bgr,bH,vgr,Fgr,vH,Tgr,Mgr,Egr,cT,aFe,Cgr,wgr,FH,Agr,Lgr,ygr,ll,nFe,xgr,$gr,TH,kgr,Sgr,MH,Rgr,Pgr,Bgr,fT,sFe,Igr,Ngr,EH,qgr,jgr,Dgr,Ct,lFe,Ggr,Ogr,CH,Vgr,Xgr,wH,zgr,Wgr,AH,Qgr,Ugr,Hgr,mT,iFe,Jgr,Ygr,LH,Kgr,Zgr,ehr,gT,dFe,ohr,rhr,yH,thr,ahr,nhr,hT,cFe,shr,lhr,xH,ihr,dhr,chr,pT,fFe,fhr,mhr,$H,ghr,hhr,phr,_T,mFe,_hr,uhr,kH,bhr,vhr,Fhr,uT,gFe,Thr,Mhr,SH,Ehr,Chr,whr,bT,hFe,Ahr,Lhr,RH,yhr,xhr,$hr,vT,pFe,khr,Shr,PH,Rhr,Phr,Bhr,FT,Ihr,_Fe,Nhr,qhr,uFe,jhr,Dhr,TT,jUe,qd,MT,bFe,H9,Ghr,vFe,Ohr,DUe,zo,J9,Vhr,jd,Xhr,BH,zhr,Whr,IH,Qhr,Uhr,Hhr,Y9,Jhr,FFe,Yhr,Khr,Zhr,wt,K9,epr,TFe,opr,rpr,Dd,tpr,MFe,apr,npr,NH,spr,lpr,ipr,ET,dpr,co,Z9,cpr,EFe,fpr,mpr,on,gpr,CFe,hpr,ppr,wFe,_pr,upr,AFe,bpr,vpr,Fpr,LFe,CT,yFe,Tpr,Mpr,qH,Epr,Cpr,wpr,wT,Apr,xFe,Lpr,ypr,$Fe,xpr,$pr,AT,GUe,Gd,LT,kFe,ex,kpr,SFe,Spr,OUe,Wo,ox,Rpr,Od,Ppr,jH,Bpr,Ipr,DH,Npr,qpr,jpr,rx,Dpr,RFe,Gpr,Opr,Vpr,At,tx,Xpr,PFe,zpr,Wpr,Vd,Qpr,BFe,Upr,Hpr,GH,Jpr,Ypr,Kpr,yT,Zpr,fo,ax,e_r,IFe,o_r,r_r,rn,t_r,NFe,a_r,n_r,qFe,s_r,l_r,jFe,i_r,d_r,c_r,DFe,xT,GFe,f_r,m_r,OH,g_r,h_r,p_r,$T,__r,OFe,u_r,b_r,VFe,v_r,F_r,kT,VUe,Xd,ST,XFe,nx,T_r,zFe,M_r,XUe,Qo,sx,E_r,zd,C_r,VH,w_r,A_r,XH,L_r,y_r,x_r,lx,$_r,WFe,k_r,S_r,R_r,Lt,ix,P_r,QFe,B_r,I_r,Wd,N_r,UFe,q_r,j_r,zH,D_r,G_r,O_r,RT,V_r,mo,dx,X_r,HFe,z_r,W_r,tn,Q_r,JFe,U_r,H_r,YFe,J_r,Y_r,KFe,K_r,Z_r,eur,ZFe,PT,e6e,our,rur,WH,tur,aur,nur,BT,sur,o6e,lur,iur,r6e,dur,cur,IT,zUe,Qd,NT,t6e,cx,fur,a6e,mur,WUe,Uo,fx,gur,Ud,hur,QH,pur,_ur,UH,uur,bur,vur,mx,Fur,n6e,Tur,Mur,Eur,yt,gx,Cur,s6e,wur,Aur,Hd,Lur,l6e,yur,xur,HH,$ur,kur,Sur,qT,Rur,go,hx,Pur,i6e,Bur,Iur,an,Nur,d6e,qur,jur,c6e,Dur,Gur,f6e,Our,Vur,Xur,Pe,jT,m6e,zur,Wur,JH,Qur,Uur,Hur,DT,g6e,Jur,Yur,YH,Kur,Zur,e1r,GT,h6e,o1r,r1r,KH,t1r,a1r,n1r,OT,p6e,s1r,l1r,ZH,i1r,d1r,c1r,VT,_6e,f1r,m1r,eJ,g1r,h1r,p1r,XT,u6e,_1r,u1r,oJ,b1r,v1r,F1r,zT,b6e,T1r,M1r,rJ,E1r,C1r,w1r,WT,v6e,A1r,L1r,tJ,y1r,x1r,$1r,QT,F6e,k1r,S1r,aJ,R1r,P1r,B1r,UT,I1r,T6e,N1r,q1r,M6e,j1r,D1r,HT,QUe,Jd,JT,E6e,px,G1r,C6e,O1r,UUe,Ho,_x,V1r,Yd,X1r,nJ,z1r,W1r,sJ,Q1r,U1r,H1r,ux,J1r,w6e,Y1r,K1r,Z1r,xt,bx,e8r,A6e,o8r,r8r,Kd,t8r,L6e,a8r,n8r,lJ,s8r,l8r,i8r,YT,d8r,ho,vx,c8r,y6e,f8r,m8r,nn,g8r,x6e,h8r,p8r,$6e,_8r,u8r,k6e,b8r,v8r,F8r,st,KT,S6e,T8r,M8r,iJ,E8r,C8r,w8r,ZT,R6e,A8r,L8r,dJ,y8r,x8r,$8r,e7,P6e,k8r,S8r,cJ,R8r,P8r,B8r,o7,B6e,I8r,N8r,fJ,q8r,j8r,D8r,r7,I6e,G8r,O8r,mJ,V8r,X8r,z8r,t7,W8r,N6e,Q8r,U8r,q6e,H8r,J8r,a7,HUe,Zd,n7,j6e,Fx,Y8r,D6e,K8r,JUe,Jo,Tx,Z8r,ec,e2r,gJ,o2r,r2r,hJ,t2r,a2r,n2r,Mx,s2r,G6e,l2r,i2r,d2r,$t,Ex,c2r,O6e,f2r,m2r,oc,g2r,V6e,h2r,p2r,pJ,_2r,u2r,b2r,s7,v2r,po,Cx,F2r,X6e,T2r,M2r,sn,E2r,z6e,C2r,w2r,W6e,A2r,L2r,Q6e,y2r,x2r,$2r,Le,l7,U6e,k2r,S2r,_J,R2r,P2r,B2r,i7,H6e,I2r,N2r,uJ,q2r,j2r,D2r,d7,J6e,G2r,O2r,bJ,V2r,X2r,z2r,c7,Y6e,W2r,Q2r,vJ,U2r,H2r,J2r,f7,K6e,Y2r,K2r,FJ,Z2r,ebr,obr,m7,Z6e,rbr,tbr,TJ,abr,nbr,sbr,g7,eTe,lbr,ibr,MJ,dbr,cbr,fbr,h7,oTe,mbr,gbr,EJ,hbr,pbr,_br,p7,rTe,ubr,bbr,CJ,vbr,Fbr,Tbr,_7,tTe,Mbr,Ebr,wJ,Cbr,wbr,Abr,u7,Lbr,aTe,ybr,xbr,nTe,$br,kbr,b7,YUe,rc,v7,sTe,wx,Sbr,lTe,Rbr,KUe,Yo,Ax,Pbr,tc,Bbr,AJ,Ibr,Nbr,LJ,qbr,jbr,Dbr,Lx,Gbr,iTe,Obr,Vbr,Xbr,kt,yx,zbr,dTe,Wbr,Qbr,ac,Ubr,cTe,Hbr,Jbr,yJ,Ybr,Kbr,Zbr,F7,evr,_o,xx,ovr,fTe,rvr,tvr,ln,avr,mTe,nvr,svr,gTe,lvr,ivr,hTe,dvr,cvr,fvr,$x,T7,pTe,mvr,gvr,xJ,hvr,pvr,_vr,M7,_Te,uvr,bvr,$J,vvr,Fvr,Tvr,E7,Mvr,uTe,Evr,Cvr,bTe,wvr,Avr,C7,ZUe,nc,w7,vTe,kx,Lvr,FTe,yvr,eHe,Ko,Sx,xvr,sc,$vr,kJ,kvr,Svr,SJ,Rvr,Pvr,Bvr,Rx,Ivr,TTe,Nvr,qvr,jvr,St,Px,Dvr,MTe,Gvr,Ovr,lc,Vvr,ETe,Xvr,zvr,RJ,Wvr,Qvr,Uvr,A7,Hvr,uo,Bx,Jvr,CTe,Yvr,Kvr,dn,Zvr,wTe,eFr,oFr,ATe,rFr,tFr,LTe,aFr,nFr,sFr,lt,L7,yTe,lFr,iFr,PJ,dFr,cFr,fFr,y7,xTe,mFr,gFr,BJ,hFr,pFr,_Fr,x7,$Te,uFr,bFr,IJ,vFr,FFr,TFr,$7,kTe,MFr,EFr,NJ,CFr,wFr,AFr,k7,STe,LFr,yFr,qJ,xFr,$Fr,kFr,S7,SFr,RTe,RFr,PFr,PTe,BFr,IFr,R7,oHe,ic,P7,BTe,Ix,NFr,ITe,qFr,rHe,Zo,Nx,jFr,dc,DFr,jJ,GFr,OFr,DJ,VFr,XFr,zFr,qx,WFr,NTe,QFr,UFr,HFr,Rt,jx,JFr,qTe,YFr,KFr,cc,ZFr,jTe,e6r,o6r,GJ,r6r,t6r,a6r,B7,n6r,bo,Dx,s6r,DTe,l6r,i6r,cn,d6r,GTe,c6r,f6r,OTe,m6r,g6r,VTe,h6r,p6r,_6r,fn,I7,XTe,u6r,b6r,OJ,v6r,F6r,T6r,N7,zTe,M6r,E6r,VJ,C6r,w6r,A6r,q7,WTe,L6r,y6r,XJ,x6r,$6r,k6r,j7,QTe,S6r,R6r,zJ,P6r,B6r,I6r,D7,N6r,UTe,q6r,j6r,HTe,D6r,G6r,G7,tHe,fc,O7,JTe,Gx,O6r,YTe,V6r,aHe,er,Ox,X6r,mc,z6r,WJ,W6r,Q6r,QJ,U6r,H6r,J6r,Vx,Y6r,KTe,K6r,Z6r,eTr,Pt,Xx,oTr,ZTe,rTr,tTr,gc,aTr,e7e,nTr,sTr,UJ,lTr,iTr,dTr,V7,cTr,vo,zx,fTr,o7e,mTr,gTr,mn,hTr,r7e,pTr,_Tr,t7e,uTr,bTr,a7e,vTr,FTr,TTr,Wx,X7,n7e,MTr,ETr,HJ,CTr,wTr,ATr,z7,s7e,LTr,yTr,JJ,xTr,$Tr,kTr,W7,STr,l7e,RTr,PTr,i7e,BTr,ITr,Q7,nHe,hc,U7,d7e,Qx,NTr,c7e,qTr,sHe,or,Ux,jTr,pc,DTr,YJ,GTr,OTr,KJ,VTr,XTr,zTr,Hx,WTr,f7e,QTr,UTr,HTr,Bt,Jx,JTr,m7e,YTr,KTr,_c,ZTr,g7e,e7r,o7r,ZJ,r7r,t7r,a7r,H7,n7r,Fo,Yx,s7r,h7e,l7r,i7r,gn,d7r,p7e,c7r,f7r,_7e,m7r,g7r,u7e,h7r,p7r,_7r,b7e,J7,v7e,u7r,b7r,eY,v7r,F7r,T7r,Y7,M7r,F7e,E7r,C7r,T7e,w7r,A7r,K7,lHe,uc,Z7,M7e,Kx,L7r,E7e,y7r,iHe,rr,Zx,x7r,bc,$7r,oY,k7r,S7r,rY,R7r,P7r,B7r,e$,I7r,C7e,N7r,q7r,j7r,It,o$,D7r,w7e,G7r,O7r,vc,V7r,A7e,X7r,z7r,tY,W7r,Q7r,U7r,eM,H7r,To,r$,J7r,L7e,Y7r,K7r,hn,Z7r,y7e,eMr,oMr,x7e,rMr,tMr,$7e,aMr,nMr,sMr,it,oM,k7e,lMr,iMr,aY,dMr,cMr,fMr,rM,S7e,mMr,gMr,nY,hMr,pMr,_Mr,tM,R7e,uMr,bMr,sY,vMr,FMr,TMr,aM,P7e,MMr,EMr,lY,CMr,wMr,AMr,nM,B7e,LMr,yMr,iY,xMr,$Mr,kMr,sM,SMr,I7e,RMr,PMr,N7e,BMr,IMr,lM,dHe,Fc,iM,q7e,t$,NMr,j7e,qMr,cHe,tr,a$,jMr,Tc,DMr,dY,GMr,OMr,cY,VMr,XMr,zMr,n$,WMr,D7e,QMr,UMr,HMr,Nt,s$,JMr,G7e,YMr,KMr,Mc,ZMr,O7e,eEr,oEr,fY,rEr,tEr,aEr,dM,nEr,Mo,l$,sEr,V7e,lEr,iEr,pn,dEr,X7e,cEr,fEr,z7e,mEr,gEr,W7e,hEr,pEr,_Er,Q7e,cM,U7e,uEr,bEr,mY,vEr,FEr,TEr,fM,MEr,H7e,EEr,CEr,J7e,wEr,AEr,mM,fHe,Ec,gM,Y7e,i$,LEr,K7e,yEr,mHe,ar,d$,xEr,Cc,$Er,gY,kEr,SEr,hY,REr,PEr,BEr,c$,IEr,Z7e,NEr,qEr,jEr,qt,f$,DEr,eMe,GEr,OEr,wc,VEr,oMe,XEr,zEr,pY,WEr,QEr,UEr,hM,HEr,Rr,m$,JEr,rMe,YEr,KEr,_n,ZEr,tMe,e4r,o4r,aMe,r4r,t4r,nMe,a4r,n4r,s4r,q,pM,sMe,l4r,i4r,_Y,d4r,c4r,f4r,_M,lMe,m4r,g4r,uY,h4r,p4r,_4r,uM,iMe,u4r,b4r,bY,v4r,F4r,T4r,bM,dMe,M4r,E4r,vY,C4r,w4r,A4r,vM,cMe,L4r,y4r,FY,x4r,$4r,k4r,FM,fMe,S4r,R4r,TY,P4r,B4r,I4r,TM,mMe,N4r,q4r,MY,j4r,D4r,G4r,MM,gMe,O4r,V4r,EY,X4r,z4r,W4r,EM,hMe,Q4r,U4r,CY,H4r,J4r,Y4r,CM,pMe,K4r,Z4r,wY,eCr,oCr,rCr,wM,_Me,tCr,aCr,AY,nCr,sCr,lCr,AM,uMe,iCr,dCr,LY,cCr,fCr,mCr,LM,bMe,gCr,hCr,yY,pCr,_Cr,uCr,yM,vMe,bCr,vCr,xY,FCr,TCr,MCr,xM,FMe,ECr,CCr,$Y,wCr,ACr,LCr,$M,TMe,yCr,xCr,kY,$Cr,kCr,SCr,kM,MMe,RCr,PCr,SY,BCr,ICr,NCr,SM,EMe,qCr,jCr,RY,DCr,GCr,OCr,il,CMe,VCr,XCr,PY,zCr,WCr,BY,QCr,UCr,HCr,RM,wMe,JCr,YCr,IY,KCr,ZCr,e3r,PM,AMe,o3r,r3r,NY,t3r,a3r,n3r,BM,LMe,s3r,l3r,qY,i3r,d3r,c3r,IM,yMe,f3r,m3r,jY,g3r,h3r,p3r,NM,xMe,_3r,u3r,DY,b3r,v3r,F3r,qM,$Me,T3r,M3r,GY,E3r,C3r,w3r,jM,kMe,A3r,L3r,OY,y3r,x3r,$3r,DM,SMe,k3r,S3r,VY,R3r,P3r,B3r,GM,RMe,I3r,N3r,XY,q3r,j3r,D3r,OM,PMe,G3r,O3r,zY,V3r,X3r,z3r,VM,BMe,W3r,Q3r,WY,U3r,H3r,J3r,XM,IMe,Y3r,K3r,QY,Z3r,e5r,o5r,zM,NMe,r5r,t5r,UY,a5r,n5r,s5r,WM,qMe,l5r,i5r,HY,d5r,c5r,f5r,QM,jMe,m5r,g5r,JY,h5r,p5r,_5r,UM,DMe,u5r,b5r,YY,v5r,F5r,T5r,HM,GMe,M5r,E5r,KY,C5r,w5r,A5r,JM,OMe,L5r,y5r,ZY,x5r,$5r,k5r,YM,VMe,S5r,R5r,eK,P5r,B5r,I5r,KM,XMe,N5r,q5r,oK,j5r,D5r,G5r,ZM,zMe,O5r,V5r,rK,X5r,z5r,W5r,eE,WMe,Q5r,U5r,tK,H5r,J5r,Y5r,oE,QMe,K5r,Z5r,aK,e0r,o0r,r0r,rE,UMe,t0r,a0r,nK,n0r,s0r,l0r,tE,HMe,i0r,d0r,sK,c0r,f0r,m0r,aE,JMe,g0r,h0r,lK,p0r,_0r,u0r,nE,YMe,b0r,v0r,iK,F0r,T0r,M0r,sE,KMe,E0r,C0r,dK,w0r,A0r,L0r,lE,ZMe,y0r,x0r,cK,$0r,k0r,S0r,iE,eEe,R0r,P0r,fK,B0r,I0r,N0r,dE,oEe,q0r,j0r,mK,D0r,G0r,O0r,cE,rEe,V0r,X0r,gK,z0r,W0r,Q0r,fE,tEe,U0r,H0r,hK,J0r,Y0r,K0r,mE,gHe,Ac,gE,aEe,g$,Z0r,nEe,ewr,hHe,nr,h$,owr,Lc,rwr,pK,twr,awr,_K,nwr,swr,lwr,p$,iwr,sEe,dwr,cwr,fwr,jt,_$,mwr,lEe,gwr,hwr,yc,pwr,iEe,_wr,uwr,uK,bwr,vwr,Fwr,hE,Twr,Pr,u$,Mwr,dEe,Ewr,Cwr,un,wwr,cEe,Awr,Lwr,fEe,ywr,xwr,mEe,$wr,kwr,Swr,se,pE,gEe,Rwr,Pwr,bK,Bwr,Iwr,Nwr,_E,hEe,qwr,jwr,vK,Dwr,Gwr,Owr,uE,pEe,Vwr,Xwr,FK,zwr,Wwr,Qwr,bE,_Ee,Uwr,Hwr,TK,Jwr,Ywr,Kwr,vE,uEe,Zwr,eAr,MK,oAr,rAr,tAr,FE,bEe,aAr,nAr,EK,sAr,lAr,iAr,TE,vEe,dAr,cAr,CK,fAr,mAr,gAr,ME,FEe,hAr,pAr,wK,_Ar,uAr,bAr,EE,TEe,vAr,FAr,AK,TAr,MAr,EAr,CE,MEe,CAr,wAr,LK,AAr,LAr,yAr,wE,EEe,xAr,$Ar,yK,kAr,SAr,RAr,AE,CEe,PAr,BAr,xK,IAr,NAr,qAr,LE,wEe,jAr,DAr,$K,GAr,OAr,VAr,yE,AEe,XAr,zAr,kK,WAr,QAr,UAr,xE,LEe,HAr,JAr,SK,YAr,KAr,ZAr,$E,yEe,eLr,oLr,RK,rLr,tLr,aLr,kE,xEe,nLr,sLr,PK,lLr,iLr,dLr,SE,$Ee,cLr,fLr,BK,mLr,gLr,hLr,RE,kEe,pLr,_Lr,IK,uLr,bLr,vLr,PE,SEe,FLr,TLr,NK,MLr,ELr,CLr,BE,REe,wLr,ALr,qK,LLr,yLr,xLr,IE,PEe,$Lr,kLr,jK,SLr,RLr,PLr,NE,BEe,BLr,ILr,DK,NLr,qLr,jLr,qE,pHe,xc,jE,IEe,b$,DLr,NEe,GLr,_He,sr,v$,OLr,$c,VLr,GK,XLr,zLr,OK,WLr,QLr,ULr,F$,HLr,qEe,JLr,YLr,KLr,Dt,T$,ZLr,jEe,eyr,oyr,kc,ryr,DEe,tyr,ayr,VK,nyr,syr,lyr,DE,iyr,Br,M$,dyr,GEe,cyr,fyr,bn,myr,OEe,gyr,hyr,VEe,pyr,_yr,XEe,uyr,byr,vyr,Me,GE,zEe,Fyr,Tyr,XK,Myr,Eyr,Cyr,OE,WEe,wyr,Ayr,zK,Lyr,yyr,xyr,VE,QEe,$yr,kyr,WK,Syr,Ryr,Pyr,XE,UEe,Byr,Iyr,QK,Nyr,qyr,jyr,zE,HEe,Dyr,Gyr,UK,Oyr,Vyr,Xyr,WE,JEe,zyr,Wyr,HK,Qyr,Uyr,Hyr,QE,YEe,Jyr,Yyr,JK,Kyr,Zyr,e9r,UE,KEe,o9r,r9r,YK,t9r,a9r,n9r,HE,ZEe,s9r,l9r,KK,i9r,d9r,c9r,JE,e4e,f9r,m9r,ZK,g9r,h9r,p9r,YE,o4e,_9r,u9r,eZ,b9r,v9r,F9r,KE,r4e,T9r,M9r,oZ,E9r,C9r,w9r,ZE,t4e,A9r,L9r,rZ,y9r,x9r,$9r,e4,uHe,Sc,o4,a4e,E$,k9r,n4e,S9r,bHe,lr,C$,R9r,Rc,P9r,tZ,B9r,I9r,aZ,N9r,q9r,j9r,w$,D9r,s4e,G9r,O9r,V9r,Gt,A$,X9r,l4e,z9r,W9r,Pc,Q9r,i4e,U9r,H9r,nZ,J9r,Y9r,K9r,r4,Z9r,Ir,L$,exr,d4e,oxr,rxr,vn,txr,c4e,axr,nxr,f4e,sxr,lxr,m4e,ixr,dxr,cxr,Ve,t4,g4e,fxr,mxr,sZ,gxr,hxr,pxr,a4,h4e,_xr,uxr,lZ,bxr,vxr,Fxr,dl,p4e,Txr,Mxr,iZ,Exr,Cxr,dZ,wxr,Axr,Lxr,n4,_4e,yxr,xxr,cZ,$xr,kxr,Sxr,s4,u4e,Rxr,Pxr,fZ,Bxr,Ixr,Nxr,l4,b4e,qxr,jxr,mZ,Dxr,Gxr,Oxr,i4,v4e,Vxr,Xxr,gZ,zxr,Wxr,Qxr,d4,F4e,Uxr,Hxr,hZ,Jxr,Yxr,Kxr,c4,vHe,Bc,f4,T4e,y$,Zxr,M4e,e$r,FHe,ir,x$,o$r,Ic,r$r,pZ,t$r,a$r,_Z,n$r,s$r,l$r,$$,i$r,E4e,d$r,c$r,f$r,Ot,k$,m$r,C4e,g$r,h$r,Nc,p$r,w4e,_$r,u$r,uZ,b$r,v$r,F$r,m4,T$r,Nr,S$,M$r,A4e,E$r,C$r,Fn,w$r,L4e,A$r,L$r,y4e,y$r,x$r,x4e,$$r,k$r,S$r,R$,g4,$4e,R$r,P$r,bZ,B$r,I$r,N$r,h4,k4e,q$r,j$r,vZ,D$r,G$r,O$r,p4,THe,qc,_4,S4e,P$,V$r,R4e,X$r,MHe,dr,B$,z$r,jc,W$r,FZ,Q$r,U$r,TZ,H$r,J$r,Y$r,I$,K$r,P4e,Z$r,ekr,okr,Vt,N$,rkr,B4e,tkr,akr,Dc,nkr,I4e,skr,lkr,MZ,ikr,dkr,ckr,u4,fkr,qr,q$,mkr,N4e,gkr,hkr,Tn,pkr,q4e,_kr,ukr,j4e,bkr,vkr,D4e,Fkr,Tkr,Mkr,fe,b4,G4e,Ekr,Ckr,EZ,wkr,Akr,Lkr,v4,O4e,ykr,xkr,CZ,$kr,kkr,Skr,F4,V4e,Rkr,Pkr,wZ,Bkr,Ikr,Nkr,T4,X4e,qkr,jkr,AZ,Dkr,Gkr,Okr,M4,z4e,Vkr,Xkr,LZ,zkr,Wkr,Qkr,E4,W4e,Ukr,Hkr,yZ,Jkr,Ykr,Kkr,C4,Q4e,Zkr,eSr,xZ,oSr,rSr,tSr,w4,U4e,aSr,nSr,$Z,sSr,lSr,iSr,A4,H4e,dSr,cSr,kZ,fSr,mSr,gSr,L4,J4e,hSr,pSr,SZ,_Sr,uSr,bSr,y4,Y4e,vSr,FSr,RZ,TSr,MSr,ESr,x4,K4e,CSr,wSr,PZ,ASr,LSr,ySr,$4,Z4e,xSr,$Sr,BZ,kSr,SSr,RSr,k4,eCe,PSr,BSr,IZ,ISr,NSr,qSr,S4,oCe,jSr,DSr,NZ,GSr,OSr,VSr,R4,rCe,XSr,zSr,qZ,WSr,QSr,USr,P4,tCe,HSr,JSr,jZ,YSr,KSr,ZSr,B4,aCe,eRr,oRr,DZ,rRr,tRr,aRr,I4,nCe,nRr,sRr,GZ,lRr,iRr,dRr,N4,sCe,cRr,fRr,OZ,mRr,gRr,hRr,q4,EHe,Gc,j4,lCe,j$,pRr,iCe,_Rr,CHe,cr,D$,uRr,Oc,bRr,VZ,vRr,FRr,XZ,TRr,MRr,ERr,G$,CRr,dCe,wRr,ARr,LRr,Xt,O$,yRr,cCe,xRr,$Rr,Vc,kRr,fCe,SRr,RRr,zZ,PRr,BRr,IRr,D4,NRr,jr,V$,qRr,mCe,jRr,DRr,Mn,GRr,gCe,ORr,VRr,hCe,XRr,zRr,pCe,WRr,QRr,URr,ye,G4,_Ce,HRr,JRr,WZ,YRr,KRr,ZRr,O4,uCe,ePr,oPr,QZ,rPr,tPr,aPr,V4,bCe,nPr,sPr,UZ,lPr,iPr,dPr,X4,vCe,cPr,fPr,HZ,mPr,gPr,hPr,z4,FCe,pPr,_Pr,JZ,uPr,bPr,vPr,W4,TCe,FPr,TPr,YZ,MPr,EPr,CPr,Q4,MCe,wPr,APr,KZ,LPr,yPr,xPr,U4,ECe,$Pr,kPr,ZZ,SPr,RPr,PPr,H4,CCe,BPr,IPr,eee,NPr,qPr,jPr,J4,wCe,DPr,GPr,oee,OPr,VPr,XPr,Y4,wHe,Xc,K4,ACe,X$,zPr,LCe,WPr,AHe,fr,z$,QPr,zc,UPr,ree,HPr,JPr,tee,YPr,KPr,ZPr,W$,eBr,yCe,oBr,rBr,tBr,zt,Q$,aBr,xCe,nBr,sBr,Wc,lBr,$Ce,iBr,dBr,aee,cBr,fBr,mBr,Z4,gBr,Dr,U$,hBr,kCe,pBr,_Br,En,uBr,SCe,bBr,vBr,RCe,FBr,TBr,PCe,MBr,EBr,CBr,re,eC,BCe,wBr,ABr,nee,LBr,yBr,xBr,oC,ICe,$Br,kBr,see,SBr,RBr,PBr,rC,NCe,BBr,IBr,lee,NBr,qBr,jBr,tC,qCe,DBr,GBr,iee,OBr,VBr,XBr,aC,jCe,zBr,WBr,dee,QBr,UBr,HBr,nC,DCe,JBr,YBr,cee,KBr,ZBr,eIr,sC,GCe,oIr,rIr,fee,tIr,aIr,nIr,lC,OCe,sIr,lIr,mee,iIr,dIr,cIr,iC,VCe,fIr,mIr,gee,gIr,hIr,pIr,dC,XCe,_Ir,uIr,hee,bIr,vIr,FIr,cC,zCe,TIr,MIr,pee,EIr,CIr,wIr,fC,WCe,AIr,LIr,_ee,yIr,xIr,$Ir,mC,QCe,kIr,SIr,uee,RIr,PIr,BIr,gC,UCe,IIr,NIr,bee,qIr,jIr,DIr,hC,HCe,GIr,OIr,vee,VIr,XIr,zIr,pC,JCe,WIr,QIr,Fee,UIr,HIr,JIr,_C,YCe,YIr,KIr,Tee,ZIr,eNr,oNr,uC,KCe,rNr,tNr,Mee,aNr,nNr,sNr,bC,ZCe,lNr,iNr,Eee,dNr,cNr,fNr,vC,e3e,mNr,gNr,Cee,hNr,pNr,_Nr,FC,o3e,uNr,bNr,wee,vNr,FNr,TNr,TC,r3e,MNr,ENr,Aee,CNr,wNr,ANr,MC,t3e,LNr,yNr,Lee,xNr,$Nr,kNr,EC,a3e,SNr,RNr,yee,PNr,BNr,INr,CC,n3e,NNr,qNr,xee,jNr,DNr,GNr,wC,s3e,ONr,VNr,$ee,XNr,zNr,WNr,AC,l3e,QNr,UNr,kee,HNr,JNr,YNr,LC,LHe,Qc,yC,i3e,H$,KNr,d3e,ZNr,yHe,mr,J$,eqr,Uc,oqr,See,rqr,tqr,Ree,aqr,nqr,sqr,Y$,lqr,c3e,iqr,dqr,cqr,Wt,K$,fqr,f3e,mqr,gqr,Hc,hqr,m3e,pqr,_qr,Pee,uqr,bqr,vqr,xC,Fqr,Gr,Z$,Tqr,g3e,Mqr,Eqr,Cn,Cqr,h3e,wqr,Aqr,p3e,Lqr,yqr,_3e,xqr,$qr,kqr,ve,$C,u3e,Sqr,Rqr,Bee,Pqr,Bqr,Iqr,kC,b3e,Nqr,qqr,Iee,jqr,Dqr,Gqr,SC,v3e,Oqr,Vqr,Nee,Xqr,zqr,Wqr,RC,F3e,Qqr,Uqr,qee,Hqr,Jqr,Yqr,PC,T3e,Kqr,Zqr,jee,ejr,ojr,rjr,BC,M3e,tjr,ajr,Dee,njr,sjr,ljr,IC,E3e,ijr,djr,Gee,cjr,fjr,mjr,NC,C3e,gjr,hjr,Oee,pjr,_jr,ujr,qC,w3e,bjr,vjr,Vee,Fjr,Tjr,Mjr,jC,A3e,Ejr,Cjr,Xee,wjr,Ajr,Ljr,DC,L3e,yjr,xjr,zee,$jr,kjr,Sjr,GC,y3e,Rjr,Pjr,Wee,Bjr,Ijr,Njr,OC,x3e,qjr,jjr,Qee,Djr,Gjr,Ojr,VC,$3e,Vjr,Xjr,Uee,zjr,Wjr,Qjr,XC,k3e,Ujr,Hjr,Hee,Jjr,Yjr,Kjr,zC,S3e,Zjr,eDr,Jee,oDr,rDr,tDr,WC,R3e,aDr,nDr,Yee,sDr,lDr,iDr,QC,xHe,Jc,UC,P3e,ek,dDr,B3e,cDr,$He,gr,ok,fDr,Yc,mDr,Kee,gDr,hDr,Zee,pDr,_Dr,uDr,rk,bDr,I3e,vDr,FDr,TDr,Qt,tk,MDr,N3e,EDr,CDr,Kc,wDr,q3e,ADr,LDr,eoe,yDr,xDr,$Dr,HC,kDr,Or,ak,SDr,j3e,RDr,PDr,wn,BDr,D3e,IDr,NDr,G3e,qDr,jDr,O3e,DDr,GDr,ODr,nk,JC,V3e,VDr,XDr,ooe,zDr,WDr,QDr,YC,X3e,UDr,HDr,roe,JDr,YDr,KDr,KC,kHe,Zc,ZC,z3e,sk,ZDr,W3e,eGr,SHe,hr,lk,oGr,ef,rGr,toe,tGr,aGr,aoe,nGr,sGr,lGr,ik,iGr,Q3e,dGr,cGr,fGr,Ut,dk,mGr,U3e,gGr,hGr,of,pGr,H3e,_Gr,uGr,noe,bGr,vGr,FGr,e3,TGr,Vr,ck,MGr,J3e,EGr,CGr,An,wGr,Y3e,AGr,LGr,K3e,yGr,xGr,Z3e,$Gr,kGr,SGr,e5e,o3,o5e,RGr,PGr,soe,BGr,IGr,NGr,r3,RHe,rf,t3,r5e,fk,qGr,t5e,jGr,PHe,pr,mk,DGr,tf,GGr,loe,OGr,VGr,ioe,XGr,zGr,WGr,gk,QGr,a5e,UGr,HGr,JGr,Ht,hk,YGr,n5e,KGr,ZGr,af,eOr,s5e,oOr,rOr,doe,tOr,aOr,nOr,a3,sOr,Xr,pk,lOr,l5e,iOr,dOr,Ln,cOr,i5e,fOr,mOr,d5e,gOr,hOr,c5e,pOr,_Or,uOr,ie,n3,f5e,bOr,vOr,coe,FOr,TOr,MOr,s3,m5e,EOr,COr,foe,wOr,AOr,LOr,l3,g5e,yOr,xOr,moe,$Or,kOr,SOr,i3,h5e,ROr,POr,goe,BOr,IOr,NOr,d3,p5e,qOr,jOr,hoe,DOr,GOr,OOr,c3,_5e,VOr,XOr,poe,zOr,WOr,QOr,f3,u5e,UOr,HOr,_oe,JOr,YOr,KOr,m3,b5e,ZOr,eVr,uoe,oVr,rVr,tVr,g3,v5e,aVr,nVr,boe,sVr,lVr,iVr,h3,F5e,dVr,cVr,voe,fVr,mVr,gVr,p3,T5e,hVr,pVr,Foe,_Vr,uVr,bVr,_3,M5e,vVr,FVr,Toe,TVr,MVr,EVr,u3,E5e,CVr,wVr,Moe,AVr,LVr,yVr,b3,C5e,xVr,$Vr,Eoe,kVr,SVr,RVr,v3,w5e,PVr,BVr,Coe,IVr,NVr,qVr,F3,A5e,jVr,DVr,woe,GVr,OVr,VVr,T3,L5e,XVr,zVr,Aoe,WVr,QVr,UVr,M3,y5e,HVr,JVr,Loe,YVr,KVr,ZVr,E3,x5e,eXr,oXr,yoe,rXr,tXr,aXr,C3,$5e,nXr,sXr,xoe,lXr,iXr,dXr,w3,k5e,cXr,fXr,$oe,mXr,gXr,hXr,A3,BHe,nf,L3,S5e,_k,pXr,R5e,_Xr,IHe,_r,uk,uXr,sf,bXr,koe,vXr,FXr,Soe,TXr,MXr,EXr,bk,CXr,P5e,wXr,AXr,LXr,Jt,vk,yXr,B5e,xXr,$Xr,lf,kXr,I5e,SXr,RXr,Roe,PXr,BXr,IXr,y3,NXr,zr,Fk,qXr,N5e,jXr,DXr,yn,GXr,q5e,OXr,VXr,j5e,XXr,zXr,D5e,WXr,QXr,UXr,de,x3,G5e,HXr,JXr,Poe,YXr,KXr,ZXr,$3,O5e,ezr,ozr,Boe,rzr,tzr,azr,k3,V5e,nzr,szr,Ioe,lzr,izr,dzr,S3,X5e,czr,fzr,Noe,mzr,gzr,hzr,R3,z5e,pzr,_zr,qoe,uzr,bzr,vzr,P3,W5e,Fzr,Tzr,joe,Mzr,Ezr,Czr,B3,Q5e,wzr,Azr,Doe,Lzr,yzr,xzr,I3,U5e,$zr,kzr,Goe,Szr,Rzr,Pzr,N3,H5e,Bzr,Izr,Ooe,Nzr,qzr,jzr,q3,J5e,Dzr,Gzr,Voe,Ozr,Vzr,Xzr,j3,Y5e,zzr,Wzr,Xoe,Qzr,Uzr,Hzr,D3,K5e,Jzr,Yzr,zoe,Kzr,Zzr,eWr,G3,Z5e,oWr,rWr,Woe,tWr,aWr,nWr,O3,e0e,sWr,lWr,Qoe,iWr,dWr,cWr,V3,o0e,fWr,mWr,Uoe,gWr,hWr,pWr,X3,r0e,_Wr,uWr,Hoe,bWr,vWr,FWr,z3,t0e,TWr,MWr,Joe,EWr,CWr,wWr,W3,a0e,AWr,LWr,Yoe,yWr,xWr,$Wr,Q3,n0e,kWr,SWr,Koe,RWr,PWr,BWr,U3,s0e,IWr,NWr,Zoe,qWr,jWr,DWr,H3,l0e,GWr,OWr,ere,VWr,XWr,zWr,J3,NHe,df,Y3,i0e,Tk,WWr,d0e,QWr,qHe,ur,Mk,UWr,cf,HWr,ore,JWr,YWr,rre,KWr,ZWr,eQr,Ek,oQr,c0e,rQr,tQr,aQr,Yt,Ck,nQr,f0e,sQr,lQr,ff,iQr,m0e,dQr,cQr,tre,fQr,mQr,gQr,K3,hQr,Wr,wk,pQr,g0e,_Qr,uQr,xn,bQr,h0e,vQr,FQr,p0e,TQr,MQr,_0e,EQr,CQr,wQr,u0e,Z3,b0e,AQr,LQr,are,yQr,xQr,$Qr,e5,jHe,mf,o5,v0e,Ak,kQr,F0e,SQr,DHe,br,Lk,RQr,gf,PQr,nre,BQr,IQr,sre,NQr,qQr,jQr,yk,DQr,T0e,GQr,OQr,VQr,Kt,xk,XQr,M0e,zQr,WQr,hf,QQr,E0e,UQr,HQr,lre,JQr,YQr,KQr,r5,ZQr,Qr,$k,eUr,C0e,oUr,rUr,$n,tUr,w0e,aUr,nUr,A0e,sUr,lUr,L0e,iUr,dUr,cUr,y0e,t5,x0e,fUr,mUr,ire,gUr,hUr,pUr,a5,GHe,pf,n5,$0e,kk,_Ur,k0e,uUr,OHe,vr,Sk,bUr,_f,vUr,dre,FUr,TUr,cre,MUr,EUr,CUr,Rk,wUr,S0e,AUr,LUr,yUr,Zt,Pk,xUr,R0e,$Ur,kUr,uf,SUr,P0e,RUr,PUr,fre,BUr,IUr,NUr,s5,qUr,Ur,Bk,jUr,B0e,DUr,GUr,kn,OUr,I0e,VUr,XUr,N0e,zUr,WUr,q0e,QUr,UUr,HUr,te,l5,j0e,JUr,YUr,mre,KUr,ZUr,eHr,i5,D0e,oHr,rHr,gre,tHr,aHr,nHr,d5,G0e,sHr,lHr,hre,iHr,dHr,cHr,c5,O0e,fHr,mHr,pre,gHr,hHr,pHr,f5,V0e,_Hr,uHr,_re,bHr,vHr,FHr,m5,X0e,THr,MHr,ure,EHr,CHr,wHr,g5,z0e,AHr,LHr,bre,yHr,xHr,$Hr,h5,W0e,kHr,SHr,vre,RHr,PHr,BHr,p5,Q0e,IHr,NHr,Fre,qHr,jHr,DHr,_5,U0e,GHr,OHr,Tre,VHr,XHr,zHr,u5,H0e,WHr,QHr,Mre,UHr,HHr,JHr,b5,J0e,YHr,KHr,Ere,ZHr,eJr,oJr,v5,Y0e,rJr,tJr,Cre,aJr,nJr,sJr,F5,K0e,lJr,iJr,wre,dJr,cJr,fJr,T5,Z0e,mJr,gJr,Are,hJr,pJr,_Jr,M5,ewe,uJr,bJr,Lre,vJr,FJr,TJr,E5,owe,MJr,EJr,yre,CJr,wJr,AJr,C5,rwe,LJr,yJr,xre,xJr,$Jr,kJr,w5,twe,SJr,RJr,$re,PJr,BJr,IJr,A5,awe,NJr,qJr,kre,jJr,DJr,GJr,L5,nwe,OJr,VJr,Sre,XJr,zJr,WJr,y5,swe,QJr,UJr,Rre,HJr,JJr,YJr,x5,lwe,KJr,ZJr,Pre,eYr,oYr,rYr,$5,iwe,tYr,aYr,Bre,nYr,sYr,lYr,k5,dwe,iYr,dYr,Ire,cYr,fYr,mYr,S5,cwe,gYr,hYr,Nre,pYr,_Yr,uYr,R5,fwe,bYr,vYr,qre,FYr,TYr,MYr,P5,VHe,bf,B5,mwe,Ik,EYr,gwe,CYr,XHe,Fr,Nk,wYr,vf,AYr,jre,LYr,yYr,Dre,xYr,$Yr,kYr,qk,SYr,hwe,RYr,PYr,BYr,ea,jk,IYr,pwe,NYr,qYr,Ff,jYr,_we,DYr,GYr,Gre,OYr,VYr,XYr,I5,zYr,Hr,Dk,WYr,uwe,QYr,UYr,Sn,HYr,bwe,JYr,YYr,vwe,KYr,ZYr,Fwe,eKr,oKr,rKr,xe,N5,Twe,tKr,aKr,Ore,nKr,sKr,lKr,q5,Mwe,iKr,dKr,Vre,cKr,fKr,mKr,j5,Ewe,gKr,hKr,Xre,pKr,_Kr,uKr,D5,Cwe,bKr,vKr,zre,FKr,TKr,MKr,G5,wwe,EKr,CKr,Wre,wKr,AKr,LKr,O5,Awe,yKr,xKr,Qre,$Kr,kKr,SKr,V5,Lwe,RKr,PKr,Ure,BKr,IKr,NKr,X5,ywe,qKr,jKr,Hre,DKr,GKr,OKr,z5,xwe,VKr,XKr,Jre,zKr,WKr,QKr,W5,$we,UKr,HKr,Yre,JKr,YKr,KKr,Q5,zHe,Tf,U5,kwe,Gk,ZKr,Swe,eZr,WHe,Tr,Ok,oZr,Mf,rZr,Kre,tZr,aZr,Zre,nZr,sZr,lZr,Vk,iZr,Rwe,dZr,cZr,fZr,oa,Xk,mZr,Pwe,gZr,hZr,Ef,pZr,Bwe,_Zr,uZr,ete,bZr,vZr,FZr,H5,TZr,Jr,zk,MZr,Iwe,EZr,CZr,Rn,wZr,Nwe,AZr,LZr,qwe,yZr,xZr,jwe,$Zr,kZr,SZr,Ee,J5,Dwe,RZr,PZr,ote,BZr,IZr,NZr,Y5,Gwe,qZr,jZr,rte,DZr,GZr,OZr,K5,Owe,VZr,XZr,tte,zZr,WZr,QZr,Z5,Vwe,UZr,HZr,ate,JZr,YZr,KZr,e0,Xwe,ZZr,eet,nte,oet,ret,tet,o0,zwe,aet,net,ste,set,iet,det,r0,Wwe,cet,fet,lte,met,get,het,t0,Qwe,pet,_et,ite,uet,bet,vet,a0,Uwe,Fet,Tet,dte,Met,Eet,Cet,n0,Hwe,wet,Aet,cte,Let,yet,xet,s0,Jwe,$et,ket,fte,Set,Ret,Pet,l0,Ywe,Bet,Iet,mte,Net,qet,jet,i0,Kwe,Det,Get,gte,Oet,Vet,Xet,d0,QHe,Cf,c0,Zwe,Wk,zet,eAe,Wet,UHe,Mr,Qk,Qet,wf,Uet,hte,Het,Jet,pte,Yet,Ket,Zet,Uk,eot,oAe,oot,rot,tot,ra,Hk,aot,rAe,not,sot,Af,lot,tAe,iot,dot,_te,cot,fot,mot,f0,got,Yr,Jk,hot,aAe,pot,_ot,Pn,uot,nAe,bot,vot,sAe,Fot,Tot,lAe,Mot,Eot,Cot,$e,m0,iAe,wot,Aot,ute,Lot,yot,xot,g0,dAe,$ot,kot,bte,Sot,Rot,Pot,h0,cAe,Bot,Iot,vte,Not,qot,jot,p0,fAe,Dot,Got,Fte,Oot,Vot,Xot,_0,mAe,zot,Wot,Tte,Qot,Uot,Hot,u0,gAe,Jot,Yot,Mte,Kot,Zot,ert,b0,hAe,ort,rrt,Ete,trt,art,nrt,v0,pAe,srt,lrt,Cte,irt,drt,crt,F0,_Ae,frt,mrt,wte,grt,hrt,prt,T0,uAe,_rt,urt,Ate,brt,vrt,Frt,M0,HHe,Lf,E0,bAe,Yk,Trt,vAe,Mrt,JHe,Er,Kk,Ert,yf,Crt,Lte,wrt,Art,yte,Lrt,yrt,xrt,Zk,$rt,FAe,krt,Srt,Rrt,ta,eS,Prt,TAe,Brt,Irt,xf,Nrt,MAe,qrt,jrt,xte,Drt,Grt,Ort,C0,Vrt,Kr,oS,Xrt,EAe,zrt,Wrt,Bn,Qrt,CAe,Urt,Hrt,wAe,Jrt,Yrt,AAe,Krt,Zrt,ett,ke,w0,LAe,ott,rtt,$te,ttt,att,ntt,A0,yAe,stt,ltt,kte,itt,dtt,ctt,L0,xAe,ftt,mtt,Ste,gtt,htt,ptt,y0,$Ae,_tt,utt,Rte,btt,vtt,Ftt,x0,kAe,Ttt,Mtt,Pte,Ett,Ctt,wtt,$0,SAe,Att,Ltt,Bte,ytt,xtt,$tt,k0,RAe,ktt,Stt,Ite,Rtt,Ptt,Btt,S0,PAe,Itt,Ntt,Nte,qtt,jtt,Dtt,R0,BAe,Gtt,Ott,qte,Vtt,Xtt,ztt,P0,IAe,Wtt,Qtt,jte,Utt,Htt,Jtt,B0,YHe,$f,I0,NAe,rS,Ytt,qAe,Ktt,KHe,Cr,tS,Ztt,kf,eat,Dte,oat,rat,Gte,tat,aat,nat,aS,sat,jAe,lat,iat,dat,aa,nS,cat,DAe,fat,mat,Sf,gat,GAe,hat,pat,Ote,_at,uat,bat,N0,vat,Zr,sS,Fat,OAe,Tat,Mat,In,Eat,VAe,Cat,wat,XAe,Aat,Lat,zAe,yat,xat,$at,Se,q0,WAe,kat,Sat,Vte,Rat,Pat,Bat,j0,QAe,Iat,Nat,Xte,qat,jat,Dat,D0,UAe,Gat,Oat,zte,Vat,Xat,zat,G0,HAe,Wat,Qat,Wte,Uat,Hat,Jat,O0,JAe,Yat,Kat,Qte,Zat,ent,ont,V0,YAe,rnt,tnt,Ute,ant,nnt,snt,X0,KAe,lnt,int,Hte,dnt,cnt,fnt,z0,ZAe,mnt,gnt,Jte,hnt,pnt,_nt,W0,eLe,unt,bnt,Yte,vnt,Fnt,Tnt,Q0,oLe,Mnt,Ent,Kte,Cnt,wnt,Ant,U0,ZHe,Rf,H0,rLe,lS,Lnt,tLe,ynt,eJe,wr,iS,xnt,Pf,$nt,Zte,knt,Snt,eae,Rnt,Pnt,Bnt,dS,Int,aLe,Nnt,qnt,jnt,na,cS,Dnt,nLe,Gnt,Ont,Bf,Vnt,sLe,Xnt,znt,oae,Wnt,Qnt,Unt,J0,Hnt,et,fS,Jnt,lLe,Ynt,Knt,Nn,Znt,iLe,est,ost,dLe,rst,tst,cLe,ast,nst,sst,Re,Y0,fLe,lst,ist,rae,dst,cst,fst,K0,mLe,mst,gst,tae,hst,pst,_st,Z0,gLe,ust,bst,aae,vst,Fst,Tst,ew,hLe,Mst,Est,nae,Cst,wst,Ast,ow,pLe,Lst,yst,sae,xst,$st,kst,rw,_Le,Sst,Rst,lae,Pst,Bst,Ist,tw,uLe,Nst,qst,iae,jst,Dst,Gst,aw,bLe,Ost,Vst,dae,Xst,zst,Wst,nw,vLe,Qst,Ust,cae,Hst,Jst,Yst,sw,FLe,Kst,Zst,fae,elt,olt,rlt,lw,oJe,If,iw,TLe,mS,tlt,MLe,alt,rJe,Ar,gS,nlt,Nf,slt,mae,llt,ilt,gae,dlt,clt,flt,hS,mlt,ELe,glt,hlt,plt,sa,pS,_lt,CLe,ult,blt,qf,vlt,wLe,Flt,Tlt,hae,Mlt,Elt,Clt,dw,wlt,ot,_S,Alt,ALe,Llt,ylt,qn,xlt,LLe,$lt,klt,yLe,Slt,Rlt,xLe,Plt,Blt,Ilt,Xe,cw,$Le,Nlt,qlt,pae,jlt,Dlt,Glt,fw,kLe,Olt,Vlt,_ae,Xlt,zlt,Wlt,mw,SLe,Qlt,Ult,uae,Hlt,Jlt,Ylt,gw,RLe,Klt,Zlt,bae,eit,oit,rit,hw,PLe,tit,ait,vae,nit,sit,lit,pw,BLe,iit,dit,Fae,cit,fit,mit,_w,ILe,git,hit,Tae,pit,_it,uit,uw,NLe,bit,vit,Mae,Fit,Tit,Mit,bw,tJe,jf,vw,qLe,uS,Eit,jLe,Cit,aJe,Lr,bS,wit,Df,Ait,Eae,Lit,yit,Cae,xit,$it,kit,vS,Sit,DLe,Rit,Pit,Bit,la,FS,Iit,GLe,Nit,qit,Gf,jit,OLe,Dit,Git,wae,Oit,Vit,Xit,Fw,zit,rt,TS,Wit,VLe,Qit,Uit,jn,Hit,XLe,Jit,Yit,zLe,Kit,Zit,WLe,edt,odt,rdt,ze,Tw,QLe,tdt,adt,Aae,ndt,sdt,ldt,Mw,ULe,idt,ddt,Lae,cdt,fdt,mdt,Ew,HLe,gdt,hdt,yae,pdt,_dt,udt,Cw,JLe,bdt,vdt,xae,Fdt,Tdt,Mdt,ww,YLe,Edt,Cdt,$ae,wdt,Adt,Ldt,Aw,KLe,ydt,xdt,kae,$dt,kdt,Sdt,Lw,ZLe,Rdt,Pdt,Sae,Bdt,Idt,Ndt,yw,eye,qdt,jdt,Rae,Ddt,Gdt,Odt,xw,nJe,Of,$w,oye,MS,Vdt,rye,Xdt,sJe,yr,ES,zdt,Vf,Wdt,Pae,Qdt,Udt,Bae,Hdt,Jdt,Ydt,CS,Kdt,tye,Zdt,ect,oct,ia,wS,rct,aye,tct,act,Xf,nct,nye,sct,lct,Iae,ict,dct,cct,kw,fct,tt,AS,mct,sye,gct,hct,Dn,pct,lye,_ct,uct,iye,bct,vct,dye,Fct,Tct,Mct,cye,Sw,fye,Ect,Cct,Nae,wct,Act,Lct,Rw,lJe,zf,Pw,mye,LS,yct,gye,xct,iJe,xr,yS,$ct,Wf,kct,qae,Sct,Rct,jae,Pct,Bct,Ict,xS,Nct,hye,qct,jct,Dct,da,$S,Gct,pye,Oct,Vct,Qf,Xct,_ye,zct,Wct,Dae,Qct,Uct,Hct,Bw,Jct,at,kS,Yct,uye,Kct,Zct,Gn,eft,bye,oft,rft,vye,tft,aft,Fye,nft,sft,lft,SS,Iw,Tye,ift,dft,Gae,cft,fft,mft,Nw,Mye,gft,hft,Oae,pft,_ft,uft,qw,dJe,Uf,jw,Eye,RS,bft,Cye,vft,cJe,$r,PS,Fft,Hf,Tft,Vae,Mft,Eft,Xae,Cft,wft,Aft,BS,Lft,wye,yft,xft,$ft,ca,IS,kft,Aye,Sft,Rft,Jf,Pft,Lye,Bft,Ift,zae,Nft,qft,jft,Dw,Dft,nt,NS,Gft,yye,Oft,Vft,On,Xft,xye,zft,Wft,$ye,Qft,Uft,kye,Hft,Jft,Yft,Sye,Gw,Rye,Kft,Zft,Wae,emt,omt,rmt,Ow,fJe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),uy=new oe({}),by=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nm=new tmt({props:{warning:!0,$$slots:{default:[yta]},$$scope:{ctx:$}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/configuration_auto.py#L625"}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/configuration_auto.py#L648"}}),Th=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/configuration_auto.py#L771"}}),wy=new oe({}),Ay=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/tokenization_auto.py#L418"}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18678/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/tokenization_auto.py#L432"}}),tp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),$y=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/tokenization_auto.py#L633"}}),ky=new oe({}),Sy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18678/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Xp=new tmt({props:{$$slots:{default:[kta]},$$scope:{ctx:$}}}),zp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),Ny=new oe({}),qy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/processing_auto.py#L91"}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/processing_auto.py#L105"}}),h_=new tmt({props:{$$slots:{default:[Rta]},$$scope:{ctx:$}}}),p_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/processing_auto.py#L258"}}),Vy=new oe({}),Xy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L808"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),L1=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),Uy=new oe({}),Hy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L815"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),Zy=new oe({}),e9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L830"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),A8=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),a9=new oe({}),n9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L837"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),d9=new oe({}),c9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L844"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),h9=new oe({}),p9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L853"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),v9=new oe({}),F9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L898"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),C9=new oe({}),w9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L905"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),x9=new oe({}),$9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L891"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),P9=new oe({}),B9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L862"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Zta]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),K6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),j9=new oe({}),D9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L869"}}),O9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[oaa]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),X9=new oe({}),z9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L914"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),H9=new oe({}),J9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L953"}}),K9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L960"}}),tx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L880"}}),ix=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L967"}}),gx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),px=new oe({}),_x=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L990"}}),bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L974"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L981"}}),yx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),kx=new oe({}),Sx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L999"}}),Px=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),Ix=new oe({}),Nx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L1006"}}),jx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),Gx=new oe({}),Ox=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L946"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),Qx=new oe({}),Ux=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L921"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),K7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),Kx=new oe({}),Zx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L928"}}),o$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),t$=new oe({}),a$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_auto.py#L937"}}),s$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),i$=new oe({}),d$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),f$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),g$=new oe({}),h$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),_$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),b$=new oe({}),v$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),T$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),E$=new oe({}),C$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),A$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18678/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),y$=new oe({}),x$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),k$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),P$=new oe({}),B$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),N$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Gaa]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Oaa]},$$scope:{ctx:$}}}),j$=new oe({}),D$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),O$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Vaa]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Xaa]},$$scope:{ctx:$}}}),X$=new oe({}),z$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[zaa]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Waa]},$$scope:{ctx:$}}}),H$=new oe({}),J$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L536"}}),K$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Qaa]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Uaa]},$$scope:{ctx:$}}}),ek=new oe({}),ok=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L543"}}),tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Haa]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),sk=new oe({}),lk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),dk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),fk=new oe({}),mk=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L527"}}),hk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Zaa]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ena]},$$scope:{ctx:$}}}),_k=new oe({}),uk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),vk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ona]},$$scope:{ctx:$}}}),Fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rna]},$$scope:{ctx:$}}}),Tk=new oe({}),Mk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L477"}}),Ck=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[tna]},$$scope:{ctx:$}}}),wk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ana]},$$scope:{ctx:$}}}),Ak=new oe({}),Lk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_tf_auto.py#L552"}}),xk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nna]},$$scope:{ctx:$}}}),$k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sna]},$$scope:{ctx:$}}}),kk=new oe({}),Sk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Pk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),Bk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),Ik=new oe({}),Nk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),jk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[dna]},$$scope:{ctx:$}}}),Dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cna]},$$scope:{ctx:$}}}),Gk=new oe({}),Ok=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Xk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[fna]},$$scope:{ctx:$}}}),zk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mna]},$$scope:{ctx:$}}}),Wk=new oe({}),Qk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[gna]},$$scope:{ctx:$}}}),Jk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hna]},$$scope:{ctx:$}}}),Yk=new oe({}),Kk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),eS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pna]},$$scope:{ctx:$}}}),oS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_na]},$$scope:{ctx:$}}}),rS=new oe({}),tS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),nS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[una]},$$scope:{ctx:$}}}),sS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bna]},$$scope:{ctx:$}}}),lS=new oe({}),iS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),cS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vna]},$$scope:{ctx:$}}}),fS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Fna]},$$scope:{ctx:$}}}),mS=new oe({}),gS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),pS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Tna]},$$scope:{ctx:$}}}),_S=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Mna]},$$scope:{ctx:$}}}),uS=new oe({}),bS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),FS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ena]},$$scope:{ctx:$}}}),TS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Cna]},$$scope:{ctx:$}}}),MS=new oe({}),ES=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),wS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wna]},$$scope:{ctx:$}}}),AS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ana]},$$scope:{ctx:$}}}),LS=new oe({}),yS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),$S=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Lna]},$$scope:{ctx:$}}}),kS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yna]},$$scope:{ctx:$}}}),RS=new oe({}),PS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),IS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[xna]},$$scope:{ctx:$}}}),NS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18678/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$na]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),em=l(),ft=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),gy=o("from_pretrained()"),om=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),zi=o("Instantiating one of "),Xn=a("a"),hy=o("AutoConfig"),zn=o(", "),Wn=a("a"),py=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),_y=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rm=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),lP=o("will create a model that is an instance of "),Ui=a("a"),iP=o("BertModel"),dP=o("."),Lo=l(),Da=a("p"),cP=o("There is one class of "),tm=a("code"),fP=o("AutoModel"),AKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rUe=l(),Hi=a("h2"),am=a("a"),Xse=a("span"),F(uy.$$.fragment),LKe=l(),zse=a("span"),yKe=o("Extending the Auto Classes"),tUe=l(),Un=a("p"),xKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wse=a("code"),$Ke=o("NewModel"),kKe=o(", make sure you have a "),Qse=a("code"),SKe=o("NewModelConfig"),RKe=o(` then you can add those to the auto
classes like this:`),aUe=l(),F(by.$$.fragment),nUe=l(),mP=a("p"),PKe=o("You will then be able to use the auto classes like you would usually do!"),sUe=l(),F(nm.$$.fragment),lUe=l(),Ji=a("h2"),sm=a("a"),Use=a("span"),F(vy.$$.fragment),BKe=l(),Hse=a("span"),IKe=o("AutoConfig"),iUe=l(),yo=a("div"),F(Fy.$$.fragment),NKe=l(),Ty=a("p"),qKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gP=a("a"),jKe=o("from_pretrained()"),DKe=o(" class method."),GKe=l(),My=a("p"),OKe=o("This class cannot be instantiated directly using "),Jse=a("code"),VKe=o("__init__()"),XKe=o(" (throws an error)."),zKe=l(),kr=a("div"),F(Ey.$$.fragment),WKe=l(),Yse=a("p"),QKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),UKe=l(),Yi=a("p"),HKe=o("The configuration class to instantiate is selected based on the "),Kse=a("code"),JKe=o("model_type"),YKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zse=a("code"),KKe=o("pretrained_model_name_or_path"),ZKe=o(":"),eZe=l(),A=a("ul"),lm=a("li"),ele=a("strong"),oZe=o("albert"),rZe=o(" \u2014 "),hP=a("a"),tZe=o("AlbertConfig"),aZe=o(" (ALBERT model)"),nZe=l(),im=a("li"),ole=a("strong"),sZe=o("bart"),lZe=o(" \u2014 "),pP=a("a"),iZe=o("BartConfig"),dZe=o(" (BART model)"),cZe=l(),dm=a("li"),rle=a("strong"),fZe=o("beit"),mZe=o(" \u2014 "),_P=a("a"),gZe=o("BeitConfig"),hZe=o(" (BEiT model)"),pZe=l(),cm=a("li"),tle=a("strong"),_Ze=o("bert"),uZe=o(" \u2014 "),uP=a("a"),bZe=o("BertConfig"),vZe=o(" (BERT model)"),FZe=l(),fm=a("li"),ale=a("strong"),TZe=o("bert-generation"),MZe=o(" \u2014 "),bP=a("a"),EZe=o("BertGenerationConfig"),CZe=o(" (Bert Generation model)"),wZe=l(),mm=a("li"),nle=a("strong"),AZe=o("big_bird"),LZe=o(" \u2014 "),vP=a("a"),yZe=o("BigBirdConfig"),xZe=o(" (BigBird model)"),$Ze=l(),gm=a("li"),sle=a("strong"),kZe=o("bigbird_pegasus"),SZe=o(" \u2014 "),FP=a("a"),RZe=o("BigBirdPegasusConfig"),PZe=o(" (BigBird-Pegasus model)"),BZe=l(),hm=a("li"),lle=a("strong"),IZe=o("blenderbot"),NZe=o(" \u2014 "),TP=a("a"),qZe=o("BlenderbotConfig"),jZe=o(" (Blenderbot model)"),DZe=l(),pm=a("li"),ile=a("strong"),GZe=o("blenderbot-small"),OZe=o(" \u2014 "),MP=a("a"),VZe=o("BlenderbotSmallConfig"),XZe=o(" (BlenderbotSmall model)"),zZe=l(),_m=a("li"),dle=a("strong"),WZe=o("bloom"),QZe=o(" \u2014 "),EP=a("a"),UZe=o("BloomConfig"),HZe=o(" (BLOOM model)"),JZe=l(),um=a("li"),cle=a("strong"),YZe=o("camembert"),KZe=o(" \u2014 "),CP=a("a"),ZZe=o("CamembertConfig"),eeo=o(" (CamemBERT model)"),oeo=l(),bm=a("li"),fle=a("strong"),reo=o("canine"),teo=o(" \u2014 "),wP=a("a"),aeo=o("CanineConfig"),neo=o(" (CANINE model)"),seo=l(),vm=a("li"),mle=a("strong"),leo=o("clip"),ieo=o(" \u2014 "),AP=a("a"),deo=o("CLIPConfig"),ceo=o(" (CLIP model)"),feo=l(),Fm=a("li"),gle=a("strong"),meo=o("codegen"),geo=o(" \u2014 "),LP=a("a"),heo=o("CodeGenConfig"),peo=o(" (CodeGen model)"),_eo=l(),Tm=a("li"),hle=a("strong"),ueo=o("convbert"),beo=o(" \u2014 "),yP=a("a"),veo=o("ConvBertConfig"),Feo=o(" (ConvBERT model)"),Teo=l(),Mm=a("li"),ple=a("strong"),Meo=o("convnext"),Eeo=o(" \u2014 "),xP=a("a"),Ceo=o("ConvNextConfig"),weo=o(" (ConvNeXT model)"),Aeo=l(),Em=a("li"),_le=a("strong"),Leo=o("ctrl"),yeo=o(" \u2014 "),$P=a("a"),xeo=o("CTRLConfig"),$eo=o(" (CTRL model)"),keo=l(),Cm=a("li"),ule=a("strong"),Seo=o("cvt"),Reo=o(" \u2014 "),kP=a("a"),Peo=o("CvtConfig"),Beo=o(" (CvT model)"),Ieo=l(),wm=a("li"),ble=a("strong"),Neo=o("data2vec-audio"),qeo=o(" \u2014 "),SP=a("a"),jeo=o("Data2VecAudioConfig"),Deo=o(" (Data2VecAudio model)"),Geo=l(),Am=a("li"),vle=a("strong"),Oeo=o("data2vec-text"),Veo=o(" \u2014 "),RP=a("a"),Xeo=o("Data2VecTextConfig"),zeo=o(" (Data2VecText model)"),Weo=l(),Lm=a("li"),Fle=a("strong"),Qeo=o("data2vec-vision"),Ueo=o(" \u2014 "),PP=a("a"),Heo=o("Data2VecVisionConfig"),Jeo=o(" (Data2VecVision model)"),Yeo=l(),ym=a("li"),Tle=a("strong"),Keo=o("deberta"),Zeo=o(" \u2014 "),BP=a("a"),eoo=o("DebertaConfig"),ooo=o(" (DeBERTa model)"),roo=l(),xm=a("li"),Mle=a("strong"),too=o("deberta-v2"),aoo=o(" \u2014 "),IP=a("a"),noo=o("DebertaV2Config"),soo=o(" (DeBERTa-v2 model)"),loo=l(),$m=a("li"),Ele=a("strong"),ioo=o("decision_transformer"),doo=o(" \u2014 "),NP=a("a"),coo=o("DecisionTransformerConfig"),foo=o(" (Decision Transformer model)"),moo=l(),km=a("li"),Cle=a("strong"),goo=o("deit"),hoo=o(" \u2014 "),qP=a("a"),poo=o("DeiTConfig"),_oo=o(" (DeiT model)"),uoo=l(),Sm=a("li"),wle=a("strong"),boo=o("detr"),voo=o(" \u2014 "),jP=a("a"),Foo=o("DetrConfig"),Too=o(" (DETR model)"),Moo=l(),Rm=a("li"),Ale=a("strong"),Eoo=o("distilbert"),Coo=o(" \u2014 "),DP=a("a"),woo=o("DistilBertConfig"),Aoo=o(" (DistilBERT model)"),Loo=l(),Pm=a("li"),Lle=a("strong"),yoo=o("donut-swin"),xoo=o(" \u2014 "),GP=a("a"),$oo=o("DonutSwinConfig"),koo=o(" (DonutSwin model)"),Soo=l(),Bm=a("li"),yle=a("strong"),Roo=o("dpr"),Poo=o(" \u2014 "),OP=a("a"),Boo=o("DPRConfig"),Ioo=o(" (DPR model)"),Noo=l(),Im=a("li"),xle=a("strong"),qoo=o("dpt"),joo=o(" \u2014 "),VP=a("a"),Doo=o("DPTConfig"),Goo=o(" (DPT model)"),Ooo=l(),Nm=a("li"),$le=a("strong"),Voo=o("electra"),Xoo=o(" \u2014 "),XP=a("a"),zoo=o("ElectraConfig"),Woo=o(" (ELECTRA model)"),Qoo=l(),qm=a("li"),kle=a("strong"),Uoo=o("encoder-decoder"),Hoo=o(" \u2014 "),zP=a("a"),Joo=o("EncoderDecoderConfig"),Yoo=o(" (Encoder decoder model)"),Koo=l(),jm=a("li"),Sle=a("strong"),Zoo=o("flaubert"),ero=o(" \u2014 "),WP=a("a"),oro=o("FlaubertConfig"),rro=o(" (FlauBERT model)"),tro=l(),Dm=a("li"),Rle=a("strong"),aro=o("flava"),nro=o(" \u2014 "),QP=a("a"),sro=o("FlavaConfig"),lro=o(" (FLAVA model)"),iro=l(),Gm=a("li"),Ple=a("strong"),dro=o("fnet"),cro=o(" \u2014 "),UP=a("a"),fro=o("FNetConfig"),mro=o(" (FNet model)"),gro=l(),Om=a("li"),Ble=a("strong"),hro=o("fsmt"),pro=o(" \u2014 "),HP=a("a"),_ro=o("FSMTConfig"),uro=o(" (FairSeq Machine-Translation model)"),bro=l(),Vm=a("li"),Ile=a("strong"),vro=o("funnel"),Fro=o(" \u2014 "),JP=a("a"),Tro=o("FunnelConfig"),Mro=o(" (Funnel Transformer model)"),Ero=l(),Xm=a("li"),Nle=a("strong"),Cro=o("glpn"),wro=o(" \u2014 "),YP=a("a"),Aro=o("GLPNConfig"),Lro=o(" (GLPN model)"),yro=l(),zm=a("li"),qle=a("strong"),xro=o("gpt2"),$ro=o(" \u2014 "),KP=a("a"),kro=o("GPT2Config"),Sro=o(" (OpenAI GPT-2 model)"),Rro=l(),Wm=a("li"),jle=a("strong"),Pro=o("gpt_neo"),Bro=o(" \u2014 "),ZP=a("a"),Iro=o("GPTNeoConfig"),Nro=o(" (GPT Neo model)"),qro=l(),Qm=a("li"),Dle=a("strong"),jro=o("gpt_neox"),Dro=o(" \u2014 "),eB=a("a"),Gro=o("GPTNeoXConfig"),Oro=o(" (GPT NeoX model)"),Vro=l(),Um=a("li"),Gle=a("strong"),Xro=o("gptj"),zro=o(" \u2014 "),oB=a("a"),Wro=o("GPTJConfig"),Qro=o(" (GPT-J model)"),Uro=l(),Hm=a("li"),Ole=a("strong"),Hro=o("groupvit"),Jro=o(" \u2014 "),rB=a("a"),Yro=o("GroupViTConfig"),Kro=o(" (GroupViT model)"),Zro=l(),Jm=a("li"),Vle=a("strong"),eto=o("hubert"),oto=o(" \u2014 "),tB=a("a"),rto=o("HubertConfig"),tto=o(" (Hubert model)"),ato=l(),Ym=a("li"),Xle=a("strong"),nto=o("ibert"),sto=o(" \u2014 "),aB=a("a"),lto=o("IBertConfig"),ito=o(" (I-BERT model)"),dto=l(),Km=a("li"),zle=a("strong"),cto=o("imagegpt"),fto=o(" \u2014 "),nB=a("a"),mto=o("ImageGPTConfig"),gto=o(" (ImageGPT model)"),hto=l(),Zm=a("li"),Wle=a("strong"),pto=o("layoutlm"),_to=o(" \u2014 "),sB=a("a"),uto=o("LayoutLMConfig"),bto=o(" (LayoutLM model)"),vto=l(),eg=a("li"),Qle=a("strong"),Fto=o("layoutlmv2"),Tto=o(" \u2014 "),lB=a("a"),Mto=o("LayoutLMv2Config"),Eto=o(" (LayoutLMv2 model)"),Cto=l(),og=a("li"),Ule=a("strong"),wto=o("layoutlmv3"),Ato=o(" \u2014 "),iB=a("a"),Lto=o("LayoutLMv3Config"),yto=o(" (LayoutLMv3 model)"),xto=l(),rg=a("li"),Hle=a("strong"),$to=o("led"),kto=o(" \u2014 "),dB=a("a"),Sto=o("LEDConfig"),Rto=o(" (LED model)"),Pto=l(),tg=a("li"),Jle=a("strong"),Bto=o("levit"),Ito=o(" \u2014 "),cB=a("a"),Nto=o("LevitConfig"),qto=o(" (LeViT model)"),jto=l(),ag=a("li"),Yle=a("strong"),Dto=o("longformer"),Gto=o(" \u2014 "),fB=a("a"),Oto=o("LongformerConfig"),Vto=o(" (Longformer model)"),Xto=l(),ng=a("li"),Kle=a("strong"),zto=o("longt5"),Wto=o(" \u2014 "),mB=a("a"),Qto=o("LongT5Config"),Uto=o(" (LongT5 model)"),Hto=l(),sg=a("li"),Zle=a("strong"),Jto=o("luke"),Yto=o(" \u2014 "),gB=a("a"),Kto=o("LukeConfig"),Zto=o(" (LUKE model)"),eao=l(),lg=a("li"),eie=a("strong"),oao=o("lxmert"),rao=o(" \u2014 "),hB=a("a"),tao=o("LxmertConfig"),aao=o(" (LXMERT model)"),nao=l(),ig=a("li"),oie=a("strong"),sao=o("m2m_100"),lao=o(" \u2014 "),pB=a("a"),iao=o("M2M100Config"),dao=o(" (M2M100 model)"),cao=l(),dg=a("li"),rie=a("strong"),fao=o("marian"),mao=o(" \u2014 "),_B=a("a"),gao=o("MarianConfig"),hao=o(" (Marian model)"),pao=l(),cg=a("li"),tie=a("strong"),_ao=o("maskformer"),uao=o(" \u2014 "),uB=a("a"),bao=o("MaskFormerConfig"),vao=o(" (MaskFormer model)"),Fao=l(),fg=a("li"),aie=a("strong"),Tao=o("mbart"),Mao=o(" \u2014 "),bB=a("a"),Eao=o("MBartConfig"),Cao=o(" (mBART model)"),wao=l(),mg=a("li"),nie=a("strong"),Aao=o("mctct"),Lao=o(" \u2014 "),vB=a("a"),yao=o("MCTCTConfig"),xao=o(" (M-CTC-T model)"),$ao=l(),gg=a("li"),sie=a("strong"),kao=o("megatron-bert"),Sao=o(" \u2014 "),FB=a("a"),Rao=o("MegatronBertConfig"),Pao=o(" (Megatron-BERT model)"),Bao=l(),hg=a("li"),lie=a("strong"),Iao=o("mobilebert"),Nao=o(" \u2014 "),TB=a("a"),qao=o("MobileBertConfig"),jao=o(" (MobileBERT model)"),Dao=l(),pg=a("li"),iie=a("strong"),Gao=o("mobilevit"),Oao=o(" \u2014 "),MB=a("a"),Vao=o("MobileViTConfig"),Xao=o(" (MobileViT model)"),zao=l(),_g=a("li"),die=a("strong"),Wao=o("mpnet"),Qao=o(" \u2014 "),EB=a("a"),Uao=o("MPNetConfig"),Hao=o(" (MPNet model)"),Jao=l(),ug=a("li"),cie=a("strong"),Yao=o("mt5"),Kao=o(" \u2014 "),CB=a("a"),Zao=o("MT5Config"),eno=o(" (MT5 model)"),ono=l(),bg=a("li"),fie=a("strong"),rno=o("mvp"),tno=o(" \u2014 "),wB=a("a"),ano=o("MvpConfig"),nno=o(" (MVP model)"),sno=l(),vg=a("li"),mie=a("strong"),lno=o("nezha"),ino=o(" \u2014 "),AB=a("a"),dno=o("NezhaConfig"),cno=o(" (Nezha model)"),fno=l(),Fg=a("li"),gie=a("strong"),mno=o("nystromformer"),gno=o(" \u2014 "),LB=a("a"),hno=o("NystromformerConfig"),pno=o(" (Nystr\xF6mformer model)"),_no=l(),Tg=a("li"),hie=a("strong"),uno=o("openai-gpt"),bno=o(" \u2014 "),yB=a("a"),vno=o("OpenAIGPTConfig"),Fno=o(" (OpenAI GPT model)"),Tno=l(),Mg=a("li"),pie=a("strong"),Mno=o("opt"),Eno=o(" \u2014 "),xB=a("a"),Cno=o("OPTConfig"),wno=o(" (OPT model)"),Ano=l(),Eg=a("li"),_ie=a("strong"),Lno=o("owlvit"),yno=o(" \u2014 "),$B=a("a"),xno=o("OwlViTConfig"),$no=o(" (OWL-ViT model)"),kno=l(),Cg=a("li"),uie=a("strong"),Sno=o("pegasus"),Rno=o(" \u2014 "),kB=a("a"),Pno=o("PegasusConfig"),Bno=o(" (Pegasus model)"),Ino=l(),wg=a("li"),bie=a("strong"),Nno=o("perceiver"),qno=o(" \u2014 "),SB=a("a"),jno=o("PerceiverConfig"),Dno=o(" (Perceiver model)"),Gno=l(),Ag=a("li"),vie=a("strong"),Ono=o("plbart"),Vno=o(" \u2014 "),RB=a("a"),Xno=o("PLBartConfig"),zno=o(" (PLBart model)"),Wno=l(),Lg=a("li"),Fie=a("strong"),Qno=o("poolformer"),Uno=o(" \u2014 "),PB=a("a"),Hno=o("PoolFormerConfig"),Jno=o(" (PoolFormer model)"),Yno=l(),yg=a("li"),Tie=a("strong"),Kno=o("prophetnet"),Zno=o(" \u2014 "),BB=a("a"),eso=o("ProphetNetConfig"),oso=o(" (ProphetNet model)"),rso=l(),xg=a("li"),Mie=a("strong"),tso=o("qdqbert"),aso=o(" \u2014 "),IB=a("a"),nso=o("QDQBertConfig"),sso=o(" (QDQBert model)"),lso=l(),$g=a("li"),Eie=a("strong"),iso=o("rag"),dso=o(" \u2014 "),NB=a("a"),cso=o("RagConfig"),fso=o(" (RAG model)"),mso=l(),kg=a("li"),Cie=a("strong"),gso=o("realm"),hso=o(" \u2014 "),qB=a("a"),pso=o("RealmConfig"),_so=o(" (REALM model)"),uso=l(),Sg=a("li"),wie=a("strong"),bso=o("reformer"),vso=o(" \u2014 "),jB=a("a"),Fso=o("ReformerConfig"),Tso=o(" (Reformer model)"),Mso=l(),Rg=a("li"),Aie=a("strong"),Eso=o("regnet"),Cso=o(" \u2014 "),DB=a("a"),wso=o("RegNetConfig"),Aso=o(" (RegNet model)"),Lso=l(),Pg=a("li"),Lie=a("strong"),yso=o("rembert"),xso=o(" \u2014 "),GB=a("a"),$so=o("RemBertConfig"),kso=o(" (RemBERT model)"),Sso=l(),Bg=a("li"),yie=a("strong"),Rso=o("resnet"),Pso=o(" \u2014 "),OB=a("a"),Bso=o("ResNetConfig"),Iso=o(" (ResNet model)"),Nso=l(),Ig=a("li"),xie=a("strong"),qso=o("retribert"),jso=o(" \u2014 "),VB=a("a"),Dso=o("RetriBertConfig"),Gso=o(" (RetriBERT model)"),Oso=l(),Ng=a("li"),$ie=a("strong"),Vso=o("roberta"),Xso=o(" \u2014 "),XB=a("a"),zso=o("RobertaConfig"),Wso=o(" (RoBERTa model)"),Qso=l(),qg=a("li"),kie=a("strong"),Uso=o("roformer"),Hso=o(" \u2014 "),zB=a("a"),Jso=o("RoFormerConfig"),Yso=o(" (RoFormer model)"),Kso=l(),jg=a("li"),Sie=a("strong"),Zso=o("segformer"),elo=o(" \u2014 "),WB=a("a"),olo=o("SegformerConfig"),rlo=o(" (SegFormer model)"),tlo=l(),Dg=a("li"),Rie=a("strong"),alo=o("sew"),nlo=o(" \u2014 "),QB=a("a"),slo=o("SEWConfig"),llo=o(" (SEW model)"),ilo=l(),Gg=a("li"),Pie=a("strong"),dlo=o("sew-d"),clo=o(" \u2014 "),UB=a("a"),flo=o("SEWDConfig"),mlo=o(" (SEW-D model)"),glo=l(),Og=a("li"),Bie=a("strong"),hlo=o("speech-encoder-decoder"),plo=o(" \u2014 "),HB=a("a"),_lo=o("SpeechEncoderDecoderConfig"),ulo=o(" (Speech Encoder decoder model)"),blo=l(),Vg=a("li"),Iie=a("strong"),vlo=o("speech_to_text"),Flo=o(" \u2014 "),JB=a("a"),Tlo=o("Speech2TextConfig"),Mlo=o(" (Speech2Text model)"),Elo=l(),Xg=a("li"),Nie=a("strong"),Clo=o("speech_to_text_2"),wlo=o(" \u2014 "),YB=a("a"),Alo=o("Speech2Text2Config"),Llo=o(" (Speech2Text2 model)"),ylo=l(),zg=a("li"),qie=a("strong"),xlo=o("splinter"),$lo=o(" \u2014 "),KB=a("a"),klo=o("SplinterConfig"),Slo=o(" (Splinter model)"),Rlo=l(),Wg=a("li"),jie=a("strong"),Plo=o("squeezebert"),Blo=o(" \u2014 "),ZB=a("a"),Ilo=o("SqueezeBertConfig"),Nlo=o(" (SqueezeBERT model)"),qlo=l(),Qg=a("li"),Die=a("strong"),jlo=o("swin"),Dlo=o(" \u2014 "),eI=a("a"),Glo=o("SwinConfig"),Olo=o(" (Swin Transformer model)"),Vlo=l(),Ug=a("li"),Gie=a("strong"),Xlo=o("swinv2"),zlo=o(" \u2014 "),oI=a("a"),Wlo=o("Swinv2Config"),Qlo=o(" (Swin Transformer V2 model)"),Ulo=l(),Hg=a("li"),Oie=a("strong"),Hlo=o("t5"),Jlo=o(" \u2014 "),rI=a("a"),Ylo=o("T5Config"),Klo=o(" (T5 model)"),Zlo=l(),Jg=a("li"),Vie=a("strong"),eio=o("tapas"),oio=o(" \u2014 "),tI=a("a"),rio=o("TapasConfig"),tio=o(" (TAPAS model)"),aio=l(),Yg=a("li"),Xie=a("strong"),nio=o("trajectory_transformer"),sio=o(" \u2014 "),aI=a("a"),lio=o("TrajectoryTransformerConfig"),iio=o(" (Trajectory Transformer model)"),dio=l(),Kg=a("li"),zie=a("strong"),cio=o("transfo-xl"),fio=o(" \u2014 "),nI=a("a"),mio=o("TransfoXLConfig"),gio=o(" (Transformer-XL model)"),hio=l(),Zg=a("li"),Wie=a("strong"),pio=o("trocr"),_io=o(" \u2014 "),sI=a("a"),uio=o("TrOCRConfig"),bio=o(" (TrOCR model)"),vio=l(),eh=a("li"),Qie=a("strong"),Fio=o("unispeech"),Tio=o(" \u2014 "),lI=a("a"),Mio=o("UniSpeechConfig"),Eio=o(" (UniSpeech model)"),Cio=l(),oh=a("li"),Uie=a("strong"),wio=o("unispeech-sat"),Aio=o(" \u2014 "),iI=a("a"),Lio=o("UniSpeechSatConfig"),yio=o(" (UniSpeechSat model)"),xio=l(),rh=a("li"),Hie=a("strong"),$io=o("van"),kio=o(" \u2014 "),dI=a("a"),Sio=o("VanConfig"),Rio=o(" (VAN model)"),Pio=l(),th=a("li"),Jie=a("strong"),Bio=o("videomae"),Iio=o(" \u2014 "),cI=a("a"),Nio=o("VideoMAEConfig"),qio=o(" (VideoMAE model)"),jio=l(),ah=a("li"),Yie=a("strong"),Dio=o("vilt"),Gio=o(" \u2014 "),fI=a("a"),Oio=o("ViltConfig"),Vio=o(" (ViLT model)"),Xio=l(),nh=a("li"),Kie=a("strong"),zio=o("vision-encoder-decoder"),Wio=o(" \u2014 "),mI=a("a"),Qio=o("VisionEncoderDecoderConfig"),Uio=o(" (Vision Encoder decoder model)"),Hio=l(),sh=a("li"),Zie=a("strong"),Jio=o("vision-text-dual-encoder"),Yio=o(" \u2014 "),gI=a("a"),Kio=o("VisionTextDualEncoderConfig"),Zio=o(" (VisionTextDualEncoder model)"),edo=l(),lh=a("li"),ede=a("strong"),odo=o("visual_bert"),rdo=o(" \u2014 "),hI=a("a"),tdo=o("VisualBertConfig"),ado=o(" (VisualBERT model)"),ndo=l(),ih=a("li"),ode=a("strong"),sdo=o("vit"),ldo=o(" \u2014 "),pI=a("a"),ido=o("ViTConfig"),ddo=o(" (ViT model)"),cdo=l(),dh=a("li"),rde=a("strong"),fdo=o("vit_mae"),mdo=o(" \u2014 "),_I=a("a"),gdo=o("ViTMAEConfig"),hdo=o(" (ViTMAE model)"),pdo=l(),ch=a("li"),tde=a("strong"),_do=o("wav2vec2"),udo=o(" \u2014 "),uI=a("a"),bdo=o("Wav2Vec2Config"),vdo=o(" (Wav2Vec2 model)"),Fdo=l(),fh=a("li"),ade=a("strong"),Tdo=o("wav2vec2-conformer"),Mdo=o(" \u2014 "),bI=a("a"),Edo=o("Wav2Vec2ConformerConfig"),Cdo=o(" (Wav2Vec2-Conformer model)"),wdo=l(),mh=a("li"),nde=a("strong"),Ado=o("wavlm"),Ldo=o(" \u2014 "),vI=a("a"),ydo=o("WavLMConfig"),xdo=o(" (WavLM model)"),$do=l(),gh=a("li"),sde=a("strong"),kdo=o("xglm"),Sdo=o(" \u2014 "),FI=a("a"),Rdo=o("XGLMConfig"),Pdo=o(" (XGLM model)"),Bdo=l(),hh=a("li"),lde=a("strong"),Ido=o("xlm"),Ndo=o(" \u2014 "),TI=a("a"),qdo=o("XLMConfig"),jdo=o(" (XLM model)"),Ddo=l(),ph=a("li"),ide=a("strong"),Gdo=o("xlm-prophetnet"),Odo=o(" \u2014 "),MI=a("a"),Vdo=o("XLMProphetNetConfig"),Xdo=o(" (XLM-ProphetNet model)"),zdo=l(),_h=a("li"),dde=a("strong"),Wdo=o("xlm-roberta"),Qdo=o(" \u2014 "),EI=a("a"),Udo=o("XLMRobertaConfig"),Hdo=o(" (XLM-RoBERTa model)"),Jdo=l(),uh=a("li"),cde=a("strong"),Ydo=o("xlm-roberta-xl"),Kdo=o(" \u2014 "),CI=a("a"),Zdo=o("XLMRobertaXLConfig"),eco=o(" (XLM-RoBERTa-XL model)"),oco=l(),bh=a("li"),fde=a("strong"),rco=o("xlnet"),tco=o(" \u2014 "),wI=a("a"),aco=o("XLNetConfig"),nco=o(" (XLNet model)"),sco=l(),vh=a("li"),mde=a("strong"),lco=o("yolos"),ico=o(" \u2014 "),AI=a("a"),dco=o("YolosConfig"),cco=o(" (YOLOS model)"),fco=l(),Fh=a("li"),gde=a("strong"),mco=o("yoso"),gco=o(" \u2014 "),LI=a("a"),hco=o("YosoConfig"),pco=o(" (YOSO model)"),_co=l(),F(Th.$$.fragment),uco=l(),Mh=a("div"),F(Cy.$$.fragment),bco=l(),hde=a("p"),vco=o("Register a new configuration for this class."),dUe=l(),Ki=a("h2"),Eh=a("a"),pde=a("span"),F(wy.$$.fragment),Fco=l(),_de=a("span"),Tco=o("AutoTokenizer"),cUe=l(),xo=a("div"),F(Ay.$$.fragment),Mco=l(),Ly=a("p"),Eco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yI=a("a"),Cco=o("AutoTokenizer.from_pretrained()"),wco=o(" class method."),Aco=l(),yy=a("p"),Lco=o("This class cannot be instantiated directly using "),ude=a("code"),yco=o("__init__()"),xco=o(" (throws an error)."),$co=l(),Sr=a("div"),F(xy.$$.fragment),kco=l(),bde=a("p"),Sco=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Rco=l(),Ga=a("p"),Pco=o("The tokenizer class to instantiate is selected based on the "),vde=a("code"),Bco=o("model_type"),Ico=o(` property of the config object (either
passed as an argument or loaded from `),Fde=a("code"),Nco=o("pretrained_model_name_or_path"),qco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tde=a("code"),jco=o("pretrained_model_name_or_path"),Dco=o(":"),Gco=l(),k=a("ul"),Hn=a("li"),Mde=a("strong"),Oco=o("albert"),Vco=o(" \u2014 "),xI=a("a"),Xco=o("AlbertTokenizer"),zco=o(" or "),$I=a("a"),Wco=o("AlbertTokenizerFast"),Qco=o(" (ALBERT model)"),Uco=l(),Jn=a("li"),Ede=a("strong"),Hco=o("bart"),Jco=o(" \u2014 "),kI=a("a"),Yco=o("BartTokenizer"),Kco=o(" or "),SI=a("a"),Zco=o("BartTokenizerFast"),efo=o(" (BART model)"),ofo=l(),Yn=a("li"),Cde=a("strong"),rfo=o("barthez"),tfo=o(" \u2014 "),RI=a("a"),afo=o("BarthezTokenizer"),nfo=o(" or "),PI=a("a"),sfo=o("BarthezTokenizerFast"),lfo=o(" (BARThez model)"),ifo=l(),Ch=a("li"),wde=a("strong"),dfo=o("bartpho"),cfo=o(" \u2014 "),BI=a("a"),ffo=o("BartphoTokenizer"),mfo=o(" (BARTpho model)"),gfo=l(),Kn=a("li"),Ade=a("strong"),hfo=o("bert"),pfo=o(" \u2014 "),II=a("a"),_fo=o("BertTokenizer"),ufo=o(" or "),NI=a("a"),bfo=o("BertTokenizerFast"),vfo=o(" (BERT model)"),Ffo=l(),wh=a("li"),Lde=a("strong"),Tfo=o("bert-generation"),Mfo=o(" \u2014 "),qI=a("a"),Efo=o("BertGenerationTokenizer"),Cfo=o(" (Bert Generation model)"),wfo=l(),Ah=a("li"),yde=a("strong"),Afo=o("bert-japanese"),Lfo=o(" \u2014 "),jI=a("a"),yfo=o("BertJapaneseTokenizer"),xfo=o(" (BertJapanese model)"),$fo=l(),Lh=a("li"),xde=a("strong"),kfo=o("bertweet"),Sfo=o(" \u2014 "),DI=a("a"),Rfo=o("BertweetTokenizer"),Pfo=o(" (BERTweet model)"),Bfo=l(),Zn=a("li"),$de=a("strong"),Ifo=o("big_bird"),Nfo=o(" \u2014 "),GI=a("a"),qfo=o("BigBirdTokenizer"),jfo=o(" or "),OI=a("a"),Dfo=o("BigBirdTokenizerFast"),Gfo=o(" (BigBird model)"),Ofo=l(),es=a("li"),kde=a("strong"),Vfo=o("bigbird_pegasus"),Xfo=o(" \u2014 "),VI=a("a"),zfo=o("PegasusTokenizer"),Wfo=o(" or "),XI=a("a"),Qfo=o("PegasusTokenizerFast"),Ufo=o(" (BigBird-Pegasus model)"),Hfo=l(),os=a("li"),Sde=a("strong"),Jfo=o("blenderbot"),Yfo=o(" \u2014 "),zI=a("a"),Kfo=o("BlenderbotTokenizer"),Zfo=o(" or "),WI=a("a"),emo=o("BlenderbotTokenizerFast"),omo=o(" (Blenderbot model)"),rmo=l(),yh=a("li"),Rde=a("strong"),tmo=o("blenderbot-small"),amo=o(" \u2014 "),QI=a("a"),nmo=o("BlenderbotSmallTokenizer"),smo=o(" (BlenderbotSmall model)"),lmo=l(),xh=a("li"),Pde=a("strong"),imo=o("bloom"),dmo=o(" \u2014 "),UI=a("a"),cmo=o("BloomTokenizerFast"),fmo=o(" (BLOOM model)"),mmo=l(),$h=a("li"),Bde=a("strong"),gmo=o("byt5"),hmo=o(" \u2014 "),HI=a("a"),pmo=o("ByT5Tokenizer"),_mo=o(" (ByT5 model)"),umo=l(),rs=a("li"),Ide=a("strong"),bmo=o("camembert"),vmo=o(" \u2014 "),JI=a("a"),Fmo=o("CamembertTokenizer"),Tmo=o(" or "),YI=a("a"),Mmo=o("CamembertTokenizerFast"),Emo=o(" (CamemBERT model)"),Cmo=l(),kh=a("li"),Nde=a("strong"),wmo=o("canine"),Amo=o(" \u2014 "),KI=a("a"),Lmo=o("CanineTokenizer"),ymo=o(" (CANINE model)"),xmo=l(),ts=a("li"),qde=a("strong"),$mo=o("clip"),kmo=o(" \u2014 "),ZI=a("a"),Smo=o("CLIPTokenizer"),Rmo=o(" or "),eN=a("a"),Pmo=o("CLIPTokenizerFast"),Bmo=o(" (CLIP model)"),Imo=l(),as=a("li"),jde=a("strong"),Nmo=o("codegen"),qmo=o(" \u2014 "),oN=a("a"),jmo=o("CodeGenTokenizer"),Dmo=o(" or "),rN=a("a"),Gmo=o("CodeGenTokenizerFast"),Omo=o(" (CodeGen model)"),Vmo=l(),ns=a("li"),Dde=a("strong"),Xmo=o("convbert"),zmo=o(" \u2014 "),tN=a("a"),Wmo=o("ConvBertTokenizer"),Qmo=o(" or "),aN=a("a"),Umo=o("ConvBertTokenizerFast"),Hmo=o(" (ConvBERT model)"),Jmo=l(),ss=a("li"),Gde=a("strong"),Ymo=o("cpm"),Kmo=o(" \u2014 "),nN=a("a"),Zmo=o("CpmTokenizer"),ego=o(" or "),sN=a("a"),ogo=o("CpmTokenizerFast"),rgo=o(" (CPM model)"),tgo=l(),Sh=a("li"),Ode=a("strong"),ago=o("ctrl"),ngo=o(" \u2014 "),lN=a("a"),sgo=o("CTRLTokenizer"),lgo=o(" (CTRL model)"),igo=l(),ls=a("li"),Vde=a("strong"),dgo=o("data2vec-text"),cgo=o(" \u2014 "),iN=a("a"),fgo=o("RobertaTokenizer"),mgo=o(" or "),dN=a("a"),ggo=o("RobertaTokenizerFast"),hgo=o(" (Data2VecText model)"),pgo=l(),is=a("li"),Xde=a("strong"),_go=o("deberta"),ugo=o(" \u2014 "),cN=a("a"),bgo=o("DebertaTokenizer"),vgo=o(" or "),fN=a("a"),Fgo=o("DebertaTokenizerFast"),Tgo=o(" (DeBERTa model)"),Mgo=l(),ds=a("li"),zde=a("strong"),Ego=o("deberta-v2"),Cgo=o(" \u2014 "),mN=a("a"),wgo=o("DebertaV2Tokenizer"),Ago=o(" or "),gN=a("a"),Lgo=o("DebertaV2TokenizerFast"),ygo=o(" (DeBERTa-v2 model)"),xgo=l(),cs=a("li"),Wde=a("strong"),$go=o("distilbert"),kgo=o(" \u2014 "),hN=a("a"),Sgo=o("DistilBertTokenizer"),Rgo=o(" or "),pN=a("a"),Pgo=o("DistilBertTokenizerFast"),Bgo=o(" (DistilBERT model)"),Igo=l(),fs=a("li"),Qde=a("strong"),Ngo=o("dpr"),qgo=o(" \u2014 "),_N=a("a"),jgo=o("DPRQuestionEncoderTokenizer"),Dgo=o(" or "),uN=a("a"),Ggo=o("DPRQuestionEncoderTokenizerFast"),Ogo=o(" (DPR model)"),Vgo=l(),ms=a("li"),Ude=a("strong"),Xgo=o("electra"),zgo=o(" \u2014 "),bN=a("a"),Wgo=o("ElectraTokenizer"),Qgo=o(" or "),vN=a("a"),Ugo=o("ElectraTokenizerFast"),Hgo=o(" (ELECTRA model)"),Jgo=l(),Rh=a("li"),Hde=a("strong"),Ygo=o("flaubert"),Kgo=o(" \u2014 "),FN=a("a"),Zgo=o("FlaubertTokenizer"),eho=o(" (FlauBERT model)"),oho=l(),gs=a("li"),Jde=a("strong"),rho=o("fnet"),tho=o(" \u2014 "),TN=a("a"),aho=o("FNetTokenizer"),nho=o(" or "),MN=a("a"),sho=o("FNetTokenizerFast"),lho=o(" (FNet model)"),iho=l(),Ph=a("li"),Yde=a("strong"),dho=o("fsmt"),cho=o(" \u2014 "),EN=a("a"),fho=o("FSMTTokenizer"),mho=o(" (FairSeq Machine-Translation model)"),gho=l(),hs=a("li"),Kde=a("strong"),hho=o("funnel"),pho=o(" \u2014 "),CN=a("a"),_ho=o("FunnelTokenizer"),uho=o(" or "),wN=a("a"),bho=o("FunnelTokenizerFast"),vho=o(" (Funnel Transformer model)"),Fho=l(),ps=a("li"),Zde=a("strong"),Tho=o("gpt2"),Mho=o(" \u2014 "),AN=a("a"),Eho=o("GPT2Tokenizer"),Cho=o(" or "),LN=a("a"),who=o("GPT2TokenizerFast"),Aho=o(" (OpenAI GPT-2 model)"),Lho=l(),_s=a("li"),ece=a("strong"),yho=o("gpt_neo"),xho=o(" \u2014 "),yN=a("a"),$ho=o("GPT2Tokenizer"),kho=o(" or "),xN=a("a"),Sho=o("GPT2TokenizerFast"),Rho=o(" (GPT Neo model)"),Pho=l(),Bh=a("li"),oce=a("strong"),Bho=o("gpt_neox"),Iho=o(" \u2014 "),$N=a("a"),Nho=o("GPTNeoXTokenizerFast"),qho=o(" (GPT NeoX model)"),jho=l(),us=a("li"),rce=a("strong"),Dho=o("gptj"),Gho=o(" \u2014 "),kN=a("a"),Oho=o("GPT2Tokenizer"),Vho=o(" or "),SN=a("a"),Xho=o("GPT2TokenizerFast"),zho=o(" (GPT-J model)"),Who=l(),bs=a("li"),tce=a("strong"),Qho=o("groupvit"),Uho=o(" \u2014 "),RN=a("a"),Hho=o("CLIPTokenizer"),Jho=o(" or "),PN=a("a"),Yho=o("CLIPTokenizerFast"),Kho=o(" (GroupViT model)"),Zho=l(),vs=a("li"),ace=a("strong"),epo=o("herbert"),opo=o(" \u2014 "),BN=a("a"),rpo=o("HerbertTokenizer"),tpo=o(" or "),IN=a("a"),apo=o("HerbertTokenizerFast"),npo=o(" (HerBERT model)"),spo=l(),Ih=a("li"),nce=a("strong"),lpo=o("hubert"),ipo=o(" \u2014 "),NN=a("a"),dpo=o("Wav2Vec2CTCTokenizer"),cpo=o(" (Hubert model)"),fpo=l(),Fs=a("li"),sce=a("strong"),mpo=o("ibert"),gpo=o(" \u2014 "),qN=a("a"),hpo=o("RobertaTokenizer"),ppo=o(" or "),jN=a("a"),_po=o("RobertaTokenizerFast"),upo=o(" (I-BERT model)"),bpo=l(),Ts=a("li"),lce=a("strong"),vpo=o("layoutlm"),Fpo=o(" \u2014 "),DN=a("a"),Tpo=o("LayoutLMTokenizer"),Mpo=o(" or "),GN=a("a"),Epo=o("LayoutLMTokenizerFast"),Cpo=o(" (LayoutLM model)"),wpo=l(),Ms=a("li"),ice=a("strong"),Apo=o("layoutlmv2"),Lpo=o(" \u2014 "),ON=a("a"),ypo=o("LayoutLMv2Tokenizer"),xpo=o(" or "),VN=a("a"),$po=o("LayoutLMv2TokenizerFast"),kpo=o(" (LayoutLMv2 model)"),Spo=l(),Es=a("li"),dce=a("strong"),Rpo=o("layoutlmv3"),Ppo=o(" \u2014 "),XN=a("a"),Bpo=o("LayoutLMv3Tokenizer"),Ipo=o(" or "),zN=a("a"),Npo=o("LayoutLMv3TokenizerFast"),qpo=o(" (LayoutLMv3 model)"),jpo=l(),Cs=a("li"),cce=a("strong"),Dpo=o("layoutxlm"),Gpo=o(" \u2014 "),WN=a("a"),Opo=o("LayoutXLMTokenizer"),Vpo=o(" or "),QN=a("a"),Xpo=o("LayoutXLMTokenizerFast"),zpo=o(" (LayoutXLM model)"),Wpo=l(),ws=a("li"),fce=a("strong"),Qpo=o("led"),Upo=o(" \u2014 "),UN=a("a"),Hpo=o("LEDTokenizer"),Jpo=o(" or "),HN=a("a"),Ypo=o("LEDTokenizerFast"),Kpo=o(" (LED model)"),Zpo=l(),As=a("li"),mce=a("strong"),e_o=o("longformer"),o_o=o(" \u2014 "),JN=a("a"),r_o=o("LongformerTokenizer"),t_o=o(" or "),YN=a("a"),a_o=o("LongformerTokenizerFast"),n_o=o(" (Longformer model)"),s_o=l(),Ls=a("li"),gce=a("strong"),l_o=o("longt5"),i_o=o(" \u2014 "),KN=a("a"),d_o=o("T5Tokenizer"),c_o=o(" or "),ZN=a("a"),f_o=o("T5TokenizerFast"),m_o=o(" (LongT5 model)"),g_o=l(),Nh=a("li"),hce=a("strong"),h_o=o("luke"),p_o=o(" \u2014 "),eq=a("a"),__o=o("LukeTokenizer"),u_o=o(" (LUKE model)"),b_o=l(),ys=a("li"),pce=a("strong"),v_o=o("lxmert"),F_o=o(" \u2014 "),oq=a("a"),T_o=o("LxmertTokenizer"),M_o=o(" or "),rq=a("a"),E_o=o("LxmertTokenizerFast"),C_o=o(" (LXMERT model)"),w_o=l(),qh=a("li"),_ce=a("strong"),A_o=o("m2m_100"),L_o=o(" \u2014 "),tq=a("a"),y_o=o("M2M100Tokenizer"),x_o=o(" (M2M100 model)"),$_o=l(),jh=a("li"),uce=a("strong"),k_o=o("marian"),S_o=o(" \u2014 "),aq=a("a"),R_o=o("MarianTokenizer"),P_o=o(" (Marian model)"),B_o=l(),xs=a("li"),bce=a("strong"),I_o=o("mbart"),N_o=o(" \u2014 "),nq=a("a"),q_o=o("MBartTokenizer"),j_o=o(" or "),sq=a("a"),D_o=o("MBartTokenizerFast"),G_o=o(" (mBART model)"),O_o=l(),$s=a("li"),vce=a("strong"),V_o=o("mbart50"),X_o=o(" \u2014 "),lq=a("a"),z_o=o("MBart50Tokenizer"),W_o=o(" or "),iq=a("a"),Q_o=o("MBart50TokenizerFast"),U_o=o(" (mBART-50 model)"),H_o=l(),ks=a("li"),Fce=a("strong"),J_o=o("megatron-bert"),Y_o=o(" \u2014 "),dq=a("a"),K_o=o("BertTokenizer"),Z_o=o(" or "),cq=a("a"),euo=o("BertTokenizerFast"),ouo=o(" (Megatron-BERT model)"),ruo=l(),Dh=a("li"),Tce=a("strong"),tuo=o("mluke"),auo=o(" \u2014 "),fq=a("a"),nuo=o("MLukeTokenizer"),suo=o(" (mLUKE model)"),luo=l(),Ss=a("li"),Mce=a("strong"),iuo=o("mobilebert"),duo=o(" \u2014 "),mq=a("a"),cuo=o("MobileBertTokenizer"),fuo=o(" or "),gq=a("a"),muo=o("MobileBertTokenizerFast"),guo=o(" (MobileBERT model)"),huo=l(),Rs=a("li"),Ece=a("strong"),puo=o("mpnet"),_uo=o(" \u2014 "),hq=a("a"),uuo=o("MPNetTokenizer"),buo=o(" or "),pq=a("a"),vuo=o("MPNetTokenizerFast"),Fuo=o(" (MPNet model)"),Tuo=l(),Ps=a("li"),Cce=a("strong"),Muo=o("mt5"),Euo=o(" \u2014 "),_q=a("a"),Cuo=o("MT5Tokenizer"),wuo=o(" or "),uq=a("a"),Auo=o("MT5TokenizerFast"),Luo=o(" (MT5 model)"),yuo=l(),Bs=a("li"),wce=a("strong"),xuo=o("mvp"),$uo=o(" \u2014 "),bq=a("a"),kuo=o("MvpTokenizer"),Suo=o(" or "),vq=a("a"),Ruo=o("MvpTokenizerFast"),Puo=o(" (MVP model)"),Buo=l(),Is=a("li"),Ace=a("strong"),Iuo=o("nezha"),Nuo=o(" \u2014 "),Fq=a("a"),quo=o("BertTokenizer"),juo=o(" or "),Tq=a("a"),Duo=o("BertTokenizerFast"),Guo=o(" (Nezha model)"),Ouo=l(),Ns=a("li"),Lce=a("strong"),Vuo=o("nllb"),Xuo=o(" \u2014 "),Mq=a("a"),zuo=o("NllbTokenizer"),Wuo=o(" or "),Eq=a("a"),Quo=o("NllbTokenizerFast"),Uuo=o(" (NLLB model)"),Huo=l(),qs=a("li"),yce=a("strong"),Juo=o("nystromformer"),Yuo=o(" \u2014 "),Cq=a("a"),Kuo=o("AlbertTokenizer"),Zuo=o(" or "),wq=a("a"),e1o=o("AlbertTokenizerFast"),o1o=o(" (Nystr\xF6mformer model)"),r1o=l(),js=a("li"),xce=a("strong"),t1o=o("openai-gpt"),a1o=o(" \u2014 "),Aq=a("a"),n1o=o("OpenAIGPTTokenizer"),s1o=o(" or "),Lq=a("a"),l1o=o("OpenAIGPTTokenizerFast"),i1o=o(" (OpenAI GPT model)"),d1o=l(),Gh=a("li"),$ce=a("strong"),c1o=o("opt"),f1o=o(" \u2014 "),yq=a("a"),m1o=o("GPT2Tokenizer"),g1o=o(" (OPT model)"),h1o=l(),Ds=a("li"),kce=a("strong"),p1o=o("owlvit"),_1o=o(" \u2014 "),xq=a("a"),u1o=o("CLIPTokenizer"),b1o=o(" or "),$q=a("a"),v1o=o("CLIPTokenizerFast"),F1o=o(" (OWL-ViT model)"),T1o=l(),Gs=a("li"),Sce=a("strong"),M1o=o("pegasus"),E1o=o(" \u2014 "),kq=a("a"),C1o=o("PegasusTokenizer"),w1o=o(" or "),Sq=a("a"),A1o=o("PegasusTokenizerFast"),L1o=o(" (Pegasus model)"),y1o=l(),Oh=a("li"),Rce=a("strong"),x1o=o("perceiver"),$1o=o(" \u2014 "),Rq=a("a"),k1o=o("PerceiverTokenizer"),S1o=o(" (Perceiver model)"),R1o=l(),Vh=a("li"),Pce=a("strong"),P1o=o("phobert"),B1o=o(" \u2014 "),Pq=a("a"),I1o=o("PhobertTokenizer"),N1o=o(" (PhoBERT model)"),q1o=l(),Xh=a("li"),Bce=a("strong"),j1o=o("plbart"),D1o=o(" \u2014 "),Bq=a("a"),G1o=o("PLBartTokenizer"),O1o=o(" (PLBart model)"),V1o=l(),zh=a("li"),Ice=a("strong"),X1o=o("prophetnet"),z1o=o(" \u2014 "),Iq=a("a"),W1o=o("ProphetNetTokenizer"),Q1o=o(" (ProphetNet model)"),U1o=l(),Os=a("li"),Nce=a("strong"),H1o=o("qdqbert"),J1o=o(" \u2014 "),Nq=a("a"),Y1o=o("BertTokenizer"),K1o=o(" or "),qq=a("a"),Z1o=o("BertTokenizerFast"),e8o=o(" (QDQBert model)"),o8o=l(),Wh=a("li"),qce=a("strong"),r8o=o("rag"),t8o=o(" \u2014 "),jq=a("a"),a8o=o("RagTokenizer"),n8o=o(" (RAG model)"),s8o=l(),Vs=a("li"),jce=a("strong"),l8o=o("realm"),i8o=o(" \u2014 "),Dq=a("a"),d8o=o("RealmTokenizer"),c8o=o(" or "),Gq=a("a"),f8o=o("RealmTokenizerFast"),m8o=o(" (REALM model)"),g8o=l(),Xs=a("li"),Dce=a("strong"),h8o=o("reformer"),p8o=o(" \u2014 "),Oq=a("a"),_8o=o("ReformerTokenizer"),u8o=o(" or "),Vq=a("a"),b8o=o("ReformerTokenizerFast"),v8o=o(" (Reformer model)"),F8o=l(),zs=a("li"),Gce=a("strong"),T8o=o("rembert"),M8o=o(" \u2014 "),Xq=a("a"),E8o=o("RemBertTokenizer"),C8o=o(" or "),zq=a("a"),w8o=o("RemBertTokenizerFast"),A8o=o(" (RemBERT model)"),L8o=l(),Ws=a("li"),Oce=a("strong"),y8o=o("retribert"),x8o=o(" \u2014 "),Wq=a("a"),$8o=o("RetriBertTokenizer"),k8o=o(" or "),Qq=a("a"),S8o=o("RetriBertTokenizerFast"),R8o=o(" (RetriBERT model)"),P8o=l(),Qs=a("li"),Vce=a("strong"),B8o=o("roberta"),I8o=o(" \u2014 "),Uq=a("a"),N8o=o("RobertaTokenizer"),q8o=o(" or "),Hq=a("a"),j8o=o("RobertaTokenizerFast"),D8o=o(" (RoBERTa model)"),G8o=l(),Us=a("li"),Xce=a("strong"),O8o=o("roformer"),V8o=o(" \u2014 "),Jq=a("a"),X8o=o("RoFormerTokenizer"),z8o=o(" or "),Yq=a("a"),W8o=o("RoFormerTokenizerFast"),Q8o=o(" (RoFormer model)"),U8o=l(),Qh=a("li"),zce=a("strong"),H8o=o("speech_to_text"),J8o=o(" \u2014 "),Kq=a("a"),Y8o=o("Speech2TextTokenizer"),K8o=o(" (Speech2Text model)"),Z8o=l(),Uh=a("li"),Wce=a("strong"),e2o=o("speech_to_text_2"),o2o=o(" \u2014 "),Zq=a("a"),r2o=o("Speech2Text2Tokenizer"),t2o=o(" (Speech2Text2 model)"),a2o=l(),Hs=a("li"),Qce=a("strong"),n2o=o("splinter"),s2o=o(" \u2014 "),ej=a("a"),l2o=o("SplinterTokenizer"),i2o=o(" or "),oj=a("a"),d2o=o("SplinterTokenizerFast"),c2o=o(" (Splinter model)"),f2o=l(),Js=a("li"),Uce=a("strong"),m2o=o("squeezebert"),g2o=o(" \u2014 "),rj=a("a"),h2o=o("SqueezeBertTokenizer"),p2o=o(" or "),tj=a("a"),_2o=o("SqueezeBertTokenizerFast"),u2o=o(" (SqueezeBERT model)"),b2o=l(),Ys=a("li"),Hce=a("strong"),v2o=o("t5"),F2o=o(" \u2014 "),aj=a("a"),T2o=o("T5Tokenizer"),M2o=o(" or "),nj=a("a"),E2o=o("T5TokenizerFast"),C2o=o(" (T5 model)"),w2o=l(),Hh=a("li"),Jce=a("strong"),A2o=o("tapas"),L2o=o(" \u2014 "),sj=a("a"),y2o=o("TapasTokenizer"),x2o=o(" (TAPAS model)"),$2o=l(),Jh=a("li"),Yce=a("strong"),k2o=o("tapex"),S2o=o(" \u2014 "),lj=a("a"),R2o=o("TapexTokenizer"),P2o=o(" (TAPEX model)"),B2o=l(),Yh=a("li"),Kce=a("strong"),I2o=o("transfo-xl"),N2o=o(" \u2014 "),ij=a("a"),q2o=o("TransfoXLTokenizer"),j2o=o(" (Transformer-XL model)"),D2o=l(),Ks=a("li"),Zce=a("strong"),G2o=o("vilt"),O2o=o(" \u2014 "),dj=a("a"),V2o=o("BertTokenizer"),X2o=o(" or "),cj=a("a"),z2o=o("BertTokenizerFast"),W2o=o(" (ViLT model)"),Q2o=l(),Zs=a("li"),efe=a("strong"),U2o=o("visual_bert"),H2o=o(" \u2014 "),fj=a("a"),J2o=o("BertTokenizer"),Y2o=o(" or "),mj=a("a"),K2o=o("BertTokenizerFast"),Z2o=o(" (VisualBERT model)"),ebo=l(),Kh=a("li"),ofe=a("strong"),obo=o("wav2vec2"),rbo=o(" \u2014 "),gj=a("a"),tbo=o("Wav2Vec2CTCTokenizer"),abo=o(" (Wav2Vec2 model)"),nbo=l(),Zh=a("li"),rfe=a("strong"),sbo=o("wav2vec2-conformer"),lbo=o(" \u2014 "),hj=a("a"),ibo=o("Wav2Vec2CTCTokenizer"),dbo=o(" (Wav2Vec2-Conformer model)"),cbo=l(),ep=a("li"),tfe=a("strong"),fbo=o("wav2vec2_phoneme"),mbo=o(" \u2014 "),pj=a("a"),gbo=o("Wav2Vec2PhonemeCTCTokenizer"),hbo=o(" (Wav2Vec2Phoneme model)"),pbo=l(),el=a("li"),afe=a("strong"),_bo=o("xglm"),ubo=o(" \u2014 "),_j=a("a"),bbo=o("XGLMTokenizer"),vbo=o(" or "),uj=a("a"),Fbo=o("XGLMTokenizerFast"),Tbo=o(" (XGLM model)"),Mbo=l(),op=a("li"),nfe=a("strong"),Ebo=o("xlm"),Cbo=o(" \u2014 "),bj=a("a"),wbo=o("XLMTokenizer"),Abo=o(" (XLM model)"),Lbo=l(),rp=a("li"),sfe=a("strong"),ybo=o("xlm-prophetnet"),xbo=o(" \u2014 "),vj=a("a"),$bo=o("XLMProphetNetTokenizer"),kbo=o(" (XLM-ProphetNet model)"),Sbo=l(),ol=a("li"),lfe=a("strong"),Rbo=o("xlm-roberta"),Pbo=o(" \u2014 "),Fj=a("a"),Bbo=o("XLMRobertaTokenizer"),Ibo=o(" or "),Tj=a("a"),Nbo=o("XLMRobertaTokenizerFast"),qbo=o(" (XLM-RoBERTa model)"),jbo=l(),rl=a("li"),ife=a("strong"),Dbo=o("xlm-roberta-xl"),Gbo=o(" \u2014 "),Mj=a("a"),Obo=o("RobertaTokenizer"),Vbo=o(" or "),Ej=a("a"),Xbo=o("RobertaTokenizerFast"),zbo=o(" (XLM-RoBERTa-XL model)"),Wbo=l(),tl=a("li"),dfe=a("strong"),Qbo=o("xlnet"),Ubo=o(" \u2014 "),Cj=a("a"),Hbo=o("XLNetTokenizer"),Jbo=o(" or "),wj=a("a"),Ybo=o("XLNetTokenizerFast"),Kbo=o(" (XLNet model)"),Zbo=l(),al=a("li"),cfe=a("strong"),evo=o("yoso"),ovo=o(" \u2014 "),Aj=a("a"),rvo=o("AlbertTokenizer"),tvo=o(" or "),Lj=a("a"),avo=o("AlbertTokenizerFast"),nvo=o(" (YOSO model)"),svo=l(),F(tp.$$.fragment),lvo=l(),ap=a("div"),F($y.$$.fragment),ivo=l(),ffe=a("p"),dvo=o("Register a new tokenizer in this mapping."),fUe=l(),Zi=a("h2"),np=a("a"),mfe=a("span"),F(ky.$$.fragment),cvo=l(),gfe=a("span"),fvo=o("AutoFeatureExtractor"),mUe=l(),$o=a("div"),F(Sy.$$.fragment),mvo=l(),Ry=a("p"),gvo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),yj=a("a"),hvo=o("AutoFeatureExtractor.from_pretrained()"),pvo=o(" class method."),_vo=l(),Py=a("p"),uvo=o("This class cannot be instantiated directly using "),hfe=a("code"),bvo=o("__init__()"),vvo=o(" (throws an error)."),Fvo=l(),He=a("div"),F(By.$$.fragment),Tvo=l(),pfe=a("p"),Mvo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Evo=l(),Oa=a("p"),Cvo=o("The feature extractor class to instantiate is selected based on the "),_fe=a("code"),wvo=o("model_type"),Avo=o(` property of the config object
(either passed as an argument or loaded from `),ufe=a("code"),Lvo=o("pretrained_model_name_or_path"),yvo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bfe=a("code"),xvo=o("pretrained_model_name_or_path"),$vo=o(":"),kvo=l(),Q=a("ul"),sp=a("li"),vfe=a("strong"),Svo=o("beit"),Rvo=o(" \u2014 "),xj=a("a"),Pvo=o("BeitFeatureExtractor"),Bvo=o(" (BEiT model)"),Ivo=l(),lp=a("li"),Ffe=a("strong"),Nvo=o("clip"),qvo=o(" \u2014 "),$j=a("a"),jvo=o("CLIPFeatureExtractor"),Dvo=o(" (CLIP model)"),Gvo=l(),ip=a("li"),Tfe=a("strong"),Ovo=o("convnext"),Vvo=o(" \u2014 "),kj=a("a"),Xvo=o("ConvNextFeatureExtractor"),zvo=o(" (ConvNeXT model)"),Wvo=l(),dp=a("li"),Mfe=a("strong"),Qvo=o("cvt"),Uvo=o(" \u2014 "),Sj=a("a"),Hvo=o("ConvNextFeatureExtractor"),Jvo=o(" (CvT model)"),Yvo=l(),cp=a("li"),Efe=a("strong"),Kvo=o("data2vec-audio"),Zvo=o(" \u2014 "),Rj=a("a"),eFo=o("Wav2Vec2FeatureExtractor"),oFo=o(" (Data2VecAudio model)"),rFo=l(),fp=a("li"),Cfe=a("strong"),tFo=o("data2vec-vision"),aFo=o(" \u2014 "),Pj=a("a"),nFo=o("BeitFeatureExtractor"),sFo=o(" (Data2VecVision model)"),lFo=l(),mp=a("li"),wfe=a("strong"),iFo=o("deit"),dFo=o(" \u2014 "),Bj=a("a"),cFo=o("DeiTFeatureExtractor"),fFo=o(" (DeiT model)"),mFo=l(),gp=a("li"),Afe=a("strong"),gFo=o("detr"),hFo=o(" \u2014 "),Ij=a("a"),pFo=o("DetrFeatureExtractor"),_Fo=o(" (DETR model)"),uFo=l(),hp=a("li"),Lfe=a("strong"),bFo=o("donut"),vFo=o(" \u2014 "),Nj=a("a"),FFo=o("DonutFeatureExtractor"),TFo=o(" (Donut model)"),MFo=l(),pp=a("li"),yfe=a("strong"),EFo=o("dpt"),CFo=o(" \u2014 "),qj=a("a"),wFo=o("DPTFeatureExtractor"),AFo=o(" (DPT model)"),LFo=l(),_p=a("li"),xfe=a("strong"),yFo=o("flava"),xFo=o(" \u2014 "),jj=a("a"),$Fo=o("FlavaFeatureExtractor"),kFo=o(" (FLAVA model)"),SFo=l(),up=a("li"),$fe=a("strong"),RFo=o("glpn"),PFo=o(" \u2014 "),Dj=a("a"),BFo=o("GLPNFeatureExtractor"),IFo=o(" (GLPN model)"),NFo=l(),bp=a("li"),kfe=a("strong"),qFo=o("groupvit"),jFo=o(" \u2014 "),Gj=a("a"),DFo=o("CLIPFeatureExtractor"),GFo=o(" (GroupViT model)"),OFo=l(),vp=a("li"),Sfe=a("strong"),VFo=o("hubert"),XFo=o(" \u2014 "),Oj=a("a"),zFo=o("Wav2Vec2FeatureExtractor"),WFo=o(" (Hubert model)"),QFo=l(),Fp=a("li"),Rfe=a("strong"),UFo=o("imagegpt"),HFo=o(" \u2014 "),Vj=a("a"),JFo=o("ImageGPTFeatureExtractor"),YFo=o(" (ImageGPT model)"),KFo=l(),Tp=a("li"),Pfe=a("strong"),ZFo=o("layoutlmv2"),e6o=o(" \u2014 "),Xj=a("a"),o6o=o("LayoutLMv2FeatureExtractor"),r6o=o(" (LayoutLMv2 model)"),t6o=l(),Mp=a("li"),Bfe=a("strong"),a6o=o("layoutlmv3"),n6o=o(" \u2014 "),zj=a("a"),s6o=o("LayoutLMv3FeatureExtractor"),l6o=o(" (LayoutLMv3 model)"),i6o=l(),Ep=a("li"),Ife=a("strong"),d6o=o("levit"),c6o=o(" \u2014 "),Wj=a("a"),f6o=o("LevitFeatureExtractor"),m6o=o(" (LeViT model)"),g6o=l(),Cp=a("li"),Nfe=a("strong"),h6o=o("maskformer"),p6o=o(" \u2014 "),Qj=a("a"),_6o=o("MaskFormerFeatureExtractor"),u6o=o(" (MaskFormer model)"),b6o=l(),wp=a("li"),qfe=a("strong"),v6o=o("mctct"),F6o=o(" \u2014 "),Uj=a("a"),T6o=o("MCTCTFeatureExtractor"),M6o=o(" (M-CTC-T model)"),E6o=l(),Ap=a("li"),jfe=a("strong"),C6o=o("mobilevit"),w6o=o(" \u2014 "),Hj=a("a"),A6o=o("MobileViTFeatureExtractor"),L6o=o(" (MobileViT model)"),y6o=l(),Lp=a("li"),Dfe=a("strong"),x6o=o("owlvit"),$6o=o(" \u2014 "),Jj=a("a"),k6o=o("OwlViTFeatureExtractor"),S6o=o(" (OWL-ViT model)"),R6o=l(),yp=a("li"),Gfe=a("strong"),P6o=o("perceiver"),B6o=o(" \u2014 "),Yj=a("a"),I6o=o("PerceiverFeatureExtractor"),N6o=o(" (Perceiver model)"),q6o=l(),xp=a("li"),Ofe=a("strong"),j6o=o("poolformer"),D6o=o(" \u2014 "),Kj=a("a"),G6o=o("PoolFormerFeatureExtractor"),O6o=o(" (PoolFormer model)"),V6o=l(),$p=a("li"),Vfe=a("strong"),X6o=o("regnet"),z6o=o(" \u2014 "),Zj=a("a"),W6o=o("ConvNextFeatureExtractor"),Q6o=o(" (RegNet model)"),U6o=l(),kp=a("li"),Xfe=a("strong"),H6o=o("resnet"),J6o=o(" \u2014 "),eD=a("a"),Y6o=o("ConvNextFeatureExtractor"),K6o=o(" (ResNet model)"),Z6o=l(),Sp=a("li"),zfe=a("strong"),eTo=o("segformer"),oTo=o(" \u2014 "),oD=a("a"),rTo=o("SegformerFeatureExtractor"),tTo=o(" (SegFormer model)"),aTo=l(),Rp=a("li"),Wfe=a("strong"),nTo=o("speech_to_text"),sTo=o(" \u2014 "),rD=a("a"),lTo=o("Speech2TextFeatureExtractor"),iTo=o(" (Speech2Text model)"),dTo=l(),Pp=a("li"),Qfe=a("strong"),cTo=o("swin"),fTo=o(" \u2014 "),tD=a("a"),mTo=o("ViTFeatureExtractor"),gTo=o(" (Swin Transformer model)"),hTo=l(),Bp=a("li"),Ufe=a("strong"),pTo=o("swinv2"),_To=o(" \u2014 "),aD=a("a"),uTo=o("ViTFeatureExtractor"),bTo=o(" (Swin Transformer V2 model)"),vTo=l(),Ip=a("li"),Hfe=a("strong"),FTo=o("van"),TTo=o(" \u2014 "),nD=a("a"),MTo=o("ConvNextFeatureExtractor"),ETo=o(" (VAN model)"),CTo=l(),Np=a("li"),Jfe=a("strong"),wTo=o("videomae"),ATo=o(" \u2014 "),sD=a("a"),LTo=o("ViTFeatureExtractor"),yTo=o(" (VideoMAE model)"),xTo=l(),qp=a("li"),Yfe=a("strong"),$To=o("vilt"),kTo=o(" \u2014 "),lD=a("a"),STo=o("ViltFeatureExtractor"),RTo=o(" (ViLT model)"),PTo=l(),jp=a("li"),Kfe=a("strong"),BTo=o("vit"),ITo=o(" \u2014 "),iD=a("a"),NTo=o("ViTFeatureExtractor"),qTo=o(" (ViT model)"),jTo=l(),Dp=a("li"),Zfe=a("strong"),DTo=o("vit_mae"),GTo=o(" \u2014 "),dD=a("a"),OTo=o("ViTFeatureExtractor"),VTo=o(" (ViTMAE model)"),XTo=l(),Gp=a("li"),eme=a("strong"),zTo=o("wav2vec2"),WTo=o(" \u2014 "),cD=a("a"),QTo=o("Wav2Vec2FeatureExtractor"),UTo=o(" (Wav2Vec2 model)"),HTo=l(),Op=a("li"),ome=a("strong"),JTo=o("wav2vec2-conformer"),YTo=o(" \u2014 "),fD=a("a"),KTo=o("Wav2Vec2FeatureExtractor"),ZTo=o(" (Wav2Vec2-Conformer model)"),e7o=l(),Vp=a("li"),rme=a("strong"),o7o=o("yolos"),r7o=o(" \u2014 "),mD=a("a"),t7o=o("YolosFeatureExtractor"),a7o=o(" (YOLOS model)"),n7o=l(),F(Xp.$$.fragment),s7o=l(),F(zp.$$.fragment),l7o=l(),Wp=a("div"),F(Iy.$$.fragment),i7o=l(),tme=a("p"),d7o=o("Register a new feature extractor for this class."),gUe=l(),ed=a("h2"),Qp=a("a"),ame=a("span"),F(Ny.$$.fragment),c7o=l(),nme=a("span"),f7o=o("AutoProcessor"),hUe=l(),ko=a("div"),F(qy.$$.fragment),m7o=l(),jy=a("p"),g7o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),gD=a("a"),h7o=o("AutoProcessor.from_pretrained()"),p7o=o(" class method."),_7o=l(),Dy=a("p"),u7o=o("This class cannot be instantiated directly using "),sme=a("code"),b7o=o("__init__()"),v7o=o(" (throws an error)."),F7o=l(),Je=a("div"),F(Gy.$$.fragment),T7o=l(),lme=a("p"),M7o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),E7o=l(),od=a("p"),C7o=o("The processor class to instantiate is selected based on the "),ime=a("code"),w7o=o("model_type"),A7o=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),L7o=o("pretrained_model_name_or_path"),y7o=o(" if possible):"),x7o=l(),ce=a("ul"),Up=a("li"),cme=a("strong"),$7o=o("clip"),k7o=o(" \u2014 "),hD=a("a"),S7o=o("CLIPProcessor"),R7o=o(" (CLIP model)"),P7o=l(),Hp=a("li"),fme=a("strong"),B7o=o("donut"),I7o=o(" \u2014 "),pD=a("a"),N7o=o("DonutProcessor"),q7o=o(" (Donut model)"),j7o=l(),Jp=a("li"),mme=a("strong"),D7o=o("flava"),G7o=o(" \u2014 "),_D=a("a"),O7o=o("FlavaProcessor"),V7o=o(" (FLAVA model)"),X7o=l(),Yp=a("li"),gme=a("strong"),z7o=o("groupvit"),W7o=o(" \u2014 "),uD=a("a"),Q7o=o("CLIPProcessor"),U7o=o(" (GroupViT model)"),H7o=l(),Kp=a("li"),hme=a("strong"),J7o=o("layoutlmv2"),Y7o=o(" \u2014 "),bD=a("a"),K7o=o("LayoutLMv2Processor"),Z7o=o(" (LayoutLMv2 model)"),eMo=l(),Zp=a("li"),pme=a("strong"),oMo=o("layoutlmv3"),rMo=o(" \u2014 "),vD=a("a"),tMo=o("LayoutLMv3Processor"),aMo=o(" (LayoutLMv3 model)"),nMo=l(),e_=a("li"),_me=a("strong"),sMo=o("layoutxlm"),lMo=o(" \u2014 "),FD=a("a"),iMo=o("LayoutXLMProcessor"),dMo=o(" (LayoutXLM model)"),cMo=l(),o_=a("li"),ume=a("strong"),fMo=o("owlvit"),mMo=o(" \u2014 "),TD=a("a"),gMo=o("OwlViTProcessor"),hMo=o(" (OWL-ViT model)"),pMo=l(),r_=a("li"),bme=a("strong"),_Mo=o("sew"),uMo=o(" \u2014 "),MD=a("a"),bMo=o("Wav2Vec2Processor"),vMo=o(" (SEW model)"),FMo=l(),t_=a("li"),vme=a("strong"),TMo=o("sew-d"),MMo=o(" \u2014 "),ED=a("a"),EMo=o("Wav2Vec2Processor"),CMo=o(" (SEW-D model)"),wMo=l(),a_=a("li"),Fme=a("strong"),AMo=o("speech_to_text"),LMo=o(" \u2014 "),CD=a("a"),yMo=o("Speech2TextProcessor"),xMo=o(" (Speech2Text model)"),$Mo=l(),n_=a("li"),Tme=a("strong"),kMo=o("speech_to_text_2"),SMo=o(" \u2014 "),wD=a("a"),RMo=o("Speech2Text2Processor"),PMo=o(" (Speech2Text2 model)"),BMo=l(),s_=a("li"),Mme=a("strong"),IMo=o("trocr"),NMo=o(" \u2014 "),AD=a("a"),qMo=o("TrOCRProcessor"),jMo=o(" (TrOCR model)"),DMo=l(),l_=a("li"),Eme=a("strong"),GMo=o("unispeech"),OMo=o(" \u2014 "),LD=a("a"),VMo=o("Wav2Vec2Processor"),XMo=o(" (UniSpeech model)"),zMo=l(),i_=a("li"),Cme=a("strong"),WMo=o("unispeech-sat"),QMo=o(" \u2014 "),yD=a("a"),UMo=o("Wav2Vec2Processor"),HMo=o(" (UniSpeechSat model)"),JMo=l(),d_=a("li"),wme=a("strong"),YMo=o("vilt"),KMo=o(" \u2014 "),xD=a("a"),ZMo=o("ViltProcessor"),eEo=o(" (ViLT model)"),oEo=l(),c_=a("li"),Ame=a("strong"),rEo=o("vision-text-dual-encoder"),tEo=o(" \u2014 "),$D=a("a"),aEo=o("VisionTextDualEncoderProcessor"),nEo=o(" (VisionTextDualEncoder model)"),sEo=l(),f_=a("li"),Lme=a("strong"),lEo=o("wav2vec2"),iEo=o(" \u2014 "),kD=a("a"),dEo=o("Wav2Vec2Processor"),cEo=o(" (Wav2Vec2 model)"),fEo=l(),m_=a("li"),yme=a("strong"),mEo=o("wav2vec2-conformer"),gEo=o(" \u2014 "),SD=a("a"),hEo=o("Wav2Vec2Processor"),pEo=o(" (Wav2Vec2-Conformer model)"),_Eo=l(),g_=a("li"),xme=a("strong"),uEo=o("wavlm"),bEo=o(" \u2014 "),RD=a("a"),vEo=o("Wav2Vec2Processor"),FEo=o(" (WavLM model)"),TEo=l(),F(h_.$$.fragment),MEo=l(),F(p_.$$.fragment),EEo=l(),__=a("div"),F(Oy.$$.fragment),CEo=l(),$me=a("p"),wEo=o("Register a new processor for this class."),pUe=l(),rd=a("h2"),u_=a("a"),kme=a("span"),F(Vy.$$.fragment),AEo=l(),Sme=a("span"),LEo=o("AutoModel"),_Ue=l(),So=a("div"),F(Xy.$$.fragment),yEo=l(),td=a("p"),xEo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PD=a("a"),$Eo=o("from_pretrained()"),kEo=o(" class method or the "),BD=a("a"),SEo=o("from_config()"),REo=o(` class
method.`),PEo=l(),zy=a("p"),BEo=o("This class cannot be instantiated directly using "),Rme=a("code"),IEo=o("__init__()"),NEo=o(" (throws an error)."),qEo=l(),mt=a("div"),F(Wy.$$.fragment),jEo=l(),Pme=a("p"),DEo=o("Instantiates one of the base model classes of the library from a configuration."),GEo=l(),ad=a("p"),OEo=o(`Note:
Loading a model from its configuration file does `),Bme=a("strong"),VEo=o("not"),XEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=a("a"),zEo=o("from_pretrained()"),WEo=o(" to load the model weights."),QEo=l(),F(b_.$$.fragment),UEo=l(),Ye=a("div"),F(Qy.$$.fragment),HEo=l(),Ime=a("p"),JEo=o("Instantiate one of the base model classes of the library from a pretrained model."),YEo=l(),Va=a("p"),KEo=o("The model class to instantiate is selected based on the "),Nme=a("code"),ZEo=o("model_type"),e4o=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),o4o=o("pretrained_model_name_or_path"),r4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=a("code"),t4o=o("pretrained_model_name_or_path"),a4o=o(":"),n4o=l(),y=a("ul"),v_=a("li"),Dme=a("strong"),s4o=o("albert"),l4o=o(" \u2014 "),ND=a("a"),i4o=o("AlbertModel"),d4o=o(" (ALBERT model)"),c4o=l(),F_=a("li"),Gme=a("strong"),f4o=o("bart"),m4o=o(" \u2014 "),qD=a("a"),g4o=o("BartModel"),h4o=o(" (BART model)"),p4o=l(),T_=a("li"),Ome=a("strong"),_4o=o("beit"),u4o=o(" \u2014 "),jD=a("a"),b4o=o("BeitModel"),v4o=o(" (BEiT model)"),F4o=l(),M_=a("li"),Vme=a("strong"),T4o=o("bert"),M4o=o(" \u2014 "),DD=a("a"),E4o=o("BertModel"),C4o=o(" (BERT model)"),w4o=l(),E_=a("li"),Xme=a("strong"),A4o=o("bert-generation"),L4o=o(" \u2014 "),GD=a("a"),y4o=o("BertGenerationEncoder"),x4o=o(" (Bert Generation model)"),$4o=l(),C_=a("li"),zme=a("strong"),k4o=o("big_bird"),S4o=o(" \u2014 "),OD=a("a"),R4o=o("BigBirdModel"),P4o=o(" (BigBird model)"),B4o=l(),w_=a("li"),Wme=a("strong"),I4o=o("bigbird_pegasus"),N4o=o(" \u2014 "),VD=a("a"),q4o=o("BigBirdPegasusModel"),j4o=o(" (BigBird-Pegasus model)"),D4o=l(),A_=a("li"),Qme=a("strong"),G4o=o("blenderbot"),O4o=o(" \u2014 "),XD=a("a"),V4o=o("BlenderbotModel"),X4o=o(" (Blenderbot model)"),z4o=l(),L_=a("li"),Ume=a("strong"),W4o=o("blenderbot-small"),Q4o=o(" \u2014 "),zD=a("a"),U4o=o("BlenderbotSmallModel"),H4o=o(" (BlenderbotSmall model)"),J4o=l(),y_=a("li"),Hme=a("strong"),Y4o=o("bloom"),K4o=o(" \u2014 "),WD=a("a"),Z4o=o("BloomModel"),eCo=o(" (BLOOM model)"),oCo=l(),x_=a("li"),Jme=a("strong"),rCo=o("camembert"),tCo=o(" \u2014 "),QD=a("a"),aCo=o("CamembertModel"),nCo=o(" (CamemBERT model)"),sCo=l(),$_=a("li"),Yme=a("strong"),lCo=o("canine"),iCo=o(" \u2014 "),UD=a("a"),dCo=o("CanineModel"),cCo=o(" (CANINE model)"),fCo=l(),k_=a("li"),Kme=a("strong"),mCo=o("clip"),gCo=o(" \u2014 "),HD=a("a"),hCo=o("CLIPModel"),pCo=o(" (CLIP model)"),_Co=l(),S_=a("li"),Zme=a("strong"),uCo=o("codegen"),bCo=o(" \u2014 "),JD=a("a"),vCo=o("CodeGenModel"),FCo=o(" (CodeGen model)"),TCo=l(),R_=a("li"),ege=a("strong"),MCo=o("convbert"),ECo=o(" \u2014 "),YD=a("a"),CCo=o("ConvBertModel"),wCo=o(" (ConvBERT model)"),ACo=l(),P_=a("li"),oge=a("strong"),LCo=o("convnext"),yCo=o(" \u2014 "),KD=a("a"),xCo=o("ConvNextModel"),$Co=o(" (ConvNeXT model)"),kCo=l(),B_=a("li"),rge=a("strong"),SCo=o("ctrl"),RCo=o(" \u2014 "),ZD=a("a"),PCo=o("CTRLModel"),BCo=o(" (CTRL model)"),ICo=l(),I_=a("li"),tge=a("strong"),NCo=o("cvt"),qCo=o(" \u2014 "),eG=a("a"),jCo=o("CvtModel"),DCo=o(" (CvT model)"),GCo=l(),N_=a("li"),age=a("strong"),OCo=o("data2vec-audio"),VCo=o(" \u2014 "),oG=a("a"),XCo=o("Data2VecAudioModel"),zCo=o(" (Data2VecAudio model)"),WCo=l(),q_=a("li"),nge=a("strong"),QCo=o("data2vec-text"),UCo=o(" \u2014 "),rG=a("a"),HCo=o("Data2VecTextModel"),JCo=o(" (Data2VecText model)"),YCo=l(),j_=a("li"),sge=a("strong"),KCo=o("data2vec-vision"),ZCo=o(" \u2014 "),tG=a("a"),e3o=o("Data2VecVisionModel"),o3o=o(" (Data2VecVision model)"),r3o=l(),D_=a("li"),lge=a("strong"),t3o=o("deberta"),a3o=o(" \u2014 "),aG=a("a"),n3o=o("DebertaModel"),s3o=o(" (DeBERTa model)"),l3o=l(),G_=a("li"),ige=a("strong"),i3o=o("deberta-v2"),d3o=o(" \u2014 "),nG=a("a"),c3o=o("DebertaV2Model"),f3o=o(" (DeBERTa-v2 model)"),m3o=l(),O_=a("li"),dge=a("strong"),g3o=o("decision_transformer"),h3o=o(" \u2014 "),sG=a("a"),p3o=o("DecisionTransformerModel"),_3o=o(" (Decision Transformer model)"),u3o=l(),V_=a("li"),cge=a("strong"),b3o=o("deit"),v3o=o(" \u2014 "),lG=a("a"),F3o=o("DeiTModel"),T3o=o(" (DeiT model)"),M3o=l(),X_=a("li"),fge=a("strong"),E3o=o("detr"),C3o=o(" \u2014 "),iG=a("a"),w3o=o("DetrModel"),A3o=o(" (DETR model)"),L3o=l(),z_=a("li"),mge=a("strong"),y3o=o("distilbert"),x3o=o(" \u2014 "),dG=a("a"),$3o=o("DistilBertModel"),k3o=o(" (DistilBERT model)"),S3o=l(),W_=a("li"),gge=a("strong"),R3o=o("donut-swin"),P3o=o(" \u2014 "),cG=a("a"),B3o=o("DonutSwinModel"),I3o=o(" (DonutSwin model)"),N3o=l(),Q_=a("li"),hge=a("strong"),q3o=o("dpr"),j3o=o(" \u2014 "),fG=a("a"),D3o=o("DPRQuestionEncoder"),G3o=o(" (DPR model)"),O3o=l(),U_=a("li"),pge=a("strong"),V3o=o("dpt"),X3o=o(" \u2014 "),mG=a("a"),z3o=o("DPTModel"),W3o=o(" (DPT model)"),Q3o=l(),H_=a("li"),_ge=a("strong"),U3o=o("electra"),H3o=o(" \u2014 "),gG=a("a"),J3o=o("ElectraModel"),Y3o=o(" (ELECTRA model)"),K3o=l(),J_=a("li"),uge=a("strong"),Z3o=o("flaubert"),e5o=o(" \u2014 "),hG=a("a"),o5o=o("FlaubertModel"),r5o=o(" (FlauBERT model)"),t5o=l(),Y_=a("li"),bge=a("strong"),a5o=o("flava"),n5o=o(" \u2014 "),pG=a("a"),s5o=o("FlavaModel"),l5o=o(" (FLAVA model)"),i5o=l(),K_=a("li"),vge=a("strong"),d5o=o("fnet"),c5o=o(" \u2014 "),_G=a("a"),f5o=o("FNetModel"),m5o=o(" (FNet model)"),g5o=l(),Z_=a("li"),Fge=a("strong"),h5o=o("fsmt"),p5o=o(" \u2014 "),uG=a("a"),_5o=o("FSMTModel"),u5o=o(" (FairSeq Machine-Translation model)"),b5o=l(),nl=a("li"),Tge=a("strong"),v5o=o("funnel"),F5o=o(" \u2014 "),bG=a("a"),T5o=o("FunnelModel"),M5o=o(" or "),vG=a("a"),E5o=o("FunnelBaseModel"),C5o=o(" (Funnel Transformer model)"),w5o=l(),eu=a("li"),Mge=a("strong"),A5o=o("glpn"),L5o=o(" \u2014 "),FG=a("a"),y5o=o("GLPNModel"),x5o=o(" (GLPN model)"),$5o=l(),ou=a("li"),Ege=a("strong"),k5o=o("gpt2"),S5o=o(" \u2014 "),TG=a("a"),R5o=o("GPT2Model"),P5o=o(" (OpenAI GPT-2 model)"),B5o=l(),ru=a("li"),Cge=a("strong"),I5o=o("gpt_neo"),N5o=o(" \u2014 "),MG=a("a"),q5o=o("GPTNeoModel"),j5o=o(" (GPT Neo model)"),D5o=l(),tu=a("li"),wge=a("strong"),G5o=o("gpt_neox"),O5o=o(" \u2014 "),EG=a("a"),V5o=o("GPTNeoXModel"),X5o=o(" (GPT NeoX model)"),z5o=l(),au=a("li"),Age=a("strong"),W5o=o("gptj"),Q5o=o(" \u2014 "),CG=a("a"),U5o=o("GPTJModel"),H5o=o(" (GPT-J model)"),J5o=l(),nu=a("li"),Lge=a("strong"),Y5o=o("groupvit"),K5o=o(" \u2014 "),wG=a("a"),Z5o=o("GroupViTModel"),e0o=o(" (GroupViT model)"),o0o=l(),su=a("li"),yge=a("strong"),r0o=o("hubert"),t0o=o(" \u2014 "),AG=a("a"),a0o=o("HubertModel"),n0o=o(" (Hubert model)"),s0o=l(),lu=a("li"),xge=a("strong"),l0o=o("ibert"),i0o=o(" \u2014 "),LG=a("a"),d0o=o("IBertModel"),c0o=o(" (I-BERT model)"),f0o=l(),iu=a("li"),$ge=a("strong"),m0o=o("imagegpt"),g0o=o(" \u2014 "),yG=a("a"),h0o=o("ImageGPTModel"),p0o=o(" (ImageGPT model)"),_0o=l(),du=a("li"),kge=a("strong"),u0o=o("layoutlm"),b0o=o(" \u2014 "),xG=a("a"),v0o=o("LayoutLMModel"),F0o=o(" (LayoutLM model)"),T0o=l(),cu=a("li"),Sge=a("strong"),M0o=o("layoutlmv2"),E0o=o(" \u2014 "),$G=a("a"),C0o=o("LayoutLMv2Model"),w0o=o(" (LayoutLMv2 model)"),A0o=l(),fu=a("li"),Rge=a("strong"),L0o=o("layoutlmv3"),y0o=o(" \u2014 "),kG=a("a"),x0o=o("LayoutLMv3Model"),$0o=o(" (LayoutLMv3 model)"),k0o=l(),mu=a("li"),Pge=a("strong"),S0o=o("led"),R0o=o(" \u2014 "),SG=a("a"),P0o=o("LEDModel"),B0o=o(" (LED model)"),I0o=l(),gu=a("li"),Bge=a("strong"),N0o=o("levit"),q0o=o(" \u2014 "),RG=a("a"),j0o=o("LevitModel"),D0o=o(" (LeViT model)"),G0o=l(),hu=a("li"),Ige=a("strong"),O0o=o("longformer"),V0o=o(" \u2014 "),PG=a("a"),X0o=o("LongformerModel"),z0o=o(" (Longformer model)"),W0o=l(),pu=a("li"),Nge=a("strong"),Q0o=o("longt5"),U0o=o(" \u2014 "),BG=a("a"),H0o=o("LongT5Model"),J0o=o(" (LongT5 model)"),Y0o=l(),_u=a("li"),qge=a("strong"),K0o=o("luke"),Z0o=o(" \u2014 "),IG=a("a"),ewo=o("LukeModel"),owo=o(" (LUKE model)"),rwo=l(),uu=a("li"),jge=a("strong"),two=o("lxmert"),awo=o(" \u2014 "),NG=a("a"),nwo=o("LxmertModel"),swo=o(" (LXMERT model)"),lwo=l(),bu=a("li"),Dge=a("strong"),iwo=o("m2m_100"),dwo=o(" \u2014 "),qG=a("a"),cwo=o("M2M100Model"),fwo=o(" (M2M100 model)"),mwo=l(),vu=a("li"),Gge=a("strong"),gwo=o("marian"),hwo=o(" \u2014 "),jG=a("a"),pwo=o("MarianModel"),_wo=o(" (Marian model)"),uwo=l(),Fu=a("li"),Oge=a("strong"),bwo=o("maskformer"),vwo=o(" \u2014 "),DG=a("a"),Fwo=o("MaskFormerModel"),Two=o(" (MaskFormer model)"),Mwo=l(),Tu=a("li"),Vge=a("strong"),Ewo=o("mbart"),Cwo=o(" \u2014 "),GG=a("a"),wwo=o("MBartModel"),Awo=o(" (mBART model)"),Lwo=l(),Mu=a("li"),Xge=a("strong"),ywo=o("mctct"),xwo=o(" \u2014 "),OG=a("a"),$wo=o("MCTCTModel"),kwo=o(" (M-CTC-T model)"),Swo=l(),Eu=a("li"),zge=a("strong"),Rwo=o("megatron-bert"),Pwo=o(" \u2014 "),VG=a("a"),Bwo=o("MegatronBertModel"),Iwo=o(" (Megatron-BERT model)"),Nwo=l(),Cu=a("li"),Wge=a("strong"),qwo=o("mobilebert"),jwo=o(" \u2014 "),XG=a("a"),Dwo=o("MobileBertModel"),Gwo=o(" (MobileBERT model)"),Owo=l(),wu=a("li"),Qge=a("strong"),Vwo=o("mobilevit"),Xwo=o(" \u2014 "),zG=a("a"),zwo=o("MobileViTModel"),Wwo=o(" (MobileViT model)"),Qwo=l(),Au=a("li"),Uge=a("strong"),Uwo=o("mpnet"),Hwo=o(" \u2014 "),WG=a("a"),Jwo=o("MPNetModel"),Ywo=o(" (MPNet model)"),Kwo=l(),Lu=a("li"),Hge=a("strong"),Zwo=o("mt5"),eAo=o(" \u2014 "),QG=a("a"),oAo=o("MT5Model"),rAo=o(" (MT5 model)"),tAo=l(),yu=a("li"),Jge=a("strong"),aAo=o("mvp"),nAo=o(" \u2014 "),UG=a("a"),sAo=o("MvpModel"),lAo=o(" (MVP model)"),iAo=l(),xu=a("li"),Yge=a("strong"),dAo=o("nezha"),cAo=o(" \u2014 "),HG=a("a"),fAo=o("NezhaModel"),mAo=o(" (Nezha model)"),gAo=l(),$u=a("li"),Kge=a("strong"),hAo=o("nllb"),pAo=o(" \u2014 "),JG=a("a"),_Ao=o("M2M100Model"),uAo=o(" (NLLB model)"),bAo=l(),ku=a("li"),Zge=a("strong"),vAo=o("nystromformer"),FAo=o(" \u2014 "),YG=a("a"),TAo=o("NystromformerModel"),MAo=o(" (Nystr\xF6mformer model)"),EAo=l(),Su=a("li"),ehe=a("strong"),CAo=o("openai-gpt"),wAo=o(" \u2014 "),KG=a("a"),AAo=o("OpenAIGPTModel"),LAo=o(" (OpenAI GPT model)"),yAo=l(),Ru=a("li"),ohe=a("strong"),xAo=o("opt"),$Ao=o(" \u2014 "),ZG=a("a"),kAo=o("OPTModel"),SAo=o(" (OPT model)"),RAo=l(),Pu=a("li"),rhe=a("strong"),PAo=o("owlvit"),BAo=o(" \u2014 "),eO=a("a"),IAo=o("OwlViTModel"),NAo=o(" (OWL-ViT model)"),qAo=l(),Bu=a("li"),the=a("strong"),jAo=o("pegasus"),DAo=o(" \u2014 "),oO=a("a"),GAo=o("PegasusModel"),OAo=o(" (Pegasus model)"),VAo=l(),Iu=a("li"),ahe=a("strong"),XAo=o("perceiver"),zAo=o(" \u2014 "),rO=a("a"),WAo=o("PerceiverModel"),QAo=o(" (Perceiver model)"),UAo=l(),Nu=a("li"),nhe=a("strong"),HAo=o("plbart"),JAo=o(" \u2014 "),tO=a("a"),YAo=o("PLBartModel"),KAo=o(" (PLBart model)"),ZAo=l(),qu=a("li"),she=a("strong"),eLo=o("poolformer"),oLo=o(" \u2014 "),aO=a("a"),rLo=o("PoolFormerModel"),tLo=o(" (PoolFormer model)"),aLo=l(),ju=a("li"),lhe=a("strong"),nLo=o("prophetnet"),sLo=o(" \u2014 "),nO=a("a"),lLo=o("ProphetNetModel"),iLo=o(" (ProphetNet model)"),dLo=l(),Du=a("li"),ihe=a("strong"),cLo=o("qdqbert"),fLo=o(" \u2014 "),sO=a("a"),mLo=o("QDQBertModel"),gLo=o(" (QDQBert model)"),hLo=l(),Gu=a("li"),dhe=a("strong"),pLo=o("reformer"),_Lo=o(" \u2014 "),lO=a("a"),uLo=o("ReformerModel"),bLo=o(" (Reformer model)"),vLo=l(),Ou=a("li"),che=a("strong"),FLo=o("regnet"),TLo=o(" \u2014 "),iO=a("a"),MLo=o("RegNetModel"),ELo=o(" (RegNet model)"),CLo=l(),Vu=a("li"),fhe=a("strong"),wLo=o("rembert"),ALo=o(" \u2014 "),dO=a("a"),LLo=o("RemBertModel"),yLo=o(" (RemBERT model)"),xLo=l(),Xu=a("li"),mhe=a("strong"),$Lo=o("resnet"),kLo=o(" \u2014 "),cO=a("a"),SLo=o("ResNetModel"),RLo=o(" (ResNet model)"),PLo=l(),zu=a("li"),ghe=a("strong"),BLo=o("retribert"),ILo=o(" \u2014 "),fO=a("a"),NLo=o("RetriBertModel"),qLo=o(" (RetriBERT model)"),jLo=l(),Wu=a("li"),hhe=a("strong"),DLo=o("roberta"),GLo=o(" \u2014 "),mO=a("a"),OLo=o("RobertaModel"),VLo=o(" (RoBERTa model)"),XLo=l(),Qu=a("li"),phe=a("strong"),zLo=o("roformer"),WLo=o(" \u2014 "),gO=a("a"),QLo=o("RoFormerModel"),ULo=o(" (RoFormer model)"),HLo=l(),Uu=a("li"),_he=a("strong"),JLo=o("segformer"),YLo=o(" \u2014 "),hO=a("a"),KLo=o("SegformerModel"),ZLo=o(" (SegFormer model)"),eyo=l(),Hu=a("li"),uhe=a("strong"),oyo=o("sew"),ryo=o(" \u2014 "),pO=a("a"),tyo=o("SEWModel"),ayo=o(" (SEW model)"),nyo=l(),Ju=a("li"),bhe=a("strong"),syo=o("sew-d"),lyo=o(" \u2014 "),_O=a("a"),iyo=o("SEWDModel"),dyo=o(" (SEW-D model)"),cyo=l(),Yu=a("li"),vhe=a("strong"),fyo=o("speech_to_text"),myo=o(" \u2014 "),uO=a("a"),gyo=o("Speech2TextModel"),hyo=o(" (Speech2Text model)"),pyo=l(),Ku=a("li"),Fhe=a("strong"),_yo=o("splinter"),uyo=o(" \u2014 "),bO=a("a"),byo=o("SplinterModel"),vyo=o(" (Splinter model)"),Fyo=l(),Zu=a("li"),The=a("strong"),Tyo=o("squeezebert"),Myo=o(" \u2014 "),vO=a("a"),Eyo=o("SqueezeBertModel"),Cyo=o(" (SqueezeBERT model)"),wyo=l(),e1=a("li"),Mhe=a("strong"),Ayo=o("swin"),Lyo=o(" \u2014 "),FO=a("a"),yyo=o("SwinModel"),xyo=o(" (Swin Transformer model)"),$yo=l(),o1=a("li"),Ehe=a("strong"),kyo=o("swinv2"),Syo=o(" \u2014 "),TO=a("a"),Ryo=o("Swinv2Model"),Pyo=o(" (Swin Transformer V2 model)"),Byo=l(),r1=a("li"),Che=a("strong"),Iyo=o("t5"),Nyo=o(" \u2014 "),MO=a("a"),qyo=o("T5Model"),jyo=o(" (T5 model)"),Dyo=l(),t1=a("li"),whe=a("strong"),Gyo=o("tapas"),Oyo=o(" \u2014 "),EO=a("a"),Vyo=o("TapasModel"),Xyo=o(" (TAPAS model)"),zyo=l(),a1=a("li"),Ahe=a("strong"),Wyo=o("trajectory_transformer"),Qyo=o(" \u2014 "),CO=a("a"),Uyo=o("TrajectoryTransformerModel"),Hyo=o(" (Trajectory Transformer model)"),Jyo=l(),n1=a("li"),Lhe=a("strong"),Yyo=o("transfo-xl"),Kyo=o(" \u2014 "),wO=a("a"),Zyo=o("TransfoXLModel"),e9o=o(" (Transformer-XL model)"),o9o=l(),s1=a("li"),yhe=a("strong"),r9o=o("unispeech"),t9o=o(" \u2014 "),AO=a("a"),a9o=o("UniSpeechModel"),n9o=o(" (UniSpeech model)"),s9o=l(),l1=a("li"),xhe=a("strong"),l9o=o("unispeech-sat"),i9o=o(" \u2014 "),LO=a("a"),d9o=o("UniSpeechSatModel"),c9o=o(" (UniSpeechSat model)"),f9o=l(),i1=a("li"),$he=a("strong"),m9o=o("van"),g9o=o(" \u2014 "),yO=a("a"),h9o=o("VanModel"),p9o=o(" (VAN model)"),_9o=l(),d1=a("li"),khe=a("strong"),u9o=o("videomae"),b9o=o(" \u2014 "),xO=a("a"),v9o=o("VideoMAEModel"),F9o=o(" (VideoMAE model)"),T9o=l(),c1=a("li"),She=a("strong"),M9o=o("vilt"),E9o=o(" \u2014 "),$O=a("a"),C9o=o("ViltModel"),w9o=o(" (ViLT model)"),A9o=l(),f1=a("li"),Rhe=a("strong"),L9o=o("vision-text-dual-encoder"),y9o=o(" \u2014 "),kO=a("a"),x9o=o("VisionTextDualEncoderModel"),$9o=o(" (VisionTextDualEncoder model)"),k9o=l(),m1=a("li"),Phe=a("strong"),S9o=o("visual_bert"),R9o=o(" \u2014 "),SO=a("a"),P9o=o("VisualBertModel"),B9o=o(" (VisualBERT model)"),I9o=l(),g1=a("li"),Bhe=a("strong"),N9o=o("vit"),q9o=o(" \u2014 "),RO=a("a"),j9o=o("ViTModel"),D9o=o(" (ViT model)"),G9o=l(),h1=a("li"),Ihe=a("strong"),O9o=o("vit_mae"),V9o=o(" \u2014 "),PO=a("a"),X9o=o("ViTMAEModel"),z9o=o(" (ViTMAE model)"),W9o=l(),p1=a("li"),Nhe=a("strong"),Q9o=o("wav2vec2"),U9o=o(" \u2014 "),BO=a("a"),H9o=o("Wav2Vec2Model"),J9o=o(" (Wav2Vec2 model)"),Y9o=l(),_1=a("li"),qhe=a("strong"),K9o=o("wav2vec2-conformer"),Z9o=o(" \u2014 "),IO=a("a"),exo=o("Wav2Vec2ConformerModel"),oxo=o(" (Wav2Vec2-Conformer model)"),rxo=l(),u1=a("li"),jhe=a("strong"),txo=o("wavlm"),axo=o(" \u2014 "),NO=a("a"),nxo=o("WavLMModel"),sxo=o(" (WavLM model)"),lxo=l(),b1=a("li"),Dhe=a("strong"),ixo=o("xglm"),dxo=o(" \u2014 "),qO=a("a"),cxo=o("XGLMModel"),fxo=o(" (XGLM model)"),mxo=l(),v1=a("li"),Ghe=a("strong"),gxo=o("xlm"),hxo=o(" \u2014 "),jO=a("a"),pxo=o("XLMModel"),_xo=o(" (XLM model)"),uxo=l(),F1=a("li"),Ohe=a("strong"),bxo=o("xlm-prophetnet"),vxo=o(" \u2014 "),DO=a("a"),Fxo=o("XLMProphetNetModel"),Txo=o(" (XLM-ProphetNet model)"),Mxo=l(),T1=a("li"),Vhe=a("strong"),Exo=o("xlm-roberta"),Cxo=o(" \u2014 "),GO=a("a"),wxo=o("XLMRobertaModel"),Axo=o(" (XLM-RoBERTa model)"),Lxo=l(),M1=a("li"),Xhe=a("strong"),yxo=o("xlm-roberta-xl"),xxo=o(" \u2014 "),OO=a("a"),$xo=o("XLMRobertaXLModel"),kxo=o(" (XLM-RoBERTa-XL model)"),Sxo=l(),E1=a("li"),zhe=a("strong"),Rxo=o("xlnet"),Pxo=o(" \u2014 "),VO=a("a"),Bxo=o("XLNetModel"),Ixo=o(" (XLNet model)"),Nxo=l(),C1=a("li"),Whe=a("strong"),qxo=o("yolos"),jxo=o(" \u2014 "),XO=a("a"),Dxo=o("YolosModel"),Gxo=o(" (YOLOS model)"),Oxo=l(),w1=a("li"),Qhe=a("strong"),Vxo=o("yoso"),Xxo=o(" \u2014 "),zO=a("a"),zxo=o("YosoModel"),Wxo=o(" (YOSO model)"),Qxo=l(),A1=a("p"),Uxo=o("The model is set in evaluation mode by default using "),Uhe=a("code"),Hxo=o("model.eval()"),Jxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=a("code"),Yxo=o("model.train()"),Kxo=l(),F(L1.$$.fragment),uUe=l(),nd=a("h2"),y1=a("a"),Jhe=a("span"),F(Uy.$$.fragment),Zxo=l(),Yhe=a("span"),e$o=o("AutoModelForPreTraining"),bUe=l(),Ro=a("div"),F(Hy.$$.fragment),o$o=l(),sd=a("p"),r$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WO=a("a"),t$o=o("from_pretrained()"),a$o=o(" class method or the "),QO=a("a"),n$o=o("from_config()"),s$o=o(` class
method.`),l$o=l(),Jy=a("p"),i$o=o("This class cannot be instantiated directly using "),Khe=a("code"),d$o=o("__init__()"),c$o=o(" (throws an error)."),f$o=l(),gt=a("div"),F(Yy.$$.fragment),m$o=l(),Zhe=a("p"),g$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),h$o=l(),ld=a("p"),p$o=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),_$o=o("not"),u$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),b$o=o("from_pretrained()"),v$o=o(" to load the model weights."),F$o=l(),F(x1.$$.fragment),T$o=l(),Ke=a("div"),F(Ky.$$.fragment),M$o=l(),ope=a("p"),E$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),C$o=l(),Xa=a("p"),w$o=o("The model class to instantiate is selected based on the "),rpe=a("code"),A$o=o("model_type"),L$o=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),y$o=o("pretrained_model_name_or_path"),x$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),$$o=o("pretrained_model_name_or_path"),k$o=o(":"),S$o=l(),G=a("ul"),$1=a("li"),npe=a("strong"),R$o=o("albert"),P$o=o(" \u2014 "),HO=a("a"),B$o=o("AlbertForPreTraining"),I$o=o(" (ALBERT model)"),N$o=l(),k1=a("li"),spe=a("strong"),q$o=o("bart"),j$o=o(" \u2014 "),JO=a("a"),D$o=o("BartForConditionalGeneration"),G$o=o(" (BART model)"),O$o=l(),S1=a("li"),lpe=a("strong"),V$o=o("bert"),X$o=o(" \u2014 "),YO=a("a"),z$o=o("BertForPreTraining"),W$o=o(" (BERT model)"),Q$o=l(),R1=a("li"),ipe=a("strong"),U$o=o("big_bird"),H$o=o(" \u2014 "),KO=a("a"),J$o=o("BigBirdForPreTraining"),Y$o=o(" (BigBird model)"),K$o=l(),P1=a("li"),dpe=a("strong"),Z$o=o("bloom"),eko=o(" \u2014 "),ZO=a("a"),oko=o("BloomForCausalLM"),rko=o(" (BLOOM model)"),tko=l(),B1=a("li"),cpe=a("strong"),ako=o("camembert"),nko=o(" \u2014 "),eV=a("a"),sko=o("CamembertForMaskedLM"),lko=o(" (CamemBERT model)"),iko=l(),I1=a("li"),fpe=a("strong"),dko=o("ctrl"),cko=o(" \u2014 "),oV=a("a"),fko=o("CTRLLMHeadModel"),mko=o(" (CTRL model)"),gko=l(),N1=a("li"),mpe=a("strong"),hko=o("data2vec-text"),pko=o(" \u2014 "),rV=a("a"),_ko=o("Data2VecTextForMaskedLM"),uko=o(" (Data2VecText model)"),bko=l(),q1=a("li"),gpe=a("strong"),vko=o("deberta"),Fko=o(" \u2014 "),tV=a("a"),Tko=o("DebertaForMaskedLM"),Mko=o(" (DeBERTa model)"),Eko=l(),j1=a("li"),hpe=a("strong"),Cko=o("deberta-v2"),wko=o(" \u2014 "),aV=a("a"),Ako=o("DebertaV2ForMaskedLM"),Lko=o(" (DeBERTa-v2 model)"),yko=l(),D1=a("li"),ppe=a("strong"),xko=o("distilbert"),$ko=o(" \u2014 "),nV=a("a"),kko=o("DistilBertForMaskedLM"),Sko=o(" (DistilBERT model)"),Rko=l(),G1=a("li"),_pe=a("strong"),Pko=o("electra"),Bko=o(" \u2014 "),sV=a("a"),Iko=o("ElectraForPreTraining"),Nko=o(" (ELECTRA model)"),qko=l(),O1=a("li"),upe=a("strong"),jko=o("flaubert"),Dko=o(" \u2014 "),lV=a("a"),Gko=o("FlaubertWithLMHeadModel"),Oko=o(" (FlauBERT model)"),Vko=l(),V1=a("li"),bpe=a("strong"),Xko=o("flava"),zko=o(" \u2014 "),iV=a("a"),Wko=o("FlavaForPreTraining"),Qko=o(" (FLAVA model)"),Uko=l(),X1=a("li"),vpe=a("strong"),Hko=o("fnet"),Jko=o(" \u2014 "),dV=a("a"),Yko=o("FNetForPreTraining"),Kko=o(" (FNet model)"),Zko=l(),z1=a("li"),Fpe=a("strong"),eSo=o("fsmt"),oSo=o(" \u2014 "),cV=a("a"),rSo=o("FSMTForConditionalGeneration"),tSo=o(" (FairSeq Machine-Translation model)"),aSo=l(),W1=a("li"),Tpe=a("strong"),nSo=o("funnel"),sSo=o(" \u2014 "),fV=a("a"),lSo=o("FunnelForPreTraining"),iSo=o(" (Funnel Transformer model)"),dSo=l(),Q1=a("li"),Mpe=a("strong"),cSo=o("gpt2"),fSo=o(" \u2014 "),mV=a("a"),mSo=o("GPT2LMHeadModel"),gSo=o(" (OpenAI GPT-2 model)"),hSo=l(),U1=a("li"),Epe=a("strong"),pSo=o("ibert"),_So=o(" \u2014 "),gV=a("a"),uSo=o("IBertForMaskedLM"),bSo=o(" (I-BERT model)"),vSo=l(),H1=a("li"),Cpe=a("strong"),FSo=o("layoutlm"),TSo=o(" \u2014 "),hV=a("a"),MSo=o("LayoutLMForMaskedLM"),ESo=o(" (LayoutLM model)"),CSo=l(),J1=a("li"),wpe=a("strong"),wSo=o("longformer"),ASo=o(" \u2014 "),pV=a("a"),LSo=o("LongformerForMaskedLM"),ySo=o(" (Longformer model)"),xSo=l(),Y1=a("li"),Ape=a("strong"),$So=o("luke"),kSo=o(" \u2014 "),_V=a("a"),SSo=o("LukeForMaskedLM"),RSo=o(" (LUKE model)"),PSo=l(),K1=a("li"),Lpe=a("strong"),BSo=o("lxmert"),ISo=o(" \u2014 "),uV=a("a"),NSo=o("LxmertForPreTraining"),qSo=o(" (LXMERT model)"),jSo=l(),Z1=a("li"),ype=a("strong"),DSo=o("megatron-bert"),GSo=o(" \u2014 "),bV=a("a"),OSo=o("MegatronBertForPreTraining"),VSo=o(" (Megatron-BERT model)"),XSo=l(),e8=a("li"),xpe=a("strong"),zSo=o("mobilebert"),WSo=o(" \u2014 "),vV=a("a"),QSo=o("MobileBertForPreTraining"),USo=o(" (MobileBERT model)"),HSo=l(),o8=a("li"),$pe=a("strong"),JSo=o("mpnet"),YSo=o(" \u2014 "),FV=a("a"),KSo=o("MPNetForMaskedLM"),ZSo=o(" (MPNet model)"),eRo=l(),r8=a("li"),kpe=a("strong"),oRo=o("mvp"),rRo=o(" \u2014 "),TV=a("a"),tRo=o("MvpForConditionalGeneration"),aRo=o(" (MVP model)"),nRo=l(),t8=a("li"),Spe=a("strong"),sRo=o("nezha"),lRo=o(" \u2014 "),MV=a("a"),iRo=o("NezhaForPreTraining"),dRo=o(" (Nezha model)"),cRo=l(),a8=a("li"),Rpe=a("strong"),fRo=o("openai-gpt"),mRo=o(" \u2014 "),EV=a("a"),gRo=o("OpenAIGPTLMHeadModel"),hRo=o(" (OpenAI GPT model)"),pRo=l(),n8=a("li"),Ppe=a("strong"),_Ro=o("retribert"),uRo=o(" \u2014 "),CV=a("a"),bRo=o("RetriBertModel"),vRo=o(" (RetriBERT model)"),FRo=l(),s8=a("li"),Bpe=a("strong"),TRo=o("roberta"),MRo=o(" \u2014 "),wV=a("a"),ERo=o("RobertaForMaskedLM"),CRo=o(" (RoBERTa model)"),wRo=l(),l8=a("li"),Ipe=a("strong"),ARo=o("splinter"),LRo=o(" \u2014 "),AV=a("a"),yRo=o("SplinterForPreTraining"),xRo=o(" (Splinter model)"),$Ro=l(),i8=a("li"),Npe=a("strong"),kRo=o("squeezebert"),SRo=o(" \u2014 "),LV=a("a"),RRo=o("SqueezeBertForMaskedLM"),PRo=o(" (SqueezeBERT model)"),BRo=l(),d8=a("li"),qpe=a("strong"),IRo=o("t5"),NRo=o(" \u2014 "),yV=a("a"),qRo=o("T5ForConditionalGeneration"),jRo=o(" (T5 model)"),DRo=l(),c8=a("li"),jpe=a("strong"),GRo=o("tapas"),ORo=o(" \u2014 "),xV=a("a"),VRo=o("TapasForMaskedLM"),XRo=o(" (TAPAS model)"),zRo=l(),f8=a("li"),Dpe=a("strong"),WRo=o("transfo-xl"),QRo=o(" \u2014 "),$V=a("a"),URo=o("TransfoXLLMHeadModel"),HRo=o(" (Transformer-XL model)"),JRo=l(),m8=a("li"),Gpe=a("strong"),YRo=o("unispeech"),KRo=o(" \u2014 "),kV=a("a"),ZRo=o("UniSpeechForPreTraining"),ePo=o(" (UniSpeech model)"),oPo=l(),g8=a("li"),Ope=a("strong"),rPo=o("unispeech-sat"),tPo=o(" \u2014 "),SV=a("a"),aPo=o("UniSpeechSatForPreTraining"),nPo=o(" (UniSpeechSat model)"),sPo=l(),h8=a("li"),Vpe=a("strong"),lPo=o("videomae"),iPo=o(" \u2014 "),RV=a("a"),dPo=o("VideoMAEForPreTraining"),cPo=o(" (VideoMAE model)"),fPo=l(),p8=a("li"),Xpe=a("strong"),mPo=o("visual_bert"),gPo=o(" \u2014 "),PV=a("a"),hPo=o("VisualBertForPreTraining"),pPo=o(" (VisualBERT model)"),_Po=l(),_8=a("li"),zpe=a("strong"),uPo=o("vit_mae"),bPo=o(" \u2014 "),BV=a("a"),vPo=o("ViTMAEForPreTraining"),FPo=o(" (ViTMAE model)"),TPo=l(),u8=a("li"),Wpe=a("strong"),MPo=o("wav2vec2"),EPo=o(" \u2014 "),IV=a("a"),CPo=o("Wav2Vec2ForPreTraining"),wPo=o(" (Wav2Vec2 model)"),APo=l(),b8=a("li"),Qpe=a("strong"),LPo=o("wav2vec2-conformer"),yPo=o(" \u2014 "),NV=a("a"),xPo=o("Wav2Vec2ConformerForPreTraining"),$Po=o(" (Wav2Vec2-Conformer model)"),kPo=l(),v8=a("li"),Upe=a("strong"),SPo=o("xlm"),RPo=o(" \u2014 "),qV=a("a"),PPo=o("XLMWithLMHeadModel"),BPo=o(" (XLM model)"),IPo=l(),F8=a("li"),Hpe=a("strong"),NPo=o("xlm-roberta"),qPo=o(" \u2014 "),jV=a("a"),jPo=o("XLMRobertaForMaskedLM"),DPo=o(" (XLM-RoBERTa model)"),GPo=l(),T8=a("li"),Jpe=a("strong"),OPo=o("xlm-roberta-xl"),VPo=o(" \u2014 "),DV=a("a"),XPo=o("XLMRobertaXLForMaskedLM"),zPo=o(" (XLM-RoBERTa-XL model)"),WPo=l(),M8=a("li"),Ype=a("strong"),QPo=o("xlnet"),UPo=o(" \u2014 "),GV=a("a"),HPo=o("XLNetLMHeadModel"),JPo=o(" (XLNet model)"),YPo=l(),E8=a("p"),KPo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),ZPo=o("model.eval()"),eBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),oBo=o("model.train()"),rBo=l(),F(C8.$$.fragment),vUe=l(),id=a("h2"),w8=a("a"),e_e=a("span"),F(Zy.$$.fragment),tBo=l(),o_e=a("span"),aBo=o("AutoModelForCausalLM"),FUe=l(),Po=a("div"),F(e9.$$.fragment),nBo=l(),dd=a("p"),sBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OV=a("a"),lBo=o("from_pretrained()"),iBo=o(" class method or the "),VV=a("a"),dBo=o("from_config()"),cBo=o(` class
method.`),fBo=l(),o9=a("p"),mBo=o("This class cannot be instantiated directly using "),r_e=a("code"),gBo=o("__init__()"),hBo=o(" (throws an error)."),pBo=l(),ht=a("div"),F(r9.$$.fragment),_Bo=l(),t_e=a("p"),uBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bBo=l(),cd=a("p"),vBo=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),FBo=o("not"),TBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),MBo=o("from_pretrained()"),EBo=o(" to load the model weights."),CBo=l(),F(A8.$$.fragment),wBo=l(),Ze=a("div"),F(t9.$$.fragment),ABo=l(),n_e=a("p"),LBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yBo=l(),za=a("p"),xBo=o("The model class to instantiate is selected based on the "),s_e=a("code"),$Bo=o("model_type"),kBo=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),SBo=o("pretrained_model_name_or_path"),RBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),PBo=o("pretrained_model_name_or_path"),BBo=o(":"),IBo=l(),z=a("ul"),L8=a("li"),d_e=a("strong"),NBo=o("bart"),qBo=o(" \u2014 "),zV=a("a"),jBo=o("BartForCausalLM"),DBo=o(" (BART model)"),GBo=l(),y8=a("li"),c_e=a("strong"),OBo=o("bert"),VBo=o(" \u2014 "),WV=a("a"),XBo=o("BertLMHeadModel"),zBo=o(" (BERT model)"),WBo=l(),x8=a("li"),f_e=a("strong"),QBo=o("bert-generation"),UBo=o(" \u2014 "),QV=a("a"),HBo=o("BertGenerationDecoder"),JBo=o(" (Bert Generation model)"),YBo=l(),$8=a("li"),m_e=a("strong"),KBo=o("big_bird"),ZBo=o(" \u2014 "),UV=a("a"),eIo=o("BigBirdForCausalLM"),oIo=o(" (BigBird model)"),rIo=l(),k8=a("li"),g_e=a("strong"),tIo=o("bigbird_pegasus"),aIo=o(" \u2014 "),HV=a("a"),nIo=o("BigBirdPegasusForCausalLM"),sIo=o(" (BigBird-Pegasus model)"),lIo=l(),S8=a("li"),h_e=a("strong"),iIo=o("blenderbot"),dIo=o(" \u2014 "),JV=a("a"),cIo=o("BlenderbotForCausalLM"),fIo=o(" (Blenderbot model)"),mIo=l(),R8=a("li"),p_e=a("strong"),gIo=o("blenderbot-small"),hIo=o(" \u2014 "),YV=a("a"),pIo=o("BlenderbotSmallForCausalLM"),_Io=o(" (BlenderbotSmall model)"),uIo=l(),P8=a("li"),__e=a("strong"),bIo=o("bloom"),vIo=o(" \u2014 "),KV=a("a"),FIo=o("BloomForCausalLM"),TIo=o(" (BLOOM model)"),MIo=l(),B8=a("li"),u_e=a("strong"),EIo=o("camembert"),CIo=o(" \u2014 "),ZV=a("a"),wIo=o("CamembertForCausalLM"),AIo=o(" (CamemBERT model)"),LIo=l(),I8=a("li"),b_e=a("strong"),yIo=o("codegen"),xIo=o(" \u2014 "),eX=a("a"),$Io=o("CodeGenForCausalLM"),kIo=o(" (CodeGen model)"),SIo=l(),N8=a("li"),v_e=a("strong"),RIo=o("ctrl"),PIo=o(" \u2014 "),oX=a("a"),BIo=o("CTRLLMHeadModel"),IIo=o(" (CTRL model)"),NIo=l(),q8=a("li"),F_e=a("strong"),qIo=o("data2vec-text"),jIo=o(" \u2014 "),rX=a("a"),DIo=o("Data2VecTextForCausalLM"),GIo=o(" (Data2VecText model)"),OIo=l(),j8=a("li"),T_e=a("strong"),VIo=o("electra"),XIo=o(" \u2014 "),tX=a("a"),zIo=o("ElectraForCausalLM"),WIo=o(" (ELECTRA model)"),QIo=l(),D8=a("li"),M_e=a("strong"),UIo=o("gpt2"),HIo=o(" \u2014 "),aX=a("a"),JIo=o("GPT2LMHeadModel"),YIo=o(" (OpenAI GPT-2 model)"),KIo=l(),G8=a("li"),E_e=a("strong"),ZIo=o("gpt_neo"),eNo=o(" \u2014 "),nX=a("a"),oNo=o("GPTNeoForCausalLM"),rNo=o(" (GPT Neo model)"),tNo=l(),O8=a("li"),C_e=a("strong"),aNo=o("gpt_neox"),nNo=o(" \u2014 "),sX=a("a"),sNo=o("GPTNeoXForCausalLM"),lNo=o(" (GPT NeoX model)"),iNo=l(),V8=a("li"),w_e=a("strong"),dNo=o("gptj"),cNo=o(" \u2014 "),lX=a("a"),fNo=o("GPTJForCausalLM"),mNo=o(" (GPT-J model)"),gNo=l(),X8=a("li"),A_e=a("strong"),hNo=o("marian"),pNo=o(" \u2014 "),iX=a("a"),_No=o("MarianForCausalLM"),uNo=o(" (Marian model)"),bNo=l(),z8=a("li"),L_e=a("strong"),vNo=o("mbart"),FNo=o(" \u2014 "),dX=a("a"),TNo=o("MBartForCausalLM"),MNo=o(" (mBART model)"),ENo=l(),W8=a("li"),y_e=a("strong"),CNo=o("megatron-bert"),wNo=o(" \u2014 "),cX=a("a"),ANo=o("MegatronBertForCausalLM"),LNo=o(" (Megatron-BERT model)"),yNo=l(),Q8=a("li"),x_e=a("strong"),xNo=o("mvp"),$No=o(" \u2014 "),fX=a("a"),kNo=o("MvpForCausalLM"),SNo=o(" (MVP model)"),RNo=l(),U8=a("li"),$_e=a("strong"),PNo=o("openai-gpt"),BNo=o(" \u2014 "),mX=a("a"),INo=o("OpenAIGPTLMHeadModel"),NNo=o(" (OpenAI GPT model)"),qNo=l(),H8=a("li"),k_e=a("strong"),jNo=o("opt"),DNo=o(" \u2014 "),gX=a("a"),GNo=o("OPTForCausalLM"),ONo=o(" (OPT model)"),VNo=l(),J8=a("li"),S_e=a("strong"),XNo=o("pegasus"),zNo=o(" \u2014 "),hX=a("a"),WNo=o("PegasusForCausalLM"),QNo=o(" (Pegasus model)"),UNo=l(),Y8=a("li"),R_e=a("strong"),HNo=o("plbart"),JNo=o(" \u2014 "),pX=a("a"),YNo=o("PLBartForCausalLM"),KNo=o(" (PLBart model)"),ZNo=l(),K8=a("li"),P_e=a("strong"),eqo=o("prophetnet"),oqo=o(" \u2014 "),_X=a("a"),rqo=o("ProphetNetForCausalLM"),tqo=o(" (ProphetNet model)"),aqo=l(),Z8=a("li"),B_e=a("strong"),nqo=o("qdqbert"),sqo=o(" \u2014 "),uX=a("a"),lqo=o("QDQBertLMHeadModel"),iqo=o(" (QDQBert model)"),dqo=l(),e2=a("li"),I_e=a("strong"),cqo=o("reformer"),fqo=o(" \u2014 "),bX=a("a"),mqo=o("ReformerModelWithLMHead"),gqo=o(" (Reformer model)"),hqo=l(),o2=a("li"),N_e=a("strong"),pqo=o("rembert"),_qo=o(" \u2014 "),vX=a("a"),uqo=o("RemBertForCausalLM"),bqo=o(" (RemBERT model)"),vqo=l(),r2=a("li"),q_e=a("strong"),Fqo=o("roberta"),Tqo=o(" \u2014 "),FX=a("a"),Mqo=o("RobertaForCausalLM"),Eqo=o(" (RoBERTa model)"),Cqo=l(),t2=a("li"),j_e=a("strong"),wqo=o("roformer"),Aqo=o(" \u2014 "),TX=a("a"),Lqo=o("RoFormerForCausalLM"),yqo=o(" (RoFormer model)"),xqo=l(),a2=a("li"),D_e=a("strong"),$qo=o("speech_to_text_2"),kqo=o(" \u2014 "),MX=a("a"),Sqo=o("Speech2Text2ForCausalLM"),Rqo=o(" (Speech2Text2 model)"),Pqo=l(),n2=a("li"),G_e=a("strong"),Bqo=o("transfo-xl"),Iqo=o(" \u2014 "),EX=a("a"),Nqo=o("TransfoXLLMHeadModel"),qqo=o(" (Transformer-XL model)"),jqo=l(),s2=a("li"),O_e=a("strong"),Dqo=o("trocr"),Gqo=o(" \u2014 "),CX=a("a"),Oqo=o("TrOCRForCausalLM"),Vqo=o(" (TrOCR model)"),Xqo=l(),l2=a("li"),V_e=a("strong"),zqo=o("xglm"),Wqo=o(" \u2014 "),wX=a("a"),Qqo=o("XGLMForCausalLM"),Uqo=o(" (XGLM model)"),Hqo=l(),i2=a("li"),X_e=a("strong"),Jqo=o("xlm"),Yqo=o(" \u2014 "),AX=a("a"),Kqo=o("XLMWithLMHeadModel"),Zqo=o(" (XLM model)"),ejo=l(),d2=a("li"),z_e=a("strong"),ojo=o("xlm-prophetnet"),rjo=o(" \u2014 "),LX=a("a"),tjo=o("XLMProphetNetForCausalLM"),ajo=o(" (XLM-ProphetNet model)"),njo=l(),c2=a("li"),W_e=a("strong"),sjo=o("xlm-roberta"),ljo=o(" \u2014 "),yX=a("a"),ijo=o("XLMRobertaForCausalLM"),djo=o(" (XLM-RoBERTa model)"),cjo=l(),f2=a("li"),Q_e=a("strong"),fjo=o("xlm-roberta-xl"),mjo=o(" \u2014 "),xX=a("a"),gjo=o("XLMRobertaXLForCausalLM"),hjo=o(" (XLM-RoBERTa-XL model)"),pjo=l(),m2=a("li"),U_e=a("strong"),_jo=o("xlnet"),ujo=o(" \u2014 "),$X=a("a"),bjo=o("XLNetLMHeadModel"),vjo=o(" (XLNet model)"),Fjo=l(),g2=a("p"),Tjo=o("The model is set in evaluation mode by default using "),H_e=a("code"),Mjo=o("model.eval()"),Ejo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=a("code"),Cjo=o("model.train()"),wjo=l(),F(h2.$$.fragment),TUe=l(),fd=a("h2"),p2=a("a"),Y_e=a("span"),F(a9.$$.fragment),Ajo=l(),K_e=a("span"),Ljo=o("AutoModelForMaskedLM"),MUe=l(),Bo=a("div"),F(n9.$$.fragment),yjo=l(),md=a("p"),xjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kX=a("a"),$jo=o("from_pretrained()"),kjo=o(" class method or the "),SX=a("a"),Sjo=o("from_config()"),Rjo=o(` class
method.`),Pjo=l(),s9=a("p"),Bjo=o("This class cannot be instantiated directly using "),Z_e=a("code"),Ijo=o("__init__()"),Njo=o(" (throws an error)."),qjo=l(),pt=a("div"),F(l9.$$.fragment),jjo=l(),eue=a("p"),Djo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gjo=l(),gd=a("p"),Ojo=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),Vjo=o("not"),Xjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),zjo=o("from_pretrained()"),Wjo=o(" to load the model weights."),Qjo=l(),F(_2.$$.fragment),Ujo=l(),eo=a("div"),F(i9.$$.fragment),Hjo=l(),rue=a("p"),Jjo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yjo=l(),Wa=a("p"),Kjo=o("The model class to instantiate is selected based on the "),tue=a("code"),Zjo=o("model_type"),eDo=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),oDo=o("pretrained_model_name_or_path"),rDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),tDo=o("pretrained_model_name_or_path"),aDo=o(":"),nDo=l(),U=a("ul"),u2=a("li"),sue=a("strong"),sDo=o("albert"),lDo=o(" \u2014 "),PX=a("a"),iDo=o("AlbertForMaskedLM"),dDo=o(" (ALBERT model)"),cDo=l(),b2=a("li"),lue=a("strong"),fDo=o("bart"),mDo=o(" \u2014 "),BX=a("a"),gDo=o("BartForConditionalGeneration"),hDo=o(" (BART model)"),pDo=l(),v2=a("li"),iue=a("strong"),_Do=o("bert"),uDo=o(" \u2014 "),IX=a("a"),bDo=o("BertForMaskedLM"),vDo=o(" (BERT model)"),FDo=l(),F2=a("li"),due=a("strong"),TDo=o("big_bird"),MDo=o(" \u2014 "),NX=a("a"),EDo=o("BigBirdForMaskedLM"),CDo=o(" (BigBird model)"),wDo=l(),T2=a("li"),cue=a("strong"),ADo=o("camembert"),LDo=o(" \u2014 "),qX=a("a"),yDo=o("CamembertForMaskedLM"),xDo=o(" (CamemBERT model)"),$Do=l(),M2=a("li"),fue=a("strong"),kDo=o("convbert"),SDo=o(" \u2014 "),jX=a("a"),RDo=o("ConvBertForMaskedLM"),PDo=o(" (ConvBERT model)"),BDo=l(),E2=a("li"),mue=a("strong"),IDo=o("data2vec-text"),NDo=o(" \u2014 "),DX=a("a"),qDo=o("Data2VecTextForMaskedLM"),jDo=o(" (Data2VecText model)"),DDo=l(),C2=a("li"),gue=a("strong"),GDo=o("deberta"),ODo=o(" \u2014 "),GX=a("a"),VDo=o("DebertaForMaskedLM"),XDo=o(" (DeBERTa model)"),zDo=l(),w2=a("li"),hue=a("strong"),WDo=o("deberta-v2"),QDo=o(" \u2014 "),OX=a("a"),UDo=o("DebertaV2ForMaskedLM"),HDo=o(" (DeBERTa-v2 model)"),JDo=l(),A2=a("li"),pue=a("strong"),YDo=o("distilbert"),KDo=o(" \u2014 "),VX=a("a"),ZDo=o("DistilBertForMaskedLM"),eGo=o(" (DistilBERT model)"),oGo=l(),L2=a("li"),_ue=a("strong"),rGo=o("electra"),tGo=o(" \u2014 "),XX=a("a"),aGo=o("ElectraForMaskedLM"),nGo=o(" (ELECTRA model)"),sGo=l(),y2=a("li"),uue=a("strong"),lGo=o("flaubert"),iGo=o(" \u2014 "),zX=a("a"),dGo=o("FlaubertWithLMHeadModel"),cGo=o(" (FlauBERT model)"),fGo=l(),x2=a("li"),bue=a("strong"),mGo=o("fnet"),gGo=o(" \u2014 "),WX=a("a"),hGo=o("FNetForMaskedLM"),pGo=o(" (FNet model)"),_Go=l(),$2=a("li"),vue=a("strong"),uGo=o("funnel"),bGo=o(" \u2014 "),QX=a("a"),vGo=o("FunnelForMaskedLM"),FGo=o(" (Funnel Transformer model)"),TGo=l(),k2=a("li"),Fue=a("strong"),MGo=o("ibert"),EGo=o(" \u2014 "),UX=a("a"),CGo=o("IBertForMaskedLM"),wGo=o(" (I-BERT model)"),AGo=l(),S2=a("li"),Tue=a("strong"),LGo=o("layoutlm"),yGo=o(" \u2014 "),HX=a("a"),xGo=o("LayoutLMForMaskedLM"),$Go=o(" (LayoutLM model)"),kGo=l(),R2=a("li"),Mue=a("strong"),SGo=o("longformer"),RGo=o(" \u2014 "),JX=a("a"),PGo=o("LongformerForMaskedLM"),BGo=o(" (Longformer model)"),IGo=l(),P2=a("li"),Eue=a("strong"),NGo=o("luke"),qGo=o(" \u2014 "),YX=a("a"),jGo=o("LukeForMaskedLM"),DGo=o(" (LUKE model)"),GGo=l(),B2=a("li"),Cue=a("strong"),OGo=o("mbart"),VGo=o(" \u2014 "),KX=a("a"),XGo=o("MBartForConditionalGeneration"),zGo=o(" (mBART model)"),WGo=l(),I2=a("li"),wue=a("strong"),QGo=o("megatron-bert"),UGo=o(" \u2014 "),ZX=a("a"),HGo=o("MegatronBertForMaskedLM"),JGo=o(" (Megatron-BERT model)"),YGo=l(),N2=a("li"),Aue=a("strong"),KGo=o("mobilebert"),ZGo=o(" \u2014 "),ez=a("a"),eOo=o("MobileBertForMaskedLM"),oOo=o(" (MobileBERT model)"),rOo=l(),q2=a("li"),Lue=a("strong"),tOo=o("mpnet"),aOo=o(" \u2014 "),oz=a("a"),nOo=o("MPNetForMaskedLM"),sOo=o(" (MPNet model)"),lOo=l(),j2=a("li"),yue=a("strong"),iOo=o("mvp"),dOo=o(" \u2014 "),rz=a("a"),cOo=o("MvpForConditionalGeneration"),fOo=o(" (MVP model)"),mOo=l(),D2=a("li"),xue=a("strong"),gOo=o("nezha"),hOo=o(" \u2014 "),tz=a("a"),pOo=o("NezhaForMaskedLM"),_Oo=o(" (Nezha model)"),uOo=l(),G2=a("li"),$ue=a("strong"),bOo=o("nystromformer"),vOo=o(" \u2014 "),az=a("a"),FOo=o("NystromformerForMaskedLM"),TOo=o(" (Nystr\xF6mformer model)"),MOo=l(),O2=a("li"),kue=a("strong"),EOo=o("perceiver"),COo=o(" \u2014 "),nz=a("a"),wOo=o("PerceiverForMaskedLM"),AOo=o(" (Perceiver model)"),LOo=l(),V2=a("li"),Sue=a("strong"),yOo=o("qdqbert"),xOo=o(" \u2014 "),sz=a("a"),$Oo=o("QDQBertForMaskedLM"),kOo=o(" (QDQBert model)"),SOo=l(),X2=a("li"),Rue=a("strong"),ROo=o("reformer"),POo=o(" \u2014 "),lz=a("a"),BOo=o("ReformerForMaskedLM"),IOo=o(" (Reformer model)"),NOo=l(),z2=a("li"),Pue=a("strong"),qOo=o("rembert"),jOo=o(" \u2014 "),iz=a("a"),DOo=o("RemBertForMaskedLM"),GOo=o(" (RemBERT model)"),OOo=l(),W2=a("li"),Bue=a("strong"),VOo=o("roberta"),XOo=o(" \u2014 "),dz=a("a"),zOo=o("RobertaForMaskedLM"),WOo=o(" (RoBERTa model)"),QOo=l(),Q2=a("li"),Iue=a("strong"),UOo=o("roformer"),HOo=o(" \u2014 "),cz=a("a"),JOo=o("RoFormerForMaskedLM"),YOo=o(" (RoFormer model)"),KOo=l(),U2=a("li"),Nue=a("strong"),ZOo=o("squeezebert"),eVo=o(" \u2014 "),fz=a("a"),oVo=o("SqueezeBertForMaskedLM"),rVo=o(" (SqueezeBERT model)"),tVo=l(),H2=a("li"),que=a("strong"),aVo=o("tapas"),nVo=o(" \u2014 "),mz=a("a"),sVo=o("TapasForMaskedLM"),lVo=o(" (TAPAS model)"),iVo=l(),J2=a("li"),jue=a("strong"),dVo=o("wav2vec2"),cVo=o(" \u2014 "),Due=a("code"),fVo=o("Wav2Vec2ForMaskedLM"),mVo=o(" (Wav2Vec2 model)"),gVo=l(),Y2=a("li"),Gue=a("strong"),hVo=o("xlm"),pVo=o(" \u2014 "),gz=a("a"),_Vo=o("XLMWithLMHeadModel"),uVo=o(" (XLM model)"),bVo=l(),K2=a("li"),Oue=a("strong"),vVo=o("xlm-roberta"),FVo=o(" \u2014 "),hz=a("a"),TVo=o("XLMRobertaForMaskedLM"),MVo=o(" (XLM-RoBERTa model)"),EVo=l(),Z2=a("li"),Vue=a("strong"),CVo=o("xlm-roberta-xl"),wVo=o(" \u2014 "),pz=a("a"),AVo=o("XLMRobertaXLForMaskedLM"),LVo=o(" (XLM-RoBERTa-XL model)"),yVo=l(),eb=a("li"),Xue=a("strong"),xVo=o("yoso"),$Vo=o(" \u2014 "),_z=a("a"),kVo=o("YosoForMaskedLM"),SVo=o(" (YOSO model)"),RVo=l(),ob=a("p"),PVo=o("The model is set in evaluation mode by default using "),zue=a("code"),BVo=o("model.eval()"),IVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),NVo=o("model.train()"),qVo=l(),F(rb.$$.fragment),EUe=l(),hd=a("h2"),tb=a("a"),Que=a("span"),F(d9.$$.fragment),jVo=l(),Uue=a("span"),DVo=o("AutoModelForSeq2SeqLM"),CUe=l(),Io=a("div"),F(c9.$$.fragment),GVo=l(),pd=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uz=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),bz=a("a"),zVo=o("from_config()"),WVo=o(` class
method.`),QVo=l(),f9=a("p"),UVo=o("This class cannot be instantiated directly using "),Hue=a("code"),HVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),_t=a("div"),F(m9.$$.fragment),KVo=l(),Jue=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eXo=l(),_d=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),F(ab.$$.fragment),lXo=l(),oo=a("div"),F(g9.$$.fragment),iXo=l(),Kue=a("p"),dXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cXo=l(),Qa=a("p"),fXo=o("The model class to instantiate is selected based on the "),Zue=a("code"),mXo=o("model_type"),gXo=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),hXo=o("pretrained_model_name_or_path"),pXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),_Xo=o("pretrained_model_name_or_path"),uXo=o(":"),bXo=l(),he=a("ul"),nb=a("li"),r1e=a("strong"),vXo=o("bart"),FXo=o(" \u2014 "),Fz=a("a"),TXo=o("BartForConditionalGeneration"),MXo=o(" (BART model)"),EXo=l(),sb=a("li"),t1e=a("strong"),CXo=o("bigbird_pegasus"),wXo=o(" \u2014 "),Tz=a("a"),AXo=o("BigBirdPegasusForConditionalGeneration"),LXo=o(" (BigBird-Pegasus model)"),yXo=l(),lb=a("li"),a1e=a("strong"),xXo=o("blenderbot"),$Xo=o(" \u2014 "),Mz=a("a"),kXo=o("BlenderbotForConditionalGeneration"),SXo=o(" (Blenderbot model)"),RXo=l(),ib=a("li"),n1e=a("strong"),PXo=o("blenderbot-small"),BXo=o(" \u2014 "),Ez=a("a"),IXo=o("BlenderbotSmallForConditionalGeneration"),NXo=o(" (BlenderbotSmall model)"),qXo=l(),db=a("li"),s1e=a("strong"),jXo=o("encoder-decoder"),DXo=o(" \u2014 "),Cz=a("a"),GXo=o("EncoderDecoderModel"),OXo=o(" (Encoder decoder model)"),VXo=l(),cb=a("li"),l1e=a("strong"),XXo=o("fsmt"),zXo=o(" \u2014 "),wz=a("a"),WXo=o("FSMTForConditionalGeneration"),QXo=o(" (FairSeq Machine-Translation model)"),UXo=l(),fb=a("li"),i1e=a("strong"),HXo=o("led"),JXo=o(" \u2014 "),Az=a("a"),YXo=o("LEDForConditionalGeneration"),KXo=o(" (LED model)"),ZXo=l(),mb=a("li"),d1e=a("strong"),ezo=o("longt5"),ozo=o(" \u2014 "),Lz=a("a"),rzo=o("LongT5ForConditionalGeneration"),tzo=o(" (LongT5 model)"),azo=l(),gb=a("li"),c1e=a("strong"),nzo=o("m2m_100"),szo=o(" \u2014 "),yz=a("a"),lzo=o("M2M100ForConditionalGeneration"),izo=o(" (M2M100 model)"),dzo=l(),hb=a("li"),f1e=a("strong"),czo=o("marian"),fzo=o(" \u2014 "),xz=a("a"),mzo=o("MarianMTModel"),gzo=o(" (Marian model)"),hzo=l(),pb=a("li"),m1e=a("strong"),pzo=o("mbart"),_zo=o(" \u2014 "),$z=a("a"),uzo=o("MBartForConditionalGeneration"),bzo=o(" (mBART model)"),vzo=l(),_b=a("li"),g1e=a("strong"),Fzo=o("mt5"),Tzo=o(" \u2014 "),kz=a("a"),Mzo=o("MT5ForConditionalGeneration"),Ezo=o(" (MT5 model)"),Czo=l(),ub=a("li"),h1e=a("strong"),wzo=o("mvp"),Azo=o(" \u2014 "),Sz=a("a"),Lzo=o("MvpForConditionalGeneration"),yzo=o(" (MVP model)"),xzo=l(),bb=a("li"),p1e=a("strong"),$zo=o("nllb"),kzo=o(" \u2014 "),Rz=a("a"),Szo=o("M2M100ForConditionalGeneration"),Rzo=o(" (NLLB model)"),Pzo=l(),vb=a("li"),_1e=a("strong"),Bzo=o("pegasus"),Izo=o(" \u2014 "),Pz=a("a"),Nzo=o("PegasusForConditionalGeneration"),qzo=o(" (Pegasus model)"),jzo=l(),Fb=a("li"),u1e=a("strong"),Dzo=o("plbart"),Gzo=o(" \u2014 "),Bz=a("a"),Ozo=o("PLBartForConditionalGeneration"),Vzo=o(" (PLBart model)"),Xzo=l(),Tb=a("li"),b1e=a("strong"),zzo=o("prophetnet"),Wzo=o(" \u2014 "),Iz=a("a"),Qzo=o("ProphetNetForConditionalGeneration"),Uzo=o(" (ProphetNet model)"),Hzo=l(),Mb=a("li"),v1e=a("strong"),Jzo=o("t5"),Yzo=o(" \u2014 "),Nz=a("a"),Kzo=o("T5ForConditionalGeneration"),Zzo=o(" (T5 model)"),eWo=l(),Eb=a("li"),F1e=a("strong"),oWo=o("xlm-prophetnet"),rWo=o(" \u2014 "),qz=a("a"),tWo=o("XLMProphetNetForConditionalGeneration"),aWo=o(" (XLM-ProphetNet model)"),nWo=l(),Cb=a("p"),sWo=o("The model is set in evaluation mode by default using "),T1e=a("code"),lWo=o("model.eval()"),iWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=a("code"),dWo=o("model.train()"),cWo=l(),F(wb.$$.fragment),wUe=l(),ud=a("h2"),Ab=a("a"),E1e=a("span"),F(h9.$$.fragment),fWo=l(),C1e=a("span"),mWo=o("AutoModelForSequenceClassification"),AUe=l(),No=a("div"),F(p9.$$.fragment),gWo=l(),bd=a("p"),hWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jz=a("a"),pWo=o("from_pretrained()"),_Wo=o(" class method or the "),Dz=a("a"),uWo=o("from_config()"),bWo=o(` class
method.`),vWo=l(),_9=a("p"),FWo=o("This class cannot be instantiated directly using "),w1e=a("code"),TWo=o("__init__()"),MWo=o(" (throws an error)."),EWo=l(),ut=a("div"),F(u9.$$.fragment),CWo=l(),A1e=a("p"),wWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),AWo=l(),vd=a("p"),LWo=o(`Note:
Loading a model from its configuration file does `),L1e=a("strong"),yWo=o("not"),xWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),$Wo=o("from_pretrained()"),kWo=o(" to load the model weights."),SWo=l(),F(Lb.$$.fragment),RWo=l(),ro=a("div"),F(b9.$$.fragment),PWo=l(),y1e=a("p"),BWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),IWo=l(),Ua=a("p"),NWo=o("The model class to instantiate is selected based on the "),x1e=a("code"),qWo=o("model_type"),jWo=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),DWo=o("pretrained_model_name_or_path"),GWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(":"),XWo=l(),N=a("ul"),yb=a("li"),S1e=a("strong"),zWo=o("albert"),WWo=o(" \u2014 "),Oz=a("a"),QWo=o("AlbertForSequenceClassification"),UWo=o(" (ALBERT model)"),HWo=l(),xb=a("li"),R1e=a("strong"),JWo=o("bart"),YWo=o(" \u2014 "),Vz=a("a"),KWo=o("BartForSequenceClassification"),ZWo=o(" (BART model)"),eQo=l(),$b=a("li"),P1e=a("strong"),oQo=o("bert"),rQo=o(" \u2014 "),Xz=a("a"),tQo=o("BertForSequenceClassification"),aQo=o(" (BERT model)"),nQo=l(),kb=a("li"),B1e=a("strong"),sQo=o("big_bird"),lQo=o(" \u2014 "),zz=a("a"),iQo=o("BigBirdForSequenceClassification"),dQo=o(" (BigBird model)"),cQo=l(),Sb=a("li"),I1e=a("strong"),fQo=o("bigbird_pegasus"),mQo=o(" \u2014 "),Wz=a("a"),gQo=o("BigBirdPegasusForSequenceClassification"),hQo=o(" (BigBird-Pegasus model)"),pQo=l(),Rb=a("li"),N1e=a("strong"),_Qo=o("bloom"),uQo=o(" \u2014 "),Qz=a("a"),bQo=o("BloomForSequenceClassification"),vQo=o(" (BLOOM model)"),FQo=l(),Pb=a("li"),q1e=a("strong"),TQo=o("camembert"),MQo=o(" \u2014 "),Uz=a("a"),EQo=o("CamembertForSequenceClassification"),CQo=o(" (CamemBERT model)"),wQo=l(),Bb=a("li"),j1e=a("strong"),AQo=o("canine"),LQo=o(" \u2014 "),Hz=a("a"),yQo=o("CanineForSequenceClassification"),xQo=o(" (CANINE model)"),$Qo=l(),Ib=a("li"),D1e=a("strong"),kQo=o("convbert"),SQo=o(" \u2014 "),Jz=a("a"),RQo=o("ConvBertForSequenceClassification"),PQo=o(" (ConvBERT model)"),BQo=l(),Nb=a("li"),G1e=a("strong"),IQo=o("ctrl"),NQo=o(" \u2014 "),Yz=a("a"),qQo=o("CTRLForSequenceClassification"),jQo=o(" (CTRL model)"),DQo=l(),qb=a("li"),O1e=a("strong"),GQo=o("data2vec-text"),OQo=o(" \u2014 "),Kz=a("a"),VQo=o("Data2VecTextForSequenceClassification"),XQo=o(" (Data2VecText model)"),zQo=l(),jb=a("li"),V1e=a("strong"),WQo=o("deberta"),QQo=o(" \u2014 "),Zz=a("a"),UQo=o("DebertaForSequenceClassification"),HQo=o(" (DeBERTa model)"),JQo=l(),Db=a("li"),X1e=a("strong"),YQo=o("deberta-v2"),KQo=o(" \u2014 "),eW=a("a"),ZQo=o("DebertaV2ForSequenceClassification"),eUo=o(" (DeBERTa-v2 model)"),oUo=l(),Gb=a("li"),z1e=a("strong"),rUo=o("distilbert"),tUo=o(" \u2014 "),oW=a("a"),aUo=o("DistilBertForSequenceClassification"),nUo=o(" (DistilBERT model)"),sUo=l(),Ob=a("li"),W1e=a("strong"),lUo=o("electra"),iUo=o(" \u2014 "),rW=a("a"),dUo=o("ElectraForSequenceClassification"),cUo=o(" (ELECTRA model)"),fUo=l(),Vb=a("li"),Q1e=a("strong"),mUo=o("flaubert"),gUo=o(" \u2014 "),tW=a("a"),hUo=o("FlaubertForSequenceClassification"),pUo=o(" (FlauBERT model)"),_Uo=l(),Xb=a("li"),U1e=a("strong"),uUo=o("fnet"),bUo=o(" \u2014 "),aW=a("a"),vUo=o("FNetForSequenceClassification"),FUo=o(" (FNet model)"),TUo=l(),zb=a("li"),H1e=a("strong"),MUo=o("funnel"),EUo=o(" \u2014 "),nW=a("a"),CUo=o("FunnelForSequenceClassification"),wUo=o(" (Funnel Transformer model)"),AUo=l(),Wb=a("li"),J1e=a("strong"),LUo=o("gpt2"),yUo=o(" \u2014 "),sW=a("a"),xUo=o("GPT2ForSequenceClassification"),$Uo=o(" (OpenAI GPT-2 model)"),kUo=l(),Qb=a("li"),Y1e=a("strong"),SUo=o("gpt_neo"),RUo=o(" \u2014 "),lW=a("a"),PUo=o("GPTNeoForSequenceClassification"),BUo=o(" (GPT Neo model)"),IUo=l(),Ub=a("li"),K1e=a("strong"),NUo=o("gptj"),qUo=o(" \u2014 "),iW=a("a"),jUo=o("GPTJForSequenceClassification"),DUo=o(" (GPT-J model)"),GUo=l(),Hb=a("li"),Z1e=a("strong"),OUo=o("ibert"),VUo=o(" \u2014 "),dW=a("a"),XUo=o("IBertForSequenceClassification"),zUo=o(" (I-BERT model)"),WUo=l(),Jb=a("li"),e8e=a("strong"),QUo=o("layoutlm"),UUo=o(" \u2014 "),cW=a("a"),HUo=o("LayoutLMForSequenceClassification"),JUo=o(" (LayoutLM model)"),YUo=l(),Yb=a("li"),o8e=a("strong"),KUo=o("layoutlmv2"),ZUo=o(" \u2014 "),fW=a("a"),eHo=o("LayoutLMv2ForSequenceClassification"),oHo=o(" (LayoutLMv2 model)"),rHo=l(),Kb=a("li"),r8e=a("strong"),tHo=o("layoutlmv3"),aHo=o(" \u2014 "),mW=a("a"),nHo=o("LayoutLMv3ForSequenceClassification"),sHo=o(" (LayoutLMv3 model)"),lHo=l(),Zb=a("li"),t8e=a("strong"),iHo=o("led"),dHo=o(" \u2014 "),gW=a("a"),cHo=o("LEDForSequenceClassification"),fHo=o(" (LED model)"),mHo=l(),ev=a("li"),a8e=a("strong"),gHo=o("longformer"),hHo=o(" \u2014 "),hW=a("a"),pHo=o("LongformerForSequenceClassification"),_Ho=o(" (Longformer model)"),uHo=l(),ov=a("li"),n8e=a("strong"),bHo=o("luke"),vHo=o(" \u2014 "),pW=a("a"),FHo=o("LukeForSequenceClassification"),THo=o(" (LUKE model)"),MHo=l(),rv=a("li"),s8e=a("strong"),EHo=o("mbart"),CHo=o(" \u2014 "),_W=a("a"),wHo=o("MBartForSequenceClassification"),AHo=o(" (mBART model)"),LHo=l(),tv=a("li"),l8e=a("strong"),yHo=o("megatron-bert"),xHo=o(" \u2014 "),uW=a("a"),$Ho=o("MegatronBertForSequenceClassification"),kHo=o(" (Megatron-BERT model)"),SHo=l(),av=a("li"),i8e=a("strong"),RHo=o("mobilebert"),PHo=o(" \u2014 "),bW=a("a"),BHo=o("MobileBertForSequenceClassification"),IHo=o(" (MobileBERT model)"),NHo=l(),nv=a("li"),d8e=a("strong"),qHo=o("mpnet"),jHo=o(" \u2014 "),vW=a("a"),DHo=o("MPNetForSequenceClassification"),GHo=o(" (MPNet model)"),OHo=l(),sv=a("li"),c8e=a("strong"),VHo=o("mvp"),XHo=o(" \u2014 "),FW=a("a"),zHo=o("MvpForSequenceClassification"),WHo=o(" (MVP model)"),QHo=l(),lv=a("li"),f8e=a("strong"),UHo=o("nezha"),HHo=o(" \u2014 "),TW=a("a"),JHo=o("NezhaForSequenceClassification"),YHo=o(" (Nezha model)"),KHo=l(),iv=a("li"),m8e=a("strong"),ZHo=o("nystromformer"),eJo=o(" \u2014 "),MW=a("a"),oJo=o("NystromformerForSequenceClassification"),rJo=o(" (Nystr\xF6mformer model)"),tJo=l(),dv=a("li"),g8e=a("strong"),aJo=o("openai-gpt"),nJo=o(" \u2014 "),EW=a("a"),sJo=o("OpenAIGPTForSequenceClassification"),lJo=o(" (OpenAI GPT model)"),iJo=l(),cv=a("li"),h8e=a("strong"),dJo=o("opt"),cJo=o(" \u2014 "),CW=a("a"),fJo=o("OPTForSequenceClassification"),mJo=o(" (OPT model)"),gJo=l(),fv=a("li"),p8e=a("strong"),hJo=o("perceiver"),pJo=o(" \u2014 "),wW=a("a"),_Jo=o("PerceiverForSequenceClassification"),uJo=o(" (Perceiver model)"),bJo=l(),mv=a("li"),_8e=a("strong"),vJo=o("plbart"),FJo=o(" \u2014 "),AW=a("a"),TJo=o("PLBartForSequenceClassification"),MJo=o(" (PLBart model)"),EJo=l(),gv=a("li"),u8e=a("strong"),CJo=o("qdqbert"),wJo=o(" \u2014 "),LW=a("a"),AJo=o("QDQBertForSequenceClassification"),LJo=o(" (QDQBert model)"),yJo=l(),hv=a("li"),b8e=a("strong"),xJo=o("reformer"),$Jo=o(" \u2014 "),yW=a("a"),kJo=o("ReformerForSequenceClassification"),SJo=o(" (Reformer model)"),RJo=l(),pv=a("li"),v8e=a("strong"),PJo=o("rembert"),BJo=o(" \u2014 "),xW=a("a"),IJo=o("RemBertForSequenceClassification"),NJo=o(" (RemBERT model)"),qJo=l(),_v=a("li"),F8e=a("strong"),jJo=o("roberta"),DJo=o(" \u2014 "),$W=a("a"),GJo=o("RobertaForSequenceClassification"),OJo=o(" (RoBERTa model)"),VJo=l(),uv=a("li"),T8e=a("strong"),XJo=o("roformer"),zJo=o(" \u2014 "),kW=a("a"),WJo=o("RoFormerForSequenceClassification"),QJo=o(" (RoFormer model)"),UJo=l(),bv=a("li"),M8e=a("strong"),HJo=o("squeezebert"),JJo=o(" \u2014 "),SW=a("a"),YJo=o("SqueezeBertForSequenceClassification"),KJo=o(" (SqueezeBERT model)"),ZJo=l(),vv=a("li"),E8e=a("strong"),eYo=o("tapas"),oYo=o(" \u2014 "),RW=a("a"),rYo=o("TapasForSequenceClassification"),tYo=o(" (TAPAS model)"),aYo=l(),Fv=a("li"),C8e=a("strong"),nYo=o("transfo-xl"),sYo=o(" \u2014 "),PW=a("a"),lYo=o("TransfoXLForSequenceClassification"),iYo=o(" (Transformer-XL model)"),dYo=l(),Tv=a("li"),w8e=a("strong"),cYo=o("xlm"),fYo=o(" \u2014 "),BW=a("a"),mYo=o("XLMForSequenceClassification"),gYo=o(" (XLM model)"),hYo=l(),Mv=a("li"),A8e=a("strong"),pYo=o("xlm-roberta"),_Yo=o(" \u2014 "),IW=a("a"),uYo=o("XLMRobertaForSequenceClassification"),bYo=o(" (XLM-RoBERTa model)"),vYo=l(),Ev=a("li"),L8e=a("strong"),FYo=o("xlm-roberta-xl"),TYo=o(" \u2014 "),NW=a("a"),MYo=o("XLMRobertaXLForSequenceClassification"),EYo=o(" (XLM-RoBERTa-XL model)"),CYo=l(),Cv=a("li"),y8e=a("strong"),wYo=o("xlnet"),AYo=o(" \u2014 "),qW=a("a"),LYo=o("XLNetForSequenceClassification"),yYo=o(" (XLNet model)"),xYo=l(),wv=a("li"),x8e=a("strong"),$Yo=o("yoso"),kYo=o(" \u2014 "),jW=a("a"),SYo=o("YosoForSequenceClassification"),RYo=o(" (YOSO model)"),PYo=l(),Av=a("p"),BYo=o("The model is set in evaluation mode by default using "),$8e=a("code"),IYo=o("model.eval()"),NYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k8e=a("code"),qYo=o("model.train()"),jYo=l(),F(Lv.$$.fragment),LUe=l(),Fd=a("h2"),yv=a("a"),S8e=a("span"),F(v9.$$.fragment),DYo=l(),R8e=a("span"),GYo=o("AutoModelForMultipleChoice"),yUe=l(),qo=a("div"),F(F9.$$.fragment),OYo=l(),Td=a("p"),VYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DW=a("a"),XYo=o("from_pretrained()"),zYo=o(" class method or the "),GW=a("a"),WYo=o("from_config()"),QYo=o(` class
method.`),UYo=l(),T9=a("p"),HYo=o("This class cannot be instantiated directly using "),P8e=a("code"),JYo=o("__init__()"),YYo=o(" (throws an error)."),KYo=l(),bt=a("div"),F(M9.$$.fragment),ZYo=l(),B8e=a("p"),eKo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oKo=l(),Md=a("p"),rKo=o(`Note:
Loading a model from its configuration file does `),I8e=a("strong"),tKo=o("not"),aKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),nKo=o("from_pretrained()"),sKo=o(" to load the model weights."),lKo=l(),F(xv.$$.fragment),iKo=l(),to=a("div"),F(E9.$$.fragment),dKo=l(),N8e=a("p"),cKo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fKo=l(),Ha=a("p"),mKo=o("The model class to instantiate is selected based on the "),q8e=a("code"),gKo=o("model_type"),hKo=o(` property of the config object (either
passed as an argument or loaded from `),j8e=a("code"),pKo=o("pretrained_model_name_or_path"),_Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D8e=a("code"),uKo=o("pretrained_model_name_or_path"),bKo=o(":"),vKo=l(),Z=a("ul"),$v=a("li"),G8e=a("strong"),FKo=o("albert"),TKo=o(" \u2014 "),VW=a("a"),MKo=o("AlbertForMultipleChoice"),EKo=o(" (ALBERT model)"),CKo=l(),kv=a("li"),O8e=a("strong"),wKo=o("bert"),AKo=o(" \u2014 "),XW=a("a"),LKo=o("BertForMultipleChoice"),yKo=o(" (BERT model)"),xKo=l(),Sv=a("li"),V8e=a("strong"),$Ko=o("big_bird"),kKo=o(" \u2014 "),zW=a("a"),SKo=o("BigBirdForMultipleChoice"),RKo=o(" (BigBird model)"),PKo=l(),Rv=a("li"),X8e=a("strong"),BKo=o("camembert"),IKo=o(" \u2014 "),WW=a("a"),NKo=o("CamembertForMultipleChoice"),qKo=o(" (CamemBERT model)"),jKo=l(),Pv=a("li"),z8e=a("strong"),DKo=o("canine"),GKo=o(" \u2014 "),QW=a("a"),OKo=o("CanineForMultipleChoice"),VKo=o(" (CANINE model)"),XKo=l(),Bv=a("li"),W8e=a("strong"),zKo=o("convbert"),WKo=o(" \u2014 "),UW=a("a"),QKo=o("ConvBertForMultipleChoice"),UKo=o(" (ConvBERT model)"),HKo=l(),Iv=a("li"),Q8e=a("strong"),JKo=o("data2vec-text"),YKo=o(" \u2014 "),HW=a("a"),KKo=o("Data2VecTextForMultipleChoice"),ZKo=o(" (Data2VecText model)"),eZo=l(),Nv=a("li"),U8e=a("strong"),oZo=o("deberta-v2"),rZo=o(" \u2014 "),JW=a("a"),tZo=o("DebertaV2ForMultipleChoice"),aZo=o(" (DeBERTa-v2 model)"),nZo=l(),qv=a("li"),H8e=a("strong"),sZo=o("distilbert"),lZo=o(" \u2014 "),YW=a("a"),iZo=o("DistilBertForMultipleChoice"),dZo=o(" (DistilBERT model)"),cZo=l(),jv=a("li"),J8e=a("strong"),fZo=o("electra"),mZo=o(" \u2014 "),KW=a("a"),gZo=o("ElectraForMultipleChoice"),hZo=o(" (ELECTRA model)"),pZo=l(),Dv=a("li"),Y8e=a("strong"),_Zo=o("flaubert"),uZo=o(" \u2014 "),ZW=a("a"),bZo=o("FlaubertForMultipleChoice"),vZo=o(" (FlauBERT model)"),FZo=l(),Gv=a("li"),K8e=a("strong"),TZo=o("fnet"),MZo=o(" \u2014 "),eQ=a("a"),EZo=o("FNetForMultipleChoice"),CZo=o(" (FNet model)"),wZo=l(),Ov=a("li"),Z8e=a("strong"),AZo=o("funnel"),LZo=o(" \u2014 "),oQ=a("a"),yZo=o("FunnelForMultipleChoice"),xZo=o(" (Funnel Transformer model)"),$Zo=l(),Vv=a("li"),e2e=a("strong"),kZo=o("ibert"),SZo=o(" \u2014 "),rQ=a("a"),RZo=o("IBertForMultipleChoice"),PZo=o(" (I-BERT model)"),BZo=l(),Xv=a("li"),o2e=a("strong"),IZo=o("longformer"),NZo=o(" \u2014 "),tQ=a("a"),qZo=o("LongformerForMultipleChoice"),jZo=o(" (Longformer model)"),DZo=l(),zv=a("li"),r2e=a("strong"),GZo=o("luke"),OZo=o(" \u2014 "),aQ=a("a"),VZo=o("LukeForMultipleChoice"),XZo=o(" (LUKE model)"),zZo=l(),Wv=a("li"),t2e=a("strong"),WZo=o("megatron-bert"),QZo=o(" \u2014 "),nQ=a("a"),UZo=o("MegatronBertForMultipleChoice"),HZo=o(" (Megatron-BERT model)"),JZo=l(),Qv=a("li"),a2e=a("strong"),YZo=o("mobilebert"),KZo=o(" \u2014 "),sQ=a("a"),ZZo=o("MobileBertForMultipleChoice"),eer=o(" (MobileBERT model)"),oer=l(),Uv=a("li"),n2e=a("strong"),rer=o("mpnet"),ter=o(" \u2014 "),lQ=a("a"),aer=o("MPNetForMultipleChoice"),ner=o(" (MPNet model)"),ser=l(),Hv=a("li"),s2e=a("strong"),ler=o("nezha"),ier=o(" \u2014 "),iQ=a("a"),der=o("NezhaForMultipleChoice"),cer=o(" (Nezha model)"),fer=l(),Jv=a("li"),l2e=a("strong"),mer=o("nystromformer"),ger=o(" \u2014 "),dQ=a("a"),her=o("NystromformerForMultipleChoice"),per=o(" (Nystr\xF6mformer model)"),_er=l(),Yv=a("li"),i2e=a("strong"),uer=o("qdqbert"),ber=o(" \u2014 "),cQ=a("a"),ver=o("QDQBertForMultipleChoice"),Fer=o(" (QDQBert model)"),Ter=l(),Kv=a("li"),d2e=a("strong"),Mer=o("rembert"),Eer=o(" \u2014 "),fQ=a("a"),Cer=o("RemBertForMultipleChoice"),wer=o(" (RemBERT model)"),Aer=l(),Zv=a("li"),c2e=a("strong"),Ler=o("roberta"),yer=o(" \u2014 "),mQ=a("a"),xer=o("RobertaForMultipleChoice"),$er=o(" (RoBERTa model)"),ker=l(),eF=a("li"),f2e=a("strong"),Ser=o("roformer"),Rer=o(" \u2014 "),gQ=a("a"),Per=o("RoFormerForMultipleChoice"),Ber=o(" (RoFormer model)"),Ier=l(),oF=a("li"),m2e=a("strong"),Ner=o("squeezebert"),qer=o(" \u2014 "),hQ=a("a"),jer=o("SqueezeBertForMultipleChoice"),Der=o(" (SqueezeBERT model)"),Ger=l(),rF=a("li"),g2e=a("strong"),Oer=o("xlm"),Ver=o(" \u2014 "),pQ=a("a"),Xer=o("XLMForMultipleChoice"),zer=o(" (XLM model)"),Wer=l(),tF=a("li"),h2e=a("strong"),Qer=o("xlm-roberta"),Uer=o(" \u2014 "),_Q=a("a"),Her=o("XLMRobertaForMultipleChoice"),Jer=o(" (XLM-RoBERTa model)"),Yer=l(),aF=a("li"),p2e=a("strong"),Ker=o("xlm-roberta-xl"),Zer=o(" \u2014 "),uQ=a("a"),eor=o("XLMRobertaXLForMultipleChoice"),oor=o(" (XLM-RoBERTa-XL model)"),ror=l(),nF=a("li"),_2e=a("strong"),tor=o("xlnet"),aor=o(" \u2014 "),bQ=a("a"),nor=o("XLNetForMultipleChoice"),sor=o(" (XLNet model)"),lor=l(),sF=a("li"),u2e=a("strong"),ior=o("yoso"),dor=o(" \u2014 "),vQ=a("a"),cor=o("YosoForMultipleChoice"),mor=o(" (YOSO model)"),gor=l(),lF=a("p"),hor=o("The model is set in evaluation mode by default using "),b2e=a("code"),por=o("model.eval()"),_or=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=a("code"),uor=o("model.train()"),bor=l(),F(iF.$$.fragment),xUe=l(),Ed=a("h2"),dF=a("a"),F2e=a("span"),F(C9.$$.fragment),vor=l(),T2e=a("span"),For=o("AutoModelForNextSentencePrediction"),$Ue=l(),jo=a("div"),F(w9.$$.fragment),Tor=l(),Cd=a("p"),Mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FQ=a("a"),Eor=o("from_pretrained()"),Cor=o(" class method or the "),TQ=a("a"),wor=o("from_config()"),Aor=o(` class
method.`),Lor=l(),A9=a("p"),yor=o("This class cannot be instantiated directly using "),M2e=a("code"),xor=o("__init__()"),$or=o(" (throws an error)."),kor=l(),vt=a("div"),F(L9.$$.fragment),Sor=l(),E2e=a("p"),Ror=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Por=l(),wd=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),Ior=o("not"),Nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),qor=o("from_pretrained()"),jor=o(" to load the model weights."),Dor=l(),F(cF.$$.fragment),Gor=l(),ao=a("div"),F(y9.$$.fragment),Oor=l(),w2e=a("p"),Vor=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xor=l(),Ja=a("p"),zor=o("The model class to instantiate is selected based on the "),A2e=a("code"),Wor=o("model_type"),Qor=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),Uor=o("pretrained_model_name_or_path"),Hor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),Jor=o("pretrained_model_name_or_path"),Yor=o(":"),Kor=l(),Do=a("ul"),fF=a("li"),x2e=a("strong"),Zor=o("bert"),err=o(" \u2014 "),EQ=a("a"),orr=o("BertForNextSentencePrediction"),rrr=o(" (BERT model)"),trr=l(),mF=a("li"),$2e=a("strong"),arr=o("fnet"),nrr=o(" \u2014 "),CQ=a("a"),srr=o("FNetForNextSentencePrediction"),lrr=o(" (FNet model)"),irr=l(),gF=a("li"),k2e=a("strong"),drr=o("megatron-bert"),crr=o(" \u2014 "),wQ=a("a"),frr=o("MegatronBertForNextSentencePrediction"),mrr=o(" (Megatron-BERT model)"),grr=l(),hF=a("li"),S2e=a("strong"),hrr=o("mobilebert"),prr=o(" \u2014 "),AQ=a("a"),_rr=o("MobileBertForNextSentencePrediction"),urr=o(" (MobileBERT model)"),brr=l(),pF=a("li"),R2e=a("strong"),vrr=o("nezha"),Frr=o(" \u2014 "),LQ=a("a"),Trr=o("NezhaForNextSentencePrediction"),Mrr=o(" (Nezha model)"),Err=l(),_F=a("li"),P2e=a("strong"),Crr=o("qdqbert"),wrr=o(" \u2014 "),yQ=a("a"),Arr=o("QDQBertForNextSentencePrediction"),Lrr=o(" (QDQBert model)"),yrr=l(),uF=a("p"),xrr=o("The model is set in evaluation mode by default using "),B2e=a("code"),$rr=o("model.eval()"),krr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=a("code"),Srr=o("model.train()"),Rrr=l(),F(bF.$$.fragment),kUe=l(),Ad=a("h2"),vF=a("a"),N2e=a("span"),F(x9.$$.fragment),Prr=l(),q2e=a("span"),Brr=o("AutoModelForTokenClassification"),SUe=l(),Go=a("div"),F($9.$$.fragment),Irr=l(),Ld=a("p"),Nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xQ=a("a"),qrr=o("from_pretrained()"),jrr=o(" class method or the "),$Q=a("a"),Drr=o("from_config()"),Grr=o(` class
method.`),Orr=l(),k9=a("p"),Vrr=o("This class cannot be instantiated directly using "),j2e=a("code"),Xrr=o("__init__()"),zrr=o(" (throws an error)."),Wrr=l(),Ft=a("div"),F(S9.$$.fragment),Qrr=l(),D2e=a("p"),Urr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hrr=l(),yd=a("p"),Jrr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),Yrr=o("not"),Krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),Zrr=o("from_pretrained()"),etr=o(" to load the model weights."),otr=l(),F(FF.$$.fragment),rtr=l(),no=a("div"),F(R9.$$.fragment),ttr=l(),O2e=a("p"),atr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ntr=l(),Ya=a("p"),str=o("The model class to instantiate is selected based on the "),V2e=a("code"),ltr=o("model_type"),itr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),ftr=o("pretrained_model_name_or_path"),mtr=o(":"),gtr=l(),H=a("ul"),TF=a("li"),W2e=a("strong"),htr=o("albert"),ptr=o(" \u2014 "),SQ=a("a"),_tr=o("AlbertForTokenClassification"),utr=o(" (ALBERT model)"),btr=l(),MF=a("li"),Q2e=a("strong"),vtr=o("bert"),Ftr=o(" \u2014 "),RQ=a("a"),Ttr=o("BertForTokenClassification"),Mtr=o(" (BERT model)"),Etr=l(),EF=a("li"),U2e=a("strong"),Ctr=o("big_bird"),wtr=o(" \u2014 "),PQ=a("a"),Atr=o("BigBirdForTokenClassification"),Ltr=o(" (BigBird model)"),ytr=l(),CF=a("li"),H2e=a("strong"),xtr=o("bloom"),$tr=o(" \u2014 "),BQ=a("a"),ktr=o("BloomForTokenClassification"),Str=o(" (BLOOM model)"),Rtr=l(),wF=a("li"),J2e=a("strong"),Ptr=o("camembert"),Btr=o(" \u2014 "),IQ=a("a"),Itr=o("CamembertForTokenClassification"),Ntr=o(" (CamemBERT model)"),qtr=l(),AF=a("li"),Y2e=a("strong"),jtr=o("canine"),Dtr=o(" \u2014 "),NQ=a("a"),Gtr=o("CanineForTokenClassification"),Otr=o(" (CANINE model)"),Vtr=l(),LF=a("li"),K2e=a("strong"),Xtr=o("convbert"),ztr=o(" \u2014 "),qQ=a("a"),Wtr=o("ConvBertForTokenClassification"),Qtr=o(" (ConvBERT model)"),Utr=l(),yF=a("li"),Z2e=a("strong"),Htr=o("data2vec-text"),Jtr=o(" \u2014 "),jQ=a("a"),Ytr=o("Data2VecTextForTokenClassification"),Ktr=o(" (Data2VecText model)"),Ztr=l(),xF=a("li"),ebe=a("strong"),ear=o("deberta"),oar=o(" \u2014 "),DQ=a("a"),rar=o("DebertaForTokenClassification"),tar=o(" (DeBERTa model)"),aar=l(),$F=a("li"),obe=a("strong"),nar=o("deberta-v2"),sar=o(" \u2014 "),GQ=a("a"),lar=o("DebertaV2ForTokenClassification"),iar=o(" (DeBERTa-v2 model)"),dar=l(),kF=a("li"),rbe=a("strong"),car=o("distilbert"),far=o(" \u2014 "),OQ=a("a"),mar=o("DistilBertForTokenClassification"),gar=o(" (DistilBERT model)"),har=l(),SF=a("li"),tbe=a("strong"),par=o("electra"),_ar=o(" \u2014 "),VQ=a("a"),uar=o("ElectraForTokenClassification"),bar=o(" (ELECTRA model)"),Far=l(),RF=a("li"),abe=a("strong"),Tar=o("flaubert"),Mar=o(" \u2014 "),XQ=a("a"),Ear=o("FlaubertForTokenClassification"),Car=o(" (FlauBERT model)"),war=l(),PF=a("li"),nbe=a("strong"),Aar=o("fnet"),Lar=o(" \u2014 "),zQ=a("a"),yar=o("FNetForTokenClassification"),xar=o(" (FNet model)"),$ar=l(),BF=a("li"),sbe=a("strong"),kar=o("funnel"),Sar=o(" \u2014 "),WQ=a("a"),Rar=o("FunnelForTokenClassification"),Par=o(" (Funnel Transformer model)"),Bar=l(),IF=a("li"),lbe=a("strong"),Iar=o("gpt2"),Nar=o(" \u2014 "),QQ=a("a"),qar=o("GPT2ForTokenClassification"),jar=o(" (OpenAI GPT-2 model)"),Dar=l(),NF=a("li"),ibe=a("strong"),Gar=o("ibert"),Oar=o(" \u2014 "),UQ=a("a"),Var=o("IBertForTokenClassification"),Xar=o(" (I-BERT model)"),zar=l(),qF=a("li"),dbe=a("strong"),War=o("layoutlm"),Qar=o(" \u2014 "),HQ=a("a"),Uar=o("LayoutLMForTokenClassification"),Har=o(" (LayoutLM model)"),Jar=l(),jF=a("li"),cbe=a("strong"),Yar=o("layoutlmv2"),Kar=o(" \u2014 "),JQ=a("a"),Zar=o("LayoutLMv2ForTokenClassification"),enr=o(" (LayoutLMv2 model)"),onr=l(),DF=a("li"),fbe=a("strong"),rnr=o("layoutlmv3"),tnr=o(" \u2014 "),YQ=a("a"),anr=o("LayoutLMv3ForTokenClassification"),nnr=o(" (LayoutLMv3 model)"),snr=l(),GF=a("li"),mbe=a("strong"),lnr=o("longformer"),inr=o(" \u2014 "),KQ=a("a"),dnr=o("LongformerForTokenClassification"),cnr=o(" (Longformer model)"),fnr=l(),OF=a("li"),gbe=a("strong"),mnr=o("luke"),gnr=o(" \u2014 "),ZQ=a("a"),hnr=o("LukeForTokenClassification"),pnr=o(" (LUKE model)"),_nr=l(),VF=a("li"),hbe=a("strong"),unr=o("megatron-bert"),bnr=o(" \u2014 "),eU=a("a"),vnr=o("MegatronBertForTokenClassification"),Fnr=o(" (Megatron-BERT model)"),Tnr=l(),XF=a("li"),pbe=a("strong"),Mnr=o("mobilebert"),Enr=o(" \u2014 "),oU=a("a"),Cnr=o("MobileBertForTokenClassification"),wnr=o(" (MobileBERT model)"),Anr=l(),zF=a("li"),_be=a("strong"),Lnr=o("mpnet"),ynr=o(" \u2014 "),rU=a("a"),xnr=o("MPNetForTokenClassification"),$nr=o(" (MPNet model)"),knr=l(),WF=a("li"),ube=a("strong"),Snr=o("nezha"),Rnr=o(" \u2014 "),tU=a("a"),Pnr=o("NezhaForTokenClassification"),Bnr=o(" (Nezha model)"),Inr=l(),QF=a("li"),bbe=a("strong"),Nnr=o("nystromformer"),qnr=o(" \u2014 "),aU=a("a"),jnr=o("NystromformerForTokenClassification"),Dnr=o(" (Nystr\xF6mformer model)"),Gnr=l(),UF=a("li"),vbe=a("strong"),Onr=o("qdqbert"),Vnr=o(" \u2014 "),nU=a("a"),Xnr=o("QDQBertForTokenClassification"),znr=o(" (QDQBert model)"),Wnr=l(),HF=a("li"),Fbe=a("strong"),Qnr=o("rembert"),Unr=o(" \u2014 "),sU=a("a"),Hnr=o("RemBertForTokenClassification"),Jnr=o(" (RemBERT model)"),Ynr=l(),JF=a("li"),Tbe=a("strong"),Knr=o("roberta"),Znr=o(" \u2014 "),lU=a("a"),esr=o("RobertaForTokenClassification"),osr=o(" (RoBERTa model)"),rsr=l(),YF=a("li"),Mbe=a("strong"),tsr=o("roformer"),asr=o(" \u2014 "),iU=a("a"),nsr=o("RoFormerForTokenClassification"),ssr=o(" (RoFormer model)"),lsr=l(),KF=a("li"),Ebe=a("strong"),isr=o("squeezebert"),dsr=o(" \u2014 "),dU=a("a"),csr=o("SqueezeBertForTokenClassification"),fsr=o(" (SqueezeBERT model)"),msr=l(),ZF=a("li"),Cbe=a("strong"),gsr=o("xlm"),hsr=o(" \u2014 "),cU=a("a"),psr=o("XLMForTokenClassification"),_sr=o(" (XLM model)"),usr=l(),e6=a("li"),wbe=a("strong"),bsr=o("xlm-roberta"),vsr=o(" \u2014 "),fU=a("a"),Fsr=o("XLMRobertaForTokenClassification"),Tsr=o(" (XLM-RoBERTa model)"),Msr=l(),o6=a("li"),Abe=a("strong"),Esr=o("xlm-roberta-xl"),Csr=o(" \u2014 "),mU=a("a"),wsr=o("XLMRobertaXLForTokenClassification"),Asr=o(" (XLM-RoBERTa-XL model)"),Lsr=l(),r6=a("li"),Lbe=a("strong"),ysr=o("xlnet"),xsr=o(" \u2014 "),gU=a("a"),$sr=o("XLNetForTokenClassification"),ksr=o(" (XLNet model)"),Ssr=l(),t6=a("li"),ybe=a("strong"),Rsr=o("yoso"),Psr=o(" \u2014 "),hU=a("a"),Bsr=o("YosoForTokenClassification"),Isr=o(" (YOSO model)"),Nsr=l(),a6=a("p"),qsr=o("The model is set in evaluation mode by default using "),xbe=a("code"),jsr=o("model.eval()"),Dsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=a("code"),Gsr=o("model.train()"),Osr=l(),F(n6.$$.fragment),RUe=l(),xd=a("h2"),s6=a("a"),kbe=a("span"),F(P9.$$.fragment),Vsr=l(),Sbe=a("span"),Xsr=o("AutoModelForQuestionAnswering"),PUe=l(),Oo=a("div"),F(B9.$$.fragment),zsr=l(),$d=a("p"),Wsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pU=a("a"),Qsr=o("from_pretrained()"),Usr=o(" class method or the "),_U=a("a"),Hsr=o("from_config()"),Jsr=o(` class
method.`),Ysr=l(),I9=a("p"),Ksr=o("This class cannot be instantiated directly using "),Rbe=a("code"),Zsr=o("__init__()"),elr=o(" (throws an error)."),olr=l(),Tt=a("div"),F(N9.$$.fragment),rlr=l(),Pbe=a("p"),tlr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),alr=l(),kd=a("p"),nlr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),slr=o("not"),llr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),ilr=o("from_pretrained()"),dlr=o(" to load the model weights."),clr=l(),F(l6.$$.fragment),flr=l(),so=a("div"),F(q9.$$.fragment),mlr=l(),Ibe=a("p"),glr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hlr=l(),Ka=a("p"),plr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),_lr=o("model_type"),ulr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),blr=o("pretrained_model_name_or_path"),vlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),Flr=o("pretrained_model_name_or_path"),Tlr=o(":"),Mlr=l(),V=a("ul"),i6=a("li"),Dbe=a("strong"),Elr=o("albert"),Clr=o(" \u2014 "),bU=a("a"),wlr=o("AlbertForQuestionAnswering"),Alr=o(" (ALBERT model)"),Llr=l(),d6=a("li"),Gbe=a("strong"),ylr=o("bart"),xlr=o(" \u2014 "),vU=a("a"),$lr=o("BartForQuestionAnswering"),klr=o(" (BART model)"),Slr=l(),c6=a("li"),Obe=a("strong"),Rlr=o("bert"),Plr=o(" \u2014 "),FU=a("a"),Blr=o("BertForQuestionAnswering"),Ilr=o(" (BERT model)"),Nlr=l(),f6=a("li"),Vbe=a("strong"),qlr=o("big_bird"),jlr=o(" \u2014 "),TU=a("a"),Dlr=o("BigBirdForQuestionAnswering"),Glr=o(" (BigBird model)"),Olr=l(),m6=a("li"),Xbe=a("strong"),Vlr=o("bigbird_pegasus"),Xlr=o(" \u2014 "),MU=a("a"),zlr=o("BigBirdPegasusForQuestionAnswering"),Wlr=o(" (BigBird-Pegasus model)"),Qlr=l(),g6=a("li"),zbe=a("strong"),Ulr=o("camembert"),Hlr=o(" \u2014 "),EU=a("a"),Jlr=o("CamembertForQuestionAnswering"),Ylr=o(" (CamemBERT model)"),Klr=l(),h6=a("li"),Wbe=a("strong"),Zlr=o("canine"),eir=o(" \u2014 "),CU=a("a"),oir=o("CanineForQuestionAnswering"),rir=o(" (CANINE model)"),tir=l(),p6=a("li"),Qbe=a("strong"),air=o("convbert"),nir=o(" \u2014 "),wU=a("a"),sir=o("ConvBertForQuestionAnswering"),lir=o(" (ConvBERT model)"),iir=l(),_6=a("li"),Ube=a("strong"),dir=o("data2vec-text"),cir=o(" \u2014 "),AU=a("a"),fir=o("Data2VecTextForQuestionAnswering"),mir=o(" (Data2VecText model)"),gir=l(),u6=a("li"),Hbe=a("strong"),hir=o("deberta"),pir=o(" \u2014 "),LU=a("a"),_ir=o("DebertaForQuestionAnswering"),uir=o(" (DeBERTa model)"),bir=l(),b6=a("li"),Jbe=a("strong"),vir=o("deberta-v2"),Fir=o(" \u2014 "),yU=a("a"),Tir=o("DebertaV2ForQuestionAnswering"),Mir=o(" (DeBERTa-v2 model)"),Eir=l(),v6=a("li"),Ybe=a("strong"),Cir=o("distilbert"),wir=o(" \u2014 "),xU=a("a"),Air=o("DistilBertForQuestionAnswering"),Lir=o(" (DistilBERT model)"),yir=l(),F6=a("li"),Kbe=a("strong"),xir=o("electra"),$ir=o(" \u2014 "),$U=a("a"),kir=o("ElectraForQuestionAnswering"),Sir=o(" (ELECTRA model)"),Rir=l(),T6=a("li"),Zbe=a("strong"),Pir=o("flaubert"),Bir=o(" \u2014 "),kU=a("a"),Iir=o("FlaubertForQuestionAnsweringSimple"),Nir=o(" (FlauBERT model)"),qir=l(),M6=a("li"),eve=a("strong"),jir=o("fnet"),Dir=o(" \u2014 "),SU=a("a"),Gir=o("FNetForQuestionAnswering"),Oir=o(" (FNet model)"),Vir=l(),E6=a("li"),ove=a("strong"),Xir=o("funnel"),zir=o(" \u2014 "),RU=a("a"),Wir=o("FunnelForQuestionAnswering"),Qir=o(" (Funnel Transformer model)"),Uir=l(),C6=a("li"),rve=a("strong"),Hir=o("gptj"),Jir=o(" \u2014 "),PU=a("a"),Yir=o("GPTJForQuestionAnswering"),Kir=o(" (GPT-J model)"),Zir=l(),w6=a("li"),tve=a("strong"),edr=o("ibert"),odr=o(" \u2014 "),BU=a("a"),rdr=o("IBertForQuestionAnswering"),tdr=o(" (I-BERT model)"),adr=l(),A6=a("li"),ave=a("strong"),ndr=o("layoutlmv2"),sdr=o(" \u2014 "),IU=a("a"),ldr=o("LayoutLMv2ForQuestionAnswering"),idr=o(" (LayoutLMv2 model)"),ddr=l(),L6=a("li"),nve=a("strong"),cdr=o("layoutlmv3"),fdr=o(" \u2014 "),NU=a("a"),mdr=o("LayoutLMv3ForQuestionAnswering"),gdr=o(" (LayoutLMv3 model)"),hdr=l(),y6=a("li"),sve=a("strong"),pdr=o("led"),_dr=o(" \u2014 "),qU=a("a"),udr=o("LEDForQuestionAnswering"),bdr=o(" (LED model)"),vdr=l(),x6=a("li"),lve=a("strong"),Fdr=o("longformer"),Tdr=o(" \u2014 "),jU=a("a"),Mdr=o("LongformerForQuestionAnswering"),Edr=o(" (Longformer model)"),Cdr=l(),$6=a("li"),ive=a("strong"),wdr=o("luke"),Adr=o(" \u2014 "),DU=a("a"),Ldr=o("LukeForQuestionAnswering"),ydr=o(" (LUKE model)"),xdr=l(),k6=a("li"),dve=a("strong"),$dr=o("lxmert"),kdr=o(" \u2014 "),GU=a("a"),Sdr=o("LxmertForQuestionAnswering"),Rdr=o(" (LXMERT model)"),Pdr=l(),S6=a("li"),cve=a("strong"),Bdr=o("mbart"),Idr=o(" \u2014 "),OU=a("a"),Ndr=o("MBartForQuestionAnswering"),qdr=o(" (mBART model)"),jdr=l(),R6=a("li"),fve=a("strong"),Ddr=o("megatron-bert"),Gdr=o(" \u2014 "),VU=a("a"),Odr=o("MegatronBertForQuestionAnswering"),Vdr=o(" (Megatron-BERT model)"),Xdr=l(),P6=a("li"),mve=a("strong"),zdr=o("mobilebert"),Wdr=o(" \u2014 "),XU=a("a"),Qdr=o("MobileBertForQuestionAnswering"),Udr=o(" (MobileBERT model)"),Hdr=l(),B6=a("li"),gve=a("strong"),Jdr=o("mpnet"),Ydr=o(" \u2014 "),zU=a("a"),Kdr=o("MPNetForQuestionAnswering"),Zdr=o(" (MPNet model)"),ecr=l(),I6=a("li"),hve=a("strong"),ocr=o("mvp"),rcr=o(" \u2014 "),WU=a("a"),tcr=o("MvpForQuestionAnswering"),acr=o(" (MVP model)"),ncr=l(),N6=a("li"),pve=a("strong"),scr=o("nezha"),lcr=o(" \u2014 "),QU=a("a"),icr=o("NezhaForQuestionAnswering"),dcr=o(" (Nezha model)"),ccr=l(),q6=a("li"),_ve=a("strong"),fcr=o("nystromformer"),mcr=o(" \u2014 "),UU=a("a"),gcr=o("NystromformerForQuestionAnswering"),hcr=o(" (Nystr\xF6mformer model)"),pcr=l(),j6=a("li"),uve=a("strong"),_cr=o("qdqbert"),ucr=o(" \u2014 "),HU=a("a"),bcr=o("QDQBertForQuestionAnswering"),vcr=o(" (QDQBert model)"),Fcr=l(),D6=a("li"),bve=a("strong"),Tcr=o("reformer"),Mcr=o(" \u2014 "),JU=a("a"),Ecr=o("ReformerForQuestionAnswering"),Ccr=o(" (Reformer model)"),wcr=l(),G6=a("li"),vve=a("strong"),Acr=o("rembert"),Lcr=o(" \u2014 "),YU=a("a"),ycr=o("RemBertForQuestionAnswering"),xcr=o(" (RemBERT model)"),$cr=l(),O6=a("li"),Fve=a("strong"),kcr=o("roberta"),Scr=o(" \u2014 "),KU=a("a"),Rcr=o("RobertaForQuestionAnswering"),Pcr=o(" (RoBERTa model)"),Bcr=l(),V6=a("li"),Tve=a("strong"),Icr=o("roformer"),Ncr=o(" \u2014 "),ZU=a("a"),qcr=o("RoFormerForQuestionAnswering"),jcr=o(" (RoFormer model)"),Dcr=l(),X6=a("li"),Mve=a("strong"),Gcr=o("splinter"),Ocr=o(" \u2014 "),eH=a("a"),Vcr=o("SplinterForQuestionAnswering"),Xcr=o(" (Splinter model)"),zcr=l(),z6=a("li"),Eve=a("strong"),Wcr=o("squeezebert"),Qcr=o(" \u2014 "),oH=a("a"),Ucr=o("SqueezeBertForQuestionAnswering"),Hcr=o(" (SqueezeBERT model)"),Jcr=l(),W6=a("li"),Cve=a("strong"),Ycr=o("xlm"),Kcr=o(" \u2014 "),rH=a("a"),Zcr=o("XLMForQuestionAnsweringSimple"),efr=o(" (XLM model)"),ofr=l(),Q6=a("li"),wve=a("strong"),rfr=o("xlm-roberta"),tfr=o(" \u2014 "),tH=a("a"),afr=o("XLMRobertaForQuestionAnswering"),nfr=o(" (XLM-RoBERTa model)"),sfr=l(),U6=a("li"),Ave=a("strong"),lfr=o("xlm-roberta-xl"),ifr=o(" \u2014 "),aH=a("a"),dfr=o("XLMRobertaXLForQuestionAnswering"),cfr=o(" (XLM-RoBERTa-XL model)"),ffr=l(),H6=a("li"),Lve=a("strong"),mfr=o("xlnet"),gfr=o(" \u2014 "),nH=a("a"),hfr=o("XLNetForQuestionAnsweringSimple"),pfr=o(" (XLNet model)"),_fr=l(),J6=a("li"),yve=a("strong"),ufr=o("yoso"),bfr=o(" \u2014 "),sH=a("a"),vfr=o("YosoForQuestionAnswering"),Ffr=o(" (YOSO model)"),Tfr=l(),Y6=a("p"),Mfr=o("The model is set in evaluation mode by default using "),xve=a("code"),Efr=o("model.eval()"),Cfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ve=a("code"),wfr=o("model.train()"),Afr=l(),F(K6.$$.fragment),BUe=l(),Sd=a("h2"),Z6=a("a"),kve=a("span"),F(j9.$$.fragment),Lfr=l(),Sve=a("span"),yfr=o("AutoModelForTableQuestionAnswering"),IUe=l(),Vo=a("div"),F(D9.$$.fragment),xfr=l(),Rd=a("p"),$fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lH=a("a"),kfr=o("from_pretrained()"),Sfr=o(" class method or the "),iH=a("a"),Rfr=o("from_config()"),Pfr=o(` class
method.`),Bfr=l(),G9=a("p"),Ifr=o("This class cannot be instantiated directly using "),Rve=a("code"),Nfr=o("__init__()"),qfr=o(" (throws an error)."),jfr=l(),Mt=a("div"),F(O9.$$.fragment),Dfr=l(),Pve=a("p"),Gfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ofr=l(),Pd=a("p"),Vfr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),Xfr=o("not"),zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),Wfr=o("from_pretrained()"),Qfr=o(" to load the model weights."),Ufr=l(),F(eT.$$.fragment),Hfr=l(),lo=a("div"),F(V9.$$.fragment),Jfr=l(),Ive=a("p"),Yfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Kfr=l(),Za=a("p"),Zfr=o("The model class to instantiate is selected based on the "),Nve=a("code"),emr=o("model_type"),omr=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(":"),smr=l(),Dve=a("ul"),oT=a("li"),Gve=a("strong"),lmr=o("tapas"),imr=o(" \u2014 "),cH=a("a"),dmr=o("TapasForQuestionAnswering"),cmr=o(" (TAPAS model)"),fmr=l(),rT=a("p"),mmr=o("The model is set in evaluation mode by default using "),Ove=a("code"),gmr=o("model.eval()"),hmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vve=a("code"),pmr=o("model.train()"),_mr=l(),F(tT.$$.fragment),NUe=l(),Bd=a("h2"),aT=a("a"),Xve=a("span"),F(X9.$$.fragment),umr=l(),zve=a("span"),bmr=o("AutoModelForImageClassification"),qUe=l(),Xo=a("div"),F(z9.$$.fragment),vmr=l(),Id=a("p"),Fmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fH=a("a"),Tmr=o("from_pretrained()"),Mmr=o(" class method or the "),mH=a("a"),Emr=o("from_config()"),Cmr=o(` class
method.`),wmr=l(),W9=a("p"),Amr=o("This class cannot be instantiated directly using "),Wve=a("code"),Lmr=o("__init__()"),ymr=o(" (throws an error)."),xmr=l(),Et=a("div"),F(Q9.$$.fragment),$mr=l(),Qve=a("p"),kmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Smr=l(),Nd=a("p"),Rmr=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),Pmr=o("not"),Bmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),Imr=o("from_pretrained()"),Nmr=o(" to load the model weights."),qmr=l(),F(nT.$$.fragment),jmr=l(),io=a("div"),F(U9.$$.fragment),Dmr=l(),Hve=a("p"),Gmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Omr=l(),en=a("p"),Vmr=o("The model class to instantiate is selected based on the "),Jve=a("code"),Xmr=o("model_type"),zmr=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),Wmr=o("pretrained_model_name_or_path"),Qmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),Umr=o("pretrained_model_name_or_path"),Hmr=o(":"),Jmr=l(),be=a("ul"),sT=a("li"),Zve=a("strong"),Ymr=o("beit"),Kmr=o(" \u2014 "),hH=a("a"),Zmr=o("BeitForImageClassification"),egr=o(" (BEiT model)"),ogr=l(),lT=a("li"),eFe=a("strong"),rgr=o("convnext"),tgr=o(" \u2014 "),pH=a("a"),agr=o("ConvNextForImageClassification"),ngr=o(" (ConvNeXT model)"),sgr=l(),iT=a("li"),oFe=a("strong"),lgr=o("cvt"),igr=o(" \u2014 "),_H=a("a"),dgr=o("CvtForImageClassification"),cgr=o(" (CvT model)"),fgr=l(),dT=a("li"),rFe=a("strong"),mgr=o("data2vec-vision"),ggr=o(" \u2014 "),uH=a("a"),hgr=o("Data2VecVisionForImageClassification"),pgr=o(" (Data2VecVision model)"),_gr=l(),sl=a("li"),tFe=a("strong"),ugr=o("deit"),bgr=o(" \u2014 "),bH=a("a"),vgr=o("DeiTForImageClassification"),Fgr=o(" or "),vH=a("a"),Tgr=o("DeiTForImageClassificationWithTeacher"),Mgr=o(" (DeiT model)"),Egr=l(),cT=a("li"),aFe=a("strong"),Cgr=o("imagegpt"),wgr=o(" \u2014 "),FH=a("a"),Agr=o("ImageGPTForImageClassification"),Lgr=o(" (ImageGPT model)"),ygr=l(),ll=a("li"),nFe=a("strong"),xgr=o("levit"),$gr=o(" \u2014 "),TH=a("a"),kgr=o("LevitForImageClassification"),Sgr=o(" or "),MH=a("a"),Rgr=o("LevitForImageClassificationWithTeacher"),Pgr=o(" (LeViT model)"),Bgr=l(),fT=a("li"),sFe=a("strong"),Igr=o("mobilevit"),Ngr=o(" \u2014 "),EH=a("a"),qgr=o("MobileViTForImageClassification"),jgr=o(" (MobileViT model)"),Dgr=l(),Ct=a("li"),lFe=a("strong"),Ggr=o("perceiver"),Ogr=o(" \u2014 "),CH=a("a"),Vgr=o("PerceiverForImageClassificationLearned"),Xgr=o(" or "),wH=a("a"),zgr=o("PerceiverForImageClassificationFourier"),Wgr=o(" or "),AH=a("a"),Qgr=o("PerceiverForImageClassificationConvProcessing"),Ugr=o(" (Perceiver model)"),Hgr=l(),mT=a("li"),iFe=a("strong"),Jgr=o("poolformer"),Ygr=o(" \u2014 "),LH=a("a"),Kgr=o("PoolFormerForImageClassification"),Zgr=o(" (PoolFormer model)"),ehr=l(),gT=a("li"),dFe=a("strong"),ohr=o("regnet"),rhr=o(" \u2014 "),yH=a("a"),thr=o("RegNetForImageClassification"),ahr=o(" (RegNet model)"),nhr=l(),hT=a("li"),cFe=a("strong"),shr=o("resnet"),lhr=o(" \u2014 "),xH=a("a"),ihr=o("ResNetForImageClassification"),dhr=o(" (ResNet model)"),chr=l(),pT=a("li"),fFe=a("strong"),fhr=o("segformer"),mhr=o(" \u2014 "),$H=a("a"),ghr=o("SegformerForImageClassification"),hhr=o(" (SegFormer model)"),phr=l(),_T=a("li"),mFe=a("strong"),_hr=o("swin"),uhr=o(" \u2014 "),kH=a("a"),bhr=o("SwinForImageClassification"),vhr=o(" (Swin Transformer model)"),Fhr=l(),uT=a("li"),gFe=a("strong"),Thr=o("swinv2"),Mhr=o(" \u2014 "),SH=a("a"),Ehr=o("Swinv2ForImageClassification"),Chr=o(" (Swin Transformer V2 model)"),whr=l(),bT=a("li"),hFe=a("strong"),Ahr=o("van"),Lhr=o(" \u2014 "),RH=a("a"),yhr=o("VanForImageClassification"),xhr=o(" (VAN model)"),$hr=l(),vT=a("li"),pFe=a("strong"),khr=o("vit"),Shr=o(" \u2014 "),PH=a("a"),Rhr=o("ViTForImageClassification"),Phr=o(" (ViT model)"),Bhr=l(),FT=a("p"),Ihr=o("The model is set in evaluation mode by default using "),_Fe=a("code"),Nhr=o("model.eval()"),qhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=a("code"),jhr=o("model.train()"),Dhr=l(),F(TT.$$.fragment),jUe=l(),qd=a("h2"),MT=a("a"),bFe=a("span"),F(H9.$$.fragment),Ghr=l(),vFe=a("span"),Ohr=o("AutoModelForVideoClassification"),DUe=l(),zo=a("div"),F(J9.$$.fragment),Vhr=l(),jd=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),BH=a("a"),zhr=o("from_pretrained()"),Whr=o(" class method or the "),IH=a("a"),Qhr=o("from_config()"),Uhr=o(` class
method.`),Hhr=l(),Y9=a("p"),Jhr=o("This class cannot be instantiated directly using "),FFe=a("code"),Yhr=o("__init__()"),Khr=o(" (throws an error)."),Zhr=l(),wt=a("div"),F(K9.$$.fragment),epr=l(),TFe=a("p"),opr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),rpr=l(),Dd=a("p"),tpr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),apr=o("not"),npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),spr=o("from_pretrained()"),lpr=o(" to load the model weights."),ipr=l(),F(ET.$$.fragment),dpr=l(),co=a("div"),F(Z9.$$.fragment),cpr=l(),EFe=a("p"),fpr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),mpr=l(),on=a("p"),gpr=o("The model class to instantiate is selected based on the "),CFe=a("code"),hpr=o("model_type"),ppr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),_pr=o("pretrained_model_name_or_path"),upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),bpr=o("pretrained_model_name_or_path"),vpr=o(":"),Fpr=l(),LFe=a("ul"),CT=a("li"),yFe=a("strong"),Tpr=o("videomae"),Mpr=o(" \u2014 "),qH=a("a"),Epr=o("VideoMAEForVideoClassification"),Cpr=o(" (VideoMAE model)"),wpr=l(),wT=a("p"),Apr=o("The model is set in evaluation mode by default using "),xFe=a("code"),Lpr=o("model.eval()"),ypr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=a("code"),xpr=o("model.train()"),$pr=l(),F(AT.$$.fragment),GUe=l(),Gd=a("h2"),LT=a("a"),kFe=a("span"),F(ex.$$.fragment),kpr=l(),SFe=a("span"),Spr=o("AutoModelForVision2Seq"),OUe=l(),Wo=a("div"),F(ox.$$.fragment),Rpr=l(),Od=a("p"),Ppr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jH=a("a"),Bpr=o("from_pretrained()"),Ipr=o(" class method or the "),DH=a("a"),Npr=o("from_config()"),qpr=o(` class
method.`),jpr=l(),rx=a("p"),Dpr=o("This class cannot be instantiated directly using "),RFe=a("code"),Gpr=o("__init__()"),Opr=o(" (throws an error)."),Vpr=l(),At=a("div"),F(tx.$$.fragment),Xpr=l(),PFe=a("p"),zpr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wpr=l(),Vd=a("p"),Qpr=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),Upr=o("not"),Hpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),Jpr=o("from_pretrained()"),Ypr=o(" to load the model weights."),Kpr=l(),F(yT.$$.fragment),Zpr=l(),fo=a("div"),F(ax.$$.fragment),e_r=l(),IFe=a("p"),o_r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r_r=l(),rn=a("p"),t_r=o("The model class to instantiate is selected based on the "),NFe=a("code"),a_r=o("model_type"),n_r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),s_r=o("pretrained_model_name_or_path"),l_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),i_r=o("pretrained_model_name_or_path"),d_r=o(":"),c_r=l(),DFe=a("ul"),xT=a("li"),GFe=a("strong"),f_r=o("vision-encoder-decoder"),m_r=o(" \u2014 "),OH=a("a"),g_r=o("VisionEncoderDecoderModel"),h_r=o(" (Vision Encoder decoder model)"),p_r=l(),$T=a("p"),__r=o("The model is set in evaluation mode by default using "),OFe=a("code"),u_r=o("model.eval()"),b_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=a("code"),v_r=o("model.train()"),F_r=l(),F(kT.$$.fragment),VUe=l(),Xd=a("h2"),ST=a("a"),XFe=a("span"),F(nx.$$.fragment),T_r=l(),zFe=a("span"),M_r=o("AutoModelForVisualQuestionAnswering"),XUe=l(),Qo=a("div"),F(sx.$$.fragment),E_r=l(),zd=a("p"),C_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),VH=a("a"),w_r=o("from_pretrained()"),A_r=o(" class method or the "),XH=a("a"),L_r=o("from_config()"),y_r=o(` class
method.`),x_r=l(),lx=a("p"),$_r=o("This class cannot be instantiated directly using "),WFe=a("code"),k_r=o("__init__()"),S_r=o(" (throws an error)."),R_r=l(),Lt=a("div"),F(ix.$$.fragment),P_r=l(),QFe=a("p"),B_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),I_r=l(),Wd=a("p"),N_r=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),q_r=o("not"),j_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),D_r=o("from_pretrained()"),G_r=o(" to load the model weights."),O_r=l(),F(RT.$$.fragment),V_r=l(),mo=a("div"),F(dx.$$.fragment),X_r=l(),HFe=a("p"),z_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),W_r=l(),tn=a("p"),Q_r=o("The model class to instantiate is selected based on the "),JFe=a("code"),U_r=o("model_type"),H_r=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(":"),eur=l(),ZFe=a("ul"),PT=a("li"),e6e=a("strong"),our=o("vilt"),rur=o(" \u2014 "),WH=a("a"),tur=o("ViltForQuestionAnswering"),aur=o(" (ViLT model)"),nur=l(),BT=a("p"),sur=o("The model is set in evaluation mode by default using "),o6e=a("code"),lur=o("model.eval()"),iur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r6e=a("code"),dur=o("model.train()"),cur=l(),F(IT.$$.fragment),zUe=l(),Qd=a("h2"),NT=a("a"),t6e=a("span"),F(cx.$$.fragment),fur=l(),a6e=a("span"),mur=o("AutoModelForAudioClassification"),WUe=l(),Uo=a("div"),F(fx.$$.fragment),gur=l(),Ud=a("p"),hur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QH=a("a"),pur=o("from_pretrained()"),_ur=o(" class method or the "),UH=a("a"),uur=o("from_config()"),bur=o(` class
method.`),vur=l(),mx=a("p"),Fur=o("This class cannot be instantiated directly using "),n6e=a("code"),Tur=o("__init__()"),Mur=o(" (throws an error)."),Eur=l(),yt=a("div"),F(gx.$$.fragment),Cur=l(),s6e=a("p"),wur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Aur=l(),Hd=a("p"),Lur=o(`Note:
Loading a model from its configuration file does `),l6e=a("strong"),yur=o("not"),xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),$ur=o("from_pretrained()"),kur=o(" to load the model weights."),Sur=l(),F(qT.$$.fragment),Rur=l(),go=a("div"),F(hx.$$.fragment),Pur=l(),i6e=a("p"),Bur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Iur=l(),an=a("p"),Nur=o("The model class to instantiate is selected based on the "),d6e=a("code"),qur=o("model_type"),jur=o(` property of the config object (either
passed as an argument or loaded from `),c6e=a("code"),Dur=o("pretrained_model_name_or_path"),Gur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=a("code"),Our=o("pretrained_model_name_or_path"),Vur=o(":"),Xur=l(),Pe=a("ul"),jT=a("li"),m6e=a("strong"),zur=o("data2vec-audio"),Wur=o(" \u2014 "),JH=a("a"),Qur=o("Data2VecAudioForSequenceClassification"),Uur=o(" (Data2VecAudio model)"),Hur=l(),DT=a("li"),g6e=a("strong"),Jur=o("hubert"),Yur=o(" \u2014 "),YH=a("a"),Kur=o("HubertForSequenceClassification"),Zur=o(" (Hubert model)"),e1r=l(),GT=a("li"),h6e=a("strong"),o1r=o("sew"),r1r=o(" \u2014 "),KH=a("a"),t1r=o("SEWForSequenceClassification"),a1r=o(" (SEW model)"),n1r=l(),OT=a("li"),p6e=a("strong"),s1r=o("sew-d"),l1r=o(" \u2014 "),ZH=a("a"),i1r=o("SEWDForSequenceClassification"),d1r=o(" (SEW-D model)"),c1r=l(),VT=a("li"),_6e=a("strong"),f1r=o("unispeech"),m1r=o(" \u2014 "),eJ=a("a"),g1r=o("UniSpeechForSequenceClassification"),h1r=o(" (UniSpeech model)"),p1r=l(),XT=a("li"),u6e=a("strong"),_1r=o("unispeech-sat"),u1r=o(" \u2014 "),oJ=a("a"),b1r=o("UniSpeechSatForSequenceClassification"),v1r=o(" (UniSpeechSat model)"),F1r=l(),zT=a("li"),b6e=a("strong"),T1r=o("wav2vec2"),M1r=o(" \u2014 "),rJ=a("a"),E1r=o("Wav2Vec2ForSequenceClassification"),C1r=o(" (Wav2Vec2 model)"),w1r=l(),WT=a("li"),v6e=a("strong"),A1r=o("wav2vec2-conformer"),L1r=o(" \u2014 "),tJ=a("a"),y1r=o("Wav2Vec2ConformerForSequenceClassification"),x1r=o(" (Wav2Vec2-Conformer model)"),$1r=l(),QT=a("li"),F6e=a("strong"),k1r=o("wavlm"),S1r=o(" \u2014 "),aJ=a("a"),R1r=o("WavLMForSequenceClassification"),P1r=o(" (WavLM model)"),B1r=l(),UT=a("p"),I1r=o("The model is set in evaluation mode by default using "),T6e=a("code"),N1r=o("model.eval()"),q1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M6e=a("code"),j1r=o("model.train()"),D1r=l(),F(HT.$$.fragment),QUe=l(),Jd=a("h2"),JT=a("a"),E6e=a("span"),F(px.$$.fragment),G1r=l(),C6e=a("span"),O1r=o("AutoModelForAudioFrameClassification"),UUe=l(),Ho=a("div"),F(_x.$$.fragment),V1r=l(),Yd=a("p"),X1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),nJ=a("a"),z1r=o("from_pretrained()"),W1r=o(" class method or the "),sJ=a("a"),Q1r=o("from_config()"),U1r=o(` class
method.`),H1r=l(),ux=a("p"),J1r=o("This class cannot be instantiated directly using "),w6e=a("code"),Y1r=o("__init__()"),K1r=o(" (throws an error)."),Z1r=l(),xt=a("div"),F(bx.$$.fragment),e8r=l(),A6e=a("p"),o8r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),r8r=l(),Kd=a("p"),t8r=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),a8r=o("not"),n8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),s8r=o("from_pretrained()"),l8r=o(" to load the model weights."),i8r=l(),F(YT.$$.fragment),d8r=l(),ho=a("div"),F(vx.$$.fragment),c8r=l(),y6e=a("p"),f8r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),m8r=l(),nn=a("p"),g8r=o("The model class to instantiate is selected based on the "),x6e=a("code"),h8r=o("model_type"),p8r=o(` property of the config object (either
passed as an argument or loaded from `),$6e=a("code"),_8r=o("pretrained_model_name_or_path"),u8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=a("code"),b8r=o("pretrained_model_name_or_path"),v8r=o(":"),F8r=l(),st=a("ul"),KT=a("li"),S6e=a("strong"),T8r=o("data2vec-audio"),M8r=o(" \u2014 "),iJ=a("a"),E8r=o("Data2VecAudioForAudioFrameClassification"),C8r=o(" (Data2VecAudio model)"),w8r=l(),ZT=a("li"),R6e=a("strong"),A8r=o("unispeech-sat"),L8r=o(" \u2014 "),dJ=a("a"),y8r=o("UniSpeechSatForAudioFrameClassification"),x8r=o(" (UniSpeechSat model)"),$8r=l(),e7=a("li"),P6e=a("strong"),k8r=o("wav2vec2"),S8r=o(" \u2014 "),cJ=a("a"),R8r=o("Wav2Vec2ForAudioFrameClassification"),P8r=o(" (Wav2Vec2 model)"),B8r=l(),o7=a("li"),B6e=a("strong"),I8r=o("wav2vec2-conformer"),N8r=o(" \u2014 "),fJ=a("a"),q8r=o("Wav2Vec2ConformerForAudioFrameClassification"),j8r=o(" (Wav2Vec2-Conformer model)"),D8r=l(),r7=a("li"),I6e=a("strong"),G8r=o("wavlm"),O8r=o(" \u2014 "),mJ=a("a"),V8r=o("WavLMForAudioFrameClassification"),X8r=o(" (WavLM model)"),z8r=l(),t7=a("p"),W8r=o("The model is set in evaluation mode by default using "),N6e=a("code"),Q8r=o("model.eval()"),U8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q6e=a("code"),H8r=o("model.train()"),J8r=l(),F(a7.$$.fragment),HUe=l(),Zd=a("h2"),n7=a("a"),j6e=a("span"),F(Fx.$$.fragment),Y8r=l(),D6e=a("span"),K8r=o("AutoModelForCTC"),JUe=l(),Jo=a("div"),F(Tx.$$.fragment),Z8r=l(),ec=a("p"),e2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gJ=a("a"),o2r=o("from_pretrained()"),r2r=o(" class method or the "),hJ=a("a"),t2r=o("from_config()"),a2r=o(` class
method.`),n2r=l(),Mx=a("p"),s2r=o("This class cannot be instantiated directly using "),G6e=a("code"),l2r=o("__init__()"),i2r=o(" (throws an error)."),d2r=l(),$t=a("div"),F(Ex.$$.fragment),c2r=l(),O6e=a("p"),f2r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),m2r=l(),oc=a("p"),g2r=o(`Note:
Loading a model from its configuration file does `),V6e=a("strong"),h2r=o("not"),p2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),_2r=o("from_pretrained()"),u2r=o(" to load the model weights."),b2r=l(),F(s7.$$.fragment),v2r=l(),po=a("div"),F(Cx.$$.fragment),F2r=l(),X6e=a("p"),T2r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),M2r=l(),sn=a("p"),E2r=o("The model class to instantiate is selected based on the "),z6e=a("code"),C2r=o("model_type"),w2r=o(` property of the config object (either
passed as an argument or loaded from `),W6e=a("code"),A2r=o("pretrained_model_name_or_path"),L2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=a("code"),y2r=o("pretrained_model_name_or_path"),x2r=o(":"),$2r=l(),Le=a("ul"),l7=a("li"),U6e=a("strong"),k2r=o("data2vec-audio"),S2r=o(" \u2014 "),_J=a("a"),R2r=o("Data2VecAudioForCTC"),P2r=o(" (Data2VecAudio model)"),B2r=l(),i7=a("li"),H6e=a("strong"),I2r=o("hubert"),N2r=o(" \u2014 "),uJ=a("a"),q2r=o("HubertForCTC"),j2r=o(" (Hubert model)"),D2r=l(),d7=a("li"),J6e=a("strong"),G2r=o("mctct"),O2r=o(" \u2014 "),bJ=a("a"),V2r=o("MCTCTForCTC"),X2r=o(" (M-CTC-T model)"),z2r=l(),c7=a("li"),Y6e=a("strong"),W2r=o("sew"),Q2r=o(" \u2014 "),vJ=a("a"),U2r=o("SEWForCTC"),H2r=o(" (SEW model)"),J2r=l(),f7=a("li"),K6e=a("strong"),Y2r=o("sew-d"),K2r=o(" \u2014 "),FJ=a("a"),Z2r=o("SEWDForCTC"),ebr=o(" (SEW-D model)"),obr=l(),m7=a("li"),Z6e=a("strong"),rbr=o("unispeech"),tbr=o(" \u2014 "),TJ=a("a"),abr=o("UniSpeechForCTC"),nbr=o(" (UniSpeech model)"),sbr=l(),g7=a("li"),eTe=a("strong"),lbr=o("unispeech-sat"),ibr=o(" \u2014 "),MJ=a("a"),dbr=o("UniSpeechSatForCTC"),cbr=o(" (UniSpeechSat model)"),fbr=l(),h7=a("li"),oTe=a("strong"),mbr=o("wav2vec2"),gbr=o(" \u2014 "),EJ=a("a"),hbr=o("Wav2Vec2ForCTC"),pbr=o(" (Wav2Vec2 model)"),_br=l(),p7=a("li"),rTe=a("strong"),ubr=o("wav2vec2-conformer"),bbr=o(" \u2014 "),CJ=a("a"),vbr=o("Wav2Vec2ConformerForCTC"),Fbr=o(" (Wav2Vec2-Conformer model)"),Tbr=l(),_7=a("li"),tTe=a("strong"),Mbr=o("wavlm"),Ebr=o(" \u2014 "),wJ=a("a"),Cbr=o("WavLMForCTC"),wbr=o(" (WavLM model)"),Abr=l(),u7=a("p"),Lbr=o("The model is set in evaluation mode by default using "),aTe=a("code"),ybr=o("model.eval()"),xbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nTe=a("code"),$br=o("model.train()"),kbr=l(),F(b7.$$.fragment),YUe=l(),rc=a("h2"),v7=a("a"),sTe=a("span"),F(wx.$$.fragment),Sbr=l(),lTe=a("span"),Rbr=o("AutoModelForSpeechSeq2Seq"),KUe=l(),Yo=a("div"),F(Ax.$$.fragment),Pbr=l(),tc=a("p"),Bbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AJ=a("a"),Ibr=o("from_pretrained()"),Nbr=o(" class method or the "),LJ=a("a"),qbr=o("from_config()"),jbr=o(` class
method.`),Dbr=l(),Lx=a("p"),Gbr=o("This class cannot be instantiated directly using "),iTe=a("code"),Obr=o("__init__()"),Vbr=o(" (throws an error)."),Xbr=l(),kt=a("div"),F(yx.$$.fragment),zbr=l(),dTe=a("p"),Wbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Qbr=l(),ac=a("p"),Ubr=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),Hbr=o("not"),Jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" to load the model weights."),Zbr=l(),F(F7.$$.fragment),evr=l(),_o=a("div"),F(xx.$$.fragment),ovr=l(),fTe=a("p"),rvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tvr=l(),ln=a("p"),avr=o("The model class to instantiate is selected based on the "),mTe=a("code"),nvr=o("model_type"),svr=o(` property of the config object (either
passed as an argument or loaded from `),gTe=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(":"),fvr=l(),$x=a("ul"),T7=a("li"),pTe=a("strong"),mvr=o("speech-encoder-decoder"),gvr=o(" \u2014 "),xJ=a("a"),hvr=o("SpeechEncoderDecoderModel"),pvr=o(" (Speech Encoder decoder model)"),_vr=l(),M7=a("li"),_Te=a("strong"),uvr=o("speech_to_text"),bvr=o(" \u2014 "),$J=a("a"),vvr=o("Speech2TextForConditionalGeneration"),Fvr=o(" (Speech2Text model)"),Tvr=l(),E7=a("p"),Mvr=o("The model is set in evaluation mode by default using "),uTe=a("code"),Evr=o("model.eval()"),Cvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bTe=a("code"),wvr=o("model.train()"),Avr=l(),F(C7.$$.fragment),ZUe=l(),nc=a("h2"),w7=a("a"),vTe=a("span"),F(kx.$$.fragment),Lvr=l(),FTe=a("span"),yvr=o("AutoModelForAudioXVector"),eHe=l(),Ko=a("div"),F(Sx.$$.fragment),xvr=l(),sc=a("p"),$vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kJ=a("a"),kvr=o("from_pretrained()"),Svr=o(" class method or the "),SJ=a("a"),Rvr=o("from_config()"),Pvr=o(` class
method.`),Bvr=l(),Rx=a("p"),Ivr=o("This class cannot be instantiated directly using "),TTe=a("code"),Nvr=o("__init__()"),qvr=o(" (throws an error)."),jvr=l(),St=a("div"),F(Px.$$.fragment),Dvr=l(),MTe=a("p"),Gvr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ovr=l(),lc=a("p"),Vvr=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),Xvr=o("not"),zvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),Wvr=o("from_pretrained()"),Qvr=o(" to load the model weights."),Uvr=l(),F(A7.$$.fragment),Hvr=l(),uo=a("div"),F(Bx.$$.fragment),Jvr=l(),CTe=a("p"),Yvr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Kvr=l(),dn=a("p"),Zvr=o("The model class to instantiate is selected based on the "),wTe=a("code"),eFr=o("model_type"),oFr=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),aFr=o("pretrained_model_name_or_path"),nFr=o(":"),sFr=l(),lt=a("ul"),L7=a("li"),yTe=a("strong"),lFr=o("data2vec-audio"),iFr=o(" \u2014 "),PJ=a("a"),dFr=o("Data2VecAudioForXVector"),cFr=o(" (Data2VecAudio model)"),fFr=l(),y7=a("li"),xTe=a("strong"),mFr=o("unispeech-sat"),gFr=o(" \u2014 "),BJ=a("a"),hFr=o("UniSpeechSatForXVector"),pFr=o(" (UniSpeechSat model)"),_Fr=l(),x7=a("li"),$Te=a("strong"),uFr=o("wav2vec2"),bFr=o(" \u2014 "),IJ=a("a"),vFr=o("Wav2Vec2ForXVector"),FFr=o(" (Wav2Vec2 model)"),TFr=l(),$7=a("li"),kTe=a("strong"),MFr=o("wav2vec2-conformer"),EFr=o(" \u2014 "),NJ=a("a"),CFr=o("Wav2Vec2ConformerForXVector"),wFr=o(" (Wav2Vec2-Conformer model)"),AFr=l(),k7=a("li"),STe=a("strong"),LFr=o("wavlm"),yFr=o(" \u2014 "),qJ=a("a"),xFr=o("WavLMForXVector"),$Fr=o(" (WavLM model)"),kFr=l(),S7=a("p"),SFr=o("The model is set in evaluation mode by default using "),RTe=a("code"),RFr=o("model.eval()"),PFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=a("code"),BFr=o("model.train()"),IFr=l(),F(R7.$$.fragment),oHe=l(),ic=a("h2"),P7=a("a"),BTe=a("span"),F(Ix.$$.fragment),NFr=l(),ITe=a("span"),qFr=o("AutoModelForMaskedImageModeling"),rHe=l(),Zo=a("div"),F(Nx.$$.fragment),jFr=l(),dc=a("p"),DFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jJ=a("a"),GFr=o("from_pretrained()"),OFr=o(" class method or the "),DJ=a("a"),VFr=o("from_config()"),XFr=o(` class
method.`),zFr=l(),qx=a("p"),WFr=o("This class cannot be instantiated directly using "),NTe=a("code"),QFr=o("__init__()"),UFr=o(" (throws an error)."),HFr=l(),Rt=a("div"),F(jx.$$.fragment),JFr=l(),qTe=a("p"),YFr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),KFr=l(),cc=a("p"),ZFr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),e6r=o("not"),o6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),r6r=o("from_pretrained()"),t6r=o(" to load the model weights."),a6r=l(),F(B7.$$.fragment),n6r=l(),bo=a("div"),F(Dx.$$.fragment),s6r=l(),DTe=a("p"),l6r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),i6r=l(),cn=a("p"),d6r=o("The model class to instantiate is selected based on the "),GTe=a("code"),c6r=o("model_type"),f6r=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),m6r=o("pretrained_model_name_or_path"),g6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(":"),_6r=l(),fn=a("ul"),I7=a("li"),XTe=a("strong"),u6r=o("deit"),b6r=o(" \u2014 "),OJ=a("a"),v6r=o("DeiTForMaskedImageModeling"),F6r=o(" (DeiT model)"),T6r=l(),N7=a("li"),zTe=a("strong"),M6r=o("swin"),E6r=o(" \u2014 "),VJ=a("a"),C6r=o("SwinForMaskedImageModeling"),w6r=o(" (Swin Transformer model)"),A6r=l(),q7=a("li"),WTe=a("strong"),L6r=o("swinv2"),y6r=o(" \u2014 "),XJ=a("a"),x6r=o("Swinv2ForMaskedImageModeling"),$6r=o(" (Swin Transformer V2 model)"),k6r=l(),j7=a("li"),QTe=a("strong"),S6r=o("vit"),R6r=o(" \u2014 "),zJ=a("a"),P6r=o("ViTForMaskedImageModeling"),B6r=o(" (ViT model)"),I6r=l(),D7=a("p"),N6r=o("The model is set in evaluation mode by default using "),UTe=a("code"),q6r=o("model.eval()"),j6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HTe=a("code"),D6r=o("model.train()"),G6r=l(),F(G7.$$.fragment),tHe=l(),fc=a("h2"),O7=a("a"),JTe=a("span"),F(Gx.$$.fragment),O6r=l(),YTe=a("span"),V6r=o("AutoModelForObjectDetection"),aHe=l(),er=a("div"),F(Ox.$$.fragment),X6r=l(),mc=a("p"),z6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),WJ=a("a"),W6r=o("from_pretrained()"),Q6r=o(" class method or the "),QJ=a("a"),U6r=o("from_config()"),H6r=o(` class
method.`),J6r=l(),Vx=a("p"),Y6r=o("This class cannot be instantiated directly using "),KTe=a("code"),K6r=o("__init__()"),Z6r=o(" (throws an error)."),eTr=l(),Pt=a("div"),F(Xx.$$.fragment),oTr=l(),ZTe=a("p"),rTr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tTr=l(),gc=a("p"),aTr=o(`Note:
Loading a model from its configuration file does `),e7e=a("strong"),nTr=o("not"),sTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),lTr=o("from_pretrained()"),iTr=o(" to load the model weights."),dTr=l(),F(V7.$$.fragment),cTr=l(),vo=a("div"),F(zx.$$.fragment),fTr=l(),o7e=a("p"),mTr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gTr=l(),mn=a("p"),hTr=o("The model class to instantiate is selected based on the "),r7e=a("code"),pTr=o("model_type"),_Tr=o(` property of the config object (either
passed as an argument or loaded from `),t7e=a("code"),uTr=o("pretrained_model_name_or_path"),bTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=a("code"),vTr=o("pretrained_model_name_or_path"),FTr=o(":"),TTr=l(),Wx=a("ul"),X7=a("li"),n7e=a("strong"),MTr=o("detr"),ETr=o(" \u2014 "),HJ=a("a"),CTr=o("DetrForObjectDetection"),wTr=o(" (DETR model)"),ATr=l(),z7=a("li"),s7e=a("strong"),LTr=o("yolos"),yTr=o(" \u2014 "),JJ=a("a"),xTr=o("YolosForObjectDetection"),$Tr=o(" (YOLOS model)"),kTr=l(),W7=a("p"),STr=o("The model is set in evaluation mode by default using "),l7e=a("code"),RTr=o("model.eval()"),PTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i7e=a("code"),BTr=o("model.train()"),ITr=l(),F(Q7.$$.fragment),nHe=l(),hc=a("h2"),U7=a("a"),d7e=a("span"),F(Qx.$$.fragment),NTr=l(),c7e=a("span"),qTr=o("AutoModelForImageSegmentation"),sHe=l(),or=a("div"),F(Ux.$$.fragment),jTr=l(),pc=a("p"),DTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YJ=a("a"),GTr=o("from_pretrained()"),OTr=o(" class method or the "),KJ=a("a"),VTr=o("from_config()"),XTr=o(` class
method.`),zTr=l(),Hx=a("p"),WTr=o("This class cannot be instantiated directly using "),f7e=a("code"),QTr=o("__init__()"),UTr=o(" (throws an error)."),HTr=l(),Bt=a("div"),F(Jx.$$.fragment),JTr=l(),m7e=a("p"),YTr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),KTr=l(),_c=a("p"),ZTr=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),e7r=o("not"),o7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),r7r=o("from_pretrained()"),t7r=o(" to load the model weights."),a7r=l(),F(H7.$$.fragment),n7r=l(),Fo=a("div"),F(Yx.$$.fragment),s7r=l(),h7e=a("p"),l7r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),i7r=l(),gn=a("p"),d7r=o("The model class to instantiate is selected based on the "),p7e=a("code"),c7r=o("model_type"),f7r=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),m7r=o("pretrained_model_name_or_path"),g7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),h7r=o("pretrained_model_name_or_path"),p7r=o(":"),_7r=l(),b7e=a("ul"),J7=a("li"),v7e=a("strong"),u7r=o("detr"),b7r=o(" \u2014 "),eY=a("a"),v7r=o("DetrForSegmentation"),F7r=o(" (DETR model)"),T7r=l(),Y7=a("p"),M7r=o("The model is set in evaluation mode by default using "),F7e=a("code"),E7r=o("model.eval()"),C7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T7e=a("code"),w7r=o("model.train()"),A7r=l(),F(K7.$$.fragment),lHe=l(),uc=a("h2"),Z7=a("a"),M7e=a("span"),F(Kx.$$.fragment),L7r=l(),E7e=a("span"),y7r=o("AutoModelForSemanticSegmentation"),iHe=l(),rr=a("div"),F(Zx.$$.fragment),x7r=l(),bc=a("p"),$7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oY=a("a"),k7r=o("from_pretrained()"),S7r=o(" class method or the "),rY=a("a"),R7r=o("from_config()"),P7r=o(` class
method.`),B7r=l(),e$=a("p"),I7r=o("This class cannot be instantiated directly using "),C7e=a("code"),N7r=o("__init__()"),q7r=o(" (throws an error)."),j7r=l(),It=a("div"),F(o$.$$.fragment),D7r=l(),w7e=a("p"),G7r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),O7r=l(),vc=a("p"),V7r=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),X7r=o("not"),z7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),W7r=o("from_pretrained()"),Q7r=o(" to load the model weights."),U7r=l(),F(eM.$$.fragment),H7r=l(),To=a("div"),F(r$.$$.fragment),J7r=l(),L7e=a("p"),Y7r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),K7r=l(),hn=a("p"),Z7r=o("The model class to instantiate is selected based on the "),y7e=a("code"),eMr=o("model_type"),oMr=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),aMr=o("pretrained_model_name_or_path"),nMr=o(":"),sMr=l(),it=a("ul"),oM=a("li"),k7e=a("strong"),lMr=o("beit"),iMr=o(" \u2014 "),aY=a("a"),dMr=o("BeitForSemanticSegmentation"),cMr=o(" (BEiT model)"),fMr=l(),rM=a("li"),S7e=a("strong"),mMr=o("data2vec-vision"),gMr=o(" \u2014 "),nY=a("a"),hMr=o("Data2VecVisionForSemanticSegmentation"),pMr=o(" (Data2VecVision model)"),_Mr=l(),tM=a("li"),R7e=a("strong"),uMr=o("dpt"),bMr=o(" \u2014 "),sY=a("a"),vMr=o("DPTForSemanticSegmentation"),FMr=o(" (DPT model)"),TMr=l(),aM=a("li"),P7e=a("strong"),MMr=o("mobilevit"),EMr=o(" \u2014 "),lY=a("a"),CMr=o("MobileViTForSemanticSegmentation"),wMr=o(" (MobileViT model)"),AMr=l(),nM=a("li"),B7e=a("strong"),LMr=o("segformer"),yMr=o(" \u2014 "),iY=a("a"),xMr=o("SegformerForSemanticSegmentation"),$Mr=o(" (SegFormer model)"),kMr=l(),sM=a("p"),SMr=o("The model is set in evaluation mode by default using "),I7e=a("code"),RMr=o("model.eval()"),PMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N7e=a("code"),BMr=o("model.train()"),IMr=l(),F(lM.$$.fragment),dHe=l(),Fc=a("h2"),iM=a("a"),q7e=a("span"),F(t$.$$.fragment),NMr=l(),j7e=a("span"),qMr=o("AutoModelForInstanceSegmentation"),cHe=l(),tr=a("div"),F(a$.$$.fragment),jMr=l(),Tc=a("p"),DMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),dY=a("a"),GMr=o("from_pretrained()"),OMr=o(" class method or the "),cY=a("a"),VMr=o("from_config()"),XMr=o(` class
method.`),zMr=l(),n$=a("p"),WMr=o("This class cannot be instantiated directly using "),D7e=a("code"),QMr=o("__init__()"),UMr=o(" (throws an error)."),HMr=l(),Nt=a("div"),F(s$.$$.fragment),JMr=l(),G7e=a("p"),YMr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),KMr=l(),Mc=a("p"),ZMr=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),eEr=o("not"),oEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),rEr=o("from_pretrained()"),tEr=o(" to load the model weights."),aEr=l(),F(dM.$$.fragment),nEr=l(),Mo=a("div"),F(l$.$$.fragment),sEr=l(),V7e=a("p"),lEr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),iEr=l(),pn=a("p"),dEr=o("The model class to instantiate is selected based on the "),X7e=a("code"),cEr=o("model_type"),fEr=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),mEr=o("pretrained_model_name_or_path"),gEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=a("code"),hEr=o("pretrained_model_name_or_path"),pEr=o(":"),_Er=l(),Q7e=a("ul"),cM=a("li"),U7e=a("strong"),uEr=o("maskformer"),bEr=o(" \u2014 "),mY=a("a"),vEr=o("MaskFormerForInstanceSegmentation"),FEr=o(" (MaskFormer model)"),TEr=l(),fM=a("p"),MEr=o("The model is set in evaluation mode by default using "),H7e=a("code"),EEr=o("model.eval()"),CEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J7e=a("code"),wEr=o("model.train()"),AEr=l(),F(mM.$$.fragment),fHe=l(),Ec=a("h2"),gM=a("a"),Y7e=a("span"),F(i$.$$.fragment),LEr=l(),K7e=a("span"),yEr=o("TFAutoModel"),mHe=l(),ar=a("div"),F(d$.$$.fragment),xEr=l(),Cc=a("p"),$Er=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gY=a("a"),kEr=o("from_pretrained()"),SEr=o(" class method or the "),hY=a("a"),REr=o("from_config()"),PEr=o(` class
method.`),BEr=l(),c$=a("p"),IEr=o("This class cannot be instantiated directly using "),Z7e=a("code"),NEr=o("__init__()"),qEr=o(" (throws an error)."),jEr=l(),qt=a("div"),F(f$.$$.fragment),DEr=l(),eMe=a("p"),GEr=o("Instantiates one of the base model classes of the library from a configuration."),OEr=l(),wc=a("p"),VEr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),XEr=o("not"),zEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),WEr=o("from_pretrained()"),QEr=o(" to load the model weights."),UEr=l(),F(hM.$$.fragment),HEr=l(),Rr=a("div"),F(m$.$$.fragment),JEr=l(),rMe=a("p"),YEr=o("Instantiate one of the base model classes of the library from a pretrained model."),KEr=l(),_n=a("p"),ZEr=o("The model class to instantiate is selected based on the "),tMe=a("code"),e4r=o("model_type"),o4r=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),r4r=o("pretrained_model_name_or_path"),t4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(":"),s4r=l(),q=a("ul"),pM=a("li"),sMe=a("strong"),l4r=o("albert"),i4r=o(" \u2014 "),_Y=a("a"),d4r=o("TFAlbertModel"),c4r=o(" (ALBERT model)"),f4r=l(),_M=a("li"),lMe=a("strong"),m4r=o("bart"),g4r=o(" \u2014 "),uY=a("a"),h4r=o("TFBartModel"),p4r=o(" (BART model)"),_4r=l(),uM=a("li"),iMe=a("strong"),u4r=o("bert"),b4r=o(" \u2014 "),bY=a("a"),v4r=o("TFBertModel"),F4r=o(" (BERT model)"),T4r=l(),bM=a("li"),dMe=a("strong"),M4r=o("blenderbot"),E4r=o(" \u2014 "),vY=a("a"),C4r=o("TFBlenderbotModel"),w4r=o(" (Blenderbot model)"),A4r=l(),vM=a("li"),cMe=a("strong"),L4r=o("blenderbot-small"),y4r=o(" \u2014 "),FY=a("a"),x4r=o("TFBlenderbotSmallModel"),$4r=o(" (BlenderbotSmall model)"),k4r=l(),FM=a("li"),fMe=a("strong"),S4r=o("camembert"),R4r=o(" \u2014 "),TY=a("a"),P4r=o("TFCamembertModel"),B4r=o(" (CamemBERT model)"),I4r=l(),TM=a("li"),mMe=a("strong"),N4r=o("clip"),q4r=o(" \u2014 "),MY=a("a"),j4r=o("TFCLIPModel"),D4r=o(" (CLIP model)"),G4r=l(),MM=a("li"),gMe=a("strong"),O4r=o("convbert"),V4r=o(" \u2014 "),EY=a("a"),X4r=o("TFConvBertModel"),z4r=o(" (ConvBERT model)"),W4r=l(),EM=a("li"),hMe=a("strong"),Q4r=o("convnext"),U4r=o(" \u2014 "),CY=a("a"),H4r=o("TFConvNextModel"),J4r=o(" (ConvNeXT model)"),Y4r=l(),CM=a("li"),pMe=a("strong"),K4r=o("ctrl"),Z4r=o(" \u2014 "),wY=a("a"),eCr=o("TFCTRLModel"),oCr=o(" (CTRL model)"),rCr=l(),wM=a("li"),_Me=a("strong"),tCr=o("data2vec-vision"),aCr=o(" \u2014 "),AY=a("a"),nCr=o("TFData2VecVisionModel"),sCr=o(" (Data2VecVision model)"),lCr=l(),AM=a("li"),uMe=a("strong"),iCr=o("deberta"),dCr=o(" \u2014 "),LY=a("a"),cCr=o("TFDebertaModel"),fCr=o(" (DeBERTa model)"),mCr=l(),LM=a("li"),bMe=a("strong"),gCr=o("deberta-v2"),hCr=o(" \u2014 "),yY=a("a"),pCr=o("TFDebertaV2Model"),_Cr=o(" (DeBERTa-v2 model)"),uCr=l(),yM=a("li"),vMe=a("strong"),bCr=o("deit"),vCr=o(" \u2014 "),xY=a("a"),FCr=o("TFDeiTModel"),TCr=o(" (DeiT model)"),MCr=l(),xM=a("li"),FMe=a("strong"),ECr=o("distilbert"),CCr=o(" \u2014 "),$Y=a("a"),wCr=o("TFDistilBertModel"),ACr=o(" (DistilBERT model)"),LCr=l(),$M=a("li"),TMe=a("strong"),yCr=o("dpr"),xCr=o(" \u2014 "),kY=a("a"),$Cr=o("TFDPRQuestionEncoder"),kCr=o(" (DPR model)"),SCr=l(),kM=a("li"),MMe=a("strong"),RCr=o("electra"),PCr=o(" \u2014 "),SY=a("a"),BCr=o("TFElectraModel"),ICr=o(" (ELECTRA model)"),NCr=l(),SM=a("li"),EMe=a("strong"),qCr=o("flaubert"),jCr=o(" \u2014 "),RY=a("a"),DCr=o("TFFlaubertModel"),GCr=o(" (FlauBERT model)"),OCr=l(),il=a("li"),CMe=a("strong"),VCr=o("funnel"),XCr=o(" \u2014 "),PY=a("a"),zCr=o("TFFunnelModel"),WCr=o(" or "),BY=a("a"),QCr=o("TFFunnelBaseModel"),UCr=o(" (Funnel Transformer model)"),HCr=l(),RM=a("li"),wMe=a("strong"),JCr=o("gpt2"),YCr=o(" \u2014 "),IY=a("a"),KCr=o("TFGPT2Model"),ZCr=o(" (OpenAI GPT-2 model)"),e3r=l(),PM=a("li"),AMe=a("strong"),o3r=o("gptj"),r3r=o(" \u2014 "),NY=a("a"),t3r=o("TFGPTJModel"),a3r=o(" (GPT-J model)"),n3r=l(),BM=a("li"),LMe=a("strong"),s3r=o("hubert"),l3r=o(" \u2014 "),qY=a("a"),i3r=o("TFHubertModel"),d3r=o(" (Hubert model)"),c3r=l(),IM=a("li"),yMe=a("strong"),f3r=o("layoutlm"),m3r=o(" \u2014 "),jY=a("a"),g3r=o("TFLayoutLMModel"),h3r=o(" (LayoutLM model)"),p3r=l(),NM=a("li"),xMe=a("strong"),_3r=o("layoutlmv3"),u3r=o(" \u2014 "),DY=a("a"),b3r=o("TFLayoutLMv3Model"),v3r=o(" (LayoutLMv3 model)"),F3r=l(),qM=a("li"),$Me=a("strong"),T3r=o("led"),M3r=o(" \u2014 "),GY=a("a"),E3r=o("TFLEDModel"),C3r=o(" (LED model)"),w3r=l(),jM=a("li"),kMe=a("strong"),A3r=o("longformer"),L3r=o(" \u2014 "),OY=a("a"),y3r=o("TFLongformerModel"),x3r=o(" (Longformer model)"),$3r=l(),DM=a("li"),SMe=a("strong"),k3r=o("lxmert"),S3r=o(" \u2014 "),VY=a("a"),R3r=o("TFLxmertModel"),P3r=o(" (LXMERT model)"),B3r=l(),GM=a("li"),RMe=a("strong"),I3r=o("marian"),N3r=o(" \u2014 "),XY=a("a"),q3r=o("TFMarianModel"),j3r=o(" (Marian model)"),D3r=l(),OM=a("li"),PMe=a("strong"),G3r=o("mbart"),O3r=o(" \u2014 "),zY=a("a"),V3r=o("TFMBartModel"),X3r=o(" (mBART model)"),z3r=l(),VM=a("li"),BMe=a("strong"),W3r=o("mobilebert"),Q3r=o(" \u2014 "),WY=a("a"),U3r=o("TFMobileBertModel"),H3r=o(" (MobileBERT model)"),J3r=l(),XM=a("li"),IMe=a("strong"),Y3r=o("mpnet"),K3r=o(" \u2014 "),QY=a("a"),Z3r=o("TFMPNetModel"),e5r=o(" (MPNet model)"),o5r=l(),zM=a("li"),NMe=a("strong"),r5r=o("mt5"),t5r=o(" \u2014 "),UY=a("a"),a5r=o("TFMT5Model"),n5r=o(" (MT5 model)"),s5r=l(),WM=a("li"),qMe=a("strong"),l5r=o("openai-gpt"),i5r=o(" \u2014 "),HY=a("a"),d5r=o("TFOpenAIGPTModel"),c5r=o(" (OpenAI GPT model)"),f5r=l(),QM=a("li"),jMe=a("strong"),m5r=o("opt"),g5r=o(" \u2014 "),JY=a("a"),h5r=o("TFOPTModel"),p5r=o(" (OPT model)"),_5r=l(),UM=a("li"),DMe=a("strong"),u5r=o("pegasus"),b5r=o(" \u2014 "),YY=a("a"),v5r=o("TFPegasusModel"),F5r=o(" (Pegasus model)"),T5r=l(),HM=a("li"),GMe=a("strong"),M5r=o("regnet"),E5r=o(" \u2014 "),KY=a("a"),C5r=o("TFRegNetModel"),w5r=o(" (RegNet model)"),A5r=l(),JM=a("li"),OMe=a("strong"),L5r=o("rembert"),y5r=o(" \u2014 "),ZY=a("a"),x5r=o("TFRemBertModel"),$5r=o(" (RemBERT model)"),k5r=l(),YM=a("li"),VMe=a("strong"),S5r=o("resnet"),R5r=o(" \u2014 "),eK=a("a"),P5r=o("TFResNetModel"),B5r=o(" (ResNet model)"),I5r=l(),KM=a("li"),XMe=a("strong"),N5r=o("roberta"),q5r=o(" \u2014 "),oK=a("a"),j5r=o("TFRobertaModel"),D5r=o(" (RoBERTa model)"),G5r=l(),ZM=a("li"),zMe=a("strong"),O5r=o("roformer"),V5r=o(" \u2014 "),rK=a("a"),X5r=o("TFRoFormerModel"),z5r=o(" (RoFormer model)"),W5r=l(),eE=a("li"),WMe=a("strong"),Q5r=o("segformer"),U5r=o(" \u2014 "),tK=a("a"),H5r=o("TFSegformerModel"),J5r=o(" (SegFormer model)"),Y5r=l(),oE=a("li"),QMe=a("strong"),K5r=o("speech_to_text"),Z5r=o(" \u2014 "),aK=a("a"),e0r=o("TFSpeech2TextModel"),o0r=o(" (Speech2Text model)"),r0r=l(),rE=a("li"),UMe=a("strong"),t0r=o("swin"),a0r=o(" \u2014 "),nK=a("a"),n0r=o("TFSwinModel"),s0r=o(" (Swin Transformer model)"),l0r=l(),tE=a("li"),HMe=a("strong"),i0r=o("t5"),d0r=o(" \u2014 "),sK=a("a"),c0r=o("TFT5Model"),f0r=o(" (T5 model)"),m0r=l(),aE=a("li"),JMe=a("strong"),g0r=o("tapas"),h0r=o(" \u2014 "),lK=a("a"),p0r=o("TFTapasModel"),_0r=o(" (TAPAS model)"),u0r=l(),nE=a("li"),YMe=a("strong"),b0r=o("transfo-xl"),v0r=o(" \u2014 "),iK=a("a"),F0r=o("TFTransfoXLModel"),T0r=o(" (Transformer-XL model)"),M0r=l(),sE=a("li"),KMe=a("strong"),E0r=o("vit"),C0r=o(" \u2014 "),dK=a("a"),w0r=o("TFViTModel"),A0r=o(" (ViT model)"),L0r=l(),lE=a("li"),ZMe=a("strong"),y0r=o("vit_mae"),x0r=o(" \u2014 "),cK=a("a"),$0r=o("TFViTMAEModel"),k0r=o(" (ViTMAE model)"),S0r=l(),iE=a("li"),eEe=a("strong"),R0r=o("wav2vec2"),P0r=o(" \u2014 "),fK=a("a"),B0r=o("TFWav2Vec2Model"),I0r=o(" (Wav2Vec2 model)"),N0r=l(),dE=a("li"),oEe=a("strong"),q0r=o("xlm"),j0r=o(" \u2014 "),mK=a("a"),D0r=o("TFXLMModel"),G0r=o(" (XLM model)"),O0r=l(),cE=a("li"),rEe=a("strong"),V0r=o("xlm-roberta"),X0r=o(" \u2014 "),gK=a("a"),z0r=o("TFXLMRobertaModel"),W0r=o(" (XLM-RoBERTa model)"),Q0r=l(),fE=a("li"),tEe=a("strong"),U0r=o("xlnet"),H0r=o(" \u2014 "),hK=a("a"),J0r=o("TFXLNetModel"),Y0r=o(" (XLNet model)"),K0r=l(),F(mE.$$.fragment),gHe=l(),Ac=a("h2"),gE=a("a"),aEe=a("span"),F(g$.$$.fragment),Z0r=l(),nEe=a("span"),ewr=o("TFAutoModelForPreTraining"),hHe=l(),nr=a("div"),F(h$.$$.fragment),owr=l(),Lc=a("p"),rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pK=a("a"),twr=o("from_pretrained()"),awr=o(" class method or the "),_K=a("a"),nwr=o("from_config()"),swr=o(` class
method.`),lwr=l(),p$=a("p"),iwr=o("This class cannot be instantiated directly using "),sEe=a("code"),dwr=o("__init__()"),cwr=o(" (throws an error)."),fwr=l(),jt=a("div"),F(_$.$$.fragment),mwr=l(),lEe=a("p"),gwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hwr=l(),yc=a("p"),pwr=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),_wr=o("not"),uwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),bwr=o("from_pretrained()"),vwr=o(" to load the model weights."),Fwr=l(),F(hE.$$.fragment),Twr=l(),Pr=a("div"),F(u$.$$.fragment),Mwr=l(),dEe=a("p"),Ewr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cwr=l(),un=a("p"),wwr=o("The model class to instantiate is selected based on the "),cEe=a("code"),Awr=o("model_type"),Lwr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),ywr=o("pretrained_model_name_or_path"),xwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),$wr=o("pretrained_model_name_or_path"),kwr=o(":"),Swr=l(),se=a("ul"),pE=a("li"),gEe=a("strong"),Rwr=o("albert"),Pwr=o(" \u2014 "),bK=a("a"),Bwr=o("TFAlbertForPreTraining"),Iwr=o(" (ALBERT model)"),Nwr=l(),_E=a("li"),hEe=a("strong"),qwr=o("bart"),jwr=o(" \u2014 "),vK=a("a"),Dwr=o("TFBartForConditionalGeneration"),Gwr=o(" (BART model)"),Owr=l(),uE=a("li"),pEe=a("strong"),Vwr=o("bert"),Xwr=o(" \u2014 "),FK=a("a"),zwr=o("TFBertForPreTraining"),Wwr=o(" (BERT model)"),Qwr=l(),bE=a("li"),_Ee=a("strong"),Uwr=o("camembert"),Hwr=o(" \u2014 "),TK=a("a"),Jwr=o("TFCamembertForMaskedLM"),Ywr=o(" (CamemBERT model)"),Kwr=l(),vE=a("li"),uEe=a("strong"),Zwr=o("ctrl"),eAr=o(" \u2014 "),MK=a("a"),oAr=o("TFCTRLLMHeadModel"),rAr=o(" (CTRL model)"),tAr=l(),FE=a("li"),bEe=a("strong"),aAr=o("distilbert"),nAr=o(" \u2014 "),EK=a("a"),sAr=o("TFDistilBertForMaskedLM"),lAr=o(" (DistilBERT model)"),iAr=l(),TE=a("li"),vEe=a("strong"),dAr=o("electra"),cAr=o(" \u2014 "),CK=a("a"),fAr=o("TFElectraForPreTraining"),mAr=o(" (ELECTRA model)"),gAr=l(),ME=a("li"),FEe=a("strong"),hAr=o("flaubert"),pAr=o(" \u2014 "),wK=a("a"),_Ar=o("TFFlaubertWithLMHeadModel"),uAr=o(" (FlauBERT model)"),bAr=l(),EE=a("li"),TEe=a("strong"),vAr=o("funnel"),FAr=o(" \u2014 "),AK=a("a"),TAr=o("TFFunnelForPreTraining"),MAr=o(" (Funnel Transformer model)"),EAr=l(),CE=a("li"),MEe=a("strong"),CAr=o("gpt2"),wAr=o(" \u2014 "),LK=a("a"),AAr=o("TFGPT2LMHeadModel"),LAr=o(" (OpenAI GPT-2 model)"),yAr=l(),wE=a("li"),EEe=a("strong"),xAr=o("layoutlm"),$Ar=o(" \u2014 "),yK=a("a"),kAr=o("TFLayoutLMForMaskedLM"),SAr=o(" (LayoutLM model)"),RAr=l(),AE=a("li"),CEe=a("strong"),PAr=o("lxmert"),BAr=o(" \u2014 "),xK=a("a"),IAr=o("TFLxmertForPreTraining"),NAr=o(" (LXMERT model)"),qAr=l(),LE=a("li"),wEe=a("strong"),jAr=o("mobilebert"),DAr=o(" \u2014 "),$K=a("a"),GAr=o("TFMobileBertForPreTraining"),OAr=o(" (MobileBERT model)"),VAr=l(),yE=a("li"),AEe=a("strong"),XAr=o("mpnet"),zAr=o(" \u2014 "),kK=a("a"),WAr=o("TFMPNetForMaskedLM"),QAr=o(" (MPNet model)"),UAr=l(),xE=a("li"),LEe=a("strong"),HAr=o("openai-gpt"),JAr=o(" \u2014 "),SK=a("a"),YAr=o("TFOpenAIGPTLMHeadModel"),KAr=o(" (OpenAI GPT model)"),ZAr=l(),$E=a("li"),yEe=a("strong"),eLr=o("roberta"),oLr=o(" \u2014 "),RK=a("a"),rLr=o("TFRobertaForMaskedLM"),tLr=o(" (RoBERTa model)"),aLr=l(),kE=a("li"),xEe=a("strong"),nLr=o("t5"),sLr=o(" \u2014 "),PK=a("a"),lLr=o("TFT5ForConditionalGeneration"),iLr=o(" (T5 model)"),dLr=l(),SE=a("li"),$Ee=a("strong"),cLr=o("tapas"),fLr=o(" \u2014 "),BK=a("a"),mLr=o("TFTapasForMaskedLM"),gLr=o(" (TAPAS model)"),hLr=l(),RE=a("li"),kEe=a("strong"),pLr=o("transfo-xl"),_Lr=o(" \u2014 "),IK=a("a"),uLr=o("TFTransfoXLLMHeadModel"),bLr=o(" (Transformer-XL model)"),vLr=l(),PE=a("li"),SEe=a("strong"),FLr=o("vit_mae"),TLr=o(" \u2014 "),NK=a("a"),MLr=o("TFViTMAEForPreTraining"),ELr=o(" (ViTMAE model)"),CLr=l(),BE=a("li"),REe=a("strong"),wLr=o("xlm"),ALr=o(" \u2014 "),qK=a("a"),LLr=o("TFXLMWithLMHeadModel"),yLr=o(" (XLM model)"),xLr=l(),IE=a("li"),PEe=a("strong"),$Lr=o("xlm-roberta"),kLr=o(" \u2014 "),jK=a("a"),SLr=o("TFXLMRobertaForMaskedLM"),RLr=o(" (XLM-RoBERTa model)"),PLr=l(),NE=a("li"),BEe=a("strong"),BLr=o("xlnet"),ILr=o(" \u2014 "),DK=a("a"),NLr=o("TFXLNetLMHeadModel"),qLr=o(" (XLNet model)"),jLr=l(),F(qE.$$.fragment),pHe=l(),xc=a("h2"),jE=a("a"),IEe=a("span"),F(b$.$$.fragment),DLr=l(),NEe=a("span"),GLr=o("TFAutoModelForCausalLM"),_He=l(),sr=a("div"),F(v$.$$.fragment),OLr=l(),$c=a("p"),VLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GK=a("a"),XLr=o("from_pretrained()"),zLr=o(" class method or the "),OK=a("a"),WLr=o("from_config()"),QLr=o(` class
method.`),ULr=l(),F$=a("p"),HLr=o("This class cannot be instantiated directly using "),qEe=a("code"),JLr=o("__init__()"),YLr=o(" (throws an error)."),KLr=l(),Dt=a("div"),F(T$.$$.fragment),ZLr=l(),jEe=a("p"),eyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oyr=l(),kc=a("p"),ryr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),tyr=o("not"),ayr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),nyr=o("from_pretrained()"),syr=o(" to load the model weights."),lyr=l(),F(DE.$$.fragment),iyr=l(),Br=a("div"),F(M$.$$.fragment),dyr=l(),GEe=a("p"),cyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fyr=l(),bn=a("p"),myr=o("The model class to instantiate is selected based on the "),OEe=a("code"),gyr=o("model_type"),hyr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),pyr=o("pretrained_model_name_or_path"),_yr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),uyr=o("pretrained_model_name_or_path"),byr=o(":"),vyr=l(),Me=a("ul"),GE=a("li"),zEe=a("strong"),Fyr=o("bert"),Tyr=o(" \u2014 "),XK=a("a"),Myr=o("TFBertLMHeadModel"),Eyr=o(" (BERT model)"),Cyr=l(),OE=a("li"),WEe=a("strong"),wyr=o("camembert"),Ayr=o(" \u2014 "),zK=a("a"),Lyr=o("TFCamembertForCausalLM"),yyr=o(" (CamemBERT model)"),xyr=l(),VE=a("li"),QEe=a("strong"),$yr=o("ctrl"),kyr=o(" \u2014 "),WK=a("a"),Syr=o("TFCTRLLMHeadModel"),Ryr=o(" (CTRL model)"),Pyr=l(),XE=a("li"),UEe=a("strong"),Byr=o("gpt2"),Iyr=o(" \u2014 "),QK=a("a"),Nyr=o("TFGPT2LMHeadModel"),qyr=o(" (OpenAI GPT-2 model)"),jyr=l(),zE=a("li"),HEe=a("strong"),Dyr=o("gptj"),Gyr=o(" \u2014 "),UK=a("a"),Oyr=o("TFGPTJForCausalLM"),Vyr=o(" (GPT-J model)"),Xyr=l(),WE=a("li"),JEe=a("strong"),zyr=o("openai-gpt"),Wyr=o(" \u2014 "),HK=a("a"),Qyr=o("TFOpenAIGPTLMHeadModel"),Uyr=o(" (OpenAI GPT model)"),Hyr=l(),QE=a("li"),YEe=a("strong"),Jyr=o("opt"),Yyr=o(" \u2014 "),JK=a("a"),Kyr=o("TFOPTForCausalLM"),Zyr=o(" (OPT model)"),e9r=l(),UE=a("li"),KEe=a("strong"),o9r=o("rembert"),r9r=o(" \u2014 "),YK=a("a"),t9r=o("TFRemBertForCausalLM"),a9r=o(" (RemBERT model)"),n9r=l(),HE=a("li"),ZEe=a("strong"),s9r=o("roberta"),l9r=o(" \u2014 "),KK=a("a"),i9r=o("TFRobertaForCausalLM"),d9r=o(" (RoBERTa model)"),c9r=l(),JE=a("li"),e4e=a("strong"),f9r=o("roformer"),m9r=o(" \u2014 "),ZK=a("a"),g9r=o("TFRoFormerForCausalLM"),h9r=o(" (RoFormer model)"),p9r=l(),YE=a("li"),o4e=a("strong"),_9r=o("transfo-xl"),u9r=o(" \u2014 "),eZ=a("a"),b9r=o("TFTransfoXLLMHeadModel"),v9r=o(" (Transformer-XL model)"),F9r=l(),KE=a("li"),r4e=a("strong"),T9r=o("xlm"),M9r=o(" \u2014 "),oZ=a("a"),E9r=o("TFXLMWithLMHeadModel"),C9r=o(" (XLM model)"),w9r=l(),ZE=a("li"),t4e=a("strong"),A9r=o("xlnet"),L9r=o(" \u2014 "),rZ=a("a"),y9r=o("TFXLNetLMHeadModel"),x9r=o(" (XLNet model)"),$9r=l(),F(e4.$$.fragment),uHe=l(),Sc=a("h2"),o4=a("a"),a4e=a("span"),F(E$.$$.fragment),k9r=l(),n4e=a("span"),S9r=o("TFAutoModelForImageClassification"),bHe=l(),lr=a("div"),F(C$.$$.fragment),R9r=l(),Rc=a("p"),P9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tZ=a("a"),B9r=o("from_pretrained()"),I9r=o(" class method or the "),aZ=a("a"),N9r=o("from_config()"),q9r=o(` class
method.`),j9r=l(),w$=a("p"),D9r=o("This class cannot be instantiated directly using "),s4e=a("code"),G9r=o("__init__()"),O9r=o(" (throws an error)."),V9r=l(),Gt=a("div"),F(A$.$$.fragment),X9r=l(),l4e=a("p"),z9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),W9r=l(),Pc=a("p"),Q9r=o(`Note:
Loading a model from its configuration file does `),i4e=a("strong"),U9r=o("not"),H9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),J9r=o("from_pretrained()"),Y9r=o(" to load the model weights."),K9r=l(),F(r4.$$.fragment),Z9r=l(),Ir=a("div"),F(L$.$$.fragment),exr=l(),d4e=a("p"),oxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rxr=l(),vn=a("p"),txr=o("The model class to instantiate is selected based on the "),c4e=a("code"),axr=o("model_type"),nxr=o(` property of the config object (either
passed as an argument or loaded from `),f4e=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),ixr=o("pretrained_model_name_or_path"),dxr=o(":"),cxr=l(),Ve=a("ul"),t4=a("li"),g4e=a("strong"),fxr=o("convnext"),mxr=o(" \u2014 "),sZ=a("a"),gxr=o("TFConvNextForImageClassification"),hxr=o(" (ConvNeXT model)"),pxr=l(),a4=a("li"),h4e=a("strong"),_xr=o("data2vec-vision"),uxr=o(" \u2014 "),lZ=a("a"),bxr=o("TFData2VecVisionForImageClassification"),vxr=o(" (Data2VecVision model)"),Fxr=l(),dl=a("li"),p4e=a("strong"),Txr=o("deit"),Mxr=o(" \u2014 "),iZ=a("a"),Exr=o("TFDeiTForImageClassification"),Cxr=o(" or "),dZ=a("a"),wxr=o("TFDeiTForImageClassificationWithTeacher"),Axr=o(" (DeiT model)"),Lxr=l(),n4=a("li"),_4e=a("strong"),yxr=o("regnet"),xxr=o(" \u2014 "),cZ=a("a"),$xr=o("TFRegNetForImageClassification"),kxr=o(" (RegNet model)"),Sxr=l(),s4=a("li"),u4e=a("strong"),Rxr=o("resnet"),Pxr=o(" \u2014 "),fZ=a("a"),Bxr=o("TFResNetForImageClassification"),Ixr=o(" (ResNet model)"),Nxr=l(),l4=a("li"),b4e=a("strong"),qxr=o("segformer"),jxr=o(" \u2014 "),mZ=a("a"),Dxr=o("TFSegformerForImageClassification"),Gxr=o(" (SegFormer model)"),Oxr=l(),i4=a("li"),v4e=a("strong"),Vxr=o("swin"),Xxr=o(" \u2014 "),gZ=a("a"),zxr=o("TFSwinForImageClassification"),Wxr=o(" (Swin Transformer model)"),Qxr=l(),d4=a("li"),F4e=a("strong"),Uxr=o("vit"),Hxr=o(" \u2014 "),hZ=a("a"),Jxr=o("TFViTForImageClassification"),Yxr=o(" (ViT model)"),Kxr=l(),F(c4.$$.fragment),vHe=l(),Bc=a("h2"),f4=a("a"),T4e=a("span"),F(y$.$$.fragment),Zxr=l(),M4e=a("span"),e$r=o("TFAutoModelForSemanticSegmentation"),FHe=l(),ir=a("div"),F(x$.$$.fragment),o$r=l(),Ic=a("p"),r$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pZ=a("a"),t$r=o("from_pretrained()"),a$r=o(" class method or the "),_Z=a("a"),n$r=o("from_config()"),s$r=o(` class
method.`),l$r=l(),$$=a("p"),i$r=o("This class cannot be instantiated directly using "),E4e=a("code"),d$r=o("__init__()"),c$r=o(" (throws an error)."),f$r=l(),Ot=a("div"),F(k$.$$.fragment),m$r=l(),C4e=a("p"),g$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),h$r=l(),Nc=a("p"),p$r=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),_$r=o("not"),u$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),b$r=o("from_pretrained()"),v$r=o(" to load the model weights."),F$r=l(),F(m4.$$.fragment),T$r=l(),Nr=a("div"),F(S$.$$.fragment),M$r=l(),A4e=a("p"),E$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),C$r=l(),Fn=a("p"),w$r=o("The model class to instantiate is selected based on the "),L4e=a("code"),A$r=o("model_type"),L$r=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),y$r=o("pretrained_model_name_or_path"),x$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),$$r=o("pretrained_model_name_or_path"),k$r=o(":"),S$r=l(),R$=a("ul"),g4=a("li"),$4e=a("strong"),R$r=o("data2vec-vision"),P$r=o(" \u2014 "),bZ=a("a"),B$r=o("TFData2VecVisionForSemanticSegmentation"),I$r=o(" (Data2VecVision model)"),N$r=l(),h4=a("li"),k4e=a("strong"),q$r=o("segformer"),j$r=o(" \u2014 "),vZ=a("a"),D$r=o("TFSegformerForSemanticSegmentation"),G$r=o(" (SegFormer model)"),O$r=l(),F(p4.$$.fragment),THe=l(),qc=a("h2"),_4=a("a"),S4e=a("span"),F(P$.$$.fragment),V$r=l(),R4e=a("span"),X$r=o("TFAutoModelForMaskedLM"),MHe=l(),dr=a("div"),F(B$.$$.fragment),z$r=l(),jc=a("p"),W$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FZ=a("a"),Q$r=o("from_pretrained()"),U$r=o(" class method or the "),TZ=a("a"),H$r=o("from_config()"),J$r=o(` class
method.`),Y$r=l(),I$=a("p"),K$r=o("This class cannot be instantiated directly using "),P4e=a("code"),Z$r=o("__init__()"),ekr=o(" (throws an error)."),okr=l(),Vt=a("div"),F(N$.$$.fragment),rkr=l(),B4e=a("p"),tkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),akr=l(),Dc=a("p"),nkr=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),skr=o("not"),lkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),ikr=o("from_pretrained()"),dkr=o(" to load the model weights."),ckr=l(),F(u4.$$.fragment),fkr=l(),qr=a("div"),F(q$.$$.fragment),mkr=l(),N4e=a("p"),gkr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hkr=l(),Tn=a("p"),pkr=o("The model class to instantiate is selected based on the "),q4e=a("code"),_kr=o("model_type"),ukr=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),bkr=o("pretrained_model_name_or_path"),vkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),Fkr=o("pretrained_model_name_or_path"),Tkr=o(":"),Mkr=l(),fe=a("ul"),b4=a("li"),G4e=a("strong"),Ekr=o("albert"),Ckr=o(" \u2014 "),EZ=a("a"),wkr=o("TFAlbertForMaskedLM"),Akr=o(" (ALBERT model)"),Lkr=l(),v4=a("li"),O4e=a("strong"),ykr=o("bert"),xkr=o(" \u2014 "),CZ=a("a"),$kr=o("TFBertForMaskedLM"),kkr=o(" (BERT model)"),Skr=l(),F4=a("li"),V4e=a("strong"),Rkr=o("camembert"),Pkr=o(" \u2014 "),wZ=a("a"),Bkr=o("TFCamembertForMaskedLM"),Ikr=o(" (CamemBERT model)"),Nkr=l(),T4=a("li"),X4e=a("strong"),qkr=o("convbert"),jkr=o(" \u2014 "),AZ=a("a"),Dkr=o("TFConvBertForMaskedLM"),Gkr=o(" (ConvBERT model)"),Okr=l(),M4=a("li"),z4e=a("strong"),Vkr=o("deberta"),Xkr=o(" \u2014 "),LZ=a("a"),zkr=o("TFDebertaForMaskedLM"),Wkr=o(" (DeBERTa model)"),Qkr=l(),E4=a("li"),W4e=a("strong"),Ukr=o("deberta-v2"),Hkr=o(" \u2014 "),yZ=a("a"),Jkr=o("TFDebertaV2ForMaskedLM"),Ykr=o(" (DeBERTa-v2 model)"),Kkr=l(),C4=a("li"),Q4e=a("strong"),Zkr=o("distilbert"),eSr=o(" \u2014 "),xZ=a("a"),oSr=o("TFDistilBertForMaskedLM"),rSr=o(" (DistilBERT model)"),tSr=l(),w4=a("li"),U4e=a("strong"),aSr=o("electra"),nSr=o(" \u2014 "),$Z=a("a"),sSr=o("TFElectraForMaskedLM"),lSr=o(" (ELECTRA model)"),iSr=l(),A4=a("li"),H4e=a("strong"),dSr=o("flaubert"),cSr=o(" \u2014 "),kZ=a("a"),fSr=o("TFFlaubertWithLMHeadModel"),mSr=o(" (FlauBERT model)"),gSr=l(),L4=a("li"),J4e=a("strong"),hSr=o("funnel"),pSr=o(" \u2014 "),SZ=a("a"),_Sr=o("TFFunnelForMaskedLM"),uSr=o(" (Funnel Transformer model)"),bSr=l(),y4=a("li"),Y4e=a("strong"),vSr=o("layoutlm"),FSr=o(" \u2014 "),RZ=a("a"),TSr=o("TFLayoutLMForMaskedLM"),MSr=o(" (LayoutLM model)"),ESr=l(),x4=a("li"),K4e=a("strong"),CSr=o("longformer"),wSr=o(" \u2014 "),PZ=a("a"),ASr=o("TFLongformerForMaskedLM"),LSr=o(" (Longformer model)"),ySr=l(),$4=a("li"),Z4e=a("strong"),xSr=o("mobilebert"),$Sr=o(" \u2014 "),BZ=a("a"),kSr=o("TFMobileBertForMaskedLM"),SSr=o(" (MobileBERT model)"),RSr=l(),k4=a("li"),eCe=a("strong"),PSr=o("mpnet"),BSr=o(" \u2014 "),IZ=a("a"),ISr=o("TFMPNetForMaskedLM"),NSr=o(" (MPNet model)"),qSr=l(),S4=a("li"),oCe=a("strong"),jSr=o("rembert"),DSr=o(" \u2014 "),NZ=a("a"),GSr=o("TFRemBertForMaskedLM"),OSr=o(" (RemBERT model)"),VSr=l(),R4=a("li"),rCe=a("strong"),XSr=o("roberta"),zSr=o(" \u2014 "),qZ=a("a"),WSr=o("TFRobertaForMaskedLM"),QSr=o(" (RoBERTa model)"),USr=l(),P4=a("li"),tCe=a("strong"),HSr=o("roformer"),JSr=o(" \u2014 "),jZ=a("a"),YSr=o("TFRoFormerForMaskedLM"),KSr=o(" (RoFormer model)"),ZSr=l(),B4=a("li"),aCe=a("strong"),eRr=o("tapas"),oRr=o(" \u2014 "),DZ=a("a"),rRr=o("TFTapasForMaskedLM"),tRr=o(" (TAPAS model)"),aRr=l(),I4=a("li"),nCe=a("strong"),nRr=o("xlm"),sRr=o(" \u2014 "),GZ=a("a"),lRr=o("TFXLMWithLMHeadModel"),iRr=o(" (XLM model)"),dRr=l(),N4=a("li"),sCe=a("strong"),cRr=o("xlm-roberta"),fRr=o(" \u2014 "),OZ=a("a"),mRr=o("TFXLMRobertaForMaskedLM"),gRr=o(" (XLM-RoBERTa model)"),hRr=l(),F(q4.$$.fragment),EHe=l(),Gc=a("h2"),j4=a("a"),lCe=a("span"),F(j$.$$.fragment),pRr=l(),iCe=a("span"),_Rr=o("TFAutoModelForSeq2SeqLM"),CHe=l(),cr=a("div"),F(D$.$$.fragment),uRr=l(),Oc=a("p"),bRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VZ=a("a"),vRr=o("from_pretrained()"),FRr=o(" class method or the "),XZ=a("a"),TRr=o("from_config()"),MRr=o(` class
method.`),ERr=l(),G$=a("p"),CRr=o("This class cannot be instantiated directly using "),dCe=a("code"),wRr=o("__init__()"),ARr=o(" (throws an error)."),LRr=l(),Xt=a("div"),F(O$.$$.fragment),yRr=l(),cCe=a("p"),xRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$Rr=l(),Vc=a("p"),kRr=o(`Note:
Loading a model from its configuration file does `),fCe=a("strong"),SRr=o("not"),RRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),PRr=o("from_pretrained()"),BRr=o(" to load the model weights."),IRr=l(),F(D4.$$.fragment),NRr=l(),jr=a("div"),F(V$.$$.fragment),qRr=l(),mCe=a("p"),jRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DRr=l(),Mn=a("p"),GRr=o("The model class to instantiate is selected based on the "),gCe=a("code"),ORr=o("model_type"),VRr=o(` property of the config object (either
passed as an argument or loaded from `),hCe=a("code"),XRr=o("pretrained_model_name_or_path"),zRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=a("code"),WRr=o("pretrained_model_name_or_path"),QRr=o(":"),URr=l(),ye=a("ul"),G4=a("li"),_Ce=a("strong"),HRr=o("bart"),JRr=o(" \u2014 "),WZ=a("a"),YRr=o("TFBartForConditionalGeneration"),KRr=o(" (BART model)"),ZRr=l(),O4=a("li"),uCe=a("strong"),ePr=o("blenderbot"),oPr=o(" \u2014 "),QZ=a("a"),rPr=o("TFBlenderbotForConditionalGeneration"),tPr=o(" (Blenderbot model)"),aPr=l(),V4=a("li"),bCe=a("strong"),nPr=o("blenderbot-small"),sPr=o(" \u2014 "),UZ=a("a"),lPr=o("TFBlenderbotSmallForConditionalGeneration"),iPr=o(" (BlenderbotSmall model)"),dPr=l(),X4=a("li"),vCe=a("strong"),cPr=o("encoder-decoder"),fPr=o(" \u2014 "),HZ=a("a"),mPr=o("TFEncoderDecoderModel"),gPr=o(" (Encoder decoder model)"),hPr=l(),z4=a("li"),FCe=a("strong"),pPr=o("led"),_Pr=o(" \u2014 "),JZ=a("a"),uPr=o("TFLEDForConditionalGeneration"),bPr=o(" (LED model)"),vPr=l(),W4=a("li"),TCe=a("strong"),FPr=o("marian"),TPr=o(" \u2014 "),YZ=a("a"),MPr=o("TFMarianMTModel"),EPr=o(" (Marian model)"),CPr=l(),Q4=a("li"),MCe=a("strong"),wPr=o("mbart"),APr=o(" \u2014 "),KZ=a("a"),LPr=o("TFMBartForConditionalGeneration"),yPr=o(" (mBART model)"),xPr=l(),U4=a("li"),ECe=a("strong"),$Pr=o("mt5"),kPr=o(" \u2014 "),ZZ=a("a"),SPr=o("TFMT5ForConditionalGeneration"),RPr=o(" (MT5 model)"),PPr=l(),H4=a("li"),CCe=a("strong"),BPr=o("pegasus"),IPr=o(" \u2014 "),eee=a("a"),NPr=o("TFPegasusForConditionalGeneration"),qPr=o(" (Pegasus model)"),jPr=l(),J4=a("li"),wCe=a("strong"),DPr=o("t5"),GPr=o(" \u2014 "),oee=a("a"),OPr=o("TFT5ForConditionalGeneration"),VPr=o(" (T5 model)"),XPr=l(),F(Y4.$$.fragment),wHe=l(),Xc=a("h2"),K4=a("a"),ACe=a("span"),F(X$.$$.fragment),zPr=l(),LCe=a("span"),WPr=o("TFAutoModelForSequenceClassification"),AHe=l(),fr=a("div"),F(z$.$$.fragment),QPr=l(),zc=a("p"),UPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ree=a("a"),HPr=o("from_pretrained()"),JPr=o(" class method or the "),tee=a("a"),YPr=o("from_config()"),KPr=o(` class
method.`),ZPr=l(),W$=a("p"),eBr=o("This class cannot be instantiated directly using "),yCe=a("code"),oBr=o("__init__()"),rBr=o(" (throws an error)."),tBr=l(),zt=a("div"),F(Q$.$$.fragment),aBr=l(),xCe=a("p"),nBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sBr=l(),Wc=a("p"),lBr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),iBr=o("not"),dBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),cBr=o("from_pretrained()"),fBr=o(" to load the model weights."),mBr=l(),F(Z4.$$.fragment),gBr=l(),Dr=a("div"),F(U$.$$.fragment),hBr=l(),kCe=a("p"),pBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Br=l(),En=a("p"),uBr=o("The model class to instantiate is selected based on the "),SCe=a("code"),bBr=o("model_type"),vBr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),FBr=o("pretrained_model_name_or_path"),TBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(":"),CBr=l(),re=a("ul"),eC=a("li"),BCe=a("strong"),wBr=o("albert"),ABr=o(" \u2014 "),nee=a("a"),LBr=o("TFAlbertForSequenceClassification"),yBr=o(" (ALBERT model)"),xBr=l(),oC=a("li"),ICe=a("strong"),$Br=o("bert"),kBr=o(" \u2014 "),see=a("a"),SBr=o("TFBertForSequenceClassification"),RBr=o(" (BERT model)"),PBr=l(),rC=a("li"),NCe=a("strong"),BBr=o("camembert"),IBr=o(" \u2014 "),lee=a("a"),NBr=o("TFCamembertForSequenceClassification"),qBr=o(" (CamemBERT model)"),jBr=l(),tC=a("li"),qCe=a("strong"),DBr=o("convbert"),GBr=o(" \u2014 "),iee=a("a"),OBr=o("TFConvBertForSequenceClassification"),VBr=o(" (ConvBERT model)"),XBr=l(),aC=a("li"),jCe=a("strong"),zBr=o("ctrl"),WBr=o(" \u2014 "),dee=a("a"),QBr=o("TFCTRLForSequenceClassification"),UBr=o(" (CTRL model)"),HBr=l(),nC=a("li"),DCe=a("strong"),JBr=o("deberta"),YBr=o(" \u2014 "),cee=a("a"),KBr=o("TFDebertaForSequenceClassification"),ZBr=o(" (DeBERTa model)"),eIr=l(),sC=a("li"),GCe=a("strong"),oIr=o("deberta-v2"),rIr=o(" \u2014 "),fee=a("a"),tIr=o("TFDebertaV2ForSequenceClassification"),aIr=o(" (DeBERTa-v2 model)"),nIr=l(),lC=a("li"),OCe=a("strong"),sIr=o("distilbert"),lIr=o(" \u2014 "),mee=a("a"),iIr=o("TFDistilBertForSequenceClassification"),dIr=o(" (DistilBERT model)"),cIr=l(),iC=a("li"),VCe=a("strong"),fIr=o("electra"),mIr=o(" \u2014 "),gee=a("a"),gIr=o("TFElectraForSequenceClassification"),hIr=o(" (ELECTRA model)"),pIr=l(),dC=a("li"),XCe=a("strong"),_Ir=o("flaubert"),uIr=o(" \u2014 "),hee=a("a"),bIr=o("TFFlaubertForSequenceClassification"),vIr=o(" (FlauBERT model)"),FIr=l(),cC=a("li"),zCe=a("strong"),TIr=o("funnel"),MIr=o(" \u2014 "),pee=a("a"),EIr=o("TFFunnelForSequenceClassification"),CIr=o(" (Funnel Transformer model)"),wIr=l(),fC=a("li"),WCe=a("strong"),AIr=o("gpt2"),LIr=o(" \u2014 "),_ee=a("a"),yIr=o("TFGPT2ForSequenceClassification"),xIr=o(" (OpenAI GPT-2 model)"),$Ir=l(),mC=a("li"),QCe=a("strong"),kIr=o("gptj"),SIr=o(" \u2014 "),uee=a("a"),RIr=o("TFGPTJForSequenceClassification"),PIr=o(" (GPT-J model)"),BIr=l(),gC=a("li"),UCe=a("strong"),IIr=o("layoutlm"),NIr=o(" \u2014 "),bee=a("a"),qIr=o("TFLayoutLMForSequenceClassification"),jIr=o(" (LayoutLM model)"),DIr=l(),hC=a("li"),HCe=a("strong"),GIr=o("layoutlmv3"),OIr=o(" \u2014 "),vee=a("a"),VIr=o("TFLayoutLMv3ForSequenceClassification"),XIr=o(" (LayoutLMv3 model)"),zIr=l(),pC=a("li"),JCe=a("strong"),WIr=o("longformer"),QIr=o(" \u2014 "),Fee=a("a"),UIr=o("TFLongformerForSequenceClassification"),HIr=o(" (Longformer model)"),JIr=l(),_C=a("li"),YCe=a("strong"),YIr=o("mobilebert"),KIr=o(" \u2014 "),Tee=a("a"),ZIr=o("TFMobileBertForSequenceClassification"),eNr=o(" (MobileBERT model)"),oNr=l(),uC=a("li"),KCe=a("strong"),rNr=o("mpnet"),tNr=o(" \u2014 "),Mee=a("a"),aNr=o("TFMPNetForSequenceClassification"),nNr=o(" (MPNet model)"),sNr=l(),bC=a("li"),ZCe=a("strong"),lNr=o("openai-gpt"),iNr=o(" \u2014 "),Eee=a("a"),dNr=o("TFOpenAIGPTForSequenceClassification"),cNr=o(" (OpenAI GPT model)"),fNr=l(),vC=a("li"),e3e=a("strong"),mNr=o("rembert"),gNr=o(" \u2014 "),Cee=a("a"),hNr=o("TFRemBertForSequenceClassification"),pNr=o(" (RemBERT model)"),_Nr=l(),FC=a("li"),o3e=a("strong"),uNr=o("roberta"),bNr=o(" \u2014 "),wee=a("a"),vNr=o("TFRobertaForSequenceClassification"),FNr=o(" (RoBERTa model)"),TNr=l(),TC=a("li"),r3e=a("strong"),MNr=o("roformer"),ENr=o(" \u2014 "),Aee=a("a"),CNr=o("TFRoFormerForSequenceClassification"),wNr=o(" (RoFormer model)"),ANr=l(),MC=a("li"),t3e=a("strong"),LNr=o("tapas"),yNr=o(" \u2014 "),Lee=a("a"),xNr=o("TFTapasForSequenceClassification"),$Nr=o(" (TAPAS model)"),kNr=l(),EC=a("li"),a3e=a("strong"),SNr=o("transfo-xl"),RNr=o(" \u2014 "),yee=a("a"),PNr=o("TFTransfoXLForSequenceClassification"),BNr=o(" (Transformer-XL model)"),INr=l(),CC=a("li"),n3e=a("strong"),NNr=o("xlm"),qNr=o(" \u2014 "),xee=a("a"),jNr=o("TFXLMForSequenceClassification"),DNr=o(" (XLM model)"),GNr=l(),wC=a("li"),s3e=a("strong"),ONr=o("xlm-roberta"),VNr=o(" \u2014 "),$ee=a("a"),XNr=o("TFXLMRobertaForSequenceClassification"),zNr=o(" (XLM-RoBERTa model)"),WNr=l(),AC=a("li"),l3e=a("strong"),QNr=o("xlnet"),UNr=o(" \u2014 "),kee=a("a"),HNr=o("TFXLNetForSequenceClassification"),JNr=o(" (XLNet model)"),YNr=l(),F(LC.$$.fragment),LHe=l(),Qc=a("h2"),yC=a("a"),i3e=a("span"),F(H$.$$.fragment),KNr=l(),d3e=a("span"),ZNr=o("TFAutoModelForMultipleChoice"),yHe=l(),mr=a("div"),F(J$.$$.fragment),eqr=l(),Uc=a("p"),oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=a("a"),rqr=o("from_pretrained()"),tqr=o(" class method or the "),Ree=a("a"),aqr=o("from_config()"),nqr=o(` class
method.`),sqr=l(),Y$=a("p"),lqr=o("This class cannot be instantiated directly using "),c3e=a("code"),iqr=o("__init__()"),dqr=o(" (throws an error)."),cqr=l(),Wt=a("div"),F(K$.$$.fragment),fqr=l(),f3e=a("p"),mqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gqr=l(),Hc=a("p"),hqr=o(`Note:
Loading a model from its configuration file does `),m3e=a("strong"),pqr=o("not"),_qr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),uqr=o("from_pretrained()"),bqr=o(" to load the model weights."),vqr=l(),F(xC.$$.fragment),Fqr=l(),Gr=a("div"),F(Z$.$$.fragment),Tqr=l(),g3e=a("p"),Mqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Eqr=l(),Cn=a("p"),Cqr=o("The model class to instantiate is selected based on the "),h3e=a("code"),wqr=o("model_type"),Aqr=o(` property of the config object (either
passed as an argument or loaded from `),p3e=a("code"),Lqr=o("pretrained_model_name_or_path"),yqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(":"),kqr=l(),ve=a("ul"),$C=a("li"),u3e=a("strong"),Sqr=o("albert"),Rqr=o(" \u2014 "),Bee=a("a"),Pqr=o("TFAlbertForMultipleChoice"),Bqr=o(" (ALBERT model)"),Iqr=l(),kC=a("li"),b3e=a("strong"),Nqr=o("bert"),qqr=o(" \u2014 "),Iee=a("a"),jqr=o("TFBertForMultipleChoice"),Dqr=o(" (BERT model)"),Gqr=l(),SC=a("li"),v3e=a("strong"),Oqr=o("camembert"),Vqr=o(" \u2014 "),Nee=a("a"),Xqr=o("TFCamembertForMultipleChoice"),zqr=o(" (CamemBERT model)"),Wqr=l(),RC=a("li"),F3e=a("strong"),Qqr=o("convbert"),Uqr=o(" \u2014 "),qee=a("a"),Hqr=o("TFConvBertForMultipleChoice"),Jqr=o(" (ConvBERT model)"),Yqr=l(),PC=a("li"),T3e=a("strong"),Kqr=o("distilbert"),Zqr=o(" \u2014 "),jee=a("a"),ejr=o("TFDistilBertForMultipleChoice"),ojr=o(" (DistilBERT model)"),rjr=l(),BC=a("li"),M3e=a("strong"),tjr=o("electra"),ajr=o(" \u2014 "),Dee=a("a"),njr=o("TFElectraForMultipleChoice"),sjr=o(" (ELECTRA model)"),ljr=l(),IC=a("li"),E3e=a("strong"),ijr=o("flaubert"),djr=o(" \u2014 "),Gee=a("a"),cjr=o("TFFlaubertForMultipleChoice"),fjr=o(" (FlauBERT model)"),mjr=l(),NC=a("li"),C3e=a("strong"),gjr=o("funnel"),hjr=o(" \u2014 "),Oee=a("a"),pjr=o("TFFunnelForMultipleChoice"),_jr=o(" (Funnel Transformer model)"),ujr=l(),qC=a("li"),w3e=a("strong"),bjr=o("longformer"),vjr=o(" \u2014 "),Vee=a("a"),Fjr=o("TFLongformerForMultipleChoice"),Tjr=o(" (Longformer model)"),Mjr=l(),jC=a("li"),A3e=a("strong"),Ejr=o("mobilebert"),Cjr=o(" \u2014 "),Xee=a("a"),wjr=o("TFMobileBertForMultipleChoice"),Ajr=o(" (MobileBERT model)"),Ljr=l(),DC=a("li"),L3e=a("strong"),yjr=o("mpnet"),xjr=o(" \u2014 "),zee=a("a"),$jr=o("TFMPNetForMultipleChoice"),kjr=o(" (MPNet model)"),Sjr=l(),GC=a("li"),y3e=a("strong"),Rjr=o("rembert"),Pjr=o(" \u2014 "),Wee=a("a"),Bjr=o("TFRemBertForMultipleChoice"),Ijr=o(" (RemBERT model)"),Njr=l(),OC=a("li"),x3e=a("strong"),qjr=o("roberta"),jjr=o(" \u2014 "),Qee=a("a"),Djr=o("TFRobertaForMultipleChoice"),Gjr=o(" (RoBERTa model)"),Ojr=l(),VC=a("li"),$3e=a("strong"),Vjr=o("roformer"),Xjr=o(" \u2014 "),Uee=a("a"),zjr=o("TFRoFormerForMultipleChoice"),Wjr=o(" (RoFormer model)"),Qjr=l(),XC=a("li"),k3e=a("strong"),Ujr=o("xlm"),Hjr=o(" \u2014 "),Hee=a("a"),Jjr=o("TFXLMForMultipleChoice"),Yjr=o(" (XLM model)"),Kjr=l(),zC=a("li"),S3e=a("strong"),Zjr=o("xlm-roberta"),eDr=o(" \u2014 "),Jee=a("a"),oDr=o("TFXLMRobertaForMultipleChoice"),rDr=o(" (XLM-RoBERTa model)"),tDr=l(),WC=a("li"),R3e=a("strong"),aDr=o("xlnet"),nDr=o(" \u2014 "),Yee=a("a"),sDr=o("TFXLNetForMultipleChoice"),lDr=o(" (XLNet model)"),iDr=l(),F(QC.$$.fragment),xHe=l(),Jc=a("h2"),UC=a("a"),P3e=a("span"),F(ek.$$.fragment),dDr=l(),B3e=a("span"),cDr=o("TFAutoModelForNextSentencePrediction"),$He=l(),gr=a("div"),F(ok.$$.fragment),fDr=l(),Yc=a("p"),mDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=a("a"),gDr=o("from_pretrained()"),hDr=o(" class method or the "),Zee=a("a"),pDr=o("from_config()"),_Dr=o(` class
method.`),uDr=l(),rk=a("p"),bDr=o("This class cannot be instantiated directly using "),I3e=a("code"),vDr=o("__init__()"),FDr=o(" (throws an error)."),TDr=l(),Qt=a("div"),F(tk.$$.fragment),MDr=l(),N3e=a("p"),EDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CDr=l(),Kc=a("p"),wDr=o(`Note:
Loading a model from its configuration file does `),q3e=a("strong"),ADr=o("not"),LDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("a"),yDr=o("from_pretrained()"),xDr=o(" to load the model weights."),$Dr=l(),F(HC.$$.fragment),kDr=l(),Or=a("div"),F(ak.$$.fragment),SDr=l(),j3e=a("p"),RDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),PDr=l(),wn=a("p"),BDr=o("The model class to instantiate is selected based on the "),D3e=a("code"),IDr=o("model_type"),NDr=o(` property of the config object (either
passed as an argument or loaded from `),G3e=a("code"),qDr=o("pretrained_model_name_or_path"),jDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=a("code"),DDr=o("pretrained_model_name_or_path"),GDr=o(":"),ODr=l(),nk=a("ul"),JC=a("li"),V3e=a("strong"),VDr=o("bert"),XDr=o(" \u2014 "),ooe=a("a"),zDr=o("TFBertForNextSentencePrediction"),WDr=o(" (BERT model)"),QDr=l(),YC=a("li"),X3e=a("strong"),UDr=o("mobilebert"),HDr=o(" \u2014 "),roe=a("a"),JDr=o("TFMobileBertForNextSentencePrediction"),YDr=o(" (MobileBERT model)"),KDr=l(),F(KC.$$.fragment),kHe=l(),Zc=a("h2"),ZC=a("a"),z3e=a("span"),F(sk.$$.fragment),ZDr=l(),W3e=a("span"),eGr=o("TFAutoModelForTableQuestionAnswering"),SHe=l(),hr=a("div"),F(lk.$$.fragment),oGr=l(),ef=a("p"),rGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),toe=a("a"),tGr=o("from_pretrained()"),aGr=o(" class method or the "),aoe=a("a"),nGr=o("from_config()"),sGr=o(` class
method.`),lGr=l(),ik=a("p"),iGr=o("This class cannot be instantiated directly using "),Q3e=a("code"),dGr=o("__init__()"),cGr=o(" (throws an error)."),fGr=l(),Ut=a("div"),F(dk.$$.fragment),mGr=l(),U3e=a("p"),gGr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hGr=l(),of=a("p"),pGr=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),_Gr=o("not"),uGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),bGr=o("from_pretrained()"),vGr=o(" to load the model weights."),FGr=l(),F(e3.$$.fragment),TGr=l(),Vr=a("div"),F(ck.$$.fragment),MGr=l(),J3e=a("p"),EGr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CGr=l(),An=a("p"),wGr=o("The model class to instantiate is selected based on the "),Y3e=a("code"),AGr=o("model_type"),LGr=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),yGr=o("pretrained_model_name_or_path"),xGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),$Gr=o("pretrained_model_name_or_path"),kGr=o(":"),SGr=l(),e5e=a("ul"),o3=a("li"),o5e=a("strong"),RGr=o("tapas"),PGr=o(" \u2014 "),soe=a("a"),BGr=o("TFTapasForQuestionAnswering"),IGr=o(" (TAPAS model)"),NGr=l(),F(r3.$$.fragment),RHe=l(),rf=a("h2"),t3=a("a"),r5e=a("span"),F(fk.$$.fragment),qGr=l(),t5e=a("span"),jGr=o("TFAutoModelForTokenClassification"),PHe=l(),pr=a("div"),F(mk.$$.fragment),DGr=l(),tf=a("p"),GGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),loe=a("a"),OGr=o("from_pretrained()"),VGr=o(" class method or the "),ioe=a("a"),XGr=o("from_config()"),zGr=o(` class
method.`),WGr=l(),gk=a("p"),QGr=o("This class cannot be instantiated directly using "),a5e=a("code"),UGr=o("__init__()"),HGr=o(" (throws an error)."),JGr=l(),Ht=a("div"),F(hk.$$.fragment),YGr=l(),n5e=a("p"),KGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZGr=l(),af=a("p"),eOr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),oOr=o("not"),rOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=a("a"),tOr=o("from_pretrained()"),aOr=o(" to load the model weights."),nOr=l(),F(a3.$$.fragment),sOr=l(),Xr=a("div"),F(pk.$$.fragment),lOr=l(),l5e=a("p"),iOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dOr=l(),Ln=a("p"),cOr=o("The model class to instantiate is selected based on the "),i5e=a("code"),fOr=o("model_type"),mOr=o(` property of the config object (either
passed as an argument or loaded from `),d5e=a("code"),gOr=o("pretrained_model_name_or_path"),hOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),pOr=o("pretrained_model_name_or_path"),_Or=o(":"),uOr=l(),ie=a("ul"),n3=a("li"),f5e=a("strong"),bOr=o("albert"),vOr=o(" \u2014 "),coe=a("a"),FOr=o("TFAlbertForTokenClassification"),TOr=o(" (ALBERT model)"),MOr=l(),s3=a("li"),m5e=a("strong"),EOr=o("bert"),COr=o(" \u2014 "),foe=a("a"),wOr=o("TFBertForTokenClassification"),AOr=o(" (BERT model)"),LOr=l(),l3=a("li"),g5e=a("strong"),yOr=o("camembert"),xOr=o(" \u2014 "),moe=a("a"),$Or=o("TFCamembertForTokenClassification"),kOr=o(" (CamemBERT model)"),SOr=l(),i3=a("li"),h5e=a("strong"),ROr=o("convbert"),POr=o(" \u2014 "),goe=a("a"),BOr=o("TFConvBertForTokenClassification"),IOr=o(" (ConvBERT model)"),NOr=l(),d3=a("li"),p5e=a("strong"),qOr=o("deberta"),jOr=o(" \u2014 "),hoe=a("a"),DOr=o("TFDebertaForTokenClassification"),GOr=o(" (DeBERTa model)"),OOr=l(),c3=a("li"),_5e=a("strong"),VOr=o("deberta-v2"),XOr=o(" \u2014 "),poe=a("a"),zOr=o("TFDebertaV2ForTokenClassification"),WOr=o(" (DeBERTa-v2 model)"),QOr=l(),f3=a("li"),u5e=a("strong"),UOr=o("distilbert"),HOr=o(" \u2014 "),_oe=a("a"),JOr=o("TFDistilBertForTokenClassification"),YOr=o(" (DistilBERT model)"),KOr=l(),m3=a("li"),b5e=a("strong"),ZOr=o("electra"),eVr=o(" \u2014 "),uoe=a("a"),oVr=o("TFElectraForTokenClassification"),rVr=o(" (ELECTRA model)"),tVr=l(),g3=a("li"),v5e=a("strong"),aVr=o("flaubert"),nVr=o(" \u2014 "),boe=a("a"),sVr=o("TFFlaubertForTokenClassification"),lVr=o(" (FlauBERT model)"),iVr=l(),h3=a("li"),F5e=a("strong"),dVr=o("funnel"),cVr=o(" \u2014 "),voe=a("a"),fVr=o("TFFunnelForTokenClassification"),mVr=o(" (Funnel Transformer model)"),gVr=l(),p3=a("li"),T5e=a("strong"),hVr=o("layoutlm"),pVr=o(" \u2014 "),Foe=a("a"),_Vr=o("TFLayoutLMForTokenClassification"),uVr=o(" (LayoutLM model)"),bVr=l(),_3=a("li"),M5e=a("strong"),vVr=o("layoutlmv3"),FVr=o(" \u2014 "),Toe=a("a"),TVr=o("TFLayoutLMv3ForTokenClassification"),MVr=o(" (LayoutLMv3 model)"),EVr=l(),u3=a("li"),E5e=a("strong"),CVr=o("longformer"),wVr=o(" \u2014 "),Moe=a("a"),AVr=o("TFLongformerForTokenClassification"),LVr=o(" (Longformer model)"),yVr=l(),b3=a("li"),C5e=a("strong"),xVr=o("mobilebert"),$Vr=o(" \u2014 "),Eoe=a("a"),kVr=o("TFMobileBertForTokenClassification"),SVr=o(" (MobileBERT model)"),RVr=l(),v3=a("li"),w5e=a("strong"),PVr=o("mpnet"),BVr=o(" \u2014 "),Coe=a("a"),IVr=o("TFMPNetForTokenClassification"),NVr=o(" (MPNet model)"),qVr=l(),F3=a("li"),A5e=a("strong"),jVr=o("rembert"),DVr=o(" \u2014 "),woe=a("a"),GVr=o("TFRemBertForTokenClassification"),OVr=o(" (RemBERT model)"),VVr=l(),T3=a("li"),L5e=a("strong"),XVr=o("roberta"),zVr=o(" \u2014 "),Aoe=a("a"),WVr=o("TFRobertaForTokenClassification"),QVr=o(" (RoBERTa model)"),UVr=l(),M3=a("li"),y5e=a("strong"),HVr=o("roformer"),JVr=o(" \u2014 "),Loe=a("a"),YVr=o("TFRoFormerForTokenClassification"),KVr=o(" (RoFormer model)"),ZVr=l(),E3=a("li"),x5e=a("strong"),eXr=o("xlm"),oXr=o(" \u2014 "),yoe=a("a"),rXr=o("TFXLMForTokenClassification"),tXr=o(" (XLM model)"),aXr=l(),C3=a("li"),$5e=a("strong"),nXr=o("xlm-roberta"),sXr=o(" \u2014 "),xoe=a("a"),lXr=o("TFXLMRobertaForTokenClassification"),iXr=o(" (XLM-RoBERTa model)"),dXr=l(),w3=a("li"),k5e=a("strong"),cXr=o("xlnet"),fXr=o(" \u2014 "),$oe=a("a"),mXr=o("TFXLNetForTokenClassification"),gXr=o(" (XLNet model)"),hXr=l(),F(A3.$$.fragment),BHe=l(),nf=a("h2"),L3=a("a"),S5e=a("span"),F(_k.$$.fragment),pXr=l(),R5e=a("span"),_Xr=o("TFAutoModelForQuestionAnswering"),IHe=l(),_r=a("div"),F(uk.$$.fragment),uXr=l(),sf=a("p"),bXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),koe=a("a"),vXr=o("from_pretrained()"),FXr=o(" class method or the "),Soe=a("a"),TXr=o("from_config()"),MXr=o(` class
method.`),EXr=l(),bk=a("p"),CXr=o("This class cannot be instantiated directly using "),P5e=a("code"),wXr=o("__init__()"),AXr=o(" (throws an error)."),LXr=l(),Jt=a("div"),F(vk.$$.fragment),yXr=l(),B5e=a("p"),xXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Xr=l(),lf=a("p"),kXr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),SXr=o("not"),RXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),PXr=o("from_pretrained()"),BXr=o(" to load the model weights."),IXr=l(),F(y3.$$.fragment),NXr=l(),zr=a("div"),F(Fk.$$.fragment),qXr=l(),N5e=a("p"),jXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DXr=l(),yn=a("p"),GXr=o("The model class to instantiate is selected based on the "),q5e=a("code"),OXr=o("model_type"),VXr=o(` property of the config object (either
passed as an argument or loaded from `),j5e=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),WXr=o("pretrained_model_name_or_path"),QXr=o(":"),UXr=l(),de=a("ul"),x3=a("li"),G5e=a("strong"),HXr=o("albert"),JXr=o(" \u2014 "),Poe=a("a"),YXr=o("TFAlbertForQuestionAnswering"),KXr=o(" (ALBERT model)"),ZXr=l(),$3=a("li"),O5e=a("strong"),ezr=o("bert"),ozr=o(" \u2014 "),Boe=a("a"),rzr=o("TFBertForQuestionAnswering"),tzr=o(" (BERT model)"),azr=l(),k3=a("li"),V5e=a("strong"),nzr=o("camembert"),szr=o(" \u2014 "),Ioe=a("a"),lzr=o("TFCamembertForQuestionAnswering"),izr=o(" (CamemBERT model)"),dzr=l(),S3=a("li"),X5e=a("strong"),czr=o("convbert"),fzr=o(" \u2014 "),Noe=a("a"),mzr=o("TFConvBertForQuestionAnswering"),gzr=o(" (ConvBERT model)"),hzr=l(),R3=a("li"),z5e=a("strong"),pzr=o("deberta"),_zr=o(" \u2014 "),qoe=a("a"),uzr=o("TFDebertaForQuestionAnswering"),bzr=o(" (DeBERTa model)"),vzr=l(),P3=a("li"),W5e=a("strong"),Fzr=o("deberta-v2"),Tzr=o(" \u2014 "),joe=a("a"),Mzr=o("TFDebertaV2ForQuestionAnswering"),Ezr=o(" (DeBERTa-v2 model)"),Czr=l(),B3=a("li"),Q5e=a("strong"),wzr=o("distilbert"),Azr=o(" \u2014 "),Doe=a("a"),Lzr=o("TFDistilBertForQuestionAnswering"),yzr=o(" (DistilBERT model)"),xzr=l(),I3=a("li"),U5e=a("strong"),$zr=o("electra"),kzr=o(" \u2014 "),Goe=a("a"),Szr=o("TFElectraForQuestionAnswering"),Rzr=o(" (ELECTRA model)"),Pzr=l(),N3=a("li"),H5e=a("strong"),Bzr=o("flaubert"),Izr=o(" \u2014 "),Ooe=a("a"),Nzr=o("TFFlaubertForQuestionAnsweringSimple"),qzr=o(" (FlauBERT model)"),jzr=l(),q3=a("li"),J5e=a("strong"),Dzr=o("funnel"),Gzr=o(" \u2014 "),Voe=a("a"),Ozr=o("TFFunnelForQuestionAnswering"),Vzr=o(" (Funnel Transformer model)"),Xzr=l(),j3=a("li"),Y5e=a("strong"),zzr=o("gptj"),Wzr=o(" \u2014 "),Xoe=a("a"),Qzr=o("TFGPTJForQuestionAnswering"),Uzr=o(" (GPT-J model)"),Hzr=l(),D3=a("li"),K5e=a("strong"),Jzr=o("layoutlmv3"),Yzr=o(" \u2014 "),zoe=a("a"),Kzr=o("TFLayoutLMv3ForQuestionAnswering"),Zzr=o(" (LayoutLMv3 model)"),eWr=l(),G3=a("li"),Z5e=a("strong"),oWr=o("longformer"),rWr=o(" \u2014 "),Woe=a("a"),tWr=o("TFLongformerForQuestionAnswering"),aWr=o(" (Longformer model)"),nWr=l(),O3=a("li"),e0e=a("strong"),sWr=o("mobilebert"),lWr=o(" \u2014 "),Qoe=a("a"),iWr=o("TFMobileBertForQuestionAnswering"),dWr=o(" (MobileBERT model)"),cWr=l(),V3=a("li"),o0e=a("strong"),fWr=o("mpnet"),mWr=o(" \u2014 "),Uoe=a("a"),gWr=o("TFMPNetForQuestionAnswering"),hWr=o(" (MPNet model)"),pWr=l(),X3=a("li"),r0e=a("strong"),_Wr=o("rembert"),uWr=o(" \u2014 "),Hoe=a("a"),bWr=o("TFRemBertForQuestionAnswering"),vWr=o(" (RemBERT model)"),FWr=l(),z3=a("li"),t0e=a("strong"),TWr=o("roberta"),MWr=o(" \u2014 "),Joe=a("a"),EWr=o("TFRobertaForQuestionAnswering"),CWr=o(" (RoBERTa model)"),wWr=l(),W3=a("li"),a0e=a("strong"),AWr=o("roformer"),LWr=o(" \u2014 "),Yoe=a("a"),yWr=o("TFRoFormerForQuestionAnswering"),xWr=o(" (RoFormer model)"),$Wr=l(),Q3=a("li"),n0e=a("strong"),kWr=o("xlm"),SWr=o(" \u2014 "),Koe=a("a"),RWr=o("TFXLMForQuestionAnsweringSimple"),PWr=o(" (XLM model)"),BWr=l(),U3=a("li"),s0e=a("strong"),IWr=o("xlm-roberta"),NWr=o(" \u2014 "),Zoe=a("a"),qWr=o("TFXLMRobertaForQuestionAnswering"),jWr=o(" (XLM-RoBERTa model)"),DWr=l(),H3=a("li"),l0e=a("strong"),GWr=o("xlnet"),OWr=o(" \u2014 "),ere=a("a"),VWr=o("TFXLNetForQuestionAnsweringSimple"),XWr=o(" (XLNet model)"),zWr=l(),F(J3.$$.fragment),NHe=l(),df=a("h2"),Y3=a("a"),i0e=a("span"),F(Tk.$$.fragment),WWr=l(),d0e=a("span"),QWr=o("TFAutoModelForVision2Seq"),qHe=l(),ur=a("div"),F(Mk.$$.fragment),UWr=l(),cf=a("p"),HWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ore=a("a"),JWr=o("from_pretrained()"),YWr=o(" class method or the "),rre=a("a"),KWr=o("from_config()"),ZWr=o(` class
method.`),eQr=l(),Ek=a("p"),oQr=o("This class cannot be instantiated directly using "),c0e=a("code"),rQr=o("__init__()"),tQr=o(" (throws an error)."),aQr=l(),Yt=a("div"),F(Ck.$$.fragment),nQr=l(),f0e=a("p"),sQr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lQr=l(),ff=a("p"),iQr=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),dQr=o("not"),cQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=a("a"),fQr=o("from_pretrained()"),mQr=o(" to load the model weights."),gQr=l(),F(K3.$$.fragment),hQr=l(),Wr=a("div"),F(wk.$$.fragment),pQr=l(),g0e=a("p"),_Qr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uQr=l(),xn=a("p"),bQr=o("The model class to instantiate is selected based on the "),h0e=a("code"),vQr=o("model_type"),FQr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),TQr=o("pretrained_model_name_or_path"),MQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),EQr=o("pretrained_model_name_or_path"),CQr=o(":"),wQr=l(),u0e=a("ul"),Z3=a("li"),b0e=a("strong"),AQr=o("vision-encoder-decoder"),LQr=o(" \u2014 "),are=a("a"),yQr=o("TFVisionEncoderDecoderModel"),xQr=o(" (Vision Encoder decoder model)"),$Qr=l(),F(e5.$$.fragment),jHe=l(),mf=a("h2"),o5=a("a"),v0e=a("span"),F(Ak.$$.fragment),kQr=l(),F0e=a("span"),SQr=o("TFAutoModelForSpeechSeq2Seq"),DHe=l(),br=a("div"),F(Lk.$$.fragment),RQr=l(),gf=a("p"),PQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nre=a("a"),BQr=o("from_pretrained()"),IQr=o(" class method or the "),sre=a("a"),NQr=o("from_config()"),qQr=o(` class
method.`),jQr=l(),yk=a("p"),DQr=o("This class cannot be instantiated directly using "),T0e=a("code"),GQr=o("__init__()"),OQr=o(" (throws an error)."),VQr=l(),Kt=a("div"),F(xk.$$.fragment),XQr=l(),M0e=a("p"),zQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WQr=l(),hf=a("p"),QQr=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),UQr=o("not"),HQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=a("a"),JQr=o("from_pretrained()"),YQr=o(" to load the model weights."),KQr=l(),F(r5.$$.fragment),ZQr=l(),Qr=a("div"),F($k.$$.fragment),eUr=l(),C0e=a("p"),oUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rUr=l(),$n=a("p"),tUr=o("The model class to instantiate is selected based on the "),w0e=a("code"),aUr=o("model_type"),nUr=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),sUr=o("pretrained_model_name_or_path"),lUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),iUr=o("pretrained_model_name_or_path"),dUr=o(":"),cUr=l(),y0e=a("ul"),t5=a("li"),x0e=a("strong"),fUr=o("speech_to_text"),mUr=o(" \u2014 "),ire=a("a"),gUr=o("TFSpeech2TextForConditionalGeneration"),hUr=o(" (Speech2Text model)"),pUr=l(),F(a5.$$.fragment),GHe=l(),pf=a("h2"),n5=a("a"),$0e=a("span"),F(kk.$$.fragment),_Ur=l(),k0e=a("span"),uUr=o("FlaxAutoModel"),OHe=l(),vr=a("div"),F(Sk.$$.fragment),bUr=l(),_f=a("p"),vUr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dre=a("a"),FUr=o("from_pretrained()"),TUr=o(" class method or the "),cre=a("a"),MUr=o("from_config()"),EUr=o(` class
method.`),CUr=l(),Rk=a("p"),wUr=o("This class cannot be instantiated directly using "),S0e=a("code"),AUr=o("__init__()"),LUr=o(" (throws an error)."),yUr=l(),Zt=a("div"),F(Pk.$$.fragment),xUr=l(),R0e=a("p"),$Ur=o("Instantiates one of the base model classes of the library from a configuration."),kUr=l(),uf=a("p"),SUr=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),RUr=o("not"),PUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("a"),BUr=o("from_pretrained()"),IUr=o(" to load the model weights."),NUr=l(),F(s5.$$.fragment),qUr=l(),Ur=a("div"),F(Bk.$$.fragment),jUr=l(),B0e=a("p"),DUr=o("Instantiate one of the base model classes of the library from a pretrained model."),GUr=l(),kn=a("p"),OUr=o("The model class to instantiate is selected based on the "),I0e=a("code"),VUr=o("model_type"),XUr=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),zUr=o("pretrained_model_name_or_path"),WUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),QUr=o("pretrained_model_name_or_path"),UUr=o(":"),HUr=l(),te=a("ul"),l5=a("li"),j0e=a("strong"),JUr=o("albert"),YUr=o(" \u2014 "),mre=a("a"),KUr=o("FlaxAlbertModel"),ZUr=o(" (ALBERT model)"),eHr=l(),i5=a("li"),D0e=a("strong"),oHr=o("bart"),rHr=o(" \u2014 "),gre=a("a"),tHr=o("FlaxBartModel"),aHr=o(" (BART model)"),nHr=l(),d5=a("li"),G0e=a("strong"),sHr=o("beit"),lHr=o(" \u2014 "),hre=a("a"),iHr=o("FlaxBeitModel"),dHr=o(" (BEiT model)"),cHr=l(),c5=a("li"),O0e=a("strong"),fHr=o("bert"),mHr=o(" \u2014 "),pre=a("a"),gHr=o("FlaxBertModel"),hHr=o(" (BERT model)"),pHr=l(),f5=a("li"),V0e=a("strong"),_Hr=o("big_bird"),uHr=o(" \u2014 "),_re=a("a"),bHr=o("FlaxBigBirdModel"),vHr=o(" (BigBird model)"),FHr=l(),m5=a("li"),X0e=a("strong"),THr=o("blenderbot"),MHr=o(" \u2014 "),ure=a("a"),EHr=o("FlaxBlenderbotModel"),CHr=o(" (Blenderbot model)"),wHr=l(),g5=a("li"),z0e=a("strong"),AHr=o("blenderbot-small"),LHr=o(" \u2014 "),bre=a("a"),yHr=o("FlaxBlenderbotSmallModel"),xHr=o(" (BlenderbotSmall model)"),$Hr=l(),h5=a("li"),W0e=a("strong"),kHr=o("clip"),SHr=o(" \u2014 "),vre=a("a"),RHr=o("FlaxCLIPModel"),PHr=o(" (CLIP model)"),BHr=l(),p5=a("li"),Q0e=a("strong"),IHr=o("distilbert"),NHr=o(" \u2014 "),Fre=a("a"),qHr=o("FlaxDistilBertModel"),jHr=o(" (DistilBERT model)"),DHr=l(),_5=a("li"),U0e=a("strong"),GHr=o("electra"),OHr=o(" \u2014 "),Tre=a("a"),VHr=o("FlaxElectraModel"),XHr=o(" (ELECTRA model)"),zHr=l(),u5=a("li"),H0e=a("strong"),WHr=o("gpt2"),QHr=o(" \u2014 "),Mre=a("a"),UHr=o("FlaxGPT2Model"),HHr=o(" (OpenAI GPT-2 model)"),JHr=l(),b5=a("li"),J0e=a("strong"),YHr=o("gpt_neo"),KHr=o(" \u2014 "),Ere=a("a"),ZHr=o("FlaxGPTNeoModel"),eJr=o(" (GPT Neo model)"),oJr=l(),v5=a("li"),Y0e=a("strong"),rJr=o("gptj"),tJr=o(" \u2014 "),Cre=a("a"),aJr=o("FlaxGPTJModel"),nJr=o(" (GPT-J model)"),sJr=l(),F5=a("li"),K0e=a("strong"),lJr=o("longt5"),iJr=o(" \u2014 "),wre=a("a"),dJr=o("FlaxLongT5Model"),cJr=o(" (LongT5 model)"),fJr=l(),T5=a("li"),Z0e=a("strong"),mJr=o("marian"),gJr=o(" \u2014 "),Are=a("a"),hJr=o("FlaxMarianModel"),pJr=o(" (Marian model)"),_Jr=l(),M5=a("li"),ewe=a("strong"),uJr=o("mbart"),bJr=o(" \u2014 "),Lre=a("a"),vJr=o("FlaxMBartModel"),FJr=o(" (mBART model)"),TJr=l(),E5=a("li"),owe=a("strong"),MJr=o("mt5"),EJr=o(" \u2014 "),yre=a("a"),CJr=o("FlaxMT5Model"),wJr=o(" (MT5 model)"),AJr=l(),C5=a("li"),rwe=a("strong"),LJr=o("opt"),yJr=o(" \u2014 "),xre=a("a"),xJr=o("FlaxOPTModel"),$Jr=o(" (OPT model)"),kJr=l(),w5=a("li"),twe=a("strong"),SJr=o("pegasus"),RJr=o(" \u2014 "),$re=a("a"),PJr=o("FlaxPegasusModel"),BJr=o(" (Pegasus model)"),IJr=l(),A5=a("li"),awe=a("strong"),NJr=o("roberta"),qJr=o(" \u2014 "),kre=a("a"),jJr=o("FlaxRobertaModel"),DJr=o(" (RoBERTa model)"),GJr=l(),L5=a("li"),nwe=a("strong"),OJr=o("roformer"),VJr=o(" \u2014 "),Sre=a("a"),XJr=o("FlaxRoFormerModel"),zJr=o(" (RoFormer model)"),WJr=l(),y5=a("li"),swe=a("strong"),QJr=o("t5"),UJr=o(" \u2014 "),Rre=a("a"),HJr=o("FlaxT5Model"),JJr=o(" (T5 model)"),YJr=l(),x5=a("li"),lwe=a("strong"),KJr=o("vision-text-dual-encoder"),ZJr=o(" \u2014 "),Pre=a("a"),eYr=o("FlaxVisionTextDualEncoderModel"),oYr=o(" (VisionTextDualEncoder model)"),rYr=l(),$5=a("li"),iwe=a("strong"),tYr=o("vit"),aYr=o(" \u2014 "),Bre=a("a"),nYr=o("FlaxViTModel"),sYr=o(" (ViT model)"),lYr=l(),k5=a("li"),dwe=a("strong"),iYr=o("wav2vec2"),dYr=o(" \u2014 "),Ire=a("a"),cYr=o("FlaxWav2Vec2Model"),fYr=o(" (Wav2Vec2 model)"),mYr=l(),S5=a("li"),cwe=a("strong"),gYr=o("xglm"),hYr=o(" \u2014 "),Nre=a("a"),pYr=o("FlaxXGLMModel"),_Yr=o(" (XGLM model)"),uYr=l(),R5=a("li"),fwe=a("strong"),bYr=o("xlm-roberta"),vYr=o(" \u2014 "),qre=a("a"),FYr=o("FlaxXLMRobertaModel"),TYr=o(" (XLM-RoBERTa model)"),MYr=l(),F(P5.$$.fragment),VHe=l(),bf=a("h2"),B5=a("a"),mwe=a("span"),F(Ik.$$.fragment),EYr=l(),gwe=a("span"),CYr=o("FlaxAutoModelForCausalLM"),XHe=l(),Fr=a("div"),F(Nk.$$.fragment),wYr=l(),vf=a("p"),AYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jre=a("a"),LYr=o("from_pretrained()"),yYr=o(" class method or the "),Dre=a("a"),xYr=o("from_config()"),$Yr=o(` class
method.`),kYr=l(),qk=a("p"),SYr=o("This class cannot be instantiated directly using "),hwe=a("code"),RYr=o("__init__()"),PYr=o(" (throws an error)."),BYr=l(),ea=a("div"),F(jk.$$.fragment),IYr=l(),pwe=a("p"),NYr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qYr=l(),Ff=a("p"),jYr=o(`Note:
Loading a model from its configuration file does `),_we=a("strong"),DYr=o("not"),GYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gre=a("a"),OYr=o("from_pretrained()"),VYr=o(" to load the model weights."),XYr=l(),F(I5.$$.fragment),zYr=l(),Hr=a("div"),F(Dk.$$.fragment),WYr=l(),uwe=a("p"),QYr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),UYr=l(),Sn=a("p"),HYr=o("The model class to instantiate is selected based on the "),bwe=a("code"),JYr=o("model_type"),YYr=o(` property of the config object (either
passed as an argument or loaded from `),vwe=a("code"),KYr=o("pretrained_model_name_or_path"),ZYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=a("code"),eKr=o("pretrained_model_name_or_path"),oKr=o(":"),rKr=l(),xe=a("ul"),N5=a("li"),Twe=a("strong"),tKr=o("bart"),aKr=o(" \u2014 "),Ore=a("a"),nKr=o("FlaxBartForCausalLM"),sKr=o(" (BART model)"),lKr=l(),q5=a("li"),Mwe=a("strong"),iKr=o("bert"),dKr=o(" \u2014 "),Vre=a("a"),cKr=o("FlaxBertForCausalLM"),fKr=o(" (BERT model)"),mKr=l(),j5=a("li"),Ewe=a("strong"),gKr=o("big_bird"),hKr=o(" \u2014 "),Xre=a("a"),pKr=o("FlaxBigBirdForCausalLM"),_Kr=o(" (BigBird model)"),uKr=l(),D5=a("li"),Cwe=a("strong"),bKr=o("electra"),vKr=o(" \u2014 "),zre=a("a"),FKr=o("FlaxElectraForCausalLM"),TKr=o(" (ELECTRA model)"),MKr=l(),G5=a("li"),wwe=a("strong"),EKr=o("gpt2"),CKr=o(" \u2014 "),Wre=a("a"),wKr=o("FlaxGPT2LMHeadModel"),AKr=o(" (OpenAI GPT-2 model)"),LKr=l(),O5=a("li"),Awe=a("strong"),yKr=o("gpt_neo"),xKr=o(" \u2014 "),Qre=a("a"),$Kr=o("FlaxGPTNeoForCausalLM"),kKr=o(" (GPT Neo model)"),SKr=l(),V5=a("li"),Lwe=a("strong"),RKr=o("gptj"),PKr=o(" \u2014 "),Ure=a("a"),BKr=o("FlaxGPTJForCausalLM"),IKr=o(" (GPT-J model)"),NKr=l(),X5=a("li"),ywe=a("strong"),qKr=o("opt"),jKr=o(" \u2014 "),Hre=a("a"),DKr=o("FlaxOPTForCausalLM"),GKr=o(" (OPT model)"),OKr=l(),z5=a("li"),xwe=a("strong"),VKr=o("roberta"),XKr=o(" \u2014 "),Jre=a("a"),zKr=o("FlaxRobertaForCausalLM"),WKr=o(" (RoBERTa model)"),QKr=l(),W5=a("li"),$we=a("strong"),UKr=o("xglm"),HKr=o(" \u2014 "),Yre=a("a"),JKr=o("FlaxXGLMForCausalLM"),YKr=o(" (XGLM model)"),KKr=l(),F(Q5.$$.fragment),zHe=l(),Tf=a("h2"),U5=a("a"),kwe=a("span"),F(Gk.$$.fragment),ZKr=l(),Swe=a("span"),eZr=o("FlaxAutoModelForPreTraining"),WHe=l(),Tr=a("div"),F(Ok.$$.fragment),oZr=l(),Mf=a("p"),rZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kre=a("a"),tZr=o("from_pretrained()"),aZr=o(" class method or the "),Zre=a("a"),nZr=o("from_config()"),sZr=o(` class
method.`),lZr=l(),Vk=a("p"),iZr=o("This class cannot be instantiated directly using "),Rwe=a("code"),dZr=o("__init__()"),cZr=o(" (throws an error)."),fZr=l(),oa=a("div"),F(Xk.$$.fragment),mZr=l(),Pwe=a("p"),gZr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hZr=l(),Ef=a("p"),pZr=o(`Note:
Loading a model from its configuration file does `),Bwe=a("strong"),_Zr=o("not"),uZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=a("a"),bZr=o("from_pretrained()"),vZr=o(" to load the model weights."),FZr=l(),F(H5.$$.fragment),TZr=l(),Jr=a("div"),F(zk.$$.fragment),MZr=l(),Iwe=a("p"),EZr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CZr=l(),Rn=a("p"),wZr=o("The model class to instantiate is selected based on the "),Nwe=a("code"),AZr=o("model_type"),LZr=o(` property of the config object (either
passed as an argument or loaded from `),qwe=a("code"),yZr=o("pretrained_model_name_or_path"),xZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jwe=a("code"),$Zr=o("pretrained_model_name_or_path"),kZr=o(":"),SZr=l(),Ee=a("ul"),J5=a("li"),Dwe=a("strong"),RZr=o("albert"),PZr=o(" \u2014 "),ote=a("a"),BZr=o("FlaxAlbertForPreTraining"),IZr=o(" (ALBERT model)"),NZr=l(),Y5=a("li"),Gwe=a("strong"),qZr=o("bart"),jZr=o(" \u2014 "),rte=a("a"),DZr=o("FlaxBartForConditionalGeneration"),GZr=o(" (BART model)"),OZr=l(),K5=a("li"),Owe=a("strong"),VZr=o("bert"),XZr=o(" \u2014 "),tte=a("a"),zZr=o("FlaxBertForPreTraining"),WZr=o(" (BERT model)"),QZr=l(),Z5=a("li"),Vwe=a("strong"),UZr=o("big_bird"),HZr=o(" \u2014 "),ate=a("a"),JZr=o("FlaxBigBirdForPreTraining"),YZr=o(" (BigBird model)"),KZr=l(),e0=a("li"),Xwe=a("strong"),ZZr=o("electra"),eet=o(" \u2014 "),nte=a("a"),oet=o("FlaxElectraForPreTraining"),ret=o(" (ELECTRA model)"),tet=l(),o0=a("li"),zwe=a("strong"),aet=o("longt5"),net=o(" \u2014 "),ste=a("a"),set=o("FlaxLongT5ForConditionalGeneration"),iet=o(" (LongT5 model)"),det=l(),r0=a("li"),Wwe=a("strong"),cet=o("mbart"),fet=o(" \u2014 "),lte=a("a"),met=o("FlaxMBartForConditionalGeneration"),get=o(" (mBART model)"),het=l(),t0=a("li"),Qwe=a("strong"),pet=o("mt5"),_et=o(" \u2014 "),ite=a("a"),uet=o("FlaxMT5ForConditionalGeneration"),bet=o(" (MT5 model)"),vet=l(),a0=a("li"),Uwe=a("strong"),Fet=o("roberta"),Tet=o(" \u2014 "),dte=a("a"),Met=o("FlaxRobertaForMaskedLM"),Eet=o(" (RoBERTa model)"),Cet=l(),n0=a("li"),Hwe=a("strong"),wet=o("roformer"),Aet=o(" \u2014 "),cte=a("a"),Let=o("FlaxRoFormerForMaskedLM"),yet=o(" (RoFormer model)"),xet=l(),s0=a("li"),Jwe=a("strong"),$et=o("t5"),ket=o(" \u2014 "),fte=a("a"),Set=o("FlaxT5ForConditionalGeneration"),Ret=o(" (T5 model)"),Pet=l(),l0=a("li"),Ywe=a("strong"),Bet=o("wav2vec2"),Iet=o(" \u2014 "),mte=a("a"),Net=o("FlaxWav2Vec2ForPreTraining"),qet=o(" (Wav2Vec2 model)"),jet=l(),i0=a("li"),Kwe=a("strong"),Det=o("xlm-roberta"),Get=o(" \u2014 "),gte=a("a"),Oet=o("FlaxXLMRobertaForMaskedLM"),Vet=o(" (XLM-RoBERTa model)"),Xet=l(),F(d0.$$.fragment),QHe=l(),Cf=a("h2"),c0=a("a"),Zwe=a("span"),F(Wk.$$.fragment),zet=l(),eAe=a("span"),Wet=o("FlaxAutoModelForMaskedLM"),UHe=l(),Mr=a("div"),F(Qk.$$.fragment),Qet=l(),wf=a("p"),Uet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hte=a("a"),Het=o("from_pretrained()"),Jet=o(" class method or the "),pte=a("a"),Yet=o("from_config()"),Ket=o(` class
method.`),Zet=l(),Uk=a("p"),eot=o("This class cannot be instantiated directly using "),oAe=a("code"),oot=o("__init__()"),rot=o(" (throws an error)."),tot=l(),ra=a("div"),F(Hk.$$.fragment),aot=l(),rAe=a("p"),not=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sot=l(),Af=a("p"),lot=o(`Note:
Loading a model from its configuration file does `),tAe=a("strong"),iot=o("not"),dot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=a("a"),cot=o("from_pretrained()"),fot=o(" to load the model weights."),mot=l(),F(f0.$$.fragment),got=l(),Yr=a("div"),F(Jk.$$.fragment),hot=l(),aAe=a("p"),pot=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_ot=l(),Pn=a("p"),uot=o("The model class to instantiate is selected based on the "),nAe=a("code"),bot=o("model_type"),vot=o(` property of the config object (either
passed as an argument or loaded from `),sAe=a("code"),Fot=o("pretrained_model_name_or_path"),Tot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lAe=a("code"),Mot=o("pretrained_model_name_or_path"),Eot=o(":"),Cot=l(),$e=a("ul"),m0=a("li"),iAe=a("strong"),wot=o("albert"),Aot=o(" \u2014 "),ute=a("a"),Lot=o("FlaxAlbertForMaskedLM"),yot=o(" (ALBERT model)"),xot=l(),g0=a("li"),dAe=a("strong"),$ot=o("bart"),kot=o(" \u2014 "),bte=a("a"),Sot=o("FlaxBartForConditionalGeneration"),Rot=o(" (BART model)"),Pot=l(),h0=a("li"),cAe=a("strong"),Bot=o("bert"),Iot=o(" \u2014 "),vte=a("a"),Not=o("FlaxBertForMaskedLM"),qot=o(" (BERT model)"),jot=l(),p0=a("li"),fAe=a("strong"),Dot=o("big_bird"),Got=o(" \u2014 "),Fte=a("a"),Oot=o("FlaxBigBirdForMaskedLM"),Vot=o(" (BigBird model)"),Xot=l(),_0=a("li"),mAe=a("strong"),zot=o("distilbert"),Wot=o(" \u2014 "),Tte=a("a"),Qot=o("FlaxDistilBertForMaskedLM"),Uot=o(" (DistilBERT model)"),Hot=l(),u0=a("li"),gAe=a("strong"),Jot=o("electra"),Yot=o(" \u2014 "),Mte=a("a"),Kot=o("FlaxElectraForMaskedLM"),Zot=o(" (ELECTRA model)"),ert=l(),b0=a("li"),hAe=a("strong"),ort=o("mbart"),rrt=o(" \u2014 "),Ete=a("a"),trt=o("FlaxMBartForConditionalGeneration"),art=o(" (mBART model)"),nrt=l(),v0=a("li"),pAe=a("strong"),srt=o("roberta"),lrt=o(" \u2014 "),Cte=a("a"),irt=o("FlaxRobertaForMaskedLM"),drt=o(" (RoBERTa model)"),crt=l(),F0=a("li"),_Ae=a("strong"),frt=o("roformer"),mrt=o(" \u2014 "),wte=a("a"),grt=o("FlaxRoFormerForMaskedLM"),hrt=o(" (RoFormer model)"),prt=l(),T0=a("li"),uAe=a("strong"),_rt=o("xlm-roberta"),urt=o(" \u2014 "),Ate=a("a"),brt=o("FlaxXLMRobertaForMaskedLM"),vrt=o(" (XLM-RoBERTa model)"),Frt=l(),F(M0.$$.fragment),HHe=l(),Lf=a("h2"),E0=a("a"),bAe=a("span"),F(Yk.$$.fragment),Trt=l(),vAe=a("span"),Mrt=o("FlaxAutoModelForSeq2SeqLM"),JHe=l(),Er=a("div"),F(Kk.$$.fragment),Ert=l(),yf=a("p"),Crt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lte=a("a"),wrt=o("from_pretrained()"),Art=o(" class method or the "),yte=a("a"),Lrt=o("from_config()"),yrt=o(` class
method.`),xrt=l(),Zk=a("p"),$rt=o("This class cannot be instantiated directly using "),FAe=a("code"),krt=o("__init__()"),Srt=o(" (throws an error)."),Rrt=l(),ta=a("div"),F(eS.$$.fragment),Prt=l(),TAe=a("p"),Brt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Irt=l(),xf=a("p"),Nrt=o(`Note:
Loading a model from its configuration file does `),MAe=a("strong"),qrt=o("not"),jrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xte=a("a"),Drt=o("from_pretrained()"),Grt=o(" to load the model weights."),Ort=l(),F(C0.$$.fragment),Vrt=l(),Kr=a("div"),F(oS.$$.fragment),Xrt=l(),EAe=a("p"),zrt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wrt=l(),Bn=a("p"),Qrt=o("The model class to instantiate is selected based on the "),CAe=a("code"),Urt=o("model_type"),Hrt=o(` property of the config object (either
passed as an argument or loaded from `),wAe=a("code"),Jrt=o("pretrained_model_name_or_path"),Yrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AAe=a("code"),Krt=o("pretrained_model_name_or_path"),Zrt=o(":"),ett=l(),ke=a("ul"),w0=a("li"),LAe=a("strong"),ott=o("bart"),rtt=o(" \u2014 "),$te=a("a"),ttt=o("FlaxBartForConditionalGeneration"),att=o(" (BART model)"),ntt=l(),A0=a("li"),yAe=a("strong"),stt=o("blenderbot"),ltt=o(" \u2014 "),kte=a("a"),itt=o("FlaxBlenderbotForConditionalGeneration"),dtt=o(" (Blenderbot model)"),ctt=l(),L0=a("li"),xAe=a("strong"),ftt=o("blenderbot-small"),mtt=o(" \u2014 "),Ste=a("a"),gtt=o("FlaxBlenderbotSmallForConditionalGeneration"),htt=o(" (BlenderbotSmall model)"),ptt=l(),y0=a("li"),$Ae=a("strong"),_tt=o("encoder-decoder"),utt=o(" \u2014 "),Rte=a("a"),btt=o("FlaxEncoderDecoderModel"),vtt=o(" (Encoder decoder model)"),Ftt=l(),x0=a("li"),kAe=a("strong"),Ttt=o("longt5"),Mtt=o(" \u2014 "),Pte=a("a"),Ett=o("FlaxLongT5ForConditionalGeneration"),Ctt=o(" (LongT5 model)"),wtt=l(),$0=a("li"),SAe=a("strong"),Att=o("marian"),Ltt=o(" \u2014 "),Bte=a("a"),ytt=o("FlaxMarianMTModel"),xtt=o(" (Marian model)"),$tt=l(),k0=a("li"),RAe=a("strong"),ktt=o("mbart"),Stt=o(" \u2014 "),Ite=a("a"),Rtt=o("FlaxMBartForConditionalGeneration"),Ptt=o(" (mBART model)"),Btt=l(),S0=a("li"),PAe=a("strong"),Itt=o("mt5"),Ntt=o(" \u2014 "),Nte=a("a"),qtt=o("FlaxMT5ForConditionalGeneration"),jtt=o(" (MT5 model)"),Dtt=l(),R0=a("li"),BAe=a("strong"),Gtt=o("pegasus"),Ott=o(" \u2014 "),qte=a("a"),Vtt=o("FlaxPegasusForConditionalGeneration"),Xtt=o(" (Pegasus model)"),ztt=l(),P0=a("li"),IAe=a("strong"),Wtt=o("t5"),Qtt=o(" \u2014 "),jte=a("a"),Utt=o("FlaxT5ForConditionalGeneration"),Htt=o(" (T5 model)"),Jtt=l(),F(B0.$$.fragment),YHe=l(),$f=a("h2"),I0=a("a"),NAe=a("span"),F(rS.$$.fragment),Ytt=l(),qAe=a("span"),Ktt=o("FlaxAutoModelForSequenceClassification"),KHe=l(),Cr=a("div"),F(tS.$$.fragment),Ztt=l(),kf=a("p"),eat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Dte=a("a"),oat=o("from_pretrained()"),rat=o(" class method or the "),Gte=a("a"),tat=o("from_config()"),aat=o(` class
method.`),nat=l(),aS=a("p"),sat=o("This class cannot be instantiated directly using "),jAe=a("code"),lat=o("__init__()"),iat=o(" (throws an error)."),dat=l(),aa=a("div"),F(nS.$$.fragment),cat=l(),DAe=a("p"),fat=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mat=l(),Sf=a("p"),gat=o(`Note:
Loading a model from its configuration file does `),GAe=a("strong"),hat=o("not"),pat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ote=a("a"),_at=o("from_pretrained()"),uat=o(" to load the model weights."),bat=l(),F(N0.$$.fragment),vat=l(),Zr=a("div"),F(sS.$$.fragment),Fat=l(),OAe=a("p"),Tat=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Mat=l(),In=a("p"),Eat=o("The model class to instantiate is selected based on the "),VAe=a("code"),Cat=o("model_type"),wat=o(` property of the config object (either
passed as an argument or loaded from `),XAe=a("code"),Aat=o("pretrained_model_name_or_path"),Lat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zAe=a("code"),yat=o("pretrained_model_name_or_path"),xat=o(":"),$at=l(),Se=a("ul"),q0=a("li"),WAe=a("strong"),kat=o("albert"),Sat=o(" \u2014 "),Vte=a("a"),Rat=o("FlaxAlbertForSequenceClassification"),Pat=o(" (ALBERT model)"),Bat=l(),j0=a("li"),QAe=a("strong"),Iat=o("bart"),Nat=o(" \u2014 "),Xte=a("a"),qat=o("FlaxBartForSequenceClassification"),jat=o(" (BART model)"),Dat=l(),D0=a("li"),UAe=a("strong"),Gat=o("bert"),Oat=o(" \u2014 "),zte=a("a"),Vat=o("FlaxBertForSequenceClassification"),Xat=o(" (BERT model)"),zat=l(),G0=a("li"),HAe=a("strong"),Wat=o("big_bird"),Qat=o(" \u2014 "),Wte=a("a"),Uat=o("FlaxBigBirdForSequenceClassification"),Hat=o(" (BigBird model)"),Jat=l(),O0=a("li"),JAe=a("strong"),Yat=o("distilbert"),Kat=o(" \u2014 "),Qte=a("a"),Zat=o("FlaxDistilBertForSequenceClassification"),ent=o(" (DistilBERT model)"),ont=l(),V0=a("li"),YAe=a("strong"),rnt=o("electra"),tnt=o(" \u2014 "),Ute=a("a"),ant=o("FlaxElectraForSequenceClassification"),nnt=o(" (ELECTRA model)"),snt=l(),X0=a("li"),KAe=a("strong"),lnt=o("mbart"),int=o(" \u2014 "),Hte=a("a"),dnt=o("FlaxMBartForSequenceClassification"),cnt=o(" (mBART model)"),fnt=l(),z0=a("li"),ZAe=a("strong"),mnt=o("roberta"),gnt=o(" \u2014 "),Jte=a("a"),hnt=o("FlaxRobertaForSequenceClassification"),pnt=o(" (RoBERTa model)"),_nt=l(),W0=a("li"),eLe=a("strong"),unt=o("roformer"),bnt=o(" \u2014 "),Yte=a("a"),vnt=o("FlaxRoFormerForSequenceClassification"),Fnt=o(" (RoFormer model)"),Tnt=l(),Q0=a("li"),oLe=a("strong"),Mnt=o("xlm-roberta"),Ent=o(" \u2014 "),Kte=a("a"),Cnt=o("FlaxXLMRobertaForSequenceClassification"),wnt=o(" (XLM-RoBERTa model)"),Ant=l(),F(U0.$$.fragment),ZHe=l(),Rf=a("h2"),H0=a("a"),rLe=a("span"),F(lS.$$.fragment),Lnt=l(),tLe=a("span"),ynt=o("FlaxAutoModelForQuestionAnswering"),eJe=l(),wr=a("div"),F(iS.$$.fragment),xnt=l(),Pf=a("p"),$nt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zte=a("a"),knt=o("from_pretrained()"),Snt=o(" class method or the "),eae=a("a"),Rnt=o("from_config()"),Pnt=o(` class
method.`),Bnt=l(),dS=a("p"),Int=o("This class cannot be instantiated directly using "),aLe=a("code"),Nnt=o("__init__()"),qnt=o(" (throws an error)."),jnt=l(),na=a("div"),F(cS.$$.fragment),Dnt=l(),nLe=a("p"),Gnt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ont=l(),Bf=a("p"),Vnt=o(`Note:
Loading a model from its configuration file does `),sLe=a("strong"),Xnt=o("not"),znt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=a("a"),Wnt=o("from_pretrained()"),Qnt=o(" to load the model weights."),Unt=l(),F(J0.$$.fragment),Hnt=l(),et=a("div"),F(fS.$$.fragment),Jnt=l(),lLe=a("p"),Ynt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Knt=l(),Nn=a("p"),Znt=o("The model class to instantiate is selected based on the "),iLe=a("code"),est=o("model_type"),ost=o(` property of the config object (either
passed as an argument or loaded from `),dLe=a("code"),rst=o("pretrained_model_name_or_path"),tst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cLe=a("code"),ast=o("pretrained_model_name_or_path"),nst=o(":"),sst=l(),Re=a("ul"),Y0=a("li"),fLe=a("strong"),lst=o("albert"),ist=o(" \u2014 "),rae=a("a"),dst=o("FlaxAlbertForQuestionAnswering"),cst=o(" (ALBERT model)"),fst=l(),K0=a("li"),mLe=a("strong"),mst=o("bart"),gst=o(" \u2014 "),tae=a("a"),hst=o("FlaxBartForQuestionAnswering"),pst=o(" (BART model)"),_st=l(),Z0=a("li"),gLe=a("strong"),ust=o("bert"),bst=o(" \u2014 "),aae=a("a"),vst=o("FlaxBertForQuestionAnswering"),Fst=o(" (BERT model)"),Tst=l(),ew=a("li"),hLe=a("strong"),Mst=o("big_bird"),Est=o(" \u2014 "),nae=a("a"),Cst=o("FlaxBigBirdForQuestionAnswering"),wst=o(" (BigBird model)"),Ast=l(),ow=a("li"),pLe=a("strong"),Lst=o("distilbert"),yst=o(" \u2014 "),sae=a("a"),xst=o("FlaxDistilBertForQuestionAnswering"),$st=o(" (DistilBERT model)"),kst=l(),rw=a("li"),_Le=a("strong"),Sst=o("electra"),Rst=o(" \u2014 "),lae=a("a"),Pst=o("FlaxElectraForQuestionAnswering"),Bst=o(" (ELECTRA model)"),Ist=l(),tw=a("li"),uLe=a("strong"),Nst=o("mbart"),qst=o(" \u2014 "),iae=a("a"),jst=o("FlaxMBartForQuestionAnswering"),Dst=o(" (mBART model)"),Gst=l(),aw=a("li"),bLe=a("strong"),Ost=o("roberta"),Vst=o(" \u2014 "),dae=a("a"),Xst=o("FlaxRobertaForQuestionAnswering"),zst=o(" (RoBERTa model)"),Wst=l(),nw=a("li"),vLe=a("strong"),Qst=o("roformer"),Ust=o(" \u2014 "),cae=a("a"),Hst=o("FlaxRoFormerForQuestionAnswering"),Jst=o(" (RoFormer model)"),Yst=l(),sw=a("li"),FLe=a("strong"),Kst=o("xlm-roberta"),Zst=o(" \u2014 "),fae=a("a"),elt=o("FlaxXLMRobertaForQuestionAnswering"),olt=o(" (XLM-RoBERTa model)"),rlt=l(),F(lw.$$.fragment),oJe=l(),If=a("h2"),iw=a("a"),TLe=a("span"),F(mS.$$.fragment),tlt=l(),MLe=a("span"),alt=o("FlaxAutoModelForTokenClassification"),rJe=l(),Ar=a("div"),F(gS.$$.fragment),nlt=l(),Nf=a("p"),slt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mae=a("a"),llt=o("from_pretrained()"),ilt=o(" class method or the "),gae=a("a"),dlt=o("from_config()"),clt=o(` class
method.`),flt=l(),hS=a("p"),mlt=o("This class cannot be instantiated directly using "),ELe=a("code"),glt=o("__init__()"),hlt=o(" (throws an error)."),plt=l(),sa=a("div"),F(pS.$$.fragment),_lt=l(),CLe=a("p"),ult=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),blt=l(),qf=a("p"),vlt=o(`Note:
Loading a model from its configuration file does `),wLe=a("strong"),Flt=o("not"),Tlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hae=a("a"),Mlt=o("from_pretrained()"),Elt=o(" to load the model weights."),Clt=l(),F(dw.$$.fragment),wlt=l(),ot=a("div"),F(_S.$$.fragment),Alt=l(),ALe=a("p"),Llt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ylt=l(),qn=a("p"),xlt=o("The model class to instantiate is selected based on the "),LLe=a("code"),$lt=o("model_type"),klt=o(` property of the config object (either
passed as an argument or loaded from `),yLe=a("code"),Slt=o("pretrained_model_name_or_path"),Rlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xLe=a("code"),Plt=o("pretrained_model_name_or_path"),Blt=o(":"),Ilt=l(),Xe=a("ul"),cw=a("li"),$Le=a("strong"),Nlt=o("albert"),qlt=o(" \u2014 "),pae=a("a"),jlt=o("FlaxAlbertForTokenClassification"),Dlt=o(" (ALBERT model)"),Glt=l(),fw=a("li"),kLe=a("strong"),Olt=o("bert"),Vlt=o(" \u2014 "),_ae=a("a"),Xlt=o("FlaxBertForTokenClassification"),zlt=o(" (BERT model)"),Wlt=l(),mw=a("li"),SLe=a("strong"),Qlt=o("big_bird"),Ult=o(" \u2014 "),uae=a("a"),Hlt=o("FlaxBigBirdForTokenClassification"),Jlt=o(" (BigBird model)"),Ylt=l(),gw=a("li"),RLe=a("strong"),Klt=o("distilbert"),Zlt=o(" \u2014 "),bae=a("a"),eit=o("FlaxDistilBertForTokenClassification"),oit=o(" (DistilBERT model)"),rit=l(),hw=a("li"),PLe=a("strong"),tit=o("electra"),ait=o(" \u2014 "),vae=a("a"),nit=o("FlaxElectraForTokenClassification"),sit=o(" (ELECTRA model)"),lit=l(),pw=a("li"),BLe=a("strong"),iit=o("roberta"),dit=o(" \u2014 "),Fae=a("a"),cit=o("FlaxRobertaForTokenClassification"),fit=o(" (RoBERTa model)"),mit=l(),_w=a("li"),ILe=a("strong"),git=o("roformer"),hit=o(" \u2014 "),Tae=a("a"),pit=o("FlaxRoFormerForTokenClassification"),_it=o(" (RoFormer model)"),uit=l(),uw=a("li"),NLe=a("strong"),bit=o("xlm-roberta"),vit=o(" \u2014 "),Mae=a("a"),Fit=o("FlaxXLMRobertaForTokenClassification"),Tit=o(" (XLM-RoBERTa model)"),Mit=l(),F(bw.$$.fragment),tJe=l(),jf=a("h2"),vw=a("a"),qLe=a("span"),F(uS.$$.fragment),Eit=l(),jLe=a("span"),Cit=o("FlaxAutoModelForMultipleChoice"),aJe=l(),Lr=a("div"),F(bS.$$.fragment),wit=l(),Df=a("p"),Ait=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Eae=a("a"),Lit=o("from_pretrained()"),yit=o(" class method or the "),Cae=a("a"),xit=o("from_config()"),$it=o(` class
method.`),kit=l(),vS=a("p"),Sit=o("This class cannot be instantiated directly using "),DLe=a("code"),Rit=o("__init__()"),Pit=o(" (throws an error)."),Bit=l(),la=a("div"),F(FS.$$.fragment),Iit=l(),GLe=a("p"),Nit=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qit=l(),Gf=a("p"),jit=o(`Note:
Loading a model from its configuration file does `),OLe=a("strong"),Dit=o("not"),Git=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wae=a("a"),Oit=o("from_pretrained()"),Vit=o(" to load the model weights."),Xit=l(),F(Fw.$$.fragment),zit=l(),rt=a("div"),F(TS.$$.fragment),Wit=l(),VLe=a("p"),Qit=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Uit=l(),jn=a("p"),Hit=o("The model class to instantiate is selected based on the "),XLe=a("code"),Jit=o("model_type"),Yit=o(` property of the config object (either
passed as an argument or loaded from `),zLe=a("code"),Kit=o("pretrained_model_name_or_path"),Zit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WLe=a("code"),edt=o("pretrained_model_name_or_path"),odt=o(":"),rdt=l(),ze=a("ul"),Tw=a("li"),QLe=a("strong"),tdt=o("albert"),adt=o(" \u2014 "),Aae=a("a"),ndt=o("FlaxAlbertForMultipleChoice"),sdt=o(" (ALBERT model)"),ldt=l(),Mw=a("li"),ULe=a("strong"),idt=o("bert"),ddt=o(" \u2014 "),Lae=a("a"),cdt=o("FlaxBertForMultipleChoice"),fdt=o(" (BERT model)"),mdt=l(),Ew=a("li"),HLe=a("strong"),gdt=o("big_bird"),hdt=o(" \u2014 "),yae=a("a"),pdt=o("FlaxBigBirdForMultipleChoice"),_dt=o(" (BigBird model)"),udt=l(),Cw=a("li"),JLe=a("strong"),bdt=o("distilbert"),vdt=o(" \u2014 "),xae=a("a"),Fdt=o("FlaxDistilBertForMultipleChoice"),Tdt=o(" (DistilBERT model)"),Mdt=l(),ww=a("li"),YLe=a("strong"),Edt=o("electra"),Cdt=o(" \u2014 "),$ae=a("a"),wdt=o("FlaxElectraForMultipleChoice"),Adt=o(" (ELECTRA model)"),Ldt=l(),Aw=a("li"),KLe=a("strong"),ydt=o("roberta"),xdt=o(" \u2014 "),kae=a("a"),$dt=o("FlaxRobertaForMultipleChoice"),kdt=o(" (RoBERTa model)"),Sdt=l(),Lw=a("li"),ZLe=a("strong"),Rdt=o("roformer"),Pdt=o(" \u2014 "),Sae=a("a"),Bdt=o("FlaxRoFormerForMultipleChoice"),Idt=o(" (RoFormer model)"),Ndt=l(),yw=a("li"),eye=a("strong"),qdt=o("xlm-roberta"),jdt=o(" \u2014 "),Rae=a("a"),Ddt=o("FlaxXLMRobertaForMultipleChoice"),Gdt=o(" (XLM-RoBERTa model)"),Odt=l(),F(xw.$$.fragment),nJe=l(),Of=a("h2"),$w=a("a"),oye=a("span"),F(MS.$$.fragment),Vdt=l(),rye=a("span"),Xdt=o("FlaxAutoModelForNextSentencePrediction"),sJe=l(),yr=a("div"),F(ES.$$.fragment),zdt=l(),Vf=a("p"),Wdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pae=a("a"),Qdt=o("from_pretrained()"),Udt=o(" class method or the "),Bae=a("a"),Hdt=o("from_config()"),Jdt=o(` class
method.`),Ydt=l(),CS=a("p"),Kdt=o("This class cannot be instantiated directly using "),tye=a("code"),Zdt=o("__init__()"),ect=o(" (throws an error)."),oct=l(),ia=a("div"),F(wS.$$.fragment),rct=l(),aye=a("p"),tct=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),act=l(),Xf=a("p"),nct=o(`Note:
Loading a model from its configuration file does `),nye=a("strong"),sct=o("not"),lct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iae=a("a"),ict=o("from_pretrained()"),dct=o(" to load the model weights."),cct=l(),F(kw.$$.fragment),fct=l(),tt=a("div"),F(AS.$$.fragment),mct=l(),sye=a("p"),gct=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hct=l(),Dn=a("p"),pct=o("The model class to instantiate is selected based on the "),lye=a("code"),_ct=o("model_type"),uct=o(` property of the config object (either
passed as an argument or loaded from `),iye=a("code"),bct=o("pretrained_model_name_or_path"),vct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dye=a("code"),Fct=o("pretrained_model_name_or_path"),Tct=o(":"),Mct=l(),cye=a("ul"),Sw=a("li"),fye=a("strong"),Ect=o("bert"),Cct=o(" \u2014 "),Nae=a("a"),wct=o("FlaxBertForNextSentencePrediction"),Act=o(" (BERT model)"),Lct=l(),F(Rw.$$.fragment),lJe=l(),zf=a("h2"),Pw=a("a"),mye=a("span"),F(LS.$$.fragment),yct=l(),gye=a("span"),xct=o("FlaxAutoModelForImageClassification"),iJe=l(),xr=a("div"),F(yS.$$.fragment),$ct=l(),Wf=a("p"),kct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qae=a("a"),Sct=o("from_pretrained()"),Rct=o(" class method or the "),jae=a("a"),Pct=o("from_config()"),Bct=o(` class
method.`),Ict=l(),xS=a("p"),Nct=o("This class cannot be instantiated directly using "),hye=a("code"),qct=o("__init__()"),jct=o(" (throws an error)."),Dct=l(),da=a("div"),F($S.$$.fragment),Gct=l(),pye=a("p"),Oct=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vct=l(),Qf=a("p"),Xct=o(`Note:
Loading a model from its configuration file does `),_ye=a("strong"),zct=o("not"),Wct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dae=a("a"),Qct=o("from_pretrained()"),Uct=o(" to load the model weights."),Hct=l(),F(Bw.$$.fragment),Jct=l(),at=a("div"),F(kS.$$.fragment),Yct=l(),uye=a("p"),Kct=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zct=l(),Gn=a("p"),eft=o("The model class to instantiate is selected based on the "),bye=a("code"),oft=o("model_type"),rft=o(` property of the config object (either
passed as an argument or loaded from `),vye=a("code"),tft=o("pretrained_model_name_or_path"),aft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fye=a("code"),nft=o("pretrained_model_name_or_path"),sft=o(":"),lft=l(),SS=a("ul"),Iw=a("li"),Tye=a("strong"),ift=o("beit"),dft=o(" \u2014 "),Gae=a("a"),cft=o("FlaxBeitForImageClassification"),fft=o(" (BEiT model)"),mft=l(),Nw=a("li"),Mye=a("strong"),gft=o("vit"),hft=o(" \u2014 "),Oae=a("a"),pft=o("FlaxViTForImageClassification"),_ft=o(" (ViT model)"),uft=l(),F(qw.$$.fragment),dJe=l(),Uf=a("h2"),jw=a("a"),Eye=a("span"),F(RS.$$.fragment),bft=l(),Cye=a("span"),vft=o("FlaxAutoModelForVision2Seq"),cJe=l(),$r=a("div"),F(PS.$$.fragment),Fft=l(),Hf=a("p"),Tft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Vae=a("a"),Mft=o("from_pretrained()"),Eft=o(" class method or the "),Xae=a("a"),Cft=o("from_config()"),wft=o(` class
method.`),Aft=l(),BS=a("p"),Lft=o("This class cannot be instantiated directly using "),wye=a("code"),yft=o("__init__()"),xft=o(" (throws an error)."),$ft=l(),ca=a("div"),F(IS.$$.fragment),kft=l(),Aye=a("p"),Sft=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rft=l(),Jf=a("p"),Pft=o(`Note:
Loading a model from its configuration file does `),Lye=a("strong"),Bft=o("not"),Ift=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zae=a("a"),Nft=o("from_pretrained()"),qft=o(" to load the model weights."),jft=l(),F(Dw.$$.fragment),Dft=l(),nt=a("div"),F(NS.$$.fragment),Gft=l(),yye=a("p"),Oft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vft=l(),On=a("p"),Xft=o("The model class to instantiate is selected based on the "),xye=a("code"),zft=o("model_type"),Wft=o(` property of the config object (either
passed as an argument or loaded from `),$ye=a("code"),Qft=o("pretrained_model_name_or_path"),Uft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kye=a("code"),Hft=o("pretrained_model_name_or_path"),Jft=o(":"),Yft=l(),Sye=a("ul"),Gw=a("li"),Rye=a("strong"),Kft=o("vision-encoder-decoder"),Zft=o(" \u2014 "),Wae=a("a"),emt=o("FlaxVisionEncoderDecoderModel"),omt=o(" (Vision Encoder decoder model)"),rmt=l(),F(Ow.$$.fragment),this.h()},l(f){const u=Ata('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var qS=s(p);m=n(qS,"A",{id:!0,class:!0,href:!0});var Pye=s(m);_=n(Pye,"SPAN",{});var Bye=s(_);T(d.$$.fragment,Bye),Bye.forEach(t),Pye.forEach(t),h=i(qS),Ao=n(qS,"SPAN",{});var Iye=s(Ao);Oi=r(Iye,"Auto Classes"),Iye.forEach(t),qS.forEach(t),em=i(f),ft=n(f,"P",{});var jS=s(ft);Vi=r(jS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(jS,"CODE",{});var Nye=s(Xi);gy=r(Nye,"from_pretrained()"),Nye.forEach(t),om=r(jS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),jS.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Vn=s(Qe);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var qye=s(Xn);hy=r(qye,"AutoConfig"),qye.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var jye=s(Wn);py=r(jye,"AutoModel"),jye.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var Dye=s(Qn);_y=r(Dye,"AutoTokenizer"),Dye.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rm=i(f),T(ja.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var DS=s(Ae);lP=r(DS,"will create a model that is an instance of "),Ui=n(DS,"A",{href:!0});var Gye=s(Ui);iP=r(Gye,"BertModel"),Gye.forEach(t),dP=r(DS,"."),DS.forEach(t),Lo=i(f),Da=n(f,"P",{});var GS=s(Da);cP=r(GS,"There is one class of "),tm=n(GS,"CODE",{});var Oye=s(tm);fP=r(Oye,"AutoModel"),Oye.forEach(t),AKe=r(GS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GS.forEach(t),rUe=i(f),Hi=n(f,"H2",{class:!0});var OS=s(Hi);am=n(OS,"A",{id:!0,class:!0,href:!0});var Vye=s(am);Xse=n(Vye,"SPAN",{});var Xye=s(Xse);T(uy.$$.fragment,Xye),Xye.forEach(t),Vye.forEach(t),LKe=i(OS),zse=n(OS,"SPAN",{});var zye=s(zse);yKe=r(zye,"Extending the Auto Classes"),zye.forEach(t),OS.forEach(t),tUe=i(f),Un=n(f,"P",{});var Yf=s(Un);xKe=r(Yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wse=n(Yf,"CODE",{});var Wye=s(Wse);$Ke=r(Wye,"NewModel"),Wye.forEach(t),kKe=r(Yf,", make sure you have a "),Qse=n(Yf,"CODE",{});var Qye=s(Qse);SKe=r(Qye,"NewModelConfig"),Qye.forEach(t),RKe=r(Yf,` then you can add those to the auto
classes like this:`),Yf.forEach(t),aUe=i(f),T(by.$$.fragment,f),nUe=i(f),mP=n(f,"P",{});var Uye=s(mP);PKe=r(Uye,"You will then be able to use the auto classes like you would usually do!"),Uye.forEach(t),sUe=i(f),T(nm.$$.fragment,f),lUe=i(f),Ji=n(f,"H2",{class:!0});var VS=s(Ji);sm=n(VS,"A",{id:!0,class:!0,href:!0});var Hye=s(sm);Use=n(Hye,"SPAN",{});var Jye=s(Use);T(vy.$$.fragment,Jye),Jye.forEach(t),Hye.forEach(t),BKe=i(VS),Hse=n(VS,"SPAN",{});var Yye=s(Hse);IKe=r(Yye,"AutoConfig"),Yye.forEach(t),VS.forEach(t),iUe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(Fy.$$.fragment,dt),NKe=i(dt),Ty=n(dt,"P",{});var XS=s(Ty);qKe=r(XS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gP=n(XS,"A",{href:!0});var Kye=s(gP);jKe=r(Kye,"from_pretrained()"),Kye.forEach(t),DKe=r(XS," class method."),XS.forEach(t),GKe=i(dt),My=n(dt,"P",{});var zS=s(My);OKe=r(zS,"This class cannot be instantiated directly using "),Jse=n(zS,"CODE",{});var Zye=s(Jse);VKe=r(Zye,"__init__()"),Zye.forEach(t),XKe=r(zS," (throws an error)."),zS.forEach(t),zKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(Ey.$$.fragment,ct),WKe=i(ct),Yse=n(ct,"P",{});var e9e=s(Yse);QKe=r(e9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e9e.forEach(t),UKe=i(ct),Yi=n(ct,"P",{});var Kf=s(Yi);HKe=r(Kf,"The configuration class to instantiate is selected based on the "),Kse=n(Kf,"CODE",{});var o9e=s(Kse);JKe=r(o9e,"model_type"),o9e.forEach(t),YKe=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zse=n(Kf,"CODE",{});var r9e=s(Zse);KKe=r(r9e,"pretrained_model_name_or_path"),r9e.forEach(t),ZKe=r(Kf,":"),Kf.forEach(t),eZe=i(ct),A=n(ct,"UL",{});var L=s(A);lm=n(L,"LI",{});var Vw=s(lm);ele=n(Vw,"STRONG",{});var t9e=s(ele);oZe=r(t9e,"albert"),t9e.forEach(t),rZe=r(Vw," \u2014 "),hP=n(Vw,"A",{href:!0});var a9e=s(hP);tZe=r(a9e,"AlbertConfig"),a9e.forEach(t),aZe=r(Vw," (ALBERT model)"),Vw.forEach(t),nZe=i(L),im=n(L,"LI",{});var Xw=s(im);ole=n(Xw,"STRONG",{});var n9e=s(ole);sZe=r(n9e,"bart"),n9e.forEach(t),lZe=r(Xw," \u2014 "),pP=n(Xw,"A",{href:!0});var s9e=s(pP);iZe=r(s9e,"BartConfig"),s9e.forEach(t),dZe=r(Xw," (BART model)"),Xw.forEach(t),cZe=i(L),dm=n(L,"LI",{});var zw=s(dm);rle=n(zw,"STRONG",{});var l9e=s(rle);fZe=r(l9e,"beit"),l9e.forEach(t),mZe=r(zw," \u2014 "),_P=n(zw,"A",{href:!0});var i9e=s(_P);gZe=r(i9e,"BeitConfig"),i9e.forEach(t),hZe=r(zw," (BEiT model)"),zw.forEach(t),pZe=i(L),cm=n(L,"LI",{});var Ww=s(cm);tle=n(Ww,"STRONG",{});var d9e=s(tle);_Ze=r(d9e,"bert"),d9e.forEach(t),uZe=r(Ww," \u2014 "),uP=n(Ww,"A",{href:!0});var c9e=s(uP);bZe=r(c9e,"BertConfig"),c9e.forEach(t),vZe=r(Ww," (BERT model)"),Ww.forEach(t),FZe=i(L),fm=n(L,"LI",{});var Qw=s(fm);ale=n(Qw,"STRONG",{});var f9e=s(ale);TZe=r(f9e,"bert-generation"),f9e.forEach(t),MZe=r(Qw," \u2014 "),bP=n(Qw,"A",{href:!0});var m9e=s(bP);EZe=r(m9e,"BertGenerationConfig"),m9e.forEach(t),CZe=r(Qw," (Bert Generation model)"),Qw.forEach(t),wZe=i(L),mm=n(L,"LI",{});var Uw=s(mm);nle=n(Uw,"STRONG",{});var g9e=s(nle);AZe=r(g9e,"big_bird"),g9e.forEach(t),LZe=r(Uw," \u2014 "),vP=n(Uw,"A",{href:!0});var h9e=s(vP);yZe=r(h9e,"BigBirdConfig"),h9e.forEach(t),xZe=r(Uw," (BigBird model)"),Uw.forEach(t),$Ze=i(L),gm=n(L,"LI",{});var Hw=s(gm);sle=n(Hw,"STRONG",{});var p9e=s(sle);kZe=r(p9e,"bigbird_pegasus"),p9e.forEach(t),SZe=r(Hw," \u2014 "),FP=n(Hw,"A",{href:!0});var _9e=s(FP);RZe=r(_9e,"BigBirdPegasusConfig"),_9e.forEach(t),PZe=r(Hw," (BigBird-Pegasus model)"),Hw.forEach(t),BZe=i(L),hm=n(L,"LI",{});var Jw=s(hm);lle=n(Jw,"STRONG",{});var u9e=s(lle);IZe=r(u9e,"blenderbot"),u9e.forEach(t),NZe=r(Jw," \u2014 "),TP=n(Jw,"A",{href:!0});var b9e=s(TP);qZe=r(b9e,"BlenderbotConfig"),b9e.forEach(t),jZe=r(Jw," (Blenderbot model)"),Jw.forEach(t),DZe=i(L),pm=n(L,"LI",{});var Yw=s(pm);ile=n(Yw,"STRONG",{});var v9e=s(ile);GZe=r(v9e,"blenderbot-small"),v9e.forEach(t),OZe=r(Yw," \u2014 "),MP=n(Yw,"A",{href:!0});var F9e=s(MP);VZe=r(F9e,"BlenderbotSmallConfig"),F9e.forEach(t),XZe=r(Yw," (BlenderbotSmall model)"),Yw.forEach(t),zZe=i(L),_m=n(L,"LI",{});var Kw=s(_m);dle=n(Kw,"STRONG",{});var T9e=s(dle);WZe=r(T9e,"bloom"),T9e.forEach(t),QZe=r(Kw," \u2014 "),EP=n(Kw,"A",{href:!0});var M9e=s(EP);UZe=r(M9e,"BloomConfig"),M9e.forEach(t),HZe=r(Kw," (BLOOM model)"),Kw.forEach(t),JZe=i(L),um=n(L,"LI",{});var Zw=s(um);cle=n(Zw,"STRONG",{});var E9e=s(cle);YZe=r(E9e,"camembert"),E9e.forEach(t),KZe=r(Zw," \u2014 "),CP=n(Zw,"A",{href:!0});var C9e=s(CP);ZZe=r(C9e,"CamembertConfig"),C9e.forEach(t),eeo=r(Zw," (CamemBERT model)"),Zw.forEach(t),oeo=i(L),bm=n(L,"LI",{});var eA=s(bm);fle=n(eA,"STRONG",{});var w9e=s(fle);reo=r(w9e,"canine"),w9e.forEach(t),teo=r(eA," \u2014 "),wP=n(eA,"A",{href:!0});var A9e=s(wP);aeo=r(A9e,"CanineConfig"),A9e.forEach(t),neo=r(eA," (CANINE model)"),eA.forEach(t),seo=i(L),vm=n(L,"LI",{});var oA=s(vm);mle=n(oA,"STRONG",{});var L9e=s(mle);leo=r(L9e,"clip"),L9e.forEach(t),ieo=r(oA," \u2014 "),AP=n(oA,"A",{href:!0});var y9e=s(AP);deo=r(y9e,"CLIPConfig"),y9e.forEach(t),ceo=r(oA," (CLIP model)"),oA.forEach(t),feo=i(L),Fm=n(L,"LI",{});var rA=s(Fm);gle=n(rA,"STRONG",{});var x9e=s(gle);meo=r(x9e,"codegen"),x9e.forEach(t),geo=r(rA," \u2014 "),LP=n(rA,"A",{href:!0});var $9e=s(LP);heo=r($9e,"CodeGenConfig"),$9e.forEach(t),peo=r(rA," (CodeGen model)"),rA.forEach(t),_eo=i(L),Tm=n(L,"LI",{});var tA=s(Tm);hle=n(tA,"STRONG",{});var k9e=s(hle);ueo=r(k9e,"convbert"),k9e.forEach(t),beo=r(tA," \u2014 "),yP=n(tA,"A",{href:!0});var S9e=s(yP);veo=r(S9e,"ConvBertConfig"),S9e.forEach(t),Feo=r(tA," (ConvBERT model)"),tA.forEach(t),Teo=i(L),Mm=n(L,"LI",{});var aA=s(Mm);ple=n(aA,"STRONG",{});var R9e=s(ple);Meo=r(R9e,"convnext"),R9e.forEach(t),Eeo=r(aA," \u2014 "),xP=n(aA,"A",{href:!0});var P9e=s(xP);Ceo=r(P9e,"ConvNextConfig"),P9e.forEach(t),weo=r(aA," (ConvNeXT model)"),aA.forEach(t),Aeo=i(L),Em=n(L,"LI",{});var nA=s(Em);_le=n(nA,"STRONG",{});var B9e=s(_le);Leo=r(B9e,"ctrl"),B9e.forEach(t),yeo=r(nA," \u2014 "),$P=n(nA,"A",{href:!0});var I9e=s($P);xeo=r(I9e,"CTRLConfig"),I9e.forEach(t),$eo=r(nA," (CTRL model)"),nA.forEach(t),keo=i(L),Cm=n(L,"LI",{});var sA=s(Cm);ule=n(sA,"STRONG",{});var N9e=s(ule);Seo=r(N9e,"cvt"),N9e.forEach(t),Reo=r(sA," \u2014 "),kP=n(sA,"A",{href:!0});var q9e=s(kP);Peo=r(q9e,"CvtConfig"),q9e.forEach(t),Beo=r(sA," (CvT model)"),sA.forEach(t),Ieo=i(L),wm=n(L,"LI",{});var lA=s(wm);ble=n(lA,"STRONG",{});var j9e=s(ble);Neo=r(j9e,"data2vec-audio"),j9e.forEach(t),qeo=r(lA," \u2014 "),SP=n(lA,"A",{href:!0});var D9e=s(SP);jeo=r(D9e,"Data2VecAudioConfig"),D9e.forEach(t),Deo=r(lA," (Data2VecAudio model)"),lA.forEach(t),Geo=i(L),Am=n(L,"LI",{});var iA=s(Am);vle=n(iA,"STRONG",{});var G9e=s(vle);Oeo=r(G9e,"data2vec-text"),G9e.forEach(t),Veo=r(iA," \u2014 "),RP=n(iA,"A",{href:!0});var O9e=s(RP);Xeo=r(O9e,"Data2VecTextConfig"),O9e.forEach(t),zeo=r(iA," (Data2VecText model)"),iA.forEach(t),Weo=i(L),Lm=n(L,"LI",{});var dA=s(Lm);Fle=n(dA,"STRONG",{});var V9e=s(Fle);Qeo=r(V9e,"data2vec-vision"),V9e.forEach(t),Ueo=r(dA," \u2014 "),PP=n(dA,"A",{href:!0});var X9e=s(PP);Heo=r(X9e,"Data2VecVisionConfig"),X9e.forEach(t),Jeo=r(dA," (Data2VecVision model)"),dA.forEach(t),Yeo=i(L),ym=n(L,"LI",{});var cA=s(ym);Tle=n(cA,"STRONG",{});var z9e=s(Tle);Keo=r(z9e,"deberta"),z9e.forEach(t),Zeo=r(cA," \u2014 "),BP=n(cA,"A",{href:!0});var W9e=s(BP);eoo=r(W9e,"DebertaConfig"),W9e.forEach(t),ooo=r(cA," (DeBERTa model)"),cA.forEach(t),roo=i(L),xm=n(L,"LI",{});var fA=s(xm);Mle=n(fA,"STRONG",{});var Q9e=s(Mle);too=r(Q9e,"deberta-v2"),Q9e.forEach(t),aoo=r(fA," \u2014 "),IP=n(fA,"A",{href:!0});var U9e=s(IP);noo=r(U9e,"DebertaV2Config"),U9e.forEach(t),soo=r(fA," (DeBERTa-v2 model)"),fA.forEach(t),loo=i(L),$m=n(L,"LI",{});var mA=s($m);Ele=n(mA,"STRONG",{});var H9e=s(Ele);ioo=r(H9e,"decision_transformer"),H9e.forEach(t),doo=r(mA," \u2014 "),NP=n(mA,"A",{href:!0});var J9e=s(NP);coo=r(J9e,"DecisionTransformerConfig"),J9e.forEach(t),foo=r(mA," (Decision Transformer model)"),mA.forEach(t),moo=i(L),km=n(L,"LI",{});var gA=s(km);Cle=n(gA,"STRONG",{});var Y9e=s(Cle);goo=r(Y9e,"deit"),Y9e.forEach(t),hoo=r(gA," \u2014 "),qP=n(gA,"A",{href:!0});var amt=s(qP);poo=r(amt,"DeiTConfig"),amt.forEach(t),_oo=r(gA," (DeiT model)"),gA.forEach(t),uoo=i(L),Sm=n(L,"LI",{});var K9e=s(Sm);wle=n(K9e,"STRONG",{});var nmt=s(wle);boo=r(nmt,"detr"),nmt.forEach(t),voo=r(K9e," \u2014 "),jP=n(K9e,"A",{href:!0});var smt=s(jP);Foo=r(smt,"DetrConfig"),smt.forEach(t),Too=r(K9e," (DETR model)"),K9e.forEach(t),Moo=i(L),Rm=n(L,"LI",{});var Z9e=s(Rm);Ale=n(Z9e,"STRONG",{});var lmt=s(Ale);Eoo=r(lmt,"distilbert"),lmt.forEach(t),Coo=r(Z9e," \u2014 "),DP=n(Z9e,"A",{href:!0});var imt=s(DP);woo=r(imt,"DistilBertConfig"),imt.forEach(t),Aoo=r(Z9e," (DistilBERT model)"),Z9e.forEach(t),Loo=i(L),Pm=n(L,"LI",{});var exe=s(Pm);Lle=n(exe,"STRONG",{});var dmt=s(Lle);yoo=r(dmt,"donut-swin"),dmt.forEach(t),xoo=r(exe," \u2014 "),GP=n(exe,"A",{href:!0});var cmt=s(GP);$oo=r(cmt,"DonutSwinConfig"),cmt.forEach(t),koo=r(exe," (DonutSwin model)"),exe.forEach(t),Soo=i(L),Bm=n(L,"LI",{});var oxe=s(Bm);yle=n(oxe,"STRONG",{});var fmt=s(yle);Roo=r(fmt,"dpr"),fmt.forEach(t),Poo=r(oxe," \u2014 "),OP=n(oxe,"A",{href:!0});var mmt=s(OP);Boo=r(mmt,"DPRConfig"),mmt.forEach(t),Ioo=r(oxe," (DPR model)"),oxe.forEach(t),Noo=i(L),Im=n(L,"LI",{});var rxe=s(Im);xle=n(rxe,"STRONG",{});var gmt=s(xle);qoo=r(gmt,"dpt"),gmt.forEach(t),joo=r(rxe," \u2014 "),VP=n(rxe,"A",{href:!0});var hmt=s(VP);Doo=r(hmt,"DPTConfig"),hmt.forEach(t),Goo=r(rxe," (DPT model)"),rxe.forEach(t),Ooo=i(L),Nm=n(L,"LI",{});var txe=s(Nm);$le=n(txe,"STRONG",{});var pmt=s($le);Voo=r(pmt,"electra"),pmt.forEach(t),Xoo=r(txe," \u2014 "),XP=n(txe,"A",{href:!0});var _mt=s(XP);zoo=r(_mt,"ElectraConfig"),_mt.forEach(t),Woo=r(txe," (ELECTRA model)"),txe.forEach(t),Qoo=i(L),qm=n(L,"LI",{});var axe=s(qm);kle=n(axe,"STRONG",{});var umt=s(kle);Uoo=r(umt,"encoder-decoder"),umt.forEach(t),Hoo=r(axe," \u2014 "),zP=n(axe,"A",{href:!0});var bmt=s(zP);Joo=r(bmt,"EncoderDecoderConfig"),bmt.forEach(t),Yoo=r(axe," (Encoder decoder model)"),axe.forEach(t),Koo=i(L),jm=n(L,"LI",{});var nxe=s(jm);Sle=n(nxe,"STRONG",{});var vmt=s(Sle);Zoo=r(vmt,"flaubert"),vmt.forEach(t),ero=r(nxe," \u2014 "),WP=n(nxe,"A",{href:!0});var Fmt=s(WP);oro=r(Fmt,"FlaubertConfig"),Fmt.forEach(t),rro=r(nxe," (FlauBERT model)"),nxe.forEach(t),tro=i(L),Dm=n(L,"LI",{});var sxe=s(Dm);Rle=n(sxe,"STRONG",{});var Tmt=s(Rle);aro=r(Tmt,"flava"),Tmt.forEach(t),nro=r(sxe," \u2014 "),QP=n(sxe,"A",{href:!0});var Mmt=s(QP);sro=r(Mmt,"FlavaConfig"),Mmt.forEach(t),lro=r(sxe," (FLAVA model)"),sxe.forEach(t),iro=i(L),Gm=n(L,"LI",{});var lxe=s(Gm);Ple=n(lxe,"STRONG",{});var Emt=s(Ple);dro=r(Emt,"fnet"),Emt.forEach(t),cro=r(lxe," \u2014 "),UP=n(lxe,"A",{href:!0});var Cmt=s(UP);fro=r(Cmt,"FNetConfig"),Cmt.forEach(t),mro=r(lxe," (FNet model)"),lxe.forEach(t),gro=i(L),Om=n(L,"LI",{});var ixe=s(Om);Ble=n(ixe,"STRONG",{});var wmt=s(Ble);hro=r(wmt,"fsmt"),wmt.forEach(t),pro=r(ixe," \u2014 "),HP=n(ixe,"A",{href:!0});var Amt=s(HP);_ro=r(Amt,"FSMTConfig"),Amt.forEach(t),uro=r(ixe," (FairSeq Machine-Translation model)"),ixe.forEach(t),bro=i(L),Vm=n(L,"LI",{});var dxe=s(Vm);Ile=n(dxe,"STRONG",{});var Lmt=s(Ile);vro=r(Lmt,"funnel"),Lmt.forEach(t),Fro=r(dxe," \u2014 "),JP=n(dxe,"A",{href:!0});var ymt=s(JP);Tro=r(ymt,"FunnelConfig"),ymt.forEach(t),Mro=r(dxe," (Funnel Transformer model)"),dxe.forEach(t),Ero=i(L),Xm=n(L,"LI",{});var cxe=s(Xm);Nle=n(cxe,"STRONG",{});var xmt=s(Nle);Cro=r(xmt,"glpn"),xmt.forEach(t),wro=r(cxe," \u2014 "),YP=n(cxe,"A",{href:!0});var $mt=s(YP);Aro=r($mt,"GLPNConfig"),$mt.forEach(t),Lro=r(cxe," (GLPN model)"),cxe.forEach(t),yro=i(L),zm=n(L,"LI",{});var fxe=s(zm);qle=n(fxe,"STRONG",{});var kmt=s(qle);xro=r(kmt,"gpt2"),kmt.forEach(t),$ro=r(fxe," \u2014 "),KP=n(fxe,"A",{href:!0});var Smt=s(KP);kro=r(Smt,"GPT2Config"),Smt.forEach(t),Sro=r(fxe," (OpenAI GPT-2 model)"),fxe.forEach(t),Rro=i(L),Wm=n(L,"LI",{});var mxe=s(Wm);jle=n(mxe,"STRONG",{});var Rmt=s(jle);Pro=r(Rmt,"gpt_neo"),Rmt.forEach(t),Bro=r(mxe," \u2014 "),ZP=n(mxe,"A",{href:!0});var Pmt=s(ZP);Iro=r(Pmt,"GPTNeoConfig"),Pmt.forEach(t),Nro=r(mxe," (GPT Neo model)"),mxe.forEach(t),qro=i(L),Qm=n(L,"LI",{});var gxe=s(Qm);Dle=n(gxe,"STRONG",{});var Bmt=s(Dle);jro=r(Bmt,"gpt_neox"),Bmt.forEach(t),Dro=r(gxe," \u2014 "),eB=n(gxe,"A",{href:!0});var Imt=s(eB);Gro=r(Imt,"GPTNeoXConfig"),Imt.forEach(t),Oro=r(gxe," (GPT NeoX model)"),gxe.forEach(t),Vro=i(L),Um=n(L,"LI",{});var hxe=s(Um);Gle=n(hxe,"STRONG",{});var Nmt=s(Gle);Xro=r(Nmt,"gptj"),Nmt.forEach(t),zro=r(hxe," \u2014 "),oB=n(hxe,"A",{href:!0});var qmt=s(oB);Wro=r(qmt,"GPTJConfig"),qmt.forEach(t),Qro=r(hxe," (GPT-J model)"),hxe.forEach(t),Uro=i(L),Hm=n(L,"LI",{});var pxe=s(Hm);Ole=n(pxe,"STRONG",{});var jmt=s(Ole);Hro=r(jmt,"groupvit"),jmt.forEach(t),Jro=r(pxe," \u2014 "),rB=n(pxe,"A",{href:!0});var Dmt=s(rB);Yro=r(Dmt,"GroupViTConfig"),Dmt.forEach(t),Kro=r(pxe," (GroupViT model)"),pxe.forEach(t),Zro=i(L),Jm=n(L,"LI",{});var _xe=s(Jm);Vle=n(_xe,"STRONG",{});var Gmt=s(Vle);eto=r(Gmt,"hubert"),Gmt.forEach(t),oto=r(_xe," \u2014 "),tB=n(_xe,"A",{href:!0});var Omt=s(tB);rto=r(Omt,"HubertConfig"),Omt.forEach(t),tto=r(_xe," (Hubert model)"),_xe.forEach(t),ato=i(L),Ym=n(L,"LI",{});var uxe=s(Ym);Xle=n(uxe,"STRONG",{});var Vmt=s(Xle);nto=r(Vmt,"ibert"),Vmt.forEach(t),sto=r(uxe," \u2014 "),aB=n(uxe,"A",{href:!0});var Xmt=s(aB);lto=r(Xmt,"IBertConfig"),Xmt.forEach(t),ito=r(uxe," (I-BERT model)"),uxe.forEach(t),dto=i(L),Km=n(L,"LI",{});var bxe=s(Km);zle=n(bxe,"STRONG",{});var zmt=s(zle);cto=r(zmt,"imagegpt"),zmt.forEach(t),fto=r(bxe," \u2014 "),nB=n(bxe,"A",{href:!0});var Wmt=s(nB);mto=r(Wmt,"ImageGPTConfig"),Wmt.forEach(t),gto=r(bxe," (ImageGPT model)"),bxe.forEach(t),hto=i(L),Zm=n(L,"LI",{});var vxe=s(Zm);Wle=n(vxe,"STRONG",{});var Qmt=s(Wle);pto=r(Qmt,"layoutlm"),Qmt.forEach(t),_to=r(vxe," \u2014 "),sB=n(vxe,"A",{href:!0});var Umt=s(sB);uto=r(Umt,"LayoutLMConfig"),Umt.forEach(t),bto=r(vxe," (LayoutLM model)"),vxe.forEach(t),vto=i(L),eg=n(L,"LI",{});var Fxe=s(eg);Qle=n(Fxe,"STRONG",{});var Hmt=s(Qle);Fto=r(Hmt,"layoutlmv2"),Hmt.forEach(t),Tto=r(Fxe," \u2014 "),lB=n(Fxe,"A",{href:!0});var Jmt=s(lB);Mto=r(Jmt,"LayoutLMv2Config"),Jmt.forEach(t),Eto=r(Fxe," (LayoutLMv2 model)"),Fxe.forEach(t),Cto=i(L),og=n(L,"LI",{});var Txe=s(og);Ule=n(Txe,"STRONG",{});var Ymt=s(Ule);wto=r(Ymt,"layoutlmv3"),Ymt.forEach(t),Ato=r(Txe," \u2014 "),iB=n(Txe,"A",{href:!0});var Kmt=s(iB);Lto=r(Kmt,"LayoutLMv3Config"),Kmt.forEach(t),yto=r(Txe," (LayoutLMv3 model)"),Txe.forEach(t),xto=i(L),rg=n(L,"LI",{});var Mxe=s(rg);Hle=n(Mxe,"STRONG",{});var Zmt=s(Hle);$to=r(Zmt,"led"),Zmt.forEach(t),kto=r(Mxe," \u2014 "),dB=n(Mxe,"A",{href:!0});var egt=s(dB);Sto=r(egt,"LEDConfig"),egt.forEach(t),Rto=r(Mxe," (LED model)"),Mxe.forEach(t),Pto=i(L),tg=n(L,"LI",{});var Exe=s(tg);Jle=n(Exe,"STRONG",{});var ogt=s(Jle);Bto=r(ogt,"levit"),ogt.forEach(t),Ito=r(Exe," \u2014 "),cB=n(Exe,"A",{href:!0});var rgt=s(cB);Nto=r(rgt,"LevitConfig"),rgt.forEach(t),qto=r(Exe," (LeViT model)"),Exe.forEach(t),jto=i(L),ag=n(L,"LI",{});var Cxe=s(ag);Yle=n(Cxe,"STRONG",{});var tgt=s(Yle);Dto=r(tgt,"longformer"),tgt.forEach(t),Gto=r(Cxe," \u2014 "),fB=n(Cxe,"A",{href:!0});var agt=s(fB);Oto=r(agt,"LongformerConfig"),agt.forEach(t),Vto=r(Cxe," (Longformer model)"),Cxe.forEach(t),Xto=i(L),ng=n(L,"LI",{});var wxe=s(ng);Kle=n(wxe,"STRONG",{});var ngt=s(Kle);zto=r(ngt,"longt5"),ngt.forEach(t),Wto=r(wxe," \u2014 "),mB=n(wxe,"A",{href:!0});var sgt=s(mB);Qto=r(sgt,"LongT5Config"),sgt.forEach(t),Uto=r(wxe," (LongT5 model)"),wxe.forEach(t),Hto=i(L),sg=n(L,"LI",{});var Axe=s(sg);Zle=n(Axe,"STRONG",{});var lgt=s(Zle);Jto=r(lgt,"luke"),lgt.forEach(t),Yto=r(Axe," \u2014 "),gB=n(Axe,"A",{href:!0});var igt=s(gB);Kto=r(igt,"LukeConfig"),igt.forEach(t),Zto=r(Axe," (LUKE model)"),Axe.forEach(t),eao=i(L),lg=n(L,"LI",{});var Lxe=s(lg);eie=n(Lxe,"STRONG",{});var dgt=s(eie);oao=r(dgt,"lxmert"),dgt.forEach(t),rao=r(Lxe," \u2014 "),hB=n(Lxe,"A",{href:!0});var cgt=s(hB);tao=r(cgt,"LxmertConfig"),cgt.forEach(t),aao=r(Lxe," (LXMERT model)"),Lxe.forEach(t),nao=i(L),ig=n(L,"LI",{});var yxe=s(ig);oie=n(yxe,"STRONG",{});var fgt=s(oie);sao=r(fgt,"m2m_100"),fgt.forEach(t),lao=r(yxe," \u2014 "),pB=n(yxe,"A",{href:!0});var mgt=s(pB);iao=r(mgt,"M2M100Config"),mgt.forEach(t),dao=r(yxe," (M2M100 model)"),yxe.forEach(t),cao=i(L),dg=n(L,"LI",{});var xxe=s(dg);rie=n(xxe,"STRONG",{});var ggt=s(rie);fao=r(ggt,"marian"),ggt.forEach(t),mao=r(xxe," \u2014 "),_B=n(xxe,"A",{href:!0});var hgt=s(_B);gao=r(hgt,"MarianConfig"),hgt.forEach(t),hao=r(xxe," (Marian model)"),xxe.forEach(t),pao=i(L),cg=n(L,"LI",{});var $xe=s(cg);tie=n($xe,"STRONG",{});var pgt=s(tie);_ao=r(pgt,"maskformer"),pgt.forEach(t),uao=r($xe," \u2014 "),uB=n($xe,"A",{href:!0});var _gt=s(uB);bao=r(_gt,"MaskFormerConfig"),_gt.forEach(t),vao=r($xe," (MaskFormer model)"),$xe.forEach(t),Fao=i(L),fg=n(L,"LI",{});var kxe=s(fg);aie=n(kxe,"STRONG",{});var ugt=s(aie);Tao=r(ugt,"mbart"),ugt.forEach(t),Mao=r(kxe," \u2014 "),bB=n(kxe,"A",{href:!0});var bgt=s(bB);Eao=r(bgt,"MBartConfig"),bgt.forEach(t),Cao=r(kxe," (mBART model)"),kxe.forEach(t),wao=i(L),mg=n(L,"LI",{});var Sxe=s(mg);nie=n(Sxe,"STRONG",{});var vgt=s(nie);Aao=r(vgt,"mctct"),vgt.forEach(t),Lao=r(Sxe," \u2014 "),vB=n(Sxe,"A",{href:!0});var Fgt=s(vB);yao=r(Fgt,"MCTCTConfig"),Fgt.forEach(t),xao=r(Sxe," (M-CTC-T model)"),Sxe.forEach(t),$ao=i(L),gg=n(L,"LI",{});var Rxe=s(gg);sie=n(Rxe,"STRONG",{});var Tgt=s(sie);kao=r(Tgt,"megatron-bert"),Tgt.forEach(t),Sao=r(Rxe," \u2014 "),FB=n(Rxe,"A",{href:!0});var Mgt=s(FB);Rao=r(Mgt,"MegatronBertConfig"),Mgt.forEach(t),Pao=r(Rxe," (Megatron-BERT model)"),Rxe.forEach(t),Bao=i(L),hg=n(L,"LI",{});var Pxe=s(hg);lie=n(Pxe,"STRONG",{});var Egt=s(lie);Iao=r(Egt,"mobilebert"),Egt.forEach(t),Nao=r(Pxe," \u2014 "),TB=n(Pxe,"A",{href:!0});var Cgt=s(TB);qao=r(Cgt,"MobileBertConfig"),Cgt.forEach(t),jao=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),Dao=i(L),pg=n(L,"LI",{});var Bxe=s(pg);iie=n(Bxe,"STRONG",{});var wgt=s(iie);Gao=r(wgt,"mobilevit"),wgt.forEach(t),Oao=r(Bxe," \u2014 "),MB=n(Bxe,"A",{href:!0});var Agt=s(MB);Vao=r(Agt,"MobileViTConfig"),Agt.forEach(t),Xao=r(Bxe," (MobileViT model)"),Bxe.forEach(t),zao=i(L),_g=n(L,"LI",{});var Ixe=s(_g);die=n(Ixe,"STRONG",{});var Lgt=s(die);Wao=r(Lgt,"mpnet"),Lgt.forEach(t),Qao=r(Ixe," \u2014 "),EB=n(Ixe,"A",{href:!0});var ygt=s(EB);Uao=r(ygt,"MPNetConfig"),ygt.forEach(t),Hao=r(Ixe," (MPNet model)"),Ixe.forEach(t),Jao=i(L),ug=n(L,"LI",{});var Nxe=s(ug);cie=n(Nxe,"STRONG",{});var xgt=s(cie);Yao=r(xgt,"mt5"),xgt.forEach(t),Kao=r(Nxe," \u2014 "),CB=n(Nxe,"A",{href:!0});var $gt=s(CB);Zao=r($gt,"MT5Config"),$gt.forEach(t),eno=r(Nxe," (MT5 model)"),Nxe.forEach(t),ono=i(L),bg=n(L,"LI",{});var qxe=s(bg);fie=n(qxe,"STRONG",{});var kgt=s(fie);rno=r(kgt,"mvp"),kgt.forEach(t),tno=r(qxe," \u2014 "),wB=n(qxe,"A",{href:!0});var Sgt=s(wB);ano=r(Sgt,"MvpConfig"),Sgt.forEach(t),nno=r(qxe," (MVP model)"),qxe.forEach(t),sno=i(L),vg=n(L,"LI",{});var jxe=s(vg);mie=n(jxe,"STRONG",{});var Rgt=s(mie);lno=r(Rgt,"nezha"),Rgt.forEach(t),ino=r(jxe," \u2014 "),AB=n(jxe,"A",{href:!0});var Pgt=s(AB);dno=r(Pgt,"NezhaConfig"),Pgt.forEach(t),cno=r(jxe," (Nezha model)"),jxe.forEach(t),fno=i(L),Fg=n(L,"LI",{});var Dxe=s(Fg);gie=n(Dxe,"STRONG",{});var Bgt=s(gie);mno=r(Bgt,"nystromformer"),Bgt.forEach(t),gno=r(Dxe," \u2014 "),LB=n(Dxe,"A",{href:!0});var Igt=s(LB);hno=r(Igt,"NystromformerConfig"),Igt.forEach(t),pno=r(Dxe," (Nystr\xF6mformer model)"),Dxe.forEach(t),_no=i(L),Tg=n(L,"LI",{});var Gxe=s(Tg);hie=n(Gxe,"STRONG",{});var Ngt=s(hie);uno=r(Ngt,"openai-gpt"),Ngt.forEach(t),bno=r(Gxe," \u2014 "),yB=n(Gxe,"A",{href:!0});var qgt=s(yB);vno=r(qgt,"OpenAIGPTConfig"),qgt.forEach(t),Fno=r(Gxe," (OpenAI GPT model)"),Gxe.forEach(t),Tno=i(L),Mg=n(L,"LI",{});var Oxe=s(Mg);pie=n(Oxe,"STRONG",{});var jgt=s(pie);Mno=r(jgt,"opt"),jgt.forEach(t),Eno=r(Oxe," \u2014 "),xB=n(Oxe,"A",{href:!0});var Dgt=s(xB);Cno=r(Dgt,"OPTConfig"),Dgt.forEach(t),wno=r(Oxe," (OPT model)"),Oxe.forEach(t),Ano=i(L),Eg=n(L,"LI",{});var Vxe=s(Eg);_ie=n(Vxe,"STRONG",{});var Ggt=s(_ie);Lno=r(Ggt,"owlvit"),Ggt.forEach(t),yno=r(Vxe," \u2014 "),$B=n(Vxe,"A",{href:!0});var Ogt=s($B);xno=r(Ogt,"OwlViTConfig"),Ogt.forEach(t),$no=r(Vxe," (OWL-ViT model)"),Vxe.forEach(t),kno=i(L),Cg=n(L,"LI",{});var Xxe=s(Cg);uie=n(Xxe,"STRONG",{});var Vgt=s(uie);Sno=r(Vgt,"pegasus"),Vgt.forEach(t),Rno=r(Xxe," \u2014 "),kB=n(Xxe,"A",{href:!0});var Xgt=s(kB);Pno=r(Xgt,"PegasusConfig"),Xgt.forEach(t),Bno=r(Xxe," (Pegasus model)"),Xxe.forEach(t),Ino=i(L),wg=n(L,"LI",{});var zxe=s(wg);bie=n(zxe,"STRONG",{});var zgt=s(bie);Nno=r(zgt,"perceiver"),zgt.forEach(t),qno=r(zxe," \u2014 "),SB=n(zxe,"A",{href:!0});var Wgt=s(SB);jno=r(Wgt,"PerceiverConfig"),Wgt.forEach(t),Dno=r(zxe," (Perceiver model)"),zxe.forEach(t),Gno=i(L),Ag=n(L,"LI",{});var Wxe=s(Ag);vie=n(Wxe,"STRONG",{});var Qgt=s(vie);Ono=r(Qgt,"plbart"),Qgt.forEach(t),Vno=r(Wxe," \u2014 "),RB=n(Wxe,"A",{href:!0});var Ugt=s(RB);Xno=r(Ugt,"PLBartConfig"),Ugt.forEach(t),zno=r(Wxe," (PLBart model)"),Wxe.forEach(t),Wno=i(L),Lg=n(L,"LI",{});var Qxe=s(Lg);Fie=n(Qxe,"STRONG",{});var Hgt=s(Fie);Qno=r(Hgt,"poolformer"),Hgt.forEach(t),Uno=r(Qxe," \u2014 "),PB=n(Qxe,"A",{href:!0});var Jgt=s(PB);Hno=r(Jgt,"PoolFormerConfig"),Jgt.forEach(t),Jno=r(Qxe," (PoolFormer model)"),Qxe.forEach(t),Yno=i(L),yg=n(L,"LI",{});var Uxe=s(yg);Tie=n(Uxe,"STRONG",{});var Ygt=s(Tie);Kno=r(Ygt,"prophetnet"),Ygt.forEach(t),Zno=r(Uxe," \u2014 "),BB=n(Uxe,"A",{href:!0});var Kgt=s(BB);eso=r(Kgt,"ProphetNetConfig"),Kgt.forEach(t),oso=r(Uxe," (ProphetNet model)"),Uxe.forEach(t),rso=i(L),xg=n(L,"LI",{});var Hxe=s(xg);Mie=n(Hxe,"STRONG",{});var Zgt=s(Mie);tso=r(Zgt,"qdqbert"),Zgt.forEach(t),aso=r(Hxe," \u2014 "),IB=n(Hxe,"A",{href:!0});var eht=s(IB);nso=r(eht,"QDQBertConfig"),eht.forEach(t),sso=r(Hxe," (QDQBert model)"),Hxe.forEach(t),lso=i(L),$g=n(L,"LI",{});var Jxe=s($g);Eie=n(Jxe,"STRONG",{});var oht=s(Eie);iso=r(oht,"rag"),oht.forEach(t),dso=r(Jxe," \u2014 "),NB=n(Jxe,"A",{href:!0});var rht=s(NB);cso=r(rht,"RagConfig"),rht.forEach(t),fso=r(Jxe," (RAG model)"),Jxe.forEach(t),mso=i(L),kg=n(L,"LI",{});var Yxe=s(kg);Cie=n(Yxe,"STRONG",{});var tht=s(Cie);gso=r(tht,"realm"),tht.forEach(t),hso=r(Yxe," \u2014 "),qB=n(Yxe,"A",{href:!0});var aht=s(qB);pso=r(aht,"RealmConfig"),aht.forEach(t),_so=r(Yxe," (REALM model)"),Yxe.forEach(t),uso=i(L),Sg=n(L,"LI",{});var Kxe=s(Sg);wie=n(Kxe,"STRONG",{});var nht=s(wie);bso=r(nht,"reformer"),nht.forEach(t),vso=r(Kxe," \u2014 "),jB=n(Kxe,"A",{href:!0});var sht=s(jB);Fso=r(sht,"ReformerConfig"),sht.forEach(t),Tso=r(Kxe," (Reformer model)"),Kxe.forEach(t),Mso=i(L),Rg=n(L,"LI",{});var Zxe=s(Rg);Aie=n(Zxe,"STRONG",{});var lht=s(Aie);Eso=r(lht,"regnet"),lht.forEach(t),Cso=r(Zxe," \u2014 "),DB=n(Zxe,"A",{href:!0});var iht=s(DB);wso=r(iht,"RegNetConfig"),iht.forEach(t),Aso=r(Zxe," (RegNet model)"),Zxe.forEach(t),Lso=i(L),Pg=n(L,"LI",{});var e$e=s(Pg);Lie=n(e$e,"STRONG",{});var dht=s(Lie);yso=r(dht,"rembert"),dht.forEach(t),xso=r(e$e," \u2014 "),GB=n(e$e,"A",{href:!0});var cht=s(GB);$so=r(cht,"RemBertConfig"),cht.forEach(t),kso=r(e$e," (RemBERT model)"),e$e.forEach(t),Sso=i(L),Bg=n(L,"LI",{});var o$e=s(Bg);yie=n(o$e,"STRONG",{});var fht=s(yie);Rso=r(fht,"resnet"),fht.forEach(t),Pso=r(o$e," \u2014 "),OB=n(o$e,"A",{href:!0});var mht=s(OB);Bso=r(mht,"ResNetConfig"),mht.forEach(t),Iso=r(o$e," (ResNet model)"),o$e.forEach(t),Nso=i(L),Ig=n(L,"LI",{});var r$e=s(Ig);xie=n(r$e,"STRONG",{});var ght=s(xie);qso=r(ght,"retribert"),ght.forEach(t),jso=r(r$e," \u2014 "),VB=n(r$e,"A",{href:!0});var hht=s(VB);Dso=r(hht,"RetriBertConfig"),hht.forEach(t),Gso=r(r$e," (RetriBERT model)"),r$e.forEach(t),Oso=i(L),Ng=n(L,"LI",{});var t$e=s(Ng);$ie=n(t$e,"STRONG",{});var pht=s($ie);Vso=r(pht,"roberta"),pht.forEach(t),Xso=r(t$e," \u2014 "),XB=n(t$e,"A",{href:!0});var _ht=s(XB);zso=r(_ht,"RobertaConfig"),_ht.forEach(t),Wso=r(t$e," (RoBERTa model)"),t$e.forEach(t),Qso=i(L),qg=n(L,"LI",{});var a$e=s(qg);kie=n(a$e,"STRONG",{});var uht=s(kie);Uso=r(uht,"roformer"),uht.forEach(t),Hso=r(a$e," \u2014 "),zB=n(a$e,"A",{href:!0});var bht=s(zB);Jso=r(bht,"RoFormerConfig"),bht.forEach(t),Yso=r(a$e," (RoFormer model)"),a$e.forEach(t),Kso=i(L),jg=n(L,"LI",{});var n$e=s(jg);Sie=n(n$e,"STRONG",{});var vht=s(Sie);Zso=r(vht,"segformer"),vht.forEach(t),elo=r(n$e," \u2014 "),WB=n(n$e,"A",{href:!0});var Fht=s(WB);olo=r(Fht,"SegformerConfig"),Fht.forEach(t),rlo=r(n$e," (SegFormer model)"),n$e.forEach(t),tlo=i(L),Dg=n(L,"LI",{});var s$e=s(Dg);Rie=n(s$e,"STRONG",{});var Tht=s(Rie);alo=r(Tht,"sew"),Tht.forEach(t),nlo=r(s$e," \u2014 "),QB=n(s$e,"A",{href:!0});var Mht=s(QB);slo=r(Mht,"SEWConfig"),Mht.forEach(t),llo=r(s$e," (SEW model)"),s$e.forEach(t),ilo=i(L),Gg=n(L,"LI",{});var l$e=s(Gg);Pie=n(l$e,"STRONG",{});var Eht=s(Pie);dlo=r(Eht,"sew-d"),Eht.forEach(t),clo=r(l$e," \u2014 "),UB=n(l$e,"A",{href:!0});var Cht=s(UB);flo=r(Cht,"SEWDConfig"),Cht.forEach(t),mlo=r(l$e," (SEW-D model)"),l$e.forEach(t),glo=i(L),Og=n(L,"LI",{});var i$e=s(Og);Bie=n(i$e,"STRONG",{});var wht=s(Bie);hlo=r(wht,"speech-encoder-decoder"),wht.forEach(t),plo=r(i$e," \u2014 "),HB=n(i$e,"A",{href:!0});var Aht=s(HB);_lo=r(Aht,"SpeechEncoderDecoderConfig"),Aht.forEach(t),ulo=r(i$e," (Speech Encoder decoder model)"),i$e.forEach(t),blo=i(L),Vg=n(L,"LI",{});var d$e=s(Vg);Iie=n(d$e,"STRONG",{});var Lht=s(Iie);vlo=r(Lht,"speech_to_text"),Lht.forEach(t),Flo=r(d$e," \u2014 "),JB=n(d$e,"A",{href:!0});var yht=s(JB);Tlo=r(yht,"Speech2TextConfig"),yht.forEach(t),Mlo=r(d$e," (Speech2Text model)"),d$e.forEach(t),Elo=i(L),Xg=n(L,"LI",{});var c$e=s(Xg);Nie=n(c$e,"STRONG",{});var xht=s(Nie);Clo=r(xht,"speech_to_text_2"),xht.forEach(t),wlo=r(c$e," \u2014 "),YB=n(c$e,"A",{href:!0});var $ht=s(YB);Alo=r($ht,"Speech2Text2Config"),$ht.forEach(t),Llo=r(c$e," (Speech2Text2 model)"),c$e.forEach(t),ylo=i(L),zg=n(L,"LI",{});var f$e=s(zg);qie=n(f$e,"STRONG",{});var kht=s(qie);xlo=r(kht,"splinter"),kht.forEach(t),$lo=r(f$e," \u2014 "),KB=n(f$e,"A",{href:!0});var Sht=s(KB);klo=r(Sht,"SplinterConfig"),Sht.forEach(t),Slo=r(f$e," (Splinter model)"),f$e.forEach(t),Rlo=i(L),Wg=n(L,"LI",{});var m$e=s(Wg);jie=n(m$e,"STRONG",{});var Rht=s(jie);Plo=r(Rht,"squeezebert"),Rht.forEach(t),Blo=r(m$e," \u2014 "),ZB=n(m$e,"A",{href:!0});var Pht=s(ZB);Ilo=r(Pht,"SqueezeBertConfig"),Pht.forEach(t),Nlo=r(m$e," (SqueezeBERT model)"),m$e.forEach(t),qlo=i(L),Qg=n(L,"LI",{});var g$e=s(Qg);Die=n(g$e,"STRONG",{});var Bht=s(Die);jlo=r(Bht,"swin"),Bht.forEach(t),Dlo=r(g$e," \u2014 "),eI=n(g$e,"A",{href:!0});var Iht=s(eI);Glo=r(Iht,"SwinConfig"),Iht.forEach(t),Olo=r(g$e," (Swin Transformer model)"),g$e.forEach(t),Vlo=i(L),Ug=n(L,"LI",{});var h$e=s(Ug);Gie=n(h$e,"STRONG",{});var Nht=s(Gie);Xlo=r(Nht,"swinv2"),Nht.forEach(t),zlo=r(h$e," \u2014 "),oI=n(h$e,"A",{href:!0});var qht=s(oI);Wlo=r(qht,"Swinv2Config"),qht.forEach(t),Qlo=r(h$e," (Swin Transformer V2 model)"),h$e.forEach(t),Ulo=i(L),Hg=n(L,"LI",{});var p$e=s(Hg);Oie=n(p$e,"STRONG",{});var jht=s(Oie);Hlo=r(jht,"t5"),jht.forEach(t),Jlo=r(p$e," \u2014 "),rI=n(p$e,"A",{href:!0});var Dht=s(rI);Ylo=r(Dht,"T5Config"),Dht.forEach(t),Klo=r(p$e," (T5 model)"),p$e.forEach(t),Zlo=i(L),Jg=n(L,"LI",{});var _$e=s(Jg);Vie=n(_$e,"STRONG",{});var Ght=s(Vie);eio=r(Ght,"tapas"),Ght.forEach(t),oio=r(_$e," \u2014 "),tI=n(_$e,"A",{href:!0});var Oht=s(tI);rio=r(Oht,"TapasConfig"),Oht.forEach(t),tio=r(_$e," (TAPAS model)"),_$e.forEach(t),aio=i(L),Yg=n(L,"LI",{});var u$e=s(Yg);Xie=n(u$e,"STRONG",{});var Vht=s(Xie);nio=r(Vht,"trajectory_transformer"),Vht.forEach(t),sio=r(u$e," \u2014 "),aI=n(u$e,"A",{href:!0});var Xht=s(aI);lio=r(Xht,"TrajectoryTransformerConfig"),Xht.forEach(t),iio=r(u$e," (Trajectory Transformer model)"),u$e.forEach(t),dio=i(L),Kg=n(L,"LI",{});var b$e=s(Kg);zie=n(b$e,"STRONG",{});var zht=s(zie);cio=r(zht,"transfo-xl"),zht.forEach(t),fio=r(b$e," \u2014 "),nI=n(b$e,"A",{href:!0});var Wht=s(nI);mio=r(Wht,"TransfoXLConfig"),Wht.forEach(t),gio=r(b$e," (Transformer-XL model)"),b$e.forEach(t),hio=i(L),Zg=n(L,"LI",{});var v$e=s(Zg);Wie=n(v$e,"STRONG",{});var Qht=s(Wie);pio=r(Qht,"trocr"),Qht.forEach(t),_io=r(v$e," \u2014 "),sI=n(v$e,"A",{href:!0});var Uht=s(sI);uio=r(Uht,"TrOCRConfig"),Uht.forEach(t),bio=r(v$e," (TrOCR model)"),v$e.forEach(t),vio=i(L),eh=n(L,"LI",{});var F$e=s(eh);Qie=n(F$e,"STRONG",{});var Hht=s(Qie);Fio=r(Hht,"unispeech"),Hht.forEach(t),Tio=r(F$e," \u2014 "),lI=n(F$e,"A",{href:!0});var Jht=s(lI);Mio=r(Jht,"UniSpeechConfig"),Jht.forEach(t),Eio=r(F$e," (UniSpeech model)"),F$e.forEach(t),Cio=i(L),oh=n(L,"LI",{});var T$e=s(oh);Uie=n(T$e,"STRONG",{});var Yht=s(Uie);wio=r(Yht,"unispeech-sat"),Yht.forEach(t),Aio=r(T$e," \u2014 "),iI=n(T$e,"A",{href:!0});var Kht=s(iI);Lio=r(Kht,"UniSpeechSatConfig"),Kht.forEach(t),yio=r(T$e," (UniSpeechSat model)"),T$e.forEach(t),xio=i(L),rh=n(L,"LI",{});var M$e=s(rh);Hie=n(M$e,"STRONG",{});var Zht=s(Hie);$io=r(Zht,"van"),Zht.forEach(t),kio=r(M$e," \u2014 "),dI=n(M$e,"A",{href:!0});var ept=s(dI);Sio=r(ept,"VanConfig"),ept.forEach(t),Rio=r(M$e," (VAN model)"),M$e.forEach(t),Pio=i(L),th=n(L,"LI",{});var E$e=s(th);Jie=n(E$e,"STRONG",{});var opt=s(Jie);Bio=r(opt,"videomae"),opt.forEach(t),Iio=r(E$e," \u2014 "),cI=n(E$e,"A",{href:!0});var rpt=s(cI);Nio=r(rpt,"VideoMAEConfig"),rpt.forEach(t),qio=r(E$e," (VideoMAE model)"),E$e.forEach(t),jio=i(L),ah=n(L,"LI",{});var C$e=s(ah);Yie=n(C$e,"STRONG",{});var tpt=s(Yie);Dio=r(tpt,"vilt"),tpt.forEach(t),Gio=r(C$e," \u2014 "),fI=n(C$e,"A",{href:!0});var apt=s(fI);Oio=r(apt,"ViltConfig"),apt.forEach(t),Vio=r(C$e," (ViLT model)"),C$e.forEach(t),Xio=i(L),nh=n(L,"LI",{});var w$e=s(nh);Kie=n(w$e,"STRONG",{});var npt=s(Kie);zio=r(npt,"vision-encoder-decoder"),npt.forEach(t),Wio=r(w$e," \u2014 "),mI=n(w$e,"A",{href:!0});var spt=s(mI);Qio=r(spt,"VisionEncoderDecoderConfig"),spt.forEach(t),Uio=r(w$e," (Vision Encoder decoder model)"),w$e.forEach(t),Hio=i(L),sh=n(L,"LI",{});var A$e=s(sh);Zie=n(A$e,"STRONG",{});var lpt=s(Zie);Jio=r(lpt,"vision-text-dual-encoder"),lpt.forEach(t),Yio=r(A$e," \u2014 "),gI=n(A$e,"A",{href:!0});var ipt=s(gI);Kio=r(ipt,"VisionTextDualEncoderConfig"),ipt.forEach(t),Zio=r(A$e," (VisionTextDualEncoder model)"),A$e.forEach(t),edo=i(L),lh=n(L,"LI",{});var L$e=s(lh);ede=n(L$e,"STRONG",{});var dpt=s(ede);odo=r(dpt,"visual_bert"),dpt.forEach(t),rdo=r(L$e," \u2014 "),hI=n(L$e,"A",{href:!0});var cpt=s(hI);tdo=r(cpt,"VisualBertConfig"),cpt.forEach(t),ado=r(L$e," (VisualBERT model)"),L$e.forEach(t),ndo=i(L),ih=n(L,"LI",{});var y$e=s(ih);ode=n(y$e,"STRONG",{});var fpt=s(ode);sdo=r(fpt,"vit"),fpt.forEach(t),ldo=r(y$e," \u2014 "),pI=n(y$e,"A",{href:!0});var mpt=s(pI);ido=r(mpt,"ViTConfig"),mpt.forEach(t),ddo=r(y$e," (ViT model)"),y$e.forEach(t),cdo=i(L),dh=n(L,"LI",{});var x$e=s(dh);rde=n(x$e,"STRONG",{});var gpt=s(rde);fdo=r(gpt,"vit_mae"),gpt.forEach(t),mdo=r(x$e," \u2014 "),_I=n(x$e,"A",{href:!0});var hpt=s(_I);gdo=r(hpt,"ViTMAEConfig"),hpt.forEach(t),hdo=r(x$e," (ViTMAE model)"),x$e.forEach(t),pdo=i(L),ch=n(L,"LI",{});var $$e=s(ch);tde=n($$e,"STRONG",{});var ppt=s(tde);_do=r(ppt,"wav2vec2"),ppt.forEach(t),udo=r($$e," \u2014 "),uI=n($$e,"A",{href:!0});var _pt=s(uI);bdo=r(_pt,"Wav2Vec2Config"),_pt.forEach(t),vdo=r($$e," (Wav2Vec2 model)"),$$e.forEach(t),Fdo=i(L),fh=n(L,"LI",{});var k$e=s(fh);ade=n(k$e,"STRONG",{});var upt=s(ade);Tdo=r(upt,"wav2vec2-conformer"),upt.forEach(t),Mdo=r(k$e," \u2014 "),bI=n(k$e,"A",{href:!0});var bpt=s(bI);Edo=r(bpt,"Wav2Vec2ConformerConfig"),bpt.forEach(t),Cdo=r(k$e," (Wav2Vec2-Conformer model)"),k$e.forEach(t),wdo=i(L),mh=n(L,"LI",{});var S$e=s(mh);nde=n(S$e,"STRONG",{});var vpt=s(nde);Ado=r(vpt,"wavlm"),vpt.forEach(t),Ldo=r(S$e," \u2014 "),vI=n(S$e,"A",{href:!0});var Fpt=s(vI);ydo=r(Fpt,"WavLMConfig"),Fpt.forEach(t),xdo=r(S$e," (WavLM model)"),S$e.forEach(t),$do=i(L),gh=n(L,"LI",{});var R$e=s(gh);sde=n(R$e,"STRONG",{});var Tpt=s(sde);kdo=r(Tpt,"xglm"),Tpt.forEach(t),Sdo=r(R$e," \u2014 "),FI=n(R$e,"A",{href:!0});var Mpt=s(FI);Rdo=r(Mpt,"XGLMConfig"),Mpt.forEach(t),Pdo=r(R$e," (XGLM model)"),R$e.forEach(t),Bdo=i(L),hh=n(L,"LI",{});var P$e=s(hh);lde=n(P$e,"STRONG",{});var Ept=s(lde);Ido=r(Ept,"xlm"),Ept.forEach(t),Ndo=r(P$e," \u2014 "),TI=n(P$e,"A",{href:!0});var Cpt=s(TI);qdo=r(Cpt,"XLMConfig"),Cpt.forEach(t),jdo=r(P$e," (XLM model)"),P$e.forEach(t),Ddo=i(L),ph=n(L,"LI",{});var B$e=s(ph);ide=n(B$e,"STRONG",{});var wpt=s(ide);Gdo=r(wpt,"xlm-prophetnet"),wpt.forEach(t),Odo=r(B$e," \u2014 "),MI=n(B$e,"A",{href:!0});var Apt=s(MI);Vdo=r(Apt,"XLMProphetNetConfig"),Apt.forEach(t),Xdo=r(B$e," (XLM-ProphetNet model)"),B$e.forEach(t),zdo=i(L),_h=n(L,"LI",{});var I$e=s(_h);dde=n(I$e,"STRONG",{});var Lpt=s(dde);Wdo=r(Lpt,"xlm-roberta"),Lpt.forEach(t),Qdo=r(I$e," \u2014 "),EI=n(I$e,"A",{href:!0});var ypt=s(EI);Udo=r(ypt,"XLMRobertaConfig"),ypt.forEach(t),Hdo=r(I$e," (XLM-RoBERTa model)"),I$e.forEach(t),Jdo=i(L),uh=n(L,"LI",{});var N$e=s(uh);cde=n(N$e,"STRONG",{});var xpt=s(cde);Ydo=r(xpt,"xlm-roberta-xl"),xpt.forEach(t),Kdo=r(N$e," \u2014 "),CI=n(N$e,"A",{href:!0});var $pt=s(CI);Zdo=r($pt,"XLMRobertaXLConfig"),$pt.forEach(t),eco=r(N$e," (XLM-RoBERTa-XL model)"),N$e.forEach(t),oco=i(L),bh=n(L,"LI",{});var q$e=s(bh);fde=n(q$e,"STRONG",{});var kpt=s(fde);rco=r(kpt,"xlnet"),kpt.forEach(t),tco=r(q$e," \u2014 "),wI=n(q$e,"A",{href:!0});var Spt=s(wI);aco=r(Spt,"XLNetConfig"),Spt.forEach(t),nco=r(q$e," (XLNet model)"),q$e.forEach(t),sco=i(L),vh=n(L,"LI",{});var j$e=s(vh);mde=n(j$e,"STRONG",{});var Rpt=s(mde);lco=r(Rpt,"yolos"),Rpt.forEach(t),ico=r(j$e," \u2014 "),AI=n(j$e,"A",{href:!0});var Ppt=s(AI);dco=r(Ppt,"YolosConfig"),Ppt.forEach(t),cco=r(j$e," (YOLOS model)"),j$e.forEach(t),fco=i(L),Fh=n(L,"LI",{});var D$e=s(Fh);gde=n(D$e,"STRONG",{});var Bpt=s(gde);mco=r(Bpt,"yoso"),Bpt.forEach(t),gco=r(D$e," \u2014 "),LI=n(D$e,"A",{href:!0});var Ipt=s(LI);hco=r(Ipt,"YosoConfig"),Ipt.forEach(t),pco=r(D$e," (YOSO model)"),D$e.forEach(t),L.forEach(t),_co=i(ct),T(Th.$$.fragment,ct),ct.forEach(t),uco=i(dt),Mh=n(dt,"DIV",{class:!0});var mJe=s(Mh);T(Cy.$$.fragment,mJe),bco=i(mJe),hde=n(mJe,"P",{});var Npt=s(hde);vco=r(Npt,"Register a new configuration for this class."),Npt.forEach(t),mJe.forEach(t),dt.forEach(t),dUe=i(f),Ki=n(f,"H2",{class:!0});var gJe=s(Ki);Eh=n(gJe,"A",{id:!0,class:!0,href:!0});var qpt=s(Eh);pde=n(qpt,"SPAN",{});var jpt=s(pde);T(wy.$$.fragment,jpt),jpt.forEach(t),qpt.forEach(t),Fco=i(gJe),_de=n(gJe,"SPAN",{});var Dpt=s(_de);Tco=r(Dpt,"AutoTokenizer"),Dpt.forEach(t),gJe.forEach(t),cUe=i(f),xo=n(f,"DIV",{class:!0});var cl=s(xo);T(Ay.$$.fragment,cl),Mco=i(cl),Ly=n(cl,"P",{});var hJe=s(Ly);Eco=r(hJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yI=n(hJe,"A",{href:!0});var Gpt=s(yI);Cco=r(Gpt,"AutoTokenizer.from_pretrained()"),Gpt.forEach(t),wco=r(hJe," class method."),hJe.forEach(t),Aco=i(cl),yy=n(cl,"P",{});var pJe=s(yy);Lco=r(pJe,"This class cannot be instantiated directly using "),ude=n(pJe,"CODE",{});var Opt=s(ude);yco=r(Opt,"__init__()"),Opt.forEach(t),xco=r(pJe," (throws an error)."),pJe.forEach(t),$co=i(cl),Sr=n(cl,"DIV",{class:!0});var fl=s(Sr);T(xy.$$.fragment,fl),kco=i(fl),bde=n(fl,"P",{});var Vpt=s(bde);Sco=r(Vpt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Vpt.forEach(t),Rco=i(fl),Ga=n(fl,"P",{});var hA=s(Ga);Pco=r(hA,"The tokenizer class to instantiate is selected based on the "),vde=n(hA,"CODE",{});var Xpt=s(vde);Bco=r(Xpt,"model_type"),Xpt.forEach(t),Ico=r(hA,` property of the config object (either
passed as an argument or loaded from `),Fde=n(hA,"CODE",{});var zpt=s(Fde);Nco=r(zpt,"pretrained_model_name_or_path"),zpt.forEach(t),qco=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tde=n(hA,"CODE",{});var Wpt=s(Tde);jco=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),Dco=r(hA,":"),hA.forEach(t),Gco=i(fl),k=n(fl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var WS=s(Hn);Mde=n(WS,"STRONG",{});var Qpt=s(Mde);Oco=r(Qpt,"albert"),Qpt.forEach(t),Vco=r(WS," \u2014 "),xI=n(WS,"A",{href:!0});var Upt=s(xI);Xco=r(Upt,"AlbertTokenizer"),Upt.forEach(t),zco=r(WS," or "),$I=n(WS,"A",{href:!0});var Hpt=s($I);Wco=r(Hpt,"AlbertTokenizerFast"),Hpt.forEach(t),Qco=r(WS," (ALBERT model)"),WS.forEach(t),Uco=i(S),Jn=n(S,"LI",{});var QS=s(Jn);Ede=n(QS,"STRONG",{});var Jpt=s(Ede);Hco=r(Jpt,"bart"),Jpt.forEach(t),Jco=r(QS," \u2014 "),kI=n(QS,"A",{href:!0});var Ypt=s(kI);Yco=r(Ypt,"BartTokenizer"),Ypt.forEach(t),Kco=r(QS," or "),SI=n(QS,"A",{href:!0});var Kpt=s(SI);Zco=r(Kpt,"BartTokenizerFast"),Kpt.forEach(t),efo=r(QS," (BART model)"),QS.forEach(t),ofo=i(S),Yn=n(S,"LI",{});var US=s(Yn);Cde=n(US,"STRONG",{});var Zpt=s(Cde);rfo=r(Zpt,"barthez"),Zpt.forEach(t),tfo=r(US," \u2014 "),RI=n(US,"A",{href:!0});var e_t=s(RI);afo=r(e_t,"BarthezTokenizer"),e_t.forEach(t),nfo=r(US," or "),PI=n(US,"A",{href:!0});var o_t=s(PI);sfo=r(o_t,"BarthezTokenizerFast"),o_t.forEach(t),lfo=r(US," (BARThez model)"),US.forEach(t),ifo=i(S),Ch=n(S,"LI",{});var G$e=s(Ch);wde=n(G$e,"STRONG",{});var r_t=s(wde);dfo=r(r_t,"bartpho"),r_t.forEach(t),cfo=r(G$e," \u2014 "),BI=n(G$e,"A",{href:!0});var t_t=s(BI);ffo=r(t_t,"BartphoTokenizer"),t_t.forEach(t),mfo=r(G$e," (BARTpho model)"),G$e.forEach(t),gfo=i(S),Kn=n(S,"LI",{});var HS=s(Kn);Ade=n(HS,"STRONG",{});var a_t=s(Ade);hfo=r(a_t,"bert"),a_t.forEach(t),pfo=r(HS," \u2014 "),II=n(HS,"A",{href:!0});var n_t=s(II);_fo=r(n_t,"BertTokenizer"),n_t.forEach(t),ufo=r(HS," or "),NI=n(HS,"A",{href:!0});var s_t=s(NI);bfo=r(s_t,"BertTokenizerFast"),s_t.forEach(t),vfo=r(HS," (BERT model)"),HS.forEach(t),Ffo=i(S),wh=n(S,"LI",{});var O$e=s(wh);Lde=n(O$e,"STRONG",{});var l_t=s(Lde);Tfo=r(l_t,"bert-generation"),l_t.forEach(t),Mfo=r(O$e," \u2014 "),qI=n(O$e,"A",{href:!0});var i_t=s(qI);Efo=r(i_t,"BertGenerationTokenizer"),i_t.forEach(t),Cfo=r(O$e," (Bert Generation model)"),O$e.forEach(t),wfo=i(S),Ah=n(S,"LI",{});var V$e=s(Ah);yde=n(V$e,"STRONG",{});var d_t=s(yde);Afo=r(d_t,"bert-japanese"),d_t.forEach(t),Lfo=r(V$e," \u2014 "),jI=n(V$e,"A",{href:!0});var c_t=s(jI);yfo=r(c_t,"BertJapaneseTokenizer"),c_t.forEach(t),xfo=r(V$e," (BertJapanese model)"),V$e.forEach(t),$fo=i(S),Lh=n(S,"LI",{});var X$e=s(Lh);xde=n(X$e,"STRONG",{});var f_t=s(xde);kfo=r(f_t,"bertweet"),f_t.forEach(t),Sfo=r(X$e," \u2014 "),DI=n(X$e,"A",{href:!0});var m_t=s(DI);Rfo=r(m_t,"BertweetTokenizer"),m_t.forEach(t),Pfo=r(X$e," (BERTweet model)"),X$e.forEach(t),Bfo=i(S),Zn=n(S,"LI",{});var JS=s(Zn);$de=n(JS,"STRONG",{});var g_t=s($de);Ifo=r(g_t,"big_bird"),g_t.forEach(t),Nfo=r(JS," \u2014 "),GI=n(JS,"A",{href:!0});var h_t=s(GI);qfo=r(h_t,"BigBirdTokenizer"),h_t.forEach(t),jfo=r(JS," or "),OI=n(JS,"A",{href:!0});var p_t=s(OI);Dfo=r(p_t,"BigBirdTokenizerFast"),p_t.forEach(t),Gfo=r(JS," (BigBird model)"),JS.forEach(t),Ofo=i(S),es=n(S,"LI",{});var YS=s(es);kde=n(YS,"STRONG",{});var __t=s(kde);Vfo=r(__t,"bigbird_pegasus"),__t.forEach(t),Xfo=r(YS," \u2014 "),VI=n(YS,"A",{href:!0});var u_t=s(VI);zfo=r(u_t,"PegasusTokenizer"),u_t.forEach(t),Wfo=r(YS," or "),XI=n(YS,"A",{href:!0});var b_t=s(XI);Qfo=r(b_t,"PegasusTokenizerFast"),b_t.forEach(t),Ufo=r(YS," (BigBird-Pegasus model)"),YS.forEach(t),Hfo=i(S),os=n(S,"LI",{});var KS=s(os);Sde=n(KS,"STRONG",{});var v_t=s(Sde);Jfo=r(v_t,"blenderbot"),v_t.forEach(t),Yfo=r(KS," \u2014 "),zI=n(KS,"A",{href:!0});var F_t=s(zI);Kfo=r(F_t,"BlenderbotTokenizer"),F_t.forEach(t),Zfo=r(KS," or "),WI=n(KS,"A",{href:!0});var T_t=s(WI);emo=r(T_t,"BlenderbotTokenizerFast"),T_t.forEach(t),omo=r(KS," (Blenderbot model)"),KS.forEach(t),rmo=i(S),yh=n(S,"LI",{});var z$e=s(yh);Rde=n(z$e,"STRONG",{});var M_t=s(Rde);tmo=r(M_t,"blenderbot-small"),M_t.forEach(t),amo=r(z$e," \u2014 "),QI=n(z$e,"A",{href:!0});var E_t=s(QI);nmo=r(E_t,"BlenderbotSmallTokenizer"),E_t.forEach(t),smo=r(z$e," (BlenderbotSmall model)"),z$e.forEach(t),lmo=i(S),xh=n(S,"LI",{});var W$e=s(xh);Pde=n(W$e,"STRONG",{});var C_t=s(Pde);imo=r(C_t,"bloom"),C_t.forEach(t),dmo=r(W$e," \u2014 "),UI=n(W$e,"A",{href:!0});var w_t=s(UI);cmo=r(w_t,"BloomTokenizerFast"),w_t.forEach(t),fmo=r(W$e," (BLOOM model)"),W$e.forEach(t),mmo=i(S),$h=n(S,"LI",{});var Q$e=s($h);Bde=n(Q$e,"STRONG",{});var A_t=s(Bde);gmo=r(A_t,"byt5"),A_t.forEach(t),hmo=r(Q$e," \u2014 "),HI=n(Q$e,"A",{href:!0});var L_t=s(HI);pmo=r(L_t,"ByT5Tokenizer"),L_t.forEach(t),_mo=r(Q$e," (ByT5 model)"),Q$e.forEach(t),umo=i(S),rs=n(S,"LI",{});var ZS=s(rs);Ide=n(ZS,"STRONG",{});var y_t=s(Ide);bmo=r(y_t,"camembert"),y_t.forEach(t),vmo=r(ZS," \u2014 "),JI=n(ZS,"A",{href:!0});var x_t=s(JI);Fmo=r(x_t,"CamembertTokenizer"),x_t.forEach(t),Tmo=r(ZS," or "),YI=n(ZS,"A",{href:!0});var $_t=s(YI);Mmo=r($_t,"CamembertTokenizerFast"),$_t.forEach(t),Emo=r(ZS," (CamemBERT model)"),ZS.forEach(t),Cmo=i(S),kh=n(S,"LI",{});var U$e=s(kh);Nde=n(U$e,"STRONG",{});var k_t=s(Nde);wmo=r(k_t,"canine"),k_t.forEach(t),Amo=r(U$e," \u2014 "),KI=n(U$e,"A",{href:!0});var S_t=s(KI);Lmo=r(S_t,"CanineTokenizer"),S_t.forEach(t),ymo=r(U$e," (CANINE model)"),U$e.forEach(t),xmo=i(S),ts=n(S,"LI",{});var eR=s(ts);qde=n(eR,"STRONG",{});var R_t=s(qde);$mo=r(R_t,"clip"),R_t.forEach(t),kmo=r(eR," \u2014 "),ZI=n(eR,"A",{href:!0});var P_t=s(ZI);Smo=r(P_t,"CLIPTokenizer"),P_t.forEach(t),Rmo=r(eR," or "),eN=n(eR,"A",{href:!0});var B_t=s(eN);Pmo=r(B_t,"CLIPTokenizerFast"),B_t.forEach(t),Bmo=r(eR," (CLIP model)"),eR.forEach(t),Imo=i(S),as=n(S,"LI",{});var oR=s(as);jde=n(oR,"STRONG",{});var I_t=s(jde);Nmo=r(I_t,"codegen"),I_t.forEach(t),qmo=r(oR," \u2014 "),oN=n(oR,"A",{href:!0});var N_t=s(oN);jmo=r(N_t,"CodeGenTokenizer"),N_t.forEach(t),Dmo=r(oR," or "),rN=n(oR,"A",{href:!0});var q_t=s(rN);Gmo=r(q_t,"CodeGenTokenizerFast"),q_t.forEach(t),Omo=r(oR," (CodeGen model)"),oR.forEach(t),Vmo=i(S),ns=n(S,"LI",{});var rR=s(ns);Dde=n(rR,"STRONG",{});var j_t=s(Dde);Xmo=r(j_t,"convbert"),j_t.forEach(t),zmo=r(rR," \u2014 "),tN=n(rR,"A",{href:!0});var D_t=s(tN);Wmo=r(D_t,"ConvBertTokenizer"),D_t.forEach(t),Qmo=r(rR," or "),aN=n(rR,"A",{href:!0});var G_t=s(aN);Umo=r(G_t,"ConvBertTokenizerFast"),G_t.forEach(t),Hmo=r(rR," (ConvBERT model)"),rR.forEach(t),Jmo=i(S),ss=n(S,"LI",{});var tR=s(ss);Gde=n(tR,"STRONG",{});var O_t=s(Gde);Ymo=r(O_t,"cpm"),O_t.forEach(t),Kmo=r(tR," \u2014 "),nN=n(tR,"A",{href:!0});var V_t=s(nN);Zmo=r(V_t,"CpmTokenizer"),V_t.forEach(t),ego=r(tR," or "),sN=n(tR,"A",{href:!0});var X_t=s(sN);ogo=r(X_t,"CpmTokenizerFast"),X_t.forEach(t),rgo=r(tR," (CPM model)"),tR.forEach(t),tgo=i(S),Sh=n(S,"LI",{});var H$e=s(Sh);Ode=n(H$e,"STRONG",{});var z_t=s(Ode);ago=r(z_t,"ctrl"),z_t.forEach(t),ngo=r(H$e," \u2014 "),lN=n(H$e,"A",{href:!0});var W_t=s(lN);sgo=r(W_t,"CTRLTokenizer"),W_t.forEach(t),lgo=r(H$e," (CTRL model)"),H$e.forEach(t),igo=i(S),ls=n(S,"LI",{});var aR=s(ls);Vde=n(aR,"STRONG",{});var Q_t=s(Vde);dgo=r(Q_t,"data2vec-text"),Q_t.forEach(t),cgo=r(aR," \u2014 "),iN=n(aR,"A",{href:!0});var U_t=s(iN);fgo=r(U_t,"RobertaTokenizer"),U_t.forEach(t),mgo=r(aR," or "),dN=n(aR,"A",{href:!0});var H_t=s(dN);ggo=r(H_t,"RobertaTokenizerFast"),H_t.forEach(t),hgo=r(aR," (Data2VecText model)"),aR.forEach(t),pgo=i(S),is=n(S,"LI",{});var nR=s(is);Xde=n(nR,"STRONG",{});var J_t=s(Xde);_go=r(J_t,"deberta"),J_t.forEach(t),ugo=r(nR," \u2014 "),cN=n(nR,"A",{href:!0});var Y_t=s(cN);bgo=r(Y_t,"DebertaTokenizer"),Y_t.forEach(t),vgo=r(nR," or "),fN=n(nR,"A",{href:!0});var K_t=s(fN);Fgo=r(K_t,"DebertaTokenizerFast"),K_t.forEach(t),Tgo=r(nR," (DeBERTa model)"),nR.forEach(t),Mgo=i(S),ds=n(S,"LI",{});var sR=s(ds);zde=n(sR,"STRONG",{});var Z_t=s(zde);Ego=r(Z_t,"deberta-v2"),Z_t.forEach(t),Cgo=r(sR," \u2014 "),mN=n(sR,"A",{href:!0});var eut=s(mN);wgo=r(eut,"DebertaV2Tokenizer"),eut.forEach(t),Ago=r(sR," or "),gN=n(sR,"A",{href:!0});var out=s(gN);Lgo=r(out,"DebertaV2TokenizerFast"),out.forEach(t),ygo=r(sR," (DeBERTa-v2 model)"),sR.forEach(t),xgo=i(S),cs=n(S,"LI",{});var lR=s(cs);Wde=n(lR,"STRONG",{});var rut=s(Wde);$go=r(rut,"distilbert"),rut.forEach(t),kgo=r(lR," \u2014 "),hN=n(lR,"A",{href:!0});var tut=s(hN);Sgo=r(tut,"DistilBertTokenizer"),tut.forEach(t),Rgo=r(lR," or "),pN=n(lR,"A",{href:!0});var aut=s(pN);Pgo=r(aut,"DistilBertTokenizerFast"),aut.forEach(t),Bgo=r(lR," (DistilBERT model)"),lR.forEach(t),Igo=i(S),fs=n(S,"LI",{});var iR=s(fs);Qde=n(iR,"STRONG",{});var nut=s(Qde);Ngo=r(nut,"dpr"),nut.forEach(t),qgo=r(iR," \u2014 "),_N=n(iR,"A",{href:!0});var sut=s(_N);jgo=r(sut,"DPRQuestionEncoderTokenizer"),sut.forEach(t),Dgo=r(iR," or "),uN=n(iR,"A",{href:!0});var lut=s(uN);Ggo=r(lut,"DPRQuestionEncoderTokenizerFast"),lut.forEach(t),Ogo=r(iR," (DPR model)"),iR.forEach(t),Vgo=i(S),ms=n(S,"LI",{});var dR=s(ms);Ude=n(dR,"STRONG",{});var iut=s(Ude);Xgo=r(iut,"electra"),iut.forEach(t),zgo=r(dR," \u2014 "),bN=n(dR,"A",{href:!0});var dut=s(bN);Wgo=r(dut,"ElectraTokenizer"),dut.forEach(t),Qgo=r(dR," or "),vN=n(dR,"A",{href:!0});var cut=s(vN);Ugo=r(cut,"ElectraTokenizerFast"),cut.forEach(t),Hgo=r(dR," (ELECTRA model)"),dR.forEach(t),Jgo=i(S),Rh=n(S,"LI",{});var J$e=s(Rh);Hde=n(J$e,"STRONG",{});var fut=s(Hde);Ygo=r(fut,"flaubert"),fut.forEach(t),Kgo=r(J$e," \u2014 "),FN=n(J$e,"A",{href:!0});var mut=s(FN);Zgo=r(mut,"FlaubertTokenizer"),mut.forEach(t),eho=r(J$e," (FlauBERT model)"),J$e.forEach(t),oho=i(S),gs=n(S,"LI",{});var cR=s(gs);Jde=n(cR,"STRONG",{});var gut=s(Jde);rho=r(gut,"fnet"),gut.forEach(t),tho=r(cR," \u2014 "),TN=n(cR,"A",{href:!0});var hut=s(TN);aho=r(hut,"FNetTokenizer"),hut.forEach(t),nho=r(cR," or "),MN=n(cR,"A",{href:!0});var put=s(MN);sho=r(put,"FNetTokenizerFast"),put.forEach(t),lho=r(cR," (FNet model)"),cR.forEach(t),iho=i(S),Ph=n(S,"LI",{});var Y$e=s(Ph);Yde=n(Y$e,"STRONG",{});var _ut=s(Yde);dho=r(_ut,"fsmt"),_ut.forEach(t),cho=r(Y$e," \u2014 "),EN=n(Y$e,"A",{href:!0});var uut=s(EN);fho=r(uut,"FSMTTokenizer"),uut.forEach(t),mho=r(Y$e," (FairSeq Machine-Translation model)"),Y$e.forEach(t),gho=i(S),hs=n(S,"LI",{});var fR=s(hs);Kde=n(fR,"STRONG",{});var but=s(Kde);hho=r(but,"funnel"),but.forEach(t),pho=r(fR," \u2014 "),CN=n(fR,"A",{href:!0});var vut=s(CN);_ho=r(vut,"FunnelTokenizer"),vut.forEach(t),uho=r(fR," or "),wN=n(fR,"A",{href:!0});var Fut=s(wN);bho=r(Fut,"FunnelTokenizerFast"),Fut.forEach(t),vho=r(fR," (Funnel Transformer model)"),fR.forEach(t),Fho=i(S),ps=n(S,"LI",{});var mR=s(ps);Zde=n(mR,"STRONG",{});var Tut=s(Zde);Tho=r(Tut,"gpt2"),Tut.forEach(t),Mho=r(mR," \u2014 "),AN=n(mR,"A",{href:!0});var Mut=s(AN);Eho=r(Mut,"GPT2Tokenizer"),Mut.forEach(t),Cho=r(mR," or "),LN=n(mR,"A",{href:!0});var Eut=s(LN);who=r(Eut,"GPT2TokenizerFast"),Eut.forEach(t),Aho=r(mR," (OpenAI GPT-2 model)"),mR.forEach(t),Lho=i(S),_s=n(S,"LI",{});var gR=s(_s);ece=n(gR,"STRONG",{});var Cut=s(ece);yho=r(Cut,"gpt_neo"),Cut.forEach(t),xho=r(gR," \u2014 "),yN=n(gR,"A",{href:!0});var wut=s(yN);$ho=r(wut,"GPT2Tokenizer"),wut.forEach(t),kho=r(gR," or "),xN=n(gR,"A",{href:!0});var Aut=s(xN);Sho=r(Aut,"GPT2TokenizerFast"),Aut.forEach(t),Rho=r(gR," (GPT Neo model)"),gR.forEach(t),Pho=i(S),Bh=n(S,"LI",{});var K$e=s(Bh);oce=n(K$e,"STRONG",{});var Lut=s(oce);Bho=r(Lut,"gpt_neox"),Lut.forEach(t),Iho=r(K$e," \u2014 "),$N=n(K$e,"A",{href:!0});var yut=s($N);Nho=r(yut,"GPTNeoXTokenizerFast"),yut.forEach(t),qho=r(K$e," (GPT NeoX model)"),K$e.forEach(t),jho=i(S),us=n(S,"LI",{});var hR=s(us);rce=n(hR,"STRONG",{});var xut=s(rce);Dho=r(xut,"gptj"),xut.forEach(t),Gho=r(hR," \u2014 "),kN=n(hR,"A",{href:!0});var $ut=s(kN);Oho=r($ut,"GPT2Tokenizer"),$ut.forEach(t),Vho=r(hR," or "),SN=n(hR,"A",{href:!0});var kut=s(SN);Xho=r(kut,"GPT2TokenizerFast"),kut.forEach(t),zho=r(hR," (GPT-J model)"),hR.forEach(t),Who=i(S),bs=n(S,"LI",{});var pR=s(bs);tce=n(pR,"STRONG",{});var Sut=s(tce);Qho=r(Sut,"groupvit"),Sut.forEach(t),Uho=r(pR," \u2014 "),RN=n(pR,"A",{href:!0});var Rut=s(RN);Hho=r(Rut,"CLIPTokenizer"),Rut.forEach(t),Jho=r(pR," or "),PN=n(pR,"A",{href:!0});var Put=s(PN);Yho=r(Put,"CLIPTokenizerFast"),Put.forEach(t),Kho=r(pR," (GroupViT model)"),pR.forEach(t),Zho=i(S),vs=n(S,"LI",{});var _R=s(vs);ace=n(_R,"STRONG",{});var But=s(ace);epo=r(But,"herbert"),But.forEach(t),opo=r(_R," \u2014 "),BN=n(_R,"A",{href:!0});var Iut=s(BN);rpo=r(Iut,"HerbertTokenizer"),Iut.forEach(t),tpo=r(_R," or "),IN=n(_R,"A",{href:!0});var Nut=s(IN);apo=r(Nut,"HerbertTokenizerFast"),Nut.forEach(t),npo=r(_R," (HerBERT model)"),_R.forEach(t),spo=i(S),Ih=n(S,"LI",{});var Z$e=s(Ih);nce=n(Z$e,"STRONG",{});var qut=s(nce);lpo=r(qut,"hubert"),qut.forEach(t),ipo=r(Z$e," \u2014 "),NN=n(Z$e,"A",{href:!0});var jut=s(NN);dpo=r(jut,"Wav2Vec2CTCTokenizer"),jut.forEach(t),cpo=r(Z$e," (Hubert model)"),Z$e.forEach(t),fpo=i(S),Fs=n(S,"LI",{});var uR=s(Fs);sce=n(uR,"STRONG",{});var Dut=s(sce);mpo=r(Dut,"ibert"),Dut.forEach(t),gpo=r(uR," \u2014 "),qN=n(uR,"A",{href:!0});var Gut=s(qN);hpo=r(Gut,"RobertaTokenizer"),Gut.forEach(t),ppo=r(uR," or "),jN=n(uR,"A",{href:!0});var Out=s(jN);_po=r(Out,"RobertaTokenizerFast"),Out.forEach(t),upo=r(uR," (I-BERT model)"),uR.forEach(t),bpo=i(S),Ts=n(S,"LI",{});var bR=s(Ts);lce=n(bR,"STRONG",{});var Vut=s(lce);vpo=r(Vut,"layoutlm"),Vut.forEach(t),Fpo=r(bR," \u2014 "),DN=n(bR,"A",{href:!0});var Xut=s(DN);Tpo=r(Xut,"LayoutLMTokenizer"),Xut.forEach(t),Mpo=r(bR," or "),GN=n(bR,"A",{href:!0});var zut=s(GN);Epo=r(zut,"LayoutLMTokenizerFast"),zut.forEach(t),Cpo=r(bR," (LayoutLM model)"),bR.forEach(t),wpo=i(S),Ms=n(S,"LI",{});var vR=s(Ms);ice=n(vR,"STRONG",{});var Wut=s(ice);Apo=r(Wut,"layoutlmv2"),Wut.forEach(t),Lpo=r(vR," \u2014 "),ON=n(vR,"A",{href:!0});var Qut=s(ON);ypo=r(Qut,"LayoutLMv2Tokenizer"),Qut.forEach(t),xpo=r(vR," or "),VN=n(vR,"A",{href:!0});var Uut=s(VN);$po=r(Uut,"LayoutLMv2TokenizerFast"),Uut.forEach(t),kpo=r(vR," (LayoutLMv2 model)"),vR.forEach(t),Spo=i(S),Es=n(S,"LI",{});var FR=s(Es);dce=n(FR,"STRONG",{});var Hut=s(dce);Rpo=r(Hut,"layoutlmv3"),Hut.forEach(t),Ppo=r(FR," \u2014 "),XN=n(FR,"A",{href:!0});var Jut=s(XN);Bpo=r(Jut,"LayoutLMv3Tokenizer"),Jut.forEach(t),Ipo=r(FR," or "),zN=n(FR,"A",{href:!0});var Yut=s(zN);Npo=r(Yut,"LayoutLMv3TokenizerFast"),Yut.forEach(t),qpo=r(FR," (LayoutLMv3 model)"),FR.forEach(t),jpo=i(S),Cs=n(S,"LI",{});var TR=s(Cs);cce=n(TR,"STRONG",{});var Kut=s(cce);Dpo=r(Kut,"layoutxlm"),Kut.forEach(t),Gpo=r(TR," \u2014 "),WN=n(TR,"A",{href:!0});var Zut=s(WN);Opo=r(Zut,"LayoutXLMTokenizer"),Zut.forEach(t),Vpo=r(TR," or "),QN=n(TR,"A",{href:!0});var e1t=s(QN);Xpo=r(e1t,"LayoutXLMTokenizerFast"),e1t.forEach(t),zpo=r(TR," (LayoutXLM model)"),TR.forEach(t),Wpo=i(S),ws=n(S,"LI",{});var MR=s(ws);fce=n(MR,"STRONG",{});var o1t=s(fce);Qpo=r(o1t,"led"),o1t.forEach(t),Upo=r(MR," \u2014 "),UN=n(MR,"A",{href:!0});var r1t=s(UN);Hpo=r(r1t,"LEDTokenizer"),r1t.forEach(t),Jpo=r(MR," or "),HN=n(MR,"A",{href:!0});var t1t=s(HN);Ypo=r(t1t,"LEDTokenizerFast"),t1t.forEach(t),Kpo=r(MR," (LED model)"),MR.forEach(t),Zpo=i(S),As=n(S,"LI",{});var ER=s(As);mce=n(ER,"STRONG",{});var a1t=s(mce);e_o=r(a1t,"longformer"),a1t.forEach(t),o_o=r(ER," \u2014 "),JN=n(ER,"A",{href:!0});var n1t=s(JN);r_o=r(n1t,"LongformerTokenizer"),n1t.forEach(t),t_o=r(ER," or "),YN=n(ER,"A",{href:!0});var s1t=s(YN);a_o=r(s1t,"LongformerTokenizerFast"),s1t.forEach(t),n_o=r(ER," (Longformer model)"),ER.forEach(t),s_o=i(S),Ls=n(S,"LI",{});var CR=s(Ls);gce=n(CR,"STRONG",{});var l1t=s(gce);l_o=r(l1t,"longt5"),l1t.forEach(t),i_o=r(CR," \u2014 "),KN=n(CR,"A",{href:!0});var i1t=s(KN);d_o=r(i1t,"T5Tokenizer"),i1t.forEach(t),c_o=r(CR," or "),ZN=n(CR,"A",{href:!0});var d1t=s(ZN);f_o=r(d1t,"T5TokenizerFast"),d1t.forEach(t),m_o=r(CR," (LongT5 model)"),CR.forEach(t),g_o=i(S),Nh=n(S,"LI",{});var eke=s(Nh);hce=n(eke,"STRONG",{});var c1t=s(hce);h_o=r(c1t,"luke"),c1t.forEach(t),p_o=r(eke," \u2014 "),eq=n(eke,"A",{href:!0});var f1t=s(eq);__o=r(f1t,"LukeTokenizer"),f1t.forEach(t),u_o=r(eke," (LUKE model)"),eke.forEach(t),b_o=i(S),ys=n(S,"LI",{});var wR=s(ys);pce=n(wR,"STRONG",{});var m1t=s(pce);v_o=r(m1t,"lxmert"),m1t.forEach(t),F_o=r(wR," \u2014 "),oq=n(wR,"A",{href:!0});var g1t=s(oq);T_o=r(g1t,"LxmertTokenizer"),g1t.forEach(t),M_o=r(wR," or "),rq=n(wR,"A",{href:!0});var h1t=s(rq);E_o=r(h1t,"LxmertTokenizerFast"),h1t.forEach(t),C_o=r(wR," (LXMERT model)"),wR.forEach(t),w_o=i(S),qh=n(S,"LI",{});var oke=s(qh);_ce=n(oke,"STRONG",{});var p1t=s(_ce);A_o=r(p1t,"m2m_100"),p1t.forEach(t),L_o=r(oke," \u2014 "),tq=n(oke,"A",{href:!0});var _1t=s(tq);y_o=r(_1t,"M2M100Tokenizer"),_1t.forEach(t),x_o=r(oke," (M2M100 model)"),oke.forEach(t),$_o=i(S),jh=n(S,"LI",{});var rke=s(jh);uce=n(rke,"STRONG",{});var u1t=s(uce);k_o=r(u1t,"marian"),u1t.forEach(t),S_o=r(rke," \u2014 "),aq=n(rke,"A",{href:!0});var b1t=s(aq);R_o=r(b1t,"MarianTokenizer"),b1t.forEach(t),P_o=r(rke," (Marian model)"),rke.forEach(t),B_o=i(S),xs=n(S,"LI",{});var AR=s(xs);bce=n(AR,"STRONG",{});var v1t=s(bce);I_o=r(v1t,"mbart"),v1t.forEach(t),N_o=r(AR," \u2014 "),nq=n(AR,"A",{href:!0});var F1t=s(nq);q_o=r(F1t,"MBartTokenizer"),F1t.forEach(t),j_o=r(AR," or "),sq=n(AR,"A",{href:!0});var T1t=s(sq);D_o=r(T1t,"MBartTokenizerFast"),T1t.forEach(t),G_o=r(AR," (mBART model)"),AR.forEach(t),O_o=i(S),$s=n(S,"LI",{});var LR=s($s);vce=n(LR,"STRONG",{});var M1t=s(vce);V_o=r(M1t,"mbart50"),M1t.forEach(t),X_o=r(LR," \u2014 "),lq=n(LR,"A",{href:!0});var E1t=s(lq);z_o=r(E1t,"MBart50Tokenizer"),E1t.forEach(t),W_o=r(LR," or "),iq=n(LR,"A",{href:!0});var C1t=s(iq);Q_o=r(C1t,"MBart50TokenizerFast"),C1t.forEach(t),U_o=r(LR," (mBART-50 model)"),LR.forEach(t),H_o=i(S),ks=n(S,"LI",{});var yR=s(ks);Fce=n(yR,"STRONG",{});var w1t=s(Fce);J_o=r(w1t,"megatron-bert"),w1t.forEach(t),Y_o=r(yR," \u2014 "),dq=n(yR,"A",{href:!0});var A1t=s(dq);K_o=r(A1t,"BertTokenizer"),A1t.forEach(t),Z_o=r(yR," or "),cq=n(yR,"A",{href:!0});var L1t=s(cq);euo=r(L1t,"BertTokenizerFast"),L1t.forEach(t),ouo=r(yR," (Megatron-BERT model)"),yR.forEach(t),ruo=i(S),Dh=n(S,"LI",{});var tke=s(Dh);Tce=n(tke,"STRONG",{});var y1t=s(Tce);tuo=r(y1t,"mluke"),y1t.forEach(t),auo=r(tke," \u2014 "),fq=n(tke,"A",{href:!0});var x1t=s(fq);nuo=r(x1t,"MLukeTokenizer"),x1t.forEach(t),suo=r(tke," (mLUKE model)"),tke.forEach(t),luo=i(S),Ss=n(S,"LI",{});var xR=s(Ss);Mce=n(xR,"STRONG",{});var $1t=s(Mce);iuo=r($1t,"mobilebert"),$1t.forEach(t),duo=r(xR," \u2014 "),mq=n(xR,"A",{href:!0});var k1t=s(mq);cuo=r(k1t,"MobileBertTokenizer"),k1t.forEach(t),fuo=r(xR," or "),gq=n(xR,"A",{href:!0});var S1t=s(gq);muo=r(S1t,"MobileBertTokenizerFast"),S1t.forEach(t),guo=r(xR," (MobileBERT model)"),xR.forEach(t),huo=i(S),Rs=n(S,"LI",{});var $R=s(Rs);Ece=n($R,"STRONG",{});var R1t=s(Ece);puo=r(R1t,"mpnet"),R1t.forEach(t),_uo=r($R," \u2014 "),hq=n($R,"A",{href:!0});var P1t=s(hq);uuo=r(P1t,"MPNetTokenizer"),P1t.forEach(t),buo=r($R," or "),pq=n($R,"A",{href:!0});var B1t=s(pq);vuo=r(B1t,"MPNetTokenizerFast"),B1t.forEach(t),Fuo=r($R," (MPNet model)"),$R.forEach(t),Tuo=i(S),Ps=n(S,"LI",{});var kR=s(Ps);Cce=n(kR,"STRONG",{});var I1t=s(Cce);Muo=r(I1t,"mt5"),I1t.forEach(t),Euo=r(kR," \u2014 "),_q=n(kR,"A",{href:!0});var N1t=s(_q);Cuo=r(N1t,"MT5Tokenizer"),N1t.forEach(t),wuo=r(kR," or "),uq=n(kR,"A",{href:!0});var q1t=s(uq);Auo=r(q1t,"MT5TokenizerFast"),q1t.forEach(t),Luo=r(kR," (MT5 model)"),kR.forEach(t),yuo=i(S),Bs=n(S,"LI",{});var SR=s(Bs);wce=n(SR,"STRONG",{});var j1t=s(wce);xuo=r(j1t,"mvp"),j1t.forEach(t),$uo=r(SR," \u2014 "),bq=n(SR,"A",{href:!0});var D1t=s(bq);kuo=r(D1t,"MvpTokenizer"),D1t.forEach(t),Suo=r(SR," or "),vq=n(SR,"A",{href:!0});var G1t=s(vq);Ruo=r(G1t,"MvpTokenizerFast"),G1t.forEach(t),Puo=r(SR," (MVP model)"),SR.forEach(t),Buo=i(S),Is=n(S,"LI",{});var RR=s(Is);Ace=n(RR,"STRONG",{});var O1t=s(Ace);Iuo=r(O1t,"nezha"),O1t.forEach(t),Nuo=r(RR," \u2014 "),Fq=n(RR,"A",{href:!0});var V1t=s(Fq);quo=r(V1t,"BertTokenizer"),V1t.forEach(t),juo=r(RR," or "),Tq=n(RR,"A",{href:!0});var X1t=s(Tq);Duo=r(X1t,"BertTokenizerFast"),X1t.forEach(t),Guo=r(RR," (Nezha model)"),RR.forEach(t),Ouo=i(S),Ns=n(S,"LI",{});var PR=s(Ns);Lce=n(PR,"STRONG",{});var z1t=s(Lce);Vuo=r(z1t,"nllb"),z1t.forEach(t),Xuo=r(PR," \u2014 "),Mq=n(PR,"A",{href:!0});var W1t=s(Mq);zuo=r(W1t,"NllbTokenizer"),W1t.forEach(t),Wuo=r(PR," or "),Eq=n(PR,"A",{href:!0});var Q1t=s(Eq);Quo=r(Q1t,"NllbTokenizerFast"),Q1t.forEach(t),Uuo=r(PR," (NLLB model)"),PR.forEach(t),Huo=i(S),qs=n(S,"LI",{});var BR=s(qs);yce=n(BR,"STRONG",{});var U1t=s(yce);Juo=r(U1t,"nystromformer"),U1t.forEach(t),Yuo=r(BR," \u2014 "),Cq=n(BR,"A",{href:!0});var H1t=s(Cq);Kuo=r(H1t,"AlbertTokenizer"),H1t.forEach(t),Zuo=r(BR," or "),wq=n(BR,"A",{href:!0});var J1t=s(wq);e1o=r(J1t,"AlbertTokenizerFast"),J1t.forEach(t),o1o=r(BR," (Nystr\xF6mformer model)"),BR.forEach(t),r1o=i(S),js=n(S,"LI",{});var IR=s(js);xce=n(IR,"STRONG",{});var Y1t=s(xce);t1o=r(Y1t,"openai-gpt"),Y1t.forEach(t),a1o=r(IR," \u2014 "),Aq=n(IR,"A",{href:!0});var K1t=s(Aq);n1o=r(K1t,"OpenAIGPTTokenizer"),K1t.forEach(t),s1o=r(IR," or "),Lq=n(IR,"A",{href:!0});var Z1t=s(Lq);l1o=r(Z1t,"OpenAIGPTTokenizerFast"),Z1t.forEach(t),i1o=r(IR," (OpenAI GPT model)"),IR.forEach(t),d1o=i(S),Gh=n(S,"LI",{});var ake=s(Gh);$ce=n(ake,"STRONG",{});var e8t=s($ce);c1o=r(e8t,"opt"),e8t.forEach(t),f1o=r(ake," \u2014 "),yq=n(ake,"A",{href:!0});var o8t=s(yq);m1o=r(o8t,"GPT2Tokenizer"),o8t.forEach(t),g1o=r(ake," (OPT model)"),ake.forEach(t),h1o=i(S),Ds=n(S,"LI",{});var NR=s(Ds);kce=n(NR,"STRONG",{});var r8t=s(kce);p1o=r(r8t,"owlvit"),r8t.forEach(t),_1o=r(NR," \u2014 "),xq=n(NR,"A",{href:!0});var t8t=s(xq);u1o=r(t8t,"CLIPTokenizer"),t8t.forEach(t),b1o=r(NR," or "),$q=n(NR,"A",{href:!0});var a8t=s($q);v1o=r(a8t,"CLIPTokenizerFast"),a8t.forEach(t),F1o=r(NR," (OWL-ViT model)"),NR.forEach(t),T1o=i(S),Gs=n(S,"LI",{});var qR=s(Gs);Sce=n(qR,"STRONG",{});var n8t=s(Sce);M1o=r(n8t,"pegasus"),n8t.forEach(t),E1o=r(qR," \u2014 "),kq=n(qR,"A",{href:!0});var s8t=s(kq);C1o=r(s8t,"PegasusTokenizer"),s8t.forEach(t),w1o=r(qR," or "),Sq=n(qR,"A",{href:!0});var l8t=s(Sq);A1o=r(l8t,"PegasusTokenizerFast"),l8t.forEach(t),L1o=r(qR," (Pegasus model)"),qR.forEach(t),y1o=i(S),Oh=n(S,"LI",{});var nke=s(Oh);Rce=n(nke,"STRONG",{});var i8t=s(Rce);x1o=r(i8t,"perceiver"),i8t.forEach(t),$1o=r(nke," \u2014 "),Rq=n(nke,"A",{href:!0});var d8t=s(Rq);k1o=r(d8t,"PerceiverTokenizer"),d8t.forEach(t),S1o=r(nke," (Perceiver model)"),nke.forEach(t),R1o=i(S),Vh=n(S,"LI",{});var ske=s(Vh);Pce=n(ske,"STRONG",{});var c8t=s(Pce);P1o=r(c8t,"phobert"),c8t.forEach(t),B1o=r(ske," \u2014 "),Pq=n(ske,"A",{href:!0});var f8t=s(Pq);I1o=r(f8t,"PhobertTokenizer"),f8t.forEach(t),N1o=r(ske," (PhoBERT model)"),ske.forEach(t),q1o=i(S),Xh=n(S,"LI",{});var lke=s(Xh);Bce=n(lke,"STRONG",{});var m8t=s(Bce);j1o=r(m8t,"plbart"),m8t.forEach(t),D1o=r(lke," \u2014 "),Bq=n(lke,"A",{href:!0});var g8t=s(Bq);G1o=r(g8t,"PLBartTokenizer"),g8t.forEach(t),O1o=r(lke," (PLBart model)"),lke.forEach(t),V1o=i(S),zh=n(S,"LI",{});var ike=s(zh);Ice=n(ike,"STRONG",{});var h8t=s(Ice);X1o=r(h8t,"prophetnet"),h8t.forEach(t),z1o=r(ike," \u2014 "),Iq=n(ike,"A",{href:!0});var p8t=s(Iq);W1o=r(p8t,"ProphetNetTokenizer"),p8t.forEach(t),Q1o=r(ike," (ProphetNet model)"),ike.forEach(t),U1o=i(S),Os=n(S,"LI",{});var jR=s(Os);Nce=n(jR,"STRONG",{});var _8t=s(Nce);H1o=r(_8t,"qdqbert"),_8t.forEach(t),J1o=r(jR," \u2014 "),Nq=n(jR,"A",{href:!0});var u8t=s(Nq);Y1o=r(u8t,"BertTokenizer"),u8t.forEach(t),K1o=r(jR," or "),qq=n(jR,"A",{href:!0});var b8t=s(qq);Z1o=r(b8t,"BertTokenizerFast"),b8t.forEach(t),e8o=r(jR," (QDQBert model)"),jR.forEach(t),o8o=i(S),Wh=n(S,"LI",{});var dke=s(Wh);qce=n(dke,"STRONG",{});var v8t=s(qce);r8o=r(v8t,"rag"),v8t.forEach(t),t8o=r(dke," \u2014 "),jq=n(dke,"A",{href:!0});var F8t=s(jq);a8o=r(F8t,"RagTokenizer"),F8t.forEach(t),n8o=r(dke," (RAG model)"),dke.forEach(t),s8o=i(S),Vs=n(S,"LI",{});var DR=s(Vs);jce=n(DR,"STRONG",{});var T8t=s(jce);l8o=r(T8t,"realm"),T8t.forEach(t),i8o=r(DR," \u2014 "),Dq=n(DR,"A",{href:!0});var M8t=s(Dq);d8o=r(M8t,"RealmTokenizer"),M8t.forEach(t),c8o=r(DR," or "),Gq=n(DR,"A",{href:!0});var E8t=s(Gq);f8o=r(E8t,"RealmTokenizerFast"),E8t.forEach(t),m8o=r(DR," (REALM model)"),DR.forEach(t),g8o=i(S),Xs=n(S,"LI",{});var GR=s(Xs);Dce=n(GR,"STRONG",{});var C8t=s(Dce);h8o=r(C8t,"reformer"),C8t.forEach(t),p8o=r(GR," \u2014 "),Oq=n(GR,"A",{href:!0});var w8t=s(Oq);_8o=r(w8t,"ReformerTokenizer"),w8t.forEach(t),u8o=r(GR," or "),Vq=n(GR,"A",{href:!0});var A8t=s(Vq);b8o=r(A8t,"ReformerTokenizerFast"),A8t.forEach(t),v8o=r(GR," (Reformer model)"),GR.forEach(t),F8o=i(S),zs=n(S,"LI",{});var OR=s(zs);Gce=n(OR,"STRONG",{});var L8t=s(Gce);T8o=r(L8t,"rembert"),L8t.forEach(t),M8o=r(OR," \u2014 "),Xq=n(OR,"A",{href:!0});var y8t=s(Xq);E8o=r(y8t,"RemBertTokenizer"),y8t.forEach(t),C8o=r(OR," or "),zq=n(OR,"A",{href:!0});var x8t=s(zq);w8o=r(x8t,"RemBertTokenizerFast"),x8t.forEach(t),A8o=r(OR," (RemBERT model)"),OR.forEach(t),L8o=i(S),Ws=n(S,"LI",{});var VR=s(Ws);Oce=n(VR,"STRONG",{});var $8t=s(Oce);y8o=r($8t,"retribert"),$8t.forEach(t),x8o=r(VR," \u2014 "),Wq=n(VR,"A",{href:!0});var k8t=s(Wq);$8o=r(k8t,"RetriBertTokenizer"),k8t.forEach(t),k8o=r(VR," or "),Qq=n(VR,"A",{href:!0});var S8t=s(Qq);S8o=r(S8t,"RetriBertTokenizerFast"),S8t.forEach(t),R8o=r(VR," (RetriBERT model)"),VR.forEach(t),P8o=i(S),Qs=n(S,"LI",{});var XR=s(Qs);Vce=n(XR,"STRONG",{});var R8t=s(Vce);B8o=r(R8t,"roberta"),R8t.forEach(t),I8o=r(XR," \u2014 "),Uq=n(XR,"A",{href:!0});var P8t=s(Uq);N8o=r(P8t,"RobertaTokenizer"),P8t.forEach(t),q8o=r(XR," or "),Hq=n(XR,"A",{href:!0});var B8t=s(Hq);j8o=r(B8t,"RobertaTokenizerFast"),B8t.forEach(t),D8o=r(XR," (RoBERTa model)"),XR.forEach(t),G8o=i(S),Us=n(S,"LI",{});var zR=s(Us);Xce=n(zR,"STRONG",{});var I8t=s(Xce);O8o=r(I8t,"roformer"),I8t.forEach(t),V8o=r(zR," \u2014 "),Jq=n(zR,"A",{href:!0});var N8t=s(Jq);X8o=r(N8t,"RoFormerTokenizer"),N8t.forEach(t),z8o=r(zR," or "),Yq=n(zR,"A",{href:!0});var q8t=s(Yq);W8o=r(q8t,"RoFormerTokenizerFast"),q8t.forEach(t),Q8o=r(zR," (RoFormer model)"),zR.forEach(t),U8o=i(S),Qh=n(S,"LI",{});var cke=s(Qh);zce=n(cke,"STRONG",{});var j8t=s(zce);H8o=r(j8t,"speech_to_text"),j8t.forEach(t),J8o=r(cke," \u2014 "),Kq=n(cke,"A",{href:!0});var D8t=s(Kq);Y8o=r(D8t,"Speech2TextTokenizer"),D8t.forEach(t),K8o=r(cke," (Speech2Text model)"),cke.forEach(t),Z8o=i(S),Uh=n(S,"LI",{});var fke=s(Uh);Wce=n(fke,"STRONG",{});var G8t=s(Wce);e2o=r(G8t,"speech_to_text_2"),G8t.forEach(t),o2o=r(fke," \u2014 "),Zq=n(fke,"A",{href:!0});var O8t=s(Zq);r2o=r(O8t,"Speech2Text2Tokenizer"),O8t.forEach(t),t2o=r(fke," (Speech2Text2 model)"),fke.forEach(t),a2o=i(S),Hs=n(S,"LI",{});var WR=s(Hs);Qce=n(WR,"STRONG",{});var V8t=s(Qce);n2o=r(V8t,"splinter"),V8t.forEach(t),s2o=r(WR," \u2014 "),ej=n(WR,"A",{href:!0});var X8t=s(ej);l2o=r(X8t,"SplinterTokenizer"),X8t.forEach(t),i2o=r(WR," or "),oj=n(WR,"A",{href:!0});var z8t=s(oj);d2o=r(z8t,"SplinterTokenizerFast"),z8t.forEach(t),c2o=r(WR," (Splinter model)"),WR.forEach(t),f2o=i(S),Js=n(S,"LI",{});var QR=s(Js);Uce=n(QR,"STRONG",{});var W8t=s(Uce);m2o=r(W8t,"squeezebert"),W8t.forEach(t),g2o=r(QR," \u2014 "),rj=n(QR,"A",{href:!0});var Q8t=s(rj);h2o=r(Q8t,"SqueezeBertTokenizer"),Q8t.forEach(t),p2o=r(QR," or "),tj=n(QR,"A",{href:!0});var U8t=s(tj);_2o=r(U8t,"SqueezeBertTokenizerFast"),U8t.forEach(t),u2o=r(QR," (SqueezeBERT model)"),QR.forEach(t),b2o=i(S),Ys=n(S,"LI",{});var UR=s(Ys);Hce=n(UR,"STRONG",{});var H8t=s(Hce);v2o=r(H8t,"t5"),H8t.forEach(t),F2o=r(UR," \u2014 "),aj=n(UR,"A",{href:!0});var J8t=s(aj);T2o=r(J8t,"T5Tokenizer"),J8t.forEach(t),M2o=r(UR," or "),nj=n(UR,"A",{href:!0});var Y8t=s(nj);E2o=r(Y8t,"T5TokenizerFast"),Y8t.forEach(t),C2o=r(UR," (T5 model)"),UR.forEach(t),w2o=i(S),Hh=n(S,"LI",{});var mke=s(Hh);Jce=n(mke,"STRONG",{});var K8t=s(Jce);A2o=r(K8t,"tapas"),K8t.forEach(t),L2o=r(mke," \u2014 "),sj=n(mke,"A",{href:!0});var Z8t=s(sj);y2o=r(Z8t,"TapasTokenizer"),Z8t.forEach(t),x2o=r(mke," (TAPAS model)"),mke.forEach(t),$2o=i(S),Jh=n(S,"LI",{});var gke=s(Jh);Yce=n(gke,"STRONG",{});var e2t=s(Yce);k2o=r(e2t,"tapex"),e2t.forEach(t),S2o=r(gke," \u2014 "),lj=n(gke,"A",{href:!0});var o2t=s(lj);R2o=r(o2t,"TapexTokenizer"),o2t.forEach(t),P2o=r(gke," (TAPEX model)"),gke.forEach(t),B2o=i(S),Yh=n(S,"LI",{});var hke=s(Yh);Kce=n(hke,"STRONG",{});var r2t=s(Kce);I2o=r(r2t,"transfo-xl"),r2t.forEach(t),N2o=r(hke," \u2014 "),ij=n(hke,"A",{href:!0});var t2t=s(ij);q2o=r(t2t,"TransfoXLTokenizer"),t2t.forEach(t),j2o=r(hke," (Transformer-XL model)"),hke.forEach(t),D2o=i(S),Ks=n(S,"LI",{});var HR=s(Ks);Zce=n(HR,"STRONG",{});var a2t=s(Zce);G2o=r(a2t,"vilt"),a2t.forEach(t),O2o=r(HR," \u2014 "),dj=n(HR,"A",{href:!0});var n2t=s(dj);V2o=r(n2t,"BertTokenizer"),n2t.forEach(t),X2o=r(HR," or "),cj=n(HR,"A",{href:!0});var s2t=s(cj);z2o=r(s2t,"BertTokenizerFast"),s2t.forEach(t),W2o=r(HR," (ViLT model)"),HR.forEach(t),Q2o=i(S),Zs=n(S,"LI",{});var JR=s(Zs);efe=n(JR,"STRONG",{});var l2t=s(efe);U2o=r(l2t,"visual_bert"),l2t.forEach(t),H2o=r(JR," \u2014 "),fj=n(JR,"A",{href:!0});var i2t=s(fj);J2o=r(i2t,"BertTokenizer"),i2t.forEach(t),Y2o=r(JR," or "),mj=n(JR,"A",{href:!0});var d2t=s(mj);K2o=r(d2t,"BertTokenizerFast"),d2t.forEach(t),Z2o=r(JR," (VisualBERT model)"),JR.forEach(t),ebo=i(S),Kh=n(S,"LI",{});var pke=s(Kh);ofe=n(pke,"STRONG",{});var c2t=s(ofe);obo=r(c2t,"wav2vec2"),c2t.forEach(t),rbo=r(pke," \u2014 "),gj=n(pke,"A",{href:!0});var f2t=s(gj);tbo=r(f2t,"Wav2Vec2CTCTokenizer"),f2t.forEach(t),abo=r(pke," (Wav2Vec2 model)"),pke.forEach(t),nbo=i(S),Zh=n(S,"LI",{});var _ke=s(Zh);rfe=n(_ke,"STRONG",{});var m2t=s(rfe);sbo=r(m2t,"wav2vec2-conformer"),m2t.forEach(t),lbo=r(_ke," \u2014 "),hj=n(_ke,"A",{href:!0});var g2t=s(hj);ibo=r(g2t,"Wav2Vec2CTCTokenizer"),g2t.forEach(t),dbo=r(_ke," (Wav2Vec2-Conformer model)"),_ke.forEach(t),cbo=i(S),ep=n(S,"LI",{});var uke=s(ep);tfe=n(uke,"STRONG",{});var h2t=s(tfe);fbo=r(h2t,"wav2vec2_phoneme"),h2t.forEach(t),mbo=r(uke," \u2014 "),pj=n(uke,"A",{href:!0});var p2t=s(pj);gbo=r(p2t,"Wav2Vec2PhonemeCTCTokenizer"),p2t.forEach(t),hbo=r(uke," (Wav2Vec2Phoneme model)"),uke.forEach(t),pbo=i(S),el=n(S,"LI",{});var YR=s(el);afe=n(YR,"STRONG",{});var _2t=s(afe);_bo=r(_2t,"xglm"),_2t.forEach(t),ubo=r(YR," \u2014 "),_j=n(YR,"A",{href:!0});var u2t=s(_j);bbo=r(u2t,"XGLMTokenizer"),u2t.forEach(t),vbo=r(YR," or "),uj=n(YR,"A",{href:!0});var b2t=s(uj);Fbo=r(b2t,"XGLMTokenizerFast"),b2t.forEach(t),Tbo=r(YR," (XGLM model)"),YR.forEach(t),Mbo=i(S),op=n(S,"LI",{});var bke=s(op);nfe=n(bke,"STRONG",{});var v2t=s(nfe);Ebo=r(v2t,"xlm"),v2t.forEach(t),Cbo=r(bke," \u2014 "),bj=n(bke,"A",{href:!0});var F2t=s(bj);wbo=r(F2t,"XLMTokenizer"),F2t.forEach(t),Abo=r(bke," (XLM model)"),bke.forEach(t),Lbo=i(S),rp=n(S,"LI",{});var vke=s(rp);sfe=n(vke,"STRONG",{});var T2t=s(sfe);ybo=r(T2t,"xlm-prophetnet"),T2t.forEach(t),xbo=r(vke," \u2014 "),vj=n(vke,"A",{href:!0});var M2t=s(vj);$bo=r(M2t,"XLMProphetNetTokenizer"),M2t.forEach(t),kbo=r(vke," (XLM-ProphetNet model)"),vke.forEach(t),Sbo=i(S),ol=n(S,"LI",{});var KR=s(ol);lfe=n(KR,"STRONG",{});var E2t=s(lfe);Rbo=r(E2t,"xlm-roberta"),E2t.forEach(t),Pbo=r(KR," \u2014 "),Fj=n(KR,"A",{href:!0});var C2t=s(Fj);Bbo=r(C2t,"XLMRobertaTokenizer"),C2t.forEach(t),Ibo=r(KR," or "),Tj=n(KR,"A",{href:!0});var w2t=s(Tj);Nbo=r(w2t,"XLMRobertaTokenizerFast"),w2t.forEach(t),qbo=r(KR," (XLM-RoBERTa model)"),KR.forEach(t),jbo=i(S),rl=n(S,"LI",{});var ZR=s(rl);ife=n(ZR,"STRONG",{});var A2t=s(ife);Dbo=r(A2t,"xlm-roberta-xl"),A2t.forEach(t),Gbo=r(ZR," \u2014 "),Mj=n(ZR,"A",{href:!0});var L2t=s(Mj);Obo=r(L2t,"RobertaTokenizer"),L2t.forEach(t),Vbo=r(ZR," or "),Ej=n(ZR,"A",{href:!0});var y2t=s(Ej);Xbo=r(y2t,"RobertaTokenizerFast"),y2t.forEach(t),zbo=r(ZR," (XLM-RoBERTa-XL model)"),ZR.forEach(t),Wbo=i(S),tl=n(S,"LI",{});var eP=s(tl);dfe=n(eP,"STRONG",{});var x2t=s(dfe);Qbo=r(x2t,"xlnet"),x2t.forEach(t),Ubo=r(eP," \u2014 "),Cj=n(eP,"A",{href:!0});var $2t=s(Cj);Hbo=r($2t,"XLNetTokenizer"),$2t.forEach(t),Jbo=r(eP," or "),wj=n(eP,"A",{href:!0});var k2t=s(wj);Ybo=r(k2t,"XLNetTokenizerFast"),k2t.forEach(t),Kbo=r(eP," (XLNet model)"),eP.forEach(t),Zbo=i(S),al=n(S,"LI",{});var oP=s(al);cfe=n(oP,"STRONG",{});var S2t=s(cfe);evo=r(S2t,"yoso"),S2t.forEach(t),ovo=r(oP," \u2014 "),Aj=n(oP,"A",{href:!0});var R2t=s(Aj);rvo=r(R2t,"AlbertTokenizer"),R2t.forEach(t),tvo=r(oP," or "),Lj=n(oP,"A",{href:!0});var P2t=s(Lj);avo=r(P2t,"AlbertTokenizerFast"),P2t.forEach(t),nvo=r(oP," (YOSO model)"),oP.forEach(t),S.forEach(t),svo=i(fl),T(tp.$$.fragment,fl),fl.forEach(t),lvo=i(cl),ap=n(cl,"DIV",{class:!0});var _Je=s(ap);T($y.$$.fragment,_Je),ivo=i(_Je),ffe=n(_Je,"P",{});var B2t=s(ffe);dvo=r(B2t,"Register a new tokenizer in this mapping."),B2t.forEach(t),_Je.forEach(t),cl.forEach(t),fUe=i(f),Zi=n(f,"H2",{class:!0});var uJe=s(Zi);np=n(uJe,"A",{id:!0,class:!0,href:!0});var I2t=s(np);mfe=n(I2t,"SPAN",{});var N2t=s(mfe);T(ky.$$.fragment,N2t),N2t.forEach(t),I2t.forEach(t),cvo=i(uJe),gfe=n(uJe,"SPAN",{});var q2t=s(gfe);fvo=r(q2t,"AutoFeatureExtractor"),q2t.forEach(t),uJe.forEach(t),mUe=i(f),$o=n(f,"DIV",{class:!0});var ml=s($o);T(Sy.$$.fragment,ml),mvo=i(ml),Ry=n(ml,"P",{});var bJe=s(Ry);gvo=r(bJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),yj=n(bJe,"A",{href:!0});var j2t=s(yj);hvo=r(j2t,"AutoFeatureExtractor.from_pretrained()"),j2t.forEach(t),pvo=r(bJe," class method."),bJe.forEach(t),_vo=i(ml),Py=n(ml,"P",{});var vJe=s(Py);uvo=r(vJe,"This class cannot be instantiated directly using "),hfe=n(vJe,"CODE",{});var D2t=s(hfe);bvo=r(D2t,"__init__()"),D2t.forEach(t),vvo=r(vJe," (throws an error)."),vJe.forEach(t),Fvo=i(ml),He=n(ml,"DIV",{class:!0});var fa=s(He);T(By.$$.fragment,fa),Tvo=i(fa),pfe=n(fa,"P",{});var G2t=s(pfe);Mvo=r(G2t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),G2t.forEach(t),Evo=i(fa),Oa=n(fa,"P",{});var pA=s(Oa);Cvo=r(pA,"The feature extractor class to instantiate is selected based on the "),_fe=n(pA,"CODE",{});var O2t=s(_fe);wvo=r(O2t,"model_type"),O2t.forEach(t),Avo=r(pA,` property of the config object
(either passed as an argument or loaded from `),ufe=n(pA,"CODE",{});var V2t=s(ufe);Lvo=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),yvo=r(pA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bfe=n(pA,"CODE",{});var X2t=s(bfe);xvo=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),$vo=r(pA,":"),pA.forEach(t),kvo=i(fa),Q=n(fa,"UL",{});var J=s(Q);sp=n(J,"LI",{});var Fke=s(sp);vfe=n(Fke,"STRONG",{});var z2t=s(vfe);Svo=r(z2t,"beit"),z2t.forEach(t),Rvo=r(Fke," \u2014 "),xj=n(Fke,"A",{href:!0});var W2t=s(xj);Pvo=r(W2t,"BeitFeatureExtractor"),W2t.forEach(t),Bvo=r(Fke," (BEiT model)"),Fke.forEach(t),Ivo=i(J),lp=n(J,"LI",{});var Tke=s(lp);Ffe=n(Tke,"STRONG",{});var Q2t=s(Ffe);Nvo=r(Q2t,"clip"),Q2t.forEach(t),qvo=r(Tke," \u2014 "),$j=n(Tke,"A",{href:!0});var U2t=s($j);jvo=r(U2t,"CLIPFeatureExtractor"),U2t.forEach(t),Dvo=r(Tke," (CLIP model)"),Tke.forEach(t),Gvo=i(J),ip=n(J,"LI",{});var Mke=s(ip);Tfe=n(Mke,"STRONG",{});var H2t=s(Tfe);Ovo=r(H2t,"convnext"),H2t.forEach(t),Vvo=r(Mke," \u2014 "),kj=n(Mke,"A",{href:!0});var J2t=s(kj);Xvo=r(J2t,"ConvNextFeatureExtractor"),J2t.forEach(t),zvo=r(Mke," (ConvNeXT model)"),Mke.forEach(t),Wvo=i(J),dp=n(J,"LI",{});var Eke=s(dp);Mfe=n(Eke,"STRONG",{});var Y2t=s(Mfe);Qvo=r(Y2t,"cvt"),Y2t.forEach(t),Uvo=r(Eke," \u2014 "),Sj=n(Eke,"A",{href:!0});var K2t=s(Sj);Hvo=r(K2t,"ConvNextFeatureExtractor"),K2t.forEach(t),Jvo=r(Eke," (CvT model)"),Eke.forEach(t),Yvo=i(J),cp=n(J,"LI",{});var Cke=s(cp);Efe=n(Cke,"STRONG",{});var Z2t=s(Efe);Kvo=r(Z2t,"data2vec-audio"),Z2t.forEach(t),Zvo=r(Cke," \u2014 "),Rj=n(Cke,"A",{href:!0});var ebt=s(Rj);eFo=r(ebt,"Wav2Vec2FeatureExtractor"),ebt.forEach(t),oFo=r(Cke," (Data2VecAudio model)"),Cke.forEach(t),rFo=i(J),fp=n(J,"LI",{});var wke=s(fp);Cfe=n(wke,"STRONG",{});var obt=s(Cfe);tFo=r(obt,"data2vec-vision"),obt.forEach(t),aFo=r(wke," \u2014 "),Pj=n(wke,"A",{href:!0});var rbt=s(Pj);nFo=r(rbt,"BeitFeatureExtractor"),rbt.forEach(t),sFo=r(wke," (Data2VecVision model)"),wke.forEach(t),lFo=i(J),mp=n(J,"LI",{});var Ake=s(mp);wfe=n(Ake,"STRONG",{});var tbt=s(wfe);iFo=r(tbt,"deit"),tbt.forEach(t),dFo=r(Ake," \u2014 "),Bj=n(Ake,"A",{href:!0});var abt=s(Bj);cFo=r(abt,"DeiTFeatureExtractor"),abt.forEach(t),fFo=r(Ake," (DeiT model)"),Ake.forEach(t),mFo=i(J),gp=n(J,"LI",{});var Lke=s(gp);Afe=n(Lke,"STRONG",{});var nbt=s(Afe);gFo=r(nbt,"detr"),nbt.forEach(t),hFo=r(Lke," \u2014 "),Ij=n(Lke,"A",{href:!0});var sbt=s(Ij);pFo=r(sbt,"DetrFeatureExtractor"),sbt.forEach(t),_Fo=r(Lke," (DETR model)"),Lke.forEach(t),uFo=i(J),hp=n(J,"LI",{});var yke=s(hp);Lfe=n(yke,"STRONG",{});var lbt=s(Lfe);bFo=r(lbt,"donut"),lbt.forEach(t),vFo=r(yke," \u2014 "),Nj=n(yke,"A",{href:!0});var ibt=s(Nj);FFo=r(ibt,"DonutFeatureExtractor"),ibt.forEach(t),TFo=r(yke," (Donut model)"),yke.forEach(t),MFo=i(J),pp=n(J,"LI",{});var xke=s(pp);yfe=n(xke,"STRONG",{});var dbt=s(yfe);EFo=r(dbt,"dpt"),dbt.forEach(t),CFo=r(xke," \u2014 "),qj=n(xke,"A",{href:!0});var cbt=s(qj);wFo=r(cbt,"DPTFeatureExtractor"),cbt.forEach(t),AFo=r(xke," (DPT model)"),xke.forEach(t),LFo=i(J),_p=n(J,"LI",{});var $ke=s(_p);xfe=n($ke,"STRONG",{});var fbt=s(xfe);yFo=r(fbt,"flava"),fbt.forEach(t),xFo=r($ke," \u2014 "),jj=n($ke,"A",{href:!0});var mbt=s(jj);$Fo=r(mbt,"FlavaFeatureExtractor"),mbt.forEach(t),kFo=r($ke," (FLAVA model)"),$ke.forEach(t),SFo=i(J),up=n(J,"LI",{});var kke=s(up);$fe=n(kke,"STRONG",{});var gbt=s($fe);RFo=r(gbt,"glpn"),gbt.forEach(t),PFo=r(kke," \u2014 "),Dj=n(kke,"A",{href:!0});var hbt=s(Dj);BFo=r(hbt,"GLPNFeatureExtractor"),hbt.forEach(t),IFo=r(kke," (GLPN model)"),kke.forEach(t),NFo=i(J),bp=n(J,"LI",{});var Ske=s(bp);kfe=n(Ske,"STRONG",{});var pbt=s(kfe);qFo=r(pbt,"groupvit"),pbt.forEach(t),jFo=r(Ske," \u2014 "),Gj=n(Ske,"A",{href:!0});var _bt=s(Gj);DFo=r(_bt,"CLIPFeatureExtractor"),_bt.forEach(t),GFo=r(Ske," (GroupViT model)"),Ske.forEach(t),OFo=i(J),vp=n(J,"LI",{});var Rke=s(vp);Sfe=n(Rke,"STRONG",{});var ubt=s(Sfe);VFo=r(ubt,"hubert"),ubt.forEach(t),XFo=r(Rke," \u2014 "),Oj=n(Rke,"A",{href:!0});var bbt=s(Oj);zFo=r(bbt,"Wav2Vec2FeatureExtractor"),bbt.forEach(t),WFo=r(Rke," (Hubert model)"),Rke.forEach(t),QFo=i(J),Fp=n(J,"LI",{});var Pke=s(Fp);Rfe=n(Pke,"STRONG",{});var vbt=s(Rfe);UFo=r(vbt,"imagegpt"),vbt.forEach(t),HFo=r(Pke," \u2014 "),Vj=n(Pke,"A",{href:!0});var Fbt=s(Vj);JFo=r(Fbt,"ImageGPTFeatureExtractor"),Fbt.forEach(t),YFo=r(Pke," (ImageGPT model)"),Pke.forEach(t),KFo=i(J),Tp=n(J,"LI",{});var Bke=s(Tp);Pfe=n(Bke,"STRONG",{});var Tbt=s(Pfe);ZFo=r(Tbt,"layoutlmv2"),Tbt.forEach(t),e6o=r(Bke," \u2014 "),Xj=n(Bke,"A",{href:!0});var Mbt=s(Xj);o6o=r(Mbt,"LayoutLMv2FeatureExtractor"),Mbt.forEach(t),r6o=r(Bke," (LayoutLMv2 model)"),Bke.forEach(t),t6o=i(J),Mp=n(J,"LI",{});var Ike=s(Mp);Bfe=n(Ike,"STRONG",{});var Ebt=s(Bfe);a6o=r(Ebt,"layoutlmv3"),Ebt.forEach(t),n6o=r(Ike," \u2014 "),zj=n(Ike,"A",{href:!0});var Cbt=s(zj);s6o=r(Cbt,"LayoutLMv3FeatureExtractor"),Cbt.forEach(t),l6o=r(Ike," (LayoutLMv3 model)"),Ike.forEach(t),i6o=i(J),Ep=n(J,"LI",{});var Nke=s(Ep);Ife=n(Nke,"STRONG",{});var wbt=s(Ife);d6o=r(wbt,"levit"),wbt.forEach(t),c6o=r(Nke," \u2014 "),Wj=n(Nke,"A",{href:!0});var Abt=s(Wj);f6o=r(Abt,"LevitFeatureExtractor"),Abt.forEach(t),m6o=r(Nke," (LeViT model)"),Nke.forEach(t),g6o=i(J),Cp=n(J,"LI",{});var qke=s(Cp);Nfe=n(qke,"STRONG",{});var Lbt=s(Nfe);h6o=r(Lbt,"maskformer"),Lbt.forEach(t),p6o=r(qke," \u2014 "),Qj=n(qke,"A",{href:!0});var ybt=s(Qj);_6o=r(ybt,"MaskFormerFeatureExtractor"),ybt.forEach(t),u6o=r(qke," (MaskFormer model)"),qke.forEach(t),b6o=i(J),wp=n(J,"LI",{});var jke=s(wp);qfe=n(jke,"STRONG",{});var xbt=s(qfe);v6o=r(xbt,"mctct"),xbt.forEach(t),F6o=r(jke," \u2014 "),Uj=n(jke,"A",{href:!0});var $bt=s(Uj);T6o=r($bt,"MCTCTFeatureExtractor"),$bt.forEach(t),M6o=r(jke," (M-CTC-T model)"),jke.forEach(t),E6o=i(J),Ap=n(J,"LI",{});var Dke=s(Ap);jfe=n(Dke,"STRONG",{});var kbt=s(jfe);C6o=r(kbt,"mobilevit"),kbt.forEach(t),w6o=r(Dke," \u2014 "),Hj=n(Dke,"A",{href:!0});var Sbt=s(Hj);A6o=r(Sbt,"MobileViTFeatureExtractor"),Sbt.forEach(t),L6o=r(Dke," (MobileViT model)"),Dke.forEach(t),y6o=i(J),Lp=n(J,"LI",{});var Gke=s(Lp);Dfe=n(Gke,"STRONG",{});var Rbt=s(Dfe);x6o=r(Rbt,"owlvit"),Rbt.forEach(t),$6o=r(Gke," \u2014 "),Jj=n(Gke,"A",{href:!0});var Pbt=s(Jj);k6o=r(Pbt,"OwlViTFeatureExtractor"),Pbt.forEach(t),S6o=r(Gke," (OWL-ViT model)"),Gke.forEach(t),R6o=i(J),yp=n(J,"LI",{});var Oke=s(yp);Gfe=n(Oke,"STRONG",{});var Bbt=s(Gfe);P6o=r(Bbt,"perceiver"),Bbt.forEach(t),B6o=r(Oke," \u2014 "),Yj=n(Oke,"A",{href:!0});var Ibt=s(Yj);I6o=r(Ibt,"PerceiverFeatureExtractor"),Ibt.forEach(t),N6o=r(Oke," (Perceiver model)"),Oke.forEach(t),q6o=i(J),xp=n(J,"LI",{});var Vke=s(xp);Ofe=n(Vke,"STRONG",{});var Nbt=s(Ofe);j6o=r(Nbt,"poolformer"),Nbt.forEach(t),D6o=r(Vke," \u2014 "),Kj=n(Vke,"A",{href:!0});var qbt=s(Kj);G6o=r(qbt,"PoolFormerFeatureExtractor"),qbt.forEach(t),O6o=r(Vke," (PoolFormer model)"),Vke.forEach(t),V6o=i(J),$p=n(J,"LI",{});var Xke=s($p);Vfe=n(Xke,"STRONG",{});var jbt=s(Vfe);X6o=r(jbt,"regnet"),jbt.forEach(t),z6o=r(Xke," \u2014 "),Zj=n(Xke,"A",{href:!0});var Dbt=s(Zj);W6o=r(Dbt,"ConvNextFeatureExtractor"),Dbt.forEach(t),Q6o=r(Xke," (RegNet model)"),Xke.forEach(t),U6o=i(J),kp=n(J,"LI",{});var zke=s(kp);Xfe=n(zke,"STRONG",{});var Gbt=s(Xfe);H6o=r(Gbt,"resnet"),Gbt.forEach(t),J6o=r(zke," \u2014 "),eD=n(zke,"A",{href:!0});var Obt=s(eD);Y6o=r(Obt,"ConvNextFeatureExtractor"),Obt.forEach(t),K6o=r(zke," (ResNet model)"),zke.forEach(t),Z6o=i(J),Sp=n(J,"LI",{});var Wke=s(Sp);zfe=n(Wke,"STRONG",{});var Vbt=s(zfe);eTo=r(Vbt,"segformer"),Vbt.forEach(t),oTo=r(Wke," \u2014 "),oD=n(Wke,"A",{href:!0});var Xbt=s(oD);rTo=r(Xbt,"SegformerFeatureExtractor"),Xbt.forEach(t),tTo=r(Wke," (SegFormer model)"),Wke.forEach(t),aTo=i(J),Rp=n(J,"LI",{});var Qke=s(Rp);Wfe=n(Qke,"STRONG",{});var zbt=s(Wfe);nTo=r(zbt,"speech_to_text"),zbt.forEach(t),sTo=r(Qke," \u2014 "),rD=n(Qke,"A",{href:!0});var Wbt=s(rD);lTo=r(Wbt,"Speech2TextFeatureExtractor"),Wbt.forEach(t),iTo=r(Qke," (Speech2Text model)"),Qke.forEach(t),dTo=i(J),Pp=n(J,"LI",{});var Uke=s(Pp);Qfe=n(Uke,"STRONG",{});var Qbt=s(Qfe);cTo=r(Qbt,"swin"),Qbt.forEach(t),fTo=r(Uke," \u2014 "),tD=n(Uke,"A",{href:!0});var Ubt=s(tD);mTo=r(Ubt,"ViTFeatureExtractor"),Ubt.forEach(t),gTo=r(Uke," (Swin Transformer model)"),Uke.forEach(t),hTo=i(J),Bp=n(J,"LI",{});var Hke=s(Bp);Ufe=n(Hke,"STRONG",{});var Hbt=s(Ufe);pTo=r(Hbt,"swinv2"),Hbt.forEach(t),_To=r(Hke," \u2014 "),aD=n(Hke,"A",{href:!0});var Jbt=s(aD);uTo=r(Jbt,"ViTFeatureExtractor"),Jbt.forEach(t),bTo=r(Hke," (Swin Transformer V2 model)"),Hke.forEach(t),vTo=i(J),Ip=n(J,"LI",{});var Jke=s(Ip);Hfe=n(Jke,"STRONG",{});var Ybt=s(Hfe);FTo=r(Ybt,"van"),Ybt.forEach(t),TTo=r(Jke," \u2014 "),nD=n(Jke,"A",{href:!0});var Kbt=s(nD);MTo=r(Kbt,"ConvNextFeatureExtractor"),Kbt.forEach(t),ETo=r(Jke," (VAN model)"),Jke.forEach(t),CTo=i(J),Np=n(J,"LI",{});var Yke=s(Np);Jfe=n(Yke,"STRONG",{});var Zbt=s(Jfe);wTo=r(Zbt,"videomae"),Zbt.forEach(t),ATo=r(Yke," \u2014 "),sD=n(Yke,"A",{href:!0});var evt=s(sD);LTo=r(evt,"ViTFeatureExtractor"),evt.forEach(t),yTo=r(Yke," (VideoMAE model)"),Yke.forEach(t),xTo=i(J),qp=n(J,"LI",{});var Kke=s(qp);Yfe=n(Kke,"STRONG",{});var ovt=s(Yfe);$To=r(ovt,"vilt"),ovt.forEach(t),kTo=r(Kke," \u2014 "),lD=n(Kke,"A",{href:!0});var rvt=s(lD);STo=r(rvt,"ViltFeatureExtractor"),rvt.forEach(t),RTo=r(Kke," (ViLT model)"),Kke.forEach(t),PTo=i(J),jp=n(J,"LI",{});var Zke=s(jp);Kfe=n(Zke,"STRONG",{});var tvt=s(Kfe);BTo=r(tvt,"vit"),tvt.forEach(t),ITo=r(Zke," \u2014 "),iD=n(Zke,"A",{href:!0});var avt=s(iD);NTo=r(avt,"ViTFeatureExtractor"),avt.forEach(t),qTo=r(Zke," (ViT model)"),Zke.forEach(t),jTo=i(J),Dp=n(J,"LI",{});var eSe=s(Dp);Zfe=n(eSe,"STRONG",{});var nvt=s(Zfe);DTo=r(nvt,"vit_mae"),nvt.forEach(t),GTo=r(eSe," \u2014 "),dD=n(eSe,"A",{href:!0});var svt=s(dD);OTo=r(svt,"ViTFeatureExtractor"),svt.forEach(t),VTo=r(eSe," (ViTMAE model)"),eSe.forEach(t),XTo=i(J),Gp=n(J,"LI",{});var oSe=s(Gp);eme=n(oSe,"STRONG",{});var lvt=s(eme);zTo=r(lvt,"wav2vec2"),lvt.forEach(t),WTo=r(oSe," \u2014 "),cD=n(oSe,"A",{href:!0});var ivt=s(cD);QTo=r(ivt,"Wav2Vec2FeatureExtractor"),ivt.forEach(t),UTo=r(oSe," (Wav2Vec2 model)"),oSe.forEach(t),HTo=i(J),Op=n(J,"LI",{});var rSe=s(Op);ome=n(rSe,"STRONG",{});var dvt=s(ome);JTo=r(dvt,"wav2vec2-conformer"),dvt.forEach(t),YTo=r(rSe," \u2014 "),fD=n(rSe,"A",{href:!0});var cvt=s(fD);KTo=r(cvt,"Wav2Vec2FeatureExtractor"),cvt.forEach(t),ZTo=r(rSe," (Wav2Vec2-Conformer model)"),rSe.forEach(t),e7o=i(J),Vp=n(J,"LI",{});var tSe=s(Vp);rme=n(tSe,"STRONG",{});var fvt=s(rme);o7o=r(fvt,"yolos"),fvt.forEach(t),r7o=r(tSe," \u2014 "),mD=n(tSe,"A",{href:!0});var mvt=s(mD);t7o=r(mvt,"YolosFeatureExtractor"),mvt.forEach(t),a7o=r(tSe," (YOLOS model)"),tSe.forEach(t),J.forEach(t),n7o=i(fa),T(Xp.$$.fragment,fa),s7o=i(fa),T(zp.$$.fragment,fa),fa.forEach(t),l7o=i(ml),Wp=n(ml,"DIV",{class:!0});var FJe=s(Wp);T(Iy.$$.fragment,FJe),i7o=i(FJe),tme=n(FJe,"P",{});var gvt=s(tme);d7o=r(gvt,"Register a new feature extractor for this class."),gvt.forEach(t),FJe.forEach(t),ml.forEach(t),gUe=i(f),ed=n(f,"H2",{class:!0});var TJe=s(ed);Qp=n(TJe,"A",{id:!0,class:!0,href:!0});var hvt=s(Qp);ame=n(hvt,"SPAN",{});var pvt=s(ame);T(Ny.$$.fragment,pvt),pvt.forEach(t),hvt.forEach(t),c7o=i(TJe),nme=n(TJe,"SPAN",{});var _vt=s(nme);f7o=r(_vt,"AutoProcessor"),_vt.forEach(t),TJe.forEach(t),hUe=i(f),ko=n(f,"DIV",{class:!0});var gl=s(ko);T(qy.$$.fragment,gl),m7o=i(gl),jy=n(gl,"P",{});var MJe=s(jy);g7o=r(MJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),gD=n(MJe,"A",{href:!0});var uvt=s(gD);h7o=r(uvt,"AutoProcessor.from_pretrained()"),uvt.forEach(t),p7o=r(MJe," class method."),MJe.forEach(t),_7o=i(gl),Dy=n(gl,"P",{});var EJe=s(Dy);u7o=r(EJe,"This class cannot be instantiated directly using "),sme=n(EJe,"CODE",{});var bvt=s(sme);b7o=r(bvt,"__init__()"),bvt.forEach(t),v7o=r(EJe," (throws an error)."),EJe.forEach(t),F7o=i(gl),Je=n(gl,"DIV",{class:!0});var ma=s(Je);T(Gy.$$.fragment,ma),T7o=i(ma),lme=n(ma,"P",{});var vvt=s(lme);M7o=r(vvt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vvt.forEach(t),E7o=i(ma),od=n(ma,"P",{});var Qae=s(od);C7o=r(Qae,"The processor class to instantiate is selected based on the "),ime=n(Qae,"CODE",{});var Fvt=s(ime);w7o=r(Fvt,"model_type"),Fvt.forEach(t),A7o=r(Qae,` property of the config object (either
passed as an argument or loaded from `),dme=n(Qae,"CODE",{});var Tvt=s(dme);L7o=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),y7o=r(Qae," if possible):"),Qae.forEach(t),x7o=i(ma),ce=n(ma,"UL",{});var pe=s(ce);Up=n(pe,"LI",{});var aSe=s(Up);cme=n(aSe,"STRONG",{});var Mvt=s(cme);$7o=r(Mvt,"clip"),Mvt.forEach(t),k7o=r(aSe," \u2014 "),hD=n(aSe,"A",{href:!0});var Evt=s(hD);S7o=r(Evt,"CLIPProcessor"),Evt.forEach(t),R7o=r(aSe," (CLIP model)"),aSe.forEach(t),P7o=i(pe),Hp=n(pe,"LI",{});var nSe=s(Hp);fme=n(nSe,"STRONG",{});var Cvt=s(fme);B7o=r(Cvt,"donut"),Cvt.forEach(t),I7o=r(nSe," \u2014 "),pD=n(nSe,"A",{href:!0});var wvt=s(pD);N7o=r(wvt,"DonutProcessor"),wvt.forEach(t),q7o=r(nSe," (Donut model)"),nSe.forEach(t),j7o=i(pe),Jp=n(pe,"LI",{});var sSe=s(Jp);mme=n(sSe,"STRONG",{});var Avt=s(mme);D7o=r(Avt,"flava"),Avt.forEach(t),G7o=r(sSe," \u2014 "),_D=n(sSe,"A",{href:!0});var Lvt=s(_D);O7o=r(Lvt,"FlavaProcessor"),Lvt.forEach(t),V7o=r(sSe," (FLAVA model)"),sSe.forEach(t),X7o=i(pe),Yp=n(pe,"LI",{});var lSe=s(Yp);gme=n(lSe,"STRONG",{});var yvt=s(gme);z7o=r(yvt,"groupvit"),yvt.forEach(t),W7o=r(lSe," \u2014 "),uD=n(lSe,"A",{href:!0});var xvt=s(uD);Q7o=r(xvt,"CLIPProcessor"),xvt.forEach(t),U7o=r(lSe," (GroupViT model)"),lSe.forEach(t),H7o=i(pe),Kp=n(pe,"LI",{});var iSe=s(Kp);hme=n(iSe,"STRONG",{});var $vt=s(hme);J7o=r($vt,"layoutlmv2"),$vt.forEach(t),Y7o=r(iSe," \u2014 "),bD=n(iSe,"A",{href:!0});var kvt=s(bD);K7o=r(kvt,"LayoutLMv2Processor"),kvt.forEach(t),Z7o=r(iSe," (LayoutLMv2 model)"),iSe.forEach(t),eMo=i(pe),Zp=n(pe,"LI",{});var dSe=s(Zp);pme=n(dSe,"STRONG",{});var Svt=s(pme);oMo=r(Svt,"layoutlmv3"),Svt.forEach(t),rMo=r(dSe," \u2014 "),vD=n(dSe,"A",{href:!0});var Rvt=s(vD);tMo=r(Rvt,"LayoutLMv3Processor"),Rvt.forEach(t),aMo=r(dSe," (LayoutLMv3 model)"),dSe.forEach(t),nMo=i(pe),e_=n(pe,"LI",{});var cSe=s(e_);_me=n(cSe,"STRONG",{});var Pvt=s(_me);sMo=r(Pvt,"layoutxlm"),Pvt.forEach(t),lMo=r(cSe," \u2014 "),FD=n(cSe,"A",{href:!0});var Bvt=s(FD);iMo=r(Bvt,"LayoutXLMProcessor"),Bvt.forEach(t),dMo=r(cSe," (LayoutXLM model)"),cSe.forEach(t),cMo=i(pe),o_=n(pe,"LI",{});var fSe=s(o_);ume=n(fSe,"STRONG",{});var Ivt=s(ume);fMo=r(Ivt,"owlvit"),Ivt.forEach(t),mMo=r(fSe," \u2014 "),TD=n(fSe,"A",{href:!0});var Nvt=s(TD);gMo=r(Nvt,"OwlViTProcessor"),Nvt.forEach(t),hMo=r(fSe," (OWL-ViT model)"),fSe.forEach(t),pMo=i(pe),r_=n(pe,"LI",{});var mSe=s(r_);bme=n(mSe,"STRONG",{});var qvt=s(bme);_Mo=r(qvt,"sew"),qvt.forEach(t),uMo=r(mSe," \u2014 "),MD=n(mSe,"A",{href:!0});var jvt=s(MD);bMo=r(jvt,"Wav2Vec2Processor"),jvt.forEach(t),vMo=r(mSe," (SEW model)"),mSe.forEach(t),FMo=i(pe),t_=n(pe,"LI",{});var gSe=s(t_);vme=n(gSe,"STRONG",{});var Dvt=s(vme);TMo=r(Dvt,"sew-d"),Dvt.forEach(t),MMo=r(gSe," \u2014 "),ED=n(gSe,"A",{href:!0});var Gvt=s(ED);EMo=r(Gvt,"Wav2Vec2Processor"),Gvt.forEach(t),CMo=r(gSe," (SEW-D model)"),gSe.forEach(t),wMo=i(pe),a_=n(pe,"LI",{});var hSe=s(a_);Fme=n(hSe,"STRONG",{});var Ovt=s(Fme);AMo=r(Ovt,"speech_to_text"),Ovt.forEach(t),LMo=r(hSe," \u2014 "),CD=n(hSe,"A",{href:!0});var Vvt=s(CD);yMo=r(Vvt,"Speech2TextProcessor"),Vvt.forEach(t),xMo=r(hSe," (Speech2Text model)"),hSe.forEach(t),$Mo=i(pe),n_=n(pe,"LI",{});var pSe=s(n_);Tme=n(pSe,"STRONG",{});var Xvt=s(Tme);kMo=r(Xvt,"speech_to_text_2"),Xvt.forEach(t),SMo=r(pSe," \u2014 "),wD=n(pSe,"A",{href:!0});var zvt=s(wD);RMo=r(zvt,"Speech2Text2Processor"),zvt.forEach(t),PMo=r(pSe," (Speech2Text2 model)"),pSe.forEach(t),BMo=i(pe),s_=n(pe,"LI",{});var _Se=s(s_);Mme=n(_Se,"STRONG",{});var Wvt=s(Mme);IMo=r(Wvt,"trocr"),Wvt.forEach(t),NMo=r(_Se," \u2014 "),AD=n(_Se,"A",{href:!0});var Qvt=s(AD);qMo=r(Qvt,"TrOCRProcessor"),Qvt.forEach(t),jMo=r(_Se," (TrOCR model)"),_Se.forEach(t),DMo=i(pe),l_=n(pe,"LI",{});var uSe=s(l_);Eme=n(uSe,"STRONG",{});var Uvt=s(Eme);GMo=r(Uvt,"unispeech"),Uvt.forEach(t),OMo=r(uSe," \u2014 "),LD=n(uSe,"A",{href:!0});var Hvt=s(LD);VMo=r(Hvt,"Wav2Vec2Processor"),Hvt.forEach(t),XMo=r(uSe," (UniSpeech model)"),uSe.forEach(t),zMo=i(pe),i_=n(pe,"LI",{});var bSe=s(i_);Cme=n(bSe,"STRONG",{});var Jvt=s(Cme);WMo=r(Jvt,"unispeech-sat"),Jvt.forEach(t),QMo=r(bSe," \u2014 "),yD=n(bSe,"A",{href:!0});var Yvt=s(yD);UMo=r(Yvt,"Wav2Vec2Processor"),Yvt.forEach(t),HMo=r(bSe," (UniSpeechSat model)"),bSe.forEach(t),JMo=i(pe),d_=n(pe,"LI",{});var vSe=s(d_);wme=n(vSe,"STRONG",{});var Kvt=s(wme);YMo=r(Kvt,"vilt"),Kvt.forEach(t),KMo=r(vSe," \u2014 "),xD=n(vSe,"A",{href:!0});var Zvt=s(xD);ZMo=r(Zvt,"ViltProcessor"),Zvt.forEach(t),eEo=r(vSe," (ViLT model)"),vSe.forEach(t),oEo=i(pe),c_=n(pe,"LI",{});var FSe=s(c_);Ame=n(FSe,"STRONG",{});var eFt=s(Ame);rEo=r(eFt,"vision-text-dual-encoder"),eFt.forEach(t),tEo=r(FSe," \u2014 "),$D=n(FSe,"A",{href:!0});var oFt=s($D);aEo=r(oFt,"VisionTextDualEncoderProcessor"),oFt.forEach(t),nEo=r(FSe," (VisionTextDualEncoder model)"),FSe.forEach(t),sEo=i(pe),f_=n(pe,"LI",{});var TSe=s(f_);Lme=n(TSe,"STRONG",{});var rFt=s(Lme);lEo=r(rFt,"wav2vec2"),rFt.forEach(t),iEo=r(TSe," \u2014 "),kD=n(TSe,"A",{href:!0});var tFt=s(kD);dEo=r(tFt,"Wav2Vec2Processor"),tFt.forEach(t),cEo=r(TSe," (Wav2Vec2 model)"),TSe.forEach(t),fEo=i(pe),m_=n(pe,"LI",{});var MSe=s(m_);yme=n(MSe,"STRONG",{});var aFt=s(yme);mEo=r(aFt,"wav2vec2-conformer"),aFt.forEach(t),gEo=r(MSe," \u2014 "),SD=n(MSe,"A",{href:!0});var nFt=s(SD);hEo=r(nFt,"Wav2Vec2Processor"),nFt.forEach(t),pEo=r(MSe," (Wav2Vec2-Conformer model)"),MSe.forEach(t),_Eo=i(pe),g_=n(pe,"LI",{});var ESe=s(g_);xme=n(ESe,"STRONG",{});var sFt=s(xme);uEo=r(sFt,"wavlm"),sFt.forEach(t),bEo=r(ESe," \u2014 "),RD=n(ESe,"A",{href:!0});var lFt=s(RD);vEo=r(lFt,"Wav2Vec2Processor"),lFt.forEach(t),FEo=r(ESe," (WavLM model)"),ESe.forEach(t),pe.forEach(t),TEo=i(ma),T(h_.$$.fragment,ma),MEo=i(ma),T(p_.$$.fragment,ma),ma.forEach(t),EEo=i(gl),__=n(gl,"DIV",{class:!0});var CJe=s(__);T(Oy.$$.fragment,CJe),CEo=i(CJe),$me=n(CJe,"P",{});var iFt=s($me);wEo=r(iFt,"Register a new processor for this class."),iFt.forEach(t),CJe.forEach(t),gl.forEach(t),pUe=i(f),rd=n(f,"H2",{class:!0});var wJe=s(rd);u_=n(wJe,"A",{id:!0,class:!0,href:!0});var dFt=s(u_);kme=n(dFt,"SPAN",{});var cFt=s(kme);T(Vy.$$.fragment,cFt),cFt.forEach(t),dFt.forEach(t),AEo=i(wJe),Sme=n(wJe,"SPAN",{});var fFt=s(Sme);LEo=r(fFt,"AutoModel"),fFt.forEach(t),wJe.forEach(t),_Ue=i(f),So=n(f,"DIV",{class:!0});var hl=s(So);T(Xy.$$.fragment,hl),yEo=i(hl),td=n(hl,"P",{});var Uae=s(td);xEo=r(Uae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PD=n(Uae,"A",{href:!0});var mFt=s(PD);$Eo=r(mFt,"from_pretrained()"),mFt.forEach(t),kEo=r(Uae," class method or the "),BD=n(Uae,"A",{href:!0});var gFt=s(BD);SEo=r(gFt,"from_config()"),gFt.forEach(t),REo=r(Uae,` class
method.`),Uae.forEach(t),PEo=i(hl),zy=n(hl,"P",{});var AJe=s(zy);BEo=r(AJe,"This class cannot be instantiated directly using "),Rme=n(AJe,"CODE",{});var hFt=s(Rme);IEo=r(hFt,"__init__()"),hFt.forEach(t),NEo=r(AJe," (throws an error)."),AJe.forEach(t),qEo=i(hl),mt=n(hl,"DIV",{class:!0});var _A=s(mt);T(Wy.$$.fragment,_A),jEo=i(_A),Pme=n(_A,"P",{});var pFt=s(Pme);DEo=r(pFt,"Instantiates one of the base model classes of the library from a configuration."),pFt.forEach(t),GEo=i(_A),ad=n(_A,"P",{});var Hae=s(ad);OEo=r(Hae,`Note:
Loading a model from its configuration file does `),Bme=n(Hae,"STRONG",{});var _Ft=s(Bme);VEo=r(_Ft,"not"),_Ft.forEach(t),XEo=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=n(Hae,"A",{href:!0});var uFt=s(ID);zEo=r(uFt,"from_pretrained()"),uFt.forEach(t),WEo=r(Hae," to load the model weights."),Hae.forEach(t),QEo=i(_A),T(b_.$$.fragment,_A),_A.forEach(t),UEo=i(hl),Ye=n(hl,"DIV",{class:!0});var ga=s(Ye);T(Qy.$$.fragment,ga),HEo=i(ga),Ime=n(ga,"P",{});var bFt=s(Ime);JEo=r(bFt,"Instantiate one of the base model classes of the library from a pretrained model."),bFt.forEach(t),YEo=i(ga),Va=n(ga,"P",{});var uA=s(Va);KEo=r(uA,"The model class to instantiate is selected based on the "),Nme=n(uA,"CODE",{});var vFt=s(Nme);ZEo=r(vFt,"model_type"),vFt.forEach(t),e4o=r(uA,` property of the config object (either
passed as an argument or loaded from `),qme=n(uA,"CODE",{});var FFt=s(qme);o4o=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),r4o=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=n(uA,"CODE",{});var TFt=s(jme);t4o=r(TFt,"pretrained_model_name_or_path"),TFt.forEach(t),a4o=r(uA,":"),uA.forEach(t),n4o=i(ga),y=n(ga,"UL",{});var x=s(y);v_=n(x,"LI",{});var CSe=s(v_);Dme=n(CSe,"STRONG",{});var MFt=s(Dme);s4o=r(MFt,"albert"),MFt.forEach(t),l4o=r(CSe," \u2014 "),ND=n(CSe,"A",{href:!0});var EFt=s(ND);i4o=r(EFt,"AlbertModel"),EFt.forEach(t),d4o=r(CSe," (ALBERT model)"),CSe.forEach(t),c4o=i(x),F_=n(x,"LI",{});var wSe=s(F_);Gme=n(wSe,"STRONG",{});var CFt=s(Gme);f4o=r(CFt,"bart"),CFt.forEach(t),m4o=r(wSe," \u2014 "),qD=n(wSe,"A",{href:!0});var wFt=s(qD);g4o=r(wFt,"BartModel"),wFt.forEach(t),h4o=r(wSe," (BART model)"),wSe.forEach(t),p4o=i(x),T_=n(x,"LI",{});var ASe=s(T_);Ome=n(ASe,"STRONG",{});var AFt=s(Ome);_4o=r(AFt,"beit"),AFt.forEach(t),u4o=r(ASe," \u2014 "),jD=n(ASe,"A",{href:!0});var LFt=s(jD);b4o=r(LFt,"BeitModel"),LFt.forEach(t),v4o=r(ASe," (BEiT model)"),ASe.forEach(t),F4o=i(x),M_=n(x,"LI",{});var LSe=s(M_);Vme=n(LSe,"STRONG",{});var yFt=s(Vme);T4o=r(yFt,"bert"),yFt.forEach(t),M4o=r(LSe," \u2014 "),DD=n(LSe,"A",{href:!0});var xFt=s(DD);E4o=r(xFt,"BertModel"),xFt.forEach(t),C4o=r(LSe," (BERT model)"),LSe.forEach(t),w4o=i(x),E_=n(x,"LI",{});var ySe=s(E_);Xme=n(ySe,"STRONG",{});var $Ft=s(Xme);A4o=r($Ft,"bert-generation"),$Ft.forEach(t),L4o=r(ySe," \u2014 "),GD=n(ySe,"A",{href:!0});var kFt=s(GD);y4o=r(kFt,"BertGenerationEncoder"),kFt.forEach(t),x4o=r(ySe," (Bert Generation model)"),ySe.forEach(t),$4o=i(x),C_=n(x,"LI",{});var xSe=s(C_);zme=n(xSe,"STRONG",{});var SFt=s(zme);k4o=r(SFt,"big_bird"),SFt.forEach(t),S4o=r(xSe," \u2014 "),OD=n(xSe,"A",{href:!0});var RFt=s(OD);R4o=r(RFt,"BigBirdModel"),RFt.forEach(t),P4o=r(xSe," (BigBird model)"),xSe.forEach(t),B4o=i(x),w_=n(x,"LI",{});var $Se=s(w_);Wme=n($Se,"STRONG",{});var PFt=s(Wme);I4o=r(PFt,"bigbird_pegasus"),PFt.forEach(t),N4o=r($Se," \u2014 "),VD=n($Se,"A",{href:!0});var BFt=s(VD);q4o=r(BFt,"BigBirdPegasusModel"),BFt.forEach(t),j4o=r($Se," (BigBird-Pegasus model)"),$Se.forEach(t),D4o=i(x),A_=n(x,"LI",{});var kSe=s(A_);Qme=n(kSe,"STRONG",{});var IFt=s(Qme);G4o=r(IFt,"blenderbot"),IFt.forEach(t),O4o=r(kSe," \u2014 "),XD=n(kSe,"A",{href:!0});var NFt=s(XD);V4o=r(NFt,"BlenderbotModel"),NFt.forEach(t),X4o=r(kSe," (Blenderbot model)"),kSe.forEach(t),z4o=i(x),L_=n(x,"LI",{});var SSe=s(L_);Ume=n(SSe,"STRONG",{});var qFt=s(Ume);W4o=r(qFt,"blenderbot-small"),qFt.forEach(t),Q4o=r(SSe," \u2014 "),zD=n(SSe,"A",{href:!0});var jFt=s(zD);U4o=r(jFt,"BlenderbotSmallModel"),jFt.forEach(t),H4o=r(SSe," (BlenderbotSmall model)"),SSe.forEach(t),J4o=i(x),y_=n(x,"LI",{});var RSe=s(y_);Hme=n(RSe,"STRONG",{});var DFt=s(Hme);Y4o=r(DFt,"bloom"),DFt.forEach(t),K4o=r(RSe," \u2014 "),WD=n(RSe,"A",{href:!0});var GFt=s(WD);Z4o=r(GFt,"BloomModel"),GFt.forEach(t),eCo=r(RSe," (BLOOM model)"),RSe.forEach(t),oCo=i(x),x_=n(x,"LI",{});var PSe=s(x_);Jme=n(PSe,"STRONG",{});var OFt=s(Jme);rCo=r(OFt,"camembert"),OFt.forEach(t),tCo=r(PSe," \u2014 "),QD=n(PSe,"A",{href:!0});var VFt=s(QD);aCo=r(VFt,"CamembertModel"),VFt.forEach(t),nCo=r(PSe," (CamemBERT model)"),PSe.forEach(t),sCo=i(x),$_=n(x,"LI",{});var BSe=s($_);Yme=n(BSe,"STRONG",{});var XFt=s(Yme);lCo=r(XFt,"canine"),XFt.forEach(t),iCo=r(BSe," \u2014 "),UD=n(BSe,"A",{href:!0});var zFt=s(UD);dCo=r(zFt,"CanineModel"),zFt.forEach(t),cCo=r(BSe," (CANINE model)"),BSe.forEach(t),fCo=i(x),k_=n(x,"LI",{});var ISe=s(k_);Kme=n(ISe,"STRONG",{});var WFt=s(Kme);mCo=r(WFt,"clip"),WFt.forEach(t),gCo=r(ISe," \u2014 "),HD=n(ISe,"A",{href:!0});var QFt=s(HD);hCo=r(QFt,"CLIPModel"),QFt.forEach(t),pCo=r(ISe," (CLIP model)"),ISe.forEach(t),_Co=i(x),S_=n(x,"LI",{});var NSe=s(S_);Zme=n(NSe,"STRONG",{});var UFt=s(Zme);uCo=r(UFt,"codegen"),UFt.forEach(t),bCo=r(NSe," \u2014 "),JD=n(NSe,"A",{href:!0});var HFt=s(JD);vCo=r(HFt,"CodeGenModel"),HFt.forEach(t),FCo=r(NSe," (CodeGen model)"),NSe.forEach(t),TCo=i(x),R_=n(x,"LI",{});var qSe=s(R_);ege=n(qSe,"STRONG",{});var JFt=s(ege);MCo=r(JFt,"convbert"),JFt.forEach(t),ECo=r(qSe," \u2014 "),YD=n(qSe,"A",{href:!0});var YFt=s(YD);CCo=r(YFt,"ConvBertModel"),YFt.forEach(t),wCo=r(qSe," (ConvBERT model)"),qSe.forEach(t),ACo=i(x),P_=n(x,"LI",{});var jSe=s(P_);oge=n(jSe,"STRONG",{});var KFt=s(oge);LCo=r(KFt,"convnext"),KFt.forEach(t),yCo=r(jSe," \u2014 "),KD=n(jSe,"A",{href:!0});var ZFt=s(KD);xCo=r(ZFt,"ConvNextModel"),ZFt.forEach(t),$Co=r(jSe," (ConvNeXT model)"),jSe.forEach(t),kCo=i(x),B_=n(x,"LI",{});var DSe=s(B_);rge=n(DSe,"STRONG",{});var e6t=s(rge);SCo=r(e6t,"ctrl"),e6t.forEach(t),RCo=r(DSe," \u2014 "),ZD=n(DSe,"A",{href:!0});var o6t=s(ZD);PCo=r(o6t,"CTRLModel"),o6t.forEach(t),BCo=r(DSe," (CTRL model)"),DSe.forEach(t),ICo=i(x),I_=n(x,"LI",{});var GSe=s(I_);tge=n(GSe,"STRONG",{});var r6t=s(tge);NCo=r(r6t,"cvt"),r6t.forEach(t),qCo=r(GSe," \u2014 "),eG=n(GSe,"A",{href:!0});var t6t=s(eG);jCo=r(t6t,"CvtModel"),t6t.forEach(t),DCo=r(GSe," (CvT model)"),GSe.forEach(t),GCo=i(x),N_=n(x,"LI",{});var OSe=s(N_);age=n(OSe,"STRONG",{});var a6t=s(age);OCo=r(a6t,"data2vec-audio"),a6t.forEach(t),VCo=r(OSe," \u2014 "),oG=n(OSe,"A",{href:!0});var n6t=s(oG);XCo=r(n6t,"Data2VecAudioModel"),n6t.forEach(t),zCo=r(OSe," (Data2VecAudio model)"),OSe.forEach(t),WCo=i(x),q_=n(x,"LI",{});var VSe=s(q_);nge=n(VSe,"STRONG",{});var s6t=s(nge);QCo=r(s6t,"data2vec-text"),s6t.forEach(t),UCo=r(VSe," \u2014 "),rG=n(VSe,"A",{href:!0});var l6t=s(rG);HCo=r(l6t,"Data2VecTextModel"),l6t.forEach(t),JCo=r(VSe," (Data2VecText model)"),VSe.forEach(t),YCo=i(x),j_=n(x,"LI",{});var XSe=s(j_);sge=n(XSe,"STRONG",{});var i6t=s(sge);KCo=r(i6t,"data2vec-vision"),i6t.forEach(t),ZCo=r(XSe," \u2014 "),tG=n(XSe,"A",{href:!0});var d6t=s(tG);e3o=r(d6t,"Data2VecVisionModel"),d6t.forEach(t),o3o=r(XSe," (Data2VecVision model)"),XSe.forEach(t),r3o=i(x),D_=n(x,"LI",{});var zSe=s(D_);lge=n(zSe,"STRONG",{});var c6t=s(lge);t3o=r(c6t,"deberta"),c6t.forEach(t),a3o=r(zSe," \u2014 "),aG=n(zSe,"A",{href:!0});var f6t=s(aG);n3o=r(f6t,"DebertaModel"),f6t.forEach(t),s3o=r(zSe," (DeBERTa model)"),zSe.forEach(t),l3o=i(x),G_=n(x,"LI",{});var WSe=s(G_);ige=n(WSe,"STRONG",{});var m6t=s(ige);i3o=r(m6t,"deberta-v2"),m6t.forEach(t),d3o=r(WSe," \u2014 "),nG=n(WSe,"A",{href:!0});var g6t=s(nG);c3o=r(g6t,"DebertaV2Model"),g6t.forEach(t),f3o=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),m3o=i(x),O_=n(x,"LI",{});var QSe=s(O_);dge=n(QSe,"STRONG",{});var h6t=s(dge);g3o=r(h6t,"decision_transformer"),h6t.forEach(t),h3o=r(QSe," \u2014 "),sG=n(QSe,"A",{href:!0});var p6t=s(sG);p3o=r(p6t,"DecisionTransformerModel"),p6t.forEach(t),_3o=r(QSe," (Decision Transformer model)"),QSe.forEach(t),u3o=i(x),V_=n(x,"LI",{});var USe=s(V_);cge=n(USe,"STRONG",{});var _6t=s(cge);b3o=r(_6t,"deit"),_6t.forEach(t),v3o=r(USe," \u2014 "),lG=n(USe,"A",{href:!0});var u6t=s(lG);F3o=r(u6t,"DeiTModel"),u6t.forEach(t),T3o=r(USe," (DeiT model)"),USe.forEach(t),M3o=i(x),X_=n(x,"LI",{});var HSe=s(X_);fge=n(HSe,"STRONG",{});var b6t=s(fge);E3o=r(b6t,"detr"),b6t.forEach(t),C3o=r(HSe," \u2014 "),iG=n(HSe,"A",{href:!0});var v6t=s(iG);w3o=r(v6t,"DetrModel"),v6t.forEach(t),A3o=r(HSe," (DETR model)"),HSe.forEach(t),L3o=i(x),z_=n(x,"LI",{});var JSe=s(z_);mge=n(JSe,"STRONG",{});var F6t=s(mge);y3o=r(F6t,"distilbert"),F6t.forEach(t),x3o=r(JSe," \u2014 "),dG=n(JSe,"A",{href:!0});var T6t=s(dG);$3o=r(T6t,"DistilBertModel"),T6t.forEach(t),k3o=r(JSe," (DistilBERT model)"),JSe.forEach(t),S3o=i(x),W_=n(x,"LI",{});var YSe=s(W_);gge=n(YSe,"STRONG",{});var M6t=s(gge);R3o=r(M6t,"donut-swin"),M6t.forEach(t),P3o=r(YSe," \u2014 "),cG=n(YSe,"A",{href:!0});var E6t=s(cG);B3o=r(E6t,"DonutSwinModel"),E6t.forEach(t),I3o=r(YSe," (DonutSwin model)"),YSe.forEach(t),N3o=i(x),Q_=n(x,"LI",{});var KSe=s(Q_);hge=n(KSe,"STRONG",{});var C6t=s(hge);q3o=r(C6t,"dpr"),C6t.forEach(t),j3o=r(KSe," \u2014 "),fG=n(KSe,"A",{href:!0});var w6t=s(fG);D3o=r(w6t,"DPRQuestionEncoder"),w6t.forEach(t),G3o=r(KSe," (DPR model)"),KSe.forEach(t),O3o=i(x),U_=n(x,"LI",{});var ZSe=s(U_);pge=n(ZSe,"STRONG",{});var A6t=s(pge);V3o=r(A6t,"dpt"),A6t.forEach(t),X3o=r(ZSe," \u2014 "),mG=n(ZSe,"A",{href:!0});var L6t=s(mG);z3o=r(L6t,"DPTModel"),L6t.forEach(t),W3o=r(ZSe," (DPT model)"),ZSe.forEach(t),Q3o=i(x),H_=n(x,"LI",{});var eRe=s(H_);_ge=n(eRe,"STRONG",{});var y6t=s(_ge);U3o=r(y6t,"electra"),y6t.forEach(t),H3o=r(eRe," \u2014 "),gG=n(eRe,"A",{href:!0});var x6t=s(gG);J3o=r(x6t,"ElectraModel"),x6t.forEach(t),Y3o=r(eRe," (ELECTRA model)"),eRe.forEach(t),K3o=i(x),J_=n(x,"LI",{});var oRe=s(J_);uge=n(oRe,"STRONG",{});var $6t=s(uge);Z3o=r($6t,"flaubert"),$6t.forEach(t),e5o=r(oRe," \u2014 "),hG=n(oRe,"A",{href:!0});var k6t=s(hG);o5o=r(k6t,"FlaubertModel"),k6t.forEach(t),r5o=r(oRe," (FlauBERT model)"),oRe.forEach(t),t5o=i(x),Y_=n(x,"LI",{});var rRe=s(Y_);bge=n(rRe,"STRONG",{});var S6t=s(bge);a5o=r(S6t,"flava"),S6t.forEach(t),n5o=r(rRe," \u2014 "),pG=n(rRe,"A",{href:!0});var R6t=s(pG);s5o=r(R6t,"FlavaModel"),R6t.forEach(t),l5o=r(rRe," (FLAVA model)"),rRe.forEach(t),i5o=i(x),K_=n(x,"LI",{});var tRe=s(K_);vge=n(tRe,"STRONG",{});var P6t=s(vge);d5o=r(P6t,"fnet"),P6t.forEach(t),c5o=r(tRe," \u2014 "),_G=n(tRe,"A",{href:!0});var B6t=s(_G);f5o=r(B6t,"FNetModel"),B6t.forEach(t),m5o=r(tRe," (FNet model)"),tRe.forEach(t),g5o=i(x),Z_=n(x,"LI",{});var aRe=s(Z_);Fge=n(aRe,"STRONG",{});var I6t=s(Fge);h5o=r(I6t,"fsmt"),I6t.forEach(t),p5o=r(aRe," \u2014 "),uG=n(aRe,"A",{href:!0});var N6t=s(uG);_5o=r(N6t,"FSMTModel"),N6t.forEach(t),u5o=r(aRe," (FairSeq Machine-Translation model)"),aRe.forEach(t),b5o=i(x),nl=n(x,"LI",{});var rP=s(nl);Tge=n(rP,"STRONG",{});var q6t=s(Tge);v5o=r(q6t,"funnel"),q6t.forEach(t),F5o=r(rP," \u2014 "),bG=n(rP,"A",{href:!0});var j6t=s(bG);T5o=r(j6t,"FunnelModel"),j6t.forEach(t),M5o=r(rP," or "),vG=n(rP,"A",{href:!0});var D6t=s(vG);E5o=r(D6t,"FunnelBaseModel"),D6t.forEach(t),C5o=r(rP," (Funnel Transformer model)"),rP.forEach(t),w5o=i(x),eu=n(x,"LI",{});var nRe=s(eu);Mge=n(nRe,"STRONG",{});var G6t=s(Mge);A5o=r(G6t,"glpn"),G6t.forEach(t),L5o=r(nRe," \u2014 "),FG=n(nRe,"A",{href:!0});var O6t=s(FG);y5o=r(O6t,"GLPNModel"),O6t.forEach(t),x5o=r(nRe," (GLPN model)"),nRe.forEach(t),$5o=i(x),ou=n(x,"LI",{});var sRe=s(ou);Ege=n(sRe,"STRONG",{});var V6t=s(Ege);k5o=r(V6t,"gpt2"),V6t.forEach(t),S5o=r(sRe," \u2014 "),TG=n(sRe,"A",{href:!0});var X6t=s(TG);R5o=r(X6t,"GPT2Model"),X6t.forEach(t),P5o=r(sRe," (OpenAI GPT-2 model)"),sRe.forEach(t),B5o=i(x),ru=n(x,"LI",{});var lRe=s(ru);Cge=n(lRe,"STRONG",{});var z6t=s(Cge);I5o=r(z6t,"gpt_neo"),z6t.forEach(t),N5o=r(lRe," \u2014 "),MG=n(lRe,"A",{href:!0});var W6t=s(MG);q5o=r(W6t,"GPTNeoModel"),W6t.forEach(t),j5o=r(lRe," (GPT Neo model)"),lRe.forEach(t),D5o=i(x),tu=n(x,"LI",{});var iRe=s(tu);wge=n(iRe,"STRONG",{});var Q6t=s(wge);G5o=r(Q6t,"gpt_neox"),Q6t.forEach(t),O5o=r(iRe," \u2014 "),EG=n(iRe,"A",{href:!0});var U6t=s(EG);V5o=r(U6t,"GPTNeoXModel"),U6t.forEach(t),X5o=r(iRe," (GPT NeoX model)"),iRe.forEach(t),z5o=i(x),au=n(x,"LI",{});var dRe=s(au);Age=n(dRe,"STRONG",{});var H6t=s(Age);W5o=r(H6t,"gptj"),H6t.forEach(t),Q5o=r(dRe," \u2014 "),CG=n(dRe,"A",{href:!0});var J6t=s(CG);U5o=r(J6t,"GPTJModel"),J6t.forEach(t),H5o=r(dRe," (GPT-J model)"),dRe.forEach(t),J5o=i(x),nu=n(x,"LI",{});var cRe=s(nu);Lge=n(cRe,"STRONG",{});var Y6t=s(Lge);Y5o=r(Y6t,"groupvit"),Y6t.forEach(t),K5o=r(cRe," \u2014 "),wG=n(cRe,"A",{href:!0});var K6t=s(wG);Z5o=r(K6t,"GroupViTModel"),K6t.forEach(t),e0o=r(cRe," (GroupViT model)"),cRe.forEach(t),o0o=i(x),su=n(x,"LI",{});var fRe=s(su);yge=n(fRe,"STRONG",{});var Z6t=s(yge);r0o=r(Z6t,"hubert"),Z6t.forEach(t),t0o=r(fRe," \u2014 "),AG=n(fRe,"A",{href:!0});var eTt=s(AG);a0o=r(eTt,"HubertModel"),eTt.forEach(t),n0o=r(fRe," (Hubert model)"),fRe.forEach(t),s0o=i(x),lu=n(x,"LI",{});var mRe=s(lu);xge=n(mRe,"STRONG",{});var oTt=s(xge);l0o=r(oTt,"ibert"),oTt.forEach(t),i0o=r(mRe," \u2014 "),LG=n(mRe,"A",{href:!0});var rTt=s(LG);d0o=r(rTt,"IBertModel"),rTt.forEach(t),c0o=r(mRe," (I-BERT model)"),mRe.forEach(t),f0o=i(x),iu=n(x,"LI",{});var gRe=s(iu);$ge=n(gRe,"STRONG",{});var tTt=s($ge);m0o=r(tTt,"imagegpt"),tTt.forEach(t),g0o=r(gRe," \u2014 "),yG=n(gRe,"A",{href:!0});var aTt=s(yG);h0o=r(aTt,"ImageGPTModel"),aTt.forEach(t),p0o=r(gRe," (ImageGPT model)"),gRe.forEach(t),_0o=i(x),du=n(x,"LI",{});var hRe=s(du);kge=n(hRe,"STRONG",{});var nTt=s(kge);u0o=r(nTt,"layoutlm"),nTt.forEach(t),b0o=r(hRe," \u2014 "),xG=n(hRe,"A",{href:!0});var sTt=s(xG);v0o=r(sTt,"LayoutLMModel"),sTt.forEach(t),F0o=r(hRe," (LayoutLM model)"),hRe.forEach(t),T0o=i(x),cu=n(x,"LI",{});var pRe=s(cu);Sge=n(pRe,"STRONG",{});var lTt=s(Sge);M0o=r(lTt,"layoutlmv2"),lTt.forEach(t),E0o=r(pRe," \u2014 "),$G=n(pRe,"A",{href:!0});var iTt=s($G);C0o=r(iTt,"LayoutLMv2Model"),iTt.forEach(t),w0o=r(pRe," (LayoutLMv2 model)"),pRe.forEach(t),A0o=i(x),fu=n(x,"LI",{});var _Re=s(fu);Rge=n(_Re,"STRONG",{});var dTt=s(Rge);L0o=r(dTt,"layoutlmv3"),dTt.forEach(t),y0o=r(_Re," \u2014 "),kG=n(_Re,"A",{href:!0});var cTt=s(kG);x0o=r(cTt,"LayoutLMv3Model"),cTt.forEach(t),$0o=r(_Re," (LayoutLMv3 model)"),_Re.forEach(t),k0o=i(x),mu=n(x,"LI",{});var uRe=s(mu);Pge=n(uRe,"STRONG",{});var fTt=s(Pge);S0o=r(fTt,"led"),fTt.forEach(t),R0o=r(uRe," \u2014 "),SG=n(uRe,"A",{href:!0});var mTt=s(SG);P0o=r(mTt,"LEDModel"),mTt.forEach(t),B0o=r(uRe," (LED model)"),uRe.forEach(t),I0o=i(x),gu=n(x,"LI",{});var bRe=s(gu);Bge=n(bRe,"STRONG",{});var gTt=s(Bge);N0o=r(gTt,"levit"),gTt.forEach(t),q0o=r(bRe," \u2014 "),RG=n(bRe,"A",{href:!0});var hTt=s(RG);j0o=r(hTt,"LevitModel"),hTt.forEach(t),D0o=r(bRe," (LeViT model)"),bRe.forEach(t),G0o=i(x),hu=n(x,"LI",{});var vRe=s(hu);Ige=n(vRe,"STRONG",{});var pTt=s(Ige);O0o=r(pTt,"longformer"),pTt.forEach(t),V0o=r(vRe," \u2014 "),PG=n(vRe,"A",{href:!0});var _Tt=s(PG);X0o=r(_Tt,"LongformerModel"),_Tt.forEach(t),z0o=r(vRe," (Longformer model)"),vRe.forEach(t),W0o=i(x),pu=n(x,"LI",{});var FRe=s(pu);Nge=n(FRe,"STRONG",{});var uTt=s(Nge);Q0o=r(uTt,"longt5"),uTt.forEach(t),U0o=r(FRe," \u2014 "),BG=n(FRe,"A",{href:!0});var bTt=s(BG);H0o=r(bTt,"LongT5Model"),bTt.forEach(t),J0o=r(FRe," (LongT5 model)"),FRe.forEach(t),Y0o=i(x),_u=n(x,"LI",{});var TRe=s(_u);qge=n(TRe,"STRONG",{});var vTt=s(qge);K0o=r(vTt,"luke"),vTt.forEach(t),Z0o=r(TRe," \u2014 "),IG=n(TRe,"A",{href:!0});var FTt=s(IG);ewo=r(FTt,"LukeModel"),FTt.forEach(t),owo=r(TRe," (LUKE model)"),TRe.forEach(t),rwo=i(x),uu=n(x,"LI",{});var MRe=s(uu);jge=n(MRe,"STRONG",{});var TTt=s(jge);two=r(TTt,"lxmert"),TTt.forEach(t),awo=r(MRe," \u2014 "),NG=n(MRe,"A",{href:!0});var MTt=s(NG);nwo=r(MTt,"LxmertModel"),MTt.forEach(t),swo=r(MRe," (LXMERT model)"),MRe.forEach(t),lwo=i(x),bu=n(x,"LI",{});var ERe=s(bu);Dge=n(ERe,"STRONG",{});var ETt=s(Dge);iwo=r(ETt,"m2m_100"),ETt.forEach(t),dwo=r(ERe," \u2014 "),qG=n(ERe,"A",{href:!0});var CTt=s(qG);cwo=r(CTt,"M2M100Model"),CTt.forEach(t),fwo=r(ERe," (M2M100 model)"),ERe.forEach(t),mwo=i(x),vu=n(x,"LI",{});var CRe=s(vu);Gge=n(CRe,"STRONG",{});var wTt=s(Gge);gwo=r(wTt,"marian"),wTt.forEach(t),hwo=r(CRe," \u2014 "),jG=n(CRe,"A",{href:!0});var ATt=s(jG);pwo=r(ATt,"MarianModel"),ATt.forEach(t),_wo=r(CRe," (Marian model)"),CRe.forEach(t),uwo=i(x),Fu=n(x,"LI",{});var wRe=s(Fu);Oge=n(wRe,"STRONG",{});var LTt=s(Oge);bwo=r(LTt,"maskformer"),LTt.forEach(t),vwo=r(wRe," \u2014 "),DG=n(wRe,"A",{href:!0});var yTt=s(DG);Fwo=r(yTt,"MaskFormerModel"),yTt.forEach(t),Two=r(wRe," (MaskFormer model)"),wRe.forEach(t),Mwo=i(x),Tu=n(x,"LI",{});var ARe=s(Tu);Vge=n(ARe,"STRONG",{});var xTt=s(Vge);Ewo=r(xTt,"mbart"),xTt.forEach(t),Cwo=r(ARe," \u2014 "),GG=n(ARe,"A",{href:!0});var $Tt=s(GG);wwo=r($Tt,"MBartModel"),$Tt.forEach(t),Awo=r(ARe," (mBART model)"),ARe.forEach(t),Lwo=i(x),Mu=n(x,"LI",{});var LRe=s(Mu);Xge=n(LRe,"STRONG",{});var kTt=s(Xge);ywo=r(kTt,"mctct"),kTt.forEach(t),xwo=r(LRe," \u2014 "),OG=n(LRe,"A",{href:!0});var STt=s(OG);$wo=r(STt,"MCTCTModel"),STt.forEach(t),kwo=r(LRe," (M-CTC-T model)"),LRe.forEach(t),Swo=i(x),Eu=n(x,"LI",{});var yRe=s(Eu);zge=n(yRe,"STRONG",{});var RTt=s(zge);Rwo=r(RTt,"megatron-bert"),RTt.forEach(t),Pwo=r(yRe," \u2014 "),VG=n(yRe,"A",{href:!0});var PTt=s(VG);Bwo=r(PTt,"MegatronBertModel"),PTt.forEach(t),Iwo=r(yRe," (Megatron-BERT model)"),yRe.forEach(t),Nwo=i(x),Cu=n(x,"LI",{});var xRe=s(Cu);Wge=n(xRe,"STRONG",{});var BTt=s(Wge);qwo=r(BTt,"mobilebert"),BTt.forEach(t),jwo=r(xRe," \u2014 "),XG=n(xRe,"A",{href:!0});var ITt=s(XG);Dwo=r(ITt,"MobileBertModel"),ITt.forEach(t),Gwo=r(xRe," (MobileBERT model)"),xRe.forEach(t),Owo=i(x),wu=n(x,"LI",{});var $Re=s(wu);Qge=n($Re,"STRONG",{});var NTt=s(Qge);Vwo=r(NTt,"mobilevit"),NTt.forEach(t),Xwo=r($Re," \u2014 "),zG=n($Re,"A",{href:!0});var qTt=s(zG);zwo=r(qTt,"MobileViTModel"),qTt.forEach(t),Wwo=r($Re," (MobileViT model)"),$Re.forEach(t),Qwo=i(x),Au=n(x,"LI",{});var kRe=s(Au);Uge=n(kRe,"STRONG",{});var jTt=s(Uge);Uwo=r(jTt,"mpnet"),jTt.forEach(t),Hwo=r(kRe," \u2014 "),WG=n(kRe,"A",{href:!0});var DTt=s(WG);Jwo=r(DTt,"MPNetModel"),DTt.forEach(t),Ywo=r(kRe," (MPNet model)"),kRe.forEach(t),Kwo=i(x),Lu=n(x,"LI",{});var SRe=s(Lu);Hge=n(SRe,"STRONG",{});var GTt=s(Hge);Zwo=r(GTt,"mt5"),GTt.forEach(t),eAo=r(SRe," \u2014 "),QG=n(SRe,"A",{href:!0});var OTt=s(QG);oAo=r(OTt,"MT5Model"),OTt.forEach(t),rAo=r(SRe," (MT5 model)"),SRe.forEach(t),tAo=i(x),yu=n(x,"LI",{});var RRe=s(yu);Jge=n(RRe,"STRONG",{});var VTt=s(Jge);aAo=r(VTt,"mvp"),VTt.forEach(t),nAo=r(RRe," \u2014 "),UG=n(RRe,"A",{href:!0});var XTt=s(UG);sAo=r(XTt,"MvpModel"),XTt.forEach(t),lAo=r(RRe," (MVP model)"),RRe.forEach(t),iAo=i(x),xu=n(x,"LI",{});var PRe=s(xu);Yge=n(PRe,"STRONG",{});var zTt=s(Yge);dAo=r(zTt,"nezha"),zTt.forEach(t),cAo=r(PRe," \u2014 "),HG=n(PRe,"A",{href:!0});var WTt=s(HG);fAo=r(WTt,"NezhaModel"),WTt.forEach(t),mAo=r(PRe," (Nezha model)"),PRe.forEach(t),gAo=i(x),$u=n(x,"LI",{});var BRe=s($u);Kge=n(BRe,"STRONG",{});var QTt=s(Kge);hAo=r(QTt,"nllb"),QTt.forEach(t),pAo=r(BRe," \u2014 "),JG=n(BRe,"A",{href:!0});var UTt=s(JG);_Ao=r(UTt,"M2M100Model"),UTt.forEach(t),uAo=r(BRe," (NLLB model)"),BRe.forEach(t),bAo=i(x),ku=n(x,"LI",{});var IRe=s(ku);Zge=n(IRe,"STRONG",{});var HTt=s(Zge);vAo=r(HTt,"nystromformer"),HTt.forEach(t),FAo=r(IRe," \u2014 "),YG=n(IRe,"A",{href:!0});var JTt=s(YG);TAo=r(JTt,"NystromformerModel"),JTt.forEach(t),MAo=r(IRe," (Nystr\xF6mformer model)"),IRe.forEach(t),EAo=i(x),Su=n(x,"LI",{});var NRe=s(Su);ehe=n(NRe,"STRONG",{});var YTt=s(ehe);CAo=r(YTt,"openai-gpt"),YTt.forEach(t),wAo=r(NRe," \u2014 "),KG=n(NRe,"A",{href:!0});var KTt=s(KG);AAo=r(KTt,"OpenAIGPTModel"),KTt.forEach(t),LAo=r(NRe," (OpenAI GPT model)"),NRe.forEach(t),yAo=i(x),Ru=n(x,"LI",{});var qRe=s(Ru);ohe=n(qRe,"STRONG",{});var ZTt=s(ohe);xAo=r(ZTt,"opt"),ZTt.forEach(t),$Ao=r(qRe," \u2014 "),ZG=n(qRe,"A",{href:!0});var e7t=s(ZG);kAo=r(e7t,"OPTModel"),e7t.forEach(t),SAo=r(qRe," (OPT model)"),qRe.forEach(t),RAo=i(x),Pu=n(x,"LI",{});var jRe=s(Pu);rhe=n(jRe,"STRONG",{});var o7t=s(rhe);PAo=r(o7t,"owlvit"),o7t.forEach(t),BAo=r(jRe," \u2014 "),eO=n(jRe,"A",{href:!0});var r7t=s(eO);IAo=r(r7t,"OwlViTModel"),r7t.forEach(t),NAo=r(jRe," (OWL-ViT model)"),jRe.forEach(t),qAo=i(x),Bu=n(x,"LI",{});var DRe=s(Bu);the=n(DRe,"STRONG",{});var t7t=s(the);jAo=r(t7t,"pegasus"),t7t.forEach(t),DAo=r(DRe," \u2014 "),oO=n(DRe,"A",{href:!0});var a7t=s(oO);GAo=r(a7t,"PegasusModel"),a7t.forEach(t),OAo=r(DRe," (Pegasus model)"),DRe.forEach(t),VAo=i(x),Iu=n(x,"LI",{});var GRe=s(Iu);ahe=n(GRe,"STRONG",{});var n7t=s(ahe);XAo=r(n7t,"perceiver"),n7t.forEach(t),zAo=r(GRe," \u2014 "),rO=n(GRe,"A",{href:!0});var s7t=s(rO);WAo=r(s7t,"PerceiverModel"),s7t.forEach(t),QAo=r(GRe," (Perceiver model)"),GRe.forEach(t),UAo=i(x),Nu=n(x,"LI",{});var ORe=s(Nu);nhe=n(ORe,"STRONG",{});var l7t=s(nhe);HAo=r(l7t,"plbart"),l7t.forEach(t),JAo=r(ORe," \u2014 "),tO=n(ORe,"A",{href:!0});var i7t=s(tO);YAo=r(i7t,"PLBartModel"),i7t.forEach(t),KAo=r(ORe," (PLBart model)"),ORe.forEach(t),ZAo=i(x),qu=n(x,"LI",{});var VRe=s(qu);she=n(VRe,"STRONG",{});var d7t=s(she);eLo=r(d7t,"poolformer"),d7t.forEach(t),oLo=r(VRe," \u2014 "),aO=n(VRe,"A",{href:!0});var c7t=s(aO);rLo=r(c7t,"PoolFormerModel"),c7t.forEach(t),tLo=r(VRe," (PoolFormer model)"),VRe.forEach(t),aLo=i(x),ju=n(x,"LI",{});var XRe=s(ju);lhe=n(XRe,"STRONG",{});var f7t=s(lhe);nLo=r(f7t,"prophetnet"),f7t.forEach(t),sLo=r(XRe," \u2014 "),nO=n(XRe,"A",{href:!0});var m7t=s(nO);lLo=r(m7t,"ProphetNetModel"),m7t.forEach(t),iLo=r(XRe," (ProphetNet model)"),XRe.forEach(t),dLo=i(x),Du=n(x,"LI",{});var zRe=s(Du);ihe=n(zRe,"STRONG",{});var g7t=s(ihe);cLo=r(g7t,"qdqbert"),g7t.forEach(t),fLo=r(zRe," \u2014 "),sO=n(zRe,"A",{href:!0});var h7t=s(sO);mLo=r(h7t,"QDQBertModel"),h7t.forEach(t),gLo=r(zRe," (QDQBert model)"),zRe.forEach(t),hLo=i(x),Gu=n(x,"LI",{});var WRe=s(Gu);dhe=n(WRe,"STRONG",{});var p7t=s(dhe);pLo=r(p7t,"reformer"),p7t.forEach(t),_Lo=r(WRe," \u2014 "),lO=n(WRe,"A",{href:!0});var _7t=s(lO);uLo=r(_7t,"ReformerModel"),_7t.forEach(t),bLo=r(WRe," (Reformer model)"),WRe.forEach(t),vLo=i(x),Ou=n(x,"LI",{});var QRe=s(Ou);che=n(QRe,"STRONG",{});var u7t=s(che);FLo=r(u7t,"regnet"),u7t.forEach(t),TLo=r(QRe," \u2014 "),iO=n(QRe,"A",{href:!0});var b7t=s(iO);MLo=r(b7t,"RegNetModel"),b7t.forEach(t),ELo=r(QRe," (RegNet model)"),QRe.forEach(t),CLo=i(x),Vu=n(x,"LI",{});var URe=s(Vu);fhe=n(URe,"STRONG",{});var v7t=s(fhe);wLo=r(v7t,"rembert"),v7t.forEach(t),ALo=r(URe," \u2014 "),dO=n(URe,"A",{href:!0});var F7t=s(dO);LLo=r(F7t,"RemBertModel"),F7t.forEach(t),yLo=r(URe," (RemBERT model)"),URe.forEach(t),xLo=i(x),Xu=n(x,"LI",{});var HRe=s(Xu);mhe=n(HRe,"STRONG",{});var T7t=s(mhe);$Lo=r(T7t,"resnet"),T7t.forEach(t),kLo=r(HRe," \u2014 "),cO=n(HRe,"A",{href:!0});var M7t=s(cO);SLo=r(M7t,"ResNetModel"),M7t.forEach(t),RLo=r(HRe," (ResNet model)"),HRe.forEach(t),PLo=i(x),zu=n(x,"LI",{});var JRe=s(zu);ghe=n(JRe,"STRONG",{});var E7t=s(ghe);BLo=r(E7t,"retribert"),E7t.forEach(t),ILo=r(JRe," \u2014 "),fO=n(JRe,"A",{href:!0});var C7t=s(fO);NLo=r(C7t,"RetriBertModel"),C7t.forEach(t),qLo=r(JRe," (RetriBERT model)"),JRe.forEach(t),jLo=i(x),Wu=n(x,"LI",{});var YRe=s(Wu);hhe=n(YRe,"STRONG",{});var w7t=s(hhe);DLo=r(w7t,"roberta"),w7t.forEach(t),GLo=r(YRe," \u2014 "),mO=n(YRe,"A",{href:!0});var A7t=s(mO);OLo=r(A7t,"RobertaModel"),A7t.forEach(t),VLo=r(YRe," (RoBERTa model)"),YRe.forEach(t),XLo=i(x),Qu=n(x,"LI",{});var KRe=s(Qu);phe=n(KRe,"STRONG",{});var L7t=s(phe);zLo=r(L7t,"roformer"),L7t.forEach(t),WLo=r(KRe," \u2014 "),gO=n(KRe,"A",{href:!0});var y7t=s(gO);QLo=r(y7t,"RoFormerModel"),y7t.forEach(t),ULo=r(KRe," (RoFormer model)"),KRe.forEach(t),HLo=i(x),Uu=n(x,"LI",{});var ZRe=s(Uu);_he=n(ZRe,"STRONG",{});var x7t=s(_he);JLo=r(x7t,"segformer"),x7t.forEach(t),YLo=r(ZRe," \u2014 "),hO=n(ZRe,"A",{href:!0});var $7t=s(hO);KLo=r($7t,"SegformerModel"),$7t.forEach(t),ZLo=r(ZRe," (SegFormer model)"),ZRe.forEach(t),eyo=i(x),Hu=n(x,"LI",{});var ePe=s(Hu);uhe=n(ePe,"STRONG",{});var k7t=s(uhe);oyo=r(k7t,"sew"),k7t.forEach(t),ryo=r(ePe," \u2014 "),pO=n(ePe,"A",{href:!0});var S7t=s(pO);tyo=r(S7t,"SEWModel"),S7t.forEach(t),ayo=r(ePe," (SEW model)"),ePe.forEach(t),nyo=i(x),Ju=n(x,"LI",{});var oPe=s(Ju);bhe=n(oPe,"STRONG",{});var R7t=s(bhe);syo=r(R7t,"sew-d"),R7t.forEach(t),lyo=r(oPe," \u2014 "),_O=n(oPe,"A",{href:!0});var P7t=s(_O);iyo=r(P7t,"SEWDModel"),P7t.forEach(t),dyo=r(oPe," (SEW-D model)"),oPe.forEach(t),cyo=i(x),Yu=n(x,"LI",{});var rPe=s(Yu);vhe=n(rPe,"STRONG",{});var B7t=s(vhe);fyo=r(B7t,"speech_to_text"),B7t.forEach(t),myo=r(rPe," \u2014 "),uO=n(rPe,"A",{href:!0});var I7t=s(uO);gyo=r(I7t,"Speech2TextModel"),I7t.forEach(t),hyo=r(rPe," (Speech2Text model)"),rPe.forEach(t),pyo=i(x),Ku=n(x,"LI",{});var tPe=s(Ku);Fhe=n(tPe,"STRONG",{});var N7t=s(Fhe);_yo=r(N7t,"splinter"),N7t.forEach(t),uyo=r(tPe," \u2014 "),bO=n(tPe,"A",{href:!0});var q7t=s(bO);byo=r(q7t,"SplinterModel"),q7t.forEach(t),vyo=r(tPe," (Splinter model)"),tPe.forEach(t),Fyo=i(x),Zu=n(x,"LI",{});var aPe=s(Zu);The=n(aPe,"STRONG",{});var j7t=s(The);Tyo=r(j7t,"squeezebert"),j7t.forEach(t),Myo=r(aPe," \u2014 "),vO=n(aPe,"A",{href:!0});var D7t=s(vO);Eyo=r(D7t,"SqueezeBertModel"),D7t.forEach(t),Cyo=r(aPe," (SqueezeBERT model)"),aPe.forEach(t),wyo=i(x),e1=n(x,"LI",{});var nPe=s(e1);Mhe=n(nPe,"STRONG",{});var G7t=s(Mhe);Ayo=r(G7t,"swin"),G7t.forEach(t),Lyo=r(nPe," \u2014 "),FO=n(nPe,"A",{href:!0});var O7t=s(FO);yyo=r(O7t,"SwinModel"),O7t.forEach(t),xyo=r(nPe," (Swin Transformer model)"),nPe.forEach(t),$yo=i(x),o1=n(x,"LI",{});var sPe=s(o1);Ehe=n(sPe,"STRONG",{});var V7t=s(Ehe);kyo=r(V7t,"swinv2"),V7t.forEach(t),Syo=r(sPe," \u2014 "),TO=n(sPe,"A",{href:!0});var X7t=s(TO);Ryo=r(X7t,"Swinv2Model"),X7t.forEach(t),Pyo=r(sPe," (Swin Transformer V2 model)"),sPe.forEach(t),Byo=i(x),r1=n(x,"LI",{});var lPe=s(r1);Che=n(lPe,"STRONG",{});var z7t=s(Che);Iyo=r(z7t,"t5"),z7t.forEach(t),Nyo=r(lPe," \u2014 "),MO=n(lPe,"A",{href:!0});var W7t=s(MO);qyo=r(W7t,"T5Model"),W7t.forEach(t),jyo=r(lPe," (T5 model)"),lPe.forEach(t),Dyo=i(x),t1=n(x,"LI",{});var iPe=s(t1);whe=n(iPe,"STRONG",{});var Q7t=s(whe);Gyo=r(Q7t,"tapas"),Q7t.forEach(t),Oyo=r(iPe," \u2014 "),EO=n(iPe,"A",{href:!0});var U7t=s(EO);Vyo=r(U7t,"TapasModel"),U7t.forEach(t),Xyo=r(iPe," (TAPAS model)"),iPe.forEach(t),zyo=i(x),a1=n(x,"LI",{});var dPe=s(a1);Ahe=n(dPe,"STRONG",{});var H7t=s(Ahe);Wyo=r(H7t,"trajectory_transformer"),H7t.forEach(t),Qyo=r(dPe," \u2014 "),CO=n(dPe,"A",{href:!0});var J7t=s(CO);Uyo=r(J7t,"TrajectoryTransformerModel"),J7t.forEach(t),Hyo=r(dPe," (Trajectory Transformer model)"),dPe.forEach(t),Jyo=i(x),n1=n(x,"LI",{});var cPe=s(n1);Lhe=n(cPe,"STRONG",{});var Y7t=s(Lhe);Yyo=r(Y7t,"transfo-xl"),Y7t.forEach(t),Kyo=r(cPe," \u2014 "),wO=n(cPe,"A",{href:!0});var K7t=s(wO);Zyo=r(K7t,"TransfoXLModel"),K7t.forEach(t),e9o=r(cPe," (Transformer-XL model)"),cPe.forEach(t),o9o=i(x),s1=n(x,"LI",{});var fPe=s(s1);yhe=n(fPe,"STRONG",{});var Z7t=s(yhe);r9o=r(Z7t,"unispeech"),Z7t.forEach(t),t9o=r(fPe," \u2014 "),AO=n(fPe,"A",{href:!0});var eMt=s(AO);a9o=r(eMt,"UniSpeechModel"),eMt.forEach(t),n9o=r(fPe," (UniSpeech model)"),fPe.forEach(t),s9o=i(x),l1=n(x,"LI",{});var mPe=s(l1);xhe=n(mPe,"STRONG",{});var oMt=s(xhe);l9o=r(oMt,"unispeech-sat"),oMt.forEach(t),i9o=r(mPe," \u2014 "),LO=n(mPe,"A",{href:!0});var rMt=s(LO);d9o=r(rMt,"UniSpeechSatModel"),rMt.forEach(t),c9o=r(mPe," (UniSpeechSat model)"),mPe.forEach(t),f9o=i(x),i1=n(x,"LI",{});var gPe=s(i1);$he=n(gPe,"STRONG",{});var tMt=s($he);m9o=r(tMt,"van"),tMt.forEach(t),g9o=r(gPe," \u2014 "),yO=n(gPe,"A",{href:!0});var aMt=s(yO);h9o=r(aMt,"VanModel"),aMt.forEach(t),p9o=r(gPe," (VAN model)"),gPe.forEach(t),_9o=i(x),d1=n(x,"LI",{});var hPe=s(d1);khe=n(hPe,"STRONG",{});var nMt=s(khe);u9o=r(nMt,"videomae"),nMt.forEach(t),b9o=r(hPe," \u2014 "),xO=n(hPe,"A",{href:!0});var sMt=s(xO);v9o=r(sMt,"VideoMAEModel"),sMt.forEach(t),F9o=r(hPe," (VideoMAE model)"),hPe.forEach(t),T9o=i(x),c1=n(x,"LI",{});var pPe=s(c1);She=n(pPe,"STRONG",{});var lMt=s(She);M9o=r(lMt,"vilt"),lMt.forEach(t),E9o=r(pPe," \u2014 "),$O=n(pPe,"A",{href:!0});var iMt=s($O);C9o=r(iMt,"ViltModel"),iMt.forEach(t),w9o=r(pPe," (ViLT model)"),pPe.forEach(t),A9o=i(x),f1=n(x,"LI",{});var _Pe=s(f1);Rhe=n(_Pe,"STRONG",{});var dMt=s(Rhe);L9o=r(dMt,"vision-text-dual-encoder"),dMt.forEach(t),y9o=r(_Pe," \u2014 "),kO=n(_Pe,"A",{href:!0});var cMt=s(kO);x9o=r(cMt,"VisionTextDualEncoderModel"),cMt.forEach(t),$9o=r(_Pe," (VisionTextDualEncoder model)"),_Pe.forEach(t),k9o=i(x),m1=n(x,"LI",{});var uPe=s(m1);Phe=n(uPe,"STRONG",{});var fMt=s(Phe);S9o=r(fMt,"visual_bert"),fMt.forEach(t),R9o=r(uPe," \u2014 "),SO=n(uPe,"A",{href:!0});var mMt=s(SO);P9o=r(mMt,"VisualBertModel"),mMt.forEach(t),B9o=r(uPe," (VisualBERT model)"),uPe.forEach(t),I9o=i(x),g1=n(x,"LI",{});var bPe=s(g1);Bhe=n(bPe,"STRONG",{});var gMt=s(Bhe);N9o=r(gMt,"vit"),gMt.forEach(t),q9o=r(bPe," \u2014 "),RO=n(bPe,"A",{href:!0});var hMt=s(RO);j9o=r(hMt,"ViTModel"),hMt.forEach(t),D9o=r(bPe," (ViT model)"),bPe.forEach(t),G9o=i(x),h1=n(x,"LI",{});var vPe=s(h1);Ihe=n(vPe,"STRONG",{});var pMt=s(Ihe);O9o=r(pMt,"vit_mae"),pMt.forEach(t),V9o=r(vPe," \u2014 "),PO=n(vPe,"A",{href:!0});var _Mt=s(PO);X9o=r(_Mt,"ViTMAEModel"),_Mt.forEach(t),z9o=r(vPe," (ViTMAE model)"),vPe.forEach(t),W9o=i(x),p1=n(x,"LI",{});var FPe=s(p1);Nhe=n(FPe,"STRONG",{});var uMt=s(Nhe);Q9o=r(uMt,"wav2vec2"),uMt.forEach(t),U9o=r(FPe," \u2014 "),BO=n(FPe,"A",{href:!0});var bMt=s(BO);H9o=r(bMt,"Wav2Vec2Model"),bMt.forEach(t),J9o=r(FPe," (Wav2Vec2 model)"),FPe.forEach(t),Y9o=i(x),_1=n(x,"LI",{});var TPe=s(_1);qhe=n(TPe,"STRONG",{});var vMt=s(qhe);K9o=r(vMt,"wav2vec2-conformer"),vMt.forEach(t),Z9o=r(TPe," \u2014 "),IO=n(TPe,"A",{href:!0});var FMt=s(IO);exo=r(FMt,"Wav2Vec2ConformerModel"),FMt.forEach(t),oxo=r(TPe," (Wav2Vec2-Conformer model)"),TPe.forEach(t),rxo=i(x),u1=n(x,"LI",{});var MPe=s(u1);jhe=n(MPe,"STRONG",{});var TMt=s(jhe);txo=r(TMt,"wavlm"),TMt.forEach(t),axo=r(MPe," \u2014 "),NO=n(MPe,"A",{href:!0});var MMt=s(NO);nxo=r(MMt,"WavLMModel"),MMt.forEach(t),sxo=r(MPe," (WavLM model)"),MPe.forEach(t),lxo=i(x),b1=n(x,"LI",{});var EPe=s(b1);Dhe=n(EPe,"STRONG",{});var EMt=s(Dhe);ixo=r(EMt,"xglm"),EMt.forEach(t),dxo=r(EPe," \u2014 "),qO=n(EPe,"A",{href:!0});var CMt=s(qO);cxo=r(CMt,"XGLMModel"),CMt.forEach(t),fxo=r(EPe," (XGLM model)"),EPe.forEach(t),mxo=i(x),v1=n(x,"LI",{});var CPe=s(v1);Ghe=n(CPe,"STRONG",{});var wMt=s(Ghe);gxo=r(wMt,"xlm"),wMt.forEach(t),hxo=r(CPe," \u2014 "),jO=n(CPe,"A",{href:!0});var AMt=s(jO);pxo=r(AMt,"XLMModel"),AMt.forEach(t),_xo=r(CPe," (XLM model)"),CPe.forEach(t),uxo=i(x),F1=n(x,"LI",{});var wPe=s(F1);Ohe=n(wPe,"STRONG",{});var LMt=s(Ohe);bxo=r(LMt,"xlm-prophetnet"),LMt.forEach(t),vxo=r(wPe," \u2014 "),DO=n(wPe,"A",{href:!0});var yMt=s(DO);Fxo=r(yMt,"XLMProphetNetModel"),yMt.forEach(t),Txo=r(wPe," (XLM-ProphetNet model)"),wPe.forEach(t),Mxo=i(x),T1=n(x,"LI",{});var APe=s(T1);Vhe=n(APe,"STRONG",{});var xMt=s(Vhe);Exo=r(xMt,"xlm-roberta"),xMt.forEach(t),Cxo=r(APe," \u2014 "),GO=n(APe,"A",{href:!0});var $Mt=s(GO);wxo=r($Mt,"XLMRobertaModel"),$Mt.forEach(t),Axo=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),Lxo=i(x),M1=n(x,"LI",{});var LPe=s(M1);Xhe=n(LPe,"STRONG",{});var kMt=s(Xhe);yxo=r(kMt,"xlm-roberta-xl"),kMt.forEach(t),xxo=r(LPe," \u2014 "),OO=n(LPe,"A",{href:!0});var SMt=s(OO);$xo=r(SMt,"XLMRobertaXLModel"),SMt.forEach(t),kxo=r(LPe," (XLM-RoBERTa-XL model)"),LPe.forEach(t),Sxo=i(x),E1=n(x,"LI",{});var yPe=s(E1);zhe=n(yPe,"STRONG",{});var RMt=s(zhe);Rxo=r(RMt,"xlnet"),RMt.forEach(t),Pxo=r(yPe," \u2014 "),VO=n(yPe,"A",{href:!0});var PMt=s(VO);Bxo=r(PMt,"XLNetModel"),PMt.forEach(t),Ixo=r(yPe," (XLNet model)"),yPe.forEach(t),Nxo=i(x),C1=n(x,"LI",{});var xPe=s(C1);Whe=n(xPe,"STRONG",{});var BMt=s(Whe);qxo=r(BMt,"yolos"),BMt.forEach(t),jxo=r(xPe," \u2014 "),XO=n(xPe,"A",{href:!0});var IMt=s(XO);Dxo=r(IMt,"YolosModel"),IMt.forEach(t),Gxo=r(xPe," (YOLOS model)"),xPe.forEach(t),Oxo=i(x),w1=n(x,"LI",{});var $Pe=s(w1);Qhe=n($Pe,"STRONG",{});var NMt=s(Qhe);Vxo=r(NMt,"yoso"),NMt.forEach(t),Xxo=r($Pe," \u2014 "),zO=n($Pe,"A",{href:!0});var qMt=s(zO);zxo=r(qMt,"YosoModel"),qMt.forEach(t),Wxo=r($Pe," (YOSO model)"),$Pe.forEach(t),x.forEach(t),Qxo=i(ga),A1=n(ga,"P",{});var kPe=s(A1);Uxo=r(kPe,"The model is set in evaluation mode by default using "),Uhe=n(kPe,"CODE",{});var jMt=s(Uhe);Hxo=r(jMt,"model.eval()"),jMt.forEach(t),Jxo=r(kPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=n(kPe,"CODE",{});var DMt=s(Hhe);Yxo=r(DMt,"model.train()"),DMt.forEach(t),kPe.forEach(t),Kxo=i(ga),T(L1.$$.fragment,ga),ga.forEach(t),hl.forEach(t),uUe=i(f),nd=n(f,"H2",{class:!0});var LJe=s(nd);y1=n(LJe,"A",{id:!0,class:!0,href:!0});var GMt=s(y1);Jhe=n(GMt,"SPAN",{});var OMt=s(Jhe);T(Uy.$$.fragment,OMt),OMt.forEach(t),GMt.forEach(t),Zxo=i(LJe),Yhe=n(LJe,"SPAN",{});var VMt=s(Yhe);e$o=r(VMt,"AutoModelForPreTraining"),VMt.forEach(t),LJe.forEach(t),bUe=i(f),Ro=n(f,"DIV",{class:!0});var pl=s(Ro);T(Hy.$$.fragment,pl),o$o=i(pl),sd=n(pl,"P",{});var Jae=s(sd);r$o=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WO=n(Jae,"A",{href:!0});var XMt=s(WO);t$o=r(XMt,"from_pretrained()"),XMt.forEach(t),a$o=r(Jae," class method or the "),QO=n(Jae,"A",{href:!0});var zMt=s(QO);n$o=r(zMt,"from_config()"),zMt.forEach(t),s$o=r(Jae,` class
method.`),Jae.forEach(t),l$o=i(pl),Jy=n(pl,"P",{});var yJe=s(Jy);i$o=r(yJe,"This class cannot be instantiated directly using "),Khe=n(yJe,"CODE",{});var WMt=s(Khe);d$o=r(WMt,"__init__()"),WMt.forEach(t),c$o=r(yJe," (throws an error)."),yJe.forEach(t),f$o=i(pl),gt=n(pl,"DIV",{class:!0});var bA=s(gt);T(Yy.$$.fragment,bA),m$o=i(bA),Zhe=n(bA,"P",{});var QMt=s(Zhe);g$o=r(QMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QMt.forEach(t),h$o=i(bA),ld=n(bA,"P",{});var Yae=s(ld);p$o=r(Yae,`Note:
Loading a model from its configuration file does `),epe=n(Yae,"STRONG",{});var UMt=s(epe);_$o=r(UMt,"not"),UMt.forEach(t),u$o=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(Yae,"A",{href:!0});var HMt=s(UO);b$o=r(HMt,"from_pretrained()"),HMt.forEach(t),v$o=r(Yae," to load the model weights."),Yae.forEach(t),F$o=i(bA),T(x1.$$.fragment,bA),bA.forEach(t),T$o=i(pl),Ke=n(pl,"DIV",{class:!0});var ha=s(Ke);T(Ky.$$.fragment,ha),M$o=i(ha),ope=n(ha,"P",{});var JMt=s(ope);E$o=r(JMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JMt.forEach(t),C$o=i(ha),Xa=n(ha,"P",{});var vA=s(Xa);w$o=r(vA,"The model class to instantiate is selected based on the "),rpe=n(vA,"CODE",{});var YMt=s(rpe);A$o=r(YMt,"model_type"),YMt.forEach(t),L$o=r(vA,` property of the config object (either
passed as an argument or loaded from `),tpe=n(vA,"CODE",{});var KMt=s(tpe);y$o=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),x$o=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(vA,"CODE",{});var ZMt=s(ape);$$o=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),k$o=r(vA,":"),vA.forEach(t),S$o=i(ha),G=n(ha,"UL",{});var O=s(G);$1=n(O,"LI",{});var SPe=s($1);npe=n(SPe,"STRONG",{});var eEt=s(npe);R$o=r(eEt,"albert"),eEt.forEach(t),P$o=r(SPe," \u2014 "),HO=n(SPe,"A",{href:!0});var oEt=s(HO);B$o=r(oEt,"AlbertForPreTraining"),oEt.forEach(t),I$o=r(SPe," (ALBERT model)"),SPe.forEach(t),N$o=i(O),k1=n(O,"LI",{});var RPe=s(k1);spe=n(RPe,"STRONG",{});var rEt=s(spe);q$o=r(rEt,"bart"),rEt.forEach(t),j$o=r(RPe," \u2014 "),JO=n(RPe,"A",{href:!0});var tEt=s(JO);D$o=r(tEt,"BartForConditionalGeneration"),tEt.forEach(t),G$o=r(RPe," (BART model)"),RPe.forEach(t),O$o=i(O),S1=n(O,"LI",{});var PPe=s(S1);lpe=n(PPe,"STRONG",{});var aEt=s(lpe);V$o=r(aEt,"bert"),aEt.forEach(t),X$o=r(PPe," \u2014 "),YO=n(PPe,"A",{href:!0});var nEt=s(YO);z$o=r(nEt,"BertForPreTraining"),nEt.forEach(t),W$o=r(PPe," (BERT model)"),PPe.forEach(t),Q$o=i(O),R1=n(O,"LI",{});var BPe=s(R1);ipe=n(BPe,"STRONG",{});var sEt=s(ipe);U$o=r(sEt,"big_bird"),sEt.forEach(t),H$o=r(BPe," \u2014 "),KO=n(BPe,"A",{href:!0});var lEt=s(KO);J$o=r(lEt,"BigBirdForPreTraining"),lEt.forEach(t),Y$o=r(BPe," (BigBird model)"),BPe.forEach(t),K$o=i(O),P1=n(O,"LI",{});var IPe=s(P1);dpe=n(IPe,"STRONG",{});var iEt=s(dpe);Z$o=r(iEt,"bloom"),iEt.forEach(t),eko=r(IPe," \u2014 "),ZO=n(IPe,"A",{href:!0});var dEt=s(ZO);oko=r(dEt,"BloomForCausalLM"),dEt.forEach(t),rko=r(IPe," (BLOOM model)"),IPe.forEach(t),tko=i(O),B1=n(O,"LI",{});var NPe=s(B1);cpe=n(NPe,"STRONG",{});var cEt=s(cpe);ako=r(cEt,"camembert"),cEt.forEach(t),nko=r(NPe," \u2014 "),eV=n(NPe,"A",{href:!0});var fEt=s(eV);sko=r(fEt,"CamembertForMaskedLM"),fEt.forEach(t),lko=r(NPe," (CamemBERT model)"),NPe.forEach(t),iko=i(O),I1=n(O,"LI",{});var qPe=s(I1);fpe=n(qPe,"STRONG",{});var mEt=s(fpe);dko=r(mEt,"ctrl"),mEt.forEach(t),cko=r(qPe," \u2014 "),oV=n(qPe,"A",{href:!0});var gEt=s(oV);fko=r(gEt,"CTRLLMHeadModel"),gEt.forEach(t),mko=r(qPe," (CTRL model)"),qPe.forEach(t),gko=i(O),N1=n(O,"LI",{});var jPe=s(N1);mpe=n(jPe,"STRONG",{});var hEt=s(mpe);hko=r(hEt,"data2vec-text"),hEt.forEach(t),pko=r(jPe," \u2014 "),rV=n(jPe,"A",{href:!0});var pEt=s(rV);_ko=r(pEt,"Data2VecTextForMaskedLM"),pEt.forEach(t),uko=r(jPe," (Data2VecText model)"),jPe.forEach(t),bko=i(O),q1=n(O,"LI",{});var DPe=s(q1);gpe=n(DPe,"STRONG",{});var _Et=s(gpe);vko=r(_Et,"deberta"),_Et.forEach(t),Fko=r(DPe," \u2014 "),tV=n(DPe,"A",{href:!0});var uEt=s(tV);Tko=r(uEt,"DebertaForMaskedLM"),uEt.forEach(t),Mko=r(DPe," (DeBERTa model)"),DPe.forEach(t),Eko=i(O),j1=n(O,"LI",{});var GPe=s(j1);hpe=n(GPe,"STRONG",{});var bEt=s(hpe);Cko=r(bEt,"deberta-v2"),bEt.forEach(t),wko=r(GPe," \u2014 "),aV=n(GPe,"A",{href:!0});var vEt=s(aV);Ako=r(vEt,"DebertaV2ForMaskedLM"),vEt.forEach(t),Lko=r(GPe," (DeBERTa-v2 model)"),GPe.forEach(t),yko=i(O),D1=n(O,"LI",{});var OPe=s(D1);ppe=n(OPe,"STRONG",{});var FEt=s(ppe);xko=r(FEt,"distilbert"),FEt.forEach(t),$ko=r(OPe," \u2014 "),nV=n(OPe,"A",{href:!0});var TEt=s(nV);kko=r(TEt,"DistilBertForMaskedLM"),TEt.forEach(t),Sko=r(OPe," (DistilBERT model)"),OPe.forEach(t),Rko=i(O),G1=n(O,"LI",{});var VPe=s(G1);_pe=n(VPe,"STRONG",{});var MEt=s(_pe);Pko=r(MEt,"electra"),MEt.forEach(t),Bko=r(VPe," \u2014 "),sV=n(VPe,"A",{href:!0});var EEt=s(sV);Iko=r(EEt,"ElectraForPreTraining"),EEt.forEach(t),Nko=r(VPe," (ELECTRA model)"),VPe.forEach(t),qko=i(O),O1=n(O,"LI",{});var XPe=s(O1);upe=n(XPe,"STRONG",{});var CEt=s(upe);jko=r(CEt,"flaubert"),CEt.forEach(t),Dko=r(XPe," \u2014 "),lV=n(XPe,"A",{href:!0});var wEt=s(lV);Gko=r(wEt,"FlaubertWithLMHeadModel"),wEt.forEach(t),Oko=r(XPe," (FlauBERT model)"),XPe.forEach(t),Vko=i(O),V1=n(O,"LI",{});var zPe=s(V1);bpe=n(zPe,"STRONG",{});var AEt=s(bpe);Xko=r(AEt,"flava"),AEt.forEach(t),zko=r(zPe," \u2014 "),iV=n(zPe,"A",{href:!0});var LEt=s(iV);Wko=r(LEt,"FlavaForPreTraining"),LEt.forEach(t),Qko=r(zPe," (FLAVA model)"),zPe.forEach(t),Uko=i(O),X1=n(O,"LI",{});var WPe=s(X1);vpe=n(WPe,"STRONG",{});var yEt=s(vpe);Hko=r(yEt,"fnet"),yEt.forEach(t),Jko=r(WPe," \u2014 "),dV=n(WPe,"A",{href:!0});var xEt=s(dV);Yko=r(xEt,"FNetForPreTraining"),xEt.forEach(t),Kko=r(WPe," (FNet model)"),WPe.forEach(t),Zko=i(O),z1=n(O,"LI",{});var QPe=s(z1);Fpe=n(QPe,"STRONG",{});var $Et=s(Fpe);eSo=r($Et,"fsmt"),$Et.forEach(t),oSo=r(QPe," \u2014 "),cV=n(QPe,"A",{href:!0});var kEt=s(cV);rSo=r(kEt,"FSMTForConditionalGeneration"),kEt.forEach(t),tSo=r(QPe," (FairSeq Machine-Translation model)"),QPe.forEach(t),aSo=i(O),W1=n(O,"LI",{});var UPe=s(W1);Tpe=n(UPe,"STRONG",{});var SEt=s(Tpe);nSo=r(SEt,"funnel"),SEt.forEach(t),sSo=r(UPe," \u2014 "),fV=n(UPe,"A",{href:!0});var REt=s(fV);lSo=r(REt,"FunnelForPreTraining"),REt.forEach(t),iSo=r(UPe," (Funnel Transformer model)"),UPe.forEach(t),dSo=i(O),Q1=n(O,"LI",{});var HPe=s(Q1);Mpe=n(HPe,"STRONG",{});var PEt=s(Mpe);cSo=r(PEt,"gpt2"),PEt.forEach(t),fSo=r(HPe," \u2014 "),mV=n(HPe,"A",{href:!0});var BEt=s(mV);mSo=r(BEt,"GPT2LMHeadModel"),BEt.forEach(t),gSo=r(HPe," (OpenAI GPT-2 model)"),HPe.forEach(t),hSo=i(O),U1=n(O,"LI",{});var JPe=s(U1);Epe=n(JPe,"STRONG",{});var IEt=s(Epe);pSo=r(IEt,"ibert"),IEt.forEach(t),_So=r(JPe," \u2014 "),gV=n(JPe,"A",{href:!0});var NEt=s(gV);uSo=r(NEt,"IBertForMaskedLM"),NEt.forEach(t),bSo=r(JPe," (I-BERT model)"),JPe.forEach(t),vSo=i(O),H1=n(O,"LI",{});var YPe=s(H1);Cpe=n(YPe,"STRONG",{});var qEt=s(Cpe);FSo=r(qEt,"layoutlm"),qEt.forEach(t),TSo=r(YPe," \u2014 "),hV=n(YPe,"A",{href:!0});var jEt=s(hV);MSo=r(jEt,"LayoutLMForMaskedLM"),jEt.forEach(t),ESo=r(YPe," (LayoutLM model)"),YPe.forEach(t),CSo=i(O),J1=n(O,"LI",{});var KPe=s(J1);wpe=n(KPe,"STRONG",{});var DEt=s(wpe);wSo=r(DEt,"longformer"),DEt.forEach(t),ASo=r(KPe," \u2014 "),pV=n(KPe,"A",{href:!0});var GEt=s(pV);LSo=r(GEt,"LongformerForMaskedLM"),GEt.forEach(t),ySo=r(KPe," (Longformer model)"),KPe.forEach(t),xSo=i(O),Y1=n(O,"LI",{});var ZPe=s(Y1);Ape=n(ZPe,"STRONG",{});var OEt=s(Ape);$So=r(OEt,"luke"),OEt.forEach(t),kSo=r(ZPe," \u2014 "),_V=n(ZPe,"A",{href:!0});var VEt=s(_V);SSo=r(VEt,"LukeForMaskedLM"),VEt.forEach(t),RSo=r(ZPe," (LUKE model)"),ZPe.forEach(t),PSo=i(O),K1=n(O,"LI",{});var eBe=s(K1);Lpe=n(eBe,"STRONG",{});var XEt=s(Lpe);BSo=r(XEt,"lxmert"),XEt.forEach(t),ISo=r(eBe," \u2014 "),uV=n(eBe,"A",{href:!0});var zEt=s(uV);NSo=r(zEt,"LxmertForPreTraining"),zEt.forEach(t),qSo=r(eBe," (LXMERT model)"),eBe.forEach(t),jSo=i(O),Z1=n(O,"LI",{});var oBe=s(Z1);ype=n(oBe,"STRONG",{});var WEt=s(ype);DSo=r(WEt,"megatron-bert"),WEt.forEach(t),GSo=r(oBe," \u2014 "),bV=n(oBe,"A",{href:!0});var QEt=s(bV);OSo=r(QEt,"MegatronBertForPreTraining"),QEt.forEach(t),VSo=r(oBe," (Megatron-BERT model)"),oBe.forEach(t),XSo=i(O),e8=n(O,"LI",{});var rBe=s(e8);xpe=n(rBe,"STRONG",{});var UEt=s(xpe);zSo=r(UEt,"mobilebert"),UEt.forEach(t),WSo=r(rBe," \u2014 "),vV=n(rBe,"A",{href:!0});var HEt=s(vV);QSo=r(HEt,"MobileBertForPreTraining"),HEt.forEach(t),USo=r(rBe," (MobileBERT model)"),rBe.forEach(t),HSo=i(O),o8=n(O,"LI",{});var tBe=s(o8);$pe=n(tBe,"STRONG",{});var JEt=s($pe);JSo=r(JEt,"mpnet"),JEt.forEach(t),YSo=r(tBe," \u2014 "),FV=n(tBe,"A",{href:!0});var YEt=s(FV);KSo=r(YEt,"MPNetForMaskedLM"),YEt.forEach(t),ZSo=r(tBe," (MPNet model)"),tBe.forEach(t),eRo=i(O),r8=n(O,"LI",{});var aBe=s(r8);kpe=n(aBe,"STRONG",{});var KEt=s(kpe);oRo=r(KEt,"mvp"),KEt.forEach(t),rRo=r(aBe," \u2014 "),TV=n(aBe,"A",{href:!0});var ZEt=s(TV);tRo=r(ZEt,"MvpForConditionalGeneration"),ZEt.forEach(t),aRo=r(aBe," (MVP model)"),aBe.forEach(t),nRo=i(O),t8=n(O,"LI",{});var nBe=s(t8);Spe=n(nBe,"STRONG",{});var e4t=s(Spe);sRo=r(e4t,"nezha"),e4t.forEach(t),lRo=r(nBe," \u2014 "),MV=n(nBe,"A",{href:!0});var o4t=s(MV);iRo=r(o4t,"NezhaForPreTraining"),o4t.forEach(t),dRo=r(nBe," (Nezha model)"),nBe.forEach(t),cRo=i(O),a8=n(O,"LI",{});var sBe=s(a8);Rpe=n(sBe,"STRONG",{});var r4t=s(Rpe);fRo=r(r4t,"openai-gpt"),r4t.forEach(t),mRo=r(sBe," \u2014 "),EV=n(sBe,"A",{href:!0});var t4t=s(EV);gRo=r(t4t,"OpenAIGPTLMHeadModel"),t4t.forEach(t),hRo=r(sBe," (OpenAI GPT model)"),sBe.forEach(t),pRo=i(O),n8=n(O,"LI",{});var lBe=s(n8);Ppe=n(lBe,"STRONG",{});var a4t=s(Ppe);_Ro=r(a4t,"retribert"),a4t.forEach(t),uRo=r(lBe," \u2014 "),CV=n(lBe,"A",{href:!0});var n4t=s(CV);bRo=r(n4t,"RetriBertModel"),n4t.forEach(t),vRo=r(lBe," (RetriBERT model)"),lBe.forEach(t),FRo=i(O),s8=n(O,"LI",{});var iBe=s(s8);Bpe=n(iBe,"STRONG",{});var s4t=s(Bpe);TRo=r(s4t,"roberta"),s4t.forEach(t),MRo=r(iBe," \u2014 "),wV=n(iBe,"A",{href:!0});var l4t=s(wV);ERo=r(l4t,"RobertaForMaskedLM"),l4t.forEach(t),CRo=r(iBe," (RoBERTa model)"),iBe.forEach(t),wRo=i(O),l8=n(O,"LI",{});var dBe=s(l8);Ipe=n(dBe,"STRONG",{});var i4t=s(Ipe);ARo=r(i4t,"splinter"),i4t.forEach(t),LRo=r(dBe," \u2014 "),AV=n(dBe,"A",{href:!0});var d4t=s(AV);yRo=r(d4t,"SplinterForPreTraining"),d4t.forEach(t),xRo=r(dBe," (Splinter model)"),dBe.forEach(t),$Ro=i(O),i8=n(O,"LI",{});var cBe=s(i8);Npe=n(cBe,"STRONG",{});var c4t=s(Npe);kRo=r(c4t,"squeezebert"),c4t.forEach(t),SRo=r(cBe," \u2014 "),LV=n(cBe,"A",{href:!0});var f4t=s(LV);RRo=r(f4t,"SqueezeBertForMaskedLM"),f4t.forEach(t),PRo=r(cBe," (SqueezeBERT model)"),cBe.forEach(t),BRo=i(O),d8=n(O,"LI",{});var fBe=s(d8);qpe=n(fBe,"STRONG",{});var m4t=s(qpe);IRo=r(m4t,"t5"),m4t.forEach(t),NRo=r(fBe," \u2014 "),yV=n(fBe,"A",{href:!0});var g4t=s(yV);qRo=r(g4t,"T5ForConditionalGeneration"),g4t.forEach(t),jRo=r(fBe," (T5 model)"),fBe.forEach(t),DRo=i(O),c8=n(O,"LI",{});var mBe=s(c8);jpe=n(mBe,"STRONG",{});var h4t=s(jpe);GRo=r(h4t,"tapas"),h4t.forEach(t),ORo=r(mBe," \u2014 "),xV=n(mBe,"A",{href:!0});var p4t=s(xV);VRo=r(p4t,"TapasForMaskedLM"),p4t.forEach(t),XRo=r(mBe," (TAPAS model)"),mBe.forEach(t),zRo=i(O),f8=n(O,"LI",{});var gBe=s(f8);Dpe=n(gBe,"STRONG",{});var _4t=s(Dpe);WRo=r(_4t,"transfo-xl"),_4t.forEach(t),QRo=r(gBe," \u2014 "),$V=n(gBe,"A",{href:!0});var u4t=s($V);URo=r(u4t,"TransfoXLLMHeadModel"),u4t.forEach(t),HRo=r(gBe," (Transformer-XL model)"),gBe.forEach(t),JRo=i(O),m8=n(O,"LI",{});var hBe=s(m8);Gpe=n(hBe,"STRONG",{});var b4t=s(Gpe);YRo=r(b4t,"unispeech"),b4t.forEach(t),KRo=r(hBe," \u2014 "),kV=n(hBe,"A",{href:!0});var v4t=s(kV);ZRo=r(v4t,"UniSpeechForPreTraining"),v4t.forEach(t),ePo=r(hBe," (UniSpeech model)"),hBe.forEach(t),oPo=i(O),g8=n(O,"LI",{});var pBe=s(g8);Ope=n(pBe,"STRONG",{});var F4t=s(Ope);rPo=r(F4t,"unispeech-sat"),F4t.forEach(t),tPo=r(pBe," \u2014 "),SV=n(pBe,"A",{href:!0});var T4t=s(SV);aPo=r(T4t,"UniSpeechSatForPreTraining"),T4t.forEach(t),nPo=r(pBe," (UniSpeechSat model)"),pBe.forEach(t),sPo=i(O),h8=n(O,"LI",{});var _Be=s(h8);Vpe=n(_Be,"STRONG",{});var M4t=s(Vpe);lPo=r(M4t,"videomae"),M4t.forEach(t),iPo=r(_Be," \u2014 "),RV=n(_Be,"A",{href:!0});var E4t=s(RV);dPo=r(E4t,"VideoMAEForPreTraining"),E4t.forEach(t),cPo=r(_Be," (VideoMAE model)"),_Be.forEach(t),fPo=i(O),p8=n(O,"LI",{});var uBe=s(p8);Xpe=n(uBe,"STRONG",{});var C4t=s(Xpe);mPo=r(C4t,"visual_bert"),C4t.forEach(t),gPo=r(uBe," \u2014 "),PV=n(uBe,"A",{href:!0});var w4t=s(PV);hPo=r(w4t,"VisualBertForPreTraining"),w4t.forEach(t),pPo=r(uBe," (VisualBERT model)"),uBe.forEach(t),_Po=i(O),_8=n(O,"LI",{});var bBe=s(_8);zpe=n(bBe,"STRONG",{});var A4t=s(zpe);uPo=r(A4t,"vit_mae"),A4t.forEach(t),bPo=r(bBe," \u2014 "),BV=n(bBe,"A",{href:!0});var L4t=s(BV);vPo=r(L4t,"ViTMAEForPreTraining"),L4t.forEach(t),FPo=r(bBe," (ViTMAE model)"),bBe.forEach(t),TPo=i(O),u8=n(O,"LI",{});var vBe=s(u8);Wpe=n(vBe,"STRONG",{});var y4t=s(Wpe);MPo=r(y4t,"wav2vec2"),y4t.forEach(t),EPo=r(vBe," \u2014 "),IV=n(vBe,"A",{href:!0});var x4t=s(IV);CPo=r(x4t,"Wav2Vec2ForPreTraining"),x4t.forEach(t),wPo=r(vBe," (Wav2Vec2 model)"),vBe.forEach(t),APo=i(O),b8=n(O,"LI",{});var FBe=s(b8);Qpe=n(FBe,"STRONG",{});var $4t=s(Qpe);LPo=r($4t,"wav2vec2-conformer"),$4t.forEach(t),yPo=r(FBe," \u2014 "),NV=n(FBe,"A",{href:!0});var k4t=s(NV);xPo=r(k4t,"Wav2Vec2ConformerForPreTraining"),k4t.forEach(t),$Po=r(FBe," (Wav2Vec2-Conformer model)"),FBe.forEach(t),kPo=i(O),v8=n(O,"LI",{});var TBe=s(v8);Upe=n(TBe,"STRONG",{});var S4t=s(Upe);SPo=r(S4t,"xlm"),S4t.forEach(t),RPo=r(TBe," \u2014 "),qV=n(TBe,"A",{href:!0});var R4t=s(qV);PPo=r(R4t,"XLMWithLMHeadModel"),R4t.forEach(t),BPo=r(TBe," (XLM model)"),TBe.forEach(t),IPo=i(O),F8=n(O,"LI",{});var MBe=s(F8);Hpe=n(MBe,"STRONG",{});var P4t=s(Hpe);NPo=r(P4t,"xlm-roberta"),P4t.forEach(t),qPo=r(MBe," \u2014 "),jV=n(MBe,"A",{href:!0});var B4t=s(jV);jPo=r(B4t,"XLMRobertaForMaskedLM"),B4t.forEach(t),DPo=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),GPo=i(O),T8=n(O,"LI",{});var EBe=s(T8);Jpe=n(EBe,"STRONG",{});var I4t=s(Jpe);OPo=r(I4t,"xlm-roberta-xl"),I4t.forEach(t),VPo=r(EBe," \u2014 "),DV=n(EBe,"A",{href:!0});var N4t=s(DV);XPo=r(N4t,"XLMRobertaXLForMaskedLM"),N4t.forEach(t),zPo=r(EBe," (XLM-RoBERTa-XL model)"),EBe.forEach(t),WPo=i(O),M8=n(O,"LI",{});var CBe=s(M8);Ype=n(CBe,"STRONG",{});var q4t=s(Ype);QPo=r(q4t,"xlnet"),q4t.forEach(t),UPo=r(CBe," \u2014 "),GV=n(CBe,"A",{href:!0});var j4t=s(GV);HPo=r(j4t,"XLNetLMHeadModel"),j4t.forEach(t),JPo=r(CBe," (XLNet model)"),CBe.forEach(t),O.forEach(t),YPo=i(ha),E8=n(ha,"P",{});var wBe=s(E8);KPo=r(wBe,"The model is set in evaluation mode by default using "),Kpe=n(wBe,"CODE",{});var D4t=s(Kpe);ZPo=r(D4t,"model.eval()"),D4t.forEach(t),eBo=r(wBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(wBe,"CODE",{});var G4t=s(Zpe);oBo=r(G4t,"model.train()"),G4t.forEach(t),wBe.forEach(t),rBo=i(ha),T(C8.$$.fragment,ha),ha.forEach(t),pl.forEach(t),vUe=i(f),id=n(f,"H2",{class:!0});var xJe=s(id);w8=n(xJe,"A",{id:!0,class:!0,href:!0});var O4t=s(w8);e_e=n(O4t,"SPAN",{});var V4t=s(e_e);T(Zy.$$.fragment,V4t),V4t.forEach(t),O4t.forEach(t),tBo=i(xJe),o_e=n(xJe,"SPAN",{});var X4t=s(o_e);aBo=r(X4t,"AutoModelForCausalLM"),X4t.forEach(t),xJe.forEach(t),FUe=i(f),Po=n(f,"DIV",{class:!0});var _l=s(Po);T(e9.$$.fragment,_l),nBo=i(_l),dd=n(_l,"P",{});var Kae=s(dd);sBo=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OV=n(Kae,"A",{href:!0});var z4t=s(OV);lBo=r(z4t,"from_pretrained()"),z4t.forEach(t),iBo=r(Kae," class method or the "),VV=n(Kae,"A",{href:!0});var W4t=s(VV);dBo=r(W4t,"from_config()"),W4t.forEach(t),cBo=r(Kae,` class
method.`),Kae.forEach(t),fBo=i(_l),o9=n(_l,"P",{});var $Je=s(o9);mBo=r($Je,"This class cannot be instantiated directly using "),r_e=n($Je,"CODE",{});var Q4t=s(r_e);gBo=r(Q4t,"__init__()"),Q4t.forEach(t),hBo=r($Je," (throws an error)."),$Je.forEach(t),pBo=i(_l),ht=n(_l,"DIV",{class:!0});var FA=s(ht);T(r9.$$.fragment,FA),_Bo=i(FA),t_e=n(FA,"P",{});var U4t=s(t_e);uBo=r(U4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),U4t.forEach(t),bBo=i(FA),cd=n(FA,"P",{});var Zae=s(cd);vBo=r(Zae,`Note:
Loading a model from its configuration file does `),a_e=n(Zae,"STRONG",{});var H4t=s(a_e);FBo=r(H4t,"not"),H4t.forEach(t),TBo=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(Zae,"A",{href:!0});var J4t=s(XV);MBo=r(J4t,"from_pretrained()"),J4t.forEach(t),EBo=r(Zae," to load the model weights."),Zae.forEach(t),CBo=i(FA),T(A8.$$.fragment,FA),FA.forEach(t),wBo=i(_l),Ze=n(_l,"DIV",{class:!0});var pa=s(Ze);T(t9.$$.fragment,pa),ABo=i(pa),n_e=n(pa,"P",{});var Y4t=s(n_e);LBo=r(Y4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Y4t.forEach(t),yBo=i(pa),za=n(pa,"P",{});var TA=s(za);xBo=r(TA,"The model class to instantiate is selected based on the "),s_e=n(TA,"CODE",{});var K4t=s(s_e);$Bo=r(K4t,"model_type"),K4t.forEach(t),kBo=r(TA,` property of the config object (either
passed as an argument or loaded from `),l_e=n(TA,"CODE",{});var Z4t=s(l_e);SBo=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),RBo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(TA,"CODE",{});var eCt=s(i_e);PBo=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),BBo=r(TA,":"),TA.forEach(t),IBo=i(pa),z=n(pa,"UL",{});var W=s(z);L8=n(W,"LI",{});var ABe=s(L8);d_e=n(ABe,"STRONG",{});var oCt=s(d_e);NBo=r(oCt,"bart"),oCt.forEach(t),qBo=r(ABe," \u2014 "),zV=n(ABe,"A",{href:!0});var rCt=s(zV);jBo=r(rCt,"BartForCausalLM"),rCt.forEach(t),DBo=r(ABe," (BART model)"),ABe.forEach(t),GBo=i(W),y8=n(W,"LI",{});var LBe=s(y8);c_e=n(LBe,"STRONG",{});var tCt=s(c_e);OBo=r(tCt,"bert"),tCt.forEach(t),VBo=r(LBe," \u2014 "),WV=n(LBe,"A",{href:!0});var aCt=s(WV);XBo=r(aCt,"BertLMHeadModel"),aCt.forEach(t),zBo=r(LBe," (BERT model)"),LBe.forEach(t),WBo=i(W),x8=n(W,"LI",{});var yBe=s(x8);f_e=n(yBe,"STRONG",{});var nCt=s(f_e);QBo=r(nCt,"bert-generation"),nCt.forEach(t),UBo=r(yBe," \u2014 "),QV=n(yBe,"A",{href:!0});var sCt=s(QV);HBo=r(sCt,"BertGenerationDecoder"),sCt.forEach(t),JBo=r(yBe," (Bert Generation model)"),yBe.forEach(t),YBo=i(W),$8=n(W,"LI",{});var xBe=s($8);m_e=n(xBe,"STRONG",{});var lCt=s(m_e);KBo=r(lCt,"big_bird"),lCt.forEach(t),ZBo=r(xBe," \u2014 "),UV=n(xBe,"A",{href:!0});var iCt=s(UV);eIo=r(iCt,"BigBirdForCausalLM"),iCt.forEach(t),oIo=r(xBe," (BigBird model)"),xBe.forEach(t),rIo=i(W),k8=n(W,"LI",{});var $Be=s(k8);g_e=n($Be,"STRONG",{});var dCt=s(g_e);tIo=r(dCt,"bigbird_pegasus"),dCt.forEach(t),aIo=r($Be," \u2014 "),HV=n($Be,"A",{href:!0});var cCt=s(HV);nIo=r(cCt,"BigBirdPegasusForCausalLM"),cCt.forEach(t),sIo=r($Be," (BigBird-Pegasus model)"),$Be.forEach(t),lIo=i(W),S8=n(W,"LI",{});var kBe=s(S8);h_e=n(kBe,"STRONG",{});var fCt=s(h_e);iIo=r(fCt,"blenderbot"),fCt.forEach(t),dIo=r(kBe," \u2014 "),JV=n(kBe,"A",{href:!0});var mCt=s(JV);cIo=r(mCt,"BlenderbotForCausalLM"),mCt.forEach(t),fIo=r(kBe," (Blenderbot model)"),kBe.forEach(t),mIo=i(W),R8=n(W,"LI",{});var SBe=s(R8);p_e=n(SBe,"STRONG",{});var gCt=s(p_e);gIo=r(gCt,"blenderbot-small"),gCt.forEach(t),hIo=r(SBe," \u2014 "),YV=n(SBe,"A",{href:!0});var hCt=s(YV);pIo=r(hCt,"BlenderbotSmallForCausalLM"),hCt.forEach(t),_Io=r(SBe," (BlenderbotSmall model)"),SBe.forEach(t),uIo=i(W),P8=n(W,"LI",{});var RBe=s(P8);__e=n(RBe,"STRONG",{});var pCt=s(__e);bIo=r(pCt,"bloom"),pCt.forEach(t),vIo=r(RBe," \u2014 "),KV=n(RBe,"A",{href:!0});var _Ct=s(KV);FIo=r(_Ct,"BloomForCausalLM"),_Ct.forEach(t),TIo=r(RBe," (BLOOM model)"),RBe.forEach(t),MIo=i(W),B8=n(W,"LI",{});var PBe=s(B8);u_e=n(PBe,"STRONG",{});var uCt=s(u_e);EIo=r(uCt,"camembert"),uCt.forEach(t),CIo=r(PBe," \u2014 "),ZV=n(PBe,"A",{href:!0});var bCt=s(ZV);wIo=r(bCt,"CamembertForCausalLM"),bCt.forEach(t),AIo=r(PBe," (CamemBERT model)"),PBe.forEach(t),LIo=i(W),I8=n(W,"LI",{});var BBe=s(I8);b_e=n(BBe,"STRONG",{});var vCt=s(b_e);yIo=r(vCt,"codegen"),vCt.forEach(t),xIo=r(BBe," \u2014 "),eX=n(BBe,"A",{href:!0});var FCt=s(eX);$Io=r(FCt,"CodeGenForCausalLM"),FCt.forEach(t),kIo=r(BBe," (CodeGen model)"),BBe.forEach(t),SIo=i(W),N8=n(W,"LI",{});var IBe=s(N8);v_e=n(IBe,"STRONG",{});var TCt=s(v_e);RIo=r(TCt,"ctrl"),TCt.forEach(t),PIo=r(IBe," \u2014 "),oX=n(IBe,"A",{href:!0});var MCt=s(oX);BIo=r(MCt,"CTRLLMHeadModel"),MCt.forEach(t),IIo=r(IBe," (CTRL model)"),IBe.forEach(t),NIo=i(W),q8=n(W,"LI",{});var NBe=s(q8);F_e=n(NBe,"STRONG",{});var ECt=s(F_e);qIo=r(ECt,"data2vec-text"),ECt.forEach(t),jIo=r(NBe," \u2014 "),rX=n(NBe,"A",{href:!0});var CCt=s(rX);DIo=r(CCt,"Data2VecTextForCausalLM"),CCt.forEach(t),GIo=r(NBe," (Data2VecText model)"),NBe.forEach(t),OIo=i(W),j8=n(W,"LI",{});var qBe=s(j8);T_e=n(qBe,"STRONG",{});var wCt=s(T_e);VIo=r(wCt,"electra"),wCt.forEach(t),XIo=r(qBe," \u2014 "),tX=n(qBe,"A",{href:!0});var ACt=s(tX);zIo=r(ACt,"ElectraForCausalLM"),ACt.forEach(t),WIo=r(qBe," (ELECTRA model)"),qBe.forEach(t),QIo=i(W),D8=n(W,"LI",{});var jBe=s(D8);M_e=n(jBe,"STRONG",{});var LCt=s(M_e);UIo=r(LCt,"gpt2"),LCt.forEach(t),HIo=r(jBe," \u2014 "),aX=n(jBe,"A",{href:!0});var yCt=s(aX);JIo=r(yCt,"GPT2LMHeadModel"),yCt.forEach(t),YIo=r(jBe," (OpenAI GPT-2 model)"),jBe.forEach(t),KIo=i(W),G8=n(W,"LI",{});var DBe=s(G8);E_e=n(DBe,"STRONG",{});var xCt=s(E_e);ZIo=r(xCt,"gpt_neo"),xCt.forEach(t),eNo=r(DBe," \u2014 "),nX=n(DBe,"A",{href:!0});var $Ct=s(nX);oNo=r($Ct,"GPTNeoForCausalLM"),$Ct.forEach(t),rNo=r(DBe," (GPT Neo model)"),DBe.forEach(t),tNo=i(W),O8=n(W,"LI",{});var GBe=s(O8);C_e=n(GBe,"STRONG",{});var kCt=s(C_e);aNo=r(kCt,"gpt_neox"),kCt.forEach(t),nNo=r(GBe," \u2014 "),sX=n(GBe,"A",{href:!0});var SCt=s(sX);sNo=r(SCt,"GPTNeoXForCausalLM"),SCt.forEach(t),lNo=r(GBe," (GPT NeoX model)"),GBe.forEach(t),iNo=i(W),V8=n(W,"LI",{});var OBe=s(V8);w_e=n(OBe,"STRONG",{});var RCt=s(w_e);dNo=r(RCt,"gptj"),RCt.forEach(t),cNo=r(OBe," \u2014 "),lX=n(OBe,"A",{href:!0});var PCt=s(lX);fNo=r(PCt,"GPTJForCausalLM"),PCt.forEach(t),mNo=r(OBe," (GPT-J model)"),OBe.forEach(t),gNo=i(W),X8=n(W,"LI",{});var VBe=s(X8);A_e=n(VBe,"STRONG",{});var BCt=s(A_e);hNo=r(BCt,"marian"),BCt.forEach(t),pNo=r(VBe," \u2014 "),iX=n(VBe,"A",{href:!0});var ICt=s(iX);_No=r(ICt,"MarianForCausalLM"),ICt.forEach(t),uNo=r(VBe," (Marian model)"),VBe.forEach(t),bNo=i(W),z8=n(W,"LI",{});var XBe=s(z8);L_e=n(XBe,"STRONG",{});var NCt=s(L_e);vNo=r(NCt,"mbart"),NCt.forEach(t),FNo=r(XBe," \u2014 "),dX=n(XBe,"A",{href:!0});var qCt=s(dX);TNo=r(qCt,"MBartForCausalLM"),qCt.forEach(t),MNo=r(XBe," (mBART model)"),XBe.forEach(t),ENo=i(W),W8=n(W,"LI",{});var zBe=s(W8);y_e=n(zBe,"STRONG",{});var jCt=s(y_e);CNo=r(jCt,"megatron-bert"),jCt.forEach(t),wNo=r(zBe," \u2014 "),cX=n(zBe,"A",{href:!0});var DCt=s(cX);ANo=r(DCt,"MegatronBertForCausalLM"),DCt.forEach(t),LNo=r(zBe," (Megatron-BERT model)"),zBe.forEach(t),yNo=i(W),Q8=n(W,"LI",{});var WBe=s(Q8);x_e=n(WBe,"STRONG",{});var GCt=s(x_e);xNo=r(GCt,"mvp"),GCt.forEach(t),$No=r(WBe," \u2014 "),fX=n(WBe,"A",{href:!0});var OCt=s(fX);kNo=r(OCt,"MvpForCausalLM"),OCt.forEach(t),SNo=r(WBe," (MVP model)"),WBe.forEach(t),RNo=i(W),U8=n(W,"LI",{});var QBe=s(U8);$_e=n(QBe,"STRONG",{});var VCt=s($_e);PNo=r(VCt,"openai-gpt"),VCt.forEach(t),BNo=r(QBe," \u2014 "),mX=n(QBe,"A",{href:!0});var XCt=s(mX);INo=r(XCt,"OpenAIGPTLMHeadModel"),XCt.forEach(t),NNo=r(QBe," (OpenAI GPT model)"),QBe.forEach(t),qNo=i(W),H8=n(W,"LI",{});var UBe=s(H8);k_e=n(UBe,"STRONG",{});var zCt=s(k_e);jNo=r(zCt,"opt"),zCt.forEach(t),DNo=r(UBe," \u2014 "),gX=n(UBe,"A",{href:!0});var WCt=s(gX);GNo=r(WCt,"OPTForCausalLM"),WCt.forEach(t),ONo=r(UBe," (OPT model)"),UBe.forEach(t),VNo=i(W),J8=n(W,"LI",{});var HBe=s(J8);S_e=n(HBe,"STRONG",{});var QCt=s(S_e);XNo=r(QCt,"pegasus"),QCt.forEach(t),zNo=r(HBe," \u2014 "),hX=n(HBe,"A",{href:!0});var UCt=s(hX);WNo=r(UCt,"PegasusForCausalLM"),UCt.forEach(t),QNo=r(HBe," (Pegasus model)"),HBe.forEach(t),UNo=i(W),Y8=n(W,"LI",{});var JBe=s(Y8);R_e=n(JBe,"STRONG",{});var HCt=s(R_e);HNo=r(HCt,"plbart"),HCt.forEach(t),JNo=r(JBe," \u2014 "),pX=n(JBe,"A",{href:!0});var JCt=s(pX);YNo=r(JCt,"PLBartForCausalLM"),JCt.forEach(t),KNo=r(JBe," (PLBart model)"),JBe.forEach(t),ZNo=i(W),K8=n(W,"LI",{});var YBe=s(K8);P_e=n(YBe,"STRONG",{});var YCt=s(P_e);eqo=r(YCt,"prophetnet"),YCt.forEach(t),oqo=r(YBe," \u2014 "),_X=n(YBe,"A",{href:!0});var KCt=s(_X);rqo=r(KCt,"ProphetNetForCausalLM"),KCt.forEach(t),tqo=r(YBe," (ProphetNet model)"),YBe.forEach(t),aqo=i(W),Z8=n(W,"LI",{});var KBe=s(Z8);B_e=n(KBe,"STRONG",{});var ZCt=s(B_e);nqo=r(ZCt,"qdqbert"),ZCt.forEach(t),sqo=r(KBe," \u2014 "),uX=n(KBe,"A",{href:!0});var e3t=s(uX);lqo=r(e3t,"QDQBertLMHeadModel"),e3t.forEach(t),iqo=r(KBe," (QDQBert model)"),KBe.forEach(t),dqo=i(W),e2=n(W,"LI",{});var ZBe=s(e2);I_e=n(ZBe,"STRONG",{});var o3t=s(I_e);cqo=r(o3t,"reformer"),o3t.forEach(t),fqo=r(ZBe," \u2014 "),bX=n(ZBe,"A",{href:!0});var r3t=s(bX);mqo=r(r3t,"ReformerModelWithLMHead"),r3t.forEach(t),gqo=r(ZBe," (Reformer model)"),ZBe.forEach(t),hqo=i(W),o2=n(W,"LI",{});var eIe=s(o2);N_e=n(eIe,"STRONG",{});var t3t=s(N_e);pqo=r(t3t,"rembert"),t3t.forEach(t),_qo=r(eIe," \u2014 "),vX=n(eIe,"A",{href:!0});var a3t=s(vX);uqo=r(a3t,"RemBertForCausalLM"),a3t.forEach(t),bqo=r(eIe," (RemBERT model)"),eIe.forEach(t),vqo=i(W),r2=n(W,"LI",{});var oIe=s(r2);q_e=n(oIe,"STRONG",{});var n3t=s(q_e);Fqo=r(n3t,"roberta"),n3t.forEach(t),Tqo=r(oIe," \u2014 "),FX=n(oIe,"A",{href:!0});var s3t=s(FX);Mqo=r(s3t,"RobertaForCausalLM"),s3t.forEach(t),Eqo=r(oIe," (RoBERTa model)"),oIe.forEach(t),Cqo=i(W),t2=n(W,"LI",{});var rIe=s(t2);j_e=n(rIe,"STRONG",{});var l3t=s(j_e);wqo=r(l3t,"roformer"),l3t.forEach(t),Aqo=r(rIe," \u2014 "),TX=n(rIe,"A",{href:!0});var i3t=s(TX);Lqo=r(i3t,"RoFormerForCausalLM"),i3t.forEach(t),yqo=r(rIe," (RoFormer model)"),rIe.forEach(t),xqo=i(W),a2=n(W,"LI",{});var tIe=s(a2);D_e=n(tIe,"STRONG",{});var d3t=s(D_e);$qo=r(d3t,"speech_to_text_2"),d3t.forEach(t),kqo=r(tIe," \u2014 "),MX=n(tIe,"A",{href:!0});var c3t=s(MX);Sqo=r(c3t,"Speech2Text2ForCausalLM"),c3t.forEach(t),Rqo=r(tIe," (Speech2Text2 model)"),tIe.forEach(t),Pqo=i(W),n2=n(W,"LI",{});var aIe=s(n2);G_e=n(aIe,"STRONG",{});var f3t=s(G_e);Bqo=r(f3t,"transfo-xl"),f3t.forEach(t),Iqo=r(aIe," \u2014 "),EX=n(aIe,"A",{href:!0});var m3t=s(EX);Nqo=r(m3t,"TransfoXLLMHeadModel"),m3t.forEach(t),qqo=r(aIe," (Transformer-XL model)"),aIe.forEach(t),jqo=i(W),s2=n(W,"LI",{});var nIe=s(s2);O_e=n(nIe,"STRONG",{});var g3t=s(O_e);Dqo=r(g3t,"trocr"),g3t.forEach(t),Gqo=r(nIe," \u2014 "),CX=n(nIe,"A",{href:!0});var h3t=s(CX);Oqo=r(h3t,"TrOCRForCausalLM"),h3t.forEach(t),Vqo=r(nIe," (TrOCR model)"),nIe.forEach(t),Xqo=i(W),l2=n(W,"LI",{});var sIe=s(l2);V_e=n(sIe,"STRONG",{});var p3t=s(V_e);zqo=r(p3t,"xglm"),p3t.forEach(t),Wqo=r(sIe," \u2014 "),wX=n(sIe,"A",{href:!0});var _3t=s(wX);Qqo=r(_3t,"XGLMForCausalLM"),_3t.forEach(t),Uqo=r(sIe," (XGLM model)"),sIe.forEach(t),Hqo=i(W),i2=n(W,"LI",{});var lIe=s(i2);X_e=n(lIe,"STRONG",{});var u3t=s(X_e);Jqo=r(u3t,"xlm"),u3t.forEach(t),Yqo=r(lIe," \u2014 "),AX=n(lIe,"A",{href:!0});var b3t=s(AX);Kqo=r(b3t,"XLMWithLMHeadModel"),b3t.forEach(t),Zqo=r(lIe," (XLM model)"),lIe.forEach(t),ejo=i(W),d2=n(W,"LI",{});var iIe=s(d2);z_e=n(iIe,"STRONG",{});var v3t=s(z_e);ojo=r(v3t,"xlm-prophetnet"),v3t.forEach(t),rjo=r(iIe," \u2014 "),LX=n(iIe,"A",{href:!0});var F3t=s(LX);tjo=r(F3t,"XLMProphetNetForCausalLM"),F3t.forEach(t),ajo=r(iIe," (XLM-ProphetNet model)"),iIe.forEach(t),njo=i(W),c2=n(W,"LI",{});var dIe=s(c2);W_e=n(dIe,"STRONG",{});var T3t=s(W_e);sjo=r(T3t,"xlm-roberta"),T3t.forEach(t),ljo=r(dIe," \u2014 "),yX=n(dIe,"A",{href:!0});var M3t=s(yX);ijo=r(M3t,"XLMRobertaForCausalLM"),M3t.forEach(t),djo=r(dIe," (XLM-RoBERTa model)"),dIe.forEach(t),cjo=i(W),f2=n(W,"LI",{});var cIe=s(f2);Q_e=n(cIe,"STRONG",{});var E3t=s(Q_e);fjo=r(E3t,"xlm-roberta-xl"),E3t.forEach(t),mjo=r(cIe," \u2014 "),xX=n(cIe,"A",{href:!0});var C3t=s(xX);gjo=r(C3t,"XLMRobertaXLForCausalLM"),C3t.forEach(t),hjo=r(cIe," (XLM-RoBERTa-XL model)"),cIe.forEach(t),pjo=i(W),m2=n(W,"LI",{});var fIe=s(m2);U_e=n(fIe,"STRONG",{});var w3t=s(U_e);_jo=r(w3t,"xlnet"),w3t.forEach(t),ujo=r(fIe," \u2014 "),$X=n(fIe,"A",{href:!0});var A3t=s($X);bjo=r(A3t,"XLNetLMHeadModel"),A3t.forEach(t),vjo=r(fIe," (XLNet model)"),fIe.forEach(t),W.forEach(t),Fjo=i(pa),g2=n(pa,"P",{});var mIe=s(g2);Tjo=r(mIe,"The model is set in evaluation mode by default using "),H_e=n(mIe,"CODE",{});var L3t=s(H_e);Mjo=r(L3t,"model.eval()"),L3t.forEach(t),Ejo=r(mIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=n(mIe,"CODE",{});var y3t=s(J_e);Cjo=r(y3t,"model.train()"),y3t.forEach(t),mIe.forEach(t),wjo=i(pa),T(h2.$$.fragment,pa),pa.forEach(t),_l.forEach(t),TUe=i(f),fd=n(f,"H2",{class:!0});var kJe=s(fd);p2=n(kJe,"A",{id:!0,class:!0,href:!0});var x3t=s(p2);Y_e=n(x3t,"SPAN",{});var $3t=s(Y_e);T(a9.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),Ajo=i(kJe),K_e=n(kJe,"SPAN",{});var k3t=s(K_e);Ljo=r(k3t,"AutoModelForMaskedLM"),k3t.forEach(t),kJe.forEach(t),MUe=i(f),Bo=n(f,"DIV",{class:!0});var ul=s(Bo);T(n9.$$.fragment,ul),yjo=i(ul),md=n(ul,"P",{});var ene=s(md);xjo=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kX=n(ene,"A",{href:!0});var S3t=s(kX);$jo=r(S3t,"from_pretrained()"),S3t.forEach(t),kjo=r(ene," class method or the "),SX=n(ene,"A",{href:!0});var R3t=s(SX);Sjo=r(R3t,"from_config()"),R3t.forEach(t),Rjo=r(ene,` class
method.`),ene.forEach(t),Pjo=i(ul),s9=n(ul,"P",{});var SJe=s(s9);Bjo=r(SJe,"This class cannot be instantiated directly using "),Z_e=n(SJe,"CODE",{});var P3t=s(Z_e);Ijo=r(P3t,"__init__()"),P3t.forEach(t),Njo=r(SJe," (throws an error)."),SJe.forEach(t),qjo=i(ul),pt=n(ul,"DIV",{class:!0});var MA=s(pt);T(l9.$$.fragment,MA),jjo=i(MA),eue=n(MA,"P",{});var B3t=s(eue);Djo=r(B3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B3t.forEach(t),Gjo=i(MA),gd=n(MA,"P",{});var one=s(gd);Ojo=r(one,`Note:
Loading a model from its configuration file does `),oue=n(one,"STRONG",{});var I3t=s(oue);Vjo=r(I3t,"not"),I3t.forEach(t),Xjo=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(one,"A",{href:!0});var N3t=s(RX);zjo=r(N3t,"from_pretrained()"),N3t.forEach(t),Wjo=r(one," to load the model weights."),one.forEach(t),Qjo=i(MA),T(_2.$$.fragment,MA),MA.forEach(t),Ujo=i(ul),eo=n(ul,"DIV",{class:!0});var _a=s(eo);T(i9.$$.fragment,_a),Hjo=i(_a),rue=n(_a,"P",{});var q3t=s(rue);Jjo=r(q3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q3t.forEach(t),Yjo=i(_a),Wa=n(_a,"P",{});var EA=s(Wa);Kjo=r(EA,"The model class to instantiate is selected based on the "),tue=n(EA,"CODE",{});var j3t=s(tue);Zjo=r(j3t,"model_type"),j3t.forEach(t),eDo=r(EA,` property of the config object (either
passed as an argument or loaded from `),aue=n(EA,"CODE",{});var D3t=s(aue);oDo=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),rDo=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(EA,"CODE",{});var G3t=s(nue);tDo=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),aDo=r(EA,":"),EA.forEach(t),nDo=i(_a),U=n(_a,"UL",{});var Y=s(U);u2=n(Y,"LI",{});var gIe=s(u2);sue=n(gIe,"STRONG",{});var O3t=s(sue);sDo=r(O3t,"albert"),O3t.forEach(t),lDo=r(gIe," \u2014 "),PX=n(gIe,"A",{href:!0});var V3t=s(PX);iDo=r(V3t,"AlbertForMaskedLM"),V3t.forEach(t),dDo=r(gIe," (ALBERT model)"),gIe.forEach(t),cDo=i(Y),b2=n(Y,"LI",{});var hIe=s(b2);lue=n(hIe,"STRONG",{});var X3t=s(lue);fDo=r(X3t,"bart"),X3t.forEach(t),mDo=r(hIe," \u2014 "),BX=n(hIe,"A",{href:!0});var z3t=s(BX);gDo=r(z3t,"BartForConditionalGeneration"),z3t.forEach(t),hDo=r(hIe," (BART model)"),hIe.forEach(t),pDo=i(Y),v2=n(Y,"LI",{});var pIe=s(v2);iue=n(pIe,"STRONG",{});var W3t=s(iue);_Do=r(W3t,"bert"),W3t.forEach(t),uDo=r(pIe," \u2014 "),IX=n(pIe,"A",{href:!0});var Q3t=s(IX);bDo=r(Q3t,"BertForMaskedLM"),Q3t.forEach(t),vDo=r(pIe," (BERT model)"),pIe.forEach(t),FDo=i(Y),F2=n(Y,"LI",{});var _Ie=s(F2);due=n(_Ie,"STRONG",{});var U3t=s(due);TDo=r(U3t,"big_bird"),U3t.forEach(t),MDo=r(_Ie," \u2014 "),NX=n(_Ie,"A",{href:!0});var H3t=s(NX);EDo=r(H3t,"BigBirdForMaskedLM"),H3t.forEach(t),CDo=r(_Ie," (BigBird model)"),_Ie.forEach(t),wDo=i(Y),T2=n(Y,"LI",{});var uIe=s(T2);cue=n(uIe,"STRONG",{});var J3t=s(cue);ADo=r(J3t,"camembert"),J3t.forEach(t),LDo=r(uIe," \u2014 "),qX=n(uIe,"A",{href:!0});var Y3t=s(qX);yDo=r(Y3t,"CamembertForMaskedLM"),Y3t.forEach(t),xDo=r(uIe," (CamemBERT model)"),uIe.forEach(t),$Do=i(Y),M2=n(Y,"LI",{});var bIe=s(M2);fue=n(bIe,"STRONG",{});var K3t=s(fue);kDo=r(K3t,"convbert"),K3t.forEach(t),SDo=r(bIe," \u2014 "),jX=n(bIe,"A",{href:!0});var Z3t=s(jX);RDo=r(Z3t,"ConvBertForMaskedLM"),Z3t.forEach(t),PDo=r(bIe," (ConvBERT model)"),bIe.forEach(t),BDo=i(Y),E2=n(Y,"LI",{});var vIe=s(E2);mue=n(vIe,"STRONG",{});var e5t=s(mue);IDo=r(e5t,"data2vec-text"),e5t.forEach(t),NDo=r(vIe," \u2014 "),DX=n(vIe,"A",{href:!0});var o5t=s(DX);qDo=r(o5t,"Data2VecTextForMaskedLM"),o5t.forEach(t),jDo=r(vIe," (Data2VecText model)"),vIe.forEach(t),DDo=i(Y),C2=n(Y,"LI",{});var FIe=s(C2);gue=n(FIe,"STRONG",{});var r5t=s(gue);GDo=r(r5t,"deberta"),r5t.forEach(t),ODo=r(FIe," \u2014 "),GX=n(FIe,"A",{href:!0});var t5t=s(GX);VDo=r(t5t,"DebertaForMaskedLM"),t5t.forEach(t),XDo=r(FIe," (DeBERTa model)"),FIe.forEach(t),zDo=i(Y),w2=n(Y,"LI",{});var TIe=s(w2);hue=n(TIe,"STRONG",{});var a5t=s(hue);WDo=r(a5t,"deberta-v2"),a5t.forEach(t),QDo=r(TIe," \u2014 "),OX=n(TIe,"A",{href:!0});var n5t=s(OX);UDo=r(n5t,"DebertaV2ForMaskedLM"),n5t.forEach(t),HDo=r(TIe," (DeBERTa-v2 model)"),TIe.forEach(t),JDo=i(Y),A2=n(Y,"LI",{});var MIe=s(A2);pue=n(MIe,"STRONG",{});var s5t=s(pue);YDo=r(s5t,"distilbert"),s5t.forEach(t),KDo=r(MIe," \u2014 "),VX=n(MIe,"A",{href:!0});var l5t=s(VX);ZDo=r(l5t,"DistilBertForMaskedLM"),l5t.forEach(t),eGo=r(MIe," (DistilBERT model)"),MIe.forEach(t),oGo=i(Y),L2=n(Y,"LI",{});var EIe=s(L2);_ue=n(EIe,"STRONG",{});var i5t=s(_ue);rGo=r(i5t,"electra"),i5t.forEach(t),tGo=r(EIe," \u2014 "),XX=n(EIe,"A",{href:!0});var d5t=s(XX);aGo=r(d5t,"ElectraForMaskedLM"),d5t.forEach(t),nGo=r(EIe," (ELECTRA model)"),EIe.forEach(t),sGo=i(Y),y2=n(Y,"LI",{});var CIe=s(y2);uue=n(CIe,"STRONG",{});var c5t=s(uue);lGo=r(c5t,"flaubert"),c5t.forEach(t),iGo=r(CIe," \u2014 "),zX=n(CIe,"A",{href:!0});var f5t=s(zX);dGo=r(f5t,"FlaubertWithLMHeadModel"),f5t.forEach(t),cGo=r(CIe," (FlauBERT model)"),CIe.forEach(t),fGo=i(Y),x2=n(Y,"LI",{});var wIe=s(x2);bue=n(wIe,"STRONG",{});var m5t=s(bue);mGo=r(m5t,"fnet"),m5t.forEach(t),gGo=r(wIe," \u2014 "),WX=n(wIe,"A",{href:!0});var g5t=s(WX);hGo=r(g5t,"FNetForMaskedLM"),g5t.forEach(t),pGo=r(wIe," (FNet model)"),wIe.forEach(t),_Go=i(Y),$2=n(Y,"LI",{});var AIe=s($2);vue=n(AIe,"STRONG",{});var h5t=s(vue);uGo=r(h5t,"funnel"),h5t.forEach(t),bGo=r(AIe," \u2014 "),QX=n(AIe,"A",{href:!0});var p5t=s(QX);vGo=r(p5t,"FunnelForMaskedLM"),p5t.forEach(t),FGo=r(AIe," (Funnel Transformer model)"),AIe.forEach(t),TGo=i(Y),k2=n(Y,"LI",{});var LIe=s(k2);Fue=n(LIe,"STRONG",{});var _5t=s(Fue);MGo=r(_5t,"ibert"),_5t.forEach(t),EGo=r(LIe," \u2014 "),UX=n(LIe,"A",{href:!0});var u5t=s(UX);CGo=r(u5t,"IBertForMaskedLM"),u5t.forEach(t),wGo=r(LIe," (I-BERT model)"),LIe.forEach(t),AGo=i(Y),S2=n(Y,"LI",{});var yIe=s(S2);Tue=n(yIe,"STRONG",{});var b5t=s(Tue);LGo=r(b5t,"layoutlm"),b5t.forEach(t),yGo=r(yIe," \u2014 "),HX=n(yIe,"A",{href:!0});var v5t=s(HX);xGo=r(v5t,"LayoutLMForMaskedLM"),v5t.forEach(t),$Go=r(yIe," (LayoutLM model)"),yIe.forEach(t),kGo=i(Y),R2=n(Y,"LI",{});var xIe=s(R2);Mue=n(xIe,"STRONG",{});var F5t=s(Mue);SGo=r(F5t,"longformer"),F5t.forEach(t),RGo=r(xIe," \u2014 "),JX=n(xIe,"A",{href:!0});var T5t=s(JX);PGo=r(T5t,"LongformerForMaskedLM"),T5t.forEach(t),BGo=r(xIe," (Longformer model)"),xIe.forEach(t),IGo=i(Y),P2=n(Y,"LI",{});var $Ie=s(P2);Eue=n($Ie,"STRONG",{});var M5t=s(Eue);NGo=r(M5t,"luke"),M5t.forEach(t),qGo=r($Ie," \u2014 "),YX=n($Ie,"A",{href:!0});var E5t=s(YX);jGo=r(E5t,"LukeForMaskedLM"),E5t.forEach(t),DGo=r($Ie," (LUKE model)"),$Ie.forEach(t),GGo=i(Y),B2=n(Y,"LI",{});var kIe=s(B2);Cue=n(kIe,"STRONG",{});var C5t=s(Cue);OGo=r(C5t,"mbart"),C5t.forEach(t),VGo=r(kIe," \u2014 "),KX=n(kIe,"A",{href:!0});var w5t=s(KX);XGo=r(w5t,"MBartForConditionalGeneration"),w5t.forEach(t),zGo=r(kIe," (mBART model)"),kIe.forEach(t),WGo=i(Y),I2=n(Y,"LI",{});var SIe=s(I2);wue=n(SIe,"STRONG",{});var A5t=s(wue);QGo=r(A5t,"megatron-bert"),A5t.forEach(t),UGo=r(SIe," \u2014 "),ZX=n(SIe,"A",{href:!0});var L5t=s(ZX);HGo=r(L5t,"MegatronBertForMaskedLM"),L5t.forEach(t),JGo=r(SIe," (Megatron-BERT model)"),SIe.forEach(t),YGo=i(Y),N2=n(Y,"LI",{});var RIe=s(N2);Aue=n(RIe,"STRONG",{});var y5t=s(Aue);KGo=r(y5t,"mobilebert"),y5t.forEach(t),ZGo=r(RIe," \u2014 "),ez=n(RIe,"A",{href:!0});var x5t=s(ez);eOo=r(x5t,"MobileBertForMaskedLM"),x5t.forEach(t),oOo=r(RIe," (MobileBERT model)"),RIe.forEach(t),rOo=i(Y),q2=n(Y,"LI",{});var PIe=s(q2);Lue=n(PIe,"STRONG",{});var $5t=s(Lue);tOo=r($5t,"mpnet"),$5t.forEach(t),aOo=r(PIe," \u2014 "),oz=n(PIe,"A",{href:!0});var k5t=s(oz);nOo=r(k5t,"MPNetForMaskedLM"),k5t.forEach(t),sOo=r(PIe," (MPNet model)"),PIe.forEach(t),lOo=i(Y),j2=n(Y,"LI",{});var BIe=s(j2);yue=n(BIe,"STRONG",{});var S5t=s(yue);iOo=r(S5t,"mvp"),S5t.forEach(t),dOo=r(BIe," \u2014 "),rz=n(BIe,"A",{href:!0});var R5t=s(rz);cOo=r(R5t,"MvpForConditionalGeneration"),R5t.forEach(t),fOo=r(BIe," (MVP model)"),BIe.forEach(t),mOo=i(Y),D2=n(Y,"LI",{});var IIe=s(D2);xue=n(IIe,"STRONG",{});var P5t=s(xue);gOo=r(P5t,"nezha"),P5t.forEach(t),hOo=r(IIe," \u2014 "),tz=n(IIe,"A",{href:!0});var B5t=s(tz);pOo=r(B5t,"NezhaForMaskedLM"),B5t.forEach(t),_Oo=r(IIe," (Nezha model)"),IIe.forEach(t),uOo=i(Y),G2=n(Y,"LI",{});var NIe=s(G2);$ue=n(NIe,"STRONG",{});var I5t=s($ue);bOo=r(I5t,"nystromformer"),I5t.forEach(t),vOo=r(NIe," \u2014 "),az=n(NIe,"A",{href:!0});var N5t=s(az);FOo=r(N5t,"NystromformerForMaskedLM"),N5t.forEach(t),TOo=r(NIe," (Nystr\xF6mformer model)"),NIe.forEach(t),MOo=i(Y),O2=n(Y,"LI",{});var qIe=s(O2);kue=n(qIe,"STRONG",{});var q5t=s(kue);EOo=r(q5t,"perceiver"),q5t.forEach(t),COo=r(qIe," \u2014 "),nz=n(qIe,"A",{href:!0});var j5t=s(nz);wOo=r(j5t,"PerceiverForMaskedLM"),j5t.forEach(t),AOo=r(qIe," (Perceiver model)"),qIe.forEach(t),LOo=i(Y),V2=n(Y,"LI",{});var jIe=s(V2);Sue=n(jIe,"STRONG",{});var D5t=s(Sue);yOo=r(D5t,"qdqbert"),D5t.forEach(t),xOo=r(jIe," \u2014 "),sz=n(jIe,"A",{href:!0});var G5t=s(sz);$Oo=r(G5t,"QDQBertForMaskedLM"),G5t.forEach(t),kOo=r(jIe," (QDQBert model)"),jIe.forEach(t),SOo=i(Y),X2=n(Y,"LI",{});var DIe=s(X2);Rue=n(DIe,"STRONG",{});var O5t=s(Rue);ROo=r(O5t,"reformer"),O5t.forEach(t),POo=r(DIe," \u2014 "),lz=n(DIe,"A",{href:!0});var V5t=s(lz);BOo=r(V5t,"ReformerForMaskedLM"),V5t.forEach(t),IOo=r(DIe," (Reformer model)"),DIe.forEach(t),NOo=i(Y),z2=n(Y,"LI",{});var GIe=s(z2);Pue=n(GIe,"STRONG",{});var X5t=s(Pue);qOo=r(X5t,"rembert"),X5t.forEach(t),jOo=r(GIe," \u2014 "),iz=n(GIe,"A",{href:!0});var z5t=s(iz);DOo=r(z5t,"RemBertForMaskedLM"),z5t.forEach(t),GOo=r(GIe," (RemBERT model)"),GIe.forEach(t),OOo=i(Y),W2=n(Y,"LI",{});var OIe=s(W2);Bue=n(OIe,"STRONG",{});var W5t=s(Bue);VOo=r(W5t,"roberta"),W5t.forEach(t),XOo=r(OIe," \u2014 "),dz=n(OIe,"A",{href:!0});var Q5t=s(dz);zOo=r(Q5t,"RobertaForMaskedLM"),Q5t.forEach(t),WOo=r(OIe," (RoBERTa model)"),OIe.forEach(t),QOo=i(Y),Q2=n(Y,"LI",{});var VIe=s(Q2);Iue=n(VIe,"STRONG",{});var U5t=s(Iue);UOo=r(U5t,"roformer"),U5t.forEach(t),HOo=r(VIe," \u2014 "),cz=n(VIe,"A",{href:!0});var H5t=s(cz);JOo=r(H5t,"RoFormerForMaskedLM"),H5t.forEach(t),YOo=r(VIe," (RoFormer model)"),VIe.forEach(t),KOo=i(Y),U2=n(Y,"LI",{});var XIe=s(U2);Nue=n(XIe,"STRONG",{});var J5t=s(Nue);ZOo=r(J5t,"squeezebert"),J5t.forEach(t),eVo=r(XIe," \u2014 "),fz=n(XIe,"A",{href:!0});var Y5t=s(fz);oVo=r(Y5t,"SqueezeBertForMaskedLM"),Y5t.forEach(t),rVo=r(XIe," (SqueezeBERT model)"),XIe.forEach(t),tVo=i(Y),H2=n(Y,"LI",{});var zIe=s(H2);que=n(zIe,"STRONG",{});var K5t=s(que);aVo=r(K5t,"tapas"),K5t.forEach(t),nVo=r(zIe," \u2014 "),mz=n(zIe,"A",{href:!0});var Z5t=s(mz);sVo=r(Z5t,"TapasForMaskedLM"),Z5t.forEach(t),lVo=r(zIe," (TAPAS model)"),zIe.forEach(t),iVo=i(Y),J2=n(Y,"LI",{});var WIe=s(J2);jue=n(WIe,"STRONG",{});var e0t=s(jue);dVo=r(e0t,"wav2vec2"),e0t.forEach(t),cVo=r(WIe," \u2014 "),Due=n(WIe,"CODE",{});var o0t=s(Due);fVo=r(o0t,"Wav2Vec2ForMaskedLM"),o0t.forEach(t),mVo=r(WIe," (Wav2Vec2 model)"),WIe.forEach(t),gVo=i(Y),Y2=n(Y,"LI",{});var QIe=s(Y2);Gue=n(QIe,"STRONG",{});var r0t=s(Gue);hVo=r(r0t,"xlm"),r0t.forEach(t),pVo=r(QIe," \u2014 "),gz=n(QIe,"A",{href:!0});var t0t=s(gz);_Vo=r(t0t,"XLMWithLMHeadModel"),t0t.forEach(t),uVo=r(QIe," (XLM model)"),QIe.forEach(t),bVo=i(Y),K2=n(Y,"LI",{});var UIe=s(K2);Oue=n(UIe,"STRONG",{});var a0t=s(Oue);vVo=r(a0t,"xlm-roberta"),a0t.forEach(t),FVo=r(UIe," \u2014 "),hz=n(UIe,"A",{href:!0});var n0t=s(hz);TVo=r(n0t,"XLMRobertaForMaskedLM"),n0t.forEach(t),MVo=r(UIe," (XLM-RoBERTa model)"),UIe.forEach(t),EVo=i(Y),Z2=n(Y,"LI",{});var HIe=s(Z2);Vue=n(HIe,"STRONG",{});var s0t=s(Vue);CVo=r(s0t,"xlm-roberta-xl"),s0t.forEach(t),wVo=r(HIe," \u2014 "),pz=n(HIe,"A",{href:!0});var l0t=s(pz);AVo=r(l0t,"XLMRobertaXLForMaskedLM"),l0t.forEach(t),LVo=r(HIe," (XLM-RoBERTa-XL model)"),HIe.forEach(t),yVo=i(Y),eb=n(Y,"LI",{});var JIe=s(eb);Xue=n(JIe,"STRONG",{});var i0t=s(Xue);xVo=r(i0t,"yoso"),i0t.forEach(t),$Vo=r(JIe," \u2014 "),_z=n(JIe,"A",{href:!0});var d0t=s(_z);kVo=r(d0t,"YosoForMaskedLM"),d0t.forEach(t),SVo=r(JIe," (YOSO model)"),JIe.forEach(t),Y.forEach(t),RVo=i(_a),ob=n(_a,"P",{});var YIe=s(ob);PVo=r(YIe,"The model is set in evaluation mode by default using "),zue=n(YIe,"CODE",{});var c0t=s(zue);BVo=r(c0t,"model.eval()"),c0t.forEach(t),IVo=r(YIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(YIe,"CODE",{});var f0t=s(Wue);NVo=r(f0t,"model.train()"),f0t.forEach(t),YIe.forEach(t),qVo=i(_a),T(rb.$$.fragment,_a),_a.forEach(t),ul.forEach(t),EUe=i(f),hd=n(f,"H2",{class:!0});var RJe=s(hd);tb=n(RJe,"A",{id:!0,class:!0,href:!0});var m0t=s(tb);Que=n(m0t,"SPAN",{});var g0t=s(Que);T(d9.$$.fragment,g0t),g0t.forEach(t),m0t.forEach(t),jVo=i(RJe),Uue=n(RJe,"SPAN",{});var h0t=s(Uue);DVo=r(h0t,"AutoModelForSeq2SeqLM"),h0t.forEach(t),RJe.forEach(t),CUe=i(f),Io=n(f,"DIV",{class:!0});var bl=s(Io);T(c9.$$.fragment,bl),GVo=i(bl),pd=n(bl,"P",{});var rne=s(pd);OVo=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uz=n(rne,"A",{href:!0});var p0t=s(uz);VVo=r(p0t,"from_pretrained()"),p0t.forEach(t),XVo=r(rne," class method or the "),bz=n(rne,"A",{href:!0});var _0t=s(bz);zVo=r(_0t,"from_config()"),_0t.forEach(t),WVo=r(rne,` class
method.`),rne.forEach(t),QVo=i(bl),f9=n(bl,"P",{});var PJe=s(f9);UVo=r(PJe,"This class cannot be instantiated directly using "),Hue=n(PJe,"CODE",{});var u0t=s(Hue);HVo=r(u0t,"__init__()"),u0t.forEach(t),JVo=r(PJe," (throws an error)."),PJe.forEach(t),YVo=i(bl),_t=n(bl,"DIV",{class:!0});var CA=s(_t);T(m9.$$.fragment,CA),KVo=i(CA),Jue=n(CA,"P",{});var b0t=s(Jue);ZVo=r(b0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b0t.forEach(t),eXo=i(CA),_d=n(CA,"P",{});var tne=s(_d);oXo=r(tne,`Note:
Loading a model from its configuration file does `),Yue=n(tne,"STRONG",{});var v0t=s(Yue);rXo=r(v0t,"not"),v0t.forEach(t),tXo=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(tne,"A",{href:!0});var F0t=s(vz);aXo=r(F0t,"from_pretrained()"),F0t.forEach(t),nXo=r(tne," to load the model weights."),tne.forEach(t),sXo=i(CA),T(ab.$$.fragment,CA),CA.forEach(t),lXo=i(bl),oo=n(bl,"DIV",{class:!0});var ua=s(oo);T(g9.$$.fragment,ua),iXo=i(ua),Kue=n(ua,"P",{});var T0t=s(Kue);dXo=r(T0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T0t.forEach(t),cXo=i(ua),Qa=n(ua,"P",{});var wA=s(Qa);fXo=r(wA,"The model class to instantiate is selected based on the "),Zue=n(wA,"CODE",{});var M0t=s(Zue);mXo=r(M0t,"model_type"),M0t.forEach(t),gXo=r(wA,` property of the config object (either
passed as an argument or loaded from `),e1e=n(wA,"CODE",{});var E0t=s(e1e);hXo=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),pXo=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(wA,"CODE",{});var C0t=s(o1e);_Xo=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),uXo=r(wA,":"),wA.forEach(t),bXo=i(ua),he=n(ua,"UL",{});var ue=s(he);nb=n(ue,"LI",{});var KIe=s(nb);r1e=n(KIe,"STRONG",{});var w0t=s(r1e);vXo=r(w0t,"bart"),w0t.forEach(t),FXo=r(KIe," \u2014 "),Fz=n(KIe,"A",{href:!0});var A0t=s(Fz);TXo=r(A0t,"BartForConditionalGeneration"),A0t.forEach(t),MXo=r(KIe," (BART model)"),KIe.forEach(t),EXo=i(ue),sb=n(ue,"LI",{});var ZIe=s(sb);t1e=n(ZIe,"STRONG",{});var L0t=s(t1e);CXo=r(L0t,"bigbird_pegasus"),L0t.forEach(t),wXo=r(ZIe," \u2014 "),Tz=n(ZIe,"A",{href:!0});var y0t=s(Tz);AXo=r(y0t,"BigBirdPegasusForConditionalGeneration"),y0t.forEach(t),LXo=r(ZIe," (BigBird-Pegasus model)"),ZIe.forEach(t),yXo=i(ue),lb=n(ue,"LI",{});var eNe=s(lb);a1e=n(eNe,"STRONG",{});var x0t=s(a1e);xXo=r(x0t,"blenderbot"),x0t.forEach(t),$Xo=r(eNe," \u2014 "),Mz=n(eNe,"A",{href:!0});var $0t=s(Mz);kXo=r($0t,"BlenderbotForConditionalGeneration"),$0t.forEach(t),SXo=r(eNe," (Blenderbot model)"),eNe.forEach(t),RXo=i(ue),ib=n(ue,"LI",{});var oNe=s(ib);n1e=n(oNe,"STRONG",{});var k0t=s(n1e);PXo=r(k0t,"blenderbot-small"),k0t.forEach(t),BXo=r(oNe," \u2014 "),Ez=n(oNe,"A",{href:!0});var S0t=s(Ez);IXo=r(S0t,"BlenderbotSmallForConditionalGeneration"),S0t.forEach(t),NXo=r(oNe," (BlenderbotSmall model)"),oNe.forEach(t),qXo=i(ue),db=n(ue,"LI",{});var rNe=s(db);s1e=n(rNe,"STRONG",{});var R0t=s(s1e);jXo=r(R0t,"encoder-decoder"),R0t.forEach(t),DXo=r(rNe," \u2014 "),Cz=n(rNe,"A",{href:!0});var P0t=s(Cz);GXo=r(P0t,"EncoderDecoderModel"),P0t.forEach(t),OXo=r(rNe," (Encoder decoder model)"),rNe.forEach(t),VXo=i(ue),cb=n(ue,"LI",{});var tNe=s(cb);l1e=n(tNe,"STRONG",{});var B0t=s(l1e);XXo=r(B0t,"fsmt"),B0t.forEach(t),zXo=r(tNe," \u2014 "),wz=n(tNe,"A",{href:!0});var I0t=s(wz);WXo=r(I0t,"FSMTForConditionalGeneration"),I0t.forEach(t),QXo=r(tNe," (FairSeq Machine-Translation model)"),tNe.forEach(t),UXo=i(ue),fb=n(ue,"LI",{});var aNe=s(fb);i1e=n(aNe,"STRONG",{});var N0t=s(i1e);HXo=r(N0t,"led"),N0t.forEach(t),JXo=r(aNe," \u2014 "),Az=n(aNe,"A",{href:!0});var q0t=s(Az);YXo=r(q0t,"LEDForConditionalGeneration"),q0t.forEach(t),KXo=r(aNe," (LED model)"),aNe.forEach(t),ZXo=i(ue),mb=n(ue,"LI",{});var nNe=s(mb);d1e=n(nNe,"STRONG",{});var j0t=s(d1e);ezo=r(j0t,"longt5"),j0t.forEach(t),ozo=r(nNe," \u2014 "),Lz=n(nNe,"A",{href:!0});var D0t=s(Lz);rzo=r(D0t,"LongT5ForConditionalGeneration"),D0t.forEach(t),tzo=r(nNe," (LongT5 model)"),nNe.forEach(t),azo=i(ue),gb=n(ue,"LI",{});var sNe=s(gb);c1e=n(sNe,"STRONG",{});var G0t=s(c1e);nzo=r(G0t,"m2m_100"),G0t.forEach(t),szo=r(sNe," \u2014 "),yz=n(sNe,"A",{href:!0});var O0t=s(yz);lzo=r(O0t,"M2M100ForConditionalGeneration"),O0t.forEach(t),izo=r(sNe," (M2M100 model)"),sNe.forEach(t),dzo=i(ue),hb=n(ue,"LI",{});var lNe=s(hb);f1e=n(lNe,"STRONG",{});var V0t=s(f1e);czo=r(V0t,"marian"),V0t.forEach(t),fzo=r(lNe," \u2014 "),xz=n(lNe,"A",{href:!0});var X0t=s(xz);mzo=r(X0t,"MarianMTModel"),X0t.forEach(t),gzo=r(lNe," (Marian model)"),lNe.forEach(t),hzo=i(ue),pb=n(ue,"LI",{});var iNe=s(pb);m1e=n(iNe,"STRONG",{});var z0t=s(m1e);pzo=r(z0t,"mbart"),z0t.forEach(t),_zo=r(iNe," \u2014 "),$z=n(iNe,"A",{href:!0});var W0t=s($z);uzo=r(W0t,"MBartForConditionalGeneration"),W0t.forEach(t),bzo=r(iNe," (mBART model)"),iNe.forEach(t),vzo=i(ue),_b=n(ue,"LI",{});var dNe=s(_b);g1e=n(dNe,"STRONG",{});var Q0t=s(g1e);Fzo=r(Q0t,"mt5"),Q0t.forEach(t),Tzo=r(dNe," \u2014 "),kz=n(dNe,"A",{href:!0});var U0t=s(kz);Mzo=r(U0t,"MT5ForConditionalGeneration"),U0t.forEach(t),Ezo=r(dNe," (MT5 model)"),dNe.forEach(t),Czo=i(ue),ub=n(ue,"LI",{});var cNe=s(ub);h1e=n(cNe,"STRONG",{});var H0t=s(h1e);wzo=r(H0t,"mvp"),H0t.forEach(t),Azo=r(cNe," \u2014 "),Sz=n(cNe,"A",{href:!0});var J0t=s(Sz);Lzo=r(J0t,"MvpForConditionalGeneration"),J0t.forEach(t),yzo=r(cNe," (MVP model)"),cNe.forEach(t),xzo=i(ue),bb=n(ue,"LI",{});var fNe=s(bb);p1e=n(fNe,"STRONG",{});var Y0t=s(p1e);$zo=r(Y0t,"nllb"),Y0t.forEach(t),kzo=r(fNe," \u2014 "),Rz=n(fNe,"A",{href:!0});var K0t=s(Rz);Szo=r(K0t,"M2M100ForConditionalGeneration"),K0t.forEach(t),Rzo=r(fNe," (NLLB model)"),fNe.forEach(t),Pzo=i(ue),vb=n(ue,"LI",{});var mNe=s(vb);_1e=n(mNe,"STRONG",{});var Z0t=s(_1e);Bzo=r(Z0t,"pegasus"),Z0t.forEach(t),Izo=r(mNe," \u2014 "),Pz=n(mNe,"A",{href:!0});var ewt=s(Pz);Nzo=r(ewt,"PegasusForConditionalGeneration"),ewt.forEach(t),qzo=r(mNe," (Pegasus model)"),mNe.forEach(t),jzo=i(ue),Fb=n(ue,"LI",{});var gNe=s(Fb);u1e=n(gNe,"STRONG",{});var owt=s(u1e);Dzo=r(owt,"plbart"),owt.forEach(t),Gzo=r(gNe," \u2014 "),Bz=n(gNe,"A",{href:!0});var rwt=s(Bz);Ozo=r(rwt,"PLBartForConditionalGeneration"),rwt.forEach(t),Vzo=r(gNe," (PLBart model)"),gNe.forEach(t),Xzo=i(ue),Tb=n(ue,"LI",{});var hNe=s(Tb);b1e=n(hNe,"STRONG",{});var twt=s(b1e);zzo=r(twt,"prophetnet"),twt.forEach(t),Wzo=r(hNe," \u2014 "),Iz=n(hNe,"A",{href:!0});var awt=s(Iz);Qzo=r(awt,"ProphetNetForConditionalGeneration"),awt.forEach(t),Uzo=r(hNe," (ProphetNet model)"),hNe.forEach(t),Hzo=i(ue),Mb=n(ue,"LI",{});var pNe=s(Mb);v1e=n(pNe,"STRONG",{});var nwt=s(v1e);Jzo=r(nwt,"t5"),nwt.forEach(t),Yzo=r(pNe," \u2014 "),Nz=n(pNe,"A",{href:!0});var swt=s(Nz);Kzo=r(swt,"T5ForConditionalGeneration"),swt.forEach(t),Zzo=r(pNe," (T5 model)"),pNe.forEach(t),eWo=i(ue),Eb=n(ue,"LI",{});var _Ne=s(Eb);F1e=n(_Ne,"STRONG",{});var lwt=s(F1e);oWo=r(lwt,"xlm-prophetnet"),lwt.forEach(t),rWo=r(_Ne," \u2014 "),qz=n(_Ne,"A",{href:!0});var iwt=s(qz);tWo=r(iwt,"XLMProphetNetForConditionalGeneration"),iwt.forEach(t),aWo=r(_Ne," (XLM-ProphetNet model)"),_Ne.forEach(t),ue.forEach(t),nWo=i(ua),Cb=n(ua,"P",{});var uNe=s(Cb);sWo=r(uNe,"The model is set in evaluation mode by default using "),T1e=n(uNe,"CODE",{});var dwt=s(T1e);lWo=r(dwt,"model.eval()"),dwt.forEach(t),iWo=r(uNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=n(uNe,"CODE",{});var cwt=s(M1e);dWo=r(cwt,"model.train()"),cwt.forEach(t),uNe.forEach(t),cWo=i(ua),T(wb.$$.fragment,ua),ua.forEach(t),bl.forEach(t),wUe=i(f),ud=n(f,"H2",{class:!0});var BJe=s(ud);Ab=n(BJe,"A",{id:!0,class:!0,href:!0});var fwt=s(Ab);E1e=n(fwt,"SPAN",{});var mwt=s(E1e);T(h9.$$.fragment,mwt),mwt.forEach(t),fwt.forEach(t),fWo=i(BJe),C1e=n(BJe,"SPAN",{});var gwt=s(C1e);mWo=r(gwt,"AutoModelForSequenceClassification"),gwt.forEach(t),BJe.forEach(t),AUe=i(f),No=n(f,"DIV",{class:!0});var vl=s(No);T(p9.$$.fragment,vl),gWo=i(vl),bd=n(vl,"P",{});var ane=s(bd);hWo=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jz=n(ane,"A",{href:!0});var hwt=s(jz);pWo=r(hwt,"from_pretrained()"),hwt.forEach(t),_Wo=r(ane," class method or the "),Dz=n(ane,"A",{href:!0});var pwt=s(Dz);uWo=r(pwt,"from_config()"),pwt.forEach(t),bWo=r(ane,` class
method.`),ane.forEach(t),vWo=i(vl),_9=n(vl,"P",{});var IJe=s(_9);FWo=r(IJe,"This class cannot be instantiated directly using "),w1e=n(IJe,"CODE",{});var _wt=s(w1e);TWo=r(_wt,"__init__()"),_wt.forEach(t),MWo=r(IJe," (throws an error)."),IJe.forEach(t),EWo=i(vl),ut=n(vl,"DIV",{class:!0});var AA=s(ut);T(u9.$$.fragment,AA),CWo=i(AA),A1e=n(AA,"P",{});var uwt=s(A1e);wWo=r(uwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uwt.forEach(t),AWo=i(AA),vd=n(AA,"P",{});var nne=s(vd);LWo=r(nne,`Note:
Loading a model from its configuration file does `),L1e=n(nne,"STRONG",{});var bwt=s(L1e);yWo=r(bwt,"not"),bwt.forEach(t),xWo=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(nne,"A",{href:!0});var vwt=s(Gz);$Wo=r(vwt,"from_pretrained()"),vwt.forEach(t),kWo=r(nne," to load the model weights."),nne.forEach(t),SWo=i(AA),T(Lb.$$.fragment,AA),AA.forEach(t),RWo=i(vl),ro=n(vl,"DIV",{class:!0});var ba=s(ro);T(b9.$$.fragment,ba),PWo=i(ba),y1e=n(ba,"P",{});var Fwt=s(y1e);BWo=r(Fwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fwt.forEach(t),IWo=i(ba),Ua=n(ba,"P",{});var LA=s(Ua);NWo=r(LA,"The model class to instantiate is selected based on the "),x1e=n(LA,"CODE",{});var Twt=s(x1e);qWo=r(Twt,"model_type"),Twt.forEach(t),jWo=r(LA,` property of the config object (either
passed as an argument or loaded from `),$1e=n(LA,"CODE",{});var Mwt=s($1e);DWo=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),GWo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=n(LA,"CODE",{});var Ewt=s(k1e);OWo=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),VWo=r(LA,":"),LA.forEach(t),XWo=i(ba),N=n(ba,"UL",{});var j=s(N);yb=n(j,"LI",{});var bNe=s(yb);S1e=n(bNe,"STRONG",{});var Cwt=s(S1e);zWo=r(Cwt,"albert"),Cwt.forEach(t),WWo=r(bNe," \u2014 "),Oz=n(bNe,"A",{href:!0});var wwt=s(Oz);QWo=r(wwt,"AlbertForSequenceClassification"),wwt.forEach(t),UWo=r(bNe," (ALBERT model)"),bNe.forEach(t),HWo=i(j),xb=n(j,"LI",{});var vNe=s(xb);R1e=n(vNe,"STRONG",{});var Awt=s(R1e);JWo=r(Awt,"bart"),Awt.forEach(t),YWo=r(vNe," \u2014 "),Vz=n(vNe,"A",{href:!0});var Lwt=s(Vz);KWo=r(Lwt,"BartForSequenceClassification"),Lwt.forEach(t),ZWo=r(vNe," (BART model)"),vNe.forEach(t),eQo=i(j),$b=n(j,"LI",{});var FNe=s($b);P1e=n(FNe,"STRONG",{});var ywt=s(P1e);oQo=r(ywt,"bert"),ywt.forEach(t),rQo=r(FNe," \u2014 "),Xz=n(FNe,"A",{href:!0});var xwt=s(Xz);tQo=r(xwt,"BertForSequenceClassification"),xwt.forEach(t),aQo=r(FNe," (BERT model)"),FNe.forEach(t),nQo=i(j),kb=n(j,"LI",{});var TNe=s(kb);B1e=n(TNe,"STRONG",{});var $wt=s(B1e);sQo=r($wt,"big_bird"),$wt.forEach(t),lQo=r(TNe," \u2014 "),zz=n(TNe,"A",{href:!0});var kwt=s(zz);iQo=r(kwt,"BigBirdForSequenceClassification"),kwt.forEach(t),dQo=r(TNe," (BigBird model)"),TNe.forEach(t),cQo=i(j),Sb=n(j,"LI",{});var MNe=s(Sb);I1e=n(MNe,"STRONG",{});var Swt=s(I1e);fQo=r(Swt,"bigbird_pegasus"),Swt.forEach(t),mQo=r(MNe," \u2014 "),Wz=n(MNe,"A",{href:!0});var Rwt=s(Wz);gQo=r(Rwt,"BigBirdPegasusForSequenceClassification"),Rwt.forEach(t),hQo=r(MNe," (BigBird-Pegasus model)"),MNe.forEach(t),pQo=i(j),Rb=n(j,"LI",{});var ENe=s(Rb);N1e=n(ENe,"STRONG",{});var Pwt=s(N1e);_Qo=r(Pwt,"bloom"),Pwt.forEach(t),uQo=r(ENe," \u2014 "),Qz=n(ENe,"A",{href:!0});var Bwt=s(Qz);bQo=r(Bwt,"BloomForSequenceClassification"),Bwt.forEach(t),vQo=r(ENe," (BLOOM model)"),ENe.forEach(t),FQo=i(j),Pb=n(j,"LI",{});var CNe=s(Pb);q1e=n(CNe,"STRONG",{});var Iwt=s(q1e);TQo=r(Iwt,"camembert"),Iwt.forEach(t),MQo=r(CNe," \u2014 "),Uz=n(CNe,"A",{href:!0});var Nwt=s(Uz);EQo=r(Nwt,"CamembertForSequenceClassification"),Nwt.forEach(t),CQo=r(CNe," (CamemBERT model)"),CNe.forEach(t),wQo=i(j),Bb=n(j,"LI",{});var wNe=s(Bb);j1e=n(wNe,"STRONG",{});var qwt=s(j1e);AQo=r(qwt,"canine"),qwt.forEach(t),LQo=r(wNe," \u2014 "),Hz=n(wNe,"A",{href:!0});var jwt=s(Hz);yQo=r(jwt,"CanineForSequenceClassification"),jwt.forEach(t),xQo=r(wNe," (CANINE model)"),wNe.forEach(t),$Qo=i(j),Ib=n(j,"LI",{});var ANe=s(Ib);D1e=n(ANe,"STRONG",{});var Dwt=s(D1e);kQo=r(Dwt,"convbert"),Dwt.forEach(t),SQo=r(ANe," \u2014 "),Jz=n(ANe,"A",{href:!0});var Gwt=s(Jz);RQo=r(Gwt,"ConvBertForSequenceClassification"),Gwt.forEach(t),PQo=r(ANe," (ConvBERT model)"),ANe.forEach(t),BQo=i(j),Nb=n(j,"LI",{});var LNe=s(Nb);G1e=n(LNe,"STRONG",{});var Owt=s(G1e);IQo=r(Owt,"ctrl"),Owt.forEach(t),NQo=r(LNe," \u2014 "),Yz=n(LNe,"A",{href:!0});var Vwt=s(Yz);qQo=r(Vwt,"CTRLForSequenceClassification"),Vwt.forEach(t),jQo=r(LNe," (CTRL model)"),LNe.forEach(t),DQo=i(j),qb=n(j,"LI",{});var yNe=s(qb);O1e=n(yNe,"STRONG",{});var Xwt=s(O1e);GQo=r(Xwt,"data2vec-text"),Xwt.forEach(t),OQo=r(yNe," \u2014 "),Kz=n(yNe,"A",{href:!0});var zwt=s(Kz);VQo=r(zwt,"Data2VecTextForSequenceClassification"),zwt.forEach(t),XQo=r(yNe," (Data2VecText model)"),yNe.forEach(t),zQo=i(j),jb=n(j,"LI",{});var xNe=s(jb);V1e=n(xNe,"STRONG",{});var Wwt=s(V1e);WQo=r(Wwt,"deberta"),Wwt.forEach(t),QQo=r(xNe," \u2014 "),Zz=n(xNe,"A",{href:!0});var Qwt=s(Zz);UQo=r(Qwt,"DebertaForSequenceClassification"),Qwt.forEach(t),HQo=r(xNe," (DeBERTa model)"),xNe.forEach(t),JQo=i(j),Db=n(j,"LI",{});var $Ne=s(Db);X1e=n($Ne,"STRONG",{});var Uwt=s(X1e);YQo=r(Uwt,"deberta-v2"),Uwt.forEach(t),KQo=r($Ne," \u2014 "),eW=n($Ne,"A",{href:!0});var Hwt=s(eW);ZQo=r(Hwt,"DebertaV2ForSequenceClassification"),Hwt.forEach(t),eUo=r($Ne," (DeBERTa-v2 model)"),$Ne.forEach(t),oUo=i(j),Gb=n(j,"LI",{});var kNe=s(Gb);z1e=n(kNe,"STRONG",{});var Jwt=s(z1e);rUo=r(Jwt,"distilbert"),Jwt.forEach(t),tUo=r(kNe," \u2014 "),oW=n(kNe,"A",{href:!0});var Ywt=s(oW);aUo=r(Ywt,"DistilBertForSequenceClassification"),Ywt.forEach(t),nUo=r(kNe," (DistilBERT model)"),kNe.forEach(t),sUo=i(j),Ob=n(j,"LI",{});var SNe=s(Ob);W1e=n(SNe,"STRONG",{});var Kwt=s(W1e);lUo=r(Kwt,"electra"),Kwt.forEach(t),iUo=r(SNe," \u2014 "),rW=n(SNe,"A",{href:!0});var Zwt=s(rW);dUo=r(Zwt,"ElectraForSequenceClassification"),Zwt.forEach(t),cUo=r(SNe," (ELECTRA model)"),SNe.forEach(t),fUo=i(j),Vb=n(j,"LI",{});var RNe=s(Vb);Q1e=n(RNe,"STRONG",{});var eAt=s(Q1e);mUo=r(eAt,"flaubert"),eAt.forEach(t),gUo=r(RNe," \u2014 "),tW=n(RNe,"A",{href:!0});var oAt=s(tW);hUo=r(oAt,"FlaubertForSequenceClassification"),oAt.forEach(t),pUo=r(RNe," (FlauBERT model)"),RNe.forEach(t),_Uo=i(j),Xb=n(j,"LI",{});var PNe=s(Xb);U1e=n(PNe,"STRONG",{});var rAt=s(U1e);uUo=r(rAt,"fnet"),rAt.forEach(t),bUo=r(PNe," \u2014 "),aW=n(PNe,"A",{href:!0});var tAt=s(aW);vUo=r(tAt,"FNetForSequenceClassification"),tAt.forEach(t),FUo=r(PNe," (FNet model)"),PNe.forEach(t),TUo=i(j),zb=n(j,"LI",{});var BNe=s(zb);H1e=n(BNe,"STRONG",{});var aAt=s(H1e);MUo=r(aAt,"funnel"),aAt.forEach(t),EUo=r(BNe," \u2014 "),nW=n(BNe,"A",{href:!0});var nAt=s(nW);CUo=r(nAt,"FunnelForSequenceClassification"),nAt.forEach(t),wUo=r(BNe," (Funnel Transformer model)"),BNe.forEach(t),AUo=i(j),Wb=n(j,"LI",{});var INe=s(Wb);J1e=n(INe,"STRONG",{});var sAt=s(J1e);LUo=r(sAt,"gpt2"),sAt.forEach(t),yUo=r(INe," \u2014 "),sW=n(INe,"A",{href:!0});var lAt=s(sW);xUo=r(lAt,"GPT2ForSequenceClassification"),lAt.forEach(t),$Uo=r(INe," (OpenAI GPT-2 model)"),INe.forEach(t),kUo=i(j),Qb=n(j,"LI",{});var NNe=s(Qb);Y1e=n(NNe,"STRONG",{});var iAt=s(Y1e);SUo=r(iAt,"gpt_neo"),iAt.forEach(t),RUo=r(NNe," \u2014 "),lW=n(NNe,"A",{href:!0});var dAt=s(lW);PUo=r(dAt,"GPTNeoForSequenceClassification"),dAt.forEach(t),BUo=r(NNe," (GPT Neo model)"),NNe.forEach(t),IUo=i(j),Ub=n(j,"LI",{});var qNe=s(Ub);K1e=n(qNe,"STRONG",{});var cAt=s(K1e);NUo=r(cAt,"gptj"),cAt.forEach(t),qUo=r(qNe," \u2014 "),iW=n(qNe,"A",{href:!0});var fAt=s(iW);jUo=r(fAt,"GPTJForSequenceClassification"),fAt.forEach(t),DUo=r(qNe," (GPT-J model)"),qNe.forEach(t),GUo=i(j),Hb=n(j,"LI",{});var jNe=s(Hb);Z1e=n(jNe,"STRONG",{});var mAt=s(Z1e);OUo=r(mAt,"ibert"),mAt.forEach(t),VUo=r(jNe," \u2014 "),dW=n(jNe,"A",{href:!0});var gAt=s(dW);XUo=r(gAt,"IBertForSequenceClassification"),gAt.forEach(t),zUo=r(jNe," (I-BERT model)"),jNe.forEach(t),WUo=i(j),Jb=n(j,"LI",{});var DNe=s(Jb);e8e=n(DNe,"STRONG",{});var hAt=s(e8e);QUo=r(hAt,"layoutlm"),hAt.forEach(t),UUo=r(DNe," \u2014 "),cW=n(DNe,"A",{href:!0});var pAt=s(cW);HUo=r(pAt,"LayoutLMForSequenceClassification"),pAt.forEach(t),JUo=r(DNe," (LayoutLM model)"),DNe.forEach(t),YUo=i(j),Yb=n(j,"LI",{});var GNe=s(Yb);o8e=n(GNe,"STRONG",{});var _At=s(o8e);KUo=r(_At,"layoutlmv2"),_At.forEach(t),ZUo=r(GNe," \u2014 "),fW=n(GNe,"A",{href:!0});var uAt=s(fW);eHo=r(uAt,"LayoutLMv2ForSequenceClassification"),uAt.forEach(t),oHo=r(GNe," (LayoutLMv2 model)"),GNe.forEach(t),rHo=i(j),Kb=n(j,"LI",{});var ONe=s(Kb);r8e=n(ONe,"STRONG",{});var bAt=s(r8e);tHo=r(bAt,"layoutlmv3"),bAt.forEach(t),aHo=r(ONe," \u2014 "),mW=n(ONe,"A",{href:!0});var vAt=s(mW);nHo=r(vAt,"LayoutLMv3ForSequenceClassification"),vAt.forEach(t),sHo=r(ONe," (LayoutLMv3 model)"),ONe.forEach(t),lHo=i(j),Zb=n(j,"LI",{});var VNe=s(Zb);t8e=n(VNe,"STRONG",{});var FAt=s(t8e);iHo=r(FAt,"led"),FAt.forEach(t),dHo=r(VNe," \u2014 "),gW=n(VNe,"A",{href:!0});var TAt=s(gW);cHo=r(TAt,"LEDForSequenceClassification"),TAt.forEach(t),fHo=r(VNe," (LED model)"),VNe.forEach(t),mHo=i(j),ev=n(j,"LI",{});var XNe=s(ev);a8e=n(XNe,"STRONG",{});var MAt=s(a8e);gHo=r(MAt,"longformer"),MAt.forEach(t),hHo=r(XNe," \u2014 "),hW=n(XNe,"A",{href:!0});var EAt=s(hW);pHo=r(EAt,"LongformerForSequenceClassification"),EAt.forEach(t),_Ho=r(XNe," (Longformer model)"),XNe.forEach(t),uHo=i(j),ov=n(j,"LI",{});var zNe=s(ov);n8e=n(zNe,"STRONG",{});var CAt=s(n8e);bHo=r(CAt,"luke"),CAt.forEach(t),vHo=r(zNe," \u2014 "),pW=n(zNe,"A",{href:!0});var wAt=s(pW);FHo=r(wAt,"LukeForSequenceClassification"),wAt.forEach(t),THo=r(zNe," (LUKE model)"),zNe.forEach(t),MHo=i(j),rv=n(j,"LI",{});var WNe=s(rv);s8e=n(WNe,"STRONG",{});var AAt=s(s8e);EHo=r(AAt,"mbart"),AAt.forEach(t),CHo=r(WNe," \u2014 "),_W=n(WNe,"A",{href:!0});var LAt=s(_W);wHo=r(LAt,"MBartForSequenceClassification"),LAt.forEach(t),AHo=r(WNe," (mBART model)"),WNe.forEach(t),LHo=i(j),tv=n(j,"LI",{});var QNe=s(tv);l8e=n(QNe,"STRONG",{});var yAt=s(l8e);yHo=r(yAt,"megatron-bert"),yAt.forEach(t),xHo=r(QNe," \u2014 "),uW=n(QNe,"A",{href:!0});var xAt=s(uW);$Ho=r(xAt,"MegatronBertForSequenceClassification"),xAt.forEach(t),kHo=r(QNe," (Megatron-BERT model)"),QNe.forEach(t),SHo=i(j),av=n(j,"LI",{});var UNe=s(av);i8e=n(UNe,"STRONG",{});var $At=s(i8e);RHo=r($At,"mobilebert"),$At.forEach(t),PHo=r(UNe," \u2014 "),bW=n(UNe,"A",{href:!0});var kAt=s(bW);BHo=r(kAt,"MobileBertForSequenceClassification"),kAt.forEach(t),IHo=r(UNe," (MobileBERT model)"),UNe.forEach(t),NHo=i(j),nv=n(j,"LI",{});var HNe=s(nv);d8e=n(HNe,"STRONG",{});var SAt=s(d8e);qHo=r(SAt,"mpnet"),SAt.forEach(t),jHo=r(HNe," \u2014 "),vW=n(HNe,"A",{href:!0});var RAt=s(vW);DHo=r(RAt,"MPNetForSequenceClassification"),RAt.forEach(t),GHo=r(HNe," (MPNet model)"),HNe.forEach(t),OHo=i(j),sv=n(j,"LI",{});var JNe=s(sv);c8e=n(JNe,"STRONG",{});var PAt=s(c8e);VHo=r(PAt,"mvp"),PAt.forEach(t),XHo=r(JNe," \u2014 "),FW=n(JNe,"A",{href:!0});var BAt=s(FW);zHo=r(BAt,"MvpForSequenceClassification"),BAt.forEach(t),WHo=r(JNe," (MVP model)"),JNe.forEach(t),QHo=i(j),lv=n(j,"LI",{});var YNe=s(lv);f8e=n(YNe,"STRONG",{});var IAt=s(f8e);UHo=r(IAt,"nezha"),IAt.forEach(t),HHo=r(YNe," \u2014 "),TW=n(YNe,"A",{href:!0});var NAt=s(TW);JHo=r(NAt,"NezhaForSequenceClassification"),NAt.forEach(t),YHo=r(YNe," (Nezha model)"),YNe.forEach(t),KHo=i(j),iv=n(j,"LI",{});var KNe=s(iv);m8e=n(KNe,"STRONG",{});var qAt=s(m8e);ZHo=r(qAt,"nystromformer"),qAt.forEach(t),eJo=r(KNe," \u2014 "),MW=n(KNe,"A",{href:!0});var jAt=s(MW);oJo=r(jAt,"NystromformerForSequenceClassification"),jAt.forEach(t),rJo=r(KNe," (Nystr\xF6mformer model)"),KNe.forEach(t),tJo=i(j),dv=n(j,"LI",{});var ZNe=s(dv);g8e=n(ZNe,"STRONG",{});var DAt=s(g8e);aJo=r(DAt,"openai-gpt"),DAt.forEach(t),nJo=r(ZNe," \u2014 "),EW=n(ZNe,"A",{href:!0});var GAt=s(EW);sJo=r(GAt,"OpenAIGPTForSequenceClassification"),GAt.forEach(t),lJo=r(ZNe," (OpenAI GPT model)"),ZNe.forEach(t),iJo=i(j),cv=n(j,"LI",{});var eqe=s(cv);h8e=n(eqe,"STRONG",{});var OAt=s(h8e);dJo=r(OAt,"opt"),OAt.forEach(t),cJo=r(eqe," \u2014 "),CW=n(eqe,"A",{href:!0});var VAt=s(CW);fJo=r(VAt,"OPTForSequenceClassification"),VAt.forEach(t),mJo=r(eqe," (OPT model)"),eqe.forEach(t),gJo=i(j),fv=n(j,"LI",{});var oqe=s(fv);p8e=n(oqe,"STRONG",{});var XAt=s(p8e);hJo=r(XAt,"perceiver"),XAt.forEach(t),pJo=r(oqe," \u2014 "),wW=n(oqe,"A",{href:!0});var zAt=s(wW);_Jo=r(zAt,"PerceiverForSequenceClassification"),zAt.forEach(t),uJo=r(oqe," (Perceiver model)"),oqe.forEach(t),bJo=i(j),mv=n(j,"LI",{});var rqe=s(mv);_8e=n(rqe,"STRONG",{});var WAt=s(_8e);vJo=r(WAt,"plbart"),WAt.forEach(t),FJo=r(rqe," \u2014 "),AW=n(rqe,"A",{href:!0});var QAt=s(AW);TJo=r(QAt,"PLBartForSequenceClassification"),QAt.forEach(t),MJo=r(rqe," (PLBart model)"),rqe.forEach(t),EJo=i(j),gv=n(j,"LI",{});var tqe=s(gv);u8e=n(tqe,"STRONG",{});var UAt=s(u8e);CJo=r(UAt,"qdqbert"),UAt.forEach(t),wJo=r(tqe," \u2014 "),LW=n(tqe,"A",{href:!0});var HAt=s(LW);AJo=r(HAt,"QDQBertForSequenceClassification"),HAt.forEach(t),LJo=r(tqe," (QDQBert model)"),tqe.forEach(t),yJo=i(j),hv=n(j,"LI",{});var aqe=s(hv);b8e=n(aqe,"STRONG",{});var JAt=s(b8e);xJo=r(JAt,"reformer"),JAt.forEach(t),$Jo=r(aqe," \u2014 "),yW=n(aqe,"A",{href:!0});var YAt=s(yW);kJo=r(YAt,"ReformerForSequenceClassification"),YAt.forEach(t),SJo=r(aqe," (Reformer model)"),aqe.forEach(t),RJo=i(j),pv=n(j,"LI",{});var nqe=s(pv);v8e=n(nqe,"STRONG",{});var KAt=s(v8e);PJo=r(KAt,"rembert"),KAt.forEach(t),BJo=r(nqe," \u2014 "),xW=n(nqe,"A",{href:!0});var ZAt=s(xW);IJo=r(ZAt,"RemBertForSequenceClassification"),ZAt.forEach(t),NJo=r(nqe," (RemBERT model)"),nqe.forEach(t),qJo=i(j),_v=n(j,"LI",{});var sqe=s(_v);F8e=n(sqe,"STRONG",{});var eLt=s(F8e);jJo=r(eLt,"roberta"),eLt.forEach(t),DJo=r(sqe," \u2014 "),$W=n(sqe,"A",{href:!0});var oLt=s($W);GJo=r(oLt,"RobertaForSequenceClassification"),oLt.forEach(t),OJo=r(sqe," (RoBERTa model)"),sqe.forEach(t),VJo=i(j),uv=n(j,"LI",{});var lqe=s(uv);T8e=n(lqe,"STRONG",{});var rLt=s(T8e);XJo=r(rLt,"roformer"),rLt.forEach(t),zJo=r(lqe," \u2014 "),kW=n(lqe,"A",{href:!0});var tLt=s(kW);WJo=r(tLt,"RoFormerForSequenceClassification"),tLt.forEach(t),QJo=r(lqe," (RoFormer model)"),lqe.forEach(t),UJo=i(j),bv=n(j,"LI",{});var iqe=s(bv);M8e=n(iqe,"STRONG",{});var aLt=s(M8e);HJo=r(aLt,"squeezebert"),aLt.forEach(t),JJo=r(iqe," \u2014 "),SW=n(iqe,"A",{href:!0});var nLt=s(SW);YJo=r(nLt,"SqueezeBertForSequenceClassification"),nLt.forEach(t),KJo=r(iqe," (SqueezeBERT model)"),iqe.forEach(t),ZJo=i(j),vv=n(j,"LI",{});var dqe=s(vv);E8e=n(dqe,"STRONG",{});var sLt=s(E8e);eYo=r(sLt,"tapas"),sLt.forEach(t),oYo=r(dqe," \u2014 "),RW=n(dqe,"A",{href:!0});var lLt=s(RW);rYo=r(lLt,"TapasForSequenceClassification"),lLt.forEach(t),tYo=r(dqe," (TAPAS model)"),dqe.forEach(t),aYo=i(j),Fv=n(j,"LI",{});var cqe=s(Fv);C8e=n(cqe,"STRONG",{});var iLt=s(C8e);nYo=r(iLt,"transfo-xl"),iLt.forEach(t),sYo=r(cqe," \u2014 "),PW=n(cqe,"A",{href:!0});var dLt=s(PW);lYo=r(dLt,"TransfoXLForSequenceClassification"),dLt.forEach(t),iYo=r(cqe," (Transformer-XL model)"),cqe.forEach(t),dYo=i(j),Tv=n(j,"LI",{});var fqe=s(Tv);w8e=n(fqe,"STRONG",{});var cLt=s(w8e);cYo=r(cLt,"xlm"),cLt.forEach(t),fYo=r(fqe," \u2014 "),BW=n(fqe,"A",{href:!0});var fLt=s(BW);mYo=r(fLt,"XLMForSequenceClassification"),fLt.forEach(t),gYo=r(fqe," (XLM model)"),fqe.forEach(t),hYo=i(j),Mv=n(j,"LI",{});var mqe=s(Mv);A8e=n(mqe,"STRONG",{});var mLt=s(A8e);pYo=r(mLt,"xlm-roberta"),mLt.forEach(t),_Yo=r(mqe," \u2014 "),IW=n(mqe,"A",{href:!0});var gLt=s(IW);uYo=r(gLt,"XLMRobertaForSequenceClassification"),gLt.forEach(t),bYo=r(mqe," (XLM-RoBERTa model)"),mqe.forEach(t),vYo=i(j),Ev=n(j,"LI",{});var gqe=s(Ev);L8e=n(gqe,"STRONG",{});var hLt=s(L8e);FYo=r(hLt,"xlm-roberta-xl"),hLt.forEach(t),TYo=r(gqe," \u2014 "),NW=n(gqe,"A",{href:!0});var pLt=s(NW);MYo=r(pLt,"XLMRobertaXLForSequenceClassification"),pLt.forEach(t),EYo=r(gqe," (XLM-RoBERTa-XL model)"),gqe.forEach(t),CYo=i(j),Cv=n(j,"LI",{});var hqe=s(Cv);y8e=n(hqe,"STRONG",{});var _Lt=s(y8e);wYo=r(_Lt,"xlnet"),_Lt.forEach(t),AYo=r(hqe," \u2014 "),qW=n(hqe,"A",{href:!0});var uLt=s(qW);LYo=r(uLt,"XLNetForSequenceClassification"),uLt.forEach(t),yYo=r(hqe," (XLNet model)"),hqe.forEach(t),xYo=i(j),wv=n(j,"LI",{});var pqe=s(wv);x8e=n(pqe,"STRONG",{});var bLt=s(x8e);$Yo=r(bLt,"yoso"),bLt.forEach(t),kYo=r(pqe," \u2014 "),jW=n(pqe,"A",{href:!0});var vLt=s(jW);SYo=r(vLt,"YosoForSequenceClassification"),vLt.forEach(t),RYo=r(pqe," (YOSO model)"),pqe.forEach(t),j.forEach(t),PYo=i(ba),Av=n(ba,"P",{});var _qe=s(Av);BYo=r(_qe,"The model is set in evaluation mode by default using "),$8e=n(_qe,"CODE",{});var FLt=s($8e);IYo=r(FLt,"model.eval()"),FLt.forEach(t),NYo=r(_qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k8e=n(_qe,"CODE",{});var TLt=s(k8e);qYo=r(TLt,"model.train()"),TLt.forEach(t),_qe.forEach(t),jYo=i(ba),T(Lv.$$.fragment,ba),ba.forEach(t),vl.forEach(t),LUe=i(f),Fd=n(f,"H2",{class:!0});var NJe=s(Fd);yv=n(NJe,"A",{id:!0,class:!0,href:!0});var MLt=s(yv);S8e=n(MLt,"SPAN",{});var ELt=s(S8e);T(v9.$$.fragment,ELt),ELt.forEach(t),MLt.forEach(t),DYo=i(NJe),R8e=n(NJe,"SPAN",{});var CLt=s(R8e);GYo=r(CLt,"AutoModelForMultipleChoice"),CLt.forEach(t),NJe.forEach(t),yUe=i(f),qo=n(f,"DIV",{class:!0});var Fl=s(qo);T(F9.$$.fragment,Fl),OYo=i(Fl),Td=n(Fl,"P",{});var sne=s(Td);VYo=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DW=n(sne,"A",{href:!0});var wLt=s(DW);XYo=r(wLt,"from_pretrained()"),wLt.forEach(t),zYo=r(sne," class method or the "),GW=n(sne,"A",{href:!0});var ALt=s(GW);WYo=r(ALt,"from_config()"),ALt.forEach(t),QYo=r(sne,` class
method.`),sne.forEach(t),UYo=i(Fl),T9=n(Fl,"P",{});var qJe=s(T9);HYo=r(qJe,"This class cannot be instantiated directly using "),P8e=n(qJe,"CODE",{});var LLt=s(P8e);JYo=r(LLt,"__init__()"),LLt.forEach(t),YYo=r(qJe," (throws an error)."),qJe.forEach(t),KYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var yA=s(bt);T(M9.$$.fragment,yA),ZYo=i(yA),B8e=n(yA,"P",{});var yLt=s(B8e);eKo=r(yLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yLt.forEach(t),oKo=i(yA),Md=n(yA,"P",{});var lne=s(Md);rKo=r(lne,`Note:
Loading a model from its configuration file does `),I8e=n(lne,"STRONG",{});var xLt=s(I8e);tKo=r(xLt,"not"),xLt.forEach(t),aKo=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(lne,"A",{href:!0});var $Lt=s(OW);nKo=r($Lt,"from_pretrained()"),$Lt.forEach(t),sKo=r(lne," to load the model weights."),lne.forEach(t),lKo=i(yA),T(xv.$$.fragment,yA),yA.forEach(t),iKo=i(Fl),to=n(Fl,"DIV",{class:!0});var va=s(to);T(E9.$$.fragment,va),dKo=i(va),N8e=n(va,"P",{});var kLt=s(N8e);cKo=r(kLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kLt.forEach(t),fKo=i(va),Ha=n(va,"P",{});var xA=s(Ha);mKo=r(xA,"The model class to instantiate is selected based on the "),q8e=n(xA,"CODE",{});var SLt=s(q8e);gKo=r(SLt,"model_type"),SLt.forEach(t),hKo=r(xA,` property of the config object (either
passed as an argument or loaded from `),j8e=n(xA,"CODE",{});var RLt=s(j8e);pKo=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),_Ko=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D8e=n(xA,"CODE",{});var PLt=s(D8e);uKo=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),bKo=r(xA,":"),xA.forEach(t),vKo=i(va),Z=n(va,"UL",{});var ee=s(Z);$v=n(ee,"LI",{});var uqe=s($v);G8e=n(uqe,"STRONG",{});var BLt=s(G8e);FKo=r(BLt,"albert"),BLt.forEach(t),TKo=r(uqe," \u2014 "),VW=n(uqe,"A",{href:!0});var ILt=s(VW);MKo=r(ILt,"AlbertForMultipleChoice"),ILt.forEach(t),EKo=r(uqe," (ALBERT model)"),uqe.forEach(t),CKo=i(ee),kv=n(ee,"LI",{});var bqe=s(kv);O8e=n(bqe,"STRONG",{});var NLt=s(O8e);wKo=r(NLt,"bert"),NLt.forEach(t),AKo=r(bqe," \u2014 "),XW=n(bqe,"A",{href:!0});var qLt=s(XW);LKo=r(qLt,"BertForMultipleChoice"),qLt.forEach(t),yKo=r(bqe," (BERT model)"),bqe.forEach(t),xKo=i(ee),Sv=n(ee,"LI",{});var vqe=s(Sv);V8e=n(vqe,"STRONG",{});var jLt=s(V8e);$Ko=r(jLt,"big_bird"),jLt.forEach(t),kKo=r(vqe," \u2014 "),zW=n(vqe,"A",{href:!0});var DLt=s(zW);SKo=r(DLt,"BigBirdForMultipleChoice"),DLt.forEach(t),RKo=r(vqe," (BigBird model)"),vqe.forEach(t),PKo=i(ee),Rv=n(ee,"LI",{});var Fqe=s(Rv);X8e=n(Fqe,"STRONG",{});var GLt=s(X8e);BKo=r(GLt,"camembert"),GLt.forEach(t),IKo=r(Fqe," \u2014 "),WW=n(Fqe,"A",{href:!0});var OLt=s(WW);NKo=r(OLt,"CamembertForMultipleChoice"),OLt.forEach(t),qKo=r(Fqe," (CamemBERT model)"),Fqe.forEach(t),jKo=i(ee),Pv=n(ee,"LI",{});var Tqe=s(Pv);z8e=n(Tqe,"STRONG",{});var VLt=s(z8e);DKo=r(VLt,"canine"),VLt.forEach(t),GKo=r(Tqe," \u2014 "),QW=n(Tqe,"A",{href:!0});var XLt=s(QW);OKo=r(XLt,"CanineForMultipleChoice"),XLt.forEach(t),VKo=r(Tqe," (CANINE model)"),Tqe.forEach(t),XKo=i(ee),Bv=n(ee,"LI",{});var Mqe=s(Bv);W8e=n(Mqe,"STRONG",{});var zLt=s(W8e);zKo=r(zLt,"convbert"),zLt.forEach(t),WKo=r(Mqe," \u2014 "),UW=n(Mqe,"A",{href:!0});var WLt=s(UW);QKo=r(WLt,"ConvBertForMultipleChoice"),WLt.forEach(t),UKo=r(Mqe," (ConvBERT model)"),Mqe.forEach(t),HKo=i(ee),Iv=n(ee,"LI",{});var Eqe=s(Iv);Q8e=n(Eqe,"STRONG",{});var QLt=s(Q8e);JKo=r(QLt,"data2vec-text"),QLt.forEach(t),YKo=r(Eqe," \u2014 "),HW=n(Eqe,"A",{href:!0});var ULt=s(HW);KKo=r(ULt,"Data2VecTextForMultipleChoice"),ULt.forEach(t),ZKo=r(Eqe," (Data2VecText model)"),Eqe.forEach(t),eZo=i(ee),Nv=n(ee,"LI",{});var Cqe=s(Nv);U8e=n(Cqe,"STRONG",{});var HLt=s(U8e);oZo=r(HLt,"deberta-v2"),HLt.forEach(t),rZo=r(Cqe," \u2014 "),JW=n(Cqe,"A",{href:!0});var JLt=s(JW);tZo=r(JLt,"DebertaV2ForMultipleChoice"),JLt.forEach(t),aZo=r(Cqe," (DeBERTa-v2 model)"),Cqe.forEach(t),nZo=i(ee),qv=n(ee,"LI",{});var wqe=s(qv);H8e=n(wqe,"STRONG",{});var YLt=s(H8e);sZo=r(YLt,"distilbert"),YLt.forEach(t),lZo=r(wqe," \u2014 "),YW=n(wqe,"A",{href:!0});var KLt=s(YW);iZo=r(KLt,"DistilBertForMultipleChoice"),KLt.forEach(t),dZo=r(wqe," (DistilBERT model)"),wqe.forEach(t),cZo=i(ee),jv=n(ee,"LI",{});var Aqe=s(jv);J8e=n(Aqe,"STRONG",{});var ZLt=s(J8e);fZo=r(ZLt,"electra"),ZLt.forEach(t),mZo=r(Aqe," \u2014 "),KW=n(Aqe,"A",{href:!0});var eyt=s(KW);gZo=r(eyt,"ElectraForMultipleChoice"),eyt.forEach(t),hZo=r(Aqe," (ELECTRA model)"),Aqe.forEach(t),pZo=i(ee),Dv=n(ee,"LI",{});var Lqe=s(Dv);Y8e=n(Lqe,"STRONG",{});var oyt=s(Y8e);_Zo=r(oyt,"flaubert"),oyt.forEach(t),uZo=r(Lqe," \u2014 "),ZW=n(Lqe,"A",{href:!0});var ryt=s(ZW);bZo=r(ryt,"FlaubertForMultipleChoice"),ryt.forEach(t),vZo=r(Lqe," (FlauBERT model)"),Lqe.forEach(t),FZo=i(ee),Gv=n(ee,"LI",{});var yqe=s(Gv);K8e=n(yqe,"STRONG",{});var tyt=s(K8e);TZo=r(tyt,"fnet"),tyt.forEach(t),MZo=r(yqe," \u2014 "),eQ=n(yqe,"A",{href:!0});var ayt=s(eQ);EZo=r(ayt,"FNetForMultipleChoice"),ayt.forEach(t),CZo=r(yqe," (FNet model)"),yqe.forEach(t),wZo=i(ee),Ov=n(ee,"LI",{});var xqe=s(Ov);Z8e=n(xqe,"STRONG",{});var nyt=s(Z8e);AZo=r(nyt,"funnel"),nyt.forEach(t),LZo=r(xqe," \u2014 "),oQ=n(xqe,"A",{href:!0});var syt=s(oQ);yZo=r(syt,"FunnelForMultipleChoice"),syt.forEach(t),xZo=r(xqe," (Funnel Transformer model)"),xqe.forEach(t),$Zo=i(ee),Vv=n(ee,"LI",{});var $qe=s(Vv);e2e=n($qe,"STRONG",{});var lyt=s(e2e);kZo=r(lyt,"ibert"),lyt.forEach(t),SZo=r($qe," \u2014 "),rQ=n($qe,"A",{href:!0});var iyt=s(rQ);RZo=r(iyt,"IBertForMultipleChoice"),iyt.forEach(t),PZo=r($qe," (I-BERT model)"),$qe.forEach(t),BZo=i(ee),Xv=n(ee,"LI",{});var kqe=s(Xv);o2e=n(kqe,"STRONG",{});var dyt=s(o2e);IZo=r(dyt,"longformer"),dyt.forEach(t),NZo=r(kqe," \u2014 "),tQ=n(kqe,"A",{href:!0});var cyt=s(tQ);qZo=r(cyt,"LongformerForMultipleChoice"),cyt.forEach(t),jZo=r(kqe," (Longformer model)"),kqe.forEach(t),DZo=i(ee),zv=n(ee,"LI",{});var Sqe=s(zv);r2e=n(Sqe,"STRONG",{});var fyt=s(r2e);GZo=r(fyt,"luke"),fyt.forEach(t),OZo=r(Sqe," \u2014 "),aQ=n(Sqe,"A",{href:!0});var myt=s(aQ);VZo=r(myt,"LukeForMultipleChoice"),myt.forEach(t),XZo=r(Sqe," (LUKE model)"),Sqe.forEach(t),zZo=i(ee),Wv=n(ee,"LI",{});var Rqe=s(Wv);t2e=n(Rqe,"STRONG",{});var gyt=s(t2e);WZo=r(gyt,"megatron-bert"),gyt.forEach(t),QZo=r(Rqe," \u2014 "),nQ=n(Rqe,"A",{href:!0});var hyt=s(nQ);UZo=r(hyt,"MegatronBertForMultipleChoice"),hyt.forEach(t),HZo=r(Rqe," (Megatron-BERT model)"),Rqe.forEach(t),JZo=i(ee),Qv=n(ee,"LI",{});var Pqe=s(Qv);a2e=n(Pqe,"STRONG",{});var pyt=s(a2e);YZo=r(pyt,"mobilebert"),pyt.forEach(t),KZo=r(Pqe," \u2014 "),sQ=n(Pqe,"A",{href:!0});var _yt=s(sQ);ZZo=r(_yt,"MobileBertForMultipleChoice"),_yt.forEach(t),eer=r(Pqe," (MobileBERT model)"),Pqe.forEach(t),oer=i(ee),Uv=n(ee,"LI",{});var Bqe=s(Uv);n2e=n(Bqe,"STRONG",{});var uyt=s(n2e);rer=r(uyt,"mpnet"),uyt.forEach(t),ter=r(Bqe," \u2014 "),lQ=n(Bqe,"A",{href:!0});var byt=s(lQ);aer=r(byt,"MPNetForMultipleChoice"),byt.forEach(t),ner=r(Bqe," (MPNet model)"),Bqe.forEach(t),ser=i(ee),Hv=n(ee,"LI",{});var Iqe=s(Hv);s2e=n(Iqe,"STRONG",{});var vyt=s(s2e);ler=r(vyt,"nezha"),vyt.forEach(t),ier=r(Iqe," \u2014 "),iQ=n(Iqe,"A",{href:!0});var Fyt=s(iQ);der=r(Fyt,"NezhaForMultipleChoice"),Fyt.forEach(t),cer=r(Iqe," (Nezha model)"),Iqe.forEach(t),fer=i(ee),Jv=n(ee,"LI",{});var Nqe=s(Jv);l2e=n(Nqe,"STRONG",{});var Tyt=s(l2e);mer=r(Tyt,"nystromformer"),Tyt.forEach(t),ger=r(Nqe," \u2014 "),dQ=n(Nqe,"A",{href:!0});var Myt=s(dQ);her=r(Myt,"NystromformerForMultipleChoice"),Myt.forEach(t),per=r(Nqe," (Nystr\xF6mformer model)"),Nqe.forEach(t),_er=i(ee),Yv=n(ee,"LI",{});var qqe=s(Yv);i2e=n(qqe,"STRONG",{});var Eyt=s(i2e);uer=r(Eyt,"qdqbert"),Eyt.forEach(t),ber=r(qqe," \u2014 "),cQ=n(qqe,"A",{href:!0});var Cyt=s(cQ);ver=r(Cyt,"QDQBertForMultipleChoice"),Cyt.forEach(t),Fer=r(qqe," (QDQBert model)"),qqe.forEach(t),Ter=i(ee),Kv=n(ee,"LI",{});var jqe=s(Kv);d2e=n(jqe,"STRONG",{});var wyt=s(d2e);Mer=r(wyt,"rembert"),wyt.forEach(t),Eer=r(jqe," \u2014 "),fQ=n(jqe,"A",{href:!0});var Ayt=s(fQ);Cer=r(Ayt,"RemBertForMultipleChoice"),Ayt.forEach(t),wer=r(jqe," (RemBERT model)"),jqe.forEach(t),Aer=i(ee),Zv=n(ee,"LI",{});var Dqe=s(Zv);c2e=n(Dqe,"STRONG",{});var Lyt=s(c2e);Ler=r(Lyt,"roberta"),Lyt.forEach(t),yer=r(Dqe," \u2014 "),mQ=n(Dqe,"A",{href:!0});var yyt=s(mQ);xer=r(yyt,"RobertaForMultipleChoice"),yyt.forEach(t),$er=r(Dqe," (RoBERTa model)"),Dqe.forEach(t),ker=i(ee),eF=n(ee,"LI",{});var Gqe=s(eF);f2e=n(Gqe,"STRONG",{});var xyt=s(f2e);Ser=r(xyt,"roformer"),xyt.forEach(t),Rer=r(Gqe," \u2014 "),gQ=n(Gqe,"A",{href:!0});var $yt=s(gQ);Per=r($yt,"RoFormerForMultipleChoice"),$yt.forEach(t),Ber=r(Gqe," (RoFormer model)"),Gqe.forEach(t),Ier=i(ee),oF=n(ee,"LI",{});var Oqe=s(oF);m2e=n(Oqe,"STRONG",{});var kyt=s(m2e);Ner=r(kyt,"squeezebert"),kyt.forEach(t),qer=r(Oqe," \u2014 "),hQ=n(Oqe,"A",{href:!0});var Syt=s(hQ);jer=r(Syt,"SqueezeBertForMultipleChoice"),Syt.forEach(t),Der=r(Oqe," (SqueezeBERT model)"),Oqe.forEach(t),Ger=i(ee),rF=n(ee,"LI",{});var Vqe=s(rF);g2e=n(Vqe,"STRONG",{});var Ryt=s(g2e);Oer=r(Ryt,"xlm"),Ryt.forEach(t),Ver=r(Vqe," \u2014 "),pQ=n(Vqe,"A",{href:!0});var Pyt=s(pQ);Xer=r(Pyt,"XLMForMultipleChoice"),Pyt.forEach(t),zer=r(Vqe," (XLM model)"),Vqe.forEach(t),Wer=i(ee),tF=n(ee,"LI",{});var Xqe=s(tF);h2e=n(Xqe,"STRONG",{});var Byt=s(h2e);Qer=r(Byt,"xlm-roberta"),Byt.forEach(t),Uer=r(Xqe," \u2014 "),_Q=n(Xqe,"A",{href:!0});var Iyt=s(_Q);Her=r(Iyt,"XLMRobertaForMultipleChoice"),Iyt.forEach(t),Jer=r(Xqe," (XLM-RoBERTa model)"),Xqe.forEach(t),Yer=i(ee),aF=n(ee,"LI",{});var zqe=s(aF);p2e=n(zqe,"STRONG",{});var Nyt=s(p2e);Ker=r(Nyt,"xlm-roberta-xl"),Nyt.forEach(t),Zer=r(zqe," \u2014 "),uQ=n(zqe,"A",{href:!0});var qyt=s(uQ);eor=r(qyt,"XLMRobertaXLForMultipleChoice"),qyt.forEach(t),oor=r(zqe," (XLM-RoBERTa-XL model)"),zqe.forEach(t),ror=i(ee),nF=n(ee,"LI",{});var Wqe=s(nF);_2e=n(Wqe,"STRONG",{});var jyt=s(_2e);tor=r(jyt,"xlnet"),jyt.forEach(t),aor=r(Wqe," \u2014 "),bQ=n(Wqe,"A",{href:!0});var Dyt=s(bQ);nor=r(Dyt,"XLNetForMultipleChoice"),Dyt.forEach(t),sor=r(Wqe," (XLNet model)"),Wqe.forEach(t),lor=i(ee),sF=n(ee,"LI",{});var Qqe=s(sF);u2e=n(Qqe,"STRONG",{});var Gyt=s(u2e);ior=r(Gyt,"yoso"),Gyt.forEach(t),dor=r(Qqe," \u2014 "),vQ=n(Qqe,"A",{href:!0});var Oyt=s(vQ);cor=r(Oyt,"YosoForMultipleChoice"),Oyt.forEach(t),mor=r(Qqe," (YOSO model)"),Qqe.forEach(t),ee.forEach(t),gor=i(va),lF=n(va,"P",{});var Uqe=s(lF);hor=r(Uqe,"The model is set in evaluation mode by default using "),b2e=n(Uqe,"CODE",{});var Vyt=s(b2e);por=r(Vyt,"model.eval()"),Vyt.forEach(t),_or=r(Uqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=n(Uqe,"CODE",{});var Xyt=s(v2e);uor=r(Xyt,"model.train()"),Xyt.forEach(t),Uqe.forEach(t),bor=i(va),T(iF.$$.fragment,va),va.forEach(t),Fl.forEach(t),xUe=i(f),Ed=n(f,"H2",{class:!0});var jJe=s(Ed);dF=n(jJe,"A",{id:!0,class:!0,href:!0});var zyt=s(dF);F2e=n(zyt,"SPAN",{});var Wyt=s(F2e);T(C9.$$.fragment,Wyt),Wyt.forEach(t),zyt.forEach(t),vor=i(jJe),T2e=n(jJe,"SPAN",{});var Qyt=s(T2e);For=r(Qyt,"AutoModelForNextSentencePrediction"),Qyt.forEach(t),jJe.forEach(t),$Ue=i(f),jo=n(f,"DIV",{class:!0});var Tl=s(jo);T(w9.$$.fragment,Tl),Tor=i(Tl),Cd=n(Tl,"P",{});var ine=s(Cd);Mor=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FQ=n(ine,"A",{href:!0});var Uyt=s(FQ);Eor=r(Uyt,"from_pretrained()"),Uyt.forEach(t),Cor=r(ine," class method or the "),TQ=n(ine,"A",{href:!0});var Hyt=s(TQ);wor=r(Hyt,"from_config()"),Hyt.forEach(t),Aor=r(ine,` class
method.`),ine.forEach(t),Lor=i(Tl),A9=n(Tl,"P",{});var DJe=s(A9);yor=r(DJe,"This class cannot be instantiated directly using "),M2e=n(DJe,"CODE",{});var Jyt=s(M2e);xor=r(Jyt,"__init__()"),Jyt.forEach(t),$or=r(DJe," (throws an error)."),DJe.forEach(t),kor=i(Tl),vt=n(Tl,"DIV",{class:!0});var $A=s(vt);T(L9.$$.fragment,$A),Sor=i($A),E2e=n($A,"P",{});var Yyt=s(E2e);Ror=r(Yyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yyt.forEach(t),Por=i($A),wd=n($A,"P",{});var dne=s(wd);Bor=r(dne,`Note:
Loading a model from its configuration file does `),C2e=n(dne,"STRONG",{});var Kyt=s(C2e);Ior=r(Kyt,"not"),Kyt.forEach(t),Nor=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(dne,"A",{href:!0});var Zyt=s(MQ);qor=r(Zyt,"from_pretrained()"),Zyt.forEach(t),jor=r(dne," to load the model weights."),dne.forEach(t),Dor=i($A),T(cF.$$.fragment,$A),$A.forEach(t),Gor=i(Tl),ao=n(Tl,"DIV",{class:!0});var Fa=s(ao);T(y9.$$.fragment,Fa),Oor=i(Fa),w2e=n(Fa,"P",{});var e9t=s(w2e);Vor=r(e9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),e9t.forEach(t),Xor=i(Fa),Ja=n(Fa,"P",{});var kA=s(Ja);zor=r(kA,"The model class to instantiate is selected based on the "),A2e=n(kA,"CODE",{});var o9t=s(A2e);Wor=r(o9t,"model_type"),o9t.forEach(t),Qor=r(kA,` property of the config object (either
passed as an argument or loaded from `),L2e=n(kA,"CODE",{});var r9t=s(L2e);Uor=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),Hor=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(kA,"CODE",{});var t9t=s(y2e);Jor=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),Yor=r(kA,":"),kA.forEach(t),Kor=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);fF=n(Ta,"LI",{});var Hqe=s(fF);x2e=n(Hqe,"STRONG",{});var a9t=s(x2e);Zor=r(a9t,"bert"),a9t.forEach(t),err=r(Hqe," \u2014 "),EQ=n(Hqe,"A",{href:!0});var n9t=s(EQ);orr=r(n9t,"BertForNextSentencePrediction"),n9t.forEach(t),rrr=r(Hqe," (BERT model)"),Hqe.forEach(t),trr=i(Ta),mF=n(Ta,"LI",{});var Jqe=s(mF);$2e=n(Jqe,"STRONG",{});var s9t=s($2e);arr=r(s9t,"fnet"),s9t.forEach(t),nrr=r(Jqe," \u2014 "),CQ=n(Jqe,"A",{href:!0});var l9t=s(CQ);srr=r(l9t,"FNetForNextSentencePrediction"),l9t.forEach(t),lrr=r(Jqe," (FNet model)"),Jqe.forEach(t),irr=i(Ta),gF=n(Ta,"LI",{});var Yqe=s(gF);k2e=n(Yqe,"STRONG",{});var i9t=s(k2e);drr=r(i9t,"megatron-bert"),i9t.forEach(t),crr=r(Yqe," \u2014 "),wQ=n(Yqe,"A",{href:!0});var d9t=s(wQ);frr=r(d9t,"MegatronBertForNextSentencePrediction"),d9t.forEach(t),mrr=r(Yqe," (Megatron-BERT model)"),Yqe.forEach(t),grr=i(Ta),hF=n(Ta,"LI",{});var Kqe=s(hF);S2e=n(Kqe,"STRONG",{});var c9t=s(S2e);hrr=r(c9t,"mobilebert"),c9t.forEach(t),prr=r(Kqe," \u2014 "),AQ=n(Kqe,"A",{href:!0});var f9t=s(AQ);_rr=r(f9t,"MobileBertForNextSentencePrediction"),f9t.forEach(t),urr=r(Kqe," (MobileBERT model)"),Kqe.forEach(t),brr=i(Ta),pF=n(Ta,"LI",{});var Zqe=s(pF);R2e=n(Zqe,"STRONG",{});var m9t=s(R2e);vrr=r(m9t,"nezha"),m9t.forEach(t),Frr=r(Zqe," \u2014 "),LQ=n(Zqe,"A",{href:!0});var g9t=s(LQ);Trr=r(g9t,"NezhaForNextSentencePrediction"),g9t.forEach(t),Mrr=r(Zqe," (Nezha model)"),Zqe.forEach(t),Err=i(Ta),_F=n(Ta,"LI",{});var eje=s(_F);P2e=n(eje,"STRONG",{});var h9t=s(P2e);Crr=r(h9t,"qdqbert"),h9t.forEach(t),wrr=r(eje," \u2014 "),yQ=n(eje,"A",{href:!0});var p9t=s(yQ);Arr=r(p9t,"QDQBertForNextSentencePrediction"),p9t.forEach(t),Lrr=r(eje," (QDQBert model)"),eje.forEach(t),Ta.forEach(t),yrr=i(Fa),uF=n(Fa,"P",{});var oje=s(uF);xrr=r(oje,"The model is set in evaluation mode by default using "),B2e=n(oje,"CODE",{});var _9t=s(B2e);$rr=r(_9t,"model.eval()"),_9t.forEach(t),krr=r(oje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=n(oje,"CODE",{});var u9t=s(I2e);Srr=r(u9t,"model.train()"),u9t.forEach(t),oje.forEach(t),Rrr=i(Fa),T(bF.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),kUe=i(f),Ad=n(f,"H2",{class:!0});var GJe=s(Ad);vF=n(GJe,"A",{id:!0,class:!0,href:!0});var b9t=s(vF);N2e=n(b9t,"SPAN",{});var v9t=s(N2e);T(x9.$$.fragment,v9t),v9t.forEach(t),b9t.forEach(t),Prr=i(GJe),q2e=n(GJe,"SPAN",{});var F9t=s(q2e);Brr=r(F9t,"AutoModelForTokenClassification"),F9t.forEach(t),GJe.forEach(t),SUe=i(f),Go=n(f,"DIV",{class:!0});var Ml=s(Go);T($9.$$.fragment,Ml),Irr=i(Ml),Ld=n(Ml,"P",{});var cne=s(Ld);Nrr=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xQ=n(cne,"A",{href:!0});var T9t=s(xQ);qrr=r(T9t,"from_pretrained()"),T9t.forEach(t),jrr=r(cne," class method or the "),$Q=n(cne,"A",{href:!0});var M9t=s($Q);Drr=r(M9t,"from_config()"),M9t.forEach(t),Grr=r(cne,` class
method.`),cne.forEach(t),Orr=i(Ml),k9=n(Ml,"P",{});var OJe=s(k9);Vrr=r(OJe,"This class cannot be instantiated directly using "),j2e=n(OJe,"CODE",{});var E9t=s(j2e);Xrr=r(E9t,"__init__()"),E9t.forEach(t),zrr=r(OJe," (throws an error)."),OJe.forEach(t),Wrr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var SA=s(Ft);T(S9.$$.fragment,SA),Qrr=i(SA),D2e=n(SA,"P",{});var C9t=s(D2e);Urr=r(C9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),C9t.forEach(t),Hrr=i(SA),yd=n(SA,"P",{});var fne=s(yd);Jrr=r(fne,`Note:
Loading a model from its configuration file does `),G2e=n(fne,"STRONG",{});var w9t=s(G2e);Yrr=r(w9t,"not"),w9t.forEach(t),Krr=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(fne,"A",{href:!0});var A9t=s(kQ);Zrr=r(A9t,"from_pretrained()"),A9t.forEach(t),etr=r(fne," to load the model weights."),fne.forEach(t),otr=i(SA),T(FF.$$.fragment,SA),SA.forEach(t),rtr=i(Ml),no=n(Ml,"DIV",{class:!0});var Ma=s(no);T(R9.$$.fragment,Ma),ttr=i(Ma),O2e=n(Ma,"P",{});var L9t=s(O2e);atr=r(L9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),L9t.forEach(t),ntr=i(Ma),Ya=n(Ma,"P",{});var RA=s(Ya);str=r(RA,"The model class to instantiate is selected based on the "),V2e=n(RA,"CODE",{});var y9t=s(V2e);ltr=r(y9t,"model_type"),y9t.forEach(t),itr=r(RA,` property of the config object (either
passed as an argument or loaded from `),X2e=n(RA,"CODE",{});var x9t=s(X2e);dtr=r(x9t,"pretrained_model_name_or_path"),x9t.forEach(t),ctr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(RA,"CODE",{});var $9t=s(z2e);ftr=r($9t,"pretrained_model_name_or_path"),$9t.forEach(t),mtr=r(RA,":"),RA.forEach(t),gtr=i(Ma),H=n(Ma,"UL",{});var K=s(H);TF=n(K,"LI",{});var rje=s(TF);W2e=n(rje,"STRONG",{});var k9t=s(W2e);htr=r(k9t,"albert"),k9t.forEach(t),ptr=r(rje," \u2014 "),SQ=n(rje,"A",{href:!0});var S9t=s(SQ);_tr=r(S9t,"AlbertForTokenClassification"),S9t.forEach(t),utr=r(rje," (ALBERT model)"),rje.forEach(t),btr=i(K),MF=n(K,"LI",{});var tje=s(MF);Q2e=n(tje,"STRONG",{});var R9t=s(Q2e);vtr=r(R9t,"bert"),R9t.forEach(t),Ftr=r(tje," \u2014 "),RQ=n(tje,"A",{href:!0});var P9t=s(RQ);Ttr=r(P9t,"BertForTokenClassification"),P9t.forEach(t),Mtr=r(tje," (BERT model)"),tje.forEach(t),Etr=i(K),EF=n(K,"LI",{});var aje=s(EF);U2e=n(aje,"STRONG",{});var B9t=s(U2e);Ctr=r(B9t,"big_bird"),B9t.forEach(t),wtr=r(aje," \u2014 "),PQ=n(aje,"A",{href:!0});var I9t=s(PQ);Atr=r(I9t,"BigBirdForTokenClassification"),I9t.forEach(t),Ltr=r(aje," (BigBird model)"),aje.forEach(t),ytr=i(K),CF=n(K,"LI",{});var nje=s(CF);H2e=n(nje,"STRONG",{});var N9t=s(H2e);xtr=r(N9t,"bloom"),N9t.forEach(t),$tr=r(nje," \u2014 "),BQ=n(nje,"A",{href:!0});var q9t=s(BQ);ktr=r(q9t,"BloomForTokenClassification"),q9t.forEach(t),Str=r(nje," (BLOOM model)"),nje.forEach(t),Rtr=i(K),wF=n(K,"LI",{});var sje=s(wF);J2e=n(sje,"STRONG",{});var j9t=s(J2e);Ptr=r(j9t,"camembert"),j9t.forEach(t),Btr=r(sje," \u2014 "),IQ=n(sje,"A",{href:!0});var D9t=s(IQ);Itr=r(D9t,"CamembertForTokenClassification"),D9t.forEach(t),Ntr=r(sje," (CamemBERT model)"),sje.forEach(t),qtr=i(K),AF=n(K,"LI",{});var lje=s(AF);Y2e=n(lje,"STRONG",{});var G9t=s(Y2e);jtr=r(G9t,"canine"),G9t.forEach(t),Dtr=r(lje," \u2014 "),NQ=n(lje,"A",{href:!0});var O9t=s(NQ);Gtr=r(O9t,"CanineForTokenClassification"),O9t.forEach(t),Otr=r(lje," (CANINE model)"),lje.forEach(t),Vtr=i(K),LF=n(K,"LI",{});var ije=s(LF);K2e=n(ije,"STRONG",{});var V9t=s(K2e);Xtr=r(V9t,"convbert"),V9t.forEach(t),ztr=r(ije," \u2014 "),qQ=n(ije,"A",{href:!0});var X9t=s(qQ);Wtr=r(X9t,"ConvBertForTokenClassification"),X9t.forEach(t),Qtr=r(ije," (ConvBERT model)"),ije.forEach(t),Utr=i(K),yF=n(K,"LI",{});var dje=s(yF);Z2e=n(dje,"STRONG",{});var z9t=s(Z2e);Htr=r(z9t,"data2vec-text"),z9t.forEach(t),Jtr=r(dje," \u2014 "),jQ=n(dje,"A",{href:!0});var W9t=s(jQ);Ytr=r(W9t,"Data2VecTextForTokenClassification"),W9t.forEach(t),Ktr=r(dje," (Data2VecText model)"),dje.forEach(t),Ztr=i(K),xF=n(K,"LI",{});var cje=s(xF);ebe=n(cje,"STRONG",{});var Q9t=s(ebe);ear=r(Q9t,"deberta"),Q9t.forEach(t),oar=r(cje," \u2014 "),DQ=n(cje,"A",{href:!0});var U9t=s(DQ);rar=r(U9t,"DebertaForTokenClassification"),U9t.forEach(t),tar=r(cje," (DeBERTa model)"),cje.forEach(t),aar=i(K),$F=n(K,"LI",{});var fje=s($F);obe=n(fje,"STRONG",{});var H9t=s(obe);nar=r(H9t,"deberta-v2"),H9t.forEach(t),sar=r(fje," \u2014 "),GQ=n(fje,"A",{href:!0});var J9t=s(GQ);lar=r(J9t,"DebertaV2ForTokenClassification"),J9t.forEach(t),iar=r(fje," (DeBERTa-v2 model)"),fje.forEach(t),dar=i(K),kF=n(K,"LI",{});var mje=s(kF);rbe=n(mje,"STRONG",{});var Y9t=s(rbe);car=r(Y9t,"distilbert"),Y9t.forEach(t),far=r(mje," \u2014 "),OQ=n(mje,"A",{href:!0});var K9t=s(OQ);mar=r(K9t,"DistilBertForTokenClassification"),K9t.forEach(t),gar=r(mje," (DistilBERT model)"),mje.forEach(t),har=i(K),SF=n(K,"LI",{});var gje=s(SF);tbe=n(gje,"STRONG",{});var Z9t=s(tbe);par=r(Z9t,"electra"),Z9t.forEach(t),_ar=r(gje," \u2014 "),VQ=n(gje,"A",{href:!0});var ext=s(VQ);uar=r(ext,"ElectraForTokenClassification"),ext.forEach(t),bar=r(gje," (ELECTRA model)"),gje.forEach(t),Far=i(K),RF=n(K,"LI",{});var hje=s(RF);abe=n(hje,"STRONG",{});var oxt=s(abe);Tar=r(oxt,"flaubert"),oxt.forEach(t),Mar=r(hje," \u2014 "),XQ=n(hje,"A",{href:!0});var rxt=s(XQ);Ear=r(rxt,"FlaubertForTokenClassification"),rxt.forEach(t),Car=r(hje," (FlauBERT model)"),hje.forEach(t),war=i(K),PF=n(K,"LI",{});var pje=s(PF);nbe=n(pje,"STRONG",{});var txt=s(nbe);Aar=r(txt,"fnet"),txt.forEach(t),Lar=r(pje," \u2014 "),zQ=n(pje,"A",{href:!0});var axt=s(zQ);yar=r(axt,"FNetForTokenClassification"),axt.forEach(t),xar=r(pje," (FNet model)"),pje.forEach(t),$ar=i(K),BF=n(K,"LI",{});var _je=s(BF);sbe=n(_je,"STRONG",{});var nxt=s(sbe);kar=r(nxt,"funnel"),nxt.forEach(t),Sar=r(_je," \u2014 "),WQ=n(_je,"A",{href:!0});var sxt=s(WQ);Rar=r(sxt,"FunnelForTokenClassification"),sxt.forEach(t),Par=r(_je," (Funnel Transformer model)"),_je.forEach(t),Bar=i(K),IF=n(K,"LI",{});var uje=s(IF);lbe=n(uje,"STRONG",{});var lxt=s(lbe);Iar=r(lxt,"gpt2"),lxt.forEach(t),Nar=r(uje," \u2014 "),QQ=n(uje,"A",{href:!0});var ixt=s(QQ);qar=r(ixt,"GPT2ForTokenClassification"),ixt.forEach(t),jar=r(uje," (OpenAI GPT-2 model)"),uje.forEach(t),Dar=i(K),NF=n(K,"LI",{});var bje=s(NF);ibe=n(bje,"STRONG",{});var dxt=s(ibe);Gar=r(dxt,"ibert"),dxt.forEach(t),Oar=r(bje," \u2014 "),UQ=n(bje,"A",{href:!0});var cxt=s(UQ);Var=r(cxt,"IBertForTokenClassification"),cxt.forEach(t),Xar=r(bje," (I-BERT model)"),bje.forEach(t),zar=i(K),qF=n(K,"LI",{});var vje=s(qF);dbe=n(vje,"STRONG",{});var fxt=s(dbe);War=r(fxt,"layoutlm"),fxt.forEach(t),Qar=r(vje," \u2014 "),HQ=n(vje,"A",{href:!0});var mxt=s(HQ);Uar=r(mxt,"LayoutLMForTokenClassification"),mxt.forEach(t),Har=r(vje," (LayoutLM model)"),vje.forEach(t),Jar=i(K),jF=n(K,"LI",{});var Fje=s(jF);cbe=n(Fje,"STRONG",{});var gxt=s(cbe);Yar=r(gxt,"layoutlmv2"),gxt.forEach(t),Kar=r(Fje," \u2014 "),JQ=n(Fje,"A",{href:!0});var hxt=s(JQ);Zar=r(hxt,"LayoutLMv2ForTokenClassification"),hxt.forEach(t),enr=r(Fje," (LayoutLMv2 model)"),Fje.forEach(t),onr=i(K),DF=n(K,"LI",{});var Tje=s(DF);fbe=n(Tje,"STRONG",{});var pxt=s(fbe);rnr=r(pxt,"layoutlmv3"),pxt.forEach(t),tnr=r(Tje," \u2014 "),YQ=n(Tje,"A",{href:!0});var _xt=s(YQ);anr=r(_xt,"LayoutLMv3ForTokenClassification"),_xt.forEach(t),nnr=r(Tje," (LayoutLMv3 model)"),Tje.forEach(t),snr=i(K),GF=n(K,"LI",{});var Mje=s(GF);mbe=n(Mje,"STRONG",{});var uxt=s(mbe);lnr=r(uxt,"longformer"),uxt.forEach(t),inr=r(Mje," \u2014 "),KQ=n(Mje,"A",{href:!0});var bxt=s(KQ);dnr=r(bxt,"LongformerForTokenClassification"),bxt.forEach(t),cnr=r(Mje," (Longformer model)"),Mje.forEach(t),fnr=i(K),OF=n(K,"LI",{});var Eje=s(OF);gbe=n(Eje,"STRONG",{});var vxt=s(gbe);mnr=r(vxt,"luke"),vxt.forEach(t),gnr=r(Eje," \u2014 "),ZQ=n(Eje,"A",{href:!0});var Fxt=s(ZQ);hnr=r(Fxt,"LukeForTokenClassification"),Fxt.forEach(t),pnr=r(Eje," (LUKE model)"),Eje.forEach(t),_nr=i(K),VF=n(K,"LI",{});var Cje=s(VF);hbe=n(Cje,"STRONG",{});var Txt=s(hbe);unr=r(Txt,"megatron-bert"),Txt.forEach(t),bnr=r(Cje," \u2014 "),eU=n(Cje,"A",{href:!0});var Mxt=s(eU);vnr=r(Mxt,"MegatronBertForTokenClassification"),Mxt.forEach(t),Fnr=r(Cje," (Megatron-BERT model)"),Cje.forEach(t),Tnr=i(K),XF=n(K,"LI",{});var wje=s(XF);pbe=n(wje,"STRONG",{});var Ext=s(pbe);Mnr=r(Ext,"mobilebert"),Ext.forEach(t),Enr=r(wje," \u2014 "),oU=n(wje,"A",{href:!0});var Cxt=s(oU);Cnr=r(Cxt,"MobileBertForTokenClassification"),Cxt.forEach(t),wnr=r(wje," (MobileBERT model)"),wje.forEach(t),Anr=i(K),zF=n(K,"LI",{});var Aje=s(zF);_be=n(Aje,"STRONG",{});var wxt=s(_be);Lnr=r(wxt,"mpnet"),wxt.forEach(t),ynr=r(Aje," \u2014 "),rU=n(Aje,"A",{href:!0});var Axt=s(rU);xnr=r(Axt,"MPNetForTokenClassification"),Axt.forEach(t),$nr=r(Aje," (MPNet model)"),Aje.forEach(t),knr=i(K),WF=n(K,"LI",{});var Lje=s(WF);ube=n(Lje,"STRONG",{});var Lxt=s(ube);Snr=r(Lxt,"nezha"),Lxt.forEach(t),Rnr=r(Lje," \u2014 "),tU=n(Lje,"A",{href:!0});var yxt=s(tU);Pnr=r(yxt,"NezhaForTokenClassification"),yxt.forEach(t),Bnr=r(Lje," (Nezha model)"),Lje.forEach(t),Inr=i(K),QF=n(K,"LI",{});var yje=s(QF);bbe=n(yje,"STRONG",{});var xxt=s(bbe);Nnr=r(xxt,"nystromformer"),xxt.forEach(t),qnr=r(yje," \u2014 "),aU=n(yje,"A",{href:!0});var $xt=s(aU);jnr=r($xt,"NystromformerForTokenClassification"),$xt.forEach(t),Dnr=r(yje," (Nystr\xF6mformer model)"),yje.forEach(t),Gnr=i(K),UF=n(K,"LI",{});var xje=s(UF);vbe=n(xje,"STRONG",{});var kxt=s(vbe);Onr=r(kxt,"qdqbert"),kxt.forEach(t),Vnr=r(xje," \u2014 "),nU=n(xje,"A",{href:!0});var Sxt=s(nU);Xnr=r(Sxt,"QDQBertForTokenClassification"),Sxt.forEach(t),znr=r(xje," (QDQBert model)"),xje.forEach(t),Wnr=i(K),HF=n(K,"LI",{});var $je=s(HF);Fbe=n($je,"STRONG",{});var Rxt=s(Fbe);Qnr=r(Rxt,"rembert"),Rxt.forEach(t),Unr=r($je," \u2014 "),sU=n($je,"A",{href:!0});var Pxt=s(sU);Hnr=r(Pxt,"RemBertForTokenClassification"),Pxt.forEach(t),Jnr=r($je," (RemBERT model)"),$je.forEach(t),Ynr=i(K),JF=n(K,"LI",{});var kje=s(JF);Tbe=n(kje,"STRONG",{});var Bxt=s(Tbe);Knr=r(Bxt,"roberta"),Bxt.forEach(t),Znr=r(kje," \u2014 "),lU=n(kje,"A",{href:!0});var Ixt=s(lU);esr=r(Ixt,"RobertaForTokenClassification"),Ixt.forEach(t),osr=r(kje," (RoBERTa model)"),kje.forEach(t),rsr=i(K),YF=n(K,"LI",{});var Sje=s(YF);Mbe=n(Sje,"STRONG",{});var Nxt=s(Mbe);tsr=r(Nxt,"roformer"),Nxt.forEach(t),asr=r(Sje," \u2014 "),iU=n(Sje,"A",{href:!0});var qxt=s(iU);nsr=r(qxt,"RoFormerForTokenClassification"),qxt.forEach(t),ssr=r(Sje," (RoFormer model)"),Sje.forEach(t),lsr=i(K),KF=n(K,"LI",{});var Rje=s(KF);Ebe=n(Rje,"STRONG",{});var jxt=s(Ebe);isr=r(jxt,"squeezebert"),jxt.forEach(t),dsr=r(Rje," \u2014 "),dU=n(Rje,"A",{href:!0});var Dxt=s(dU);csr=r(Dxt,"SqueezeBertForTokenClassification"),Dxt.forEach(t),fsr=r(Rje," (SqueezeBERT model)"),Rje.forEach(t),msr=i(K),ZF=n(K,"LI",{});var Pje=s(ZF);Cbe=n(Pje,"STRONG",{});var Gxt=s(Cbe);gsr=r(Gxt,"xlm"),Gxt.forEach(t),hsr=r(Pje," \u2014 "),cU=n(Pje,"A",{href:!0});var Oxt=s(cU);psr=r(Oxt,"XLMForTokenClassification"),Oxt.forEach(t),_sr=r(Pje," (XLM model)"),Pje.forEach(t),usr=i(K),e6=n(K,"LI",{});var Bje=s(e6);wbe=n(Bje,"STRONG",{});var Vxt=s(wbe);bsr=r(Vxt,"xlm-roberta"),Vxt.forEach(t),vsr=r(Bje," \u2014 "),fU=n(Bje,"A",{href:!0});var Xxt=s(fU);Fsr=r(Xxt,"XLMRobertaForTokenClassification"),Xxt.forEach(t),Tsr=r(Bje," (XLM-RoBERTa model)"),Bje.forEach(t),Msr=i(K),o6=n(K,"LI",{});var Ije=s(o6);Abe=n(Ije,"STRONG",{});var zxt=s(Abe);Esr=r(zxt,"xlm-roberta-xl"),zxt.forEach(t),Csr=r(Ije," \u2014 "),mU=n(Ije,"A",{href:!0});var Wxt=s(mU);wsr=r(Wxt,"XLMRobertaXLForTokenClassification"),Wxt.forEach(t),Asr=r(Ije," (XLM-RoBERTa-XL model)"),Ije.forEach(t),Lsr=i(K),r6=n(K,"LI",{});var Nje=s(r6);Lbe=n(Nje,"STRONG",{});var Qxt=s(Lbe);ysr=r(Qxt,"xlnet"),Qxt.forEach(t),xsr=r(Nje," \u2014 "),gU=n(Nje,"A",{href:!0});var Uxt=s(gU);$sr=r(Uxt,"XLNetForTokenClassification"),Uxt.forEach(t),ksr=r(Nje," (XLNet model)"),Nje.forEach(t),Ssr=i(K),t6=n(K,"LI",{});var qje=s(t6);ybe=n(qje,"STRONG",{});var Hxt=s(ybe);Rsr=r(Hxt,"yoso"),Hxt.forEach(t),Psr=r(qje," \u2014 "),hU=n(qje,"A",{href:!0});var Jxt=s(hU);Bsr=r(Jxt,"YosoForTokenClassification"),Jxt.forEach(t),Isr=r(qje," (YOSO model)"),qje.forEach(t),K.forEach(t),Nsr=i(Ma),a6=n(Ma,"P",{});var jje=s(a6);qsr=r(jje,"The model is set in evaluation mode by default using "),xbe=n(jje,"CODE",{});var Yxt=s(xbe);jsr=r(Yxt,"model.eval()"),Yxt.forEach(t),Dsr=r(jje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=n(jje,"CODE",{});var Kxt=s($be);Gsr=r(Kxt,"model.train()"),Kxt.forEach(t),jje.forEach(t),Osr=i(Ma),T(n6.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),RUe=i(f),xd=n(f,"H2",{class:!0});var VJe=s(xd);s6=n(VJe,"A",{id:!0,class:!0,href:!0});var Zxt=s(s6);kbe=n(Zxt,"SPAN",{});var e$t=s(kbe);T(P9.$$.fragment,e$t),e$t.forEach(t),Zxt.forEach(t),Vsr=i(VJe),Sbe=n(VJe,"SPAN",{});var o$t=s(Sbe);Xsr=r(o$t,"AutoModelForQuestionAnswering"),o$t.forEach(t),VJe.forEach(t),PUe=i(f),Oo=n(f,"DIV",{class:!0});var El=s(Oo);T(B9.$$.fragment,El),zsr=i(El),$d=n(El,"P",{});var mne=s($d);Wsr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pU=n(mne,"A",{href:!0});var r$t=s(pU);Qsr=r(r$t,"from_pretrained()"),r$t.forEach(t),Usr=r(mne," class method or the "),_U=n(mne,"A",{href:!0});var t$t=s(_U);Hsr=r(t$t,"from_config()"),t$t.forEach(t),Jsr=r(mne,` class
method.`),mne.forEach(t),Ysr=i(El),I9=n(El,"P",{});var XJe=s(I9);Ksr=r(XJe,"This class cannot be instantiated directly using "),Rbe=n(XJe,"CODE",{});var a$t=s(Rbe);Zsr=r(a$t,"__init__()"),a$t.forEach(t),elr=r(XJe," (throws an error)."),XJe.forEach(t),olr=i(El),Tt=n(El,"DIV",{class:!0});var PA=s(Tt);T(N9.$$.fragment,PA),rlr=i(PA),Pbe=n(PA,"P",{});var n$t=s(Pbe);tlr=r(n$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),n$t.forEach(t),alr=i(PA),kd=n(PA,"P",{});var gne=s(kd);nlr=r(gne,`Note:
Loading a model from its configuration file does `),Bbe=n(gne,"STRONG",{});var s$t=s(Bbe);slr=r(s$t,"not"),s$t.forEach(t),llr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(gne,"A",{href:!0});var l$t=s(uU);ilr=r(l$t,"from_pretrained()"),l$t.forEach(t),dlr=r(gne," to load the model weights."),gne.forEach(t),clr=i(PA),T(l6.$$.fragment,PA),PA.forEach(t),flr=i(El),so=n(El,"DIV",{class:!0});var Ea=s(so);T(q9.$$.fragment,Ea),mlr=i(Ea),Ibe=n(Ea,"P",{});var i$t=s(Ibe);glr=r(i$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i$t.forEach(t),hlr=i(Ea),Ka=n(Ea,"P",{});var BA=s(Ka);plr=r(BA,"The model class to instantiate is selected based on the "),Nbe=n(BA,"CODE",{});var d$t=s(Nbe);_lr=r(d$t,"model_type"),d$t.forEach(t),ulr=r(BA,` property of the config object (either
passed as an argument or loaded from `),qbe=n(BA,"CODE",{});var c$t=s(qbe);blr=r(c$t,"pretrained_model_name_or_path"),c$t.forEach(t),vlr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(BA,"CODE",{});var f$t=s(jbe);Flr=r(f$t,"pretrained_model_name_or_path"),f$t.forEach(t),Tlr=r(BA,":"),BA.forEach(t),Mlr=i(Ea),V=n(Ea,"UL",{});var X=s(V);i6=n(X,"LI",{});var Dje=s(i6);Dbe=n(Dje,"STRONG",{});var m$t=s(Dbe);Elr=r(m$t,"albert"),m$t.forEach(t),Clr=r(Dje," \u2014 "),bU=n(Dje,"A",{href:!0});var g$t=s(bU);wlr=r(g$t,"AlbertForQuestionAnswering"),g$t.forEach(t),Alr=r(Dje," (ALBERT model)"),Dje.forEach(t),Llr=i(X),d6=n(X,"LI",{});var Gje=s(d6);Gbe=n(Gje,"STRONG",{});var h$t=s(Gbe);ylr=r(h$t,"bart"),h$t.forEach(t),xlr=r(Gje," \u2014 "),vU=n(Gje,"A",{href:!0});var p$t=s(vU);$lr=r(p$t,"BartForQuestionAnswering"),p$t.forEach(t),klr=r(Gje," (BART model)"),Gje.forEach(t),Slr=i(X),c6=n(X,"LI",{});var Oje=s(c6);Obe=n(Oje,"STRONG",{});var _$t=s(Obe);Rlr=r(_$t,"bert"),_$t.forEach(t),Plr=r(Oje," \u2014 "),FU=n(Oje,"A",{href:!0});var u$t=s(FU);Blr=r(u$t,"BertForQuestionAnswering"),u$t.forEach(t),Ilr=r(Oje," (BERT model)"),Oje.forEach(t),Nlr=i(X),f6=n(X,"LI",{});var Vje=s(f6);Vbe=n(Vje,"STRONG",{});var b$t=s(Vbe);qlr=r(b$t,"big_bird"),b$t.forEach(t),jlr=r(Vje," \u2014 "),TU=n(Vje,"A",{href:!0});var v$t=s(TU);Dlr=r(v$t,"BigBirdForQuestionAnswering"),v$t.forEach(t),Glr=r(Vje," (BigBird model)"),Vje.forEach(t),Olr=i(X),m6=n(X,"LI",{});var Xje=s(m6);Xbe=n(Xje,"STRONG",{});var F$t=s(Xbe);Vlr=r(F$t,"bigbird_pegasus"),F$t.forEach(t),Xlr=r(Xje," \u2014 "),MU=n(Xje,"A",{href:!0});var T$t=s(MU);zlr=r(T$t,"BigBirdPegasusForQuestionAnswering"),T$t.forEach(t),Wlr=r(Xje," (BigBird-Pegasus model)"),Xje.forEach(t),Qlr=i(X),g6=n(X,"LI",{});var zje=s(g6);zbe=n(zje,"STRONG",{});var M$t=s(zbe);Ulr=r(M$t,"camembert"),M$t.forEach(t),Hlr=r(zje," \u2014 "),EU=n(zje,"A",{href:!0});var E$t=s(EU);Jlr=r(E$t,"CamembertForQuestionAnswering"),E$t.forEach(t),Ylr=r(zje," (CamemBERT model)"),zje.forEach(t),Klr=i(X),h6=n(X,"LI",{});var Wje=s(h6);Wbe=n(Wje,"STRONG",{});var C$t=s(Wbe);Zlr=r(C$t,"canine"),C$t.forEach(t),eir=r(Wje," \u2014 "),CU=n(Wje,"A",{href:!0});var w$t=s(CU);oir=r(w$t,"CanineForQuestionAnswering"),w$t.forEach(t),rir=r(Wje," (CANINE model)"),Wje.forEach(t),tir=i(X),p6=n(X,"LI",{});var Qje=s(p6);Qbe=n(Qje,"STRONG",{});var A$t=s(Qbe);air=r(A$t,"convbert"),A$t.forEach(t),nir=r(Qje," \u2014 "),wU=n(Qje,"A",{href:!0});var L$t=s(wU);sir=r(L$t,"ConvBertForQuestionAnswering"),L$t.forEach(t),lir=r(Qje," (ConvBERT model)"),Qje.forEach(t),iir=i(X),_6=n(X,"LI",{});var Uje=s(_6);Ube=n(Uje,"STRONG",{});var y$t=s(Ube);dir=r(y$t,"data2vec-text"),y$t.forEach(t),cir=r(Uje," \u2014 "),AU=n(Uje,"A",{href:!0});var x$t=s(AU);fir=r(x$t,"Data2VecTextForQuestionAnswering"),x$t.forEach(t),mir=r(Uje," (Data2VecText model)"),Uje.forEach(t),gir=i(X),u6=n(X,"LI",{});var Hje=s(u6);Hbe=n(Hje,"STRONG",{});var $$t=s(Hbe);hir=r($$t,"deberta"),$$t.forEach(t),pir=r(Hje," \u2014 "),LU=n(Hje,"A",{href:!0});var k$t=s(LU);_ir=r(k$t,"DebertaForQuestionAnswering"),k$t.forEach(t),uir=r(Hje," (DeBERTa model)"),Hje.forEach(t),bir=i(X),b6=n(X,"LI",{});var Jje=s(b6);Jbe=n(Jje,"STRONG",{});var S$t=s(Jbe);vir=r(S$t,"deberta-v2"),S$t.forEach(t),Fir=r(Jje," \u2014 "),yU=n(Jje,"A",{href:!0});var R$t=s(yU);Tir=r(R$t,"DebertaV2ForQuestionAnswering"),R$t.forEach(t),Mir=r(Jje," (DeBERTa-v2 model)"),Jje.forEach(t),Eir=i(X),v6=n(X,"LI",{});var Yje=s(v6);Ybe=n(Yje,"STRONG",{});var P$t=s(Ybe);Cir=r(P$t,"distilbert"),P$t.forEach(t),wir=r(Yje," \u2014 "),xU=n(Yje,"A",{href:!0});var B$t=s(xU);Air=r(B$t,"DistilBertForQuestionAnswering"),B$t.forEach(t),Lir=r(Yje," (DistilBERT model)"),Yje.forEach(t),yir=i(X),F6=n(X,"LI",{});var Kje=s(F6);Kbe=n(Kje,"STRONG",{});var I$t=s(Kbe);xir=r(I$t,"electra"),I$t.forEach(t),$ir=r(Kje," \u2014 "),$U=n(Kje,"A",{href:!0});var N$t=s($U);kir=r(N$t,"ElectraForQuestionAnswering"),N$t.forEach(t),Sir=r(Kje," (ELECTRA model)"),Kje.forEach(t),Rir=i(X),T6=n(X,"LI",{});var Zje=s(T6);Zbe=n(Zje,"STRONG",{});var q$t=s(Zbe);Pir=r(q$t,"flaubert"),q$t.forEach(t),Bir=r(Zje," \u2014 "),kU=n(Zje,"A",{href:!0});var j$t=s(kU);Iir=r(j$t,"FlaubertForQuestionAnsweringSimple"),j$t.forEach(t),Nir=r(Zje," (FlauBERT model)"),Zje.forEach(t),qir=i(X),M6=n(X,"LI",{});var eDe=s(M6);eve=n(eDe,"STRONG",{});var D$t=s(eve);jir=r(D$t,"fnet"),D$t.forEach(t),Dir=r(eDe," \u2014 "),SU=n(eDe,"A",{href:!0});var G$t=s(SU);Gir=r(G$t,"FNetForQuestionAnswering"),G$t.forEach(t),Oir=r(eDe," (FNet model)"),eDe.forEach(t),Vir=i(X),E6=n(X,"LI",{});var oDe=s(E6);ove=n(oDe,"STRONG",{});var O$t=s(ove);Xir=r(O$t,"funnel"),O$t.forEach(t),zir=r(oDe," \u2014 "),RU=n(oDe,"A",{href:!0});var V$t=s(RU);Wir=r(V$t,"FunnelForQuestionAnswering"),V$t.forEach(t),Qir=r(oDe," (Funnel Transformer model)"),oDe.forEach(t),Uir=i(X),C6=n(X,"LI",{});var rDe=s(C6);rve=n(rDe,"STRONG",{});var X$t=s(rve);Hir=r(X$t,"gptj"),X$t.forEach(t),Jir=r(rDe," \u2014 "),PU=n(rDe,"A",{href:!0});var z$t=s(PU);Yir=r(z$t,"GPTJForQuestionAnswering"),z$t.forEach(t),Kir=r(rDe," (GPT-J model)"),rDe.forEach(t),Zir=i(X),w6=n(X,"LI",{});var tDe=s(w6);tve=n(tDe,"STRONG",{});var W$t=s(tve);edr=r(W$t,"ibert"),W$t.forEach(t),odr=r(tDe," \u2014 "),BU=n(tDe,"A",{href:!0});var Q$t=s(BU);rdr=r(Q$t,"IBertForQuestionAnswering"),Q$t.forEach(t),tdr=r(tDe," (I-BERT model)"),tDe.forEach(t),adr=i(X),A6=n(X,"LI",{});var aDe=s(A6);ave=n(aDe,"STRONG",{});var U$t=s(ave);ndr=r(U$t,"layoutlmv2"),U$t.forEach(t),sdr=r(aDe," \u2014 "),IU=n(aDe,"A",{href:!0});var H$t=s(IU);ldr=r(H$t,"LayoutLMv2ForQuestionAnswering"),H$t.forEach(t),idr=r(aDe," (LayoutLMv2 model)"),aDe.forEach(t),ddr=i(X),L6=n(X,"LI",{});var nDe=s(L6);nve=n(nDe,"STRONG",{});var J$t=s(nve);cdr=r(J$t,"layoutlmv3"),J$t.forEach(t),fdr=r(nDe," \u2014 "),NU=n(nDe,"A",{href:!0});var Y$t=s(NU);mdr=r(Y$t,"LayoutLMv3ForQuestionAnswering"),Y$t.forEach(t),gdr=r(nDe," (LayoutLMv3 model)"),nDe.forEach(t),hdr=i(X),y6=n(X,"LI",{});var sDe=s(y6);sve=n(sDe,"STRONG",{});var K$t=s(sve);pdr=r(K$t,"led"),K$t.forEach(t),_dr=r(sDe," \u2014 "),qU=n(sDe,"A",{href:!0});var Z$t=s(qU);udr=r(Z$t,"LEDForQuestionAnswering"),Z$t.forEach(t),bdr=r(sDe," (LED model)"),sDe.forEach(t),vdr=i(X),x6=n(X,"LI",{});var lDe=s(x6);lve=n(lDe,"STRONG",{});var ekt=s(lve);Fdr=r(ekt,"longformer"),ekt.forEach(t),Tdr=r(lDe," \u2014 "),jU=n(lDe,"A",{href:!0});var okt=s(jU);Mdr=r(okt,"LongformerForQuestionAnswering"),okt.forEach(t),Edr=r(lDe," (Longformer model)"),lDe.forEach(t),Cdr=i(X),$6=n(X,"LI",{});var iDe=s($6);ive=n(iDe,"STRONG",{});var rkt=s(ive);wdr=r(rkt,"luke"),rkt.forEach(t),Adr=r(iDe," \u2014 "),DU=n(iDe,"A",{href:!0});var tkt=s(DU);Ldr=r(tkt,"LukeForQuestionAnswering"),tkt.forEach(t),ydr=r(iDe," (LUKE model)"),iDe.forEach(t),xdr=i(X),k6=n(X,"LI",{});var dDe=s(k6);dve=n(dDe,"STRONG",{});var akt=s(dve);$dr=r(akt,"lxmert"),akt.forEach(t),kdr=r(dDe," \u2014 "),GU=n(dDe,"A",{href:!0});var nkt=s(GU);Sdr=r(nkt,"LxmertForQuestionAnswering"),nkt.forEach(t),Rdr=r(dDe," (LXMERT model)"),dDe.forEach(t),Pdr=i(X),S6=n(X,"LI",{});var cDe=s(S6);cve=n(cDe,"STRONG",{});var skt=s(cve);Bdr=r(skt,"mbart"),skt.forEach(t),Idr=r(cDe," \u2014 "),OU=n(cDe,"A",{href:!0});var lkt=s(OU);Ndr=r(lkt,"MBartForQuestionAnswering"),lkt.forEach(t),qdr=r(cDe," (mBART model)"),cDe.forEach(t),jdr=i(X),R6=n(X,"LI",{});var fDe=s(R6);fve=n(fDe,"STRONG",{});var ikt=s(fve);Ddr=r(ikt,"megatron-bert"),ikt.forEach(t),Gdr=r(fDe," \u2014 "),VU=n(fDe,"A",{href:!0});var dkt=s(VU);Odr=r(dkt,"MegatronBertForQuestionAnswering"),dkt.forEach(t),Vdr=r(fDe," (Megatron-BERT model)"),fDe.forEach(t),Xdr=i(X),P6=n(X,"LI",{});var mDe=s(P6);mve=n(mDe,"STRONG",{});var ckt=s(mve);zdr=r(ckt,"mobilebert"),ckt.forEach(t),Wdr=r(mDe," \u2014 "),XU=n(mDe,"A",{href:!0});var fkt=s(XU);Qdr=r(fkt,"MobileBertForQuestionAnswering"),fkt.forEach(t),Udr=r(mDe," (MobileBERT model)"),mDe.forEach(t),Hdr=i(X),B6=n(X,"LI",{});var gDe=s(B6);gve=n(gDe,"STRONG",{});var mkt=s(gve);Jdr=r(mkt,"mpnet"),mkt.forEach(t),Ydr=r(gDe," \u2014 "),zU=n(gDe,"A",{href:!0});var gkt=s(zU);Kdr=r(gkt,"MPNetForQuestionAnswering"),gkt.forEach(t),Zdr=r(gDe," (MPNet model)"),gDe.forEach(t),ecr=i(X),I6=n(X,"LI",{});var hDe=s(I6);hve=n(hDe,"STRONG",{});var hkt=s(hve);ocr=r(hkt,"mvp"),hkt.forEach(t),rcr=r(hDe," \u2014 "),WU=n(hDe,"A",{href:!0});var pkt=s(WU);tcr=r(pkt,"MvpForQuestionAnswering"),pkt.forEach(t),acr=r(hDe," (MVP model)"),hDe.forEach(t),ncr=i(X),N6=n(X,"LI",{});var pDe=s(N6);pve=n(pDe,"STRONG",{});var _kt=s(pve);scr=r(_kt,"nezha"),_kt.forEach(t),lcr=r(pDe," \u2014 "),QU=n(pDe,"A",{href:!0});var ukt=s(QU);icr=r(ukt,"NezhaForQuestionAnswering"),ukt.forEach(t),dcr=r(pDe," (Nezha model)"),pDe.forEach(t),ccr=i(X),q6=n(X,"LI",{});var _De=s(q6);_ve=n(_De,"STRONG",{});var bkt=s(_ve);fcr=r(bkt,"nystromformer"),bkt.forEach(t),mcr=r(_De," \u2014 "),UU=n(_De,"A",{href:!0});var vkt=s(UU);gcr=r(vkt,"NystromformerForQuestionAnswering"),vkt.forEach(t),hcr=r(_De," (Nystr\xF6mformer model)"),_De.forEach(t),pcr=i(X),j6=n(X,"LI",{});var uDe=s(j6);uve=n(uDe,"STRONG",{});var Fkt=s(uve);_cr=r(Fkt,"qdqbert"),Fkt.forEach(t),ucr=r(uDe," \u2014 "),HU=n(uDe,"A",{href:!0});var Tkt=s(HU);bcr=r(Tkt,"QDQBertForQuestionAnswering"),Tkt.forEach(t),vcr=r(uDe," (QDQBert model)"),uDe.forEach(t),Fcr=i(X),D6=n(X,"LI",{});var bDe=s(D6);bve=n(bDe,"STRONG",{});var Mkt=s(bve);Tcr=r(Mkt,"reformer"),Mkt.forEach(t),Mcr=r(bDe," \u2014 "),JU=n(bDe,"A",{href:!0});var Ekt=s(JU);Ecr=r(Ekt,"ReformerForQuestionAnswering"),Ekt.forEach(t),Ccr=r(bDe," (Reformer model)"),bDe.forEach(t),wcr=i(X),G6=n(X,"LI",{});var vDe=s(G6);vve=n(vDe,"STRONG",{});var Ckt=s(vve);Acr=r(Ckt,"rembert"),Ckt.forEach(t),Lcr=r(vDe," \u2014 "),YU=n(vDe,"A",{href:!0});var wkt=s(YU);ycr=r(wkt,"RemBertForQuestionAnswering"),wkt.forEach(t),xcr=r(vDe," (RemBERT model)"),vDe.forEach(t),$cr=i(X),O6=n(X,"LI",{});var FDe=s(O6);Fve=n(FDe,"STRONG",{});var Akt=s(Fve);kcr=r(Akt,"roberta"),Akt.forEach(t),Scr=r(FDe," \u2014 "),KU=n(FDe,"A",{href:!0});var Lkt=s(KU);Rcr=r(Lkt,"RobertaForQuestionAnswering"),Lkt.forEach(t),Pcr=r(FDe," (RoBERTa model)"),FDe.forEach(t),Bcr=i(X),V6=n(X,"LI",{});var TDe=s(V6);Tve=n(TDe,"STRONG",{});var ykt=s(Tve);Icr=r(ykt,"roformer"),ykt.forEach(t),Ncr=r(TDe," \u2014 "),ZU=n(TDe,"A",{href:!0});var xkt=s(ZU);qcr=r(xkt,"RoFormerForQuestionAnswering"),xkt.forEach(t),jcr=r(TDe," (RoFormer model)"),TDe.forEach(t),Dcr=i(X),X6=n(X,"LI",{});var MDe=s(X6);Mve=n(MDe,"STRONG",{});var $kt=s(Mve);Gcr=r($kt,"splinter"),$kt.forEach(t),Ocr=r(MDe," \u2014 "),eH=n(MDe,"A",{href:!0});var kkt=s(eH);Vcr=r(kkt,"SplinterForQuestionAnswering"),kkt.forEach(t),Xcr=r(MDe," (Splinter model)"),MDe.forEach(t),zcr=i(X),z6=n(X,"LI",{});var EDe=s(z6);Eve=n(EDe,"STRONG",{});var Skt=s(Eve);Wcr=r(Skt,"squeezebert"),Skt.forEach(t),Qcr=r(EDe," \u2014 "),oH=n(EDe,"A",{href:!0});var Rkt=s(oH);Ucr=r(Rkt,"SqueezeBertForQuestionAnswering"),Rkt.forEach(t),Hcr=r(EDe," (SqueezeBERT model)"),EDe.forEach(t),Jcr=i(X),W6=n(X,"LI",{});var CDe=s(W6);Cve=n(CDe,"STRONG",{});var Pkt=s(Cve);Ycr=r(Pkt,"xlm"),Pkt.forEach(t),Kcr=r(CDe," \u2014 "),rH=n(CDe,"A",{href:!0});var Bkt=s(rH);Zcr=r(Bkt,"XLMForQuestionAnsweringSimple"),Bkt.forEach(t),efr=r(CDe," (XLM model)"),CDe.forEach(t),ofr=i(X),Q6=n(X,"LI",{});var wDe=s(Q6);wve=n(wDe,"STRONG",{});var Ikt=s(wve);rfr=r(Ikt,"xlm-roberta"),Ikt.forEach(t),tfr=r(wDe," \u2014 "),tH=n(wDe,"A",{href:!0});var Nkt=s(tH);afr=r(Nkt,"XLMRobertaForQuestionAnswering"),Nkt.forEach(t),nfr=r(wDe," (XLM-RoBERTa model)"),wDe.forEach(t),sfr=i(X),U6=n(X,"LI",{});var ADe=s(U6);Ave=n(ADe,"STRONG",{});var qkt=s(Ave);lfr=r(qkt,"xlm-roberta-xl"),qkt.forEach(t),ifr=r(ADe," \u2014 "),aH=n(ADe,"A",{href:!0});var jkt=s(aH);dfr=r(jkt,"XLMRobertaXLForQuestionAnswering"),jkt.forEach(t),cfr=r(ADe," (XLM-RoBERTa-XL model)"),ADe.forEach(t),ffr=i(X),H6=n(X,"LI",{});var LDe=s(H6);Lve=n(LDe,"STRONG",{});var Dkt=s(Lve);mfr=r(Dkt,"xlnet"),Dkt.forEach(t),gfr=r(LDe," \u2014 "),nH=n(LDe,"A",{href:!0});var Gkt=s(nH);hfr=r(Gkt,"XLNetForQuestionAnsweringSimple"),Gkt.forEach(t),pfr=r(LDe," (XLNet model)"),LDe.forEach(t),_fr=i(X),J6=n(X,"LI",{});var yDe=s(J6);yve=n(yDe,"STRONG",{});var Okt=s(yve);ufr=r(Okt,"yoso"),Okt.forEach(t),bfr=r(yDe," \u2014 "),sH=n(yDe,"A",{href:!0});var Vkt=s(sH);vfr=r(Vkt,"YosoForQuestionAnswering"),Vkt.forEach(t),Ffr=r(yDe," (YOSO model)"),yDe.forEach(t),X.forEach(t),Tfr=i(Ea),Y6=n(Ea,"P",{});var xDe=s(Y6);Mfr=r(xDe,"The model is set in evaluation mode by default using "),xve=n(xDe,"CODE",{});var Xkt=s(xve);Efr=r(Xkt,"model.eval()"),Xkt.forEach(t),Cfr=r(xDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ve=n(xDe,"CODE",{});var zkt=s($ve);wfr=r(zkt,"model.train()"),zkt.forEach(t),xDe.forEach(t),Afr=i(Ea),T(K6.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),BUe=i(f),Sd=n(f,"H2",{class:!0});var zJe=s(Sd);Z6=n(zJe,"A",{id:!0,class:!0,href:!0});var Wkt=s(Z6);kve=n(Wkt,"SPAN",{});var Qkt=s(kve);T(j9.$$.fragment,Qkt),Qkt.forEach(t),Wkt.forEach(t),Lfr=i(zJe),Sve=n(zJe,"SPAN",{});var Ukt=s(Sve);yfr=r(Ukt,"AutoModelForTableQuestionAnswering"),Ukt.forEach(t),zJe.forEach(t),IUe=i(f),Vo=n(f,"DIV",{class:!0});var Cl=s(Vo);T(D9.$$.fragment,Cl),xfr=i(Cl),Rd=n(Cl,"P",{});var hne=s(Rd);$fr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lH=n(hne,"A",{href:!0});var Hkt=s(lH);kfr=r(Hkt,"from_pretrained()"),Hkt.forEach(t),Sfr=r(hne," class method or the "),iH=n(hne,"A",{href:!0});var Jkt=s(iH);Rfr=r(Jkt,"from_config()"),Jkt.forEach(t),Pfr=r(hne,` class
method.`),hne.forEach(t),Bfr=i(Cl),G9=n(Cl,"P",{});var WJe=s(G9);Ifr=r(WJe,"This class cannot be instantiated directly using "),Rve=n(WJe,"CODE",{});var Ykt=s(Rve);Nfr=r(Ykt,"__init__()"),Ykt.forEach(t),qfr=r(WJe," (throws an error)."),WJe.forEach(t),jfr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var IA=s(Mt);T(O9.$$.fragment,IA),Dfr=i(IA),Pve=n(IA,"P",{});var Kkt=s(Pve);Gfr=r(Kkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kkt.forEach(t),Ofr=i(IA),Pd=n(IA,"P",{});var pne=s(Pd);Vfr=r(pne,`Note:
Loading a model from its configuration file does `),Bve=n(pne,"STRONG",{});var Zkt=s(Bve);Xfr=r(Zkt,"not"),Zkt.forEach(t),zfr=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(pne,"A",{href:!0});var eSt=s(dH);Wfr=r(eSt,"from_pretrained()"),eSt.forEach(t),Qfr=r(pne," to load the model weights."),pne.forEach(t),Ufr=i(IA),T(eT.$$.fragment,IA),IA.forEach(t),Hfr=i(Cl),lo=n(Cl,"DIV",{class:!0});var Ca=s(lo);T(V9.$$.fragment,Ca),Jfr=i(Ca),Ive=n(Ca,"P",{});var oSt=s(Ive);Yfr=r(oSt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),oSt.forEach(t),Kfr=i(Ca),Za=n(Ca,"P",{});var NA=s(Za);Zfr=r(NA,"The model class to instantiate is selected based on the "),Nve=n(NA,"CODE",{});var rSt=s(Nve);emr=r(rSt,"model_type"),rSt.forEach(t),omr=r(NA,` property of the config object (either
passed as an argument or loaded from `),qve=n(NA,"CODE",{});var tSt=s(qve);rmr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),tmr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(NA,"CODE",{});var aSt=s(jve);amr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),nmr=r(NA,":"),NA.forEach(t),smr=i(Ca),Dve=n(Ca,"UL",{});var nSt=s(Dve);oT=n(nSt,"LI",{});var $De=s(oT);Gve=n($De,"STRONG",{});var sSt=s(Gve);lmr=r(sSt,"tapas"),sSt.forEach(t),imr=r($De," \u2014 "),cH=n($De,"A",{href:!0});var lSt=s(cH);dmr=r(lSt,"TapasForQuestionAnswering"),lSt.forEach(t),cmr=r($De," (TAPAS model)"),$De.forEach(t),nSt.forEach(t),fmr=i(Ca),rT=n(Ca,"P",{});var kDe=s(rT);mmr=r(kDe,"The model is set in evaluation mode by default using "),Ove=n(kDe,"CODE",{});var iSt=s(Ove);gmr=r(iSt,"model.eval()"),iSt.forEach(t),hmr=r(kDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vve=n(kDe,"CODE",{});var dSt=s(Vve);pmr=r(dSt,"model.train()"),dSt.forEach(t),kDe.forEach(t),_mr=i(Ca),T(tT.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),NUe=i(f),Bd=n(f,"H2",{class:!0});var QJe=s(Bd);aT=n(QJe,"A",{id:!0,class:!0,href:!0});var cSt=s(aT);Xve=n(cSt,"SPAN",{});var fSt=s(Xve);T(X9.$$.fragment,fSt),fSt.forEach(t),cSt.forEach(t),umr=i(QJe),zve=n(QJe,"SPAN",{});var mSt=s(zve);bmr=r(mSt,"AutoModelForImageClassification"),mSt.forEach(t),QJe.forEach(t),qUe=i(f),Xo=n(f,"DIV",{class:!0});var wl=s(Xo);T(z9.$$.fragment,wl),vmr=i(wl),Id=n(wl,"P",{});var _ne=s(Id);Fmr=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fH=n(_ne,"A",{href:!0});var gSt=s(fH);Tmr=r(gSt,"from_pretrained()"),gSt.forEach(t),Mmr=r(_ne," class method or the "),mH=n(_ne,"A",{href:!0});var hSt=s(mH);Emr=r(hSt,"from_config()"),hSt.forEach(t),Cmr=r(_ne,` class
method.`),_ne.forEach(t),wmr=i(wl),W9=n(wl,"P",{});var UJe=s(W9);Amr=r(UJe,"This class cannot be instantiated directly using "),Wve=n(UJe,"CODE",{});var pSt=s(Wve);Lmr=r(pSt,"__init__()"),pSt.forEach(t),ymr=r(UJe," (throws an error)."),UJe.forEach(t),xmr=i(wl),Et=n(wl,"DIV",{class:!0});var qA=s(Et);T(Q9.$$.fragment,qA),$mr=i(qA),Qve=n(qA,"P",{});var _St=s(Qve);kmr=r(_St,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_St.forEach(t),Smr=i(qA),Nd=n(qA,"P",{});var une=s(Nd);Rmr=r(une,`Note:
Loading a model from its configuration file does `),Uve=n(une,"STRONG",{});var uSt=s(Uve);Pmr=r(uSt,"not"),uSt.forEach(t),Bmr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(une,"A",{href:!0});var bSt=s(gH);Imr=r(bSt,"from_pretrained()"),bSt.forEach(t),Nmr=r(une," to load the model weights."),une.forEach(t),qmr=i(qA),T(nT.$$.fragment,qA),qA.forEach(t),jmr=i(wl),io=n(wl,"DIV",{class:!0});var wa=s(io);T(U9.$$.fragment,wa),Dmr=i(wa),Hve=n(wa,"P",{});var vSt=s(Hve);Gmr=r(vSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vSt.forEach(t),Omr=i(wa),en=n(wa,"P",{});var jA=s(en);Vmr=r(jA,"The model class to instantiate is selected based on the "),Jve=n(jA,"CODE",{});var FSt=s(Jve);Xmr=r(FSt,"model_type"),FSt.forEach(t),zmr=r(jA,` property of the config object (either
passed as an argument or loaded from `),Yve=n(jA,"CODE",{});var TSt=s(Yve);Wmr=r(TSt,"pretrained_model_name_or_path"),TSt.forEach(t),Qmr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(jA,"CODE",{});var MSt=s(Kve);Umr=r(MSt,"pretrained_model_name_or_path"),MSt.forEach(t),Hmr=r(jA,":"),jA.forEach(t),Jmr=i(wa),be=n(wa,"UL",{});var Fe=s(be);sT=n(Fe,"LI",{});var SDe=s(sT);Zve=n(SDe,"STRONG",{});var ESt=s(Zve);Ymr=r(ESt,"beit"),ESt.forEach(t),Kmr=r(SDe," \u2014 "),hH=n(SDe,"A",{href:!0});var CSt=s(hH);Zmr=r(CSt,"BeitForImageClassification"),CSt.forEach(t),egr=r(SDe," (BEiT model)"),SDe.forEach(t),ogr=i(Fe),lT=n(Fe,"LI",{});var RDe=s(lT);eFe=n(RDe,"STRONG",{});var wSt=s(eFe);rgr=r(wSt,"convnext"),wSt.forEach(t),tgr=r(RDe," \u2014 "),pH=n(RDe,"A",{href:!0});var ASt=s(pH);agr=r(ASt,"ConvNextForImageClassification"),ASt.forEach(t),ngr=r(RDe," (ConvNeXT model)"),RDe.forEach(t),sgr=i(Fe),iT=n(Fe,"LI",{});var PDe=s(iT);oFe=n(PDe,"STRONG",{});var LSt=s(oFe);lgr=r(LSt,"cvt"),LSt.forEach(t),igr=r(PDe," \u2014 "),_H=n(PDe,"A",{href:!0});var ySt=s(_H);dgr=r(ySt,"CvtForImageClassification"),ySt.forEach(t),cgr=r(PDe," (CvT model)"),PDe.forEach(t),fgr=i(Fe),dT=n(Fe,"LI",{});var BDe=s(dT);rFe=n(BDe,"STRONG",{});var xSt=s(rFe);mgr=r(xSt,"data2vec-vision"),xSt.forEach(t),ggr=r(BDe," \u2014 "),uH=n(BDe,"A",{href:!0});var $St=s(uH);hgr=r($St,"Data2VecVisionForImageClassification"),$St.forEach(t),pgr=r(BDe," (Data2VecVision model)"),BDe.forEach(t),_gr=i(Fe),sl=n(Fe,"LI",{});var tP=s(sl);tFe=n(tP,"STRONG",{});var kSt=s(tFe);ugr=r(kSt,"deit"),kSt.forEach(t),bgr=r(tP," \u2014 "),bH=n(tP,"A",{href:!0});var SSt=s(bH);vgr=r(SSt,"DeiTForImageClassification"),SSt.forEach(t),Fgr=r(tP," or "),vH=n(tP,"A",{href:!0});var RSt=s(vH);Tgr=r(RSt,"DeiTForImageClassificationWithTeacher"),RSt.forEach(t),Mgr=r(tP," (DeiT model)"),tP.forEach(t),Egr=i(Fe),cT=n(Fe,"LI",{});var IDe=s(cT);aFe=n(IDe,"STRONG",{});var PSt=s(aFe);Cgr=r(PSt,"imagegpt"),PSt.forEach(t),wgr=r(IDe," \u2014 "),FH=n(IDe,"A",{href:!0});var BSt=s(FH);Agr=r(BSt,"ImageGPTForImageClassification"),BSt.forEach(t),Lgr=r(IDe," (ImageGPT model)"),IDe.forEach(t),ygr=i(Fe),ll=n(Fe,"LI",{});var aP=s(ll);nFe=n(aP,"STRONG",{});var ISt=s(nFe);xgr=r(ISt,"levit"),ISt.forEach(t),$gr=r(aP," \u2014 "),TH=n(aP,"A",{href:!0});var NSt=s(TH);kgr=r(NSt,"LevitForImageClassification"),NSt.forEach(t),Sgr=r(aP," or "),MH=n(aP,"A",{href:!0});var qSt=s(MH);Rgr=r(qSt,"LevitForImageClassificationWithTeacher"),qSt.forEach(t),Pgr=r(aP," (LeViT model)"),aP.forEach(t),Bgr=i(Fe),fT=n(Fe,"LI",{});var NDe=s(fT);sFe=n(NDe,"STRONG",{});var jSt=s(sFe);Igr=r(jSt,"mobilevit"),jSt.forEach(t),Ngr=r(NDe," \u2014 "),EH=n(NDe,"A",{href:!0});var DSt=s(EH);qgr=r(DSt,"MobileViTForImageClassification"),DSt.forEach(t),jgr=r(NDe," (MobileViT model)"),NDe.forEach(t),Dgr=i(Fe),Ct=n(Fe,"LI",{});var Zf=s(Ct);lFe=n(Zf,"STRONG",{});var GSt=s(lFe);Ggr=r(GSt,"perceiver"),GSt.forEach(t),Ogr=r(Zf," \u2014 "),CH=n(Zf,"A",{href:!0});var OSt=s(CH);Vgr=r(OSt,"PerceiverForImageClassificationLearned"),OSt.forEach(t),Xgr=r(Zf," or "),wH=n(Zf,"A",{href:!0});var VSt=s(wH);zgr=r(VSt,"PerceiverForImageClassificationFourier"),VSt.forEach(t),Wgr=r(Zf," or "),AH=n(Zf,"A",{href:!0});var XSt=s(AH);Qgr=r(XSt,"PerceiverForImageClassificationConvProcessing"),XSt.forEach(t),Ugr=r(Zf," (Perceiver model)"),Zf.forEach(t),Hgr=i(Fe),mT=n(Fe,"LI",{});var qDe=s(mT);iFe=n(qDe,"STRONG",{});var zSt=s(iFe);Jgr=r(zSt,"poolformer"),zSt.forEach(t),Ygr=r(qDe," \u2014 "),LH=n(qDe,"A",{href:!0});var WSt=s(LH);Kgr=r(WSt,"PoolFormerForImageClassification"),WSt.forEach(t),Zgr=r(qDe," (PoolFormer model)"),qDe.forEach(t),ehr=i(Fe),gT=n(Fe,"LI",{});var jDe=s(gT);dFe=n(jDe,"STRONG",{});var QSt=s(dFe);ohr=r(QSt,"regnet"),QSt.forEach(t),rhr=r(jDe," \u2014 "),yH=n(jDe,"A",{href:!0});var USt=s(yH);thr=r(USt,"RegNetForImageClassification"),USt.forEach(t),ahr=r(jDe," (RegNet model)"),jDe.forEach(t),nhr=i(Fe),hT=n(Fe,"LI",{});var DDe=s(hT);cFe=n(DDe,"STRONG",{});var HSt=s(cFe);shr=r(HSt,"resnet"),HSt.forEach(t),lhr=r(DDe," \u2014 "),xH=n(DDe,"A",{href:!0});var JSt=s(xH);ihr=r(JSt,"ResNetForImageClassification"),JSt.forEach(t),dhr=r(DDe," (ResNet model)"),DDe.forEach(t),chr=i(Fe),pT=n(Fe,"LI",{});var GDe=s(pT);fFe=n(GDe,"STRONG",{});var YSt=s(fFe);fhr=r(YSt,"segformer"),YSt.forEach(t),mhr=r(GDe," \u2014 "),$H=n(GDe,"A",{href:!0});var KSt=s($H);ghr=r(KSt,"SegformerForImageClassification"),KSt.forEach(t),hhr=r(GDe," (SegFormer model)"),GDe.forEach(t),phr=i(Fe),_T=n(Fe,"LI",{});var ODe=s(_T);mFe=n(ODe,"STRONG",{});var ZSt=s(mFe);_hr=r(ZSt,"swin"),ZSt.forEach(t),uhr=r(ODe," \u2014 "),kH=n(ODe,"A",{href:!0});var eRt=s(kH);bhr=r(eRt,"SwinForImageClassification"),eRt.forEach(t),vhr=r(ODe," (Swin Transformer model)"),ODe.forEach(t),Fhr=i(Fe),uT=n(Fe,"LI",{});var VDe=s(uT);gFe=n(VDe,"STRONG",{});var oRt=s(gFe);Thr=r(oRt,"swinv2"),oRt.forEach(t),Mhr=r(VDe," \u2014 "),SH=n(VDe,"A",{href:!0});var rRt=s(SH);Ehr=r(rRt,"Swinv2ForImageClassification"),rRt.forEach(t),Chr=r(VDe," (Swin Transformer V2 model)"),VDe.forEach(t),whr=i(Fe),bT=n(Fe,"LI",{});var XDe=s(bT);hFe=n(XDe,"STRONG",{});var tRt=s(hFe);Ahr=r(tRt,"van"),tRt.forEach(t),Lhr=r(XDe," \u2014 "),RH=n(XDe,"A",{href:!0});var aRt=s(RH);yhr=r(aRt,"VanForImageClassification"),aRt.forEach(t),xhr=r(XDe," (VAN model)"),XDe.forEach(t),$hr=i(Fe),vT=n(Fe,"LI",{});var zDe=s(vT);pFe=n(zDe,"STRONG",{});var nRt=s(pFe);khr=r(nRt,"vit"),nRt.forEach(t),Shr=r(zDe," \u2014 "),PH=n(zDe,"A",{href:!0});var sRt=s(PH);Rhr=r(sRt,"ViTForImageClassification"),sRt.forEach(t),Phr=r(zDe," (ViT model)"),zDe.forEach(t),Fe.forEach(t),Bhr=i(wa),FT=n(wa,"P",{});var WDe=s(FT);Ihr=r(WDe,"The model is set in evaluation mode by default using "),_Fe=n(WDe,"CODE",{});var lRt=s(_Fe);Nhr=r(lRt,"model.eval()"),lRt.forEach(t),qhr=r(WDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=n(WDe,"CODE",{});var iRt=s(uFe);jhr=r(iRt,"model.train()"),iRt.forEach(t),WDe.forEach(t),Dhr=i(wa),T(TT.$$.fragment,wa),wa.forEach(t),wl.forEach(t),jUe=i(f),qd=n(f,"H2",{class:!0});var HJe=s(qd);MT=n(HJe,"A",{id:!0,class:!0,href:!0});var dRt=s(MT);bFe=n(dRt,"SPAN",{});var cRt=s(bFe);T(H9.$$.fragment,cRt),cRt.forEach(t),dRt.forEach(t),Ghr=i(HJe),vFe=n(HJe,"SPAN",{});var fRt=s(vFe);Ohr=r(fRt,"AutoModelForVideoClassification"),fRt.forEach(t),HJe.forEach(t),DUe=i(f),zo=n(f,"DIV",{class:!0});var Al=s(zo);T(J9.$$.fragment,Al),Vhr=i(Al),jd=n(Al,"P",{});var bne=s(jd);Xhr=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),BH=n(bne,"A",{href:!0});var mRt=s(BH);zhr=r(mRt,"from_pretrained()"),mRt.forEach(t),Whr=r(bne," class method or the "),IH=n(bne,"A",{href:!0});var gRt=s(IH);Qhr=r(gRt,"from_config()"),gRt.forEach(t),Uhr=r(bne,` class
method.`),bne.forEach(t),Hhr=i(Al),Y9=n(Al,"P",{});var JJe=s(Y9);Jhr=r(JJe,"This class cannot be instantiated directly using "),FFe=n(JJe,"CODE",{});var hRt=s(FFe);Yhr=r(hRt,"__init__()"),hRt.forEach(t),Khr=r(JJe," (throws an error)."),JJe.forEach(t),Zhr=i(Al),wt=n(Al,"DIV",{class:!0});var DA=s(wt);T(K9.$$.fragment,DA),epr=i(DA),TFe=n(DA,"P",{});var pRt=s(TFe);opr=r(pRt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),pRt.forEach(t),rpr=i(DA),Dd=n(DA,"P",{});var vne=s(Dd);tpr=r(vne,`Note:
Loading a model from its configuration file does `),MFe=n(vne,"STRONG",{});var _Rt=s(MFe);apr=r(_Rt,"not"),_Rt.forEach(t),npr=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(vne,"A",{href:!0});var uRt=s(NH);spr=r(uRt,"from_pretrained()"),uRt.forEach(t),lpr=r(vne," to load the model weights."),vne.forEach(t),ipr=i(DA),T(ET.$$.fragment,DA),DA.forEach(t),dpr=i(Al),co=n(Al,"DIV",{class:!0});var Aa=s(co);T(Z9.$$.fragment,Aa),cpr=i(Aa),EFe=n(Aa,"P",{});var bRt=s(EFe);fpr=r(bRt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),bRt.forEach(t),mpr=i(Aa),on=n(Aa,"P",{});var GA=s(on);gpr=r(GA,"The model class to instantiate is selected based on the "),CFe=n(GA,"CODE",{});var vRt=s(CFe);hpr=r(vRt,"model_type"),vRt.forEach(t),ppr=r(GA,` property of the config object (either
passed as an argument or loaded from `),wFe=n(GA,"CODE",{});var FRt=s(wFe);_pr=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),upr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(GA,"CODE",{});var TRt=s(AFe);bpr=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),vpr=r(GA,":"),GA.forEach(t),Fpr=i(Aa),LFe=n(Aa,"UL",{});var MRt=s(LFe);CT=n(MRt,"LI",{});var QDe=s(CT);yFe=n(QDe,"STRONG",{});var ERt=s(yFe);Tpr=r(ERt,"videomae"),ERt.forEach(t),Mpr=r(QDe," \u2014 "),qH=n(QDe,"A",{href:!0});var CRt=s(qH);Epr=r(CRt,"VideoMAEForVideoClassification"),CRt.forEach(t),Cpr=r(QDe," (VideoMAE model)"),QDe.forEach(t),MRt.forEach(t),wpr=i(Aa),wT=n(Aa,"P",{});var UDe=s(wT);Apr=r(UDe,"The model is set in evaluation mode by default using "),xFe=n(UDe,"CODE",{});var wRt=s(xFe);Lpr=r(wRt,"model.eval()"),wRt.forEach(t),ypr=r(UDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=n(UDe,"CODE",{});var ARt=s($Fe);xpr=r(ARt,"model.train()"),ARt.forEach(t),UDe.forEach(t),$pr=i(Aa),T(AT.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),GUe=i(f),Gd=n(f,"H2",{class:!0});var YJe=s(Gd);LT=n(YJe,"A",{id:!0,class:!0,href:!0});var LRt=s(LT);kFe=n(LRt,"SPAN",{});var yRt=s(kFe);T(ex.$$.fragment,yRt),yRt.forEach(t),LRt.forEach(t),kpr=i(YJe),SFe=n(YJe,"SPAN",{});var xRt=s(SFe);Spr=r(xRt,"AutoModelForVision2Seq"),xRt.forEach(t),YJe.forEach(t),OUe=i(f),Wo=n(f,"DIV",{class:!0});var Ll=s(Wo);T(ox.$$.fragment,Ll),Rpr=i(Ll),Od=n(Ll,"P",{});var Fne=s(Od);Ppr=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jH=n(Fne,"A",{href:!0});var $Rt=s(jH);Bpr=r($Rt,"from_pretrained()"),$Rt.forEach(t),Ipr=r(Fne," class method or the "),DH=n(Fne,"A",{href:!0});var kRt=s(DH);Npr=r(kRt,"from_config()"),kRt.forEach(t),qpr=r(Fne,` class
method.`),Fne.forEach(t),jpr=i(Ll),rx=n(Ll,"P",{});var KJe=s(rx);Dpr=r(KJe,"This class cannot be instantiated directly using "),RFe=n(KJe,"CODE",{});var SRt=s(RFe);Gpr=r(SRt,"__init__()"),SRt.forEach(t),Opr=r(KJe," (throws an error)."),KJe.forEach(t),Vpr=i(Ll),At=n(Ll,"DIV",{class:!0});var OA=s(At);T(tx.$$.fragment,OA),Xpr=i(OA),PFe=n(OA,"P",{});var RRt=s(PFe);zpr=r(RRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RRt.forEach(t),Wpr=i(OA),Vd=n(OA,"P",{});var Tne=s(Vd);Qpr=r(Tne,`Note:
Loading a model from its configuration file does `),BFe=n(Tne,"STRONG",{});var PRt=s(BFe);Upr=r(PRt,"not"),PRt.forEach(t),Hpr=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(Tne,"A",{href:!0});var BRt=s(GH);Jpr=r(BRt,"from_pretrained()"),BRt.forEach(t),Ypr=r(Tne," to load the model weights."),Tne.forEach(t),Kpr=i(OA),T(yT.$$.fragment,OA),OA.forEach(t),Zpr=i(Ll),fo=n(Ll,"DIV",{class:!0});var La=s(fo);T(ax.$$.fragment,La),e_r=i(La),IFe=n(La,"P",{});var IRt=s(IFe);o_r=r(IRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),IRt.forEach(t),r_r=i(La),rn=n(La,"P",{});var VA=s(rn);t_r=r(VA,"The model class to instantiate is selected based on the "),NFe=n(VA,"CODE",{});var NRt=s(NFe);a_r=r(NRt,"model_type"),NRt.forEach(t),n_r=r(VA,` property of the config object (either
passed as an argument or loaded from `),qFe=n(VA,"CODE",{});var qRt=s(qFe);s_r=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),l_r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(VA,"CODE",{});var jRt=s(jFe);i_r=r(jRt,"pretrained_model_name_or_path"),jRt.forEach(t),d_r=r(VA,":"),VA.forEach(t),c_r=i(La),DFe=n(La,"UL",{});var DRt=s(DFe);xT=n(DRt,"LI",{});var HDe=s(xT);GFe=n(HDe,"STRONG",{});var GRt=s(GFe);f_r=r(GRt,"vision-encoder-decoder"),GRt.forEach(t),m_r=r(HDe," \u2014 "),OH=n(HDe,"A",{href:!0});var ORt=s(OH);g_r=r(ORt,"VisionEncoderDecoderModel"),ORt.forEach(t),h_r=r(HDe," (Vision Encoder decoder model)"),HDe.forEach(t),DRt.forEach(t),p_r=i(La),$T=n(La,"P",{});var JDe=s($T);__r=r(JDe,"The model is set in evaluation mode by default using "),OFe=n(JDe,"CODE",{});var VRt=s(OFe);u_r=r(VRt,"model.eval()"),VRt.forEach(t),b_r=r(JDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=n(JDe,"CODE",{});var XRt=s(VFe);v_r=r(XRt,"model.train()"),XRt.forEach(t),JDe.forEach(t),F_r=i(La),T(kT.$$.fragment,La),La.forEach(t),Ll.forEach(t),VUe=i(f),Xd=n(f,"H2",{class:!0});var ZJe=s(Xd);ST=n(ZJe,"A",{id:!0,class:!0,href:!0});var zRt=s(ST);XFe=n(zRt,"SPAN",{});var WRt=s(XFe);T(nx.$$.fragment,WRt),WRt.forEach(t),zRt.forEach(t),T_r=i(ZJe),zFe=n(ZJe,"SPAN",{});var QRt=s(zFe);M_r=r(QRt,"AutoModelForVisualQuestionAnswering"),QRt.forEach(t),ZJe.forEach(t),XUe=i(f),Qo=n(f,"DIV",{class:!0});var yl=s(Qo);T(sx.$$.fragment,yl),E_r=i(yl),zd=n(yl,"P",{});var Mne=s(zd);C_r=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),VH=n(Mne,"A",{href:!0});var URt=s(VH);w_r=r(URt,"from_pretrained()"),URt.forEach(t),A_r=r(Mne," class method or the "),XH=n(Mne,"A",{href:!0});var HRt=s(XH);L_r=r(HRt,"from_config()"),HRt.forEach(t),y_r=r(Mne,` class
method.`),Mne.forEach(t),x_r=i(yl),lx=n(yl,"P",{});var eYe=s(lx);$_r=r(eYe,"This class cannot be instantiated directly using "),WFe=n(eYe,"CODE",{});var JRt=s(WFe);k_r=r(JRt,"__init__()"),JRt.forEach(t),S_r=r(eYe," (throws an error)."),eYe.forEach(t),R_r=i(yl),Lt=n(yl,"DIV",{class:!0});var XA=s(Lt);T(ix.$$.fragment,XA),P_r=i(XA),QFe=n(XA,"P",{});var YRt=s(QFe);B_r=r(YRt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),YRt.forEach(t),I_r=i(XA),Wd=n(XA,"P",{});var Ene=s(Wd);N_r=r(Ene,`Note:
Loading a model from its configuration file does `),UFe=n(Ene,"STRONG",{});var KRt=s(UFe);q_r=r(KRt,"not"),KRt.forEach(t),j_r=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(Ene,"A",{href:!0});var ZRt=s(zH);D_r=r(ZRt,"from_pretrained()"),ZRt.forEach(t),G_r=r(Ene," to load the model weights."),Ene.forEach(t),O_r=i(XA),T(RT.$$.fragment,XA),XA.forEach(t),V_r=i(yl),mo=n(yl,"DIV",{class:!0});var ya=s(mo);T(dx.$$.fragment,ya),X_r=i(ya),HFe=n(ya,"P",{});var ePt=s(HFe);z_r=r(ePt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ePt.forEach(t),W_r=i(ya),tn=n(ya,"P",{});var zA=s(tn);Q_r=r(zA,"The model class to instantiate is selected based on the "),JFe=n(zA,"CODE",{});var oPt=s(JFe);U_r=r(oPt,"model_type"),oPt.forEach(t),H_r=r(zA,` property of the config object (either
passed as an argument or loaded from `),YFe=n(zA,"CODE",{});var rPt=s(YFe);J_r=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),Y_r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(zA,"CODE",{});var tPt=s(KFe);K_r=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),Z_r=r(zA,":"),zA.forEach(t),eur=i(ya),ZFe=n(ya,"UL",{});var aPt=s(ZFe);PT=n(aPt,"LI",{});var YDe=s(PT);e6e=n(YDe,"STRONG",{});var nPt=s(e6e);our=r(nPt,"vilt"),nPt.forEach(t),rur=r(YDe," \u2014 "),WH=n(YDe,"A",{href:!0});var sPt=s(WH);tur=r(sPt,"ViltForQuestionAnswering"),sPt.forEach(t),aur=r(YDe," (ViLT model)"),YDe.forEach(t),aPt.forEach(t),nur=i(ya),BT=n(ya,"P",{});var KDe=s(BT);sur=r(KDe,"The model is set in evaluation mode by default using "),o6e=n(KDe,"CODE",{});var lPt=s(o6e);lur=r(lPt,"model.eval()"),lPt.forEach(t),iur=r(KDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r6e=n(KDe,"CODE",{});var iPt=s(r6e);dur=r(iPt,"model.train()"),iPt.forEach(t),KDe.forEach(t),cur=i(ya),T(IT.$$.fragment,ya),ya.forEach(t),yl.forEach(t),zUe=i(f),Qd=n(f,"H2",{class:!0});var oYe=s(Qd);NT=n(oYe,"A",{id:!0,class:!0,href:!0});var dPt=s(NT);t6e=n(dPt,"SPAN",{});var cPt=s(t6e);T(cx.$$.fragment,cPt),cPt.forEach(t),dPt.forEach(t),fur=i(oYe),a6e=n(oYe,"SPAN",{});var fPt=s(a6e);mur=r(fPt,"AutoModelForAudioClassification"),fPt.forEach(t),oYe.forEach(t),WUe=i(f),Uo=n(f,"DIV",{class:!0});var xl=s(Uo);T(fx.$$.fragment,xl),gur=i(xl),Ud=n(xl,"P",{});var Cne=s(Ud);hur=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QH=n(Cne,"A",{href:!0});var mPt=s(QH);pur=r(mPt,"from_pretrained()"),mPt.forEach(t),_ur=r(Cne," class method or the "),UH=n(Cne,"A",{href:!0});var gPt=s(UH);uur=r(gPt,"from_config()"),gPt.forEach(t),bur=r(Cne,` class
method.`),Cne.forEach(t),vur=i(xl),mx=n(xl,"P",{});var rYe=s(mx);Fur=r(rYe,"This class cannot be instantiated directly using "),n6e=n(rYe,"CODE",{});var hPt=s(n6e);Tur=r(hPt,"__init__()"),hPt.forEach(t),Mur=r(rYe," (throws an error)."),rYe.forEach(t),Eur=i(xl),yt=n(xl,"DIV",{class:!0});var WA=s(yt);T(gx.$$.fragment,WA),Cur=i(WA),s6e=n(WA,"P",{});var pPt=s(s6e);wur=r(pPt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pPt.forEach(t),Aur=i(WA),Hd=n(WA,"P",{});var wne=s(Hd);Lur=r(wne,`Note:
Loading a model from its configuration file does `),l6e=n(wne,"STRONG",{});var _Pt=s(l6e);yur=r(_Pt,"not"),_Pt.forEach(t),xur=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(wne,"A",{href:!0});var uPt=s(HH);$ur=r(uPt,"from_pretrained()"),uPt.forEach(t),kur=r(wne," to load the model weights."),wne.forEach(t),Sur=i(WA),T(qT.$$.fragment,WA),WA.forEach(t),Rur=i(xl),go=n(xl,"DIV",{class:!0});var xa=s(go);T(hx.$$.fragment,xa),Pur=i(xa),i6e=n(xa,"P",{});var bPt=s(i6e);Bur=r(bPt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),bPt.forEach(t),Iur=i(xa),an=n(xa,"P",{});var QA=s(an);Nur=r(QA,"The model class to instantiate is selected based on the "),d6e=n(QA,"CODE",{});var vPt=s(d6e);qur=r(vPt,"model_type"),vPt.forEach(t),jur=r(QA,` property of the config object (either
passed as an argument or loaded from `),c6e=n(QA,"CODE",{});var FPt=s(c6e);Dur=r(FPt,"pretrained_model_name_or_path"),FPt.forEach(t),Gur=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=n(QA,"CODE",{});var TPt=s(f6e);Our=r(TPt,"pretrained_model_name_or_path"),TPt.forEach(t),Vur=r(QA,":"),QA.forEach(t),Xur=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);jT=n(We,"LI",{});var ZDe=s(jT);m6e=n(ZDe,"STRONG",{});var MPt=s(m6e);zur=r(MPt,"data2vec-audio"),MPt.forEach(t),Wur=r(ZDe," \u2014 "),JH=n(ZDe,"A",{href:!0});var EPt=s(JH);Qur=r(EPt,"Data2VecAudioForSequenceClassification"),EPt.forEach(t),Uur=r(ZDe," (Data2VecAudio model)"),ZDe.forEach(t),Hur=i(We),DT=n(We,"LI",{});var eGe=s(DT);g6e=n(eGe,"STRONG",{});var CPt=s(g6e);Jur=r(CPt,"hubert"),CPt.forEach(t),Yur=r(eGe," \u2014 "),YH=n(eGe,"A",{href:!0});var wPt=s(YH);Kur=r(wPt,"HubertForSequenceClassification"),wPt.forEach(t),Zur=r(eGe," (Hubert model)"),eGe.forEach(t),e1r=i(We),GT=n(We,"LI",{});var oGe=s(GT);h6e=n(oGe,"STRONG",{});var APt=s(h6e);o1r=r(APt,"sew"),APt.forEach(t),r1r=r(oGe," \u2014 "),KH=n(oGe,"A",{href:!0});var LPt=s(KH);t1r=r(LPt,"SEWForSequenceClassification"),LPt.forEach(t),a1r=r(oGe," (SEW model)"),oGe.forEach(t),n1r=i(We),OT=n(We,"LI",{});var rGe=s(OT);p6e=n(rGe,"STRONG",{});var yPt=s(p6e);s1r=r(yPt,"sew-d"),yPt.forEach(t),l1r=r(rGe," \u2014 "),ZH=n(rGe,"A",{href:!0});var xPt=s(ZH);i1r=r(xPt,"SEWDForSequenceClassification"),xPt.forEach(t),d1r=r(rGe," (SEW-D model)"),rGe.forEach(t),c1r=i(We),VT=n(We,"LI",{});var tGe=s(VT);_6e=n(tGe,"STRONG",{});var $Pt=s(_6e);f1r=r($Pt,"unispeech"),$Pt.forEach(t),m1r=r(tGe," \u2014 "),eJ=n(tGe,"A",{href:!0});var kPt=s(eJ);g1r=r(kPt,"UniSpeechForSequenceClassification"),kPt.forEach(t),h1r=r(tGe," (UniSpeech model)"),tGe.forEach(t),p1r=i(We),XT=n(We,"LI",{});var aGe=s(XT);u6e=n(aGe,"STRONG",{});var SPt=s(u6e);_1r=r(SPt,"unispeech-sat"),SPt.forEach(t),u1r=r(aGe," \u2014 "),oJ=n(aGe,"A",{href:!0});var RPt=s(oJ);b1r=r(RPt,"UniSpeechSatForSequenceClassification"),RPt.forEach(t),v1r=r(aGe," (UniSpeechSat model)"),aGe.forEach(t),F1r=i(We),zT=n(We,"LI",{});var nGe=s(zT);b6e=n(nGe,"STRONG",{});var PPt=s(b6e);T1r=r(PPt,"wav2vec2"),PPt.forEach(t),M1r=r(nGe," \u2014 "),rJ=n(nGe,"A",{href:!0});var BPt=s(rJ);E1r=r(BPt,"Wav2Vec2ForSequenceClassification"),BPt.forEach(t),C1r=r(nGe," (Wav2Vec2 model)"),nGe.forEach(t),w1r=i(We),WT=n(We,"LI",{});var sGe=s(WT);v6e=n(sGe,"STRONG",{});var IPt=s(v6e);A1r=r(IPt,"wav2vec2-conformer"),IPt.forEach(t),L1r=r(sGe," \u2014 "),tJ=n(sGe,"A",{href:!0});var NPt=s(tJ);y1r=r(NPt,"Wav2Vec2ConformerForSequenceClassification"),NPt.forEach(t),x1r=r(sGe," (Wav2Vec2-Conformer model)"),sGe.forEach(t),$1r=i(We),QT=n(We,"LI",{});var lGe=s(QT);F6e=n(lGe,"STRONG",{});var qPt=s(F6e);k1r=r(qPt,"wavlm"),qPt.forEach(t),S1r=r(lGe," \u2014 "),aJ=n(lGe,"A",{href:!0});var jPt=s(aJ);R1r=r(jPt,"WavLMForSequenceClassification"),jPt.forEach(t),P1r=r(lGe," (WavLM model)"),lGe.forEach(t),We.forEach(t),B1r=i(xa),UT=n(xa,"P",{});var iGe=s(UT);I1r=r(iGe,"The model is set in evaluation mode by default using "),T6e=n(iGe,"CODE",{});var DPt=s(T6e);N1r=r(DPt,"model.eval()"),DPt.forEach(t),q1r=r(iGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M6e=n(iGe,"CODE",{});var GPt=s(M6e);j1r=r(GPt,"model.train()"),GPt.forEach(t),iGe.forEach(t),D1r=i(xa),T(HT.$$.fragment,xa),xa.forEach(t),xl.forEach(t),QUe=i(f),Jd=n(f,"H2",{class:!0});var tYe=s(Jd);JT=n(tYe,"A",{id:!0,class:!0,href:!0});var OPt=s(JT);E6e=n(OPt,"SPAN",{});var VPt=s(E6e);T(px.$$.fragment,VPt),VPt.forEach(t),OPt.forEach(t),G1r=i(tYe),C6e=n(tYe,"SPAN",{});var XPt=s(C6e);O1r=r(XPt,"AutoModelForAudioFrameClassification"),XPt.forEach(t),tYe.forEach(t),UUe=i(f),Ho=n(f,"DIV",{class:!0});var $l=s(Ho);T(_x.$$.fragment,$l),V1r=i($l),Yd=n($l,"P",{});var Ane=s(Yd);X1r=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),nJ=n(Ane,"A",{href:!0});var zPt=s(nJ);z1r=r(zPt,"from_pretrained()"),zPt.forEach(t),W1r=r(Ane," class method or the "),sJ=n(Ane,"A",{href:!0});var WPt=s(sJ);Q1r=r(WPt,"from_config()"),WPt.forEach(t),U1r=r(Ane,` class
method.`),Ane.forEach(t),H1r=i($l),ux=n($l,"P",{});var aYe=s(ux);J1r=r(aYe,"This class cannot be instantiated directly using "),w6e=n(aYe,"CODE",{});var QPt=s(w6e);Y1r=r(QPt,"__init__()"),QPt.forEach(t),K1r=r(aYe," (throws an error)."),aYe.forEach(t),Z1r=i($l),xt=n($l,"DIV",{class:!0});var UA=s(xt);T(bx.$$.fragment,UA),e8r=i(UA),A6e=n(UA,"P",{});var UPt=s(A6e);o8r=r(UPt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),UPt.forEach(t),r8r=i(UA),Kd=n(UA,"P",{});var Lne=s(Kd);t8r=r(Lne,`Note:
Loading a model from its configuration file does `),L6e=n(Lne,"STRONG",{});var HPt=s(L6e);a8r=r(HPt,"not"),HPt.forEach(t),n8r=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(Lne,"A",{href:!0});var JPt=s(lJ);s8r=r(JPt,"from_pretrained()"),JPt.forEach(t),l8r=r(Lne," to load the model weights."),Lne.forEach(t),i8r=i(UA),T(YT.$$.fragment,UA),UA.forEach(t),d8r=i($l),ho=n($l,"DIV",{class:!0});var $a=s(ho);T(vx.$$.fragment,$a),c8r=i($a),y6e=n($a,"P",{});var YPt=s(y6e);f8r=r(YPt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),YPt.forEach(t),m8r=i($a),nn=n($a,"P",{});var HA=s(nn);g8r=r(HA,"The model class to instantiate is selected based on the "),x6e=n(HA,"CODE",{});var KPt=s(x6e);h8r=r(KPt,"model_type"),KPt.forEach(t),p8r=r(HA,` property of the config object (either
passed as an argument or loaded from `),$6e=n(HA,"CODE",{});var ZPt=s($6e);_8r=r(ZPt,"pretrained_model_name_or_path"),ZPt.forEach(t),u8r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=n(HA,"CODE",{});var eBt=s(k6e);b8r=r(eBt,"pretrained_model_name_or_path"),eBt.forEach(t),v8r=r(HA,":"),HA.forEach(t),F8r=i($a),st=n($a,"UL",{});var kl=s(st);KT=n(kl,"LI",{});var dGe=s(KT);S6e=n(dGe,"STRONG",{});var oBt=s(S6e);T8r=r(oBt,"data2vec-audio"),oBt.forEach(t),M8r=r(dGe," \u2014 "),iJ=n(dGe,"A",{href:!0});var rBt=s(iJ);E8r=r(rBt,"Data2VecAudioForAudioFrameClassification"),rBt.forEach(t),C8r=r(dGe," (Data2VecAudio model)"),dGe.forEach(t),w8r=i(kl),ZT=n(kl,"LI",{});var cGe=s(ZT);R6e=n(cGe,"STRONG",{});var tBt=s(R6e);A8r=r(tBt,"unispeech-sat"),tBt.forEach(t),L8r=r(cGe," \u2014 "),dJ=n(cGe,"A",{href:!0});var aBt=s(dJ);y8r=r(aBt,"UniSpeechSatForAudioFrameClassification"),aBt.forEach(t),x8r=r(cGe," (UniSpeechSat model)"),cGe.forEach(t),$8r=i(kl),e7=n(kl,"LI",{});var fGe=s(e7);P6e=n(fGe,"STRONG",{});var nBt=s(P6e);k8r=r(nBt,"wav2vec2"),nBt.forEach(t),S8r=r(fGe," \u2014 "),cJ=n(fGe,"A",{href:!0});var sBt=s(cJ);R8r=r(sBt,"Wav2Vec2ForAudioFrameClassification"),sBt.forEach(t),P8r=r(fGe," (Wav2Vec2 model)"),fGe.forEach(t),B8r=i(kl),o7=n(kl,"LI",{});var mGe=s(o7);B6e=n(mGe,"STRONG",{});var lBt=s(B6e);I8r=r(lBt,"wav2vec2-conformer"),lBt.forEach(t),N8r=r(mGe," \u2014 "),fJ=n(mGe,"A",{href:!0});var iBt=s(fJ);q8r=r(iBt,"Wav2Vec2ConformerForAudioFrameClassification"),iBt.forEach(t),j8r=r(mGe," (Wav2Vec2-Conformer model)"),mGe.forEach(t),D8r=i(kl),r7=n(kl,"LI",{});var gGe=s(r7);I6e=n(gGe,"STRONG",{});var dBt=s(I6e);G8r=r(dBt,"wavlm"),dBt.forEach(t),O8r=r(gGe," \u2014 "),mJ=n(gGe,"A",{href:!0});var cBt=s(mJ);V8r=r(cBt,"WavLMForAudioFrameClassification"),cBt.forEach(t),X8r=r(gGe," (WavLM model)"),gGe.forEach(t),kl.forEach(t),z8r=i($a),t7=n($a,"P",{});var hGe=s(t7);W8r=r(hGe,"The model is set in evaluation mode by default using "),N6e=n(hGe,"CODE",{});var fBt=s(N6e);Q8r=r(fBt,"model.eval()"),fBt.forEach(t),U8r=r(hGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q6e=n(hGe,"CODE",{});var mBt=s(q6e);H8r=r(mBt,"model.train()"),mBt.forEach(t),hGe.forEach(t),J8r=i($a),T(a7.$$.fragment,$a),$a.forEach(t),$l.forEach(t),HUe=i(f),Zd=n(f,"H2",{class:!0});var nYe=s(Zd);n7=n(nYe,"A",{id:!0,class:!0,href:!0});var gBt=s(n7);j6e=n(gBt,"SPAN",{});var hBt=s(j6e);T(Fx.$$.fragment,hBt),hBt.forEach(t),gBt.forEach(t),Y8r=i(nYe),D6e=n(nYe,"SPAN",{});var pBt=s(D6e);K8r=r(pBt,"AutoModelForCTC"),pBt.forEach(t),nYe.forEach(t),JUe=i(f),Jo=n(f,"DIV",{class:!0});var Sl=s(Jo);T(Tx.$$.fragment,Sl),Z8r=i(Sl),ec=n(Sl,"P",{});var yne=s(ec);e2r=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gJ=n(yne,"A",{href:!0});var _Bt=s(gJ);o2r=r(_Bt,"from_pretrained()"),_Bt.forEach(t),r2r=r(yne," class method or the "),hJ=n(yne,"A",{href:!0});var uBt=s(hJ);t2r=r(uBt,"from_config()"),uBt.forEach(t),a2r=r(yne,` class
method.`),yne.forEach(t),n2r=i(Sl),Mx=n(Sl,"P",{});var sYe=s(Mx);s2r=r(sYe,"This class cannot be instantiated directly using "),G6e=n(sYe,"CODE",{});var bBt=s(G6e);l2r=r(bBt,"__init__()"),bBt.forEach(t),i2r=r(sYe," (throws an error)."),sYe.forEach(t),d2r=i(Sl),$t=n(Sl,"DIV",{class:!0});var JA=s($t);T(Ex.$$.fragment,JA),c2r=i(JA),O6e=n(JA,"P",{});var vBt=s(O6e);f2r=r(vBt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vBt.forEach(t),m2r=i(JA),oc=n(JA,"P",{});var xne=s(oc);g2r=r(xne,`Note:
Loading a model from its configuration file does `),V6e=n(xne,"STRONG",{});var FBt=s(V6e);h2r=r(FBt,"not"),FBt.forEach(t),p2r=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(xne,"A",{href:!0});var TBt=s(pJ);_2r=r(TBt,"from_pretrained()"),TBt.forEach(t),u2r=r(xne," to load the model weights."),xne.forEach(t),b2r=i(JA),T(s7.$$.fragment,JA),JA.forEach(t),v2r=i(Sl),po=n(Sl,"DIV",{class:!0});var ka=s(po);T(Cx.$$.fragment,ka),F2r=i(ka),X6e=n(ka,"P",{});var MBt=s(X6e);T2r=r(MBt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),MBt.forEach(t),M2r=i(ka),sn=n(ka,"P",{});var YA=s(sn);E2r=r(YA,"The model class to instantiate is selected based on the "),z6e=n(YA,"CODE",{});var EBt=s(z6e);C2r=r(EBt,"model_type"),EBt.forEach(t),w2r=r(YA,` property of the config object (either
passed as an argument or loaded from `),W6e=n(YA,"CODE",{});var CBt=s(W6e);A2r=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),L2r=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=n(YA,"CODE",{});var wBt=s(Q6e);y2r=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),x2r=r(YA,":"),YA.forEach(t),$2r=i(ka),Le=n(ka,"UL",{});var Be=s(Le);l7=n(Be,"LI",{});var pGe=s(l7);U6e=n(pGe,"STRONG",{});var ABt=s(U6e);k2r=r(ABt,"data2vec-audio"),ABt.forEach(t),S2r=r(pGe," \u2014 "),_J=n(pGe,"A",{href:!0});var LBt=s(_J);R2r=r(LBt,"Data2VecAudioForCTC"),LBt.forEach(t),P2r=r(pGe," (Data2VecAudio model)"),pGe.forEach(t),B2r=i(Be),i7=n(Be,"LI",{});var _Ge=s(i7);H6e=n(_Ge,"STRONG",{});var yBt=s(H6e);I2r=r(yBt,"hubert"),yBt.forEach(t),N2r=r(_Ge," \u2014 "),uJ=n(_Ge,"A",{href:!0});var xBt=s(uJ);q2r=r(xBt,"HubertForCTC"),xBt.forEach(t),j2r=r(_Ge," (Hubert model)"),_Ge.forEach(t),D2r=i(Be),d7=n(Be,"LI",{});var uGe=s(d7);J6e=n(uGe,"STRONG",{});var $Bt=s(J6e);G2r=r($Bt,"mctct"),$Bt.forEach(t),O2r=r(uGe," \u2014 "),bJ=n(uGe,"A",{href:!0});var kBt=s(bJ);V2r=r(kBt,"MCTCTForCTC"),kBt.forEach(t),X2r=r(uGe," (M-CTC-T model)"),uGe.forEach(t),z2r=i(Be),c7=n(Be,"LI",{});var bGe=s(c7);Y6e=n(bGe,"STRONG",{});var SBt=s(Y6e);W2r=r(SBt,"sew"),SBt.forEach(t),Q2r=r(bGe," \u2014 "),vJ=n(bGe,"A",{href:!0});var RBt=s(vJ);U2r=r(RBt,"SEWForCTC"),RBt.forEach(t),H2r=r(bGe," (SEW model)"),bGe.forEach(t),J2r=i(Be),f7=n(Be,"LI",{});var vGe=s(f7);K6e=n(vGe,"STRONG",{});var PBt=s(K6e);Y2r=r(PBt,"sew-d"),PBt.forEach(t),K2r=r(vGe," \u2014 "),FJ=n(vGe,"A",{href:!0});var BBt=s(FJ);Z2r=r(BBt,"SEWDForCTC"),BBt.forEach(t),ebr=r(vGe," (SEW-D model)"),vGe.forEach(t),obr=i(Be),m7=n(Be,"LI",{});var FGe=s(m7);Z6e=n(FGe,"STRONG",{});var IBt=s(Z6e);rbr=r(IBt,"unispeech"),IBt.forEach(t),tbr=r(FGe," \u2014 "),TJ=n(FGe,"A",{href:!0});var NBt=s(TJ);abr=r(NBt,"UniSpeechForCTC"),NBt.forEach(t),nbr=r(FGe," (UniSpeech model)"),FGe.forEach(t),sbr=i(Be),g7=n(Be,"LI",{});var TGe=s(g7);eTe=n(TGe,"STRONG",{});var qBt=s(eTe);lbr=r(qBt,"unispeech-sat"),qBt.forEach(t),ibr=r(TGe," \u2014 "),MJ=n(TGe,"A",{href:!0});var jBt=s(MJ);dbr=r(jBt,"UniSpeechSatForCTC"),jBt.forEach(t),cbr=r(TGe," (UniSpeechSat model)"),TGe.forEach(t),fbr=i(Be),h7=n(Be,"LI",{});var MGe=s(h7);oTe=n(MGe,"STRONG",{});var DBt=s(oTe);mbr=r(DBt,"wav2vec2"),DBt.forEach(t),gbr=r(MGe," \u2014 "),EJ=n(MGe,"A",{href:!0});var GBt=s(EJ);hbr=r(GBt,"Wav2Vec2ForCTC"),GBt.forEach(t),pbr=r(MGe," (Wav2Vec2 model)"),MGe.forEach(t),_br=i(Be),p7=n(Be,"LI",{});var EGe=s(p7);rTe=n(EGe,"STRONG",{});var OBt=s(rTe);ubr=r(OBt,"wav2vec2-conformer"),OBt.forEach(t),bbr=r(EGe," \u2014 "),CJ=n(EGe,"A",{href:!0});var VBt=s(CJ);vbr=r(VBt,"Wav2Vec2ConformerForCTC"),VBt.forEach(t),Fbr=r(EGe," (Wav2Vec2-Conformer model)"),EGe.forEach(t),Tbr=i(Be),_7=n(Be,"LI",{});var CGe=s(_7);tTe=n(CGe,"STRONG",{});var XBt=s(tTe);Mbr=r(XBt,"wavlm"),XBt.forEach(t),Ebr=r(CGe," \u2014 "),wJ=n(CGe,"A",{href:!0});var zBt=s(wJ);Cbr=r(zBt,"WavLMForCTC"),zBt.forEach(t),wbr=r(CGe," (WavLM model)"),CGe.forEach(t),Be.forEach(t),Abr=i(ka),u7=n(ka,"P",{});var wGe=s(u7);Lbr=r(wGe,"The model is set in evaluation mode by default using "),aTe=n(wGe,"CODE",{});var WBt=s(aTe);ybr=r(WBt,"model.eval()"),WBt.forEach(t),xbr=r(wGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nTe=n(wGe,"CODE",{});var QBt=s(nTe);$br=r(QBt,"model.train()"),QBt.forEach(t),wGe.forEach(t),kbr=i(ka),T(b7.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),YUe=i(f),rc=n(f,"H2",{class:!0});var lYe=s(rc);v7=n(lYe,"A",{id:!0,class:!0,href:!0});var UBt=s(v7);sTe=n(UBt,"SPAN",{});var HBt=s(sTe);T(wx.$$.fragment,HBt),HBt.forEach(t),UBt.forEach(t),Sbr=i(lYe),lTe=n(lYe,"SPAN",{});var JBt=s(lTe);Rbr=r(JBt,"AutoModelForSpeechSeq2Seq"),JBt.forEach(t),lYe.forEach(t),KUe=i(f),Yo=n(f,"DIV",{class:!0});var Rl=s(Yo);T(Ax.$$.fragment,Rl),Pbr=i(Rl),tc=n(Rl,"P",{});var $ne=s(tc);Bbr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AJ=n($ne,"A",{href:!0});var YBt=s(AJ);Ibr=r(YBt,"from_pretrained()"),YBt.forEach(t),Nbr=r($ne," class method or the "),LJ=n($ne,"A",{href:!0});var KBt=s(LJ);qbr=r(KBt,"from_config()"),KBt.forEach(t),jbr=r($ne,` class
method.`),$ne.forEach(t),Dbr=i(Rl),Lx=n(Rl,"P",{});var iYe=s(Lx);Gbr=r(iYe,"This class cannot be instantiated directly using "),iTe=n(iYe,"CODE",{});var ZBt=s(iTe);Obr=r(ZBt,"__init__()"),ZBt.forEach(t),Vbr=r(iYe," (throws an error)."),iYe.forEach(t),Xbr=i(Rl),kt=n(Rl,"DIV",{class:!0});var KA=s(kt);T(yx.$$.fragment,KA),zbr=i(KA),dTe=n(KA,"P",{});var eIt=s(dTe);Wbr=r(eIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eIt.forEach(t),Qbr=i(KA),ac=n(KA,"P",{});var kne=s(ac);Ubr=r(kne,`Note:
Loading a model from its configuration file does `),cTe=n(kne,"STRONG",{});var oIt=s(cTe);Hbr=r(oIt,"not"),oIt.forEach(t),Jbr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(kne,"A",{href:!0});var rIt=s(yJ);Ybr=r(rIt,"from_pretrained()"),rIt.forEach(t),Kbr=r(kne," to load the model weights."),kne.forEach(t),Zbr=i(KA),T(F7.$$.fragment,KA),KA.forEach(t),evr=i(Rl),_o=n(Rl,"DIV",{class:!0});var Sa=s(_o);T(xx.$$.fragment,Sa),ovr=i(Sa),fTe=n(Sa,"P",{});var tIt=s(fTe);rvr=r(tIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tIt.forEach(t),tvr=i(Sa),ln=n(Sa,"P",{});var ZA=s(ln);avr=r(ZA,"The model class to instantiate is selected based on the "),mTe=n(ZA,"CODE",{});var aIt=s(mTe);nvr=r(aIt,"model_type"),aIt.forEach(t),svr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),gTe=n(ZA,"CODE",{});var nIt=s(gTe);lvr=r(nIt,"pretrained_model_name_or_path"),nIt.forEach(t),ivr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=n(ZA,"CODE",{});var sIt=s(hTe);dvr=r(sIt,"pretrained_model_name_or_path"),sIt.forEach(t),cvr=r(ZA,":"),ZA.forEach(t),fvr=i(Sa),$x=n(Sa,"UL",{});var dYe=s($x);T7=n(dYe,"LI",{});var AGe=s(T7);pTe=n(AGe,"STRONG",{});var lIt=s(pTe);mvr=r(lIt,"speech-encoder-decoder"),lIt.forEach(t),gvr=r(AGe," \u2014 "),xJ=n(AGe,"A",{href:!0});var iIt=s(xJ);hvr=r(iIt,"SpeechEncoderDecoderModel"),iIt.forEach(t),pvr=r(AGe," (Speech Encoder decoder model)"),AGe.forEach(t),_vr=i(dYe),M7=n(dYe,"LI",{});var LGe=s(M7);_Te=n(LGe,"STRONG",{});var dIt=s(_Te);uvr=r(dIt,"speech_to_text"),dIt.forEach(t),bvr=r(LGe," \u2014 "),$J=n(LGe,"A",{href:!0});var cIt=s($J);vvr=r(cIt,"Speech2TextForConditionalGeneration"),cIt.forEach(t),Fvr=r(LGe," (Speech2Text model)"),LGe.forEach(t),dYe.forEach(t),Tvr=i(Sa),E7=n(Sa,"P",{});var yGe=s(E7);Mvr=r(yGe,"The model is set in evaluation mode by default using "),uTe=n(yGe,"CODE",{});var fIt=s(uTe);Evr=r(fIt,"model.eval()"),fIt.forEach(t),Cvr=r(yGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bTe=n(yGe,"CODE",{});var mIt=s(bTe);wvr=r(mIt,"model.train()"),mIt.forEach(t),yGe.forEach(t),Avr=i(Sa),T(C7.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),ZUe=i(f),nc=n(f,"H2",{class:!0});var cYe=s(nc);w7=n(cYe,"A",{id:!0,class:!0,href:!0});var gIt=s(w7);vTe=n(gIt,"SPAN",{});var hIt=s(vTe);T(kx.$$.fragment,hIt),hIt.forEach(t),gIt.forEach(t),Lvr=i(cYe),FTe=n(cYe,"SPAN",{});var pIt=s(FTe);yvr=r(pIt,"AutoModelForAudioXVector"),pIt.forEach(t),cYe.forEach(t),eHe=i(f),Ko=n(f,"DIV",{class:!0});var Pl=s(Ko);T(Sx.$$.fragment,Pl),xvr=i(Pl),sc=n(Pl,"P",{});var Sne=s(sc);$vr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kJ=n(Sne,"A",{href:!0});var _It=s(kJ);kvr=r(_It,"from_pretrained()"),_It.forEach(t),Svr=r(Sne," class method or the "),SJ=n(Sne,"A",{href:!0});var uIt=s(SJ);Rvr=r(uIt,"from_config()"),uIt.forEach(t),Pvr=r(Sne,` class
method.`),Sne.forEach(t),Bvr=i(Pl),Rx=n(Pl,"P",{});var fYe=s(Rx);Ivr=r(fYe,"This class cannot be instantiated directly using "),TTe=n(fYe,"CODE",{});var bIt=s(TTe);Nvr=r(bIt,"__init__()"),bIt.forEach(t),qvr=r(fYe," (throws an error)."),fYe.forEach(t),jvr=i(Pl),St=n(Pl,"DIV",{class:!0});var eL=s(St);T(Px.$$.fragment,eL),Dvr=i(eL),MTe=n(eL,"P",{});var vIt=s(MTe);Gvr=r(vIt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vIt.forEach(t),Ovr=i(eL),lc=n(eL,"P",{});var Rne=s(lc);Vvr=r(Rne,`Note:
Loading a model from its configuration file does `),ETe=n(Rne,"STRONG",{});var FIt=s(ETe);Xvr=r(FIt,"not"),FIt.forEach(t),zvr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Rne,"A",{href:!0});var TIt=s(RJ);Wvr=r(TIt,"from_pretrained()"),TIt.forEach(t),Qvr=r(Rne," to load the model weights."),Rne.forEach(t),Uvr=i(eL),T(A7.$$.fragment,eL),eL.forEach(t),Hvr=i(Pl),uo=n(Pl,"DIV",{class:!0});var Ra=s(uo);T(Bx.$$.fragment,Ra),Jvr=i(Ra),CTe=n(Ra,"P",{});var MIt=s(CTe);Yvr=r(MIt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),MIt.forEach(t),Kvr=i(Ra),dn=n(Ra,"P",{});var oL=s(dn);Zvr=r(oL,"The model class to instantiate is selected based on the "),wTe=n(oL,"CODE",{});var EIt=s(wTe);eFr=r(EIt,"model_type"),EIt.forEach(t),oFr=r(oL,` property of the config object (either
passed as an argument or loaded from `),ATe=n(oL,"CODE",{});var CIt=s(ATe);rFr=r(CIt,"pretrained_model_name_or_path"),CIt.forEach(t),tFr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(oL,"CODE",{});var wIt=s(LTe);aFr=r(wIt,"pretrained_model_name_or_path"),wIt.forEach(t),nFr=r(oL,":"),oL.forEach(t),sFr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);L7=n(Bl,"LI",{});var xGe=s(L7);yTe=n(xGe,"STRONG",{});var AIt=s(yTe);lFr=r(AIt,"data2vec-audio"),AIt.forEach(t),iFr=r(xGe," \u2014 "),PJ=n(xGe,"A",{href:!0});var LIt=s(PJ);dFr=r(LIt,"Data2VecAudioForXVector"),LIt.forEach(t),cFr=r(xGe," (Data2VecAudio model)"),xGe.forEach(t),fFr=i(Bl),y7=n(Bl,"LI",{});var $Ge=s(y7);xTe=n($Ge,"STRONG",{});var yIt=s(xTe);mFr=r(yIt,"unispeech-sat"),yIt.forEach(t),gFr=r($Ge," \u2014 "),BJ=n($Ge,"A",{href:!0});var xIt=s(BJ);hFr=r(xIt,"UniSpeechSatForXVector"),xIt.forEach(t),pFr=r($Ge," (UniSpeechSat model)"),$Ge.forEach(t),_Fr=i(Bl),x7=n(Bl,"LI",{});var kGe=s(x7);$Te=n(kGe,"STRONG",{});var $It=s($Te);uFr=r($It,"wav2vec2"),$It.forEach(t),bFr=r(kGe," \u2014 "),IJ=n(kGe,"A",{href:!0});var kIt=s(IJ);vFr=r(kIt,"Wav2Vec2ForXVector"),kIt.forEach(t),FFr=r(kGe," (Wav2Vec2 model)"),kGe.forEach(t),TFr=i(Bl),$7=n(Bl,"LI",{});var SGe=s($7);kTe=n(SGe,"STRONG",{});var SIt=s(kTe);MFr=r(SIt,"wav2vec2-conformer"),SIt.forEach(t),EFr=r(SGe," \u2014 "),NJ=n(SGe,"A",{href:!0});var RIt=s(NJ);CFr=r(RIt,"Wav2Vec2ConformerForXVector"),RIt.forEach(t),wFr=r(SGe," (Wav2Vec2-Conformer model)"),SGe.forEach(t),AFr=i(Bl),k7=n(Bl,"LI",{});var RGe=s(k7);STe=n(RGe,"STRONG",{});var PIt=s(STe);LFr=r(PIt,"wavlm"),PIt.forEach(t),yFr=r(RGe," \u2014 "),qJ=n(RGe,"A",{href:!0});var BIt=s(qJ);xFr=r(BIt,"WavLMForXVector"),BIt.forEach(t),$Fr=r(RGe," (WavLM model)"),RGe.forEach(t),Bl.forEach(t),kFr=i(Ra),S7=n(Ra,"P",{});var PGe=s(S7);SFr=r(PGe,"The model is set in evaluation mode by default using "),RTe=n(PGe,"CODE",{});var IIt=s(RTe);RFr=r(IIt,"model.eval()"),IIt.forEach(t),PFr=r(PGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=n(PGe,"CODE",{});var NIt=s(PTe);BFr=r(NIt,"model.train()"),NIt.forEach(t),PGe.forEach(t),IFr=i(Ra),T(R7.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),oHe=i(f),ic=n(f,"H2",{class:!0});var mYe=s(ic);P7=n(mYe,"A",{id:!0,class:!0,href:!0});var qIt=s(P7);BTe=n(qIt,"SPAN",{});var jIt=s(BTe);T(Ix.$$.fragment,jIt),jIt.forEach(t),qIt.forEach(t),NFr=i(mYe),ITe=n(mYe,"SPAN",{});var DIt=s(ITe);qFr=r(DIt,"AutoModelForMaskedImageModeling"),DIt.forEach(t),mYe.forEach(t),rHe=i(f),Zo=n(f,"DIV",{class:!0});var Il=s(Zo);T(Nx.$$.fragment,Il),jFr=i(Il),dc=n(Il,"P",{});var Pne=s(dc);DFr=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jJ=n(Pne,"A",{href:!0});var GIt=s(jJ);GFr=r(GIt,"from_pretrained()"),GIt.forEach(t),OFr=r(Pne," class method or the "),DJ=n(Pne,"A",{href:!0});var OIt=s(DJ);VFr=r(OIt,"from_config()"),OIt.forEach(t),XFr=r(Pne,` class
method.`),Pne.forEach(t),zFr=i(Il),qx=n(Il,"P",{});var gYe=s(qx);WFr=r(gYe,"This class cannot be instantiated directly using "),NTe=n(gYe,"CODE",{});var VIt=s(NTe);QFr=r(VIt,"__init__()"),VIt.forEach(t),UFr=r(gYe," (throws an error)."),gYe.forEach(t),HFr=i(Il),Rt=n(Il,"DIV",{class:!0});var rL=s(Rt);T(jx.$$.fragment,rL),JFr=i(rL),qTe=n(rL,"P",{});var XIt=s(qTe);YFr=r(XIt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),XIt.forEach(t),KFr=i(rL),cc=n(rL,"P",{});var Bne=s(cc);ZFr=r(Bne,`Note:
Loading a model from its configuration file does `),jTe=n(Bne,"STRONG",{});var zIt=s(jTe);e6r=r(zIt,"not"),zIt.forEach(t),o6r=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Bne,"A",{href:!0});var WIt=s(GJ);r6r=r(WIt,"from_pretrained()"),WIt.forEach(t),t6r=r(Bne," to load the model weights."),Bne.forEach(t),a6r=i(rL),T(B7.$$.fragment,rL),rL.forEach(t),n6r=i(Il),bo=n(Il,"DIV",{class:!0});var Pa=s(bo);T(Dx.$$.fragment,Pa),s6r=i(Pa),DTe=n(Pa,"P",{});var QIt=s(DTe);l6r=r(QIt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),QIt.forEach(t),i6r=i(Pa),cn=n(Pa,"P",{});var tL=s(cn);d6r=r(tL,"The model class to instantiate is selected based on the "),GTe=n(tL,"CODE",{});var UIt=s(GTe);c6r=r(UIt,"model_type"),UIt.forEach(t),f6r=r(tL,` property of the config object (either
passed as an argument or loaded from `),OTe=n(tL,"CODE",{});var HIt=s(OTe);m6r=r(HIt,"pretrained_model_name_or_path"),HIt.forEach(t),g6r=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(tL,"CODE",{});var JIt=s(VTe);h6r=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),p6r=r(tL,":"),tL.forEach(t),_6r=i(Pa),fn=n(Pa,"UL",{});var aL=s(fn);I7=n(aL,"LI",{});var BGe=s(I7);XTe=n(BGe,"STRONG",{});var YIt=s(XTe);u6r=r(YIt,"deit"),YIt.forEach(t),b6r=r(BGe," \u2014 "),OJ=n(BGe,"A",{href:!0});var KIt=s(OJ);v6r=r(KIt,"DeiTForMaskedImageModeling"),KIt.forEach(t),F6r=r(BGe," (DeiT model)"),BGe.forEach(t),T6r=i(aL),N7=n(aL,"LI",{});var IGe=s(N7);zTe=n(IGe,"STRONG",{});var ZIt=s(zTe);M6r=r(ZIt,"swin"),ZIt.forEach(t),E6r=r(IGe," \u2014 "),VJ=n(IGe,"A",{href:!0});var eNt=s(VJ);C6r=r(eNt,"SwinForMaskedImageModeling"),eNt.forEach(t),w6r=r(IGe," (Swin Transformer model)"),IGe.forEach(t),A6r=i(aL),q7=n(aL,"LI",{});var NGe=s(q7);WTe=n(NGe,"STRONG",{});var oNt=s(WTe);L6r=r(oNt,"swinv2"),oNt.forEach(t),y6r=r(NGe," \u2014 "),XJ=n(NGe,"A",{href:!0});var rNt=s(XJ);x6r=r(rNt,"Swinv2ForMaskedImageModeling"),rNt.forEach(t),$6r=r(NGe," (Swin Transformer V2 model)"),NGe.forEach(t),k6r=i(aL),j7=n(aL,"LI",{});var qGe=s(j7);QTe=n(qGe,"STRONG",{});var tNt=s(QTe);S6r=r(tNt,"vit"),tNt.forEach(t),R6r=r(qGe," \u2014 "),zJ=n(qGe,"A",{href:!0});var aNt=s(zJ);P6r=r(aNt,"ViTForMaskedImageModeling"),aNt.forEach(t),B6r=r(qGe," (ViT model)"),qGe.forEach(t),aL.forEach(t),I6r=i(Pa),D7=n(Pa,"P",{});var jGe=s(D7);N6r=r(jGe,"The model is set in evaluation mode by default using "),UTe=n(jGe,"CODE",{});var nNt=s(UTe);q6r=r(nNt,"model.eval()"),nNt.forEach(t),j6r=r(jGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HTe=n(jGe,"CODE",{});var sNt=s(HTe);D6r=r(sNt,"model.train()"),sNt.forEach(t),jGe.forEach(t),G6r=i(Pa),T(G7.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),tHe=i(f),fc=n(f,"H2",{class:!0});var hYe=s(fc);O7=n(hYe,"A",{id:!0,class:!0,href:!0});var lNt=s(O7);JTe=n(lNt,"SPAN",{});var iNt=s(JTe);T(Gx.$$.fragment,iNt),iNt.forEach(t),lNt.forEach(t),O6r=i(hYe),YTe=n(hYe,"SPAN",{});var dNt=s(YTe);V6r=r(dNt,"AutoModelForObjectDetection"),dNt.forEach(t),hYe.forEach(t),aHe=i(f),er=n(f,"DIV",{class:!0});var Nl=s(er);T(Ox.$$.fragment,Nl),X6r=i(Nl),mc=n(Nl,"P",{});var Ine=s(mc);z6r=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),WJ=n(Ine,"A",{href:!0});var cNt=s(WJ);W6r=r(cNt,"from_pretrained()"),cNt.forEach(t),Q6r=r(Ine," class method or the "),QJ=n(Ine,"A",{href:!0});var fNt=s(QJ);U6r=r(fNt,"from_config()"),fNt.forEach(t),H6r=r(Ine,` class
method.`),Ine.forEach(t),J6r=i(Nl),Vx=n(Nl,"P",{});var pYe=s(Vx);Y6r=r(pYe,"This class cannot be instantiated directly using "),KTe=n(pYe,"CODE",{});var mNt=s(KTe);K6r=r(mNt,"__init__()"),mNt.forEach(t),Z6r=r(pYe," (throws an error)."),pYe.forEach(t),eTr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var nL=s(Pt);T(Xx.$$.fragment,nL),oTr=i(nL),ZTe=n(nL,"P",{});var gNt=s(ZTe);rTr=r(gNt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),gNt.forEach(t),tTr=i(nL),gc=n(nL,"P",{});var Nne=s(gc);aTr=r(Nne,`Note:
Loading a model from its configuration file does `),e7e=n(Nne,"STRONG",{});var hNt=s(e7e);nTr=r(hNt,"not"),hNt.forEach(t),sTr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(Nne,"A",{href:!0});var pNt=s(UJ);lTr=r(pNt,"from_pretrained()"),pNt.forEach(t),iTr=r(Nne," to load the model weights."),Nne.forEach(t),dTr=i(nL),T(V7.$$.fragment,nL),nL.forEach(t),cTr=i(Nl),vo=n(Nl,"DIV",{class:!0});var Ba=s(vo);T(zx.$$.fragment,Ba),fTr=i(Ba),o7e=n(Ba,"P",{});var _Nt=s(o7e);mTr=r(_Nt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_Nt.forEach(t),gTr=i(Ba),mn=n(Ba,"P",{});var sL=s(mn);hTr=r(sL,"The model class to instantiate is selected based on the "),r7e=n(sL,"CODE",{});var uNt=s(r7e);pTr=r(uNt,"model_type"),uNt.forEach(t),_Tr=r(sL,` property of the config object (either
passed as an argument or loaded from `),t7e=n(sL,"CODE",{});var bNt=s(t7e);uTr=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),bTr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=n(sL,"CODE",{});var vNt=s(a7e);vTr=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),FTr=r(sL,":"),sL.forEach(t),TTr=i(Ba),Wx=n(Ba,"UL",{});var _Ye=s(Wx);X7=n(_Ye,"LI",{});var DGe=s(X7);n7e=n(DGe,"STRONG",{});var FNt=s(n7e);MTr=r(FNt,"detr"),FNt.forEach(t),ETr=r(DGe," \u2014 "),HJ=n(DGe,"A",{href:!0});var TNt=s(HJ);CTr=r(TNt,"DetrForObjectDetection"),TNt.forEach(t),wTr=r(DGe," (DETR model)"),DGe.forEach(t),ATr=i(_Ye),z7=n(_Ye,"LI",{});var GGe=s(z7);s7e=n(GGe,"STRONG",{});var MNt=s(s7e);LTr=r(MNt,"yolos"),MNt.forEach(t),yTr=r(GGe," \u2014 "),JJ=n(GGe,"A",{href:!0});var ENt=s(JJ);xTr=r(ENt,"YolosForObjectDetection"),ENt.forEach(t),$Tr=r(GGe," (YOLOS model)"),GGe.forEach(t),_Ye.forEach(t),kTr=i(Ba),W7=n(Ba,"P",{});var OGe=s(W7);STr=r(OGe,"The model is set in evaluation mode by default using "),l7e=n(OGe,"CODE",{});var CNt=s(l7e);RTr=r(CNt,"model.eval()"),CNt.forEach(t),PTr=r(OGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i7e=n(OGe,"CODE",{});var wNt=s(i7e);BTr=r(wNt,"model.train()"),wNt.forEach(t),OGe.forEach(t),ITr=i(Ba),T(Q7.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),nHe=i(f),hc=n(f,"H2",{class:!0});var uYe=s(hc);U7=n(uYe,"A",{id:!0,class:!0,href:!0});var ANt=s(U7);d7e=n(ANt,"SPAN",{});var LNt=s(d7e);T(Qx.$$.fragment,LNt),LNt.forEach(t),ANt.forEach(t),NTr=i(uYe),c7e=n(uYe,"SPAN",{});var yNt=s(c7e);qTr=r(yNt,"AutoModelForImageSegmentation"),yNt.forEach(t),uYe.forEach(t),sHe=i(f),or=n(f,"DIV",{class:!0});var ql=s(or);T(Ux.$$.fragment,ql),jTr=i(ql),pc=n(ql,"P",{});var qne=s(pc);DTr=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YJ=n(qne,"A",{href:!0});var xNt=s(YJ);GTr=r(xNt,"from_pretrained()"),xNt.forEach(t),OTr=r(qne," class method or the "),KJ=n(qne,"A",{href:!0});var $Nt=s(KJ);VTr=r($Nt,"from_config()"),$Nt.forEach(t),XTr=r(qne,` class
method.`),qne.forEach(t),zTr=i(ql),Hx=n(ql,"P",{});var bYe=s(Hx);WTr=r(bYe,"This class cannot be instantiated directly using "),f7e=n(bYe,"CODE",{});var kNt=s(f7e);QTr=r(kNt,"__init__()"),kNt.forEach(t),UTr=r(bYe," (throws an error)."),bYe.forEach(t),HTr=i(ql),Bt=n(ql,"DIV",{class:!0});var lL=s(Bt);T(Jx.$$.fragment,lL),JTr=i(lL),m7e=n(lL,"P",{});var SNt=s(m7e);YTr=r(SNt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),SNt.forEach(t),KTr=i(lL),_c=n(lL,"P",{});var jne=s(_c);ZTr=r(jne,`Note:
Loading a model from its configuration file does `),g7e=n(jne,"STRONG",{});var RNt=s(g7e);e7r=r(RNt,"not"),RNt.forEach(t),o7r=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(jne,"A",{href:!0});var PNt=s(ZJ);r7r=r(PNt,"from_pretrained()"),PNt.forEach(t),t7r=r(jne," to load the model weights."),jne.forEach(t),a7r=i(lL),T(H7.$$.fragment,lL),lL.forEach(t),n7r=i(ql),Fo=n(ql,"DIV",{class:!0});var Ia=s(Fo);T(Yx.$$.fragment,Ia),s7r=i(Ia),h7e=n(Ia,"P",{});var BNt=s(h7e);l7r=r(BNt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),BNt.forEach(t),i7r=i(Ia),gn=n(Ia,"P",{});var iL=s(gn);d7r=r(iL,"The model class to instantiate is selected based on the "),p7e=n(iL,"CODE",{});var INt=s(p7e);c7r=r(INt,"model_type"),INt.forEach(t),f7r=r(iL,` property of the config object (either
passed as an argument or loaded from `),_7e=n(iL,"CODE",{});var NNt=s(_7e);m7r=r(NNt,"pretrained_model_name_or_path"),NNt.forEach(t),g7r=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(iL,"CODE",{});var qNt=s(u7e);h7r=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),p7r=r(iL,":"),iL.forEach(t),_7r=i(Ia),b7e=n(Ia,"UL",{});var jNt=s(b7e);J7=n(jNt,"LI",{});var VGe=s(J7);v7e=n(VGe,"STRONG",{});var DNt=s(v7e);u7r=r(DNt,"detr"),DNt.forEach(t),b7r=r(VGe," \u2014 "),eY=n(VGe,"A",{href:!0});var GNt=s(eY);v7r=r(GNt,"DetrForSegmentation"),GNt.forEach(t),F7r=r(VGe," (DETR model)"),VGe.forEach(t),jNt.forEach(t),T7r=i(Ia),Y7=n(Ia,"P",{});var XGe=s(Y7);M7r=r(XGe,"The model is set in evaluation mode by default using "),F7e=n(XGe,"CODE",{});var ONt=s(F7e);E7r=r(ONt,"model.eval()"),ONt.forEach(t),C7r=r(XGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T7e=n(XGe,"CODE",{});var VNt=s(T7e);w7r=r(VNt,"model.train()"),VNt.forEach(t),XGe.forEach(t),A7r=i(Ia),T(K7.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),lHe=i(f),uc=n(f,"H2",{class:!0});var vYe=s(uc);Z7=n(vYe,"A",{id:!0,class:!0,href:!0});var XNt=s(Z7);M7e=n(XNt,"SPAN",{});var zNt=s(M7e);T(Kx.$$.fragment,zNt),zNt.forEach(t),XNt.forEach(t),L7r=i(vYe),E7e=n(vYe,"SPAN",{});var WNt=s(E7e);y7r=r(WNt,"AutoModelForSemanticSegmentation"),WNt.forEach(t),vYe.forEach(t),iHe=i(f),rr=n(f,"DIV",{class:!0});var jl=s(rr);T(Zx.$$.fragment,jl),x7r=i(jl),bc=n(jl,"P",{});var Dne=s(bc);$7r=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oY=n(Dne,"A",{href:!0});var QNt=s(oY);k7r=r(QNt,"from_pretrained()"),QNt.forEach(t),S7r=r(Dne," class method or the "),rY=n(Dne,"A",{href:!0});var UNt=s(rY);R7r=r(UNt,"from_config()"),UNt.forEach(t),P7r=r(Dne,` class
method.`),Dne.forEach(t),B7r=i(jl),e$=n(jl,"P",{});var FYe=s(e$);I7r=r(FYe,"This class cannot be instantiated directly using "),C7e=n(FYe,"CODE",{});var HNt=s(C7e);N7r=r(HNt,"__init__()"),HNt.forEach(t),q7r=r(FYe," (throws an error)."),FYe.forEach(t),j7r=i(jl),It=n(jl,"DIV",{class:!0});var dL=s(It);T(o$.$$.fragment,dL),D7r=i(dL),w7e=n(dL,"P",{});var JNt=s(w7e);G7r=r(JNt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),JNt.forEach(t),O7r=i(dL),vc=n(dL,"P",{});var Gne=s(vc);V7r=r(Gne,`Note:
Loading a model from its configuration file does `),A7e=n(Gne,"STRONG",{});var YNt=s(A7e);X7r=r(YNt,"not"),YNt.forEach(t),z7r=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(Gne,"A",{href:!0});var KNt=s(tY);W7r=r(KNt,"from_pretrained()"),KNt.forEach(t),Q7r=r(Gne," to load the model weights."),Gne.forEach(t),U7r=i(dL),T(eM.$$.fragment,dL),dL.forEach(t),H7r=i(jl),To=n(jl,"DIV",{class:!0});var Na=s(To);T(r$.$$.fragment,Na),J7r=i(Na),L7e=n(Na,"P",{});var ZNt=s(L7e);Y7r=r(ZNt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ZNt.forEach(t),K7r=i(Na),hn=n(Na,"P",{});var cL=s(hn);Z7r=r(cL,"The model class to instantiate is selected based on the "),y7e=n(cL,"CODE",{});var eqt=s(y7e);eMr=r(eqt,"model_type"),eqt.forEach(t),oMr=r(cL,` property of the config object (either
passed as an argument or loaded from `),x7e=n(cL,"CODE",{});var oqt=s(x7e);rMr=r(oqt,"pretrained_model_name_or_path"),oqt.forEach(t),tMr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(cL,"CODE",{});var rqt=s($7e);aMr=r(rqt,"pretrained_model_name_or_path"),rqt.forEach(t),nMr=r(cL,":"),cL.forEach(t),sMr=i(Na),it=n(Na,"UL",{});var Dl=s(it);oM=n(Dl,"LI",{});var zGe=s(oM);k7e=n(zGe,"STRONG",{});var tqt=s(k7e);lMr=r(tqt,"beit"),tqt.forEach(t),iMr=r(zGe," \u2014 "),aY=n(zGe,"A",{href:!0});var aqt=s(aY);dMr=r(aqt,"BeitForSemanticSegmentation"),aqt.forEach(t),cMr=r(zGe," (BEiT model)"),zGe.forEach(t),fMr=i(Dl),rM=n(Dl,"LI",{});var WGe=s(rM);S7e=n(WGe,"STRONG",{});var nqt=s(S7e);mMr=r(nqt,"data2vec-vision"),nqt.forEach(t),gMr=r(WGe," \u2014 "),nY=n(WGe,"A",{href:!0});var sqt=s(nY);hMr=r(sqt,"Data2VecVisionForSemanticSegmentation"),sqt.forEach(t),pMr=r(WGe," (Data2VecVision model)"),WGe.forEach(t),_Mr=i(Dl),tM=n(Dl,"LI",{});var QGe=s(tM);R7e=n(QGe,"STRONG",{});var lqt=s(R7e);uMr=r(lqt,"dpt"),lqt.forEach(t),bMr=r(QGe," \u2014 "),sY=n(QGe,"A",{href:!0});var iqt=s(sY);vMr=r(iqt,"DPTForSemanticSegmentation"),iqt.forEach(t),FMr=r(QGe," (DPT model)"),QGe.forEach(t),TMr=i(Dl),aM=n(Dl,"LI",{});var UGe=s(aM);P7e=n(UGe,"STRONG",{});var dqt=s(P7e);MMr=r(dqt,"mobilevit"),dqt.forEach(t),EMr=r(UGe," \u2014 "),lY=n(UGe,"A",{href:!0});var cqt=s(lY);CMr=r(cqt,"MobileViTForSemanticSegmentation"),cqt.forEach(t),wMr=r(UGe," (MobileViT model)"),UGe.forEach(t),AMr=i(Dl),nM=n(Dl,"LI",{});var HGe=s(nM);B7e=n(HGe,"STRONG",{});var fqt=s(B7e);LMr=r(fqt,"segformer"),fqt.forEach(t),yMr=r(HGe," \u2014 "),iY=n(HGe,"A",{href:!0});var mqt=s(iY);xMr=r(mqt,"SegformerForSemanticSegmentation"),mqt.forEach(t),$Mr=r(HGe," (SegFormer model)"),HGe.forEach(t),Dl.forEach(t),kMr=i(Na),sM=n(Na,"P",{});var JGe=s(sM);SMr=r(JGe,"The model is set in evaluation mode by default using "),I7e=n(JGe,"CODE",{});var gqt=s(I7e);RMr=r(gqt,"model.eval()"),gqt.forEach(t),PMr=r(JGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N7e=n(JGe,"CODE",{});var hqt=s(N7e);BMr=r(hqt,"model.train()"),hqt.forEach(t),JGe.forEach(t),IMr=i(Na),T(lM.$$.fragment,Na),Na.forEach(t),jl.forEach(t),dHe=i(f),Fc=n(f,"H2",{class:!0});var TYe=s(Fc);iM=n(TYe,"A",{id:!0,class:!0,href:!0});var pqt=s(iM);q7e=n(pqt,"SPAN",{});var _qt=s(q7e);T(t$.$$.fragment,_qt),_qt.forEach(t),pqt.forEach(t),NMr=i(TYe),j7e=n(TYe,"SPAN",{});var uqt=s(j7e);qMr=r(uqt,"AutoModelForInstanceSegmentation"),uqt.forEach(t),TYe.forEach(t),cHe=i(f),tr=n(f,"DIV",{class:!0});var Gl=s(tr);T(a$.$$.fragment,Gl),jMr=i(Gl),Tc=n(Gl,"P",{});var One=s(Tc);DMr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),dY=n(One,"A",{href:!0});var bqt=s(dY);GMr=r(bqt,"from_pretrained()"),bqt.forEach(t),OMr=r(One," class method or the "),cY=n(One,"A",{href:!0});var vqt=s(cY);VMr=r(vqt,"from_config()"),vqt.forEach(t),XMr=r(One,` class
method.`),One.forEach(t),zMr=i(Gl),n$=n(Gl,"P",{});var MYe=s(n$);WMr=r(MYe,"This class cannot be instantiated directly using "),D7e=n(MYe,"CODE",{});var Fqt=s(D7e);QMr=r(Fqt,"__init__()"),Fqt.forEach(t),UMr=r(MYe," (throws an error)."),MYe.forEach(t),HMr=i(Gl),Nt=n(Gl,"DIV",{class:!0});var fL=s(Nt);T(s$.$$.fragment,fL),JMr=i(fL),G7e=n(fL,"P",{});var Tqt=s(G7e);YMr=r(Tqt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Tqt.forEach(t),KMr=i(fL),Mc=n(fL,"P",{});var Vne=s(Mc);ZMr=r(Vne,`Note:
Loading a model from its configuration file does `),O7e=n(Vne,"STRONG",{});var Mqt=s(O7e);eEr=r(Mqt,"not"),Mqt.forEach(t),oEr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(Vne,"A",{href:!0});var Eqt=s(fY);rEr=r(Eqt,"from_pretrained()"),Eqt.forEach(t),tEr=r(Vne," to load the model weights."),Vne.forEach(t),aEr=i(fL),T(dM.$$.fragment,fL),fL.forEach(t),nEr=i(Gl),Mo=n(Gl,"DIV",{class:!0});var qa=s(Mo);T(l$.$$.fragment,qa),sEr=i(qa),V7e=n(qa,"P",{});var Cqt=s(V7e);lEr=r(Cqt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Cqt.forEach(t),iEr=i(qa),pn=n(qa,"P",{});var mL=s(pn);dEr=r(mL,"The model class to instantiate is selected based on the "),X7e=n(mL,"CODE",{});var wqt=s(X7e);cEr=r(wqt,"model_type"),wqt.forEach(t),fEr=r(mL,` property of the config object (either
passed as an argument or loaded from `),z7e=n(mL,"CODE",{});var Aqt=s(z7e);mEr=r(Aqt,"pretrained_model_name_or_path"),Aqt.forEach(t),gEr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=n(mL,"CODE",{});var Lqt=s(W7e);hEr=r(Lqt,"pretrained_model_name_or_path"),Lqt.forEach(t),pEr=r(mL,":"),mL.forEach(t),_Er=i(qa),Q7e=n(qa,"UL",{});var yqt=s(Q7e);cM=n(yqt,"LI",{});var YGe=s(cM);U7e=n(YGe,"STRONG",{});var xqt=s(U7e);uEr=r(xqt,"maskformer"),xqt.forEach(t),bEr=r(YGe," \u2014 "),mY=n(YGe,"A",{href:!0});var $qt=s(mY);vEr=r($qt,"MaskFormerForInstanceSegmentation"),$qt.forEach(t),FEr=r(YGe," (MaskFormer model)"),YGe.forEach(t),yqt.forEach(t),TEr=i(qa),fM=n(qa,"P",{});var KGe=s(fM);MEr=r(KGe,"The model is set in evaluation mode by default using "),H7e=n(KGe,"CODE",{});var kqt=s(H7e);EEr=r(kqt,"model.eval()"),kqt.forEach(t),CEr=r(KGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J7e=n(KGe,"CODE",{});var Sqt=s(J7e);wEr=r(Sqt,"model.train()"),Sqt.forEach(t),KGe.forEach(t),AEr=i(qa),T(mM.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),fHe=i(f),Ec=n(f,"H2",{class:!0});var EYe=s(Ec);gM=n(EYe,"A",{id:!0,class:!0,href:!0});var Rqt=s(gM);Y7e=n(Rqt,"SPAN",{});var Pqt=s(Y7e);T(i$.$$.fragment,Pqt),Pqt.forEach(t),Rqt.forEach(t),LEr=i(EYe),K7e=n(EYe,"SPAN",{});var Bqt=s(K7e);yEr=r(Bqt,"TFAutoModel"),Bqt.forEach(t),EYe.forEach(t),mHe=i(f),ar=n(f,"DIV",{class:!0});var Ol=s(ar);T(d$.$$.fragment,Ol),xEr=i(Ol),Cc=n(Ol,"P",{});var Xne=s(Cc);$Er=r(Xne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gY=n(Xne,"A",{href:!0});var Iqt=s(gY);kEr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),SEr=r(Xne," class method or the "),hY=n(Xne,"A",{href:!0});var Nqt=s(hY);REr=r(Nqt,"from_config()"),Nqt.forEach(t),PEr=r(Xne,` class
method.`),Xne.forEach(t),BEr=i(Ol),c$=n(Ol,"P",{});var CYe=s(c$);IEr=r(CYe,"This class cannot be instantiated directly using "),Z7e=n(CYe,"CODE",{});var qqt=s(Z7e);NEr=r(qqt,"__init__()"),qqt.forEach(t),qEr=r(CYe," (throws an error)."),CYe.forEach(t),jEr=i(Ol),qt=n(Ol,"DIV",{class:!0});var gL=s(qt);T(f$.$$.fragment,gL),DEr=i(gL),eMe=n(gL,"P",{});var jqt=s(eMe);GEr=r(jqt,"Instantiates one of the base model classes of the library from a configuration."),jqt.forEach(t),OEr=i(gL),wc=n(gL,"P",{});var zne=s(wc);VEr=r(zne,`Note:
Loading a model from its configuration file does `),oMe=n(zne,"STRONG",{});var Dqt=s(oMe);XEr=r(Dqt,"not"),Dqt.forEach(t),zEr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(zne,"A",{href:!0});var Gqt=s(pY);WEr=r(Gqt,"from_pretrained()"),Gqt.forEach(t),QEr=r(zne," to load the model weights."),zne.forEach(t),UEr=i(gL),T(hM.$$.fragment,gL),gL.forEach(t),HEr=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(m$.$$.fragment,Vl),JEr=i(Vl),rMe=n(Vl,"P",{});var Oqt=s(rMe);YEr=r(Oqt,"Instantiate one of the base model classes of the library from a pretrained model."),Oqt.forEach(t),KEr=i(Vl),_n=n(Vl,"P",{});var hL=s(_n);ZEr=r(hL,"The model class to instantiate is selected based on the "),tMe=n(hL,"CODE",{});var Vqt=s(tMe);e4r=r(Vqt,"model_type"),Vqt.forEach(t),o4r=r(hL,` property of the config object (either
passed as an argument or loaded from `),aMe=n(hL,"CODE",{});var Xqt=s(aMe);r4r=r(Xqt,"pretrained_model_name_or_path"),Xqt.forEach(t),t4r=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(hL,"CODE",{});var zqt=s(nMe);a4r=r(zqt,"pretrained_model_name_or_path"),zqt.forEach(t),n4r=r(hL,":"),hL.forEach(t),s4r=i(Vl),q=n(Vl,"UL",{});var D=s(q);pM=n(D,"LI",{});var ZGe=s(pM);sMe=n(ZGe,"STRONG",{});var Wqt=s(sMe);l4r=r(Wqt,"albert"),Wqt.forEach(t),i4r=r(ZGe," \u2014 "),_Y=n(ZGe,"A",{href:!0});var Qqt=s(_Y);d4r=r(Qqt,"TFAlbertModel"),Qqt.forEach(t),c4r=r(ZGe," (ALBERT model)"),ZGe.forEach(t),f4r=i(D),_M=n(D,"LI",{});var eOe=s(_M);lMe=n(eOe,"STRONG",{});var Uqt=s(lMe);m4r=r(Uqt,"bart"),Uqt.forEach(t),g4r=r(eOe," \u2014 "),uY=n(eOe,"A",{href:!0});var Hqt=s(uY);h4r=r(Hqt,"TFBartModel"),Hqt.forEach(t),p4r=r(eOe," (BART model)"),eOe.forEach(t),_4r=i(D),uM=n(D,"LI",{});var oOe=s(uM);iMe=n(oOe,"STRONG",{});var Jqt=s(iMe);u4r=r(Jqt,"bert"),Jqt.forEach(t),b4r=r(oOe," \u2014 "),bY=n(oOe,"A",{href:!0});var Yqt=s(bY);v4r=r(Yqt,"TFBertModel"),Yqt.forEach(t),F4r=r(oOe," (BERT model)"),oOe.forEach(t),T4r=i(D),bM=n(D,"LI",{});var rOe=s(bM);dMe=n(rOe,"STRONG",{});var Kqt=s(dMe);M4r=r(Kqt,"blenderbot"),Kqt.forEach(t),E4r=r(rOe," \u2014 "),vY=n(rOe,"A",{href:!0});var Zqt=s(vY);C4r=r(Zqt,"TFBlenderbotModel"),Zqt.forEach(t),w4r=r(rOe," (Blenderbot model)"),rOe.forEach(t),A4r=i(D),vM=n(D,"LI",{});var tOe=s(vM);cMe=n(tOe,"STRONG",{});var ejt=s(cMe);L4r=r(ejt,"blenderbot-small"),ejt.forEach(t),y4r=r(tOe," \u2014 "),FY=n(tOe,"A",{href:!0});var ojt=s(FY);x4r=r(ojt,"TFBlenderbotSmallModel"),ojt.forEach(t),$4r=r(tOe," (BlenderbotSmall model)"),tOe.forEach(t),k4r=i(D),FM=n(D,"LI",{});var aOe=s(FM);fMe=n(aOe,"STRONG",{});var rjt=s(fMe);S4r=r(rjt,"camembert"),rjt.forEach(t),R4r=r(aOe," \u2014 "),TY=n(aOe,"A",{href:!0});var tjt=s(TY);P4r=r(tjt,"TFCamembertModel"),tjt.forEach(t),B4r=r(aOe," (CamemBERT model)"),aOe.forEach(t),I4r=i(D),TM=n(D,"LI",{});var nOe=s(TM);mMe=n(nOe,"STRONG",{});var ajt=s(mMe);N4r=r(ajt,"clip"),ajt.forEach(t),q4r=r(nOe," \u2014 "),MY=n(nOe,"A",{href:!0});var njt=s(MY);j4r=r(njt,"TFCLIPModel"),njt.forEach(t),D4r=r(nOe," (CLIP model)"),nOe.forEach(t),G4r=i(D),MM=n(D,"LI",{});var sOe=s(MM);gMe=n(sOe,"STRONG",{});var sjt=s(gMe);O4r=r(sjt,"convbert"),sjt.forEach(t),V4r=r(sOe," \u2014 "),EY=n(sOe,"A",{href:!0});var ljt=s(EY);X4r=r(ljt,"TFConvBertModel"),ljt.forEach(t),z4r=r(sOe," (ConvBERT model)"),sOe.forEach(t),W4r=i(D),EM=n(D,"LI",{});var lOe=s(EM);hMe=n(lOe,"STRONG",{});var ijt=s(hMe);Q4r=r(ijt,"convnext"),ijt.forEach(t),U4r=r(lOe," \u2014 "),CY=n(lOe,"A",{href:!0});var djt=s(CY);H4r=r(djt,"TFConvNextModel"),djt.forEach(t),J4r=r(lOe," (ConvNeXT model)"),lOe.forEach(t),Y4r=i(D),CM=n(D,"LI",{});var iOe=s(CM);pMe=n(iOe,"STRONG",{});var cjt=s(pMe);K4r=r(cjt,"ctrl"),cjt.forEach(t),Z4r=r(iOe," \u2014 "),wY=n(iOe,"A",{href:!0});var fjt=s(wY);eCr=r(fjt,"TFCTRLModel"),fjt.forEach(t),oCr=r(iOe," (CTRL model)"),iOe.forEach(t),rCr=i(D),wM=n(D,"LI",{});var dOe=s(wM);_Me=n(dOe,"STRONG",{});var mjt=s(_Me);tCr=r(mjt,"data2vec-vision"),mjt.forEach(t),aCr=r(dOe," \u2014 "),AY=n(dOe,"A",{href:!0});var gjt=s(AY);nCr=r(gjt,"TFData2VecVisionModel"),gjt.forEach(t),sCr=r(dOe," (Data2VecVision model)"),dOe.forEach(t),lCr=i(D),AM=n(D,"LI",{});var cOe=s(AM);uMe=n(cOe,"STRONG",{});var hjt=s(uMe);iCr=r(hjt,"deberta"),hjt.forEach(t),dCr=r(cOe," \u2014 "),LY=n(cOe,"A",{href:!0});var pjt=s(LY);cCr=r(pjt,"TFDebertaModel"),pjt.forEach(t),fCr=r(cOe," (DeBERTa model)"),cOe.forEach(t),mCr=i(D),LM=n(D,"LI",{});var fOe=s(LM);bMe=n(fOe,"STRONG",{});var _jt=s(bMe);gCr=r(_jt,"deberta-v2"),_jt.forEach(t),hCr=r(fOe," \u2014 "),yY=n(fOe,"A",{href:!0});var ujt=s(yY);pCr=r(ujt,"TFDebertaV2Model"),ujt.forEach(t),_Cr=r(fOe," (DeBERTa-v2 model)"),fOe.forEach(t),uCr=i(D),yM=n(D,"LI",{});var mOe=s(yM);vMe=n(mOe,"STRONG",{});var bjt=s(vMe);bCr=r(bjt,"deit"),bjt.forEach(t),vCr=r(mOe," \u2014 "),xY=n(mOe,"A",{href:!0});var vjt=s(xY);FCr=r(vjt,"TFDeiTModel"),vjt.forEach(t),TCr=r(mOe," (DeiT model)"),mOe.forEach(t),MCr=i(D),xM=n(D,"LI",{});var gOe=s(xM);FMe=n(gOe,"STRONG",{});var Fjt=s(FMe);ECr=r(Fjt,"distilbert"),Fjt.forEach(t),CCr=r(gOe," \u2014 "),$Y=n(gOe,"A",{href:!0});var Tjt=s($Y);wCr=r(Tjt,"TFDistilBertModel"),Tjt.forEach(t),ACr=r(gOe," (DistilBERT model)"),gOe.forEach(t),LCr=i(D),$M=n(D,"LI",{});var hOe=s($M);TMe=n(hOe,"STRONG",{});var Mjt=s(TMe);yCr=r(Mjt,"dpr"),Mjt.forEach(t),xCr=r(hOe," \u2014 "),kY=n(hOe,"A",{href:!0});var Ejt=s(kY);$Cr=r(Ejt,"TFDPRQuestionEncoder"),Ejt.forEach(t),kCr=r(hOe," (DPR model)"),hOe.forEach(t),SCr=i(D),kM=n(D,"LI",{});var pOe=s(kM);MMe=n(pOe,"STRONG",{});var Cjt=s(MMe);RCr=r(Cjt,"electra"),Cjt.forEach(t),PCr=r(pOe," \u2014 "),SY=n(pOe,"A",{href:!0});var wjt=s(SY);BCr=r(wjt,"TFElectraModel"),wjt.forEach(t),ICr=r(pOe," (ELECTRA model)"),pOe.forEach(t),NCr=i(D),SM=n(D,"LI",{});var _Oe=s(SM);EMe=n(_Oe,"STRONG",{});var Ajt=s(EMe);qCr=r(Ajt,"flaubert"),Ajt.forEach(t),jCr=r(_Oe," \u2014 "),RY=n(_Oe,"A",{href:!0});var Ljt=s(RY);DCr=r(Ljt,"TFFlaubertModel"),Ljt.forEach(t),GCr=r(_Oe," (FlauBERT model)"),_Oe.forEach(t),OCr=i(D),il=n(D,"LI",{});var nP=s(il);CMe=n(nP,"STRONG",{});var yjt=s(CMe);VCr=r(yjt,"funnel"),yjt.forEach(t),XCr=r(nP," \u2014 "),PY=n(nP,"A",{href:!0});var xjt=s(PY);zCr=r(xjt,"TFFunnelModel"),xjt.forEach(t),WCr=r(nP," or "),BY=n(nP,"A",{href:!0});var $jt=s(BY);QCr=r($jt,"TFFunnelBaseModel"),$jt.forEach(t),UCr=r(nP," (Funnel Transformer model)"),nP.forEach(t),HCr=i(D),RM=n(D,"LI",{});var uOe=s(RM);wMe=n(uOe,"STRONG",{});var kjt=s(wMe);JCr=r(kjt,"gpt2"),kjt.forEach(t),YCr=r(uOe," \u2014 "),IY=n(uOe,"A",{href:!0});var Sjt=s(IY);KCr=r(Sjt,"TFGPT2Model"),Sjt.forEach(t),ZCr=r(uOe," (OpenAI GPT-2 model)"),uOe.forEach(t),e3r=i(D),PM=n(D,"LI",{});var bOe=s(PM);AMe=n(bOe,"STRONG",{});var Rjt=s(AMe);o3r=r(Rjt,"gptj"),Rjt.forEach(t),r3r=r(bOe," \u2014 "),NY=n(bOe,"A",{href:!0});var Pjt=s(NY);t3r=r(Pjt,"TFGPTJModel"),Pjt.forEach(t),a3r=r(bOe," (GPT-J model)"),bOe.forEach(t),n3r=i(D),BM=n(D,"LI",{});var vOe=s(BM);LMe=n(vOe,"STRONG",{});var Bjt=s(LMe);s3r=r(Bjt,"hubert"),Bjt.forEach(t),l3r=r(vOe," \u2014 "),qY=n(vOe,"A",{href:!0});var Ijt=s(qY);i3r=r(Ijt,"TFHubertModel"),Ijt.forEach(t),d3r=r(vOe," (Hubert model)"),vOe.forEach(t),c3r=i(D),IM=n(D,"LI",{});var FOe=s(IM);yMe=n(FOe,"STRONG",{});var Njt=s(yMe);f3r=r(Njt,"layoutlm"),Njt.forEach(t),m3r=r(FOe," \u2014 "),jY=n(FOe,"A",{href:!0});var qjt=s(jY);g3r=r(qjt,"TFLayoutLMModel"),qjt.forEach(t),h3r=r(FOe," (LayoutLM model)"),FOe.forEach(t),p3r=i(D),NM=n(D,"LI",{});var TOe=s(NM);xMe=n(TOe,"STRONG",{});var jjt=s(xMe);_3r=r(jjt,"layoutlmv3"),jjt.forEach(t),u3r=r(TOe," \u2014 "),DY=n(TOe,"A",{href:!0});var Djt=s(DY);b3r=r(Djt,"TFLayoutLMv3Model"),Djt.forEach(t),v3r=r(TOe," (LayoutLMv3 model)"),TOe.forEach(t),F3r=i(D),qM=n(D,"LI",{});var MOe=s(qM);$Me=n(MOe,"STRONG",{});var Gjt=s($Me);T3r=r(Gjt,"led"),Gjt.forEach(t),M3r=r(MOe," \u2014 "),GY=n(MOe,"A",{href:!0});var Ojt=s(GY);E3r=r(Ojt,"TFLEDModel"),Ojt.forEach(t),C3r=r(MOe," (LED model)"),MOe.forEach(t),w3r=i(D),jM=n(D,"LI",{});var EOe=s(jM);kMe=n(EOe,"STRONG",{});var Vjt=s(kMe);A3r=r(Vjt,"longformer"),Vjt.forEach(t),L3r=r(EOe," \u2014 "),OY=n(EOe,"A",{href:!0});var Xjt=s(OY);y3r=r(Xjt,"TFLongformerModel"),Xjt.forEach(t),x3r=r(EOe," (Longformer model)"),EOe.forEach(t),$3r=i(D),DM=n(D,"LI",{});var COe=s(DM);SMe=n(COe,"STRONG",{});var zjt=s(SMe);k3r=r(zjt,"lxmert"),zjt.forEach(t),S3r=r(COe," \u2014 "),VY=n(COe,"A",{href:!0});var Wjt=s(VY);R3r=r(Wjt,"TFLxmertModel"),Wjt.forEach(t),P3r=r(COe," (LXMERT model)"),COe.forEach(t),B3r=i(D),GM=n(D,"LI",{});var wOe=s(GM);RMe=n(wOe,"STRONG",{});var Qjt=s(RMe);I3r=r(Qjt,"marian"),Qjt.forEach(t),N3r=r(wOe," \u2014 "),XY=n(wOe,"A",{href:!0});var Ujt=s(XY);q3r=r(Ujt,"TFMarianModel"),Ujt.forEach(t),j3r=r(wOe," (Marian model)"),wOe.forEach(t),D3r=i(D),OM=n(D,"LI",{});var AOe=s(OM);PMe=n(AOe,"STRONG",{});var Hjt=s(PMe);G3r=r(Hjt,"mbart"),Hjt.forEach(t),O3r=r(AOe," \u2014 "),zY=n(AOe,"A",{href:!0});var Jjt=s(zY);V3r=r(Jjt,"TFMBartModel"),Jjt.forEach(t),X3r=r(AOe," (mBART model)"),AOe.forEach(t),z3r=i(D),VM=n(D,"LI",{});var LOe=s(VM);BMe=n(LOe,"STRONG",{});var Yjt=s(BMe);W3r=r(Yjt,"mobilebert"),Yjt.forEach(t),Q3r=r(LOe," \u2014 "),WY=n(LOe,"A",{href:!0});var Kjt=s(WY);U3r=r(Kjt,"TFMobileBertModel"),Kjt.forEach(t),H3r=r(LOe," (MobileBERT model)"),LOe.forEach(t),J3r=i(D),XM=n(D,"LI",{});var yOe=s(XM);IMe=n(yOe,"STRONG",{});var Zjt=s(IMe);Y3r=r(Zjt,"mpnet"),Zjt.forEach(t),K3r=r(yOe," \u2014 "),QY=n(yOe,"A",{href:!0});var eDt=s(QY);Z3r=r(eDt,"TFMPNetModel"),eDt.forEach(t),e5r=r(yOe," (MPNet model)"),yOe.forEach(t),o5r=i(D),zM=n(D,"LI",{});var xOe=s(zM);NMe=n(xOe,"STRONG",{});var oDt=s(NMe);r5r=r(oDt,"mt5"),oDt.forEach(t),t5r=r(xOe," \u2014 "),UY=n(xOe,"A",{href:!0});var rDt=s(UY);a5r=r(rDt,"TFMT5Model"),rDt.forEach(t),n5r=r(xOe," (MT5 model)"),xOe.forEach(t),s5r=i(D),WM=n(D,"LI",{});var $Oe=s(WM);qMe=n($Oe,"STRONG",{});var tDt=s(qMe);l5r=r(tDt,"openai-gpt"),tDt.forEach(t),i5r=r($Oe," \u2014 "),HY=n($Oe,"A",{href:!0});var aDt=s(HY);d5r=r(aDt,"TFOpenAIGPTModel"),aDt.forEach(t),c5r=r($Oe," (OpenAI GPT model)"),$Oe.forEach(t),f5r=i(D),QM=n(D,"LI",{});var kOe=s(QM);jMe=n(kOe,"STRONG",{});var nDt=s(jMe);m5r=r(nDt,"opt"),nDt.forEach(t),g5r=r(kOe," \u2014 "),JY=n(kOe,"A",{href:!0});var sDt=s(JY);h5r=r(sDt,"TFOPTModel"),sDt.forEach(t),p5r=r(kOe," (OPT model)"),kOe.forEach(t),_5r=i(D),UM=n(D,"LI",{});var SOe=s(UM);DMe=n(SOe,"STRONG",{});var lDt=s(DMe);u5r=r(lDt,"pegasus"),lDt.forEach(t),b5r=r(SOe," \u2014 "),YY=n(SOe,"A",{href:!0});var iDt=s(YY);v5r=r(iDt,"TFPegasusModel"),iDt.forEach(t),F5r=r(SOe," (Pegasus model)"),SOe.forEach(t),T5r=i(D),HM=n(D,"LI",{});var ROe=s(HM);GMe=n(ROe,"STRONG",{});var dDt=s(GMe);M5r=r(dDt,"regnet"),dDt.forEach(t),E5r=r(ROe," \u2014 "),KY=n(ROe,"A",{href:!0});var cDt=s(KY);C5r=r(cDt,"TFRegNetModel"),cDt.forEach(t),w5r=r(ROe," (RegNet model)"),ROe.forEach(t),A5r=i(D),JM=n(D,"LI",{});var POe=s(JM);OMe=n(POe,"STRONG",{});var fDt=s(OMe);L5r=r(fDt,"rembert"),fDt.forEach(t),y5r=r(POe," \u2014 "),ZY=n(POe,"A",{href:!0});var mDt=s(ZY);x5r=r(mDt,"TFRemBertModel"),mDt.forEach(t),$5r=r(POe," (RemBERT model)"),POe.forEach(t),k5r=i(D),YM=n(D,"LI",{});var BOe=s(YM);VMe=n(BOe,"STRONG",{});var gDt=s(VMe);S5r=r(gDt,"resnet"),gDt.forEach(t),R5r=r(BOe," \u2014 "),eK=n(BOe,"A",{href:!0});var hDt=s(eK);P5r=r(hDt,"TFResNetModel"),hDt.forEach(t),B5r=r(BOe," (ResNet model)"),BOe.forEach(t),I5r=i(D),KM=n(D,"LI",{});var IOe=s(KM);XMe=n(IOe,"STRONG",{});var pDt=s(XMe);N5r=r(pDt,"roberta"),pDt.forEach(t),q5r=r(IOe," \u2014 "),oK=n(IOe,"A",{href:!0});var _Dt=s(oK);j5r=r(_Dt,"TFRobertaModel"),_Dt.forEach(t),D5r=r(IOe," (RoBERTa model)"),IOe.forEach(t),G5r=i(D),ZM=n(D,"LI",{});var NOe=s(ZM);zMe=n(NOe,"STRONG",{});var uDt=s(zMe);O5r=r(uDt,"roformer"),uDt.forEach(t),V5r=r(NOe," \u2014 "),rK=n(NOe,"A",{href:!0});var bDt=s(rK);X5r=r(bDt,"TFRoFormerModel"),bDt.forEach(t),z5r=r(NOe," (RoFormer model)"),NOe.forEach(t),W5r=i(D),eE=n(D,"LI",{});var qOe=s(eE);WMe=n(qOe,"STRONG",{});var vDt=s(WMe);Q5r=r(vDt,"segformer"),vDt.forEach(t),U5r=r(qOe," \u2014 "),tK=n(qOe,"A",{href:!0});var FDt=s(tK);H5r=r(FDt,"TFSegformerModel"),FDt.forEach(t),J5r=r(qOe," (SegFormer model)"),qOe.forEach(t),Y5r=i(D),oE=n(D,"LI",{});var jOe=s(oE);QMe=n(jOe,"STRONG",{});var TDt=s(QMe);K5r=r(TDt,"speech_to_text"),TDt.forEach(t),Z5r=r(jOe," \u2014 "),aK=n(jOe,"A",{href:!0});var MDt=s(aK);e0r=r(MDt,"TFSpeech2TextModel"),MDt.forEach(t),o0r=r(jOe," (Speech2Text model)"),jOe.forEach(t),r0r=i(D),rE=n(D,"LI",{});var DOe=s(rE);UMe=n(DOe,"STRONG",{});var EDt=s(UMe);t0r=r(EDt,"swin"),EDt.forEach(t),a0r=r(DOe," \u2014 "),nK=n(DOe,"A",{href:!0});var CDt=s(nK);n0r=r(CDt,"TFSwinModel"),CDt.forEach(t),s0r=r(DOe," (Swin Transformer model)"),DOe.forEach(t),l0r=i(D),tE=n(D,"LI",{});var GOe=s(tE);HMe=n(GOe,"STRONG",{});var wDt=s(HMe);i0r=r(wDt,"t5"),wDt.forEach(t),d0r=r(GOe," \u2014 "),sK=n(GOe,"A",{href:!0});var ADt=s(sK);c0r=r(ADt,"TFT5Model"),ADt.forEach(t),f0r=r(GOe," (T5 model)"),GOe.forEach(t),m0r=i(D),aE=n(D,"LI",{});var OOe=s(aE);JMe=n(OOe,"STRONG",{});var LDt=s(JMe);g0r=r(LDt,"tapas"),LDt.forEach(t),h0r=r(OOe," \u2014 "),lK=n(OOe,"A",{href:!0});var yDt=s(lK);p0r=r(yDt,"TFTapasModel"),yDt.forEach(t),_0r=r(OOe," (TAPAS model)"),OOe.forEach(t),u0r=i(D),nE=n(D,"LI",{});var VOe=s(nE);YMe=n(VOe,"STRONG",{});var xDt=s(YMe);b0r=r(xDt,"transfo-xl"),xDt.forEach(t),v0r=r(VOe," \u2014 "),iK=n(VOe,"A",{href:!0});var $Dt=s(iK);F0r=r($Dt,"TFTransfoXLModel"),$Dt.forEach(t),T0r=r(VOe," (Transformer-XL model)"),VOe.forEach(t),M0r=i(D),sE=n(D,"LI",{});var XOe=s(sE);KMe=n(XOe,"STRONG",{});var kDt=s(KMe);E0r=r(kDt,"vit"),kDt.forEach(t),C0r=r(XOe," \u2014 "),dK=n(XOe,"A",{href:!0});var SDt=s(dK);w0r=r(SDt,"TFViTModel"),SDt.forEach(t),A0r=r(XOe," (ViT model)"),XOe.forEach(t),L0r=i(D),lE=n(D,"LI",{});var zOe=s(lE);ZMe=n(zOe,"STRONG",{});var RDt=s(ZMe);y0r=r(RDt,"vit_mae"),RDt.forEach(t),x0r=r(zOe," \u2014 "),cK=n(zOe,"A",{href:!0});var PDt=s(cK);$0r=r(PDt,"TFViTMAEModel"),PDt.forEach(t),k0r=r(zOe," (ViTMAE model)"),zOe.forEach(t),S0r=i(D),iE=n(D,"LI",{});var WOe=s(iE);eEe=n(WOe,"STRONG",{});var BDt=s(eEe);R0r=r(BDt,"wav2vec2"),BDt.forEach(t),P0r=r(WOe," \u2014 "),fK=n(WOe,"A",{href:!0});var IDt=s(fK);B0r=r(IDt,"TFWav2Vec2Model"),IDt.forEach(t),I0r=r(WOe," (Wav2Vec2 model)"),WOe.forEach(t),N0r=i(D),dE=n(D,"LI",{});var QOe=s(dE);oEe=n(QOe,"STRONG",{});var NDt=s(oEe);q0r=r(NDt,"xlm"),NDt.forEach(t),j0r=r(QOe," \u2014 "),mK=n(QOe,"A",{href:!0});var qDt=s(mK);D0r=r(qDt,"TFXLMModel"),qDt.forEach(t),G0r=r(QOe," (XLM model)"),QOe.forEach(t),O0r=i(D),cE=n(D,"LI",{});var UOe=s(cE);rEe=n(UOe,"STRONG",{});var jDt=s(rEe);V0r=r(jDt,"xlm-roberta"),jDt.forEach(t),X0r=r(UOe," \u2014 "),gK=n(UOe,"A",{href:!0});var DDt=s(gK);z0r=r(DDt,"TFXLMRobertaModel"),DDt.forEach(t),W0r=r(UOe," (XLM-RoBERTa model)"),UOe.forEach(t),Q0r=i(D),fE=n(D,"LI",{});var HOe=s(fE);tEe=n(HOe,"STRONG",{});var GDt=s(tEe);U0r=r(GDt,"xlnet"),GDt.forEach(t),H0r=r(HOe," \u2014 "),hK=n(HOe,"A",{href:!0});var ODt=s(hK);J0r=r(ODt,"TFXLNetModel"),ODt.forEach(t),Y0r=r(HOe," (XLNet model)"),HOe.forEach(t),D.forEach(t),K0r=i(Vl),T(mE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),gHe=i(f),Ac=n(f,"H2",{class:!0});var wYe=s(Ac);gE=n(wYe,"A",{id:!0,class:!0,href:!0});var VDt=s(gE);aEe=n(VDt,"SPAN",{});var XDt=s(aEe);T(g$.$$.fragment,XDt),XDt.forEach(t),VDt.forEach(t),Z0r=i(wYe),nEe=n(wYe,"SPAN",{});var zDt=s(nEe);ewr=r(zDt,"TFAutoModelForPreTraining"),zDt.forEach(t),wYe.forEach(t),hHe=i(f),nr=n(f,"DIV",{class:!0});var Xl=s(nr);T(h$.$$.fragment,Xl),owr=i(Xl),Lc=n(Xl,"P",{});var Wne=s(Lc);rwr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pK=n(Wne,"A",{href:!0});var WDt=s(pK);twr=r(WDt,"from_pretrained()"),WDt.forEach(t),awr=r(Wne," class method or the "),_K=n(Wne,"A",{href:!0});var QDt=s(_K);nwr=r(QDt,"from_config()"),QDt.forEach(t),swr=r(Wne,` class
method.`),Wne.forEach(t),lwr=i(Xl),p$=n(Xl,"P",{});var AYe=s(p$);iwr=r(AYe,"This class cannot be instantiated directly using "),sEe=n(AYe,"CODE",{});var UDt=s(sEe);dwr=r(UDt,"__init__()"),UDt.forEach(t),cwr=r(AYe," (throws an error)."),AYe.forEach(t),fwr=i(Xl),jt=n(Xl,"DIV",{class:!0});var pL=s(jt);T(_$.$$.fragment,pL),mwr=i(pL),lEe=n(pL,"P",{});var HDt=s(lEe);gwr=r(HDt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),HDt.forEach(t),hwr=i(pL),yc=n(pL,"P",{});var Qne=s(yc);pwr=r(Qne,`Note:
Loading a model from its configuration file does `),iEe=n(Qne,"STRONG",{});var JDt=s(iEe);_wr=r(JDt,"not"),JDt.forEach(t),uwr=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Qne,"A",{href:!0});var YDt=s(uK);bwr=r(YDt,"from_pretrained()"),YDt.forEach(t),vwr=r(Qne," to load the model weights."),Qne.forEach(t),Fwr=i(pL),T(hE.$$.fragment,pL),pL.forEach(t),Twr=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(u$.$$.fragment,zl),Mwr=i(zl),dEe=n(zl,"P",{});var KDt=s(dEe);Ewr=r(KDt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KDt.forEach(t),Cwr=i(zl),un=n(zl,"P",{});var _L=s(un);wwr=r(_L,"The model class to instantiate is selected based on the "),cEe=n(_L,"CODE",{});var ZDt=s(cEe);Awr=r(ZDt,"model_type"),ZDt.forEach(t),Lwr=r(_L,` property of the config object (either
passed as an argument or loaded from `),fEe=n(_L,"CODE",{});var eGt=s(fEe);ywr=r(eGt,"pretrained_model_name_or_path"),eGt.forEach(t),xwr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(_L,"CODE",{});var oGt=s(mEe);$wr=r(oGt,"pretrained_model_name_or_path"),oGt.forEach(t),kwr=r(_L,":"),_L.forEach(t),Swr=i(zl),se=n(zl,"UL",{});var le=s(se);pE=n(le,"LI",{});var JOe=s(pE);gEe=n(JOe,"STRONG",{});var rGt=s(gEe);Rwr=r(rGt,"albert"),rGt.forEach(t),Pwr=r(JOe," \u2014 "),bK=n(JOe,"A",{href:!0});var tGt=s(bK);Bwr=r(tGt,"TFAlbertForPreTraining"),tGt.forEach(t),Iwr=r(JOe," (ALBERT model)"),JOe.forEach(t),Nwr=i(le),_E=n(le,"LI",{});var YOe=s(_E);hEe=n(YOe,"STRONG",{});var aGt=s(hEe);qwr=r(aGt,"bart"),aGt.forEach(t),jwr=r(YOe," \u2014 "),vK=n(YOe,"A",{href:!0});var nGt=s(vK);Dwr=r(nGt,"TFBartForConditionalGeneration"),nGt.forEach(t),Gwr=r(YOe," (BART model)"),YOe.forEach(t),Owr=i(le),uE=n(le,"LI",{});var KOe=s(uE);pEe=n(KOe,"STRONG",{});var sGt=s(pEe);Vwr=r(sGt,"bert"),sGt.forEach(t),Xwr=r(KOe," \u2014 "),FK=n(KOe,"A",{href:!0});var lGt=s(FK);zwr=r(lGt,"TFBertForPreTraining"),lGt.forEach(t),Wwr=r(KOe," (BERT model)"),KOe.forEach(t),Qwr=i(le),bE=n(le,"LI",{});var ZOe=s(bE);_Ee=n(ZOe,"STRONG",{});var iGt=s(_Ee);Uwr=r(iGt,"camembert"),iGt.forEach(t),Hwr=r(ZOe," \u2014 "),TK=n(ZOe,"A",{href:!0});var dGt=s(TK);Jwr=r(dGt,"TFCamembertForMaskedLM"),dGt.forEach(t),Ywr=r(ZOe," (CamemBERT model)"),ZOe.forEach(t),Kwr=i(le),vE=n(le,"LI",{});var eVe=s(vE);uEe=n(eVe,"STRONG",{});var cGt=s(uEe);Zwr=r(cGt,"ctrl"),cGt.forEach(t),eAr=r(eVe," \u2014 "),MK=n(eVe,"A",{href:!0});var fGt=s(MK);oAr=r(fGt,"TFCTRLLMHeadModel"),fGt.forEach(t),rAr=r(eVe," (CTRL model)"),eVe.forEach(t),tAr=i(le),FE=n(le,"LI",{});var oVe=s(FE);bEe=n(oVe,"STRONG",{});var mGt=s(bEe);aAr=r(mGt,"distilbert"),mGt.forEach(t),nAr=r(oVe," \u2014 "),EK=n(oVe,"A",{href:!0});var gGt=s(EK);sAr=r(gGt,"TFDistilBertForMaskedLM"),gGt.forEach(t),lAr=r(oVe," (DistilBERT model)"),oVe.forEach(t),iAr=i(le),TE=n(le,"LI",{});var rVe=s(TE);vEe=n(rVe,"STRONG",{});var hGt=s(vEe);dAr=r(hGt,"electra"),hGt.forEach(t),cAr=r(rVe," \u2014 "),CK=n(rVe,"A",{href:!0});var pGt=s(CK);fAr=r(pGt,"TFElectraForPreTraining"),pGt.forEach(t),mAr=r(rVe," (ELECTRA model)"),rVe.forEach(t),gAr=i(le),ME=n(le,"LI",{});var tVe=s(ME);FEe=n(tVe,"STRONG",{});var _Gt=s(FEe);hAr=r(_Gt,"flaubert"),_Gt.forEach(t),pAr=r(tVe," \u2014 "),wK=n(tVe,"A",{href:!0});var uGt=s(wK);_Ar=r(uGt,"TFFlaubertWithLMHeadModel"),uGt.forEach(t),uAr=r(tVe," (FlauBERT model)"),tVe.forEach(t),bAr=i(le),EE=n(le,"LI",{});var aVe=s(EE);TEe=n(aVe,"STRONG",{});var bGt=s(TEe);vAr=r(bGt,"funnel"),bGt.forEach(t),FAr=r(aVe," \u2014 "),AK=n(aVe,"A",{href:!0});var vGt=s(AK);TAr=r(vGt,"TFFunnelForPreTraining"),vGt.forEach(t),MAr=r(aVe," (Funnel Transformer model)"),aVe.forEach(t),EAr=i(le),CE=n(le,"LI",{});var nVe=s(CE);MEe=n(nVe,"STRONG",{});var FGt=s(MEe);CAr=r(FGt,"gpt2"),FGt.forEach(t),wAr=r(nVe," \u2014 "),LK=n(nVe,"A",{href:!0});var TGt=s(LK);AAr=r(TGt,"TFGPT2LMHeadModel"),TGt.forEach(t),LAr=r(nVe," (OpenAI GPT-2 model)"),nVe.forEach(t),yAr=i(le),wE=n(le,"LI",{});var sVe=s(wE);EEe=n(sVe,"STRONG",{});var MGt=s(EEe);xAr=r(MGt,"layoutlm"),MGt.forEach(t),$Ar=r(sVe," \u2014 "),yK=n(sVe,"A",{href:!0});var EGt=s(yK);kAr=r(EGt,"TFLayoutLMForMaskedLM"),EGt.forEach(t),SAr=r(sVe," (LayoutLM model)"),sVe.forEach(t),RAr=i(le),AE=n(le,"LI",{});var lVe=s(AE);CEe=n(lVe,"STRONG",{});var CGt=s(CEe);PAr=r(CGt,"lxmert"),CGt.forEach(t),BAr=r(lVe," \u2014 "),xK=n(lVe,"A",{href:!0});var wGt=s(xK);IAr=r(wGt,"TFLxmertForPreTraining"),wGt.forEach(t),NAr=r(lVe," (LXMERT model)"),lVe.forEach(t),qAr=i(le),LE=n(le,"LI",{});var iVe=s(LE);wEe=n(iVe,"STRONG",{});var AGt=s(wEe);jAr=r(AGt,"mobilebert"),AGt.forEach(t),DAr=r(iVe," \u2014 "),$K=n(iVe,"A",{href:!0});var LGt=s($K);GAr=r(LGt,"TFMobileBertForPreTraining"),LGt.forEach(t),OAr=r(iVe," (MobileBERT model)"),iVe.forEach(t),VAr=i(le),yE=n(le,"LI",{});var dVe=s(yE);AEe=n(dVe,"STRONG",{});var yGt=s(AEe);XAr=r(yGt,"mpnet"),yGt.forEach(t),zAr=r(dVe," \u2014 "),kK=n(dVe,"A",{href:!0});var xGt=s(kK);WAr=r(xGt,"TFMPNetForMaskedLM"),xGt.forEach(t),QAr=r(dVe," (MPNet model)"),dVe.forEach(t),UAr=i(le),xE=n(le,"LI",{});var cVe=s(xE);LEe=n(cVe,"STRONG",{});var $Gt=s(LEe);HAr=r($Gt,"openai-gpt"),$Gt.forEach(t),JAr=r(cVe," \u2014 "),SK=n(cVe,"A",{href:!0});var kGt=s(SK);YAr=r(kGt,"TFOpenAIGPTLMHeadModel"),kGt.forEach(t),KAr=r(cVe," (OpenAI GPT model)"),cVe.forEach(t),ZAr=i(le),$E=n(le,"LI",{});var fVe=s($E);yEe=n(fVe,"STRONG",{});var SGt=s(yEe);eLr=r(SGt,"roberta"),SGt.forEach(t),oLr=r(fVe," \u2014 "),RK=n(fVe,"A",{href:!0});var RGt=s(RK);rLr=r(RGt,"TFRobertaForMaskedLM"),RGt.forEach(t),tLr=r(fVe," (RoBERTa model)"),fVe.forEach(t),aLr=i(le),kE=n(le,"LI",{});var mVe=s(kE);xEe=n(mVe,"STRONG",{});var PGt=s(xEe);nLr=r(PGt,"t5"),PGt.forEach(t),sLr=r(mVe," \u2014 "),PK=n(mVe,"A",{href:!0});var BGt=s(PK);lLr=r(BGt,"TFT5ForConditionalGeneration"),BGt.forEach(t),iLr=r(mVe," (T5 model)"),mVe.forEach(t),dLr=i(le),SE=n(le,"LI",{});var gVe=s(SE);$Ee=n(gVe,"STRONG",{});var IGt=s($Ee);cLr=r(IGt,"tapas"),IGt.forEach(t),fLr=r(gVe," \u2014 "),BK=n(gVe,"A",{href:!0});var NGt=s(BK);mLr=r(NGt,"TFTapasForMaskedLM"),NGt.forEach(t),gLr=r(gVe," (TAPAS model)"),gVe.forEach(t),hLr=i(le),RE=n(le,"LI",{});var hVe=s(RE);kEe=n(hVe,"STRONG",{});var qGt=s(kEe);pLr=r(qGt,"transfo-xl"),qGt.forEach(t),_Lr=r(hVe," \u2014 "),IK=n(hVe,"A",{href:!0});var jGt=s(IK);uLr=r(jGt,"TFTransfoXLLMHeadModel"),jGt.forEach(t),bLr=r(hVe," (Transformer-XL model)"),hVe.forEach(t),vLr=i(le),PE=n(le,"LI",{});var pVe=s(PE);SEe=n(pVe,"STRONG",{});var DGt=s(SEe);FLr=r(DGt,"vit_mae"),DGt.forEach(t),TLr=r(pVe," \u2014 "),NK=n(pVe,"A",{href:!0});var GGt=s(NK);MLr=r(GGt,"TFViTMAEForPreTraining"),GGt.forEach(t),ELr=r(pVe," (ViTMAE model)"),pVe.forEach(t),CLr=i(le),BE=n(le,"LI",{});var _Ve=s(BE);REe=n(_Ve,"STRONG",{});var OGt=s(REe);wLr=r(OGt,"xlm"),OGt.forEach(t),ALr=r(_Ve," \u2014 "),qK=n(_Ve,"A",{href:!0});var VGt=s(qK);LLr=r(VGt,"TFXLMWithLMHeadModel"),VGt.forEach(t),yLr=r(_Ve," (XLM model)"),_Ve.forEach(t),xLr=i(le),IE=n(le,"LI",{});var uVe=s(IE);PEe=n(uVe,"STRONG",{});var XGt=s(PEe);$Lr=r(XGt,"xlm-roberta"),XGt.forEach(t),kLr=r(uVe," \u2014 "),jK=n(uVe,"A",{href:!0});var zGt=s(jK);SLr=r(zGt,"TFXLMRobertaForMaskedLM"),zGt.forEach(t),RLr=r(uVe," (XLM-RoBERTa model)"),uVe.forEach(t),PLr=i(le),NE=n(le,"LI",{});var bVe=s(NE);BEe=n(bVe,"STRONG",{});var WGt=s(BEe);BLr=r(WGt,"xlnet"),WGt.forEach(t),ILr=r(bVe," \u2014 "),DK=n(bVe,"A",{href:!0});var QGt=s(DK);NLr=r(QGt,"TFXLNetLMHeadModel"),QGt.forEach(t),qLr=r(bVe," (XLNet model)"),bVe.forEach(t),le.forEach(t),jLr=i(zl),T(qE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),pHe=i(f),xc=n(f,"H2",{class:!0});var LYe=s(xc);jE=n(LYe,"A",{id:!0,class:!0,href:!0});var UGt=s(jE);IEe=n(UGt,"SPAN",{});var HGt=s(IEe);T(b$.$$.fragment,HGt),HGt.forEach(t),UGt.forEach(t),DLr=i(LYe),NEe=n(LYe,"SPAN",{});var JGt=s(NEe);GLr=r(JGt,"TFAutoModelForCausalLM"),JGt.forEach(t),LYe.forEach(t),_He=i(f),sr=n(f,"DIV",{class:!0});var Wl=s(sr);T(v$.$$.fragment,Wl),OLr=i(Wl),$c=n(Wl,"P",{});var Une=s($c);VLr=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GK=n(Une,"A",{href:!0});var YGt=s(GK);XLr=r(YGt,"from_pretrained()"),YGt.forEach(t),zLr=r(Une," class method or the "),OK=n(Une,"A",{href:!0});var KGt=s(OK);WLr=r(KGt,"from_config()"),KGt.forEach(t),QLr=r(Une,` class
method.`),Une.forEach(t),ULr=i(Wl),F$=n(Wl,"P",{});var yYe=s(F$);HLr=r(yYe,"This class cannot be instantiated directly using "),qEe=n(yYe,"CODE",{});var ZGt=s(qEe);JLr=r(ZGt,"__init__()"),ZGt.forEach(t),YLr=r(yYe," (throws an error)."),yYe.forEach(t),KLr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var uL=s(Dt);T(T$.$$.fragment,uL),ZLr=i(uL),jEe=n(uL,"P",{});var eOt=s(jEe);eyr=r(eOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eOt.forEach(t),oyr=i(uL),kc=n(uL,"P",{});var Hne=s(kc);ryr=r(Hne,`Note:
Loading a model from its configuration file does `),DEe=n(Hne,"STRONG",{});var oOt=s(DEe);tyr=r(oOt,"not"),oOt.forEach(t),ayr=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(Hne,"A",{href:!0});var rOt=s(VK);nyr=r(rOt,"from_pretrained()"),rOt.forEach(t),syr=r(Hne," to load the model weights."),Hne.forEach(t),lyr=i(uL),T(DE.$$.fragment,uL),uL.forEach(t),iyr=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(M$.$$.fragment,Ql),dyr=i(Ql),GEe=n(Ql,"P",{});var tOt=s(GEe);cyr=r(tOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tOt.forEach(t),fyr=i(Ql),bn=n(Ql,"P",{});var bL=s(bn);myr=r(bL,"The model class to instantiate is selected based on the "),OEe=n(bL,"CODE",{});var aOt=s(OEe);gyr=r(aOt,"model_type"),aOt.forEach(t),hyr=r(bL,` property of the config object (either
passed as an argument or loaded from `),VEe=n(bL,"CODE",{});var nOt=s(VEe);pyr=r(nOt,"pretrained_model_name_or_path"),nOt.forEach(t),_yr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(bL,"CODE",{});var sOt=s(XEe);uyr=r(sOt,"pretrained_model_name_or_path"),sOt.forEach(t),byr=r(bL,":"),bL.forEach(t),vyr=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);GE=n(Ce,"LI",{});var vVe=s(GE);zEe=n(vVe,"STRONG",{});var lOt=s(zEe);Fyr=r(lOt,"bert"),lOt.forEach(t),Tyr=r(vVe," \u2014 "),XK=n(vVe,"A",{href:!0});var iOt=s(XK);Myr=r(iOt,"TFBertLMHeadModel"),iOt.forEach(t),Eyr=r(vVe," (BERT model)"),vVe.forEach(t),Cyr=i(Ce),OE=n(Ce,"LI",{});var FVe=s(OE);WEe=n(FVe,"STRONG",{});var dOt=s(WEe);wyr=r(dOt,"camembert"),dOt.forEach(t),Ayr=r(FVe," \u2014 "),zK=n(FVe,"A",{href:!0});var cOt=s(zK);Lyr=r(cOt,"TFCamembertForCausalLM"),cOt.forEach(t),yyr=r(FVe," (CamemBERT model)"),FVe.forEach(t),xyr=i(Ce),VE=n(Ce,"LI",{});var TVe=s(VE);QEe=n(TVe,"STRONG",{});var fOt=s(QEe);$yr=r(fOt,"ctrl"),fOt.forEach(t),kyr=r(TVe," \u2014 "),WK=n(TVe,"A",{href:!0});var mOt=s(WK);Syr=r(mOt,"TFCTRLLMHeadModel"),mOt.forEach(t),Ryr=r(TVe," (CTRL model)"),TVe.forEach(t),Pyr=i(Ce),XE=n(Ce,"LI",{});var MVe=s(XE);UEe=n(MVe,"STRONG",{});var gOt=s(UEe);Byr=r(gOt,"gpt2"),gOt.forEach(t),Iyr=r(MVe," \u2014 "),QK=n(MVe,"A",{href:!0});var hOt=s(QK);Nyr=r(hOt,"TFGPT2LMHeadModel"),hOt.forEach(t),qyr=r(MVe," (OpenAI GPT-2 model)"),MVe.forEach(t),jyr=i(Ce),zE=n(Ce,"LI",{});var EVe=s(zE);HEe=n(EVe,"STRONG",{});var pOt=s(HEe);Dyr=r(pOt,"gptj"),pOt.forEach(t),Gyr=r(EVe," \u2014 "),UK=n(EVe,"A",{href:!0});var _Ot=s(UK);Oyr=r(_Ot,"TFGPTJForCausalLM"),_Ot.forEach(t),Vyr=r(EVe," (GPT-J model)"),EVe.forEach(t),Xyr=i(Ce),WE=n(Ce,"LI",{});var CVe=s(WE);JEe=n(CVe,"STRONG",{});var uOt=s(JEe);zyr=r(uOt,"openai-gpt"),uOt.forEach(t),Wyr=r(CVe," \u2014 "),HK=n(CVe,"A",{href:!0});var bOt=s(HK);Qyr=r(bOt,"TFOpenAIGPTLMHeadModel"),bOt.forEach(t),Uyr=r(CVe," (OpenAI GPT model)"),CVe.forEach(t),Hyr=i(Ce),QE=n(Ce,"LI",{});var wVe=s(QE);YEe=n(wVe,"STRONG",{});var vOt=s(YEe);Jyr=r(vOt,"opt"),vOt.forEach(t),Yyr=r(wVe," \u2014 "),JK=n(wVe,"A",{href:!0});var FOt=s(JK);Kyr=r(FOt,"TFOPTForCausalLM"),FOt.forEach(t),Zyr=r(wVe," (OPT model)"),wVe.forEach(t),e9r=i(Ce),UE=n(Ce,"LI",{});var AVe=s(UE);KEe=n(AVe,"STRONG",{});var TOt=s(KEe);o9r=r(TOt,"rembert"),TOt.forEach(t),r9r=r(AVe," \u2014 "),YK=n(AVe,"A",{href:!0});var MOt=s(YK);t9r=r(MOt,"TFRemBertForCausalLM"),MOt.forEach(t),a9r=r(AVe," (RemBERT model)"),AVe.forEach(t),n9r=i(Ce),HE=n(Ce,"LI",{});var LVe=s(HE);ZEe=n(LVe,"STRONG",{});var EOt=s(ZEe);s9r=r(EOt,"roberta"),EOt.forEach(t),l9r=r(LVe," \u2014 "),KK=n(LVe,"A",{href:!0});var COt=s(KK);i9r=r(COt,"TFRobertaForCausalLM"),COt.forEach(t),d9r=r(LVe," (RoBERTa model)"),LVe.forEach(t),c9r=i(Ce),JE=n(Ce,"LI",{});var yVe=s(JE);e4e=n(yVe,"STRONG",{});var wOt=s(e4e);f9r=r(wOt,"roformer"),wOt.forEach(t),m9r=r(yVe," \u2014 "),ZK=n(yVe,"A",{href:!0});var AOt=s(ZK);g9r=r(AOt,"TFRoFormerForCausalLM"),AOt.forEach(t),h9r=r(yVe," (RoFormer model)"),yVe.forEach(t),p9r=i(Ce),YE=n(Ce,"LI",{});var xVe=s(YE);o4e=n(xVe,"STRONG",{});var LOt=s(o4e);_9r=r(LOt,"transfo-xl"),LOt.forEach(t),u9r=r(xVe," \u2014 "),eZ=n(xVe,"A",{href:!0});var yOt=s(eZ);b9r=r(yOt,"TFTransfoXLLMHeadModel"),yOt.forEach(t),v9r=r(xVe," (Transformer-XL model)"),xVe.forEach(t),F9r=i(Ce),KE=n(Ce,"LI",{});var $Ve=s(KE);r4e=n($Ve,"STRONG",{});var xOt=s(r4e);T9r=r(xOt,"xlm"),xOt.forEach(t),M9r=r($Ve," \u2014 "),oZ=n($Ve,"A",{href:!0});var $Ot=s(oZ);E9r=r($Ot,"TFXLMWithLMHeadModel"),$Ot.forEach(t),C9r=r($Ve," (XLM model)"),$Ve.forEach(t),w9r=i(Ce),ZE=n(Ce,"LI",{});var kVe=s(ZE);t4e=n(kVe,"STRONG",{});var kOt=s(t4e);A9r=r(kOt,"xlnet"),kOt.forEach(t),L9r=r(kVe," \u2014 "),rZ=n(kVe,"A",{href:!0});var SOt=s(rZ);y9r=r(SOt,"TFXLNetLMHeadModel"),SOt.forEach(t),x9r=r(kVe," (XLNet model)"),kVe.forEach(t),Ce.forEach(t),$9r=i(Ql),T(e4.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),uHe=i(f),Sc=n(f,"H2",{class:!0});var xYe=s(Sc);o4=n(xYe,"A",{id:!0,class:!0,href:!0});var ROt=s(o4);a4e=n(ROt,"SPAN",{});var POt=s(a4e);T(E$.$$.fragment,POt),POt.forEach(t),ROt.forEach(t),k9r=i(xYe),n4e=n(xYe,"SPAN",{});var BOt=s(n4e);S9r=r(BOt,"TFAutoModelForImageClassification"),BOt.forEach(t),xYe.forEach(t),bHe=i(f),lr=n(f,"DIV",{class:!0});var Ul=s(lr);T(C$.$$.fragment,Ul),R9r=i(Ul),Rc=n(Ul,"P",{});var Jne=s(Rc);P9r=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tZ=n(Jne,"A",{href:!0});var IOt=s(tZ);B9r=r(IOt,"from_pretrained()"),IOt.forEach(t),I9r=r(Jne," class method or the "),aZ=n(Jne,"A",{href:!0});var NOt=s(aZ);N9r=r(NOt,"from_config()"),NOt.forEach(t),q9r=r(Jne,` class
method.`),Jne.forEach(t),j9r=i(Ul),w$=n(Ul,"P",{});var $Ye=s(w$);D9r=r($Ye,"This class cannot be instantiated directly using "),s4e=n($Ye,"CODE",{});var qOt=s(s4e);G9r=r(qOt,"__init__()"),qOt.forEach(t),O9r=r($Ye," (throws an error)."),$Ye.forEach(t),V9r=i(Ul),Gt=n(Ul,"DIV",{class:!0});var vL=s(Gt);T(A$.$$.fragment,vL),X9r=i(vL),l4e=n(vL,"P",{});var jOt=s(l4e);z9r=r(jOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jOt.forEach(t),W9r=i(vL),Pc=n(vL,"P",{});var Yne=s(Pc);Q9r=r(Yne,`Note:
Loading a model from its configuration file does `),i4e=n(Yne,"STRONG",{});var DOt=s(i4e);U9r=r(DOt,"not"),DOt.forEach(t),H9r=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(Yne,"A",{href:!0});var GOt=s(nZ);J9r=r(GOt,"from_pretrained()"),GOt.forEach(t),Y9r=r(Yne," to load the model weights."),Yne.forEach(t),K9r=i(vL),T(r4.$$.fragment,vL),vL.forEach(t),Z9r=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(L$.$$.fragment,Hl),exr=i(Hl),d4e=n(Hl,"P",{});var OOt=s(d4e);oxr=r(OOt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),OOt.forEach(t),rxr=i(Hl),vn=n(Hl,"P",{});var FL=s(vn);txr=r(FL,"The model class to instantiate is selected based on the "),c4e=n(FL,"CODE",{});var VOt=s(c4e);axr=r(VOt,"model_type"),VOt.forEach(t),nxr=r(FL,` property of the config object (either
passed as an argument or loaded from `),f4e=n(FL,"CODE",{});var XOt=s(f4e);sxr=r(XOt,"pretrained_model_name_or_path"),XOt.forEach(t),lxr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(FL,"CODE",{});var zOt=s(m4e);ixr=r(zOt,"pretrained_model_name_or_path"),zOt.forEach(t),dxr=r(FL,":"),FL.forEach(t),cxr=i(Hl),Ve=n(Hl,"UL",{});var Eo=s(Ve);t4=n(Eo,"LI",{});var SVe=s(t4);g4e=n(SVe,"STRONG",{});var WOt=s(g4e);fxr=r(WOt,"convnext"),WOt.forEach(t),mxr=r(SVe," \u2014 "),sZ=n(SVe,"A",{href:!0});var QOt=s(sZ);gxr=r(QOt,"TFConvNextForImageClassification"),QOt.forEach(t),hxr=r(SVe," (ConvNeXT model)"),SVe.forEach(t),pxr=i(Eo),a4=n(Eo,"LI",{});var RVe=s(a4);h4e=n(RVe,"STRONG",{});var UOt=s(h4e);_xr=r(UOt,"data2vec-vision"),UOt.forEach(t),uxr=r(RVe," \u2014 "),lZ=n(RVe,"A",{href:!0});var HOt=s(lZ);bxr=r(HOt,"TFData2VecVisionForImageClassification"),HOt.forEach(t),vxr=r(RVe," (Data2VecVision model)"),RVe.forEach(t),Fxr=i(Eo),dl=n(Eo,"LI",{});var sP=s(dl);p4e=n(sP,"STRONG",{});var JOt=s(p4e);Txr=r(JOt,"deit"),JOt.forEach(t),Mxr=r(sP," \u2014 "),iZ=n(sP,"A",{href:!0});var YOt=s(iZ);Exr=r(YOt,"TFDeiTForImageClassification"),YOt.forEach(t),Cxr=r(sP," or "),dZ=n(sP,"A",{href:!0});var KOt=s(dZ);wxr=r(KOt,"TFDeiTForImageClassificationWithTeacher"),KOt.forEach(t),Axr=r(sP," (DeiT model)"),sP.forEach(t),Lxr=i(Eo),n4=n(Eo,"LI",{});var PVe=s(n4);_4e=n(PVe,"STRONG",{});var ZOt=s(_4e);yxr=r(ZOt,"regnet"),ZOt.forEach(t),xxr=r(PVe," \u2014 "),cZ=n(PVe,"A",{href:!0});var eVt=s(cZ);$xr=r(eVt,"TFRegNetForImageClassification"),eVt.forEach(t),kxr=r(PVe," (RegNet model)"),PVe.forEach(t),Sxr=i(Eo),s4=n(Eo,"LI",{});var BVe=s(s4);u4e=n(BVe,"STRONG",{});var oVt=s(u4e);Rxr=r(oVt,"resnet"),oVt.forEach(t),Pxr=r(BVe," \u2014 "),fZ=n(BVe,"A",{href:!0});var rVt=s(fZ);Bxr=r(rVt,"TFResNetForImageClassification"),rVt.forEach(t),Ixr=r(BVe," (ResNet model)"),BVe.forEach(t),Nxr=i(Eo),l4=n(Eo,"LI",{});var IVe=s(l4);b4e=n(IVe,"STRONG",{});var tVt=s(b4e);qxr=r(tVt,"segformer"),tVt.forEach(t),jxr=r(IVe," \u2014 "),mZ=n(IVe,"A",{href:!0});var aVt=s(mZ);Dxr=r(aVt,"TFSegformerForImageClassification"),aVt.forEach(t),Gxr=r(IVe," (SegFormer model)"),IVe.forEach(t),Oxr=i(Eo),i4=n(Eo,"LI",{});var NVe=s(i4);v4e=n(NVe,"STRONG",{});var nVt=s(v4e);Vxr=r(nVt,"swin"),nVt.forEach(t),Xxr=r(NVe," \u2014 "),gZ=n(NVe,"A",{href:!0});var sVt=s(gZ);zxr=r(sVt,"TFSwinForImageClassification"),sVt.forEach(t),Wxr=r(NVe," (Swin Transformer model)"),NVe.forEach(t),Qxr=i(Eo),d4=n(Eo,"LI",{});var qVe=s(d4);F4e=n(qVe,"STRONG",{});var lVt=s(F4e);Uxr=r(lVt,"vit"),lVt.forEach(t),Hxr=r(qVe," \u2014 "),hZ=n(qVe,"A",{href:!0});var iVt=s(hZ);Jxr=r(iVt,"TFViTForImageClassification"),iVt.forEach(t),Yxr=r(qVe," (ViT model)"),qVe.forEach(t),Eo.forEach(t),Kxr=i(Hl),T(c4.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),vHe=i(f),Bc=n(f,"H2",{class:!0});var kYe=s(Bc);f4=n(kYe,"A",{id:!0,class:!0,href:!0});var dVt=s(f4);T4e=n(dVt,"SPAN",{});var cVt=s(T4e);T(y$.$$.fragment,cVt),cVt.forEach(t),dVt.forEach(t),Zxr=i(kYe),M4e=n(kYe,"SPAN",{});var fVt=s(M4e);e$r=r(fVt,"TFAutoModelForSemanticSegmentation"),fVt.forEach(t),kYe.forEach(t),FHe=i(f),ir=n(f,"DIV",{class:!0});var Jl=s(ir);T(x$.$$.fragment,Jl),o$r=i(Jl),Ic=n(Jl,"P",{});var Kne=s(Ic);r$r=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pZ=n(Kne,"A",{href:!0});var mVt=s(pZ);t$r=r(mVt,"from_pretrained()"),mVt.forEach(t),a$r=r(Kne," class method or the "),_Z=n(Kne,"A",{href:!0});var gVt=s(_Z);n$r=r(gVt,"from_config()"),gVt.forEach(t),s$r=r(Kne,` class
method.`),Kne.forEach(t),l$r=i(Jl),$$=n(Jl,"P",{});var SYe=s($$);i$r=r(SYe,"This class cannot be instantiated directly using "),E4e=n(SYe,"CODE",{});var hVt=s(E4e);d$r=r(hVt,"__init__()"),hVt.forEach(t),c$r=r(SYe," (throws an error)."),SYe.forEach(t),f$r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var TL=s(Ot);T(k$.$$.fragment,TL),m$r=i(TL),C4e=n(TL,"P",{});var pVt=s(C4e);g$r=r(pVt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),pVt.forEach(t),h$r=i(TL),Nc=n(TL,"P",{});var Zne=s(Nc);p$r=r(Zne,`Note:
Loading a model from its configuration file does `),w4e=n(Zne,"STRONG",{});var _Vt=s(w4e);_$r=r(_Vt,"not"),_Vt.forEach(t),u$r=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(Zne,"A",{href:!0});var uVt=s(uZ);b$r=r(uVt,"from_pretrained()"),uVt.forEach(t),v$r=r(Zne," to load the model weights."),Zne.forEach(t),F$r=i(TL),T(m4.$$.fragment,TL),TL.forEach(t),T$r=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(S$.$$.fragment,Yl),M$r=i(Yl),A4e=n(Yl,"P",{});var bVt=s(A4e);E$r=r(bVt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),bVt.forEach(t),C$r=i(Yl),Fn=n(Yl,"P",{});var ML=s(Fn);w$r=r(ML,"The model class to instantiate is selected based on the "),L4e=n(ML,"CODE",{});var vVt=s(L4e);A$r=r(vVt,"model_type"),vVt.forEach(t),L$r=r(ML,` property of the config object (either
passed as an argument or loaded from `),y4e=n(ML,"CODE",{});var FVt=s(y4e);y$r=r(FVt,"pretrained_model_name_or_path"),FVt.forEach(t),x$r=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(ML,"CODE",{});var TVt=s(x4e);$$r=r(TVt,"pretrained_model_name_or_path"),TVt.forEach(t),k$r=r(ML,":"),ML.forEach(t),S$r=i(Yl),R$=n(Yl,"UL",{});var RYe=s(R$);g4=n(RYe,"LI",{});var jVe=s(g4);$4e=n(jVe,"STRONG",{});var MVt=s($4e);R$r=r(MVt,"data2vec-vision"),MVt.forEach(t),P$r=r(jVe," \u2014 "),bZ=n(jVe,"A",{href:!0});var EVt=s(bZ);B$r=r(EVt,"TFData2VecVisionForSemanticSegmentation"),EVt.forEach(t),I$r=r(jVe," (Data2VecVision model)"),jVe.forEach(t),N$r=i(RYe),h4=n(RYe,"LI",{});var DVe=s(h4);k4e=n(DVe,"STRONG",{});var CVt=s(k4e);q$r=r(CVt,"segformer"),CVt.forEach(t),j$r=r(DVe," \u2014 "),vZ=n(DVe,"A",{href:!0});var wVt=s(vZ);D$r=r(wVt,"TFSegformerForSemanticSegmentation"),wVt.forEach(t),G$r=r(DVe," (SegFormer model)"),DVe.forEach(t),RYe.forEach(t),O$r=i(Yl),T(p4.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),THe=i(f),qc=n(f,"H2",{class:!0});var PYe=s(qc);_4=n(PYe,"A",{id:!0,class:!0,href:!0});var AVt=s(_4);S4e=n(AVt,"SPAN",{});var LVt=s(S4e);T(P$.$$.fragment,LVt),LVt.forEach(t),AVt.forEach(t),V$r=i(PYe),R4e=n(PYe,"SPAN",{});var yVt=s(R4e);X$r=r(yVt,"TFAutoModelForMaskedLM"),yVt.forEach(t),PYe.forEach(t),MHe=i(f),dr=n(f,"DIV",{class:!0});var Kl=s(dr);T(B$.$$.fragment,Kl),z$r=i(Kl),jc=n(Kl,"P",{});var ese=s(jc);W$r=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FZ=n(ese,"A",{href:!0});var xVt=s(FZ);Q$r=r(xVt,"from_pretrained()"),xVt.forEach(t),U$r=r(ese," class method or the "),TZ=n(ese,"A",{href:!0});var $Vt=s(TZ);H$r=r($Vt,"from_config()"),$Vt.forEach(t),J$r=r(ese,` class
method.`),ese.forEach(t),Y$r=i(Kl),I$=n(Kl,"P",{});var BYe=s(I$);K$r=r(BYe,"This class cannot be instantiated directly using "),P4e=n(BYe,"CODE",{});var kVt=s(P4e);Z$r=r(kVt,"__init__()"),kVt.forEach(t),ekr=r(BYe," (throws an error)."),BYe.forEach(t),okr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var EL=s(Vt);T(N$.$$.fragment,EL),rkr=i(EL),B4e=n(EL,"P",{});var SVt=s(B4e);tkr=r(SVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SVt.forEach(t),akr=i(EL),Dc=n(EL,"P",{});var ose=s(Dc);nkr=r(ose,`Note:
Loading a model from its configuration file does `),I4e=n(ose,"STRONG",{});var RVt=s(I4e);skr=r(RVt,"not"),RVt.forEach(t),lkr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(ose,"A",{href:!0});var PVt=s(MZ);ikr=r(PVt,"from_pretrained()"),PVt.forEach(t),dkr=r(ose," to load the model weights."),ose.forEach(t),ckr=i(EL),T(u4.$$.fragment,EL),EL.forEach(t),fkr=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(q$.$$.fragment,Zl),mkr=i(Zl),N4e=n(Zl,"P",{});var BVt=s(N4e);gkr=r(BVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BVt.forEach(t),hkr=i(Zl),Tn=n(Zl,"P",{});var CL=s(Tn);pkr=r(CL,"The model class to instantiate is selected based on the "),q4e=n(CL,"CODE",{});var IVt=s(q4e);_kr=r(IVt,"model_type"),IVt.forEach(t),ukr=r(CL,` property of the config object (either
passed as an argument or loaded from `),j4e=n(CL,"CODE",{});var NVt=s(j4e);bkr=r(NVt,"pretrained_model_name_or_path"),NVt.forEach(t),vkr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(CL,"CODE",{});var qVt=s(D4e);Fkr=r(qVt,"pretrained_model_name_or_path"),qVt.forEach(t),Tkr=r(CL,":"),CL.forEach(t),Mkr=i(Zl),fe=n(Zl,"UL",{});var _e=s(fe);b4=n(_e,"LI",{});var GVe=s(b4);G4e=n(GVe,"STRONG",{});var jVt=s(G4e);Ekr=r(jVt,"albert"),jVt.forEach(t),Ckr=r(GVe," \u2014 "),EZ=n(GVe,"A",{href:!0});var DVt=s(EZ);wkr=r(DVt,"TFAlbertForMaskedLM"),DVt.forEach(t),Akr=r(GVe," (ALBERT model)"),GVe.forEach(t),Lkr=i(_e),v4=n(_e,"LI",{});var OVe=s(v4);O4e=n(OVe,"STRONG",{});var GVt=s(O4e);ykr=r(GVt,"bert"),GVt.forEach(t),xkr=r(OVe," \u2014 "),CZ=n(OVe,"A",{href:!0});var OVt=s(CZ);$kr=r(OVt,"TFBertForMaskedLM"),OVt.forEach(t),kkr=r(OVe," (BERT model)"),OVe.forEach(t),Skr=i(_e),F4=n(_e,"LI",{});var VVe=s(F4);V4e=n(VVe,"STRONG",{});var VVt=s(V4e);Rkr=r(VVt,"camembert"),VVt.forEach(t),Pkr=r(VVe," \u2014 "),wZ=n(VVe,"A",{href:!0});var XVt=s(wZ);Bkr=r(XVt,"TFCamembertForMaskedLM"),XVt.forEach(t),Ikr=r(VVe," (CamemBERT model)"),VVe.forEach(t),Nkr=i(_e),T4=n(_e,"LI",{});var XVe=s(T4);X4e=n(XVe,"STRONG",{});var zVt=s(X4e);qkr=r(zVt,"convbert"),zVt.forEach(t),jkr=r(XVe," \u2014 "),AZ=n(XVe,"A",{href:!0});var WVt=s(AZ);Dkr=r(WVt,"TFConvBertForMaskedLM"),WVt.forEach(t),Gkr=r(XVe," (ConvBERT model)"),XVe.forEach(t),Okr=i(_e),M4=n(_e,"LI",{});var zVe=s(M4);z4e=n(zVe,"STRONG",{});var QVt=s(z4e);Vkr=r(QVt,"deberta"),QVt.forEach(t),Xkr=r(zVe," \u2014 "),LZ=n(zVe,"A",{href:!0});var UVt=s(LZ);zkr=r(UVt,"TFDebertaForMaskedLM"),UVt.forEach(t),Wkr=r(zVe," (DeBERTa model)"),zVe.forEach(t),Qkr=i(_e),E4=n(_e,"LI",{});var WVe=s(E4);W4e=n(WVe,"STRONG",{});var HVt=s(W4e);Ukr=r(HVt,"deberta-v2"),HVt.forEach(t),Hkr=r(WVe," \u2014 "),yZ=n(WVe,"A",{href:!0});var JVt=s(yZ);Jkr=r(JVt,"TFDebertaV2ForMaskedLM"),JVt.forEach(t),Ykr=r(WVe," (DeBERTa-v2 model)"),WVe.forEach(t),Kkr=i(_e),C4=n(_e,"LI",{});var QVe=s(C4);Q4e=n(QVe,"STRONG",{});var YVt=s(Q4e);Zkr=r(YVt,"distilbert"),YVt.forEach(t),eSr=r(QVe," \u2014 "),xZ=n(QVe,"A",{href:!0});var KVt=s(xZ);oSr=r(KVt,"TFDistilBertForMaskedLM"),KVt.forEach(t),rSr=r(QVe," (DistilBERT model)"),QVe.forEach(t),tSr=i(_e),w4=n(_e,"LI",{});var UVe=s(w4);U4e=n(UVe,"STRONG",{});var ZVt=s(U4e);aSr=r(ZVt,"electra"),ZVt.forEach(t),nSr=r(UVe," \u2014 "),$Z=n(UVe,"A",{href:!0});var eXt=s($Z);sSr=r(eXt,"TFElectraForMaskedLM"),eXt.forEach(t),lSr=r(UVe," (ELECTRA model)"),UVe.forEach(t),iSr=i(_e),A4=n(_e,"LI",{});var HVe=s(A4);H4e=n(HVe,"STRONG",{});var oXt=s(H4e);dSr=r(oXt,"flaubert"),oXt.forEach(t),cSr=r(HVe," \u2014 "),kZ=n(HVe,"A",{href:!0});var rXt=s(kZ);fSr=r(rXt,"TFFlaubertWithLMHeadModel"),rXt.forEach(t),mSr=r(HVe," (FlauBERT model)"),HVe.forEach(t),gSr=i(_e),L4=n(_e,"LI",{});var JVe=s(L4);J4e=n(JVe,"STRONG",{});var tXt=s(J4e);hSr=r(tXt,"funnel"),tXt.forEach(t),pSr=r(JVe," \u2014 "),SZ=n(JVe,"A",{href:!0});var aXt=s(SZ);_Sr=r(aXt,"TFFunnelForMaskedLM"),aXt.forEach(t),uSr=r(JVe," (Funnel Transformer model)"),JVe.forEach(t),bSr=i(_e),y4=n(_e,"LI",{});var YVe=s(y4);Y4e=n(YVe,"STRONG",{});var nXt=s(Y4e);vSr=r(nXt,"layoutlm"),nXt.forEach(t),FSr=r(YVe," \u2014 "),RZ=n(YVe,"A",{href:!0});var sXt=s(RZ);TSr=r(sXt,"TFLayoutLMForMaskedLM"),sXt.forEach(t),MSr=r(YVe," (LayoutLM model)"),YVe.forEach(t),ESr=i(_e),x4=n(_e,"LI",{});var KVe=s(x4);K4e=n(KVe,"STRONG",{});var lXt=s(K4e);CSr=r(lXt,"longformer"),lXt.forEach(t),wSr=r(KVe," \u2014 "),PZ=n(KVe,"A",{href:!0});var iXt=s(PZ);ASr=r(iXt,"TFLongformerForMaskedLM"),iXt.forEach(t),LSr=r(KVe," (Longformer model)"),KVe.forEach(t),ySr=i(_e),$4=n(_e,"LI",{});var ZVe=s($4);Z4e=n(ZVe,"STRONG",{});var dXt=s(Z4e);xSr=r(dXt,"mobilebert"),dXt.forEach(t),$Sr=r(ZVe," \u2014 "),BZ=n(ZVe,"A",{href:!0});var cXt=s(BZ);kSr=r(cXt,"TFMobileBertForMaskedLM"),cXt.forEach(t),SSr=r(ZVe," (MobileBERT model)"),ZVe.forEach(t),RSr=i(_e),k4=n(_e,"LI",{});var eXe=s(k4);eCe=n(eXe,"STRONG",{});var fXt=s(eCe);PSr=r(fXt,"mpnet"),fXt.forEach(t),BSr=r(eXe," \u2014 "),IZ=n(eXe,"A",{href:!0});var mXt=s(IZ);ISr=r(mXt,"TFMPNetForMaskedLM"),mXt.forEach(t),NSr=r(eXe," (MPNet model)"),eXe.forEach(t),qSr=i(_e),S4=n(_e,"LI",{});var oXe=s(S4);oCe=n(oXe,"STRONG",{});var gXt=s(oCe);jSr=r(gXt,"rembert"),gXt.forEach(t),DSr=r(oXe," \u2014 "),NZ=n(oXe,"A",{href:!0});var hXt=s(NZ);GSr=r(hXt,"TFRemBertForMaskedLM"),hXt.forEach(t),OSr=r(oXe," (RemBERT model)"),oXe.forEach(t),VSr=i(_e),R4=n(_e,"LI",{});var rXe=s(R4);rCe=n(rXe,"STRONG",{});var pXt=s(rCe);XSr=r(pXt,"roberta"),pXt.forEach(t),zSr=r(rXe," \u2014 "),qZ=n(rXe,"A",{href:!0});var _Xt=s(qZ);WSr=r(_Xt,"TFRobertaForMaskedLM"),_Xt.forEach(t),QSr=r(rXe," (RoBERTa model)"),rXe.forEach(t),USr=i(_e),P4=n(_e,"LI",{});var tXe=s(P4);tCe=n(tXe,"STRONG",{});var uXt=s(tCe);HSr=r(uXt,"roformer"),uXt.forEach(t),JSr=r(tXe," \u2014 "),jZ=n(tXe,"A",{href:!0});var bXt=s(jZ);YSr=r(bXt,"TFRoFormerForMaskedLM"),bXt.forEach(t),KSr=r(tXe," (RoFormer model)"),tXe.forEach(t),ZSr=i(_e),B4=n(_e,"LI",{});var aXe=s(B4);aCe=n(aXe,"STRONG",{});var vXt=s(aCe);eRr=r(vXt,"tapas"),vXt.forEach(t),oRr=r(aXe," \u2014 "),DZ=n(aXe,"A",{href:!0});var FXt=s(DZ);rRr=r(FXt,"TFTapasForMaskedLM"),FXt.forEach(t),tRr=r(aXe," (TAPAS model)"),aXe.forEach(t),aRr=i(_e),I4=n(_e,"LI",{});var nXe=s(I4);nCe=n(nXe,"STRONG",{});var TXt=s(nCe);nRr=r(TXt,"xlm"),TXt.forEach(t),sRr=r(nXe," \u2014 "),GZ=n(nXe,"A",{href:!0});var MXt=s(GZ);lRr=r(MXt,"TFXLMWithLMHeadModel"),MXt.forEach(t),iRr=r(nXe," (XLM model)"),nXe.forEach(t),dRr=i(_e),N4=n(_e,"LI",{});var sXe=s(N4);sCe=n(sXe,"STRONG",{});var EXt=s(sCe);cRr=r(EXt,"xlm-roberta"),EXt.forEach(t),fRr=r(sXe," \u2014 "),OZ=n(sXe,"A",{href:!0});var CXt=s(OZ);mRr=r(CXt,"TFXLMRobertaForMaskedLM"),CXt.forEach(t),gRr=r(sXe," (XLM-RoBERTa model)"),sXe.forEach(t),_e.forEach(t),hRr=i(Zl),T(q4.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),EHe=i(f),Gc=n(f,"H2",{class:!0});var IYe=s(Gc);j4=n(IYe,"A",{id:!0,class:!0,href:!0});var wXt=s(j4);lCe=n(wXt,"SPAN",{});var AXt=s(lCe);T(j$.$$.fragment,AXt),AXt.forEach(t),wXt.forEach(t),pRr=i(IYe),iCe=n(IYe,"SPAN",{});var LXt=s(iCe);_Rr=r(LXt,"TFAutoModelForSeq2SeqLM"),LXt.forEach(t),IYe.forEach(t),CHe=i(f),cr=n(f,"DIV",{class:!0});var ei=s(cr);T(D$.$$.fragment,ei),uRr=i(ei),Oc=n(ei,"P",{});var rse=s(Oc);bRr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VZ=n(rse,"A",{href:!0});var yXt=s(VZ);vRr=r(yXt,"from_pretrained()"),yXt.forEach(t),FRr=r(rse," class method or the "),XZ=n(rse,"A",{href:!0});var xXt=s(XZ);TRr=r(xXt,"from_config()"),xXt.forEach(t),MRr=r(rse,` class
method.`),rse.forEach(t),ERr=i(ei),G$=n(ei,"P",{});var NYe=s(G$);CRr=r(NYe,"This class cannot be instantiated directly using "),dCe=n(NYe,"CODE",{});var $Xt=s(dCe);wRr=r($Xt,"__init__()"),$Xt.forEach(t),ARr=r(NYe," (throws an error)."),NYe.forEach(t),LRr=i(ei),Xt=n(ei,"DIV",{class:!0});var wL=s(Xt);T(O$.$$.fragment,wL),yRr=i(wL),cCe=n(wL,"P",{});var kXt=s(cCe);xRr=r(kXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kXt.forEach(t),$Rr=i(wL),Vc=n(wL,"P",{});var tse=s(Vc);kRr=r(tse,`Note:
Loading a model from its configuration file does `),fCe=n(tse,"STRONG",{});var SXt=s(fCe);SRr=r(SXt,"not"),SXt.forEach(t),RRr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(tse,"A",{href:!0});var RXt=s(zZ);PRr=r(RXt,"from_pretrained()"),RXt.forEach(t),BRr=r(tse," to load the model weights."),tse.forEach(t),IRr=i(wL),T(D4.$$.fragment,wL),wL.forEach(t),NRr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(V$.$$.fragment,oi),qRr=i(oi),mCe=n(oi,"P",{});var PXt=s(mCe);jRr=r(PXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PXt.forEach(t),DRr=i(oi),Mn=n(oi,"P",{});var AL=s(Mn);GRr=r(AL,"The model class to instantiate is selected based on the "),gCe=n(AL,"CODE",{});var BXt=s(gCe);ORr=r(BXt,"model_type"),BXt.forEach(t),VRr=r(AL,` property of the config object (either
passed as an argument or loaded from `),hCe=n(AL,"CODE",{});var IXt=s(hCe);XRr=r(IXt,"pretrained_model_name_or_path"),IXt.forEach(t),zRr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=n(AL,"CODE",{});var NXt=s(pCe);WRr=r(NXt,"pretrained_model_name_or_path"),NXt.forEach(t),QRr=r(AL,":"),AL.forEach(t),URr=i(oi),ye=n(oi,"UL",{});var Ie=s(ye);G4=n(Ie,"LI",{});var lXe=s(G4);_Ce=n(lXe,"STRONG",{});var qXt=s(_Ce);HRr=r(qXt,"bart"),qXt.forEach(t),JRr=r(lXe," \u2014 "),WZ=n(lXe,"A",{href:!0});var jXt=s(WZ);YRr=r(jXt,"TFBartForConditionalGeneration"),jXt.forEach(t),KRr=r(lXe," (BART model)"),lXe.forEach(t),ZRr=i(Ie),O4=n(Ie,"LI",{});var iXe=s(O4);uCe=n(iXe,"STRONG",{});var DXt=s(uCe);ePr=r(DXt,"blenderbot"),DXt.forEach(t),oPr=r(iXe," \u2014 "),QZ=n(iXe,"A",{href:!0});var GXt=s(QZ);rPr=r(GXt,"TFBlenderbotForConditionalGeneration"),GXt.forEach(t),tPr=r(iXe," (Blenderbot model)"),iXe.forEach(t),aPr=i(Ie),V4=n(Ie,"LI",{});var dXe=s(V4);bCe=n(dXe,"STRONG",{});var OXt=s(bCe);nPr=r(OXt,"blenderbot-small"),OXt.forEach(t),sPr=r(dXe," \u2014 "),UZ=n(dXe,"A",{href:!0});var VXt=s(UZ);lPr=r(VXt,"TFBlenderbotSmallForConditionalGeneration"),VXt.forEach(t),iPr=r(dXe," (BlenderbotSmall model)"),dXe.forEach(t),dPr=i(Ie),X4=n(Ie,"LI",{});var cXe=s(X4);vCe=n(cXe,"STRONG",{});var XXt=s(vCe);cPr=r(XXt,"encoder-decoder"),XXt.forEach(t),fPr=r(cXe," \u2014 "),HZ=n(cXe,"A",{href:!0});var zXt=s(HZ);mPr=r(zXt,"TFEncoderDecoderModel"),zXt.forEach(t),gPr=r(cXe," (Encoder decoder model)"),cXe.forEach(t),hPr=i(Ie),z4=n(Ie,"LI",{});var fXe=s(z4);FCe=n(fXe,"STRONG",{});var WXt=s(FCe);pPr=r(WXt,"led"),WXt.forEach(t),_Pr=r(fXe," \u2014 "),JZ=n(fXe,"A",{href:!0});var QXt=s(JZ);uPr=r(QXt,"TFLEDForConditionalGeneration"),QXt.forEach(t),bPr=r(fXe," (LED model)"),fXe.forEach(t),vPr=i(Ie),W4=n(Ie,"LI",{});var mXe=s(W4);TCe=n(mXe,"STRONG",{});var UXt=s(TCe);FPr=r(UXt,"marian"),UXt.forEach(t),TPr=r(mXe," \u2014 "),YZ=n(mXe,"A",{href:!0});var HXt=s(YZ);MPr=r(HXt,"TFMarianMTModel"),HXt.forEach(t),EPr=r(mXe," (Marian model)"),mXe.forEach(t),CPr=i(Ie),Q4=n(Ie,"LI",{});var gXe=s(Q4);MCe=n(gXe,"STRONG",{});var JXt=s(MCe);wPr=r(JXt,"mbart"),JXt.forEach(t),APr=r(gXe," \u2014 "),KZ=n(gXe,"A",{href:!0});var YXt=s(KZ);LPr=r(YXt,"TFMBartForConditionalGeneration"),YXt.forEach(t),yPr=r(gXe," (mBART model)"),gXe.forEach(t),xPr=i(Ie),U4=n(Ie,"LI",{});var hXe=s(U4);ECe=n(hXe,"STRONG",{});var KXt=s(ECe);$Pr=r(KXt,"mt5"),KXt.forEach(t),kPr=r(hXe," \u2014 "),ZZ=n(hXe,"A",{href:!0});var ZXt=s(ZZ);SPr=r(ZXt,"TFMT5ForConditionalGeneration"),ZXt.forEach(t),RPr=r(hXe," (MT5 model)"),hXe.forEach(t),PPr=i(Ie),H4=n(Ie,"LI",{});var pXe=s(H4);CCe=n(pXe,"STRONG",{});var ezt=s(CCe);BPr=r(ezt,"pegasus"),ezt.forEach(t),IPr=r(pXe," \u2014 "),eee=n(pXe,"A",{href:!0});var ozt=s(eee);NPr=r(ozt,"TFPegasusForConditionalGeneration"),ozt.forEach(t),qPr=r(pXe," (Pegasus model)"),pXe.forEach(t),jPr=i(Ie),J4=n(Ie,"LI",{});var _Xe=s(J4);wCe=n(_Xe,"STRONG",{});var rzt=s(wCe);DPr=r(rzt,"t5"),rzt.forEach(t),GPr=r(_Xe," \u2014 "),oee=n(_Xe,"A",{href:!0});var tzt=s(oee);OPr=r(tzt,"TFT5ForConditionalGeneration"),tzt.forEach(t),VPr=r(_Xe," (T5 model)"),_Xe.forEach(t),Ie.forEach(t),XPr=i(oi),T(Y4.$$.fragment,oi),oi.forEach(t),ei.forEach(t),wHe=i(f),Xc=n(f,"H2",{class:!0});var qYe=s(Xc);K4=n(qYe,"A",{id:!0,class:!0,href:!0});var azt=s(K4);ACe=n(azt,"SPAN",{});var nzt=s(ACe);T(X$.$$.fragment,nzt),nzt.forEach(t),azt.forEach(t),zPr=i(qYe),LCe=n(qYe,"SPAN",{});var szt=s(LCe);WPr=r(szt,"TFAutoModelForSequenceClassification"),szt.forEach(t),qYe.forEach(t),AHe=i(f),fr=n(f,"DIV",{class:!0});var ri=s(fr);T(z$.$$.fragment,ri),QPr=i(ri),zc=n(ri,"P",{});var ase=s(zc);UPr=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ree=n(ase,"A",{href:!0});var lzt=s(ree);HPr=r(lzt,"from_pretrained()"),lzt.forEach(t),JPr=r(ase," class method or the "),tee=n(ase,"A",{href:!0});var izt=s(tee);YPr=r(izt,"from_config()"),izt.forEach(t),KPr=r(ase,` class
method.`),ase.forEach(t),ZPr=i(ri),W$=n(ri,"P",{});var jYe=s(W$);eBr=r(jYe,"This class cannot be instantiated directly using "),yCe=n(jYe,"CODE",{});var dzt=s(yCe);oBr=r(dzt,"__init__()"),dzt.forEach(t),rBr=r(jYe," (throws an error)."),jYe.forEach(t),tBr=i(ri),zt=n(ri,"DIV",{class:!0});var LL=s(zt);T(Q$.$$.fragment,LL),aBr=i(LL),xCe=n(LL,"P",{});var czt=s(xCe);nBr=r(czt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),czt.forEach(t),sBr=i(LL),Wc=n(LL,"P",{});var nse=s(Wc);lBr=r(nse,`Note:
Loading a model from its configuration file does `),$Ce=n(nse,"STRONG",{});var fzt=s($Ce);iBr=r(fzt,"not"),fzt.forEach(t),dBr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(nse,"A",{href:!0});var mzt=s(aee);cBr=r(mzt,"from_pretrained()"),mzt.forEach(t),fBr=r(nse," to load the model weights."),nse.forEach(t),mBr=i(LL),T(Z4.$$.fragment,LL),LL.forEach(t),gBr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(U$.$$.fragment,ti),hBr=i(ti),kCe=n(ti,"P",{});var gzt=s(kCe);pBr=r(gzt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gzt.forEach(t),_Br=i(ti),En=n(ti,"P",{});var yL=s(En);uBr=r(yL,"The model class to instantiate is selected based on the "),SCe=n(yL,"CODE",{});var hzt=s(SCe);bBr=r(hzt,"model_type"),hzt.forEach(t),vBr=r(yL,` property of the config object (either
passed as an argument or loaded from `),RCe=n(yL,"CODE",{});var pzt=s(RCe);FBr=r(pzt,"pretrained_model_name_or_path"),pzt.forEach(t),TBr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(yL,"CODE",{});var _zt=s(PCe);MBr=r(_zt,"pretrained_model_name_or_path"),_zt.forEach(t),EBr=r(yL,":"),yL.forEach(t),CBr=i(ti),re=n(ti,"UL",{});var ae=s(re);eC=n(ae,"LI",{});var uXe=s(eC);BCe=n(uXe,"STRONG",{});var uzt=s(BCe);wBr=r(uzt,"albert"),uzt.forEach(t),ABr=r(uXe," \u2014 "),nee=n(uXe,"A",{href:!0});var bzt=s(nee);LBr=r(bzt,"TFAlbertForSequenceClassification"),bzt.forEach(t),yBr=r(uXe," (ALBERT model)"),uXe.forEach(t),xBr=i(ae),oC=n(ae,"LI",{});var bXe=s(oC);ICe=n(bXe,"STRONG",{});var vzt=s(ICe);$Br=r(vzt,"bert"),vzt.forEach(t),kBr=r(bXe," \u2014 "),see=n(bXe,"A",{href:!0});var Fzt=s(see);SBr=r(Fzt,"TFBertForSequenceClassification"),Fzt.forEach(t),RBr=r(bXe," (BERT model)"),bXe.forEach(t),PBr=i(ae),rC=n(ae,"LI",{});var vXe=s(rC);NCe=n(vXe,"STRONG",{});var Tzt=s(NCe);BBr=r(Tzt,"camembert"),Tzt.forEach(t),IBr=r(vXe," \u2014 "),lee=n(vXe,"A",{href:!0});var Mzt=s(lee);NBr=r(Mzt,"TFCamembertForSequenceClassification"),Mzt.forEach(t),qBr=r(vXe," (CamemBERT model)"),vXe.forEach(t),jBr=i(ae),tC=n(ae,"LI",{});var FXe=s(tC);qCe=n(FXe,"STRONG",{});var Ezt=s(qCe);DBr=r(Ezt,"convbert"),Ezt.forEach(t),GBr=r(FXe," \u2014 "),iee=n(FXe,"A",{href:!0});var Czt=s(iee);OBr=r(Czt,"TFConvBertForSequenceClassification"),Czt.forEach(t),VBr=r(FXe," (ConvBERT model)"),FXe.forEach(t),XBr=i(ae),aC=n(ae,"LI",{});var TXe=s(aC);jCe=n(TXe,"STRONG",{});var wzt=s(jCe);zBr=r(wzt,"ctrl"),wzt.forEach(t),WBr=r(TXe," \u2014 "),dee=n(TXe,"A",{href:!0});var Azt=s(dee);QBr=r(Azt,"TFCTRLForSequenceClassification"),Azt.forEach(t),UBr=r(TXe," (CTRL model)"),TXe.forEach(t),HBr=i(ae),nC=n(ae,"LI",{});var MXe=s(nC);DCe=n(MXe,"STRONG",{});var Lzt=s(DCe);JBr=r(Lzt,"deberta"),Lzt.forEach(t),YBr=r(MXe," \u2014 "),cee=n(MXe,"A",{href:!0});var yzt=s(cee);KBr=r(yzt,"TFDebertaForSequenceClassification"),yzt.forEach(t),ZBr=r(MXe," (DeBERTa model)"),MXe.forEach(t),eIr=i(ae),sC=n(ae,"LI",{});var EXe=s(sC);GCe=n(EXe,"STRONG",{});var xzt=s(GCe);oIr=r(xzt,"deberta-v2"),xzt.forEach(t),rIr=r(EXe," \u2014 "),fee=n(EXe,"A",{href:!0});var $zt=s(fee);tIr=r($zt,"TFDebertaV2ForSequenceClassification"),$zt.forEach(t),aIr=r(EXe," (DeBERTa-v2 model)"),EXe.forEach(t),nIr=i(ae),lC=n(ae,"LI",{});var CXe=s(lC);OCe=n(CXe,"STRONG",{});var kzt=s(OCe);sIr=r(kzt,"distilbert"),kzt.forEach(t),lIr=r(CXe," \u2014 "),mee=n(CXe,"A",{href:!0});var Szt=s(mee);iIr=r(Szt,"TFDistilBertForSequenceClassification"),Szt.forEach(t),dIr=r(CXe," (DistilBERT model)"),CXe.forEach(t),cIr=i(ae),iC=n(ae,"LI",{});var wXe=s(iC);VCe=n(wXe,"STRONG",{});var Rzt=s(VCe);fIr=r(Rzt,"electra"),Rzt.forEach(t),mIr=r(wXe," \u2014 "),gee=n(wXe,"A",{href:!0});var Pzt=s(gee);gIr=r(Pzt,"TFElectraForSequenceClassification"),Pzt.forEach(t),hIr=r(wXe," (ELECTRA model)"),wXe.forEach(t),pIr=i(ae),dC=n(ae,"LI",{});var AXe=s(dC);XCe=n(AXe,"STRONG",{});var Bzt=s(XCe);_Ir=r(Bzt,"flaubert"),Bzt.forEach(t),uIr=r(AXe," \u2014 "),hee=n(AXe,"A",{href:!0});var Izt=s(hee);bIr=r(Izt,"TFFlaubertForSequenceClassification"),Izt.forEach(t),vIr=r(AXe," (FlauBERT model)"),AXe.forEach(t),FIr=i(ae),cC=n(ae,"LI",{});var LXe=s(cC);zCe=n(LXe,"STRONG",{});var Nzt=s(zCe);TIr=r(Nzt,"funnel"),Nzt.forEach(t),MIr=r(LXe," \u2014 "),pee=n(LXe,"A",{href:!0});var qzt=s(pee);EIr=r(qzt,"TFFunnelForSequenceClassification"),qzt.forEach(t),CIr=r(LXe," (Funnel Transformer model)"),LXe.forEach(t),wIr=i(ae),fC=n(ae,"LI",{});var yXe=s(fC);WCe=n(yXe,"STRONG",{});var jzt=s(WCe);AIr=r(jzt,"gpt2"),jzt.forEach(t),LIr=r(yXe," \u2014 "),_ee=n(yXe,"A",{href:!0});var Dzt=s(_ee);yIr=r(Dzt,"TFGPT2ForSequenceClassification"),Dzt.forEach(t),xIr=r(yXe," (OpenAI GPT-2 model)"),yXe.forEach(t),$Ir=i(ae),mC=n(ae,"LI",{});var xXe=s(mC);QCe=n(xXe,"STRONG",{});var Gzt=s(QCe);kIr=r(Gzt,"gptj"),Gzt.forEach(t),SIr=r(xXe," \u2014 "),uee=n(xXe,"A",{href:!0});var Ozt=s(uee);RIr=r(Ozt,"TFGPTJForSequenceClassification"),Ozt.forEach(t),PIr=r(xXe," (GPT-J model)"),xXe.forEach(t),BIr=i(ae),gC=n(ae,"LI",{});var $Xe=s(gC);UCe=n($Xe,"STRONG",{});var Vzt=s(UCe);IIr=r(Vzt,"layoutlm"),Vzt.forEach(t),NIr=r($Xe," \u2014 "),bee=n($Xe,"A",{href:!0});var Xzt=s(bee);qIr=r(Xzt,"TFLayoutLMForSequenceClassification"),Xzt.forEach(t),jIr=r($Xe," (LayoutLM model)"),$Xe.forEach(t),DIr=i(ae),hC=n(ae,"LI",{});var kXe=s(hC);HCe=n(kXe,"STRONG",{});var zzt=s(HCe);GIr=r(zzt,"layoutlmv3"),zzt.forEach(t),OIr=r(kXe," \u2014 "),vee=n(kXe,"A",{href:!0});var Wzt=s(vee);VIr=r(Wzt,"TFLayoutLMv3ForSequenceClassification"),Wzt.forEach(t),XIr=r(kXe," (LayoutLMv3 model)"),kXe.forEach(t),zIr=i(ae),pC=n(ae,"LI",{});var SXe=s(pC);JCe=n(SXe,"STRONG",{});var Qzt=s(JCe);WIr=r(Qzt,"longformer"),Qzt.forEach(t),QIr=r(SXe," \u2014 "),Fee=n(SXe,"A",{href:!0});var Uzt=s(Fee);UIr=r(Uzt,"TFLongformerForSequenceClassification"),Uzt.forEach(t),HIr=r(SXe," (Longformer model)"),SXe.forEach(t),JIr=i(ae),_C=n(ae,"LI",{});var RXe=s(_C);YCe=n(RXe,"STRONG",{});var Hzt=s(YCe);YIr=r(Hzt,"mobilebert"),Hzt.forEach(t),KIr=r(RXe," \u2014 "),Tee=n(RXe,"A",{href:!0});var Jzt=s(Tee);ZIr=r(Jzt,"TFMobileBertForSequenceClassification"),Jzt.forEach(t),eNr=r(RXe," (MobileBERT model)"),RXe.forEach(t),oNr=i(ae),uC=n(ae,"LI",{});var PXe=s(uC);KCe=n(PXe,"STRONG",{});var Yzt=s(KCe);rNr=r(Yzt,"mpnet"),Yzt.forEach(t),tNr=r(PXe," \u2014 "),Mee=n(PXe,"A",{href:!0});var Kzt=s(Mee);aNr=r(Kzt,"TFMPNetForSequenceClassification"),Kzt.forEach(t),nNr=r(PXe," (MPNet model)"),PXe.forEach(t),sNr=i(ae),bC=n(ae,"LI",{});var BXe=s(bC);ZCe=n(BXe,"STRONG",{});var Zzt=s(ZCe);lNr=r(Zzt,"openai-gpt"),Zzt.forEach(t),iNr=r(BXe," \u2014 "),Eee=n(BXe,"A",{href:!0});var eWt=s(Eee);dNr=r(eWt,"TFOpenAIGPTForSequenceClassification"),eWt.forEach(t),cNr=r(BXe," (OpenAI GPT model)"),BXe.forEach(t),fNr=i(ae),vC=n(ae,"LI",{});var IXe=s(vC);e3e=n(IXe,"STRONG",{});var oWt=s(e3e);mNr=r(oWt,"rembert"),oWt.forEach(t),gNr=r(IXe," \u2014 "),Cee=n(IXe,"A",{href:!0});var rWt=s(Cee);hNr=r(rWt,"TFRemBertForSequenceClassification"),rWt.forEach(t),pNr=r(IXe," (RemBERT model)"),IXe.forEach(t),_Nr=i(ae),FC=n(ae,"LI",{});var NXe=s(FC);o3e=n(NXe,"STRONG",{});var tWt=s(o3e);uNr=r(tWt,"roberta"),tWt.forEach(t),bNr=r(NXe," \u2014 "),wee=n(NXe,"A",{href:!0});var aWt=s(wee);vNr=r(aWt,"TFRobertaForSequenceClassification"),aWt.forEach(t),FNr=r(NXe," (RoBERTa model)"),NXe.forEach(t),TNr=i(ae),TC=n(ae,"LI",{});var qXe=s(TC);r3e=n(qXe,"STRONG",{});var nWt=s(r3e);MNr=r(nWt,"roformer"),nWt.forEach(t),ENr=r(qXe," \u2014 "),Aee=n(qXe,"A",{href:!0});var sWt=s(Aee);CNr=r(sWt,"TFRoFormerForSequenceClassification"),sWt.forEach(t),wNr=r(qXe," (RoFormer model)"),qXe.forEach(t),ANr=i(ae),MC=n(ae,"LI",{});var jXe=s(MC);t3e=n(jXe,"STRONG",{});var lWt=s(t3e);LNr=r(lWt,"tapas"),lWt.forEach(t),yNr=r(jXe," \u2014 "),Lee=n(jXe,"A",{href:!0});var iWt=s(Lee);xNr=r(iWt,"TFTapasForSequenceClassification"),iWt.forEach(t),$Nr=r(jXe," (TAPAS model)"),jXe.forEach(t),kNr=i(ae),EC=n(ae,"LI",{});var DXe=s(EC);a3e=n(DXe,"STRONG",{});var dWt=s(a3e);SNr=r(dWt,"transfo-xl"),dWt.forEach(t),RNr=r(DXe," \u2014 "),yee=n(DXe,"A",{href:!0});var cWt=s(yee);PNr=r(cWt,"TFTransfoXLForSequenceClassification"),cWt.forEach(t),BNr=r(DXe," (Transformer-XL model)"),DXe.forEach(t),INr=i(ae),CC=n(ae,"LI",{});var GXe=s(CC);n3e=n(GXe,"STRONG",{});var fWt=s(n3e);NNr=r(fWt,"xlm"),fWt.forEach(t),qNr=r(GXe," \u2014 "),xee=n(GXe,"A",{href:!0});var mWt=s(xee);jNr=r(mWt,"TFXLMForSequenceClassification"),mWt.forEach(t),DNr=r(GXe," (XLM model)"),GXe.forEach(t),GNr=i(ae),wC=n(ae,"LI",{});var OXe=s(wC);s3e=n(OXe,"STRONG",{});var gWt=s(s3e);ONr=r(gWt,"xlm-roberta"),gWt.forEach(t),VNr=r(OXe," \u2014 "),$ee=n(OXe,"A",{href:!0});var hWt=s($ee);XNr=r(hWt,"TFXLMRobertaForSequenceClassification"),hWt.forEach(t),zNr=r(OXe," (XLM-RoBERTa model)"),OXe.forEach(t),WNr=i(ae),AC=n(ae,"LI",{});var VXe=s(AC);l3e=n(VXe,"STRONG",{});var pWt=s(l3e);QNr=r(pWt,"xlnet"),pWt.forEach(t),UNr=r(VXe," \u2014 "),kee=n(VXe,"A",{href:!0});var _Wt=s(kee);HNr=r(_Wt,"TFXLNetForSequenceClassification"),_Wt.forEach(t),JNr=r(VXe," (XLNet model)"),VXe.forEach(t),ae.forEach(t),YNr=i(ti),T(LC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),LHe=i(f),Qc=n(f,"H2",{class:!0});var DYe=s(Qc);yC=n(DYe,"A",{id:!0,class:!0,href:!0});var uWt=s(yC);i3e=n(uWt,"SPAN",{});var bWt=s(i3e);T(H$.$$.fragment,bWt),bWt.forEach(t),uWt.forEach(t),KNr=i(DYe),d3e=n(DYe,"SPAN",{});var vWt=s(d3e);ZNr=r(vWt,"TFAutoModelForMultipleChoice"),vWt.forEach(t),DYe.forEach(t),yHe=i(f),mr=n(f,"DIV",{class:!0});var ai=s(mr);T(J$.$$.fragment,ai),eqr=i(ai),Uc=n(ai,"P",{});var sse=s(Uc);oqr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=n(sse,"A",{href:!0});var FWt=s(See);rqr=r(FWt,"from_pretrained()"),FWt.forEach(t),tqr=r(sse," class method or the "),Ree=n(sse,"A",{href:!0});var TWt=s(Ree);aqr=r(TWt,"from_config()"),TWt.forEach(t),nqr=r(sse,` class
method.`),sse.forEach(t),sqr=i(ai),Y$=n(ai,"P",{});var GYe=s(Y$);lqr=r(GYe,"This class cannot be instantiated directly using "),c3e=n(GYe,"CODE",{});var MWt=s(c3e);iqr=r(MWt,"__init__()"),MWt.forEach(t),dqr=r(GYe," (throws an error)."),GYe.forEach(t),cqr=i(ai),Wt=n(ai,"DIV",{class:!0});var xL=s(Wt);T(K$.$$.fragment,xL),fqr=i(xL),f3e=n(xL,"P",{});var EWt=s(f3e);mqr=r(EWt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),EWt.forEach(t),gqr=i(xL),Hc=n(xL,"P",{});var lse=s(Hc);hqr=r(lse,`Note:
Loading a model from its configuration file does `),m3e=n(lse,"STRONG",{});var CWt=s(m3e);pqr=r(CWt,"not"),CWt.forEach(t),_qr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(lse,"A",{href:!0});var wWt=s(Pee);uqr=r(wWt,"from_pretrained()"),wWt.forEach(t),bqr=r(lse," to load the model weights."),lse.forEach(t),vqr=i(xL),T(xC.$$.fragment,xL),xL.forEach(t),Fqr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(Z$.$$.fragment,ni),Tqr=i(ni),g3e=n(ni,"P",{});var AWt=s(g3e);Mqr=r(AWt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),AWt.forEach(t),Eqr=i(ni),Cn=n(ni,"P",{});var $L=s(Cn);Cqr=r($L,"The model class to instantiate is selected based on the "),h3e=n($L,"CODE",{});var LWt=s(h3e);wqr=r(LWt,"model_type"),LWt.forEach(t),Aqr=r($L,` property of the config object (either
passed as an argument or loaded from `),p3e=n($L,"CODE",{});var yWt=s(p3e);Lqr=r(yWt,"pretrained_model_name_or_path"),yWt.forEach(t),yqr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=n($L,"CODE",{});var xWt=s(_3e);xqr=r(xWt,"pretrained_model_name_or_path"),xWt.forEach(t),$qr=r($L,":"),$L.forEach(t),kqr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);$C=n(Te,"LI",{});var XXe=s($C);u3e=n(XXe,"STRONG",{});var $Wt=s(u3e);Sqr=r($Wt,"albert"),$Wt.forEach(t),Rqr=r(XXe," \u2014 "),Bee=n(XXe,"A",{href:!0});var kWt=s(Bee);Pqr=r(kWt,"TFAlbertForMultipleChoice"),kWt.forEach(t),Bqr=r(XXe," (ALBERT model)"),XXe.forEach(t),Iqr=i(Te),kC=n(Te,"LI",{});var zXe=s(kC);b3e=n(zXe,"STRONG",{});var SWt=s(b3e);Nqr=r(SWt,"bert"),SWt.forEach(t),qqr=r(zXe," \u2014 "),Iee=n(zXe,"A",{href:!0});var RWt=s(Iee);jqr=r(RWt,"TFBertForMultipleChoice"),RWt.forEach(t),Dqr=r(zXe," (BERT model)"),zXe.forEach(t),Gqr=i(Te),SC=n(Te,"LI",{});var WXe=s(SC);v3e=n(WXe,"STRONG",{});var PWt=s(v3e);Oqr=r(PWt,"camembert"),PWt.forEach(t),Vqr=r(WXe," \u2014 "),Nee=n(WXe,"A",{href:!0});var BWt=s(Nee);Xqr=r(BWt,"TFCamembertForMultipleChoice"),BWt.forEach(t),zqr=r(WXe," (CamemBERT model)"),WXe.forEach(t),Wqr=i(Te),RC=n(Te,"LI",{});var QXe=s(RC);F3e=n(QXe,"STRONG",{});var IWt=s(F3e);Qqr=r(IWt,"convbert"),IWt.forEach(t),Uqr=r(QXe," \u2014 "),qee=n(QXe,"A",{href:!0});var NWt=s(qee);Hqr=r(NWt,"TFConvBertForMultipleChoice"),NWt.forEach(t),Jqr=r(QXe," (ConvBERT model)"),QXe.forEach(t),Yqr=i(Te),PC=n(Te,"LI",{});var UXe=s(PC);T3e=n(UXe,"STRONG",{});var qWt=s(T3e);Kqr=r(qWt,"distilbert"),qWt.forEach(t),Zqr=r(UXe," \u2014 "),jee=n(UXe,"A",{href:!0});var jWt=s(jee);ejr=r(jWt,"TFDistilBertForMultipleChoice"),jWt.forEach(t),ojr=r(UXe," (DistilBERT model)"),UXe.forEach(t),rjr=i(Te),BC=n(Te,"LI",{});var HXe=s(BC);M3e=n(HXe,"STRONG",{});var DWt=s(M3e);tjr=r(DWt,"electra"),DWt.forEach(t),ajr=r(HXe," \u2014 "),Dee=n(HXe,"A",{href:!0});var GWt=s(Dee);njr=r(GWt,"TFElectraForMultipleChoice"),GWt.forEach(t),sjr=r(HXe," (ELECTRA model)"),HXe.forEach(t),ljr=i(Te),IC=n(Te,"LI",{});var JXe=s(IC);E3e=n(JXe,"STRONG",{});var OWt=s(E3e);ijr=r(OWt,"flaubert"),OWt.forEach(t),djr=r(JXe," \u2014 "),Gee=n(JXe,"A",{href:!0});var VWt=s(Gee);cjr=r(VWt,"TFFlaubertForMultipleChoice"),VWt.forEach(t),fjr=r(JXe," (FlauBERT model)"),JXe.forEach(t),mjr=i(Te),NC=n(Te,"LI",{});var YXe=s(NC);C3e=n(YXe,"STRONG",{});var XWt=s(C3e);gjr=r(XWt,"funnel"),XWt.forEach(t),hjr=r(YXe," \u2014 "),Oee=n(YXe,"A",{href:!0});var zWt=s(Oee);pjr=r(zWt,"TFFunnelForMultipleChoice"),zWt.forEach(t),_jr=r(YXe," (Funnel Transformer model)"),YXe.forEach(t),ujr=i(Te),qC=n(Te,"LI",{});var KXe=s(qC);w3e=n(KXe,"STRONG",{});var WWt=s(w3e);bjr=r(WWt,"longformer"),WWt.forEach(t),vjr=r(KXe," \u2014 "),Vee=n(KXe,"A",{href:!0});var QWt=s(Vee);Fjr=r(QWt,"TFLongformerForMultipleChoice"),QWt.forEach(t),Tjr=r(KXe," (Longformer model)"),KXe.forEach(t),Mjr=i(Te),jC=n(Te,"LI",{});var ZXe=s(jC);A3e=n(ZXe,"STRONG",{});var UWt=s(A3e);Ejr=r(UWt,"mobilebert"),UWt.forEach(t),Cjr=r(ZXe," \u2014 "),Xee=n(ZXe,"A",{href:!0});var HWt=s(Xee);wjr=r(HWt,"TFMobileBertForMultipleChoice"),HWt.forEach(t),Ajr=r(ZXe," (MobileBERT model)"),ZXe.forEach(t),Ljr=i(Te),DC=n(Te,"LI",{});var eze=s(DC);L3e=n(eze,"STRONG",{});var JWt=s(L3e);yjr=r(JWt,"mpnet"),JWt.forEach(t),xjr=r(eze," \u2014 "),zee=n(eze,"A",{href:!0});var YWt=s(zee);$jr=r(YWt,"TFMPNetForMultipleChoice"),YWt.forEach(t),kjr=r(eze," (MPNet model)"),eze.forEach(t),Sjr=i(Te),GC=n(Te,"LI",{});var oze=s(GC);y3e=n(oze,"STRONG",{});var KWt=s(y3e);Rjr=r(KWt,"rembert"),KWt.forEach(t),Pjr=r(oze," \u2014 "),Wee=n(oze,"A",{href:!0});var ZWt=s(Wee);Bjr=r(ZWt,"TFRemBertForMultipleChoice"),ZWt.forEach(t),Ijr=r(oze," (RemBERT model)"),oze.forEach(t),Njr=i(Te),OC=n(Te,"LI",{});var rze=s(OC);x3e=n(rze,"STRONG",{});var eQt=s(x3e);qjr=r(eQt,"roberta"),eQt.forEach(t),jjr=r(rze," \u2014 "),Qee=n(rze,"A",{href:!0});var oQt=s(Qee);Djr=r(oQt,"TFRobertaForMultipleChoice"),oQt.forEach(t),Gjr=r(rze," (RoBERTa model)"),rze.forEach(t),Ojr=i(Te),VC=n(Te,"LI",{});var tze=s(VC);$3e=n(tze,"STRONG",{});var rQt=s($3e);Vjr=r(rQt,"roformer"),rQt.forEach(t),Xjr=r(tze," \u2014 "),Uee=n(tze,"A",{href:!0});var tQt=s(Uee);zjr=r(tQt,"TFRoFormerForMultipleChoice"),tQt.forEach(t),Wjr=r(tze," (RoFormer model)"),tze.forEach(t),Qjr=i(Te),XC=n(Te,"LI",{});var aze=s(XC);k3e=n(aze,"STRONG",{});var aQt=s(k3e);Ujr=r(aQt,"xlm"),aQt.forEach(t),Hjr=r(aze," \u2014 "),Hee=n(aze,"A",{href:!0});var nQt=s(Hee);Jjr=r(nQt,"TFXLMForMultipleChoice"),nQt.forEach(t),Yjr=r(aze," (XLM model)"),aze.forEach(t),Kjr=i(Te),zC=n(Te,"LI",{});var nze=s(zC);S3e=n(nze,"STRONG",{});var sQt=s(S3e);Zjr=r(sQt,"xlm-roberta"),sQt.forEach(t),eDr=r(nze," \u2014 "),Jee=n(nze,"A",{href:!0});var lQt=s(Jee);oDr=r(lQt,"TFXLMRobertaForMultipleChoice"),lQt.forEach(t),rDr=r(nze," (XLM-RoBERTa model)"),nze.forEach(t),tDr=i(Te),WC=n(Te,"LI",{});var sze=s(WC);R3e=n(sze,"STRONG",{});var iQt=s(R3e);aDr=r(iQt,"xlnet"),iQt.forEach(t),nDr=r(sze," \u2014 "),Yee=n(sze,"A",{href:!0});var dQt=s(Yee);sDr=r(dQt,"TFXLNetForMultipleChoice"),dQt.forEach(t),lDr=r(sze," (XLNet model)"),sze.forEach(t),Te.forEach(t),iDr=i(ni),T(QC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),xHe=i(f),Jc=n(f,"H2",{class:!0});var OYe=s(Jc);UC=n(OYe,"A",{id:!0,class:!0,href:!0});var cQt=s(UC);P3e=n(cQt,"SPAN",{});var fQt=s(P3e);T(ek.$$.fragment,fQt),fQt.forEach(t),cQt.forEach(t),dDr=i(OYe),B3e=n(OYe,"SPAN",{});var mQt=s(B3e);cDr=r(mQt,"TFAutoModelForNextSentencePrediction"),mQt.forEach(t),OYe.forEach(t),$He=i(f),gr=n(f,"DIV",{class:!0});var si=s(gr);T(ok.$$.fragment,si),fDr=i(si),Yc=n(si,"P",{});var ise=s(Yc);mDr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=n(ise,"A",{href:!0});var gQt=s(Kee);gDr=r(gQt,"from_pretrained()"),gQt.forEach(t),hDr=r(ise," class method or the "),Zee=n(ise,"A",{href:!0});var hQt=s(Zee);pDr=r(hQt,"from_config()"),hQt.forEach(t),_Dr=r(ise,` class
method.`),ise.forEach(t),uDr=i(si),rk=n(si,"P",{});var VYe=s(rk);bDr=r(VYe,"This class cannot be instantiated directly using "),I3e=n(VYe,"CODE",{});var pQt=s(I3e);vDr=r(pQt,"__init__()"),pQt.forEach(t),FDr=r(VYe," (throws an error)."),VYe.forEach(t),TDr=i(si),Qt=n(si,"DIV",{class:!0});var kL=s(Qt);T(tk.$$.fragment,kL),MDr=i(kL),N3e=n(kL,"P",{});var _Qt=s(N3e);EDr=r(_Qt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Qt.forEach(t),CDr=i(kL),Kc=n(kL,"P",{});var dse=s(Kc);wDr=r(dse,`Note:
Loading a model from its configuration file does `),q3e=n(dse,"STRONG",{});var uQt=s(q3e);ADr=r(uQt,"not"),uQt.forEach(t),LDr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(dse,"A",{href:!0});var bQt=s(eoe);yDr=r(bQt,"from_pretrained()"),bQt.forEach(t),xDr=r(dse," to load the model weights."),dse.forEach(t),$Dr=i(kL),T(HC.$$.fragment,kL),kL.forEach(t),kDr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(ak.$$.fragment,li),SDr=i(li),j3e=n(li,"P",{});var vQt=s(j3e);RDr=r(vQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vQt.forEach(t),PDr=i(li),wn=n(li,"P",{});var SL=s(wn);BDr=r(SL,"The model class to instantiate is selected based on the "),D3e=n(SL,"CODE",{});var FQt=s(D3e);IDr=r(FQt,"model_type"),FQt.forEach(t),NDr=r(SL,` property of the config object (either
passed as an argument or loaded from `),G3e=n(SL,"CODE",{});var TQt=s(G3e);qDr=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),jDr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=n(SL,"CODE",{});var MQt=s(O3e);DDr=r(MQt,"pretrained_model_name_or_path"),MQt.forEach(t),GDr=r(SL,":"),SL.forEach(t),ODr=i(li),nk=n(li,"UL",{});var XYe=s(nk);JC=n(XYe,"LI",{});var lze=s(JC);V3e=n(lze,"STRONG",{});var EQt=s(V3e);VDr=r(EQt,"bert"),EQt.forEach(t),XDr=r(lze," \u2014 "),ooe=n(lze,"A",{href:!0});var CQt=s(ooe);zDr=r(CQt,"TFBertForNextSentencePrediction"),CQt.forEach(t),WDr=r(lze," (BERT model)"),lze.forEach(t),QDr=i(XYe),YC=n(XYe,"LI",{});var ize=s(YC);X3e=n(ize,"STRONG",{});var wQt=s(X3e);UDr=r(wQt,"mobilebert"),wQt.forEach(t),HDr=r(ize," \u2014 "),roe=n(ize,"A",{href:!0});var AQt=s(roe);JDr=r(AQt,"TFMobileBertForNextSentencePrediction"),AQt.forEach(t),YDr=r(ize," (MobileBERT model)"),ize.forEach(t),XYe.forEach(t),KDr=i(li),T(KC.$$.fragment,li),li.forEach(t),si.forEach(t),kHe=i(f),Zc=n(f,"H2",{class:!0});var zYe=s(Zc);ZC=n(zYe,"A",{id:!0,class:!0,href:!0});var LQt=s(ZC);z3e=n(LQt,"SPAN",{});var yQt=s(z3e);T(sk.$$.fragment,yQt),yQt.forEach(t),LQt.forEach(t),ZDr=i(zYe),W3e=n(zYe,"SPAN",{});var xQt=s(W3e);eGr=r(xQt,"TFAutoModelForTableQuestionAnswering"),xQt.forEach(t),zYe.forEach(t),SHe=i(f),hr=n(f,"DIV",{class:!0});var ii=s(hr);T(lk.$$.fragment,ii),oGr=i(ii),ef=n(ii,"P",{});var cse=s(ef);rGr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),toe=n(cse,"A",{href:!0});var $Qt=s(toe);tGr=r($Qt,"from_pretrained()"),$Qt.forEach(t),aGr=r(cse," class method or the "),aoe=n(cse,"A",{href:!0});var kQt=s(aoe);nGr=r(kQt,"from_config()"),kQt.forEach(t),sGr=r(cse,` class
method.`),cse.forEach(t),lGr=i(ii),ik=n(ii,"P",{});var WYe=s(ik);iGr=r(WYe,"This class cannot be instantiated directly using "),Q3e=n(WYe,"CODE",{});var SQt=s(Q3e);dGr=r(SQt,"__init__()"),SQt.forEach(t),cGr=r(WYe," (throws an error)."),WYe.forEach(t),fGr=i(ii),Ut=n(ii,"DIV",{class:!0});var RL=s(Ut);T(dk.$$.fragment,RL),mGr=i(RL),U3e=n(RL,"P",{});var RQt=s(U3e);gGr=r(RQt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),RQt.forEach(t),hGr=i(RL),of=n(RL,"P",{});var fse=s(of);pGr=r(fse,`Note:
Loading a model from its configuration file does `),H3e=n(fse,"STRONG",{});var PQt=s(H3e);_Gr=r(PQt,"not"),PQt.forEach(t),uGr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(fse,"A",{href:!0});var BQt=s(noe);bGr=r(BQt,"from_pretrained()"),BQt.forEach(t),vGr=r(fse," to load the model weights."),fse.forEach(t),FGr=i(RL),T(e3.$$.fragment,RL),RL.forEach(t),TGr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(ck.$$.fragment,di),MGr=i(di),J3e=n(di,"P",{});var IQt=s(J3e);EGr=r(IQt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),IQt.forEach(t),CGr=i(di),An=n(di,"P",{});var PL=s(An);wGr=r(PL,"The model class to instantiate is selected based on the "),Y3e=n(PL,"CODE",{});var NQt=s(Y3e);AGr=r(NQt,"model_type"),NQt.forEach(t),LGr=r(PL,` property of the config object (either
passed as an argument or loaded from `),K3e=n(PL,"CODE",{});var qQt=s(K3e);yGr=r(qQt,"pretrained_model_name_or_path"),qQt.forEach(t),xGr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(PL,"CODE",{});var jQt=s(Z3e);$Gr=r(jQt,"pretrained_model_name_or_path"),jQt.forEach(t),kGr=r(PL,":"),PL.forEach(t),SGr=i(di),e5e=n(di,"UL",{});var DQt=s(e5e);o3=n(DQt,"LI",{});var dze=s(o3);o5e=n(dze,"STRONG",{});var GQt=s(o5e);RGr=r(GQt,"tapas"),GQt.forEach(t),PGr=r(dze," \u2014 "),soe=n(dze,"A",{href:!0});var OQt=s(soe);BGr=r(OQt,"TFTapasForQuestionAnswering"),OQt.forEach(t),IGr=r(dze," (TAPAS model)"),dze.forEach(t),DQt.forEach(t),NGr=i(di),T(r3.$$.fragment,di),di.forEach(t),ii.forEach(t),RHe=i(f),rf=n(f,"H2",{class:!0});var QYe=s(rf);t3=n(QYe,"A",{id:!0,class:!0,href:!0});var VQt=s(t3);r5e=n(VQt,"SPAN",{});var XQt=s(r5e);T(fk.$$.fragment,XQt),XQt.forEach(t),VQt.forEach(t),qGr=i(QYe),t5e=n(QYe,"SPAN",{});var zQt=s(t5e);jGr=r(zQt,"TFAutoModelForTokenClassification"),zQt.forEach(t),QYe.forEach(t),PHe=i(f),pr=n(f,"DIV",{class:!0});var ci=s(pr);T(mk.$$.fragment,ci),DGr=i(ci),tf=n(ci,"P",{});var mse=s(tf);GGr=r(mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),loe=n(mse,"A",{href:!0});var WQt=s(loe);OGr=r(WQt,"from_pretrained()"),WQt.forEach(t),VGr=r(mse," class method or the "),ioe=n(mse,"A",{href:!0});var QQt=s(ioe);XGr=r(QQt,"from_config()"),QQt.forEach(t),zGr=r(mse,` class
method.`),mse.forEach(t),WGr=i(ci),gk=n(ci,"P",{});var UYe=s(gk);QGr=r(UYe,"This class cannot be instantiated directly using "),a5e=n(UYe,"CODE",{});var UQt=s(a5e);UGr=r(UQt,"__init__()"),UQt.forEach(t),HGr=r(UYe," (throws an error)."),UYe.forEach(t),JGr=i(ci),Ht=n(ci,"DIV",{class:!0});var BL=s(Ht);T(hk.$$.fragment,BL),YGr=i(BL),n5e=n(BL,"P",{});var HQt=s(n5e);KGr=r(HQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HQt.forEach(t),ZGr=i(BL),af=n(BL,"P",{});var gse=s(af);eOr=r(gse,`Note:
Loading a model from its configuration file does `),s5e=n(gse,"STRONG",{});var JQt=s(s5e);oOr=r(JQt,"not"),JQt.forEach(t),rOr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=n(gse,"A",{href:!0});var YQt=s(doe);tOr=r(YQt,"from_pretrained()"),YQt.forEach(t),aOr=r(gse," to load the model weights."),gse.forEach(t),nOr=i(BL),T(a3.$$.fragment,BL),BL.forEach(t),sOr=i(ci),Xr=n(ci,"DIV",{class:!0});var fi=s(Xr);T(pk.$$.fragment,fi),lOr=i(fi),l5e=n(fi,"P",{});var KQt=s(l5e);iOr=r(KQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KQt.forEach(t),dOr=i(fi),Ln=n(fi,"P",{});var IL=s(Ln);cOr=r(IL,"The model class to instantiate is selected based on the "),i5e=n(IL,"CODE",{});var ZQt=s(i5e);fOr=r(ZQt,"model_type"),ZQt.forEach(t),mOr=r(IL,` property of the config object (either
passed as an argument or loaded from `),d5e=n(IL,"CODE",{});var eUt=s(d5e);gOr=r(eUt,"pretrained_model_name_or_path"),eUt.forEach(t),hOr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(IL,"CODE",{});var oUt=s(c5e);pOr=r(oUt,"pretrained_model_name_or_path"),oUt.forEach(t),_Or=r(IL,":"),IL.forEach(t),uOr=i(fi),ie=n(fi,"UL",{});var me=s(ie);n3=n(me,"LI",{});var cze=s(n3);f5e=n(cze,"STRONG",{});var rUt=s(f5e);bOr=r(rUt,"albert"),rUt.forEach(t),vOr=r(cze," \u2014 "),coe=n(cze,"A",{href:!0});var tUt=s(coe);FOr=r(tUt,"TFAlbertForTokenClassification"),tUt.forEach(t),TOr=r(cze," (ALBERT model)"),cze.forEach(t),MOr=i(me),s3=n(me,"LI",{});var fze=s(s3);m5e=n(fze,"STRONG",{});var aUt=s(m5e);EOr=r(aUt,"bert"),aUt.forEach(t),COr=r(fze," \u2014 "),foe=n(fze,"A",{href:!0});var nUt=s(foe);wOr=r(nUt,"TFBertForTokenClassification"),nUt.forEach(t),AOr=r(fze," (BERT model)"),fze.forEach(t),LOr=i(me),l3=n(me,"LI",{});var mze=s(l3);g5e=n(mze,"STRONG",{});var sUt=s(g5e);yOr=r(sUt,"camembert"),sUt.forEach(t),xOr=r(mze," \u2014 "),moe=n(mze,"A",{href:!0});var lUt=s(moe);$Or=r(lUt,"TFCamembertForTokenClassification"),lUt.forEach(t),kOr=r(mze," (CamemBERT model)"),mze.forEach(t),SOr=i(me),i3=n(me,"LI",{});var gze=s(i3);h5e=n(gze,"STRONG",{});var iUt=s(h5e);ROr=r(iUt,"convbert"),iUt.forEach(t),POr=r(gze," \u2014 "),goe=n(gze,"A",{href:!0});var dUt=s(goe);BOr=r(dUt,"TFConvBertForTokenClassification"),dUt.forEach(t),IOr=r(gze," (ConvBERT model)"),gze.forEach(t),NOr=i(me),d3=n(me,"LI",{});var hze=s(d3);p5e=n(hze,"STRONG",{});var cUt=s(p5e);qOr=r(cUt,"deberta"),cUt.forEach(t),jOr=r(hze," \u2014 "),hoe=n(hze,"A",{href:!0});var fUt=s(hoe);DOr=r(fUt,"TFDebertaForTokenClassification"),fUt.forEach(t),GOr=r(hze," (DeBERTa model)"),hze.forEach(t),OOr=i(me),c3=n(me,"LI",{});var pze=s(c3);_5e=n(pze,"STRONG",{});var mUt=s(_5e);VOr=r(mUt,"deberta-v2"),mUt.forEach(t),XOr=r(pze," \u2014 "),poe=n(pze,"A",{href:!0});var gUt=s(poe);zOr=r(gUt,"TFDebertaV2ForTokenClassification"),gUt.forEach(t),WOr=r(pze," (DeBERTa-v2 model)"),pze.forEach(t),QOr=i(me),f3=n(me,"LI",{});var _ze=s(f3);u5e=n(_ze,"STRONG",{});var hUt=s(u5e);UOr=r(hUt,"distilbert"),hUt.forEach(t),HOr=r(_ze," \u2014 "),_oe=n(_ze,"A",{href:!0});var pUt=s(_oe);JOr=r(pUt,"TFDistilBertForTokenClassification"),pUt.forEach(t),YOr=r(_ze," (DistilBERT model)"),_ze.forEach(t),KOr=i(me),m3=n(me,"LI",{});var uze=s(m3);b5e=n(uze,"STRONG",{});var _Ut=s(b5e);ZOr=r(_Ut,"electra"),_Ut.forEach(t),eVr=r(uze," \u2014 "),uoe=n(uze,"A",{href:!0});var uUt=s(uoe);oVr=r(uUt,"TFElectraForTokenClassification"),uUt.forEach(t),rVr=r(uze," (ELECTRA model)"),uze.forEach(t),tVr=i(me),g3=n(me,"LI",{});var bze=s(g3);v5e=n(bze,"STRONG",{});var bUt=s(v5e);aVr=r(bUt,"flaubert"),bUt.forEach(t),nVr=r(bze," \u2014 "),boe=n(bze,"A",{href:!0});var vUt=s(boe);sVr=r(vUt,"TFFlaubertForTokenClassification"),vUt.forEach(t),lVr=r(bze," (FlauBERT model)"),bze.forEach(t),iVr=i(me),h3=n(me,"LI",{});var vze=s(h3);F5e=n(vze,"STRONG",{});var FUt=s(F5e);dVr=r(FUt,"funnel"),FUt.forEach(t),cVr=r(vze," \u2014 "),voe=n(vze,"A",{href:!0});var TUt=s(voe);fVr=r(TUt,"TFFunnelForTokenClassification"),TUt.forEach(t),mVr=r(vze," (Funnel Transformer model)"),vze.forEach(t),gVr=i(me),p3=n(me,"LI",{});var Fze=s(p3);T5e=n(Fze,"STRONG",{});var MUt=s(T5e);hVr=r(MUt,"layoutlm"),MUt.forEach(t),pVr=r(Fze," \u2014 "),Foe=n(Fze,"A",{href:!0});var EUt=s(Foe);_Vr=r(EUt,"TFLayoutLMForTokenClassification"),EUt.forEach(t),uVr=r(Fze," (LayoutLM model)"),Fze.forEach(t),bVr=i(me),_3=n(me,"LI",{});var Tze=s(_3);M5e=n(Tze,"STRONG",{});var CUt=s(M5e);vVr=r(CUt,"layoutlmv3"),CUt.forEach(t),FVr=r(Tze," \u2014 "),Toe=n(Tze,"A",{href:!0});var wUt=s(Toe);TVr=r(wUt,"TFLayoutLMv3ForTokenClassification"),wUt.forEach(t),MVr=r(Tze," (LayoutLMv3 model)"),Tze.forEach(t),EVr=i(me),u3=n(me,"LI",{});var Mze=s(u3);E5e=n(Mze,"STRONG",{});var AUt=s(E5e);CVr=r(AUt,"longformer"),AUt.forEach(t),wVr=r(Mze," \u2014 "),Moe=n(Mze,"A",{href:!0});var LUt=s(Moe);AVr=r(LUt,"TFLongformerForTokenClassification"),LUt.forEach(t),LVr=r(Mze," (Longformer model)"),Mze.forEach(t),yVr=i(me),b3=n(me,"LI",{});var Eze=s(b3);C5e=n(Eze,"STRONG",{});var yUt=s(C5e);xVr=r(yUt,"mobilebert"),yUt.forEach(t),$Vr=r(Eze," \u2014 "),Eoe=n(Eze,"A",{href:!0});var xUt=s(Eoe);kVr=r(xUt,"TFMobileBertForTokenClassification"),xUt.forEach(t),SVr=r(Eze," (MobileBERT model)"),Eze.forEach(t),RVr=i(me),v3=n(me,"LI",{});var Cze=s(v3);w5e=n(Cze,"STRONG",{});var $Ut=s(w5e);PVr=r($Ut,"mpnet"),$Ut.forEach(t),BVr=r(Cze," \u2014 "),Coe=n(Cze,"A",{href:!0});var kUt=s(Coe);IVr=r(kUt,"TFMPNetForTokenClassification"),kUt.forEach(t),NVr=r(Cze," (MPNet model)"),Cze.forEach(t),qVr=i(me),F3=n(me,"LI",{});var wze=s(F3);A5e=n(wze,"STRONG",{});var SUt=s(A5e);jVr=r(SUt,"rembert"),SUt.forEach(t),DVr=r(wze," \u2014 "),woe=n(wze,"A",{href:!0});var RUt=s(woe);GVr=r(RUt,"TFRemBertForTokenClassification"),RUt.forEach(t),OVr=r(wze," (RemBERT model)"),wze.forEach(t),VVr=i(me),T3=n(me,"LI",{});var Aze=s(T3);L5e=n(Aze,"STRONG",{});var PUt=s(L5e);XVr=r(PUt,"roberta"),PUt.forEach(t),zVr=r(Aze," \u2014 "),Aoe=n(Aze,"A",{href:!0});var BUt=s(Aoe);WVr=r(BUt,"TFRobertaForTokenClassification"),BUt.forEach(t),QVr=r(Aze," (RoBERTa model)"),Aze.forEach(t),UVr=i(me),M3=n(me,"LI",{});var Lze=s(M3);y5e=n(Lze,"STRONG",{});var IUt=s(y5e);HVr=r(IUt,"roformer"),IUt.forEach(t),JVr=r(Lze," \u2014 "),Loe=n(Lze,"A",{href:!0});var NUt=s(Loe);YVr=r(NUt,"TFRoFormerForTokenClassification"),NUt.forEach(t),KVr=r(Lze," (RoFormer model)"),Lze.forEach(t),ZVr=i(me),E3=n(me,"LI",{});var yze=s(E3);x5e=n(yze,"STRONG",{});var qUt=s(x5e);eXr=r(qUt,"xlm"),qUt.forEach(t),oXr=r(yze," \u2014 "),yoe=n(yze,"A",{href:!0});var jUt=s(yoe);rXr=r(jUt,"TFXLMForTokenClassification"),jUt.forEach(t),tXr=r(yze," (XLM model)"),yze.forEach(t),aXr=i(me),C3=n(me,"LI",{});var xze=s(C3);$5e=n(xze,"STRONG",{});var DUt=s($5e);nXr=r(DUt,"xlm-roberta"),DUt.forEach(t),sXr=r(xze," \u2014 "),xoe=n(xze,"A",{href:!0});var GUt=s(xoe);lXr=r(GUt,"TFXLMRobertaForTokenClassification"),GUt.forEach(t),iXr=r(xze," (XLM-RoBERTa model)"),xze.forEach(t),dXr=i(me),w3=n(me,"LI",{});var $ze=s(w3);k5e=n($ze,"STRONG",{});var OUt=s(k5e);cXr=r(OUt,"xlnet"),OUt.forEach(t),fXr=r($ze," \u2014 "),$oe=n($ze,"A",{href:!0});var VUt=s($oe);mXr=r(VUt,"TFXLNetForTokenClassification"),VUt.forEach(t),gXr=r($ze," (XLNet model)"),$ze.forEach(t),me.forEach(t),hXr=i(fi),T(A3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),BHe=i(f),nf=n(f,"H2",{class:!0});var HYe=s(nf);L3=n(HYe,"A",{id:!0,class:!0,href:!0});var XUt=s(L3);S5e=n(XUt,"SPAN",{});var zUt=s(S5e);T(_k.$$.fragment,zUt),zUt.forEach(t),XUt.forEach(t),pXr=i(HYe),R5e=n(HYe,"SPAN",{});var WUt=s(R5e);_Xr=r(WUt,"TFAutoModelForQuestionAnswering"),WUt.forEach(t),HYe.forEach(t),IHe=i(f),_r=n(f,"DIV",{class:!0});var mi=s(_r);T(uk.$$.fragment,mi),uXr=i(mi),sf=n(mi,"P",{});var hse=s(sf);bXr=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),koe=n(hse,"A",{href:!0});var QUt=s(koe);vXr=r(QUt,"from_pretrained()"),QUt.forEach(t),FXr=r(hse," class method or the "),Soe=n(hse,"A",{href:!0});var UUt=s(Soe);TXr=r(UUt,"from_config()"),UUt.forEach(t),MXr=r(hse,` class
method.`),hse.forEach(t),EXr=i(mi),bk=n(mi,"P",{});var JYe=s(bk);CXr=r(JYe,"This class cannot be instantiated directly using "),P5e=n(JYe,"CODE",{});var HUt=s(P5e);wXr=r(HUt,"__init__()"),HUt.forEach(t),AXr=r(JYe," (throws an error)."),JYe.forEach(t),LXr=i(mi),Jt=n(mi,"DIV",{class:!0});var NL=s(Jt);T(vk.$$.fragment,NL),yXr=i(NL),B5e=n(NL,"P",{});var JUt=s(B5e);xXr=r(JUt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JUt.forEach(t),$Xr=i(NL),lf=n(NL,"P",{});var pse=s(lf);kXr=r(pse,`Note:
Loading a model from its configuration file does `),I5e=n(pse,"STRONG",{});var YUt=s(I5e);SXr=r(YUt,"not"),YUt.forEach(t),RXr=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(pse,"A",{href:!0});var KUt=s(Roe);PXr=r(KUt,"from_pretrained()"),KUt.forEach(t),BXr=r(pse," to load the model weights."),pse.forEach(t),IXr=i(NL),T(y3.$$.fragment,NL),NL.forEach(t),NXr=i(mi),zr=n(mi,"DIV",{class:!0});var gi=s(zr);T(Fk.$$.fragment,gi),qXr=i(gi),N5e=n(gi,"P",{});var ZUt=s(N5e);jXr=r(ZUt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZUt.forEach(t),DXr=i(gi),yn=n(gi,"P",{});var qL=s(yn);GXr=r(qL,"The model class to instantiate is selected based on the "),q5e=n(qL,"CODE",{});var eHt=s(q5e);OXr=r(eHt,"model_type"),eHt.forEach(t),VXr=r(qL,` property of the config object (either
passed as an argument or loaded from `),j5e=n(qL,"CODE",{});var oHt=s(j5e);XXr=r(oHt,"pretrained_model_name_or_path"),oHt.forEach(t),zXr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(qL,"CODE",{});var rHt=s(D5e);WXr=r(rHt,"pretrained_model_name_or_path"),rHt.forEach(t),QXr=r(qL,":"),qL.forEach(t),UXr=i(gi),de=n(gi,"UL",{});var ge=s(de);x3=n(ge,"LI",{});var kze=s(x3);G5e=n(kze,"STRONG",{});var tHt=s(G5e);HXr=r(tHt,"albert"),tHt.forEach(t),JXr=r(kze," \u2014 "),Poe=n(kze,"A",{href:!0});var aHt=s(Poe);YXr=r(aHt,"TFAlbertForQuestionAnswering"),aHt.forEach(t),KXr=r(kze," (ALBERT model)"),kze.forEach(t),ZXr=i(ge),$3=n(ge,"LI",{});var Sze=s($3);O5e=n(Sze,"STRONG",{});var nHt=s(O5e);ezr=r(nHt,"bert"),nHt.forEach(t),ozr=r(Sze," \u2014 "),Boe=n(Sze,"A",{href:!0});var sHt=s(Boe);rzr=r(sHt,"TFBertForQuestionAnswering"),sHt.forEach(t),tzr=r(Sze," (BERT model)"),Sze.forEach(t),azr=i(ge),k3=n(ge,"LI",{});var Rze=s(k3);V5e=n(Rze,"STRONG",{});var lHt=s(V5e);nzr=r(lHt,"camembert"),lHt.forEach(t),szr=r(Rze," \u2014 "),Ioe=n(Rze,"A",{href:!0});var iHt=s(Ioe);lzr=r(iHt,"TFCamembertForQuestionAnswering"),iHt.forEach(t),izr=r(Rze," (CamemBERT model)"),Rze.forEach(t),dzr=i(ge),S3=n(ge,"LI",{});var Pze=s(S3);X5e=n(Pze,"STRONG",{});var dHt=s(X5e);czr=r(dHt,"convbert"),dHt.forEach(t),fzr=r(Pze," \u2014 "),Noe=n(Pze,"A",{href:!0});var cHt=s(Noe);mzr=r(cHt,"TFConvBertForQuestionAnswering"),cHt.forEach(t),gzr=r(Pze," (ConvBERT model)"),Pze.forEach(t),hzr=i(ge),R3=n(ge,"LI",{});var Bze=s(R3);z5e=n(Bze,"STRONG",{});var fHt=s(z5e);pzr=r(fHt,"deberta"),fHt.forEach(t),_zr=r(Bze," \u2014 "),qoe=n(Bze,"A",{href:!0});var mHt=s(qoe);uzr=r(mHt,"TFDebertaForQuestionAnswering"),mHt.forEach(t),bzr=r(Bze," (DeBERTa model)"),Bze.forEach(t),vzr=i(ge),P3=n(ge,"LI",{});var Ize=s(P3);W5e=n(Ize,"STRONG",{});var gHt=s(W5e);Fzr=r(gHt,"deberta-v2"),gHt.forEach(t),Tzr=r(Ize," \u2014 "),joe=n(Ize,"A",{href:!0});var hHt=s(joe);Mzr=r(hHt,"TFDebertaV2ForQuestionAnswering"),hHt.forEach(t),Ezr=r(Ize," (DeBERTa-v2 model)"),Ize.forEach(t),Czr=i(ge),B3=n(ge,"LI",{});var Nze=s(B3);Q5e=n(Nze,"STRONG",{});var pHt=s(Q5e);wzr=r(pHt,"distilbert"),pHt.forEach(t),Azr=r(Nze," \u2014 "),Doe=n(Nze,"A",{href:!0});var _Ht=s(Doe);Lzr=r(_Ht,"TFDistilBertForQuestionAnswering"),_Ht.forEach(t),yzr=r(Nze," (DistilBERT model)"),Nze.forEach(t),xzr=i(ge),I3=n(ge,"LI",{});var qze=s(I3);U5e=n(qze,"STRONG",{});var uHt=s(U5e);$zr=r(uHt,"electra"),uHt.forEach(t),kzr=r(qze," \u2014 "),Goe=n(qze,"A",{href:!0});var bHt=s(Goe);Szr=r(bHt,"TFElectraForQuestionAnswering"),bHt.forEach(t),Rzr=r(qze," (ELECTRA model)"),qze.forEach(t),Pzr=i(ge),N3=n(ge,"LI",{});var jze=s(N3);H5e=n(jze,"STRONG",{});var vHt=s(H5e);Bzr=r(vHt,"flaubert"),vHt.forEach(t),Izr=r(jze," \u2014 "),Ooe=n(jze,"A",{href:!0});var FHt=s(Ooe);Nzr=r(FHt,"TFFlaubertForQuestionAnsweringSimple"),FHt.forEach(t),qzr=r(jze," (FlauBERT model)"),jze.forEach(t),jzr=i(ge),q3=n(ge,"LI",{});var Dze=s(q3);J5e=n(Dze,"STRONG",{});var THt=s(J5e);Dzr=r(THt,"funnel"),THt.forEach(t),Gzr=r(Dze," \u2014 "),Voe=n(Dze,"A",{href:!0});var MHt=s(Voe);Ozr=r(MHt,"TFFunnelForQuestionAnswering"),MHt.forEach(t),Vzr=r(Dze," (Funnel Transformer model)"),Dze.forEach(t),Xzr=i(ge),j3=n(ge,"LI",{});var Gze=s(j3);Y5e=n(Gze,"STRONG",{});var EHt=s(Y5e);zzr=r(EHt,"gptj"),EHt.forEach(t),Wzr=r(Gze," \u2014 "),Xoe=n(Gze,"A",{href:!0});var CHt=s(Xoe);Qzr=r(CHt,"TFGPTJForQuestionAnswering"),CHt.forEach(t),Uzr=r(Gze," (GPT-J model)"),Gze.forEach(t),Hzr=i(ge),D3=n(ge,"LI",{});var Oze=s(D3);K5e=n(Oze,"STRONG",{});var wHt=s(K5e);Jzr=r(wHt,"layoutlmv3"),wHt.forEach(t),Yzr=r(Oze," \u2014 "),zoe=n(Oze,"A",{href:!0});var AHt=s(zoe);Kzr=r(AHt,"TFLayoutLMv3ForQuestionAnswering"),AHt.forEach(t),Zzr=r(Oze," (LayoutLMv3 model)"),Oze.forEach(t),eWr=i(ge),G3=n(ge,"LI",{});var Vze=s(G3);Z5e=n(Vze,"STRONG",{});var LHt=s(Z5e);oWr=r(LHt,"longformer"),LHt.forEach(t),rWr=r(Vze," \u2014 "),Woe=n(Vze,"A",{href:!0});var yHt=s(Woe);tWr=r(yHt,"TFLongformerForQuestionAnswering"),yHt.forEach(t),aWr=r(Vze," (Longformer model)"),Vze.forEach(t),nWr=i(ge),O3=n(ge,"LI",{});var Xze=s(O3);e0e=n(Xze,"STRONG",{});var xHt=s(e0e);sWr=r(xHt,"mobilebert"),xHt.forEach(t),lWr=r(Xze," \u2014 "),Qoe=n(Xze,"A",{href:!0});var $Ht=s(Qoe);iWr=r($Ht,"TFMobileBertForQuestionAnswering"),$Ht.forEach(t),dWr=r(Xze," (MobileBERT model)"),Xze.forEach(t),cWr=i(ge),V3=n(ge,"LI",{});var zze=s(V3);o0e=n(zze,"STRONG",{});var kHt=s(o0e);fWr=r(kHt,"mpnet"),kHt.forEach(t),mWr=r(zze," \u2014 "),Uoe=n(zze,"A",{href:!0});var SHt=s(Uoe);gWr=r(SHt,"TFMPNetForQuestionAnswering"),SHt.forEach(t),hWr=r(zze," (MPNet model)"),zze.forEach(t),pWr=i(ge),X3=n(ge,"LI",{});var Wze=s(X3);r0e=n(Wze,"STRONG",{});var RHt=s(r0e);_Wr=r(RHt,"rembert"),RHt.forEach(t),uWr=r(Wze," \u2014 "),Hoe=n(Wze,"A",{href:!0});var PHt=s(Hoe);bWr=r(PHt,"TFRemBertForQuestionAnswering"),PHt.forEach(t),vWr=r(Wze," (RemBERT model)"),Wze.forEach(t),FWr=i(ge),z3=n(ge,"LI",{});var Qze=s(z3);t0e=n(Qze,"STRONG",{});var BHt=s(t0e);TWr=r(BHt,"roberta"),BHt.forEach(t),MWr=r(Qze," \u2014 "),Joe=n(Qze,"A",{href:!0});var IHt=s(Joe);EWr=r(IHt,"TFRobertaForQuestionAnswering"),IHt.forEach(t),CWr=r(Qze," (RoBERTa model)"),Qze.forEach(t),wWr=i(ge),W3=n(ge,"LI",{});var Uze=s(W3);a0e=n(Uze,"STRONG",{});var NHt=s(a0e);AWr=r(NHt,"roformer"),NHt.forEach(t),LWr=r(Uze," \u2014 "),Yoe=n(Uze,"A",{href:!0});var qHt=s(Yoe);yWr=r(qHt,"TFRoFormerForQuestionAnswering"),qHt.forEach(t),xWr=r(Uze," (RoFormer model)"),Uze.forEach(t),$Wr=i(ge),Q3=n(ge,"LI",{});var Hze=s(Q3);n0e=n(Hze,"STRONG",{});var jHt=s(n0e);kWr=r(jHt,"xlm"),jHt.forEach(t),SWr=r(Hze," \u2014 "),Koe=n(Hze,"A",{href:!0});var DHt=s(Koe);RWr=r(DHt,"TFXLMForQuestionAnsweringSimple"),DHt.forEach(t),PWr=r(Hze," (XLM model)"),Hze.forEach(t),BWr=i(ge),U3=n(ge,"LI",{});var Jze=s(U3);s0e=n(Jze,"STRONG",{});var GHt=s(s0e);IWr=r(GHt,"xlm-roberta"),GHt.forEach(t),NWr=r(Jze," \u2014 "),Zoe=n(Jze,"A",{href:!0});var OHt=s(Zoe);qWr=r(OHt,"TFXLMRobertaForQuestionAnswering"),OHt.forEach(t),jWr=r(Jze," (XLM-RoBERTa model)"),Jze.forEach(t),DWr=i(ge),H3=n(ge,"LI",{});var Yze=s(H3);l0e=n(Yze,"STRONG",{});var VHt=s(l0e);GWr=r(VHt,"xlnet"),VHt.forEach(t),OWr=r(Yze," \u2014 "),ere=n(Yze,"A",{href:!0});var XHt=s(ere);VWr=r(XHt,"TFXLNetForQuestionAnsweringSimple"),XHt.forEach(t),XWr=r(Yze," (XLNet model)"),Yze.forEach(t),ge.forEach(t),zWr=i(gi),T(J3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),NHe=i(f),df=n(f,"H2",{class:!0});var YYe=s(df);Y3=n(YYe,"A",{id:!0,class:!0,href:!0});var zHt=s(Y3);i0e=n(zHt,"SPAN",{});var WHt=s(i0e);T(Tk.$$.fragment,WHt),WHt.forEach(t),zHt.forEach(t),WWr=i(YYe),d0e=n(YYe,"SPAN",{});var QHt=s(d0e);QWr=r(QHt,"TFAutoModelForVision2Seq"),QHt.forEach(t),YYe.forEach(t),qHe=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(Mk.$$.fragment,hi),UWr=i(hi),cf=n(hi,"P",{});var _se=s(cf);HWr=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ore=n(_se,"A",{href:!0});var UHt=s(ore);JWr=r(UHt,"from_pretrained()"),UHt.forEach(t),YWr=r(_se," class method or the "),rre=n(_se,"A",{href:!0});var HHt=s(rre);KWr=r(HHt,"from_config()"),HHt.forEach(t),ZWr=r(_se,` class
method.`),_se.forEach(t),eQr=i(hi),Ek=n(hi,"P",{});var KYe=s(Ek);oQr=r(KYe,"This class cannot be instantiated directly using "),c0e=n(KYe,"CODE",{});var JHt=s(c0e);rQr=r(JHt,"__init__()"),JHt.forEach(t),tQr=r(KYe," (throws an error)."),KYe.forEach(t),aQr=i(hi),Yt=n(hi,"DIV",{class:!0});var jL=s(Yt);T(Ck.$$.fragment,jL),nQr=i(jL),f0e=n(jL,"P",{});var YHt=s(f0e);sQr=r(YHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YHt.forEach(t),lQr=i(jL),ff=n(jL,"P",{});var use=s(ff);iQr=r(use,`Note:
Loading a model from its configuration file does `),m0e=n(use,"STRONG",{});var KHt=s(m0e);dQr=r(KHt,"not"),KHt.forEach(t),cQr=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=n(use,"A",{href:!0});var ZHt=s(tre);fQr=r(ZHt,"from_pretrained()"),ZHt.forEach(t),mQr=r(use," to load the model weights."),use.forEach(t),gQr=i(jL),T(K3.$$.fragment,jL),jL.forEach(t),hQr=i(hi),Wr=n(hi,"DIV",{class:!0});var pi=s(Wr);T(wk.$$.fragment,pi),pQr=i(pi),g0e=n(pi,"P",{});var eJt=s(g0e);_Qr=r(eJt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eJt.forEach(t),uQr=i(pi),xn=n(pi,"P",{});var DL=s(xn);bQr=r(DL,"The model class to instantiate is selected based on the "),h0e=n(DL,"CODE",{});var oJt=s(h0e);vQr=r(oJt,"model_type"),oJt.forEach(t),FQr=r(DL,` property of the config object (either
passed as an argument or loaded from `),p0e=n(DL,"CODE",{});var rJt=s(p0e);TQr=r(rJt,"pretrained_model_name_or_path"),rJt.forEach(t),MQr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n(DL,"CODE",{});var tJt=s(_0e);EQr=r(tJt,"pretrained_model_name_or_path"),tJt.forEach(t),CQr=r(DL,":"),DL.forEach(t),wQr=i(pi),u0e=n(pi,"UL",{});var aJt=s(u0e);Z3=n(aJt,"LI",{});var Kze=s(Z3);b0e=n(Kze,"STRONG",{});var nJt=s(b0e);AQr=r(nJt,"vision-encoder-decoder"),nJt.forEach(t),LQr=r(Kze," \u2014 "),are=n(Kze,"A",{href:!0});var sJt=s(are);yQr=r(sJt,"TFVisionEncoderDecoderModel"),sJt.forEach(t),xQr=r(Kze," (Vision Encoder decoder model)"),Kze.forEach(t),aJt.forEach(t),$Qr=i(pi),T(e5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),jHe=i(f),mf=n(f,"H2",{class:!0});var ZYe=s(mf);o5=n(ZYe,"A",{id:!0,class:!0,href:!0});var lJt=s(o5);v0e=n(lJt,"SPAN",{});var iJt=s(v0e);T(Ak.$$.fragment,iJt),iJt.forEach(t),lJt.forEach(t),kQr=i(ZYe),F0e=n(ZYe,"SPAN",{});var dJt=s(F0e);SQr=r(dJt,"TFAutoModelForSpeechSeq2Seq"),dJt.forEach(t),ZYe.forEach(t),DHe=i(f),br=n(f,"DIV",{class:!0});var _i=s(br);T(Lk.$$.fragment,_i),RQr=i(_i),gf=n(_i,"P",{});var bse=s(gf);PQr=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nre=n(bse,"A",{href:!0});var cJt=s(nre);BQr=r(cJt,"from_pretrained()"),cJt.forEach(t),IQr=r(bse," class method or the "),sre=n(bse,"A",{href:!0});var fJt=s(sre);NQr=r(fJt,"from_config()"),fJt.forEach(t),qQr=r(bse,` class
method.`),bse.forEach(t),jQr=i(_i),yk=n(_i,"P",{});var eKe=s(yk);DQr=r(eKe,"This class cannot be instantiated directly using "),T0e=n(eKe,"CODE",{});var mJt=s(T0e);GQr=r(mJt,"__init__()"),mJt.forEach(t),OQr=r(eKe," (throws an error)."),eKe.forEach(t),VQr=i(_i),Kt=n(_i,"DIV",{class:!0});var GL=s(Kt);T(xk.$$.fragment,GL),XQr=i(GL),M0e=n(GL,"P",{});var gJt=s(M0e);zQr=r(gJt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gJt.forEach(t),WQr=i(GL),hf=n(GL,"P",{});var vse=s(hf);QQr=r(vse,`Note:
Loading a model from its configuration file does `),E0e=n(vse,"STRONG",{});var hJt=s(E0e);UQr=r(hJt,"not"),hJt.forEach(t),HQr=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=n(vse,"A",{href:!0});var pJt=s(lre);JQr=r(pJt,"from_pretrained()"),pJt.forEach(t),YQr=r(vse," to load the model weights."),vse.forEach(t),KQr=i(GL),T(r5.$$.fragment,GL),GL.forEach(t),ZQr=i(_i),Qr=n(_i,"DIV",{class:!0});var ui=s(Qr);T($k.$$.fragment,ui),eUr=i(ui),C0e=n(ui,"P",{});var _Jt=s(C0e);oUr=r(_Jt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Jt.forEach(t),rUr=i(ui),$n=n(ui,"P",{});var OL=s($n);tUr=r(OL,"The model class to instantiate is selected based on the "),w0e=n(OL,"CODE",{});var uJt=s(w0e);aUr=r(uJt,"model_type"),uJt.forEach(t),nUr=r(OL,` property of the config object (either
passed as an argument or loaded from `),A0e=n(OL,"CODE",{});var bJt=s(A0e);sUr=r(bJt,"pretrained_model_name_or_path"),bJt.forEach(t),lUr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(OL,"CODE",{});var vJt=s(L0e);iUr=r(vJt,"pretrained_model_name_or_path"),vJt.forEach(t),dUr=r(OL,":"),OL.forEach(t),cUr=i(ui),y0e=n(ui,"UL",{});var FJt=s(y0e);t5=n(FJt,"LI",{});var Zze=s(t5);x0e=n(Zze,"STRONG",{});var TJt=s(x0e);fUr=r(TJt,"speech_to_text"),TJt.forEach(t),mUr=r(Zze," \u2014 "),ire=n(Zze,"A",{href:!0});var MJt=s(ire);gUr=r(MJt,"TFSpeech2TextForConditionalGeneration"),MJt.forEach(t),hUr=r(Zze," (Speech2Text model)"),Zze.forEach(t),FJt.forEach(t),pUr=i(ui),T(a5.$$.fragment,ui),ui.forEach(t),_i.forEach(t),GHe=i(f),pf=n(f,"H2",{class:!0});var oKe=s(pf);n5=n(oKe,"A",{id:!0,class:!0,href:!0});var EJt=s(n5);$0e=n(EJt,"SPAN",{});var CJt=s($0e);T(kk.$$.fragment,CJt),CJt.forEach(t),EJt.forEach(t),_Ur=i(oKe),k0e=n(oKe,"SPAN",{});var wJt=s(k0e);uUr=r(wJt,"FlaxAutoModel"),wJt.forEach(t),oKe.forEach(t),OHe=i(f),vr=n(f,"DIV",{class:!0});var bi=s(vr);T(Sk.$$.fragment,bi),bUr=i(bi),_f=n(bi,"P",{});var Fse=s(_f);vUr=r(Fse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dre=n(Fse,"A",{href:!0});var AJt=s(dre);FUr=r(AJt,"from_pretrained()"),AJt.forEach(t),TUr=r(Fse," class method or the "),cre=n(Fse,"A",{href:!0});var LJt=s(cre);MUr=r(LJt,"from_config()"),LJt.forEach(t),EUr=r(Fse,` class
method.`),Fse.forEach(t),CUr=i(bi),Rk=n(bi,"P",{});var rKe=s(Rk);wUr=r(rKe,"This class cannot be instantiated directly using "),S0e=n(rKe,"CODE",{});var yJt=s(S0e);AUr=r(yJt,"__init__()"),yJt.forEach(t),LUr=r(rKe," (throws an error)."),rKe.forEach(t),yUr=i(bi),Zt=n(bi,"DIV",{class:!0});var VL=s(Zt);T(Pk.$$.fragment,VL),xUr=i(VL),R0e=n(VL,"P",{});var xJt=s(R0e);$Ur=r(xJt,"Instantiates one of the base model classes of the library from a configuration."),xJt.forEach(t),kUr=i(VL),uf=n(VL,"P",{});var Tse=s(uf);SUr=r(Tse,`Note:
Loading a model from its configuration file does `),P0e=n(Tse,"STRONG",{});var $Jt=s(P0e);RUr=r($Jt,"not"),$Jt.forEach(t),PUr=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(Tse,"A",{href:!0});var kJt=s(fre);BUr=r(kJt,"from_pretrained()"),kJt.forEach(t),IUr=r(Tse," to load the model weights."),Tse.forEach(t),NUr=i(VL),T(s5.$$.fragment,VL),VL.forEach(t),qUr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Bk.$$.fragment,vi),jUr=i(vi),B0e=n(vi,"P",{});var SJt=s(B0e);DUr=r(SJt,"Instantiate one of the base model classes of the library from a pretrained model."),SJt.forEach(t),GUr=i(vi),kn=n(vi,"P",{});var XL=s(kn);OUr=r(XL,"The model class to instantiate is selected based on the "),I0e=n(XL,"CODE",{});var RJt=s(I0e);VUr=r(RJt,"model_type"),RJt.forEach(t),XUr=r(XL,` property of the config object (either
passed as an argument or loaded from `),N0e=n(XL,"CODE",{});var PJt=s(N0e);zUr=r(PJt,"pretrained_model_name_or_path"),PJt.forEach(t),WUr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(XL,"CODE",{});var BJt=s(q0e);QUr=r(BJt,"pretrained_model_name_or_path"),BJt.forEach(t),UUr=r(XL,":"),XL.forEach(t),HUr=i(vi),te=n(vi,"UL",{});var ne=s(te);l5=n(ne,"LI",{});var eWe=s(l5);j0e=n(eWe,"STRONG",{});var IJt=s(j0e);JUr=r(IJt,"albert"),IJt.forEach(t),YUr=r(eWe," \u2014 "),mre=n(eWe,"A",{href:!0});var NJt=s(mre);KUr=r(NJt,"FlaxAlbertModel"),NJt.forEach(t),ZUr=r(eWe," (ALBERT model)"),eWe.forEach(t),eHr=i(ne),i5=n(ne,"LI",{});var oWe=s(i5);D0e=n(oWe,"STRONG",{});var qJt=s(D0e);oHr=r(qJt,"bart"),qJt.forEach(t),rHr=r(oWe," \u2014 "),gre=n(oWe,"A",{href:!0});var jJt=s(gre);tHr=r(jJt,"FlaxBartModel"),jJt.forEach(t),aHr=r(oWe," (BART model)"),oWe.forEach(t),nHr=i(ne),d5=n(ne,"LI",{});var rWe=s(d5);G0e=n(rWe,"STRONG",{});var DJt=s(G0e);sHr=r(DJt,"beit"),DJt.forEach(t),lHr=r(rWe," \u2014 "),hre=n(rWe,"A",{href:!0});var GJt=s(hre);iHr=r(GJt,"FlaxBeitModel"),GJt.forEach(t),dHr=r(rWe," (BEiT model)"),rWe.forEach(t),cHr=i(ne),c5=n(ne,"LI",{});var tWe=s(c5);O0e=n(tWe,"STRONG",{});var OJt=s(O0e);fHr=r(OJt,"bert"),OJt.forEach(t),mHr=r(tWe," \u2014 "),pre=n(tWe,"A",{href:!0});var VJt=s(pre);gHr=r(VJt,"FlaxBertModel"),VJt.forEach(t),hHr=r(tWe," (BERT model)"),tWe.forEach(t),pHr=i(ne),f5=n(ne,"LI",{});var aWe=s(f5);V0e=n(aWe,"STRONG",{});var XJt=s(V0e);_Hr=r(XJt,"big_bird"),XJt.forEach(t),uHr=r(aWe," \u2014 "),_re=n(aWe,"A",{href:!0});var zJt=s(_re);bHr=r(zJt,"FlaxBigBirdModel"),zJt.forEach(t),vHr=r(aWe," (BigBird model)"),aWe.forEach(t),FHr=i(ne),m5=n(ne,"LI",{});var nWe=s(m5);X0e=n(nWe,"STRONG",{});var WJt=s(X0e);THr=r(WJt,"blenderbot"),WJt.forEach(t),MHr=r(nWe," \u2014 "),ure=n(nWe,"A",{href:!0});var QJt=s(ure);EHr=r(QJt,"FlaxBlenderbotModel"),QJt.forEach(t),CHr=r(nWe," (Blenderbot model)"),nWe.forEach(t),wHr=i(ne),g5=n(ne,"LI",{});var sWe=s(g5);z0e=n(sWe,"STRONG",{});var UJt=s(z0e);AHr=r(UJt,"blenderbot-small"),UJt.forEach(t),LHr=r(sWe," \u2014 "),bre=n(sWe,"A",{href:!0});var HJt=s(bre);yHr=r(HJt,"FlaxBlenderbotSmallModel"),HJt.forEach(t),xHr=r(sWe," (BlenderbotSmall model)"),sWe.forEach(t),$Hr=i(ne),h5=n(ne,"LI",{});var lWe=s(h5);W0e=n(lWe,"STRONG",{});var JJt=s(W0e);kHr=r(JJt,"clip"),JJt.forEach(t),SHr=r(lWe," \u2014 "),vre=n(lWe,"A",{href:!0});var YJt=s(vre);RHr=r(YJt,"FlaxCLIPModel"),YJt.forEach(t),PHr=r(lWe," (CLIP model)"),lWe.forEach(t),BHr=i(ne),p5=n(ne,"LI",{});var iWe=s(p5);Q0e=n(iWe,"STRONG",{});var KJt=s(Q0e);IHr=r(KJt,"distilbert"),KJt.forEach(t),NHr=r(iWe," \u2014 "),Fre=n(iWe,"A",{href:!0});var ZJt=s(Fre);qHr=r(ZJt,"FlaxDistilBertModel"),ZJt.forEach(t),jHr=r(iWe," (DistilBERT model)"),iWe.forEach(t),DHr=i(ne),_5=n(ne,"LI",{});var dWe=s(_5);U0e=n(dWe,"STRONG",{});var eYt=s(U0e);GHr=r(eYt,"electra"),eYt.forEach(t),OHr=r(dWe," \u2014 "),Tre=n(dWe,"A",{href:!0});var oYt=s(Tre);VHr=r(oYt,"FlaxElectraModel"),oYt.forEach(t),XHr=r(dWe," (ELECTRA model)"),dWe.forEach(t),zHr=i(ne),u5=n(ne,"LI",{});var cWe=s(u5);H0e=n(cWe,"STRONG",{});var rYt=s(H0e);WHr=r(rYt,"gpt2"),rYt.forEach(t),QHr=r(cWe," \u2014 "),Mre=n(cWe,"A",{href:!0});var tYt=s(Mre);UHr=r(tYt,"FlaxGPT2Model"),tYt.forEach(t),HHr=r(cWe," (OpenAI GPT-2 model)"),cWe.forEach(t),JHr=i(ne),b5=n(ne,"LI",{});var fWe=s(b5);J0e=n(fWe,"STRONG",{});var aYt=s(J0e);YHr=r(aYt,"gpt_neo"),aYt.forEach(t),KHr=r(fWe," \u2014 "),Ere=n(fWe,"A",{href:!0});var nYt=s(Ere);ZHr=r(nYt,"FlaxGPTNeoModel"),nYt.forEach(t),eJr=r(fWe," (GPT Neo model)"),fWe.forEach(t),oJr=i(ne),v5=n(ne,"LI",{});var mWe=s(v5);Y0e=n(mWe,"STRONG",{});var sYt=s(Y0e);rJr=r(sYt,"gptj"),sYt.forEach(t),tJr=r(mWe," \u2014 "),Cre=n(mWe,"A",{href:!0});var lYt=s(Cre);aJr=r(lYt,"FlaxGPTJModel"),lYt.forEach(t),nJr=r(mWe," (GPT-J model)"),mWe.forEach(t),sJr=i(ne),F5=n(ne,"LI",{});var gWe=s(F5);K0e=n(gWe,"STRONG",{});var iYt=s(K0e);lJr=r(iYt,"longt5"),iYt.forEach(t),iJr=r(gWe," \u2014 "),wre=n(gWe,"A",{href:!0});var dYt=s(wre);dJr=r(dYt,"FlaxLongT5Model"),dYt.forEach(t),cJr=r(gWe," (LongT5 model)"),gWe.forEach(t),fJr=i(ne),T5=n(ne,"LI",{});var hWe=s(T5);Z0e=n(hWe,"STRONG",{});var cYt=s(Z0e);mJr=r(cYt,"marian"),cYt.forEach(t),gJr=r(hWe," \u2014 "),Are=n(hWe,"A",{href:!0});var fYt=s(Are);hJr=r(fYt,"FlaxMarianModel"),fYt.forEach(t),pJr=r(hWe," (Marian model)"),hWe.forEach(t),_Jr=i(ne),M5=n(ne,"LI",{});var pWe=s(M5);ewe=n(pWe,"STRONG",{});var mYt=s(ewe);uJr=r(mYt,"mbart"),mYt.forEach(t),bJr=r(pWe," \u2014 "),Lre=n(pWe,"A",{href:!0});var gYt=s(Lre);vJr=r(gYt,"FlaxMBartModel"),gYt.forEach(t),FJr=r(pWe," (mBART model)"),pWe.forEach(t),TJr=i(ne),E5=n(ne,"LI",{});var _We=s(E5);owe=n(_We,"STRONG",{});var hYt=s(owe);MJr=r(hYt,"mt5"),hYt.forEach(t),EJr=r(_We," \u2014 "),yre=n(_We,"A",{href:!0});var pYt=s(yre);CJr=r(pYt,"FlaxMT5Model"),pYt.forEach(t),wJr=r(_We," (MT5 model)"),_We.forEach(t),AJr=i(ne),C5=n(ne,"LI",{});var uWe=s(C5);rwe=n(uWe,"STRONG",{});var _Yt=s(rwe);LJr=r(_Yt,"opt"),_Yt.forEach(t),yJr=r(uWe," \u2014 "),xre=n(uWe,"A",{href:!0});var uYt=s(xre);xJr=r(uYt,"FlaxOPTModel"),uYt.forEach(t),$Jr=r(uWe," (OPT model)"),uWe.forEach(t),kJr=i(ne),w5=n(ne,"LI",{});var bWe=s(w5);twe=n(bWe,"STRONG",{});var bYt=s(twe);SJr=r(bYt,"pegasus"),bYt.forEach(t),RJr=r(bWe," \u2014 "),$re=n(bWe,"A",{href:!0});var vYt=s($re);PJr=r(vYt,"FlaxPegasusModel"),vYt.forEach(t),BJr=r(bWe," (Pegasus model)"),bWe.forEach(t),IJr=i(ne),A5=n(ne,"LI",{});var vWe=s(A5);awe=n(vWe,"STRONG",{});var FYt=s(awe);NJr=r(FYt,"roberta"),FYt.forEach(t),qJr=r(vWe," \u2014 "),kre=n(vWe,"A",{href:!0});var TYt=s(kre);jJr=r(TYt,"FlaxRobertaModel"),TYt.forEach(t),DJr=r(vWe," (RoBERTa model)"),vWe.forEach(t),GJr=i(ne),L5=n(ne,"LI",{});var FWe=s(L5);nwe=n(FWe,"STRONG",{});var MYt=s(nwe);OJr=r(MYt,"roformer"),MYt.forEach(t),VJr=r(FWe," \u2014 "),Sre=n(FWe,"A",{href:!0});var EYt=s(Sre);XJr=r(EYt,"FlaxRoFormerModel"),EYt.forEach(t),zJr=r(FWe," (RoFormer model)"),FWe.forEach(t),WJr=i(ne),y5=n(ne,"LI",{});var TWe=s(y5);swe=n(TWe,"STRONG",{});var CYt=s(swe);QJr=r(CYt,"t5"),CYt.forEach(t),UJr=r(TWe," \u2014 "),Rre=n(TWe,"A",{href:!0});var wYt=s(Rre);HJr=r(wYt,"FlaxT5Model"),wYt.forEach(t),JJr=r(TWe," (T5 model)"),TWe.forEach(t),YJr=i(ne),x5=n(ne,"LI",{});var MWe=s(x5);lwe=n(MWe,"STRONG",{});var AYt=s(lwe);KJr=r(AYt,"vision-text-dual-encoder"),AYt.forEach(t),ZJr=r(MWe," \u2014 "),Pre=n(MWe,"A",{href:!0});var LYt=s(Pre);eYr=r(LYt,"FlaxVisionTextDualEncoderModel"),LYt.forEach(t),oYr=r(MWe," (VisionTextDualEncoder model)"),MWe.forEach(t),rYr=i(ne),$5=n(ne,"LI",{});var EWe=s($5);iwe=n(EWe,"STRONG",{});var yYt=s(iwe);tYr=r(yYt,"vit"),yYt.forEach(t),aYr=r(EWe," \u2014 "),Bre=n(EWe,"A",{href:!0});var xYt=s(Bre);nYr=r(xYt,"FlaxViTModel"),xYt.forEach(t),sYr=r(EWe," (ViT model)"),EWe.forEach(t),lYr=i(ne),k5=n(ne,"LI",{});var CWe=s(k5);dwe=n(CWe,"STRONG",{});var $Yt=s(dwe);iYr=r($Yt,"wav2vec2"),$Yt.forEach(t),dYr=r(CWe," \u2014 "),Ire=n(CWe,"A",{href:!0});var kYt=s(Ire);cYr=r(kYt,"FlaxWav2Vec2Model"),kYt.forEach(t),fYr=r(CWe," (Wav2Vec2 model)"),CWe.forEach(t),mYr=i(ne),S5=n(ne,"LI",{});var wWe=s(S5);cwe=n(wWe,"STRONG",{});var SYt=s(cwe);gYr=r(SYt,"xglm"),SYt.forEach(t),hYr=r(wWe," \u2014 "),Nre=n(wWe,"A",{href:!0});var RYt=s(Nre);pYr=r(RYt,"FlaxXGLMModel"),RYt.forEach(t),_Yr=r(wWe," (XGLM model)"),wWe.forEach(t),uYr=i(ne),R5=n(ne,"LI",{});var AWe=s(R5);fwe=n(AWe,"STRONG",{});var PYt=s(fwe);bYr=r(PYt,"xlm-roberta"),PYt.forEach(t),vYr=r(AWe," \u2014 "),qre=n(AWe,"A",{href:!0});var BYt=s(qre);FYr=r(BYt,"FlaxXLMRobertaModel"),BYt.forEach(t),TYr=r(AWe," (XLM-RoBERTa model)"),AWe.forEach(t),ne.forEach(t),MYr=i(vi),T(P5.$$.fragment,vi),vi.forEach(t),bi.forEach(t),VHe=i(f),bf=n(f,"H2",{class:!0});var tKe=s(bf);B5=n(tKe,"A",{id:!0,class:!0,href:!0});var IYt=s(B5);mwe=n(IYt,"SPAN",{});var NYt=s(mwe);T(Ik.$$.fragment,NYt),NYt.forEach(t),IYt.forEach(t),EYr=i(tKe),gwe=n(tKe,"SPAN",{});var qYt=s(gwe);CYr=r(qYt,"FlaxAutoModelForCausalLM"),qYt.forEach(t),tKe.forEach(t),XHe=i(f),Fr=n(f,"DIV",{class:!0});var Fi=s(Fr);T(Nk.$$.fragment,Fi),wYr=i(Fi),vf=n(Fi,"P",{});var Mse=s(vf);AYr=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jre=n(Mse,"A",{href:!0});var jYt=s(jre);LYr=r(jYt,"from_pretrained()"),jYt.forEach(t),yYr=r(Mse," class method or the "),Dre=n(Mse,"A",{href:!0});var DYt=s(Dre);xYr=r(DYt,"from_config()"),DYt.forEach(t),$Yr=r(Mse,` class
method.`),Mse.forEach(t),kYr=i(Fi),qk=n(Fi,"P",{});var aKe=s(qk);SYr=r(aKe,"This class cannot be instantiated directly using "),hwe=n(aKe,"CODE",{});var GYt=s(hwe);RYr=r(GYt,"__init__()"),GYt.forEach(t),PYr=r(aKe," (throws an error)."),aKe.forEach(t),BYr=i(Fi),ea=n(Fi,"DIV",{class:!0});var zL=s(ea);T(jk.$$.fragment,zL),IYr=i(zL),pwe=n(zL,"P",{});var OYt=s(pwe);NYr=r(OYt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),OYt.forEach(t),qYr=i(zL),Ff=n(zL,"P",{});var Ese=s(Ff);jYr=r(Ese,`Note:
Loading a model from its configuration file does `),_we=n(Ese,"STRONG",{});var VYt=s(_we);DYr=r(VYt,"not"),VYt.forEach(t),GYr=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gre=n(Ese,"A",{href:!0});var XYt=s(Gre);OYr=r(XYt,"from_pretrained()"),XYt.forEach(t),VYr=r(Ese," to load the model weights."),Ese.forEach(t),XYr=i(zL),T(I5.$$.fragment,zL),zL.forEach(t),zYr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(Dk.$$.fragment,Ti),WYr=i(Ti),uwe=n(Ti,"P",{});var zYt=s(uwe);QYr=r(zYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zYt.forEach(t),UYr=i(Ti),Sn=n(Ti,"P",{});var WL=s(Sn);HYr=r(WL,"The model class to instantiate is selected based on the "),bwe=n(WL,"CODE",{});var WYt=s(bwe);JYr=r(WYt,"model_type"),WYt.forEach(t),YYr=r(WL,` property of the config object (either
passed as an argument or loaded from `),vwe=n(WL,"CODE",{});var QYt=s(vwe);KYr=r(QYt,"pretrained_model_name_or_path"),QYt.forEach(t),ZYr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=n(WL,"CODE",{});var UYt=s(Fwe);eKr=r(UYt,"pretrained_model_name_or_path"),UYt.forEach(t),oKr=r(WL,":"),WL.forEach(t),rKr=i(Ti),xe=n(Ti,"UL",{});var Ne=s(xe);N5=n(Ne,"LI",{});var LWe=s(N5);Twe=n(LWe,"STRONG",{});var HYt=s(Twe);tKr=r(HYt,"bart"),HYt.forEach(t),aKr=r(LWe," \u2014 "),Ore=n(LWe,"A",{href:!0});var JYt=s(Ore);nKr=r(JYt,"FlaxBartForCausalLM"),JYt.forEach(t),sKr=r(LWe," (BART model)"),LWe.forEach(t),lKr=i(Ne),q5=n(Ne,"LI",{});var yWe=s(q5);Mwe=n(yWe,"STRONG",{});var YYt=s(Mwe);iKr=r(YYt,"bert"),YYt.forEach(t),dKr=r(yWe," \u2014 "),Vre=n(yWe,"A",{href:!0});var KYt=s(Vre);cKr=r(KYt,"FlaxBertForCausalLM"),KYt.forEach(t),fKr=r(yWe," (BERT model)"),yWe.forEach(t),mKr=i(Ne),j5=n(Ne,"LI",{});var xWe=s(j5);Ewe=n(xWe,"STRONG",{});var ZYt=s(Ewe);gKr=r(ZYt,"big_bird"),ZYt.forEach(t),hKr=r(xWe," \u2014 "),Xre=n(xWe,"A",{href:!0});var eKt=s(Xre);pKr=r(eKt,"FlaxBigBirdForCausalLM"),eKt.forEach(t),_Kr=r(xWe," (BigBird model)"),xWe.forEach(t),uKr=i(Ne),D5=n(Ne,"LI",{});var $We=s(D5);Cwe=n($We,"STRONG",{});var oKt=s(Cwe);bKr=r(oKt,"electra"),oKt.forEach(t),vKr=r($We," \u2014 "),zre=n($We,"A",{href:!0});var rKt=s(zre);FKr=r(rKt,"FlaxElectraForCausalLM"),rKt.forEach(t),TKr=r($We," (ELECTRA model)"),$We.forEach(t),MKr=i(Ne),G5=n(Ne,"LI",{});var kWe=s(G5);wwe=n(kWe,"STRONG",{});var tKt=s(wwe);EKr=r(tKt,"gpt2"),tKt.forEach(t),CKr=r(kWe," \u2014 "),Wre=n(kWe,"A",{href:!0});var aKt=s(Wre);wKr=r(aKt,"FlaxGPT2LMHeadModel"),aKt.forEach(t),AKr=r(kWe," (OpenAI GPT-2 model)"),kWe.forEach(t),LKr=i(Ne),O5=n(Ne,"LI",{});var SWe=s(O5);Awe=n(SWe,"STRONG",{});var nKt=s(Awe);yKr=r(nKt,"gpt_neo"),nKt.forEach(t),xKr=r(SWe," \u2014 "),Qre=n(SWe,"A",{href:!0});var sKt=s(Qre);$Kr=r(sKt,"FlaxGPTNeoForCausalLM"),sKt.forEach(t),kKr=r(SWe," (GPT Neo model)"),SWe.forEach(t),SKr=i(Ne),V5=n(Ne,"LI",{});var RWe=s(V5);Lwe=n(RWe,"STRONG",{});var lKt=s(Lwe);RKr=r(lKt,"gptj"),lKt.forEach(t),PKr=r(RWe," \u2014 "),Ure=n(RWe,"A",{href:!0});var iKt=s(Ure);BKr=r(iKt,"FlaxGPTJForCausalLM"),iKt.forEach(t),IKr=r(RWe," (GPT-J model)"),RWe.forEach(t),NKr=i(Ne),X5=n(Ne,"LI",{});var PWe=s(X5);ywe=n(PWe,"STRONG",{});var dKt=s(ywe);qKr=r(dKt,"opt"),dKt.forEach(t),jKr=r(PWe," \u2014 "),Hre=n(PWe,"A",{href:!0});var cKt=s(Hre);DKr=r(cKt,"FlaxOPTForCausalLM"),cKt.forEach(t),GKr=r(PWe," (OPT model)"),PWe.forEach(t),OKr=i(Ne),z5=n(Ne,"LI",{});var BWe=s(z5);xwe=n(BWe,"STRONG",{});var fKt=s(xwe);VKr=r(fKt,"roberta"),fKt.forEach(t),XKr=r(BWe," \u2014 "),Jre=n(BWe,"A",{href:!0});var mKt=s(Jre);zKr=r(mKt,"FlaxRobertaForCausalLM"),mKt.forEach(t),WKr=r(BWe," (RoBERTa model)"),BWe.forEach(t),QKr=i(Ne),W5=n(Ne,"LI",{});var IWe=s(W5);$we=n(IWe,"STRONG",{});var gKt=s($we);UKr=r(gKt,"xglm"),gKt.forEach(t),HKr=r(IWe," \u2014 "),Yre=n(IWe,"A",{href:!0});var hKt=s(Yre);JKr=r(hKt,"FlaxXGLMForCausalLM"),hKt.forEach(t),YKr=r(IWe," (XGLM model)"),IWe.forEach(t),Ne.forEach(t),KKr=i(Ti),T(Q5.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),zHe=i(f),Tf=n(f,"H2",{class:!0});var nKe=s(Tf);U5=n(nKe,"A",{id:!0,class:!0,href:!0});var pKt=s(U5);kwe=n(pKt,"SPAN",{});var _Kt=s(kwe);T(Gk.$$.fragment,_Kt),_Kt.forEach(t),pKt.forEach(t),ZKr=i(nKe),Swe=n(nKe,"SPAN",{});var uKt=s(Swe);eZr=r(uKt,"FlaxAutoModelForPreTraining"),uKt.forEach(t),nKe.forEach(t),WHe=i(f),Tr=n(f,"DIV",{class:!0});var Mi=s(Tr);T(Ok.$$.fragment,Mi),oZr=i(Mi),Mf=n(Mi,"P",{});var Cse=s(Mf);rZr=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kre=n(Cse,"A",{href:!0});var bKt=s(Kre);tZr=r(bKt,"from_pretrained()"),bKt.forEach(t),aZr=r(Cse," class method or the "),Zre=n(Cse,"A",{href:!0});var vKt=s(Zre);nZr=r(vKt,"from_config()"),vKt.forEach(t),sZr=r(Cse,` class
method.`),Cse.forEach(t),lZr=i(Mi),Vk=n(Mi,"P",{});var sKe=s(Vk);iZr=r(sKe,"This class cannot be instantiated directly using "),Rwe=n(sKe,"CODE",{});var FKt=s(Rwe);dZr=r(FKt,"__init__()"),FKt.forEach(t),cZr=r(sKe," (throws an error)."),sKe.forEach(t),fZr=i(Mi),oa=n(Mi,"DIV",{class:!0});var QL=s(oa);T(Xk.$$.fragment,QL),mZr=i(QL),Pwe=n(QL,"P",{});var TKt=s(Pwe);gZr=r(TKt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TKt.forEach(t),hZr=i(QL),Ef=n(QL,"P",{});var wse=s(Ef);pZr=r(wse,`Note:
Loading a model from its configuration file does `),Bwe=n(wse,"STRONG",{});var MKt=s(Bwe);_Zr=r(MKt,"not"),MKt.forEach(t),uZr=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=n(wse,"A",{href:!0});var EKt=s(ete);bZr=r(EKt,"from_pretrained()"),EKt.forEach(t),vZr=r(wse," to load the model weights."),wse.forEach(t),FZr=i(QL),T(H5.$$.fragment,QL),QL.forEach(t),TZr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(zk.$$.fragment,Ei),MZr=i(Ei),Iwe=n(Ei,"P",{});var CKt=s(Iwe);EZr=r(CKt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CKt.forEach(t),CZr=i(Ei),Rn=n(Ei,"P",{});var UL=s(Rn);wZr=r(UL,"The model class to instantiate is selected based on the "),Nwe=n(UL,"CODE",{});var wKt=s(Nwe);AZr=r(wKt,"model_type"),wKt.forEach(t),LZr=r(UL,` property of the config object (either
passed as an argument or loaded from `),qwe=n(UL,"CODE",{});var AKt=s(qwe);yZr=r(AKt,"pretrained_model_name_or_path"),AKt.forEach(t),xZr=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jwe=n(UL,"CODE",{});var LKt=s(jwe);$Zr=r(LKt,"pretrained_model_name_or_path"),LKt.forEach(t),kZr=r(UL,":"),UL.forEach(t),SZr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);J5=n(we,"LI",{});var NWe=s(J5);Dwe=n(NWe,"STRONG",{});var yKt=s(Dwe);RZr=r(yKt,"albert"),yKt.forEach(t),PZr=r(NWe," \u2014 "),ote=n(NWe,"A",{href:!0});var xKt=s(ote);BZr=r(xKt,"FlaxAlbertForPreTraining"),xKt.forEach(t),IZr=r(NWe," (ALBERT model)"),NWe.forEach(t),NZr=i(we),Y5=n(we,"LI",{});var qWe=s(Y5);Gwe=n(qWe,"STRONG",{});var $Kt=s(Gwe);qZr=r($Kt,"bart"),$Kt.forEach(t),jZr=r(qWe," \u2014 "),rte=n(qWe,"A",{href:!0});var kKt=s(rte);DZr=r(kKt,"FlaxBartForConditionalGeneration"),kKt.forEach(t),GZr=r(qWe," (BART model)"),qWe.forEach(t),OZr=i(we),K5=n(we,"LI",{});var jWe=s(K5);Owe=n(jWe,"STRONG",{});var SKt=s(Owe);VZr=r(SKt,"bert"),SKt.forEach(t),XZr=r(jWe," \u2014 "),tte=n(jWe,"A",{href:!0});var RKt=s(tte);zZr=r(RKt,"FlaxBertForPreTraining"),RKt.forEach(t),WZr=r(jWe," (BERT model)"),jWe.forEach(t),QZr=i(we),Z5=n(we,"LI",{});var DWe=s(Z5);Vwe=n(DWe,"STRONG",{});var PKt=s(Vwe);UZr=r(PKt,"big_bird"),PKt.forEach(t),HZr=r(DWe," \u2014 "),ate=n(DWe,"A",{href:!0});var BKt=s(ate);JZr=r(BKt,"FlaxBigBirdForPreTraining"),BKt.forEach(t),YZr=r(DWe," (BigBird model)"),DWe.forEach(t),KZr=i(we),e0=n(we,"LI",{});var GWe=s(e0);Xwe=n(GWe,"STRONG",{});var IKt=s(Xwe);ZZr=r(IKt,"electra"),IKt.forEach(t),eet=r(GWe," \u2014 "),nte=n(GWe,"A",{href:!0});var NKt=s(nte);oet=r(NKt,"FlaxElectraForPreTraining"),NKt.forEach(t),ret=r(GWe," (ELECTRA model)"),GWe.forEach(t),tet=i(we),o0=n(we,"LI",{});var OWe=s(o0);zwe=n(OWe,"STRONG",{});var qKt=s(zwe);aet=r(qKt,"longt5"),qKt.forEach(t),net=r(OWe," \u2014 "),ste=n(OWe,"A",{href:!0});var jKt=s(ste);set=r(jKt,"FlaxLongT5ForConditionalGeneration"),jKt.forEach(t),iet=r(OWe," (LongT5 model)"),OWe.forEach(t),det=i(we),r0=n(we,"LI",{});var VWe=s(r0);Wwe=n(VWe,"STRONG",{});var DKt=s(Wwe);cet=r(DKt,"mbart"),DKt.forEach(t),fet=r(VWe," \u2014 "),lte=n(VWe,"A",{href:!0});var GKt=s(lte);met=r(GKt,"FlaxMBartForConditionalGeneration"),GKt.forEach(t),get=r(VWe," (mBART model)"),VWe.forEach(t),het=i(we),t0=n(we,"LI",{});var XWe=s(t0);Qwe=n(XWe,"STRONG",{});var OKt=s(Qwe);pet=r(OKt,"mt5"),OKt.forEach(t),_et=r(XWe," \u2014 "),ite=n(XWe,"A",{href:!0});var VKt=s(ite);uet=r(VKt,"FlaxMT5ForConditionalGeneration"),VKt.forEach(t),bet=r(XWe," (MT5 model)"),XWe.forEach(t),vet=i(we),a0=n(we,"LI",{});var zWe=s(a0);Uwe=n(zWe,"STRONG",{});var XKt=s(Uwe);Fet=r(XKt,"roberta"),XKt.forEach(t),Tet=r(zWe," \u2014 "),dte=n(zWe,"A",{href:!0});var zKt=s(dte);Met=r(zKt,"FlaxRobertaForMaskedLM"),zKt.forEach(t),Eet=r(zWe," (RoBERTa model)"),zWe.forEach(t),Cet=i(we),n0=n(we,"LI",{});var WWe=s(n0);Hwe=n(WWe,"STRONG",{});var WKt=s(Hwe);wet=r(WKt,"roformer"),WKt.forEach(t),Aet=r(WWe," \u2014 "),cte=n(WWe,"A",{href:!0});var QKt=s(cte);Let=r(QKt,"FlaxRoFormerForMaskedLM"),QKt.forEach(t),yet=r(WWe," (RoFormer model)"),WWe.forEach(t),xet=i(we),s0=n(we,"LI",{});var QWe=s(s0);Jwe=n(QWe,"STRONG",{});var UKt=s(Jwe);$et=r(UKt,"t5"),UKt.forEach(t),ket=r(QWe," \u2014 "),fte=n(QWe,"A",{href:!0});var HKt=s(fte);Set=r(HKt,"FlaxT5ForConditionalGeneration"),HKt.forEach(t),Ret=r(QWe," (T5 model)"),QWe.forEach(t),Pet=i(we),l0=n(we,"LI",{});var UWe=s(l0);Ywe=n(UWe,"STRONG",{});var JKt=s(Ywe);Bet=r(JKt,"wav2vec2"),JKt.forEach(t),Iet=r(UWe," \u2014 "),mte=n(UWe,"A",{href:!0});var YKt=s(mte);Net=r(YKt,"FlaxWav2Vec2ForPreTraining"),YKt.forEach(t),qet=r(UWe," (Wav2Vec2 model)"),UWe.forEach(t),jet=i(we),i0=n(we,"LI",{});var HWe=s(i0);Kwe=n(HWe,"STRONG",{});var KKt=s(Kwe);Det=r(KKt,"xlm-roberta"),KKt.forEach(t),Get=r(HWe," \u2014 "),gte=n(HWe,"A",{href:!0});var ZKt=s(gte);Oet=r(ZKt,"FlaxXLMRobertaForMaskedLM"),ZKt.forEach(t),Vet=r(HWe," (XLM-RoBERTa model)"),HWe.forEach(t),we.forEach(t),Xet=i(Ei),T(d0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),QHe=i(f),Cf=n(f,"H2",{class:!0});var lKe=s(Cf);c0=n(lKe,"A",{id:!0,class:!0,href:!0});var eZt=s(c0);Zwe=n(eZt,"SPAN",{});var oZt=s(Zwe);T(Wk.$$.fragment,oZt),oZt.forEach(t),eZt.forEach(t),zet=i(lKe),eAe=n(lKe,"SPAN",{});var rZt=s(eAe);Wet=r(rZt,"FlaxAutoModelForMaskedLM"),rZt.forEach(t),lKe.forEach(t),UHe=i(f),Mr=n(f,"DIV",{class:!0});var Ci=s(Mr);T(Qk.$$.fragment,Ci),Qet=i(Ci),wf=n(Ci,"P",{});var Ase=s(wf);Uet=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hte=n(Ase,"A",{href:!0});var tZt=s(hte);Het=r(tZt,"from_pretrained()"),tZt.forEach(t),Jet=r(Ase," class method or the "),pte=n(Ase,"A",{href:!0});var aZt=s(pte);Yet=r(aZt,"from_config()"),aZt.forEach(t),Ket=r(Ase,` class
method.`),Ase.forEach(t),Zet=i(Ci),Uk=n(Ci,"P",{});var iKe=s(Uk);eot=r(iKe,"This class cannot be instantiated directly using "),oAe=n(iKe,"CODE",{});var nZt=s(oAe);oot=r(nZt,"__init__()"),nZt.forEach(t),rot=r(iKe," (throws an error)."),iKe.forEach(t),tot=i(Ci),ra=n(Ci,"DIV",{class:!0});var HL=s(ra);T(Hk.$$.fragment,HL),aot=i(HL),rAe=n(HL,"P",{});var sZt=s(rAe);not=r(sZt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sZt.forEach(t),sot=i(HL),Af=n(HL,"P",{});var Lse=s(Af);lot=r(Lse,`Note:
Loading a model from its configuration file does `),tAe=n(Lse,"STRONG",{});var lZt=s(tAe);iot=r(lZt,"not"),lZt.forEach(t),dot=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=n(Lse,"A",{href:!0});var iZt=s(_te);cot=r(iZt,"from_pretrained()"),iZt.forEach(t),fot=r(Lse," to load the model weights."),Lse.forEach(t),mot=i(HL),T(f0.$$.fragment,HL),HL.forEach(t),got=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Jk.$$.fragment,wi),hot=i(wi),aAe=n(wi,"P",{});var dZt=s(aAe);pot=r(dZt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dZt.forEach(t),_ot=i(wi),Pn=n(wi,"P",{});var JL=s(Pn);uot=r(JL,"The model class to instantiate is selected based on the "),nAe=n(JL,"CODE",{});var cZt=s(nAe);bot=r(cZt,"model_type"),cZt.forEach(t),vot=r(JL,` property of the config object (either
passed as an argument or loaded from `),sAe=n(JL,"CODE",{});var fZt=s(sAe);Fot=r(fZt,"pretrained_model_name_or_path"),fZt.forEach(t),Tot=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lAe=n(JL,"CODE",{});var mZt=s(lAe);Mot=r(mZt,"pretrained_model_name_or_path"),mZt.forEach(t),Eot=r(JL,":"),JL.forEach(t),Cot=i(wi),$e=n(wi,"UL",{});var qe=s($e);m0=n(qe,"LI",{});var JWe=s(m0);iAe=n(JWe,"STRONG",{});var gZt=s(iAe);wot=r(gZt,"albert"),gZt.forEach(t),Aot=r(JWe," \u2014 "),ute=n(JWe,"A",{href:!0});var hZt=s(ute);Lot=r(hZt,"FlaxAlbertForMaskedLM"),hZt.forEach(t),yot=r(JWe," (ALBERT model)"),JWe.forEach(t),xot=i(qe),g0=n(qe,"LI",{});var YWe=s(g0);dAe=n(YWe,"STRONG",{});var pZt=s(dAe);$ot=r(pZt,"bart"),pZt.forEach(t),kot=r(YWe," \u2014 "),bte=n(YWe,"A",{href:!0});var _Zt=s(bte);Sot=r(_Zt,"FlaxBartForConditionalGeneration"),_Zt.forEach(t),Rot=r(YWe," (BART model)"),YWe.forEach(t),Pot=i(qe),h0=n(qe,"LI",{});var KWe=s(h0);cAe=n(KWe,"STRONG",{});var uZt=s(cAe);Bot=r(uZt,"bert"),uZt.forEach(t),Iot=r(KWe," \u2014 "),vte=n(KWe,"A",{href:!0});var bZt=s(vte);Not=r(bZt,"FlaxBertForMaskedLM"),bZt.forEach(t),qot=r(KWe," (BERT model)"),KWe.forEach(t),jot=i(qe),p0=n(qe,"LI",{});var ZWe=s(p0);fAe=n(ZWe,"STRONG",{});var vZt=s(fAe);Dot=r(vZt,"big_bird"),vZt.forEach(t),Got=r(ZWe," \u2014 "),Fte=n(ZWe,"A",{href:!0});var FZt=s(Fte);Oot=r(FZt,"FlaxBigBirdForMaskedLM"),FZt.forEach(t),Vot=r(ZWe," (BigBird model)"),ZWe.forEach(t),Xot=i(qe),_0=n(qe,"LI",{});var eQe=s(_0);mAe=n(eQe,"STRONG",{});var TZt=s(mAe);zot=r(TZt,"distilbert"),TZt.forEach(t),Wot=r(eQe," \u2014 "),Tte=n(eQe,"A",{href:!0});var MZt=s(Tte);Qot=r(MZt,"FlaxDistilBertForMaskedLM"),MZt.forEach(t),Uot=r(eQe," (DistilBERT model)"),eQe.forEach(t),Hot=i(qe),u0=n(qe,"LI",{});var oQe=s(u0);gAe=n(oQe,"STRONG",{});var EZt=s(gAe);Jot=r(EZt,"electra"),EZt.forEach(t),Yot=r(oQe," \u2014 "),Mte=n(oQe,"A",{href:!0});var CZt=s(Mte);Kot=r(CZt,"FlaxElectraForMaskedLM"),CZt.forEach(t),Zot=r(oQe," (ELECTRA model)"),oQe.forEach(t),ert=i(qe),b0=n(qe,"LI",{});var rQe=s(b0);hAe=n(rQe,"STRONG",{});var wZt=s(hAe);ort=r(wZt,"mbart"),wZt.forEach(t),rrt=r(rQe," \u2014 "),Ete=n(rQe,"A",{href:!0});var AZt=s(Ete);trt=r(AZt,"FlaxMBartForConditionalGeneration"),AZt.forEach(t),art=r(rQe," (mBART model)"),rQe.forEach(t),nrt=i(qe),v0=n(qe,"LI",{});var tQe=s(v0);pAe=n(tQe,"STRONG",{});var LZt=s(pAe);srt=r(LZt,"roberta"),LZt.forEach(t),lrt=r(tQe," \u2014 "),Cte=n(tQe,"A",{href:!0});var yZt=s(Cte);irt=r(yZt,"FlaxRobertaForMaskedLM"),yZt.forEach(t),drt=r(tQe," (RoBERTa model)"),tQe.forEach(t),crt=i(qe),F0=n(qe,"LI",{});var aQe=s(F0);_Ae=n(aQe,"STRONG",{});var xZt=s(_Ae);frt=r(xZt,"roformer"),xZt.forEach(t),mrt=r(aQe," \u2014 "),wte=n(aQe,"A",{href:!0});var $Zt=s(wte);grt=r($Zt,"FlaxRoFormerForMaskedLM"),$Zt.forEach(t),hrt=r(aQe," (RoFormer model)"),aQe.forEach(t),prt=i(qe),T0=n(qe,"LI",{});var nQe=s(T0);uAe=n(nQe,"STRONG",{});var kZt=s(uAe);_rt=r(kZt,"xlm-roberta"),kZt.forEach(t),urt=r(nQe," \u2014 "),Ate=n(nQe,"A",{href:!0});var SZt=s(Ate);brt=r(SZt,"FlaxXLMRobertaForMaskedLM"),SZt.forEach(t),vrt=r(nQe," (XLM-RoBERTa model)"),nQe.forEach(t),qe.forEach(t),Frt=i(wi),T(M0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),HHe=i(f),Lf=n(f,"H2",{class:!0});var dKe=s(Lf);E0=n(dKe,"A",{id:!0,class:!0,href:!0});var RZt=s(E0);bAe=n(RZt,"SPAN",{});var PZt=s(bAe);T(Yk.$$.fragment,PZt),PZt.forEach(t),RZt.forEach(t),Trt=i(dKe),vAe=n(dKe,"SPAN",{});var BZt=s(vAe);Mrt=r(BZt,"FlaxAutoModelForSeq2SeqLM"),BZt.forEach(t),dKe.forEach(t),JHe=i(f),Er=n(f,"DIV",{class:!0});var Ai=s(Er);T(Kk.$$.fragment,Ai),Ert=i(Ai),yf=n(Ai,"P",{});var yse=s(yf);Crt=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lte=n(yse,"A",{href:!0});var IZt=s(Lte);wrt=r(IZt,"from_pretrained()"),IZt.forEach(t),Art=r(yse," class method or the "),yte=n(yse,"A",{href:!0});var NZt=s(yte);Lrt=r(NZt,"from_config()"),NZt.forEach(t),yrt=r(yse,` class
method.`),yse.forEach(t),xrt=i(Ai),Zk=n(Ai,"P",{});var cKe=s(Zk);$rt=r(cKe,"This class cannot be instantiated directly using "),FAe=n(cKe,"CODE",{});var qZt=s(FAe);krt=r(qZt,"__init__()"),qZt.forEach(t),Srt=r(cKe," (throws an error)."),cKe.forEach(t),Rrt=i(Ai),ta=n(Ai,"DIV",{class:!0});var YL=s(ta);T(eS.$$.fragment,YL),Prt=i(YL),TAe=n(YL,"P",{});var jZt=s(TAe);Brt=r(jZt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jZt.forEach(t),Irt=i(YL),xf=n(YL,"P",{});var xse=s(xf);Nrt=r(xse,`Note:
Loading a model from its configuration file does `),MAe=n(xse,"STRONG",{});var DZt=s(MAe);qrt=r(DZt,"not"),DZt.forEach(t),jrt=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),xte=n(xse,"A",{href:!0});var GZt=s(xte);Drt=r(GZt,"from_pretrained()"),GZt.forEach(t),Grt=r(xse," to load the model weights."),xse.forEach(t),Ort=i(YL),T(C0.$$.fragment,YL),YL.forEach(t),Vrt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(oS.$$.fragment,Li),Xrt=i(Li),EAe=n(Li,"P",{});var OZt=s(EAe);zrt=r(OZt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OZt.forEach(t),Wrt=i(Li),Bn=n(Li,"P",{});var KL=s(Bn);Qrt=r(KL,"The model class to instantiate is selected based on the "),CAe=n(KL,"CODE",{});var VZt=s(CAe);Urt=r(VZt,"model_type"),VZt.forEach(t),Hrt=r(KL,` property of the config object (either
passed as an argument or loaded from `),wAe=n(KL,"CODE",{});var XZt=s(wAe);Jrt=r(XZt,"pretrained_model_name_or_path"),XZt.forEach(t),Yrt=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AAe=n(KL,"CODE",{});var zZt=s(AAe);Krt=r(zZt,"pretrained_model_name_or_path"),zZt.forEach(t),Zrt=r(KL,":"),KL.forEach(t),ett=i(Li),ke=n(Li,"UL",{});var je=s(ke);w0=n(je,"LI",{});var sQe=s(w0);LAe=n(sQe,"STRONG",{});var WZt=s(LAe);ott=r(WZt,"bart"),WZt.forEach(t),rtt=r(sQe," \u2014 "),$te=n(sQe,"A",{href:!0});var QZt=s($te);ttt=r(QZt,"FlaxBartForConditionalGeneration"),QZt.forEach(t),att=r(sQe," (BART model)"),sQe.forEach(t),ntt=i(je),A0=n(je,"LI",{});var lQe=s(A0);yAe=n(lQe,"STRONG",{});var UZt=s(yAe);stt=r(UZt,"blenderbot"),UZt.forEach(t),ltt=r(lQe," \u2014 "),kte=n(lQe,"A",{href:!0});var HZt=s(kte);itt=r(HZt,"FlaxBlenderbotForConditionalGeneration"),HZt.forEach(t),dtt=r(lQe," (Blenderbot model)"),lQe.forEach(t),ctt=i(je),L0=n(je,"LI",{});var iQe=s(L0);xAe=n(iQe,"STRONG",{});var JZt=s(xAe);ftt=r(JZt,"blenderbot-small"),JZt.forEach(t),mtt=r(iQe," \u2014 "),Ste=n(iQe,"A",{href:!0});var YZt=s(Ste);gtt=r(YZt,"FlaxBlenderbotSmallForConditionalGeneration"),YZt.forEach(t),htt=r(iQe," (BlenderbotSmall model)"),iQe.forEach(t),ptt=i(je),y0=n(je,"LI",{});var dQe=s(y0);$Ae=n(dQe,"STRONG",{});var KZt=s($Ae);_tt=r(KZt,"encoder-decoder"),KZt.forEach(t),utt=r(dQe," \u2014 "),Rte=n(dQe,"A",{href:!0});var ZZt=s(Rte);btt=r(ZZt,"FlaxEncoderDecoderModel"),ZZt.forEach(t),vtt=r(dQe," (Encoder decoder model)"),dQe.forEach(t),Ftt=i(je),x0=n(je,"LI",{});var cQe=s(x0);kAe=n(cQe,"STRONG",{});var eea=s(kAe);Ttt=r(eea,"longt5"),eea.forEach(t),Mtt=r(cQe," \u2014 "),Pte=n(cQe,"A",{href:!0});var oea=s(Pte);Ett=r(oea,"FlaxLongT5ForConditionalGeneration"),oea.forEach(t),Ctt=r(cQe," (LongT5 model)"),cQe.forEach(t),wtt=i(je),$0=n(je,"LI",{});var fQe=s($0);SAe=n(fQe,"STRONG",{});var rea=s(SAe);Att=r(rea,"marian"),rea.forEach(t),Ltt=r(fQe," \u2014 "),Bte=n(fQe,"A",{href:!0});var tea=s(Bte);ytt=r(tea,"FlaxMarianMTModel"),tea.forEach(t),xtt=r(fQe," (Marian model)"),fQe.forEach(t),$tt=i(je),k0=n(je,"LI",{});var mQe=s(k0);RAe=n(mQe,"STRONG",{});var aea=s(RAe);ktt=r(aea,"mbart"),aea.forEach(t),Stt=r(mQe," \u2014 "),Ite=n(mQe,"A",{href:!0});var nea=s(Ite);Rtt=r(nea,"FlaxMBartForConditionalGeneration"),nea.forEach(t),Ptt=r(mQe," (mBART model)"),mQe.forEach(t),Btt=i(je),S0=n(je,"LI",{});var gQe=s(S0);PAe=n(gQe,"STRONG",{});var sea=s(PAe);Itt=r(sea,"mt5"),sea.forEach(t),Ntt=r(gQe," \u2014 "),Nte=n(gQe,"A",{href:!0});var lea=s(Nte);qtt=r(lea,"FlaxMT5ForConditionalGeneration"),lea.forEach(t),jtt=r(gQe," (MT5 model)"),gQe.forEach(t),Dtt=i(je),R0=n(je,"LI",{});var hQe=s(R0);BAe=n(hQe,"STRONG",{});var iea=s(BAe);Gtt=r(iea,"pegasus"),iea.forEach(t),Ott=r(hQe," \u2014 "),qte=n(hQe,"A",{href:!0});var dea=s(qte);Vtt=r(dea,"FlaxPegasusForConditionalGeneration"),dea.forEach(t),Xtt=r(hQe," (Pegasus model)"),hQe.forEach(t),ztt=i(je),P0=n(je,"LI",{});var pQe=s(P0);IAe=n(pQe,"STRONG",{});var cea=s(IAe);Wtt=r(cea,"t5"),cea.forEach(t),Qtt=r(pQe," \u2014 "),jte=n(pQe,"A",{href:!0});var fea=s(jte);Utt=r(fea,"FlaxT5ForConditionalGeneration"),fea.forEach(t),Htt=r(pQe," (T5 model)"),pQe.forEach(t),je.forEach(t),Jtt=i(Li),T(B0.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),YHe=i(f),$f=n(f,"H2",{class:!0});var fKe=s($f);I0=n(fKe,"A",{id:!0,class:!0,href:!0});var mea=s(I0);NAe=n(mea,"SPAN",{});var gea=s(NAe);T(rS.$$.fragment,gea),gea.forEach(t),mea.forEach(t),Ytt=i(fKe),qAe=n(fKe,"SPAN",{});var hea=s(qAe);Ktt=r(hea,"FlaxAutoModelForSequenceClassification"),hea.forEach(t),fKe.forEach(t),KHe=i(f),Cr=n(f,"DIV",{class:!0});var yi=s(Cr);T(tS.$$.fragment,yi),Ztt=i(yi),kf=n(yi,"P",{});var $se=s(kf);eat=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Dte=n($se,"A",{href:!0});var pea=s(Dte);oat=r(pea,"from_pretrained()"),pea.forEach(t),rat=r($se," class method or the "),Gte=n($se,"A",{href:!0});var _ea=s(Gte);tat=r(_ea,"from_config()"),_ea.forEach(t),aat=r($se,` class
method.`),$se.forEach(t),nat=i(yi),aS=n(yi,"P",{});var mKe=s(aS);sat=r(mKe,"This class cannot be instantiated directly using "),jAe=n(mKe,"CODE",{});var uea=s(jAe);lat=r(uea,"__init__()"),uea.forEach(t),iat=r(mKe," (throws an error)."),mKe.forEach(t),dat=i(yi),aa=n(yi,"DIV",{class:!0});var ZL=s(aa);T(nS.$$.fragment,ZL),cat=i(ZL),DAe=n(ZL,"P",{});var bea=s(DAe);fat=r(bea,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bea.forEach(t),mat=i(ZL),Sf=n(ZL,"P",{});var kse=s(Sf);gat=r(kse,`Note:
Loading a model from its configuration file does `),GAe=n(kse,"STRONG",{});var vea=s(GAe);hat=r(vea,"not"),vea.forEach(t),pat=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ote=n(kse,"A",{href:!0});var Fea=s(Ote);_at=r(Fea,"from_pretrained()"),Fea.forEach(t),uat=r(kse," to load the model weights."),kse.forEach(t),bat=i(ZL),T(N0.$$.fragment,ZL),ZL.forEach(t),vat=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(sS.$$.fragment,xi),Fat=i(xi),OAe=n(xi,"P",{});var Tea=s(OAe);Tat=r(Tea,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Tea.forEach(t),Mat=i(xi),In=n(xi,"P",{});var ey=s(In);Eat=r(ey,"The model class to instantiate is selected based on the "),VAe=n(ey,"CODE",{});var Mea=s(VAe);Cat=r(Mea,"model_type"),Mea.forEach(t),wat=r(ey,` property of the config object (either
passed as an argument or loaded from `),XAe=n(ey,"CODE",{});var Eea=s(XAe);Aat=r(Eea,"pretrained_model_name_or_path"),Eea.forEach(t),Lat=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zAe=n(ey,"CODE",{});var Cea=s(zAe);yat=r(Cea,"pretrained_model_name_or_path"),Cea.forEach(t),xat=r(ey,":"),ey.forEach(t),$at=i(xi),Se=n(xi,"UL",{});var De=s(Se);q0=n(De,"LI",{});var _Qe=s(q0);WAe=n(_Qe,"STRONG",{});var wea=s(WAe);kat=r(wea,"albert"),wea.forEach(t),Sat=r(_Qe," \u2014 "),Vte=n(_Qe,"A",{href:!0});var Aea=s(Vte);Rat=r(Aea,"FlaxAlbertForSequenceClassification"),Aea.forEach(t),Pat=r(_Qe," (ALBERT model)"),_Qe.forEach(t),Bat=i(De),j0=n(De,"LI",{});var uQe=s(j0);QAe=n(uQe,"STRONG",{});var Lea=s(QAe);Iat=r(Lea,"bart"),Lea.forEach(t),Nat=r(uQe," \u2014 "),Xte=n(uQe,"A",{href:!0});var yea=s(Xte);qat=r(yea,"FlaxBartForSequenceClassification"),yea.forEach(t),jat=r(uQe," (BART model)"),uQe.forEach(t),Dat=i(De),D0=n(De,"LI",{});var bQe=s(D0);UAe=n(bQe,"STRONG",{});var xea=s(UAe);Gat=r(xea,"bert"),xea.forEach(t),Oat=r(bQe," \u2014 "),zte=n(bQe,"A",{href:!0});var $ea=s(zte);Vat=r($ea,"FlaxBertForSequenceClassification"),$ea.forEach(t),Xat=r(bQe," (BERT model)"),bQe.forEach(t),zat=i(De),G0=n(De,"LI",{});var vQe=s(G0);HAe=n(vQe,"STRONG",{});var kea=s(HAe);Wat=r(kea,"big_bird"),kea.forEach(t),Qat=r(vQe," \u2014 "),Wte=n(vQe,"A",{href:!0});var Sea=s(Wte);Uat=r(Sea,"FlaxBigBirdForSequenceClassification"),Sea.forEach(t),Hat=r(vQe," (BigBird model)"),vQe.forEach(t),Jat=i(De),O0=n(De,"LI",{});var FQe=s(O0);JAe=n(FQe,"STRONG",{});var Rea=s(JAe);Yat=r(Rea,"distilbert"),Rea.forEach(t),Kat=r(FQe," \u2014 "),Qte=n(FQe,"A",{href:!0});var Pea=s(Qte);Zat=r(Pea,"FlaxDistilBertForSequenceClassification"),Pea.forEach(t),ent=r(FQe," (DistilBERT model)"),FQe.forEach(t),ont=i(De),V0=n(De,"LI",{});var TQe=s(V0);YAe=n(TQe,"STRONG",{});var Bea=s(YAe);rnt=r(Bea,"electra"),Bea.forEach(t),tnt=r(TQe," \u2014 "),Ute=n(TQe,"A",{href:!0});var Iea=s(Ute);ant=r(Iea,"FlaxElectraForSequenceClassification"),Iea.forEach(t),nnt=r(TQe," (ELECTRA model)"),TQe.forEach(t),snt=i(De),X0=n(De,"LI",{});var MQe=s(X0);KAe=n(MQe,"STRONG",{});var Nea=s(KAe);lnt=r(Nea,"mbart"),Nea.forEach(t),int=r(MQe," \u2014 "),Hte=n(MQe,"A",{href:!0});var qea=s(Hte);dnt=r(qea,"FlaxMBartForSequenceClassification"),qea.forEach(t),cnt=r(MQe," (mBART model)"),MQe.forEach(t),fnt=i(De),z0=n(De,"LI",{});var EQe=s(z0);ZAe=n(EQe,"STRONG",{});var jea=s(ZAe);mnt=r(jea,"roberta"),jea.forEach(t),gnt=r(EQe," \u2014 "),Jte=n(EQe,"A",{href:!0});var Dea=s(Jte);hnt=r(Dea,"FlaxRobertaForSequenceClassification"),Dea.forEach(t),pnt=r(EQe," (RoBERTa model)"),EQe.forEach(t),_nt=i(De),W0=n(De,"LI",{});var CQe=s(W0);eLe=n(CQe,"STRONG",{});var Gea=s(eLe);unt=r(Gea,"roformer"),Gea.forEach(t),bnt=r(CQe," \u2014 "),Yte=n(CQe,"A",{href:!0});var Oea=s(Yte);vnt=r(Oea,"FlaxRoFormerForSequenceClassification"),Oea.forEach(t),Fnt=r(CQe," (RoFormer model)"),CQe.forEach(t),Tnt=i(De),Q0=n(De,"LI",{});var wQe=s(Q0);oLe=n(wQe,"STRONG",{});var Vea=s(oLe);Mnt=r(Vea,"xlm-roberta"),Vea.forEach(t),Ent=r(wQe," \u2014 "),Kte=n(wQe,"A",{href:!0});var Xea=s(Kte);Cnt=r(Xea,"FlaxXLMRobertaForSequenceClassification"),Xea.forEach(t),wnt=r(wQe," (XLM-RoBERTa model)"),wQe.forEach(t),De.forEach(t),Ant=i(xi),T(U0.$$.fragment,xi),xi.forEach(t),yi.forEach(t),ZHe=i(f),Rf=n(f,"H2",{class:!0});var gKe=s(Rf);H0=n(gKe,"A",{id:!0,class:!0,href:!0});var zea=s(H0);rLe=n(zea,"SPAN",{});var Wea=s(rLe);T(lS.$$.fragment,Wea),Wea.forEach(t),zea.forEach(t),Lnt=i(gKe),tLe=n(gKe,"SPAN",{});var Qea=s(tLe);ynt=r(Qea,"FlaxAutoModelForQuestionAnswering"),Qea.forEach(t),gKe.forEach(t),eJe=i(f),wr=n(f,"DIV",{class:!0});var $i=s(wr);T(iS.$$.fragment,$i),xnt=i($i),Pf=n($i,"P",{});var Sse=s(Pf);$nt=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zte=n(Sse,"A",{href:!0});var Uea=s(Zte);knt=r(Uea,"from_pretrained()"),Uea.forEach(t),Snt=r(Sse," class method or the "),eae=n(Sse,"A",{href:!0});var Hea=s(eae);Rnt=r(Hea,"from_config()"),Hea.forEach(t),Pnt=r(Sse,` class
method.`),Sse.forEach(t),Bnt=i($i),dS=n($i,"P",{});var hKe=s(dS);Int=r(hKe,"This class cannot be instantiated directly using "),aLe=n(hKe,"CODE",{});var Jea=s(aLe);Nnt=r(Jea,"__init__()"),Jea.forEach(t),qnt=r(hKe," (throws an error)."),hKe.forEach(t),jnt=i($i),na=n($i,"DIV",{class:!0});var oy=s(na);T(cS.$$.fragment,oy),Dnt=i(oy),nLe=n(oy,"P",{});var Yea=s(nLe);Gnt=r(Yea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Yea.forEach(t),Ont=i(oy),Bf=n(oy,"P",{});var Rse=s(Bf);Vnt=r(Rse,`Note:
Loading a model from its configuration file does `),sLe=n(Rse,"STRONG",{});var Kea=s(sLe);Xnt=r(Kea,"not"),Kea.forEach(t),znt=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=n(Rse,"A",{href:!0});var Zea=s(oae);Wnt=r(Zea,"from_pretrained()"),Zea.forEach(t),Qnt=r(Rse," to load the model weights."),Rse.forEach(t),Unt=i(oy),T(J0.$$.fragment,oy),oy.forEach(t),Hnt=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(fS.$$.fragment,ki),Jnt=i(ki),lLe=n(ki,"P",{});var eoa=s(lLe);Ynt=r(eoa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eoa.forEach(t),Knt=i(ki),Nn=n(ki,"P",{});var ry=s(Nn);Znt=r(ry,"The model class to instantiate is selected based on the "),iLe=n(ry,"CODE",{});var ooa=s(iLe);est=r(ooa,"model_type"),ooa.forEach(t),ost=r(ry,` property of the config object (either
passed as an argument or loaded from `),dLe=n(ry,"CODE",{});var roa=s(dLe);rst=r(roa,"pretrained_model_name_or_path"),roa.forEach(t),tst=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cLe=n(ry,"CODE",{});var toa=s(cLe);ast=r(toa,"pretrained_model_name_or_path"),toa.forEach(t),nst=r(ry,":"),ry.forEach(t),sst=i(ki),Re=n(ki,"UL",{});var Ge=s(Re);Y0=n(Ge,"LI",{});var AQe=s(Y0);fLe=n(AQe,"STRONG",{});var aoa=s(fLe);lst=r(aoa,"albert"),aoa.forEach(t),ist=r(AQe," \u2014 "),rae=n(AQe,"A",{href:!0});var noa=s(rae);dst=r(noa,"FlaxAlbertForQuestionAnswering"),noa.forEach(t),cst=r(AQe," (ALBERT model)"),AQe.forEach(t),fst=i(Ge),K0=n(Ge,"LI",{});var LQe=s(K0);mLe=n(LQe,"STRONG",{});var soa=s(mLe);mst=r(soa,"bart"),soa.forEach(t),gst=r(LQe," \u2014 "),tae=n(LQe,"A",{href:!0});var loa=s(tae);hst=r(loa,"FlaxBartForQuestionAnswering"),loa.forEach(t),pst=r(LQe," (BART model)"),LQe.forEach(t),_st=i(Ge),Z0=n(Ge,"LI",{});var yQe=s(Z0);gLe=n(yQe,"STRONG",{});var ioa=s(gLe);ust=r(ioa,"bert"),ioa.forEach(t),bst=r(yQe," \u2014 "),aae=n(yQe,"A",{href:!0});var doa=s(aae);vst=r(doa,"FlaxBertForQuestionAnswering"),doa.forEach(t),Fst=r(yQe," (BERT model)"),yQe.forEach(t),Tst=i(Ge),ew=n(Ge,"LI",{});var xQe=s(ew);hLe=n(xQe,"STRONG",{});var coa=s(hLe);Mst=r(coa,"big_bird"),coa.forEach(t),Est=r(xQe," \u2014 "),nae=n(xQe,"A",{href:!0});var foa=s(nae);Cst=r(foa,"FlaxBigBirdForQuestionAnswering"),foa.forEach(t),wst=r(xQe," (BigBird model)"),xQe.forEach(t),Ast=i(Ge),ow=n(Ge,"LI",{});var $Qe=s(ow);pLe=n($Qe,"STRONG",{});var moa=s(pLe);Lst=r(moa,"distilbert"),moa.forEach(t),yst=r($Qe," \u2014 "),sae=n($Qe,"A",{href:!0});var goa=s(sae);xst=r(goa,"FlaxDistilBertForQuestionAnswering"),goa.forEach(t),$st=r($Qe," (DistilBERT model)"),$Qe.forEach(t),kst=i(Ge),rw=n(Ge,"LI",{});var kQe=s(rw);_Le=n(kQe,"STRONG",{});var hoa=s(_Le);Sst=r(hoa,"electra"),hoa.forEach(t),Rst=r(kQe," \u2014 "),lae=n(kQe,"A",{href:!0});var poa=s(lae);Pst=r(poa,"FlaxElectraForQuestionAnswering"),poa.forEach(t),Bst=r(kQe," (ELECTRA model)"),kQe.forEach(t),Ist=i(Ge),tw=n(Ge,"LI",{});var SQe=s(tw);uLe=n(SQe,"STRONG",{});var _oa=s(uLe);Nst=r(_oa,"mbart"),_oa.forEach(t),qst=r(SQe," \u2014 "),iae=n(SQe,"A",{href:!0});var uoa=s(iae);jst=r(uoa,"FlaxMBartForQuestionAnswering"),uoa.forEach(t),Dst=r(SQe," (mBART model)"),SQe.forEach(t),Gst=i(Ge),aw=n(Ge,"LI",{});var RQe=s(aw);bLe=n(RQe,"STRONG",{});var boa=s(bLe);Ost=r(boa,"roberta"),boa.forEach(t),Vst=r(RQe," \u2014 "),dae=n(RQe,"A",{href:!0});var voa=s(dae);Xst=r(voa,"FlaxRobertaForQuestionAnswering"),voa.forEach(t),zst=r(RQe," (RoBERTa model)"),RQe.forEach(t),Wst=i(Ge),nw=n(Ge,"LI",{});var PQe=s(nw);vLe=n(PQe,"STRONG",{});var Foa=s(vLe);Qst=r(Foa,"roformer"),Foa.forEach(t),Ust=r(PQe," \u2014 "),cae=n(PQe,"A",{href:!0});var Toa=s(cae);Hst=r(Toa,"FlaxRoFormerForQuestionAnswering"),Toa.forEach(t),Jst=r(PQe," (RoFormer model)"),PQe.forEach(t),Yst=i(Ge),sw=n(Ge,"LI",{});var BQe=s(sw);FLe=n(BQe,"STRONG",{});var Moa=s(FLe);Kst=r(Moa,"xlm-roberta"),Moa.forEach(t),Zst=r(BQe," \u2014 "),fae=n(BQe,"A",{href:!0});var Eoa=s(fae);elt=r(Eoa,"FlaxXLMRobertaForQuestionAnswering"),Eoa.forEach(t),olt=r(BQe," (XLM-RoBERTa model)"),BQe.forEach(t),Ge.forEach(t),rlt=i(ki),T(lw.$$.fragment,ki),ki.forEach(t),$i.forEach(t),oJe=i(f),If=n(f,"H2",{class:!0});var pKe=s(If);iw=n(pKe,"A",{id:!0,class:!0,href:!0});var Coa=s(iw);TLe=n(Coa,"SPAN",{});var woa=s(TLe);T(mS.$$.fragment,woa),woa.forEach(t),Coa.forEach(t),tlt=i(pKe),MLe=n(pKe,"SPAN",{});var Aoa=s(MLe);alt=r(Aoa,"FlaxAutoModelForTokenClassification"),Aoa.forEach(t),pKe.forEach(t),rJe=i(f),Ar=n(f,"DIV",{class:!0});var Si=s(Ar);T(gS.$$.fragment,Si),nlt=i(Si),Nf=n(Si,"P",{});var Pse=s(Nf);slt=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mae=n(Pse,"A",{href:!0});var Loa=s(mae);llt=r(Loa,"from_pretrained()"),Loa.forEach(t),ilt=r(Pse," class method or the "),gae=n(Pse,"A",{href:!0});var yoa=s(gae);dlt=r(yoa,"from_config()"),yoa.forEach(t),clt=r(Pse,` class
method.`),Pse.forEach(t),flt=i(Si),hS=n(Si,"P",{});var _Ke=s(hS);mlt=r(_Ke,"This class cannot be instantiated directly using "),ELe=n(_Ke,"CODE",{});var xoa=s(ELe);glt=r(xoa,"__init__()"),xoa.forEach(t),hlt=r(_Ke," (throws an error)."),_Ke.forEach(t),plt=i(Si),sa=n(Si,"DIV",{class:!0});var ty=s(sa);T(pS.$$.fragment,ty),_lt=i(ty),CLe=n(ty,"P",{});var $oa=s(CLe);ult=r($oa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$oa.forEach(t),blt=i(ty),qf=n(ty,"P",{});var Bse=s(qf);vlt=r(Bse,`Note:
Loading a model from its configuration file does `),wLe=n(Bse,"STRONG",{});var koa=s(wLe);Flt=r(koa,"not"),koa.forEach(t),Tlt=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),hae=n(Bse,"A",{href:!0});var Soa=s(hae);Mlt=r(Soa,"from_pretrained()"),Soa.forEach(t),Elt=r(Bse," to load the model weights."),Bse.forEach(t),Clt=i(ty),T(dw.$$.fragment,ty),ty.forEach(t),wlt=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(_S.$$.fragment,Ri),Alt=i(Ri),ALe=n(Ri,"P",{});var Roa=s(ALe);Llt=r(Roa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Roa.forEach(t),ylt=i(Ri),qn=n(Ri,"P",{});var ay=s(qn);xlt=r(ay,"The model class to instantiate is selected based on the "),LLe=n(ay,"CODE",{});var Poa=s(LLe);$lt=r(Poa,"model_type"),Poa.forEach(t),klt=r(ay,` property of the config object (either
passed as an argument or loaded from `),yLe=n(ay,"CODE",{});var Boa=s(yLe);Slt=r(Boa,"pretrained_model_name_or_path"),Boa.forEach(t),Rlt=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xLe=n(ay,"CODE",{});var Ioa=s(xLe);Plt=r(Ioa,"pretrained_model_name_or_path"),Ioa.forEach(t),Blt=r(ay,":"),ay.forEach(t),Ilt=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);cw=n(Co,"LI",{});var IQe=s(cw);$Le=n(IQe,"STRONG",{});var Noa=s($Le);Nlt=r(Noa,"albert"),Noa.forEach(t),qlt=r(IQe," \u2014 "),pae=n(IQe,"A",{href:!0});var qoa=s(pae);jlt=r(qoa,"FlaxAlbertForTokenClassification"),qoa.forEach(t),Dlt=r(IQe," (ALBERT model)"),IQe.forEach(t),Glt=i(Co),fw=n(Co,"LI",{});var NQe=s(fw);kLe=n(NQe,"STRONG",{});var joa=s(kLe);Olt=r(joa,"bert"),joa.forEach(t),Vlt=r(NQe," \u2014 "),_ae=n(NQe,"A",{href:!0});var Doa=s(_ae);Xlt=r(Doa,"FlaxBertForTokenClassification"),Doa.forEach(t),zlt=r(NQe," (BERT model)"),NQe.forEach(t),Wlt=i(Co),mw=n(Co,"LI",{});var qQe=s(mw);SLe=n(qQe,"STRONG",{});var Goa=s(SLe);Qlt=r(Goa,"big_bird"),Goa.forEach(t),Ult=r(qQe," \u2014 "),uae=n(qQe,"A",{href:!0});var Ooa=s(uae);Hlt=r(Ooa,"FlaxBigBirdForTokenClassification"),Ooa.forEach(t),Jlt=r(qQe," (BigBird model)"),qQe.forEach(t),Ylt=i(Co),gw=n(Co,"LI",{});var jQe=s(gw);RLe=n(jQe,"STRONG",{});var Voa=s(RLe);Klt=r(Voa,"distilbert"),Voa.forEach(t),Zlt=r(jQe," \u2014 "),bae=n(jQe,"A",{href:!0});var Xoa=s(bae);eit=r(Xoa,"FlaxDistilBertForTokenClassification"),Xoa.forEach(t),oit=r(jQe," (DistilBERT model)"),jQe.forEach(t),rit=i(Co),hw=n(Co,"LI",{});var DQe=s(hw);PLe=n(DQe,"STRONG",{});var zoa=s(PLe);tit=r(zoa,"electra"),zoa.forEach(t),ait=r(DQe," \u2014 "),vae=n(DQe,"A",{href:!0});var Woa=s(vae);nit=r(Woa,"FlaxElectraForTokenClassification"),Woa.forEach(t),sit=r(DQe," (ELECTRA model)"),DQe.forEach(t),lit=i(Co),pw=n(Co,"LI",{});var GQe=s(pw);BLe=n(GQe,"STRONG",{});var Qoa=s(BLe);iit=r(Qoa,"roberta"),Qoa.forEach(t),dit=r(GQe," \u2014 "),Fae=n(GQe,"A",{href:!0});var Uoa=s(Fae);cit=r(Uoa,"FlaxRobertaForTokenClassification"),Uoa.forEach(t),fit=r(GQe," (RoBERTa model)"),GQe.forEach(t),mit=i(Co),_w=n(Co,"LI",{});var OQe=s(_w);ILe=n(OQe,"STRONG",{});var Hoa=s(ILe);git=r(Hoa,"roformer"),Hoa.forEach(t),hit=r(OQe," \u2014 "),Tae=n(OQe,"A",{href:!0});var Joa=s(Tae);pit=r(Joa,"FlaxRoFormerForTokenClassification"),Joa.forEach(t),_it=r(OQe," (RoFormer model)"),OQe.forEach(t),uit=i(Co),uw=n(Co,"LI",{});var VQe=s(uw);NLe=n(VQe,"STRONG",{});var Yoa=s(NLe);bit=r(Yoa,"xlm-roberta"),Yoa.forEach(t),vit=r(VQe," \u2014 "),Mae=n(VQe,"A",{href:!0});var Koa=s(Mae);Fit=r(Koa,"FlaxXLMRobertaForTokenClassification"),Koa.forEach(t),Tit=r(VQe," (XLM-RoBERTa model)"),VQe.forEach(t),Co.forEach(t),Mit=i(Ri),T(bw.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),tJe=i(f),jf=n(f,"H2",{class:!0});var uKe=s(jf);vw=n(uKe,"A",{id:!0,class:!0,href:!0});var Zoa=s(vw);qLe=n(Zoa,"SPAN",{});var era=s(qLe);T(uS.$$.fragment,era),era.forEach(t),Zoa.forEach(t),Eit=i(uKe),jLe=n(uKe,"SPAN",{});var ora=s(jLe);Cit=r(ora,"FlaxAutoModelForMultipleChoice"),ora.forEach(t),uKe.forEach(t),aJe=i(f),Lr=n(f,"DIV",{class:!0});var Pi=s(Lr);T(bS.$$.fragment,Pi),wit=i(Pi),Df=n(Pi,"P",{});var Ise=s(Df);Ait=r(Ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Eae=n(Ise,"A",{href:!0});var rra=s(Eae);Lit=r(rra,"from_pretrained()"),rra.forEach(t),yit=r(Ise," class method or the "),Cae=n(Ise,"A",{href:!0});var tra=s(Cae);xit=r(tra,"from_config()"),tra.forEach(t),$it=r(Ise,` class
method.`),Ise.forEach(t),kit=i(Pi),vS=n(Pi,"P",{});var bKe=s(vS);Sit=r(bKe,"This class cannot be instantiated directly using "),DLe=n(bKe,"CODE",{});var ara=s(DLe);Rit=r(ara,"__init__()"),ara.forEach(t),Pit=r(bKe," (throws an error)."),bKe.forEach(t),Bit=i(Pi),la=n(Pi,"DIV",{class:!0});var ny=s(la);T(FS.$$.fragment,ny),Iit=i(ny),GLe=n(ny,"P",{});var nra=s(GLe);Nit=r(nra,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nra.forEach(t),qit=i(ny),Gf=n(ny,"P",{});var Nse=s(Gf);jit=r(Nse,`Note:
Loading a model from its configuration file does `),OLe=n(Nse,"STRONG",{});var sra=s(OLe);Dit=r(sra,"not"),sra.forEach(t),Git=r(Nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),wae=n(Nse,"A",{href:!0});var lra=s(wae);Oit=r(lra,"from_pretrained()"),lra.forEach(t),Vit=r(Nse," to load the model weights."),Nse.forEach(t),Xit=i(ny),T(Fw.$$.fragment,ny),ny.forEach(t),zit=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(TS.$$.fragment,Bi),Wit=i(Bi),VLe=n(Bi,"P",{});var ira=s(VLe);Qit=r(ira,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ira.forEach(t),Uit=i(Bi),jn=n(Bi,"P",{});var sy=s(jn);Hit=r(sy,"The model class to instantiate is selected based on the "),XLe=n(sy,"CODE",{});var dra=s(XLe);Jit=r(dra,"model_type"),dra.forEach(t),Yit=r(sy,` property of the config object (either
passed as an argument or loaded from `),zLe=n(sy,"CODE",{});var cra=s(zLe);Kit=r(cra,"pretrained_model_name_or_path"),cra.forEach(t),Zit=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WLe=n(sy,"CODE",{});var fra=s(WLe);edt=r(fra,"pretrained_model_name_or_path"),fra.forEach(t),odt=r(sy,":"),sy.forEach(t),rdt=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);Tw=n(wo,"LI",{});var XQe=s(Tw);QLe=n(XQe,"STRONG",{});var mra=s(QLe);tdt=r(mra,"albert"),mra.forEach(t),adt=r(XQe," \u2014 "),Aae=n(XQe,"A",{href:!0});var gra=s(Aae);ndt=r(gra,"FlaxAlbertForMultipleChoice"),gra.forEach(t),sdt=r(XQe," (ALBERT model)"),XQe.forEach(t),ldt=i(wo),Mw=n(wo,"LI",{});var zQe=s(Mw);ULe=n(zQe,"STRONG",{});var hra=s(ULe);idt=r(hra,"bert"),hra.forEach(t),ddt=r(zQe," \u2014 "),Lae=n(zQe,"A",{href:!0});var pra=s(Lae);cdt=r(pra,"FlaxBertForMultipleChoice"),pra.forEach(t),fdt=r(zQe," (BERT model)"),zQe.forEach(t),mdt=i(wo),Ew=n(wo,"LI",{});var WQe=s(Ew);HLe=n(WQe,"STRONG",{});var _ra=s(HLe);gdt=r(_ra,"big_bird"),_ra.forEach(t),hdt=r(WQe," \u2014 "),yae=n(WQe,"A",{href:!0});var ura=s(yae);pdt=r(ura,"FlaxBigBirdForMultipleChoice"),ura.forEach(t),_dt=r(WQe," (BigBird model)"),WQe.forEach(t),udt=i(wo),Cw=n(wo,"LI",{});var QQe=s(Cw);JLe=n(QQe,"STRONG",{});var bra=s(JLe);bdt=r(bra,"distilbert"),bra.forEach(t),vdt=r(QQe," \u2014 "),xae=n(QQe,"A",{href:!0});var vra=s(xae);Fdt=r(vra,"FlaxDistilBertForMultipleChoice"),vra.forEach(t),Tdt=r(QQe," (DistilBERT model)"),QQe.forEach(t),Mdt=i(wo),ww=n(wo,"LI",{});var UQe=s(ww);YLe=n(UQe,"STRONG",{});var Fra=s(YLe);Edt=r(Fra,"electra"),Fra.forEach(t),Cdt=r(UQe," \u2014 "),$ae=n(UQe,"A",{href:!0});var Tra=s($ae);wdt=r(Tra,"FlaxElectraForMultipleChoice"),Tra.forEach(t),Adt=r(UQe," (ELECTRA model)"),UQe.forEach(t),Ldt=i(wo),Aw=n(wo,"LI",{});var HQe=s(Aw);KLe=n(HQe,"STRONG",{});var Mra=s(KLe);ydt=r(Mra,"roberta"),Mra.forEach(t),xdt=r(HQe," \u2014 "),kae=n(HQe,"A",{href:!0});var Era=s(kae);$dt=r(Era,"FlaxRobertaForMultipleChoice"),Era.forEach(t),kdt=r(HQe," (RoBERTa model)"),HQe.forEach(t),Sdt=i(wo),Lw=n(wo,"LI",{});var JQe=s(Lw);ZLe=n(JQe,"STRONG",{});var Cra=s(ZLe);Rdt=r(Cra,"roformer"),Cra.forEach(t),Pdt=r(JQe," \u2014 "),Sae=n(JQe,"A",{href:!0});var wra=s(Sae);Bdt=r(wra,"FlaxRoFormerForMultipleChoice"),wra.forEach(t),Idt=r(JQe," (RoFormer model)"),JQe.forEach(t),Ndt=i(wo),yw=n(wo,"LI",{});var YQe=s(yw);eye=n(YQe,"STRONG",{});var Ara=s(eye);qdt=r(Ara,"xlm-roberta"),Ara.forEach(t),jdt=r(YQe," \u2014 "),Rae=n(YQe,"A",{href:!0});var Lra=s(Rae);Ddt=r(Lra,"FlaxXLMRobertaForMultipleChoice"),Lra.forEach(t),Gdt=r(YQe," (XLM-RoBERTa model)"),YQe.forEach(t),wo.forEach(t),Odt=i(Bi),T(xw.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),nJe=i(f),Of=n(f,"H2",{class:!0});var vKe=s(Of);$w=n(vKe,"A",{id:!0,class:!0,href:!0});var yra=s($w);oye=n(yra,"SPAN",{});var xra=s(oye);T(MS.$$.fragment,xra),xra.forEach(t),yra.forEach(t),Vdt=i(vKe),rye=n(vKe,"SPAN",{});var $ra=s(rye);Xdt=r($ra,"FlaxAutoModelForNextSentencePrediction"),$ra.forEach(t),vKe.forEach(t),sJe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(ES.$$.fragment,Ii),zdt=i(Ii),Vf=n(Ii,"P",{});var qse=s(Vf);Wdt=r(qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pae=n(qse,"A",{href:!0});var kra=s(Pae);Qdt=r(kra,"from_pretrained()"),kra.forEach(t),Udt=r(qse," class method or the "),Bae=n(qse,"A",{href:!0});var Sra=s(Bae);Hdt=r(Sra,"from_config()"),Sra.forEach(t),Jdt=r(qse,` class
method.`),qse.forEach(t),Ydt=i(Ii),CS=n(Ii,"P",{});var FKe=s(CS);Kdt=r(FKe,"This class cannot be instantiated directly using "),tye=n(FKe,"CODE",{});var Rra=s(tye);Zdt=r(Rra,"__init__()"),Rra.forEach(t),ect=r(FKe," (throws an error)."),FKe.forEach(t),oct=i(Ii),ia=n(Ii,"DIV",{class:!0});var ly=s(ia);T(wS.$$.fragment,ly),rct=i(ly),aye=n(ly,"P",{});var Pra=s(aye);tct=r(Pra,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Pra.forEach(t),act=i(ly),Xf=n(ly,"P",{});var jse=s(Xf);nct=r(jse,`Note:
Loading a model from its configuration file does `),nye=n(jse,"STRONG",{});var Bra=s(nye);sct=r(Bra,"not"),Bra.forEach(t),lct=r(jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iae=n(jse,"A",{href:!0});var Ira=s(Iae);ict=r(Ira,"from_pretrained()"),Ira.forEach(t),dct=r(jse," to load the model weights."),jse.forEach(t),cct=i(ly),T(kw.$$.fragment,ly),ly.forEach(t),fct=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(AS.$$.fragment,Ni),mct=i(Ni),sye=n(Ni,"P",{});var Nra=s(sye);gct=r(Nra,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nra.forEach(t),hct=i(Ni),Dn=n(Ni,"P",{});var iy=s(Dn);pct=r(iy,"The model class to instantiate is selected based on the "),lye=n(iy,"CODE",{});var qra=s(lye);_ct=r(qra,"model_type"),qra.forEach(t),uct=r(iy,` property of the config object (either
passed as an argument or loaded from `),iye=n(iy,"CODE",{});var jra=s(iye);bct=r(jra,"pretrained_model_name_or_path"),jra.forEach(t),vct=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dye=n(iy,"CODE",{});var Dra=s(dye);Fct=r(Dra,"pretrained_model_name_or_path"),Dra.forEach(t),Tct=r(iy,":"),iy.forEach(t),Mct=i(Ni),cye=n(Ni,"UL",{});var Gra=s(cye);Sw=n(Gra,"LI",{});var KQe=s(Sw);fye=n(KQe,"STRONG",{});var Ora=s(fye);Ect=r(Ora,"bert"),Ora.forEach(t),Cct=r(KQe," \u2014 "),Nae=n(KQe,"A",{href:!0});var Vra=s(Nae);wct=r(Vra,"FlaxBertForNextSentencePrediction"),Vra.forEach(t),Act=r(KQe," (BERT model)"),KQe.forEach(t),Gra.forEach(t),Lct=i(Ni),T(Rw.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),lJe=i(f),zf=n(f,"H2",{class:!0});var TKe=s(zf);Pw=n(TKe,"A",{id:!0,class:!0,href:!0});var Xra=s(Pw);mye=n(Xra,"SPAN",{});var zra=s(mye);T(LS.$$.fragment,zra),zra.forEach(t),Xra.forEach(t),yct=i(TKe),gye=n(TKe,"SPAN",{});var Wra=s(gye);xct=r(Wra,"FlaxAutoModelForImageClassification"),Wra.forEach(t),TKe.forEach(t),iJe=i(f),xr=n(f,"DIV",{class:!0});var qi=s(xr);T(yS.$$.fragment,qi),$ct=i(qi),Wf=n(qi,"P",{});var Dse=s(Wf);kct=r(Dse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qae=n(Dse,"A",{href:!0});var Qra=s(qae);Sct=r(Qra,"from_pretrained()"),Qra.forEach(t),Rct=r(Dse," class method or the "),jae=n(Dse,"A",{href:!0});var Ura=s(jae);Pct=r(Ura,"from_config()"),Ura.forEach(t),Bct=r(Dse,` class
method.`),Dse.forEach(t),Ict=i(qi),xS=n(qi,"P",{});var MKe=s(xS);Nct=r(MKe,"This class cannot be instantiated directly using "),hye=n(MKe,"CODE",{});var Hra=s(hye);qct=r(Hra,"__init__()"),Hra.forEach(t),jct=r(MKe," (throws an error)."),MKe.forEach(t),Dct=i(qi),da=n(qi,"DIV",{class:!0});var dy=s(da);T($S.$$.fragment,dy),Gct=i(dy),pye=n(dy,"P",{});var Jra=s(pye);Oct=r(Jra,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jra.forEach(t),Vct=i(dy),Qf=n(dy,"P",{});var Gse=s(Qf);Xct=r(Gse,`Note:
Loading a model from its configuration file does `),_ye=n(Gse,"STRONG",{});var Yra=s(_ye);zct=r(Yra,"not"),Yra.forEach(t),Wct=r(Gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dae=n(Gse,"A",{href:!0});var Kra=s(Dae);Qct=r(Kra,"from_pretrained()"),Kra.forEach(t),Uct=r(Gse," to load the model weights."),Gse.forEach(t),Hct=i(dy),T(Bw.$$.fragment,dy),dy.forEach(t),Jct=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(kS.$$.fragment,ji),Yct=i(ji),uye=n(ji,"P",{});var Zra=s(uye);Kct=r(Zra,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zra.forEach(t),Zct=i(ji),Gn=n(ji,"P",{});var cy=s(Gn);eft=r(cy,"The model class to instantiate is selected based on the "),bye=n(cy,"CODE",{});var eta=s(bye);oft=r(eta,"model_type"),eta.forEach(t),rft=r(cy,` property of the config object (either
passed as an argument or loaded from `),vye=n(cy,"CODE",{});var ota=s(vye);tft=r(ota,"pretrained_model_name_or_path"),ota.forEach(t),aft=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fye=n(cy,"CODE",{});var rta=s(Fye);nft=r(rta,"pretrained_model_name_or_path"),rta.forEach(t),sft=r(cy,":"),cy.forEach(t),lft=i(ji),SS=n(ji,"UL",{});var EKe=s(SS);Iw=n(EKe,"LI",{});var ZQe=s(Iw);Tye=n(ZQe,"STRONG",{});var tta=s(Tye);ift=r(tta,"beit"),tta.forEach(t),dft=r(ZQe," \u2014 "),Gae=n(ZQe,"A",{href:!0});var ata=s(Gae);cft=r(ata,"FlaxBeitForImageClassification"),ata.forEach(t),fft=r(ZQe," (BEiT model)"),ZQe.forEach(t),mft=i(EKe),Nw=n(EKe,"LI",{});var eUe=s(Nw);Mye=n(eUe,"STRONG",{});var nta=s(Mye);gft=r(nta,"vit"),nta.forEach(t),hft=r(eUe," \u2014 "),Oae=n(eUe,"A",{href:!0});var sta=s(Oae);pft=r(sta,"FlaxViTForImageClassification"),sta.forEach(t),_ft=r(eUe," (ViT model)"),eUe.forEach(t),EKe.forEach(t),uft=i(ji),T(qw.$$.fragment,ji),ji.forEach(t),qi.forEach(t),dJe=i(f),Uf=n(f,"H2",{class:!0});var CKe=s(Uf);jw=n(CKe,"A",{id:!0,class:!0,href:!0});var lta=s(jw);Eye=n(lta,"SPAN",{});var ita=s(Eye);T(RS.$$.fragment,ita),ita.forEach(t),lta.forEach(t),bft=i(CKe),Cye=n(CKe,"SPAN",{});var dta=s(Cye);vft=r(dta,"FlaxAutoModelForVision2Seq"),dta.forEach(t),CKe.forEach(t),cJe=i(f),$r=n(f,"DIV",{class:!0});var Di=s($r);T(PS.$$.fragment,Di),Fft=i(Di),Hf=n(Di,"P",{});var Ose=s(Hf);Tft=r(Ose,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Vae=n(Ose,"A",{href:!0});var cta=s(Vae);Mft=r(cta,"from_pretrained()"),cta.forEach(t),Eft=r(Ose," class method or the "),Xae=n(Ose,"A",{href:!0});var fta=s(Xae);Cft=r(fta,"from_config()"),fta.forEach(t),wft=r(Ose,` class
method.`),Ose.forEach(t),Aft=i(Di),BS=n(Di,"P",{});var wKe=s(BS);Lft=r(wKe,"This class cannot be instantiated directly using "),wye=n(wKe,"CODE",{});var mta=s(wye);yft=r(mta,"__init__()"),mta.forEach(t),xft=r(wKe," (throws an error)."),wKe.forEach(t),$ft=i(Di),ca=n(Di,"DIV",{class:!0});var fy=s(ca);T(IS.$$.fragment,fy),kft=i(fy),Aye=n(fy,"P",{});var gta=s(Aye);Sft=r(gta,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gta.forEach(t),Rft=i(fy),Jf=n(fy,"P",{});var Vse=s(Jf);Pft=r(Vse,`Note:
Loading a model from its configuration file does `),Lye=n(Vse,"STRONG",{});var hta=s(Lye);Bft=r(hta,"not"),hta.forEach(t),Ift=r(Vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),zae=n(Vse,"A",{href:!0});var pta=s(zae);Nft=r(pta,"from_pretrained()"),pta.forEach(t),qft=r(Vse," to load the model weights."),Vse.forEach(t),jft=i(fy),T(Dw.$$.fragment,fy),fy.forEach(t),Dft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(NS.$$.fragment,Gi),Gft=i(Gi),yye=n(Gi,"P",{});var _ta=s(yye);Oft=r(_ta,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_ta.forEach(t),Vft=i(Gi),On=n(Gi,"P",{});var my=s(On);Xft=r(my,"The model class to instantiate is selected based on the "),xye=n(my,"CODE",{});var uta=s(xye);zft=r(uta,"model_type"),uta.forEach(t),Wft=r(my,` property of the config object (either
passed as an argument or loaded from `),$ye=n(my,"CODE",{});var bta=s($ye);Qft=r(bta,"pretrained_model_name_or_path"),bta.forEach(t),Uft=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kye=n(my,"CODE",{});var vta=s(kye);Hft=r(vta,"pretrained_model_name_or_path"),vta.forEach(t),Jft=r(my,":"),my.forEach(t),Yft=i(Gi),Sye=n(Gi,"UL",{});var Fta=s(Sye);Gw=n(Fta,"LI",{});var oUe=s(Gw);Rye=n(oUe,"STRONG",{});var Tta=s(Rye);Kft=r(Tta,"vision-encoder-decoder"),Tta.forEach(t),Zft=r(oUe," \u2014 "),Wae=n(oUe,"A",{href:!0});var Mta=s(Wae);emt=r(Mta,"FlaxVisionEncoderDecoderModel"),Mta.forEach(t),omt=r(oUe," (Vision Encoder decoder model)"),oUe.forEach(t),Fta.forEach(t),rmt=i(Gi),T(Ow.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Sna)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertModel"),c(am,"id","extending-the-auto-classes"),c(am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(am,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sm,"id","transformers.AutoConfig"),c(sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sm,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(gP,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(hP,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertConfig"),c(pP,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartConfig"),c(_P,"href","/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitConfig"),c(uP,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertConfig"),c(bP,"href","/docs/transformers/pr_18678/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(vP,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdConfig"),c(FP,"href","/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(TP,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(MP,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(EP,"href","/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomConfig"),c(CP,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertConfig"),c(wP,"href","/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineConfig"),c(AP,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPConfig"),c(LP,"href","/docs/transformers/pr_18678/en/model_doc/codegen#transformers.CodeGenConfig"),c(yP,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertConfig"),c(xP,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextConfig"),c($P,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLConfig"),c(kP,"href","/docs/transformers/pr_18678/en/model_doc/cvt#transformers.CvtConfig"),c(SP,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(RP,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(PP,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(BP,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaConfig"),c(IP,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(NP,"href","/docs/transformers/pr_18678/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(qP,"href","/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTConfig"),c(jP,"href","/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrConfig"),c(DP,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertConfig"),c(GP,"href","/docs/transformers/pr_18678/en/model_doc/donut#transformers.DonutSwinConfig"),c(OP,"href","/docs/transformers/pr_18678/en/model_doc/dpr#transformers.DPRConfig"),c(VP,"href","/docs/transformers/pr_18678/en/model_doc/dpt#transformers.DPTConfig"),c(XP,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraConfig"),c(zP,"href","/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(WP,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertConfig"),c(QP,"href","/docs/transformers/pr_18678/en/model_doc/flava#transformers.FlavaConfig"),c(UP,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetConfig"),c(HP,"href","/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTConfig"),c(JP,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelConfig"),c(YP,"href","/docs/transformers/pr_18678/en/model_doc/glpn#transformers.GLPNConfig"),c(KP,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Config"),c(ZP,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(eB,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(oB,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJConfig"),c(rB,"href","/docs/transformers/pr_18678/en/model_doc/groupvit#transformers.GroupViTConfig"),c(tB,"href","/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertConfig"),c(aB,"href","/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertConfig"),c(nB,"href","/docs/transformers/pr_18678/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(sB,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(lB,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(iB,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(dB,"href","/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDConfig"),c(cB,"href","/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitConfig"),c(fB,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerConfig"),c(mB,"href","/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5Config"),c(gB,"href","/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeConfig"),c(hB,"href","/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertConfig"),c(pB,"href","/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100Config"),c(_B,"href","/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianConfig"),c(uB,"href","/docs/transformers/pr_18678/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(bB,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartConfig"),c(vB,"href","/docs/transformers/pr_18678/en/model_doc/mctct#transformers.MCTCTConfig"),c(FB,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(TB,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(MB,"href","/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(EB,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetConfig"),c(CB,"href","/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Config"),c(wB,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpConfig"),c(AB,"href","/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaConfig"),c(LB,"href","/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(yB,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(xB,"href","/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTConfig"),c($B,"href","/docs/transformers/pr_18678/en/model_doc/owlvit#transformers.OwlViTConfig"),c(kB,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusConfig"),c(SB,"href","/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverConfig"),c(RB,"href","/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartConfig"),c(PB,"href","/docs/transformers/pr_18678/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(BB,"href","/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(IB,"href","/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(NB,"href","/docs/transformers/pr_18678/en/model_doc/rag#transformers.RagConfig"),c(qB,"href","/docs/transformers/pr_18678/en/model_doc/realm#transformers.RealmConfig"),c(jB,"href","/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerConfig"),c(DB,"href","/docs/transformers/pr_18678/en/model_doc/regnet#transformers.RegNetConfig"),c(GB,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertConfig"),c(OB,"href","/docs/transformers/pr_18678/en/model_doc/resnet#transformers.ResNetConfig"),c(VB,"href","/docs/transformers/pr_18678/en/model_doc/retribert#transformers.RetriBertConfig"),c(XB,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaConfig"),c(zB,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerConfig"),c(WB,"href","/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerConfig"),c(QB,"href","/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWConfig"),c(UB,"href","/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDConfig"),c(HB,"href","/docs/transformers/pr_18678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(JB,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(YB,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(KB,"href","/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterConfig"),c(ZB,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(eI,"href","/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinConfig"),c(oI,"href","/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2Config"),c(rI,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Config"),c(tI,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasConfig"),c(aI,"href","/docs/transformers/pr_18678/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(nI,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(sI,"href","/docs/transformers/pr_18678/en/model_doc/trocr#transformers.TrOCRConfig"),c(lI,"href","/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(iI,"href","/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(dI,"href","/docs/transformers/pr_18678/en/model_doc/van#transformers.VanConfig"),c(cI,"href","/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEConfig"),c(fI,"href","/docs/transformers/pr_18678/en/model_doc/vilt#transformers.ViltConfig"),c(mI,"href","/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(gI,"href","/docs/transformers/pr_18678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(hI,"href","/docs/transformers/pr_18678/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(pI,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTConfig"),c(_I,"href","/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(uI,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(bI,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(vI,"href","/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMConfig"),c(FI,"href","/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMConfig"),c(TI,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMConfig"),c(MI,"href","/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(EI,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(CI,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wI,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetConfig"),c(AI,"href","/docs/transformers/pr_18678/en/model_doc/yolos#transformers.YolosConfig"),c(LI,"href","/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoTokenizer"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(yI,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(xI,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertTokenizer"),c($I,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kI,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartTokenizer"),c(SI,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartTokenizerFast"),c(RI,"href","/docs/transformers/pr_18678/en/model_doc/barthez#transformers.BarthezTokenizer"),c(PI,"href","/docs/transformers/pr_18678/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(BI,"href","/docs/transformers/pr_18678/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(II,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizer"),c(NI,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizerFast"),c(qI,"href","/docs/transformers/pr_18678/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jI,"href","/docs/transformers/pr_18678/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(DI,"href","/docs/transformers/pr_18678/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(GI,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(OI,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(VI,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XI,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zI,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(WI,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(QI,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(UI,"href","/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(HI,"href","/docs/transformers/pr_18678/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(JI,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertTokenizer"),c(YI,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(KI,"href","/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineTokenizer"),c(ZI,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPTokenizer"),c(eN,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oN,"href","/docs/transformers/pr_18678/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(rN,"href","/docs/transformers/pr_18678/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(tN,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(aN,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nN,"href","/docs/transformers/pr_18678/en/model_doc/cpm#transformers.CpmTokenizer"),c(sN,"href","/docs/transformers/pr_18678/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(lN,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iN,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dN,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cN,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaTokenizer"),c(fN,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(mN,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(gN,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(hN,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(pN,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(_N,"href","/docs/transformers/pr_18678/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(uN,"href","/docs/transformers/pr_18678/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(bN,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraTokenizer"),c(vN,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(FN,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(TN,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetTokenizer"),c(MN,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(EN,"href","/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(CN,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelTokenizer"),c(wN,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(AN,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LN,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yN,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xN,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($N,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(kN,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SN,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(RN,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPTokenizer"),c(PN,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(BN,"href","/docs/transformers/pr_18678/en/model_doc/herbert#transformers.HerbertTokenizer"),c(IN,"href","/docs/transformers/pr_18678/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(NN,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qN,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jN,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DN,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(GN,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(ON,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(VN,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(XN,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(zN,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(WN,"href","/docs/transformers/pr_18678/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(QN,"href","/docs/transformers/pr_18678/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(UN,"href","/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDTokenizer"),c(HN,"href","/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDTokenizerFast"),c(JN,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerTokenizer"),c(YN,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(KN,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Tokenizer"),c(ZN,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5TokenizerFast"),c(eq,"href","/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeTokenizer"),c(oq,"href","/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(rq,"href","/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(tq,"href","/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(aq,"href","/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianTokenizer"),c(nq,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartTokenizer"),c(sq,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(lq,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(iq,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(dq,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizer"),c(cq,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizerFast"),c(fq,"href","/docs/transformers/pr_18678/en/model_doc/mluke#transformers.MLukeTokenizer"),c(mq,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(gq,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(hq,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(pq,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(_q,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Tokenizer"),c(uq,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5TokenizerFast"),c(bq,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpTokenizer"),c(vq,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(Fq,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizer"),c(Tq,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizerFast"),c(Mq,"href","/docs/transformers/pr_18678/en/model_doc/nllb#transformers.NllbTokenizer"),c(Eq,"href","/docs/transformers/pr_18678/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Cq,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertTokenizer"),c(wq,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Aq,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Lq,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(yq,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xq,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPTokenizer"),c($q,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kq,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Sq,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Rq,"href","/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Pq,"href","/docs/transformers/pr_18678/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Bq,"href","/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Iq,"href","/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Nq,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizer"),c(qq,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizerFast"),c(jq,"href","/docs/transformers/pr_18678/en/model_doc/rag#transformers.RagTokenizer"),c(Dq,"href","/docs/transformers/pr_18678/en/model_doc/realm#transformers.RealmTokenizer"),c(Gq,"href","/docs/transformers/pr_18678/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Oq,"href","/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Vq,"href","/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Xq,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertTokenizer"),c(zq,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Wq,"href","/docs/transformers/pr_18678/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Qq,"href","/docs/transformers/pr_18678/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Uq,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Hq,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Jq,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Yq,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Kq,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Zq,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(ej,"href","/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterTokenizer"),c(oj,"href","/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(rj,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(tj,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(aj,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Tokenizer"),c(nj,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5TokenizerFast"),c(sj,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasTokenizer"),c(lj,"href","/docs/transformers/pr_18678/en/model_doc/tapex#transformers.TapexTokenizer"),c(ij,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(dj,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizer"),c(cj,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizerFast"),c(fj,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizer"),c(mj,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertTokenizerFast"),c(gj,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hj,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pj,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(_j,"href","/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMTokenizer"),c(uj,"href","/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(bj,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMTokenizer"),c(vj,"href","/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Fj,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Tj,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Mj,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Ej,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Cj,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(wj,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Aj,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertTokenizer"),c(Lj,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoFeatureExtractor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(yj,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(xj,"href","/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitFeatureExtractor"),c($j,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(kj,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Sj,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Rj,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Pj,"href","/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Bj,"href","/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Ij,"href","/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_18678/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(qj,"href","/docs/transformers/pr_18678/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(jj,"href","/docs/transformers/pr_18678/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(Dj,"href","/docs/transformers/pr_18678/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Gj,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Oj,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Vj,"href","/docs/transformers/pr_18678/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Xj,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(zj,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Wj,"href","/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Qj,"href","/docs/transformers/pr_18678/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Uj,"href","/docs/transformers/pr_18678/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18678/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18678/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eD,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oD,"href","/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lD,"href","/docs/transformers/pr_18678/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(iD,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dD,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cD,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fD,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mD,"href","/docs/transformers/pr_18678/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"id","transformers.AutoProcessor"),c(Qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qp,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(gD,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(hD,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPProcessor"),c(pD,"href","/docs/transformers/pr_18678/en/model_doc/donut#transformers.DonutProcessor"),c(_D,"href","/docs/transformers/pr_18678/en/model_doc/flava#transformers.FlavaProcessor"),c(uD,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPProcessor"),c(bD,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(vD,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(FD,"href","/docs/transformers/pr_18678/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(TD,"href","/docs/transformers/pr_18678/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(MD,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ED,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CD,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(wD,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(AD,"href","/docs/transformers/pr_18678/en/model_doc/trocr#transformers.TrOCRProcessor"),c(LD,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yD,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xD,"href","/docs/transformers/pr_18678/en/model_doc/vilt#transformers.ViltProcessor"),c($D,"href","/docs/transformers/pr_18678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(kD,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SD,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RD,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u_,"id","transformers.AutoModel"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(PD,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BD,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ID,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ND,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertModel"),c(qD,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartModel"),c(jD,"href","/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitModel"),c(DD,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertModel"),c(GD,"href","/docs/transformers/pr_18678/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(OD,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdModel"),c(VD,"href","/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(XD,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(zD,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(WD,"href","/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomModel"),c(QD,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertModel"),c(UD,"href","/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineModel"),c(HD,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.CLIPModel"),c(JD,"href","/docs/transformers/pr_18678/en/model_doc/codegen#transformers.CodeGenModel"),c(YD,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertModel"),c(KD,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextModel"),c(ZD,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLModel"),c(eG,"href","/docs/transformers/pr_18678/en/model_doc/cvt#transformers.CvtModel"),c(oG,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(rG,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(tG,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(aG,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaModel"),c(nG,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(sG,"href","/docs/transformers/pr_18678/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(lG,"href","/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTModel"),c(iG,"href","/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrModel"),c(dG,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertModel"),c(cG,"href","/docs/transformers/pr_18678/en/model_doc/donut#transformers.DonutSwinModel"),c(fG,"href","/docs/transformers/pr_18678/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(mG,"href","/docs/transformers/pr_18678/en/model_doc/dpt#transformers.DPTModel"),c(gG,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraModel"),c(hG,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertModel"),c(pG,"href","/docs/transformers/pr_18678/en/model_doc/flava#transformers.FlavaModel"),c(_G,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetModel"),c(uG,"href","/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTModel"),c(bG,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelModel"),c(vG,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelBaseModel"),c(FG,"href","/docs/transformers/pr_18678/en/model_doc/glpn#transformers.GLPNModel"),c(TG,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2Model"),c(MG,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(EG,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(CG,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJModel"),c(wG,"href","/docs/transformers/pr_18678/en/model_doc/groupvit#transformers.GroupViTModel"),c(AG,"href","/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertModel"),c(LG,"href","/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertModel"),c(yG,"href","/docs/transformers/pr_18678/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(xG,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMModel"),c($G,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(kG,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(SG,"href","/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDModel"),c(RG,"href","/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitModel"),c(PG,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerModel"),c(BG,"href","/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5Model"),c(IG,"href","/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeModel"),c(NG,"href","/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertModel"),c(qG,"href","/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100Model"),c(jG,"href","/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianModel"),c(DG,"href","/docs/transformers/pr_18678/en/model_doc/maskformer#transformers.MaskFormerModel"),c(GG,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartModel"),c(OG,"href","/docs/transformers/pr_18678/en/model_doc/mctct#transformers.MCTCTModel"),c(VG,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(XG,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zG,"href","/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTModel"),c(WG,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetModel"),c(QG,"href","/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5Model"),c(UG,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpModel"),c(HG,"href","/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaModel"),c(JG,"href","/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100Model"),c(YG,"href","/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerModel"),c(KG,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ZG,"href","/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTModel"),c(eO,"href","/docs/transformers/pr_18678/en/model_doc/owlvit#transformers.OwlViTModel"),c(oO,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusModel"),c(rO,"href","/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverModel"),c(tO,"href","/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartModel"),c(aO,"href","/docs/transformers/pr_18678/en/model_doc/poolformer#transformers.PoolFormerModel"),c(nO,"href","/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(sO,"href","/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertModel"),c(lO,"href","/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerModel"),c(iO,"href","/docs/transformers/pr_18678/en/model_doc/regnet#transformers.RegNetModel"),c(dO,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertModel"),c(cO,"href","/docs/transformers/pr_18678/en/model_doc/resnet#transformers.ResNetModel"),c(fO,"href","/docs/transformers/pr_18678/en/model_doc/retribert#transformers.RetriBertModel"),c(mO,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaModel"),c(gO,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerModel"),c(hO,"href","/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerModel"),c(pO,"href","/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWModel"),c(_O,"href","/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDModel"),c(uO,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(bO,"href","/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterModel"),c(vO,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(FO,"href","/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinModel"),c(TO,"href","/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2Model"),c(MO,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5Model"),c(EO,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasModel"),c(CO,"href","/docs/transformers/pr_18678/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(wO,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(AO,"href","/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechModel"),c(LO,"href","/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(yO,"href","/docs/transformers/pr_18678/en/model_doc/van#transformers.VanModel"),c(xO,"href","/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEModel"),c($O,"href","/docs/transformers/pr_18678/en/model_doc/vilt#transformers.ViltModel"),c(kO,"href","/docs/transformers/pr_18678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(SO,"href","/docs/transformers/pr_18678/en/model_doc/visual_bert#transformers.VisualBertModel"),c(RO,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTModel"),c(PO,"href","/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(BO,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(IO,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(NO,"href","/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMModel"),c(qO,"href","/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMModel"),c(jO,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMModel"),c(DO,"href","/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(GO,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(OO,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(VO,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetModel"),c(XO,"href","/docs/transformers/pr_18678/en/model_doc/yolos#transformers.YolosModel"),c(zO,"href","/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForPreTraining"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(WO,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForPreTraining"),c(JO,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForPreTraining"),c(KO,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(ZO,"href","/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomForCausalLM"),c(eV,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(oV,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rV,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(tV,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(aV,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(nV,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(sV,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForPreTraining"),c(lV,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(iV,"href","/docs/transformers/pr_18678/en/model_doc/flava#transformers.FlavaForPreTraining"),c(dV,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForPreTraining"),c(cV,"href","/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(mV,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(gV,"href","/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hV,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pV,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_V,"href","/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForMaskedLM"),c(uV,"href","/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(bV,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(vV,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(FV,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(TV,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(MV,"href","/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(EV,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CV,"href","/docs/transformers/pr_18678/en/model_doc/retribert#transformers.RetriBertModel"),c(wV,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AV,"href","/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(LV,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(yV,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($V,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kV,"href","/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(SV,"href","/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(RV,"href","/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(PV,"href","/docs/transformers/pr_18678/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(BV,"href","/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(IV,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(NV,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(qV,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jV,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(DV,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(GV,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w8,"id","transformers.AutoModelForCausalLM"),c(w8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w8,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(OV,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForCausalLM"),c(WV,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertLMHeadModel"),c(QV,"href","/docs/transformers/pr_18678/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(UV,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(HV,"href","/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(JV,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(YV,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(KV,"href","/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomForCausalLM"),c(ZV,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(eX,"href","/docs/transformers/pr_18678/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(oX,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rX,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(tX,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForCausalLM"),c(aX,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nX,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(sX,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(lX,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(iX,"href","/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianForCausalLM"),c(dX,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForCausalLM"),c(cX,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(fX,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForCausalLM"),c(mX,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gX,"href","/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTForCausalLM"),c(hX,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(pX,"href","/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(_X,"href","/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(uX,"href","/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(bX,"href","/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(vX,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(FX,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(TX,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(MX,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(EX,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(CX,"href","/docs/transformers/pr_18678/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(wX,"href","/docs/transformers/pr_18678/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(AX,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LX,"href","/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(yX,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(xX,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c($X,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForMaskedLM"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForMaskedLM"),c(fd,"class","relative group"),c(kX,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PX,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(BX,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(IX,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForMaskedLM"),c(NX,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(qX,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jX,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(DX,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(GX,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(OX,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(VX,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(XX,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(zX,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(WX,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(QX,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(UX,"href","/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(HX,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(JX,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(YX,"href","/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForMaskedLM"),c(KX,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ZX,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ez,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(oz,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(rz,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(tz,"href","/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(az,"href","/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(nz,"href","/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(sz,"href","/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(lz,"href","/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(iz,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(dz,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(cz,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(fz,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(mz,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(gz,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(hz,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(pz,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_z,"href","/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForSeq2SeqLM"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(uz,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Tz,"href","/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(wz,"href","/docs/transformers/pr_18678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Lz,"href","/docs/transformers/pr_18678/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(xz,"href","/docs/transformers/pr_18678/en/model_doc/marian#transformers.MarianMTModel"),c($z,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_18678/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Sz,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Rz,"href","/docs/transformers/pr_18678/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Bz,"href","/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Iz,"href","/docs/transformers/pr_18678/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Nz,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qz,"href","/docs/transformers/pr_18678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSequenceClassification"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSequenceClassification"),c(ud,"class","relative group"),c(jz,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForSequenceClassification"),c(zz,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(sW,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(lW,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(iW,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(dW,"href","/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(cW,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(fW,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(mW,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(gW,"href","/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDForSequenceClassification"),c(hW,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(pW,"href","/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(_W,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(uW,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(vW,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(FW,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(TW,"href","/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(MW,"href","/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(EW,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(CW,"href","/docs/transformers/pr_18678/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(wW,"href","/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(AW,"href","/docs/transformers/pr_18678/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(LW,"href","/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(xW,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c($W,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(kW,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(SW,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(PW,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(BW,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(IW,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(NW,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(qW,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(jW,"href","/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForMultipleChoice"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(DW,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(XW,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForMultipleChoice"),c(zW,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(WW,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(QW,"href","/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(UW,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(HW,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(JW,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(YW,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(iQ,"href","/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(dQ,"href","/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(cQ,"href","/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(fQ,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(mQ,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(_Q,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(uQ,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(bQ,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(vQ,"href","/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForNextSentencePrediction"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(FQ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(CQ,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(wQ,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(AQ,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(LQ,"href","/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(yQ,"href","/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForTokenClassification"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(xQ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(RQ,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForTokenClassification"),c(PQ,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(BQ,"href","/docs/transformers/pr_18678/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(IQ,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(NQ,"href","/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineForTokenClassification"),c(qQ,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(jQ,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(DQ,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(GQ,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(OQ,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(VQ,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(XQ,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(zQ,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(WQ,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(QQ,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(UQ,"href","/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(HQ,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(JQ,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(YQ,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(KQ,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForTokenClassification"),c(eU,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(oU,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(rU,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(tU,"href","/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(aU,"href","/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(nU,"href","/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(lU,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(iU,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(dU,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(cU,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(fU,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(mU,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(gU,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(hU,"href","/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.AutoModelForQuestionAnswering"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(pU,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_18678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_18678/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c($U,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(SU,"href","/docs/transformers/pr_18678/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_18678/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_18678/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18678/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18678/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18678/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18678/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18678/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18678/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18678/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18678/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_18678/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(tH,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(sH,"href","/docs/transformers/pr_18678/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z6,"id","transformers.AutoModelForTableQuestionAnswering"),c(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(lH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForImageClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(fH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitForImageClassification"),c(pH,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(_H,"href","/docs/transformers/pr_18678/en/model_doc/cvt#transformers.CvtForImageClassification"),c(uH,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(bH,"href","/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTForImageClassification"),c(vH,"href","/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(FH,"href","/docs/transformers/pr_18678/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(TH,"href","/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitForImageClassification"),c(MH,"href","/docs/transformers/pr_18678/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(EH,"href","/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(CH,"href","/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(wH,"href","/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(AH,"href","/docs/transformers/pr_18678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(LH,"href","/docs/transformers/pr_18678/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(yH,"href","/docs/transformers/pr_18678/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(xH,"href","/docs/transformers/pr_18678/en/model_doc/resnet#transformers.ResNetForImageClassification"),c($H,"href","/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(kH,"href","/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinForImageClassification"),c(SH,"href","/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(RH,"href","/docs/transformers/pr_18678/en/model_doc/van#transformers.VanForImageClassification"),c(PH,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForVideoClassification"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(BH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_18678/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForVision2Seq"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(jH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForVisualQuestionAnswering"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(VH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_18678/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForAudioClassification"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(QH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(YH,"href","/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(aJ,"href","/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForAudioFrameClassification"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(nJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(dJ,"href","/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(cJ,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(fJ,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(mJ,"href","/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.AutoModelForCTC"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(gJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(uJ,"href","/docs/transformers/pr_18678/en/model_doc/hubert#transformers.HubertForCTC"),c(bJ,"href","/docs/transformers/pr_18678/en/model_doc/mctct#transformers.MCTCTForCTC"),c(vJ,"href","/docs/transformers/pr_18678/en/model_doc/sew#transformers.SEWForCTC"),c(FJ,"href","/docs/transformers/pr_18678/en/model_doc/sew-d#transformers.SEWDForCTC"),c(TJ,"href","/docs/transformers/pr_18678/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(MJ,"href","/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(EJ,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(CJ,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(wJ,"href","/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(AJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xJ,"href","/docs/transformers/pr_18678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c($J,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.AutoModelForAudioXVector"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(BJ,"href","/docs/transformers/pr_18678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(IJ,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(NJ,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(qJ,"href","/docs/transformers/pr_18678/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.AutoModelForMaskedImageModeling"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(jJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_18678/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(VJ,"href","/docs/transformers/pr_18678/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(XJ,"href","/docs/transformers/pr_18678/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(zJ,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O7,"id","transformers.AutoModelForObjectDetection"),c(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O7,"href","#transformers.AutoModelForObjectDetection"),c(fc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrForObjectDetection"),c(JJ,"href","/docs/transformers/pr_18678/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U7,"id","transformers.AutoModelForImageSegmentation"),c(U7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U7,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_18678/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z7,"id","transformers.AutoModelForSemanticSegmentation"),c(Z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z7,"href","#transformers.AutoModelForSemanticSegmentation"),c(uc,"class","relative group"),c(oY,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_18678/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(nY,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(sY,"href","/docs/transformers/pr_18678/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(lY,"href","/docs/transformers/pr_18678/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(iY,"href","/docs/transformers/pr_18678/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.AutoModelForInstanceSegmentation"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(dY,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_18678/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModel"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(gY,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertModel"),c(uY,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.TFBartModel"),c(bY,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertModel"),c(vY,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(FY,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(TY,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertModel"),c(MY,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.TFCLIPModel"),c(EY,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertModel"),c(CY,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.TFConvNextModel"),c(wY,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.TFCTRLModel"),c(AY,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(LY,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaModel"),c(yY,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(xY,"href","/docs/transformers/pr_18678/en/model_doc/deit#transformers.TFDeiTModel"),c($Y,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(kY,"href","/docs/transformers/pr_18678/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(SY,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraModel"),c(RY,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(PY,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelModel"),c(BY,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(IY,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.TFGPT2Model"),c(NY,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.TFGPTJModel"),c(qY,"href","/docs/transformers/pr_18678/en/model_doc/hubert#transformers.TFHubertModel"),c(jY,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(DY,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(GY,"href","/docs/transformers/pr_18678/en/model_doc/led#transformers.TFLEDModel"),c(OY,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerModel"),c(VY,"href","/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.TFLxmertModel"),c(XY,"href","/docs/transformers/pr_18678/en/model_doc/marian#transformers.TFMarianModel"),c(zY,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.TFMBartModel"),c(WY,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(QY,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetModel"),c(UY,"href","/docs/transformers/pr_18678/en/model_doc/mt5#transformers.TFMT5Model"),c(HY,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(JY,"href","/docs/transformers/pr_18678/en/model_doc/opt#transformers.TFOPTModel"),c(YY,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.TFPegasusModel"),c(KY,"href","/docs/transformers/pr_18678/en/model_doc/regnet#transformers.TFRegNetModel"),c(ZY,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertModel"),c(eK,"href","/docs/transformers/pr_18678/en/model_doc/resnet#transformers.TFResNetModel"),c(oK,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaModel"),c(rK,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerModel"),c(tK,"href","/docs/transformers/pr_18678/en/model_doc/segformer#transformers.TFSegformerModel"),c(aK,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(nK,"href","/docs/transformers/pr_18678/en/model_doc/swin#transformers.TFSwinModel"),c(sK,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.TFT5Model"),c(lK,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasModel"),c(iK,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dK,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.TFViTModel"),c(cK,"href","/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fK,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mK,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMModel"),c(gK,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hK,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModelForPreTraining"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(pK,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vK,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForPreTraining"),c(TK,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MK,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EK,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CK,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wK,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AK,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LK,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yK,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xK,"href","/docs/transformers/pr_18678/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($K,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kK,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SK,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RK,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PK,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(BK,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IK,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(NK,"href","/docs/transformers/pr_18678/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(qK,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jK,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(DK,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForCausalLM"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(GK,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zK,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(WK,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QK,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UK,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(HK,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JK,"href","/docs/transformers/pr_18678/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(YK,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(KK,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(ZK,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(eZ,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oZ,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rZ,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.TFAutoModelForImageClassification"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(tZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/pr_18678/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(lZ,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(iZ,"href","/docs/transformers/pr_18678/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(dZ,"href","/docs/transformers/pr_18678/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(cZ,"href","/docs/transformers/pr_18678/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(fZ,"href","/docs/transformers/pr_18678/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(mZ,"href","/docs/transformers/pr_18678/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(gZ,"href","/docs/transformers/pr_18678/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(hZ,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForSemanticSegmentation"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(pZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_18678/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(vZ,"href","/docs/transformers/pr_18678/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.TFAutoModelForMaskedLM"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(FZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(CZ,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AZ,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(yZ,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(xZ,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($Z,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(kZ,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SZ,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(RZ,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PZ,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(BZ,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(IZ,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NZ,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(qZ,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(jZ,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(DZ,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(GZ,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OZ,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(VZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(QZ,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(JZ,"href","/docs/transformers/pr_18678/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(YZ,"href","/docs/transformers/pr_18678/en/model_doc/marian#transformers.TFMarianMTModel"),c(KZ,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(ZZ,"href","/docs/transformers/pr_18678/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(oee,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K4,"id","transformers.TFAutoModelForSequenceClassification"),c(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K4,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(ree,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(see,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(lee,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(dee,"href","/docs/transformers/pr_18678/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(cee,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(fee,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(mee,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(gee,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(hee,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(pee,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(uee,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(bee,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(vee,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_18678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(wee,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Aee,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(yee,"href","/docs/transformers/pr_18678/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(xee,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c($ee,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(kee,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.TFAutoModelForMultipleChoice"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c(See,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(qee,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(jee,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(zee,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Qee,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Uee,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Hee,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Jee,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Yee,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(Kee,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zee,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eoe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ooe,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(roe,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(toe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_18678/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.TFAutoModelForTokenClassification"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.TFAutoModelForTokenClassification"),c(rf,"class","relative group"),c(loe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ioe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(doe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(coe,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(foe,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(moe,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(goe,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hoe,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(poe,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(_oe,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(uoe,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(boe,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(voe,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Foe,"href","/docs/transformers/pr_18678/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Toe,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(Moe,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Coe,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(woe,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Aoe,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Loe,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(yoe,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(xoe,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c($oe,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.TFAutoModelForQuestionAnswering"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(koe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_18678/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_18678/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_18678/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_18678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_18678/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Voe,"href","/docs/transformers/pr_18678/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_18678/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18678/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_18678/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_18678/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_18678/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Yoe,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_18678/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Zoe,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(ere,"href","/docs/transformers/pr_18678/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.TFAutoModelForVision2Seq"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.TFAutoModelForVision2Seq"),c(df,"class","relative group"),c(ore,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(are,"href","/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mf,"class","relative group"),c(nre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ire,"href","/docs/transformers/pr_18678/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModel"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModel"),c(pf,"class","relative group"),c(dre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mre,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gre,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartModel"),c(hre,"href","/docs/transformers/pr_18678/en/model_doc/beit#transformers.FlaxBeitModel"),c(pre,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertModel"),c(_re,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ure,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bre,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(vre,"href","/docs/transformers/pr_18678/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Fre,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Tre,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraModel"),c(Mre,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Ere,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Cre,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wre,"href","/docs/transformers/pr_18678/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Are,"href","/docs/transformers/pr_18678/en/model_doc/marian#transformers.FlaxMarianModel"),c(Lre,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartModel"),c(yre,"href","/docs/transformers/pr_18678/en/model_doc/mt5#transformers.FlaxMT5Model"),c(xre,"href","/docs/transformers/pr_18678/en/model_doc/opt#transformers.FlaxOPTModel"),c($re,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(kre,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Sre,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Rre,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.FlaxT5Model"),c(Pre,"href","/docs/transformers/pr_18678/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Bre,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.FlaxViTModel"),c(Ire,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Nre,"href","/docs/transformers/pr_18678/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(qre,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForCausalLM"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForCausalLM"),c(bf,"class","relative group"),c(jre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ore,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Vre,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Xre,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(zre,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Wre,"href","/docs/transformers/pr_18678/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Qre,"href","/docs/transformers/pr_18678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Ure,"href","/docs/transformers/pr_18678/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Hre,"href","/docs/transformers/pr_18678/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Jre,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Yre,"href","/docs/transformers/pr_18678/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.FlaxAutoModelForPreTraining"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tf,"class","relative group"),c(Kre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zre,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ete,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ote,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(rte,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tte,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ate,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(nte,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ste,"href","/docs/transformers/pr_18678/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(lte,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ite,"href","/docs/transformers/pr_18678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dte,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cte,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fte,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(mte,"href","/docs/transformers/pr_18678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(gte,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.FlaxAutoModelForMaskedLM"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cf,"class","relative group"),c(hte,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pte,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_te,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ute,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(bte,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vte,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Fte,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Tte,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Mte,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Ete,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Cte,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wte,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ate,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lf,"class","relative group"),c(Lte,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yte,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xte,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($te,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Ste,"href","/docs/transformers/pr_18678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Rte,"href","/docs/transformers/pr_18678/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Pte,"href","/docs/transformers/pr_18678/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Bte,"href","/docs/transformers/pr_18678/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Ite,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Nte,"href","/docs/transformers/pr_18678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(qte,"href","/docs/transformers/pr_18678/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(jte,"href","/docs/transformers/pr_18678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($f,"class","relative group"),c(Dte,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gte,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ote,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vte,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Xte,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(zte,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Wte,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Qte,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Ute,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Hte,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Jte,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Yte,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Kte,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rf,"class","relative group"),c(Zte,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rae,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(tae,"href","/docs/transformers/pr_18678/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(aae,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(nae,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(sae,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(lae,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(iae,"href","/docs/transformers/pr_18678/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(dae,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(cae,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(fae,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForTokenClassification"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(If,"class","relative group"),c(mae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pae,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(_ae,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(uae,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(bae,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(vae,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Fae,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Tae,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Mae,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jf,"class","relative group"),c(Eae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aae,"href","/docs/transformers/pr_18678/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Lae,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(yae,"href","/docs/transformers/pr_18678/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(xae,"href","/docs/transformers/pr_18678/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c($ae,"href","/docs/transformers/pr_18678/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(kae,"href","/docs/transformers/pr_18678/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Sae,"href","/docs/transformers/pr_18678/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Rae,"href","/docs/transformers/pr_18678/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Of,"class","relative group"),c(Pae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nae,"href","/docs/transformers/pr_18678/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForImageClassification"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForImageClassification"),c(zf,"class","relative group"),c(qae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gae,"href","/docs/transformers/pr_18678/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Oae,"href","/docs/transformers/pr_18678/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jw,"id","transformers.FlaxAutoModelForVision2Seq"),c(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uf,"class","relative group"),c(Vae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zae,"href","/docs/transformers/pr_18678/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wae,"href","/docs/transformers/pr_18678/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Oi),b(f,em,u),b(f,ft,u),e(ft,Vi),e(ft,Xi),e(Xi,gy),e(ft,om),b(f,Oe,u),b(f,Qe,u),e(Qe,zi),e(Qe,Xn),e(Xn,hy),e(Qe,zn),e(Qe,Wn),e(Wn,py),e(Qe,Wi),e(Qe,Qn),e(Qn,_y),e(Qe,Qi),b(f,rm,u),M(ja,f,u),b(f,Ue,u),b(f,Ae,u),e(Ae,lP),e(Ae,Ui),e(Ui,iP),e(Ae,dP),b(f,Lo,u),b(f,Da,u),e(Da,cP),e(Da,tm),e(tm,fP),e(Da,AKe),b(f,rUe,u),b(f,Hi,u),e(Hi,am),e(am,Xse),M(uy,Xse,null),e(Hi,LKe),e(Hi,zse),e(zse,yKe),b(f,tUe,u),b(f,Un,u),e(Un,xKe),e(Un,Wse),e(Wse,$Ke),e(Un,kKe),e(Un,Qse),e(Qse,SKe),e(Un,RKe),b(f,aUe,u),M(by,f,u),b(f,nUe,u),b(f,mP,u),e(mP,PKe),b(f,sUe,u),M(nm,f,u),b(f,lUe,u),b(f,Ji,u),e(Ji,sm),e(sm,Use),M(vy,Use,null),e(Ji,BKe),e(Ji,Hse),e(Hse,IKe),b(f,iUe,u),b(f,yo,u),M(Fy,yo,null),e(yo,NKe),e(yo,Ty),e(Ty,qKe),e(Ty,gP),e(gP,jKe),e(Ty,DKe),e(yo,GKe),e(yo,My),e(My,OKe),e(My,Jse),e(Jse,VKe),e(My,XKe),e(yo,zKe),e(yo,kr),M(Ey,kr,null),e(kr,WKe),e(kr,Yse),e(Yse,QKe),e(kr,UKe),e(kr,Yi),e(Yi,HKe),e(Yi,Kse),e(Kse,JKe),e(Yi,YKe),e(Yi,Zse),e(Zse,KKe),e(Yi,ZKe),e(kr,eZe),e(kr,A),e(A,lm),e(lm,ele),e(ele,oZe),e(lm,rZe),e(lm,hP),e(hP,tZe),e(lm,aZe),e(A,nZe),e(A,im),e(im,ole),e(ole,sZe),e(im,lZe),e(im,pP),e(pP,iZe),e(im,dZe),e(A,cZe),e(A,dm),e(dm,rle),e(rle,fZe),e(dm,mZe),e(dm,_P),e(_P,gZe),e(dm,hZe),e(A,pZe),e(A,cm),e(cm,tle),e(tle,_Ze),e(cm,uZe),e(cm,uP),e(uP,bZe),e(cm,vZe),e(A,FZe),e(A,fm),e(fm,ale),e(ale,TZe),e(fm,MZe),e(fm,bP),e(bP,EZe),e(fm,CZe),e(A,wZe),e(A,mm),e(mm,nle),e(nle,AZe),e(mm,LZe),e(mm,vP),e(vP,yZe),e(mm,xZe),e(A,$Ze),e(A,gm),e(gm,sle),e(sle,kZe),e(gm,SZe),e(gm,FP),e(FP,RZe),e(gm,PZe),e(A,BZe),e(A,hm),e(hm,lle),e(lle,IZe),e(hm,NZe),e(hm,TP),e(TP,qZe),e(hm,jZe),e(A,DZe),e(A,pm),e(pm,ile),e(ile,GZe),e(pm,OZe),e(pm,MP),e(MP,VZe),e(pm,XZe),e(A,zZe),e(A,_m),e(_m,dle),e(dle,WZe),e(_m,QZe),e(_m,EP),e(EP,UZe),e(_m,HZe),e(A,JZe),e(A,um),e(um,cle),e(cle,YZe),e(um,KZe),e(um,CP),e(CP,ZZe),e(um,eeo),e(A,oeo),e(A,bm),e(bm,fle),e(fle,reo),e(bm,teo),e(bm,wP),e(wP,aeo),e(bm,neo),e(A,seo),e(A,vm),e(vm,mle),e(mle,leo),e(vm,ieo),e(vm,AP),e(AP,deo),e(vm,ceo),e(A,feo),e(A,Fm),e(Fm,gle),e(gle,meo),e(Fm,geo),e(Fm,LP),e(LP,heo),e(Fm,peo),e(A,_eo),e(A,Tm),e(Tm,hle),e(hle,ueo),e(Tm,beo),e(Tm,yP),e(yP,veo),e(Tm,Feo),e(A,Teo),e(A,Mm),e(Mm,ple),e(ple,Meo),e(Mm,Eeo),e(Mm,xP),e(xP,Ceo),e(Mm,weo),e(A,Aeo),e(A,Em),e(Em,_le),e(_le,Leo),e(Em,yeo),e(Em,$P),e($P,xeo),e(Em,$eo),e(A,keo),e(A,Cm),e(Cm,ule),e(ule,Seo),e(Cm,Reo),e(Cm,kP),e(kP,Peo),e(Cm,Beo),e(A,Ieo),e(A,wm),e(wm,ble),e(ble,Neo),e(wm,qeo),e(wm,SP),e(SP,jeo),e(wm,Deo),e(A,Geo),e(A,Am),e(Am,vle),e(vle,Oeo),e(Am,Veo),e(Am,RP),e(RP,Xeo),e(Am,zeo),e(A,Weo),e(A,Lm),e(Lm,Fle),e(Fle,Qeo),e(Lm,Ueo),e(Lm,PP),e(PP,Heo),e(Lm,Jeo),e(A,Yeo),e(A,ym),e(ym,Tle),e(Tle,Keo),e(ym,Zeo),e(ym,BP),e(BP,eoo),e(ym,ooo),e(A,roo),e(A,xm),e(xm,Mle),e(Mle,too),e(xm,aoo),e(xm,IP),e(IP,noo),e(xm,soo),e(A,loo),e(A,$m),e($m,Ele),e(Ele,ioo),e($m,doo),e($m,NP),e(NP,coo),e($m,foo),e(A,moo),e(A,km),e(km,Cle),e(Cle,goo),e(km,hoo),e(km,qP),e(qP,poo),e(km,_oo),e(A,uoo),e(A,Sm),e(Sm,wle),e(wle,boo),e(Sm,voo),e(Sm,jP),e(jP,Foo),e(Sm,Too),e(A,Moo),e(A,Rm),e(Rm,Ale),e(Ale,Eoo),e(Rm,Coo),e(Rm,DP),e(DP,woo),e(Rm,Aoo),e(A,Loo),e(A,Pm),e(Pm,Lle),e(Lle,yoo),e(Pm,xoo),e(Pm,GP),e(GP,$oo),e(Pm,koo),e(A,Soo),e(A,Bm),e(Bm,yle),e(yle,Roo),e(Bm,Poo),e(Bm,OP),e(OP,Boo),e(Bm,Ioo),e(A,Noo),e(A,Im),e(Im,xle),e(xle,qoo),e(Im,joo),e(Im,VP),e(VP,Doo),e(Im,Goo),e(A,Ooo),e(A,Nm),e(Nm,$le),e($le,Voo),e(Nm,Xoo),e(Nm,XP),e(XP,zoo),e(Nm,Woo),e(A,Qoo),e(A,qm),e(qm,kle),e(kle,Uoo),e(qm,Hoo),e(qm,zP),e(zP,Joo),e(qm,Yoo),e(A,Koo),e(A,jm),e(jm,Sle),e(Sle,Zoo),e(jm,ero),e(jm,WP),e(WP,oro),e(jm,rro),e(A,tro),e(A,Dm),e(Dm,Rle),e(Rle,aro),e(Dm,nro),e(Dm,QP),e(QP,sro),e(Dm,lro),e(A,iro),e(A,Gm),e(Gm,Ple),e(Ple,dro),e(Gm,cro),e(Gm,UP),e(UP,fro),e(Gm,mro),e(A,gro),e(A,Om),e(Om,Ble),e(Ble,hro),e(Om,pro),e(Om,HP),e(HP,_ro),e(Om,uro),e(A,bro),e(A,Vm),e(Vm,Ile),e(Ile,vro),e(Vm,Fro),e(Vm,JP),e(JP,Tro),e(Vm,Mro),e(A,Ero),e(A,Xm),e(Xm,Nle),e(Nle,Cro),e(Xm,wro),e(Xm,YP),e(YP,Aro),e(Xm,Lro),e(A,yro),e(A,zm),e(zm,qle),e(qle,xro),e(zm,$ro),e(zm,KP),e(KP,kro),e(zm,Sro),e(A,Rro),e(A,Wm),e(Wm,jle),e(jle,Pro),e(Wm,Bro),e(Wm,ZP),e(ZP,Iro),e(Wm,Nro),e(A,qro),e(A,Qm),e(Qm,Dle),e(Dle,jro),e(Qm,Dro),e(Qm,eB),e(eB,Gro),e(Qm,Oro),e(A,Vro),e(A,Um),e(Um,Gle),e(Gle,Xro),e(Um,zro),e(Um,oB),e(oB,Wro),e(Um,Qro),e(A,Uro),e(A,Hm),e(Hm,Ole),e(Ole,Hro),e(Hm,Jro),e(Hm,rB),e(rB,Yro),e(Hm,Kro),e(A,Zro),e(A,Jm),e(Jm,Vle),e(Vle,eto),e(Jm,oto),e(Jm,tB),e(tB,rto),e(Jm,tto),e(A,ato),e(A,Ym),e(Ym,Xle),e(Xle,nto),e(Ym,sto),e(Ym,aB),e(aB,lto),e(Ym,ito),e(A,dto),e(A,Km),e(Km,zle),e(zle,cto),e(Km,fto),e(Km,nB),e(nB,mto),e(Km,gto),e(A,hto),e(A,Zm),e(Zm,Wle),e(Wle,pto),e(Zm,_to),e(Zm,sB),e(sB,uto),e(Zm,bto),e(A,vto),e(A,eg),e(eg,Qle),e(Qle,Fto),e(eg,Tto),e(eg,lB),e(lB,Mto),e(eg,Eto),e(A,Cto),e(A,og),e(og,Ule),e(Ule,wto),e(og,Ato),e(og,iB),e(iB,Lto),e(og,yto),e(A,xto),e(A,rg),e(rg,Hle),e(Hle,$to),e(rg,kto),e(rg,dB),e(dB,Sto),e(rg,Rto),e(A,Pto),e(A,tg),e(tg,Jle),e(Jle,Bto),e(tg,Ito),e(tg,cB),e(cB,Nto),e(tg,qto),e(A,jto),e(A,ag),e(ag,Yle),e(Yle,Dto),e(ag,Gto),e(ag,fB),e(fB,Oto),e(ag,Vto),e(A,Xto),e(A,ng),e(ng,Kle),e(Kle,zto),e(ng,Wto),e(ng,mB),e(mB,Qto),e(ng,Uto),e(A,Hto),e(A,sg),e(sg,Zle),e(Zle,Jto),e(sg,Yto),e(sg,gB),e(gB,Kto),e(sg,Zto),e(A,eao),e(A,lg),e(lg,eie),e(eie,oao),e(lg,rao),e(lg,hB),e(hB,tao),e(lg,aao),e(A,nao),e(A,ig),e(ig,oie),e(oie,sao),e(ig,lao),e(ig,pB),e(pB,iao),e(ig,dao),e(A,cao),e(A,dg),e(dg,rie),e(rie,fao),e(dg,mao),e(dg,_B),e(_B,gao),e(dg,hao),e(A,pao),e(A,cg),e(cg,tie),e(tie,_ao),e(cg,uao),e(cg,uB),e(uB,bao),e(cg,vao),e(A,Fao),e(A,fg),e(fg,aie),e(aie,Tao),e(fg,Mao),e(fg,bB),e(bB,Eao),e(fg,Cao),e(A,wao),e(A,mg),e(mg,nie),e(nie,Aao),e(mg,Lao),e(mg,vB),e(vB,yao),e(mg,xao),e(A,$ao),e(A,gg),e(gg,sie),e(sie,kao),e(gg,Sao),e(gg,FB),e(FB,Rao),e(gg,Pao),e(A,Bao),e(A,hg),e(hg,lie),e(lie,Iao),e(hg,Nao),e(hg,TB),e(TB,qao),e(hg,jao),e(A,Dao),e(A,pg),e(pg,iie),e(iie,Gao),e(pg,Oao),e(pg,MB),e(MB,Vao),e(pg,Xao),e(A,zao),e(A,_g),e(_g,die),e(die,Wao),e(_g,Qao),e(_g,EB),e(EB,Uao),e(_g,Hao),e(A,Jao),e(A,ug),e(ug,cie),e(cie,Yao),e(ug,Kao),e(ug,CB),e(CB,Zao),e(ug,eno),e(A,ono),e(A,bg),e(bg,fie),e(fie,rno),e(bg,tno),e(bg,wB),e(wB,ano),e(bg,nno),e(A,sno),e(A,vg),e(vg,mie),e(mie,lno),e(vg,ino),e(vg,AB),e(AB,dno),e(vg,cno),e(A,fno),e(A,Fg),e(Fg,gie),e(gie,mno),e(Fg,gno),e(Fg,LB),e(LB,hno),e(Fg,pno),e(A,_no),e(A,Tg),e(Tg,hie),e(hie,uno),e(Tg,bno),e(Tg,yB),e(yB,vno),e(Tg,Fno),e(A,Tno),e(A,Mg),e(Mg,pie),e(pie,Mno),e(Mg,Eno),e(Mg,xB),e(xB,Cno),e(Mg,wno),e(A,Ano),e(A,Eg),e(Eg,_ie),e(_ie,Lno),e(Eg,yno),e(Eg,$B),e($B,xno),e(Eg,$no),e(A,kno),e(A,Cg),e(Cg,uie),e(uie,Sno),e(Cg,Rno),e(Cg,kB),e(kB,Pno),e(Cg,Bno),e(A,Ino),e(A,wg),e(wg,bie),e(bie,Nno),e(wg,qno),e(wg,SB),e(SB,jno),e(wg,Dno),e(A,Gno),e(A,Ag),e(Ag,vie),e(vie,Ono),e(Ag,Vno),e(Ag,RB),e(RB,Xno),e(Ag,zno),e(A,Wno),e(A,Lg),e(Lg,Fie),e(Fie,Qno),e(Lg,Uno),e(Lg,PB),e(PB,Hno),e(Lg,Jno),e(A,Yno),e(A,yg),e(yg,Tie),e(Tie,Kno),e(yg,Zno),e(yg,BB),e(BB,eso),e(yg,oso),e(A,rso),e(A,xg),e(xg,Mie),e(Mie,tso),e(xg,aso),e(xg,IB),e(IB,nso),e(xg,sso),e(A,lso),e(A,$g),e($g,Eie),e(Eie,iso),e($g,dso),e($g,NB),e(NB,cso),e($g,fso),e(A,mso),e(A,kg),e(kg,Cie),e(Cie,gso),e(kg,hso),e(kg,qB),e(qB,pso),e(kg,_so),e(A,uso),e(A,Sg),e(Sg,wie),e(wie,bso),e(Sg,vso),e(Sg,jB),e(jB,Fso),e(Sg,Tso),e(A,Mso),e(A,Rg),e(Rg,Aie),e(Aie,Eso),e(Rg,Cso),e(Rg,DB),e(DB,wso),e(Rg,Aso),e(A,Lso),e(A,Pg),e(Pg,Lie),e(Lie,yso),e(Pg,xso),e(Pg,GB),e(GB,$so),e(Pg,kso),e(A,Sso),e(A,Bg),e(Bg,yie),e(yie,Rso),e(Bg,Pso),e(Bg,OB),e(OB,Bso),e(Bg,Iso),e(A,Nso),e(A,Ig),e(Ig,xie),e(xie,qso),e(Ig,jso),e(Ig,VB),e(VB,Dso),e(Ig,Gso),e(A,Oso),e(A,Ng),e(Ng,$ie),e($ie,Vso),e(Ng,Xso),e(Ng,XB),e(XB,zso),e(Ng,Wso),e(A,Qso),e(A,qg),e(qg,kie),e(kie,Uso),e(qg,Hso),e(qg,zB),e(zB,Jso),e(qg,Yso),e(A,Kso),e(A,jg),e(jg,Sie),e(Sie,Zso),e(jg,elo),e(jg,WB),e(WB,olo),e(jg,rlo),e(A,tlo),e(A,Dg),e(Dg,Rie),e(Rie,alo),e(Dg,nlo),e(Dg,QB),e(QB,slo),e(Dg,llo),e(A,ilo),e(A,Gg),e(Gg,Pie),e(Pie,dlo),e(Gg,clo),e(Gg,UB),e(UB,flo),e(Gg,mlo),e(A,glo),e(A,Og),e(Og,Bie),e(Bie,hlo),e(Og,plo),e(Og,HB),e(HB,_lo),e(Og,ulo),e(A,blo),e(A,Vg),e(Vg,Iie),e(Iie,vlo),e(Vg,Flo),e(Vg,JB),e(JB,Tlo),e(Vg,Mlo),e(A,Elo),e(A,Xg),e(Xg,Nie),e(Nie,Clo),e(Xg,wlo),e(Xg,YB),e(YB,Alo),e(Xg,Llo),e(A,ylo),e(A,zg),e(zg,qie),e(qie,xlo),e(zg,$lo),e(zg,KB),e(KB,klo),e(zg,Slo),e(A,Rlo),e(A,Wg),e(Wg,jie),e(jie,Plo),e(Wg,Blo),e(Wg,ZB),e(ZB,Ilo),e(Wg,Nlo),e(A,qlo),e(A,Qg),e(Qg,Die),e(Die,jlo),e(Qg,Dlo),e(Qg,eI),e(eI,Glo),e(Qg,Olo),e(A,Vlo),e(A,Ug),e(Ug,Gie),e(Gie,Xlo),e(Ug,zlo),e(Ug,oI),e(oI,Wlo),e(Ug,Qlo),e(A,Ulo),e(A,Hg),e(Hg,Oie),e(Oie,Hlo),e(Hg,Jlo),e(Hg,rI),e(rI,Ylo),e(Hg,Klo),e(A,Zlo),e(A,Jg),e(Jg,Vie),e(Vie,eio),e(Jg,oio),e(Jg,tI),e(tI,rio),e(Jg,tio),e(A,aio),e(A,Yg),e(Yg,Xie),e(Xie,nio),e(Yg,sio),e(Yg,aI),e(aI,lio),e(Yg,iio),e(A,dio),e(A,Kg),e(Kg,zie),e(zie,cio),e(Kg,fio),e(Kg,nI),e(nI,mio),e(Kg,gio),e(A,hio),e(A,Zg),e(Zg,Wie),e(Wie,pio),e(Zg,_io),e(Zg,sI),e(sI,uio),e(Zg,bio),e(A,vio),e(A,eh),e(eh,Qie),e(Qie,Fio),e(eh,Tio),e(eh,lI),e(lI,Mio),e(eh,Eio),e(A,Cio),e(A,oh),e(oh,Uie),e(Uie,wio),e(oh,Aio),e(oh,iI),e(iI,Lio),e(oh,yio),e(A,xio),e(A,rh),e(rh,Hie),e(Hie,$io),e(rh,kio),e(rh,dI),e(dI,Sio),e(rh,Rio),e(A,Pio),e(A,th),e(th,Jie),e(Jie,Bio),e(th,Iio),e(th,cI),e(cI,Nio),e(th,qio),e(A,jio),e(A,ah),e(ah,Yie),e(Yie,Dio),e(ah,Gio),e(ah,fI),e(fI,Oio),e(ah,Vio),e(A,Xio),e(A,nh),e(nh,Kie),e(Kie,zio),e(nh,Wio),e(nh,mI),e(mI,Qio),e(nh,Uio),e(A,Hio),e(A,sh),e(sh,Zie),e(Zie,Jio),e(sh,Yio),e(sh,gI),e(gI,Kio),e(sh,Zio),e(A,edo),e(A,lh),e(lh,ede),e(ede,odo),e(lh,rdo),e(lh,hI),e(hI,tdo),e(lh,ado),e(A,ndo),e(A,ih),e(ih,ode),e(ode,sdo),e(ih,ldo),e(ih,pI),e(pI,ido),e(ih,ddo),e(A,cdo),e(A,dh),e(dh,rde),e(rde,fdo),e(dh,mdo),e(dh,_I),e(_I,gdo),e(dh,hdo),e(A,pdo),e(A,ch),e(ch,tde),e(tde,_do),e(ch,udo),e(ch,uI),e(uI,bdo),e(ch,vdo),e(A,Fdo),e(A,fh),e(fh,ade),e(ade,Tdo),e(fh,Mdo),e(fh,bI),e(bI,Edo),e(fh,Cdo),e(A,wdo),e(A,mh),e(mh,nde),e(nde,Ado),e(mh,Ldo),e(mh,vI),e(vI,ydo),e(mh,xdo),e(A,$do),e(A,gh),e(gh,sde),e(sde,kdo),e(gh,Sdo),e(gh,FI),e(FI,Rdo),e(gh,Pdo),e(A,Bdo),e(A,hh),e(hh,lde),e(lde,Ido),e(hh,Ndo),e(hh,TI),e(TI,qdo),e(hh,jdo),e(A,Ddo),e(A,ph),e(ph,ide),e(ide,Gdo),e(ph,Odo),e(ph,MI),e(MI,Vdo),e(ph,Xdo),e(A,zdo),e(A,_h),e(_h,dde),e(dde,Wdo),e(_h,Qdo),e(_h,EI),e(EI,Udo),e(_h,Hdo),e(A,Jdo),e(A,uh),e(uh,cde),e(cde,Ydo),e(uh,Kdo),e(uh,CI),e(CI,Zdo),e(uh,eco),e(A,oco),e(A,bh),e(bh,fde),e(fde,rco),e(bh,tco),e(bh,wI),e(wI,aco),e(bh,nco),e(A,sco),e(A,vh),e(vh,mde),e(mde,lco),e(vh,ico),e(vh,AI),e(AI,dco),e(vh,cco),e(A,fco),e(A,Fh),e(Fh,gde),e(gde,mco),e(Fh,gco),e(Fh,LI),e(LI,hco),e(Fh,pco),e(kr,_co),M(Th,kr,null),e(yo,uco),e(yo,Mh),M(Cy,Mh,null),e(Mh,bco),e(Mh,hde),e(hde,vco),b(f,dUe,u),b(f,Ki,u),e(Ki,Eh),e(Eh,pde),M(wy,pde,null),e(Ki,Fco),e(Ki,_de),e(_de,Tco),b(f,cUe,u),b(f,xo,u),M(Ay,xo,null),e(xo,Mco),e(xo,Ly),e(Ly,Eco),e(Ly,yI),e(yI,Cco),e(Ly,wco),e(xo,Aco),e(xo,yy),e(yy,Lco),e(yy,ude),e(ude,yco),e(yy,xco),e(xo,$co),e(xo,Sr),M(xy,Sr,null),e(Sr,kco),e(Sr,bde),e(bde,Sco),e(Sr,Rco),e(Sr,Ga),e(Ga,Pco),e(Ga,vde),e(vde,Bco),e(Ga,Ico),e(Ga,Fde),e(Fde,Nco),e(Ga,qco),e(Ga,Tde),e(Tde,jco),e(Ga,Dco),e(Sr,Gco),e(Sr,k),e(k,Hn),e(Hn,Mde),e(Mde,Oco),e(Hn,Vco),e(Hn,xI),e(xI,Xco),e(Hn,zco),e(Hn,$I),e($I,Wco),e(Hn,Qco),e(k,Uco),e(k,Jn),e(Jn,Ede),e(Ede,Hco),e(Jn,Jco),e(Jn,kI),e(kI,Yco),e(Jn,Kco),e(Jn,SI),e(SI,Zco),e(Jn,efo),e(k,ofo),e(k,Yn),e(Yn,Cde),e(Cde,rfo),e(Yn,tfo),e(Yn,RI),e(RI,afo),e(Yn,nfo),e(Yn,PI),e(PI,sfo),e(Yn,lfo),e(k,ifo),e(k,Ch),e(Ch,wde),e(wde,dfo),e(Ch,cfo),e(Ch,BI),e(BI,ffo),e(Ch,mfo),e(k,gfo),e(k,Kn),e(Kn,Ade),e(Ade,hfo),e(Kn,pfo),e(Kn,II),e(II,_fo),e(Kn,ufo),e(Kn,NI),e(NI,bfo),e(Kn,vfo),e(k,Ffo),e(k,wh),e(wh,Lde),e(Lde,Tfo),e(wh,Mfo),e(wh,qI),e(qI,Efo),e(wh,Cfo),e(k,wfo),e(k,Ah),e(Ah,yde),e(yde,Afo),e(Ah,Lfo),e(Ah,jI),e(jI,yfo),e(Ah,xfo),e(k,$fo),e(k,Lh),e(Lh,xde),e(xde,kfo),e(Lh,Sfo),e(Lh,DI),e(DI,Rfo),e(Lh,Pfo),e(k,Bfo),e(k,Zn),e(Zn,$de),e($de,Ifo),e(Zn,Nfo),e(Zn,GI),e(GI,qfo),e(Zn,jfo),e(Zn,OI),e(OI,Dfo),e(Zn,Gfo),e(k,Ofo),e(k,es),e(es,kde),e(kde,Vfo),e(es,Xfo),e(es,VI),e(VI,zfo),e(es,Wfo),e(es,XI),e(XI,Qfo),e(es,Ufo),e(k,Hfo),e(k,os),e(os,Sde),e(Sde,Jfo),e(os,Yfo),e(os,zI),e(zI,Kfo),e(os,Zfo),e(os,WI),e(WI,emo),e(os,omo),e(k,rmo),e(k,yh),e(yh,Rde),e(Rde,tmo),e(yh,amo),e(yh,QI),e(QI,nmo),e(yh,smo),e(k,lmo),e(k,xh),e(xh,Pde),e(Pde,imo),e(xh,dmo),e(xh,UI),e(UI,cmo),e(xh,fmo),e(k,mmo),e(k,$h),e($h,Bde),e(Bde,gmo),e($h,hmo),e($h,HI),e(HI,pmo),e($h,_mo),e(k,umo),e(k,rs),e(rs,Ide),e(Ide,bmo),e(rs,vmo),e(rs,JI),e(JI,Fmo),e(rs,Tmo),e(rs,YI),e(YI,Mmo),e(rs,Emo),e(k,Cmo),e(k,kh),e(kh,Nde),e(Nde,wmo),e(kh,Amo),e(kh,KI),e(KI,Lmo),e(kh,ymo),e(k,xmo),e(k,ts),e(ts,qde),e(qde,$mo),e(ts,kmo),e(ts,ZI),e(ZI,Smo),e(ts,Rmo),e(ts,eN),e(eN,Pmo),e(ts,Bmo),e(k,Imo),e(k,as),e(as,jde),e(jde,Nmo),e(as,qmo),e(as,oN),e(oN,jmo),e(as,Dmo),e(as,rN),e(rN,Gmo),e(as,Omo),e(k,Vmo),e(k,ns),e(ns,Dde),e(Dde,Xmo),e(ns,zmo),e(ns,tN),e(tN,Wmo),e(ns,Qmo),e(ns,aN),e(aN,Umo),e(ns,Hmo),e(k,Jmo),e(k,ss),e(ss,Gde),e(Gde,Ymo),e(ss,Kmo),e(ss,nN),e(nN,Zmo),e(ss,ego),e(ss,sN),e(sN,ogo),e(ss,rgo),e(k,tgo),e(k,Sh),e(Sh,Ode),e(Ode,ago),e(Sh,ngo),e(Sh,lN),e(lN,sgo),e(Sh,lgo),e(k,igo),e(k,ls),e(ls,Vde),e(Vde,dgo),e(ls,cgo),e(ls,iN),e(iN,fgo),e(ls,mgo),e(ls,dN),e(dN,ggo),e(ls,hgo),e(k,pgo),e(k,is),e(is,Xde),e(Xde,_go),e(is,ugo),e(is,cN),e(cN,bgo),e(is,vgo),e(is,fN),e(fN,Fgo),e(is,Tgo),e(k,Mgo),e(k,ds),e(ds,zde),e(zde,Ego),e(ds,Cgo),e(ds,mN),e(mN,wgo),e(ds,Ago),e(ds,gN),e(gN,Lgo),e(ds,ygo),e(k,xgo),e(k,cs),e(cs,Wde),e(Wde,$go),e(cs,kgo),e(cs,hN),e(hN,Sgo),e(cs,Rgo),e(cs,pN),e(pN,Pgo),e(cs,Bgo),e(k,Igo),e(k,fs),e(fs,Qde),e(Qde,Ngo),e(fs,qgo),e(fs,_N),e(_N,jgo),e(fs,Dgo),e(fs,uN),e(uN,Ggo),e(fs,Ogo),e(k,Vgo),e(k,ms),e(ms,Ude),e(Ude,Xgo),e(ms,zgo),e(ms,bN),e(bN,Wgo),e(ms,Qgo),e(ms,vN),e(vN,Ugo),e(ms,Hgo),e(k,Jgo),e(k,Rh),e(Rh,Hde),e(Hde,Ygo),e(Rh,Kgo),e(Rh,FN),e(FN,Zgo),e(Rh,eho),e(k,oho),e(k,gs),e(gs,Jde),e(Jde,rho),e(gs,tho),e(gs,TN),e(TN,aho),e(gs,nho),e(gs,MN),e(MN,sho),e(gs,lho),e(k,iho),e(k,Ph),e(Ph,Yde),e(Yde,dho),e(Ph,cho),e(Ph,EN),e(EN,fho),e(Ph,mho),e(k,gho),e(k,hs),e(hs,Kde),e(Kde,hho),e(hs,pho),e(hs,CN),e(CN,_ho),e(hs,uho),e(hs,wN),e(wN,bho),e(hs,vho),e(k,Fho),e(k,ps),e(ps,Zde),e(Zde,Tho),e(ps,Mho),e(ps,AN),e(AN,Eho),e(ps,Cho),e(ps,LN),e(LN,who),e(ps,Aho),e(k,Lho),e(k,_s),e(_s,ece),e(ece,yho),e(_s,xho),e(_s,yN),e(yN,$ho),e(_s,kho),e(_s,xN),e(xN,Sho),e(_s,Rho),e(k,Pho),e(k,Bh),e(Bh,oce),e(oce,Bho),e(Bh,Iho),e(Bh,$N),e($N,Nho),e(Bh,qho),e(k,jho),e(k,us),e(us,rce),e(rce,Dho),e(us,Gho),e(us,kN),e(kN,Oho),e(us,Vho),e(us,SN),e(SN,Xho),e(us,zho),e(k,Who),e(k,bs),e(bs,tce),e(tce,Qho),e(bs,Uho),e(bs,RN),e(RN,Hho),e(bs,Jho),e(bs,PN),e(PN,Yho),e(bs,Kho),e(k,Zho),e(k,vs),e(vs,ace),e(ace,epo),e(vs,opo),e(vs,BN),e(BN,rpo),e(vs,tpo),e(vs,IN),e(IN,apo),e(vs,npo),e(k,spo),e(k,Ih),e(Ih,nce),e(nce,lpo),e(Ih,ipo),e(Ih,NN),e(NN,dpo),e(Ih,cpo),e(k,fpo),e(k,Fs),e(Fs,sce),e(sce,mpo),e(Fs,gpo),e(Fs,qN),e(qN,hpo),e(Fs,ppo),e(Fs,jN),e(jN,_po),e(Fs,upo),e(k,bpo),e(k,Ts),e(Ts,lce),e(lce,vpo),e(Ts,Fpo),e(Ts,DN),e(DN,Tpo),e(Ts,Mpo),e(Ts,GN),e(GN,Epo),e(Ts,Cpo),e(k,wpo),e(k,Ms),e(Ms,ice),e(ice,Apo),e(Ms,Lpo),e(Ms,ON),e(ON,ypo),e(Ms,xpo),e(Ms,VN),e(VN,$po),e(Ms,kpo),e(k,Spo),e(k,Es),e(Es,dce),e(dce,Rpo),e(Es,Ppo),e(Es,XN),e(XN,Bpo),e(Es,Ipo),e(Es,zN),e(zN,Npo),e(Es,qpo),e(k,jpo),e(k,Cs),e(Cs,cce),e(cce,Dpo),e(Cs,Gpo),e(Cs,WN),e(WN,Opo),e(Cs,Vpo),e(Cs,QN),e(QN,Xpo),e(Cs,zpo),e(k,Wpo),e(k,ws),e(ws,fce),e(fce,Qpo),e(ws,Upo),e(ws,UN),e(UN,Hpo),e(ws,Jpo),e(ws,HN),e(HN,Ypo),e(ws,Kpo),e(k,Zpo),e(k,As),e(As,mce),e(mce,e_o),e(As,o_o),e(As,JN),e(JN,r_o),e(As,t_o),e(As,YN),e(YN,a_o),e(As,n_o),e(k,s_o),e(k,Ls),e(Ls,gce),e(gce,l_o),e(Ls,i_o),e(Ls,KN),e(KN,d_o),e(Ls,c_o),e(Ls,ZN),e(ZN,f_o),e(Ls,m_o),e(k,g_o),e(k,Nh),e(Nh,hce),e(hce,h_o),e(Nh,p_o),e(Nh,eq),e(eq,__o),e(Nh,u_o),e(k,b_o),e(k,ys),e(ys,pce),e(pce,v_o),e(ys,F_o),e(ys,oq),e(oq,T_o),e(ys,M_o),e(ys,rq),e(rq,E_o),e(ys,C_o),e(k,w_o),e(k,qh),e(qh,_ce),e(_ce,A_o),e(qh,L_o),e(qh,tq),e(tq,y_o),e(qh,x_o),e(k,$_o),e(k,jh),e(jh,uce),e(uce,k_o),e(jh,S_o),e(jh,aq),e(aq,R_o),e(jh,P_o),e(k,B_o),e(k,xs),e(xs,bce),e(bce,I_o),e(xs,N_o),e(xs,nq),e(nq,q_o),e(xs,j_o),e(xs,sq),e(sq,D_o),e(xs,G_o),e(k,O_o),e(k,$s),e($s,vce),e(vce,V_o),e($s,X_o),e($s,lq),e(lq,z_o),e($s,W_o),e($s,iq),e(iq,Q_o),e($s,U_o),e(k,H_o),e(k,ks),e(ks,Fce),e(Fce,J_o),e(ks,Y_o),e(ks,dq),e(dq,K_o),e(ks,Z_o),e(ks,cq),e(cq,euo),e(ks,ouo),e(k,ruo),e(k,Dh),e(Dh,Tce),e(Tce,tuo),e(Dh,auo),e(Dh,fq),e(fq,nuo),e(Dh,suo),e(k,luo),e(k,Ss),e(Ss,Mce),e(Mce,iuo),e(Ss,duo),e(Ss,mq),e(mq,cuo),e(Ss,fuo),e(Ss,gq),e(gq,muo),e(Ss,guo),e(k,huo),e(k,Rs),e(Rs,Ece),e(Ece,puo),e(Rs,_uo),e(Rs,hq),e(hq,uuo),e(Rs,buo),e(Rs,pq),e(pq,vuo),e(Rs,Fuo),e(k,Tuo),e(k,Ps),e(Ps,Cce),e(Cce,Muo),e(Ps,Euo),e(Ps,_q),e(_q,Cuo),e(Ps,wuo),e(Ps,uq),e(uq,Auo),e(Ps,Luo),e(k,yuo),e(k,Bs),e(Bs,wce),e(wce,xuo),e(Bs,$uo),e(Bs,bq),e(bq,kuo),e(Bs,Suo),e(Bs,vq),e(vq,Ruo),e(Bs,Puo),e(k,Buo),e(k,Is),e(Is,Ace),e(Ace,Iuo),e(Is,Nuo),e(Is,Fq),e(Fq,quo),e(Is,juo),e(Is,Tq),e(Tq,Duo),e(Is,Guo),e(k,Ouo),e(k,Ns),e(Ns,Lce),e(Lce,Vuo),e(Ns,Xuo),e(Ns,Mq),e(Mq,zuo),e(Ns,Wuo),e(Ns,Eq),e(Eq,Quo),e(Ns,Uuo),e(k,Huo),e(k,qs),e(qs,yce),e(yce,Juo),e(qs,Yuo),e(qs,Cq),e(Cq,Kuo),e(qs,Zuo),e(qs,wq),e(wq,e1o),e(qs,o1o),e(k,r1o),e(k,js),e(js,xce),e(xce,t1o),e(js,a1o),e(js,Aq),e(Aq,n1o),e(js,s1o),e(js,Lq),e(Lq,l1o),e(js,i1o),e(k,d1o),e(k,Gh),e(Gh,$ce),e($ce,c1o),e(Gh,f1o),e(Gh,yq),e(yq,m1o),e(Gh,g1o),e(k,h1o),e(k,Ds),e(Ds,kce),e(kce,p1o),e(Ds,_1o),e(Ds,xq),e(xq,u1o),e(Ds,b1o),e(Ds,$q),e($q,v1o),e(Ds,F1o),e(k,T1o),e(k,Gs),e(Gs,Sce),e(Sce,M1o),e(Gs,E1o),e(Gs,kq),e(kq,C1o),e(Gs,w1o),e(Gs,Sq),e(Sq,A1o),e(Gs,L1o),e(k,y1o),e(k,Oh),e(Oh,Rce),e(Rce,x1o),e(Oh,$1o),e(Oh,Rq),e(Rq,k1o),e(Oh,S1o),e(k,R1o),e(k,Vh),e(Vh,Pce),e(Pce,P1o),e(Vh,B1o),e(Vh,Pq),e(Pq,I1o),e(Vh,N1o),e(k,q1o),e(k,Xh),e(Xh,Bce),e(Bce,j1o),e(Xh,D1o),e(Xh,Bq),e(Bq,G1o),e(Xh,O1o),e(k,V1o),e(k,zh),e(zh,Ice),e(Ice,X1o),e(zh,z1o),e(zh,Iq),e(Iq,W1o),e(zh,Q1o),e(k,U1o),e(k,Os),e(Os,Nce),e(Nce,H1o),e(Os,J1o),e(Os,Nq),e(Nq,Y1o),e(Os,K1o),e(Os,qq),e(qq,Z1o),e(Os,e8o),e(k,o8o),e(k,Wh),e(Wh,qce),e(qce,r8o),e(Wh,t8o),e(Wh,jq),e(jq,a8o),e(Wh,n8o),e(k,s8o),e(k,Vs),e(Vs,jce),e(jce,l8o),e(Vs,i8o),e(Vs,Dq),e(Dq,d8o),e(Vs,c8o),e(Vs,Gq),e(Gq,f8o),e(Vs,m8o),e(k,g8o),e(k,Xs),e(Xs,Dce),e(Dce,h8o),e(Xs,p8o),e(Xs,Oq),e(Oq,_8o),e(Xs,u8o),e(Xs,Vq),e(Vq,b8o),e(Xs,v8o),e(k,F8o),e(k,zs),e(zs,Gce),e(Gce,T8o),e(zs,M8o),e(zs,Xq),e(Xq,E8o),e(zs,C8o),e(zs,zq),e(zq,w8o),e(zs,A8o),e(k,L8o),e(k,Ws),e(Ws,Oce),e(Oce,y8o),e(Ws,x8o),e(Ws,Wq),e(Wq,$8o),e(Ws,k8o),e(Ws,Qq),e(Qq,S8o),e(Ws,R8o),e(k,P8o),e(k,Qs),e(Qs,Vce),e(Vce,B8o),e(Qs,I8o),e(Qs,Uq),e(Uq,N8o),e(Qs,q8o),e(Qs,Hq),e(Hq,j8o),e(Qs,D8o),e(k,G8o),e(k,Us),e(Us,Xce),e(Xce,O8o),e(Us,V8o),e(Us,Jq),e(Jq,X8o),e(Us,z8o),e(Us,Yq),e(Yq,W8o),e(Us,Q8o),e(k,U8o),e(k,Qh),e(Qh,zce),e(zce,H8o),e(Qh,J8o),e(Qh,Kq),e(Kq,Y8o),e(Qh,K8o),e(k,Z8o),e(k,Uh),e(Uh,Wce),e(Wce,e2o),e(Uh,o2o),e(Uh,Zq),e(Zq,r2o),e(Uh,t2o),e(k,a2o),e(k,Hs),e(Hs,Qce),e(Qce,n2o),e(Hs,s2o),e(Hs,ej),e(ej,l2o),e(Hs,i2o),e(Hs,oj),e(oj,d2o),e(Hs,c2o),e(k,f2o),e(k,Js),e(Js,Uce),e(Uce,m2o),e(Js,g2o),e(Js,rj),e(rj,h2o),e(Js,p2o),e(Js,tj),e(tj,_2o),e(Js,u2o),e(k,b2o),e(k,Ys),e(Ys,Hce),e(Hce,v2o),e(Ys,F2o),e(Ys,aj),e(aj,T2o),e(Ys,M2o),e(Ys,nj),e(nj,E2o),e(Ys,C2o),e(k,w2o),e(k,Hh),e(Hh,Jce),e(Jce,A2o),e(Hh,L2o),e(Hh,sj),e(sj,y2o),e(Hh,x2o),e(k,$2o),e(k,Jh),e(Jh,Yce),e(Yce,k2o),e(Jh,S2o),e(Jh,lj),e(lj,R2o),e(Jh,P2o),e(k,B2o),e(k,Yh),e(Yh,Kce),e(Kce,I2o),e(Yh,N2o),e(Yh,ij),e(ij,q2o),e(Yh,j2o),e(k,D2o),e(k,Ks),e(Ks,Zce),e(Zce,G2o),e(Ks,O2o),e(Ks,dj),e(dj,V2o),e(Ks,X2o),e(Ks,cj),e(cj,z2o),e(Ks,W2o),e(k,Q2o),e(k,Zs),e(Zs,efe),e(efe,U2o),e(Zs,H2o),e(Zs,fj),e(fj,J2o),e(Zs,Y2o),e(Zs,mj),e(mj,K2o),e(Zs,Z2o),e(k,ebo),e(k,Kh),e(Kh,ofe),e(ofe,obo),e(Kh,rbo),e(Kh,gj),e(gj,tbo),e(Kh,abo),e(k,nbo),e(k,Zh),e(Zh,rfe),e(rfe,sbo),e(Zh,lbo),e(Zh,hj),e(hj,ibo),e(Zh,dbo),e(k,cbo),e(k,ep),e(ep,tfe),e(tfe,fbo),e(ep,mbo),e(ep,pj),e(pj,gbo),e(ep,hbo),e(k,pbo),e(k,el),e(el,afe),e(afe,_bo),e(el,ubo),e(el,_j),e(_j,bbo),e(el,vbo),e(el,uj),e(uj,Fbo),e(el,Tbo),e(k,Mbo),e(k,op),e(op,nfe),e(nfe,Ebo),e(op,Cbo),e(op,bj),e(bj,wbo),e(op,Abo),e(k,Lbo),e(k,rp),e(rp,sfe),e(sfe,ybo),e(rp,xbo),e(rp,vj),e(vj,$bo),e(rp,kbo),e(k,Sbo),e(k,ol),e(ol,lfe),e(lfe,Rbo),e(ol,Pbo),e(ol,Fj),e(Fj,Bbo),e(ol,Ibo),e(ol,Tj),e(Tj,Nbo),e(ol,qbo),e(k,jbo),e(k,rl),e(rl,ife),e(ife,Dbo),e(rl,Gbo),e(rl,Mj),e(Mj,Obo),e(rl,Vbo),e(rl,Ej),e(Ej,Xbo),e(rl,zbo),e(k,Wbo),e(k,tl),e(tl,dfe),e(dfe,Qbo),e(tl,Ubo),e(tl,Cj),e(Cj,Hbo),e(tl,Jbo),e(tl,wj),e(wj,Ybo),e(tl,Kbo),e(k,Zbo),e(k,al),e(al,cfe),e(cfe,evo),e(al,ovo),e(al,Aj),e(Aj,rvo),e(al,tvo),e(al,Lj),e(Lj,avo),e(al,nvo),e(Sr,svo),M(tp,Sr,null),e(xo,lvo),e(xo,ap),M($y,ap,null),e(ap,ivo),e(ap,ffe),e(ffe,dvo),b(f,fUe,u),b(f,Zi,u),e(Zi,np),e(np,mfe),M(ky,mfe,null),e(Zi,cvo),e(Zi,gfe),e(gfe,fvo),b(f,mUe,u),b(f,$o,u),M(Sy,$o,null),e($o,mvo),e($o,Ry),e(Ry,gvo),e(Ry,yj),e(yj,hvo),e(Ry,pvo),e($o,_vo),e($o,Py),e(Py,uvo),e(Py,hfe),e(hfe,bvo),e(Py,vvo),e($o,Fvo),e($o,He),M(By,He,null),e(He,Tvo),e(He,pfe),e(pfe,Mvo),e(He,Evo),e(He,Oa),e(Oa,Cvo),e(Oa,_fe),e(_fe,wvo),e(Oa,Avo),e(Oa,ufe),e(ufe,Lvo),e(Oa,yvo),e(Oa,bfe),e(bfe,xvo),e(Oa,$vo),e(He,kvo),e(He,Q),e(Q,sp),e(sp,vfe),e(vfe,Svo),e(sp,Rvo),e(sp,xj),e(xj,Pvo),e(sp,Bvo),e(Q,Ivo),e(Q,lp),e(lp,Ffe),e(Ffe,Nvo),e(lp,qvo),e(lp,$j),e($j,jvo),e(lp,Dvo),e(Q,Gvo),e(Q,ip),e(ip,Tfe),e(Tfe,Ovo),e(ip,Vvo),e(ip,kj),e(kj,Xvo),e(ip,zvo),e(Q,Wvo),e(Q,dp),e(dp,Mfe),e(Mfe,Qvo),e(dp,Uvo),e(dp,Sj),e(Sj,Hvo),e(dp,Jvo),e(Q,Yvo),e(Q,cp),e(cp,Efe),e(Efe,Kvo),e(cp,Zvo),e(cp,Rj),e(Rj,eFo),e(cp,oFo),e(Q,rFo),e(Q,fp),e(fp,Cfe),e(Cfe,tFo),e(fp,aFo),e(fp,Pj),e(Pj,nFo),e(fp,sFo),e(Q,lFo),e(Q,mp),e(mp,wfe),e(wfe,iFo),e(mp,dFo),e(mp,Bj),e(Bj,cFo),e(mp,fFo),e(Q,mFo),e(Q,gp),e(gp,Afe),e(Afe,gFo),e(gp,hFo),e(gp,Ij),e(Ij,pFo),e(gp,_Fo),e(Q,uFo),e(Q,hp),e(hp,Lfe),e(Lfe,bFo),e(hp,vFo),e(hp,Nj),e(Nj,FFo),e(hp,TFo),e(Q,MFo),e(Q,pp),e(pp,yfe),e(yfe,EFo),e(pp,CFo),e(pp,qj),e(qj,wFo),e(pp,AFo),e(Q,LFo),e(Q,_p),e(_p,xfe),e(xfe,yFo),e(_p,xFo),e(_p,jj),e(jj,$Fo),e(_p,kFo),e(Q,SFo),e(Q,up),e(up,$fe),e($fe,RFo),e(up,PFo),e(up,Dj),e(Dj,BFo),e(up,IFo),e(Q,NFo),e(Q,bp),e(bp,kfe),e(kfe,qFo),e(bp,jFo),e(bp,Gj),e(Gj,DFo),e(bp,GFo),e(Q,OFo),e(Q,vp),e(vp,Sfe),e(Sfe,VFo),e(vp,XFo),e(vp,Oj),e(Oj,zFo),e(vp,WFo),e(Q,QFo),e(Q,Fp),e(Fp,Rfe),e(Rfe,UFo),e(Fp,HFo),e(Fp,Vj),e(Vj,JFo),e(Fp,YFo),e(Q,KFo),e(Q,Tp),e(Tp,Pfe),e(Pfe,ZFo),e(Tp,e6o),e(Tp,Xj),e(Xj,o6o),e(Tp,r6o),e(Q,t6o),e(Q,Mp),e(Mp,Bfe),e(Bfe,a6o),e(Mp,n6o),e(Mp,zj),e(zj,s6o),e(Mp,l6o),e(Q,i6o),e(Q,Ep),e(Ep,Ife),e(Ife,d6o),e(Ep,c6o),e(Ep,Wj),e(Wj,f6o),e(Ep,m6o),e(Q,g6o),e(Q,Cp),e(Cp,Nfe),e(Nfe,h6o),e(Cp,p6o),e(Cp,Qj),e(Qj,_6o),e(Cp,u6o),e(Q,b6o),e(Q,wp),e(wp,qfe),e(qfe,v6o),e(wp,F6o),e(wp,Uj),e(Uj,T6o),e(wp,M6o),e(Q,E6o),e(Q,Ap),e(Ap,jfe),e(jfe,C6o),e(Ap,w6o),e(Ap,Hj),e(Hj,A6o),e(Ap,L6o),e(Q,y6o),e(Q,Lp),e(Lp,Dfe),e(Dfe,x6o),e(Lp,$6o),e(Lp,Jj),e(Jj,k6o),e(Lp,S6o),e(Q,R6o),e(Q,yp),e(yp,Gfe),e(Gfe,P6o),e(yp,B6o),e(yp,Yj),e(Yj,I6o),e(yp,N6o),e(Q,q6o),e(Q,xp),e(xp,Ofe),e(Ofe,j6o),e(xp,D6o),e(xp,Kj),e(Kj,G6o),e(xp,O6o),e(Q,V6o),e(Q,$p),e($p,Vfe),e(Vfe,X6o),e($p,z6o),e($p,Zj),e(Zj,W6o),e($p,Q6o),e(Q,U6o),e(Q,kp),e(kp,Xfe),e(Xfe,H6o),e(kp,J6o),e(kp,eD),e(eD,Y6o),e(kp,K6o),e(Q,Z6o),e(Q,Sp),e(Sp,zfe),e(zfe,eTo),e(Sp,oTo),e(Sp,oD),e(oD,rTo),e(Sp,tTo),e(Q,aTo),e(Q,Rp),e(Rp,Wfe),e(Wfe,nTo),e(Rp,sTo),e(Rp,rD),e(rD,lTo),e(Rp,iTo),e(Q,dTo),e(Q,Pp),e(Pp,Qfe),e(Qfe,cTo),e(Pp,fTo),e(Pp,tD),e(tD,mTo),e(Pp,gTo),e(Q,hTo),e(Q,Bp),e(Bp,Ufe),e(Ufe,pTo),e(Bp,_To),e(Bp,aD),e(aD,uTo),e(Bp,bTo),e(Q,vTo),e(Q,Ip),e(Ip,Hfe),e(Hfe,FTo),e(Ip,TTo),e(Ip,nD),e(nD,MTo),e(Ip,ETo),e(Q,CTo),e(Q,Np),e(Np,Jfe),e(Jfe,wTo),e(Np,ATo),e(Np,sD),e(sD,LTo),e(Np,yTo),e(Q,xTo),e(Q,qp),e(qp,Yfe),e(Yfe,$To),e(qp,kTo),e(qp,lD),e(lD,STo),e(qp,RTo),e(Q,PTo),e(Q,jp),e(jp,Kfe),e(Kfe,BTo),e(jp,ITo),e(jp,iD),e(iD,NTo),e(jp,qTo),e(Q,jTo),e(Q,Dp),e(Dp,Zfe),e(Zfe,DTo),e(Dp,GTo),e(Dp,dD),e(dD,OTo),e(Dp,VTo),e(Q,XTo),e(Q,Gp),e(Gp,eme),e(eme,zTo),e(Gp,WTo),e(Gp,cD),e(cD,QTo),e(Gp,UTo),e(Q,HTo),e(Q,Op),e(Op,ome),e(ome,JTo),e(Op,YTo),e(Op,fD),e(fD,KTo),e(Op,ZTo),e(Q,e7o),e(Q,Vp),e(Vp,rme),e(rme,o7o),e(Vp,r7o),e(Vp,mD),e(mD,t7o),e(Vp,a7o),e(He,n7o),M(Xp,He,null),e(He,s7o),M(zp,He,null),e($o,l7o),e($o,Wp),M(Iy,Wp,null),e(Wp,i7o),e(Wp,tme),e(tme,d7o),b(f,gUe,u),b(f,ed,u),e(ed,Qp),e(Qp,ame),M(Ny,ame,null),e(ed,c7o),e(ed,nme),e(nme,f7o),b(f,hUe,u),b(f,ko,u),M(qy,ko,null),e(ko,m7o),e(ko,jy),e(jy,g7o),e(jy,gD),e(gD,h7o),e(jy,p7o),e(ko,_7o),e(ko,Dy),e(Dy,u7o),e(Dy,sme),e(sme,b7o),e(Dy,v7o),e(ko,F7o),e(ko,Je),M(Gy,Je,null),e(Je,T7o),e(Je,lme),e(lme,M7o),e(Je,E7o),e(Je,od),e(od,C7o),e(od,ime),e(ime,w7o),e(od,A7o),e(od,dme),e(dme,L7o),e(od,y7o),e(Je,x7o),e(Je,ce),e(ce,Up),e(Up,cme),e(cme,$7o),e(Up,k7o),e(Up,hD),e(hD,S7o),e(Up,R7o),e(ce,P7o),e(ce,Hp),e(Hp,fme),e(fme,B7o),e(Hp,I7o),e(Hp,pD),e(pD,N7o),e(Hp,q7o),e(ce,j7o),e(ce,Jp),e(Jp,mme),e(mme,D7o),e(Jp,G7o),e(Jp,_D),e(_D,O7o),e(Jp,V7o),e(ce,X7o),e(ce,Yp),e(Yp,gme),e(gme,z7o),e(Yp,W7o),e(Yp,uD),e(uD,Q7o),e(Yp,U7o),e(ce,H7o),e(ce,Kp),e(Kp,hme),e(hme,J7o),e(Kp,Y7o),e(Kp,bD),e(bD,K7o),e(Kp,Z7o),e(ce,eMo),e(ce,Zp),e(Zp,pme),e(pme,oMo),e(Zp,rMo),e(Zp,vD),e(vD,tMo),e(Zp,aMo),e(ce,nMo),e(ce,e_),e(e_,_me),e(_me,sMo),e(e_,lMo),e(e_,FD),e(FD,iMo),e(e_,dMo),e(ce,cMo),e(ce,o_),e(o_,ume),e(ume,fMo),e(o_,mMo),e(o_,TD),e(TD,gMo),e(o_,hMo),e(ce,pMo),e(ce,r_),e(r_,bme),e(bme,_Mo),e(r_,uMo),e(r_,MD),e(MD,bMo),e(r_,vMo),e(ce,FMo),e(ce,t_),e(t_,vme),e(vme,TMo),e(t_,MMo),e(t_,ED),e(ED,EMo),e(t_,CMo),e(ce,wMo),e(ce,a_),e(a_,Fme),e(Fme,AMo),e(a_,LMo),e(a_,CD),e(CD,yMo),e(a_,xMo),e(ce,$Mo),e(ce,n_),e(n_,Tme),e(Tme,kMo),e(n_,SMo),e(n_,wD),e(wD,RMo),e(n_,PMo),e(ce,BMo),e(ce,s_),e(s_,Mme),e(Mme,IMo),e(s_,NMo),e(s_,AD),e(AD,qMo),e(s_,jMo),e(ce,DMo),e(ce,l_),e(l_,Eme),e(Eme,GMo),e(l_,OMo),e(l_,LD),e(LD,VMo),e(l_,XMo),e(ce,zMo),e(ce,i_),e(i_,Cme),e(Cme,WMo),e(i_,QMo),e(i_,yD),e(yD,UMo),e(i_,HMo),e(ce,JMo),e(ce,d_),e(d_,wme),e(wme,YMo),e(d_,KMo),e(d_,xD),e(xD,ZMo),e(d_,eEo),e(ce,oEo),e(ce,c_),e(c_,Ame),e(Ame,rEo),e(c_,tEo),e(c_,$D),e($D,aEo),e(c_,nEo),e(ce,sEo),e(ce,f_),e(f_,Lme),e(Lme,lEo),e(f_,iEo),e(f_,kD),e(kD,dEo),e(f_,cEo),e(ce,fEo),e(ce,m_),e(m_,yme),e(yme,mEo),e(m_,gEo),e(m_,SD),e(SD,hEo),e(m_,pEo),e(ce,_Eo),e(ce,g_),e(g_,xme),e(xme,uEo),e(g_,bEo),e(g_,RD),e(RD,vEo),e(g_,FEo),e(Je,TEo),M(h_,Je,null),e(Je,MEo),M(p_,Je,null),e(ko,EEo),e(ko,__),M(Oy,__,null),e(__,CEo),e(__,$me),e($me,wEo),b(f,pUe,u),b(f,rd,u),e(rd,u_),e(u_,kme),M(Vy,kme,null),e(rd,AEo),e(rd,Sme),e(Sme,LEo),b(f,_Ue,u),b(f,So,u),M(Xy,So,null),e(So,yEo),e(So,td),e(td,xEo),e(td,PD),e(PD,$Eo),e(td,kEo),e(td,BD),e(BD,SEo),e(td,REo),e(So,PEo),e(So,zy),e(zy,BEo),e(zy,Rme),e(Rme,IEo),e(zy,NEo),e(So,qEo),e(So,mt),M(Wy,mt,null),e(mt,jEo),e(mt,Pme),e(Pme,DEo),e(mt,GEo),e(mt,ad),e(ad,OEo),e(ad,Bme),e(Bme,VEo),e(ad,XEo),e(ad,ID),e(ID,zEo),e(ad,WEo),e(mt,QEo),M(b_,mt,null),e(So,UEo),e(So,Ye),M(Qy,Ye,null),e(Ye,HEo),e(Ye,Ime),e(Ime,JEo),e(Ye,YEo),e(Ye,Va),e(Va,KEo),e(Va,Nme),e(Nme,ZEo),e(Va,e4o),e(Va,qme),e(qme,o4o),e(Va,r4o),e(Va,jme),e(jme,t4o),e(Va,a4o),e(Ye,n4o),e(Ye,y),e(y,v_),e(v_,Dme),e(Dme,s4o),e(v_,l4o),e(v_,ND),e(ND,i4o),e(v_,d4o),e(y,c4o),e(y,F_),e(F_,Gme),e(Gme,f4o),e(F_,m4o),e(F_,qD),e(qD,g4o),e(F_,h4o),e(y,p4o),e(y,T_),e(T_,Ome),e(Ome,_4o),e(T_,u4o),e(T_,jD),e(jD,b4o),e(T_,v4o),e(y,F4o),e(y,M_),e(M_,Vme),e(Vme,T4o),e(M_,M4o),e(M_,DD),e(DD,E4o),e(M_,C4o),e(y,w4o),e(y,E_),e(E_,Xme),e(Xme,A4o),e(E_,L4o),e(E_,GD),e(GD,y4o),e(E_,x4o),e(y,$4o),e(y,C_),e(C_,zme),e(zme,k4o),e(C_,S4o),e(C_,OD),e(OD,R4o),e(C_,P4o),e(y,B4o),e(y,w_),e(w_,Wme),e(Wme,I4o),e(w_,N4o),e(w_,VD),e(VD,q4o),e(w_,j4o),e(y,D4o),e(y,A_),e(A_,Qme),e(Qme,G4o),e(A_,O4o),e(A_,XD),e(XD,V4o),e(A_,X4o),e(y,z4o),e(y,L_),e(L_,Ume),e(Ume,W4o),e(L_,Q4o),e(L_,zD),e(zD,U4o),e(L_,H4o),e(y,J4o),e(y,y_),e(y_,Hme),e(Hme,Y4o),e(y_,K4o),e(y_,WD),e(WD,Z4o),e(y_,eCo),e(y,oCo),e(y,x_),e(x_,Jme),e(Jme,rCo),e(x_,tCo),e(x_,QD),e(QD,aCo),e(x_,nCo),e(y,sCo),e(y,$_),e($_,Yme),e(Yme,lCo),e($_,iCo),e($_,UD),e(UD,dCo),e($_,cCo),e(y,fCo),e(y,k_),e(k_,Kme),e(Kme,mCo),e(k_,gCo),e(k_,HD),e(HD,hCo),e(k_,pCo),e(y,_Co),e(y,S_),e(S_,Zme),e(Zme,uCo),e(S_,bCo),e(S_,JD),e(JD,vCo),e(S_,FCo),e(y,TCo),e(y,R_),e(R_,ege),e(ege,MCo),e(R_,ECo),e(R_,YD),e(YD,CCo),e(R_,wCo),e(y,ACo),e(y,P_),e(P_,oge),e(oge,LCo),e(P_,yCo),e(P_,KD),e(KD,xCo),e(P_,$Co),e(y,kCo),e(y,B_),e(B_,rge),e(rge,SCo),e(B_,RCo),e(B_,ZD),e(ZD,PCo),e(B_,BCo),e(y,ICo),e(y,I_),e(I_,tge),e(tge,NCo),e(I_,qCo),e(I_,eG),e(eG,jCo),e(I_,DCo),e(y,GCo),e(y,N_),e(N_,age),e(age,OCo),e(N_,VCo),e(N_,oG),e(oG,XCo),e(N_,zCo),e(y,WCo),e(y,q_),e(q_,nge),e(nge,QCo),e(q_,UCo),e(q_,rG),e(rG,HCo),e(q_,JCo),e(y,YCo),e(y,j_),e(j_,sge),e(sge,KCo),e(j_,ZCo),e(j_,tG),e(tG,e3o),e(j_,o3o),e(y,r3o),e(y,D_),e(D_,lge),e(lge,t3o),e(D_,a3o),e(D_,aG),e(aG,n3o),e(D_,s3o),e(y,l3o),e(y,G_),e(G_,ige),e(ige,i3o),e(G_,d3o),e(G_,nG),e(nG,c3o),e(G_,f3o),e(y,m3o),e(y,O_),e(O_,dge),e(dge,g3o),e(O_,h3o),e(O_,sG),e(sG,p3o),e(O_,_3o),e(y,u3o),e(y,V_),e(V_,cge),e(cge,b3o),e(V_,v3o),e(V_,lG),e(lG,F3o),e(V_,T3o),e(y,M3o),e(y,X_),e(X_,fge),e(fge,E3o),e(X_,C3o),e(X_,iG),e(iG,w3o),e(X_,A3o),e(y,L3o),e(y,z_),e(z_,mge),e(mge,y3o),e(z_,x3o),e(z_,dG),e(dG,$3o),e(z_,k3o),e(y,S3o),e(y,W_),e(W_,gge),e(gge,R3o),e(W_,P3o),e(W_,cG),e(cG,B3o),e(W_,I3o),e(y,N3o),e(y,Q_),e(Q_,hge),e(hge,q3o),e(Q_,j3o),e(Q_,fG),e(fG,D3o),e(Q_,G3o),e(y,O3o),e(y,U_),e(U_,pge),e(pge,V3o),e(U_,X3o),e(U_,mG),e(mG,z3o),e(U_,W3o),e(y,Q3o),e(y,H_),e(H_,_ge),e(_ge,U3o),e(H_,H3o),e(H_,gG),e(gG,J3o),e(H_,Y3o),e(y,K3o),e(y,J_),e(J_,uge),e(uge,Z3o),e(J_,e5o),e(J_,hG),e(hG,o5o),e(J_,r5o),e(y,t5o),e(y,Y_),e(Y_,bge),e(bge,a5o),e(Y_,n5o),e(Y_,pG),e(pG,s5o),e(Y_,l5o),e(y,i5o),e(y,K_),e(K_,vge),e(vge,d5o),e(K_,c5o),e(K_,_G),e(_G,f5o),e(K_,m5o),e(y,g5o),e(y,Z_),e(Z_,Fge),e(Fge,h5o),e(Z_,p5o),e(Z_,uG),e(uG,_5o),e(Z_,u5o),e(y,b5o),e(y,nl),e(nl,Tge),e(Tge,v5o),e(nl,F5o),e(nl,bG),e(bG,T5o),e(nl,M5o),e(nl,vG),e(vG,E5o),e(nl,C5o),e(y,w5o),e(y,eu),e(eu,Mge),e(Mge,A5o),e(eu,L5o),e(eu,FG),e(FG,y5o),e(eu,x5o),e(y,$5o),e(y,ou),e(ou,Ege),e(Ege,k5o),e(ou,S5o),e(ou,TG),e(TG,R5o),e(ou,P5o),e(y,B5o),e(y,ru),e(ru,Cge),e(Cge,I5o),e(ru,N5o),e(ru,MG),e(MG,q5o),e(ru,j5o),e(y,D5o),e(y,tu),e(tu,wge),e(wge,G5o),e(tu,O5o),e(tu,EG),e(EG,V5o),e(tu,X5o),e(y,z5o),e(y,au),e(au,Age),e(Age,W5o),e(au,Q5o),e(au,CG),e(CG,U5o),e(au,H5o),e(y,J5o),e(y,nu),e(nu,Lge),e(Lge,Y5o),e(nu,K5o),e(nu,wG),e(wG,Z5o),e(nu,e0o),e(y,o0o),e(y,su),e(su,yge),e(yge,r0o),e(su,t0o),e(su,AG),e(AG,a0o),e(su,n0o),e(y,s0o),e(y,lu),e(lu,xge),e(xge,l0o),e(lu,i0o),e(lu,LG),e(LG,d0o),e(lu,c0o),e(y,f0o),e(y,iu),e(iu,$ge),e($ge,m0o),e(iu,g0o),e(iu,yG),e(yG,h0o),e(iu,p0o),e(y,_0o),e(y,du),e(du,kge),e(kge,u0o),e(du,b0o),e(du,xG),e(xG,v0o),e(du,F0o),e(y,T0o),e(y,cu),e(cu,Sge),e(Sge,M0o),e(cu,E0o),e(cu,$G),e($G,C0o),e(cu,w0o),e(y,A0o),e(y,fu),e(fu,Rge),e(Rge,L0o),e(fu,y0o),e(fu,kG),e(kG,x0o),e(fu,$0o),e(y,k0o),e(y,mu),e(mu,Pge),e(Pge,S0o),e(mu,R0o),e(mu,SG),e(SG,P0o),e(mu,B0o),e(y,I0o),e(y,gu),e(gu,Bge),e(Bge,N0o),e(gu,q0o),e(gu,RG),e(RG,j0o),e(gu,D0o),e(y,G0o),e(y,hu),e(hu,Ige),e(Ige,O0o),e(hu,V0o),e(hu,PG),e(PG,X0o),e(hu,z0o),e(y,W0o),e(y,pu),e(pu,Nge),e(Nge,Q0o),e(pu,U0o),e(pu,BG),e(BG,H0o),e(pu,J0o),e(y,Y0o),e(y,_u),e(_u,qge),e(qge,K0o),e(_u,Z0o),e(_u,IG),e(IG,ewo),e(_u,owo),e(y,rwo),e(y,uu),e(uu,jge),e(jge,two),e(uu,awo),e(uu,NG),e(NG,nwo),e(uu,swo),e(y,lwo),e(y,bu),e(bu,Dge),e(Dge,iwo),e(bu,dwo),e(bu,qG),e(qG,cwo),e(bu,fwo),e(y,mwo),e(y,vu),e(vu,Gge),e(Gge,gwo),e(vu,hwo),e(vu,jG),e(jG,pwo),e(vu,_wo),e(y,uwo),e(y,Fu),e(Fu,Oge),e(Oge,bwo),e(Fu,vwo),e(Fu,DG),e(DG,Fwo),e(Fu,Two),e(y,Mwo),e(y,Tu),e(Tu,Vge),e(Vge,Ewo),e(Tu,Cwo),e(Tu,GG),e(GG,wwo),e(Tu,Awo),e(y,Lwo),e(y,Mu),e(Mu,Xge),e(Xge,ywo),e(Mu,xwo),e(Mu,OG),e(OG,$wo),e(Mu,kwo),e(y,Swo),e(y,Eu),e(Eu,zge),e(zge,Rwo),e(Eu,Pwo),e(Eu,VG),e(VG,Bwo),e(Eu,Iwo),e(y,Nwo),e(y,Cu),e(Cu,Wge),e(Wge,qwo),e(Cu,jwo),e(Cu,XG),e(XG,Dwo),e(Cu,Gwo),e(y,Owo),e(y,wu),e(wu,Qge),e(Qge,Vwo),e(wu,Xwo),e(wu,zG),e(zG,zwo),e(wu,Wwo),e(y,Qwo),e(y,Au),e(Au,Uge),e(Uge,Uwo),e(Au,Hwo),e(Au,WG),e(WG,Jwo),e(Au,Ywo),e(y,Kwo),e(y,Lu),e(Lu,Hge),e(Hge,Zwo),e(Lu,eAo),e(Lu,QG),e(QG,oAo),e(Lu,rAo),e(y,tAo),e(y,yu),e(yu,Jge),e(Jge,aAo),e(yu,nAo),e(yu,UG),e(UG,sAo),e(yu,lAo),e(y,iAo),e(y,xu),e(xu,Yge),e(Yge,dAo),e(xu,cAo),e(xu,HG),e(HG,fAo),e(xu,mAo),e(y,gAo),e(y,$u),e($u,Kge),e(Kge,hAo),e($u,pAo),e($u,JG),e(JG,_Ao),e($u,uAo),e(y,bAo),e(y,ku),e(ku,Zge),e(Zge,vAo),e(ku,FAo),e(ku,YG),e(YG,TAo),e(ku,MAo),e(y,EAo),e(y,Su),e(Su,ehe),e(ehe,CAo),e(Su,wAo),e(Su,KG),e(KG,AAo),e(Su,LAo),e(y,yAo),e(y,Ru),e(Ru,ohe),e(ohe,xAo),e(Ru,$Ao),e(Ru,ZG),e(ZG,kAo),e(Ru,SAo),e(y,RAo),e(y,Pu),e(Pu,rhe),e(rhe,PAo),e(Pu,BAo),e(Pu,eO),e(eO,IAo),e(Pu,NAo),e(y,qAo),e(y,Bu),e(Bu,the),e(the,jAo),e(Bu,DAo),e(Bu,oO),e(oO,GAo),e(Bu,OAo),e(y,VAo),e(y,Iu),e(Iu,ahe),e(ahe,XAo),e(Iu,zAo),e(Iu,rO),e(rO,WAo),e(Iu,QAo),e(y,UAo),e(y,Nu),e(Nu,nhe),e(nhe,HAo),e(Nu,JAo),e(Nu,tO),e(tO,YAo),e(Nu,KAo),e(y,ZAo),e(y,qu),e(qu,she),e(she,eLo),e(qu,oLo),e(qu,aO),e(aO,rLo),e(qu,tLo),e(y,aLo),e(y,ju),e(ju,lhe),e(lhe,nLo),e(ju,sLo),e(ju,nO),e(nO,lLo),e(ju,iLo),e(y,dLo),e(y,Du),e(Du,ihe),e(ihe,cLo),e(Du,fLo),e(Du,sO),e(sO,mLo),e(Du,gLo),e(y,hLo),e(y,Gu),e(Gu,dhe),e(dhe,pLo),e(Gu,_Lo),e(Gu,lO),e(lO,uLo),e(Gu,bLo),e(y,vLo),e(y,Ou),e(Ou,che),e(che,FLo),e(Ou,TLo),e(Ou,iO),e(iO,MLo),e(Ou,ELo),e(y,CLo),e(y,Vu),e(Vu,fhe),e(fhe,wLo),e(Vu,ALo),e(Vu,dO),e(dO,LLo),e(Vu,yLo),e(y,xLo),e(y,Xu),e(Xu,mhe),e(mhe,$Lo),e(Xu,kLo),e(Xu,cO),e(cO,SLo),e(Xu,RLo),e(y,PLo),e(y,zu),e(zu,ghe),e(ghe,BLo),e(zu,ILo),e(zu,fO),e(fO,NLo),e(zu,qLo),e(y,jLo),e(y,Wu),e(Wu,hhe),e(hhe,DLo),e(Wu,GLo),e(Wu,mO),e(mO,OLo),e(Wu,VLo),e(y,XLo),e(y,Qu),e(Qu,phe),e(phe,zLo),e(Qu,WLo),e(Qu,gO),e(gO,QLo),e(Qu,ULo),e(y,HLo),e(y,Uu),e(Uu,_he),e(_he,JLo),e(Uu,YLo),e(Uu,hO),e(hO,KLo),e(Uu,ZLo),e(y,eyo),e(y,Hu),e(Hu,uhe),e(uhe,oyo),e(Hu,ryo),e(Hu,pO),e(pO,tyo),e(Hu,ayo),e(y,nyo),e(y,Ju),e(Ju,bhe),e(bhe,syo),e(Ju,lyo),e(Ju,_O),e(_O,iyo),e(Ju,dyo),e(y,cyo),e(y,Yu),e(Yu,vhe),e(vhe,fyo),e(Yu,myo),e(Yu,uO),e(uO,gyo),e(Yu,hyo),e(y,pyo),e(y,Ku),e(Ku,Fhe),e(Fhe,_yo),e(Ku,uyo),e(Ku,bO),e(bO,byo),e(Ku,vyo),e(y,Fyo),e(y,Zu),e(Zu,The),e(The,Tyo),e(Zu,Myo),e(Zu,vO),e(vO,Eyo),e(Zu,Cyo),e(y,wyo),e(y,e1),e(e1,Mhe),e(Mhe,Ayo),e(e1,Lyo),e(e1,FO),e(FO,yyo),e(e1,xyo),e(y,$yo),e(y,o1),e(o1,Ehe),e(Ehe,kyo),e(o1,Syo),e(o1,TO),e(TO,Ryo),e(o1,Pyo),e(y,Byo),e(y,r1),e(r1,Che),e(Che,Iyo),e(r1,Nyo),e(r1,MO),e(MO,qyo),e(r1,jyo),e(y,Dyo),e(y,t1),e(t1,whe),e(whe,Gyo),e(t1,Oyo),e(t1,EO),e(EO,Vyo),e(t1,Xyo),e(y,zyo),e(y,a1),e(a1,Ahe),e(Ahe,Wyo),e(a1,Qyo),e(a1,CO),e(CO,Uyo),e(a1,Hyo),e(y,Jyo),e(y,n1),e(n1,Lhe),e(Lhe,Yyo),e(n1,Kyo),e(n1,wO),e(wO,Zyo),e(n1,e9o),e(y,o9o),e(y,s1),e(s1,yhe),e(yhe,r9o),e(s1,t9o),e(s1,AO),e(AO,a9o),e(s1,n9o),e(y,s9o),e(y,l1),e(l1,xhe),e(xhe,l9o),e(l1,i9o),e(l1,LO),e(LO,d9o),e(l1,c9o),e(y,f9o),e(y,i1),e(i1,$he),e($he,m9o),e(i1,g9o),e(i1,yO),e(yO,h9o),e(i1,p9o),e(y,_9o),e(y,d1),e(d1,khe),e(khe,u9o),e(d1,b9o),e(d1,xO),e(xO,v9o),e(d1,F9o),e(y,T9o),e(y,c1),e(c1,She),e(She,M9o),e(c1,E9o),e(c1,$O),e($O,C9o),e(c1,w9o),e(y,A9o),e(y,f1),e(f1,Rhe),e(Rhe,L9o),e(f1,y9o),e(f1,kO),e(kO,x9o),e(f1,$9o),e(y,k9o),e(y,m1),e(m1,Phe),e(Phe,S9o),e(m1,R9o),e(m1,SO),e(SO,P9o),e(m1,B9o),e(y,I9o),e(y,g1),e(g1,Bhe),e(Bhe,N9o),e(g1,q9o),e(g1,RO),e(RO,j9o),e(g1,D9o),e(y,G9o),e(y,h1),e(h1,Ihe),e(Ihe,O9o),e(h1,V9o),e(h1,PO),e(PO,X9o),e(h1,z9o),e(y,W9o),e(y,p1),e(p1,Nhe),e(Nhe,Q9o),e(p1,U9o),e(p1,BO),e(BO,H9o),e(p1,J9o),e(y,Y9o),e(y,_1),e(_1,qhe),e(qhe,K9o),e(_1,Z9o),e(_1,IO),e(IO,exo),e(_1,oxo),e(y,rxo),e(y,u1),e(u1,jhe),e(jhe,txo),e(u1,axo),e(u1,NO),e(NO,nxo),e(u1,sxo),e(y,lxo),e(y,b1),e(b1,Dhe),e(Dhe,ixo),e(b1,dxo),e(b1,qO),e(qO,cxo),e(b1,fxo),e(y,mxo),e(y,v1),e(v1,Ghe),e(Ghe,gxo),e(v1,hxo),e(v1,jO),e(jO,pxo),e(v1,_xo),e(y,uxo),e(y,F1),e(F1,Ohe),e(Ohe,bxo),e(F1,vxo),e(F1,DO),e(DO,Fxo),e(F1,Txo),e(y,Mxo),e(y,T1),e(T1,Vhe),e(Vhe,Exo),e(T1,Cxo),e(T1,GO),e(GO,wxo),e(T1,Axo),e(y,Lxo),e(y,M1),e(M1,Xhe),e(Xhe,yxo),e(M1,xxo),e(M1,OO),e(OO,$xo),e(M1,kxo),e(y,Sxo),e(y,E1),e(E1,zhe),e(zhe,Rxo),e(E1,Pxo),e(E1,VO),e(VO,Bxo),e(E1,Ixo),e(y,Nxo),e(y,C1),e(C1,Whe),e(Whe,qxo),e(C1,jxo),e(C1,XO),e(XO,Dxo),e(C1,Gxo),e(y,Oxo),e(y,w1),e(w1,Qhe),e(Qhe,Vxo),e(w1,Xxo),e(w1,zO),e(zO,zxo),e(w1,Wxo),e(Ye,Qxo),e(Ye,A1),e(A1,Uxo),e(A1,Uhe),e(Uhe,Hxo),e(A1,Jxo),e(A1,Hhe),e(Hhe,Yxo),e(Ye,Kxo),M(L1,Ye,null),b(f,uUe,u),b(f,nd,u),e(nd,y1),e(y1,Jhe),M(Uy,Jhe,null),e(nd,Zxo),e(nd,Yhe),e(Yhe,e$o),b(f,bUe,u),b(f,Ro,u),M(Hy,Ro,null),e(Ro,o$o),e(Ro,sd),e(sd,r$o),e(sd,WO),e(WO,t$o),e(sd,a$o),e(sd,QO),e(QO,n$o),e(sd,s$o),e(Ro,l$o),e(Ro,Jy),e(Jy,i$o),e(Jy,Khe),e(Khe,d$o),e(Jy,c$o),e(Ro,f$o),e(Ro,gt),M(Yy,gt,null),e(gt,m$o),e(gt,Zhe),e(Zhe,g$o),e(gt,h$o),e(gt,ld),e(ld,p$o),e(ld,epe),e(epe,_$o),e(ld,u$o),e(ld,UO),e(UO,b$o),e(ld,v$o),e(gt,F$o),M(x1,gt,null),e(Ro,T$o),e(Ro,Ke),M(Ky,Ke,null),e(Ke,M$o),e(Ke,ope),e(ope,E$o),e(Ke,C$o),e(Ke,Xa),e(Xa,w$o),e(Xa,rpe),e(rpe,A$o),e(Xa,L$o),e(Xa,tpe),e(tpe,y$o),e(Xa,x$o),e(Xa,ape),e(ape,$$o),e(Xa,k$o),e(Ke,S$o),e(Ke,G),e(G,$1),e($1,npe),e(npe,R$o),e($1,P$o),e($1,HO),e(HO,B$o),e($1,I$o),e(G,N$o),e(G,k1),e(k1,spe),e(spe,q$o),e(k1,j$o),e(k1,JO),e(JO,D$o),e(k1,G$o),e(G,O$o),e(G,S1),e(S1,lpe),e(lpe,V$o),e(S1,X$o),e(S1,YO),e(YO,z$o),e(S1,W$o),e(G,Q$o),e(G,R1),e(R1,ipe),e(ipe,U$o),e(R1,H$o),e(R1,KO),e(KO,J$o),e(R1,Y$o),e(G,K$o),e(G,P1),e(P1,dpe),e(dpe,Z$o),e(P1,eko),e(P1,ZO),e(ZO,oko),e(P1,rko),e(G,tko),e(G,B1),e(B1,cpe),e(cpe,ako),e(B1,nko),e(B1,eV),e(eV,sko),e(B1,lko),e(G,iko),e(G,I1),e(I1,fpe),e(fpe,dko),e(I1,cko),e(I1,oV),e(oV,fko),e(I1,mko),e(G,gko),e(G,N1),e(N1,mpe),e(mpe,hko),e(N1,pko),e(N1,rV),e(rV,_ko),e(N1,uko),e(G,bko),e(G,q1),e(q1,gpe),e(gpe,vko),e(q1,Fko),e(q1,tV),e(tV,Tko),e(q1,Mko),e(G,Eko),e(G,j1),e(j1,hpe),e(hpe,Cko),e(j1,wko),e(j1,aV),e(aV,Ako),e(j1,Lko),e(G,yko),e(G,D1),e(D1,ppe),e(ppe,xko),e(D1,$ko),e(D1,nV),e(nV,kko),e(D1,Sko),e(G,Rko),e(G,G1),e(G1,_pe),e(_pe,Pko),e(G1,Bko),e(G1,sV),e(sV,Iko),e(G1,Nko),e(G,qko),e(G,O1),e(O1,upe),e(upe,jko),e(O1,Dko),e(O1,lV),e(lV,Gko),e(O1,Oko),e(G,Vko),e(G,V1),e(V1,bpe),e(bpe,Xko),e(V1,zko),e(V1,iV),e(iV,Wko),e(V1,Qko),e(G,Uko),e(G,X1),e(X1,vpe),e(vpe,Hko),e(X1,Jko),e(X1,dV),e(dV,Yko),e(X1,Kko),e(G,Zko),e(G,z1),e(z1,Fpe),e(Fpe,eSo),e(z1,oSo),e(z1,cV),e(cV,rSo),e(z1,tSo),e(G,aSo),e(G,W1),e(W1,Tpe),e(Tpe,nSo),e(W1,sSo),e(W1,fV),e(fV,lSo),e(W1,iSo),e(G,dSo),e(G,Q1),e(Q1,Mpe),e(Mpe,cSo),e(Q1,fSo),e(Q1,mV),e(mV,mSo),e(Q1,gSo),e(G,hSo),e(G,U1),e(U1,Epe),e(Epe,pSo),e(U1,_So),e(U1,gV),e(gV,uSo),e(U1,bSo),e(G,vSo),e(G,H1),e(H1,Cpe),e(Cpe,FSo),e(H1,TSo),e(H1,hV),e(hV,MSo),e(H1,ESo),e(G,CSo),e(G,J1),e(J1,wpe),e(wpe,wSo),e(J1,ASo),e(J1,pV),e(pV,LSo),e(J1,ySo),e(G,xSo),e(G,Y1),e(Y1,Ape),e(Ape,$So),e(Y1,kSo),e(Y1,_V),e(_V,SSo),e(Y1,RSo),e(G,PSo),e(G,K1),e(K1,Lpe),e(Lpe,BSo),e(K1,ISo),e(K1,uV),e(uV,NSo),e(K1,qSo),e(G,jSo),e(G,Z1),e(Z1,ype),e(ype,DSo),e(Z1,GSo),e(Z1,bV),e(bV,OSo),e(Z1,VSo),e(G,XSo),e(G,e8),e(e8,xpe),e(xpe,zSo),e(e8,WSo),e(e8,vV),e(vV,QSo),e(e8,USo),e(G,HSo),e(G,o8),e(o8,$pe),e($pe,JSo),e(o8,YSo),e(o8,FV),e(FV,KSo),e(o8,ZSo),e(G,eRo),e(G,r8),e(r8,kpe),e(kpe,oRo),e(r8,rRo),e(r8,TV),e(TV,tRo),e(r8,aRo),e(G,nRo),e(G,t8),e(t8,Spe),e(Spe,sRo),e(t8,lRo),e(t8,MV),e(MV,iRo),e(t8,dRo),e(G,cRo),e(G,a8),e(a8,Rpe),e(Rpe,fRo),e(a8,mRo),e(a8,EV),e(EV,gRo),e(a8,hRo),e(G,pRo),e(G,n8),e(n8,Ppe),e(Ppe,_Ro),e(n8,uRo),e(n8,CV),e(CV,bRo),e(n8,vRo),e(G,FRo),e(G,s8),e(s8,Bpe),e(Bpe,TRo),e(s8,MRo),e(s8,wV),e(wV,ERo),e(s8,CRo),e(G,wRo),e(G,l8),e(l8,Ipe),e(Ipe,ARo),e(l8,LRo),e(l8,AV),e(AV,yRo),e(l8,xRo),e(G,$Ro),e(G,i8),e(i8,Npe),e(Npe,kRo),e(i8,SRo),e(i8,LV),e(LV,RRo),e(i8,PRo),e(G,BRo),e(G,d8),e(d8,qpe),e(qpe,IRo),e(d8,NRo),e(d8,yV),e(yV,qRo),e(d8,jRo),e(G,DRo),e(G,c8),e(c8,jpe),e(jpe,GRo),e(c8,ORo),e(c8,xV),e(xV,VRo),e(c8,XRo),e(G,zRo),e(G,f8),e(f8,Dpe),e(Dpe,WRo),e(f8,QRo),e(f8,$V),e($V,URo),e(f8,HRo),e(G,JRo),e(G,m8),e(m8,Gpe),e(Gpe,YRo),e(m8,KRo),e(m8,kV),e(kV,ZRo),e(m8,ePo),e(G,oPo),e(G,g8),e(g8,Ope),e(Ope,rPo),e(g8,tPo),e(g8,SV),e(SV,aPo),e(g8,nPo),e(G,sPo),e(G,h8),e(h8,Vpe),e(Vpe,lPo),e(h8,iPo),e(h8,RV),e(RV,dPo),e(h8,cPo),e(G,fPo),e(G,p8),e(p8,Xpe),e(Xpe,mPo),e(p8,gPo),e(p8,PV),e(PV,hPo),e(p8,pPo),e(G,_Po),e(G,_8),e(_8,zpe),e(zpe,uPo),e(_8,bPo),e(_8,BV),e(BV,vPo),e(_8,FPo),e(G,TPo),e(G,u8),e(u8,Wpe),e(Wpe,MPo),e(u8,EPo),e(u8,IV),e(IV,CPo),e(u8,wPo),e(G,APo),e(G,b8),e(b8,Qpe),e(Qpe,LPo),e(b8,yPo),e(b8,NV),e(NV,xPo),e(b8,$Po),e(G,kPo),e(G,v8),e(v8,Upe),e(Upe,SPo),e(v8,RPo),e(v8,qV),e(qV,PPo),e(v8,BPo),e(G,IPo),e(G,F8),e(F8,Hpe),e(Hpe,NPo),e(F8,qPo),e(F8,jV),e(jV,jPo),e(F8,DPo),e(G,GPo),e(G,T8),e(T8,Jpe),e(Jpe,OPo),e(T8,VPo),e(T8,DV),e(DV,XPo),e(T8,zPo),e(G,WPo),e(G,M8),e(M8,Ype),e(Ype,QPo),e(M8,UPo),e(M8,GV),e(GV,HPo),e(M8,JPo),e(Ke,YPo),e(Ke,E8),e(E8,KPo),e(E8,Kpe),e(Kpe,ZPo),e(E8,eBo),e(E8,Zpe),e(Zpe,oBo),e(Ke,rBo),M(C8,Ke,null),b(f,vUe,u),b(f,id,u),e(id,w8),e(w8,e_e),M(Zy,e_e,null),e(id,tBo),e(id,o_e),e(o_e,aBo),b(f,FUe,u),b(f,Po,u),M(e9,Po,null),e(Po,nBo),e(Po,dd),e(dd,sBo),e(dd,OV),e(OV,lBo),e(dd,iBo),e(dd,VV),e(VV,dBo),e(dd,cBo),e(Po,fBo),e(Po,o9),e(o9,mBo),e(o9,r_e),e(r_e,gBo),e(o9,hBo),e(Po,pBo),e(Po,ht),M(r9,ht,null),e(ht,_Bo),e(ht,t_e),e(t_e,uBo),e(ht,bBo),e(ht,cd),e(cd,vBo),e(cd,a_e),e(a_e,FBo),e(cd,TBo),e(cd,XV),e(XV,MBo),e(cd,EBo),e(ht,CBo),M(A8,ht,null),e(Po,wBo),e(Po,Ze),M(t9,Ze,null),e(Ze,ABo),e(Ze,n_e),e(n_e,LBo),e(Ze,yBo),e(Ze,za),e(za,xBo),e(za,s_e),e(s_e,$Bo),e(za,kBo),e(za,l_e),e(l_e,SBo),e(za,RBo),e(za,i_e),e(i_e,PBo),e(za,BBo),e(Ze,IBo),e(Ze,z),e(z,L8),e(L8,d_e),e(d_e,NBo),e(L8,qBo),e(L8,zV),e(zV,jBo),e(L8,DBo),e(z,GBo),e(z,y8),e(y8,c_e),e(c_e,OBo),e(y8,VBo),e(y8,WV),e(WV,XBo),e(y8,zBo),e(z,WBo),e(z,x8),e(x8,f_e),e(f_e,QBo),e(x8,UBo),e(x8,QV),e(QV,HBo),e(x8,JBo),e(z,YBo),e(z,$8),e($8,m_e),e(m_e,KBo),e($8,ZBo),e($8,UV),e(UV,eIo),e($8,oIo),e(z,rIo),e(z,k8),e(k8,g_e),e(g_e,tIo),e(k8,aIo),e(k8,HV),e(HV,nIo),e(k8,sIo),e(z,lIo),e(z,S8),e(S8,h_e),e(h_e,iIo),e(S8,dIo),e(S8,JV),e(JV,cIo),e(S8,fIo),e(z,mIo),e(z,R8),e(R8,p_e),e(p_e,gIo),e(R8,hIo),e(R8,YV),e(YV,pIo),e(R8,_Io),e(z,uIo),e(z,P8),e(P8,__e),e(__e,bIo),e(P8,vIo),e(P8,KV),e(KV,FIo),e(P8,TIo),e(z,MIo),e(z,B8),e(B8,u_e),e(u_e,EIo),e(B8,CIo),e(B8,ZV),e(ZV,wIo),e(B8,AIo),e(z,LIo),e(z,I8),e(I8,b_e),e(b_e,yIo),e(I8,xIo),e(I8,eX),e(eX,$Io),e(I8,kIo),e(z,SIo),e(z,N8),e(N8,v_e),e(v_e,RIo),e(N8,PIo),e(N8,oX),e(oX,BIo),e(N8,IIo),e(z,NIo),e(z,q8),e(q8,F_e),e(F_e,qIo),e(q8,jIo),e(q8,rX),e(rX,DIo),e(q8,GIo),e(z,OIo),e(z,j8),e(j8,T_e),e(T_e,VIo),e(j8,XIo),e(j8,tX),e(tX,zIo),e(j8,WIo),e(z,QIo),e(z,D8),e(D8,M_e),e(M_e,UIo),e(D8,HIo),e(D8,aX),e(aX,JIo),e(D8,YIo),e(z,KIo),e(z,G8),e(G8,E_e),e(E_e,ZIo),e(G8,eNo),e(G8,nX),e(nX,oNo),e(G8,rNo),e(z,tNo),e(z,O8),e(O8,C_e),e(C_e,aNo),e(O8,nNo),e(O8,sX),e(sX,sNo),e(O8,lNo),e(z,iNo),e(z,V8),e(V8,w_e),e(w_e,dNo),e(V8,cNo),e(V8,lX),e(lX,fNo),e(V8,mNo),e(z,gNo),e(z,X8),e(X8,A_e),e(A_e,hNo),e(X8,pNo),e(X8,iX),e(iX,_No),e(X8,uNo),e(z,bNo),e(z,z8),e(z8,L_e),e(L_e,vNo),e(z8,FNo),e(z8,dX),e(dX,TNo),e(z8,MNo),e(z,ENo),e(z,W8),e(W8,y_e),e(y_e,CNo),e(W8,wNo),e(W8,cX),e(cX,ANo),e(W8,LNo),e(z,yNo),e(z,Q8),e(Q8,x_e),e(x_e,xNo),e(Q8,$No),e(Q8,fX),e(fX,kNo),e(Q8,SNo),e(z,RNo),e(z,U8),e(U8,$_e),e($_e,PNo),e(U8,BNo),e(U8,mX),e(mX,INo),e(U8,NNo),e(z,qNo),e(z,H8),e(H8,k_e),e(k_e,jNo),e(H8,DNo),e(H8,gX),e(gX,GNo),e(H8,ONo),e(z,VNo),e(z,J8),e(J8,S_e),e(S_e,XNo),e(J8,zNo),e(J8,hX),e(hX,WNo),e(J8,QNo),e(z,UNo),e(z,Y8),e(Y8,R_e),e(R_e,HNo),e(Y8,JNo),e(Y8,pX),e(pX,YNo),e(Y8,KNo),e(z,ZNo),e(z,K8),e(K8,P_e),e(P_e,eqo),e(K8,oqo),e(K8,_X),e(_X,rqo),e(K8,tqo),e(z,aqo),e(z,Z8),e(Z8,B_e),e(B_e,nqo),e(Z8,sqo),e(Z8,uX),e(uX,lqo),e(Z8,iqo),e(z,dqo),e(z,e2),e(e2,I_e),e(I_e,cqo),e(e2,fqo),e(e2,bX),e(bX,mqo),e(e2,gqo),e(z,hqo),e(z,o2),e(o2,N_e),e(N_e,pqo),e(o2,_qo),e(o2,vX),e(vX,uqo),e(o2,bqo),e(z,vqo),e(z,r2),e(r2,q_e),e(q_e,Fqo),e(r2,Tqo),e(r2,FX),e(FX,Mqo),e(r2,Eqo),e(z,Cqo),e(z,t2),e(t2,j_e),e(j_e,wqo),e(t2,Aqo),e(t2,TX),e(TX,Lqo),e(t2,yqo),e(z,xqo),e(z,a2),e(a2,D_e),e(D_e,$qo),e(a2,kqo),e(a2,MX),e(MX,Sqo),e(a2,Rqo),e(z,Pqo),e(z,n2),e(n2,G_e),e(G_e,Bqo),e(n2,Iqo),e(n2,EX),e(EX,Nqo),e(n2,qqo),e(z,jqo),e(z,s2),e(s2,O_e),e(O_e,Dqo),e(s2,Gqo),e(s2,CX),e(CX,Oqo),e(s2,Vqo),e(z,Xqo),e(z,l2),e(l2,V_e),e(V_e,zqo),e(l2,Wqo),e(l2,wX),e(wX,Qqo),e(l2,Uqo),e(z,Hqo),e(z,i2),e(i2,X_e),e(X_e,Jqo),e(i2,Yqo),e(i2,AX),e(AX,Kqo),e(i2,Zqo),e(z,ejo),e(z,d2),e(d2,z_e),e(z_e,ojo),e(d2,rjo),e(d2,LX),e(LX,tjo),e(d2,ajo),e(z,njo),e(z,c2),e(c2,W_e),e(W_e,sjo),e(c2,ljo),e(c2,yX),e(yX,ijo),e(c2,djo),e(z,cjo),e(z,f2),e(f2,Q_e),e(Q_e,fjo),e(f2,mjo),e(f2,xX),e(xX,gjo),e(f2,hjo),e(z,pjo),e(z,m2),e(m2,U_e),e(U_e,_jo),e(m2,ujo),e(m2,$X),e($X,bjo),e(m2,vjo),e(Ze,Fjo),e(Ze,g2),e(g2,Tjo),e(g2,H_e),e(H_e,Mjo),e(g2,Ejo),e(g2,J_e),e(J_e,Cjo),e(Ze,wjo),M(h2,Ze,null),b(f,TUe,u),b(f,fd,u),e(fd,p2),e(p2,Y_e),M(a9,Y_e,null),e(fd,Ajo),e(fd,K_e),e(K_e,Ljo),b(f,MUe,u),b(f,Bo,u),M(n9,Bo,null),e(Bo,yjo),e(Bo,md),e(md,xjo),e(md,kX),e(kX,$jo),e(md,kjo),e(md,SX),e(SX,Sjo),e(md,Rjo),e(Bo,Pjo),e(Bo,s9),e(s9,Bjo),e(s9,Z_e),e(Z_e,Ijo),e(s9,Njo),e(Bo,qjo),e(Bo,pt),M(l9,pt,null),e(pt,jjo),e(pt,eue),e(eue,Djo),e(pt,Gjo),e(pt,gd),e(gd,Ojo),e(gd,oue),e(oue,Vjo),e(gd,Xjo),e(gd,RX),e(RX,zjo),e(gd,Wjo),e(pt,Qjo),M(_2,pt,null),e(Bo,Ujo),e(Bo,eo),M(i9,eo,null),e(eo,Hjo),e(eo,rue),e(rue,Jjo),e(eo,Yjo),e(eo,Wa),e(Wa,Kjo),e(Wa,tue),e(tue,Zjo),e(Wa,eDo),e(Wa,aue),e(aue,oDo),e(Wa,rDo),e(Wa,nue),e(nue,tDo),e(Wa,aDo),e(eo,nDo),e(eo,U),e(U,u2),e(u2,sue),e(sue,sDo),e(u2,lDo),e(u2,PX),e(PX,iDo),e(u2,dDo),e(U,cDo),e(U,b2),e(b2,lue),e(lue,fDo),e(b2,mDo),e(b2,BX),e(BX,gDo),e(b2,hDo),e(U,pDo),e(U,v2),e(v2,iue),e(iue,_Do),e(v2,uDo),e(v2,IX),e(IX,bDo),e(v2,vDo),e(U,FDo),e(U,F2),e(F2,due),e(due,TDo),e(F2,MDo),e(F2,NX),e(NX,EDo),e(F2,CDo),e(U,wDo),e(U,T2),e(T2,cue),e(cue,ADo),e(T2,LDo),e(T2,qX),e(qX,yDo),e(T2,xDo),e(U,$Do),e(U,M2),e(M2,fue),e(fue,kDo),e(M2,SDo),e(M2,jX),e(jX,RDo),e(M2,PDo),e(U,BDo),e(U,E2),e(E2,mue),e(mue,IDo),e(E2,NDo),e(E2,DX),e(DX,qDo),e(E2,jDo),e(U,DDo),e(U,C2),e(C2,gue),e(gue,GDo),e(C2,ODo),e(C2,GX),e(GX,VDo),e(C2,XDo),e(U,zDo),e(U,w2),e(w2,hue),e(hue,WDo),e(w2,QDo),e(w2,OX),e(OX,UDo),e(w2,HDo),e(U,JDo),e(U,A2),e(A2,pue),e(pue,YDo),e(A2,KDo),e(A2,VX),e(VX,ZDo),e(A2,eGo),e(U,oGo),e(U,L2),e(L2,_ue),e(_ue,rGo),e(L2,tGo),e(L2,XX),e(XX,aGo),e(L2,nGo),e(U,sGo),e(U,y2),e(y2,uue),e(uue,lGo),e(y2,iGo),e(y2,zX),e(zX,dGo),e(y2,cGo),e(U,fGo),e(U,x2),e(x2,bue),e(bue,mGo),e(x2,gGo),e(x2,WX),e(WX,hGo),e(x2,pGo),e(U,_Go),e(U,$2),e($2,vue),e(vue,uGo),e($2,bGo),e($2,QX),e(QX,vGo),e($2,FGo),e(U,TGo),e(U,k2),e(k2,Fue),e(Fue,MGo),e(k2,EGo),e(k2,UX),e(UX,CGo),e(k2,wGo),e(U,AGo),e(U,S2),e(S2,Tue),e(Tue,LGo),e(S2,yGo),e(S2,HX),e(HX,xGo),e(S2,$Go),e(U,kGo),e(U,R2),e(R2,Mue),e(Mue,SGo),e(R2,RGo),e(R2,JX),e(JX,PGo),e(R2,BGo),e(U,IGo),e(U,P2),e(P2,Eue),e(Eue,NGo),e(P2,qGo),e(P2,YX),e(YX,jGo),e(P2,DGo),e(U,GGo),e(U,B2),e(B2,Cue),e(Cue,OGo),e(B2,VGo),e(B2,KX),e(KX,XGo),e(B2,zGo),e(U,WGo),e(U,I2),e(I2,wue),e(wue,QGo),e(I2,UGo),e(I2,ZX),e(ZX,HGo),e(I2,JGo),e(U,YGo),e(U,N2),e(N2,Aue),e(Aue,KGo),e(N2,ZGo),e(N2,ez),e(ez,eOo),e(N2,oOo),e(U,rOo),e(U,q2),e(q2,Lue),e(Lue,tOo),e(q2,aOo),e(q2,oz),e(oz,nOo),e(q2,sOo),e(U,lOo),e(U,j2),e(j2,yue),e(yue,iOo),e(j2,dOo),e(j2,rz),e(rz,cOo),e(j2,fOo),e(U,mOo),e(U,D2),e(D2,xue),e(xue,gOo),e(D2,hOo),e(D2,tz),e(tz,pOo),e(D2,_Oo),e(U,uOo),e(U,G2),e(G2,$ue),e($ue,bOo),e(G2,vOo),e(G2,az),e(az,FOo),e(G2,TOo),e(U,MOo),e(U,O2),e(O2,kue),e(kue,EOo),e(O2,COo),e(O2,nz),e(nz,wOo),e(O2,AOo),e(U,LOo),e(U,V2),e(V2,Sue),e(Sue,yOo),e(V2,xOo),e(V2,sz),e(sz,$Oo),e(V2,kOo),e(U,SOo),e(U,X2),e(X2,Rue),e(Rue,ROo),e(X2,POo),e(X2,lz),e(lz,BOo),e(X2,IOo),e(U,NOo),e(U,z2),e(z2,Pue),e(Pue,qOo),e(z2,jOo),e(z2,iz),e(iz,DOo),e(z2,GOo),e(U,OOo),e(U,W2),e(W2,Bue),e(Bue,VOo),e(W2,XOo),e(W2,dz),e(dz,zOo),e(W2,WOo),e(U,QOo),e(U,Q2),e(Q2,Iue),e(Iue,UOo),e(Q2,HOo),e(Q2,cz),e(cz,JOo),e(Q2,YOo),e(U,KOo),e(U,U2),e(U2,Nue),e(Nue,ZOo),e(U2,eVo),e(U2,fz),e(fz,oVo),e(U2,rVo),e(U,tVo),e(U,H2),e(H2,que),e(que,aVo),e(H2,nVo),e(H2,mz),e(mz,sVo),e(H2,lVo),e(U,iVo),e(U,J2),e(J2,jue),e(jue,dVo),e(J2,cVo),e(J2,Due),e(Due,fVo),e(J2,mVo),e(U,gVo),e(U,Y2),e(Y2,Gue),e(Gue,hVo),e(Y2,pVo),e(Y2,gz),e(gz,_Vo),e(Y2,uVo),e(U,bVo),e(U,K2),e(K2,Oue),e(Oue,vVo),e(K2,FVo),e(K2,hz),e(hz,TVo),e(K2,MVo),e(U,EVo),e(U,Z2),e(Z2,Vue),e(Vue,CVo),e(Z2,wVo),e(Z2,pz),e(pz,AVo),e(Z2,LVo),e(U,yVo),e(U,eb),e(eb,Xue),e(Xue,xVo),e(eb,$Vo),e(eb,_z),e(_z,kVo),e(eb,SVo),e(eo,RVo),e(eo,ob),e(ob,PVo),e(ob,zue),e(zue,BVo),e(ob,IVo),e(ob,Wue),e(Wue,NVo),e(eo,qVo),M(rb,eo,null),b(f,EUe,u),b(f,hd,u),e(hd,tb),e(tb,Que),M(d9,Que,null),e(hd,jVo),e(hd,Uue),e(Uue,DVo),b(f,CUe,u),b(f,Io,u),M(c9,Io,null),e(Io,GVo),e(Io,pd),e(pd,OVo),e(pd,uz),e(uz,VVo),e(pd,XVo),e(pd,bz),e(bz,zVo),e(pd,WVo),e(Io,QVo),e(Io,f9),e(f9,UVo),e(f9,Hue),e(Hue,HVo),e(f9,JVo),e(Io,YVo),e(Io,_t),M(m9,_t,null),e(_t,KVo),e(_t,Jue),e(Jue,ZVo),e(_t,eXo),e(_t,_d),e(_d,oXo),e(_d,Yue),e(Yue,rXo),e(_d,tXo),e(_d,vz),e(vz,aXo),e(_d,nXo),e(_t,sXo),M(ab,_t,null),e(Io,lXo),e(Io,oo),M(g9,oo,null),e(oo,iXo),e(oo,Kue),e(Kue,dXo),e(oo,cXo),e(oo,Qa),e(Qa,fXo),e(Qa,Zue),e(Zue,mXo),e(Qa,gXo),e(Qa,e1e),e(e1e,hXo),e(Qa,pXo),e(Qa,o1e),e(o1e,_Xo),e(Qa,uXo),e(oo,bXo),e(oo,he),e(he,nb),e(nb,r1e),e(r1e,vXo),e(nb,FXo),e(nb,Fz),e(Fz,TXo),e(nb,MXo),e(he,EXo),e(he,sb),e(sb,t1e),e(t1e,CXo),e(sb,wXo),e(sb,Tz),e(Tz,AXo),e(sb,LXo),e(he,yXo),e(he,lb),e(lb,a1e),e(a1e,xXo),e(lb,$Xo),e(lb,Mz),e(Mz,kXo),e(lb,SXo),e(he,RXo),e(he,ib),e(ib,n1e),e(n1e,PXo),e(ib,BXo),e(ib,Ez),e(Ez,IXo),e(ib,NXo),e(he,qXo),e(he,db),e(db,s1e),e(s1e,jXo),e(db,DXo),e(db,Cz),e(Cz,GXo),e(db,OXo),e(he,VXo),e(he,cb),e(cb,l1e),e(l1e,XXo),e(cb,zXo),e(cb,wz),e(wz,WXo),e(cb,QXo),e(he,UXo),e(he,fb),e(fb,i1e),e(i1e,HXo),e(fb,JXo),e(fb,Az),e(Az,YXo),e(fb,KXo),e(he,ZXo),e(he,mb),e(mb,d1e),e(d1e,ezo),e(mb,ozo),e(mb,Lz),e(Lz,rzo),e(mb,tzo),e(he,azo),e(he,gb),e(gb,c1e),e(c1e,nzo),e(gb,szo),e(gb,yz),e(yz,lzo),e(gb,izo),e(he,dzo),e(he,hb),e(hb,f1e),e(f1e,czo),e(hb,fzo),e(hb,xz),e(xz,mzo),e(hb,gzo),e(he,hzo),e(he,pb),e(pb,m1e),e(m1e,pzo),e(pb,_zo),e(pb,$z),e($z,uzo),e(pb,bzo),e(he,vzo),e(he,_b),e(_b,g1e),e(g1e,Fzo),e(_b,Tzo),e(_b,kz),e(kz,Mzo),e(_b,Ezo),e(he,Czo),e(he,ub),e(ub,h1e),e(h1e,wzo),e(ub,Azo),e(ub,Sz),e(Sz,Lzo),e(ub,yzo),e(he,xzo),e(he,bb),e(bb,p1e),e(p1e,$zo),e(bb,kzo),e(bb,Rz),e(Rz,Szo),e(bb,Rzo),e(he,Pzo),e(he,vb),e(vb,_1e),e(_1e,Bzo),e(vb,Izo),e(vb,Pz),e(Pz,Nzo),e(vb,qzo),e(he,jzo),e(he,Fb),e(Fb,u1e),e(u1e,Dzo),e(Fb,Gzo),e(Fb,Bz),e(Bz,Ozo),e(Fb,Vzo),e(he,Xzo),e(he,Tb),e(Tb,b1e),e(b1e,zzo),e(Tb,Wzo),e(Tb,Iz),e(Iz,Qzo),e(Tb,Uzo),e(he,Hzo),e(he,Mb),e(Mb,v1e),e(v1e,Jzo),e(Mb,Yzo),e(Mb,Nz),e(Nz,Kzo),e(Mb,Zzo),e(he,eWo),e(he,Eb),e(Eb,F1e),e(F1e,oWo),e(Eb,rWo),e(Eb,qz),e(qz,tWo),e(Eb,aWo),e(oo,nWo),e(oo,Cb),e(Cb,sWo),e(Cb,T1e),e(T1e,lWo),e(Cb,iWo),e(Cb,M1e),e(M1e,dWo),e(oo,cWo),M(wb,oo,null),b(f,wUe,u),b(f,ud,u),e(ud,Ab),e(Ab,E1e),M(h9,E1e,null),e(ud,fWo),e(ud,C1e),e(C1e,mWo),b(f,AUe,u),b(f,No,u),M(p9,No,null),e(No,gWo),e(No,bd),e(bd,hWo),e(bd,jz),e(jz,pWo),e(bd,_Wo),e(bd,Dz),e(Dz,uWo),e(bd,bWo),e(No,vWo),e(No,_9),e(_9,FWo),e(_9,w1e),e(w1e,TWo),e(_9,MWo),e(No,EWo),e(No,ut),M(u9,ut,null),e(ut,CWo),e(ut,A1e),e(A1e,wWo),e(ut,AWo),e(ut,vd),e(vd,LWo),e(vd,L1e),e(L1e,yWo),e(vd,xWo),e(vd,Gz),e(Gz,$Wo),e(vd,kWo),e(ut,SWo),M(Lb,ut,null),e(No,RWo),e(No,ro),M(b9,ro,null),e(ro,PWo),e(ro,y1e),e(y1e,BWo),e(ro,IWo),e(ro,Ua),e(Ua,NWo),e(Ua,x1e),e(x1e,qWo),e(Ua,jWo),e(Ua,$1e),e($1e,DWo),e(Ua,GWo),e(Ua,k1e),e(k1e,OWo),e(Ua,VWo),e(ro,XWo),e(ro,N),e(N,yb),e(yb,S1e),e(S1e,zWo),e(yb,WWo),e(yb,Oz),e(Oz,QWo),e(yb,UWo),e(N,HWo),e(N,xb),e(xb,R1e),e(R1e,JWo),e(xb,YWo),e(xb,Vz),e(Vz,KWo),e(xb,ZWo),e(N,eQo),e(N,$b),e($b,P1e),e(P1e,oQo),e($b,rQo),e($b,Xz),e(Xz,tQo),e($b,aQo),e(N,nQo),e(N,kb),e(kb,B1e),e(B1e,sQo),e(kb,lQo),e(kb,zz),e(zz,iQo),e(kb,dQo),e(N,cQo),e(N,Sb),e(Sb,I1e),e(I1e,fQo),e(Sb,mQo),e(Sb,Wz),e(Wz,gQo),e(Sb,hQo),e(N,pQo),e(N,Rb),e(Rb,N1e),e(N1e,_Qo),e(Rb,uQo),e(Rb,Qz),e(Qz,bQo),e(Rb,vQo),e(N,FQo),e(N,Pb),e(Pb,q1e),e(q1e,TQo),e(Pb,MQo),e(Pb,Uz),e(Uz,EQo),e(Pb,CQo),e(N,wQo),e(N,Bb),e(Bb,j1e),e(j1e,AQo),e(Bb,LQo),e(Bb,Hz),e(Hz,yQo),e(Bb,xQo),e(N,$Qo),e(N,Ib),e(Ib,D1e),e(D1e,kQo),e(Ib,SQo),e(Ib,Jz),e(Jz,RQo),e(Ib,PQo),e(N,BQo),e(N,Nb),e(Nb,G1e),e(G1e,IQo),e(Nb,NQo),e(Nb,Yz),e(Yz,qQo),e(Nb,jQo),e(N,DQo),e(N,qb),e(qb,O1e),e(O1e,GQo),e(qb,OQo),e(qb,Kz),e(Kz,VQo),e(qb,XQo),e(N,zQo),e(N,jb),e(jb,V1e),e(V1e,WQo),e(jb,QQo),e(jb,Zz),e(Zz,UQo),e(jb,HQo),e(N,JQo),e(N,Db),e(Db,X1e),e(X1e,YQo),e(Db,KQo),e(Db,eW),e(eW,ZQo),e(Db,eUo),e(N,oUo),e(N,Gb),e(Gb,z1e),e(z1e,rUo),e(Gb,tUo),e(Gb,oW),e(oW,aUo),e(Gb,nUo),e(N,sUo),e(N,Ob),e(Ob,W1e),e(W1e,lUo),e(Ob,iUo),e(Ob,rW),e(rW,dUo),e(Ob,cUo),e(N,fUo),e(N,Vb),e(Vb,Q1e),e(Q1e,mUo),e(Vb,gUo),e(Vb,tW),e(tW,hUo),e(Vb,pUo),e(N,_Uo),e(N,Xb),e(Xb,U1e),e(U1e,uUo),e(Xb,bUo),e(Xb,aW),e(aW,vUo),e(Xb,FUo),e(N,TUo),e(N,zb),e(zb,H1e),e(H1e,MUo),e(zb,EUo),e(zb,nW),e(nW,CUo),e(zb,wUo),e(N,AUo),e(N,Wb),e(Wb,J1e),e(J1e,LUo),e(Wb,yUo),e(Wb,sW),e(sW,xUo),e(Wb,$Uo),e(N,kUo),e(N,Qb),e(Qb,Y1e),e(Y1e,SUo),e(Qb,RUo),e(Qb,lW),e(lW,PUo),e(Qb,BUo),e(N,IUo),e(N,Ub),e(Ub,K1e),e(K1e,NUo),e(Ub,qUo),e(Ub,iW),e(iW,jUo),e(Ub,DUo),e(N,GUo),e(N,Hb),e(Hb,Z1e),e(Z1e,OUo),e(Hb,VUo),e(Hb,dW),e(dW,XUo),e(Hb,zUo),e(N,WUo),e(N,Jb),e(Jb,e8e),e(e8e,QUo),e(Jb,UUo),e(Jb,cW),e(cW,HUo),e(Jb,JUo),e(N,YUo),e(N,Yb),e(Yb,o8e),e(o8e,KUo),e(Yb,ZUo),e(Yb,fW),e(fW,eHo),e(Yb,oHo),e(N,rHo),e(N,Kb),e(Kb,r8e),e(r8e,tHo),e(Kb,aHo),e(Kb,mW),e(mW,nHo),e(Kb,sHo),e(N,lHo),e(N,Zb),e(Zb,t8e),e(t8e,iHo),e(Zb,dHo),e(Zb,gW),e(gW,cHo),e(Zb,fHo),e(N,mHo),e(N,ev),e(ev,a8e),e(a8e,gHo),e(ev,hHo),e(ev,hW),e(hW,pHo),e(ev,_Ho),e(N,uHo),e(N,ov),e(ov,n8e),e(n8e,bHo),e(ov,vHo),e(ov,pW),e(pW,FHo),e(ov,THo),e(N,MHo),e(N,rv),e(rv,s8e),e(s8e,EHo),e(rv,CHo),e(rv,_W),e(_W,wHo),e(rv,AHo),e(N,LHo),e(N,tv),e(tv,l8e),e(l8e,yHo),e(tv,xHo),e(tv,uW),e(uW,$Ho),e(tv,kHo),e(N,SHo),e(N,av),e(av,i8e),e(i8e,RHo),e(av,PHo),e(av,bW),e(bW,BHo),e(av,IHo),e(N,NHo),e(N,nv),e(nv,d8e),e(d8e,qHo),e(nv,jHo),e(nv,vW),e(vW,DHo),e(nv,GHo),e(N,OHo),e(N,sv),e(sv,c8e),e(c8e,VHo),e(sv,XHo),e(sv,FW),e(FW,zHo),e(sv,WHo),e(N,QHo),e(N,lv),e(lv,f8e),e(f8e,UHo),e(lv,HHo),e(lv,TW),e(TW,JHo),e(lv,YHo),e(N,KHo),e(N,iv),e(iv,m8e),e(m8e,ZHo),e(iv,eJo),e(iv,MW),e(MW,oJo),e(iv,rJo),e(N,tJo),e(N,dv),e(dv,g8e),e(g8e,aJo),e(dv,nJo),e(dv,EW),e(EW,sJo),e(dv,lJo),e(N,iJo),e(N,cv),e(cv,h8e),e(h8e,dJo),e(cv,cJo),e(cv,CW),e(CW,fJo),e(cv,mJo),e(N,gJo),e(N,fv),e(fv,p8e),e(p8e,hJo),e(fv,pJo),e(fv,wW),e(wW,_Jo),e(fv,uJo),e(N,bJo),e(N,mv),e(mv,_8e),e(_8e,vJo),e(mv,FJo),e(mv,AW),e(AW,TJo),e(mv,MJo),e(N,EJo),e(N,gv),e(gv,u8e),e(u8e,CJo),e(gv,wJo),e(gv,LW),e(LW,AJo),e(gv,LJo),e(N,yJo),e(N,hv),e(hv,b8e),e(b8e,xJo),e(hv,$Jo),e(hv,yW),e(yW,kJo),e(hv,SJo),e(N,RJo),e(N,pv),e(pv,v8e),e(v8e,PJo),e(pv,BJo),e(pv,xW),e(xW,IJo),e(pv,NJo),e(N,qJo),e(N,_v),e(_v,F8e),e(F8e,jJo),e(_v,DJo),e(_v,$W),e($W,GJo),e(_v,OJo),e(N,VJo),e(N,uv),e(uv,T8e),e(T8e,XJo),e(uv,zJo),e(uv,kW),e(kW,WJo),e(uv,QJo),e(N,UJo),e(N,bv),e(bv,M8e),e(M8e,HJo),e(bv,JJo),e(bv,SW),e(SW,YJo),e(bv,KJo),e(N,ZJo),e(N,vv),e(vv,E8e),e(E8e,eYo),e(vv,oYo),e(vv,RW),e(RW,rYo),e(vv,tYo),e(N,aYo),e(N,Fv),e(Fv,C8e),e(C8e,nYo),e(Fv,sYo),e(Fv,PW),e(PW,lYo),e(Fv,iYo),e(N,dYo),e(N,Tv),e(Tv,w8e),e(w8e,cYo),e(Tv,fYo),e(Tv,BW),e(BW,mYo),e(Tv,gYo),e(N,hYo),e(N,Mv),e(Mv,A8e),e(A8e,pYo),e(Mv,_Yo),e(Mv,IW),e(IW,uYo),e(Mv,bYo),e(N,vYo),e(N,Ev),e(Ev,L8e),e(L8e,FYo),e(Ev,TYo),e(Ev,NW),e(NW,MYo),e(Ev,EYo),e(N,CYo),e(N,Cv),e(Cv,y8e),e(y8e,wYo),e(Cv,AYo),e(Cv,qW),e(qW,LYo),e(Cv,yYo),e(N,xYo),e(N,wv),e(wv,x8e),e(x8e,$Yo),e(wv,kYo),e(wv,jW),e(jW,SYo),e(wv,RYo),e(ro,PYo),e(ro,Av),e(Av,BYo),e(Av,$8e),e($8e,IYo),e(Av,NYo),e(Av,k8e),e(k8e,qYo),e(ro,jYo),M(Lv,ro,null),b(f,LUe,u),b(f,Fd,u),e(Fd,yv),e(yv,S8e),M(v9,S8e,null),e(Fd,DYo),e(Fd,R8e),e(R8e,GYo),b(f,yUe,u),b(f,qo,u),M(F9,qo,null),e(qo,OYo),e(qo,Td),e(Td,VYo),e(Td,DW),e(DW,XYo),e(Td,zYo),e(Td,GW),e(GW,WYo),e(Td,QYo),e(qo,UYo),e(qo,T9),e(T9,HYo),e(T9,P8e),e(P8e,JYo),e(T9,YYo),e(qo,KYo),e(qo,bt),M(M9,bt,null),e(bt,ZYo),e(bt,B8e),e(B8e,eKo),e(bt,oKo),e(bt,Md),e(Md,rKo),e(Md,I8e),e(I8e,tKo),e(Md,aKo),e(Md,OW),e(OW,nKo),e(Md,sKo),e(bt,lKo),M(xv,bt,null),e(qo,iKo),e(qo,to),M(E9,to,null),e(to,dKo),e(to,N8e),e(N8e,cKo),e(to,fKo),e(to,Ha),e(Ha,mKo),e(Ha,q8e),e(q8e,gKo),e(Ha,hKo),e(Ha,j8e),e(j8e,pKo),e(Ha,_Ko),e(Ha,D8e),e(D8e,uKo),e(Ha,bKo),e(to,vKo),e(to,Z),e(Z,$v),e($v,G8e),e(G8e,FKo),e($v,TKo),e($v,VW),e(VW,MKo),e($v,EKo),e(Z,CKo),e(Z,kv),e(kv,O8e),e(O8e,wKo),e(kv,AKo),e(kv,XW),e(XW,LKo),e(kv,yKo),e(Z,xKo),e(Z,Sv),e(Sv,V8e),e(V8e,$Ko),e(Sv,kKo),e(Sv,zW),e(zW,SKo),e(Sv,RKo),e(Z,PKo),e(Z,Rv),e(Rv,X8e),e(X8e,BKo),e(Rv,IKo),e(Rv,WW),e(WW,NKo),e(Rv,qKo),e(Z,jKo),e(Z,Pv),e(Pv,z8e),e(z8e,DKo),e(Pv,GKo),e(Pv,QW),e(QW,OKo),e(Pv,VKo),e(Z,XKo),e(Z,Bv),e(Bv,W8e),e(W8e,zKo),e(Bv,WKo),e(Bv,UW),e(UW,QKo),e(Bv,UKo),e(Z,HKo),e(Z,Iv),e(Iv,Q8e),e(Q8e,JKo),e(Iv,YKo),e(Iv,HW),e(HW,KKo),e(Iv,ZKo),e(Z,eZo),e(Z,Nv),e(Nv,U8e),e(U8e,oZo),e(Nv,rZo),e(Nv,JW),e(JW,tZo),e(Nv,aZo),e(Z,nZo),e(Z,qv),e(qv,H8e),e(H8e,sZo),e(qv,lZo),e(qv,YW),e(YW,iZo),e(qv,dZo),e(Z,cZo),e(Z,jv),e(jv,J8e),e(J8e,fZo),e(jv,mZo),e(jv,KW),e(KW,gZo),e(jv,hZo),e(Z,pZo),e(Z,Dv),e(Dv,Y8e),e(Y8e,_Zo),e(Dv,uZo),e(Dv,ZW),e(ZW,bZo),e(Dv,vZo),e(Z,FZo),e(Z,Gv),e(Gv,K8e),e(K8e,TZo),e(Gv,MZo),e(Gv,eQ),e(eQ,EZo),e(Gv,CZo),e(Z,wZo),e(Z,Ov),e(Ov,Z8e),e(Z8e,AZo),e(Ov,LZo),e(Ov,oQ),e(oQ,yZo),e(Ov,xZo),e(Z,$Zo),e(Z,Vv),e(Vv,e2e),e(e2e,kZo),e(Vv,SZo),e(Vv,rQ),e(rQ,RZo),e(Vv,PZo),e(Z,BZo),e(Z,Xv),e(Xv,o2e),e(o2e,IZo),e(Xv,NZo),e(Xv,tQ),e(tQ,qZo),e(Xv,jZo),e(Z,DZo),e(Z,zv),e(zv,r2e),e(r2e,GZo),e(zv,OZo),e(zv,aQ),e(aQ,VZo),e(zv,XZo),e(Z,zZo),e(Z,Wv),e(Wv,t2e),e(t2e,WZo),e(Wv,QZo),e(Wv,nQ),e(nQ,UZo),e(Wv,HZo),e(Z,JZo),e(Z,Qv),e(Qv,a2e),e(a2e,YZo),e(Qv,KZo),e(Qv,sQ),e(sQ,ZZo),e(Qv,eer),e(Z,oer),e(Z,Uv),e(Uv,n2e),e(n2e,rer),e(Uv,ter),e(Uv,lQ),e(lQ,aer),e(Uv,ner),e(Z,ser),e(Z,Hv),e(Hv,s2e),e(s2e,ler),e(Hv,ier),e(Hv,iQ),e(iQ,der),e(Hv,cer),e(Z,fer),e(Z,Jv),e(Jv,l2e),e(l2e,mer),e(Jv,ger),e(Jv,dQ),e(dQ,her),e(Jv,per),e(Z,_er),e(Z,Yv),e(Yv,i2e),e(i2e,uer),e(Yv,ber),e(Yv,cQ),e(cQ,ver),e(Yv,Fer),e(Z,Ter),e(Z,Kv),e(Kv,d2e),e(d2e,Mer),e(Kv,Eer),e(Kv,fQ),e(fQ,Cer),e(Kv,wer),e(Z,Aer),e(Z,Zv),e(Zv,c2e),e(c2e,Ler),e(Zv,yer),e(Zv,mQ),e(mQ,xer),e(Zv,$er),e(Z,ker),e(Z,eF),e(eF,f2e),e(f2e,Ser),e(eF,Rer),e(eF,gQ),e(gQ,Per),e(eF,Ber),e(Z,Ier),e(Z,oF),e(oF,m2e),e(m2e,Ner),e(oF,qer),e(oF,hQ),e(hQ,jer),e(oF,Der),e(Z,Ger),e(Z,rF),e(rF,g2e),e(g2e,Oer),e(rF,Ver),e(rF,pQ),e(pQ,Xer),e(rF,zer),e(Z,Wer),e(Z,tF),e(tF,h2e),e(h2e,Qer),e(tF,Uer),e(tF,_Q),e(_Q,Her),e(tF,Jer),e(Z,Yer),e(Z,aF),e(aF,p2e),e(p2e,Ker),e(aF,Zer),e(aF,uQ),e(uQ,eor),e(aF,oor),e(Z,ror),e(Z,nF),e(nF,_2e),e(_2e,tor),e(nF,aor),e(nF,bQ),e(bQ,nor),e(nF,sor),e(Z,lor),e(Z,sF),e(sF,u2e),e(u2e,ior),e(sF,dor),e(sF,vQ),e(vQ,cor),e(sF,mor),e(to,gor),e(to,lF),e(lF,hor),e(lF,b2e),e(b2e,por),e(lF,_or),e(lF,v2e),e(v2e,uor),e(to,bor),M(iF,to,null),b(f,xUe,u),b(f,Ed,u),e(Ed,dF),e(dF,F2e),M(C9,F2e,null),e(Ed,vor),e(Ed,T2e),e(T2e,For),b(f,$Ue,u),b(f,jo,u),M(w9,jo,null),e(jo,Tor),e(jo,Cd),e(Cd,Mor),e(Cd,FQ),e(FQ,Eor),e(Cd,Cor),e(Cd,TQ),e(TQ,wor),e(Cd,Aor),e(jo,Lor),e(jo,A9),e(A9,yor),e(A9,M2e),e(M2e,xor),e(A9,$or),e(jo,kor),e(jo,vt),M(L9,vt,null),e(vt,Sor),e(vt,E2e),e(E2e,Ror),e(vt,Por),e(vt,wd),e(wd,Bor),e(wd,C2e),e(C2e,Ior),e(wd,Nor),e(wd,MQ),e(MQ,qor),e(wd,jor),e(vt,Dor),M(cF,vt,null),e(jo,Gor),e(jo,ao),M(y9,ao,null),e(ao,Oor),e(ao,w2e),e(w2e,Vor),e(ao,Xor),e(ao,Ja),e(Ja,zor),e(Ja,A2e),e(A2e,Wor),e(Ja,Qor),e(Ja,L2e),e(L2e,Uor),e(Ja,Hor),e(Ja,y2e),e(y2e,Jor),e(Ja,Yor),e(ao,Kor),e(ao,Do),e(Do,fF),e(fF,x2e),e(x2e,Zor),e(fF,err),e(fF,EQ),e(EQ,orr),e(fF,rrr),e(Do,trr),e(Do,mF),e(mF,$2e),e($2e,arr),e(mF,nrr),e(mF,CQ),e(CQ,srr),e(mF,lrr),e(Do,irr),e(Do,gF),e(gF,k2e),e(k2e,drr),e(gF,crr),e(gF,wQ),e(wQ,frr),e(gF,mrr),e(Do,grr),e(Do,hF),e(hF,S2e),e(S2e,hrr),e(hF,prr),e(hF,AQ),e(AQ,_rr),e(hF,urr),e(Do,brr),e(Do,pF),e(pF,R2e),e(R2e,vrr),e(pF,Frr),e(pF,LQ),e(LQ,Trr),e(pF,Mrr),e(Do,Err),e(Do,_F),e(_F,P2e),e(P2e,Crr),e(_F,wrr),e(_F,yQ),e(yQ,Arr),e(_F,Lrr),e(ao,yrr),e(ao,uF),e(uF,xrr),e(uF,B2e),e(B2e,$rr),e(uF,krr),e(uF,I2e),e(I2e,Srr),e(ao,Rrr),M(bF,ao,null),b(f,kUe,u),b(f,Ad,u),e(Ad,vF),e(vF,N2e),M(x9,N2e,null),e(Ad,Prr),e(Ad,q2e),e(q2e,Brr),b(f,SUe,u),b(f,Go,u),M($9,Go,null),e(Go,Irr),e(Go,Ld),e(Ld,Nrr),e(Ld,xQ),e(xQ,qrr),e(Ld,jrr),e(Ld,$Q),e($Q,Drr),e(Ld,Grr),e(Go,Orr),e(Go,k9),e(k9,Vrr),e(k9,j2e),e(j2e,Xrr),e(k9,zrr),e(Go,Wrr),e(Go,Ft),M(S9,Ft,null),e(Ft,Qrr),e(Ft,D2e),e(D2e,Urr),e(Ft,Hrr),e(Ft,yd),e(yd,Jrr),e(yd,G2e),e(G2e,Yrr),e(yd,Krr),e(yd,kQ),e(kQ,Zrr),e(yd,etr),e(Ft,otr),M(FF,Ft,null),e(Go,rtr),e(Go,no),M(R9,no,null),e(no,ttr),e(no,O2e),e(O2e,atr),e(no,ntr),e(no,Ya),e(Ya,str),e(Ya,V2e),e(V2e,ltr),e(Ya,itr),e(Ya,X2e),e(X2e,dtr),e(Ya,ctr),e(Ya,z2e),e(z2e,ftr),e(Ya,mtr),e(no,gtr),e(no,H),e(H,TF),e(TF,W2e),e(W2e,htr),e(TF,ptr),e(TF,SQ),e(SQ,_tr),e(TF,utr),e(H,btr),e(H,MF),e(MF,Q2e),e(Q2e,vtr),e(MF,Ftr),e(MF,RQ),e(RQ,Ttr),e(MF,Mtr),e(H,Etr),e(H,EF),e(EF,U2e),e(U2e,Ctr),e(EF,wtr),e(EF,PQ),e(PQ,Atr),e(EF,Ltr),e(H,ytr),e(H,CF),e(CF,H2e),e(H2e,xtr),e(CF,$tr),e(CF,BQ),e(BQ,ktr),e(CF,Str),e(H,Rtr),e(H,wF),e(wF,J2e),e(J2e,Ptr),e(wF,Btr),e(wF,IQ),e(IQ,Itr),e(wF,Ntr),e(H,qtr),e(H,AF),e(AF,Y2e),e(Y2e,jtr),e(AF,Dtr),e(AF,NQ),e(NQ,Gtr),e(AF,Otr),e(H,Vtr),e(H,LF),e(LF,K2e),e(K2e,Xtr),e(LF,ztr),e(LF,qQ),e(qQ,Wtr),e(LF,Qtr),e(H,Utr),e(H,yF),e(yF,Z2e),e(Z2e,Htr),e(yF,Jtr),e(yF,jQ),e(jQ,Ytr),e(yF,Ktr),e(H,Ztr),e(H,xF),e(xF,ebe),e(ebe,ear),e(xF,oar),e(xF,DQ),e(DQ,rar),e(xF,tar),e(H,aar),e(H,$F),e($F,obe),e(obe,nar),e($F,sar),e($F,GQ),e(GQ,lar),e($F,iar),e(H,dar),e(H,kF),e(kF,rbe),e(rbe,car),e(kF,far),e(kF,OQ),e(OQ,mar),e(kF,gar),e(H,har),e(H,SF),e(SF,tbe),e(tbe,par),e(SF,_ar),e(SF,VQ),e(VQ,uar),e(SF,bar),e(H,Far),e(H,RF),e(RF,abe),e(abe,Tar),e(RF,Mar),e(RF,XQ),e(XQ,Ear),e(RF,Car),e(H,war),e(H,PF),e(PF,nbe),e(nbe,Aar),e(PF,Lar),e(PF,zQ),e(zQ,yar),e(PF,xar),e(H,$ar),e(H,BF),e(BF,sbe),e(sbe,kar),e(BF,Sar),e(BF,WQ),e(WQ,Rar),e(BF,Par),e(H,Bar),e(H,IF),e(IF,lbe),e(lbe,Iar),e(IF,Nar),e(IF,QQ),e(QQ,qar),e(IF,jar),e(H,Dar),e(H,NF),e(NF,ibe),e(ibe,Gar),e(NF,Oar),e(NF,UQ),e(UQ,Var),e(NF,Xar),e(H,zar),e(H,qF),e(qF,dbe),e(dbe,War),e(qF,Qar),e(qF,HQ),e(HQ,Uar),e(qF,Har),e(H,Jar),e(H,jF),e(jF,cbe),e(cbe,Yar),e(jF,Kar),e(jF,JQ),e(JQ,Zar),e(jF,enr),e(H,onr),e(H,DF),e(DF,fbe),e(fbe,rnr),e(DF,tnr),e(DF,YQ),e(YQ,anr),e(DF,nnr),e(H,snr),e(H,GF),e(GF,mbe),e(mbe,lnr),e(GF,inr),e(GF,KQ),e(KQ,dnr),e(GF,cnr),e(H,fnr),e(H,OF),e(OF,gbe),e(gbe,mnr),e(OF,gnr),e(OF,ZQ),e(ZQ,hnr),e(OF,pnr),e(H,_nr),e(H,VF),e(VF,hbe),e(hbe,unr),e(VF,bnr),e(VF,eU),e(eU,vnr),e(VF,Fnr),e(H,Tnr),e(H,XF),e(XF,pbe),e(pbe,Mnr),e(XF,Enr),e(XF,oU),e(oU,Cnr),e(XF,wnr),e(H,Anr),e(H,zF),e(zF,_be),e(_be,Lnr),e(zF,ynr),e(zF,rU),e(rU,xnr),e(zF,$nr),e(H,knr),e(H,WF),e(WF,ube),e(ube,Snr),e(WF,Rnr),e(WF,tU),e(tU,Pnr),e(WF,Bnr),e(H,Inr),e(H,QF),e(QF,bbe),e(bbe,Nnr),e(QF,qnr),e(QF,aU),e(aU,jnr),e(QF,Dnr),e(H,Gnr),e(H,UF),e(UF,vbe),e(vbe,Onr),e(UF,Vnr),e(UF,nU),e(nU,Xnr),e(UF,znr),e(H,Wnr),e(H,HF),e(HF,Fbe),e(Fbe,Qnr),e(HF,Unr),e(HF,sU),e(sU,Hnr),e(HF,Jnr),e(H,Ynr),e(H,JF),e(JF,Tbe),e(Tbe,Knr),e(JF,Znr),e(JF,lU),e(lU,esr),e(JF,osr),e(H,rsr),e(H,YF),e(YF,Mbe),e(Mbe,tsr),e(YF,asr),e(YF,iU),e(iU,nsr),e(YF,ssr),e(H,lsr),e(H,KF),e(KF,Ebe),e(Ebe,isr),e(KF,dsr),e(KF,dU),e(dU,csr),e(KF,fsr),e(H,msr),e(H,ZF),e(ZF,Cbe),e(Cbe,gsr),e(ZF,hsr),e(ZF,cU),e(cU,psr),e(ZF,_sr),e(H,usr),e(H,e6),e(e6,wbe),e(wbe,bsr),e(e6,vsr),e(e6,fU),e(fU,Fsr),e(e6,Tsr),e(H,Msr),e(H,o6),e(o6,Abe),e(Abe,Esr),e(o6,Csr),e(o6,mU),e(mU,wsr),e(o6,Asr),e(H,Lsr),e(H,r6),e(r6,Lbe),e(Lbe,ysr),e(r6,xsr),e(r6,gU),e(gU,$sr),e(r6,ksr),e(H,Ssr),e(H,t6),e(t6,ybe),e(ybe,Rsr),e(t6,Psr),e(t6,hU),e(hU,Bsr),e(t6,Isr),e(no,Nsr),e(no,a6),e(a6,qsr),e(a6,xbe),e(xbe,jsr),e(a6,Dsr),e(a6,$be),e($be,Gsr),e(no,Osr),M(n6,no,null),b(f,RUe,u),b(f,xd,u),e(xd,s6),e(s6,kbe),M(P9,kbe,null),e(xd,Vsr),e(xd,Sbe),e(Sbe,Xsr),b(f,PUe,u),b(f,Oo,u),M(B9,Oo,null),e(Oo,zsr),e(Oo,$d),e($d,Wsr),e($d,pU),e(pU,Qsr),e($d,Usr),e($d,_U),e(_U,Hsr),e($d,Jsr),e(Oo,Ysr),e(Oo,I9),e(I9,Ksr),e(I9,Rbe),e(Rbe,Zsr),e(I9,elr),e(Oo,olr),e(Oo,Tt),M(N9,Tt,null),e(Tt,rlr),e(Tt,Pbe),e(Pbe,tlr),e(Tt,alr),e(Tt,kd),e(kd,nlr),e(kd,Bbe),e(Bbe,slr),e(kd,llr),e(kd,uU),e(uU,ilr),e(kd,dlr),e(Tt,clr),M(l6,Tt,null),e(Oo,flr),e(Oo,so),M(q9,so,null),e(so,mlr),e(so,Ibe),e(Ibe,glr),e(so,hlr),e(so,Ka),e(Ka,plr),e(Ka,Nbe),e(Nbe,_lr),e(Ka,ulr),e(Ka,qbe),e(qbe,blr),e(Ka,vlr),e(Ka,jbe),e(jbe,Flr),e(Ka,Tlr),e(so,Mlr),e(so,V),e(V,i6),e(i6,Dbe),e(Dbe,Elr),e(i6,Clr),e(i6,bU),e(bU,wlr),e(i6,Alr),e(V,Llr),e(V,d6),e(d6,Gbe),e(Gbe,ylr),e(d6,xlr),e(d6,vU),e(vU,$lr),e(d6,klr),e(V,Slr),e(V,c6),e(c6,Obe),e(Obe,Rlr),e(c6,Plr),e(c6,FU),e(FU,Blr),e(c6,Ilr),e(V,Nlr),e(V,f6),e(f6,Vbe),e(Vbe,qlr),e(f6,jlr),e(f6,TU),e(TU,Dlr),e(f6,Glr),e(V,Olr),e(V,m6),e(m6,Xbe),e(Xbe,Vlr),e(m6,Xlr),e(m6,MU),e(MU,zlr),e(m6,Wlr),e(V,Qlr),e(V,g6),e(g6,zbe),e(zbe,Ulr),e(g6,Hlr),e(g6,EU),e(EU,Jlr),e(g6,Ylr),e(V,Klr),e(V,h6),e(h6,Wbe),e(Wbe,Zlr),e(h6,eir),e(h6,CU),e(CU,oir),e(h6,rir),e(V,tir),e(V,p6),e(p6,Qbe),e(Qbe,air),e(p6,nir),e(p6,wU),e(wU,sir),e(p6,lir),e(V,iir),e(V,_6),e(_6,Ube),e(Ube,dir),e(_6,cir),e(_6,AU),e(AU,fir),e(_6,mir),e(V,gir),e(V,u6),e(u6,Hbe),e(Hbe,hir),e(u6,pir),e(u6,LU),e(LU,_ir),e(u6,uir),e(V,bir),e(V,b6),e(b6,Jbe),e(Jbe,vir),e(b6,Fir),e(b6,yU),e(yU,Tir),e(b6,Mir),e(V,Eir),e(V,v6),e(v6,Ybe),e(Ybe,Cir),e(v6,wir),e(v6,xU),e(xU,Air),e(v6,Lir),e(V,yir),e(V,F6),e(F6,Kbe),e(Kbe,xir),e(F6,$ir),e(F6,$U),e($U,kir),e(F6,Sir),e(V,Rir),e(V,T6),e(T6,Zbe),e(Zbe,Pir),e(T6,Bir),e(T6,kU),e(kU,Iir),e(T6,Nir),e(V,qir),e(V,M6),e(M6,eve),e(eve,jir),e(M6,Dir),e(M6,SU),e(SU,Gir),e(M6,Oir),e(V,Vir),e(V,E6),e(E6,ove),e(ove,Xir),e(E6,zir),e(E6,RU),e(RU,Wir),e(E6,Qir),e(V,Uir),e(V,C6),e(C6,rve),e(rve,Hir),e(C6,Jir),e(C6,PU),e(PU,Yir),e(C6,Kir),e(V,Zir),e(V,w6),e(w6,tve),e(tve,edr),e(w6,odr),e(w6,BU),e(BU,rdr),e(w6,tdr),e(V,adr),e(V,A6),e(A6,ave),e(ave,ndr),e(A6,sdr),e(A6,IU),e(IU,ldr),e(A6,idr),e(V,ddr),e(V,L6),e(L6,nve),e(nve,cdr),e(L6,fdr),e(L6,NU),e(NU,mdr),e(L6,gdr),e(V,hdr),e(V,y6),e(y6,sve),e(sve,pdr),e(y6,_dr),e(y6,qU),e(qU,udr),e(y6,bdr),e(V,vdr),e(V,x6),e(x6,lve),e(lve,Fdr),e(x6,Tdr),e(x6,jU),e(jU,Mdr),e(x6,Edr),e(V,Cdr),e(V,$6),e($6,ive),e(ive,wdr),e($6,Adr),e($6,DU),e(DU,Ldr),e($6,ydr),e(V,xdr),e(V,k6),e(k6,dve),e(dve,$dr),e(k6,kdr),e(k6,GU),e(GU,Sdr),e(k6,Rdr),e(V,Pdr),e(V,S6),e(S6,cve),e(cve,Bdr),e(S6,Idr),e(S6,OU),e(OU,Ndr),e(S6,qdr),e(V,jdr),e(V,R6),e(R6,fve),e(fve,Ddr),e(R6,Gdr),e(R6,VU),e(VU,Odr),e(R6,Vdr),e(V,Xdr),e(V,P6),e(P6,mve),e(mve,zdr),e(P6,Wdr),e(P6,XU),e(XU,Qdr),e(P6,Udr),e(V,Hdr),e(V,B6),e(B6,gve),e(gve,Jdr),e(B6,Ydr),e(B6,zU),e(zU,Kdr),e(B6,Zdr),e(V,ecr),e(V,I6),e(I6,hve),e(hve,ocr),e(I6,rcr),e(I6,WU),e(WU,tcr),e(I6,acr),e(V,ncr),e(V,N6),e(N6,pve),e(pve,scr),e(N6,lcr),e(N6,QU),e(QU,icr),e(N6,dcr),e(V,ccr),e(V,q6),e(q6,_ve),e(_ve,fcr),e(q6,mcr),e(q6,UU),e(UU,gcr),e(q6,hcr),e(V,pcr),e(V,j6),e(j6,uve),e(uve,_cr),e(j6,ucr),e(j6,HU),e(HU,bcr),e(j6,vcr),e(V,Fcr),e(V,D6),e(D6,bve),e(bve,Tcr),e(D6,Mcr),e(D6,JU),e(JU,Ecr),e(D6,Ccr),e(V,wcr),e(V,G6),e(G6,vve),e(vve,Acr),e(G6,Lcr),e(G6,YU),e(YU,ycr),e(G6,xcr),e(V,$cr),e(V,O6),e(O6,Fve),e(Fve,kcr),e(O6,Scr),e(O6,KU),e(KU,Rcr),e(O6,Pcr),e(V,Bcr),e(V,V6),e(V6,Tve),e(Tve,Icr),e(V6,Ncr),e(V6,ZU),e(ZU,qcr),e(V6,jcr),e(V,Dcr),e(V,X6),e(X6,Mve),e(Mve,Gcr),e(X6,Ocr),e(X6,eH),e(eH,Vcr),e(X6,Xcr),e(V,zcr),e(V,z6),e(z6,Eve),e(Eve,Wcr),e(z6,Qcr),e(z6,oH),e(oH,Ucr),e(z6,Hcr),e(V,Jcr),e(V,W6),e(W6,Cve),e(Cve,Ycr),e(W6,Kcr),e(W6,rH),e(rH,Zcr),e(W6,efr),e(V,ofr),e(V,Q6),e(Q6,wve),e(wve,rfr),e(Q6,tfr),e(Q6,tH),e(tH,afr),e(Q6,nfr),e(V,sfr),e(V,U6),e(U6,Ave),e(Ave,lfr),e(U6,ifr),e(U6,aH),e(aH,dfr),e(U6,cfr),e(V,ffr),e(V,H6),e(H6,Lve),e(Lve,mfr),e(H6,gfr),e(H6,nH),e(nH,hfr),e(H6,pfr),e(V,_fr),e(V,J6),e(J6,yve),e(yve,ufr),e(J6,bfr),e(J6,sH),e(sH,vfr),e(J6,Ffr),e(so,Tfr),e(so,Y6),e(Y6,Mfr),e(Y6,xve),e(xve,Efr),e(Y6,Cfr),e(Y6,$ve),e($ve,wfr),e(so,Afr),M(K6,so,null),b(f,BUe,u),b(f,Sd,u),e(Sd,Z6),e(Z6,kve),M(j9,kve,null),e(Sd,Lfr),e(Sd,Sve),e(Sve,yfr),b(f,IUe,u),b(f,Vo,u),M(D9,Vo,null),e(Vo,xfr),e(Vo,Rd),e(Rd,$fr),e(Rd,lH),e(lH,kfr),e(Rd,Sfr),e(Rd,iH),e(iH,Rfr),e(Rd,Pfr),e(Vo,Bfr),e(Vo,G9),e(G9,Ifr),e(G9,Rve),e(Rve,Nfr),e(G9,qfr),e(Vo,jfr),e(Vo,Mt),M(O9,Mt,null),e(Mt,Dfr),e(Mt,Pve),e(Pve,Gfr),e(Mt,Ofr),e(Mt,Pd),e(Pd,Vfr),e(Pd,Bve),e(Bve,Xfr),e(Pd,zfr),e(Pd,dH),e(dH,Wfr),e(Pd,Qfr),e(Mt,Ufr),M(eT,Mt,null),e(Vo,Hfr),e(Vo,lo),M(V9,lo,null),e(lo,Jfr),e(lo,Ive),e(Ive,Yfr),e(lo,Kfr),e(lo,Za),e(Za,Zfr),e(Za,Nve),e(Nve,emr),e(Za,omr),e(Za,qve),e(qve,rmr),e(Za,tmr),e(Za,jve),e(jve,amr),e(Za,nmr),e(lo,smr),e(lo,Dve),e(Dve,oT),e(oT,Gve),e(Gve,lmr),e(oT,imr),e(oT,cH),e(cH,dmr),e(oT,cmr),e(lo,fmr),e(lo,rT),e(rT,mmr),e(rT,Ove),e(Ove,gmr),e(rT,hmr),e(rT,Vve),e(Vve,pmr),e(lo,_mr),M(tT,lo,null),b(f,NUe,u),b(f,Bd,u),e(Bd,aT),e(aT,Xve),M(X9,Xve,null),e(Bd,umr),e(Bd,zve),e(zve,bmr),b(f,qUe,u),b(f,Xo,u),M(z9,Xo,null),e(Xo,vmr),e(Xo,Id),e(Id,Fmr),e(Id,fH),e(fH,Tmr),e(Id,Mmr),e(Id,mH),e(mH,Emr),e(Id,Cmr),e(Xo,wmr),e(Xo,W9),e(W9,Amr),e(W9,Wve),e(Wve,Lmr),e(W9,ymr),e(Xo,xmr),e(Xo,Et),M(Q9,Et,null),e(Et,$mr),e(Et,Qve),e(Qve,kmr),e(Et,Smr),e(Et,Nd),e(Nd,Rmr),e(Nd,Uve),e(Uve,Pmr),e(Nd,Bmr),e(Nd,gH),e(gH,Imr),e(Nd,Nmr),e(Et,qmr),M(nT,Et,null),e(Xo,jmr),e(Xo,io),M(U9,io,null),e(io,Dmr),e(io,Hve),e(Hve,Gmr),e(io,Omr),e(io,en),e(en,Vmr),e(en,Jve),e(Jve,Xmr),e(en,zmr),e(en,Yve),e(Yve,Wmr),e(en,Qmr),e(en,Kve),e(Kve,Umr),e(en,Hmr),e(io,Jmr),e(io,be),e(be,sT),e(sT,Zve),e(Zve,Ymr),e(sT,Kmr),e(sT,hH),e(hH,Zmr),e(sT,egr),e(be,ogr),e(be,lT),e(lT,eFe),e(eFe,rgr),e(lT,tgr),e(lT,pH),e(pH,agr),e(lT,ngr),e(be,sgr),e(be,iT),e(iT,oFe),e(oFe,lgr),e(iT,igr),e(iT,_H),e(_H,dgr),e(iT,cgr),e(be,fgr),e(be,dT),e(dT,rFe),e(rFe,mgr),e(dT,ggr),e(dT,uH),e(uH,hgr),e(dT,pgr),e(be,_gr),e(be,sl),e(sl,tFe),e(tFe,ugr),e(sl,bgr),e(sl,bH),e(bH,vgr),e(sl,Fgr),e(sl,vH),e(vH,Tgr),e(sl,Mgr),e(be,Egr),e(be,cT),e(cT,aFe),e(aFe,Cgr),e(cT,wgr),e(cT,FH),e(FH,Agr),e(cT,Lgr),e(be,ygr),e(be,ll),e(ll,nFe),e(nFe,xgr),e(ll,$gr),e(ll,TH),e(TH,kgr),e(ll,Sgr),e(ll,MH),e(MH,Rgr),e(ll,Pgr),e(be,Bgr),e(be,fT),e(fT,sFe),e(sFe,Igr),e(fT,Ngr),e(fT,EH),e(EH,qgr),e(fT,jgr),e(be,Dgr),e(be,Ct),e(Ct,lFe),e(lFe,Ggr),e(Ct,Ogr),e(Ct,CH),e(CH,Vgr),e(Ct,Xgr),e(Ct,wH),e(wH,zgr),e(Ct,Wgr),e(Ct,AH),e(AH,Qgr),e(Ct,Ugr),e(be,Hgr),e(be,mT),e(mT,iFe),e(iFe,Jgr),e(mT,Ygr),e(mT,LH),e(LH,Kgr),e(mT,Zgr),e(be,ehr),e(be,gT),e(gT,dFe),e(dFe,ohr),e(gT,rhr),e(gT,yH),e(yH,thr),e(gT,ahr),e(be,nhr),e(be,hT),e(hT,cFe),e(cFe,shr),e(hT,lhr),e(hT,xH),e(xH,ihr),e(hT,dhr),e(be,chr),e(be,pT),e(pT,fFe),e(fFe,fhr),e(pT,mhr),e(pT,$H),e($H,ghr),e(pT,hhr),e(be,phr),e(be,_T),e(_T,mFe),e(mFe,_hr),e(_T,uhr),e(_T,kH),e(kH,bhr),e(_T,vhr),e(be,Fhr),e(be,uT),e(uT,gFe),e(gFe,Thr),e(uT,Mhr),e(uT,SH),e(SH,Ehr),e(uT,Chr),e(be,whr),e(be,bT),e(bT,hFe),e(hFe,Ahr),e(bT,Lhr),e(bT,RH),e(RH,yhr),e(bT,xhr),e(be,$hr),e(be,vT),e(vT,pFe),e(pFe,khr),e(vT,Shr),e(vT,PH),e(PH,Rhr),e(vT,Phr),e(io,Bhr),e(io,FT),e(FT,Ihr),e(FT,_Fe),e(_Fe,Nhr),e(FT,qhr),e(FT,uFe),e(uFe,jhr),e(io,Dhr),M(TT,io,null),b(f,jUe,u),b(f,qd,u),e(qd,MT),e(MT,bFe),M(H9,bFe,null),e(qd,Ghr),e(qd,vFe),e(vFe,Ohr),b(f,DUe,u),b(f,zo,u),M(J9,zo,null),e(zo,Vhr),e(zo,jd),e(jd,Xhr),e(jd,BH),e(BH,zhr),e(jd,Whr),e(jd,IH),e(IH,Qhr),e(jd,Uhr),e(zo,Hhr),e(zo,Y9),e(Y9,Jhr),e(Y9,FFe),e(FFe,Yhr),e(Y9,Khr),e(zo,Zhr),e(zo,wt),M(K9,wt,null),e(wt,epr),e(wt,TFe),e(TFe,opr),e(wt,rpr),e(wt,Dd),e(Dd,tpr),e(Dd,MFe),e(MFe,apr),e(Dd,npr),e(Dd,NH),e(NH,spr),e(Dd,lpr),e(wt,ipr),M(ET,wt,null),e(zo,dpr),e(zo,co),M(Z9,co,null),e(co,cpr),e(co,EFe),e(EFe,fpr),e(co,mpr),e(co,on),e(on,gpr),e(on,CFe),e(CFe,hpr),e(on,ppr),e(on,wFe),e(wFe,_pr),e(on,upr),e(on,AFe),e(AFe,bpr),e(on,vpr),e(co,Fpr),e(co,LFe),e(LFe,CT),e(CT,yFe),e(yFe,Tpr),e(CT,Mpr),e(CT,qH),e(qH,Epr),e(CT,Cpr),e(co,wpr),e(co,wT),e(wT,Apr),e(wT,xFe),e(xFe,Lpr),e(wT,ypr),e(wT,$Fe),e($Fe,xpr),e(co,$pr),M(AT,co,null),b(f,GUe,u),b(f,Gd,u),e(Gd,LT),e(LT,kFe),M(ex,kFe,null),e(Gd,kpr),e(Gd,SFe),e(SFe,Spr),b(f,OUe,u),b(f,Wo,u),M(ox,Wo,null),e(Wo,Rpr),e(Wo,Od),e(Od,Ppr),e(Od,jH),e(jH,Bpr),e(Od,Ipr),e(Od,DH),e(DH,Npr),e(Od,qpr),e(Wo,jpr),e(Wo,rx),e(rx,Dpr),e(rx,RFe),e(RFe,Gpr),e(rx,Opr),e(Wo,Vpr),e(Wo,At),M(tx,At,null),e(At,Xpr),e(At,PFe),e(PFe,zpr),e(At,Wpr),e(At,Vd),e(Vd,Qpr),e(Vd,BFe),e(BFe,Upr),e(Vd,Hpr),e(Vd,GH),e(GH,Jpr),e(Vd,Ypr),e(At,Kpr),M(yT,At,null),e(Wo,Zpr),e(Wo,fo),M(ax,fo,null),e(fo,e_r),e(fo,IFe),e(IFe,o_r),e(fo,r_r),e(fo,rn),e(rn,t_r),e(rn,NFe),e(NFe,a_r),e(rn,n_r),e(rn,qFe),e(qFe,s_r),e(rn,l_r),e(rn,jFe),e(jFe,i_r),e(rn,d_r),e(fo,c_r),e(fo,DFe),e(DFe,xT),e(xT,GFe),e(GFe,f_r),e(xT,m_r),e(xT,OH),e(OH,g_r),e(xT,h_r),e(fo,p_r),e(fo,$T),e($T,__r),e($T,OFe),e(OFe,u_r),e($T,b_r),e($T,VFe),e(VFe,v_r),e(fo,F_r),M(kT,fo,null),b(f,VUe,u),b(f,Xd,u),e(Xd,ST),e(ST,XFe),M(nx,XFe,null),e(Xd,T_r),e(Xd,zFe),e(zFe,M_r),b(f,XUe,u),b(f,Qo,u),M(sx,Qo,null),e(Qo,E_r),e(Qo,zd),e(zd,C_r),e(zd,VH),e(VH,w_r),e(zd,A_r),e(zd,XH),e(XH,L_r),e(zd,y_r),e(Qo,x_r),e(Qo,lx),e(lx,$_r),e(lx,WFe),e(WFe,k_r),e(lx,S_r),e(Qo,R_r),e(Qo,Lt),M(ix,Lt,null),e(Lt,P_r),e(Lt,QFe),e(QFe,B_r),e(Lt,I_r),e(Lt,Wd),e(Wd,N_r),e(Wd,UFe),e(UFe,q_r),e(Wd,j_r),e(Wd,zH),e(zH,D_r),e(Wd,G_r),e(Lt,O_r),M(RT,Lt,null),e(Qo,V_r),e(Qo,mo),M(dx,mo,null),e(mo,X_r),e(mo,HFe),e(HFe,z_r),e(mo,W_r),e(mo,tn),e(tn,Q_r),e(tn,JFe),e(JFe,U_r),e(tn,H_r),e(tn,YFe),e(YFe,J_r),e(tn,Y_r),e(tn,KFe),e(KFe,K_r),e(tn,Z_r),e(mo,eur),e(mo,ZFe),e(ZFe,PT),e(PT,e6e),e(e6e,our),e(PT,rur),e(PT,WH),e(WH,tur),e(PT,aur),e(mo,nur),e(mo,BT),e(BT,sur),e(BT,o6e),e(o6e,lur),e(BT,iur),e(BT,r6e),e(r6e,dur),e(mo,cur),M(IT,mo,null),b(f,zUe,u),b(f,Qd,u),e(Qd,NT),e(NT,t6e),M(cx,t6e,null),e(Qd,fur),e(Qd,a6e),e(a6e,mur),b(f,WUe,u),b(f,Uo,u),M(fx,Uo,null),e(Uo,gur),e(Uo,Ud),e(Ud,hur),e(Ud,QH),e(QH,pur),e(Ud,_ur),e(Ud,UH),e(UH,uur),e(Ud,bur),e(Uo,vur),e(Uo,mx),e(mx,Fur),e(mx,n6e),e(n6e,Tur),e(mx,Mur),e(Uo,Eur),e(Uo,yt),M(gx,yt,null),e(yt,Cur),e(yt,s6e),e(s6e,wur),e(yt,Aur),e(yt,Hd),e(Hd,Lur),e(Hd,l6e),e(l6e,yur),e(Hd,xur),e(Hd,HH),e(HH,$ur),e(Hd,kur),e(yt,Sur),M(qT,yt,null),e(Uo,Rur),e(Uo,go),M(hx,go,null),e(go,Pur),e(go,i6e),e(i6e,Bur),e(go,Iur),e(go,an),e(an,Nur),e(an,d6e),e(d6e,qur),e(an,jur),e(an,c6e),e(c6e,Dur),e(an,Gur),e(an,f6e),e(f6e,Our),e(an,Vur),e(go,Xur),e(go,Pe),e(Pe,jT),e(jT,m6e),e(m6e,zur),e(jT,Wur),e(jT,JH),e(JH,Qur),e(jT,Uur),e(Pe,Hur),e(Pe,DT),e(DT,g6e),e(g6e,Jur),e(DT,Yur),e(DT,YH),e(YH,Kur),e(DT,Zur),e(Pe,e1r),e(Pe,GT),e(GT,h6e),e(h6e,o1r),e(GT,r1r),e(GT,KH),e(KH,t1r),e(GT,a1r),e(Pe,n1r),e(Pe,OT),e(OT,p6e),e(p6e,s1r),e(OT,l1r),e(OT,ZH),e(ZH,i1r),e(OT,d1r),e(Pe,c1r),e(Pe,VT),e(VT,_6e),e(_6e,f1r),e(VT,m1r),e(VT,eJ),e(eJ,g1r),e(VT,h1r),e(Pe,p1r),e(Pe,XT),e(XT,u6e),e(u6e,_1r),e(XT,u1r),e(XT,oJ),e(oJ,b1r),e(XT,v1r),e(Pe,F1r),e(Pe,zT),e(zT,b6e),e(b6e,T1r),e(zT,M1r),e(zT,rJ),e(rJ,E1r),e(zT,C1r),e(Pe,w1r),e(Pe,WT),e(WT,v6e),e(v6e,A1r),e(WT,L1r),e(WT,tJ),e(tJ,y1r),e(WT,x1r),e(Pe,$1r),e(Pe,QT),e(QT,F6e),e(F6e,k1r),e(QT,S1r),e(QT,aJ),e(aJ,R1r),e(QT,P1r),e(go,B1r),e(go,UT),e(UT,I1r),e(UT,T6e),e(T6e,N1r),e(UT,q1r),e(UT,M6e),e(M6e,j1r),e(go,D1r),M(HT,go,null),b(f,QUe,u),b(f,Jd,u),e(Jd,JT),e(JT,E6e),M(px,E6e,null),e(Jd,G1r),e(Jd,C6e),e(C6e,O1r),b(f,UUe,u),b(f,Ho,u),M(_x,Ho,null),e(Ho,V1r),e(Ho,Yd),e(Yd,X1r),e(Yd,nJ),e(nJ,z1r),e(Yd,W1r),e(Yd,sJ),e(sJ,Q1r),e(Yd,U1r),e(Ho,H1r),e(Ho,ux),e(ux,J1r),e(ux,w6e),e(w6e,Y1r),e(ux,K1r),e(Ho,Z1r),e(Ho,xt),M(bx,xt,null),e(xt,e8r),e(xt,A6e),e(A6e,o8r),e(xt,r8r),e(xt,Kd),e(Kd,t8r),e(Kd,L6e),e(L6e,a8r),e(Kd,n8r),e(Kd,lJ),e(lJ,s8r),e(Kd,l8r),e(xt,i8r),M(YT,xt,null),e(Ho,d8r),e(Ho,ho),M(vx,ho,null),e(ho,c8r),e(ho,y6e),e(y6e,f8r),e(ho,m8r),e(ho,nn),e(nn,g8r),e(nn,x6e),e(x6e,h8r),e(nn,p8r),e(nn,$6e),e($6e,_8r),e(nn,u8r),e(nn,k6e),e(k6e,b8r),e(nn,v8r),e(ho,F8r),e(ho,st),e(st,KT),e(KT,S6e),e(S6e,T8r),e(KT,M8r),e(KT,iJ),e(iJ,E8r),e(KT,C8r),e(st,w8r),e(st,ZT),e(ZT,R6e),e(R6e,A8r),e(ZT,L8r),e(ZT,dJ),e(dJ,y8r),e(ZT,x8r),e(st,$8r),e(st,e7),e(e7,P6e),e(P6e,k8r),e(e7,S8r),e(e7,cJ),e(cJ,R8r),e(e7,P8r),e(st,B8r),e(st,o7),e(o7,B6e),e(B6e,I8r),e(o7,N8r),e(o7,fJ),e(fJ,q8r),e(o7,j8r),e(st,D8r),e(st,r7),e(r7,I6e),e(I6e,G8r),e(r7,O8r),e(r7,mJ),e(mJ,V8r),e(r7,X8r),e(ho,z8r),e(ho,t7),e(t7,W8r),e(t7,N6e),e(N6e,Q8r),e(t7,U8r),e(t7,q6e),e(q6e,H8r),e(ho,J8r),M(a7,ho,null),b(f,HUe,u),b(f,Zd,u),e(Zd,n7),e(n7,j6e),M(Fx,j6e,null),e(Zd,Y8r),e(Zd,D6e),e(D6e,K8r),b(f,JUe,u),b(f,Jo,u),M(Tx,Jo,null),e(Jo,Z8r),e(Jo,ec),e(ec,e2r),e(ec,gJ),e(gJ,o2r),e(ec,r2r),e(ec,hJ),e(hJ,t2r),e(ec,a2r),e(Jo,n2r),e(Jo,Mx),e(Mx,s2r),e(Mx,G6e),e(G6e,l2r),e(Mx,i2r),e(Jo,d2r),e(Jo,$t),M(Ex,$t,null),e($t,c2r),e($t,O6e),e(O6e,f2r),e($t,m2r),e($t,oc),e(oc,g2r),e(oc,V6e),e(V6e,h2r),e(oc,p2r),e(oc,pJ),e(pJ,_2r),e(oc,u2r),e($t,b2r),M(s7,$t,null),e(Jo,v2r),e(Jo,po),M(Cx,po,null),e(po,F2r),e(po,X6e),e(X6e,T2r),e(po,M2r),e(po,sn),e(sn,E2r),e(sn,z6e),e(z6e,C2r),e(sn,w2r),e(sn,W6e),e(W6e,A2r),e(sn,L2r),e(sn,Q6e),e(Q6e,y2r),e(sn,x2r),e(po,$2r),e(po,Le),e(Le,l7),e(l7,U6e),e(U6e,k2r),e(l7,S2r),e(l7,_J),e(_J,R2r),e(l7,P2r),e(Le,B2r),e(Le,i7),e(i7,H6e),e(H6e,I2r),e(i7,N2r),e(i7,uJ),e(uJ,q2r),e(i7,j2r),e(Le,D2r),e(Le,d7),e(d7,J6e),e(J6e,G2r),e(d7,O2r),e(d7,bJ),e(bJ,V2r),e(d7,X2r),e(Le,z2r),e(Le,c7),e(c7,Y6e),e(Y6e,W2r),e(c7,Q2r),e(c7,vJ),e(vJ,U2r),e(c7,H2r),e(Le,J2r),e(Le,f7),e(f7,K6e),e(K6e,Y2r),e(f7,K2r),e(f7,FJ),e(FJ,Z2r),e(f7,ebr),e(Le,obr),e(Le,m7),e(m7,Z6e),e(Z6e,rbr),e(m7,tbr),e(m7,TJ),e(TJ,abr),e(m7,nbr),e(Le,sbr),e(Le,g7),e(g7,eTe),e(eTe,lbr),e(g7,ibr),e(g7,MJ),e(MJ,dbr),e(g7,cbr),e(Le,fbr),e(Le,h7),e(h7,oTe),e(oTe,mbr),e(h7,gbr),e(h7,EJ),e(EJ,hbr),e(h7,pbr),e(Le,_br),e(Le,p7),e(p7,rTe),e(rTe,ubr),e(p7,bbr),e(p7,CJ),e(CJ,vbr),e(p7,Fbr),e(Le,Tbr),e(Le,_7),e(_7,tTe),e(tTe,Mbr),e(_7,Ebr),e(_7,wJ),e(wJ,Cbr),e(_7,wbr),e(po,Abr),e(po,u7),e(u7,Lbr),e(u7,aTe),e(aTe,ybr),e(u7,xbr),e(u7,nTe),e(nTe,$br),e(po,kbr),M(b7,po,null),b(f,YUe,u),b(f,rc,u),e(rc,v7),e(v7,sTe),M(wx,sTe,null),e(rc,Sbr),e(rc,lTe),e(lTe,Rbr),b(f,KUe,u),b(f,Yo,u),M(Ax,Yo,null),e(Yo,Pbr),e(Yo,tc),e(tc,Bbr),e(tc,AJ),e(AJ,Ibr),e(tc,Nbr),e(tc,LJ),e(LJ,qbr),e(tc,jbr),e(Yo,Dbr),e(Yo,Lx),e(Lx,Gbr),e(Lx,iTe),e(iTe,Obr),e(Lx,Vbr),e(Yo,Xbr),e(Yo,kt),M(yx,kt,null),e(kt,zbr),e(kt,dTe),e(dTe,Wbr),e(kt,Qbr),e(kt,ac),e(ac,Ubr),e(ac,cTe),e(cTe,Hbr),e(ac,Jbr),e(ac,yJ),e(yJ,Ybr),e(ac,Kbr),e(kt,Zbr),M(F7,kt,null),e(Yo,evr),e(Yo,_o),M(xx,_o,null),e(_o,ovr),e(_o,fTe),e(fTe,rvr),e(_o,tvr),e(_o,ln),e(ln,avr),e(ln,mTe),e(mTe,nvr),e(ln,svr),e(ln,gTe),e(gTe,lvr),e(ln,ivr),e(ln,hTe),e(hTe,dvr),e(ln,cvr),e(_o,fvr),e(_o,$x),e($x,T7),e(T7,pTe),e(pTe,mvr),e(T7,gvr),e(T7,xJ),e(xJ,hvr),e(T7,pvr),e($x,_vr),e($x,M7),e(M7,_Te),e(_Te,uvr),e(M7,bvr),e(M7,$J),e($J,vvr),e(M7,Fvr),e(_o,Tvr),e(_o,E7),e(E7,Mvr),e(E7,uTe),e(uTe,Evr),e(E7,Cvr),e(E7,bTe),e(bTe,wvr),e(_o,Avr),M(C7,_o,null),b(f,ZUe,u),b(f,nc,u),e(nc,w7),e(w7,vTe),M(kx,vTe,null),e(nc,Lvr),e(nc,FTe),e(FTe,yvr),b(f,eHe,u),b(f,Ko,u),M(Sx,Ko,null),e(Ko,xvr),e(Ko,sc),e(sc,$vr),e(sc,kJ),e(kJ,kvr),e(sc,Svr),e(sc,SJ),e(SJ,Rvr),e(sc,Pvr),e(Ko,Bvr),e(Ko,Rx),e(Rx,Ivr),e(Rx,TTe),e(TTe,Nvr),e(Rx,qvr),e(Ko,jvr),e(Ko,St),M(Px,St,null),e(St,Dvr),e(St,MTe),e(MTe,Gvr),e(St,Ovr),e(St,lc),e(lc,Vvr),e(lc,ETe),e(ETe,Xvr),e(lc,zvr),e(lc,RJ),e(RJ,Wvr),e(lc,Qvr),e(St,Uvr),M(A7,St,null),e(Ko,Hvr),e(Ko,uo),M(Bx,uo,null),e(uo,Jvr),e(uo,CTe),e(CTe,Yvr),e(uo,Kvr),e(uo,dn),e(dn,Zvr),e(dn,wTe),e(wTe,eFr),e(dn,oFr),e(dn,ATe),e(ATe,rFr),e(dn,tFr),e(dn,LTe),e(LTe,aFr),e(dn,nFr),e(uo,sFr),e(uo,lt),e(lt,L7),e(L7,yTe),e(yTe,lFr),e(L7,iFr),e(L7,PJ),e(PJ,dFr),e(L7,cFr),e(lt,fFr),e(lt,y7),e(y7,xTe),e(xTe,mFr),e(y7,gFr),e(y7,BJ),e(BJ,hFr),e(y7,pFr),e(lt,_Fr),e(lt,x7),e(x7,$Te),e($Te,uFr),e(x7,bFr),e(x7,IJ),e(IJ,vFr),e(x7,FFr),e(lt,TFr),e(lt,$7),e($7,kTe),e(kTe,MFr),e($7,EFr),e($7,NJ),e(NJ,CFr),e($7,wFr),e(lt,AFr),e(lt,k7),e(k7,STe),e(STe,LFr),e(k7,yFr),e(k7,qJ),e(qJ,xFr),e(k7,$Fr),e(uo,kFr),e(uo,S7),e(S7,SFr),e(S7,RTe),e(RTe,RFr),e(S7,PFr),e(S7,PTe),e(PTe,BFr),e(uo,IFr),M(R7,uo,null),b(f,oHe,u),b(f,ic,u),e(ic,P7),e(P7,BTe),M(Ix,BTe,null),e(ic,NFr),e(ic,ITe),e(ITe,qFr),b(f,rHe,u),b(f,Zo,u),M(Nx,Zo,null),e(Zo,jFr),e(Zo,dc),e(dc,DFr),e(dc,jJ),e(jJ,GFr),e(dc,OFr),e(dc,DJ),e(DJ,VFr),e(dc,XFr),e(Zo,zFr),e(Zo,qx),e(qx,WFr),e(qx,NTe),e(NTe,QFr),e(qx,UFr),e(Zo,HFr),e(Zo,Rt),M(jx,Rt,null),e(Rt,JFr),e(Rt,qTe),e(qTe,YFr),e(Rt,KFr),e(Rt,cc),e(cc,ZFr),e(cc,jTe),e(jTe,e6r),e(cc,o6r),e(cc,GJ),e(GJ,r6r),e(cc,t6r),e(Rt,a6r),M(B7,Rt,null),e(Zo,n6r),e(Zo,bo),M(Dx,bo,null),e(bo,s6r),e(bo,DTe),e(DTe,l6r),e(bo,i6r),e(bo,cn),e(cn,d6r),e(cn,GTe),e(GTe,c6r),e(cn,f6r),e(cn,OTe),e(OTe,m6r),e(cn,g6r),e(cn,VTe),e(VTe,h6r),e(cn,p6r),e(bo,_6r),e(bo,fn),e(fn,I7),e(I7,XTe),e(XTe,u6r),e(I7,b6r),e(I7,OJ),e(OJ,v6r),e(I7,F6r),e(fn,T6r),e(fn,N7),e(N7,zTe),e(zTe,M6r),e(N7,E6r),e(N7,VJ),e(VJ,C6r),e(N7,w6r),e(fn,A6r),e(fn,q7),e(q7,WTe),e(WTe,L6r),e(q7,y6r),e(q7,XJ),e(XJ,x6r),e(q7,$6r),e(fn,k6r),e(fn,j7),e(j7,QTe),e(QTe,S6r),e(j7,R6r),e(j7,zJ),e(zJ,P6r),e(j7,B6r),e(bo,I6r),e(bo,D7),e(D7,N6r),e(D7,UTe),e(UTe,q6r),e(D7,j6r),e(D7,HTe),e(HTe,D6r),e(bo,G6r),M(G7,bo,null),b(f,tHe,u),b(f,fc,u),e(fc,O7),e(O7,JTe),M(Gx,JTe,null),e(fc,O6r),e(fc,YTe),e(YTe,V6r),b(f,aHe,u),b(f,er,u),M(Ox,er,null),e(er,X6r),e(er,mc),e(mc,z6r),e(mc,WJ),e(WJ,W6r),e(mc,Q6r),e(mc,QJ),e(QJ,U6r),e(mc,H6r),e(er,J6r),e(er,Vx),e(Vx,Y6r),e(Vx,KTe),e(KTe,K6r),e(Vx,Z6r),e(er,eTr),e(er,Pt),M(Xx,Pt,null),e(Pt,oTr),e(Pt,ZTe),e(ZTe,rTr),e(Pt,tTr),e(Pt,gc),e(gc,aTr),e(gc,e7e),e(e7e,nTr),e(gc,sTr),e(gc,UJ),e(UJ,lTr),e(gc,iTr),e(Pt,dTr),M(V7,Pt,null),e(er,cTr),e(er,vo),M(zx,vo,null),e(vo,fTr),e(vo,o7e),e(o7e,mTr),e(vo,gTr),e(vo,mn),e(mn,hTr),e(mn,r7e),e(r7e,pTr),e(mn,_Tr),e(mn,t7e),e(t7e,uTr),e(mn,bTr),e(mn,a7e),e(a7e,vTr),e(mn,FTr),e(vo,TTr),e(vo,Wx),e(Wx,X7),e(X7,n7e),e(n7e,MTr),e(X7,ETr),e(X7,HJ),e(HJ,CTr),e(X7,wTr),e(Wx,ATr),e(Wx,z7),e(z7,s7e),e(s7e,LTr),e(z7,yTr),e(z7,JJ),e(JJ,xTr),e(z7,$Tr),e(vo,kTr),e(vo,W7),e(W7,STr),e(W7,l7e),e(l7e,RTr),e(W7,PTr),e(W7,i7e),e(i7e,BTr),e(vo,ITr),M(Q7,vo,null),b(f,nHe,u),b(f,hc,u),e(hc,U7),e(U7,d7e),M(Qx,d7e,null),e(hc,NTr),e(hc,c7e),e(c7e,qTr),b(f,sHe,u),b(f,or,u),M(Ux,or,null),e(or,jTr),e(or,pc),e(pc,DTr),e(pc,YJ),e(YJ,GTr),e(pc,OTr),e(pc,KJ),e(KJ,VTr),e(pc,XTr),e(or,zTr),e(or,Hx),e(Hx,WTr),e(Hx,f7e),e(f7e,QTr),e(Hx,UTr),e(or,HTr),e(or,Bt),M(Jx,Bt,null),e(Bt,JTr),e(Bt,m7e),e(m7e,YTr),e(Bt,KTr),e(Bt,_c),e(_c,ZTr),e(_c,g7e),e(g7e,e7r),e(_c,o7r),e(_c,ZJ),e(ZJ,r7r),e(_c,t7r),e(Bt,a7r),M(H7,Bt,null),e(or,n7r),e(or,Fo),M(Yx,Fo,null),e(Fo,s7r),e(Fo,h7e),e(h7e,l7r),e(Fo,i7r),e(Fo,gn),e(gn,d7r),e(gn,p7e),e(p7e,c7r),e(gn,f7r),e(gn,_7e),e(_7e,m7r),e(gn,g7r),e(gn,u7e),e(u7e,h7r),e(gn,p7r),e(Fo,_7r),e(Fo,b7e),e(b7e,J7),e(J7,v7e),e(v7e,u7r),e(J7,b7r),e(J7,eY),e(eY,v7r),e(J7,F7r),e(Fo,T7r),e(Fo,Y7),e(Y7,M7r),e(Y7,F7e),e(F7e,E7r),e(Y7,C7r),e(Y7,T7e),e(T7e,w7r),e(Fo,A7r),M(K7,Fo,null),b(f,lHe,u),b(f,uc,u),e(uc,Z7),e(Z7,M7e),M(Kx,M7e,null),e(uc,L7r),e(uc,E7e),e(E7e,y7r),b(f,iHe,u),b(f,rr,u),M(Zx,rr,null),e(rr,x7r),e(rr,bc),e(bc,$7r),e(bc,oY),e(oY,k7r),e(bc,S7r),e(bc,rY),e(rY,R7r),e(bc,P7r),e(rr,B7r),e(rr,e$),e(e$,I7r),e(e$,C7e),e(C7e,N7r),e(e$,q7r),e(rr,j7r),e(rr,It),M(o$,It,null),e(It,D7r),e(It,w7e),e(w7e,G7r),e(It,O7r),e(It,vc),e(vc,V7r),e(vc,A7e),e(A7e,X7r),e(vc,z7r),e(vc,tY),e(tY,W7r),e(vc,Q7r),e(It,U7r),M(eM,It,null),e(rr,H7r),e(rr,To),M(r$,To,null),e(To,J7r),e(To,L7e),e(L7e,Y7r),e(To,K7r),e(To,hn),e(hn,Z7r),e(hn,y7e),e(y7e,eMr),e(hn,oMr),e(hn,x7e),e(x7e,rMr),e(hn,tMr),e(hn,$7e),e($7e,aMr),e(hn,nMr),e(To,sMr),e(To,it),e(it,oM),e(oM,k7e),e(k7e,lMr),e(oM,iMr),e(oM,aY),e(aY,dMr),e(oM,cMr),e(it,fMr),e(it,rM),e(rM,S7e),e(S7e,mMr),e(rM,gMr),e(rM,nY),e(nY,hMr),e(rM,pMr),e(it,_Mr),e(it,tM),e(tM,R7e),e(R7e,uMr),e(tM,bMr),e(tM,sY),e(sY,vMr),e(tM,FMr),e(it,TMr),e(it,aM),e(aM,P7e),e(P7e,MMr),e(aM,EMr),e(aM,lY),e(lY,CMr),e(aM,wMr),e(it,AMr),e(it,nM),e(nM,B7e),e(B7e,LMr),e(nM,yMr),e(nM,iY),e(iY,xMr),e(nM,$Mr),e(To,kMr),e(To,sM),e(sM,SMr),e(sM,I7e),e(I7e,RMr),e(sM,PMr),e(sM,N7e),e(N7e,BMr),e(To,IMr),M(lM,To,null),b(f,dHe,u),b(f,Fc,u),e(Fc,iM),e(iM,q7e),M(t$,q7e,null),e(Fc,NMr),e(Fc,j7e),e(j7e,qMr),b(f,cHe,u),b(f,tr,u),M(a$,tr,null),e(tr,jMr),e(tr,Tc),e(Tc,DMr),e(Tc,dY),e(dY,GMr),e(Tc,OMr),e(Tc,cY),e(cY,VMr),e(Tc,XMr),e(tr,zMr),e(tr,n$),e(n$,WMr),e(n$,D7e),e(D7e,QMr),e(n$,UMr),e(tr,HMr),e(tr,Nt),M(s$,Nt,null),e(Nt,JMr),e(Nt,G7e),e(G7e,YMr),e(Nt,KMr),e(Nt,Mc),e(Mc,ZMr),e(Mc,O7e),e(O7e,eEr),e(Mc,oEr),e(Mc,fY),e(fY,rEr),e(Mc,tEr),e(Nt,aEr),M(dM,Nt,null),e(tr,nEr),e(tr,Mo),M(l$,Mo,null),e(Mo,sEr),e(Mo,V7e),e(V7e,lEr),e(Mo,iEr),e(Mo,pn),e(pn,dEr),e(pn,X7e),e(X7e,cEr),e(pn,fEr),e(pn,z7e),e(z7e,mEr),e(pn,gEr),e(pn,W7e),e(W7e,hEr),e(pn,pEr),e(Mo,_Er),e(Mo,Q7e),e(Q7e,cM),e(cM,U7e),e(U7e,uEr),e(cM,bEr),e(cM,mY),e(mY,vEr),e(cM,FEr),e(Mo,TEr),e(Mo,fM),e(fM,MEr),e(fM,H7e),e(H7e,EEr),e(fM,CEr),e(fM,J7e),e(J7e,wEr),e(Mo,AEr),M(mM,Mo,null),b(f,fHe,u),b(f,Ec,u),e(Ec,gM),e(gM,Y7e),M(i$,Y7e,null),e(Ec,LEr),e(Ec,K7e),e(K7e,yEr),b(f,mHe,u),b(f,ar,u),M(d$,ar,null),e(ar,xEr),e(ar,Cc),e(Cc,$Er),e(Cc,gY),e(gY,kEr),e(Cc,SEr),e(Cc,hY),e(hY,REr),e(Cc,PEr),e(ar,BEr),e(ar,c$),e(c$,IEr),e(c$,Z7e),e(Z7e,NEr),e(c$,qEr),e(ar,jEr),e(ar,qt),M(f$,qt,null),e(qt,DEr),e(qt,eMe),e(eMe,GEr),e(qt,OEr),e(qt,wc),e(wc,VEr),e(wc,oMe),e(oMe,XEr),e(wc,zEr),e(wc,pY),e(pY,WEr),e(wc,QEr),e(qt,UEr),M(hM,qt,null),e(ar,HEr),e(ar,Rr),M(m$,Rr,null),e(Rr,JEr),e(Rr,rMe),e(rMe,YEr),e(Rr,KEr),e(Rr,_n),e(_n,ZEr),e(_n,tMe),e(tMe,e4r),e(_n,o4r),e(_n,aMe),e(aMe,r4r),e(_n,t4r),e(_n,nMe),e(nMe,a4r),e(_n,n4r),e(Rr,s4r),e(Rr,q),e(q,pM),e(pM,sMe),e(sMe,l4r),e(pM,i4r),e(pM,_Y),e(_Y,d4r),e(pM,c4r),e(q,f4r),e(q,_M),e(_M,lMe),e(lMe,m4r),e(_M,g4r),e(_M,uY),e(uY,h4r),e(_M,p4r),e(q,_4r),e(q,uM),e(uM,iMe),e(iMe,u4r),e(uM,b4r),e(uM,bY),e(bY,v4r),e(uM,F4r),e(q,T4r),e(q,bM),e(bM,dMe),e(dMe,M4r),e(bM,E4r),e(bM,vY),e(vY,C4r),e(bM,w4r),e(q,A4r),e(q,vM),e(vM,cMe),e(cMe,L4r),e(vM,y4r),e(vM,FY),e(FY,x4r),e(vM,$4r),e(q,k4r),e(q,FM),e(FM,fMe),e(fMe,S4r),e(FM,R4r),e(FM,TY),e(TY,P4r),e(FM,B4r),e(q,I4r),e(q,TM),e(TM,mMe),e(mMe,N4r),e(TM,q4r),e(TM,MY),e(MY,j4r),e(TM,D4r),e(q,G4r),e(q,MM),e(MM,gMe),e(gMe,O4r),e(MM,V4r),e(MM,EY),e(EY,X4r),e(MM,z4r),e(q,W4r),e(q,EM),e(EM,hMe),e(hMe,Q4r),e(EM,U4r),e(EM,CY),e(CY,H4r),e(EM,J4r),e(q,Y4r),e(q,CM),e(CM,pMe),e(pMe,K4r),e(CM,Z4r),e(CM,wY),e(wY,eCr),e(CM,oCr),e(q,rCr),e(q,wM),e(wM,_Me),e(_Me,tCr),e(wM,aCr),e(wM,AY),e(AY,nCr),e(wM,sCr),e(q,lCr),e(q,AM),e(AM,uMe),e(uMe,iCr),e(AM,dCr),e(AM,LY),e(LY,cCr),e(AM,fCr),e(q,mCr),e(q,LM),e(LM,bMe),e(bMe,gCr),e(LM,hCr),e(LM,yY),e(yY,pCr),e(LM,_Cr),e(q,uCr),e(q,yM),e(yM,vMe),e(vMe,bCr),e(yM,vCr),e(yM,xY),e(xY,FCr),e(yM,TCr),e(q,MCr),e(q,xM),e(xM,FMe),e(FMe,ECr),e(xM,CCr),e(xM,$Y),e($Y,wCr),e(xM,ACr),e(q,LCr),e(q,$M),e($M,TMe),e(TMe,yCr),e($M,xCr),e($M,kY),e(kY,$Cr),e($M,kCr),e(q,SCr),e(q,kM),e(kM,MMe),e(MMe,RCr),e(kM,PCr),e(kM,SY),e(SY,BCr),e(kM,ICr),e(q,NCr),e(q,SM),e(SM,EMe),e(EMe,qCr),e(SM,jCr),e(SM,RY),e(RY,DCr),e(SM,GCr),e(q,OCr),e(q,il),e(il,CMe),e(CMe,VCr),e(il,XCr),e(il,PY),e(PY,zCr),e(il,WCr),e(il,BY),e(BY,QCr),e(il,UCr),e(q,HCr),e(q,RM),e(RM,wMe),e(wMe,JCr),e(RM,YCr),e(RM,IY),e(IY,KCr),e(RM,ZCr),e(q,e3r),e(q,PM),e(PM,AMe),e(AMe,o3r),e(PM,r3r),e(PM,NY),e(NY,t3r),e(PM,a3r),e(q,n3r),e(q,BM),e(BM,LMe),e(LMe,s3r),e(BM,l3r),e(BM,qY),e(qY,i3r),e(BM,d3r),e(q,c3r),e(q,IM),e(IM,yMe),e(yMe,f3r),e(IM,m3r),e(IM,jY),e(jY,g3r),e(IM,h3r),e(q,p3r),e(q,NM),e(NM,xMe),e(xMe,_3r),e(NM,u3r),e(NM,DY),e(DY,b3r),e(NM,v3r),e(q,F3r),e(q,qM),e(qM,$Me),e($Me,T3r),e(qM,M3r),e(qM,GY),e(GY,E3r),e(qM,C3r),e(q,w3r),e(q,jM),e(jM,kMe),e(kMe,A3r),e(jM,L3r),e(jM,OY),e(OY,y3r),e(jM,x3r),e(q,$3r),e(q,DM),e(DM,SMe),e(SMe,k3r),e(DM,S3r),e(DM,VY),e(VY,R3r),e(DM,P3r),e(q,B3r),e(q,GM),e(GM,RMe),e(RMe,I3r),e(GM,N3r),e(GM,XY),e(XY,q3r),e(GM,j3r),e(q,D3r),e(q,OM),e(OM,PMe),e(PMe,G3r),e(OM,O3r),e(OM,zY),e(zY,V3r),e(OM,X3r),e(q,z3r),e(q,VM),e(VM,BMe),e(BMe,W3r),e(VM,Q3r),e(VM,WY),e(WY,U3r),e(VM,H3r),e(q,J3r),e(q,XM),e(XM,IMe),e(IMe,Y3r),e(XM,K3r),e(XM,QY),e(QY,Z3r),e(XM,e5r),e(q,o5r),e(q,zM),e(zM,NMe),e(NMe,r5r),e(zM,t5r),e(zM,UY),e(UY,a5r),e(zM,n5r),e(q,s5r),e(q,WM),e(WM,qMe),e(qMe,l5r),e(WM,i5r),e(WM,HY),e(HY,d5r),e(WM,c5r),e(q,f5r),e(q,QM),e(QM,jMe),e(jMe,m5r),e(QM,g5r),e(QM,JY),e(JY,h5r),e(QM,p5r),e(q,_5r),e(q,UM),e(UM,DMe),e(DMe,u5r),e(UM,b5r),e(UM,YY),e(YY,v5r),e(UM,F5r),e(q,T5r),e(q,HM),e(HM,GMe),e(GMe,M5r),e(HM,E5r),e(HM,KY),e(KY,C5r),e(HM,w5r),e(q,A5r),e(q,JM),e(JM,OMe),e(OMe,L5r),e(JM,y5r),e(JM,ZY),e(ZY,x5r),e(JM,$5r),e(q,k5r),e(q,YM),e(YM,VMe),e(VMe,S5r),e(YM,R5r),e(YM,eK),e(eK,P5r),e(YM,B5r),e(q,I5r),e(q,KM),e(KM,XMe),e(XMe,N5r),e(KM,q5r),e(KM,oK),e(oK,j5r),e(KM,D5r),e(q,G5r),e(q,ZM),e(ZM,zMe),e(zMe,O5r),e(ZM,V5r),e(ZM,rK),e(rK,X5r),e(ZM,z5r),e(q,W5r),e(q,eE),e(eE,WMe),e(WMe,Q5r),e(eE,U5r),e(eE,tK),e(tK,H5r),e(eE,J5r),e(q,Y5r),e(q,oE),e(oE,QMe),e(QMe,K5r),e(oE,Z5r),e(oE,aK),e(aK,e0r),e(oE,o0r),e(q,r0r),e(q,rE),e(rE,UMe),e(UMe,t0r),e(rE,a0r),e(rE,nK),e(nK,n0r),e(rE,s0r),e(q,l0r),e(q,tE),e(tE,HMe),e(HMe,i0r),e(tE,d0r),e(tE,sK),e(sK,c0r),e(tE,f0r),e(q,m0r),e(q,aE),e(aE,JMe),e(JMe,g0r),e(aE,h0r),e(aE,lK),e(lK,p0r),e(aE,_0r),e(q,u0r),e(q,nE),e(nE,YMe),e(YMe,b0r),e(nE,v0r),e(nE,iK),e(iK,F0r),e(nE,T0r),e(q,M0r),e(q,sE),e(sE,KMe),e(KMe,E0r),e(sE,C0r),e(sE,dK),e(dK,w0r),e(sE,A0r),e(q,L0r),e(q,lE),e(lE,ZMe),e(ZMe,y0r),e(lE,x0r),e(lE,cK),e(cK,$0r),e(lE,k0r),e(q,S0r),e(q,iE),e(iE,eEe),e(eEe,R0r),e(iE,P0r),e(iE,fK),e(fK,B0r),e(iE,I0r),e(q,N0r),e(q,dE),e(dE,oEe),e(oEe,q0r),e(dE,j0r),e(dE,mK),e(mK,D0r),e(dE,G0r),e(q,O0r),e(q,cE),e(cE,rEe),e(rEe,V0r),e(cE,X0r),e(cE,gK),e(gK,z0r),e(cE,W0r),e(q,Q0r),e(q,fE),e(fE,tEe),e(tEe,U0r),e(fE,H0r),e(fE,hK),e(hK,J0r),e(fE,Y0r),e(Rr,K0r),M(mE,Rr,null),b(f,gHe,u),b(f,Ac,u),e(Ac,gE),e(gE,aEe),M(g$,aEe,null),e(Ac,Z0r),e(Ac,nEe),e(nEe,ewr),b(f,hHe,u),b(f,nr,u),M(h$,nr,null),e(nr,owr),e(nr,Lc),e(Lc,rwr),e(Lc,pK),e(pK,twr),e(Lc,awr),e(Lc,_K),e(_K,nwr),e(Lc,swr),e(nr,lwr),e(nr,p$),e(p$,iwr),e(p$,sEe),e(sEe,dwr),e(p$,cwr),e(nr,fwr),e(nr,jt),M(_$,jt,null),e(jt,mwr),e(jt,lEe),e(lEe,gwr),e(jt,hwr),e(jt,yc),e(yc,pwr),e(yc,iEe),e(iEe,_wr),e(yc,uwr),e(yc,uK),e(uK,bwr),e(yc,vwr),e(jt,Fwr),M(hE,jt,null),e(nr,Twr),e(nr,Pr),M(u$,Pr,null),e(Pr,Mwr),e(Pr,dEe),e(dEe,Ewr),e(Pr,Cwr),e(Pr,un),e(un,wwr),e(un,cEe),e(cEe,Awr),e(un,Lwr),e(un,fEe),e(fEe,ywr),e(un,xwr),e(un,mEe),e(mEe,$wr),e(un,kwr),e(Pr,Swr),e(Pr,se),e(se,pE),e(pE,gEe),e(gEe,Rwr),e(pE,Pwr),e(pE,bK),e(bK,Bwr),e(pE,Iwr),e(se,Nwr),e(se,_E),e(_E,hEe),e(hEe,qwr),e(_E,jwr),e(_E,vK),e(vK,Dwr),e(_E,Gwr),e(se,Owr),e(se,uE),e(uE,pEe),e(pEe,Vwr),e(uE,Xwr),e(uE,FK),e(FK,zwr),e(uE,Wwr),e(se,Qwr),e(se,bE),e(bE,_Ee),e(_Ee,Uwr),e(bE,Hwr),e(bE,TK),e(TK,Jwr),e(bE,Ywr),e(se,Kwr),e(se,vE),e(vE,uEe),e(uEe,Zwr),e(vE,eAr),e(vE,MK),e(MK,oAr),e(vE,rAr),e(se,tAr),e(se,FE),e(FE,bEe),e(bEe,aAr),e(FE,nAr),e(FE,EK),e(EK,sAr),e(FE,lAr),e(se,iAr),e(se,TE),e(TE,vEe),e(vEe,dAr),e(TE,cAr),e(TE,CK),e(CK,fAr),e(TE,mAr),e(se,gAr),e(se,ME),e(ME,FEe),e(FEe,hAr),e(ME,pAr),e(ME,wK),e(wK,_Ar),e(ME,uAr),e(se,bAr),e(se,EE),e(EE,TEe),e(TEe,vAr),e(EE,FAr),e(EE,AK),e(AK,TAr),e(EE,MAr),e(se,EAr),e(se,CE),e(CE,MEe),e(MEe,CAr),e(CE,wAr),e(CE,LK),e(LK,AAr),e(CE,LAr),e(se,yAr),e(se,wE),e(wE,EEe),e(EEe,xAr),e(wE,$Ar),e(wE,yK),e(yK,kAr),e(wE,SAr),e(se,RAr),e(se,AE),e(AE,CEe),e(CEe,PAr),e(AE,BAr),e(AE,xK),e(xK,IAr),e(AE,NAr),e(se,qAr),e(se,LE),e(LE,wEe),e(wEe,jAr),e(LE,DAr),e(LE,$K),e($K,GAr),e(LE,OAr),e(se,VAr),e(se,yE),e(yE,AEe),e(AEe,XAr),e(yE,zAr),e(yE,kK),e(kK,WAr),e(yE,QAr),e(se,UAr),e(se,xE),e(xE,LEe),e(LEe,HAr),e(xE,JAr),e(xE,SK),e(SK,YAr),e(xE,KAr),e(se,ZAr),e(se,$E),e($E,yEe),e(yEe,eLr),e($E,oLr),e($E,RK),e(RK,rLr),e($E,tLr),e(se,aLr),e(se,kE),e(kE,xEe),e(xEe,nLr),e(kE,sLr),e(kE,PK),e(PK,lLr),e(kE,iLr),e(se,dLr),e(se,SE),e(SE,$Ee),e($Ee,cLr),e(SE,fLr),e(SE,BK),e(BK,mLr),e(SE,gLr),e(se,hLr),e(se,RE),e(RE,kEe),e(kEe,pLr),e(RE,_Lr),e(RE,IK),e(IK,uLr),e(RE,bLr),e(se,vLr),e(se,PE),e(PE,SEe),e(SEe,FLr),e(PE,TLr),e(PE,NK),e(NK,MLr),e(PE,ELr),e(se,CLr),e(se,BE),e(BE,REe),e(REe,wLr),e(BE,ALr),e(BE,qK),e(qK,LLr),e(BE,yLr),e(se,xLr),e(se,IE),e(IE,PEe),e(PEe,$Lr),e(IE,kLr),e(IE,jK),e(jK,SLr),e(IE,RLr),e(se,PLr),e(se,NE),e(NE,BEe),e(BEe,BLr),e(NE,ILr),e(NE,DK),e(DK,NLr),e(NE,qLr),e(Pr,jLr),M(qE,Pr,null),b(f,pHe,u),b(f,xc,u),e(xc,jE),e(jE,IEe),M(b$,IEe,null),e(xc,DLr),e(xc,NEe),e(NEe,GLr),b(f,_He,u),b(f,sr,u),M(v$,sr,null),e(sr,OLr),e(sr,$c),e($c,VLr),e($c,GK),e(GK,XLr),e($c,zLr),e($c,OK),e(OK,WLr),e($c,QLr),e(sr,ULr),e(sr,F$),e(F$,HLr),e(F$,qEe),e(qEe,JLr),e(F$,YLr),e(sr,KLr),e(sr,Dt),M(T$,Dt,null),e(Dt,ZLr),e(Dt,jEe),e(jEe,eyr),e(Dt,oyr),e(Dt,kc),e(kc,ryr),e(kc,DEe),e(DEe,tyr),e(kc,ayr),e(kc,VK),e(VK,nyr),e(kc,syr),e(Dt,lyr),M(DE,Dt,null),e(sr,iyr),e(sr,Br),M(M$,Br,null),e(Br,dyr),e(Br,GEe),e(GEe,cyr),e(Br,fyr),e(Br,bn),e(bn,myr),e(bn,OEe),e(OEe,gyr),e(bn,hyr),e(bn,VEe),e(VEe,pyr),e(bn,_yr),e(bn,XEe),e(XEe,uyr),e(bn,byr),e(Br,vyr),e(Br,Me),e(Me,GE),e(GE,zEe),e(zEe,Fyr),e(GE,Tyr),e(GE,XK),e(XK,Myr),e(GE,Eyr),e(Me,Cyr),e(Me,OE),e(OE,WEe),e(WEe,wyr),e(OE,Ayr),e(OE,zK),e(zK,Lyr),e(OE,yyr),e(Me,xyr),e(Me,VE),e(VE,QEe),e(QEe,$yr),e(VE,kyr),e(VE,WK),e(WK,Syr),e(VE,Ryr),e(Me,Pyr),e(Me,XE),e(XE,UEe),e(UEe,Byr),e(XE,Iyr),e(XE,QK),e(QK,Nyr),e(XE,qyr),e(Me,jyr),e(Me,zE),e(zE,HEe),e(HEe,Dyr),e(zE,Gyr),e(zE,UK),e(UK,Oyr),e(zE,Vyr),e(Me,Xyr),e(Me,WE),e(WE,JEe),e(JEe,zyr),e(WE,Wyr),e(WE,HK),e(HK,Qyr),e(WE,Uyr),e(Me,Hyr),e(Me,QE),e(QE,YEe),e(YEe,Jyr),e(QE,Yyr),e(QE,JK),e(JK,Kyr),e(QE,Zyr),e(Me,e9r),e(Me,UE),e(UE,KEe),e(KEe,o9r),e(UE,r9r),e(UE,YK),e(YK,t9r),e(UE,a9r),e(Me,n9r),e(Me,HE),e(HE,ZEe),e(ZEe,s9r),e(HE,l9r),e(HE,KK),e(KK,i9r),e(HE,d9r),e(Me,c9r),e(Me,JE),e(JE,e4e),e(e4e,f9r),e(JE,m9r),e(JE,ZK),e(ZK,g9r),e(JE,h9r),e(Me,p9r),e(Me,YE),e(YE,o4e),e(o4e,_9r),e(YE,u9r),e(YE,eZ),e(eZ,b9r),e(YE,v9r),e(Me,F9r),e(Me,KE),e(KE,r4e),e(r4e,T9r),e(KE,M9r),e(KE,oZ),e(oZ,E9r),e(KE,C9r),e(Me,w9r),e(Me,ZE),e(ZE,t4e),e(t4e,A9r),e(ZE,L9r),e(ZE,rZ),e(rZ,y9r),e(ZE,x9r),e(Br,$9r),M(e4,Br,null),b(f,uHe,u),b(f,Sc,u),e(Sc,o4),e(o4,a4e),M(E$,a4e,null),e(Sc,k9r),e(Sc,n4e),e(n4e,S9r),b(f,bHe,u),b(f,lr,u),M(C$,lr,null),e(lr,R9r),e(lr,Rc),e(Rc,P9r),e(Rc,tZ),e(tZ,B9r),e(Rc,I9r),e(Rc,aZ),e(aZ,N9r),e(Rc,q9r),e(lr,j9r),e(lr,w$),e(w$,D9r),e(w$,s4e),e(s4e,G9r),e(w$,O9r),e(lr,V9r),e(lr,Gt),M(A$,Gt,null),e(Gt,X9r),e(Gt,l4e),e(l4e,z9r),e(Gt,W9r),e(Gt,Pc),e(Pc,Q9r),e(Pc,i4e),e(i4e,U9r),e(Pc,H9r),e(Pc,nZ),e(nZ,J9r),e(Pc,Y9r),e(Gt,K9r),M(r4,Gt,null),e(lr,Z9r),e(lr,Ir),M(L$,Ir,null),e(Ir,exr),e(Ir,d4e),e(d4e,oxr),e(Ir,rxr),e(Ir,vn),e(vn,txr),e(vn,c4e),e(c4e,axr),e(vn,nxr),e(vn,f4e),e(f4e,sxr),e(vn,lxr),e(vn,m4e),e(m4e,ixr),e(vn,dxr),e(Ir,cxr),e(Ir,Ve),e(Ve,t4),e(t4,g4e),e(g4e,fxr),e(t4,mxr),e(t4,sZ),e(sZ,gxr),e(t4,hxr),e(Ve,pxr),e(Ve,a4),e(a4,h4e),e(h4e,_xr),e(a4,uxr),e(a4,lZ),e(lZ,bxr),e(a4,vxr),e(Ve,Fxr),e(Ve,dl),e(dl,p4e),e(p4e,Txr),e(dl,Mxr),e(dl,iZ),e(iZ,Exr),e(dl,Cxr),e(dl,dZ),e(dZ,wxr),e(dl,Axr),e(Ve,Lxr),e(Ve,n4),e(n4,_4e),e(_4e,yxr),e(n4,xxr),e(n4,cZ),e(cZ,$xr),e(n4,kxr),e(Ve,Sxr),e(Ve,s4),e(s4,u4e),e(u4e,Rxr),e(s4,Pxr),e(s4,fZ),e(fZ,Bxr),e(s4,Ixr),e(Ve,Nxr),e(Ve,l4),e(l4,b4e),e(b4e,qxr),e(l4,jxr),e(l4,mZ),e(mZ,Dxr),e(l4,Gxr),e(Ve,Oxr),e(Ve,i4),e(i4,v4e),e(v4e,Vxr),e(i4,Xxr),e(i4,gZ),e(gZ,zxr),e(i4,Wxr),e(Ve,Qxr),e(Ve,d4),e(d4,F4e),e(F4e,Uxr),e(d4,Hxr),e(d4,hZ),e(hZ,Jxr),e(d4,Yxr),e(Ir,Kxr),M(c4,Ir,null),b(f,vHe,u),b(f,Bc,u),e(Bc,f4),e(f4,T4e),M(y$,T4e,null),e(Bc,Zxr),e(Bc,M4e),e(M4e,e$r),b(f,FHe,u),b(f,ir,u),M(x$,ir,null),e(ir,o$r),e(ir,Ic),e(Ic,r$r),e(Ic,pZ),e(pZ,t$r),e(Ic,a$r),e(Ic,_Z),e(_Z,n$r),e(Ic,s$r),e(ir,l$r),e(ir,$$),e($$,i$r),e($$,E4e),e(E4e,d$r),e($$,c$r),e(ir,f$r),e(ir,Ot),M(k$,Ot,null),e(Ot,m$r),e(Ot,C4e),e(C4e,g$r),e(Ot,h$r),e(Ot,Nc),e(Nc,p$r),e(Nc,w4e),e(w4e,_$r),e(Nc,u$r),e(Nc,uZ),e(uZ,b$r),e(Nc,v$r),e(Ot,F$r),M(m4,Ot,null),e(ir,T$r),e(ir,Nr),M(S$,Nr,null),e(Nr,M$r),e(Nr,A4e),e(A4e,E$r),e(Nr,C$r),e(Nr,Fn),e(Fn,w$r),e(Fn,L4e),e(L4e,A$r),e(Fn,L$r),e(Fn,y4e),e(y4e,y$r),e(Fn,x$r),e(Fn,x4e),e(x4e,$$r),e(Fn,k$r),e(Nr,S$r),e(Nr,R$),e(R$,g4),e(g4,$4e),e($4e,R$r),e(g4,P$r),e(g4,bZ),e(bZ,B$r),e(g4,I$r),e(R$,N$r),e(R$,h4),e(h4,k4e),e(k4e,q$r),e(h4,j$r),e(h4,vZ),e(vZ,D$r),e(h4,G$r),e(Nr,O$r),M(p4,Nr,null),b(f,THe,u),b(f,qc,u),e(qc,_4),e(_4,S4e),M(P$,S4e,null),e(qc,V$r),e(qc,R4e),e(R4e,X$r),b(f,MHe,u),b(f,dr,u),M(B$,dr,null),e(dr,z$r),e(dr,jc),e(jc,W$r),e(jc,FZ),e(FZ,Q$r),e(jc,U$r),e(jc,TZ),e(TZ,H$r),e(jc,J$r),e(dr,Y$r),e(dr,I$),e(I$,K$r),e(I$,P4e),e(P4e,Z$r),e(I$,ekr),e(dr,okr),e(dr,Vt),M(N$,Vt,null),e(Vt,rkr),e(Vt,B4e),e(B4e,tkr),e(Vt,akr),e(Vt,Dc),e(Dc,nkr),e(Dc,I4e),e(I4e,skr),e(Dc,lkr),e(Dc,MZ),e(MZ,ikr),e(Dc,dkr),e(Vt,ckr),M(u4,Vt,null),e(dr,fkr),e(dr,qr),M(q$,qr,null),e(qr,mkr),e(qr,N4e),e(N4e,gkr),e(qr,hkr),e(qr,Tn),e(Tn,pkr),e(Tn,q4e),e(q4e,_kr),e(Tn,ukr),e(Tn,j4e),e(j4e,bkr),e(Tn,vkr),e(Tn,D4e),e(D4e,Fkr),e(Tn,Tkr),e(qr,Mkr),e(qr,fe),e(fe,b4),e(b4,G4e),e(G4e,Ekr),e(b4,Ckr),e(b4,EZ),e(EZ,wkr),e(b4,Akr),e(fe,Lkr),e(fe,v4),e(v4,O4e),e(O4e,ykr),e(v4,xkr),e(v4,CZ),e(CZ,$kr),e(v4,kkr),e(fe,Skr),e(fe,F4),e(F4,V4e),e(V4e,Rkr),e(F4,Pkr),e(F4,wZ),e(wZ,Bkr),e(F4,Ikr),e(fe,Nkr),e(fe,T4),e(T4,X4e),e(X4e,qkr),e(T4,jkr),e(T4,AZ),e(AZ,Dkr),e(T4,Gkr),e(fe,Okr),e(fe,M4),e(M4,z4e),e(z4e,Vkr),e(M4,Xkr),e(M4,LZ),e(LZ,zkr),e(M4,Wkr),e(fe,Qkr),e(fe,E4),e(E4,W4e),e(W4e,Ukr),e(E4,Hkr),e(E4,yZ),e(yZ,Jkr),e(E4,Ykr),e(fe,Kkr),e(fe,C4),e(C4,Q4e),e(Q4e,Zkr),e(C4,eSr),e(C4,xZ),e(xZ,oSr),e(C4,rSr),e(fe,tSr),e(fe,w4),e(w4,U4e),e(U4e,aSr),e(w4,nSr),e(w4,$Z),e($Z,sSr),e(w4,lSr),e(fe,iSr),e(fe,A4),e(A4,H4e),e(H4e,dSr),e(A4,cSr),e(A4,kZ),e(kZ,fSr),e(A4,mSr),e(fe,gSr),e(fe,L4),e(L4,J4e),e(J4e,hSr),e(L4,pSr),e(L4,SZ),e(SZ,_Sr),e(L4,uSr),e(fe,bSr),e(fe,y4),e(y4,Y4e),e(Y4e,vSr),e(y4,FSr),e(y4,RZ),e(RZ,TSr),e(y4,MSr),e(fe,ESr),e(fe,x4),e(x4,K4e),e(K4e,CSr),e(x4,wSr),e(x4,PZ),e(PZ,ASr),e(x4,LSr),e(fe,ySr),e(fe,$4),e($4,Z4e),e(Z4e,xSr),e($4,$Sr),e($4,BZ),e(BZ,kSr),e($4,SSr),e(fe,RSr),e(fe,k4),e(k4,eCe),e(eCe,PSr),e(k4,BSr),e(k4,IZ),e(IZ,ISr),e(k4,NSr),e(fe,qSr),e(fe,S4),e(S4,oCe),e(oCe,jSr),e(S4,DSr),e(S4,NZ),e(NZ,GSr),e(S4,OSr),e(fe,VSr),e(fe,R4),e(R4,rCe),e(rCe,XSr),e(R4,zSr),e(R4,qZ),e(qZ,WSr),e(R4,QSr),e(fe,USr),e(fe,P4),e(P4,tCe),e(tCe,HSr),e(P4,JSr),e(P4,jZ),e(jZ,YSr),e(P4,KSr),e(fe,ZSr),e(fe,B4),e(B4,aCe),e(aCe,eRr),e(B4,oRr),e(B4,DZ),e(DZ,rRr),e(B4,tRr),e(fe,aRr),e(fe,I4),e(I4,nCe),e(nCe,nRr),e(I4,sRr),e(I4,GZ),e(GZ,lRr),e(I4,iRr),e(fe,dRr),e(fe,N4),e(N4,sCe),e(sCe,cRr),e(N4,fRr),e(N4,OZ),e(OZ,mRr),e(N4,gRr),e(qr,hRr),M(q4,qr,null),b(f,EHe,u),b(f,Gc,u),e(Gc,j4),e(j4,lCe),M(j$,lCe,null),e(Gc,pRr),e(Gc,iCe),e(iCe,_Rr),b(f,CHe,u),b(f,cr,u),M(D$,cr,null),e(cr,uRr),e(cr,Oc),e(Oc,bRr),e(Oc,VZ),e(VZ,vRr),e(Oc,FRr),e(Oc,XZ),e(XZ,TRr),e(Oc,MRr),e(cr,ERr),e(cr,G$),e(G$,CRr),e(G$,dCe),e(dCe,wRr),e(G$,ARr),e(cr,LRr),e(cr,Xt),M(O$,Xt,null),e(Xt,yRr),e(Xt,cCe),e(cCe,xRr),e(Xt,$Rr),e(Xt,Vc),e(Vc,kRr),e(Vc,fCe),e(fCe,SRr),e(Vc,RRr),e(Vc,zZ),e(zZ,PRr),e(Vc,BRr),e(Xt,IRr),M(D4,Xt,null),e(cr,NRr),e(cr,jr),M(V$,jr,null),e(jr,qRr),e(jr,mCe),e(mCe,jRr),e(jr,DRr),e(jr,Mn),e(Mn,GRr),e(Mn,gCe),e(gCe,ORr),e(Mn,VRr),e(Mn,hCe),e(hCe,XRr),e(Mn,zRr),e(Mn,pCe),e(pCe,WRr),e(Mn,QRr),e(jr,URr),e(jr,ye),e(ye,G4),e(G4,_Ce),e(_Ce,HRr),e(G4,JRr),e(G4,WZ),e(WZ,YRr),e(G4,KRr),e(ye,ZRr),e(ye,O4),e(O4,uCe),e(uCe,ePr),e(O4,oPr),e(O4,QZ),e(QZ,rPr),e(O4,tPr),e(ye,aPr),e(ye,V4),e(V4,bCe),e(bCe,nPr),e(V4,sPr),e(V4,UZ),e(UZ,lPr),e(V4,iPr),e(ye,dPr),e(ye,X4),e(X4,vCe),e(vCe,cPr),e(X4,fPr),e(X4,HZ),e(HZ,mPr),e(X4,gPr),e(ye,hPr),e(ye,z4),e(z4,FCe),e(FCe,pPr),e(z4,_Pr),e(z4,JZ),e(JZ,uPr),e(z4,bPr),e(ye,vPr),e(ye,W4),e(W4,TCe),e(TCe,FPr),e(W4,TPr),e(W4,YZ),e(YZ,MPr),e(W4,EPr),e(ye,CPr),e(ye,Q4),e(Q4,MCe),e(MCe,wPr),e(Q4,APr),e(Q4,KZ),e(KZ,LPr),e(Q4,yPr),e(ye,xPr),e(ye,U4),e(U4,ECe),e(ECe,$Pr),e(U4,kPr),e(U4,ZZ),e(ZZ,SPr),e(U4,RPr),e(ye,PPr),e(ye,H4),e(H4,CCe),e(CCe,BPr),e(H4,IPr),e(H4,eee),e(eee,NPr),e(H4,qPr),e(ye,jPr),e(ye,J4),e(J4,wCe),e(wCe,DPr),e(J4,GPr),e(J4,oee),e(oee,OPr),e(J4,VPr),e(jr,XPr),M(Y4,jr,null),b(f,wHe,u),b(f,Xc,u),e(Xc,K4),e(K4,ACe),M(X$,ACe,null),e(Xc,zPr),e(Xc,LCe),e(LCe,WPr),b(f,AHe,u),b(f,fr,u),M(z$,fr,null),e(fr,QPr),e(fr,zc),e(zc,UPr),e(zc,ree),e(ree,HPr),e(zc,JPr),e(zc,tee),e(tee,YPr),e(zc,KPr),e(fr,ZPr),e(fr,W$),e(W$,eBr),e(W$,yCe),e(yCe,oBr),e(W$,rBr),e(fr,tBr),e(fr,zt),M(Q$,zt,null),e(zt,aBr),e(zt,xCe),e(xCe,nBr),e(zt,sBr),e(zt,Wc),e(Wc,lBr),e(Wc,$Ce),e($Ce,iBr),e(Wc,dBr),e(Wc,aee),e(aee,cBr),e(Wc,fBr),e(zt,mBr),M(Z4,zt,null),e(fr,gBr),e(fr,Dr),M(U$,Dr,null),e(Dr,hBr),e(Dr,kCe),e(kCe,pBr),e(Dr,_Br),e(Dr,En),e(En,uBr),e(En,SCe),e(SCe,bBr),e(En,vBr),e(En,RCe),e(RCe,FBr),e(En,TBr),e(En,PCe),e(PCe,MBr),e(En,EBr),e(Dr,CBr),e(Dr,re),e(re,eC),e(eC,BCe),e(BCe,wBr),e(eC,ABr),e(eC,nee),e(nee,LBr),e(eC,yBr),e(re,xBr),e(re,oC),e(oC,ICe),e(ICe,$Br),e(oC,kBr),e(oC,see),e(see,SBr),e(oC,RBr),e(re,PBr),e(re,rC),e(rC,NCe),e(NCe,BBr),e(rC,IBr),e(rC,lee),e(lee,NBr),e(rC,qBr),e(re,jBr),e(re,tC),e(tC,qCe),e(qCe,DBr),e(tC,GBr),e(tC,iee),e(iee,OBr),e(tC,VBr),e(re,XBr),e(re,aC),e(aC,jCe),e(jCe,zBr),e(aC,WBr),e(aC,dee),e(dee,QBr),e(aC,UBr),e(re,HBr),e(re,nC),e(nC,DCe),e(DCe,JBr),e(nC,YBr),e(nC,cee),e(cee,KBr),e(nC,ZBr),e(re,eIr),e(re,sC),e(sC,GCe),e(GCe,oIr),e(sC,rIr),e(sC,fee),e(fee,tIr),e(sC,aIr),e(re,nIr),e(re,lC),e(lC,OCe),e(OCe,sIr),e(lC,lIr),e(lC,mee),e(mee,iIr),e(lC,dIr),e(re,cIr),e(re,iC),e(iC,VCe),e(VCe,fIr),e(iC,mIr),e(iC,gee),e(gee,gIr),e(iC,hIr),e(re,pIr),e(re,dC),e(dC,XCe),e(XCe,_Ir),e(dC,uIr),e(dC,hee),e(hee,bIr),e(dC,vIr),e(re,FIr),e(re,cC),e(cC,zCe),e(zCe,TIr),e(cC,MIr),e(cC,pee),e(pee,EIr),e(cC,CIr),e(re,wIr),e(re,fC),e(fC,WCe),e(WCe,AIr),e(fC,LIr),e(fC,_ee),e(_ee,yIr),e(fC,xIr),e(re,$Ir),e(re,mC),e(mC,QCe),e(QCe,kIr),e(mC,SIr),e(mC,uee),e(uee,RIr),e(mC,PIr),e(re,BIr),e(re,gC),e(gC,UCe),e(UCe,IIr),e(gC,NIr),e(gC,bee),e(bee,qIr),e(gC,jIr),e(re,DIr),e(re,hC),e(hC,HCe),e(HCe,GIr),e(hC,OIr),e(hC,vee),e(vee,VIr),e(hC,XIr),e(re,zIr),e(re,pC),e(pC,JCe),e(JCe,WIr),e(pC,QIr),e(pC,Fee),e(Fee,UIr),e(pC,HIr),e(re,JIr),e(re,_C),e(_C,YCe),e(YCe,YIr),e(_C,KIr),e(_C,Tee),e(Tee,ZIr),e(_C,eNr),e(re,oNr),e(re,uC),e(uC,KCe),e(KCe,rNr),e(uC,tNr),e(uC,Mee),e(Mee,aNr),e(uC,nNr),e(re,sNr),e(re,bC),e(bC,ZCe),e(ZCe,lNr),e(bC,iNr),e(bC,Eee),e(Eee,dNr),e(bC,cNr),e(re,fNr),e(re,vC),e(vC,e3e),e(e3e,mNr),e(vC,gNr),e(vC,Cee),e(Cee,hNr),e(vC,pNr),e(re,_Nr),e(re,FC),e(FC,o3e),e(o3e,uNr),e(FC,bNr),e(FC,wee),e(wee,vNr),e(FC,FNr),e(re,TNr),e(re,TC),e(TC,r3e),e(r3e,MNr),e(TC,ENr),e(TC,Aee),e(Aee,CNr),e(TC,wNr),e(re,ANr),e(re,MC),e(MC,t3e),e(t3e,LNr),e(MC,yNr),e(MC,Lee),e(Lee,xNr),e(MC,$Nr),e(re,kNr),e(re,EC),e(EC,a3e),e(a3e,SNr),e(EC,RNr),e(EC,yee),e(yee,PNr),e(EC,BNr),e(re,INr),e(re,CC),e(CC,n3e),e(n3e,NNr),e(CC,qNr),e(CC,xee),e(xee,jNr),e(CC,DNr),e(re,GNr),e(re,wC),e(wC,s3e),e(s3e,ONr),e(wC,VNr),e(wC,$ee),e($ee,XNr),e(wC,zNr),e(re,WNr),e(re,AC),e(AC,l3e),e(l3e,QNr),e(AC,UNr),e(AC,kee),e(kee,HNr),e(AC,JNr),e(Dr,YNr),M(LC,Dr,null),b(f,LHe,u),b(f,Qc,u),e(Qc,yC),e(yC,i3e),M(H$,i3e,null),e(Qc,KNr),e(Qc,d3e),e(d3e,ZNr),b(f,yHe,u),b(f,mr,u),M(J$,mr,null),e(mr,eqr),e(mr,Uc),e(Uc,oqr),e(Uc,See),e(See,rqr),e(Uc,tqr),e(Uc,Ree),e(Ree,aqr),e(Uc,nqr),e(mr,sqr),e(mr,Y$),e(Y$,lqr),e(Y$,c3e),e(c3e,iqr),e(Y$,dqr),e(mr,cqr),e(mr,Wt),M(K$,Wt,null),e(Wt,fqr),e(Wt,f3e),e(f3e,mqr),e(Wt,gqr),e(Wt,Hc),e(Hc,hqr),e(Hc,m3e),e(m3e,pqr),e(Hc,_qr),e(Hc,Pee),e(Pee,uqr),e(Hc,bqr),e(Wt,vqr),M(xC,Wt,null),e(mr,Fqr),e(mr,Gr),M(Z$,Gr,null),e(Gr,Tqr),e(Gr,g3e),e(g3e,Mqr),e(Gr,Eqr),e(Gr,Cn),e(Cn,Cqr),e(Cn,h3e),e(h3e,wqr),e(Cn,Aqr),e(Cn,p3e),e(p3e,Lqr),e(Cn,yqr),e(Cn,_3e),e(_3e,xqr),e(Cn,$qr),e(Gr,kqr),e(Gr,ve),e(ve,$C),e($C,u3e),e(u3e,Sqr),e($C,Rqr),e($C,Bee),e(Bee,Pqr),e($C,Bqr),e(ve,Iqr),e(ve,kC),e(kC,b3e),e(b3e,Nqr),e(kC,qqr),e(kC,Iee),e(Iee,jqr),e(kC,Dqr),e(ve,Gqr),e(ve,SC),e(SC,v3e),e(v3e,Oqr),e(SC,Vqr),e(SC,Nee),e(Nee,Xqr),e(SC,zqr),e(ve,Wqr),e(ve,RC),e(RC,F3e),e(F3e,Qqr),e(RC,Uqr),e(RC,qee),e(qee,Hqr),e(RC,Jqr),e(ve,Yqr),e(ve,PC),e(PC,T3e),e(T3e,Kqr),e(PC,Zqr),e(PC,jee),e(jee,ejr),e(PC,ojr),e(ve,rjr),e(ve,BC),e(BC,M3e),e(M3e,tjr),e(BC,ajr),e(BC,Dee),e(Dee,njr),e(BC,sjr),e(ve,ljr),e(ve,IC),e(IC,E3e),e(E3e,ijr),e(IC,djr),e(IC,Gee),e(Gee,cjr),e(IC,fjr),e(ve,mjr),e(ve,NC),e(NC,C3e),e(C3e,gjr),e(NC,hjr),e(NC,Oee),e(Oee,pjr),e(NC,_jr),e(ve,ujr),e(ve,qC),e(qC,w3e),e(w3e,bjr),e(qC,vjr),e(qC,Vee),e(Vee,Fjr),e(qC,Tjr),e(ve,Mjr),e(ve,jC),e(jC,A3e),e(A3e,Ejr),e(jC,Cjr),e(jC,Xee),e(Xee,wjr),e(jC,Ajr),e(ve,Ljr),e(ve,DC),e(DC,L3e),e(L3e,yjr),e(DC,xjr),e(DC,zee),e(zee,$jr),e(DC,kjr),e(ve,Sjr),e(ve,GC),e(GC,y3e),e(y3e,Rjr),e(GC,Pjr),e(GC,Wee),e(Wee,Bjr),e(GC,Ijr),e(ve,Njr),e(ve,OC),e(OC,x3e),e(x3e,qjr),e(OC,jjr),e(OC,Qee),e(Qee,Djr),e(OC,Gjr),e(ve,Ojr),e(ve,VC),e(VC,$3e),e($3e,Vjr),e(VC,Xjr),e(VC,Uee),e(Uee,zjr),e(VC,Wjr),e(ve,Qjr),e(ve,XC),e(XC,k3e),e(k3e,Ujr),e(XC,Hjr),e(XC,Hee),e(Hee,Jjr),e(XC,Yjr),e(ve,Kjr),e(ve,zC),e(zC,S3e),e(S3e,Zjr),e(zC,eDr),e(zC,Jee),e(Jee,oDr),e(zC,rDr),e(ve,tDr),e(ve,WC),e(WC,R3e),e(R3e,aDr),e(WC,nDr),e(WC,Yee),e(Yee,sDr),e(WC,lDr),e(Gr,iDr),M(QC,Gr,null),b(f,xHe,u),b(f,Jc,u),e(Jc,UC),e(UC,P3e),M(ek,P3e,null),e(Jc,dDr),e(Jc,B3e),e(B3e,cDr),b(f,$He,u),b(f,gr,u),M(ok,gr,null),e(gr,fDr),e(gr,Yc),e(Yc,mDr),e(Yc,Kee),e(Kee,gDr),e(Yc,hDr),e(Yc,Zee),e(Zee,pDr),e(Yc,_Dr),e(gr,uDr),e(gr,rk),e(rk,bDr),e(rk,I3e),e(I3e,vDr),e(rk,FDr),e(gr,TDr),e(gr,Qt),M(tk,Qt,null),e(Qt,MDr),e(Qt,N3e),e(N3e,EDr),e(Qt,CDr),e(Qt,Kc),e(Kc,wDr),e(Kc,q3e),e(q3e,ADr),e(Kc,LDr),e(Kc,eoe),e(eoe,yDr),e(Kc,xDr),e(Qt,$Dr),M(HC,Qt,null),e(gr,kDr),e(gr,Or),M(ak,Or,null),e(Or,SDr),e(Or,j3e),e(j3e,RDr),e(Or,PDr),e(Or,wn),e(wn,BDr),e(wn,D3e),e(D3e,IDr),e(wn,NDr),e(wn,G3e),e(G3e,qDr),e(wn,jDr),e(wn,O3e),e(O3e,DDr),e(wn,GDr),e(Or,ODr),e(Or,nk),e(nk,JC),e(JC,V3e),e(V3e,VDr),e(JC,XDr),e(JC,ooe),e(ooe,zDr),e(JC,WDr),e(nk,QDr),e(nk,YC),e(YC,X3e),e(X3e,UDr),e(YC,HDr),e(YC,roe),e(roe,JDr),e(YC,YDr),e(Or,KDr),M(KC,Or,null),b(f,kHe,u),b(f,Zc,u),e(Zc,ZC),e(ZC,z3e),M(sk,z3e,null),e(Zc,ZDr),e(Zc,W3e),e(W3e,eGr),b(f,SHe,u),b(f,hr,u),M(lk,hr,null),e(hr,oGr),e(hr,ef),e(ef,rGr),e(ef,toe),e(toe,tGr),e(ef,aGr),e(ef,aoe),e(aoe,nGr),e(ef,sGr),e(hr,lGr),e(hr,ik),e(ik,iGr),e(ik,Q3e),e(Q3e,dGr),e(ik,cGr),e(hr,fGr),e(hr,Ut),M(dk,Ut,null),e(Ut,mGr),e(Ut,U3e),e(U3e,gGr),e(Ut,hGr),e(Ut,of),e(of,pGr),e(of,H3e),e(H3e,_Gr),e(of,uGr),e(of,noe),e(noe,bGr),e(of,vGr),e(Ut,FGr),M(e3,Ut,null),e(hr,TGr),e(hr,Vr),M(ck,Vr,null),e(Vr,MGr),e(Vr,J3e),e(J3e,EGr),e(Vr,CGr),e(Vr,An),e(An,wGr),e(An,Y3e),e(Y3e,AGr),e(An,LGr),e(An,K3e),e(K3e,yGr),e(An,xGr),e(An,Z3e),e(Z3e,$Gr),e(An,kGr),e(Vr,SGr),e(Vr,e5e),e(e5e,o3),e(o3,o5e),e(o5e,RGr),e(o3,PGr),e(o3,soe),e(soe,BGr),e(o3,IGr),e(Vr,NGr),M(r3,Vr,null),b(f,RHe,u),b(f,rf,u),e(rf,t3),e(t3,r5e),M(fk,r5e,null),e(rf,qGr),e(rf,t5e),e(t5e,jGr),b(f,PHe,u),b(f,pr,u),M(mk,pr,null),e(pr,DGr),e(pr,tf),e(tf,GGr),e(tf,loe),e(loe,OGr),e(tf,VGr),e(tf,ioe),e(ioe,XGr),e(tf,zGr),e(pr,WGr),e(pr,gk),e(gk,QGr),e(gk,a5e),e(a5e,UGr),e(gk,HGr),e(pr,JGr),e(pr,Ht),M(hk,Ht,null),e(Ht,YGr),e(Ht,n5e),e(n5e,KGr),e(Ht,ZGr),e(Ht,af),e(af,eOr),e(af,s5e),e(s5e,oOr),e(af,rOr),e(af,doe),e(doe,tOr),e(af,aOr),e(Ht,nOr),M(a3,Ht,null),e(pr,sOr),e(pr,Xr),M(pk,Xr,null),e(Xr,lOr),e(Xr,l5e),e(l5e,iOr),e(Xr,dOr),e(Xr,Ln),e(Ln,cOr),e(Ln,i5e),e(i5e,fOr),e(Ln,mOr),e(Ln,d5e),e(d5e,gOr),e(Ln,hOr),e(Ln,c5e),e(c5e,pOr),e(Ln,_Or),e(Xr,uOr),e(Xr,ie),e(ie,n3),e(n3,f5e),e(f5e,bOr),e(n3,vOr),e(n3,coe),e(coe,FOr),e(n3,TOr),e(ie,MOr),e(ie,s3),e(s3,m5e),e(m5e,EOr),e(s3,COr),e(s3,foe),e(foe,wOr),e(s3,AOr),e(ie,LOr),e(ie,l3),e(l3,g5e),e(g5e,yOr),e(l3,xOr),e(l3,moe),e(moe,$Or),e(l3,kOr),e(ie,SOr),e(ie,i3),e(i3,h5e),e(h5e,ROr),e(i3,POr),e(i3,goe),e(goe,BOr),e(i3,IOr),e(ie,NOr),e(ie,d3),e(d3,p5e),e(p5e,qOr),e(d3,jOr),e(d3,hoe),e(hoe,DOr),e(d3,GOr),e(ie,OOr),e(ie,c3),e(c3,_5e),e(_5e,VOr),e(c3,XOr),e(c3,poe),e(poe,zOr),e(c3,WOr),e(ie,QOr),e(ie,f3),e(f3,u5e),e(u5e,UOr),e(f3,HOr),e(f3,_oe),e(_oe,JOr),e(f3,YOr),e(ie,KOr),e(ie,m3),e(m3,b5e),e(b5e,ZOr),e(m3,eVr),e(m3,uoe),e(uoe,oVr),e(m3,rVr),e(ie,tVr),e(ie,g3),e(g3,v5e),e(v5e,aVr),e(g3,nVr),e(g3,boe),e(boe,sVr),e(g3,lVr),e(ie,iVr),e(ie,h3),e(h3,F5e),e(F5e,dVr),e(h3,cVr),e(h3,voe),e(voe,fVr),e(h3,mVr),e(ie,gVr),e(ie,p3),e(p3,T5e),e(T5e,hVr),e(p3,pVr),e(p3,Foe),e(Foe,_Vr),e(p3,uVr),e(ie,bVr),e(ie,_3),e(_3,M5e),e(M5e,vVr),e(_3,FVr),e(_3,Toe),e(Toe,TVr),e(_3,MVr),e(ie,EVr),e(ie,u3),e(u3,E5e),e(E5e,CVr),e(u3,wVr),e(u3,Moe),e(Moe,AVr),e(u3,LVr),e(ie,yVr),e(ie,b3),e(b3,C5e),e(C5e,xVr),e(b3,$Vr),e(b3,Eoe),e(Eoe,kVr),e(b3,SVr),e(ie,RVr),e(ie,v3),e(v3,w5e),e(w5e,PVr),e(v3,BVr),e(v3,Coe),e(Coe,IVr),e(v3,NVr),e(ie,qVr),e(ie,F3),e(F3,A5e),e(A5e,jVr),e(F3,DVr),e(F3,woe),e(woe,GVr),e(F3,OVr),e(ie,VVr),e(ie,T3),e(T3,L5e),e(L5e,XVr),e(T3,zVr),e(T3,Aoe),e(Aoe,WVr),e(T3,QVr),e(ie,UVr),e(ie,M3),e(M3,y5e),e(y5e,HVr),e(M3,JVr),e(M3,Loe),e(Loe,YVr),e(M3,KVr),e(ie,ZVr),e(ie,E3),e(E3,x5e),e(x5e,eXr),e(E3,oXr),e(E3,yoe),e(yoe,rXr),e(E3,tXr),e(ie,aXr),e(ie,C3),e(C3,$5e),e($5e,nXr),e(C3,sXr),e(C3,xoe),e(xoe,lXr),e(C3,iXr),e(ie,dXr),e(ie,w3),e(w3,k5e),e(k5e,cXr),e(w3,fXr),e(w3,$oe),e($oe,mXr),e(w3,gXr),e(Xr,hXr),M(A3,Xr,null),b(f,BHe,u),b(f,nf,u),e(nf,L3),e(L3,S5e),M(_k,S5e,null),e(nf,pXr),e(nf,R5e),e(R5e,_Xr),b(f,IHe,u),b(f,_r,u),M(uk,_r,null),e(_r,uXr),e(_r,sf),e(sf,bXr),e(sf,koe),e(koe,vXr),e(sf,FXr),e(sf,Soe),e(Soe,TXr),e(sf,MXr),e(_r,EXr),e(_r,bk),e(bk,CXr),e(bk,P5e),e(P5e,wXr),e(bk,AXr),e(_r,LXr),e(_r,Jt),M(vk,Jt,null),e(Jt,yXr),e(Jt,B5e),e(B5e,xXr),e(Jt,$Xr),e(Jt,lf),e(lf,kXr),e(lf,I5e),e(I5e,SXr),e(lf,RXr),e(lf,Roe),e(Roe,PXr),e(lf,BXr),e(Jt,IXr),M(y3,Jt,null),e(_r,NXr),e(_r,zr),M(Fk,zr,null),e(zr,qXr),e(zr,N5e),e(N5e,jXr),e(zr,DXr),e(zr,yn),e(yn,GXr),e(yn,q5e),e(q5e,OXr),e(yn,VXr),e(yn,j5e),e(j5e,XXr),e(yn,zXr),e(yn,D5e),e(D5e,WXr),e(yn,QXr),e(zr,UXr),e(zr,de),e(de,x3),e(x3,G5e),e(G5e,HXr),e(x3,JXr),e(x3,Poe),e(Poe,YXr),e(x3,KXr),e(de,ZXr),e(de,$3),e($3,O5e),e(O5e,ezr),e($3,ozr),e($3,Boe),e(Boe,rzr),e($3,tzr),e(de,azr),e(de,k3),e(k3,V5e),e(V5e,nzr),e(k3,szr),e(k3,Ioe),e(Ioe,lzr),e(k3,izr),e(de,dzr),e(de,S3),e(S3,X5e),e(X5e,czr),e(S3,fzr),e(S3,Noe),e(Noe,mzr),e(S3,gzr),e(de,hzr),e(de,R3),e(R3,z5e),e(z5e,pzr),e(R3,_zr),e(R3,qoe),e(qoe,uzr),e(R3,bzr),e(de,vzr),e(de,P3),e(P3,W5e),e(W5e,Fzr),e(P3,Tzr),e(P3,joe),e(joe,Mzr),e(P3,Ezr),e(de,Czr),e(de,B3),e(B3,Q5e),e(Q5e,wzr),e(B3,Azr),e(B3,Doe),e(Doe,Lzr),e(B3,yzr),e(de,xzr),e(de,I3),e(I3,U5e),e(U5e,$zr),e(I3,kzr),e(I3,Goe),e(Goe,Szr),e(I3,Rzr),e(de,Pzr),e(de,N3),e(N3,H5e),e(H5e,Bzr),e(N3,Izr),e(N3,Ooe),e(Ooe,Nzr),e(N3,qzr),e(de,jzr),e(de,q3),e(q3,J5e),e(J5e,Dzr),e(q3,Gzr),e(q3,Voe),e(Voe,Ozr),e(q3,Vzr),e(de,Xzr),e(de,j3),e(j3,Y5e),e(Y5e,zzr),e(j3,Wzr),e(j3,Xoe),e(Xoe,Qzr),e(j3,Uzr),e(de,Hzr),e(de,D3),e(D3,K5e),e(K5e,Jzr),e(D3,Yzr),e(D3,zoe),e(zoe,Kzr),e(D3,Zzr),e(de,eWr),e(de,G3),e(G3,Z5e),e(Z5e,oWr),e(G3,rWr),e(G3,Woe),e(Woe,tWr),e(G3,aWr),e(de,nWr),e(de,O3),e(O3,e0e),e(e0e,sWr),e(O3,lWr),e(O3,Qoe),e(Qoe,iWr),e(O3,dWr),e(de,cWr),e(de,V3),e(V3,o0e),e(o0e,fWr),e(V3,mWr),e(V3,Uoe),e(Uoe,gWr),e(V3,hWr),e(de,pWr),e(de,X3),e(X3,r0e),e(r0e,_Wr),e(X3,uWr),e(X3,Hoe),e(Hoe,bWr),e(X3,vWr),e(de,FWr),e(de,z3),e(z3,t0e),e(t0e,TWr),e(z3,MWr),e(z3,Joe),e(Joe,EWr),e(z3,CWr),e(de,wWr),e(de,W3),e(W3,a0e),e(a0e,AWr),e(W3,LWr),e(W3,Yoe),e(Yoe,yWr),e(W3,xWr),e(de,$Wr),e(de,Q3),e(Q3,n0e),e(n0e,kWr),e(Q3,SWr),e(Q3,Koe),e(Koe,RWr),e(Q3,PWr),e(de,BWr),e(de,U3),e(U3,s0e),e(s0e,IWr),e(U3,NWr),e(U3,Zoe),e(Zoe,qWr),e(U3,jWr),e(de,DWr),e(de,H3),e(H3,l0e),e(l0e,GWr),e(H3,OWr),e(H3,ere),e(ere,VWr),e(H3,XWr),e(zr,zWr),M(J3,zr,null),b(f,NHe,u),b(f,df,u),e(df,Y3),e(Y3,i0e),M(Tk,i0e,null),e(df,WWr),e(df,d0e),e(d0e,QWr),b(f,qHe,u),b(f,ur,u),M(Mk,ur,null),e(ur,UWr),e(ur,cf),e(cf,HWr),e(cf,ore),e(ore,JWr),e(cf,YWr),e(cf,rre),e(rre,KWr),e(cf,ZWr),e(ur,eQr),e(ur,Ek),e(Ek,oQr),e(Ek,c0e),e(c0e,rQr),e(Ek,tQr),e(ur,aQr),e(ur,Yt),M(Ck,Yt,null),e(Yt,nQr),e(Yt,f0e),e(f0e,sQr),e(Yt,lQr),e(Yt,ff),e(ff,iQr),e(ff,m0e),e(m0e,dQr),e(ff,cQr),e(ff,tre),e(tre,fQr),e(ff,mQr),e(Yt,gQr),M(K3,Yt,null),e(ur,hQr),e(ur,Wr),M(wk,Wr,null),e(Wr,pQr),e(Wr,g0e),e(g0e,_Qr),e(Wr,uQr),e(Wr,xn),e(xn,bQr),e(xn,h0e),e(h0e,vQr),e(xn,FQr),e(xn,p0e),e(p0e,TQr),e(xn,MQr),e(xn,_0e),e(_0e,EQr),e(xn,CQr),e(Wr,wQr),e(Wr,u0e),e(u0e,Z3),e(Z3,b0e),e(b0e,AQr),e(Z3,LQr),e(Z3,are),e(are,yQr),e(Z3,xQr),e(Wr,$Qr),M(e5,Wr,null),b(f,jHe,u),b(f,mf,u),e(mf,o5),e(o5,v0e),M(Ak,v0e,null),e(mf,kQr),e(mf,F0e),e(F0e,SQr),b(f,DHe,u),b(f,br,u),M(Lk,br,null),e(br,RQr),e(br,gf),e(gf,PQr),e(gf,nre),e(nre,BQr),e(gf,IQr),e(gf,sre),e(sre,NQr),e(gf,qQr),e(br,jQr),e(br,yk),e(yk,DQr),e(yk,T0e),e(T0e,GQr),e(yk,OQr),e(br,VQr),e(br,Kt),M(xk,Kt,null),e(Kt,XQr),e(Kt,M0e),e(M0e,zQr),e(Kt,WQr),e(Kt,hf),e(hf,QQr),e(hf,E0e),e(E0e,UQr),e(hf,HQr),e(hf,lre),e(lre,JQr),e(hf,YQr),e(Kt,KQr),M(r5,Kt,null),e(br,ZQr),e(br,Qr),M($k,Qr,null),e(Qr,eUr),e(Qr,C0e),e(C0e,oUr),e(Qr,rUr),e(Qr,$n),e($n,tUr),e($n,w0e),e(w0e,aUr),e($n,nUr),e($n,A0e),e(A0e,sUr),e($n,lUr),e($n,L0e),e(L0e,iUr),e($n,dUr),e(Qr,cUr),e(Qr,y0e),e(y0e,t5),e(t5,x0e),e(x0e,fUr),e(t5,mUr),e(t5,ire),e(ire,gUr),e(t5,hUr),e(Qr,pUr),M(a5,Qr,null),b(f,GHe,u),b(f,pf,u),e(pf,n5),e(n5,$0e),M(kk,$0e,null),e(pf,_Ur),e(pf,k0e),e(k0e,uUr),b(f,OHe,u),b(f,vr,u),M(Sk,vr,null),e(vr,bUr),e(vr,_f),e(_f,vUr),e(_f,dre),e(dre,FUr),e(_f,TUr),e(_f,cre),e(cre,MUr),e(_f,EUr),e(vr,CUr),e(vr,Rk),e(Rk,wUr),e(Rk,S0e),e(S0e,AUr),e(Rk,LUr),e(vr,yUr),e(vr,Zt),M(Pk,Zt,null),e(Zt,xUr),e(Zt,R0e),e(R0e,$Ur),e(Zt,kUr),e(Zt,uf),e(uf,SUr),e(uf,P0e),e(P0e,RUr),e(uf,PUr),e(uf,fre),e(fre,BUr),e(uf,IUr),e(Zt,NUr),M(s5,Zt,null),e(vr,qUr),e(vr,Ur),M(Bk,Ur,null),e(Ur,jUr),e(Ur,B0e),e(B0e,DUr),e(Ur,GUr),e(Ur,kn),e(kn,OUr),e(kn,I0e),e(I0e,VUr),e(kn,XUr),e(kn,N0e),e(N0e,zUr),e(kn,WUr),e(kn,q0e),e(q0e,QUr),e(kn,UUr),e(Ur,HUr),e(Ur,te),e(te,l5),e(l5,j0e),e(j0e,JUr),e(l5,YUr),e(l5,mre),e(mre,KUr),e(l5,ZUr),e(te,eHr),e(te,i5),e(i5,D0e),e(D0e,oHr),e(i5,rHr),e(i5,gre),e(gre,tHr),e(i5,aHr),e(te,nHr),e(te,d5),e(d5,G0e),e(G0e,sHr),e(d5,lHr),e(d5,hre),e(hre,iHr),e(d5,dHr),e(te,cHr),e(te,c5),e(c5,O0e),e(O0e,fHr),e(c5,mHr),e(c5,pre),e(pre,gHr),e(c5,hHr),e(te,pHr),e(te,f5),e(f5,V0e),e(V0e,_Hr),e(f5,uHr),e(f5,_re),e(_re,bHr),e(f5,vHr),e(te,FHr),e(te,m5),e(m5,X0e),e(X0e,THr),e(m5,MHr),e(m5,ure),e(ure,EHr),e(m5,CHr),e(te,wHr),e(te,g5),e(g5,z0e),e(z0e,AHr),e(g5,LHr),e(g5,bre),e(bre,yHr),e(g5,xHr),e(te,$Hr),e(te,h5),e(h5,W0e),e(W0e,kHr),e(h5,SHr),e(h5,vre),e(vre,RHr),e(h5,PHr),e(te,BHr),e(te,p5),e(p5,Q0e),e(Q0e,IHr),e(p5,NHr),e(p5,Fre),e(Fre,qHr),e(p5,jHr),e(te,DHr),e(te,_5),e(_5,U0e),e(U0e,GHr),e(_5,OHr),e(_5,Tre),e(Tre,VHr),e(_5,XHr),e(te,zHr),e(te,u5),e(u5,H0e),e(H0e,WHr),e(u5,QHr),e(u5,Mre),e(Mre,UHr),e(u5,HHr),e(te,JHr),e(te,b5),e(b5,J0e),e(J0e,YHr),e(b5,KHr),e(b5,Ere),e(Ere,ZHr),e(b5,eJr),e(te,oJr),e(te,v5),e(v5,Y0e),e(Y0e,rJr),e(v5,tJr),e(v5,Cre),e(Cre,aJr),e(v5,nJr),e(te,sJr),e(te,F5),e(F5,K0e),e(K0e,lJr),e(F5,iJr),e(F5,wre),e(wre,dJr),e(F5,cJr),e(te,fJr),e(te,T5),e(T5,Z0e),e(Z0e,mJr),e(T5,gJr),e(T5,Are),e(Are,hJr),e(T5,pJr),e(te,_Jr),e(te,M5),e(M5,ewe),e(ewe,uJr),e(M5,bJr),e(M5,Lre),e(Lre,vJr),e(M5,FJr),e(te,TJr),e(te,E5),e(E5,owe),e(owe,MJr),e(E5,EJr),e(E5,yre),e(yre,CJr),e(E5,wJr),e(te,AJr),e(te,C5),e(C5,rwe),e(rwe,LJr),e(C5,yJr),e(C5,xre),e(xre,xJr),e(C5,$Jr),e(te,kJr),e(te,w5),e(w5,twe),e(twe,SJr),e(w5,RJr),e(w5,$re),e($re,PJr),e(w5,BJr),e(te,IJr),e(te,A5),e(A5,awe),e(awe,NJr),e(A5,qJr),e(A5,kre),e(kre,jJr),e(A5,DJr),e(te,GJr),e(te,L5),e(L5,nwe),e(nwe,OJr),e(L5,VJr),e(L5,Sre),e(Sre,XJr),e(L5,zJr),e(te,WJr),e(te,y5),e(y5,swe),e(swe,QJr),e(y5,UJr),e(y5,Rre),e(Rre,HJr),e(y5,JJr),e(te,YJr),e(te,x5),e(x5,lwe),e(lwe,KJr),e(x5,ZJr),e(x5,Pre),e(Pre,eYr),e(x5,oYr),e(te,rYr),e(te,$5),e($5,iwe),e(iwe,tYr),e($5,aYr),e($5,Bre),e(Bre,nYr),e($5,sYr),e(te,lYr),e(te,k5),e(k5,dwe),e(dwe,iYr),e(k5,dYr),e(k5,Ire),e(Ire,cYr),e(k5,fYr),e(te,mYr),e(te,S5),e(S5,cwe),e(cwe,gYr),e(S5,hYr),e(S5,Nre),e(Nre,pYr),e(S5,_Yr),e(te,uYr),e(te,R5),e(R5,fwe),e(fwe,bYr),e(R5,vYr),e(R5,qre),e(qre,FYr),e(R5,TYr),e(Ur,MYr),M(P5,Ur,null),b(f,VHe,u),b(f,bf,u),e(bf,B5),e(B5,mwe),M(Ik,mwe,null),e(bf,EYr),e(bf,gwe),e(gwe,CYr),b(f,XHe,u),b(f,Fr,u),M(Nk,Fr,null),e(Fr,wYr),e(Fr,vf),e(vf,AYr),e(vf,jre),e(jre,LYr),e(vf,yYr),e(vf,Dre),e(Dre,xYr),e(vf,$Yr),e(Fr,kYr),e(Fr,qk),e(qk,SYr),e(qk,hwe),e(hwe,RYr),e(qk,PYr),e(Fr,BYr),e(Fr,ea),M(jk,ea,null),e(ea,IYr),e(ea,pwe),e(pwe,NYr),e(ea,qYr),e(ea,Ff),e(Ff,jYr),e(Ff,_we),e(_we,DYr),e(Ff,GYr),e(Ff,Gre),e(Gre,OYr),e(Ff,VYr),e(ea,XYr),M(I5,ea,null),e(Fr,zYr),e(Fr,Hr),M(Dk,Hr,null),e(Hr,WYr),e(Hr,uwe),e(uwe,QYr),e(Hr,UYr),e(Hr,Sn),e(Sn,HYr),e(Sn,bwe),e(bwe,JYr),e(Sn,YYr),e(Sn,vwe),e(vwe,KYr),e(Sn,ZYr),e(Sn,Fwe),e(Fwe,eKr),e(Sn,oKr),e(Hr,rKr),e(Hr,xe),e(xe,N5),e(N5,Twe),e(Twe,tKr),e(N5,aKr),e(N5,Ore),e(Ore,nKr),e(N5,sKr),e(xe,lKr),e(xe,q5),e(q5,Mwe),e(Mwe,iKr),e(q5,dKr),e(q5,Vre),e(Vre,cKr),e(q5,fKr),e(xe,mKr),e(xe,j5),e(j5,Ewe),e(Ewe,gKr),e(j5,hKr),e(j5,Xre),e(Xre,pKr),e(j5,_Kr),e(xe,uKr),e(xe,D5),e(D5,Cwe),e(Cwe,bKr),e(D5,vKr),e(D5,zre),e(zre,FKr),e(D5,TKr),e(xe,MKr),e(xe,G5),e(G5,wwe),e(wwe,EKr),e(G5,CKr),e(G5,Wre),e(Wre,wKr),e(G5,AKr),e(xe,LKr),e(xe,O5),e(O5,Awe),e(Awe,yKr),e(O5,xKr),e(O5,Qre),e(Qre,$Kr),e(O5,kKr),e(xe,SKr),e(xe,V5),e(V5,Lwe),e(Lwe,RKr),e(V5,PKr),e(V5,Ure),e(Ure,BKr),e(V5,IKr),e(xe,NKr),e(xe,X5),e(X5,ywe),e(ywe,qKr),e(X5,jKr),e(X5,Hre),e(Hre,DKr),e(X5,GKr),e(xe,OKr),e(xe,z5),e(z5,xwe),e(xwe,VKr),e(z5,XKr),e(z5,Jre),e(Jre,zKr),e(z5,WKr),e(xe,QKr),e(xe,W5),e(W5,$we),e($we,UKr),e(W5,HKr),e(W5,Yre),e(Yre,JKr),e(W5,YKr),e(Hr,KKr),M(Q5,Hr,null),b(f,zHe,u),b(f,Tf,u),e(Tf,U5),e(U5,kwe),M(Gk,kwe,null),e(Tf,ZKr),e(Tf,Swe),e(Swe,eZr),b(f,WHe,u),b(f,Tr,u),M(Ok,Tr,null),e(Tr,oZr),e(Tr,Mf),e(Mf,rZr),e(Mf,Kre),e(Kre,tZr),e(Mf,aZr),e(Mf,Zre),e(Zre,nZr),e(Mf,sZr),e(Tr,lZr),e(Tr,Vk),e(Vk,iZr),e(Vk,Rwe),e(Rwe,dZr),e(Vk,cZr),e(Tr,fZr),e(Tr,oa),M(Xk,oa,null),e(oa,mZr),e(oa,Pwe),e(Pwe,gZr),e(oa,hZr),e(oa,Ef),e(Ef,pZr),e(Ef,Bwe),e(Bwe,_Zr),e(Ef,uZr),e(Ef,ete),e(ete,bZr),e(Ef,vZr),e(oa,FZr),M(H5,oa,null),e(Tr,TZr),e(Tr,Jr),M(zk,Jr,null),e(Jr,MZr),e(Jr,Iwe),e(Iwe,EZr),e(Jr,CZr),e(Jr,Rn),e(Rn,wZr),e(Rn,Nwe),e(Nwe,AZr),e(Rn,LZr),e(Rn,qwe),e(qwe,yZr),e(Rn,xZr),e(Rn,jwe),e(jwe,$Zr),e(Rn,kZr),e(Jr,SZr),e(Jr,Ee),e(Ee,J5),e(J5,Dwe),e(Dwe,RZr),e(J5,PZr),e(J5,ote),e(ote,BZr),e(J5,IZr),e(Ee,NZr),e(Ee,Y5),e(Y5,Gwe),e(Gwe,qZr),e(Y5,jZr),e(Y5,rte),e(rte,DZr),e(Y5,GZr),e(Ee,OZr),e(Ee,K5),e(K5,Owe),e(Owe,VZr),e(K5,XZr),e(K5,tte),e(tte,zZr),e(K5,WZr),e(Ee,QZr),e(Ee,Z5),e(Z5,Vwe),e(Vwe,UZr),e(Z5,HZr),e(Z5,ate),e(ate,JZr),e(Z5,YZr),e(Ee,KZr),e(Ee,e0),e(e0,Xwe),e(Xwe,ZZr),e(e0,eet),e(e0,nte),e(nte,oet),e(e0,ret),e(Ee,tet),e(Ee,o0),e(o0,zwe),e(zwe,aet),e(o0,net),e(o0,ste),e(ste,set),e(o0,iet),e(Ee,det),e(Ee,r0),e(r0,Wwe),e(Wwe,cet),e(r0,fet),e(r0,lte),e(lte,met),e(r0,get),e(Ee,het),e(Ee,t0),e(t0,Qwe),e(Qwe,pet),e(t0,_et),e(t0,ite),e(ite,uet),e(t0,bet),e(Ee,vet),e(Ee,a0),e(a0,Uwe),e(Uwe,Fet),e(a0,Tet),e(a0,dte),e(dte,Met),e(a0,Eet),e(Ee,Cet),e(Ee,n0),e(n0,Hwe),e(Hwe,wet),e(n0,Aet),e(n0,cte),e(cte,Let),e(n0,yet),e(Ee,xet),e(Ee,s0),e(s0,Jwe),e(Jwe,$et),e(s0,ket),e(s0,fte),e(fte,Set),e(s0,Ret),e(Ee,Pet),e(Ee,l0),e(l0,Ywe),e(Ywe,Bet),e(l0,Iet),e(l0,mte),e(mte,Net),e(l0,qet),e(Ee,jet),e(Ee,i0),e(i0,Kwe),e(Kwe,Det),e(i0,Get),e(i0,gte),e(gte,Oet),e(i0,Vet),e(Jr,Xet),M(d0,Jr,null),b(f,QHe,u),b(f,Cf,u),e(Cf,c0),e(c0,Zwe),M(Wk,Zwe,null),e(Cf,zet),e(Cf,eAe),e(eAe,Wet),b(f,UHe,u),b(f,Mr,u),M(Qk,Mr,null),e(Mr,Qet),e(Mr,wf),e(wf,Uet),e(wf,hte),e(hte,Het),e(wf,Jet),e(wf,pte),e(pte,Yet),e(wf,Ket),e(Mr,Zet),e(Mr,Uk),e(Uk,eot),e(Uk,oAe),e(oAe,oot),e(Uk,rot),e(Mr,tot),e(Mr,ra),M(Hk,ra,null),e(ra,aot),e(ra,rAe),e(rAe,not),e(ra,sot),e(ra,Af),e(Af,lot),e(Af,tAe),e(tAe,iot),e(Af,dot),e(Af,_te),e(_te,cot),e(Af,fot),e(ra,mot),M(f0,ra,null),e(Mr,got),e(Mr,Yr),M(Jk,Yr,null),e(Yr,hot),e(Yr,aAe),e(aAe,pot),e(Yr,_ot),e(Yr,Pn),e(Pn,uot),e(Pn,nAe),e(nAe,bot),e(Pn,vot),e(Pn,sAe),e(sAe,Fot),e(Pn,Tot),e(Pn,lAe),e(lAe,Mot),e(Pn,Eot),e(Yr,Cot),e(Yr,$e),e($e,m0),e(m0,iAe),e(iAe,wot),e(m0,Aot),e(m0,ute),e(ute,Lot),e(m0,yot),e($e,xot),e($e,g0),e(g0,dAe),e(dAe,$ot),e(g0,kot),e(g0,bte),e(bte,Sot),e(g0,Rot),e($e,Pot),e($e,h0),e(h0,cAe),e(cAe,Bot),e(h0,Iot),e(h0,vte),e(vte,Not),e(h0,qot),e($e,jot),e($e,p0),e(p0,fAe),e(fAe,Dot),e(p0,Got),e(p0,Fte),e(Fte,Oot),e(p0,Vot),e($e,Xot),e($e,_0),e(_0,mAe),e(mAe,zot),e(_0,Wot),e(_0,Tte),e(Tte,Qot),e(_0,Uot),e($e,Hot),e($e,u0),e(u0,gAe),e(gAe,Jot),e(u0,Yot),e(u0,Mte),e(Mte,Kot),e(u0,Zot),e($e,ert),e($e,b0),e(b0,hAe),e(hAe,ort),e(b0,rrt),e(b0,Ete),e(Ete,trt),e(b0,art),e($e,nrt),e($e,v0),e(v0,pAe),e(pAe,srt),e(v0,lrt),e(v0,Cte),e(Cte,irt),e(v0,drt),e($e,crt),e($e,F0),e(F0,_Ae),e(_Ae,frt),e(F0,mrt),e(F0,wte),e(wte,grt),e(F0,hrt),e($e,prt),e($e,T0),e(T0,uAe),e(uAe,_rt),e(T0,urt),e(T0,Ate),e(Ate,brt),e(T0,vrt),e(Yr,Frt),M(M0,Yr,null),b(f,HHe,u),b(f,Lf,u),e(Lf,E0),e(E0,bAe),M(Yk,bAe,null),e(Lf,Trt),e(Lf,vAe),e(vAe,Mrt),b(f,JHe,u),b(f,Er,u),M(Kk,Er,null),e(Er,Ert),e(Er,yf),e(yf,Crt),e(yf,Lte),e(Lte,wrt),e(yf,Art),e(yf,yte),e(yte,Lrt),e(yf,yrt),e(Er,xrt),e(Er,Zk),e(Zk,$rt),e(Zk,FAe),e(FAe,krt),e(Zk,Srt),e(Er,Rrt),e(Er,ta),M(eS,ta,null),e(ta,Prt),e(ta,TAe),e(TAe,Brt),e(ta,Irt),e(ta,xf),e(xf,Nrt),e(xf,MAe),e(MAe,qrt),e(xf,jrt),e(xf,xte),e(xte,Drt),e(xf,Grt),e(ta,Ort),M(C0,ta,null),e(Er,Vrt),e(Er,Kr),M(oS,Kr,null),e(Kr,Xrt),e(Kr,EAe),e(EAe,zrt),e(Kr,Wrt),e(Kr,Bn),e(Bn,Qrt),e(Bn,CAe),e(CAe,Urt),e(Bn,Hrt),e(Bn,wAe),e(wAe,Jrt),e(Bn,Yrt),e(Bn,AAe),e(AAe,Krt),e(Bn,Zrt),e(Kr,ett),e(Kr,ke),e(ke,w0),e(w0,LAe),e(LAe,ott),e(w0,rtt),e(w0,$te),e($te,ttt),e(w0,att),e(ke,ntt),e(ke,A0),e(A0,yAe),e(yAe,stt),e(A0,ltt),e(A0,kte),e(kte,itt),e(A0,dtt),e(ke,ctt),e(ke,L0),e(L0,xAe),e(xAe,ftt),e(L0,mtt),e(L0,Ste),e(Ste,gtt),e(L0,htt),e(ke,ptt),e(ke,y0),e(y0,$Ae),e($Ae,_tt),e(y0,utt),e(y0,Rte),e(Rte,btt),e(y0,vtt),e(ke,Ftt),e(ke,x0),e(x0,kAe),e(kAe,Ttt),e(x0,Mtt),e(x0,Pte),e(Pte,Ett),e(x0,Ctt),e(ke,wtt),e(ke,$0),e($0,SAe),e(SAe,Att),e($0,Ltt),e($0,Bte),e(Bte,ytt),e($0,xtt),e(ke,$tt),e(ke,k0),e(k0,RAe),e(RAe,ktt),e(k0,Stt),e(k0,Ite),e(Ite,Rtt),e(k0,Ptt),e(ke,Btt),e(ke,S0),e(S0,PAe),e(PAe,Itt),e(S0,Ntt),e(S0,Nte),e(Nte,qtt),e(S0,jtt),e(ke,Dtt),e(ke,R0),e(R0,BAe),e(BAe,Gtt),e(R0,Ott),e(R0,qte),e(qte,Vtt),e(R0,Xtt),e(ke,ztt),e(ke,P0),e(P0,IAe),e(IAe,Wtt),e(P0,Qtt),e(P0,jte),e(jte,Utt),e(P0,Htt),e(Kr,Jtt),M(B0,Kr,null),b(f,YHe,u),b(f,$f,u),e($f,I0),e(I0,NAe),M(rS,NAe,null),e($f,Ytt),e($f,qAe),e(qAe,Ktt),b(f,KHe,u),b(f,Cr,u),M(tS,Cr,null),e(Cr,Ztt),e(Cr,kf),e(kf,eat),e(kf,Dte),e(Dte,oat),e(kf,rat),e(kf,Gte),e(Gte,tat),e(kf,aat),e(Cr,nat),e(Cr,aS),e(aS,sat),e(aS,jAe),e(jAe,lat),e(aS,iat),e(Cr,dat),e(Cr,aa),M(nS,aa,null),e(aa,cat),e(aa,DAe),e(DAe,fat),e(aa,mat),e(aa,Sf),e(Sf,gat),e(Sf,GAe),e(GAe,hat),e(Sf,pat),e(Sf,Ote),e(Ote,_at),e(Sf,uat),e(aa,bat),M(N0,aa,null),e(Cr,vat),e(Cr,Zr),M(sS,Zr,null),e(Zr,Fat),e(Zr,OAe),e(OAe,Tat),e(Zr,Mat),e(Zr,In),e(In,Eat),e(In,VAe),e(VAe,Cat),e(In,wat),e(In,XAe),e(XAe,Aat),e(In,Lat),e(In,zAe),e(zAe,yat),e(In,xat),e(Zr,$at),e(Zr,Se),e(Se,q0),e(q0,WAe),e(WAe,kat),e(q0,Sat),e(q0,Vte),e(Vte,Rat),e(q0,Pat),e(Se,Bat),e(Se,j0),e(j0,QAe),e(QAe,Iat),e(j0,Nat),e(j0,Xte),e(Xte,qat),e(j0,jat),e(Se,Dat),e(Se,D0),e(D0,UAe),e(UAe,Gat),e(D0,Oat),e(D0,zte),e(zte,Vat),e(D0,Xat),e(Se,zat),e(Se,G0),e(G0,HAe),e(HAe,Wat),e(G0,Qat),e(G0,Wte),e(Wte,Uat),e(G0,Hat),e(Se,Jat),e(Se,O0),e(O0,JAe),e(JAe,Yat),e(O0,Kat),e(O0,Qte),e(Qte,Zat),e(O0,ent),e(Se,ont),e(Se,V0),e(V0,YAe),e(YAe,rnt),e(V0,tnt),e(V0,Ute),e(Ute,ant),e(V0,nnt),e(Se,snt),e(Se,X0),e(X0,KAe),e(KAe,lnt),e(X0,int),e(X0,Hte),e(Hte,dnt),e(X0,cnt),e(Se,fnt),e(Se,z0),e(z0,ZAe),e(ZAe,mnt),e(z0,gnt),e(z0,Jte),e(Jte,hnt),e(z0,pnt),e(Se,_nt),e(Se,W0),e(W0,eLe),e(eLe,unt),e(W0,bnt),e(W0,Yte),e(Yte,vnt),e(W0,Fnt),e(Se,Tnt),e(Se,Q0),e(Q0,oLe),e(oLe,Mnt),e(Q0,Ent),e(Q0,Kte),e(Kte,Cnt),e(Q0,wnt),e(Zr,Ant),M(U0,Zr,null),b(f,ZHe,u),b(f,Rf,u),e(Rf,H0),e(H0,rLe),M(lS,rLe,null),e(Rf,Lnt),e(Rf,tLe),e(tLe,ynt),b(f,eJe,u),b(f,wr,u),M(iS,wr,null),e(wr,xnt),e(wr,Pf),e(Pf,$nt),e(Pf,Zte),e(Zte,knt),e(Pf,Snt),e(Pf,eae),e(eae,Rnt),e(Pf,Pnt),e(wr,Bnt),e(wr,dS),e(dS,Int),e(dS,aLe),e(aLe,Nnt),e(dS,qnt),e(wr,jnt),e(wr,na),M(cS,na,null),e(na,Dnt),e(na,nLe),e(nLe,Gnt),e(na,Ont),e(na,Bf),e(Bf,Vnt),e(Bf,sLe),e(sLe,Xnt),e(Bf,znt),e(Bf,oae),e(oae,Wnt),e(Bf,Qnt),e(na,Unt),M(J0,na,null),e(wr,Hnt),e(wr,et),M(fS,et,null),e(et,Jnt),e(et,lLe),e(lLe,Ynt),e(et,Knt),e(et,Nn),e(Nn,Znt),e(Nn,iLe),e(iLe,est),e(Nn,ost),e(Nn,dLe),e(dLe,rst),e(Nn,tst),e(Nn,cLe),e(cLe,ast),e(Nn,nst),e(et,sst),e(et,Re),e(Re,Y0),e(Y0,fLe),e(fLe,lst),e(Y0,ist),e(Y0,rae),e(rae,dst),e(Y0,cst),e(Re,fst),e(Re,K0),e(K0,mLe),e(mLe,mst),e(K0,gst),e(K0,tae),e(tae,hst),e(K0,pst),e(Re,_st),e(Re,Z0),e(Z0,gLe),e(gLe,ust),e(Z0,bst),e(Z0,aae),e(aae,vst),e(Z0,Fst),e(Re,Tst),e(Re,ew),e(ew,hLe),e(hLe,Mst),e(ew,Est),e(ew,nae),e(nae,Cst),e(ew,wst),e(Re,Ast),e(Re,ow),e(ow,pLe),e(pLe,Lst),e(ow,yst),e(ow,sae),e(sae,xst),e(ow,$st),e(Re,kst),e(Re,rw),e(rw,_Le),e(_Le,Sst),e(rw,Rst),e(rw,lae),e(lae,Pst),e(rw,Bst),e(Re,Ist),e(Re,tw),e(tw,uLe),e(uLe,Nst),e(tw,qst),e(tw,iae),e(iae,jst),e(tw,Dst),e(Re,Gst),e(Re,aw),e(aw,bLe),e(bLe,Ost),e(aw,Vst),e(aw,dae),e(dae,Xst),e(aw,zst),e(Re,Wst),e(Re,nw),e(nw,vLe),e(vLe,Qst),e(nw,Ust),e(nw,cae),e(cae,Hst),e(nw,Jst),e(Re,Yst),e(Re,sw),e(sw,FLe),e(FLe,Kst),e(sw,Zst),e(sw,fae),e(fae,elt),e(sw,olt),e(et,rlt),M(lw,et,null),b(f,oJe,u),b(f,If,u),e(If,iw),e(iw,TLe),M(mS,TLe,null),e(If,tlt),e(If,MLe),e(MLe,alt),b(f,rJe,u),b(f,Ar,u),M(gS,Ar,null),e(Ar,nlt),e(Ar,Nf),e(Nf,slt),e(Nf,mae),e(mae,llt),e(Nf,ilt),e(Nf,gae),e(gae,dlt),e(Nf,clt),e(Ar,flt),e(Ar,hS),e(hS,mlt),e(hS,ELe),e(ELe,glt),e(hS,hlt),e(Ar,plt),e(Ar,sa),M(pS,sa,null),e(sa,_lt),e(sa,CLe),e(CLe,ult),e(sa,blt),e(sa,qf),e(qf,vlt),e(qf,wLe),e(wLe,Flt),e(qf,Tlt),e(qf,hae),e(hae,Mlt),e(qf,Elt),e(sa,Clt),M(dw,sa,null),e(Ar,wlt),e(Ar,ot),M(_S,ot,null),e(ot,Alt),e(ot,ALe),e(ALe,Llt),e(ot,ylt),e(ot,qn),e(qn,xlt),e(qn,LLe),e(LLe,$lt),e(qn,klt),e(qn,yLe),e(yLe,Slt),e(qn,Rlt),e(qn,xLe),e(xLe,Plt),e(qn,Blt),e(ot,Ilt),e(ot,Xe),e(Xe,cw),e(cw,$Le),e($Le,Nlt),e(cw,qlt),e(cw,pae),e(pae,jlt),e(cw,Dlt),e(Xe,Glt),e(Xe,fw),e(fw,kLe),e(kLe,Olt),e(fw,Vlt),e(fw,_ae),e(_ae,Xlt),e(fw,zlt),e(Xe,Wlt),e(Xe,mw),e(mw,SLe),e(SLe,Qlt),e(mw,Ult),e(mw,uae),e(uae,Hlt),e(mw,Jlt),e(Xe,Ylt),e(Xe,gw),e(gw,RLe),e(RLe,Klt),e(gw,Zlt),e(gw,bae),e(bae,eit),e(gw,oit),e(Xe,rit),e(Xe,hw),e(hw,PLe),e(PLe,tit),e(hw,ait),e(hw,vae),e(vae,nit),e(hw,sit),e(Xe,lit),e(Xe,pw),e(pw,BLe),e(BLe,iit),e(pw,dit),e(pw,Fae),e(Fae,cit),e(pw,fit),e(Xe,mit),e(Xe,_w),e(_w,ILe),e(ILe,git),e(_w,hit),e(_w,Tae),e(Tae,pit),e(_w,_it),e(Xe,uit),e(Xe,uw),e(uw,NLe),e(NLe,bit),e(uw,vit),e(uw,Mae),e(Mae,Fit),e(uw,Tit),e(ot,Mit),M(bw,ot,null),b(f,tJe,u),b(f,jf,u),e(jf,vw),e(vw,qLe),M(uS,qLe,null),e(jf,Eit),e(jf,jLe),e(jLe,Cit),b(f,aJe,u),b(f,Lr,u),M(bS,Lr,null),e(Lr,wit),e(Lr,Df),e(Df,Ait),e(Df,Eae),e(Eae,Lit),e(Df,yit),e(Df,Cae),e(Cae,xit),e(Df,$it),e(Lr,kit),e(Lr,vS),e(vS,Sit),e(vS,DLe),e(DLe,Rit),e(vS,Pit),e(Lr,Bit),e(Lr,la),M(FS,la,null),e(la,Iit),e(la,GLe),e(GLe,Nit),e(la,qit),e(la,Gf),e(Gf,jit),e(Gf,OLe),e(OLe,Dit),e(Gf,Git),e(Gf,wae),e(wae,Oit),e(Gf,Vit),e(la,Xit),M(Fw,la,null),e(Lr,zit),e(Lr,rt),M(TS,rt,null),e(rt,Wit),e(rt,VLe),e(VLe,Qit),e(rt,Uit),e(rt,jn),e(jn,Hit),e(jn,XLe),e(XLe,Jit),e(jn,Yit),e(jn,zLe),e(zLe,Kit),e(jn,Zit),e(jn,WLe),e(WLe,edt),e(jn,odt),e(rt,rdt),e(rt,ze),e(ze,Tw),e(Tw,QLe),e(QLe,tdt),e(Tw,adt),e(Tw,Aae),e(Aae,ndt),e(Tw,sdt),e(ze,ldt),e(ze,Mw),e(Mw,ULe),e(ULe,idt),e(Mw,ddt),e(Mw,Lae),e(Lae,cdt),e(Mw,fdt),e(ze,mdt),e(ze,Ew),e(Ew,HLe),e(HLe,gdt),e(Ew,hdt),e(Ew,yae),e(yae,pdt),e(Ew,_dt),e(ze,udt),e(ze,Cw),e(Cw,JLe),e(JLe,bdt),e(Cw,vdt),e(Cw,xae),e(xae,Fdt),e(Cw,Tdt),e(ze,Mdt),e(ze,ww),e(ww,YLe),e(YLe,Edt),e(ww,Cdt),e(ww,$ae),e($ae,wdt),e(ww,Adt),e(ze,Ldt),e(ze,Aw),e(Aw,KLe),e(KLe,ydt),e(Aw,xdt),e(Aw,kae),e(kae,$dt),e(Aw,kdt),e(ze,Sdt),e(ze,Lw),e(Lw,ZLe),e(ZLe,Rdt),e(Lw,Pdt),e(Lw,Sae),e(Sae,Bdt),e(Lw,Idt),e(ze,Ndt),e(ze,yw),e(yw,eye),e(eye,qdt),e(yw,jdt),e(yw,Rae),e(Rae,Ddt),e(yw,Gdt),e(rt,Odt),M(xw,rt,null),b(f,nJe,u),b(f,Of,u),e(Of,$w),e($w,oye),M(MS,oye,null),e(Of,Vdt),e(Of,rye),e(rye,Xdt),b(f,sJe,u),b(f,yr,u),M(ES,yr,null),e(yr,zdt),e(yr,Vf),e(Vf,Wdt),e(Vf,Pae),e(Pae,Qdt),e(Vf,Udt),e(Vf,Bae),e(Bae,Hdt),e(Vf,Jdt),e(yr,Ydt),e(yr,CS),e(CS,Kdt),e(CS,tye),e(tye,Zdt),e(CS,ect),e(yr,oct),e(yr,ia),M(wS,ia,null),e(ia,rct),e(ia,aye),e(aye,tct),e(ia,act),e(ia,Xf),e(Xf,nct),e(Xf,nye),e(nye,sct),e(Xf,lct),e(Xf,Iae),e(Iae,ict),e(Xf,dct),e(ia,cct),M(kw,ia,null),e(yr,fct),e(yr,tt),M(AS,tt,null),e(tt,mct),e(tt,sye),e(sye,gct),e(tt,hct),e(tt,Dn),e(Dn,pct),e(Dn,lye),e(lye,_ct),e(Dn,uct),e(Dn,iye),e(iye,bct),e(Dn,vct),e(Dn,dye),e(dye,Fct),e(Dn,Tct),e(tt,Mct),e(tt,cye),e(cye,Sw),e(Sw,fye),e(fye,Ect),e(Sw,Cct),e(Sw,Nae),e(Nae,wct),e(Sw,Act),e(tt,Lct),M(Rw,tt,null),b(f,lJe,u),b(f,zf,u),e(zf,Pw),e(Pw,mye),M(LS,mye,null),e(zf,yct),e(zf,gye),e(gye,xct),b(f,iJe,u),b(f,xr,u),M(yS,xr,null),e(xr,$ct),e(xr,Wf),e(Wf,kct),e(Wf,qae),e(qae,Sct),e(Wf,Rct),e(Wf,jae),e(jae,Pct),e(Wf,Bct),e(xr,Ict),e(xr,xS),e(xS,Nct),e(xS,hye),e(hye,qct),e(xS,jct),e(xr,Dct),e(xr,da),M($S,da,null),e(da,Gct),e(da,pye),e(pye,Oct),e(da,Vct),e(da,Qf),e(Qf,Xct),e(Qf,_ye),e(_ye,zct),e(Qf,Wct),e(Qf,Dae),e(Dae,Qct),e(Qf,Uct),e(da,Hct),M(Bw,da,null),e(xr,Jct),e(xr,at),M(kS,at,null),e(at,Yct),e(at,uye),e(uye,Kct),e(at,Zct),e(at,Gn),e(Gn,eft),e(Gn,bye),e(bye,oft),e(Gn,rft),e(Gn,vye),e(vye,tft),e(Gn,aft),e(Gn,Fye),e(Fye,nft),e(Gn,sft),e(at,lft),e(at,SS),e(SS,Iw),e(Iw,Tye),e(Tye,ift),e(Iw,dft),e(Iw,Gae),e(Gae,cft),e(Iw,fft),e(SS,mft),e(SS,Nw),e(Nw,Mye),e(Mye,gft),e(Nw,hft),e(Nw,Oae),e(Oae,pft),e(Nw,_ft),e(at,uft),M(qw,at,null),b(f,dJe,u),b(f,Uf,u),e(Uf,jw),e(jw,Eye),M(RS,Eye,null),e(Uf,bft),e(Uf,Cye),e(Cye,vft),b(f,cJe,u),b(f,$r,u),M(PS,$r,null),e($r,Fft),e($r,Hf),e(Hf,Tft),e(Hf,Vae),e(Vae,Mft),e(Hf,Eft),e(Hf,Xae),e(Xae,Cft),e(Hf,wft),e($r,Aft),e($r,BS),e(BS,Lft),e(BS,wye),e(wye,yft),e(BS,xft),e($r,$ft),e($r,ca),M(IS,ca,null),e(ca,kft),e(ca,Aye),e(Aye,Sft),e(ca,Rft),e(ca,Jf),e(Jf,Pft),e(Jf,Lye),e(Lye,Bft),e(Jf,Ift),e(Jf,zae),e(zae,Nft),e(Jf,qft),e(ca,jft),M(Dw,ca,null),e($r,Dft),e($r,nt),M(NS,nt,null),e(nt,Gft),e(nt,yye),e(yye,Oft),e(nt,Vft),e(nt,On),e(On,Xft),e(On,xye),e(xye,zft),e(On,Wft),e(On,$ye),e($ye,Qft),e(On,Uft),e(On,kye),e(kye,Hft),e(On,Jft),e(nt,Yft),e(nt,Sye),e(Sye,Gw),e(Gw,Rye),e(Rye,Kft),e(Gw,Zft),e(Gw,Wae),e(Wae,emt),e(Gw,omt),e(nt,rmt),M(Ow,nt,null),fJe=!0},p(f,[u]){const qS={};u&2&&(qS.$$scope={dirty:u,ctx:f}),nm.$set(qS);const Pye={};u&2&&(Pye.$$scope={dirty:u,ctx:f}),Th.$set(Pye);const Bye={};u&2&&(Bye.$$scope={dirty:u,ctx:f}),tp.$set(Bye);const Iye={};u&2&&(Iye.$$scope={dirty:u,ctx:f}),Xp.$set(Iye);const jS={};u&2&&(jS.$$scope={dirty:u,ctx:f}),zp.$set(jS);const Nye={};u&2&&(Nye.$$scope={dirty:u,ctx:f}),h_.$set(Nye);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),p_.$set(Vn);const qye={};u&2&&(qye.$$scope={dirty:u,ctx:f}),b_.$set(qye);const jye={};u&2&&(jye.$$scope={dirty:u,ctx:f}),L1.$set(jye);const Dye={};u&2&&(Dye.$$scope={dirty:u,ctx:f}),x1.$set(Dye);const DS={};u&2&&(DS.$$scope={dirty:u,ctx:f}),C8.$set(DS);const Gye={};u&2&&(Gye.$$scope={dirty:u,ctx:f}),A8.$set(Gye);const GS={};u&2&&(GS.$$scope={dirty:u,ctx:f}),h2.$set(GS);const Oye={};u&2&&(Oye.$$scope={dirty:u,ctx:f}),_2.$set(Oye);const OS={};u&2&&(OS.$$scope={dirty:u,ctx:f}),rb.$set(OS);const Vye={};u&2&&(Vye.$$scope={dirty:u,ctx:f}),ab.$set(Vye);const Xye={};u&2&&(Xye.$$scope={dirty:u,ctx:f}),wb.$set(Xye);const zye={};u&2&&(zye.$$scope={dirty:u,ctx:f}),Lb.$set(zye);const Yf={};u&2&&(Yf.$$scope={dirty:u,ctx:f}),Lv.$set(Yf);const Wye={};u&2&&(Wye.$$scope={dirty:u,ctx:f}),xv.$set(Wye);const Qye={};u&2&&(Qye.$$scope={dirty:u,ctx:f}),iF.$set(Qye);const Uye={};u&2&&(Uye.$$scope={dirty:u,ctx:f}),cF.$set(Uye);const VS={};u&2&&(VS.$$scope={dirty:u,ctx:f}),bF.$set(VS);const Hye={};u&2&&(Hye.$$scope={dirty:u,ctx:f}),FF.$set(Hye);const Jye={};u&2&&(Jye.$$scope={dirty:u,ctx:f}),n6.$set(Jye);const Yye={};u&2&&(Yye.$$scope={dirty:u,ctx:f}),l6.$set(Yye);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),K6.$set(dt);const XS={};u&2&&(XS.$$scope={dirty:u,ctx:f}),eT.$set(XS);const Kye={};u&2&&(Kye.$$scope={dirty:u,ctx:f}),tT.$set(Kye);const zS={};u&2&&(zS.$$scope={dirty:u,ctx:f}),nT.$set(zS);const Zye={};u&2&&(Zye.$$scope={dirty:u,ctx:f}),TT.$set(Zye);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),ET.$set(ct);const e9e={};u&2&&(e9e.$$scope={dirty:u,ctx:f}),AT.$set(e9e);const Kf={};u&2&&(Kf.$$scope={dirty:u,ctx:f}),yT.$set(Kf);const o9e={};u&2&&(o9e.$$scope={dirty:u,ctx:f}),kT.$set(o9e);const r9e={};u&2&&(r9e.$$scope={dirty:u,ctx:f}),RT.$set(r9e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),IT.$set(L);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),qT.$set(Vw);const t9e={};u&2&&(t9e.$$scope={dirty:u,ctx:f}),HT.$set(t9e);const a9e={};u&2&&(a9e.$$scope={dirty:u,ctx:f}),YT.$set(a9e);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),a7.$set(Xw);const n9e={};u&2&&(n9e.$$scope={dirty:u,ctx:f}),s7.$set(n9e);const s9e={};u&2&&(s9e.$$scope={dirty:u,ctx:f}),b7.$set(s9e);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),F7.$set(zw);const l9e={};u&2&&(l9e.$$scope={dirty:u,ctx:f}),C7.$set(l9e);const i9e={};u&2&&(i9e.$$scope={dirty:u,ctx:f}),A7.$set(i9e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),R7.$set(Ww);const d9e={};u&2&&(d9e.$$scope={dirty:u,ctx:f}),B7.$set(d9e);const c9e={};u&2&&(c9e.$$scope={dirty:u,ctx:f}),G7.$set(c9e);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),V7.$set(Qw);const f9e={};u&2&&(f9e.$$scope={dirty:u,ctx:f}),Q7.$set(f9e);const m9e={};u&2&&(m9e.$$scope={dirty:u,ctx:f}),H7.$set(m9e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),K7.$set(Uw);const g9e={};u&2&&(g9e.$$scope={dirty:u,ctx:f}),eM.$set(g9e);const h9e={};u&2&&(h9e.$$scope={dirty:u,ctx:f}),lM.$set(h9e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),dM.$set(Hw);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:f}),mM.$set(p9e);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:f}),hM.$set(_9e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),mE.$set(Jw);const u9e={};u&2&&(u9e.$$scope={dirty:u,ctx:f}),hE.$set(u9e);const b9e={};u&2&&(b9e.$$scope={dirty:u,ctx:f}),qE.$set(b9e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),DE.$set(Yw);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:f}),e4.$set(v9e);const F9e={};u&2&&(F9e.$$scope={dirty:u,ctx:f}),r4.$set(F9e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),c4.$set(Kw);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:f}),m4.$set(T9e);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:f}),p4.$set(M9e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),u4.$set(Zw);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:f}),q4.$set(E9e);const C9e={};u&2&&(C9e.$$scope={dirty:u,ctx:f}),D4.$set(C9e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),Y4.$set(eA);const w9e={};u&2&&(w9e.$$scope={dirty:u,ctx:f}),Z4.$set(w9e);const A9e={};u&2&&(A9e.$$scope={dirty:u,ctx:f}),LC.$set(A9e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),xC.$set(oA);const L9e={};u&2&&(L9e.$$scope={dirty:u,ctx:f}),QC.$set(L9e);const y9e={};u&2&&(y9e.$$scope={dirty:u,ctx:f}),HC.$set(y9e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),KC.$set(rA);const x9e={};u&2&&(x9e.$$scope={dirty:u,ctx:f}),e3.$set(x9e);const $9e={};u&2&&($9e.$$scope={dirty:u,ctx:f}),r3.$set($9e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),a3.$set(tA);const k9e={};u&2&&(k9e.$$scope={dirty:u,ctx:f}),A3.$set(k9e);const S9e={};u&2&&(S9e.$$scope={dirty:u,ctx:f}),y3.$set(S9e);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),J3.$set(aA);const R9e={};u&2&&(R9e.$$scope={dirty:u,ctx:f}),K3.$set(R9e);const P9e={};u&2&&(P9e.$$scope={dirty:u,ctx:f}),e5.$set(P9e);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),r5.$set(nA);const B9e={};u&2&&(B9e.$$scope={dirty:u,ctx:f}),a5.$set(B9e);const I9e={};u&2&&(I9e.$$scope={dirty:u,ctx:f}),s5.$set(I9e);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),P5.$set(sA);const N9e={};u&2&&(N9e.$$scope={dirty:u,ctx:f}),I5.$set(N9e);const q9e={};u&2&&(q9e.$$scope={dirty:u,ctx:f}),Q5.$set(q9e);const lA={};u&2&&(lA.$$scope={dirty:u,ctx:f}),H5.$set(lA);const j9e={};u&2&&(j9e.$$scope={dirty:u,ctx:f}),d0.$set(j9e);const D9e={};u&2&&(D9e.$$scope={dirty:u,ctx:f}),f0.$set(D9e);const iA={};u&2&&(iA.$$scope={dirty:u,ctx:f}),M0.$set(iA);const G9e={};u&2&&(G9e.$$scope={dirty:u,ctx:f}),C0.$set(G9e);const O9e={};u&2&&(O9e.$$scope={dirty:u,ctx:f}),B0.$set(O9e);const dA={};u&2&&(dA.$$scope={dirty:u,ctx:f}),N0.$set(dA);const V9e={};u&2&&(V9e.$$scope={dirty:u,ctx:f}),U0.$set(V9e);const X9e={};u&2&&(X9e.$$scope={dirty:u,ctx:f}),J0.$set(X9e);const cA={};u&2&&(cA.$$scope={dirty:u,ctx:f}),lw.$set(cA);const z9e={};u&2&&(z9e.$$scope={dirty:u,ctx:f}),dw.$set(z9e);const W9e={};u&2&&(W9e.$$scope={dirty:u,ctx:f}),bw.$set(W9e);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),Fw.$set(fA);const Q9e={};u&2&&(Q9e.$$scope={dirty:u,ctx:f}),xw.$set(Q9e);const U9e={};u&2&&(U9e.$$scope={dirty:u,ctx:f}),kw.$set(U9e);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),Rw.$set(mA);const H9e={};u&2&&(H9e.$$scope={dirty:u,ctx:f}),Bw.$set(H9e);const J9e={};u&2&&(J9e.$$scope={dirty:u,ctx:f}),qw.$set(J9e);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),Dw.$set(gA);const Y9e={};u&2&&(Y9e.$$scope={dirty:u,ctx:f}),Ow.$set(Y9e)},i(f){fJe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(nm.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(Ey.$$.fragment,f),E(Th.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(xy.$$.fragment,f),E(tp.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Xp.$$.fragment,f),E(zp.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Gy.$$.fragment,f),E(h_.$$.fragment,f),E(p_.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(b_.$$.fragment,f),E(Qy.$$.fragment,f),E(L1.$$.fragment,f),E(Uy.$$.fragment,f),E(Hy.$$.fragment,f),E(Yy.$$.fragment,f),E(x1.$$.fragment,f),E(Ky.$$.fragment,f),E(C8.$$.fragment,f),E(Zy.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(A8.$$.fragment,f),E(t9.$$.fragment,f),E(h2.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(_2.$$.fragment,f),E(i9.$$.fragment,f),E(rb.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(ab.$$.fragment,f),E(g9.$$.fragment,f),E(wb.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(Lb.$$.fragment,f),E(b9.$$.fragment,f),E(Lv.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(xv.$$.fragment,f),E(E9.$$.fragment,f),E(iF.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(cF.$$.fragment,f),E(y9.$$.fragment,f),E(bF.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(FF.$$.fragment,f),E(R9.$$.fragment,f),E(n6.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(l6.$$.fragment,f),E(q9.$$.fragment,f),E(K6.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(eT.$$.fragment,f),E(V9.$$.fragment,f),E(tT.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(nT.$$.fragment,f),E(U9.$$.fragment,f),E(TT.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(ET.$$.fragment,f),E(Z9.$$.fragment,f),E(AT.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(yT.$$.fragment,f),E(ax.$$.fragment,f),E(kT.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(RT.$$.fragment,f),E(dx.$$.fragment,f),E(IT.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(qT.$$.fragment,f),E(hx.$$.fragment,f),E(HT.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(YT.$$.fragment,f),E(vx.$$.fragment,f),E(a7.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(s7.$$.fragment,f),E(Cx.$$.fragment,f),E(b7.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(F7.$$.fragment,f),E(xx.$$.fragment,f),E(C7.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(A7.$$.fragment,f),E(Bx.$$.fragment,f),E(R7.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(B7.$$.fragment,f),E(Dx.$$.fragment,f),E(G7.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(V7.$$.fragment,f),E(zx.$$.fragment,f),E(Q7.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(H7.$$.fragment,f),E(Yx.$$.fragment,f),E(K7.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(eM.$$.fragment,f),E(r$.$$.fragment,f),E(lM.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(dM.$$.fragment,f),E(l$.$$.fragment,f),E(mM.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(hM.$$.fragment,f),E(m$.$$.fragment,f),E(mE.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(hE.$$.fragment,f),E(u$.$$.fragment,f),E(qE.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(DE.$$.fragment,f),E(M$.$$.fragment,f),E(e4.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(r4.$$.fragment,f),E(L$.$$.fragment,f),E(c4.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(m4.$$.fragment,f),E(S$.$$.fragment,f),E(p4.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(u4.$$.fragment,f),E(q$.$$.fragment,f),E(q4.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(D4.$$.fragment,f),E(V$.$$.fragment,f),E(Y4.$$.fragment,f),E(X$.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E(Z4.$$.fragment,f),E(U$.$$.fragment,f),E(LC.$$.fragment,f),E(H$.$$.fragment,f),E(J$.$$.fragment,f),E(K$.$$.fragment,f),E(xC.$$.fragment,f),E(Z$.$$.fragment,f),E(QC.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(HC.$$.fragment,f),E(ak.$$.fragment,f),E(KC.$$.fragment,f),E(sk.$$.fragment,f),E(lk.$$.fragment,f),E(dk.$$.fragment,f),E(e3.$$.fragment,f),E(ck.$$.fragment,f),E(r3.$$.fragment,f),E(fk.$$.fragment,f),E(mk.$$.fragment,f),E(hk.$$.fragment,f),E(a3.$$.fragment,f),E(pk.$$.fragment,f),E(A3.$$.fragment,f),E(_k.$$.fragment,f),E(uk.$$.fragment,f),E(vk.$$.fragment,f),E(y3.$$.fragment,f),E(Fk.$$.fragment,f),E(J3.$$.fragment,f),E(Tk.$$.fragment,f),E(Mk.$$.fragment,f),E(Ck.$$.fragment,f),E(K3.$$.fragment,f),E(wk.$$.fragment,f),E(e5.$$.fragment,f),E(Ak.$$.fragment,f),E(Lk.$$.fragment,f),E(xk.$$.fragment,f),E(r5.$$.fragment,f),E($k.$$.fragment,f),E(a5.$$.fragment,f),E(kk.$$.fragment,f),E(Sk.$$.fragment,f),E(Pk.$$.fragment,f),E(s5.$$.fragment,f),E(Bk.$$.fragment,f),E(P5.$$.fragment,f),E(Ik.$$.fragment,f),E(Nk.$$.fragment,f),E(jk.$$.fragment,f),E(I5.$$.fragment,f),E(Dk.$$.fragment,f),E(Q5.$$.fragment,f),E(Gk.$$.fragment,f),E(Ok.$$.fragment,f),E(Xk.$$.fragment,f),E(H5.$$.fragment,f),E(zk.$$.fragment,f),E(d0.$$.fragment,f),E(Wk.$$.fragment,f),E(Qk.$$.fragment,f),E(Hk.$$.fragment,f),E(f0.$$.fragment,f),E(Jk.$$.fragment,f),E(M0.$$.fragment,f),E(Yk.$$.fragment,f),E(Kk.$$.fragment,f),E(eS.$$.fragment,f),E(C0.$$.fragment,f),E(oS.$$.fragment,f),E(B0.$$.fragment,f),E(rS.$$.fragment,f),E(tS.$$.fragment,f),E(nS.$$.fragment,f),E(N0.$$.fragment,f),E(sS.$$.fragment,f),E(U0.$$.fragment,f),E(lS.$$.fragment,f),E(iS.$$.fragment,f),E(cS.$$.fragment,f),E(J0.$$.fragment,f),E(fS.$$.fragment,f),E(lw.$$.fragment,f),E(mS.$$.fragment,f),E(gS.$$.fragment,f),E(pS.$$.fragment,f),E(dw.$$.fragment,f),E(_S.$$.fragment,f),E(bw.$$.fragment,f),E(uS.$$.fragment,f),E(bS.$$.fragment,f),E(FS.$$.fragment,f),E(Fw.$$.fragment,f),E(TS.$$.fragment,f),E(xw.$$.fragment,f),E(MS.$$.fragment,f),E(ES.$$.fragment,f),E(wS.$$.fragment,f),E(kw.$$.fragment,f),E(AS.$$.fragment,f),E(Rw.$$.fragment,f),E(LS.$$.fragment,f),E(yS.$$.fragment,f),E($S.$$.fragment,f),E(Bw.$$.fragment,f),E(kS.$$.fragment,f),E(qw.$$.fragment,f),E(RS.$$.fragment,f),E(PS.$$.fragment,f),E(IS.$$.fragment,f),E(Dw.$$.fragment,f),E(NS.$$.fragment,f),E(Ow.$$.fragment,f),fJe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(nm.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(Ey.$$.fragment,f),C(Th.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(xy.$$.fragment,f),C(tp.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Xp.$$.fragment,f),C(zp.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Gy.$$.fragment,f),C(h_.$$.fragment,f),C(p_.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(b_.$$.fragment,f),C(Qy.$$.fragment,f),C(L1.$$.fragment,f),C(Uy.$$.fragment,f),C(Hy.$$.fragment,f),C(Yy.$$.fragment,f),C(x1.$$.fragment,f),C(Ky.$$.fragment,f),C(C8.$$.fragment,f),C(Zy.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(A8.$$.fragment,f),C(t9.$$.fragment,f),C(h2.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(_2.$$.fragment,f),C(i9.$$.fragment,f),C(rb.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(ab.$$.fragment,f),C(g9.$$.fragment,f),C(wb.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(Lb.$$.fragment,f),C(b9.$$.fragment,f),C(Lv.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(xv.$$.fragment,f),C(E9.$$.fragment,f),C(iF.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(cF.$$.fragment,f),C(y9.$$.fragment,f),C(bF.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(FF.$$.fragment,f),C(R9.$$.fragment,f),C(n6.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(l6.$$.fragment,f),C(q9.$$.fragment,f),C(K6.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(eT.$$.fragment,f),C(V9.$$.fragment,f),C(tT.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(nT.$$.fragment,f),C(U9.$$.fragment,f),C(TT.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(ET.$$.fragment,f),C(Z9.$$.fragment,f),C(AT.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(yT.$$.fragment,f),C(ax.$$.fragment,f),C(kT.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(RT.$$.fragment,f),C(dx.$$.fragment,f),C(IT.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(qT.$$.fragment,f),C(hx.$$.fragment,f),C(HT.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(YT.$$.fragment,f),C(vx.$$.fragment,f),C(a7.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(s7.$$.fragment,f),C(Cx.$$.fragment,f),C(b7.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(F7.$$.fragment,f),C(xx.$$.fragment,f),C(C7.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(A7.$$.fragment,f),C(Bx.$$.fragment,f),C(R7.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(B7.$$.fragment,f),C(Dx.$$.fragment,f),C(G7.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(V7.$$.fragment,f),C(zx.$$.fragment,f),C(Q7.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(H7.$$.fragment,f),C(Yx.$$.fragment,f),C(K7.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(eM.$$.fragment,f),C(r$.$$.fragment,f),C(lM.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(dM.$$.fragment,f),C(l$.$$.fragment,f),C(mM.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(hM.$$.fragment,f),C(m$.$$.fragment,f),C(mE.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(hE.$$.fragment,f),C(u$.$$.fragment,f),C(qE.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(DE.$$.fragment,f),C(M$.$$.fragment,f),C(e4.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(r4.$$.fragment,f),C(L$.$$.fragment,f),C(c4.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(m4.$$.fragment,f),C(S$.$$.fragment,f),C(p4.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(u4.$$.fragment,f),C(q$.$$.fragment,f),C(q4.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(D4.$$.fragment,f),C(V$.$$.fragment,f),C(Y4.$$.fragment,f),C(X$.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C(Z4.$$.fragment,f),C(U$.$$.fragment,f),C(LC.$$.fragment,f),C(H$.$$.fragment,f),C(J$.$$.fragment,f),C(K$.$$.fragment,f),C(xC.$$.fragment,f),C(Z$.$$.fragment,f),C(QC.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(HC.$$.fragment,f),C(ak.$$.fragment,f),C(KC.$$.fragment,f),C(sk.$$.fragment,f),C(lk.$$.fragment,f),C(dk.$$.fragment,f),C(e3.$$.fragment,f),C(ck.$$.fragment,f),C(r3.$$.fragment,f),C(fk.$$.fragment,f),C(mk.$$.fragment,f),C(hk.$$.fragment,f),C(a3.$$.fragment,f),C(pk.$$.fragment,f),C(A3.$$.fragment,f),C(_k.$$.fragment,f),C(uk.$$.fragment,f),C(vk.$$.fragment,f),C(y3.$$.fragment,f),C(Fk.$$.fragment,f),C(J3.$$.fragment,f),C(Tk.$$.fragment,f),C(Mk.$$.fragment,f),C(Ck.$$.fragment,f),C(K3.$$.fragment,f),C(wk.$$.fragment,f),C(e5.$$.fragment,f),C(Ak.$$.fragment,f),C(Lk.$$.fragment,f),C(xk.$$.fragment,f),C(r5.$$.fragment,f),C($k.$$.fragment,f),C(a5.$$.fragment,f),C(kk.$$.fragment,f),C(Sk.$$.fragment,f),C(Pk.$$.fragment,f),C(s5.$$.fragment,f),C(Bk.$$.fragment,f),C(P5.$$.fragment,f),C(Ik.$$.fragment,f),C(Nk.$$.fragment,f),C(jk.$$.fragment,f),C(I5.$$.fragment,f),C(Dk.$$.fragment,f),C(Q5.$$.fragment,f),C(Gk.$$.fragment,f),C(Ok.$$.fragment,f),C(Xk.$$.fragment,f),C(H5.$$.fragment,f),C(zk.$$.fragment,f),C(d0.$$.fragment,f),C(Wk.$$.fragment,f),C(Qk.$$.fragment,f),C(Hk.$$.fragment,f),C(f0.$$.fragment,f),C(Jk.$$.fragment,f),C(M0.$$.fragment,f),C(Yk.$$.fragment,f),C(Kk.$$.fragment,f),C(eS.$$.fragment,f),C(C0.$$.fragment,f),C(oS.$$.fragment,f),C(B0.$$.fragment,f),C(rS.$$.fragment,f),C(tS.$$.fragment,f),C(nS.$$.fragment,f),C(N0.$$.fragment,f),C(sS.$$.fragment,f),C(U0.$$.fragment,f),C(lS.$$.fragment,f),C(iS.$$.fragment,f),C(cS.$$.fragment,f),C(J0.$$.fragment,f),C(fS.$$.fragment,f),C(lw.$$.fragment,f),C(mS.$$.fragment,f),C(gS.$$.fragment,f),C(pS.$$.fragment,f),C(dw.$$.fragment,f),C(_S.$$.fragment,f),C(bw.$$.fragment,f),C(uS.$$.fragment,f),C(bS.$$.fragment,f),C(FS.$$.fragment,f),C(Fw.$$.fragment,f),C(TS.$$.fragment,f),C(xw.$$.fragment,f),C(MS.$$.fragment,f),C(ES.$$.fragment,f),C(wS.$$.fragment,f),C(kw.$$.fragment,f),C(AS.$$.fragment,f),C(Rw.$$.fragment,f),C(LS.$$.fragment,f),C(yS.$$.fragment,f),C($S.$$.fragment,f),C(Bw.$$.fragment,f),C(kS.$$.fragment,f),C(qw.$$.fragment,f),C(RS.$$.fragment,f),C(PS.$$.fragment,f),C(IS.$$.fragment,f),C(Dw.$$.fragment,f),C(NS.$$.fragment,f),C(Ow.$$.fragment,f),fJe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(em),f&&t(ft),f&&t(Oe),f&&t(Qe),f&&t(rm),w(ja,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(rUe),f&&t(Hi),w(uy),f&&t(tUe),f&&t(Un),f&&t(aUe),w(by,f),f&&t(nUe),f&&t(mP),f&&t(sUe),w(nm,f),f&&t(lUe),f&&t(Ji),w(vy),f&&t(iUe),f&&t(yo),w(Fy),w(Ey),w(Th),w(Cy),f&&t(dUe),f&&t(Ki),w(wy),f&&t(cUe),f&&t(xo),w(Ay),w(xy),w(tp),w($y),f&&t(fUe),f&&t(Zi),w(ky),f&&t(mUe),f&&t($o),w(Sy),w(By),w(Xp),w(zp),w(Iy),f&&t(gUe),f&&t(ed),w(Ny),f&&t(hUe),f&&t(ko),w(qy),w(Gy),w(h_),w(p_),w(Oy),f&&t(pUe),f&&t(rd),w(Vy),f&&t(_Ue),f&&t(So),w(Xy),w(Wy),w(b_),w(Qy),w(L1),f&&t(uUe),f&&t(nd),w(Uy),f&&t(bUe),f&&t(Ro),w(Hy),w(Yy),w(x1),w(Ky),w(C8),f&&t(vUe),f&&t(id),w(Zy),f&&t(FUe),f&&t(Po),w(e9),w(r9),w(A8),w(t9),w(h2),f&&t(TUe),f&&t(fd),w(a9),f&&t(MUe),f&&t(Bo),w(n9),w(l9),w(_2),w(i9),w(rb),f&&t(EUe),f&&t(hd),w(d9),f&&t(CUe),f&&t(Io),w(c9),w(m9),w(ab),w(g9),w(wb),f&&t(wUe),f&&t(ud),w(h9),f&&t(AUe),f&&t(No),w(p9),w(u9),w(Lb),w(b9),w(Lv),f&&t(LUe),f&&t(Fd),w(v9),f&&t(yUe),f&&t(qo),w(F9),w(M9),w(xv),w(E9),w(iF),f&&t(xUe),f&&t(Ed),w(C9),f&&t($Ue),f&&t(jo),w(w9),w(L9),w(cF),w(y9),w(bF),f&&t(kUe),f&&t(Ad),w(x9),f&&t(SUe),f&&t(Go),w($9),w(S9),w(FF),w(R9),w(n6),f&&t(RUe),f&&t(xd),w(P9),f&&t(PUe),f&&t(Oo),w(B9),w(N9),w(l6),w(q9),w(K6),f&&t(BUe),f&&t(Sd),w(j9),f&&t(IUe),f&&t(Vo),w(D9),w(O9),w(eT),w(V9),w(tT),f&&t(NUe),f&&t(Bd),w(X9),f&&t(qUe),f&&t(Xo),w(z9),w(Q9),w(nT),w(U9),w(TT),f&&t(jUe),f&&t(qd),w(H9),f&&t(DUe),f&&t(zo),w(J9),w(K9),w(ET),w(Z9),w(AT),f&&t(GUe),f&&t(Gd),w(ex),f&&t(OUe),f&&t(Wo),w(ox),w(tx),w(yT),w(ax),w(kT),f&&t(VUe),f&&t(Xd),w(nx),f&&t(XUe),f&&t(Qo),w(sx),w(ix),w(RT),w(dx),w(IT),f&&t(zUe),f&&t(Qd),w(cx),f&&t(WUe),f&&t(Uo),w(fx),w(gx),w(qT),w(hx),w(HT),f&&t(QUe),f&&t(Jd),w(px),f&&t(UUe),f&&t(Ho),w(_x),w(bx),w(YT),w(vx),w(a7),f&&t(HUe),f&&t(Zd),w(Fx),f&&t(JUe),f&&t(Jo),w(Tx),w(Ex),w(s7),w(Cx),w(b7),f&&t(YUe),f&&t(rc),w(wx),f&&t(KUe),f&&t(Yo),w(Ax),w(yx),w(F7),w(xx),w(C7),f&&t(ZUe),f&&t(nc),w(kx),f&&t(eHe),f&&t(Ko),w(Sx),w(Px),w(A7),w(Bx),w(R7),f&&t(oHe),f&&t(ic),w(Ix),f&&t(rHe),f&&t(Zo),w(Nx),w(jx),w(B7),w(Dx),w(G7),f&&t(tHe),f&&t(fc),w(Gx),f&&t(aHe),f&&t(er),w(Ox),w(Xx),w(V7),w(zx),w(Q7),f&&t(nHe),f&&t(hc),w(Qx),f&&t(sHe),f&&t(or),w(Ux),w(Jx),w(H7),w(Yx),w(K7),f&&t(lHe),f&&t(uc),w(Kx),f&&t(iHe),f&&t(rr),w(Zx),w(o$),w(eM),w(r$),w(lM),f&&t(dHe),f&&t(Fc),w(t$),f&&t(cHe),f&&t(tr),w(a$),w(s$),w(dM),w(l$),w(mM),f&&t(fHe),f&&t(Ec),w(i$),f&&t(mHe),f&&t(ar),w(d$),w(f$),w(hM),w(m$),w(mE),f&&t(gHe),f&&t(Ac),w(g$),f&&t(hHe),f&&t(nr),w(h$),w(_$),w(hE),w(u$),w(qE),f&&t(pHe),f&&t(xc),w(b$),f&&t(_He),f&&t(sr),w(v$),w(T$),w(DE),w(M$),w(e4),f&&t(uHe),f&&t(Sc),w(E$),f&&t(bHe),f&&t(lr),w(C$),w(A$),w(r4),w(L$),w(c4),f&&t(vHe),f&&t(Bc),w(y$),f&&t(FHe),f&&t(ir),w(x$),w(k$),w(m4),w(S$),w(p4),f&&t(THe),f&&t(qc),w(P$),f&&t(MHe),f&&t(dr),w(B$),w(N$),w(u4),w(q$),w(q4),f&&t(EHe),f&&t(Gc),w(j$),f&&t(CHe),f&&t(cr),w(D$),w(O$),w(D4),w(V$),w(Y4),f&&t(wHe),f&&t(Xc),w(X$),f&&t(AHe),f&&t(fr),w(z$),w(Q$),w(Z4),w(U$),w(LC),f&&t(LHe),f&&t(Qc),w(H$),f&&t(yHe),f&&t(mr),w(J$),w(K$),w(xC),w(Z$),w(QC),f&&t(xHe),f&&t(Jc),w(ek),f&&t($He),f&&t(gr),w(ok),w(tk),w(HC),w(ak),w(KC),f&&t(kHe),f&&t(Zc),w(sk),f&&t(SHe),f&&t(hr),w(lk),w(dk),w(e3),w(ck),w(r3),f&&t(RHe),f&&t(rf),w(fk),f&&t(PHe),f&&t(pr),w(mk),w(hk),w(a3),w(pk),w(A3),f&&t(BHe),f&&t(nf),w(_k),f&&t(IHe),f&&t(_r),w(uk),w(vk),w(y3),w(Fk),w(J3),f&&t(NHe),f&&t(df),w(Tk),f&&t(qHe),f&&t(ur),w(Mk),w(Ck),w(K3),w(wk),w(e5),f&&t(jHe),f&&t(mf),w(Ak),f&&t(DHe),f&&t(br),w(Lk),w(xk),w(r5),w($k),w(a5),f&&t(GHe),f&&t(pf),w(kk),f&&t(OHe),f&&t(vr),w(Sk),w(Pk),w(s5),w(Bk),w(P5),f&&t(VHe),f&&t(bf),w(Ik),f&&t(XHe),f&&t(Fr),w(Nk),w(jk),w(I5),w(Dk),w(Q5),f&&t(zHe),f&&t(Tf),w(Gk),f&&t(WHe),f&&t(Tr),w(Ok),w(Xk),w(H5),w(zk),w(d0),f&&t(QHe),f&&t(Cf),w(Wk),f&&t(UHe),f&&t(Mr),w(Qk),w(Hk),w(f0),w(Jk),w(M0),f&&t(HHe),f&&t(Lf),w(Yk),f&&t(JHe),f&&t(Er),w(Kk),w(eS),w(C0),w(oS),w(B0),f&&t(YHe),f&&t($f),w(rS),f&&t(KHe),f&&t(Cr),w(tS),w(nS),w(N0),w(sS),w(U0),f&&t(ZHe),f&&t(Rf),w(lS),f&&t(eJe),f&&t(wr),w(iS),w(cS),w(J0),w(fS),w(lw),f&&t(oJe),f&&t(If),w(mS),f&&t(rJe),f&&t(Ar),w(gS),w(pS),w(dw),w(_S),w(bw),f&&t(tJe),f&&t(jf),w(uS),f&&t(aJe),f&&t(Lr),w(bS),w(FS),w(Fw),w(TS),w(xw),f&&t(nJe),f&&t(Of),w(MS),f&&t(sJe),f&&t(yr),w(ES),w(wS),w(kw),w(AS),w(Rw),f&&t(lJe),f&&t(zf),w(LS),f&&t(iJe),f&&t(xr),w(yS),w($S),w(Bw),w(kS),w(qw),f&&t(dJe),f&&t(Uf),w(RS),f&&t(cJe),f&&t($r),w(PS),w(IS),w(Dw),w(NS),w(Ow)}}}const Sna={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Rna($){return Lta(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Dna extends Eta{constructor(g){super();Cta(this,g,Rna,kna,wta,{})}}export{Dna as default,Sna as metadata};
